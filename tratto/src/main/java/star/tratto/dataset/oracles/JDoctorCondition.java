package star.tratto.dataset.oracles;

import com.fasterxml.jackson.annotation.JsonProperty;

import java.util.List;
import java.util.concurrent.locks.Condition;

/**
 * The record models the features of a JDoctor condition.
 * The attributes of the class are:
 * <ol>
 *     <li><span>operation</span>: A record object of type {@link Operation}, containing the information about the
 *     qualified name of the method to which the JDoctor conditions refers, the qualified name of the class where the
 *     method is defined, and the list of type names of the parameters of the method.</li>
 *     <li><span>identifiers</span> A record object of type {@link Identifiers}, containing the information about the
 *     list of the names of the parameters of the method to which the JDoctor condition refers, the reference name of the
 *     class where the method is defined, within the oracle generated by JDoctor (always *receiverObjectID*), and the
 *     reference name of the return type of the method, within the oracle generated by JDoctor (always *methodResultID*).</li>
 *     <li><span>throwsConditions</span> A list of record objects of type {@link ThrowsCondition}, containing the
 *     information about each JDoctor exceptional condition produced, given the method to which the JDoctor condition refers.</li>
 *     <li><span>postConditions</span> A list of record objects of type {@link PostCondition}, containing the information
 *     about each JDoctor post-condition produced, given the method to which the JDoctor condition refers.</li>
 *     <li><span>preConditions</span> A list of record objects of type {@link PreCondition}, containing the information
 *     about each JDoctor pre-condition produced, given the method to which the JDoctor condition refers.</li>
 * </ol>

 */
public class JDoctorCondition {
    @JsonProperty("operation")
    private Operation operation;
    @JsonProperty("identifiers")
    private Identifiers identifiers;
    @JsonProperty("throws")
    private List<ThrowsCondition> throwsConditions;
    @JsonProperty("post")
    private List<PostCondition> postConditions;
    @JsonProperty("pre")
    private List<PreCondition> preCondition;

    /**
     * The inner record models the operation object of a JDoctor condition.
     * The attributes of the class are:
     * <ol>
     *     <li><span>classname</span> The qualified name of the class where the method to which the JDoctor conditions
     *     refers is defined.</li>
     *     <li><span>name</span> The qualified name of the method to which the JDoctor conditions refers.</li>
     *     <li><span>parameterTypes</span> The list of type names of the parameters of the method to which the JDoctor
     *     conditions refers.</li>
     * </ol>
     */
    public class Operation{
        @JsonProperty("classname")
        private String classname;
        @JsonProperty("name")
        private String name;
        @JsonProperty("parameterTypes")
        private List<String> parameterTypes;
    }

    /**
     * The inner record models the identifiers object of a JDoctor condition.
     * The attributes of the class are:
     * <ol>
     *     <li><span>parameters</span> The list of the names of the parameters of the method to which the JDoctor
     *     condition refers.</li>
     *     <li><span>receiverName</span> The reference name of the class where the method is defined, within the oracle
     *     generated by JDoctor (always *receiverObjectID*).</li>
     *     <li><span>returnName</span> The reference name of the return type of the method, within the oracle generated
     *     by JDoctor (always *methodResultID*).</li>
     * </ol>
     */
    public class Identifiers{
        @JsonProperty("parameters")
        private List<String> parameters;
        @JsonProperty("receiverName")
        private String receiverName;
        @JsonProperty("returnName")
        private String returnName;
    }

    /**
     * The inner record models a JDoctor exceptional condition object.
     * The attributes of the class are:
     * <ol>
     *     <li><span>exception</span> The exception captured by JDoctor.</li>
     *     <li><span>description</span> The @throws tag description of the exception, in the corresponding Javadoc comment
     *     of the method to which the JDoctor condition refers.</li>
     *     <li><span>guard</span> The guard object of the JDoctor exceptional condition. It contains the oracle generated
     *     from the description of the exceptional condition, in the Javadoc comment, and the textual representation of
     *     the oracle, i.e. the exact substring of the description that indicates the condition for which the exception
     *     is thrown.</li>
     * </ol>
     */
    public class ThrowsCondition {
        @JsonProperty("exception")
        private String exception;
        @JsonProperty("description")
        private String description;
        @JsonProperty("guard")
        private Guard guard;
    }

    /**
     * The inner record models a JDoctor post-condition object.
     * The attributes of the class are:
     * <ol>
     *     <li><span>property</span></li> The property object of the JDoctor post-condition. It contains the oracle and
     *     the textual description of the JDoctor post-condition.
     *     <li><span>description</span></li> The textual description of the JDoctor post-condition.
     *     <li><span>guard</span></li> The guard object of the JDoctor post-condition. It contains the condition for which
     *     the oracle of the post-condition must be verified. In other words, if the guard condition is true, the
     *     corresponding oracle must be true as well. Moreover, it contains the textual description of the guard condition.
     * </ol>
     */
    public class PostCondition {
        @JsonProperty("property")
        private Property property;
        @JsonProperty("description")
        private String description;
        @JsonProperty("guard") Guard guard;
    }

    /**
     * The inner record models a JDoctor pre-condition object.
     * The attributes of the class are:
     * <ol>
     *     <li><span>description</span> The textual description of the JDoctor pre-condition.</li>
     *     <li><span>guard</span> The guard object of the JDoctor pre-condition. It contains the condition for which the
     *     JDoctor pre-condition is verified. Moreover, it contains the textual description of the guard condition.</li>
     * </ol>
     */
    public class PreCondition {
        @JsonProperty("description")
        private String description;
        @JsonProperty("guard")
        private Guard guard;
    }


    /**
     * The inner record models a guard object of a JDoctor condition.
     * The attributes of the class are:
     * <ol>
     *     <li><span>condition</span> The condition for which a JDoctor pre-condition must be verified, or a JDoctor
     *     post-condition oracle must be verified, or a JDoctor exceptional condition must be thrown.</li>
     *     <li><span>description</span> The textual description of the guard JDoctor condition.</li>
     * </ol>
     */
    public class Guard{
        @JsonProperty("condition")
        private String condition;
        @JsonProperty("description")
        private String description;
    }

    /**
     * The inner record models a property object of a JDoctor post-condition.
     * The attributes of the class are:
     * <ol>
     *     <li><span>condition</span> The oracle of a post-condition that must be verified if the corresponding guard
     *     condition is true.</li>
     *     <li><span>description</span> The textual description of the JDoctor post-condition oracle.</li>
     * </ol>
     */
    public class Property {
        @JsonProperty("condition")
        private String condition;
        @JsonProperty("description")
        private String description;
    }

    public Operation getOperation() {
        return this.operation;
    }

    public Identifiers getIdentifiers() {
        return this.identifiers;
    }

    public List<ThrowsCondition> getThrowsConditions() {
        return this.throwsConditions;
    }

    public List<PreCondition> getPreCondition() {
        return this.preCondition;
    }

    public List<PostCondition> getPostConditions() {
        return this.postConditions;
    }
}
