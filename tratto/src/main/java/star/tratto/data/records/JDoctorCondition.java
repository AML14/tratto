package star.tratto.data.records;

import com.fasterxml.jackson.annotation.JsonProperty;

import java.util.List;

/**
 * A JDoctor condition for a method.
 *
 * @param operation the contextual information of a method under test
 * @param identifiers additional contextual identifier of the method under test
 * @param throwsCondition exceptional post-conditions
 * @param postConditions normal post-conditions
 * @param preConditions pre-conditions
 */
public record JDoctorCondition(
        @JsonProperty("operation") Operation operation,
        @JsonProperty("identifiers") Identifiers identifiers,
        @JsonProperty("throws") List<ThrowsCondition> throwsCondition,
        @JsonProperty("post") List<PostCondition> postConditions,
        @JsonProperty("pre") List<PreCondition> preConditions
) {
    /**
     * The operation of a JDoctor condition. Provides contextual information
     * of the method under test.
     *
     * @param className the qualified name for the declaring class of the
     *                  method which the JDoctor condition refers to
     * @param methodName the qualified name of the method which the JDoctor
     *                   condition refers to
     * @param parameterTypes the list of parameter type names for the method
     *                       which the JDoctor condition refers to
     */
    public record Operation(
            @JsonProperty("classname") String className,
            @JsonProperty("name") String methodName,
            @JsonProperty("parameterTypes") List<String> parameterTypes
    ) {}

    /**
     * The identifiers of a JDoctor condition. Provides the names of variables
     * in the JDoctor condition.
     *
     * @param parameters the list of names of the parameters for the method
     *                   which the JDoctor condition refers to
     * @param receiverName the name of the class where the method is defined,
     *                     within the oracle generated by JDoctor (always
     *                     *receiverObjectID*)
     * @param returnName the name of the return type of the method, within the
     *                   oracle generated by JDoctor (always *methodResultID*)
     */
    public record Identifiers(
            @JsonProperty("parameters") List<String> parameters,
            @JsonProperty("receiverName") String receiverName,
            @JsonProperty("returnName") String returnName
    ) {}

    /**
     * Defines an exceptional JDoctor condition
     *
     * @param exception the exception captured by JDoctor
     * @param description the @throws tag description of the exception, in
     *                    the corresponding Javadoc comment of the method to
     *                    which the JDoctor condition refers
     * @param guard the guard of the condition. It contains the oracle generated
     *              from the description of the exceptional condition, in the Javadoc comment, and the textual representation of
     *              the oracle, i.e. the exact substring of the description that indicates the condition for which the exception
     *              is thrown
     */
    public record ThrowsCondition(
            @JsonProperty("exception") String exception,
            @JsonProperty("description") String description,
            @JsonProperty("guard") Guard guard
    ) {}

    /**
     * A JDoctor post-condition.
     *
     * @param property the property of the JDoctor post-condition. It contains
     *                 the oracle and the textual description of the JDoctor
     *                 post-condition.
     * @param description the textual description of the JDoctor post-condition
     * @param guard the guard of the JDoctor post-condition. It contains the
     *              condition for which the oracle of the post-condition must
     *              be verified. If the guard condition is true, the
     *              corresponding oracle must be true as well. Moreover, it
     *              contains the textual description of the guard condition.
     */
    public record PostCondition(
            @JsonProperty("property") Property property,
            @JsonProperty("description") String description,
            @JsonProperty("guard") Guard guard
    ) {}

    /**
     * A JDoctor pre-condition.
     *
     * @param description the textual description of the JDoctor pre-condition
     * @param guard the guard of the JDoctor pre-condition. It contains the
     *              condition for which the JDoctor pre-condition is verified.
     *              Moreover, it contains the textual description of the guard.
     */
    public record PreCondition(
            @JsonProperty("description") String description,
            @JsonProperty("guard") Guard guard
    ) {}

    /**
     * A guard of a JDoctor condition.
     *
     * @param condition the condition for which a JDoctor pre-condition must
     *                  be true, or a JDoctor post-condition must be true, or
     *                  a JDoctor exceptional condition must be thrown
     * @param description the textual description of the guard condition
     */
    public record Guard(
            @JsonProperty("condition") String condition,
            @JsonProperty("description") String description
    ) {}

    /**
     * A property of a JDoctor post-condition.
     *
     * @param condition the oracle that must be true if the corresponding
     *                  Guard condition is true
     * @param description the textual description of the JDoctor
     *                    post-condition oracle
     */
    public record Property(
            @JsonProperty("condition") String condition,
            @JsonProperty("description") String description
    ) {}
}
