[
  {
    "operation": {
      "classname": "com.google.common.collect.ConcurrentHashMultiset",
      "name": "com.google.common.collect.ConcurrentHashMultiset",
      "parameterTypes": [
        "java.util.concurrent.ConcurrentMap"
      ]
    },
    "identifiers": {
      "parameters": [
        "countMap"
      ],
      "receiverName": "receiverObjectID",
      "returnName": "methodResultID"
    },
    "throws": [
      {
        "exception": "java.lang.IllegalArgumentException",
        "description": "@throws java.lang.IllegalArgumentException countMap is not empty.",
        "guard": {
          "condition": "(countMap==null)==false && (countMap.isEmpty()) == false",
          "description": "countMap is not empty."
        }
      }
    ],
    "post": [],
    "pre": [
      {
        "description": "@param countMap backing map for storing the elements in the multiset and their counts.. countMap is empty.",
        "guard": {
          "condition": "(countMap==null)==false && countMap.isEmpty()",
          "description": "backing map for storing the elements in the multiset and their counts.. countMap is empty."
        }
      }
    ]
  },
  {
    "operation": {
      "classname": "com.google.common.collect.ConcurrentHashMultiset",
      "name": "add",
      "parameterTypes": [
        "java.lang.Object",
        "int"
      ]
    },
    "identifiers": {
      "parameters": [
        "element",
        "occurrences"
      ],
      "receiverName": "receiverObjectID",
      "returnName": "methodResultID"
    },
    "throws": [
      {
        "exception": "java.lang.IllegalArgumentException",
        "description": "@throws java.lang.IllegalArgumentException occurrences is negative or if the resulting amount would exceed Integer#MAX_VALUE.",
        "guard": {
          "condition": "occurrences<0",
          "description": "occurrences is negative or if the resulting amount would exceed Integer#MAX_VALUE."
        }
      }
    ],
    "post": [],
    "pre": []
  },
  {
    "operation": {
      "classname": "com.google.common.collect.ConcurrentHashMultiset",
      "name": "removeExactly",
      "parameterTypes": [
        "java.lang.Object",
        "int"
      ]
    },
    "identifiers": {
      "parameters": [
        "element",
        "occurrences"
      ],
      "receiverName": "receiverObjectID",
      "returnName": "methodResultID"
    },
    "throws": [
      {
        "exception": "java.lang.IllegalArgumentException",
        "description": "@throws java.lang.IllegalArgumentException occurrences is negative.",
        "guard": {
          "condition": "occurrences<0",
          "description": "occurrences is negative."
        }
      }
    ],
    "post": [],
    "pre": []
  },
  {
    "operation": {
      "classname": "com.google.common.collect.ConcurrentHashMultiset",
      "name": "setCount",
      "parameterTypes": [
        "java.lang.Object",
        "int"
      ]
    },
    "identifiers": {
      "parameters": [
        "element",
        "count"
      ],
      "receiverName": "receiverObjectID",
      "returnName": "methodResultID"
    },
    "throws": [
      {
        "exception": "java.lang.IllegalArgumentException",
        "description": "@throws java.lang.IllegalArgumentException count is negative.",
        "guard": {
          "condition": "count<0",
          "description": "count is negative."
        }
      }
    ],
    "post": [],
    "pre": []
  },
  {
    "operation": {
      "classname": "com.google.common.collect.ConcurrentHashMultiset",
      "name": "setCount",
      "parameterTypes": [
        "java.lang.Object",
        "int",
        "int"
      ]
    },
    "identifiers": {
      "parameters": [
        "element",
        "expectedOldCount",
        "newCount"
      ],
      "receiverName": "receiverObjectID",
      "returnName": "methodResultID"
    },
    "throws": [
      {
        "exception": "java.lang.IllegalArgumentException",
        "description": "@throws java.lang.IllegalArgumentException expectedOldCount or newCount is negative.",
        "guard": {
          "condition": "expectedOldCount<0 || newCount<0",
          "description": "expectedOldCount or newCount is negative."
        }
      }
    ],
    "post": [],
    "pre": []
  }
]