[
  {
    "operation": {
      "classname": "org.apache.commons.collections4.FluentIterable",
      "name": "empty",
      "parameterTypes": []
    },
    "identifiers": {
      "parameters": [],
      "receiverName": "receiverObjectID",
      "returnName": "methodResultID"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "methodResultID.isEmpty()==true",
          "description": "a new empty FluentIterable"
        },
        "description": "a new empty FluentIterable",
        "guard": {
          "condition": "true",
          "description": "a new empty FluentIterable"
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "org.apache.commons.collections4.FluentIterable",
      "name": "of",
      "parameterTypes": [
        "java.lang.Iterable"
      ]
    },
    "identifiers": {
      "parameters": [
        "iterable"
      ],
      "receiverName": "receiverObjectID",
      "returnName": "methodResultID"
    },
    "throws": [
      {
        "exception": "java.lang.NullPointerException",
        "description": "@throws java.lang.NullPointerException iterable is null.",
        "guard": {
          "condition": "iterable==null",
          "description": "iterable is null."
        }
      }
    ],
    "post": [
      {
        "property": {
          "condition": " methodResultID.contains(singleton)==true",
          "description": "a new FluentIterable containing the singleton"
        },
        "description": "a new FluentIterable containing the singleton",
        "guard": {
          "condition": "true",
          "description": "a new FluentIterable containing the singleton"
        }
      }
    ],
    "pre": [
      {
        "description": "@param iterable the iterable to wrap into a FluentIterable. iterable is not null.",
        "guard": {
          "condition": "(iterable==null) == false",
          "description": "the iterable to wrap into a FluentIterable. iterable is not null."
        }
      }
    ]
  },
  {
    "operation": {
      "classname": "org.apache.commons.collections4.FluentIterable",
      "name": "append",
      "parameterTypes": [
        "java.lang.Iterable"
      ]
    },
    "identifiers": {
      "parameters": [
        "other"
      ],
      "receiverName": "receiverObjectID",
      "returnName": "methodResultID"
    },
    "throws": [
      {
        "exception": "java.lang.NullPointerException",
        "description": "@throws java.lang.NullPointerException other is null.",
        "guard": {
          "condition": "other==null",
          "description": "other is null."
        }
      }
    ],
    "post": [],
    "pre": [
      {
        "description": "@param other the other iterable to combine. other is not null.",
        "guard": {
          "condition": "(other==null) == false",
          "description": "the other iterable to combine. other is not null."
        }
      }
    ]
  },
  {
    "operation": {
      "classname": "org.apache.commons.collections4.FluentIterable",
      "name": "collate",
      "parameterTypes": [
        "java.lang.Iterable"
      ]
    },
    "identifiers": {
      "parameters": [
        "other"
      ],
      "receiverName": "receiverObjectID",
      "returnName": "methodResultID"
    },
    "throws": [
      {
        "exception": "java.lang.NullPointerException",
        "description": "@throws java.lang.NullPointerException other is null.",
        "guard": {
          "condition": "other==null",
          "description": "other is null."
        }
      }
    ],
    "post": [],
    "pre": [
      {
        "description": "@param other the other iterable to collate. other is not null.",
        "guard": {
          "condition": "(other==null) == false",
          "description": "the other iterable to collate. other is not null."
        }
      }
    ]
  },
  {
    "operation": {
      "classname": "org.apache.commons.collections4.FluentIterable",
      "name": "collate",
      "parameterTypes": [
        "java.lang.Iterable",
        "java.util.Comparator"
      ]
    },
    "identifiers": {
      "parameters": [
        "other",
        "comparator"
      ],
      "receiverName": "receiverObjectID",
      "returnName": "methodResultID"
    },
    "throws": [
      {
        "exception": "java.lang.NullPointerException",
        "description": "@throws java.lang.NullPointerException other is null.",
        "guard": {
          "condition": "other==null",
          "description": "other is null."
        }
      }
    ],
    "post": [],
    "pre": [
      {
        "description": "@param other the other iterable to collate. other is not null.",
        "guard": {
          "condition": "(other==null) == false",
          "description": "the other iterable to collate. other is not null."
        }
      }
    ]
  },
  {
    "operation": {
      "classname": "org.apache.commons.collections4.FluentIterable",
      "name": "filter",
      "parameterTypes": [
        "org.apache.commons.collections4.Predicate"
      ]
    },
    "identifiers": {
      "parameters": [
        "predicate"
      ],
      "receiverName": "receiverObjectID",
      "returnName": "methodResultID"
    },
    "throws": [
      {
        "exception": "java.lang.NullPointerException",
        "description": "@throws java.lang.NullPointerException predicate is null.",
        "guard": {
          "condition": "predicate==null",
          "description": "predicate is null."
        }
      }
    ],
    "post": [],
    "pre": []
  },
  {
    "operation": {
      "classname": "org.apache.commons.collections4.FluentIterable",
      "name": "limit",
      "parameterTypes": [
        "long"
      ]
    },
    "identifiers": {
      "parameters": [
        "maxSize"
      ],
      "receiverName": "receiverObjectID",
      "returnName": "methodResultID"
    },
    "throws": [
      {
        "exception": "java.lang.IllegalArgumentException",
        "description": "@throws java.lang.IllegalArgumentException maxSize is negative.",
        "guard": {
          "condition": "maxSize<0",
          "description": "maxSize is negative."
        }
      }
    ],
    "post": [],
    "pre": []
  },
  {
    "operation": {
      "classname": "org.apache.commons.collections4.FluentIterable",
      "name": "skip",
      "parameterTypes": [
        "long"
      ]
    },
    "identifiers": {
      "parameters": [
        "elementsToSkip"
      ],
      "receiverName": "receiverObjectID",
      "returnName": "methodResultID"
    },
    "throws": [
      {
        "exception": "java.lang.IllegalArgumentException",
        "description": "@throws java.lang.IllegalArgumentException elementsToSkip is negative.",
        "guard": {
          "condition": "elementsToSkip<0",
          "description": "elementsToSkip is negative."
        }
      }
    ],
    "post": [],
    "pre": []
  },
  {
    "operation": {
      "classname": "org.apache.commons.collections4.FluentIterable",
      "name": "transform",
      "parameterTypes": [
        "org.apache.commons.collections4.Transformer"
      ]
    },
    "identifiers": {
      "parameters": [
        "transformer"
      ],
      "receiverName": "receiverObjectID",
      "returnName": "methodResultID"
    },
    "throws": [
      {
        "exception": "java.lang.NullPointerException",
        "description": "@throws java.lang.NullPointerException transformer is null.",
        "guard": {
          "condition": "transformer==null",
          "description": "transformer is null."
        }
      }
    ],
    "post": [],
    "pre": []
  },
  {
    "operation": {
      "classname": "org.apache.commons.collections4.FluentIterable",
      "name": "zip",
      "parameterTypes": [
        "java.lang.Iterable"
      ]
    },
    "identifiers": {
      "parameters": [
        "other"
      ],
      "receiverName": "receiverObjectID",
      "returnName": "methodResultID"
    },
    "throws": [
      {
        "exception": "java.lang.NullPointerException",
        "description": "@throws java.lang.NullPointerException other is null.",
        "guard": {
          "condition": "other==null",
          "description": "other is null."
        }
      }
    ],
    "post": [],
    "pre": [
      {
        "description": "@param other the other iterable to interleave. other is not null.",
        "guard": {
          "condition": "(other==null) == false",
          "description": "the other iterable to interleave. other is not null."
        }
      }
    ]
  },
  {
    "operation": {
      "classname": "org.apache.commons.collections4.FluentIterable",
      "name": "zip",
      "parameterTypes": [
        "[Ljava.lang.Iterable;"
      ]
    },
    "identifiers": {
      "parameters": [
        "others"
      ],
      "receiverName": "receiverObjectID",
      "returnName": "methodResultID"
    },
    "throws": [
      {
        "exception": "java.lang.NullPointerException",
        "description": "@throws java.lang.NullPointerException if either of the provided iterables is null.",
        "guard": {
          "condition": "Arrays.asList(others).contains(null)",
          "description": "if either of the provided iterables is null."
        }
      }
    ],
    "post": [],
    "pre": [
      {
        "description": "@param others the iterables to interleave. others is not null.",
        "guard": {
          "condition": "(others==null) == false",
          "description": "the iterables to interleave. others is not null."
        }
      }
    ]
  },
  {
    "operation": {
      "classname": "org.apache.commons.collections4.FluentIterable",
      "name": "allMatch",
      "parameterTypes": [
        "org.apache.commons.collections4.Predicate"
      ]
    },
    "identifiers": {
      "parameters": [
        "predicate"
      ],
      "receiverName": "receiverObjectID",
      "returnName": "methodResultID"
    },
    "throws": [
      {
        "exception": "java.lang.NullPointerException",
        "description": "@throws java.lang.NullPointerException predicate is null.",
        "guard": {
          "condition": "predicate==null",
          "description": "predicate is null."
        }
      }
    ],
    "post": [],
    "pre": [
      {
        "description": "@param predicate the predicate to use. predicate is not null.",
        "guard": {
          "condition": "(predicate==null) == false",
          "description": "the predicate to use. predicate is not null."
        }
      }
    ]
  },
  {
    "operation": {
      "classname": "org.apache.commons.collections4.FluentIterable",
      "name": "anyMatch",
      "parameterTypes": [
        "org.apache.commons.collections4.Predicate"
      ]
    },
    "identifiers": {
      "parameters": [
        "predicate"
      ],
      "receiverName": "receiverObjectID",
      "returnName": "methodResultID"
    },
    "throws": [
      {
        "exception": "java.lang.NullPointerException",
        "description": "@throws java.lang.NullPointerException predicate is null.",
        "guard": {
          "condition": "predicate==null",
          "description": "predicate is null."
        }
      }
    ],
    "post": [],
    "pre": [
      {
        "description": "@param predicate the predicate to use. predicate is not null.",
        "guard": {
          "condition": "(predicate==null) == false",
          "description": "the predicate to use. predicate is not null."
        }
      }
    ]
  },
  {
    "operation": {
      "classname": "org.apache.commons.collections4.FluentIterable",
      "name": "forEach",
      "parameterTypes": [
        "org.apache.commons.collections4.Closure"
      ]
    },
    "identifiers": {
      "parameters": [
        "closure"
      ],
      "receiverName": "receiverObjectID",
      "returnName": "methodResultID"
    },
    "throws": [
      {
        "exception": "java.lang.NullPointerException",
        "description": "@throws java.lang.NullPointerException closure is null.",
        "guard": {
          "condition": "closure==null",
          "description": "closure is null."
        }
      }
    ],
    "post": [],
    "pre": [
      {
        "description": "@param closure the closure to apply to each element. closure is not null.",
        "guard": {
          "condition": "(closure==null) == false",
          "description": "the closure to apply to each element. closure is not null."
        }
      }
    ]
  },
  {
    "operation": {
      "classname": "org.apache.commons.collections4.FluentIterable",
      "name": "get",
      "parameterTypes": [
        "int"
      ]
    },
    "identifiers": {
      "parameters": [
        "position"
      ],
      "receiverName": "receiverObjectID",
      "returnName": "methodResultID"
    },
    "throws": [
      {
        "exception": "java.lang.NullPointerException",
        "description": "@throws java.lang.IndexOutOfBoundsException if the provided position is outside the valid range of this iterable: [0, size).",
        "guard": {
          "condition": "position < 0 || position > receiverObjectID.size()",
          "description": "if the provided position is outside the valid range of this iterable: [0, size)."
        }
      }
    ],
    "post": [],
    "pre": []
  },
  {
    "operation": {
      "classname": "org.apache.commons.collections4.FluentIterable",
      "name": "copyInto",
      "parameterTypes": [
        "java.util.Collection"
      ]
    },
    "identifiers": {
      "parameters": [
        "collection"
      ],
      "receiverName": "receiverObjectID",
      "returnName": "methodResultID"
    },
    "throws": [
      {
        "exception": "java.lang.NullPointerException",
        "description": "@throws java.lang.NullPointerException collection is null.",
        "guard": {
          "condition": "collection==null",
          "description": "collection is null."
        }
      }
    ],
    "post": [],
    "pre": []
  }
]