[
  {
    "operation": {
      "classname": "org.apache.commons.math3.util.MathUtils",
      "name": "normalizeAngle",
      "parameterTypes": [
        "double",
        "double"
      ]
    },
    "identifiers": {
      "parameters": [
        "a",
        "center"
      ],
      "receiverName": "receiverObjectID",
      "returnName": "methodResultID"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "methodResultID==a-a",
          "description": "a-2k&pi; with integer k and center-&pi; <= a-2k&pi; <= center+&pi;."
        },
        "description": "a-2k&pi; with integer k and center-&pi; <= a-2k&pi; <= center+&pi;.",
        "guard": {
          "condition": "true",
          "description": "a-2k&pi; with integer k and center-&pi; <= a-2k&pi; <= center+&pi;."
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "org.apache.commons.math3.util.MathUtils",
      "name": "max",
      "parameterTypes": [
        "org.apache.commons.math3.RealFieldElement",
        "org.apache.commons.math3.RealFieldElement"
      ]
    },
    "identifiers": {
      "parameters": [
        "e1",
        "e2"
      ],
      "receiverName": "receiverObjectID",
      "returnName": "methodResultID"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "(methodResultID.equals(MathUtils.min(e1, e2))) == false",
          "description": "max(a1, e2)."
        },
        "description": "max(a1, e2).",
        "guard": {
          "condition": "(e1.equals(e2)) == false",
          "description": "max(a1, e2)."
        }
      },
      {
        "property": {
          "condition": "methodResultID.equals(e1) && methodResultID.equals(e2)",
          "description": "max(a1, e2)."
        },
        "description": "max(a1, e2).",
        "guard": {
          "condition": "(e1.equals(e2)) == true",
          "description": "max(a1, e2)."
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "org.apache.commons.math3.util.MathUtils",
      "name": "min",
      "parameterTypes": [
        "org.apache.commons.math3.RealFieldElement",
        "org.apache.commons.math3.RealFieldElement"
      ]
    },
    "identifiers": {
      "parameters": [
        "e1",
        "e2"
      ],
      "receiverName": "receiverObjectID",
      "returnName": "methodResultID"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "(methodResultID.equals(MathUtils.max(e1, e2))) == false",
          "description": "min(a1, e2)."
        },
        "description": "min(a1, e2).",
        "guard": {
          "condition": "(e1.equals(e2)) == false",
          "description": "min(a1, e2)."
        }
      },
      {
        "property": {
          "condition": "methodResultID.equals(e1) && methodResultID.equals(e2)",
          "description": "min(a1, e2)."
        },
        "description": "min(a1, e2).",
        "guard": {
          "condition": "(e1.equals(e2)) == true",
          "description": "min(a1, e2)."
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "org.apache.commons.math3.util.MathUtils",
      "name": "copySign",
      "parameterTypes": [
        "byte",
        "byte"
      ]
    },
    "identifiers": {
      "parameters": [
        "magnitude",
        "sign"
      ],
      "receiverName": "receiverObjectID",
      "returnName": "methodResultID"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "methodResultID==magnitude",
          "description": "a value with magnitude equal to magnitude and with the same sign as the sign argument."
        },
        "description": "a value with magnitude equal to magnitude and with the same sign as the sign argument.",
        "guard": {
          "condition": "true",
          "description": "a value with magnitude equal to magnitude and with the same sign as the sign argument."
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "org.apache.commons.math3.util.MathUtils",
      "name": "copySign",
      "parameterTypes": [
        "short",
        "short"
      ]
    },
    "identifiers": {
      "parameters": [
        "magnitude",
        "sign"
      ],
      "receiverName": "receiverObjectID",
      "returnName": "methodResultID"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "methodResultID==magnitude",
          "description": "a value with magnitude equal to magnitude and with the same sign as the sign argument."
        },
        "description": "a value with magnitude equal to magnitude and with the same sign as the sign argument.",
        "guard": {
          "condition": "true",
          "description": "a value with magnitude equal to magnitude and with the same sign as the sign argument."
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "org.apache.commons.math3.util.MathUtils",
      "name": "copySign",
      "parameterTypes": [
        "int",
        "int"
      ]
    },
    "identifiers": {
      "parameters": [
        "magnitude",
        "sign"
      ],
      "receiverName": "receiverObjectID",
      "returnName": "methodResultID"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "methodResultID==magnitude",
          "description": "a value with magnitude equal to magnitude and with the same sign as the sign argument."
        },
        "description": "a value with magnitude equal to magnitude and with the same sign as the sign argument.",
        "guard": {
          "condition": "true",
          "description": "a value with magnitude equal to magnitude and with the same sign as the sign argument."
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "org.apache.commons.math3.util.MathUtils",
      "name": "copySign",
      "parameterTypes": [
        "long",
        "long"
      ]
    },
    "identifiers": {
      "parameters": [
        "magnitude",
        "sign"
      ],
      "receiverName": "receiverObjectID",
      "returnName": "methodResultID"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "methodResultID==magnitude",
          "description": "a value with magnitude equal to magnitude and with the same sign as the sign argument."
        },
        "description": "a value with magnitude equal to magnitude and with the same sign as the sign argument.",
        "guard": {
          "condition": "true",
          "description": "a value with magnitude equal to magnitude and with the same sign as the sign argument."
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "org.apache.commons.math3.util.MathUtils",
      "name": "checkNotNull",
      "parameterTypes": [
        "java.lang.Object",
        "org.apache.commons.math3.exception.util.Localizable",
        "[Ljava.lang.Object;"
      ]
    },
    "identifiers": {
      "parameters": [
        "o",
        "pattern",
        "args"
      ],
      "receiverName": "receiverObjectID",
      "returnName": "methodResultID"
    },
    "throws": [
      {
        "exception": "org.apache.commons.math3.exception.NullArgumentException",
        "description": "@throws org.apache.commons.math3.exception.NullArgumentException o is null.",
        "guard": {
          "condition": "o==null",
          "description": "o is null."
        }
      }
    ],
    "post": [],
    "pre": []
  },
  {
    "operation": {
      "classname": "org.apache.commons.math3.util.MathUtils",
      "name": "checkNotNull",
      "parameterTypes": [
        "java.lang.Object"
      ]
    },
    "identifiers": {
      "parameters": [
        "o"
      ],
      "receiverName": "receiverObjectID",
      "returnName": "methodResultID"
    },
    "throws": [
      {
        "exception": "org.apache.commons.math3.exception.NullArgumentException",
        "description": "@throws org.apache.commons.math3.exception.NullArgumentException o is null.",
        "guard": {
          "condition": "o==null",
          "description": "o is null."
        }
      }
    ],
    "post": [],
    "pre": []
  }
]