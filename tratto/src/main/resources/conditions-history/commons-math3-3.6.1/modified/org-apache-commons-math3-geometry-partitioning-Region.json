[
  {
    "operation": {
      "classname": "org.apache.commons.math3.geometry.partitioning.Region",
      "name": "getBoundarySize",
      "parameterTypes": []
    },
    "identifiers": {
      "parameters": [],
      "receiverName": "receiverObjectID",
      "returnName": "methodResultID"
    },
    "throws": [],
    "post": [],
    "pre": []
  },
  {
    "operation": {
      "classname": "org.apache.commons.math3.geometry.partitioning.Region",
      "name": "checkPoint",
      "parameterTypes": [
        "org.apache.commons.math3.geometry.Point"
      ]
    },
    "identifiers": {
      "parameters": [
        "point"
      ],
      "receiverName": "receiverObjectID",
      "returnName": "methodResultID"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "methodResultID.equals(Location.INSIDE) || methodResultID.equals(Location.OUTSIDE) || methodResultID.equals(Location.BOUNDARY)",
          "description": "a code representing the point status: either Location#INSIDE, Location#OUTSIDE or Location#BOUNDARY."
        },
        "description": "a code representing the point status: either Location#INSIDE, Location#OUTSIDE or Location#BOUNDARY.",
        "guard": {
          "condition": "true",
          "description": "methodResultID.equals(Location.INSIDE) || methodResultID.equals(Location.OUTSIDE) || methodResultID.equals(Location.BOUNDARY)."
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "org.apache.commons.math3.geometry.partitioning.Region",
      "name": "side",
      "parameterTypes": [
        "org.apache.commons.math3.geometry.partitioning.Hyperplane"
      ]
    },
    "identifiers": {
      "parameters": [
        "hyperplane"
      ],
      "receiverName": "receiverObjectID",
      "returnName": "methodResultID"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "methodResultID.equals(Side.PLUS) || methodResultID.equals(Side.MINUS) || methodResultID.equals(Side.BOTH) || methodResultID.equals(Side.HYPER)",
          "description": "one of Side#PLUS Side.PLUS, Side#MINUS Side.MINUS, Side#BOTH Side.BOTH or Side#HYPER Side.HYPER (the latter result can occur only if the tree contains only one cut hyperplane)."
        },
        "description": "one of Side#PLUS Side.PLUS, Side#MINUS Side.MINUS, Side#BOTH Side.BOTH or Side#HYPER Side.HYPER (the latter result can occur only if the tree contains only one cut hyperplane).",
        "guard": {
          "condition": "true",
          "description": "one of Side#PLUS Side.PLUS, Side#MINUS Side.MINUS, Side#BOTH Side.BOTH or Side#HYPER Side.HYPER (the latter result can occur only if the tree contains only one cut hyperplane)."
        }
      }
    ],
    "pre": []
  }
]