[
  {
    "operation": {
      "classname": "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator",
      "name": "setStepSizeControl",
      "parameterTypes": [
        "double",
        "double",
        "double",
        "double"
      ]
    },
    "identifiers": {
      "parameters": [
        "minimalStep",
        "maximalStep",
        "absoluteTolerance",
        "relativeTolerance"
      ],
      "receiverName": "receiverObjectID",
      "returnName": "methodResultID"
    },
    "throws": [],
    "post": [],
    "pre": [
      {
        "description": "@param minimalStep minimal step (. minimalStep is positive even for backward integration) the last step smaller than this.",
        "guard": {
          "condition": "minimalStep>0",
          "description": "minimal step (. minimalStep is positive even for backward integration) the last step smaller than this."
        }
      },
      {
        "description": "@param maximalStep maximal step (. maximalStep is positive even for backward integration).",
        "guard": {
          "condition": "maximalStep>0",
          "description": "maximal step (. maximalStep is positive even for backward integration)."
        }
      }
    ]
  },
  {
    "operation": {
      "classname": "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator",
      "name": "setStepSizeControl",
      "parameterTypes": [
        "double",
        "double",
        "[D",
        "[D"
      ]
    },
    "identifiers": {
      "parameters": [
        "minimalStep",
        "maximalStep",
        "absoluteTolerance",
        "relativeTolerance"
      ],
      "receiverName": "receiverObjectID",
      "returnName": "methodResultID"
    },
    "throws": [],
    "post": [],
    "pre": [
      {
        "description": "@param minimalStep minimal step (. minimalStep is positive even for backward integration) the last step smaller than this.",
        "guard": {
          "condition": "minimalStep>0",
          "description": "minimal step (. minimalStep is positive even for backward integration) the last step smaller than this."
        }
      },
      {
        "description": "@param maximalStep maximal step (. maximalStep is positive even for backward integration).",
        "guard": {
          "condition": "maximalStep>0",
          "description": "maximal step (. maximalStep is positive even for backward integration)."
        }
      }
    ]
  },
  {
    "operation": {
      "classname": "org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator",
      "name": "setInitialStepSize",
      "parameterTypes": [
        "double"
      ]
    },
    "identifiers": {
      "parameters": [
        "initialStepSize"
      ],
      "receiverName": "receiverObjectID",
      "returnName": "methodResultID"
    },
    "throws": [],
    "post": [],
    "pre": [
      {
        "description": "@param initialStepSize initial step size to use (. initialStepSize is positive even for backward integration ; providing a negative value or a value outside of the min/max step interval will lead the integrator to ignore the value and compute the initial step size by itself).",
        "guard": {
          "condition": "initialStepSize>0",
          "description": "initial step size to use (. initialStepSize is positive even for backward integration ; providing a negative value or a value outside of the min/max step interval will lead the integrator to ignore the value and compute the initial step size by itself)."
        }
      }
    ]
  }
]