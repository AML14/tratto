package data.collection.models;

import com.fasterxml.jackson.annotation.JsonProperty;

import java.util.List;
import java.util.concurrent.locks.Condition;

/**
 * The record models the features of a JDoctor condition
 * @param operation A record object of type {@link Operation}, containing the information about the qualified name of the
 *                  method to which the JDoctor conditions refers, the qualified name of the class where the method is
 *                  defined, and the list of type names of the parameters of the method.
 * @param identifiers A record object of type {@link Identifiers}, containing the information about the list of the names
 *                    of the parameters of the method to which the JDoctor condition refers, the reference name of the
 *                    class where the method is defined, within the oracle generated by JDoctor (always *receiverObjectID*),
 *                    and the reference name of the return type of the method, within the oracle generated by JDoctor
 *                    (always *methodResultID*).
 * @param throwsConditions A list of record objects of type {@link ThrowsCondition}, containing the information about each
 *                         JDoctor exceptional condition produced, given the method to which the JDoctor condition refers.
 * @param postConditions A list of record objects of type {@link PostCondition}, containing the information about each
 *                       JDoctor post-condition produced, given the method to which the JDoctor condition refers.
 * @param preConditions A list of record objects of type {@link PreCondition}, containing the information about each
 *                      JDoctor pre-condition produced, given the method to which the JDoctor condition refers.
 */
public record JDocCondition(
    @JsonProperty("operation") Operation operation,
    @JsonProperty("identifiers") Identifiers identifiers,
    @JsonProperty("throws") List<ThrowsCondition> throwsConditions,
    @JsonProperty("post") List<PostCondition> postConditions,
    @JsonProperty("pre") List<PreCondition> preConditions
) {
    /**
     * The inner record models the operation object of a JDoctor condition.
     * @param classname The qualified name of the class where the method to which the JDoctor conditions refers is defined.
     * @param name The qualified name of the method to which the JDoctor conditions refers.
     * @param parameterTypes The list of type names of the parameters of the method to which the JDoctor conditions refers.
     */
    public record Operation(
            @JsonProperty("classname") String classname,
            @JsonProperty("name") String name,
            @JsonProperty("parameterTypes") List<String> parameterTypes
    ){}

    /**
     * The inner record models the identifiers object of a JDoctor condition.
     * @param parameters The list of the names of the parameters of the method to which the JDoctor condition refers.
     * @param receiverName The reference name of the class where the method is defined, within the oracle generated by
     *                     JDoctor (always *receiverObjectID*).
     * @param returnName The reference name of the return type of the method, within the oracle generated by JDoctor
     *                   (always *methodResultID*).
     */
    public record Identifiers(
            @JsonProperty("parameters") List<String> parameters,
            @JsonProperty("receiverName") String receiverName,
            @JsonProperty("returnName") String returnName
    ){}

    /**
     * The inner record models a JDoctor exceptional condition object.
     * @param exception The exception captured by JDoctor.
     * @param description The @throws tag description of the exception, in the corresponding Javadoc comment of the method
     *                    to which the JDoctor condition refers.
     * @param guard The guard object of the JDoctor exceptional condition. It contains the oracle generated from the description
     *              of the exceptional condition, in the Javadoc comment, and the textual representation of the oracle, i.e.
     *              the exact substring of the description that indicates the condition for which the exception is thrown.
     */
    public record ThrowsCondition(
            @JsonProperty("exception") String exception,
            @JsonProperty("description") String description,
            @JsonProperty("guard") Guard guard
    ) {}

    /**
     * The inner record models a JDoctor post-condition object.
     * @param property The property object of the JDoctor post-condition. It contains the oracle and the textual description
     *                 of the JDoctor post-condition.
     * @param description The textual description of the JDoctor post-condition.
     * @param guard The guard object of the JDoctor post-condition. It contains the condition for which the oracle of the
     *              post-condition must be verified. In other words, if the guard condition is true, the corresponding
     *              oracle must be true as well. Moreover, it contains the textual description of the guard condition.
     *
     */
    public record PostCondition(
            @JsonProperty("property") Property property,
            @JsonProperty("description") String description,
            @JsonProperty("guard") Guard guard
    ){}

    /**
     * The inner record models a JDoctor pre-condition object.
     * @param description The textual description of the JDoctor pre-condition.
     * @param guard The guard object of the JDoctor pre-condition. It contains the condition for which the JDoctor
     *              pre-condition is verified. Moreover, it contains the textual description of the guard condition.
     */
    public record PreCondition(
            @JsonProperty("description") String description,
            @JsonProperty("guard") Guard guard
    ){}

    /**
     * The inner record models a guard object of a JDoctor condition.
     * @param condition The condition for which a JDoctor pre-condition must be verified, or a JDoctor post-condition
     *                  oracle must be verified, or a JDoctor exceptional condition must be thrown.
     * @param description The textual description of the guard JDoctor condition.
     */
    public record Guard(
            @JsonProperty("condition") String condition,
            @JsonProperty("description") String description
    ){}

    /**
     * The inner record models a property object of a JDoctor post-condition.
     * @param condition The oracle of a post-condition that must be verified if the corresponding guard condition is true.
     * @param description The textual description of the JDoctor post-condition oracle.
     */
    public record Property(
            @JsonProperty("condition") String condition,
            @JsonProperty("description") String description
    ){}
}