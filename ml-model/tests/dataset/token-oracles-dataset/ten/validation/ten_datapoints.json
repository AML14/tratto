[
   {
      "id":7,
      "oracle":"edges==null;",
      "oracleType":"EXCEPT_POST",
      "projectName":"jgrapht-core-0.9.2",
      "packageName":"org.jgrapht",
      "className":"Graph",
      "javadocTag":"@throws NullPointerException if the specified edge collection is <tt>\nnull</tt>.",
      "methodJavadoc":"    /**\n     * Removes all the edges in this graph that are also contained in the\n     * specified edge collection. After this call returns, this graph will\n     * contain no edges in common with the specified edges. This method will\n     * invoke the {@link #removeEdge(Object)} method.\n     *\n     * @param edges edges to be removed from this graph.\n     *\n     * @return <tt>true</tt> if this graph changed as a result of the call\n     *\n     * @throws NullPointerException if the specified edge collection is <tt>\n     * null</tt>.\n     *\n     * @see #removeEdge(Object)\n     * @see #containsEdge(Object)\n     */",
      "methodSourceCode":"public boolean removeAllEdges(Collection<? extends E> edges);",
      "classJavadoc":"/**\n * The root interface in the graph hierarchy. A mathematical graph-theory graph\n * object <tt>G(V,E)</tt> contains a set <tt>V</tt> of vertices and a set <tt>\n * E</tt> of edges. Each edge e=(v1,v2) in E connects vertex v1 to vertex v2.\n * for more information about graphs and their related definitions see <a\n * href=\"http://mathworld.wolfram.com/Graph.html\">\n * http://mathworld.wolfram.com/Graph.html</a>.\n *\n * <p>This library generally follows the terminology found at: <a\n * href=\"http://mathworld.wolfram.com/topics/GraphTheory.html\">\n * http://mathworld.wolfram.com/topics/GraphTheory.html</a>. Implementation of\n * this interface can provide simple-graphs, multigraphs, pseudographs etc. The\n * package <code>org.jgrapht.graph</code> provides a gallery of abstract and\n * concrete graph implementations.</p>\n *\n * <p>This library works best when vertices represent arbitrary objects and\n * edges represent the relationships between them. Vertex and edge instances may\n * be shared by more than one graph.</p>\n *\n * <p>Through generics, a graph can be typed to specific classes for vertices\n * <code>V</code> and edges <code>E&lt;T&gt;</code>. Such a graph can contain\n * vertices of type <code>V</code> and all sub-types and Edges of type <code>\n * E</code> and all sub-types.</p>\n *\n * <p>For guidelines on vertex and edge classes, see <a\n * href=\"https://github.com/jgrapht/jgrapht/wiki/EqualsAndHashCode\">this wiki\n * page</a>.\n *\n * @author Barak Naveh\n * @since Jul 14, 2003\n */",
      "classSourceCode":"/* ==========================================\n * JGraphT : a free Java graph-theory library\n * ==========================================\n *\n * Project Info:  http://jgrapht.sourceforge.net/\n * Project Creator:  Barak Naveh (http://sourceforge.net/users/barak_naveh)\n *\n * (C) Copyright 2003-2008, by Barak Naveh and Contributors.\n *\n * This program and the accompanying materials are dual-licensed under\n * either\n *\n * (a) the terms of the GNU Lesser General Public License version 2.1\n * as published by the Free Software Foundation, or (at your option) any\n * later version.\n *\n * or (per the licensee's choosing)\n *\n * (b) the terms of the Eclipse Public License v1.0 as published by\n * the Eclipse Foundation.\n */\n/* ----------\n * Graph.java\n * ----------\n * (C) Copyright 2003-2008, by Barak Naveh and Contributors.\n *\n * Original Author:  Barak Naveh\n * Contributor(s):   John V. Sichi\n *                   Christian Hammer\n *\n * $Id$\n *\n * Changes\n * -------\n * 24-Jul-2003 : Initial revision (BN);\n * 06-Nov-2003 : Change edge sharing semantics (JVS);\n * 11-Mar-2004 : Made generic (CH);\n * 07-May-2006 : Changed from List<Edge> to Set<Edge> (JVS);\n * 28-May-2006 : Moved connectivity info from edge to graph (JVS);\n *\n */\npackage org.jgrapht;\n\nimport java.util.*;\n\n\n/**\n * The root interface in the graph hierarchy. A mathematical graph-theory graph\n * object <tt>G(V,E)</tt> contains a set <tt>V</tt> of vertices and a set <tt>\n * E</tt> of edges. Each edge e=(v1,v2) in E connects vertex v1 to vertex v2.\n * for more information about graphs and their related definitions see <a\n * href=\"http://mathworld.wolfram.com/Graph.html\">\n * http://mathworld.wolfram.com/Graph.html</a>.\n *\n * <p>This library generally follows the terminology found at: <a\n * href=\"http://mathworld.wolfram.com/topics/GraphTheory.html\">\n * http://mathworld.wolfram.com/topics/GraphTheory.html</a>. Implementation of\n * this interface can provide simple-graphs, multigraphs, pseudographs etc. The\n * package <code>org.jgrapht.graph</code> provides a gallery of abstract and\n * concrete graph implementations.</p>\n *\n * <p>This library works best when vertices represent arbitrary objects and\n * edges represent the relationships between them. Vertex and edge instances may\n * be shared by more than one graph.</p>\n *\n * <p>Through generics, a graph can be typed to specific classes for vertices\n * <code>V</code> and edges <code>E&lt;T&gt;</code>. Such a graph can contain\n * vertices of type <code>V</code> and all sub-types and Edges of type <code>\n * E</code> and all sub-types.</p>\n *\n * <p>For guidelines on vertex and edge classes, see <a\n * href=\"https://github.com/jgrapht/jgrapht/wiki/EqualsAndHashCode\">this wiki\n * page</a>.\n *\n * @author Barak Naveh\n * @since Jul 14, 2003\n */\npublic interface Graph<V, E>\n{\n    /**\n     * Returns a set of all edges connecting source vertex to target vertex if\n     * such vertices exist in this graph. If any of the vertices does not exist\n     * or is <code>null</code>, returns <code>null</code>. If both vertices\n     * exist but no edges found, returns an empty set.\n     *\n     * <p>In undirected graphs, some of the returned edges may have their source\n     * and target vertices in the opposite order. In simple graphs the returned\n     * set is either singleton set or empty set.</p>\n     *\n     * @param sourceVertex source vertex of the edge.\n     * @param targetVertex target vertex of the edge.\n     *\n     * @return a set of all edges connecting source vertex to target vertex.\n     */\n    public Set<E> getAllEdges(V sourceVertex, V targetVertex);\n\n    /**\n     * Returns an edge connecting source vertex to target vertex if such\n     * vertices and such edge exist in this graph. Otherwise returns <code>\n     * null</code>. If any of the specified vertices is <code>null</code>\n     * returns <code>null</code>\n     *\n     * <p>In undirected graphs, the returned edge may have its source and target\n     * vertices in the opposite order.</p>\n     *\n     * @param sourceVertex source vertex of the edge.\n     * @param targetVertex target vertex of the edge.\n     *\n     * @return an edge connecting source vertex to target vertex.\n     */\n    public E getEdge(V sourceVertex, V targetVertex);\n\n    /**\n     * Returns the edge factory using which this graph creates new edges. The\n     * edge factory is defined when the graph is constructed and must not be\n     * modified.\n     *\n     * @return the edge factory using which this graph creates new edges.\n     */\n    public EdgeFactory<V, E> getEdgeFactory();\n\n    /**\n     * Creates a new edge in this graph, going from the source vertex to the\n     * target vertex, and returns the created edge. Some graphs do not allow\n     * edge-multiplicity. In such cases, if the graph already contains an edge\n     * from the specified source to the specified target, than this method does\n     * not change the graph and returns <code>null</code>.\n     *\n     * <p>The source and target vertices must already be contained in this\n     * graph. If they are not found in graph IllegalArgumentException is\n     * thrown.</p>\n     *\n     * <p>This method creates the new edge <code>e</code> using this graph's\n     * <code>EdgeFactory</code>. For the new edge to be added <code>e</code>\n     * must <i>not</i> be equal to any other edge the graph (even if the graph\n     * allows edge-multiplicity). More formally, the graph must not contain any\n     * edge <code>e2</code> such that <code>e2.equals(e)</code>. If such <code>\n     * e2</code> is found then the newly created edge <code>e</code> is\n     * abandoned, the method leaves this graph unchanged returns <code>\n     * null</code>.</p>\n     *\n     * @param sourceVertex source vertex of the edge.\n     * @param targetVertex target vertex of the edge.\n     *\n     * @return The newly created edge if added to the graph, otherwise <code>\n     * null</code>.\n     *\n     * @throws IllegalArgumentException if source or target vertices are not\n     * found in the graph.\n     * @throws NullPointerException if any of the specified vertices is <code>\n     * null</code>.\n     *\n     * @see #getEdgeFactory()\n     */\n    public E addEdge(V sourceVertex, V targetVertex);\n\n    /**\n     * Adds the specified edge to this graph, going from the source vertex to\n     * the target vertex. More formally, adds the specified edge, <code>\n     * e</code>, to this graph if this graph contains no edge <code>e2</code>\n     * such that <code>e2.equals(e)</code>. If this graph already contains such\n     * an edge, the call leaves this graph unchanged and returns <tt>false</tt>.\n     * Some graphs do not allow edge-multiplicity. In such cases, if the graph\n     * already contains an edge from the specified source to the specified\n     * target, than this method does not change the graph and returns <code>\n     * false</code>. If the edge was added to the graph, returns <code>\n     * true</code>.\n     *\n     * <p>The source and target vertices must already be contained in this\n     * graph. If they are not found in graph IllegalArgumentException is\n     * thrown.</p>\n     *\n     * @param sourceVertex source vertex of the edge.\n     * @param targetVertex target vertex of the edge.\n     * @param e edge to be added to this graph.\n     *\n     * @return <tt>true</tt> if this graph did not already contain the specified\n     * edge.\n     *\n     * @throws IllegalArgumentException if source or target vertices are not\n     * found in the graph.\n     * @throws ClassCastException if the specified edge is not assignment\n     * compatible with the class of edges produced by the edge factory of this\n     * graph.\n     * @throws NullPointerException if any of the specified vertices is <code>\n     * null</code>.\n     *\n     * @see #addEdge(Object, Object)\n     * @see #getEdgeFactory()\n     */\n    public boolean addEdge(V sourceVertex, V targetVertex, E e);\n\n    /**\n     * Adds the specified vertex to this graph if not already present. More\n     * formally, adds the specified vertex, <code>v</code>, to this graph if\n     * this graph contains no vertex <code>u</code> such that <code>\n     * u.equals(v)</code>. If this graph already contains such vertex, the call\n     * leaves this graph unchanged and returns <tt>false</tt>. In combination\n     * with the restriction on constructors, this ensures that graphs never\n     * contain duplicate vertices.\n     *\n     * @param v vertex to be added to this graph.\n     *\n     * @return <tt>true</tt> if this graph did not already contain the specified\n     * vertex.\n     *\n     * @throws NullPointerException if the specified vertex is <code>\n     * null</code>.\n     */\n    public boolean addVertex(V v);\n\n    /**\n     * Returns <tt>true</tt> if and only if this graph contains an edge going\n     * from the source vertex to the target vertex. In undirected graphs the\n     * same result is obtained when source and target are inverted. If any of\n     * the specified vertices does not exist in the graph, or if is <code>\n     * null</code>, returns <code>false</code>.\n     *\n     * @param sourceVertex source vertex of the edge.\n     * @param targetVertex target vertex of the edge.\n     *\n     * @return <tt>true</tt> if this graph contains the specified edge.\n     */\n    public boolean containsEdge(V sourceVertex, V targetVertex);\n\n    /**\n     * Returns <tt>true</tt> if this graph contains the specified edge. More\n     * formally, returns <tt>true</tt> if and only if this graph contains an\n     * edge <code>e2</code> such that <code>e.equals(e2)</code>. If the\n     * specified edge is <code>null</code> returns <code>false</code>.\n     *\n     * @param e edge whose presence in this graph is to be tested.\n     *\n     * @return <tt>true</tt> if this graph contains the specified edge.\n     */\n    public boolean containsEdge(E e);\n\n    /**\n     * Returns <tt>true</tt> if this graph contains the specified vertex. More\n     * formally, returns <tt>true</tt> if and only if this graph contains a\n     * vertex <code>u</code> such that <code>u.equals(v)</code>. If the\n     * specified vertex is <code>null</code> returns <code>false</code>.\n     *\n     * @param v vertex whose presence in this graph is to be tested.\n     *\n     * @return <tt>true</tt> if this graph contains the specified vertex.\n     */\n    public boolean containsVertex(V v);\n\n    /**\n     * Returns a set of the edges contained in this graph. The set is backed by\n     * the graph, so changes to the graph are reflected in the set. If the graph\n     * is modified while an iteration over the set is in progress, the results\n     * of the iteration are undefined.\n     *\n     * <p>The graph implementation may maintain a particular set ordering (e.g.\n     * via {@link java.util.LinkedHashSet}) for deterministic iteration, but\n     * this is not required. It is the responsibility of callers who rely on\n     * this behavior to only use graph implementations which support it.</p>\n     *\n     * @return a set of the edges contained in this graph.\n     */\n    public Set<E> edgeSet();\n\n    /**\n     * Returns a set of all edges touching the specified vertex. If no edges are\n     * touching the specified vertex returns an empty set.\n     *\n     * @param vertex the vertex for which a set of touching edges is to be\n     * returned.\n     *\n     * @return a set of all edges touching the specified vertex.\n     *\n     * @throws IllegalArgumentException if vertex is not found in the graph.\n     * @throws NullPointerException if vertex is <code>null</code>.\n     */\n    public Set<E> edgesOf(V vertex);\n\n    /**\n     * Removes all the edges in this graph that are also contained in the\n     * specified edge collection. After this call returns, this graph will\n     * contain no edges in common with the specified edges. This method will\n     * invoke the {@link #removeEdge(Object)} method.\n     *\n     * @param edges edges to be removed from this graph.\n     *\n     * @return <tt>true</tt> if this graph changed as a result of the call\n     *\n     * @throws NullPointerException if the specified edge collection is <tt>\n     * null</tt>.\n     *\n     * @see #removeEdge(Object)\n     * @see #containsEdge(Object)\n     */\n    public boolean removeAllEdges(Collection<? extends E> edges);\n\n    /**\n     * Removes all the edges going from the specified source vertex to the\n     * specified target vertex, and returns a set of all removed edges. Returns\n     * <code>null</code> if any of the specified vertices does not exist in the\n     * graph. If both vertices exist but no edge is found, returns an empty set.\n     * This method will either invoke the {@link #removeEdge(Object)} method, or\n     * the {@link #removeEdge(Object, Object)} method.\n     *\n     * @param sourceVertex source vertex of the edge.\n     * @param targetVertex target vertex of the edge.\n     *\n     * @return the removed edges, or <code>null</code> if either vertex is not\n     * part of graph\n     */\n    public Set<E> removeAllEdges(V sourceVertex, V targetVertex);\n\n    /**\n     * Removes all the vertices in this graph that are also contained in the\n     * specified vertex collection. After this call returns, this graph will\n     * contain no vertices in common with the specified vertices. This method\n     * will invoke the {@link #removeVertex(Object)} method.\n     *\n     * @param vertices vertices to be removed from this graph.\n     *\n     * @return <tt>true</tt> if this graph changed as a result of the call\n     *\n     * @throws NullPointerException if the specified vertex collection is <tt>\n     * null</tt>.\n     *\n     * @see #removeVertex(Object)\n     * @see #containsVertex(Object)\n     */\n    public boolean removeAllVertices(Collection<? extends V> vertices);\n\n    /**\n     * Removes an edge going from source vertex to target vertex, if such\n     * vertices and such edge exist in this graph. Returns the edge if removed\n     * or <code>null</code> otherwise.\n     *\n     * @param sourceVertex source vertex of the edge.\n     * @param targetVertex target vertex of the edge.\n     *\n     * @return The removed edge, or <code>null</code> if no edge removed.\n     */\n    public E removeEdge(V sourceVertex, V targetVertex);\n\n    /**\n     * Removes the specified edge from the graph. Removes the specified edge\n     * from this graph if it is present. More formally, removes an edge <code>\n     * e2</code> such that <code>e2.equals(e)</code>, if the graph contains such\n     * edge. Returns <tt>true</tt> if the graph contained the specified edge.\n     * (The graph will not contain the specified edge once the call returns).\n     *\n     * <p>If the specified edge is <code>null</code> returns <code>\n     * false</code>.</p>\n     *\n     * @param e edge to be removed from this graph, if present.\n     *\n     * @return <code>true</code> if and only if the graph contained the\n     * specified edge.\n     */\n    public boolean removeEdge(E e);\n\n    /**\n     * Removes the specified vertex from this graph including all its touching\n     * edges if present. More formally, if the graph contains a vertex <code>\n     * u</code> such that <code>u.equals(v)</code>, the call removes all edges\n     * that touch <code>u</code> and then removes <code>u</code> itself. If no\n     * such <code>u</code> is found, the call leaves the graph unchanged.\n     * Returns <tt>true</tt> if the graph contained the specified vertex. (The\n     * graph will not contain the specified vertex once the call returns).\n     *\n     * <p>If the specified vertex is <code>null</code> returns <code>\n     * false</code>.</p>\n     *\n     * @param v vertex to be removed from this graph, if present.\n     *\n     * @return <code>true</code> if the graph contained the specified vertex;\n     * <code>false</code> otherwise.\n     */\n    public boolean removeVertex(V v);\n\n    /**\n     * Returns a set of the vertices contained in this graph. The set is backed\n     * by the graph, so changes to the graph are reflected in the set. If the\n     * graph is modified while an iteration over the set is in progress, the\n     * results of the iteration are undefined.\n     *\n     * <p>The graph implementation may maintain a particular set ordering (e.g.\n     * via {@link java.util.LinkedHashSet}) for deterministic iteration, but\n     * this is not required. It is the responsibility of callers who rely on\n     * this behavior to only use graph implementations which support it.</p>\n     *\n     * @return a set view of the vertices contained in this graph.\n     */\n    public Set<V> vertexSet();\n\n    /**\n     * Returns the source vertex of an edge. For an undirected graph, source and\n     * target are distinguishable designations (but without any mathematical\n     * meaning).\n     *\n     * @param e edge of interest\n     *\n     * @return source vertex\n     */\n    public V getEdgeSource(E e);\n\n    /**\n     * Returns the target vertex of an edge. For an undirected graph, source and\n     * target are distinguishable designations (but without any mathematical\n     * meaning).\n     *\n     * @param e edge of interest\n     *\n     * @return target vertex\n     */\n    public V getEdgeTarget(E e);\n\n    /**\n     * Returns the weight assigned to a given edge. Unweighted graphs return 1.0\n     * (as defined by {@link WeightedGraph#DEFAULT_EDGE_WEIGHT}), allowing\n     * weighted-graph algorithms to apply to them where meaningful.\n     *\n     * @param e edge of interest\n     *\n     * @return edge weight\n     *\n     * @see WeightedGraph\n     */\n    public double getEdgeWeight(E e);\n}\n\n// End Graph.java\n",
      "tokensGeneralGrammar":[
         "null",
         "true",
         "false",
         ",",
         ".",
         ":",
         ";",
         "?",
         "(",
         ")",
         "jdVar",
         "stream",
         "Arrays",
         "allMatch",
         "noneMatch",
         "anyMatch",
         "~",
         ">>",
         "<<",
         ">>>",
         "|",
         "&",
         "^",
         "+",
         "-",
         "/",
         "*",
         "%",
         "&&",
         "||",
         ">=",
         "<=",
         ">",
         "<",
         "==",
         "!=",
         "instanceof",
         "class",
         "methodResultID",
         "this"
      ],
      "tokensGeneralValuesGlobalDictionary":[
         [
            "0",
            "int"
         ],
         [
            "1",
            "int"
         ],
         [
            "-1",
            "int"
         ],
         [
            "0.0",
            "double"
         ],
         [
            "1.0",
            "double"
         ],
         [
            "-1.0",
            "double"
         ],
         [
            "\"\"",
            "String"
         ]
      ],
      "tokensProjectClasses":[
         [
            "PartiteRandomGraphGenerator",
            "org.jgrapht.experimental"
         ],
         [
            "RandomGraphHelper",
            "org.jgrapht.experimental"
         ],
         [
            "GraphReader",
            "org.jgrapht.experimental"
         ],
         [
            "DirectedAcyclicGraph",
            "org.jgrapht.experimental.dag"
         ],
         [
            "GraphSquare",
            "org.jgrapht.experimental"
         ],
         [
            "UniformRandomGraphGenerator",
            "org.jgrapht.experimental"
         ],
         [
            "GraphTests",
            "org.jgrapht.experimental"
         ],
         [
            "ApproximationAlgorithm",
            "org.jgrapht.experimental.alg"
         ],
         [
            "BrownBacktrackColoring",
            "org.jgrapht.experimental.alg.color"
         ],
         [
            "GreedyColoring",
            "org.jgrapht.experimental.alg.color"
         ],
         [
            "IntArrayGraphAlgorithm",
            "org.jgrapht.experimental.alg"
         ],
         [
            "ExactAlgorithm",
            "org.jgrapht.experimental.alg"
         ],
         [
            "ListenableGraph",
            "org.jgrapht"
         ],
         [
            "ModifiableInteger",
            "org.jgrapht.util"
         ],
         [
            "FibonacciHeapNode",
            "org.jgrapht.util"
         ],
         [
            "WeightCombiner",
            "org.jgrapht.util"
         ],
         [
            "FibonacciHeap",
            "org.jgrapht.util"
         ],
         [
            "TypeUtil",
            "org.jgrapht.util"
         ],
         [
            "ArrayUnenforcedSet",
            "org.jgrapht.util"
         ],
         [
            "VertexPair",
            "org.jgrapht.util"
         ],
         [
            "MathUtil",
            "org.jgrapht.util"
         ],
         [
            "PrefetchIterator",
            "org.jgrapht.util"
         ],
         [
            "VertexFactory",
            "org.jgrapht"
         ],
         [
            "Graph",
            "org.jgrapht"
         ],
         [
            "GraphPath",
            "org.jgrapht"
         ],
         [
            "UndirectedGraphUnion",
            "org.jgrapht.graph"
         ],
         [
            "SimpleGraph",
            "org.jgrapht.graph"
         ],
         [
            "MixedGraphUnion",
            "org.jgrapht.graph"
         ],
         [
            "DefaultGraphMapping",
            "org.jgrapht.graph"
         ],
         [
            "WeightedPseudograph",
            "org.jgrapht.graph"
         ],
         [
            "UndirectedMaskSubgraph",
            "org.jgrapht.graph"
         ],
         [
            "MaskEdgeSet",
            "org.jgrapht.graph"
         ],
         [
            "Pseudograph",
            "org.jgrapht.graph"
         ],
         [
            "MaskFunctor",
            "org.jgrapht.graph"
         ],
         [
            "GraphUnion",
            "org.jgrapht.graph"
         ],
         [
            "DirectedMaskSubgraph",
            "org.jgrapht.graph"
         ],
         [
            "DirectedMultigraph",
            "org.jgrapht.graph"
         ],
         [
            "AbstractBaseGraph",
            "org.jgrapht.graph"
         ],
         [
            "DirectedWeightedPseudograph",
            "org.jgrapht.graph"
         ],
         [
            "Multigraph",
            "org.jgrapht.graph"
         ],
         [
            "DefaultDirectedGraph",
            "org.jgrapht.graph"
         ],
         [
            "DefaultWeightedEdge",
            "org.jgrapht.graph"
         ],
         [
            "ListenableDirectedWeightedGraph",
            "org.jgrapht.graph"
         ],
         [
            "DirectedGraphUnion",
            "org.jgrapht.graph"
         ],
         [
            "AsUnweightedGraph",
            "org.jgrapht.graph"
         ],
         [
            "EdgeSetFactory",
            "org.jgrapht.graph"
         ],
         [
            "GraphDelegator",
            "org.jgrapht.graph"
         ],
         [
            "DefaultListenableGraph",
            "org.jgrapht.graph"
         ],
         [
            "AsUndirectedGraph",
            "org.jgrapht.graph"
         ],
         [
            "ClassBasedVertexFactory",
            "org.jgrapht.graph"
         ],
         [
            "DefaultEdge",
            "org.jgrapht.graph"
         ],
         [
            "MaskVertexSet",
            "org.jgrapht.graph"
         ],
         [
            "ListenableUndirectedGraph",
            "org.jgrapht.graph"
         ],
         [
            "DirectedWeightedSubgraph",
            "org.jgrapht.graph"
         ],
         [
            "ListenableUndirectedWeightedGraph",
            "org.jgrapht.graph"
         ],
         [
            "AsUnweightedDirectedGraph",
            "org.jgrapht.graph"
         ],
         [
            "DefaultDirectedWeightedGraph",
            "org.jgrapht.graph"
         ],
         [
            "IntrusiveEdge",
            "org.jgrapht.graph"
         ],
         [
            "UnmodifiableGraph",
            "org.jgrapht.graph"
         ],
         [
            "GraphPathImpl",
            "org.jgrapht.graph"
         ],
         [
            "Subgraph",
            "org.jgrapht.graph"
         ],
         [
            "UndirectedWeightedSubgraph",
            "org.jgrapht.graph"
         ],
         [
            "DirectedPseudograph",
            "org.jgrapht.graph"
         ],
         [
            "AbstractGraph",
            "org.jgrapht.graph"
         ],
         [
            "MaskSubgraph",
            "org.jgrapht.graph"
         ],
         [
            "ClassBasedEdgeFactory",
            "org.jgrapht.graph"
         ],
         [
            "SimpleWeightedGraph",
            "org.jgrapht.graph"
         ],
         [
            "AsWeightedDirectedGraph",
            "org.jgrapht.graph"
         ],
         [
            "SimpleDirectedWeightedGraph",
            "org.jgrapht.graph"
         ],
         [
            "UnmodifiableUndirectedGraph",
            "org.jgrapht.graph"
         ],
         [
            "UndirectedSubgraph",
            "org.jgrapht.graph"
         ],
         [
            "WeightedMultigraph",
            "org.jgrapht.graph"
         ],
         [
            "EdgeReversedGraph",
            "org.jgrapht.graph"
         ],
         [
            "AsWeightedGraph",
            "org.jgrapht.graph"
         ],
         [
            "DirectedGraphBuilder",
            "org.jgrapht.graph.builder"
         ],
         [
            "UndirectedGraphBuilderBase",
            "org.jgrapht.graph.builder"
         ],
         [
            "UndirectedGraphBuilder",
            "org.jgrapht.graph.builder"
         ],
         [
            "UndirectedWeightedGraphBuilder",
            "org.jgrapht.graph.builder"
         ],
         [
            "UndirectedWeightedGraphBuilderBase",
            "org.jgrapht.graph.builder"
         ],
         [
            "DirectedWeightedGraphBuilderBase",
            "org.jgrapht.graph.builder"
         ],
         [
            "AbstractGraphBuilder",
            "org.jgrapht.graph.builder"
         ],
         [
            "DirectedWeightedGraphBuilder",
            "org.jgrapht.graph.builder"
         ],
         [
            "DirectedGraphBuilderBase",
            "org.jgrapht.graph.builder"
         ],
         [
            "ListenableDirectedGraph",
            "org.jgrapht.graph"
         ],
         [
            "UnmodifiableDirectedGraph",
            "org.jgrapht.graph"
         ],
         [
            "SimpleGraphPath",
            "org.jgrapht.graph"
         ],
         [
            "ParanoidGraph",
            "org.jgrapht.graph"
         ],
         [
            "DirectedWeightedMultigraph",
            "org.jgrapht.graph"
         ],
         [
            "DirectedSubgraph",
            "org.jgrapht.graph"
         ],
         [
            "SimpleDirectedGraph",
            "org.jgrapht.graph"
         ],
         [
            "GraphHelper",
            "org.jgrapht"
         ],
         [
            "Graphs",
            "org.jgrapht"
         ],
         [
            "DirectedGraph",
            "org.jgrapht"
         ],
         [
            "WeightedGraph",
            "org.jgrapht"
         ],
         [
            "HyperCubeGraphGenerator",
            "org.jgrapht.generate"
         ],
         [
            "RingGraphGenerator",
            "org.jgrapht.generate"
         ],
         [
            "SimpleWeightedGraphMatrixGenerator",
            "org.jgrapht.generate"
         ],
         [
            "WeightedGraphGenerator",
            "org.jgrapht.generate"
         ],
         [
            "WheelGraphGenerator",
            "org.jgrapht.generate"
         ],
         [
            "GridGraphGenerator",
            "org.jgrapht.generate"
         ],
         [
            "ScaleFreeGraphGenerator",
            "org.jgrapht.generate"
         ],
         [
            "SimpleWeightedBipartiteGraphMatrixGenerator",
            "org.jgrapht.generate"
         ],
         [
            "LinearGraphGenerator",
            "org.jgrapht.generate"
         ],
         [
            "CompleteGraphGenerator",
            "org.jgrapht.generate"
         ],
         [
            "RandomGraphGenerator",
            "org.jgrapht.generate"
         ],
         [
            "WeightedGraphGeneratorAdapter",
            "org.jgrapht.generate"
         ],
         [
            "EmptyGraphGenerator",
            "org.jgrapht.generate"
         ],
         [
            "CompleteBipartiteGraphGenerator",
            "org.jgrapht.generate"
         ],
         [
            "GraphGenerator",
            "org.jgrapht.generate"
         ],
         [
            "StarGraphGenerator",
            "org.jgrapht.generate"
         ],
         [
            "UndirectedGraph",
            "org.jgrapht"
         ],
         [
            "TopologicalOrderIterator",
            "org.jgrapht.traverse"
         ],
         [
            "CrossComponentIterator",
            "org.jgrapht.traverse"
         ],
         [
            "AbstractGraphIterator",
            "org.jgrapht.traverse"
         ],
         [
            "ClosestFirstIterator",
            "org.jgrapht.traverse"
         ],
         [
            "BreadthFirstIterator",
            "org.jgrapht.traverse"
         ],
         [
            "DepthFirstIterator",
            "org.jgrapht.traverse"
         ],
         [
            "GraphIterator",
            "org.jgrapht.traverse"
         ],
         [
            "EdgeFactory",
            "org.jgrapht"
         ],
         [
            "GraphMapping",
            "org.jgrapht"
         ],
         [
            "VertexSetListener",
            "org.jgrapht.event"
         ],
         [
            "EdgeTraversalEvent",
            "org.jgrapht.event"
         ],
         [
            "TraversalListener",
            "org.jgrapht.event"
         ],
         [
            "GraphEdgeChangeEvent",
            "org.jgrapht.event"
         ],
         [
            "VertexTraversalEvent",
            "org.jgrapht.event"
         ],
         [
            "GraphChangeEvent",
            "org.jgrapht.event"
         ],
         [
            "GraphListener",
            "org.jgrapht.event"
         ],
         [
            "TraversalListenerAdapter",
            "org.jgrapht.event"
         ],
         [
            "ConnectedComponentTraversalEvent",
            "org.jgrapht.event"
         ],
         [
            "GraphVertexChangeEvent",
            "org.jgrapht.event"
         ],
         [
            "TarjanLowestCommonAncestor",
            "org.jgrapht.alg"
         ],
         [
            "PrimMinimumSpanningTree",
            "org.jgrapht.alg"
         ],
         [
            "BlockCutpointGraph",
            "org.jgrapht.alg"
         ],
         [
            "AllDirectedPaths",
            "org.jgrapht.alg"
         ],
         [
            "KShortestPathsIterator",
            "org.jgrapht.alg"
         ],
         [
            "KruskalMinimumSpanningTree",
            "org.jgrapht.alg"
         ],
         [
            "StrongConnectivityInspector",
            "org.jgrapht.alg"
         ],
         [
            "VF2State",
            "org.jgrapht.alg.isomorphism"
         ],
         [
            "VF2GraphIsomorphismState",
            "org.jgrapht.alg.isomorphism"
         ],
         [
            "VF2AbstractIsomorphismInspector",
            "org.jgrapht.alg.isomorphism"
         ],
         [
            "VF2SubgraphIsomorphismState",
            "org.jgrapht.alg.isomorphism"
         ],
         [
            "IsomorphismInspector",
            "org.jgrapht.alg.isomorphism"
         ],
         [
            "VF2SubgraphIsomorphismInspector",
            "org.jgrapht.alg.isomorphism"
         ],
         [
            "GraphOrdering",
            "org.jgrapht.alg.isomorphism"
         ],
         [
            "VF2GraphMappingIterator",
            "org.jgrapht.alg.isomorphism"
         ],
         [
            "IsomorphicGraphMapping",
            "org.jgrapht.alg.isomorphism"
         ],
         [
            "VF2GraphIsomorphismInspector",
            "org.jgrapht.alg.isomorphism"
         ],
         [
            "VF2SubgraphMappingIterator",
            "org.jgrapht.alg.isomorphism"
         ],
         [
            "VF2MappingIterator",
            "org.jgrapht.alg.isomorphism"
         ],
         [
            "BronKerboschCliqueFinder",
            "org.jgrapht.alg"
         ],
         [
            "ChromaticNumber",
            "org.jgrapht.alg"
         ],
         [
            "KosarajuStrongConnectivityInspector",
            "org.jgrapht.alg"
         ],
         [
            "BellmanFordShortestPath",
            "org.jgrapht.alg"
         ],
         [
            "DijkstraShortestPath",
            "org.jgrapht.alg"
         ],
         [
            "RankingPathElement",
            "org.jgrapht.alg"
         ],
         [
            "AStarShortestPath",
            "org.jgrapht.alg"
         ],
         [
            "EdmondsKarpMaximumFlow",
            "org.jgrapht.alg"
         ],
         [
            "BellmanFordPathElement",
            "org.jgrapht.alg"
         ],
         [
            "FloydWarshallShortestPaths",
            "org.jgrapht.alg"
         ],
         [
            "UnionFind",
            "org.jgrapht.alg.util"
         ],
         [
            "AlwaysEqualComparator",
            "org.jgrapht.alg.util"
         ],
         [
            "Extension",
            "org.jgrapht.alg.util"
         ],
         [
            "VertexDegreeComparator",
            "org.jgrapht.alg.util"
         ],
         [
            "Pair",
            "org.jgrapht.alg.util"
         ],
         [
            "GabowStrongConnectivityInspector",
            "org.jgrapht.alg"
         ],
         [
            "HawickJamesSimpleCycles",
            "org.jgrapht.alg.cycle"
         ],
         [
            "DirectedSimpleCycles",
            "org.jgrapht.alg.cycle"
         ],
         [
            "JohnsonSimpleCycles",
            "org.jgrapht.alg.cycle"
         ],
         [
            "TiernanSimpleCycles",
            "org.jgrapht.alg.cycle"
         ],
         [
            "UndirectedCycleBase",
            "org.jgrapht.alg.cycle"
         ],
         [
            "PatonCycleBase",
            "org.jgrapht.alg.cycle"
         ],
         [
            "TarjanSimpleCycles",
            "org.jgrapht.alg.cycle"
         ],
         [
            "SzwarcfiterLauerSimpleCycles",
            "org.jgrapht.alg.cycle"
         ],
         [
            "BiconnectivityInspector",
            "org.jgrapht.alg"
         ],
         [
            "ConnectivityInspector",
            "org.jgrapht.alg"
         ],
         [
            "MinSourceSinkCut",
            "org.jgrapht.alg"
         ],
         [
            "RankingPathElementList",
            "org.jgrapht.alg"
         ],
         [
            "EdmondsBlossomShrinking",
            "org.jgrapht.alg"
         ],
         [
            "TransitiveClosure",
            "org.jgrapht.alg"
         ],
         [
            "HopcroftKarpBipartiteMatching",
            "org.jgrapht.alg"
         ],
         [
            "StoerWagnerMinimumCut",
            "org.jgrapht.alg"
         ],
         [
            "AbstractPathElementList",
            "org.jgrapht.alg"
         ],
         [
            "KuhnMunkresMinimalWeightBipartitePerfectMatching",
            "org.jgrapht.alg"
         ],
         [
            "TransitiveReduction",
            "org.jgrapht.alg"
         ],
         [
            "EulerianCircuit",
            "org.jgrapht.alg"
         ],
         [
            "DirectedNeighborIndex",
            "org.jgrapht.alg"
         ],
         [
            "NaiveLcaFinder",
            "org.jgrapht.alg"
         ],
         [
            "MaximumWeightBipartiteMatching",
            "org.jgrapht.alg"
         ],
         [
            "HamiltonianCycle",
            "org.jgrapht.alg"
         ],
         [
            "KShortestPaths",
            "org.jgrapht.alg"
         ],
         [
            "NeighborIndex",
            "org.jgrapht.alg"
         ],
         [
            "VertexCovers",
            "org.jgrapht.alg"
         ],
         [
            "CycleDetector",
            "org.jgrapht.alg"
         ],
         [
            "AStarAdmissibleHeuristic",
            "org.jgrapht.alg.interfaces"
         ],
         [
            "MinimumSpanningTree",
            "org.jgrapht.alg.interfaces"
         ],
         [
            "WeightedMatchingAlgorithm",
            "org.jgrapht.alg.interfaces"
         ],
         [
            "StrongConnectivityAlgorithm",
            "org.jgrapht.alg.interfaces"
         ],
         [
            "MaximumFlowAlgorithm",
            "org.jgrapht.alg.interfaces"
         ],
         [
            "MatchingAlgorithm",
            "org.jgrapht.alg.interfaces"
         ],
         [
            "CliqueMinimalSeparatorDecomposition",
            "org.jgrapht.alg"
         ],
         [
            "BellmanFordIterator",
            "org.jgrapht.alg"
         ],
         [
            "AbstractPathElement",
            "org.jgrapht.alg"
         ],
         [
            "EdmondsKarpMaximumFlow",
            "org.jgrapht.alg.flow"
         ],
         [
            "PushRelabelMaximumFlow",
            "org.jgrapht.alg.flow"
         ],
         [
            "MaximumFlowAlgorithmBase",
            "org.jgrapht.alg.flow"
         ]
      ],
      "tokensProjectClassesNonPrivateStaticNonVoidMethods":[
         [
            "addVertices",
            "org.jgrapht.experimental",
            "RandomGraphHelper",
            "public static Object[] addVertices(Graph target, VertexFactory vertexFactory, int numVertices)"
         ],
         [
            "isEmpty",
            "org.jgrapht.experimental",
            "GraphTests",
            "public static <V, E> boolean isEmpty(Graph<V, E> g)"
         ],
         [
            "isComplete",
            "org.jgrapht.experimental",
            "GraphTests",
            "public static <V, E> boolean isComplete(Graph<V, E> g)"
         ],
         [
            "isConnected",
            "org.jgrapht.experimental",
            "GraphTests",
            "public static <V, E> boolean isConnected(Graph<V, E> g)"
         ],
         [
            "isTree",
            "org.jgrapht.experimental",
            "GraphTests",
            "public static <V, E> boolean isTree(Graph<V, E> g)"
         ],
         [
            "isBipartite",
            "org.jgrapht.experimental",
            "GraphTests",
            "public static <V, E> boolean isBipartite(Graph<V, E> g)"
         ],
         [
            "union",
            "org.jgrapht.util",
            "FibonacciHeap",
            "public static <T> FibonacciHeap<T> union(FibonacciHeap<T> h1, FibonacciHeap<T> h2)"
         ],
         [
            "uncheckedCast",
            "org.jgrapht.util",
            "TypeUtil",
            "public static <T> T uncheckedCast(Object o, TypeUtil<T> typeDecl)"
         ],
         [
            "factorial",
            "org.jgrapht.util",
            "MathUtil",
            "public static long factorial(int N)"
         ],
         [
            "builder",
            "org.jgrapht.graph",
            "SimpleGraph",
            "public static <V, E> UndirectedGraphBuilderBase<V, E, ? extends SimpleGraph<V, E>, ?> builder(Class<? extends E> edgeClass)"
         ],
         [
            "builder",
            "org.jgrapht.graph",
            "SimpleGraph",
            "public static <V, E> UndirectedGraphBuilderBase<V, E, ? extends SimpleGraph<V, E>, ?> builder(EdgeFactory<V, E> ef)"
         ],
         [
            "builder",
            "org.jgrapht.graph",
            "WeightedPseudograph",
            "public static <V, E> UndirectedWeightedGraphBuilderBase<V, E, ? extends WeightedPseudograph<V, E>, ?> builder(Class<? extends E> edgeClass)"
         ],
         [
            "builder",
            "org.jgrapht.graph",
            "WeightedPseudograph",
            "public static <V, E> UndirectedWeightedGraphBuilderBase<V, E, ? extends WeightedPseudograph<V, E>, ?> builder(EdgeFactory<V, E> ef)"
         ],
         [
            "builder",
            "org.jgrapht.graph",
            "Pseudograph",
            "public static <V, E> UndirectedGraphBuilderBase<V, E, ? extends Pseudograph<V, E>, ?> builder(Class<? extends E> edgeClass)"
         ],
         [
            "builder",
            "org.jgrapht.graph",
            "Pseudograph",
            "public static <V, E> UndirectedGraphBuilderBase<V, E, ? extends Pseudograph<V, E>, ?> builder(EdgeFactory<V, E> ef)"
         ],
         [
            "builder",
            "org.jgrapht.graph",
            "DirectedMultigraph",
            "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends DirectedMultigraph<V, E>, ?> builder(Class<? extends E> edgeClass)"
         ],
         [
            "builder",
            "org.jgrapht.graph",
            "DirectedMultigraph",
            "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends DirectedMultigraph<V, E>, ?> builder(EdgeFactory<V, E> ef)"
         ],
         [
            "builder",
            "org.jgrapht.graph",
            "DirectedWeightedPseudograph",
            "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends DirectedWeightedPseudograph<V, E>, ?> builder(Class<? extends E> edgeClass)"
         ],
         [
            "builder",
            "org.jgrapht.graph",
            "DirectedWeightedPseudograph",
            "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends DirectedWeightedPseudograph<V, E>, ?> builder(EdgeFactory<V, E> ef)"
         ],
         [
            "builder",
            "org.jgrapht.graph",
            "Multigraph",
            "public static <V, E> UndirectedGraphBuilderBase<V, E, ? extends Multigraph<V, E>, ?> builder(Class<? extends E> edgeClass)"
         ],
         [
            "builder",
            "org.jgrapht.graph",
            "Multigraph",
            "public static <V, E> UndirectedGraphBuilderBase<V, E, ? extends Multigraph<V, E>, ?> builder(EdgeFactory<V, E> ef)"
         ],
         [
            "builder",
            "org.jgrapht.graph",
            "DefaultDirectedGraph",
            "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends DefaultDirectedGraph<V, E>, ?> builder(Class<? extends E> edgeClass)"
         ],
         [
            "builder",
            "org.jgrapht.graph",
            "DefaultDirectedGraph",
            "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends DefaultDirectedGraph<V, E>, ?> builder(EdgeFactory<V, E> ef)"
         ],
         [
            "builder",
            "org.jgrapht.graph",
            "DefaultDirectedWeightedGraph",
            "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends DefaultDirectedWeightedGraph<V, E>, ?> builder(Class<? extends E> edgeClass)"
         ],
         [
            "builder",
            "org.jgrapht.graph",
            "DefaultDirectedWeightedGraph",
            "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends DefaultDirectedWeightedGraph<V, E>, ?> builder(EdgeFactory<V, E> ef)"
         ],
         [
            "builder",
            "org.jgrapht.graph",
            "DirectedPseudograph",
            "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends DirectedPseudograph<V, E>, ?> builder(Class<? extends E> edgeClass)"
         ],
         [
            "builder",
            "org.jgrapht.graph",
            "DirectedPseudograph",
            "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends DirectedPseudograph<V, E>, ?> builder(EdgeFactory<V, E> ef)"
         ],
         [
            "builder",
            "org.jgrapht.graph",
            "SimpleWeightedGraph",
            "public static <V, E> UndirectedWeightedGraphBuilderBase<V, E, ? extends SimpleWeightedGraph<V, E>, ?> builder(Class<? extends E> edgeClass)"
         ],
         [
            "builder",
            "org.jgrapht.graph",
            "SimpleWeightedGraph",
            "public static <V, E> UndirectedWeightedGraphBuilderBase<V, E, ? extends SimpleWeightedGraph<V, E>, ?> builder(EdgeFactory<V, E> ef)"
         ],
         [
            "builder",
            "org.jgrapht.graph",
            "SimpleDirectedWeightedGraph",
            "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends SimpleDirectedWeightedGraph<V, E>, ?> builder(Class<? extends E> edgeClass)"
         ],
         [
            "builder",
            "org.jgrapht.graph",
            "SimpleDirectedWeightedGraph",
            "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends SimpleDirectedWeightedGraph<V, E>, ?> builder(EdgeFactory<V, E> ef)"
         ],
         [
            "builder",
            "org.jgrapht.graph",
            "WeightedMultigraph",
            "public static <V, E> UndirectedWeightedGraphBuilderBase<V, E, ? extends WeightedMultigraph<V, E>, ?> builder(Class<? extends E> edgeClass)"
         ],
         [
            "builder",
            "org.jgrapht.graph",
            "WeightedMultigraph",
            "public static <V, E> UndirectedWeightedGraphBuilderBase<V, E, ? extends WeightedMultigraph<V, E>, ?> builder(EdgeFactory<V, E> ef)"
         ],
         [
            "builder",
            "org.jgrapht.graph",
            "DirectedWeightedMultigraph",
            "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends DirectedWeightedMultigraph<V, E>, ?> builder(Class<? extends E> edgeClass)"
         ],
         [
            "builder",
            "org.jgrapht.graph",
            "DirectedWeightedMultigraph",
            "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends DirectedWeightedMultigraph<V, E>, ?> builder(EdgeFactory<V, E> ef)"
         ],
         [
            "builder",
            "org.jgrapht.graph",
            "SimpleDirectedGraph",
            "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends SimpleDirectedGraph<V, E>, ?> builder(Class<? extends E> edgeClass)"
         ],
         [
            "builder",
            "org.jgrapht.graph",
            "SimpleDirectedGraph",
            "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends SimpleDirectedGraph<V, E>, ?> builder(EdgeFactory<V, E> ef)"
         ],
         [
            "addEdge",
            "org.jgrapht",
            "Graphs",
            "public static <V, E> E addEdge(Graph<V, E> g, V sourceVertex, V targetVertex, double weight)"
         ],
         [
            "addEdgeWithVertices",
            "org.jgrapht",
            "Graphs",
            "public static <V, E> E addEdgeWithVertices(Graph<V, E> g, V sourceVertex, V targetVertex)"
         ],
         [
            "addEdgeWithVertices",
            "org.jgrapht",
            "Graphs",
            "public static <V, E> boolean addEdgeWithVertices(Graph<V, E> targetGraph, Graph<V, E> sourceGraph, E edge)"
         ],
         [
            "addEdgeWithVertices",
            "org.jgrapht",
            "Graphs",
            "public static <V, E> E addEdgeWithVertices(Graph<V, E> g, V sourceVertex, V targetVertex, double weight)"
         ],
         [
            "addGraph",
            "org.jgrapht",
            "Graphs",
            "public static <V, E> boolean addGraph(Graph<? super V, ? super E> destination, Graph<V, E> source)"
         ],
         [
            "addAllEdges",
            "org.jgrapht",
            "Graphs",
            "public static <V, E> boolean addAllEdges(Graph<? super V, ? super E> destination, Graph<V, E> source, Collection<? extends E> edges)"
         ],
         [
            "addAllVertices",
            "org.jgrapht",
            "Graphs",
            "public static <V, E> boolean addAllVertices(Graph<? super V, ? super E> destination, Collection<? extends V> vertices)"
         ],
         [
            "neighborListOf",
            "org.jgrapht",
            "Graphs",
            "public static <V, E> List<V> neighborListOf(Graph<V, E> g, V vertex)"
         ],
         [
            "predecessorListOf",
            "org.jgrapht",
            "Graphs",
            "public static <V, E> List<V> predecessorListOf(DirectedGraph<V, E> g, V vertex)"
         ],
         [
            "successorListOf",
            "org.jgrapht",
            "Graphs",
            "public static <V, E> List<V> successorListOf(DirectedGraph<V, E> g, V vertex)"
         ],
         [
            "undirectedGraph",
            "org.jgrapht",
            "Graphs",
            "public static <V, E> UndirectedGraph<V, E> undirectedGraph(Graph<V, E> g)"
         ],
         [
            "testIncidence",
            "org.jgrapht",
            "Graphs",
            "public static <V, E> boolean testIncidence(Graph<V, E> g, E e, V v)"
         ],
         [
            "getOppositeVertex",
            "org.jgrapht",
            "Graphs",
            "public static <V, E> V getOppositeVertex(Graph<V, E> g, E e, V v)"
         ],
         [
            "getPathVertexList",
            "org.jgrapht",
            "Graphs",
            "public static <V, E> List<V> getPathVertexList(GraphPath<V, E> path)"
         ],
         [
            "range",
            "org.jgrapht.generate",
            "SimpleWeightedGraphMatrixGenerator",
            "public static int[] range(final int from, final int to)"
         ],
         [
            "createGraphSpecifics",
            "org.jgrapht.traverse",
            "CrossComponentIterator",
            "static <V, E> Specifics<V, E> createGraphSpecifics(Graph<V, E> g)"
         ],
         [
            "findGreedyChromaticNumber",
            "org.jgrapht.alg",
            "ChromaticNumber",
            "public static <V, E> int findGreedyChromaticNumber(UndirectedGraph<V, E> g)"
         ],
         [
            "findGreedyColoredGroups",
            "org.jgrapht.alg",
            "ChromaticNumber",
            "public static <V, E> Map<Integer, Set<V>> findGreedyColoredGroups(UndirectedGraph<V, E> g)"
         ],
         [
            "findPathBetween",
            "org.jgrapht.alg",
            "BellmanFordShortestPath",
            "public static <V, E> List<E> findPathBetween(Graph<V, E> graph, V startVertex, V endVertex)"
         ],
         [
            "findPathBetween",
            "org.jgrapht.alg",
            "DijkstraShortestPath",
            "public static <V, E> List<E> findPathBetween(Graph<V, E> graph, V startVertex, V endVertex)"
         ],
         [
            "of",
            "org.jgrapht.alg.util",
            "Pair",
            "public static <A, B> Pair<A, B> of(A a, B b)"
         ],
         [
            "isEulerian",
            "org.jgrapht.alg",
            "EulerianCircuit",
            "public static <V, E> boolean isEulerian(UndirectedGraph<V, E> g)"
         ],
         [
            "getEulerianCircuitVertices",
            "org.jgrapht.alg",
            "EulerianCircuit",
            "public static <V, E> List<V> getEulerianCircuitVertices(UndirectedGraph<V, E> g)"
         ],
         [
            "getApproximateOptimalForCompleteGraph",
            "org.jgrapht.alg",
            "HamiltonianCycle",
            "public static <V, E> List<V> getApproximateOptimalForCompleteGraph(SimpleWeightedGraph<V, E> g)"
         ],
         [
            "find2ApproximationCover",
            "org.jgrapht.alg",
            "VertexCovers",
            "public static <V, E> Set<V> find2ApproximationCover(Graph<V, E> g)"
         ],
         [
            "findGreedyCover",
            "org.jgrapht.alg",
            "VertexCovers",
            "public static <V, E> Set<V> findGreedyCover(UndirectedGraph<V, E> g)"
         ]
      ],
      "tokensProjectClassesNonPrivateStaticAttributes":[
         [
            "BEST_ORDER",
            "org.jgrapht.experimental.alg.color",
            "GreedyColoring",
            "public static final int BEST_ORDER = 0;"
         ],
         [
            "NATURAL_ORDER",
            "org.jgrapht.experimental.alg.color",
            "GreedyColoring",
            "public static final int NATURAL_ORDER = 1;"
         ],
         [
            "SMALLEST_DEGREE_LAST_ORDER",
            "org.jgrapht.experimental.alg.color",
            "GreedyColoring",
            "public static final int SMALLEST_DEGREE_LAST_ORDER = 2;"
         ],
         [
            "LARGEST_SATURATION_FIRST_ORDER",
            "org.jgrapht.experimental.alg.color",
            "GreedyColoring",
            "public static final int LARGEST_SATURATION_FIRST_ORDER = 3;"
         ],
         [
            "DEFAULT_EDGE_WEIGHT",
            "org.jgrapht",
            "WeightedGraph",
            "public static double DEFAULT_EDGE_WEIGHT = 1.0;"
         ],
         [
            "HUB_VERTEX",
            "org.jgrapht.generate",
            "WheelGraphGenerator",
            "public static final String HUB_VERTEX = \"Hub Vertex\";"
         ],
         [
            "CORNER_VERTEX",
            "org.jgrapht.generate",
            "GridGraphGenerator",
            "public static final String CORNER_VERTEX = \"Corner Vertex\";"
         ],
         [
            "START_VERTEX",
            "org.jgrapht.generate",
            "LinearGraphGenerator",
            "public static final String START_VERTEX = \"Start Vertex\";"
         ],
         [
            "END_VERTEX",
            "org.jgrapht.generate",
            "LinearGraphGenerator",
            "public static final String END_VERTEX = \"End Vertex\";"
         ],
         [
            "CENTER_VERTEX",
            "org.jgrapht.generate",
            "StarGraphGenerator",
            "public static final String CENTER_VERTEX = \"Center Vertex\";"
         ],
         [
            "SENTINEL",
            "org.jgrapht.traverse",
            "DepthFirstIterator",
            "public static final Object SENTINEL = new Object();"
         ],
         [
            "BEFORE_EDGE_ADDED",
            "org.jgrapht.event",
            "GraphEdgeChangeEvent",
            "public static final int BEFORE_EDGE_ADDED = 21;"
         ],
         [
            "BEFORE_EDGE_REMOVED",
            "org.jgrapht.event",
            "GraphEdgeChangeEvent",
            "public static final int BEFORE_EDGE_REMOVED = 22;"
         ],
         [
            "EDGE_ADDED",
            "org.jgrapht.event",
            "GraphEdgeChangeEvent",
            "public static final int EDGE_ADDED = 23;"
         ],
         [
            "EDGE_REMOVED",
            "org.jgrapht.event",
            "GraphEdgeChangeEvent",
            "public static final int EDGE_REMOVED = 24;"
         ],
         [
            "CONNECTED_COMPONENT_STARTED",
            "org.jgrapht.event",
            "ConnectedComponentTraversalEvent",
            "public static final int CONNECTED_COMPONENT_STARTED = 31;"
         ],
         [
            "CONNECTED_COMPONENT_FINISHED",
            "org.jgrapht.event",
            "ConnectedComponentTraversalEvent",
            "public static final int CONNECTED_COMPONENT_FINISHED = 32;"
         ],
         [
            "BEFORE_VERTEX_ADDED",
            "org.jgrapht.event",
            "GraphVertexChangeEvent",
            "public static final int BEFORE_VERTEX_ADDED = 11;"
         ],
         [
            "BEFORE_VERTEX_REMOVED",
            "org.jgrapht.event",
            "GraphVertexChangeEvent",
            "public static final int BEFORE_VERTEX_REMOVED = 12;"
         ],
         [
            "VERTEX_ADDED",
            "org.jgrapht.event",
            "GraphVertexChangeEvent",
            "public static final int VERTEX_ADDED = 13;"
         ],
         [
            "VERTEX_REMOVED",
            "org.jgrapht.event",
            "GraphVertexChangeEvent",
            "public static final int VERTEX_REMOVED = 14;"
         ],
         [
            "NULL_NODE",
            "org.jgrapht.alg.isomorphism",
            "VF2State",
            "public static final int NULL_NODE = -1;"
         ],
         [
            "DEBUG",
            "org.jgrapht.alg.isomorphism",
            "VF2State",
            "protected static final boolean DEBUG = false;"
         ],
         [
            "DEFAULT_EPSILON",
            "org.jgrapht.alg",
            "EdmondsKarpMaximumFlow",
            "public static final double DEFAULT_EPSILON = 0.000000001;"
         ],
         [
            "INSTANCE",
            "org.jgrapht.alg",
            "TransitiveClosure",
            "public static final TransitiveClosure INSTANCE = new TransitiveClosure();"
         ],
         [
            "INSTANCE",
            "org.jgrapht.alg",
            "TransitiveReduction",
            "public static final TransitiveReduction INSTANCE = new TransitiveReduction();"
         ],
         [
            "NEGATIVE_UNDIRECTED_EDGE",
            "org.jgrapht.alg",
            "BellmanFordIterator",
            "protected final static String NEGATIVE_UNDIRECTED_EDGE = \"Negative\" + \"edge-weights are not allowed in an unidrected graph!\";"
         ],
         [
            "DEFAULT_EPSILON",
            "org.jgrapht.alg.flow",
            "MaximumFlowAlgorithmBase",
            "public static final double DEFAULT_EPSILON = 1e-9;"
         ]
      ],
      "tokensMethodJavadocValues":[

      ],
      "tokensMethodArguments":[
         [
            "edges",
            "java.util.Collection",
            "Collection<? extends E>"
         ]
      ],
      "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods":[
         [
            "removeVertex",
            "org.jgrapht",
            "Graph",
            "public boolean removeVertex(V v)"
         ],
         [
            "getEdgeSource",
            "org.jgrapht",
            "Graph",
            "public V getEdgeSource(E e)"
         ],
         [
            "containsEdge",
            "org.jgrapht",
            "Graph",
            "public boolean containsEdge(V sourceVertex, V targetVertex)"
         ],
         [
            "addEdge",
            "org.jgrapht",
            "Graph",
            "public boolean addEdge(V sourceVertex, V targetVertex, E e)"
         ],
         [
            "removeAllEdges",
            "org.jgrapht",
            "Graph",
            "public Set<E> removeAllEdges(V sourceVertex, V targetVertex)"
         ],
         [
            "getEdgeFactory",
            "org.jgrapht",
            "Graph",
            "public EdgeFactory<V, E> getEdgeFactory()"
         ],
         [
            "addEdge",
            "org.jgrapht",
            "Graph",
            "public E addEdge(V sourceVertex, V targetVertex)"
         ],
         [
            "edgeSet",
            "org.jgrapht",
            "Graph",
            "public Set<E> edgeSet()"
         ],
         [
            "vertexSet",
            "org.jgrapht",
            "Graph",
            "public Set<V> vertexSet()"
         ],
         [
            "getEdgeTarget",
            "org.jgrapht",
            "Graph",
            "public V getEdgeTarget(E e)"
         ],
         [
            "containsEdge",
            "org.jgrapht",
            "Graph",
            "public boolean containsEdge(E e)"
         ],
         [
            "removeAllEdges",
            "org.jgrapht",
            "Graph",
            "public boolean removeAllEdges(Collection<? extends E> edges)"
         ],
         [
            "addVertex",
            "org.jgrapht",
            "Graph",
            "public boolean addVertex(V v)"
         ],
         [
            "edgesOf",
            "org.jgrapht",
            "Graph",
            "public Set<E> edgesOf(V vertex)"
         ],
         [
            "containsVertex",
            "org.jgrapht",
            "Graph",
            "public boolean containsVertex(V v)"
         ],
         [
            "removeEdge",
            "org.jgrapht",
            "Graph",
            "public E removeEdge(V sourceVertex, V targetVertex)"
         ],
         [
            "removeAllVertices",
            "org.jgrapht",
            "Graph",
            "public boolean removeAllVertices(Collection<? extends V> vertices)"
         ],
         [
            "getAllEdges",
            "org.jgrapht",
            "Graph",
            "public Set<E> getAllEdges(V sourceVertex, V targetVertex)"
         ],
         [
            "getEdgeWeight",
            "org.jgrapht",
            "Graph",
            "public double getEdgeWeight(E e)"
         ],
         [
            "removeEdge",
            "org.jgrapht",
            "Graph",
            "public boolean removeEdge(E e)"
         ],
         [
            "getEdge",
            "org.jgrapht",
            "Graph",
            "public E getEdge(V sourceVertex, V targetVertex)"
         ],
         [
            "size",
            "java.util",
            "Collection",
            "public abstract int size()"
         ],
         [
            "contains",
            "java.util",
            "Collection",
            "public abstract boolean contains(Object arg0)"
         ],
         [
            "add",
            "java.util",
            "Collection",
            "public abstract boolean add(E arg0)"
         ],
         [
            "retainAll",
            "java.util",
            "Collection",
            "public abstract boolean retainAll(Collection<? extends Object> arg0)"
         ],
         [
            "remove",
            "java.util",
            "Collection",
            "public abstract boolean remove(Object arg0)"
         ],
         [
            "removeIf",
            "java.util",
            "Collection",
            "public default boolean removeIf(Predicate<? super E> arg0)"
         ],
         [
            "toArray",
            "java.util",
            "Collection",
            "public abstract Object[] toArray()"
         ],
         [
            "stream",
            "java.util",
            "Collection",
            "public default Stream<E> stream()"
         ],
         [
            "toArray",
            "java.util",
            "Collection",
            "public abstract <T> T[] toArray(T[] arg0)"
         ],
         [
            "spliterator",
            "java.util",
            "Collection",
            "public default Spliterator<E> spliterator()"
         ],
         [
            "parallelStream",
            "java.util",
            "Collection",
            "public default Stream<E> parallelStream()"
         ],
         [
            "toArray",
            "java.util",
            "Collection",
            "public default <T> T[] toArray(IntFunction<T[]> arg0)"
         ],
         [
            "containsAll",
            "java.util",
            "Collection",
            "public abstract boolean containsAll(Collection<? extends Object> arg0)"
         ],
         [
            "isEmpty",
            "java.util",
            "Collection",
            "public abstract boolean isEmpty()"
         ],
         [
            "removeAll",
            "java.util",
            "Collection",
            "public abstract boolean removeAll(Collection<? extends Object> arg0)"
         ],
         [
            "hashCode",
            "java.util",
            "Collection",
            "public abstract int hashCode()"
         ],
         [
            "addAll",
            "java.util",
            "Collection",
            "public abstract boolean addAll(Collection<? extends E> arg0)"
         ],
         [
            "iterator",
            "java.util",
            "Collection",
            "public abstract Iterator<E> iterator()"
         ],
         [
            "equals",
            "java.util",
            "Collection",
            "public abstract boolean equals(Object arg0)"
         ],
         [
            "spliterator",
            "java.lang",
            "Iterable",
            "public default Spliterator<T> spliterator()"
         ],
         [
            "iterator",
            "java.lang",
            "Iterable",
            "public abstract Iterator<T> iterator()"
         ],
         [
            "hashCode",
            "java.lang",
            "Object",
            "public native int hashCode()"
         ],
         [
            "clone",
            "java.lang",
            "Object",
            "protected native Object clone() throws CloneNotSupportedException"
         ],
         [
            "getClass",
            "java.lang",
            "Object",
            "public final native Class<? extends Object> getClass()"
         ],
         [
            "equals",
            "java.lang",
            "Object",
            "public boolean equals(Object arg0)"
         ],
         [
            "toString",
            "java.lang",
            "Object",
            "public String toString()"
         ]
      ],
      "tokensMethodVariablesNonPrivateNonStaticAttributes":[

      ],
      "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods":[

      ],
      "tokensOracleVariablesNonPrivateNonStaticAttributes":[

      ]
   },
   {
      "id":8,
      "oracle":";",
      "oracleType":"NORMAL_POST",
      "projectName":"jgrapht-core-0.9.2",
      "packageName":"org.jgrapht.graph.builder",
      "className":"AbstractGraphBuilder",
      "javadocTag":"@return this builder object",
      "methodJavadoc":"    /**\n     * Adds an edge to the graph being built. The source and target vertices are\n     * added to the graph, if not already included.\n     *\n     * @param source source vertex of the edge.\n     * @param target target vertex of the edge.\n     *\n     * @return this builder object\n     *\n     * @see Graphs#addEdgeWithVertices(Graph, Object, Object)\n     */",
      "methodSourceCode":"public B addEdge(V source, V target){\n    Graphs.addEdgeWithVertices(this.graph, source, target);\n    return this.self();\n}",
      "classJavadoc":"/**\n * Base class for builders of {@link Graph}\n *\n * @see DirectedGraphBuilderBase\n * @see UndirectedGraphBuilderBase\n */",
      "classSourceCode":"/* ==========================================\n * JGraphT : a free Java graph-theory library\n * ==========================================\n *\n * Project Info:  http://jgrapht.sourceforge.net/\n * Project Creator:  Barak Naveh (http://sourceforge.net/users/barak_naveh)\n *\n * (C) Copyright 2003-2008, by Barak Naveh and Contributors.\n *\n * This program and the accompanying materials are dual-licensed under\n * either\n *\n * (a) the terms of the GNU Lesser General Public License version 2.1\n * as published by the Free Software Foundation, or (at your option) any\n * later version.\n *\n * or (per the licensee's choosing)\n *\n * (b) the terms of the Eclipse Public License v1.0 as published by\n * the Eclipse Foundation.\n */\n/* ---------------------\n * GraphBuilderBase.java\n * ---------------------\n * (C) Copyright 2015, by Andrew Chen and Contributors.\n *\n * Original Author:  Andrew Chen <llkiwi2006@gmail.com>\n * Contributor(s):   -\n *\n * $Id$\n *\n * Changes\n * -------\n * 12-Jan-2015 : Initial revision (AC);\n *\n */\npackage org.jgrapht.graph.builder;\n\nimport org.jgrapht.*;\nimport org.jgrapht.graph.*;\n\n\n/**\n * Base class for builders of {@link Graph}\n *\n * @see DirectedGraphBuilderBase\n * @see UndirectedGraphBuilderBase\n */\npublic abstract class AbstractGraphBuilder<V,\n    E, G extends Graph<V, E>, B extends AbstractGraphBuilder<V, E, G, B>>\n{\n    protected final G graph;\n\n    /**\n     * Creates a builder based on {@code baseGraph}. {@code baseGraph} must be\n     * mutable.\n     *\n     * @param baseGraph the graph object to base building on\n     */\n    public AbstractGraphBuilder(G baseGraph)\n    {\n        this.graph = baseGraph;\n    }\n\n    /**\n     * @return the {@code this} object.\n     */\n    protected abstract B self();\n\n    /**\n     * Adds {@code vertex} to the graph being built.\n     *\n     * @param vertex the vertex to add\n     *\n     * @return this builder object\n     *\n     * @see Graph#addVertex(Object)\n     */\n    public B addVertex(V vertex)\n    {\n        this.graph.addVertex(vertex);\n        return this.self();\n    }\n\n    /**\n     * Adds each vertex of {@code vertices} to the graph being built.\n     *\n     * @param vertices the vertices to add\n     *\n     * @return this builder object\n     *\n     * @see #addVertex(Object)\n     */\n    public B addVertices(V ... vertices)\n    {\n        for (V vertex : vertices) {\n            this.addVertex(vertex);\n        }\n        return this.self();\n    }\n\n    /**\n     * Adds an edge to the graph being built. The source and target vertices are\n     * added to the graph, if not already included.\n     *\n     * @param source source vertex of the edge.\n     * @param target target vertex of the edge.\n     *\n     * @return this builder object\n     *\n     * @see Graphs#addEdgeWithVertices(Graph, Object, Object)\n     */\n    public B addEdge(V source, V target)\n    {\n        Graphs.addEdgeWithVertices(this.graph, source, target);\n        return this.self();\n    }\n\n    /**\n     * Adds a chain of edges to the graph being built. The vertices are added to\n     * the graph, if not already included.\n     *\n     * @return this builder object\n     *\n     * @see #addEdge(Object, Object)\n     */\n    public B addEdgeChain(V first, V second, V ... rest)\n    {\n        this.addEdge(first, second);\n        V last = second;\n        for (V vertex : rest) {\n            this.addEdge(last, vertex);\n            last = vertex;\n        }\n        return this.self();\n    }\n\n    /**\n     * Adds all the vertices and all the edges of the {@code sourceGraph} to the\n     * graph being built.\n     *\n     * @return this builder object\n     *\n     * @see Graphs#addGraph(Graph, Graph)\n     */\n    public B addGraph(Graph<? extends V, ? extends E> sourceGraph)\n    {\n        Graphs.addGraph(this.graph, sourceGraph);\n        return this.self();\n    }\n\n    /**\n     * Removes {@code vertex} from the graph being built, if such vertex exist\n     * in graph.\n     *\n     * @param vertex the vertex to remove\n     *\n     * @return this builder object\n     *\n     * @see Graph#removeVertex(Object)\n     */\n    public B removeVertex(V vertex)\n    {\n        this.graph.removeVertex(vertex);\n        return this.self();\n    }\n\n    /**\n     * Removes each vertex of {@code vertices} from the graph being built, if\n     * such vertices exist in graph.\n     *\n     * @param vertices the vertices to remove\n     *\n     * @return this builder object\n     *\n     * @see #removeVertex(Object)\n     */\n    public B removeVertices(V ... vertices)\n    {\n        for (V vertex : vertices) {\n            this.removeVertex(vertex);\n        }\n        return this.self();\n    }\n\n    /**\n     * Removes an edge going from source vertex to target vertex from the graph\n     * being built, if such vertices and such edge exist in the graph.\n     *\n     * @param source source vertex of the edge.\n     * @param target target vertex of the edge.\n     *\n     * @return this builder object\n     *\n     * @see Graph#removeVertex(Object)\n     */\n    public B removeEdge(V source, V target)\n    {\n        this.graph.removeEdge(source, target);\n        return this.self();\n    }\n\n    /**\n     * Build the graph. Calling any method (including this method) on this\n     * builder object after calling this method is undefined behaviour.\n     *\n     * @return the built graph.\n     */\n    public G build()\n    {\n        return this.graph;\n    }\n\n    /**\n     * Build an unmodifiable version graph. Calling any method (including this\n     * method) on this builder object after calling this method is undefined\n     * behaviour.\n     *\n     * @return the built unmodifiable graph.\n     *\n     * @see #build()\n     */\n    public UnmodifiableGraph<V, E> buildUnmodifiable()\n    {\n        return new UnmodifiableGraph<V, E>(this.graph);\n    }\n}\n\n// End GraphBuilderBase.java\n",
      "tokensGeneralGrammar":[
         "null",
         "true",
         "false",
         ",",
         ".",
         ":",
         ";",
         "?",
         "(",
         ")",
         "jdVar",
         "stream",
         "Arrays",
         "allMatch",
         "noneMatch",
         "anyMatch",
         "~",
         ">>",
         "<<",
         ">>>",
         "|",
         "&",
         "^",
         "+",
         "-",
         "/",
         "*",
         "%",
         "&&",
         "||",
         ">=",
         "<=",
         ">",
         "<",
         "==",
         "!=",
         "instanceof",
         "class",
         "methodResultID",
         "this"
      ],
      "tokensGeneralValuesGlobalDictionary":[
         [
            "0",
            "int"
         ],
         [
            "1",
            "int"
         ],
         [
            "-1",
            "int"
         ],
         [
            "0.0",
            "double"
         ],
         [
            "1.0",
            "double"
         ],
         [
            "-1.0",
            "double"
         ],
         [
            "\"\"",
            "String"
         ]
      ],
      "tokensProjectClasses":[
         [
            "PartiteRandomGraphGenerator",
            "org.jgrapht.experimental"
         ],
         [
            "RandomGraphHelper",
            "org.jgrapht.experimental"
         ],
         [
            "GraphReader",
            "org.jgrapht.experimental"
         ],
         [
            "DirectedAcyclicGraph",
            "org.jgrapht.experimental.dag"
         ],
         [
            "GraphSquare",
            "org.jgrapht.experimental"
         ],
         [
            "UniformRandomGraphGenerator",
            "org.jgrapht.experimental"
         ],
         [
            "GraphTests",
            "org.jgrapht.experimental"
         ],
         [
            "ApproximationAlgorithm",
            "org.jgrapht.experimental.alg"
         ],
         [
            "BrownBacktrackColoring",
            "org.jgrapht.experimental.alg.color"
         ],
         [
            "GreedyColoring",
            "org.jgrapht.experimental.alg.color"
         ],
         [
            "IntArrayGraphAlgorithm",
            "org.jgrapht.experimental.alg"
         ],
         [
            "ExactAlgorithm",
            "org.jgrapht.experimental.alg"
         ],
         [
            "ListenableGraph",
            "org.jgrapht"
         ],
         [
            "ModifiableInteger",
            "org.jgrapht.util"
         ],
         [
            "FibonacciHeapNode",
            "org.jgrapht.util"
         ],
         [
            "WeightCombiner",
            "org.jgrapht.util"
         ],
         [
            "FibonacciHeap",
            "org.jgrapht.util"
         ],
         [
            "TypeUtil",
            "org.jgrapht.util"
         ],
         [
            "ArrayUnenforcedSet",
            "org.jgrapht.util"
         ],
         [
            "VertexPair",
            "org.jgrapht.util"
         ],
         [
            "MathUtil",
            "org.jgrapht.util"
         ],
         [
            "PrefetchIterator",
            "org.jgrapht.util"
         ],
         [
            "VertexFactory",
            "org.jgrapht"
         ],
         [
            "Graph",
            "org.jgrapht"
         ],
         [
            "GraphPath",
            "org.jgrapht"
         ],
         [
            "UndirectedGraphUnion",
            "org.jgrapht.graph"
         ],
         [
            "SimpleGraph",
            "org.jgrapht.graph"
         ],
         [
            "MixedGraphUnion",
            "org.jgrapht.graph"
         ],
         [
            "DefaultGraphMapping",
            "org.jgrapht.graph"
         ],
         [
            "WeightedPseudograph",
            "org.jgrapht.graph"
         ],
         [
            "UndirectedMaskSubgraph",
            "org.jgrapht.graph"
         ],
         [
            "MaskEdgeSet",
            "org.jgrapht.graph"
         ],
         [
            "Pseudograph",
            "org.jgrapht.graph"
         ],
         [
            "MaskFunctor",
            "org.jgrapht.graph"
         ],
         [
            "GraphUnion",
            "org.jgrapht.graph"
         ],
         [
            "DirectedMaskSubgraph",
            "org.jgrapht.graph"
         ],
         [
            "DirectedMultigraph",
            "org.jgrapht.graph"
         ],
         [
            "AbstractBaseGraph",
            "org.jgrapht.graph"
         ],
         [
            "DirectedWeightedPseudograph",
            "org.jgrapht.graph"
         ],
         [
            "Multigraph",
            "org.jgrapht.graph"
         ],
         [
            "DefaultDirectedGraph",
            "org.jgrapht.graph"
         ],
         [
            "DefaultWeightedEdge",
            "org.jgrapht.graph"
         ],
         [
            "ListenableDirectedWeightedGraph",
            "org.jgrapht.graph"
         ],
         [
            "DirectedGraphUnion",
            "org.jgrapht.graph"
         ],
         [
            "AsUnweightedGraph",
            "org.jgrapht.graph"
         ],
         [
            "EdgeSetFactory",
            "org.jgrapht.graph"
         ],
         [
            "GraphDelegator",
            "org.jgrapht.graph"
         ],
         [
            "DefaultListenableGraph",
            "org.jgrapht.graph"
         ],
         [
            "AsUndirectedGraph",
            "org.jgrapht.graph"
         ],
         [
            "ClassBasedVertexFactory",
            "org.jgrapht.graph"
         ],
         [
            "DefaultEdge",
            "org.jgrapht.graph"
         ],
         [
            "MaskVertexSet",
            "org.jgrapht.graph"
         ],
         [
            "ListenableUndirectedGraph",
            "org.jgrapht.graph"
         ],
         [
            "DirectedWeightedSubgraph",
            "org.jgrapht.graph"
         ],
         [
            "ListenableUndirectedWeightedGraph",
            "org.jgrapht.graph"
         ],
         [
            "AsUnweightedDirectedGraph",
            "org.jgrapht.graph"
         ],
         [
            "DefaultDirectedWeightedGraph",
            "org.jgrapht.graph"
         ],
         [
            "IntrusiveEdge",
            "org.jgrapht.graph"
         ],
         [
            "UnmodifiableGraph",
            "org.jgrapht.graph"
         ],
         [
            "GraphPathImpl",
            "org.jgrapht.graph"
         ],
         [
            "Subgraph",
            "org.jgrapht.graph"
         ],
         [
            "UndirectedWeightedSubgraph",
            "org.jgrapht.graph"
         ],
         [
            "DirectedPseudograph",
            "org.jgrapht.graph"
         ],
         [
            "AbstractGraph",
            "org.jgrapht.graph"
         ],
         [
            "MaskSubgraph",
            "org.jgrapht.graph"
         ],
         [
            "ClassBasedEdgeFactory",
            "org.jgrapht.graph"
         ],
         [
            "SimpleWeightedGraph",
            "org.jgrapht.graph"
         ],
         [
            "AsWeightedDirectedGraph",
            "org.jgrapht.graph"
         ],
         [
            "SimpleDirectedWeightedGraph",
            "org.jgrapht.graph"
         ],
         [
            "UnmodifiableUndirectedGraph",
            "org.jgrapht.graph"
         ],
         [
            "UndirectedSubgraph",
            "org.jgrapht.graph"
         ],
         [
            "WeightedMultigraph",
            "org.jgrapht.graph"
         ],
         [
            "EdgeReversedGraph",
            "org.jgrapht.graph"
         ],
         [
            "AsWeightedGraph",
            "org.jgrapht.graph"
         ],
         [
            "DirectedGraphBuilder",
            "org.jgrapht.graph.builder"
         ],
         [
            "UndirectedGraphBuilderBase",
            "org.jgrapht.graph.builder"
         ],
         [
            "UndirectedGraphBuilder",
            "org.jgrapht.graph.builder"
         ],
         [
            "UndirectedWeightedGraphBuilder",
            "org.jgrapht.graph.builder"
         ],
         [
            "UndirectedWeightedGraphBuilderBase",
            "org.jgrapht.graph.builder"
         ],
         [
            "DirectedWeightedGraphBuilderBase",
            "org.jgrapht.graph.builder"
         ],
         [
            "AbstractGraphBuilder",
            "org.jgrapht.graph.builder"
         ],
         [
            "DirectedWeightedGraphBuilder",
            "org.jgrapht.graph.builder"
         ],
         [
            "DirectedGraphBuilderBase",
            "org.jgrapht.graph.builder"
         ],
         [
            "ListenableDirectedGraph",
            "org.jgrapht.graph"
         ],
         [
            "UnmodifiableDirectedGraph",
            "org.jgrapht.graph"
         ],
         [
            "SimpleGraphPath",
            "org.jgrapht.graph"
         ],
         [
            "ParanoidGraph",
            "org.jgrapht.graph"
         ],
         [
            "DirectedWeightedMultigraph",
            "org.jgrapht.graph"
         ],
         [
            "DirectedSubgraph",
            "org.jgrapht.graph"
         ],
         [
            "SimpleDirectedGraph",
            "org.jgrapht.graph"
         ],
         [
            "GraphHelper",
            "org.jgrapht"
         ],
         [
            "Graphs",
            "org.jgrapht"
         ],
         [
            "DirectedGraph",
            "org.jgrapht"
         ],
         [
            "WeightedGraph",
            "org.jgrapht"
         ],
         [
            "HyperCubeGraphGenerator",
            "org.jgrapht.generate"
         ],
         [
            "RingGraphGenerator",
            "org.jgrapht.generate"
         ],
         [
            "SimpleWeightedGraphMatrixGenerator",
            "org.jgrapht.generate"
         ],
         [
            "WeightedGraphGenerator",
            "org.jgrapht.generate"
         ],
         [
            "WheelGraphGenerator",
            "org.jgrapht.generate"
         ],
         [
            "GridGraphGenerator",
            "org.jgrapht.generate"
         ],
         [
            "ScaleFreeGraphGenerator",
            "org.jgrapht.generate"
         ],
         [
            "SimpleWeightedBipartiteGraphMatrixGenerator",
            "org.jgrapht.generate"
         ],
         [
            "LinearGraphGenerator",
            "org.jgrapht.generate"
         ],
         [
            "CompleteGraphGenerator",
            "org.jgrapht.generate"
         ],
         [
            "RandomGraphGenerator",
            "org.jgrapht.generate"
         ],
         [
            "WeightedGraphGeneratorAdapter",
            "org.jgrapht.generate"
         ],
         [
            "EmptyGraphGenerator",
            "org.jgrapht.generate"
         ],
         [
            "CompleteBipartiteGraphGenerator",
            "org.jgrapht.generate"
         ],
         [
            "GraphGenerator",
            "org.jgrapht.generate"
         ],
         [
            "StarGraphGenerator",
            "org.jgrapht.generate"
         ],
         [
            "UndirectedGraph",
            "org.jgrapht"
         ],
         [
            "TopologicalOrderIterator",
            "org.jgrapht.traverse"
         ],
         [
            "CrossComponentIterator",
            "org.jgrapht.traverse"
         ],
         [
            "AbstractGraphIterator",
            "org.jgrapht.traverse"
         ],
         [
            "ClosestFirstIterator",
            "org.jgrapht.traverse"
         ],
         [
            "BreadthFirstIterator",
            "org.jgrapht.traverse"
         ],
         [
            "DepthFirstIterator",
            "org.jgrapht.traverse"
         ],
         [
            "GraphIterator",
            "org.jgrapht.traverse"
         ],
         [
            "EdgeFactory",
            "org.jgrapht"
         ],
         [
            "GraphMapping",
            "org.jgrapht"
         ],
         [
            "VertexSetListener",
            "org.jgrapht.event"
         ],
         [
            "EdgeTraversalEvent",
            "org.jgrapht.event"
         ],
         [
            "TraversalListener",
            "org.jgrapht.event"
         ],
         [
            "GraphEdgeChangeEvent",
            "org.jgrapht.event"
         ],
         [
            "VertexTraversalEvent",
            "org.jgrapht.event"
         ],
         [
            "GraphChangeEvent",
            "org.jgrapht.event"
         ],
         [
            "GraphListener",
            "org.jgrapht.event"
         ],
         [
            "TraversalListenerAdapter",
            "org.jgrapht.event"
         ],
         [
            "ConnectedComponentTraversalEvent",
            "org.jgrapht.event"
         ],
         [
            "GraphVertexChangeEvent",
            "org.jgrapht.event"
         ],
         [
            "TarjanLowestCommonAncestor",
            "org.jgrapht.alg"
         ],
         [
            "PrimMinimumSpanningTree",
            "org.jgrapht.alg"
         ],
         [
            "BlockCutpointGraph",
            "org.jgrapht.alg"
         ],
         [
            "AllDirectedPaths",
            "org.jgrapht.alg"
         ],
         [
            "KShortestPathsIterator",
            "org.jgrapht.alg"
         ],
         [
            "KruskalMinimumSpanningTree",
            "org.jgrapht.alg"
         ],
         [
            "StrongConnectivityInspector",
            "org.jgrapht.alg"
         ],
         [
            "VF2State",
            "org.jgrapht.alg.isomorphism"
         ],
         [
            "VF2GraphIsomorphismState",
            "org.jgrapht.alg.isomorphism"
         ],
         [
            "VF2AbstractIsomorphismInspector",
            "org.jgrapht.alg.isomorphism"
         ],
         [
            "VF2SubgraphIsomorphismState",
            "org.jgrapht.alg.isomorphism"
         ],
         [
            "IsomorphismInspector",
            "org.jgrapht.alg.isomorphism"
         ],
         [
            "VF2SubgraphIsomorphismInspector",
            "org.jgrapht.alg.isomorphism"
         ],
         [
            "GraphOrdering",
            "org.jgrapht.alg.isomorphism"
         ],
         [
            "VF2GraphMappingIterator",
            "org.jgrapht.alg.isomorphism"
         ],
         [
            "IsomorphicGraphMapping",
            "org.jgrapht.alg.isomorphism"
         ],
         [
            "VF2GraphIsomorphismInspector",
            "org.jgrapht.alg.isomorphism"
         ],
         [
            "VF2SubgraphMappingIterator",
            "org.jgrapht.alg.isomorphism"
         ],
         [
            "VF2MappingIterator",
            "org.jgrapht.alg.isomorphism"
         ],
         [
            "BronKerboschCliqueFinder",
            "org.jgrapht.alg"
         ],
         [
            "ChromaticNumber",
            "org.jgrapht.alg"
         ],
         [
            "KosarajuStrongConnectivityInspector",
            "org.jgrapht.alg"
         ],
         [
            "BellmanFordShortestPath",
            "org.jgrapht.alg"
         ],
         [
            "DijkstraShortestPath",
            "org.jgrapht.alg"
         ],
         [
            "RankingPathElement",
            "org.jgrapht.alg"
         ],
         [
            "AStarShortestPath",
            "org.jgrapht.alg"
         ],
         [
            "EdmondsKarpMaximumFlow",
            "org.jgrapht.alg"
         ],
         [
            "BellmanFordPathElement",
            "org.jgrapht.alg"
         ],
         [
            "FloydWarshallShortestPaths",
            "org.jgrapht.alg"
         ],
         [
            "UnionFind",
            "org.jgrapht.alg.util"
         ],
         [
            "AlwaysEqualComparator",
            "org.jgrapht.alg.util"
         ],
         [
            "Extension",
            "org.jgrapht.alg.util"
         ],
         [
            "VertexDegreeComparator",
            "org.jgrapht.alg.util"
         ],
         [
            "Pair",
            "org.jgrapht.alg.util"
         ],
         [
            "GabowStrongConnectivityInspector",
            "org.jgrapht.alg"
         ],
         [
            "HawickJamesSimpleCycles",
            "org.jgrapht.alg.cycle"
         ],
         [
            "DirectedSimpleCycles",
            "org.jgrapht.alg.cycle"
         ],
         [
            "JohnsonSimpleCycles",
            "org.jgrapht.alg.cycle"
         ],
         [
            "TiernanSimpleCycles",
            "org.jgrapht.alg.cycle"
         ],
         [
            "UndirectedCycleBase",
            "org.jgrapht.alg.cycle"
         ],
         [
            "PatonCycleBase",
            "org.jgrapht.alg.cycle"
         ],
         [
            "TarjanSimpleCycles",
            "org.jgrapht.alg.cycle"
         ],
         [
            "SzwarcfiterLauerSimpleCycles",
            "org.jgrapht.alg.cycle"
         ],
         [
            "BiconnectivityInspector",
            "org.jgrapht.alg"
         ],
         [
            "ConnectivityInspector",
            "org.jgrapht.alg"
         ],
         [
            "MinSourceSinkCut",
            "org.jgrapht.alg"
         ],
         [
            "RankingPathElementList",
            "org.jgrapht.alg"
         ],
         [
            "EdmondsBlossomShrinking",
            "org.jgrapht.alg"
         ],
         [
            "TransitiveClosure",
            "org.jgrapht.alg"
         ],
         [
            "HopcroftKarpBipartiteMatching",
            "org.jgrapht.alg"
         ],
         [
            "StoerWagnerMinimumCut",
            "org.jgrapht.alg"
         ],
         [
            "AbstractPathElementList",
            "org.jgrapht.alg"
         ],
         [
            "KuhnMunkresMinimalWeightBipartitePerfectMatching",
            "org.jgrapht.alg"
         ],
         [
            "TransitiveReduction",
            "org.jgrapht.alg"
         ],
         [
            "EulerianCircuit",
            "org.jgrapht.alg"
         ],
         [
            "DirectedNeighborIndex",
            "org.jgrapht.alg"
         ],
         [
            "NaiveLcaFinder",
            "org.jgrapht.alg"
         ],
         [
            "MaximumWeightBipartiteMatching",
            "org.jgrapht.alg"
         ],
         [
            "HamiltonianCycle",
            "org.jgrapht.alg"
         ],
         [
            "KShortestPaths",
            "org.jgrapht.alg"
         ],
         [
            "NeighborIndex",
            "org.jgrapht.alg"
         ],
         [
            "VertexCovers",
            "org.jgrapht.alg"
         ],
         [
            "CycleDetector",
            "org.jgrapht.alg"
         ],
         [
            "AStarAdmissibleHeuristic",
            "org.jgrapht.alg.interfaces"
         ],
         [
            "MinimumSpanningTree",
            "org.jgrapht.alg.interfaces"
         ],
         [
            "WeightedMatchingAlgorithm",
            "org.jgrapht.alg.interfaces"
         ],
         [
            "StrongConnectivityAlgorithm",
            "org.jgrapht.alg.interfaces"
         ],
         [
            "MaximumFlowAlgorithm",
            "org.jgrapht.alg.interfaces"
         ],
         [
            "MatchingAlgorithm",
            "org.jgrapht.alg.interfaces"
         ],
         [
            "CliqueMinimalSeparatorDecomposition",
            "org.jgrapht.alg"
         ],
         [
            "BellmanFordIterator",
            "org.jgrapht.alg"
         ],
         [
            "AbstractPathElement",
            "org.jgrapht.alg"
         ],
         [
            "EdmondsKarpMaximumFlow",
            "org.jgrapht.alg.flow"
         ],
         [
            "PushRelabelMaximumFlow",
            "org.jgrapht.alg.flow"
         ],
         [
            "MaximumFlowAlgorithmBase",
            "org.jgrapht.alg.flow"
         ]
      ],
      "tokensProjectClassesNonPrivateStaticNonVoidMethods":[
         [
            "addVertices",
            "org.jgrapht.experimental",
            "RandomGraphHelper",
            "public static Object[] addVertices(Graph target, VertexFactory vertexFactory, int numVertices)"
         ],
         [
            "isEmpty",
            "org.jgrapht.experimental",
            "GraphTests",
            "public static <V, E> boolean isEmpty(Graph<V, E> g)"
         ],
         [
            "isComplete",
            "org.jgrapht.experimental",
            "GraphTests",
            "public static <V, E> boolean isComplete(Graph<V, E> g)"
         ],
         [
            "isConnected",
            "org.jgrapht.experimental",
            "GraphTests",
            "public static <V, E> boolean isConnected(Graph<V, E> g)"
         ],
         [
            "isTree",
            "org.jgrapht.experimental",
            "GraphTests",
            "public static <V, E> boolean isTree(Graph<V, E> g)"
         ],
         [
            "isBipartite",
            "org.jgrapht.experimental",
            "GraphTests",
            "public static <V, E> boolean isBipartite(Graph<V, E> g)"
         ],
         [
            "union",
            "org.jgrapht.util",
            "FibonacciHeap",
            "public static <T> FibonacciHeap<T> union(FibonacciHeap<T> h1, FibonacciHeap<T> h2)"
         ],
         [
            "uncheckedCast",
            "org.jgrapht.util",
            "TypeUtil",
            "public static <T> T uncheckedCast(Object o, TypeUtil<T> typeDecl)"
         ],
         [
            "factorial",
            "org.jgrapht.util",
            "MathUtil",
            "public static long factorial(int N)"
         ],
         [
            "builder",
            "org.jgrapht.graph",
            "SimpleGraph",
            "public static <V, E> UndirectedGraphBuilderBase<V, E, ? extends SimpleGraph<V, E>, ?> builder(Class<? extends E> edgeClass)"
         ],
         [
            "builder",
            "org.jgrapht.graph",
            "SimpleGraph",
            "public static <V, E> UndirectedGraphBuilderBase<V, E, ? extends SimpleGraph<V, E>, ?> builder(EdgeFactory<V, E> ef)"
         ],
         [
            "builder",
            "org.jgrapht.graph",
            "WeightedPseudograph",
            "public static <V, E> UndirectedWeightedGraphBuilderBase<V, E, ? extends WeightedPseudograph<V, E>, ?> builder(Class<? extends E> edgeClass)"
         ],
         [
            "builder",
            "org.jgrapht.graph",
            "WeightedPseudograph",
            "public static <V, E> UndirectedWeightedGraphBuilderBase<V, E, ? extends WeightedPseudograph<V, E>, ?> builder(EdgeFactory<V, E> ef)"
         ],
         [
            "builder",
            "org.jgrapht.graph",
            "Pseudograph",
            "public static <V, E> UndirectedGraphBuilderBase<V, E, ? extends Pseudograph<V, E>, ?> builder(Class<? extends E> edgeClass)"
         ],
         [
            "builder",
            "org.jgrapht.graph",
            "Pseudograph",
            "public static <V, E> UndirectedGraphBuilderBase<V, E, ? extends Pseudograph<V, E>, ?> builder(EdgeFactory<V, E> ef)"
         ],
         [
            "builder",
            "org.jgrapht.graph",
            "DirectedMultigraph",
            "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends DirectedMultigraph<V, E>, ?> builder(Class<? extends E> edgeClass)"
         ],
         [
            "builder",
            "org.jgrapht.graph",
            "DirectedMultigraph",
            "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends DirectedMultigraph<V, E>, ?> builder(EdgeFactory<V, E> ef)"
         ],
         [
            "builder",
            "org.jgrapht.graph",
            "DirectedWeightedPseudograph",
            "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends DirectedWeightedPseudograph<V, E>, ?> builder(Class<? extends E> edgeClass)"
         ],
         [
            "builder",
            "org.jgrapht.graph",
            "DirectedWeightedPseudograph",
            "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends DirectedWeightedPseudograph<V, E>, ?> builder(EdgeFactory<V, E> ef)"
         ],
         [
            "builder",
            "org.jgrapht.graph",
            "Multigraph",
            "public static <V, E> UndirectedGraphBuilderBase<V, E, ? extends Multigraph<V, E>, ?> builder(Class<? extends E> edgeClass)"
         ],
         [
            "builder",
            "org.jgrapht.graph",
            "Multigraph",
            "public static <V, E> UndirectedGraphBuilderBase<V, E, ? extends Multigraph<V, E>, ?> builder(EdgeFactory<V, E> ef)"
         ],
         [
            "builder",
            "org.jgrapht.graph",
            "DefaultDirectedGraph",
            "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends DefaultDirectedGraph<V, E>, ?> builder(Class<? extends E> edgeClass)"
         ],
         [
            "builder",
            "org.jgrapht.graph",
            "DefaultDirectedGraph",
            "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends DefaultDirectedGraph<V, E>, ?> builder(EdgeFactory<V, E> ef)"
         ],
         [
            "builder",
            "org.jgrapht.graph",
            "DefaultDirectedWeightedGraph",
            "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends DefaultDirectedWeightedGraph<V, E>, ?> builder(Class<? extends E> edgeClass)"
         ],
         [
            "builder",
            "org.jgrapht.graph",
            "DefaultDirectedWeightedGraph",
            "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends DefaultDirectedWeightedGraph<V, E>, ?> builder(EdgeFactory<V, E> ef)"
         ],
         [
            "builder",
            "org.jgrapht.graph",
            "DirectedPseudograph",
            "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends DirectedPseudograph<V, E>, ?> builder(Class<? extends E> edgeClass)"
         ],
         [
            "builder",
            "org.jgrapht.graph",
            "DirectedPseudograph",
            "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends DirectedPseudograph<V, E>, ?> builder(EdgeFactory<V, E> ef)"
         ],
         [
            "builder",
            "org.jgrapht.graph",
            "SimpleWeightedGraph",
            "public static <V, E> UndirectedWeightedGraphBuilderBase<V, E, ? extends SimpleWeightedGraph<V, E>, ?> builder(Class<? extends E> edgeClass)"
         ],
         [
            "builder",
            "org.jgrapht.graph",
            "SimpleWeightedGraph",
            "public static <V, E> UndirectedWeightedGraphBuilderBase<V, E, ? extends SimpleWeightedGraph<V, E>, ?> builder(EdgeFactory<V, E> ef)"
         ],
         [
            "builder",
            "org.jgrapht.graph",
            "SimpleDirectedWeightedGraph",
            "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends SimpleDirectedWeightedGraph<V, E>, ?> builder(Class<? extends E> edgeClass)"
         ],
         [
            "builder",
            "org.jgrapht.graph",
            "SimpleDirectedWeightedGraph",
            "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends SimpleDirectedWeightedGraph<V, E>, ?> builder(EdgeFactory<V, E> ef)"
         ],
         [
            "builder",
            "org.jgrapht.graph",
            "WeightedMultigraph",
            "public static <V, E> UndirectedWeightedGraphBuilderBase<V, E, ? extends WeightedMultigraph<V, E>, ?> builder(Class<? extends E> edgeClass)"
         ],
         [
            "builder",
            "org.jgrapht.graph",
            "WeightedMultigraph",
            "public static <V, E> UndirectedWeightedGraphBuilderBase<V, E, ? extends WeightedMultigraph<V, E>, ?> builder(EdgeFactory<V, E> ef)"
         ],
         [
            "builder",
            "org.jgrapht.graph",
            "DirectedWeightedMultigraph",
            "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends DirectedWeightedMultigraph<V, E>, ?> builder(Class<? extends E> edgeClass)"
         ],
         [
            "builder",
            "org.jgrapht.graph",
            "DirectedWeightedMultigraph",
            "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends DirectedWeightedMultigraph<V, E>, ?> builder(EdgeFactory<V, E> ef)"
         ],
         [
            "builder",
            "org.jgrapht.graph",
            "SimpleDirectedGraph",
            "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends SimpleDirectedGraph<V, E>, ?> builder(Class<? extends E> edgeClass)"
         ],
         [
            "builder",
            "org.jgrapht.graph",
            "SimpleDirectedGraph",
            "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends SimpleDirectedGraph<V, E>, ?> builder(EdgeFactory<V, E> ef)"
         ],
         [
            "addEdge",
            "org.jgrapht",
            "Graphs",
            "public static <V, E> E addEdge(Graph<V, E> g, V sourceVertex, V targetVertex, double weight)"
         ],
         [
            "addEdgeWithVertices",
            "org.jgrapht",
            "Graphs",
            "public static <V, E> E addEdgeWithVertices(Graph<V, E> g, V sourceVertex, V targetVertex)"
         ],
         [
            "addEdgeWithVertices",
            "org.jgrapht",
            "Graphs",
            "public static <V, E> boolean addEdgeWithVertices(Graph<V, E> targetGraph, Graph<V, E> sourceGraph, E edge)"
         ],
         [
            "addEdgeWithVertices",
            "org.jgrapht",
            "Graphs",
            "public static <V, E> E addEdgeWithVertices(Graph<V, E> g, V sourceVertex, V targetVertex, double weight)"
         ],
         [
            "addGraph",
            "org.jgrapht",
            "Graphs",
            "public static <V, E> boolean addGraph(Graph<? super V, ? super E> destination, Graph<V, E> source)"
         ],
         [
            "addAllEdges",
            "org.jgrapht",
            "Graphs",
            "public static <V, E> boolean addAllEdges(Graph<? super V, ? super E> destination, Graph<V, E> source, Collection<? extends E> edges)"
         ],
         [
            "addAllVertices",
            "org.jgrapht",
            "Graphs",
            "public static <V, E> boolean addAllVertices(Graph<? super V, ? super E> destination, Collection<? extends V> vertices)"
         ],
         [
            "neighborListOf",
            "org.jgrapht",
            "Graphs",
            "public static <V, E> List<V> neighborListOf(Graph<V, E> g, V vertex)"
         ],
         [
            "predecessorListOf",
            "org.jgrapht",
            "Graphs",
            "public static <V, E> List<V> predecessorListOf(DirectedGraph<V, E> g, V vertex)"
         ],
         [
            "successorListOf",
            "org.jgrapht",
            "Graphs",
            "public static <V, E> List<V> successorListOf(DirectedGraph<V, E> g, V vertex)"
         ],
         [
            "undirectedGraph",
            "org.jgrapht",
            "Graphs",
            "public static <V, E> UndirectedGraph<V, E> undirectedGraph(Graph<V, E> g)"
         ],
         [
            "testIncidence",
            "org.jgrapht",
            "Graphs",
            "public static <V, E> boolean testIncidence(Graph<V, E> g, E e, V v)"
         ],
         [
            "getOppositeVertex",
            "org.jgrapht",
            "Graphs",
            "public static <V, E> V getOppositeVertex(Graph<V, E> g, E e, V v)"
         ],
         [
            "getPathVertexList",
            "org.jgrapht",
            "Graphs",
            "public static <V, E> List<V> getPathVertexList(GraphPath<V, E> path)"
         ],
         [
            "range",
            "org.jgrapht.generate",
            "SimpleWeightedGraphMatrixGenerator",
            "public static int[] range(final int from, final int to)"
         ],
         [
            "createGraphSpecifics",
            "org.jgrapht.traverse",
            "CrossComponentIterator",
            "static <V, E> Specifics<V, E> createGraphSpecifics(Graph<V, E> g)"
         ],
         [
            "findGreedyChromaticNumber",
            "org.jgrapht.alg",
            "ChromaticNumber",
            "public static <V, E> int findGreedyChromaticNumber(UndirectedGraph<V, E> g)"
         ],
         [
            "findGreedyColoredGroups",
            "org.jgrapht.alg",
            "ChromaticNumber",
            "public static <V, E> Map<Integer, Set<V>> findGreedyColoredGroups(UndirectedGraph<V, E> g)"
         ],
         [
            "findPathBetween",
            "org.jgrapht.alg",
            "BellmanFordShortestPath",
            "public static <V, E> List<E> findPathBetween(Graph<V, E> graph, V startVertex, V endVertex)"
         ],
         [
            "findPathBetween",
            "org.jgrapht.alg",
            "DijkstraShortestPath",
            "public static <V, E> List<E> findPathBetween(Graph<V, E> graph, V startVertex, V endVertex)"
         ],
         [
            "of",
            "org.jgrapht.alg.util",
            "Pair",
            "public static <A, B> Pair<A, B> of(A a, B b)"
         ],
         [
            "isEulerian",
            "org.jgrapht.alg",
            "EulerianCircuit",
            "public static <V, E> boolean isEulerian(UndirectedGraph<V, E> g)"
         ],
         [
            "getEulerianCircuitVertices",
            "org.jgrapht.alg",
            "EulerianCircuit",
            "public static <V, E> List<V> getEulerianCircuitVertices(UndirectedGraph<V, E> g)"
         ],
         [
            "getApproximateOptimalForCompleteGraph",
            "org.jgrapht.alg",
            "HamiltonianCycle",
            "public static <V, E> List<V> getApproximateOptimalForCompleteGraph(SimpleWeightedGraph<V, E> g)"
         ],
         [
            "find2ApproximationCover",
            "org.jgrapht.alg",
            "VertexCovers",
            "public static <V, E> Set<V> find2ApproximationCover(Graph<V, E> g)"
         ],
         [
            "findGreedyCover",
            "org.jgrapht.alg",
            "VertexCovers",
            "public static <V, E> Set<V> findGreedyCover(UndirectedGraph<V, E> g)"
         ]
      ],
      "tokensProjectClassesNonPrivateStaticAttributes":[
         [
            "BEST_ORDER",
            "org.jgrapht.experimental.alg.color",
            "GreedyColoring",
            "public static final int BEST_ORDER = 0;"
         ],
         [
            "NATURAL_ORDER",
            "org.jgrapht.experimental.alg.color",
            "GreedyColoring",
            "public static final int NATURAL_ORDER = 1;"
         ],
         [
            "SMALLEST_DEGREE_LAST_ORDER",
            "org.jgrapht.experimental.alg.color",
            "GreedyColoring",
            "public static final int SMALLEST_DEGREE_LAST_ORDER = 2;"
         ],
         [
            "LARGEST_SATURATION_FIRST_ORDER",
            "org.jgrapht.experimental.alg.color",
            "GreedyColoring",
            "public static final int LARGEST_SATURATION_FIRST_ORDER = 3;"
         ],
         [
            "DEFAULT_EDGE_WEIGHT",
            "org.jgrapht",
            "WeightedGraph",
            "public static double DEFAULT_EDGE_WEIGHT = 1.0;"
         ],
         [
            "HUB_VERTEX",
            "org.jgrapht.generate",
            "WheelGraphGenerator",
            "public static final String HUB_VERTEX = \"Hub Vertex\";"
         ],
         [
            "CORNER_VERTEX",
            "org.jgrapht.generate",
            "GridGraphGenerator",
            "public static final String CORNER_VERTEX = \"Corner Vertex\";"
         ],
         [
            "START_VERTEX",
            "org.jgrapht.generate",
            "LinearGraphGenerator",
            "public static final String START_VERTEX = \"Start Vertex\";"
         ],
         [
            "END_VERTEX",
            "org.jgrapht.generate",
            "LinearGraphGenerator",
            "public static final String END_VERTEX = \"End Vertex\";"
         ],
         [
            "CENTER_VERTEX",
            "org.jgrapht.generate",
            "StarGraphGenerator",
            "public static final String CENTER_VERTEX = \"Center Vertex\";"
         ],
         [
            "SENTINEL",
            "org.jgrapht.traverse",
            "DepthFirstIterator",
            "public static final Object SENTINEL = new Object();"
         ],
         [
            "BEFORE_EDGE_ADDED",
            "org.jgrapht.event",
            "GraphEdgeChangeEvent",
            "public static final int BEFORE_EDGE_ADDED = 21;"
         ],
         [
            "BEFORE_EDGE_REMOVED",
            "org.jgrapht.event",
            "GraphEdgeChangeEvent",
            "public static final int BEFORE_EDGE_REMOVED = 22;"
         ],
         [
            "EDGE_ADDED",
            "org.jgrapht.event",
            "GraphEdgeChangeEvent",
            "public static final int EDGE_ADDED = 23;"
         ],
         [
            "EDGE_REMOVED",
            "org.jgrapht.event",
            "GraphEdgeChangeEvent",
            "public static final int EDGE_REMOVED = 24;"
         ],
         [
            "CONNECTED_COMPONENT_STARTED",
            "org.jgrapht.event",
            "ConnectedComponentTraversalEvent",
            "public static final int CONNECTED_COMPONENT_STARTED = 31;"
         ],
         [
            "CONNECTED_COMPONENT_FINISHED",
            "org.jgrapht.event",
            "ConnectedComponentTraversalEvent",
            "public static final int CONNECTED_COMPONENT_FINISHED = 32;"
         ],
         [
            "BEFORE_VERTEX_ADDED",
            "org.jgrapht.event",
            "GraphVertexChangeEvent",
            "public static final int BEFORE_VERTEX_ADDED = 11;"
         ],
         [
            "BEFORE_VERTEX_REMOVED",
            "org.jgrapht.event",
            "GraphVertexChangeEvent",
            "public static final int BEFORE_VERTEX_REMOVED = 12;"
         ],
         [
            "VERTEX_ADDED",
            "org.jgrapht.event",
            "GraphVertexChangeEvent",
            "public static final int VERTEX_ADDED = 13;"
         ],
         [
            "VERTEX_REMOVED",
            "org.jgrapht.event",
            "GraphVertexChangeEvent",
            "public static final int VERTEX_REMOVED = 14;"
         ],
         [
            "NULL_NODE",
            "org.jgrapht.alg.isomorphism",
            "VF2State",
            "public static final int NULL_NODE = -1;"
         ],
         [
            "DEBUG",
            "org.jgrapht.alg.isomorphism",
            "VF2State",
            "protected static final boolean DEBUG = false;"
         ],
         [
            "DEFAULT_EPSILON",
            "org.jgrapht.alg",
            "EdmondsKarpMaximumFlow",
            "public static final double DEFAULT_EPSILON = 0.000000001;"
         ],
         [
            "INSTANCE",
            "org.jgrapht.alg",
            "TransitiveClosure",
            "public static final TransitiveClosure INSTANCE = new TransitiveClosure();"
         ],
         [
            "INSTANCE",
            "org.jgrapht.alg",
            "TransitiveReduction",
            "public static final TransitiveReduction INSTANCE = new TransitiveReduction();"
         ],
         [
            "NEGATIVE_UNDIRECTED_EDGE",
            "org.jgrapht.alg",
            "BellmanFordIterator",
            "protected final static String NEGATIVE_UNDIRECTED_EDGE = \"Negative\" + \"edge-weights are not allowed in an unidrected graph!\";"
         ],
         [
            "DEFAULT_EPSILON",
            "org.jgrapht.alg.flow",
            "MaximumFlowAlgorithmBase",
            "public static final double DEFAULT_EPSILON = 1e-9;"
         ]
      ],
      "tokensMethodJavadocValues":[

      ],
      "tokensMethodArguments":[
         [
            "source",
            "",
            "V"
         ],
         [
            "target",
            "",
            "V"
         ]
      ],
      "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods":[
         [
            "equals",
            "java.lang",
            "Object",
            "public boolean equals(Object arg0)"
         ],
         [
            "removeVertices",
            "org.jgrapht.graph.builder",
            "AbstractGraphBuilder",
            "public B removeVertices(V... vertices)"
         ],
         [
            "toString",
            "java.lang",
            "Object",
            "public String toString()"
         ],
         [
            "addVertex",
            "org.jgrapht.graph.builder",
            "AbstractGraphBuilder",
            "public B addVertex(V vertex)"
         ],
         [
            "addEdge",
            "org.jgrapht.graph.builder",
            "AbstractGraphBuilder",
            "public B addEdge(V source, V target)"
         ],
         [
            "addEdgeChain",
            "org.jgrapht.graph.builder",
            "AbstractGraphBuilder",
            "public B addEdgeChain(V first, V second, V... rest)"
         ],
         [
            "removeVertex",
            "org.jgrapht.graph.builder",
            "AbstractGraphBuilder",
            "public B removeVertex(V vertex)"
         ],
         [
            "removeEdge",
            "org.jgrapht.graph.builder",
            "AbstractGraphBuilder",
            "public B removeEdge(V source, V target)"
         ],
         [
            "build",
            "org.jgrapht.graph.builder",
            "AbstractGraphBuilder",
            "public G build()"
         ],
         [
            "self",
            "org.jgrapht.graph.builder",
            "AbstractGraphBuilder",
            "protected abstract B self()"
         ],
         [
            "addGraph",
            "org.jgrapht.graph.builder",
            "AbstractGraphBuilder",
            "public B addGraph(Graph<? extends V, ? extends E> sourceGraph)"
         ],
         [
            "getClass",
            "java.lang",
            "Object",
            "public final native Class<? extends Object> getClass()"
         ],
         [
            "clone",
            "java.lang",
            "Object",
            "protected native Object clone() throws CloneNotSupportedException"
         ],
         [
            "addVertices",
            "org.jgrapht.graph.builder",
            "AbstractGraphBuilder",
            "public B addVertices(V... vertices)"
         ],
         [
            "buildUnmodifiable",
            "org.jgrapht.graph.builder",
            "AbstractGraphBuilder",
            "public UnmodifiableGraph<V, E> buildUnmodifiable()"
         ],
         [
            "hashCode",
            "java.lang",
            "Object",
            "public native int hashCode()"
         ]
      ],
      "tokensMethodVariablesNonPrivateNonStaticAttributes":[
         [
            "graph",
            "org.jgrapht.graph.builder",
            "AbstractGraphBuilder",
            "protected final G graph;"
         ]
      ],
      "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods":[

      ],
      "tokensOracleVariablesNonPrivateNonStaticAttributes":[

      ]
   },
   {
      "id":9,
      "oracle":";",
      "oracleType":"PRE",
      "projectName":"jgrapht-core-0.9.2",
      "packageName":"org.jgrapht.traverse",
      "className":"CrossComponentIterator",
      "javadocTag":"@param edge the edge via which the vertex was encountered, or null if the\nvertex is a starting point",
      "methodJavadoc":"    /**\n     * Update data structures the first time we see a vertex.\n     *\n     * @param vertex the vertex encountered\n     * @param edge the edge via which the vertex was encountered, or null if the\n     * vertex is a starting point\n     */",
      "methodSourceCode":"protected abstract void encounterVertex(V vertex, E edge);",
      "classJavadoc":"/**\n * Provides a cross-connected-component traversal functionality for iterator\n * subclasses.\n *\n * @param <V> vertex type\n * @param <E> edge type\n * @param <D> type of data associated to seen vertices\n *\n * @author Barak Naveh\n * @since Jan 31, 2004\n */",
      "classSourceCode":"/* ==========================================\n * JGraphT : a free Java graph-theory library\n * ==========================================\n *\n * Project Info:  http://jgrapht.sourceforge.net/\n * Project Creator:  Barak Naveh (http://sourceforge.net/users/barak_naveh)\n *\n * (C) Copyright 2003-2008, by Barak Naveh and Contributors.\n *\n * This program and the accompanying materials are dual-licensed under\n * either\n *\n * (a) the terms of the GNU Lesser General Public License version 2.1\n * as published by the Free Software Foundation, or (at your option) any\n * later version.\n *\n * or (per the licensee's choosing)\n *\n * (b) the terms of the Eclipse Public License v1.0 as published by\n * the Eclipse Foundation.\n */\n/* ---------------------------\n * CrossComponentIterator.java\n * ---------------------------\n * (C) Copyright 2003-2008, by Barak Naveh and Contributors.\n *\n * Original Author:  Barak Naveh\n * Contributor(s):   John V. Sichi\n *                   Christian Hammer\n *\n * $Id$\n *\n * Changes\n * -------\n * 31-Jul-2003 : Initial revision (BN);\n * 11-Aug-2003 : Adaptation to new event model (BN);\n * 31-Jan-2004 : Extracted cross-component traversal functionality (BN);\n * 04-May-2004 : Made generic (CH)\n * 07-May-2006 : Changed from List<Edge> to Set<Edge> (JVS);\n *\n */\npackage org.jgrapht.traverse;\n\nimport java.util.*;\n\nimport org.jgrapht.*;\nimport org.jgrapht.event.*;\n\n\n/**\n * Provides a cross-connected-component traversal functionality for iterator\n * subclasses.\n *\n * @param <V> vertex type\n * @param <E> edge type\n * @param <D> type of data associated to seen vertices\n *\n * @author Barak Naveh\n * @since Jan 31, 2004\n */\npublic abstract class CrossComponentIterator<V, E, D>\n    extends AbstractGraphIterator<V, E>\n{\n    private static final int CCS_BEFORE_COMPONENT = 1;\n    private static final int CCS_WITHIN_COMPONENT = 2;\n    private static final int CCS_AFTER_COMPONENT = 3;\n\n    /**\n     * Standard vertex visit state enumeration.\n     */\n    protected static enum VisitColor\n    {\n        /**\n         * Vertex has not been returned via iterator yet.\n         */\n        WHITE,\n\n        /**\n         * Vertex has been returned via iterator, but we're not done with all of\n         * its out-edges yet.\n         */\n        GRAY,\n\n        /**\n         * Vertex has been returned via iterator, and we're done with all of its\n         * out-edges.\n         */\n        BLACK\n    }\n\n    //\n    private final ConnectedComponentTraversalEvent ccFinishedEvent =\n        new ConnectedComponentTraversalEvent(\n            this,\n            ConnectedComponentTraversalEvent.CONNECTED_COMPONENT_FINISHED);\n    private final ConnectedComponentTraversalEvent ccStartedEvent =\n        new ConnectedComponentTraversalEvent(\n            this,\n            ConnectedComponentTraversalEvent.CONNECTED_COMPONENT_STARTED);\n\n    // TODO: support ConcurrentModificationException if graph modified\n    // during iteration.\n    private FlyweightEdgeEvent<V, E> reusableEdgeEvent;\n    private FlyweightVertexEvent<V> reusableVertexEvent;\n    private Iterator<V> vertexIterator = null;\n\n    /**\n     * Stores the vertices that have been seen during iteration and (optionally)\n     * some additional traversal info regarding each vertex.\n     */\n    private Map<V, D> seen = new HashMap<V, D>();\n    private V startVertex;\n    private Specifics<V, E> specifics;\n\n    private final Graph<V, E> graph;\n\n    /**\n     * The connected component state\n     */\n    private int state = CCS_BEFORE_COMPONENT;\n\n    /**\n     * Creates a new iterator for the specified graph. Iteration will start at\n     * the specified start vertex. If the specified start vertex is <code>\n     * null</code>, Iteration will start at an arbitrary graph vertex.\n     *\n     * @param g the graph to be iterated.\n     * @param startVertex the vertex iteration to be started.\n     *\n     * @throws IllegalArgumentException if <code>g==null</code> or does not\n     * contain <code>startVertex</code>\n     */\n    public CrossComponentIterator(Graph<V, E> g, V startVertex)\n    {\n        super();\n\n        if (g == null) {\n            throw new IllegalArgumentException(\"graph must not be null\");\n        }\n        graph = g;\n\n        specifics = createGraphSpecifics(g);\n        vertexIterator = g.vertexSet().iterator();\n        setCrossComponentTraversal(startVertex == null);\n\n        reusableEdgeEvent = new FlyweightEdgeEvent<V, E>(this, null);\n        reusableVertexEvent = new FlyweightVertexEvent<V>(this, null);\n\n        if (startVertex == null) {\n            // pick a start vertex if graph not empty\n            if (vertexIterator.hasNext()) {\n                this.startVertex = vertexIterator.next();\n            } else {\n                this.startVertex = null;\n            }\n        } else if (g.containsVertex(startVertex)) {\n            this.startVertex = startVertex;\n        } else {\n            throw new IllegalArgumentException(\n                \"graph must contain the start vertex\");\n        }\n    }\n\n    /**\n     * @return the graph being traversed\n     */\n    public Graph<V, E> getGraph()\n    {\n        return graph;\n    }\n\n    /**\n     * @see java.util.Iterator#hasNext()\n     */\n    @Override public boolean hasNext()\n    {\n        if (startVertex != null) {\n            encounterStartVertex();\n        }\n\n        if (isConnectedComponentExhausted()) {\n            if (state == CCS_WITHIN_COMPONENT) {\n                state = CCS_AFTER_COMPONENT;\n                if (nListeners != 0) {\n                    fireConnectedComponentFinished(ccFinishedEvent);\n                }\n            }\n\n            if (isCrossComponentTraversal()) {\n                while (vertexIterator.hasNext()) {\n                    V v = vertexIterator.next();\n\n                    if (!isSeenVertex(v)) {\n                        encounterVertex(v, null);\n                        state = CCS_BEFORE_COMPONENT;\n\n                        return true;\n                    }\n                }\n\n                return false;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @see java.util.Iterator#next()\n     */\n    @Override public V next()\n    {\n        if (startVertex != null) {\n            encounterStartVertex();\n        }\n\n        if (hasNext()) {\n            if (state == CCS_BEFORE_COMPONENT) {\n                state = CCS_WITHIN_COMPONENT;\n                if (nListeners != 0) {\n                    fireConnectedComponentStarted(ccStartedEvent);\n                }\n            }\n\n            V nextVertex = provideNextVertex();\n            if (nListeners != 0) {\n                fireVertexTraversed(createVertexTraversalEvent(nextVertex));\n            }\n\n            addUnseenChildrenOf(nextVertex);\n\n            return nextVertex;\n        } else {\n            throw new NoSuchElementException();\n        }\n    }\n\n    /**\n     * Returns <tt>true</tt> if there are no more uniterated vertices in the\n     * currently iterated connected component; <tt>false</tt> otherwise.\n     *\n     * @return <tt>true</tt> if there are no more uniterated vertices in the\n     * currently iterated connected component; <tt>false</tt> otherwise.\n     */\n    protected abstract boolean isConnectedComponentExhausted();\n\n    /**\n     * Update data structures the first time we see a vertex.\n     *\n     * @param vertex the vertex encountered\n     * @param edge the edge via which the vertex was encountered, or null if the\n     * vertex is a starting point\n     */\n    protected abstract void encounterVertex(V vertex, E edge);\n\n    /**\n     * Returns the vertex to be returned in the following call to the iterator\n     * <code>next</code> method.\n     *\n     * @return the next vertex to be returned by this iterator.\n     */\n    protected abstract V provideNextVertex();\n\n    /**\n     * Access the data stored for a seen vertex.\n     *\n     * @param vertex a vertex which has already been seen.\n     *\n     * @return data associated with the seen vertex or <code>null</code> if no\n     * data was associated with the vertex. A <code>null</code> return can also\n     * indicate that the vertex was explicitly associated with <code>\n     * null</code>.\n     */\n    protected D getSeenData(V vertex)\n    {\n        return seen.get(vertex);\n    }\n\n    /**\n     * Determines whether a vertex has been seen yet by this traversal.\n     *\n     * @param vertex vertex in question\n     *\n     * @return <tt>true</tt> if vertex has already been seen\n     */\n    protected boolean isSeenVertex(Object vertex)\n    {\n        return seen.containsKey(vertex);\n    }\n\n    /**\n     * Called whenever we re-encounter a vertex. The default implementation does\n     * nothing.\n     *\n     * @param vertex the vertex re-encountered\n     * @param edge the edge via which the vertex was re-encountered\n     */\n    protected abstract void encounterVertexAgain(V vertex, E edge);\n\n    /**\n     * Stores iterator-dependent data for a vertex that has been seen.\n     *\n     * @param vertex a vertex which has been seen.\n     * @param data data to be associated with the seen vertex.\n     *\n     * @return previous value associated with specified vertex or <code>\n     * null</code> if no data was associated with the vertex. A <code>\n     * null</code> return can also indicate that the vertex was explicitly\n     * associated with <code>null</code>.\n     */\n    protected D putSeenData(V vertex, D data)\n    {\n        return seen.put(vertex, data);\n    }\n\n    /**\n     * Called when a vertex has been finished (meaning is dependent on traversal\n     * represented by subclass).\n     *\n     * @param vertex vertex which has been finished\n     */\n    protected void finishVertex(V vertex)\n    {\n        if (nListeners != 0) {\n            fireVertexFinished(createVertexTraversalEvent(vertex));\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    /**\n     * @param <V>\n     * @param <E>\n     * @param g\n     *\n     * @return TODO Document me\n     */\n    static <V, E> Specifics<V, E> createGraphSpecifics(Graph<V, E> g)\n    {\n        if (g instanceof DirectedGraph<?, ?>) {\n            return new DirectedSpecifics<V, E>((DirectedGraph<V, E>) g);\n        } else {\n            return new UndirectedSpecifics<V, E>(g);\n        }\n    }\n\n    private void addUnseenChildrenOf(V vertex)\n    {\n        for (E edge : specifics.edgesOf(vertex)) {\n            if (nListeners != 0) {\n                fireEdgeTraversed(createEdgeTraversalEvent(edge));\n            }\n\n            V oppositeV = Graphs.getOppositeVertex(graph, edge, vertex);\n\n            if (isSeenVertex(oppositeV)) {\n                encounterVertexAgain(oppositeV, edge);\n            } else {\n                encounterVertex(oppositeV, edge);\n            }\n        }\n    }\n\n    private EdgeTraversalEvent<V, E> createEdgeTraversalEvent(E edge)\n    {\n        if (isReuseEvents()) {\n            reusableEdgeEvent.setEdge(edge);\n\n            return reusableEdgeEvent;\n        } else {\n            return new EdgeTraversalEvent<V, E>(this, edge);\n        }\n    }\n\n    private VertexTraversalEvent<V> createVertexTraversalEvent(V vertex)\n    {\n        if (isReuseEvents()) {\n            reusableVertexEvent.setVertex(vertex);\n\n            return reusableVertexEvent;\n        } else {\n            return new VertexTraversalEvent<V>(this, vertex);\n        }\n    }\n\n    private void encounterStartVertex()\n    {\n        encounterVertex(startVertex, null);\n        startVertex = null;\n    }\n\n    static interface SimpleContainer<T>\n    {\n        /**\n         * Tests if this container is empty.\n         *\n         * @return <code>true</code> if empty, otherwise <code>false</code>.\n         */\n        public boolean isEmpty();\n\n        /**\n         * Adds the specified object to this container.\n         *\n         * @param o the object to be added.\n         */\n        public void add(T o);\n\n        /**\n         * Remove an object from this container and return it.\n         *\n         * @return the object removed from this container.\n         */\n        public T remove();\n    }\n\n    /**\n     * Provides unified interface for operations that are different in directed\n     * graphs and in undirected graphs.\n     */\n    abstract static class Specifics<VV, EE>\n    {\n        /**\n         * Returns the edges outgoing from the specified vertex in case of\n         * directed graph, and the edge touching the specified vertex in case of\n         * undirected graph.\n         *\n         * @param vertex the vertex whose outgoing edges are to be returned.\n         *\n         * @return the edges outgoing from the specified vertex in case of\n         * directed graph, and the edge touching the specified vertex in case of\n         * undirected graph.\n         */\n        public abstract Set<? extends EE> edgesOf(VV vertex);\n    }\n\n    /**\n     * A reusable edge event.\n     *\n     * @author Barak Naveh\n     * @since Aug 11, 2003\n     */\n    static class FlyweightEdgeEvent<VV, localE>\n        extends EdgeTraversalEvent<VV, localE>\n    {\n        private static final long serialVersionUID = 4051327833765000755L;\n\n        /**\n         * @see EdgeTraversalEvent#EdgeTraversalEvent(Object, Edge)\n         */\n        public FlyweightEdgeEvent(Object eventSource, localE edge)\n        {\n            super(eventSource, edge);\n        }\n\n        /**\n         * Sets the edge of this event.\n         *\n         * @param edge the edge to be set.\n         */\n        protected void setEdge(localE edge)\n        {\n            this.edge = edge;\n        }\n    }\n\n    /**\n     * A reusable vertex event.\n     *\n     * @author Barak Naveh\n     * @since Aug 11, 2003\n     */\n    static class FlyweightVertexEvent<VV>\n        extends VertexTraversalEvent<VV>\n    {\n        private static final long serialVersionUID = 3834024753848399924L;\n\n        /**\n         * @see VertexTraversalEvent#VertexTraversalEvent(Object, Object)\n         */\n        public FlyweightVertexEvent(Object eventSource, VV vertex)\n        {\n            super(eventSource, vertex);\n        }\n\n        /**\n         * Sets the vertex of this event.\n         *\n         * @param vertex the vertex to be set.\n         */\n        protected void setVertex(VV vertex)\n        {\n            this.vertex = vertex;\n        }\n    }\n\n    /**\n     * An implementation of {@link Specifics} for a directed graph.\n     */\n    private static class DirectedSpecifics<VV, EE>\n        extends Specifics<VV, EE>\n    {\n        private DirectedGraph<VV, EE> graph;\n\n        /**\n         * Creates a new DirectedSpecifics object.\n         *\n         * @param g the graph for which this specifics object to be created.\n         */\n        public DirectedSpecifics(DirectedGraph<VV, EE> g)\n        {\n            graph = g;\n        }\n\n        /**\n         * @see CrossComponentIterator.Specifics#edgesOf(Object)\n         */\n        @Override public Set<? extends EE> edgesOf(VV vertex)\n        {\n            return graph.outgoingEdgesOf(vertex);\n        }\n    }\n\n    /**\n     * An implementation of {@link Specifics} in which edge direction (if any)\n     * is ignored.\n     */\n    private static class UndirectedSpecifics<VV, EE>\n        extends Specifics<VV, EE>\n    {\n        private Graph<VV, EE> graph;\n\n        /**\n         * Creates a new UndirectedSpecifics object.\n         *\n         * @param g the graph for which this specifics object to be created.\n         */\n        public UndirectedSpecifics(Graph<VV, EE> g)\n        {\n            graph = g;\n        }\n\n        /**\n         * @see CrossComponentIterator.Specifics#edgesOf(Object)\n         */\n        @Override public Set<EE> edgesOf(VV vertex)\n        {\n            return graph.edgesOf(vertex);\n        }\n    }\n}\n\n// End CrossComponentIterator.java\n",
      "tokensGeneralGrammar":[
         "null",
         "true",
         "false",
         ",",
         ".",
         ":",
         ";",
         "?",
         "(",
         ")",
         "jdVar",
         "stream",
         "Arrays",
         "allMatch",
         "noneMatch",
         "anyMatch",
         "~",
         ">>",
         "<<",
         ">>>",
         "|",
         "&",
         "^",
         "+",
         "-",
         "/",
         "*",
         "%",
         "&&",
         "||",
         ">=",
         "<=",
         ">",
         "<",
         "==",
         "!=",
         "instanceof",
         "class",
         "methodResultID",
         "this"
      ],
      "tokensGeneralValuesGlobalDictionary":[
         [
            "0",
            "int"
         ],
         [
            "1",
            "int"
         ],
         [
            "-1",
            "int"
         ],
         [
            "0.0",
            "double"
         ],
         [
            "1.0",
            "double"
         ],
         [
            "-1.0",
            "double"
         ],
         [
            "\"\"",
            "String"
         ]
      ],
      "tokensProjectClasses":[
         [
            "PartiteRandomGraphGenerator",
            "org.jgrapht.experimental"
         ],
         [
            "RandomGraphHelper",
            "org.jgrapht.experimental"
         ],
         [
            "GraphReader",
            "org.jgrapht.experimental"
         ],
         [
            "DirectedAcyclicGraph",
            "org.jgrapht.experimental.dag"
         ],
         [
            "GraphSquare",
            "org.jgrapht.experimental"
         ],
         [
            "UniformRandomGraphGenerator",
            "org.jgrapht.experimental"
         ],
         [
            "GraphTests",
            "org.jgrapht.experimental"
         ],
         [
            "ApproximationAlgorithm",
            "org.jgrapht.experimental.alg"
         ],
         [
            "BrownBacktrackColoring",
            "org.jgrapht.experimental.alg.color"
         ],
         [
            "GreedyColoring",
            "org.jgrapht.experimental.alg.color"
         ],
         [
            "IntArrayGraphAlgorithm",
            "org.jgrapht.experimental.alg"
         ],
         [
            "ExactAlgorithm",
            "org.jgrapht.experimental.alg"
         ],
         [
            "ListenableGraph",
            "org.jgrapht"
         ],
         [
            "ModifiableInteger",
            "org.jgrapht.util"
         ],
         [
            "FibonacciHeapNode",
            "org.jgrapht.util"
         ],
         [
            "WeightCombiner",
            "org.jgrapht.util"
         ],
         [
            "FibonacciHeap",
            "org.jgrapht.util"
         ],
         [
            "TypeUtil",
            "org.jgrapht.util"
         ],
         [
            "ArrayUnenforcedSet",
            "org.jgrapht.util"
         ],
         [
            "VertexPair",
            "org.jgrapht.util"
         ],
         [
            "MathUtil",
            "org.jgrapht.util"
         ],
         [
            "PrefetchIterator",
            "org.jgrapht.util"
         ],
         [
            "VertexFactory",
            "org.jgrapht"
         ],
         [
            "Graph",
            "org.jgrapht"
         ],
         [
            "GraphPath",
            "org.jgrapht"
         ],
         [
            "UndirectedGraphUnion",
            "org.jgrapht.graph"
         ],
         [
            "SimpleGraph",
            "org.jgrapht.graph"
         ],
         [
            "MixedGraphUnion",
            "org.jgrapht.graph"
         ],
         [
            "DefaultGraphMapping",
            "org.jgrapht.graph"
         ],
         [
            "WeightedPseudograph",
            "org.jgrapht.graph"
         ],
         [
            "UndirectedMaskSubgraph",
            "org.jgrapht.graph"
         ],
         [
            "MaskEdgeSet",
            "org.jgrapht.graph"
         ],
         [
            "Pseudograph",
            "org.jgrapht.graph"
         ],
         [
            "MaskFunctor",
            "org.jgrapht.graph"
         ],
         [
            "GraphUnion",
            "org.jgrapht.graph"
         ],
         [
            "DirectedMaskSubgraph",
            "org.jgrapht.graph"
         ],
         [
            "DirectedMultigraph",
            "org.jgrapht.graph"
         ],
         [
            "AbstractBaseGraph",
            "org.jgrapht.graph"
         ],
         [
            "DirectedWeightedPseudograph",
            "org.jgrapht.graph"
         ],
         [
            "Multigraph",
            "org.jgrapht.graph"
         ],
         [
            "DefaultDirectedGraph",
            "org.jgrapht.graph"
         ],
         [
            "DefaultWeightedEdge",
            "org.jgrapht.graph"
         ],
         [
            "ListenableDirectedWeightedGraph",
            "org.jgrapht.graph"
         ],
         [
            "DirectedGraphUnion",
            "org.jgrapht.graph"
         ],
         [
            "AsUnweightedGraph",
            "org.jgrapht.graph"
         ],
         [
            "EdgeSetFactory",
            "org.jgrapht.graph"
         ],
         [
            "GraphDelegator",
            "org.jgrapht.graph"
         ],
         [
            "DefaultListenableGraph",
            "org.jgrapht.graph"
         ],
         [
            "AsUndirectedGraph",
            "org.jgrapht.graph"
         ],
         [
            "ClassBasedVertexFactory",
            "org.jgrapht.graph"
         ],
         [
            "DefaultEdge",
            "org.jgrapht.graph"
         ],
         [
            "MaskVertexSet",
            "org.jgrapht.graph"
         ],
         [
            "ListenableUndirectedGraph",
            "org.jgrapht.graph"
         ],
         [
            "DirectedWeightedSubgraph",
            "org.jgrapht.graph"
         ],
         [
            "ListenableUndirectedWeightedGraph",
            "org.jgrapht.graph"
         ],
         [
            "AsUnweightedDirectedGraph",
            "org.jgrapht.graph"
         ],
         [
            "DefaultDirectedWeightedGraph",
            "org.jgrapht.graph"
         ],
         [
            "IntrusiveEdge",
            "org.jgrapht.graph"
         ],
         [
            "UnmodifiableGraph",
            "org.jgrapht.graph"
         ],
         [
            "GraphPathImpl",
            "org.jgrapht.graph"
         ],
         [
            "Subgraph",
            "org.jgrapht.graph"
         ],
         [
            "UndirectedWeightedSubgraph",
            "org.jgrapht.graph"
         ],
         [
            "DirectedPseudograph",
            "org.jgrapht.graph"
         ],
         [
            "AbstractGraph",
            "org.jgrapht.graph"
         ],
         [
            "MaskSubgraph",
            "org.jgrapht.graph"
         ],
         [
            "ClassBasedEdgeFactory",
            "org.jgrapht.graph"
         ],
         [
            "SimpleWeightedGraph",
            "org.jgrapht.graph"
         ],
         [
            "AsWeightedDirectedGraph",
            "org.jgrapht.graph"
         ],
         [
            "SimpleDirectedWeightedGraph",
            "org.jgrapht.graph"
         ],
         [
            "UnmodifiableUndirectedGraph",
            "org.jgrapht.graph"
         ],
         [
            "UndirectedSubgraph",
            "org.jgrapht.graph"
         ],
         [
            "WeightedMultigraph",
            "org.jgrapht.graph"
         ],
         [
            "EdgeReversedGraph",
            "org.jgrapht.graph"
         ],
         [
            "AsWeightedGraph",
            "org.jgrapht.graph"
         ],
         [
            "DirectedGraphBuilder",
            "org.jgrapht.graph.builder"
         ],
         [
            "UndirectedGraphBuilderBase",
            "org.jgrapht.graph.builder"
         ],
         [
            "UndirectedGraphBuilder",
            "org.jgrapht.graph.builder"
         ],
         [
            "UndirectedWeightedGraphBuilder",
            "org.jgrapht.graph.builder"
         ],
         [
            "UndirectedWeightedGraphBuilderBase",
            "org.jgrapht.graph.builder"
         ],
         [
            "DirectedWeightedGraphBuilderBase",
            "org.jgrapht.graph.builder"
         ],
         [
            "AbstractGraphBuilder",
            "org.jgrapht.graph.builder"
         ],
         [
            "DirectedWeightedGraphBuilder",
            "org.jgrapht.graph.builder"
         ],
         [
            "DirectedGraphBuilderBase",
            "org.jgrapht.graph.builder"
         ],
         [
            "ListenableDirectedGraph",
            "org.jgrapht.graph"
         ],
         [
            "UnmodifiableDirectedGraph",
            "org.jgrapht.graph"
         ],
         [
            "SimpleGraphPath",
            "org.jgrapht.graph"
         ],
         [
            "ParanoidGraph",
            "org.jgrapht.graph"
         ],
         [
            "DirectedWeightedMultigraph",
            "org.jgrapht.graph"
         ],
         [
            "DirectedSubgraph",
            "org.jgrapht.graph"
         ],
         [
            "SimpleDirectedGraph",
            "org.jgrapht.graph"
         ],
         [
            "GraphHelper",
            "org.jgrapht"
         ],
         [
            "Graphs",
            "org.jgrapht"
         ],
         [
            "DirectedGraph",
            "org.jgrapht"
         ],
         [
            "WeightedGraph",
            "org.jgrapht"
         ],
         [
            "HyperCubeGraphGenerator",
            "org.jgrapht.generate"
         ],
         [
            "RingGraphGenerator",
            "org.jgrapht.generate"
         ],
         [
            "SimpleWeightedGraphMatrixGenerator",
            "org.jgrapht.generate"
         ],
         [
            "WeightedGraphGenerator",
            "org.jgrapht.generate"
         ],
         [
            "WheelGraphGenerator",
            "org.jgrapht.generate"
         ],
         [
            "GridGraphGenerator",
            "org.jgrapht.generate"
         ],
         [
            "ScaleFreeGraphGenerator",
            "org.jgrapht.generate"
         ],
         [
            "SimpleWeightedBipartiteGraphMatrixGenerator",
            "org.jgrapht.generate"
         ],
         [
            "LinearGraphGenerator",
            "org.jgrapht.generate"
         ],
         [
            "CompleteGraphGenerator",
            "org.jgrapht.generate"
         ],
         [
            "RandomGraphGenerator",
            "org.jgrapht.generate"
         ],
         [
            "WeightedGraphGeneratorAdapter",
            "org.jgrapht.generate"
         ],
         [
            "EmptyGraphGenerator",
            "org.jgrapht.generate"
         ],
         [
            "CompleteBipartiteGraphGenerator",
            "org.jgrapht.generate"
         ],
         [
            "GraphGenerator",
            "org.jgrapht.generate"
         ],
         [
            "StarGraphGenerator",
            "org.jgrapht.generate"
         ],
         [
            "UndirectedGraph",
            "org.jgrapht"
         ],
         [
            "TopologicalOrderIterator",
            "org.jgrapht.traverse"
         ],
         [
            "CrossComponentIterator",
            "org.jgrapht.traverse"
         ],
         [
            "AbstractGraphIterator",
            "org.jgrapht.traverse"
         ],
         [
            "ClosestFirstIterator",
            "org.jgrapht.traverse"
         ],
         [
            "BreadthFirstIterator",
            "org.jgrapht.traverse"
         ],
         [
            "DepthFirstIterator",
            "org.jgrapht.traverse"
         ],
         [
            "GraphIterator",
            "org.jgrapht.traverse"
         ],
         [
            "EdgeFactory",
            "org.jgrapht"
         ],
         [
            "GraphMapping",
            "org.jgrapht"
         ],
         [
            "VertexSetListener",
            "org.jgrapht.event"
         ],
         [
            "EdgeTraversalEvent",
            "org.jgrapht.event"
         ],
         [
            "TraversalListener",
            "org.jgrapht.event"
         ],
         [
            "GraphEdgeChangeEvent",
            "org.jgrapht.event"
         ],
         [
            "VertexTraversalEvent",
            "org.jgrapht.event"
         ],
         [
            "GraphChangeEvent",
            "org.jgrapht.event"
         ],
         [
            "GraphListener",
            "org.jgrapht.event"
         ],
         [
            "TraversalListenerAdapter",
            "org.jgrapht.event"
         ],
         [
            "ConnectedComponentTraversalEvent",
            "org.jgrapht.event"
         ],
         [
            "GraphVertexChangeEvent",
            "org.jgrapht.event"
         ],
         [
            "TarjanLowestCommonAncestor",
            "org.jgrapht.alg"
         ],
         [
            "PrimMinimumSpanningTree",
            "org.jgrapht.alg"
         ],
         [
            "BlockCutpointGraph",
            "org.jgrapht.alg"
         ],
         [
            "AllDirectedPaths",
            "org.jgrapht.alg"
         ],
         [
            "KShortestPathsIterator",
            "org.jgrapht.alg"
         ],
         [
            "KruskalMinimumSpanningTree",
            "org.jgrapht.alg"
         ],
         [
            "StrongConnectivityInspector",
            "org.jgrapht.alg"
         ],
         [
            "VF2State",
            "org.jgrapht.alg.isomorphism"
         ],
         [
            "VF2GraphIsomorphismState",
            "org.jgrapht.alg.isomorphism"
         ],
         [
            "VF2AbstractIsomorphismInspector",
            "org.jgrapht.alg.isomorphism"
         ],
         [
            "VF2SubgraphIsomorphismState",
            "org.jgrapht.alg.isomorphism"
         ],
         [
            "IsomorphismInspector",
            "org.jgrapht.alg.isomorphism"
         ],
         [
            "VF2SubgraphIsomorphismInspector",
            "org.jgrapht.alg.isomorphism"
         ],
         [
            "GraphOrdering",
            "org.jgrapht.alg.isomorphism"
         ],
         [
            "VF2GraphMappingIterator",
            "org.jgrapht.alg.isomorphism"
         ],
         [
            "IsomorphicGraphMapping",
            "org.jgrapht.alg.isomorphism"
         ],
         [
            "VF2GraphIsomorphismInspector",
            "org.jgrapht.alg.isomorphism"
         ],
         [
            "VF2SubgraphMappingIterator",
            "org.jgrapht.alg.isomorphism"
         ],
         [
            "VF2MappingIterator",
            "org.jgrapht.alg.isomorphism"
         ],
         [
            "BronKerboschCliqueFinder",
            "org.jgrapht.alg"
         ],
         [
            "ChromaticNumber",
            "org.jgrapht.alg"
         ],
         [
            "KosarajuStrongConnectivityInspector",
            "org.jgrapht.alg"
         ],
         [
            "BellmanFordShortestPath",
            "org.jgrapht.alg"
         ],
         [
            "DijkstraShortestPath",
            "org.jgrapht.alg"
         ],
         [
            "RankingPathElement",
            "org.jgrapht.alg"
         ],
         [
            "AStarShortestPath",
            "org.jgrapht.alg"
         ],
         [
            "EdmondsKarpMaximumFlow",
            "org.jgrapht.alg"
         ],
         [
            "BellmanFordPathElement",
            "org.jgrapht.alg"
         ],
         [
            "FloydWarshallShortestPaths",
            "org.jgrapht.alg"
         ],
         [
            "UnionFind",
            "org.jgrapht.alg.util"
         ],
         [
            "AlwaysEqualComparator",
            "org.jgrapht.alg.util"
         ],
         [
            "Extension",
            "org.jgrapht.alg.util"
         ],
         [
            "VertexDegreeComparator",
            "org.jgrapht.alg.util"
         ],
         [
            "Pair",
            "org.jgrapht.alg.util"
         ],
         [
            "GabowStrongConnectivityInspector",
            "org.jgrapht.alg"
         ],
         [
            "HawickJamesSimpleCycles",
            "org.jgrapht.alg.cycle"
         ],
         [
            "DirectedSimpleCycles",
            "org.jgrapht.alg.cycle"
         ],
         [
            "JohnsonSimpleCycles",
            "org.jgrapht.alg.cycle"
         ],
         [
            "TiernanSimpleCycles",
            "org.jgrapht.alg.cycle"
         ],
         [
            "UndirectedCycleBase",
            "org.jgrapht.alg.cycle"
         ],
         [
            "PatonCycleBase",
            "org.jgrapht.alg.cycle"
         ],
         [
            "TarjanSimpleCycles",
            "org.jgrapht.alg.cycle"
         ],
         [
            "SzwarcfiterLauerSimpleCycles",
            "org.jgrapht.alg.cycle"
         ],
         [
            "BiconnectivityInspector",
            "org.jgrapht.alg"
         ],
         [
            "ConnectivityInspector",
            "org.jgrapht.alg"
         ],
         [
            "MinSourceSinkCut",
            "org.jgrapht.alg"
         ],
         [
            "RankingPathElementList",
            "org.jgrapht.alg"
         ],
         [
            "EdmondsBlossomShrinking",
            "org.jgrapht.alg"
         ],
         [
            "TransitiveClosure",
            "org.jgrapht.alg"
         ],
         [
            "HopcroftKarpBipartiteMatching",
            "org.jgrapht.alg"
         ],
         [
            "StoerWagnerMinimumCut",
            "org.jgrapht.alg"
         ],
         [
            "AbstractPathElementList",
            "org.jgrapht.alg"
         ],
         [
            "KuhnMunkresMinimalWeightBipartitePerfectMatching",
            "org.jgrapht.alg"
         ],
         [
            "TransitiveReduction",
            "org.jgrapht.alg"
         ],
         [
            "EulerianCircuit",
            "org.jgrapht.alg"
         ],
         [
            "DirectedNeighborIndex",
            "org.jgrapht.alg"
         ],
         [
            "NaiveLcaFinder",
            "org.jgrapht.alg"
         ],
         [
            "MaximumWeightBipartiteMatching",
            "org.jgrapht.alg"
         ],
         [
            "HamiltonianCycle",
            "org.jgrapht.alg"
         ],
         [
            "KShortestPaths",
            "org.jgrapht.alg"
         ],
         [
            "NeighborIndex",
            "org.jgrapht.alg"
         ],
         [
            "VertexCovers",
            "org.jgrapht.alg"
         ],
         [
            "CycleDetector",
            "org.jgrapht.alg"
         ],
         [
            "AStarAdmissibleHeuristic",
            "org.jgrapht.alg.interfaces"
         ],
         [
            "MinimumSpanningTree",
            "org.jgrapht.alg.interfaces"
         ],
         [
            "WeightedMatchingAlgorithm",
            "org.jgrapht.alg.interfaces"
         ],
         [
            "StrongConnectivityAlgorithm",
            "org.jgrapht.alg.interfaces"
         ],
         [
            "MaximumFlowAlgorithm",
            "org.jgrapht.alg.interfaces"
         ],
         [
            "MatchingAlgorithm",
            "org.jgrapht.alg.interfaces"
         ],
         [
            "CliqueMinimalSeparatorDecomposition",
            "org.jgrapht.alg"
         ],
         [
            "BellmanFordIterator",
            "org.jgrapht.alg"
         ],
         [
            "AbstractPathElement",
            "org.jgrapht.alg"
         ],
         [
            "EdmondsKarpMaximumFlow",
            "org.jgrapht.alg.flow"
         ],
         [
            "PushRelabelMaximumFlow",
            "org.jgrapht.alg.flow"
         ],
         [
            "MaximumFlowAlgorithmBase",
            "org.jgrapht.alg.flow"
         ]
      ],
      "tokensProjectClassesNonPrivateStaticNonVoidMethods":[
         [
            "addVertices",
            "org.jgrapht.experimental",
            "RandomGraphHelper",
            "public static Object[] addVertices(Graph target, VertexFactory vertexFactory, int numVertices)"
         ],
         [
            "isEmpty",
            "org.jgrapht.experimental",
            "GraphTests",
            "public static <V, E> boolean isEmpty(Graph<V, E> g)"
         ],
         [
            "isComplete",
            "org.jgrapht.experimental",
            "GraphTests",
            "public static <V, E> boolean isComplete(Graph<V, E> g)"
         ],
         [
            "isConnected",
            "org.jgrapht.experimental",
            "GraphTests",
            "public static <V, E> boolean isConnected(Graph<V, E> g)"
         ],
         [
            "isTree",
            "org.jgrapht.experimental",
            "GraphTests",
            "public static <V, E> boolean isTree(Graph<V, E> g)"
         ],
         [
            "isBipartite",
            "org.jgrapht.experimental",
            "GraphTests",
            "public static <V, E> boolean isBipartite(Graph<V, E> g)"
         ],
         [
            "union",
            "org.jgrapht.util",
            "FibonacciHeap",
            "public static <T> FibonacciHeap<T> union(FibonacciHeap<T> h1, FibonacciHeap<T> h2)"
         ],
         [
            "uncheckedCast",
            "org.jgrapht.util",
            "TypeUtil",
            "public static <T> T uncheckedCast(Object o, TypeUtil<T> typeDecl)"
         ],
         [
            "factorial",
            "org.jgrapht.util",
            "MathUtil",
            "public static long factorial(int N)"
         ],
         [
            "builder",
            "org.jgrapht.graph",
            "SimpleGraph",
            "public static <V, E> UndirectedGraphBuilderBase<V, E, ? extends SimpleGraph<V, E>, ?> builder(Class<? extends E> edgeClass)"
         ],
         [
            "builder",
            "org.jgrapht.graph",
            "SimpleGraph",
            "public static <V, E> UndirectedGraphBuilderBase<V, E, ? extends SimpleGraph<V, E>, ?> builder(EdgeFactory<V, E> ef)"
         ],
         [
            "builder",
            "org.jgrapht.graph",
            "WeightedPseudograph",
            "public static <V, E> UndirectedWeightedGraphBuilderBase<V, E, ? extends WeightedPseudograph<V, E>, ?> builder(Class<? extends E> edgeClass)"
         ],
         [
            "builder",
            "org.jgrapht.graph",
            "WeightedPseudograph",
            "public static <V, E> UndirectedWeightedGraphBuilderBase<V, E, ? extends WeightedPseudograph<V, E>, ?> builder(EdgeFactory<V, E> ef)"
         ],
         [
            "builder",
            "org.jgrapht.graph",
            "Pseudograph",
            "public static <V, E> UndirectedGraphBuilderBase<V, E, ? extends Pseudograph<V, E>, ?> builder(Class<? extends E> edgeClass)"
         ],
         [
            "builder",
            "org.jgrapht.graph",
            "Pseudograph",
            "public static <V, E> UndirectedGraphBuilderBase<V, E, ? extends Pseudograph<V, E>, ?> builder(EdgeFactory<V, E> ef)"
         ],
         [
            "builder",
            "org.jgrapht.graph",
            "DirectedMultigraph",
            "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends DirectedMultigraph<V, E>, ?> builder(Class<? extends E> edgeClass)"
         ],
         [
            "builder",
            "org.jgrapht.graph",
            "DirectedMultigraph",
            "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends DirectedMultigraph<V, E>, ?> builder(EdgeFactory<V, E> ef)"
         ],
         [
            "builder",
            "org.jgrapht.graph",
            "DirectedWeightedPseudograph",
            "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends DirectedWeightedPseudograph<V, E>, ?> builder(Class<? extends E> edgeClass)"
         ],
         [
            "builder",
            "org.jgrapht.graph",
            "DirectedWeightedPseudograph",
            "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends DirectedWeightedPseudograph<V, E>, ?> builder(EdgeFactory<V, E> ef)"
         ],
         [
            "builder",
            "org.jgrapht.graph",
            "Multigraph",
            "public static <V, E> UndirectedGraphBuilderBase<V, E, ? extends Multigraph<V, E>, ?> builder(Class<? extends E> edgeClass)"
         ],
         [
            "builder",
            "org.jgrapht.graph",
            "Multigraph",
            "public static <V, E> UndirectedGraphBuilderBase<V, E, ? extends Multigraph<V, E>, ?> builder(EdgeFactory<V, E> ef)"
         ],
         [
            "builder",
            "org.jgrapht.graph",
            "DefaultDirectedGraph",
            "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends DefaultDirectedGraph<V, E>, ?> builder(Class<? extends E> edgeClass)"
         ],
         [
            "builder",
            "org.jgrapht.graph",
            "DefaultDirectedGraph",
            "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends DefaultDirectedGraph<V, E>, ?> builder(EdgeFactory<V, E> ef)"
         ],
         [
            "builder",
            "org.jgrapht.graph",
            "DefaultDirectedWeightedGraph",
            "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends DefaultDirectedWeightedGraph<V, E>, ?> builder(Class<? extends E> edgeClass)"
         ],
         [
            "builder",
            "org.jgrapht.graph",
            "DefaultDirectedWeightedGraph",
            "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends DefaultDirectedWeightedGraph<V, E>, ?> builder(EdgeFactory<V, E> ef)"
         ],
         [
            "builder",
            "org.jgrapht.graph",
            "DirectedPseudograph",
            "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends DirectedPseudograph<V, E>, ?> builder(Class<? extends E> edgeClass)"
         ],
         [
            "builder",
            "org.jgrapht.graph",
            "DirectedPseudograph",
            "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends DirectedPseudograph<V, E>, ?> builder(EdgeFactory<V, E> ef)"
         ],
         [
            "builder",
            "org.jgrapht.graph",
            "SimpleWeightedGraph",
            "public static <V, E> UndirectedWeightedGraphBuilderBase<V, E, ? extends SimpleWeightedGraph<V, E>, ?> builder(Class<? extends E> edgeClass)"
         ],
         [
            "builder",
            "org.jgrapht.graph",
            "SimpleWeightedGraph",
            "public static <V, E> UndirectedWeightedGraphBuilderBase<V, E, ? extends SimpleWeightedGraph<V, E>, ?> builder(EdgeFactory<V, E> ef)"
         ],
         [
            "builder",
            "org.jgrapht.graph",
            "SimpleDirectedWeightedGraph",
            "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends SimpleDirectedWeightedGraph<V, E>, ?> builder(Class<? extends E> edgeClass)"
         ],
         [
            "builder",
            "org.jgrapht.graph",
            "SimpleDirectedWeightedGraph",
            "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends SimpleDirectedWeightedGraph<V, E>, ?> builder(EdgeFactory<V, E> ef)"
         ],
         [
            "builder",
            "org.jgrapht.graph",
            "WeightedMultigraph",
            "public static <V, E> UndirectedWeightedGraphBuilderBase<V, E, ? extends WeightedMultigraph<V, E>, ?> builder(Class<? extends E> edgeClass)"
         ],
         [
            "builder",
            "org.jgrapht.graph",
            "WeightedMultigraph",
            "public static <V, E> UndirectedWeightedGraphBuilderBase<V, E, ? extends WeightedMultigraph<V, E>, ?> builder(EdgeFactory<V, E> ef)"
         ],
         [
            "builder",
            "org.jgrapht.graph",
            "DirectedWeightedMultigraph",
            "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends DirectedWeightedMultigraph<V, E>, ?> builder(Class<? extends E> edgeClass)"
         ],
         [
            "builder",
            "org.jgrapht.graph",
            "DirectedWeightedMultigraph",
            "public static <V, E> DirectedWeightedGraphBuilderBase<V, E, ? extends DirectedWeightedMultigraph<V, E>, ?> builder(EdgeFactory<V, E> ef)"
         ],
         [
            "builder",
            "org.jgrapht.graph",
            "SimpleDirectedGraph",
            "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends SimpleDirectedGraph<V, E>, ?> builder(Class<? extends E> edgeClass)"
         ],
         [
            "builder",
            "org.jgrapht.graph",
            "SimpleDirectedGraph",
            "public static <V, E> DirectedGraphBuilderBase<V, E, ? extends SimpleDirectedGraph<V, E>, ?> builder(EdgeFactory<V, E> ef)"
         ],
         [
            "addEdge",
            "org.jgrapht",
            "Graphs",
            "public static <V, E> E addEdge(Graph<V, E> g, V sourceVertex, V targetVertex, double weight)"
         ],
         [
            "addEdgeWithVertices",
            "org.jgrapht",
            "Graphs",
            "public static <V, E> E addEdgeWithVertices(Graph<V, E> g, V sourceVertex, V targetVertex)"
         ],
         [
            "addEdgeWithVertices",
            "org.jgrapht",
            "Graphs",
            "public static <V, E> boolean addEdgeWithVertices(Graph<V, E> targetGraph, Graph<V, E> sourceGraph, E edge)"
         ],
         [
            "addEdgeWithVertices",
            "org.jgrapht",
            "Graphs",
            "public static <V, E> E addEdgeWithVertices(Graph<V, E> g, V sourceVertex, V targetVertex, double weight)"
         ],
         [
            "addGraph",
            "org.jgrapht",
            "Graphs",
            "public static <V, E> boolean addGraph(Graph<? super V, ? super E> destination, Graph<V, E> source)"
         ],
         [
            "addAllEdges",
            "org.jgrapht",
            "Graphs",
            "public static <V, E> boolean addAllEdges(Graph<? super V, ? super E> destination, Graph<V, E> source, Collection<? extends E> edges)"
         ],
         [
            "addAllVertices",
            "org.jgrapht",
            "Graphs",
            "public static <V, E> boolean addAllVertices(Graph<? super V, ? super E> destination, Collection<? extends V> vertices)"
         ],
         [
            "neighborListOf",
            "org.jgrapht",
            "Graphs",
            "public static <V, E> List<V> neighborListOf(Graph<V, E> g, V vertex)"
         ],
         [
            "predecessorListOf",
            "org.jgrapht",
            "Graphs",
            "public static <V, E> List<V> predecessorListOf(DirectedGraph<V, E> g, V vertex)"
         ],
         [
            "successorListOf",
            "org.jgrapht",
            "Graphs",
            "public static <V, E> List<V> successorListOf(DirectedGraph<V, E> g, V vertex)"
         ],
         [
            "undirectedGraph",
            "org.jgrapht",
            "Graphs",
            "public static <V, E> UndirectedGraph<V, E> undirectedGraph(Graph<V, E> g)"
         ],
         [
            "testIncidence",
            "org.jgrapht",
            "Graphs",
            "public static <V, E> boolean testIncidence(Graph<V, E> g, E e, V v)"
         ],
         [
            "getOppositeVertex",
            "org.jgrapht",
            "Graphs",
            "public static <V, E> V getOppositeVertex(Graph<V, E> g, E e, V v)"
         ],
         [
            "getPathVertexList",
            "org.jgrapht",
            "Graphs",
            "public static <V, E> List<V> getPathVertexList(GraphPath<V, E> path)"
         ],
         [
            "range",
            "org.jgrapht.generate",
            "SimpleWeightedGraphMatrixGenerator",
            "public static int[] range(final int from, final int to)"
         ],
         [
            "createGraphSpecifics",
            "org.jgrapht.traverse",
            "CrossComponentIterator",
            "static <V, E> Specifics<V, E> createGraphSpecifics(Graph<V, E> g)"
         ],
         [
            "findGreedyChromaticNumber",
            "org.jgrapht.alg",
            "ChromaticNumber",
            "public static <V, E> int findGreedyChromaticNumber(UndirectedGraph<V, E> g)"
         ],
         [
            "findGreedyColoredGroups",
            "org.jgrapht.alg",
            "ChromaticNumber",
            "public static <V, E> Map<Integer, Set<V>> findGreedyColoredGroups(UndirectedGraph<V, E> g)"
         ],
         [
            "findPathBetween",
            "org.jgrapht.alg",
            "BellmanFordShortestPath",
            "public static <V, E> List<E> findPathBetween(Graph<V, E> graph, V startVertex, V endVertex)"
         ],
         [
            "findPathBetween",
            "org.jgrapht.alg",
            "DijkstraShortestPath",
            "public static <V, E> List<E> findPathBetween(Graph<V, E> graph, V startVertex, V endVertex)"
         ],
         [
            "of",
            "org.jgrapht.alg.util",
            "Pair",
            "public static <A, B> Pair<A, B> of(A a, B b)"
         ],
         [
            "isEulerian",
            "org.jgrapht.alg",
            "EulerianCircuit",
            "public static <V, E> boolean isEulerian(UndirectedGraph<V, E> g)"
         ],
         [
            "getEulerianCircuitVertices",
            "org.jgrapht.alg",
            "EulerianCircuit",
            "public static <V, E> List<V> getEulerianCircuitVertices(UndirectedGraph<V, E> g)"
         ],
         [
            "getApproximateOptimalForCompleteGraph",
            "org.jgrapht.alg",
            "HamiltonianCycle",
            "public static <V, E> List<V> getApproximateOptimalForCompleteGraph(SimpleWeightedGraph<V, E> g)"
         ],
         [
            "find2ApproximationCover",
            "org.jgrapht.alg",
            "VertexCovers",
            "public static <V, E> Set<V> find2ApproximationCover(Graph<V, E> g)"
         ],
         [
            "findGreedyCover",
            "org.jgrapht.alg",
            "VertexCovers",
            "public static <V, E> Set<V> findGreedyCover(UndirectedGraph<V, E> g)"
         ]
      ],
      "tokensProjectClassesNonPrivateStaticAttributes":[
         [
            "BEST_ORDER",
            "org.jgrapht.experimental.alg.color",
            "GreedyColoring",
            "public static final int BEST_ORDER = 0;"
         ],
         [
            "NATURAL_ORDER",
            "org.jgrapht.experimental.alg.color",
            "GreedyColoring",
            "public static final int NATURAL_ORDER = 1;"
         ],
         [
            "SMALLEST_DEGREE_LAST_ORDER",
            "org.jgrapht.experimental.alg.color",
            "GreedyColoring",
            "public static final int SMALLEST_DEGREE_LAST_ORDER = 2;"
         ],
         [
            "LARGEST_SATURATION_FIRST_ORDER",
            "org.jgrapht.experimental.alg.color",
            "GreedyColoring",
            "public static final int LARGEST_SATURATION_FIRST_ORDER = 3;"
         ],
         [
            "DEFAULT_EDGE_WEIGHT",
            "org.jgrapht",
            "WeightedGraph",
            "public static double DEFAULT_EDGE_WEIGHT = 1.0;"
         ],
         [
            "HUB_VERTEX",
            "org.jgrapht.generate",
            "WheelGraphGenerator",
            "public static final String HUB_VERTEX = \"Hub Vertex\";"
         ],
         [
            "CORNER_VERTEX",
            "org.jgrapht.generate",
            "GridGraphGenerator",
            "public static final String CORNER_VERTEX = \"Corner Vertex\";"
         ],
         [
            "START_VERTEX",
            "org.jgrapht.generate",
            "LinearGraphGenerator",
            "public static final String START_VERTEX = \"Start Vertex\";"
         ],
         [
            "END_VERTEX",
            "org.jgrapht.generate",
            "LinearGraphGenerator",
            "public static final String END_VERTEX = \"End Vertex\";"
         ],
         [
            "CENTER_VERTEX",
            "org.jgrapht.generate",
            "StarGraphGenerator",
            "public static final String CENTER_VERTEX = \"Center Vertex\";"
         ],
         [
            "SENTINEL",
            "org.jgrapht.traverse",
            "DepthFirstIterator",
            "public static final Object SENTINEL = new Object();"
         ],
         [
            "BEFORE_EDGE_ADDED",
            "org.jgrapht.event",
            "GraphEdgeChangeEvent",
            "public static final int BEFORE_EDGE_ADDED = 21;"
         ],
         [
            "BEFORE_EDGE_REMOVED",
            "org.jgrapht.event",
            "GraphEdgeChangeEvent",
            "public static final int BEFORE_EDGE_REMOVED = 22;"
         ],
         [
            "EDGE_ADDED",
            "org.jgrapht.event",
            "GraphEdgeChangeEvent",
            "public static final int EDGE_ADDED = 23;"
         ],
         [
            "EDGE_REMOVED",
            "org.jgrapht.event",
            "GraphEdgeChangeEvent",
            "public static final int EDGE_REMOVED = 24;"
         ],
         [
            "CONNECTED_COMPONENT_STARTED",
            "org.jgrapht.event",
            "ConnectedComponentTraversalEvent",
            "public static final int CONNECTED_COMPONENT_STARTED = 31;"
         ],
         [
            "CONNECTED_COMPONENT_FINISHED",
            "org.jgrapht.event",
            "ConnectedComponentTraversalEvent",
            "public static final int CONNECTED_COMPONENT_FINISHED = 32;"
         ],
         [
            "BEFORE_VERTEX_ADDED",
            "org.jgrapht.event",
            "GraphVertexChangeEvent",
            "public static final int BEFORE_VERTEX_ADDED = 11;"
         ],
         [
            "BEFORE_VERTEX_REMOVED",
            "org.jgrapht.event",
            "GraphVertexChangeEvent",
            "public static final int BEFORE_VERTEX_REMOVED = 12;"
         ],
         [
            "VERTEX_ADDED",
            "org.jgrapht.event",
            "GraphVertexChangeEvent",
            "public static final int VERTEX_ADDED = 13;"
         ],
         [
            "VERTEX_REMOVED",
            "org.jgrapht.event",
            "GraphVertexChangeEvent",
            "public static final int VERTEX_REMOVED = 14;"
         ],
         [
            "NULL_NODE",
            "org.jgrapht.alg.isomorphism",
            "VF2State",
            "public static final int NULL_NODE = -1;"
         ],
         [
            "DEBUG",
            "org.jgrapht.alg.isomorphism",
            "VF2State",
            "protected static final boolean DEBUG = false;"
         ],
         [
            "DEFAULT_EPSILON",
            "org.jgrapht.alg",
            "EdmondsKarpMaximumFlow",
            "public static final double DEFAULT_EPSILON = 0.000000001;"
         ],
         [
            "INSTANCE",
            "org.jgrapht.alg",
            "TransitiveClosure",
            "public static final TransitiveClosure INSTANCE = new TransitiveClosure();"
         ],
         [
            "INSTANCE",
            "org.jgrapht.alg",
            "TransitiveReduction",
            "public static final TransitiveReduction INSTANCE = new TransitiveReduction();"
         ],
         [
            "NEGATIVE_UNDIRECTED_EDGE",
            "org.jgrapht.alg",
            "BellmanFordIterator",
            "protected final static String NEGATIVE_UNDIRECTED_EDGE = \"Negative\" + \"edge-weights are not allowed in an unidrected graph!\";"
         ],
         [
            "DEFAULT_EPSILON",
            "org.jgrapht.alg.flow",
            "MaximumFlowAlgorithmBase",
            "public static final double DEFAULT_EPSILON = 1e-9;"
         ]
      ],
      "tokensMethodJavadocValues":[

      ],
      "tokensMethodArguments":[
         [
            "vertex",
            "",
            "V"
         ],
         [
            "edge",
            "",
            "E"
         ]
      ],
      "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods":[
         [
            "next",
            "org.jgrapht.traverse",
            "CrossComponentIterator",
            "public V next()"
         ],
         [
            "getClass",
            "java.lang",
            "Object",
            "public final native Class<? extends Object> getClass()"
         ],
         [
            "isSeenVertex",
            "org.jgrapht.traverse",
            "CrossComponentIterator",
            "protected boolean isSeenVertex(Object vertex)"
         ],
         [
            "isReuseEvents",
            "org.jgrapht.traverse",
            "AbstractGraphIterator",
            "public boolean isReuseEvents()"
         ],
         [
            "getGraph",
            "org.jgrapht.traverse",
            "CrossComponentIterator",
            "public Graph<V, E> getGraph()"
         ],
         [
            "hasNext",
            "org.jgrapht.traverse",
            "CrossComponentIterator",
            "public boolean hasNext()"
         ],
         [
            "next",
            "java.util",
            "Iterator",
            "public abstract E next()"
         ],
         [
            "equals",
            "java.lang",
            "Object",
            "public boolean equals(Object arg0)"
         ],
         [
            "getSeenData",
            "org.jgrapht.traverse",
            "CrossComponentIterator",
            "protected D getSeenData(V vertex)"
         ],
         [
            "isCrossComponentTraversal",
            "org.jgrapht.traverse",
            "AbstractGraphIterator",
            "public boolean isCrossComponentTraversal()"
         ],
         [
            "clone",
            "java.lang",
            "Object",
            "protected native Object clone() throws CloneNotSupportedException"
         ],
         [
            "isConnectedComponentExhausted",
            "org.jgrapht.traverse",
            "CrossComponentIterator",
            "protected abstract boolean isConnectedComponentExhausted()"
         ],
         [
            "toString",
            "java.lang",
            "Object",
            "public String toString()"
         ],
         [
            "provideNextVertex",
            "org.jgrapht.traverse",
            "CrossComponentIterator",
            "protected abstract V provideNextVertex()"
         ],
         [
            "putSeenData",
            "org.jgrapht.traverse",
            "CrossComponentIterator",
            "protected D putSeenData(V vertex, D data)"
         ],
         [
            "hashCode",
            "java.lang",
            "Object",
            "public native int hashCode()"
         ]
      ],
      "tokensMethodVariablesNonPrivateNonStaticAttributes":[
         [
            "nListeners",
            "org.jgrapht.traverse",
            "AbstractGraphIterator",
            "protected int nListeners;"
         ]
      ],
      "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods":[

      ],
      "tokensOracleVariablesNonPrivateNonStaticAttributes":[

      ]
   }
]