[
    "</s>[  ]</s>[ multiple_variable_methodArgument multiple_variable_class single_punctuation_semiColon single_punctuation_openParenthesis ]</s>@param <E> the element type</s>PRE</s>org.apache.commons.collections4</s>BagUtils</s>\t/**\n     * Returns a synchronized (thread-safe) bag backed by the given bag. In\n     * order to guarantee serial access, it is critical that all access to the\n     * backing bag is accomplished through the returned bag.\n     * <p>\n     * It is imperative that the user manually synchronize on the returned bag\n     * when iterating over it:\n     *\n     * <pre>\n     * Bag bag = BagUtils.synchronizedBag(new HashBag());\n     * ...\n     * synchronized(bag) {\n     *     Iterator i = bag.iterator(); // Must be in synchronized block\n     *     while (i.hasNext())\n     *         foo(i.next());\n     *     }\n     * }\n     * </pre>\n     *\n     * Failure to follow this advice may result in non-deterministic behavior.\n     *\n     * @param <E> the element type\n     * @param bag the bag to synchronize, must not be null\n     * @return a synchronized bag backed by that bag\n     * @throws NullPointerException if the Bag is null\n     */</s>public static <E> Bag<E> synchronizedBag(final Bag<E> bag)",
    "</s>[  ]</s>[ multiple_variable_methodArgument multiple_variable_class single_punctuation_semiColon single_punctuation_openParenthesis ]</s>@param bag the bag to synchronize, must not be null</s>PRE</s>org.apache.commons.collections4</s>BagUtils</s>\t/**\n     * Returns a synchronized (thread-safe) bag backed by the given bag. In\n     * order to guarantee serial access, it is critical that all access to the\n     * backing bag is accomplished through the returned bag.\n     * <p>\n     * It is imperative that the user manually synchronize on the returned bag\n     * when iterating over it:\n     *\n     * <pre>\n     * Bag bag = BagUtils.synchronizedBag(new HashBag());\n     * ...\n     * synchronized(bag) {\n     *     Iterator i = bag.iterator(); // Must be in synchronized block\n     *     while (i.hasNext())\n     *         foo(i.next());\n     *     }\n     * }\n     * </pre>\n     *\n     * Failure to follow this advice may result in non-deterministic behavior.\n     *\n     * @param <E> the element type\n     * @param bag the bag to synchronize, must not be null\n     * @return a synchronized bag backed by that bag\n     * @throws NullPointerException if the Bag is null\n     */</s>public static <E> Bag<E> synchronizedBag(final Bag<E> bag)",
    "</s>[  ]</s>[ multiple_variable_methodArgument multiple_variable_class single_value_true single_punctuation_semiColon single_punctuation_openParenthesis ]</s>@return a synchronized bag backed by that bag</s>NORMAL_POST</s>org.apache.commons.collections4</s>BagUtils</s>\t/**\n     * Returns a synchronized (thread-safe) bag backed by the given bag. In\n     * order to guarantee serial access, it is critical that all access to the\n     * backing bag is accomplished through the returned bag.\n     * <p>\n     * It is imperative that the user manually synchronize on the returned bag\n     * when iterating over it:\n     *\n     * <pre>\n     * Bag bag = BagUtils.synchronizedBag(new HashBag());\n     * ...\n     * synchronized(bag) {\n     *     Iterator i = bag.iterator(); // Must be in synchronized block\n     *     while (i.hasNext())\n     *         foo(i.next());\n     *     }\n     * }\n     * </pre>\n     *\n     * Failure to follow this advice may result in non-deterministic behavior.\n     *\n     * @param <E> the element type\n     * @param bag the bag to synchronize, must not be null\n     * @return a synchronized bag backed by that bag\n     * @throws NullPointerException if the Bag is null\n     */</s>public static <E> Bag<E> synchronizedBag(final Bag<E> bag)",
    "</s>[  ]</s>[ multiple_variable_methodArgument multiple_variable_class single_value_true single_punctuation_semiColon single_punctuation_openParenthesis ]</s>@throws NullPointerException if the Bag is null</s>EXCEPT_POST</s>org.apache.commons.collections4</s>BagUtils</s>\t/**\n     * Returns a synchronized (thread-safe) bag backed by the given bag. In\n     * order to guarantee serial access, it is critical that all access to the\n     * backing bag is accomplished through the returned bag.\n     * <p>\n     * It is imperative that the user manually synchronize on the returned bag\n     * when iterating over it:\n     *\n     * <pre>\n     * Bag bag = BagUtils.synchronizedBag(new HashBag());\n     * ...\n     * synchronized(bag) {\n     *     Iterator i = bag.iterator(); // Must be in synchronized block\n     *     while (i.hasNext())\n     *         foo(i.next());\n     *     }\n     * }\n     * </pre>\n     *\n     * Failure to follow this advice may result in non-deterministic behavior.\n     *\n     * @param <E> the element type\n     * @param bag the bag to synchronize, must not be null\n     * @return a synchronized bag backed by that bag\n     * @throws NullPointerException if the Bag is null\n     */</s>public static <E> Bag<E> synchronizedBag(final Bag<E> bag)",
    "</s>[  ]</s>[ multiple_variable_methodArgument multiple_variable_class single_punctuation_semiColon single_punctuation_openParenthesis ]</s>@param <E> the element type</s>PRE</s>org.apache.commons.collections4</s>BagUtils</s>\t/**\n     * Returns an unmodifiable view of the given bag. Any modification attempts\n     * to the returned bag will raise an {@link UnsupportedOperationException}.\n     *\n     * @param <E> the element type\n     * @param bag the bag whose unmodifiable view is to be returned, must not be null\n     * @return an unmodifiable view of that bag\n     * @throws NullPointerException if the Bag is null\n     */</s>public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)",
    "</s>[  ]</s>[ multiple_variable_methodArgument multiple_variable_class single_punctuation_semiColon single_punctuation_openParenthesis ]</s>@param bag the bag whose unmodifiable view is to be returned, must not be null</s>PRE</s>org.apache.commons.collections4</s>BagUtils</s>\t/**\n     * Returns an unmodifiable view of the given bag. Any modification attempts\n     * to the returned bag will raise an {@link UnsupportedOperationException}.\n     *\n     * @param <E> the element type\n     * @param bag the bag whose unmodifiable view is to be returned, must not be null\n     * @return an unmodifiable view of that bag\n     * @throws NullPointerException if the Bag is null\n     */</s>public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)",
    "</s>[  ]</s>[ multiple_variable_methodArgument multiple_variable_class single_value_true single_punctuation_semiColon single_punctuation_openParenthesis ]</s>@return an unmodifiable view of that bag</s>NORMAL_POST</s>org.apache.commons.collections4</s>BagUtils</s>\t/**\n     * Returns an unmodifiable view of the given bag. Any modification attempts\n     * to the returned bag will raise an {@link UnsupportedOperationException}.\n     *\n     * @param <E> the element type\n     * @param bag the bag whose unmodifiable view is to be returned, must not be null\n     * @return an unmodifiable view of that bag\n     * @throws NullPointerException if the Bag is null\n     */</s>public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)",
    "</s>[  ]</s>[ multiple_variable_methodArgument multiple_variable_class single_value_true single_punctuation_semiColon single_punctuation_openParenthesis ]</s>@throws NullPointerException if the Bag is null</s>EXCEPT_POST</s>org.apache.commons.collections4</s>BagUtils</s>\t/**\n     * Returns an unmodifiable view of the given bag. Any modification attempts\n     * to the returned bag will raise an {@link UnsupportedOperationException}.\n     *\n     * @param <E> the element type\n     * @param bag the bag whose unmodifiable view is to be returned, must not be null\n     * @return an unmodifiable view of that bag\n     * @throws NullPointerException if the Bag is null\n     */</s>public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)",
    "</s>[  ]</s>[ multiple_variable_methodArgument multiple_variable_class single_punctuation_semiColon single_punctuation_openParenthesis ]</s>@param <E> the element type</s>PRE</s>org.apache.commons.collections4</s>BagUtils</s>\t/**\n     * Returns a predicated (validating) bag backed by the given bag.\n     * <p>\n     * Only objects that pass the test in the given predicate can be added to\n     * the bag. Trying to add an invalid object results in an\n     * IllegalArgumentException. It is important not to use the original bag\n     * after invoking this method, as it is a backdoor for adding invalid\n     * objects.\n     *\n     * @param <E> the element type\n     * @param bag the bag to predicate, must not be null\n     * @param predicate the predicate for the bag, must not be null\n     * @return a predicated bag backed by the given bag\n     * @throws NullPointerException if the Bag or Predicate is null\n     */</s>public static <E> Bag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)",
    "</s>[  ]</s>[ multiple_variable_methodArgument multiple_variable_class single_punctuation_semiColon single_punctuation_openParenthesis ]</s>@param bag the bag to predicate, must not be null</s>PRE</s>org.apache.commons.collections4</s>BagUtils</s>\t/**\n     * Returns a predicated (validating) bag backed by the given bag.\n     * <p>\n     * Only objects that pass the test in the given predicate can be added to\n     * the bag. Trying to add an invalid object results in an\n     * IllegalArgumentException. It is important not to use the original bag\n     * after invoking this method, as it is a backdoor for adding invalid\n     * objects.\n     *\n     * @param <E> the element type\n     * @param bag the bag to predicate, must not be null\n     * @param predicate the predicate for the bag, must not be null\n     * @return a predicated bag backed by the given bag\n     * @throws NullPointerException if the Bag or Predicate is null\n     */</s>public static <E> Bag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)",
    "</s>[  ]</s>[ multiple_variable_methodArgument multiple_variable_class single_punctuation_semiColon single_punctuation_openParenthesis ]</s>@param predicate the predicate for the bag, must not be null</s>PRE</s>org.apache.commons.collections4</s>BagUtils</s>\t/**\n     * Returns a predicated (validating) bag backed by the given bag.\n     * <p>\n     * Only objects that pass the test in the given predicate can be added to\n     * the bag. Trying to add an invalid object results in an\n     * IllegalArgumentException. It is important not to use the original bag\n     * after invoking this method, as it is a backdoor for adding invalid\n     * objects.\n     *\n     * @param <E> the element type\n     * @param bag the bag to predicate, must not be null\n     * @param predicate the predicate for the bag, must not be null\n     * @return a predicated bag backed by the given bag\n     * @throws NullPointerException if the Bag or Predicate is null\n     */</s>public static <E> Bag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)",
    "</s>[  ]</s>[ multiple_variable_methodArgument multiple_variable_class single_value_true single_punctuation_semiColon single_punctuation_openParenthesis ]</s>@return a predicated bag backed by the given bag</s>NORMAL_POST</s>org.apache.commons.collections4</s>BagUtils</s>\t/**\n     * Returns a predicated (validating) bag backed by the given bag.\n     * <p>\n     * Only objects that pass the test in the given predicate can be added to\n     * the bag. Trying to add an invalid object results in an\n     * IllegalArgumentException. It is important not to use the original bag\n     * after invoking this method, as it is a backdoor for adding invalid\n     * objects.\n     *\n     * @param <E> the element type\n     * @param bag the bag to predicate, must not be null\n     * @param predicate the predicate for the bag, must not be null\n     * @return a predicated bag backed by the given bag\n     * @throws NullPointerException if the Bag or Predicate is null\n     */</s>public static <E> Bag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)",
    "</s>[  ]</s>[ multiple_variable_methodArgument multiple_variable_class single_value_true single_punctuation_semiColon single_punctuation_openParenthesis ]</s>@throws NullPointerException if the Bag or Predicate is null</s>EXCEPT_POST</s>org.apache.commons.collections4</s>BagUtils</s>\t/**\n     * Returns a predicated (validating) bag backed by the given bag.\n     * <p>\n     * Only objects that pass the test in the given predicate can be added to\n     * the bag. Trying to add an invalid object results in an\n     * IllegalArgumentException. It is important not to use the original bag\n     * after invoking this method, as it is a backdoor for adding invalid\n     * objects.\n     *\n     * @param <E> the element type\n     * @param bag the bag to predicate, must not be null\n     * @param predicate the predicate for the bag, must not be null\n     * @return a predicated bag backed by the given bag\n     * @throws NullPointerException if the Bag or Predicate is null\n     */</s>public static <E> Bag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)",
    "</s>[  ]</s>[ multiple_variable_methodArgument multiple_variable_class single_punctuation_semiColon single_punctuation_openParenthesis ]</s>@param <E> the element type</s>PRE</s>org.apache.commons.collections4</s>BagUtils</s>\t/**\n     * Returns a transformed bag backed by the given bag.\n     * <p>\n     * Each object is passed through the transformer as it is added to the Bag.\n     * It is important not to use the original bag after invoking this method,\n     * as it is a backdoor for adding untransformed objects.\n     * <p>\n     * Existing entries in the specified bag will not be transformed.\n     * If you want that behaviour, see {@link TransformedBag#transformedBag(Bag, Transformer)}.\n     *\n     * @param <E> the element type\n     * @param bag the bag to predicate, must not be null\n     * @param transformer the transformer for the bag, must not be null\n     * @return a transformed bag backed by the given bag\n     * @throws NullPointerException if the Bag or Transformer is null\n     */</s>public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)",
    "</s>[  ]</s>[ multiple_variable_methodArgument multiple_variable_class single_punctuation_semiColon single_punctuation_openParenthesis ]</s>@param bag the bag to predicate, must not be null</s>PRE</s>org.apache.commons.collections4</s>BagUtils</s>\t/**\n     * Returns a transformed bag backed by the given bag.\n     * <p>\n     * Each object is passed through the transformer as it is added to the Bag.\n     * It is important not to use the original bag after invoking this method,\n     * as it is a backdoor for adding untransformed objects.\n     * <p>\n     * Existing entries in the specified bag will not be transformed.\n     * If you want that behaviour, see {@link TransformedBag#transformedBag(Bag, Transformer)}.\n     *\n     * @param <E> the element type\n     * @param bag the bag to predicate, must not be null\n     * @param transformer the transformer for the bag, must not be null\n     * @return a transformed bag backed by the given bag\n     * @throws NullPointerException if the Bag or Transformer is null\n     */</s>public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)",
    "</s>[  ]</s>[ multiple_variable_methodArgument multiple_variable_class single_punctuation_semiColon single_punctuation_openParenthesis ]</s>@param transformer the transformer for the bag, must not be null</s>PRE</s>org.apache.commons.collections4</s>BagUtils</s>\t/**\n     * Returns a transformed bag backed by the given bag.\n     * <p>\n     * Each object is passed through the transformer as it is added to the Bag.\n     * It is important not to use the original bag after invoking this method,\n     * as it is a backdoor for adding untransformed objects.\n     * <p>\n     * Existing entries in the specified bag will not be transformed.\n     * If you want that behaviour, see {@link TransformedBag#transformedBag(Bag, Transformer)}.\n     *\n     * @param <E> the element type\n     * @param bag the bag to predicate, must not be null\n     * @param transformer the transformer for the bag, must not be null\n     * @return a transformed bag backed by the given bag\n     * @throws NullPointerException if the Bag or Transformer is null\n     */</s>public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)",
    "</s>[  ]</s>[ multiple_variable_methodArgument multiple_variable_class single_value_true single_punctuation_semiColon single_punctuation_openParenthesis ]</s>@return a transformed bag backed by the given bag</s>NORMAL_POST</s>org.apache.commons.collections4</s>BagUtils</s>\t/**\n     * Returns a transformed bag backed by the given bag.\n     * <p>\n     * Each object is passed through the transformer as it is added to the Bag.\n     * It is important not to use the original bag after invoking this method,\n     * as it is a backdoor for adding untransformed objects.\n     * <p>\n     * Existing entries in the specified bag will not be transformed.\n     * If you want that behaviour, see {@link TransformedBag#transformedBag(Bag, Transformer)}.\n     *\n     * @param <E> the element type\n     * @param bag the bag to predicate, must not be null\n     * @param transformer the transformer for the bag, must not be null\n     * @return a transformed bag backed by the given bag\n     * @throws NullPointerException if the Bag or Transformer is null\n     */</s>public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)",
    "</s>[  ]</s>[ multiple_variable_methodArgument multiple_variable_class single_value_true single_punctuation_semiColon single_punctuation_openParenthesis ]</s>@throws NullPointerException if the Bag or Transformer is null</s>EXCEPT_POST</s>org.apache.commons.collections4</s>BagUtils</s>\t/**\n     * Returns a transformed bag backed by the given bag.\n     * <p>\n     * Each object is passed through the transformer as it is added to the Bag.\n     * It is important not to use the original bag after invoking this method,\n     * as it is a backdoor for adding untransformed objects.\n     * <p>\n     * Existing entries in the specified bag will not be transformed.\n     * If you want that behaviour, see {@link TransformedBag#transformedBag(Bag, Transformer)}.\n     *\n     * @param <E> the element type\n     * @param bag the bag to predicate, must not be null\n     * @param transformer the transformer for the bag, must not be null\n     * @return a transformed bag backed by the given bag\n     * @throws NullPointerException if the Bag or Transformer is null\n     */</s>public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)",
    "</s>[  ]</s>[ multiple_variable_methodArgument multiple_variable_class single_punctuation_semiColon single_punctuation_openParenthesis ]</s>@param <E> the element type</s>PRE</s>org.apache.commons.collections4</s>BagUtils</s>\t/**\n     * Returns a bag that complies to the Collection contract, backed by the given bag.\n     *\n     * @param <E> the element type\n     * @param bag the bag to decorate, must not be null\n     * @return a Bag that complies to the Collection contract\n     * @throws NullPointerException if bag is null\n     * @since 4.0\n     */</s>public static <E> Bag<E> collectionBag(final Bag<E> bag)",
    "</s>[  ]</s>[ multiple_variable_methodArgument multiple_variable_class single_punctuation_semiColon single_punctuation_openParenthesis ]</s>@param bag the bag to decorate, must not be null</s>PRE</s>org.apache.commons.collections4</s>BagUtils</s>\t/**\n     * Returns a bag that complies to the Collection contract, backed by the given bag.\n     *\n     * @param <E> the element type\n     * @param bag the bag to decorate, must not be null\n     * @return a Bag that complies to the Collection contract\n     * @throws NullPointerException if bag is null\n     * @since 4.0\n     */</s>public static <E> Bag<E> collectionBag(final Bag<E> bag)",
    "</s>[  ]</s>[ multiple_variable_methodArgument multiple_variable_class single_value_true single_punctuation_semiColon single_punctuation_openParenthesis ]</s>@return a Bag that complies to the Collection contract</s>NORMAL_POST</s>org.apache.commons.collections4</s>BagUtils</s>\t/**\n     * Returns a bag that complies to the Collection contract, backed by the given bag.\n     *\n     * @param <E> the element type\n     * @param bag the bag to decorate, must not be null\n     * @return a Bag that complies to the Collection contract\n     * @throws NullPointerException if bag is null\n     * @since 4.0\n     */</s>public static <E> Bag<E> collectionBag(final Bag<E> bag)",
    "</s>[  ]</s>[ multiple_variable_methodArgument multiple_variable_class single_value_true single_punctuation_semiColon single_punctuation_openParenthesis ]</s>@throws NullPointerException if bag is null</s>EXCEPT_POST</s>org.apache.commons.collections4</s>BagUtils</s>\t/**\n     * Returns a bag that complies to the Collection contract, backed by the given bag.\n     *\n     * @param <E> the element type\n     * @param bag the bag to decorate, must not be null\n     * @return a Bag that complies to the Collection contract\n     * @throws NullPointerException if bag is null\n     * @since 4.0\n     */</s>public static <E> Bag<E> collectionBag(final Bag<E> bag)",
    "</s>[  ]</s>[ multiple_variable_methodArgument multiple_variable_class single_punctuation_semiColon single_punctuation_openParenthesis ]</s>@param <E> the element type</s>PRE</s>org.apache.commons.collections4</s>BagUtils</s>\t/**\n     * Returns a synchronized (thread-safe) sorted bag backed by the given\n     * sorted bag. In order to guarantee serial access, it is critical that all\n     * access to the backing bag is accomplished through the returned bag.\n     * <p>\n     * It is imperative that the user manually synchronize on the returned bag\n     * when iterating over it:\n     *\n     * <pre>\n     * SortedBag bag = BagUtils.synchronizedSortedBag(new TreeBag());\n     * ...\n     * synchronized(bag) {\n     *     Iterator i = bag.iterator(); // Must be in synchronized block\n     *     while (i.hasNext())\n     *         foo(i.next());\n     *     }\n     * }\n     * </pre>\n     *\n     * Failure to follow this advice may result in non-deterministic behavior.\n     *\n     * @param <E> the element type\n     * @param bag the bag to synchronize, must not be null\n     * @return a synchronized bag backed by that bag\n     * @throws NullPointerException if the SortedBag is null\n     */</s>public static <E> SortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)",
    "</s>[  ]</s>[ multiple_variable_methodArgument multiple_variable_class single_punctuation_semiColon single_punctuation_openParenthesis ]</s>@param bag the bag to synchronize, must not be null</s>PRE</s>org.apache.commons.collections4</s>BagUtils</s>\t/**\n     * Returns a synchronized (thread-safe) sorted bag backed by the given\n     * sorted bag. In order to guarantee serial access, it is critical that all\n     * access to the backing bag is accomplished through the returned bag.\n     * <p>\n     * It is imperative that the user manually synchronize on the returned bag\n     * when iterating over it:\n     *\n     * <pre>\n     * SortedBag bag = BagUtils.synchronizedSortedBag(new TreeBag());\n     * ...\n     * synchronized(bag) {\n     *     Iterator i = bag.iterator(); // Must be in synchronized block\n     *     while (i.hasNext())\n     *         foo(i.next());\n     *     }\n     * }\n     * </pre>\n     *\n     * Failure to follow this advice may result in non-deterministic behavior.\n     *\n     * @param <E> the element type\n     * @param bag the bag to synchronize, must not be null\n     * @return a synchronized bag backed by that bag\n     * @throws NullPointerException if the SortedBag is null\n     */</s>public static <E> SortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)",
    "</s>[  ]</s>[ multiple_variable_methodArgument multiple_variable_class single_value_true single_punctuation_semiColon single_punctuation_openParenthesis ]</s>@return a synchronized bag backed by that bag</s>NORMAL_POST</s>org.apache.commons.collections4</s>BagUtils</s>\t/**\n     * Returns a synchronized (thread-safe) sorted bag backed by the given\n     * sorted bag. In order to guarantee serial access, it is critical that all\n     * access to the backing bag is accomplished through the returned bag.\n     * <p>\n     * It is imperative that the user manually synchronize on the returned bag\n     * when iterating over it:\n     *\n     * <pre>\n     * SortedBag bag = BagUtils.synchronizedSortedBag(new TreeBag());\n     * ...\n     * synchronized(bag) {\n     *     Iterator i = bag.iterator(); // Must be in synchronized block\n     *     while (i.hasNext())\n     *         foo(i.next());\n     *     }\n     * }\n     * </pre>\n     *\n     * Failure to follow this advice may result in non-deterministic behavior.\n     *\n     * @param <E> the element type\n     * @param bag the bag to synchronize, must not be null\n     * @return a synchronized bag backed by that bag\n     * @throws NullPointerException if the SortedBag is null\n     */</s>public static <E> SortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)",
    "</s>[  ]</s>[ multiple_variable_methodArgument multiple_variable_class single_value_true single_punctuation_semiColon single_punctuation_openParenthesis ]</s>@throws NullPointerException if the SortedBag is null</s>EXCEPT_POST</s>org.apache.commons.collections4</s>BagUtils</s>\t/**\n     * Returns a synchronized (thread-safe) sorted bag backed by the given\n     * sorted bag. In order to guarantee serial access, it is critical that all\n     * access to the backing bag is accomplished through the returned bag.\n     * <p>\n     * It is imperative that the user manually synchronize on the returned bag\n     * when iterating over it:\n     *\n     * <pre>\n     * SortedBag bag = BagUtils.synchronizedSortedBag(new TreeBag());\n     * ...\n     * synchronized(bag) {\n     *     Iterator i = bag.iterator(); // Must be in synchronized block\n     *     while (i.hasNext())\n     *         foo(i.next());\n     *     }\n     * }\n     * </pre>\n     *\n     * Failure to follow this advice may result in non-deterministic behavior.\n     *\n     * @param <E> the element type\n     * @param bag the bag to synchronize, must not be null\n     * @return a synchronized bag backed by that bag\n     * @throws NullPointerException if the SortedBag is null\n     */</s>public static <E> SortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)",
    "</s>[  ]</s>[ multiple_variable_methodArgument multiple_variable_class single_punctuation_semiColon single_punctuation_openParenthesis ]</s>@param <E> the element type</s>PRE</s>org.apache.commons.collections4</s>BagUtils</s>\t/**\n     * Returns an unmodifiable view of the given sorted bag. Any modification\n     * attempts to the returned bag will raise an\n     * {@link UnsupportedOperationException}.\n     *\n     * @param <E> the element type\n     * @param bag the bag whose unmodifiable view is to be returned, must not be null\n     * @return an unmodifiable view of that bag\n     * @throws NullPointerException if the SortedBag is null\n     */</s>public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)",
    "</s>[  ]</s>[ multiple_variable_methodArgument multiple_variable_class single_punctuation_semiColon single_punctuation_openParenthesis ]</s>@param bag the bag whose unmodifiable view is to be returned, must not be null</s>PRE</s>org.apache.commons.collections4</s>BagUtils</s>\t/**\n     * Returns an unmodifiable view of the given sorted bag. Any modification\n     * attempts to the returned bag will raise an\n     * {@link UnsupportedOperationException}.\n     *\n     * @param <E> the element type\n     * @param bag the bag whose unmodifiable view is to be returned, must not be null\n     * @return an unmodifiable view of that bag\n     * @throws NullPointerException if the SortedBag is null\n     */</s>public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)",
    "</s>[  ]</s>[ multiple_variable_methodArgument multiple_variable_class single_value_true single_punctuation_semiColon single_punctuation_openParenthesis ]</s>@return an unmodifiable view of that bag</s>NORMAL_POST</s>org.apache.commons.collections4</s>BagUtils</s>\t/**\n     * Returns an unmodifiable view of the given sorted bag. Any modification\n     * attempts to the returned bag will raise an\n     * {@link UnsupportedOperationException}.\n     *\n     * @param <E> the element type\n     * @param bag the bag whose unmodifiable view is to be returned, must not be null\n     * @return an unmodifiable view of that bag\n     * @throws NullPointerException if the SortedBag is null\n     */</s>public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)",
    "</s>[  ]</s>[ multiple_variable_methodArgument multiple_variable_class single_value_true single_punctuation_semiColon single_punctuation_openParenthesis ]</s>@throws NullPointerException if the SortedBag is null</s>EXCEPT_POST</s>org.apache.commons.collections4</s>BagUtils</s>\t/**\n     * Returns an unmodifiable view of the given sorted bag. Any modification\n     * attempts to the returned bag will raise an\n     * {@link UnsupportedOperationException}.\n     *\n     * @param <E> the element type\n     * @param bag the bag whose unmodifiable view is to be returned, must not be null\n     * @return an unmodifiable view of that bag\n     * @throws NullPointerException if the SortedBag is null\n     */</s>public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)",
    "</s>[  ]</s>[ multiple_variable_methodArgument multiple_variable_class single_punctuation_semiColon single_punctuation_openParenthesis ]</s>@param <E> the element type</s>PRE</s>org.apache.commons.collections4</s>BagUtils</s>\t/**\n     * Returns a predicated (validating) sorted bag backed by the given sorted\n     * bag.\n     * <p>\n     * Only objects that pass the test in the given predicate can be added to\n     * the bag. Trying to add an invalid object results in an\n     * IllegalArgumentException. It is important not to use the original bag\n     * after invoking this method, as it is a backdoor for adding invalid\n     * objects.\n     *\n     * @param <E> the element type\n     * @param bag the sorted bag to predicate, must not be null\n     * @param predicate the predicate for the bag, must not be null\n     * @return a predicated bag backed by the given bag\n     * @throws NullPointerException if the SortedBag or Predicate is null\n     */</s>public static <E> SortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)",
    "</s>[  ]</s>[ multiple_variable_methodArgument multiple_variable_class single_punctuation_semiColon single_punctuation_openParenthesis ]</s>@param bag the sorted bag to predicate, must not be null</s>PRE</s>org.apache.commons.collections4</s>BagUtils</s>\t/**\n     * Returns a predicated (validating) sorted bag backed by the given sorted\n     * bag.\n     * <p>\n     * Only objects that pass the test in the given predicate can be added to\n     * the bag. Trying to add an invalid object results in an\n     * IllegalArgumentException. It is important not to use the original bag\n     * after invoking this method, as it is a backdoor for adding invalid\n     * objects.\n     *\n     * @param <E> the element type\n     * @param bag the sorted bag to predicate, must not be null\n     * @param predicate the predicate for the bag, must not be null\n     * @return a predicated bag backed by the given bag\n     * @throws NullPointerException if the SortedBag or Predicate is null\n     */</s>public static <E> SortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)",
    "</s>[  ]</s>[ multiple_variable_methodArgument multiple_variable_class single_punctuation_semiColon single_punctuation_openParenthesis ]</s>@param predicate the predicate for the bag, must not be null</s>PRE</s>org.apache.commons.collections4</s>BagUtils</s>\t/**\n     * Returns a predicated (validating) sorted bag backed by the given sorted\n     * bag.\n     * <p>\n     * Only objects that pass the test in the given predicate can be added to\n     * the bag. Trying to add an invalid object results in an\n     * IllegalArgumentException. It is important not to use the original bag\n     * after invoking this method, as it is a backdoor for adding invalid\n     * objects.\n     *\n     * @param <E> the element type\n     * @param bag the sorted bag to predicate, must not be null\n     * @param predicate the predicate for the bag, must not be null\n     * @return a predicated bag backed by the given bag\n     * @throws NullPointerException if the SortedBag or Predicate is null\n     */</s>public static <E> SortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)",
    "</s>[  ]</s>[ multiple_variable_methodArgument multiple_variable_class single_value_true single_punctuation_semiColon single_punctuation_openParenthesis ]</s>@return a predicated bag backed by the given bag</s>NORMAL_POST</s>org.apache.commons.collections4</s>BagUtils</s>\t/**\n     * Returns a predicated (validating) sorted bag backed by the given sorted\n     * bag.\n     * <p>\n     * Only objects that pass the test in the given predicate can be added to\n     * the bag. Trying to add an invalid object results in an\n     * IllegalArgumentException. It is important not to use the original bag\n     * after invoking this method, as it is a backdoor for adding invalid\n     * objects.\n     *\n     * @param <E> the element type\n     * @param bag the sorted bag to predicate, must not be null\n     * @param predicate the predicate for the bag, must not be null\n     * @return a predicated bag backed by the given bag\n     * @throws NullPointerException if the SortedBag or Predicate is null\n     */</s>public static <E> SortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)",
    "</s>[  ]</s>[ multiple_variable_methodArgument multiple_variable_class single_value_true single_punctuation_semiColon single_punctuation_openParenthesis ]</s>@throws NullPointerException if the SortedBag or Predicate is null</s>EXCEPT_POST</s>org.apache.commons.collections4</s>BagUtils</s>\t/**\n     * Returns a predicated (validating) sorted bag backed by the given sorted\n     * bag.\n     * <p>\n     * Only objects that pass the test in the given predicate can be added to\n     * the bag. Trying to add an invalid object results in an\n     * IllegalArgumentException. It is important not to use the original bag\n     * after invoking this method, as it is a backdoor for adding invalid\n     * objects.\n     *\n     * @param <E> the element type\n     * @param bag the sorted bag to predicate, must not be null\n     * @param predicate the predicate for the bag, must not be null\n     * @return a predicated bag backed by the given bag\n     * @throws NullPointerException if the SortedBag or Predicate is null\n     */</s>public static <E> SortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)",
    "</s>[  ]</s>[ multiple_variable_methodArgument multiple_variable_class single_punctuation_semiColon single_punctuation_openParenthesis ]</s>@param <E> the element type</s>PRE</s>org.apache.commons.collections4</s>BagUtils</s>\t/**\n     * Returns a transformed sorted bag backed by the given bag.\n     * <p>\n     * Each object is passed through the transformer as it is added to the Bag.\n     * It is important not to use the original bag after invoking this method,\n     * as it is a backdoor for adding untransformed objects.\n     * <p>\n     * Existing entries in the specified bag will not be transformed.\n     * If you want that behaviour, see\n     * {@link TransformedSortedBag#transformedSortedBag(SortedBag, Transformer)}.\n     *\n     * @param <E> the element type\n     * @param bag the bag to predicate, must not be null\n     * @param transformer the transformer for the bag, must not be null\n     * @return a transformed bag backed by the given bag\n     * @throws NullPointerException if the Bag or Transformer is null\n     */</s>public static <E> SortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)",
    "</s>[  ]</s>[ multiple_variable_methodArgument multiple_variable_class single_punctuation_semiColon single_punctuation_openParenthesis ]</s>@param bag the bag to predicate, must not be null</s>PRE</s>org.apache.commons.collections4</s>BagUtils</s>\t/**\n     * Returns a transformed sorted bag backed by the given bag.\n     * <p>\n     * Each object is passed through the transformer as it is added to the Bag.\n     * It is important not to use the original bag after invoking this method,\n     * as it is a backdoor for adding untransformed objects.\n     * <p>\n     * Existing entries in the specified bag will not be transformed.\n     * If you want that behaviour, see\n     * {@link TransformedSortedBag#transformedSortedBag(SortedBag, Transformer)}.\n     *\n     * @param <E> the element type\n     * @param bag the bag to predicate, must not be null\n     * @param transformer the transformer for the bag, must not be null\n     * @return a transformed bag backed by the given bag\n     * @throws NullPointerException if the Bag or Transformer is null\n     */</s>public static <E> SortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)",
    "</s>[  ]</s>[ multiple_variable_methodArgument multiple_variable_class single_punctuation_semiColon single_punctuation_openParenthesis ]</s>@param transformer the transformer for the bag, must not be null</s>PRE</s>org.apache.commons.collections4</s>BagUtils</s>\t/**\n     * Returns a transformed sorted bag backed by the given bag.\n     * <p>\n     * Each object is passed through the transformer as it is added to the Bag.\n     * It is important not to use the original bag after invoking this method,\n     * as it is a backdoor for adding untransformed objects.\n     * <p>\n     * Existing entries in the specified bag will not be transformed.\n     * If you want that behaviour, see\n     * {@link TransformedSortedBag#transformedSortedBag(SortedBag, Transformer)}.\n     *\n     * @param <E> the element type\n     * @param bag the bag to predicate, must not be null\n     * @param transformer the transformer for the bag, must not be null\n     * @return a transformed bag backed by the given bag\n     * @throws NullPointerException if the Bag or Transformer is null\n     */</s>public static <E> SortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)",
    "</s>[  ]</s>[ multiple_variable_methodArgument multiple_variable_class single_value_true single_punctuation_semiColon single_punctuation_openParenthesis ]</s>@return a transformed bag backed by the given bag</s>NORMAL_POST</s>org.apache.commons.collections4</s>BagUtils</s>\t/**\n     * Returns a transformed sorted bag backed by the given bag.\n     * <p>\n     * Each object is passed through the transformer as it is added to the Bag.\n     * It is important not to use the original bag after invoking this method,\n     * as it is a backdoor for adding untransformed objects.\n     * <p>\n     * Existing entries in the specified bag will not be transformed.\n     * If you want that behaviour, see\n     * {@link TransformedSortedBag#transformedSortedBag(SortedBag, Transformer)}.\n     *\n     * @param <E> the element type\n     * @param bag the bag to predicate, must not be null\n     * @param transformer the transformer for the bag, must not be null\n     * @return a transformed bag backed by the given bag\n     * @throws NullPointerException if the Bag or Transformer is null\n     */</s>public static <E> SortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)",
    "</s>[  ]</s>[ multiple_variable_methodArgument multiple_variable_class single_value_true single_punctuation_semiColon single_punctuation_openParenthesis ]</s>@throws NullPointerException if the Bag or Transformer is null</s>EXCEPT_POST</s>org.apache.commons.collections4</s>BagUtils</s>\t/**\n     * Returns a transformed sorted bag backed by the given bag.\n     * <p>\n     * Each object is passed through the transformer as it is added to the Bag.\n     * It is important not to use the original bag after invoking this method,\n     * as it is a backdoor for adding untransformed objects.\n     * <p>\n     * Existing entries in the specified bag will not be transformed.\n     * If you want that behaviour, see\n     * {@link TransformedSortedBag#transformedSortedBag(SortedBag, Transformer)}.\n     *\n     * @param <E> the element type\n     * @param bag the bag to predicate, must not be null\n     * @param transformer the transformer for the bag, must not be null\n     * @return a transformed bag backed by the given bag\n     * @throws NullPointerException if the Bag or Transformer is null\n     */</s>public static <E> SortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)",
    "</s>[  ]</s>[ multiple_variable_class single_punctuation_semiColon single_punctuation_openParenthesis ]</s>@param <E> the element type</s>PRE</s>org.apache.commons.collections4</s>BagUtils</s>\t/**\n     * Get an empty <code>Bag</code>.\n     *\n     * @param <E> the element type\n     * @return an empty Bag\n     */</s>public static <E> Bag<E> emptyBag()",
    "</s>[  ]</s>[ multiple_variable_class single_value_true single_punctuation_semiColon single_punctuation_openParenthesis ]</s>@return an empty Bag</s>NORMAL_POST</s>org.apache.commons.collections4</s>BagUtils</s>\t/**\n     * Get an empty <code>Bag</code>.\n     *\n     * @param <E> the element type\n     * @return an empty Bag\n     */</s>public static <E> Bag<E> emptyBag()",
    "</s>[  ]</s>[ multiple_variable_class single_value_true single_punctuation_semiColon single_punctuation_openParenthesis ]</s></s>EXCEPT_POST</s>org.apache.commons.collections4</s>BagUtils</s>\t/**\n     * Get an empty <code>Bag</code>.\n     *\n     * @param <E> the element type\n     * @return an empty Bag\n     */</s>public static <E> Bag<E> emptyBag()",
    "</s>[  ]</s>[ multiple_variable_class single_punctuation_semiColon single_punctuation_openParenthesis ]</s>@param <E> the element type</s>PRE</s>org.apache.commons.collections4</s>BagUtils</s>\t/**\n     * Get an empty <code>SortedBag</code>.\n     *\n     * @param <E> the element type\n     * @return an empty sorted Bag\n     */</s>public static <E> SortedBag<E> emptySortedBag()",
    "</s>[  ]</s>[ multiple_variable_class single_value_true single_punctuation_semiColon single_punctuation_openParenthesis ]</s>@return an empty sorted Bag</s>NORMAL_POST</s>org.apache.commons.collections4</s>BagUtils</s>\t/**\n     * Get an empty <code>SortedBag</code>.\n     *\n     * @param <E> the element type\n     * @return an empty sorted Bag\n     */</s>public static <E> SortedBag<E> emptySortedBag()",
    "</s>[  ]</s>[ multiple_variable_class single_value_true single_punctuation_semiColon single_punctuation_openParenthesis ]</s></s>EXCEPT_POST</s>org.apache.commons.collections4</s>BagUtils</s>\t/**\n     * Get an empty <code>SortedBag</code>.\n     *\n     * @param <E> the element type\n     * @return an empty sorted Bag\n     */</s>public static <E> SortedBag<E> emptySortedBag()",
    "</s>[  ]</s>[ multiple_variable_class single_punctuation_semiColon single_punctuation_openParenthesis ]</s></s>PRE</s>org.apache.commons.collections4</s>BagUtils</s>\t/**\n     * Instantiation of BagUtils is not intended or required.\n     */</s>private BagUtils()",
    "</s>[  ]</s>[ multiple_variable_class single_value_true single_punctuation_semiColon single_punctuation_openParenthesis ]</s></s>NORMAL_POST</s>org.apache.commons.collections4</s>BagUtils</s>\t/**\n     * Instantiation of BagUtils is not intended or required.\n     */</s>private BagUtils()",
    "</s>[  ]</s>[ multiple_variable_class single_value_true single_punctuation_semiColon single_punctuation_openParenthesis ]</s></s>EXCEPT_POST</s>org.apache.commons.collections4</s>BagUtils</s>\t/**\n     * Instantiation of BagUtils is not intended or required.\n     */</s>private BagUtils()"
]