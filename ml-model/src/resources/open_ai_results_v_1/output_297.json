"output = [\n  {\n    'tag': '@param minStep minimal step (sign is irrelevant, regardless of\\nintegration direction, forward or backward), the last step can\\nbe smaller than this',\n    'alternatives': [\n      '@param minStep smallest step (sign is irrelevant, regardless of integration direction, forward or backward), the last step can be less than this',\n      '@param minStep smallest step (sign does not matter, regardless of integration direction, forward or backward), the last step may be smaller than this',\n      '@param minStep minimal step (sign has no effect, regardless of integration direction, forward or backward), the last step may be smaller than this',\n      '@param minStep minimal step (sign is not important, regardless of integration direction, forward or backward), the last step can be smaller than this',\n      '@param minStep minimal step (sign is irrelevant, regardless of integration direction, forward or backward), the final step can be smaller than this'\n    ]\n  },\n  {\n    'tag': '@param maxStep maximal step (sign is irrelevant, regardless of\\nintegration direction, forward or backward), the last step can\\nbe smaller than this',\n    'alternatives': [\n      '@param maxStep largest step (sign is irrelevant, regardless of integration direction, forward or backward), the last step can be less than this',\n      '@param maxStep largest step (sign does not matter, regardless of integration direction, forward or backward), the last step may be smaller than this',\n      '@param maxStep maximal step (sign has no effect, regardless of integration direction, forward or backward), the last step may be smaller than this',\n      '@param maxStep maximal step (sign is not important, regardless of integration direction, forward or backward), the last step can be smaller than this',\n      '@param maxStep maximal step (sign is irrelevant, regardless of integration direction, forward or backward), the final step can be smaller than this'\n    ]\n  },\n  {\n    'tag': '@param scalAbsoluteTolerance allowed absolute error',\n    'alternatives': [\n      '@param scalAbsoluteTolerance permissible absolute error',\n      '@param scalAbsoluteTolerance acceptable absolute error',\n      '@param scalAbsoluteTolerance allowed error in absolute terms',\n      '@param scalAbsoluteTolerance admissible absolute error',\n      '@param scalAbsoluteTolerance tolerant to absolute error'\n    ]\n  },\n  {\n    'tag': '@param scalRelativeTolerance allowed relative error',\n    'alternatives': [\n      '@param scalRelativeTolerance permissible relative error',\n      '@param scalRelativeTolerance acceptable relative error',\n      '@param scalRelativeTolerance allowed error in relative terms',\n      '@param scalRelativeTolerance admissible relative error',\n      '@param scalRelativeTolerance tolerant to relative error'\n    ]\n  },\n  {\n    'tag': '@param vecAbsoluteTolerance allowed absolute error',\n    'alternatives': [\n      '@param vecAbsoluteTolerance permissible absolute error',\n      '@param vecAbsoluteTolerance acceptable absolute error',\n      '@param vecAbsoluteTolerance allowed error in absolute terms',\n      '@param vecAbsoluteTolerance admissible absolute error',\n      '@param vecAbsoluteTolerance tolerant to absolute error'\n    ]\n  },\n  {\n    'tag': '@param vecRelativeTolerance allowed relative error',\n    'alternatives': [\n      '@param vecRelativeTolerance permissible relative error',\n      '@param vecRelativeTolerance acceptable relative error',\n      '@param vecRelativeTolerance allowed error in relative terms',\n      '@param vecRelativeTolerance admissible relative error',\n      '@param vecRelativeTolerance tolerant to relative error'\n    ]\n  },\n  {\n    'tag': '@param interpolator interpolator to copy from. The copy is a deep\\ncopy: its arrays are separated from the original arrays of the\\ninstance',\n    'alternatives': [\n      '@param interpolator copy of the interpolator to be used. The copy is a deep copy: its arrays are distinct from the original arrays of the instance',\n      '@param interpolator duplicator of the interpolator to be used. The duplicator is deep: its arrays are not shared with the original arrays of the instance',\n      '@param interpolator interpolator to duplicate. The duplication is deep: the arrays used are separate from the original arrays of the instance',\n      '@param interpolator interpolator to replicate. The replication is deep: the arrays are separate from the original arrays of the instance',\n      '@param interpolator interpolator to make a duplicate of. The duplication is deep: its arrays are independent from the original arrays of the instance'\n    ]\n  },\n  {\n    'tag': '@param field field to which the time and state vector elements belong',\n    'alternatives': [\n      '@param field field to which the elements of time and state vectors belong',\n      '@param field field to which the elements in time and state vectors belong',\n      '@param field field to which time and state vector elements pertain',\n      '@param field field to which the elements of the time and state vectors are related',\n      '@param field field to which the elements in the time and state vectors are associated'\n    ]\n  },\n  {\n    'tag': '@param step integration step',\n    'alternatives': [\n      '@param step integration increment',\n      '@param step integration interval',\n      '@param step integration stride',\n      '@param step step size for integration',\n      '@param step size of integration step'\n    ]\n  },\n  {\n    'tag': '@param performStabilityCheck if true, stability check will be performed,\\n     if false, the check will be skipped',\n    'alternatives': [\n      '@param performStabilityCheck if set to true, a stability check will be executed, otherwise, the check will be omitted',\n      '@param performStabilityCheck if set to true, a stability check will be carried out, otherwise, the check will be ignored',\n      '@param performStabilityCheck if true, a stability check is performed, if false, the check is omitted',\n      '@param performStabilityCheck if true, a stability check is executed, if false, the check is skipped',\n      '@param performStabilityCheck if set to true, a stability check is performed, if set to false, the check is skipped'\n    ]\n  },\n  {\n    'tag': '@param maxNumIter maximal number of iterations for which checks are\\nperformed (the number of iterations is reset to default if negative\\nor null)',\n    'alternatives': [\n      '@param maxNumIter maximum number of iterations in which checks are carried out (the number of iterations is reset to default if negative or null)',\n      '@param maxNumIter maximum number of iterations for check execution (the number of iterations is reset to default if negative or null)',\n      '@param maxNumIter maximum number of iterations to perform checks (the number of iterations is reset to default if negative or null)',\n      '@param maxNumIter greatest number of iterations in which checks are performed (the number of iterations is reset to default if negative or null)',\n      '@param maxNumIter greatest number of iterations for which checks are executed (the number of iterations is reset to default if negative or null)'\n    ]\n  },\n  {\n    'tag': '@param maxNumChecks maximal number of checks for each iteration\\n(the number of checks is reset to default if negative or null)',\n    'alternatives': [\n      '@param maxNumChecks maximum number of verifications per iteration (the number of checks is reset to default if negative or null)',\n      '@param maxNumChecks maximum number of validations for each iteration (the number of checks is reset to default if negative or null)',\n      '@param maxNumChecks maximum number of inspections per iteration (the number of checks is reset to default if negative or null)',\n      '@param maxNumChecks maximal number of verifications for each iteration (the number of checks is reset to default if negative or null)',\n      '@param maxNumChecks maximal number of validations per iteration (the number of checks is reset to default if negative or null)'\n    ]\n  },\n  {\n    'tag': '@param stepsizeReductionFactor stepsize reduction factor in case of\\nfailure (the factor is reset to default if lower than 0.0001 or\\ngreater than 0.9999)',\n    'alternatives': [\n      '@param stepsizeReductionFactor reduction factor for step size in case of failure (the factor is reset to default if lower than 0.0001 or greater than 0.9999)',\n      '@param stepsizeReductionFactor factor for decreasing step size in the event of failure (the factor is reset to default if lower than 0.0001 or greater than 0.9999)',\n      '@param stepsizeReductionFactor factor for reducing step size when encountering failure (the factor is reset to default if lower than 0.0001 or greater than 0.9999)',\n      '@param stepsizeReductionFactor factor for reducing step size in case of failure (the factor is reset to default if lower than 0.0001 or greater than 0.9999)',\n      '@param stepsizeReductionFactor reduction factor for decreasing step size in the event of failure (the factor is reset to default if lower than 0.0001 or greater than 0.9999)'\n    ]\n  },\n  {\n    'tag': '@param edge edge reaching the end vertex of the path element created.',\n    'alternatives': [\n      '@param edge edge leading to the end vertex of the created path element.',\n      '@param edge edge that reaches the end vertex of the created path element.',\n      '@param edge edge which arrives at the end vertex of the created path element.',\n      '@param edge edge that goes to the end vertex of the created path element.',\n      '@param edge edge that reaches the final vertex of the path element created.'\n    ]\n  },\n  {\n    'tag': '@param weight total cost of the created path element.',\n    'alternatives': [\n      '@param weight overall cost of the created path element.',\n      '@param weight total expense of the created path element.',\n      '@param weight total expenditure of the created path element.',\n      '@param weight total price of the created path element.',\n      '@param weight total expenditure of the path element created.'\n    ]\n  },\n  {\n    'tag': '@param vertex end vertex of the path element.',\n    'alternatives': [\n      '@param vertex final vertex of the path element.',\n      '@param vertex terminal vertex of the path element.',\n      '@param vertex ending vertex of the path element.',\n      '@param vertex last vertex of the path element.',\n      '@param vertex end point of the path element.'\n    ]\n  },\n  {\n    'tag': '@param admissibleHeuristic admissible heuristic',\n    'alternatives': [\n      '@param admissibleHeuristic permissible heuristic',\n      '@param admissibleHeuristic acceptable heuristic',\n      '@param admissibleHeuristic allowed heuristic',\n      '@param admissibleHeuristic admissible estimation',\n      '@param admissibleHeuristic heuristic that meets the requirements'\n    ]\n  },\n  {\n    'tag': '@param sourceVertex source vertex',\n    'alternatives': [\n      '@param sourceVertex starting vertex',\n      '@param sourceVertex initial vertex',\n      '@param sourceVertex origin vertex',\n      '@param sourceVertex beginning vertex',\n      '@param sourceVertex point of departure'\n    ]\n  },\n  {\n    'tag': '@param targetVertex target vertex',\n    'alternatives': [\n      '@param targetVertex final vertex',\n      '@param targetVertex destination vertex',\n      '@param targetVertex end vertex',\n      '@param targetVertex last vertex',\n      '@param targetVertex arrival vertex'\n    ]\n  },\n  {\n    'tag': '@param admissibleHeuristic admissible heuristic which estimates the\\ndistance from a node to the target node.',\n    'alternatives': [\n      '@param admissibleHeuristic heuristic that is admissible and provides an estimation of the distance from a node to the target node.',\n      '@param admissibleHeuristic admissible heuristic that estimates the distance from a node to the target node.',\n      '@param admissibleHeuristic admissible estimation that estimates the distance from a node to the target node.',\n      '@param admissibleHeuristic heuristic that satisfies the requirements and gives an estimation of the distance from a node to the target node.',\n      '@param admissibleHeuristic heuristic that meets the conditions and provides an estimation of the distance from a node to the target node.'\n    ]\n  },\n  {\n    'tag': '@return the shortest path from sourceVertex to targetVertex',\n    'alternatives': [\n      '@return the most concise route from the sourceVertex to the targetVertex',\n      '@return the shortest route from the sourceVertex to the targetVertex',\n      '@return the smallest path from the sourceVertex to the targetVertex',\n      '@return the briefest path from the sourceVertex to the targetVertex',\n      '@return the shortest path that connects sourceVertex and targetVertex'\n    ]\n  },\n  {\n    'tag': '@param startVertex starting vertex of the path',\n    'alternatives': [\n      '@param startVertex initial vertex of the path',\n      '@param startVertex origin vertex of the path',\n      '@param startVertex beginning vertex of the path',\n      '@param startVertex first vertex of the path',\n      '@param startVertex initial point of the path'\n    ]\n  }\n]"