"[\n  {\n    \"tag\": \"@throws OutOfRangeException if {@code i} or {@code j} is\\nout of range.\",\n    \"alternatives\": [\n      \"@throws OutOfRangeException if the value of {@code i} or {@code j} falls outside the valid range.\",\n      \"@throws OutOfRangeException if either {@code i} or {@code j} exceeds the allowed range.\",\n      \"@throws OutOfRangeException when the values of {@code i} or {@code j} are beyond the acceptable range.\",\n      \"@throws OutOfRangeException if the specified values of {@code i} or {@code j} lie outside the accepted range.\",\n      \"@throws OutOfRangeException if the provided values for {@code i} or {@code j} are out of bounds.\"\n    ]\n  },\n  {\n    \"tag\": \"@param row Row index.\",\n    \"alternatives\": [\n      \"@param row The index of the desired row.\",\n      \"@param row The position of the row in the dataset.\",\n      \"@param row The row number for which information is required.\",\n      \"@param row Specifies the index of the row in the matrix.\",\n      \"@param row Indicates the position of the row in the table.\"\n    ]\n  },\n  {\n    \"tag\": \"@param col Column index.\",\n    \"alternatives\": [\n      \"@param col The index of the desired column.\",\n      \"@param col The position of the column in the dataset.\",\n      \"@param col The column number for which information is required.\",\n      \"@param col Specifies the index of the column in the matrix.\",\n      \"@param col Indicates the position of the column in the table.\"\n    ]\n  },\n  {\n    \"tag\": \"@param alongRowDir Direction along the given {@code row} (i.e. an\\noffset will be added to the given <em>column</em> index.\",\n    \"alternatives\": [\n      \"@param alongRowDir The direction along the specified {@code row} (i.e. an offset will be applied to the provided <em>column</em> index.\",\n      \"@param alongRowDir Specifies the direction along the designated {@code row} (i.e. adding an offset to the given <em>column</em> index.\",\n      \"@param alongRowDir Indicates the direction along the provided {@code row} (i.e. a shift will be applied to the input <em>column</em> index.\",\n      \"@param alongRowDir Describes the movement along the given {@code row} (i.e. adding an offset to the existing <em>column</em> index.\",\n      \"@param alongRowDir Refers to the orientation along the given {@code row} (i.e. applying an offset to the specified <em>column</em> index.\"\n    ]\n  },\n  {\n    \"tag\": \"@param alongColDir Direction along the given {@code col} (i.e. an\\noffset will be added to the given <em>row</em> index.\",\n    \"alternatives\": [\n      \"@param alongColDir The direction along the specified {@code col} (i.e. an offset will be applied to the provided <em>row</em> index.\",\n      \"@param alongColDir Specifies the direction along the designated {@code col} (i.e. adding an offset to the given <em>row</em> index.\",\n      \"@param alongColDir Indicates the direction along the provided {@code col} (i.e. a shift will be applied to the input <em>row</em> index.\",\n      \"@param alongColDir Describes the movement along the given {@code col} (i.e. adding an offset to the existing <em>row</em> index.\",\n      \"@param alongColDir Refers to the orientation along the given {@code col} (i.e. applying an offset to the specified <em>row</em> index.\"\n    ]\n  },\n  {\n    \"tag\": \"@return the neuron at the requested location, or {@code null} if\\nthe location is not on the map.\",\n    \"alternatives\": [\n      \"@return the neuron situated at the specified location, or {@code null} if the location is not present on the map.\",\n      \"@return the neuron located at the given position, or {@code null} if the location is not within the boundaries of the map.\",\n      \"@return the neuron found at the requested coordinates, or {@code null} if the location does not exist on the map.\",\n      \"@return the neuron located at the indicated position, or {@code null} if the location is not part of the map.\",\n      \"@return the neuron identified by the given location, or {@code null} if the location is not included in the map.\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NumberIsTooSmallException if {@code numRows < 2} or\\n{@code numCols < 2}.\",\n    \"alternatives\": [\n      \"@throws NumberIsTooSmallException if the value of {@code numRows} is less than 2 or the value of {@code numCols} is less than 2.\",\n      \"@throws NumberIsTooSmallException if either {@code numRows} is less than 2 or {@code numCols} is less than 2.\",\n      \"@throws NumberIsTooSmallException when the size of either {@code numRows} or {@code numCols} is smaller than 2.\",\n      \"@throws NumberIsTooSmallException if the specified values of {@code numRows} or {@code numCols} do not meet the required condition.\",\n      \"@throws NumberIsTooSmallException if the provided values for {@code numRows} or {@code numCols} fall below the threshold.\"\n    ]\n  },\n  {\n    \"tag\": \"@param numRows Number of neurons in the first dimension.\",\n    \"alternatives\": [\n      \"@param numRows The total count of neurons in the initial dimension.\",\n      \"@param numRows The quantity of neurons in the primary dimension.\",\n      \"@param numRows The number of neurons along the first axis.\",\n      \"@param numRows Indicates the total number of neurons in the first dimension.\",\n      \"@param numRows Specifies the size of the first dimension in terms of neurons.\"\n    ]\n  },\n  {\n    \"tag\": \"@param wrapRowDim Whether to wrap the first dimension (i.e the first\\nand last neurons will be linked together).\",\n    \"alternatives\": [\n      \"@param wrapRowDim Specifies whether the first dimension should be wrapped (i.e., connecting the first and last neurons).\",\n      \"@param wrapRowDim Indicates whether to wrap the initial dimension (i.e., linking the first and last neurons).\",\n      \"@param wrapRowDim Determines if the primary dimension should be wrapped (i.e., connecting the first and last neurons).\",\n      \"@param wrapRowDim Defines whether the first dimension needs to be wrapped (i.e., joining the first and last neurons).\",\n      \"@param wrapRowDim Describes whether the initial dimension should be wrapped (i.e., linking the first and last neurons).\"\n    ]\n  },\n  {\n    \"tag\": \"@param numCols Number of neurons in the second dimension.\",\n    \"alternatives\": [\n      \"@param numCols The total count of neurons in the secondary dimension.\",\n      \"@param numCols The quantity of neurons in the secondary dimension.\",\n      \"@param numCols The number of neurons along the second axis.\",\n      \"@param numCols Indicates the total number of neurons in the second dimension.\",\n      \"@param numCols Specifies the size of the second dimension in terms of neurons.\"\n    ]\n  },\n  {\n    \"tag\": \"@param wrapColDim Whether to wrap the second dimension (i.e the first\\nand last neurons will be linked together).\",\n    \"alternatives\": [\n      \"@param wrapColDim Specifies whether the second dimension should be wrapped (i.e., connecting the first and last neurons).\",\n      \"@param wrapColDim Indicates whether to wrap the secondary dimension (i.e., linking the first and last neurons).\",\n      \"@param wrapColDim Determines if the second dimension should be wrapped (i.e., connecting the first and last neurons).\",\n      \"@param wrapColDim Defines whether the second dimension needs to be wrapped (i.e., joining the first and last neurons).\",\n      \"@param wrapColDim Describes whether the secondary dimension should be wrapped (i.e., linking the first and last neurons).\"\n    ]\n  },\n  {\n    \"tag\": \"@param neighbourhoodType Neighbourhood type.\",\n    \"alternatives\": [\n      \"@param neighbourhoodType The type of neighbourhood.\",\n      \"@param neighbourhoodType Specifies the type of neighbourhood.\",\n      \"@param neighbourhoodType Indicates the category of neighbourhood.\",\n      \"@param neighbourhoodType Describes the kind of neighbourhood.\",\n      \"@param neighbourhoodType Refers to the nature of the neighbourhood.\"\n    ]\n  },\n  {\n    \"tag\": \"@param featuresList Arrays that will initialize the features sets of\\nthe network's neurons.\",\n    \"alternatives\": [\n      \"@param featuresList Arrays that will be used to initialize the feature sets of the neurons in the network.\",\n      \"@param featuresList Arrays that are responsible for initializing the feature sets of the network's neurons.\",\n      \"@param featuresList Arrays that will set up the feature sets of the neurons in the network.\",\n      \"@param featuresList Arrays that define the initial feature sets of the neurons in the network.\",\n      \"@param featuresList Arrays that are used to populate the feature sets of the neurons in the network.\"\n    ]\n  }\n]"