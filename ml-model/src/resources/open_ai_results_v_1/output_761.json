"output=[\n  {\n    'tag': '@param axis axis around which to rotate',\n    'alternatives': [\n      '@param axis axis to rotate around',\n      '@param axis axis of rotation',\n      '@param axis axis on which the rotation is performed'\n    ]\n  },\n  {\n    'tag': '@param angle rotation angle.',\n    'alternatives': [\n      '@param angle angle of rotation.',\n      '@param angle angle to rotate by.',\n      '@param angle angle for the rotation.'\n    ]\n  },\n  {\n    'tag': '@throws MathIllegalArgumentException if the axis norm is zero',\n    'alternatives': [\n      '@throws MathIllegalArgumentException if the norm of the axis is zero',\n      '@throws MathIllegalArgumentException when the axis norm equals zero',\n      '@throws MathIllegalArgumentException if the axis magnitude is zero'\n    ]\n  },\n  {\n    'tag': '@param axis axis around which to rotate',\n    'alternatives': [\n      '@param axis axis to rotate around',\n      '@param axis axis of rotation',\n      '@param axis axis on which the rotation is performed'\n    ]\n  },\n  {\n    'tag': '@param angle rotation angle',\n    'alternatives': [\n      '@param angle angle of rotation',\n      '@param angle angle to rotate by',\n      '@param angle angle for the rotation'\n    ]\n  },\n  {\n    'tag': '@param convention convention to use for the semantics of the angle',\n    'alternatives': [\n      '@param convention convention for interpreting the angle',\n      '@param convention angle interpretation convention',\n      '@param convention semantic convention for the angle'\n    ]\n  },\n  {\n    'tag': '@throws MathIllegalArgumentException if the axis norm is zero',\n    'alternatives': [\n      '@throws MathIllegalArgumentException if the norm of the axis is zero',\n      '@throws MathIllegalArgumentException when the axis norm equals zero',\n      '@throws MathIllegalArgumentException if the axis magnitude is zero'\n    ]\n  },\n  {\n    'tag': '@param m rotation matrix',\n    'alternatives': [\n      '@param m matrix of rotation',\n      '@param m matrix to perform rotation',\n      '@param m matrix representing the rotation'\n    ]\n  },\n  {\n    'tag': '@param threshold convergence threshold for the iterative\\northogonality correction (convergence is reached when the\\ndifference between two steps of the Frobenius norm of the\\ncorrection is below this threshold)',\n    'alternatives': [\n      '@param threshold threshold value for the iterative orthogonal correction',\n      '@param threshold convergence threshold for the iterative orthogonal correction',\n      '@param threshold threshold for achieving convergence in the iterative orthogonal correction'\n    ]\n  },\n  {\n    'tag': '@throws NotARotationMatrixException if the matrix is not a 3X3\\nmatrix, or if it cannot be transformed into an orthogonal matrix\\nwith the given threshold, or if the determinant of the resulting\\northogonal matrix is negative',\n    'alternatives': [\n      '@throws NotARotationMatrixException if the matrix is not a 3X3\\nmatrix, or if it cannot be converted into an orthogonal matrix\\nusing the specified threshold, or if the determinant of the resulting\\northogonal matrix is negative',\n      '@throws NotARotationMatrixException if the matrix is not a 3X3\\nmatrix, or if it is unable to be transformed into an orthogonal matrix\\nwith the given threshold, or if the determinant of the resulting\\northogonal matrix is negative',\n      '@throws NotARotationMatrixException if the matrix is not a 3X3\\nmatrix, or if it fails to be transformed into an orthogonal matrix\\nwith the provided threshold, or if the determinant of the resulting\\northogonal matrix is negative'\n    ]\n  },\n  {\n    'tag': '@param u1 first vector of the origin pair',\n    'alternatives': [\n      '@param u1 first vector of the source pair',\n      '@param u1 first vector of the original pair',\n      '@param u1 first vector of the starting pair'\n    ]\n  },\n  {\n    'tag': '@param u2 second vector of the origin pair',\n    'alternatives': [\n      '@param u2 second vector of the source pair',\n      '@param u2 second vector of the original pair',\n      '@param u2 second vector of the starting pair'\n    ]\n  },\n  {\n    'tag': '@param v1 desired image of u1 by the rotation',\n    'alternatives': [\n      '@param v1 intended result of rotating u1',\n      '@param v1 expected outcome of rotating u1',\n      '@param v1 desired output from the rotation of u1'\n    ]\n  },\n  {\n    'tag': '@param v2 desired image of u2 by the rotation',\n    'alternatives': [\n      '@param v2 intended result of rotating u2',\n      '@param v2 expected outcome of rotating u2',\n      '@param v2 desired output from the rotation of u2'\n    ]\n  },\n  {\n    'tag': '@throws MathArithmeticException if the norm of one of the vectors is zero,\\nor if one of the pair is degenerated (i.e. the vectors of the pair are collinear)',\n    'alternatives': [\n      '@throws MathArithmeticException if the magnitude of one of the vectors is zero,\\nor if one of the pair is degenerate (i.e. the vectors of the pair are collinear)',\n      '@throws MathArithmeticException if the norm of one of the vectors is zero,\\nor if one of the pair is degenerate (i.e. the vectors of the pair are collinear)',\n      '@throws MathArithmeticException if the absolute value of one of the vectors is zero,\\nor if one of the pair is degenerate (i.e. the vectors of the pair are collinear)'\n    ]\n  },\n  {\n    'tag': '@param u origin vector',\n    'alternatives': [\n      '@param u starting vector',\n      '@param u source vector',\n      '@param u initial vector'\n    ]\n  },\n  {\n    'tag': '@param v desired image of u by the rotation',\n    'alternatives': [\n      '@param v intended result of rotating u',\n      '@param v expected outcome of rotating u',\n      '@param v desired output from the rotation of u'\n    ]\n  },\n  {\n    'tag': '@throws MathArithmeticException if the norm of one of the vectors is zero',\n    'alternatives': [\n      '@throws MathArithmeticException if the magnitude of one of the vectors is zero',\n      '@throws MathArithmeticException if the norm of one of the vectors is zero',\n      '@throws MathArithmeticException if the absolute value of one of the vectors is zero'\n    ]\n  },\n  {\n    'tag': '@param order order of rotations to use',\n    'alternatives': [\n      '@param order rotation order to apply',\n      '@param order sequence of rotations to perform',\n      '@param order rotation order for computation'\n    ]\n  },\n  {\n    'tag': '@param alpha1 angle of the first elementary rotation',\n    'alternatives': [\n      '@param alpha1 first elementary rotation angle',\n      '@param alpha1 angle for the first elementary rotation',\n      '@param alpha1 angle of the initial elementary rotation'\n    ]\n  },\n  {\n    'tag': '@param alpha2 angle of the second elementary rotation',\n    'alternatives': [\n      '@param alpha2 second elementary rotation angle',\n      '@param alpha2 angle for the second elementary rotation',\n      '@param alpha2 angle of the next elementary rotation'\n    ]\n  },\n  {\n    'tag': '@param alpha3 angle of the third elementary rotation',\n    'alternatives': [\n      '@param alpha3 third elementary rotation angle',\n      '@param alpha3 angle for the third elementary rotation',\n      '@param alpha3 angle of the final elementary rotation'\n    ]\n  },\n  {\n    'tag': '@param order order of rotations to compose, from left to right\\n(i.e. we will use {@code r1.compose(r2.compose(r3, convention), convention)})',\n    'alternatives': [\n      '@param order rotation order to compose, from left to right\\n(i.e. {@code r1.compose(r2.compose(r3, convention), convention)})',\n      '@param order sequence of rotations to combine, from left to right\\n(i.e. {@code r1.compose(r2.compose(r3, convention), convention)})',\n      '@param order order to perform the composition of rotations, from left to right\\n(i.e. {@code r1.compose(r2.compose(r3, convention), convention)})'\n    ]\n  },\n  {\n    'tag': '@param convention convention to use for the semantics of the angle',\n    'alternatives': [\n      '@param convention convention for interpreting the angle',\n      '@param convention angle interpretation convention',\n      '@param convention semantic convention for the angle'\n    ]\n  },\n  {\n    'tag': '@param alpha1 angle of the first elementary rotation',\n    'alternatives': [\n      '@param alpha1 first elementary rotation angle',\n      '@param alpha1 angle for the first elementary rotation',\n      '@param alpha1 angle of the initial elementary rotation'\n    ]\n  }\n]"