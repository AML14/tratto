"output=[\n  {\n    'tag': '@param wrapColDim Whether to wrap the second dimension (i.e the first\\nand last neurons will be linked together).',\n    'alternatives': [\n      '@param wrapColDim Whether to wrap the second dimension (i.e the first and last neurons will be connected together).',\n      '@param wrapColDim Indicate whether to wrap the second dimension (i.e the first and last neurons will be joined together).',\n      '@param wrapColDim Specify whether to wrap the second dimension (i.e the first and last neurons will be linked together).'\n    ]\n  },\n  {\n    'tag': '@param neighbourhoodType Neighbourhood type.',\n    'alternatives': [\n      '@param neighbourhoodType Type of neighbourhood.',\n      '@param neighbourhoodType Type of neighbouring.',\n      '@param neighbourhoodType Type of neighbour.'\n    ]\n  },\n  {\n    'tag': '@param net Underlying network.',\n    'alternatives': [\n      '@param net Network underlying.',\n      '@param net The network beneath.',\n      '@param net The network underneath.'\n    ]\n  },\n  {\n    'tag': '@param idGrid Neuron identifiers.',\n    'alternatives': [\n      '@param idGrid Identifiers of neurons.',\n      '@param idGrid Neuron IDs.',\n      '@param idGrid Identifiers for neurons.'\n    ]\n  },\n  {\n    'tag': '@throws NumberIsTooSmallException if the size of the {@code map}\\nis smaller than the number of {@link #SmoothedDataHistogram(int,DistanceMeasure)\\nsmoothing bins}.',\n    'alternatives': [\n      '@throws NumberIsTooSmallException if the size of the {@code map}\\nis less than the number of {@link #SmoothedDataHistogram(int,DistanceMeasure)\\nsmoothing bins}.',\n      '@throws NumberIsTooSmallException if the {@code map} size is smaller than the number of {@link #SmoothedDataHistogram(int,DistanceMeasure)\\nsmoothing bins}.',\n      '@throws NumberIsTooSmallException if the number of {@link #SmoothedDataHistogram(int,DistanceMeasure)\\nsmoothing bins} is greater than the size of the {@code map}.'\n    ]\n  },\n  {\n    'tag': '@param smoothingBins Number of bins.',\n    'alternatives': [\n      '@param smoothingBins Bins count.',\n      '@param smoothingBins Number of histogram bins.',\n      '@param smoothingBins Total number of bins.'\n    ]\n  },\n  {\n    'tag': '@param distance Distance.',\n    'alternatives': [\n      '@param distance Measure of distance.',\n      '@param distance Distance metric.',\n      '@param distance Measure of closeness.'\n    ]\n  },\n  {\n    'tag': '@param map Map.',\n    'alternatives': [\n      '@param map The map.',\n      '@param map The grid.',\n      '@param map The 2D structure.'\n    ]\n  },\n  {\n    'tag': '@return an image representing the individual distances.',\n    'alternatives': [\n      '@return an image that visualizes the individual distances.',\n      '@return an image illustrating the individual distances.',\n      '@return an image showing the individual distances.'\n    ]\n  },\n  {\n    'tag': '@return an image representing the average distances.',\n    'alternatives': [\n      '@return an image that represents the average distances.',\n      '@return an image illustrating the average distances.',\n      '@return an image showing the average distances.'\n    ]\n  },\n  {\n    'tag': '@param individualDistances If {@code true}, the 8 individual\\ninter-units distances will be {@link #computeImage(NeuronSquareMesh2D)\\ncomputed}.  They will be stored in additional pixels around each of\\nthe original units of the 2D-map.  The additional pixels that lie\\nalong a \"diagonal\" are shared by <em>two</em> pairs of units: their\\nvalue will be set to the average distance between the units belonging\\nto each of the pairs.  The value zero will be stored in the pixel\\ncorresponding to the location of a unit of the 2D-map.\\n<br>\\nIf {@code false}, only the average distance between a unit and all its\\nneighbours will be computed (and stored in the pixel corresponding to\\nthat unit of the 2D-map).  In that case, the number of neighbours taken\\ninto account depends on the network\\'s\\n{@link org.apache.commons.math3.ml.neuralnet.SquareNeighbourhood\\nneighbourhood type}.',\n    'alternatives': [\n      '@param individualDistances If {@code true}, the 8 individual\\ninter-unit distances will be {@link #computeImage(NeuronSquareMesh2D)\\ncomputed}.  These distances will be stored in extra pixels around each of\\nthe original units of the 2D-map.  The additional pixels along a \"diagonal\"\\nare shared by two unit pairs: their value will represent the average distance\\nbetween the units belonging to each of the pairs.  A pixel corresponding to\\nthe location of a unit in the 2D-map will contain a zero value.\\n<br>\\nIf {@code false}, only the average distance between a unit and all its\\nneighbours will be computed (and stored in the pixel corresponding to\\nthat unit of the 2D-map).  In this case, the number of neighbours taken\\ninto account depends on the network\\'s\\n{@link org.apache.commons.math3.ml.neuralnet.SquareNeighbourhood\\nneighbourhood type}.',\n      '@param individualDistances If {@code true}, the 8 individual\\ninter-unit distances will be {@link #computeImage(NeuronSquareMesh2D)\\ncomputed}.  They will be saved in extra pixels surrounding each of the\\noriginal units of the 2D-map.  The additional pixels that lie along a\\ndiagonal are shared by two pairs of units: their value will reflect the\\naverage distance between the units belonging to each of the pairs.  The\\ncorresponding pixel for a unit of the 2D-map will hold a value of zero.\\n<br>\\nIf {@code false}, only the average distance between a unit and all its\\nneighbours will be computed (and saved in the pixel that corresponds to\\nthat unit of the 2D-map).  In this case, the number of neighbours to\\nconsider depends on the network\\'s\\n{@link org.apache.commons.math3.ml.neuralnet.SquareNeighbourhood\\nneighbourhood type}.',\n      '@param individualDistances If {@code true}, the 8 individual\\ninter-unit distances will be {@link #computeImage(NeuronSquareMesh2D)\\ncomputed}.  They will be stored in additional pixels around each of\\nthe original units of the 2D-map.  The additional pixels that lie\\nalong a \"diagonal\" are shared by two pairs of units: their value will\\nbe set to the average distance between the units belonging to each of\\nthe pairs.  The value zero will be stored in the pixel corresponding to\\nthe location of a unit of the 2D-map.\\n<br>\\nIf {@code false}, only the average distance between a unit and all its\\nneighbours will be computed and stored in the pixel corresponding to\\nthat unit of the 2D-map.  The number of neighbours to consider depends\\non the network\\'s\\n{@link org.apache.commons.math3.ml.neuralnet.SquareNeighbourhood\\nneighbourhood type}.',\n      '@param individualDistances If {@code true}, the 8 individual\\ninter-unit distances will be {@link #computeImage(NeuronSquareMesh2D)\\ncomputed}.  These distances will be saved in extra pixels surrounding each of\\nthe original units of the 2D-map.  The additional pixels along a \"diagonal\"\\nare shared by two unit pairs: their value will be determined by the average\\ndistance between the units belonging to each of the pairs.  A pixel corresponding\\nto the location of a unit in the 2D-map will have the value of zero.\\n<br>\\nIf {@code false}, only the average distance between a unit and all its\\nneighbours will be computed and saved in the pixel that corresponds to\\nthat unit of the 2D-map.  The number of neighbours considered depends on\\nthe network\\'s\\n{@link org.apache.commons.math3.ml.neuralnet.SquareNeighbourhood\\nneighbourhood type}.'\n    ]\n  },\n  {\n    'tag': '@param distance Distance.',\n    'alternatives': [\n      '@param distance Measure of proximity.',\n      '@param distance Distance measure.',\n      '@param distance Measure of remoteness.'\n    ]\n  },\n  {\n    'tag': '@param map Map.',\n    'alternatives': [\n      '@param map The map structure.',\n      '@param map The grid structure.',\n      '@param map The 2D map.'\n    ]\n  },\n  {\n    'tag': '@param data Data.',\n    'alternatives': [\n      '@param data Input data.',\n      '@param data Dataset.',\n      '@param data Information.'\n    ]\n  },\n  {\n    'tag': '@return a 2D-array (in row major order) representing the metrics.',\n    'alternatives': [\n      '@return a 2D-array (in row major order) that represents the metrics.',\n      '@return a 2D-array (in row major order) that illustrates the metrics.',\n      '@return a 2D-array (in row major order) that shows the metrics.'\n    ]\n  },\n  {\n    'tag': '@param map Map.',\n    'alternatives': [\n      '@param map The map.',\n      '@param map The grid.',\n      '@param map The 2D structure.'\n    ]\n  },\n  {\n    'tag': '@return a 2D-array (in row major order) representing the property.',\n    'alternatives': [\n      '@return a 2D-array (in row major order) that represents the property.',\n      '@return a 2D-array (in row major order) that illustrates the property.',\n      '@return a 2D-array (in row major order) that shows the property.'\n    ]\n  },\n  {\n    'tag': '@param n Neuron.',\n    'alternatives': [\n      '@param n The neuron.',\n      '@param n The unit.',\n      '@param n The element.'\n    ]\n  },\n  {\n    'tag': '@return the (row, column) coordinates of {@code n}, or {@code null}\\nif no such neuron belongs to the {@link #LocationFinder(NeuronSquareMesh2D)\\nmap used to build this instance}.',\n    'alternatives': [\n      '@return the (row, column) coordinates of {@code n}, or {@code null}\\nif such a neuron does not exist in the {@link #LocationFinder(NeuronSquareMesh2D)\\nmap utilized for constructing this instance}.',\n      '@return the (row, column) coordinates of {@code n}, or {@code null}\\nif there is no such neuron in the {@link #LocationFinder(NeuronSquareMesh2D)\\nmap that was used to create this instance}.',\n      '@return the (row, column) coordinates of {@code n}, or {@code null}\\nif there is no neuron belonging to the {@link #LocationFinder(NeuronSquareMesh2D)\\nmap that was used to create this instance}.'\n    ]\n  },\n  {\n    'tag': '@param map Map.',\n    'alternatives': [\n      '@param map The map.',\n      '@param map The grid.',\n      '@param map The 2D structure.'\n    ]\n  },\n  {\n    'tag': '@throws MathIllegalStateException if the network contains non-unique\\nidentifiers.  This indicates an inconsistent state due to a bug in\\nthe construction code of the underlying\\n{@link org.apache.commons.math3.ml.neuralnet.Network network}.',\n    'alternatives': [\n      '@throws MathIllegalStateException if the network includes non-unique\\nidentifiers.  This points to an inconsistent state caused by a bug in\\nthe construction code of the underlying\\n{@link org.apache.commons.math3.ml.neuralnet.Network network}.',\n      '@throws MathIllegalStateException if the network has non-unique\\nidentifiers.  This indicates an inconsistent state resulting from a bug in\\nthe construction code of the underlying\\n{@link org.apache.commons.math3.ml.neuralnet.Network network}.',\n      '@throws MathIllegalStateException if the network possesses non-unique\\nidentifiers.  This signifies an inconsistent state due to a bug in\\nthe construction code of the underlying\\n{@link org.apache.commons.math3.ml.neuralnet.Network network}.'\n    ]\n  },\n  {\n    'tag': '@param normalizeCount Whether to compute relative bin counts.\\nIf {@code true}, the data count in each bin will be divided by the total\\n"