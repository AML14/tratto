"output = [\n  {\n    'tag': '@param filename The file that will contain the saved graph (or URL).',\n    'alternatives': [\n      '@param filename The file that will hold the saved graph (or URL).',\n      '@param filename The file that will store the saved graph (or URL).',\n      '@param filename The file that will contain the graph that is saved (or URL).',\n      '@param filename The file that will keep the saved graph (or URL).',\n      '@param filename The file that will possess the saved graph (or URL).'\n    ]\n  },\n  {\n    'tag': '@throws IOException If an input/output error occurs during the graph writing.',\n    'alternatives': [\n      '@throws IOException In case there is an input/output error during the graph writing.',\n      '@throws IOException When an input/output error happens while writing the graph.',\n      '@throws IOException If there is an input/output error while performing the graph writing.',\n      '@throws IOException If an error occurs during the graph writing process.',\n      '@throws IOException If there is an input/output error during the writing of the graph.'\n    ]\n  },\n  {\n    'tag': '@param output The output format to use.',\n    'alternatives': [\n      '@param output The format of output to be utilized.',\n      '@param output The format of output that will be employed.',\n      '@param output The format of output to utilize.',\n      '@param output The format of output that should be used.',\n      '@param output The format of output to be utilized.'\n    ]\n  },\n  {\n    'tag': '@return a graph viewer that allows to command the viewer (it often run in\\n        another thread).',\n    'alternatives': [\n      '@return a graph viewer that enables commanding of the viewer (typically executed in\\n        a separate thread).',\n      '@return a graph viewer that permits controlling the viewer (usually runs in\\n        a separate thread).',\n      '@return a graph viewer that provides the ability to control the viewer (often running in\\n        a separate thread).',\n      '@return a graph viewer that grants the ability to control the viewer (usually running in\\n        a separate thread).',\n      '@return a graph viewer that facilitates commanding the viewer (often executed in\\n        another thread).'\n    ]\n  },\n  {\n    'tag': '@param autoLayout If true a layout algorithm is launched in its own thread to\\n           compute best node positions.',\n    'alternatives': [\n      '@param autoLayout If set to true, a layout algorithm is started in a separate thread for\\n           computing optimal node positions.',\n      '@param autoLayout If true, a layout algorithm is triggered in a separate thread to\\n           calculate the most suitable node positions.',\n      '@param autoLayout If true, a layout algorithm is initiated in a separate thread to\\n           determine the optimal node positions.',\n      '@param autoLayout If set to true, a layout algorithm is activated in its own thread to\\n           generate the best node positions.',\n      '@param autoLayout When set to true, a layout algorithm is started in its own thread for\\n           computing the best positions for the nodes.'\n    ]\n  },\n  {\n    'tag': '@param index Index of the node to find.',\n    'alternatives': [\n      '@param index The index of the node to locate.',\n      '@param index The index of the node to search for.',\n      '@param index The index of the node to retrieve.',\n      '@param index The index of the node to locate.',\n      '@param index The index identifying the node to find.'\n    ]\n  },\n  {\n    'tag': '@return The node with the given index',\n    'alternatives': [\n      '@return The node corresponding to the provided index.',\n      '@return The node associated with the given index.',\n      '@return The node identified by the provided index.',\n      '@return The node that matches the given index.',\n      '@return The node that corresponds to the given index.'\n    ]\n  },\n  {\n    'tag': '@throws IndexOutOfBoundsException If the index is negative or greater than {@code\\n            getNodeCount() - 1}.',\n    'alternatives': [\n      '@throws IndexOutOfBoundsException If the index is less than 0 or exceeds {@code\\n            getNodeCount() - 1}.',\n      '@throws IndexOutOfBoundsException If the index is negative or exceeds the limit of {@code\\n            getNodeCount() - 1}.',\n      '@throws IndexOutOfBoundsException If the index is smaller than 0 or larger than {@code\\n            getNodeCount() - 1}.',\n      '@throws IndexOutOfBoundsException If the index is negative or exceeds {@code\\n            getNodeCount() - 1}.',\n      '@throws IndexOutOfBoundsException If the index is less than 0 or greater than the maximum value of {@code\\n            getNodeCount() - 1}.'\n    ]\n  },\n  {\n    'tag': '@param index The index of the edge to find.',\n    'alternatives': [\n      '@param index The index of the edge to locate.',\n      '@param index The index of the edge to search for.',\n      '@param index The index of the edge to retrieve.',\n      '@param index The index of the edge to find.',\n      '@param index The index identifying the edge to find.'\n    ]\n  },\n  {\n    'tag': '@return The edge with the given index',\n    'alternatives': [\n      '@return The edge corresponding to the provided index.',\n      '@return The edge associated with the given index.',\n      '@return The edge identified by the provided index.',\n      '@return The edge that matches the given index.',\n      '@return The edge that corresponds to the given index.'\n    ]\n  },\n  {\n    'tag': '@throws IndexOutOfBoundsException if the index is less than 0 or greater than {@code\\n            getNodeCount() - 1}.',\n    'alternatives': [\n      '@throws IndexOutOfBoundsException when the index is negative or exceeds the limit of {@code\\n            getNodeCount() - 1}.',\n      '@throws IndexOutOfBoundsException if the index is smaller than 0 or larger than {@code\\n            getNodeCount() - 1}.',\n      '@throws IndexOutOfBoundsException in case the index is negative or exceeds {@code\\n            getNodeCount() - 1}.',\n      '@throws IndexOutOfBoundsException if the index is less than 0 or greater than {@code\\n            getNodeCount() - 1}.',\n      '@throws IndexOutOfBoundsException when the index falls below 0 or goes beyond the maximum value of {@code\\n            getNodeCount() - 1}.'\n    ]\n  },\n  {\n    'tag': '@param id Unique and arbitrary string identifying the edge.',\n    'alternatives': [\n      '@param id Unique and random string that identifies the edge.',\n      '@param id Unique and arbitrary string that serves as an identifier for the edge.',\n      '@param id Unique and arbitrary string that is used to identify the edge.',\n      '@param id Unique and arbitrary string that uniquely identifies the edge.',\n      '@param id Unique and arbitrary string that acts as the identifier for the edge.'\n    ]\n  },\n  {\n    'tag': '@param index1 The first node index',\n    'alternatives': [\n      '@param index1 The index of the first node',\n      '@param index1 The index assigned to the first node',\n      '@param index1 The index representing the first node',\n      '@param index1 The index associated with the first node',\n      '@param index1 The index that belongs to the first node'\n    ]\n  },\n  {\n    'tag': '@param index2 The second node index',\n    'alternatives': [\n      '@param index2 The index of the second node',\n      '@param index2 The index assigned to the second node',\n      '@param index2 The index representing the second node',\n      '@param index2 The index associated with the second node',\n      '@param index2 The index that belongs to the second node'\n    ]\n  },\n  {\n    'tag': '@return The newly created edge, an existing edge or {@code null}',\n    'alternatives': [\n      '@return The newly generated edge, an existing edge, or {@code null}',\n      '@return The edge that was just created, an existing edge, or {@code null}',\n      '@return The edge that is newly created, an existing edge, or {@code null}',\n      '@return The edge that has been newly created, an existing edge, or {@code null}',\n      '@return The edge that was recently created, an existing edge, or {@code null}'\n    ]\n  },\n  {\n    'tag': '@throws IndexOutOfBoundsException If node indices are negative or greater than {@code\\n            getNodeCount() - 1}',\n    'alternatives': [\n      '@throws IndexOutOfBoundsException If the node indices are less than 0 or exceed {@code\\n            getNodeCount() - 1}',\n      '@throws IndexOutOfBoundsException If the node indices are negative or exceed the limit of {@code\\n            getNodeCount() - 1}',\n      '@throws IndexOutOfBoundsException If the node indices are smaller than 0 or larger than {@code\\n            getNodeCount() - 1}',\n      '@throws IndexOutOfBoundsException If the node indices are negative or exceed {@code\\n            getNodeCount() - 1}',\n      '@throws IndexOutOfBoundsException If the node indices are less than 0 or greater than the maximum value of {@code\\n            getNodeCount() - 1}'\n    ]\n  },\n  {\n    'tag': '@throws IdAlreadyInUseException If an edge with the same id already exists and strict\\n            checking is enabled.',\n    'alternatives': [\n      '@throws IdAlreadyInUseException In case an edge with the same id already exists and strict\\n            checking is enabled.',\n      '@throws IdAlreadyInUseException If there is already an edge with the same id and strict\\n            checking is enabled.',\n      '@throws IdAlreadyInUseException When an edge with the same id already exists and strict\\n            checking is enabled.',\n      '@throws IdAlreadyInUseException If strict checking is enabled and an edge with the same id\\n            already exists.',\n      '@throws IdAlreadyInUseException In case strict checking is enabled and there is an existing edge\\n            with the same id.'\n    ]\n  },\n  {\n    'tag': '@throws EdgeRejectedException If strict checking is enabled and the edge is not accepted.',\n    'alternatives': [\n      '@throws EdgeRejectedException In case the edge is not accepted when strict checking is enabled.',\n      '@throws EdgeRejectedException If the edge is not considered valid when strict checking is enabled.',\n      '@throws EdgeRejectedException When strict checking is enabled and the edge is not accepted.',\n      '@throws EdgeRejectedException If the edge is not approved when strict checking is enabled.',\n      '@throws EdgeRejectedException In case strict checking is enabled and the edge is not accepted.'\n    ]\n  },\n  {\n    'tag': '@param toIndex The first node index',\n    'alternatives': [\n      '@param toIndex The index of the first node',\n      '@param toIndex The index assigned to the first node',\n      '@param toIndex The index representing the first node',\n      '@param toIndex The index associated with the first node',\n      '@param toIndex The index that belongs to the first node'\n    ]\n  },\n  {\n    'tag': '@param fromIndex The second node index',\n    'alternatives': [\n      '@param fromIndex The index of the second node',\n      '@param fromIndex The index assigned to the second node',\n      '@param fromIndex The index representing the second node',\n      '@param fromIndex The index associated with the second node',\n      '@param fromIndex The index that belongs to the second node'\n    ]\n  },\n  {\n    'tag': '@param directed Is the edge directed?',\n    'alternatives': [\n      '@param directed Specifies whether the edge is directed or not.',\n      '@param directed Indicates if the edge is directed.',\n      '@param directed Determines if the edge is directed.',\n      '@param directed Describes whether the edge is directed or not.',\n      '@param directed Specifies if the edge is directed or not.'\n    ]\n  }\n]"