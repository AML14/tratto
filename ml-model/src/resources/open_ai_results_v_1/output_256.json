"output = [\n  {\n    'tag': '@return a <code>Collection</code> containing all the elements of <code>collection</code> except\\nany elements that also occur in <code>remove</code>.',\n    'alternatives': [\n      '@return a <code>Collection</code> that includes all the elements from <code>collection</code>, except for any elements that are also present in <code>remove</code>.',\n      '@return a <code>Collection</code> that contains all elements from <code>collection</code> but does not include those that are also present in <code>remove</code>.',\n      '@return a <code>Collection</code> that holds all the elements of <code>collection</code> except those that are found in <code>remove</code>.',\n    ]\n  },\n  {\n    'tag': '@param <E> the type of object the {@link Collection} contains',\n    'alternatives': [\n      '@param <E> the object type contained in {@link Collection}',\n      '@param <E> the type of objects that the {@link Collection} holds',\n      '@param <E> the object type stored in the {@link Collection}',\n    ]\n  },\n  {\n    'tag': '@param collection the collection from which items are removed (in the returned collection)',\n    'alternatives': [\n      '@param collection the source collection from which items are extracted (in the resulting collection)',\n      '@param collection the collection where items are taken out (to form the returned collection)',\n      '@param collection the original collection from which items are eliminated (in the resulting collection)',\n    ]\n  },\n  {\n    'tag': '@param remove the items to be removed from the returned collection',\n    'alternatives': [\n      '@param remove the elements that will be excluded in the returned collection',\n      '@param remove the elements to be taken out from the resulting collection',\n      '@param remove the items that should not appear in the returned collection',\n    ]\n  },\n  {\n    'tag': '@param equator the Equator used for testing equality',\n    'alternatives': [\n      '@param equator the Equator employed to check for equality',\n      '@param equator the Equator utilized for equality testing',\n      '@param equator the Equator that is applied to determine equality',\n    ]\n  },\n  {\n    'tag': '@return a <code>Collection</code> containing all the elements of <code>collection</code>\\nexcept any element that if equal according to the <code>equator</code>',\n    'alternatives': [\n      '@return a <code>Collection</code> that consists of all elements from <code>collection</code> except for any element that is equal according to the <code>equator</code>',\n      '@return a <code>Collection</code> that contains all elements of <code>collection</code> except those that are equal based on the <code>equator</code>',\n      '@return a <code>Collection</code> that holds all the elements from <code>collection</code> excluding any element that is equal according to the <code>equator</code>',\n    ]\n  },\n  {\n    'tag': '@param <C> the type of object the {@link Collection} contains',\n    'alternatives': [\n      '@param <C> the object type held by the {@link Collection}',\n      '@param <C> the type of objects stored in the {@link Collection}',\n      '@param <C> the object type contained in the {@link Collection}',\n    ]\n  },\n  {\n    'tag': '@return a synchronized collection backed by the given collection',\n    'alternatives': [\n      '@return a thread-safe collection supported by the specified collection',\n      '@return a synchronized collection that uses the provided collection as its backing',\n      '@return a collection that is synchronized and uses the given collection as its basis',\n    ]\n  },\n  {\n    'tag': '@param <C> the type of object the {@link Collection} contains',\n    'alternatives': [\n      '@param <C> the object type contained in the {@link Collection}',\n      '@param <C> the type of objects held in the {@link Collection}',\n      '@param <C> the object type that the {@link Collection} stores',\n    ]\n  },\n  {\n    'tag': '@return an unmodifiable collection backed by the given collection',\n    'alternatives': [\n      '@return a collection that cannot be modified and is based on the specified collection',\n      '@return an immutable collection that uses the provided collection as its backing',\n      '@return a collection that is unmodifiable and uses the given collection as its basis',\n    ]\n  },\n  {\n    'tag': '@param <C> the type of objects in the Collection.',\n    'alternatives': [\n      '@param <C> the object type contained in the Collection.',\n      '@param <C> the type of elements in the Collection.',\n      '@param <C> the object class in the Collection.',\n    ]\n  },\n  {\n    'tag': '@return a predicated collection backed by the given collection',\n    'alternatives': [\n      '@return a collection that is restricted by a condition and is based on the provided collection',\n      '@return a collection that is controlled by a condition and uses the given collection as its backing',\n      '@return a collection that is subject to a predicate and is backed by the given collection',\n    ]\n  },\n  {\n    'tag': '@param <E> the type of object the {@link Collection} contains',\n    'alternatives': [\n      '@param <E> the object type stored in the {@link Collection}',\n      '@param <E> the type of objects held in the {@link Collection}',\n      '@param <E> the class of objects contained in the {@link Collection}',\n    ]\n  },\n  {\n    'tag': '@return a transformed collection backed by the given collection',\n    'alternatives': [\n      '@return a collection that is modified based on a transformation and is supported by the provided collection',\n      '@return a collection that is changed according to a transformation and uses the given collection as its backing',\n      '@return a collection that is converted through a transformation and is backed by the given collection',\n    ]\n  },\n  {\n    'tag': '@param <E> collection type',\n    'alternatives': [\n      '@param <E> the type of the collection',\n      '@param <E> the class of the collection',\n      '@param <E> the object type of the collection',\n    ]\n  },\n  {\n    'tag': '@param collection to read',\n    'alternatives': [\n      '@param collection for reading',\n      '@param collection to be read',\n      '@param collection that is being read',\n    ]\n  },\n  {\n    'tag': '@return sole member of collection',\n    'alternatives': [\n      '@return the single element of the collection',\n      '@return the only member of the collection',\n      '@return the one and only item of the collection',\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if collection is empty or contains more than one element',\n    'alternatives': [\n      '@throws IllegalArgumentException when the collection is empty or has more than one element',\n      '@throws IllegalArgumentException if the collection is empty or has greater than one element',\n      '@throws IllegalArgumentException if the collection has zero or multiple elements',\n    ]\n  },\n  {\n    'tag': '@param key the key to retrieve',\n    'alternatives': [\n      '@param key the key that is used for retrieval',\n      '@param key the key to be fetched',\n      '@param key the key that is used to obtain',\n    ]\n  },\n  {\n    'tag': '@return the {@code List} of values, implementations should return an\\n  empty {@code List} for no mapping',\n    'alternatives': [\n      '@return the list of values. Implementations should return an empty list if there is no mapping.',\n      '@return the values as a {@code List}. If there is no mapping, implementations are expected to return an empty {@code List}.',\n      '@return the list containing the values. If there is no mapping, implementations should return an empty list.',\n    ]\n  },\n  {\n    'tag': '@param key the key to remove values from',\n    'alternatives': [\n      '@param key the key from which to eliminate values',\n      '@param key the key for removing values',\n      '@param key the key used to delete values',\n    ]\n  },\n  {\n    'tag': '@return the {@code List} of values removed, implementations\\n  typically return an empty, unmodifiable {@code List} for no mapping found',\n    'alternatives': [\n      '@return the list of values that were removed. In case of no mapping found, implementations usually return an empty and unmodifiable list.',\n      '@return the list containing the deleted values. For situations where no mapping is found, implementations generally return an empty and unmodifiable list.',\n      '@return the list of values that were taken out. Implementations usually return an empty and unmodifiable list if no mapping is found.',\n    ]\n  },\n  {\n    'tag': '@throws UnsupportedOperationException if the map is unmodifiable',\n    'alternatives': [\n      '@throws UnsupportedOperationException if the map cannot be modified',\n      '@throws UnsupportedOperationException if modifying the map is not supported',\n      '@throws UnsupportedOperationException when attempting to modify an unmodifiable map',\n    ]\n  },\n  {\n    'tag': '@return the decorated map',\n    'alternatives': [\n      '@return the map that has been decorated',\n      '@return the map after decoration',\n      '@return the map with decoration',\n    ]\n  },\n  {\n    'tag': '@return MapIterator<K, V>',\n    'alternatives': [\n      '@return an iterator for the map entries',\n      '@return a MapIterator for iterating through the map',\n      '@return a MapIterator of type <K, V>',\n    ]\n  }\n]"