"output = [\n  {\n    'tag': '@param columns number of columns (may be negative to build partial\\narrays in the same way <code>new Field[rows][]</code> works)',\n    'alternatives': [\n      '@param columns number of columns (might be negative to construct partial\\narrays using the same approach <code>new Field[rows][]</code> works)',\n      '@param columns number of columns (negative values allowed to create partial\\narrays similar to <code>new Field[rows][]</code>)',\n      '@param columns number of columns (can be negative to generate partial\\narrays in a similar way to <code>new Field[rows][]</code>)'\n    ]\n  },\n  {\n    'tag': '@return a new array',\n    'alternatives': [\n      '@return a fresh array',\n      '@return an array that is new',\n      '@return a newly created array'\n    ]\n  },\n  {\n    'tag': '@param x First sequence.\\nTypically, this sequence will represent an input signal to a system.',\n    'alternatives': [\n      '@param x Initial sequence.\\nTypically, this sequence signifies an input signal to a system.',\n      '@param x First sequence.\\nUsually, this sequence represents an input signal for a system.',\n      '@param x First sequence.\\nGenerally, this sequence denotes an input signal for a system.'\n    ]\n  },\n  {\n    'tag': '@param h Second sequence.\\nTypically, this sequence will represent the impulse response of the system.',\n    'alternatives': [\n      '@param h Another sequence.\\nTypically, this sequence signifies the impulse response of the system.',\n      '@param h Second sequence.\\nUsually, this sequence represents the impulse response of a system.',\n      '@param h Second sequence.\\nGenerally, this sequence denotes the impulse response of the system.'\n    ]\n  },\n  {\n    'tag': \"@return the convolution of {@code x} and {@code h}.\\nThis array's length will be {@code x.length + h.length - 1}.\",\n    'alternatives': [\n      '@return the convolution of {@code x} and {@code h}.\\nThe resulting array will have a length of {@code x.length + h.length - 1}.',\n      '@return the convolution of {@code x} and {@code h}.\\nThe length of the array will be {@code x.length + h.length - 1}.',\n      '@return the convolution of {@code x} and {@code h}.\\nThe array will have a length of {@code x.length + h.length - 1}.'\n    ]\n  },\n  {\n    'tag': '@param list Array whose entries will be shuffled (in-place).',\n    'alternatives': [\n      '@param list Array to be shuffled (in-place).',\n      '@param list Array that will be shuffled (in-place).',\n      '@param list Array of elements to shuffle (in-place).'\n    ]\n  },\n  {\n    'tag': '@param start Index at which shuffling begins.',\n    'alternatives': [\n      '@param start Starting index for shuffling.',\n      '@param start Index where shuffling starts.',\n      '@param start Beginning index for shuffling.'\n    ]\n  },\n  {\n    'tag': '@param pos Shuffling is performed for index positions between\\n{@code start} and either the end (if {@link Position#TAIL})\\nor the beginning (if {@link Position#HEAD}) of the array.',\n    'alternatives': [\n      '@param pos Shuffling is done for index positions ranging from\\n{@code start} to either the end (if {@link Position#TAIL})\\nor the beginning (if {@link Position#HEAD}) of the array.',\n      '@param pos Shuffling is carried out for index positions between\\n{@code start} and either the end (if {@link Position#TAIL})\\nor the beginning (if {@link Position#HEAD}) of the array.',\n      '@param pos Shuffling occurs for index positions from\\n{@code start} to either the end (if {@link Position#TAIL})\\nor the beginning (if {@link Position#HEAD}) of the array.'\n    ]\n  },\n  {\n    'tag': '@param list Array whose entries will be shuffled (in-place).',\n    'alternatives': [\n      '@param list Array to be shuffled (in-place).',\n      '@param list Array that will be shuffled (in-place).',\n      '@param list Array of elements to shuffle (in-place).'\n    ]\n  },\n  {\n    'tag': '@param start Index at which shuffling begins.',\n    'alternatives': [\n      '@param start Starting index for shuffling.',\n      '@param start Index where shuffling starts.',\n      '@param start Beginning index for shuffling.'\n    ]\n  },\n  {\n    'tag': '@param pos Shuffling is performed for index positions between\\n{@code start} and either the end (if {@link Position#TAIL})\\nor the beginning (if {@link Position#HEAD}) of the array.',\n    'alternatives': [\n      '@param pos Shuffling is done for index positions ranging from\\n{@code start} to either the end (if {@link Position#TAIL})\\nor the beginning (if {@link Position#HEAD}) of the array.',\n      '@param pos Shuffling is carried out for index positions between\\n{@code start} and either the end (if {@link Position#TAIL})\\nor the beginning (if {@link Position#HEAD}) of the array.',\n      '@param pos Shuffling occurs for index positions from\\n{@code start} to either the end (if {@link Position#TAIL})\\nor the beginning (if {@link Position#HEAD}) of the array.'\n    ]\n  },\n  {\n    'tag': '@param rng Random number generator.',\n    'alternatives': [\n      '@param rng Random number generator.',\n      '@param rng Generator of random numbers.',\n      '@param rng Object to generate random numbers.'\n    ]\n  },\n  {\n    'tag': '@param list Array whose entries will be shuffled (in-place).',\n    'alternatives': [\n      '@param list Array to be shuffled (in-place).',\n      '@param list Array that will be shuffled (in-place).',\n      '@param list Array of elements to shuffle (in-place).'\n    ]\n  },\n  {\n    'tag': '@param rng Random number generator.',\n    'alternatives': [\n      '@param rng Random number generator.',\n      '@param rng Generator of random numbers.',\n      '@param rng Object to generate random numbers.'\n    ]\n  },\n  {\n    'tag': '@param list Array whose entries will be shuffled (in-place).',\n    'alternatives': [\n      '@param list Array to be shuffled (in-place).',\n      '@param list Array that will be shuffled (in-place).',\n      '@param list Array of elements to shuffle (in-place).'\n    ]\n  },\n  {\n    'tag': '@param n Natural number.',\n    'alternatives': [\n      '@param n Positive integer.',\n      '@param n Integer greater than zero.',\n      '@param n Non-negative whole number.'\n    ]\n  },\n  {\n    'tag': '@return an array whose entries are the numbers 0, 1, ..., {@code n}-1.\\nIf {@code n == 0}, the returned array is empty.',\n    'alternatives': [\n      '@return an array containing the numbers 0, 1, ..., {@code n}-1.\\nIf {@code n == 0}, the array returned will be empty.',\n      '@return an array that holds the numbers 0, 1, ..., {@code n}-1.\\nIf {@code n == 0}, the resulting array will be empty.',\n      '@return an array with the numbers 0, 1, ..., {@code n}-1.\\nIf {@code n == 0}, the array returned will be empty.'\n    ]\n  },\n  {\n    'tag': '@param size Natural number.',\n    'alternatives': [\n      '@param size Positive integer.',\n      '@param size Integer greater than zero.',\n      '@param size Non-negative whole number.'\n    ]\n  },\n  {\n    'tag': '@param start Natural number.',\n    'alternatives': [\n      '@param start Positive integer.',\n      '@param start Integer greater than zero.',\n      '@param start Non-negative whole number.'\n    ]\n  },\n  {\n    'tag': '@param stride Natural number.',\n    'alternatives': [\n      '@param stride Positive integer.',\n      '@param stride Integer greater than zero.',\n      '@param stride Non-negative whole number.'\n    ]\n  },\n  {\n    'tag': '@return an array whose entries are the numbers\\n{@code start, start + stride, ..., start + (size - 1) * stride}.\\nIf {@code size == 0}, the returned array is empty.',\n    'alternatives': [\n      '@return an array containing the numbers\\n{@code start, start + stride, ..., start + (size - 1) * stride}.\\nIf {@code size == 0}, the resulting array will be empty.',\n      '@return an array that holds the numbers\\n{@code start, start + stride, ..., start + (size - 1) * stride}.\\nIf {@code size == 0}, the array returned will be empty.',\n      '@return an array with the numbers\\n{@code start, start + stride, ..., start + (size - 1) * stride}.\\nIf {@code size == 0}, the array returned will be empty.'\n    ]\n  },\n  {\n    'tag': '@param values the input array',\n    'alternatives': [\n      '@param values the array as input',\n      '@param values the input array',\n      '@param values array as the input'\n    ]\n  },\n  {\n    'tag': '@param begin index of the first array element to include',\n    'alternatives': [\n      '@param begin index to start including array elements',\n      '@param begin the index of the first element in the array to be included',\n      '@param begin index indicating the first element of the array to be included'\n    ]\n  },\n  {\n    'tag': '@param length the number of elements to include',\n    'alternatives': [\n      '@param length the count of elements to include',\n      '@param length the number of elements to be included',\n      '@param length the quantity of elements to include'\n    ]\n  },\n  {\n    'tag': '@return true if the parameters are valid and designate a subarray of positive length',\n    'alternatives': [\n      '@return true if the parameters are valid and indicate a subarray with positive length',\n      '@return true if the parameters are valid and refer to a subarray that has a positive length',\n      '@return true if the parameters are valid and represent a subarray of positive length'\n    ]\n  }\n]"