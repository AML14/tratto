"output=[\n  {\n    'tag': '@return the number of key-value mappings in this map',\n    'alternatives': [\n      '@return the count of key-value mappings in this map',\n      '@return the total number of key-value mappings in this map',\n      '@return the quantity of key-value mappings in this map',\n      '@return the number of mappings between keys and values in this map',\n      '@return the total count of key-value pairs in this map'\n    ]\n  },\n  {\n    'tag': '@return true if the map is empty',\n    'alternatives': [\n      '@return true if the map contains no elements',\n      '@return true if there are no elements in the map',\n      '@return true if the map has no elements',\n      '@return true if the map does not have any elements',\n      '@return true if the map is devoid of elements'\n    ]\n  },\n  {\n    'tag': '@param key key whose presence in this map is to be tested',\n    'alternatives': [\n      '@param key the key that needs to be checked for existence in this map',\n      '@param key the key to be tested for its presence in this map',\n      '@param key the key that will be checked for its existence in this map',\n      '@param key the key for which presence needs to be validated in this map',\n      '@param key the key to check if it exists in this map'\n    ]\n  },\n  {\n    'tag': '@return true if this map contains a mapping for the specified key',\n    'alternatives': [\n      '@return true if this map has a mapping for the given key',\n      '@return true if this map holds a mapping for the provided key',\n      '@return true if this map includes a mapping for the specified key',\n      '@return true if this map possesses a mapping for the given key',\n      '@return true if this map features a mapping for the specified key'\n    ]\n  },\n  {\n    'tag': '@throws ClassCastException if the key is of an inappropriate type',\n    'alternatives': [\n      '@throws ClassCastException when the key has an unsuitable type',\n      '@throws ClassCastException if the key is of an unsuitable type',\n      '@throws ClassCastException in case the key is of an inappropriate type',\n      '@throws ClassCastException if the key has an inappropriate type',\n      '@throws ClassCastException if the type of the key is inappropriate'\n    ]\n  },\n  {\n    'tag': '@param value value whose presence in this map is to be tested',\n    'alternatives': [\n      '@param value the value that needs to be checked for existence in this map',\n      '@param value the value to be tested for its presence in this map',\n      '@param value the value that will be checked for its existence in this map',\n      '@param value the value for which presence needs to be validated in this map',\n      '@param value the value to check if it exists in this map'\n    ]\n  },\n  {\n    'tag': '@return true if this map contains a mapping for the specified value',\n    'alternatives': [\n      '@return true if this map has a mapping for the given value',\n      '@return true if this map holds a mapping for the provided value',\n      '@return true if this map includes a mapping for the specified value',\n      '@return true if this map possesses a mapping for the given value',\n      '@return true if this map features a mapping for the specified value'\n    ]\n  },\n  {\n    'tag': '@throws ClassCastException if the value is of an inappropriate type',\n    'alternatives': [\n      '@throws ClassCastException when the value has an unsuitable type',\n      '@throws ClassCastException if the value is of an unsuitable type',\n      '@throws ClassCastException in case the value is of an inappropriate type',\n      '@throws ClassCastException if the value has an inappropriate type',\n      '@throws ClassCastException if the type of the value is inappropriate'\n    ]\n  },\n  {\n    'tag': '@param key key whose associated value is to be returned',\n    'alternatives': [\n      '@param key the key for which the corresponding value should be returned',\n      '@param key the key whose associated value needs to be retrieved',\n      '@param key the key to get the associated value from',\n      '@param key the key which has the value to be returned',\n      '@param key the key that relates to the value to be returned'\n    ]\n  },\n  {\n    'tag': '@throws ClassCastException if the key is of an inappropriate type',\n    'alternatives': [\n      '@throws ClassCastException when the key has an unsuitable type',\n      '@throws ClassCastException if the key is of an unsuitable type',\n      '@throws ClassCastException in case the key is of an inappropriate type',\n      '@throws ClassCastException if the key has an inappropriate type',\n      '@throws ClassCastException if the type of the key is inappropriate'\n    ]\n  },\n  {\n    'tag': '@param key key with which the specified value is to be associated',\n    'alternatives': [\n      '@param key the key that will be used to associate the specified value',\n      '@param key the key to be related to the given value',\n      '@param key the key that will be associated with the provided value',\n      '@param key the key that should be paired with the specified value',\n      '@param key the key to use for associating the specified value'\n    ]\n  },\n  {\n    'tag': '@param value value to be associated with the specified key',\n    'alternatives': [\n      '@param value the value that will be associated with the given key',\n      '@param value the value that will be linked to the specified key',\n      '@param value the value to be paired with the provided key',\n      '@param value the value to be associated with the specified key',\n      '@param value the value to assign to the given key'\n    ]\n  },\n  {\n    'tag': '@return the previous value for the key',\n    'alternatives': [\n      '@return the value that was previously associated with the key',\n      '@return the previous value linked to the provided key',\n      '@return the value that was previously assigned to the key',\n      '@return the value that was previously paired with the key',\n      '@return the value that was previously associated with the given key'\n    ]\n  },\n  {\n    'tag': '@throws ClassCastException if the key is of an inappropriate type',\n    'alternatives': [\n      '@throws ClassCastException when the key has an unsuitable type',\n      '@throws ClassCastException if the key is of an unsuitable type',\n      '@throws ClassCastException in case the key is of an inappropriate type',\n      '@throws ClassCastException if the key has an inappropriate type',\n      '@throws ClassCastException if the type of the key is inappropriate'\n    ]\n  },\n  {\n    'tag': '@param map the map to copy from',\n    'alternatives': [\n      '@param map the map from which to make a copy',\n      '@param map the map that will be used as the source for the copy',\n      '@param map the map to be duplicated from',\n      '@param map the map to be replicated',\n      '@param map the map to create a clone from'\n    ]\n  },\n  {\n    'tag': '@param key key whose mapping is to be removed from the map.',\n    'alternatives': [\n      '@param key the key whose mapping should be eliminated from the map',\n      '@param key the key to remove the mapping from the map',\n      '@param key the key to be used for removing the associated mapping',\n      '@param key the key for which the mapping is to be removed from the map',\n      '@param key the key for which the mapping needs to be deleted from the map'\n    ]\n  },\n  {\n    'tag': '@return previous value associated with specified key,\\n or null if there was no mapping for key.',\n    'alternatives': [\n      '@return the previous value that was associated with the specified key, or null if there was no mapping for the key',\n      '@return the value previously associated with the specified key, or null if there was no mapping for the key',\n      '@return the previous value that was linked to the specified key, or null if there was no mapping for the key',\n      '@return the value that was previously associated with the key, or null if there was no mapping for the key',\n      '@return the previous value that was mapped to the specified key, or null if there was no mapping for the key'\n    ]\n  },\n  {\n    'tag': '@throws ClassCastException if the key is of an inappropriate type',\n    'alternatives': [\n      '@throws ClassCastException when the key has an unsuitable type',\n      '@throws ClassCastException if the key is of an unsuitable type',\n      '@throws ClassCastException in case the key is of an inappropriate type',\n      '@throws ClassCastException if the key has an inappropriate type',\n      '@throws ClassCastException if the type of the key is inappropriate'\n    ]\n  },\n  {\n    'tag': '@param value value whose associated key is to be returned.',\n    'alternatives': [\n      '@param value the value for which the corresponding key should be returned.',\n      '@param value the value whose associated key needs to be retrieved.',\n      '@param value the value to get the associated key from.',\n      '@param value the value which has the key to be returned.',\n      '@param value the value that relates to the key to be returned.'\n    ]\n  },\n  {\n    'tag': '@throws ClassCastException if the value is of an inappropriate type',\n    'alternatives': [\n      '@throws ClassCastException when the value has an unsuitable type',\n      '@throws ClassCastException if the value is of an unsuitable type',\n      '@throws ClassCastException in case the value is of an inappropriate type',\n      '@throws ClassCastException if the value has an inappropriate type',\n      '@throws ClassCastException if the type of the value is inappropriate'\n    ]\n  },\n  {\n    'tag': '@param value value whose mapping is to be removed from the map',\n    'alternatives': [\n      '@param value the value whose mapping should be removed from the map',\n      '@param value the value to remove the mapping from the map',\n      '@param value the value to be used for deleting the associated mapping',\n      '@param value the value for which the mapping is to be removed from the map',\n      '@param value the value for which the mapping needs to be eliminated from the map'\n    ]\n  },\n  {\n    'tag': '@return previous key associated with specified value,\\n or null if there was no mapping for value.',\n    'alternatives': [\n      '@return the previous key that was associated with the specified value, or null if there was no mapping for the value',\n      '@return the key previously associated with the specified value, or null if there was no mapping for the value',\n      '@return the previous key that was linked to the specified value, or null if there was no mapping for the value',\n      '@return the key that was previously associated with the value, or null if there was no mapping for the value',\n      '@return the previous key that was mapped to the specified value, or null if there was no mapping for the value'\n    ]\n  },\n  {\n    'tag': '@throws ClassCastException if the value is of an inappropriate type',\n    'alternatives': [\n      '@throws ClassCastException when the value has an unsuitable type',\n      '@throws ClassCastException if the value is of an unsuitable type',\n      '@throws ClassCastException in case the value is of an inappropriate type',\n      '@throws ClassCastException if the value has an inappropriate type',\n      '@throws ClassCastException if the type of the value is inappropriate'\n    ]\n  },\n  {\n    'tag': '@return the first (lowest) key currently in this sorted map',\n    'alternatives': [\n      '@return the lowest key currently present in this sorted map',\n      '@return the key that has the lowest value among all keys in this sorted map',\n      '@return the key that comes first in the sorted order of keys in this map',\n      '@return the key with the smallest value in this sorted map',\n      '@return the key that is at the beginning of the sorted key sequence in this map'\n    ]\n  },\n  {\n    'tag': '@return the last (highest) key currently in this sorted map',\n    'alternatives': [\n      '@return the highest key currently present in this sorted map',\n      '@return the key that has the highest value among all keys in this sorted map',\n      '@return the key that comes last in the sorted order of keys in this map',\n      '@return the key with the largest value in this sorted map',\n      '@return the key that is at the end of the sorted key sequence in this map'\n    ]\n  }\n]"