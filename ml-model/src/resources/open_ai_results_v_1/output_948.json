"[\n  {\n    \"tag\": \"@return a subsequence of seq from start to end that is interned\",\n    \"alternatives\": [\n      \"@return an interned subsequence of seq starting from start and ending at end\",\n      \"@return a subsequence of seq that is interned, ranging from start to end\",\n      \"@return an interned subsequence of seq, starting from start and going until end\",\n      \"@return a subsequence of seq, from start to end, that is interned\",\n      \"@return interned subsequence of seq from start to end\"\n    ]\n  },\n  {\n    \"tag\": \"@param seq the sequence whose subsequence should be interned\",\n    \"alternatives\": [\n      \"@param seq the input sequence from which the subsequence needs to be interned\",\n      \"@param seq the original sequence from which the subsequence should be interned\",\n      \"@param seq the sequence for which the subsequence needs to be interned\",\n      \"@param seq the source sequence from which the subsequence should be interned\",\n      \"@param seq the sequence to extract the interned subsequence from\"\n    ]\n  },\n  {\n    \"tag\": \"@param values the values to use when constructing the {@code\\n    ImmutableListMultimap}\",\n    \"alternatives\": [\n      \"@param values the values to be utilized during the construction of the {@code\\n    ImmutableListMultimap}\",\n      \"@param values the values used for building the {@code\\n    ImmutableListMultimap}\",\n      \"@param values the values to employ while creating the {@code\\n    ImmutableListMultimap}\",\n      \"@param values the values for constructing the {@code\\n    ImmutableListMultimap}\",\n      \"@param values the values to utilize in the construction of the {@code\\n    ImmutableListMultimap}\"\n    ]\n  },\n  {\n    \"tag\": \"@param keyFunction the function used to produce the key for each value\",\n    \"alternatives\": [\n      \"@param keyFunction the function that generates the key for each value\",\n      \"@param keyFunction the function employed to generate the key for each value\",\n      \"@param keyFunction the function that produces the key for each value\",\n      \"@param keyFunction the function used for generating the key of each value\",\n      \"@param keyFunction the function that computes the key for each value\"\n    ]\n  },\n  {\n    \"tag\": \"@return {@code ImmutableListMultimap} mapping the result of evaluating the\\n    function {@code keyFunction} on each value in the input collection to\\n    that value\",\n    \"alternatives\": [\n      \"@return an {@code ImmutableListMultimap} that maps the evaluation result of\\n    function {@code keyFunction} on each input collection value to that value\",\n      \"@return an {@code ImmutableListMultimap} that associates the outcome of\\n    applying the function {@code keyFunction} to each input value with that value\",\n      \"@return {@code ImmutableListMultimap} that maps each value in the input collection\\n    to the result obtained by evaluating the function {@code keyFunction}\",\n      \"@return a {@code ImmutableListMultimap} that links the return value of the\\n    function {@code keyFunction} applied to each value in the input collection to\\n    that value\",\n      \"@return a {@code ImmutableListMultimap} that maps the result of the\\n    assessment of the function {@code keyFunction} on each input value to that value\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NullPointerException if any of the following cases is true:\\n    <ul>\\n    <li>{@code values} is null\\n    <li>{@code keyFunction} is null\\n    <li>An element in {@code values} is null\\n    <li>{@code keyFunction} returns {@code null} for any element of {@code\\n        values}\\n    </ul>\",\n    \"alternatives\": [\n      \"@throws NullPointerException if any of the following situations occur:\\n    <ul>\\n    <li>{@code values} is null\\n    <li>{@code keyFunction} is null\\n    <li>An element within {@code values} is null\\n    <li>{@code keyFunction} produces {@code null} for any element of {@code\\n        values}\\n    </ul>\",\n      \"@throws NullPointerException if any of the subsequent conditions are met:\\n    <ul>\\n    <li>{@code values} is null\\n    <li>{@code keyFunction} is null\\n    <li>An element in {@code values} is null\\n    <li>{@code keyFunction} returns {@code null} for any element of {@code\\n        values}\\n    </ul>\",\n      \"@throws NullPointerException if any of the specified circumstances occur:\\n    <ul>\\n    <li>{@code values} is null\\n    <li>{@code keyFunction} is null\\n    <li>An element in {@code values} is null\\n    <li>{@code keyFunction} returns {@code null} for any element of {@code\\n        values}\\n    </ul>\",\n      \"@throws NullPointerException if any of these conditions are true:\\n    <ul>\\n    <li>{@code values} is null\\n    <li>{@code keyFunction} is null\\n    <li>An element in {@code values} is null\\n    <li>{@code keyFunction} returns {@code null} for any element of {@code\\n        values}\\n    </ul>\",\n      \"@throws NullPointerException if any of the succeeding scenarios arise:\\n    <ul>\\n    <li>{@code values} is null\\n    <li>{@code keyFunction} is null\\n    <li>An element in {@code values} is null\\n    <li>{@code keyFunction} yields {@code null} for any element of {@code\\n        values}\\n    </ul>\"\n    ]\n  },\n  {\n    \"tag\": \"@return an iterator over the elements contained in this collection\",\n    \"alternatives\": [\n      \"@return an iterator that iterates over the elements present in this collection\",\n      \"@return an iterator that traverses the elements stored in this collection\",\n      \"@return an iterator that goes through the elements contained within this collection\",\n      \"@return an iterator that loops through the elements held in this collection\",\n      \"@return an iterator that moves through the elements contained in this collection\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NoSuchElementException if this range map is empty\",\n    \"alternatives\": [\n      \"@throws NoSuchElementException when the range map is empty\",\n      \"@throws NoSuchElementException if the range map does not contain any entries\",\n      \"@throws NoSuchElementException if there are no mappings in the range map\",\n      \"@throws NoSuchElementException if this range map has no elements\",\n      \"@throws NoSuchElementException if there are no elements in the range map\"\n    ]\n  },\n  {\n    \"tag\": \"@throws IllegalArgumentException if {@code lower} is greater than <i>or\\n    equal to</i> {@code upper}\",\n    \"alternatives\": [\n      \"@throws IllegalArgumentException if {@code lower} is either greater than or equal to {@code upper}\",\n      \"@throws IllegalArgumentException if {@code lower} is either higher than or the same as {@code upper}\",\n      \"@throws IllegalArgumentException if {@code lower} is greater than or equal to {@code upper}\",\n      \"@throws IllegalArgumentException if {@code lower} is equal to or greater than {@code upper}\",\n      \"@throws IllegalArgumentException if {@code lower} is higher than or equal to {@code upper}\"\n    ]\n  },\n  {\n    \"tag\": \"@throws IllegalArgumentException if {@code lower} is greater than {@code\\n    upper}\",\n    \"alternatives\": [\n      \"@throws IllegalArgumentException if {@code lower} is higher than {@code\\n    upper}\",\n      \"@throws IllegalArgumentException if {@code lower} is greater than {@code\\n    upper}\",\n      \"@throws IllegalArgumentException if {@code lower} exceeds {@code\\n    upper}\",\n      \"@throws IllegalArgumentException if {@code lower} is superior to {@code\\n    upper}\",\n      \"@throws IllegalArgumentException if {@code lower} goes beyond {@code\\n    upper}\"\n    ]\n  },\n  {\n    \"tag\": \"@throws IllegalArgumentException if {@code lower} is greater than {@code\\n    upper}\",\n    \"alternatives\": [\n      \"@throws IllegalArgumentException if {@code lower} is higher than {@code\\n    upper}\",\n      \"@throws IllegalArgumentException if {@code lower} is greater than {@code\\n    upper}\",\n      \"@throws IllegalArgumentException if {@code lower} is larger than {@code\\n    upper}\",\n      \"@throws IllegalArgumentException if {@code lower} is superior to {@code\\n    upper}\",\n      \"@throws IllegalArgumentException if {@code lower} exceeds {@code\\n    upper}\"\n    ]\n  },\n  {\n    \"tag\": \"@throws IllegalArgumentException if {@code lower} is greater than {@code\\n    upper}\",\n    \"alternatives\": [\n      \"@throws IllegalArgumentException if {@code lower} is higher than {@code\\n    upper}\",\n      \"@throws IllegalArgumentException if {@code lower} is greater than {@code\\n    upper}\",\n      \"@throws IllegalArgumentException if {@code lower} surpasses {@code\\n    upper}\",\n      \"@throws IllegalArgumentException if {@code lower} is superior to {@code\\n    upper}\",\n      \"@throws IllegalArgumentException if {@code lower} goes beyond {@code\\n    upper}\"\n    ]\n  },\n  {\n    \"tag\": \"@throws IllegalArgumentException if {@code lower} is greater than {@code\\n    upper}\",\n    \"alternatives\": [\n      \"@throws IllegalArgumentException if {@code lower} is higher than {@code\\n    upper}\",\n      \"@throws IllegalArgumentException if {@code lower} is greater than {@code\\n    upper}\",\n      \"@throws IllegalArgumentException if {@code lower} is larger than {@code\\n    upper}\",\n      \"@throws IllegalArgumentException if {@code lower} is superior to {@code\\n    upper}\",\n      \"@throws IllegalArgumentException if {@code lower} exceeds {@code\\n    upper}\"\n    ]\n  },\n  {\n    \"tag\": \"@throws ClassCastException if the parameters are not <i>mutually\\n    comparable</i>\",\n    \"alternatives\": [\n      \"@throws ClassCastException if the arguments lack <i>mutual comparability</i>\",\n      \"@throws ClassCastException if the parameters are not capable of being <i>mutually compared</i>\",\n      \"@throws ClassCastException if the parameters cannot be <i>mutually compared</i>\",\n      \"@throws ClassCastException if the arguments are not <i>mutually comparable</i>\",\n      \"@throws ClassCastException if the parameters cannot be <i>compared with each other</i>\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NoSuchElementException if {@code values} is empty\",\n    \"alternatives\": [\n      \"@throws NoSuchElementException if the {@code values} collection is empty\",\n      \"@throws NoSuchElementException when the {@code values} collection has no elements\",\n      \"@throws NoSuchElementException if there are no values in the {@code values} collection\",\n      \"@throws NoSuchElementException if there are no elements in the {@code values} list\",\n      \"@throws NoSuchElementException if the {@code values} list is devoid of elements\"\n    ]\n  },\n  {\n    \"tag\": \"@throws IllegalStateException if this range is unbounded below (that is, {@link\\n    #hasLowerBound()} returns {@code false})\",\n    \"alternatives\": [\n      \"@throws IllegalStateException if this range lacks a lower bound (i.e., if {@link\\n    #hasLowerBound()} returns {@code false})\",\n      \"@throws IllegalStateException if this range does not have a lower bound (i.e., when {@link\\n    #hasLowerBound()} returns {@code false})\",\n      \"@throws IllegalStateException if this range is without a lower bound (i.e., if {@link\\n    #hasLowerBound()} returns {@code false})\",\n      \"@throws IllegalStateException if this range is unbounded below (i.e., when {@link\\n    #hasLowerBound()} returns {@code false})\",\n      \"@throws IllegalStateException if this range is not bounded below (i.e., if {@link\\n    #hasLowerBound()} returns {@code false})\"\n    ]\n  },\n  {\n    \"tag\": \"@throws IllegalStateException if this range is unbounded below (that is, {@link\\n    #hasLowerBound()} returns {@code false})\",\n    \"alternatives\": [\n      \"@throws IllegalStateException if this range lacks a lower bound (i.e., if {@link\\n    #hasLowerBound()} returns {@code false})\",\n      \"@throws IllegalStateException if this range does not have a lower bound (i.e., when {@link\\n    #hasLowerBound()} returns {@code false})\",\n      \"@throws IllegalStateException if this range is without a lower bound (i.e., if {@link\\n    #hasLowerBound()} returns {@code false})\",\n      \"@throws IllegalStateException if this range is unbounded below (i.e., when {@link\\n    #hasLowerBound()} returns {@code false})\",\n      \"@throws IllegalStateException if this range is not"