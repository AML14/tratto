"[\n  {\n    \"tag\": \"@param m first sample size\",\n    \"alternatives\": [\n      \"@param m initial sample size\",\n      \"@param m size of the first sample\",\n      \"@param m size of the initial sample\",\n      \"@param m size of the sample to be used\",\n      \"@param m number indicating the size of the first sample\"\n    ]\n  },\n  {\n    \"tag\": \"@param n second sample size\",\n    \"alternatives\": [\n      \"@param n size of the second sample\",\n      \"@param n the size of the second sample\",\n      \"@param n number indicating the size of the second sample\",\n      \"@param n the size of the sample to be used\",\n      \"@param n the size of the additional sample\"\n    ]\n  },\n  {\n    \"tag\": \"@param cnm integral D-statistic (see {@link #calculateIntegralD(double, int, int, boolean)})\",\n    \"alternatives\": [\n      \"@param cnm integral D-statistic (refer to {@link #calculateIntegralD(double, int, int, boolean)})\",\n      \"@param cnm integral D-statistic (check {@link #calculateIntegralD(double, int, int, boolean)})\",\n      \"@param cnm integral D-statistic (see the function {@link #calculateIntegralD(double, int, int, boolean)})\",\n      \"@param cnm the integral D-statistic (see {@link #calculateIntegralD(double, int, int, boolean)})\",\n      \"@param cnm D-statistic integral (refer to {@link #calculateIntegralD(double, int, int, boolean)})\"\n    ]\n  },\n  {\n    \"tag\": \"@param strict whether or not the null hypothesis uses strict inequality\",\n    \"alternatives\": [\n      \"@param strict indicator of whether or not the null hypothesis uses strict inequality\",\n      \"@param strict flag to determine whether or not the null hypothesis uses strict inequality\",\n      \"@param strict boolean value indicating if the null hypothesis uses strict inequality\",\n      \"@param strict boolean indicating whether or not the null hypothesis uses strict inequality\",\n      \"@param strict determines if the null hypothesis uses strict inequality\"\n    ]\n  },\n  {\n    \"tag\": \"@return number or paths to (i, j) from (0,0) representing D-values as large as c for given m, n\",\n    \"alternatives\": [\n      \"@return number of paths to reach (i, j) from (0,0) that have D-values as large as c for the given m, n\",\n      \"@return number of paths to (i, j) from (0,0) that represent D-values as large as c for the given m, n\",\n      \"@return number of paths to go from (0,0) to (i, j) representing D-values as large as c for the given m, n\",\n      \"@return number of paths from (0,0) to (i, j) that possess D-values as large as c for the given m, n\",\n      \"@return number of paths from (0,0) to (i, j) with D-values as large as c for the given m, n\"\n    ]\n  },\n  {\n    \"tag\": \"@param rng random data generator used by {@link #monteCarloP(double, int, int, boolean, int)}\",\n    \"alternatives\": [\n      \"@param rng random data generator utilized by {@link #monteCarloP(double, int, int, boolean, int)}\",\n      \"@param rng random data generator used in {@link #monteCarloP(double, int, int, boolean, int)}\",\n      \"@param rng random data generator employed by {@link #monteCarloP(double, int, int, boolean, int)}\",\n      \"@param rng random data generator applied by {@link #monteCarloP(double, int, int, boolean, int)}\",\n      \"@param rng random data generator utilized in {@link #monteCarloP(double, int, int, boolean, int)}\"\n    ]\n  },\n  {\n    \"tag\": \"@param values data array to store (may be null to remove stored data)\",\n    \"alternatives\": [\n      \"@param values array to store data (can be null to remove stored data)\",\n      \"@param values array for storing data (null to remove stored data)\",\n      \"@param values data array for storage (null to remove stored data)\",\n      \"@param values array used for storing data (can be null to remove stored data)\",\n      \"@param values array for data storage (null to remove stored data)\"\n    ]\n  },\n  {\n    \"tag\": \"@return copy of the stored data array (may be null)\",\n    \"alternatives\": [\n      \"@return duplicate of the stored data array (can be null)\",\n      \"@return replicated form of the stored data array (may be null)\",\n      \"@return cloned version of the stored data array (can be null)\",\n      \"@return copied data array (can be null)\",\n      \"@return a copy of the stored data array (may be null)\"\n    ]\n  },\n  {\n    \"tag\": \"@return reference to the stored data array (may be null)\",\n    \"alternatives\": [\n      \"@return pointer to the stored data array (can be null)\",\n      \"@return link to the stored data array (may be null)\",\n      \"@return pointer to the data array that is stored (can be null)\",\n      \"@return reference to the array where the data is stored (may be null)\",\n      \"@return reference to the stored data array (can be null)\"\n    ]\n  },\n  {\n    \"tag\": \"@param values data array to store\",\n    \"alternatives\": [\n      \"@param values array used for data storage\",\n      \"@param values array for storing the data\",\n      \"@param values data array for storage\",\n      \"@param values array to be used for storing data\",\n      \"@param values array for data storage\"\n    ]\n  },\n  {\n    \"tag\": \"@param begin the index of the first element to include\",\n    \"alternatives\": [\n      \"@param begin index of the initial element to include\",\n      \"@param begin position of the first element to be included\",\n      \"@param begin starting index of the elements to include\",\n      \"@param begin the index of the first element to be incorporated\",\n      \"@param begin the index where the elements to include start\"\n    ]\n  },\n  {\n    \"tag\": \"@param length the number of elements to include\",\n    \"alternatives\": [\n      \"@param length number of elements to be included\",\n      \"@param length count of elements to include\",\n      \"@param length total elements to be incorporated\",\n      \"@param length the size of the elements to include\",\n      \"@param length the number of elements to be considered\"\n    ]\n  },\n  {\n    \"tag\": \"@return the value of the statistic applied to the stored data\",\n    \"alternatives\": [\n      \"@return the calculated statistic value applied to the stored data\",\n      \"@return the result of applying the statistic to the stored data\",\n      \"@return the computed value of the statistic applied to the stored data\",\n      \"@return the outcome obtained by applying the statistic to the stored data\",\n      \"@return the value derived from applying the statistic to the stored data\"\n    ]\n  },\n  {\n    \"tag\": \"@param values the input array\",\n    \"alternatives\": [\n      \"@param values the array as input\",\n      \"@param values input array\",\n      \"@param values the provided array\",\n      \"@param values array as the input\",\n      \"@param values the array used as input\"\n    ]\n  },\n  {\n    \"tag\": \"@param begin index of the first array element to include\",\n    \"alternatives\": [\n      \"@param begin the starting index of the first array element to include\",\n      \"@param begin index representing the first array element to be included\",\n      \"@param begin position denoting the initial array element to include\",\n      \"@param begin the index indicating the first array element to incorporate\",\n      \"@param begin the index where the first array element to include begins\"\n    ]\n  },\n  {\n    \"tag\": \"@param length the number of elements to include\",\n    \"alternatives\": [\n      \"@param length number of elements to be included\",\n      \"@param length count of elements to include\",\n      \"@param length total elements to be incorporated\",\n      \"@param length the size of the elements to include\",\n      \"@param length the number of elements to be considered\"\n    ]\n  },\n  {\n    \"tag\": \"@return true if the parameters are valid and designate a subarray of positive length\",\n    \"alternatives\": [\n      \"@return true if the parameters are valid and represent a subarray of positive length\",\n      \"@return true if the parameters are valid and indicate a subarray of positive length\",\n      \"@return true if the parameters are valid and refer to a subarray of positive length\",\n      \"@return true if the parameters are valid and denote a subarray of positive length\",\n      \"@return true if the parameters are valid and signify a subarray of positive length\"\n    ]\n  },\n  {\n    \"tag\": \"@throws MathIllegalArgumentException if the indices are invalid or the array is null\",\n    \"alternatives\": [\n      \"@throws MathIllegalArgumentException when the indices are invalid or the array is null\",\n      \"@throws MathIllegalArgumentException if the indices are incorrect or the array is null\",\n      \"@throws MathIllegalArgumentException if the indices are not valid or the array is null\",\n      \"@throws MathIllegalArgumentException in case the indices are invalid or the array is null\",\n      \"@throws MathIllegalArgumentException if the indices are wrong or the array is null\"\n    ]\n  },\n  {\n    \"tag\": \"@param values the input array\",\n    \"alternatives\": [\n      \"@param values the array as input\",\n      \"@param values input array\",\n      \"@param values the provided array\",\n      \"@param values array as the input\",\n      \"@param values the array used as input\"\n    ]\n  }\n]"