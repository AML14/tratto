"[\n  {\n    'tag': '@param idx the current eigenvalue index',\n    'alternatives': [\n      '@param idx the current index of the eigenvalue',\n      '@param idx the index of the current eigenvalue',\n      '@param idx the index of the eigenvalue at the current position',\n      '@param idx the index of the current eigenvalue element',\n      '@param idx refers to the current index of the eigenvalue'\n    ]\n  },\n  {\n    'tag': '@param iteration the current iteration',\n    'alternatives': [\n      '@param iteration the current step',\n      '@param iteration refers to the current iteration',\n      '@param iteration represents the ongoing iteration',\n      '@param iteration denotes the current iteration',\n      '@param iteration signifies the current step'\n    ]\n  },\n  {\n    'tag': '@param shift holder for shift information',\n    'alternatives': [\n      '@param shift information container',\n      '@param shift stores the shift data',\n      '@param shift holds the shift information',\n      '@param shift stores the value of the shift',\n      '@param shift is the container for shift information'\n    ]\n  },\n  {\n    'tag': '@param il the index of the small sub-diagonal element',\n    'alternatives': [\n      '@param il the index of the sub-diagonal element',\n      '@param il refers to the index of the sub-diagonal element',\n      '@param il denotes the position of the sub-diagonal element',\n      '@param il represents the index of the small sub-diagonal element',\n      '@param il signifies the location of the sub-diagonal element'\n    ]\n  },\n  {\n    'tag': '@param iu the current eigenvalue index',\n    'alternatives': [\n      '@param iu the index of the current eigenvalue',\n      '@param iu the index of the eigenvalue at the current position',\n      '@param iu is the current index of the eigenvalue',\n      '@param iu refers to the index of the current eigenvalue',\n      '@param iu signifies the current eigenvalue index'\n    ]\n  },\n  {\n    'tag': '@param shift shift information holder',\n    'alternatives': [\n      '@param shift container for the shift information',\n      '@param shift keeps the shift information',\n      '@param shift holds the value of the shift',\n      '@param shift is where the shift information is stored',\n      '@param shift is used to store shift information'\n    ]\n  },\n  {\n    'tag': '@param hVec the initial houseHolder vector',\n    'alternatives': [\n      '@param hVec the vector used for householder transformation',\n      '@param hVec the vector used in the householder transformation',\n      '@param hVec denotes the initial householder vector',\n      '@param hVec represents the starting householder vector',\n      '@param hVec symbolizes the original householder vector'\n    ]\n  },\n  {\n    'tag': '@return the start index for the QR step',\n    'alternatives': [\n      '@return the beginning index for the QR step',\n      '@return the index from which the QR step starts',\n      '@return the initial index for the QR step',\n      '@return the starting position for the QR step',\n      '@return the index representing the start of the QR step'\n    ]\n  },\n  {\n    'tag': '@param il the index of the small sub-diagonal element',\n    'alternatives': [\n      '@param il the index of the sub-diagonal element',\n      '@param il refers to the index of the sub-diagonal element',\n      '@param il denotes the position of the sub-diagonal element',\n      '@param il represents the index of the small sub-diagonal element',\n      '@param il signifies the location of the sub-diagonal element'\n    ]\n  },\n  {\n    'tag': '@param im the start index for the QR step',\n    'alternatives': [\n      '@param im the index marking the start of the QR step',\n      '@param im the starting index for the QR step',\n      '@param im represents the initial index for the QR step',\n      '@param im denotes the beginning index for the QR step',\n      '@param im symbolizes the start position for the QR step'\n    ]\n  },\n  {\n    'tag': '@param iu the current eigenvalue index',\n    'alternatives': [\n      '@param iu the index of the current eigenvalue',\n      '@param iu the index of the eigenvalue at the current position',\n      '@param iu is the current index of the eigenvalue',\n      '@param iu refers to the index of the current eigenvalue',\n      '@param iu signifies the current eigenvalue index'\n    ]\n  },\n  {\n    'tag': '@param shift shift information holder',\n    'alternatives': [\n      '@param shift container for the shift information',\n      '@param shift keeps the shift information',\n      '@param shift holds the value of the shift',\n      '@param shift is where the shift information is stored',\n      '@param shift is used to store shift information'\n    ]\n  },\n  {\n    'tag': '@param hVec the initial houseHolder vector',\n    'alternatives': [\n      '@param hVec the vector used for householder transformation',\n      '@param hVec the vector used in the householder transformation',\n      '@param hVec denotes the initial householder vector',\n      '@param hVec represents the starting householder vector',\n      '@param hVec symbolizes the original householder vector'\n    ]\n  },\n  {\n    'tag': '@param matrix matrix to transform',\n    'alternatives': [\n      '@param matrix the matrix to be transformed',\n      '@param matrix represents the transformation target',\n      '@param matrix is the input matrix for the transformation',\n      '@param matrix denotes the matrix to undergo transformation',\n      '@param matrix signifies the input for the transformation'\n    ]\n  },\n  {\n    'tag': '@param dimension the size of the vector',\n    'alternatives': [\n      '@param dimension the length of the vector',\n      '@param dimension represents the size of the vector',\n      '@param dimension defines the dimensionality of the vector',\n      '@param dimension signifies the magnitude of the vector',\n      '@param dimension denotes the number of elements in the vector'\n    ]\n  },\n  {\n    'tag': '@param start the index of the first entry to be visited',\n    'alternatives': [\n      '@param start the index of the initial entry to visit',\n      '@param start the index where the visiting begins',\n      '@param start denotes the starting index to be visited',\n      '@param start signifies the entry index to start the visitation',\n      '@param start represents the index from which the visitation commences'\n    ]\n  },\n  {\n    'tag': '@param end the index of the last entry to be visited (inclusive)',\n    'alternatives': [\n      '@param end the index of the final entry to visit (inclusive)',\n      '@param end the index marking the end of the visitation (inclusive)',\n      '@param end represents the last index to be visited (inclusive)',\n      '@param end signifies the entry index to end the visitation (inclusive)',\n      '@param end denotes the index of the terminating entry of the visitation (inclusive)'\n    ]\n  },\n  {\n    'tag': '@param index the index of the entry being visited',\n    'alternatives': [\n      '@param index the index of the currently visited entry',\n      '@param index denotes the index of the entry currently being visited',\n      '@param index represents the position of the visited entry',\n      '@param index signifies the position of the currently visited entry',\n      '@param index refers to the index of the entry that is being visited'\n    ]\n  },\n  {\n    'tag': '@param value the value of the entry being visited',\n    'alternatives': [\n      '@param value the value of the currently visited entry',\n      '@param value denotes the value of the entry currently being visited',\n      '@param value represents the content of the visited entry',\n      '@param value signifies the content of the currently visited entry',\n      '@param value refers to the value of the entry that is being visited'\n    ]\n  },\n  {\n    'tag': '@return the new value of the entry being visited',\n    'alternatives': [\n      '@return the updated value of the currently visited entry',\n      '@return the new content of the entry currently being visited',\n      '@return the value after the visitation to the entry',\n      '@return the modified content of the currently visited entry',\n      '@return the value that replaces the entry after visitation'\n    ]\n  },\n  {\n    'tag': '@return the value returned by\\n{@link RealVector#walkInDefaultOrder(RealVectorChangingVisitor)},\\n{@link RealVector#walkInDefaultOrder(RealVectorChangingVisitor, int, int)},\\n{@link RealVector#walkInOptimizedOrder(RealVectorChangingVisitor)}\\nor\\n{@link RealVector#walkInOptimizedOrder(RealVectorChangingVisitor, int, int)}',\n    'alternatives': [\n      '@return the output from the\\n{@link RealVector#walkInDefaultOrder(RealVectorChangingVisitor)},\\n{@link RealVector#walkInDefaultOrder(RealVectorChangingVisitor, int, int)},\\n{@link RealVector#walkInOptimizedOrder(RealVectorChangingVisitor)}\\nor\\n{@link RealVector#walkInOptimizedOrder(RealVectorChangingVisitor, int, int)}',\n      '@return the result obtained by\\n{@link RealVector#walkInDefaultOrder(RealVectorChangingVisitor)},\\n{@link RealVector#walkInDefaultOrder(RealVectorChangingVisitor, int, int)},\\n{@link RealVector#walkInOptimizedOrder(RealVectorChangingVisitor)}\\nor\\n{@link RealVector#walkInOptimizedOrder(RealVectorChangingVisitor, int, int)}',\n      '@return the value that is returned by\\n{@link RealVector#walkInDefaultOrder(RealVectorChangingVisitor)},\\n{@link RealVector#walkInDefaultOrder(RealVectorChangingVisitor, int, int)},\\n{@link RealVector#walkInOptimizedOrder(RealVectorChangingVisitor)}\\nor\\n{@link RealVector#walkInOptimizedOrder(RealVectorChangingVisitor, int, int)}',\n      '@return the output generated by\\n{@link RealVector#walkInDefaultOrder(RealVectorChangingVisitor)},\\n{@link RealVector#walkInDefaultOrder(RealVectorChangingVisitor, int, int)},\\n{@link RealVector#walkInOptimizedOrder(RealVectorChangingVisitor)}\\nor\\n{@link RealVector#walkInOptimizedOrder(RealVectorChangingVisitor, int, int)}',\n      '@return the return value of the method\\n{@link RealVector#walkInDefaultOrder(RealVectorChangingVisitor)},\\n{@link RealVector#walkInDefaultOrder(RealVectorChangingVisitor, int, int)},\\n{@link RealVector#walkInOptimizedOrder(RealVectorChangingVisitor)}\\nor\\n{@link RealVector#walkInOptimizedOrder(RealVectorChangingVisitor, int, int)}'\n    ]\n  },\n  {\n    'tag': '@return the median for this distribution.',\n    'alternatives': [\n      '@return the middle value for this distribution.',\n      '@return the value in the middle of this distribution.',\n      '@return the central value for this distribution.',\n      '@return the value that represents the median of this distribution.',\n      '@return the value at the midpoint of this distribution.'\n    ]\n  },\n  {\n    'tag': '@return the scale parameter for this distribution.',\n    'alternatives': [\n      '@return the parameter representing the scaling of this distribution.',\n      '@return the value that scales this distribution.',\n      '@return the scaling factor for this distribution.',\n      '@return the value that controls the scale of this distribution.',\n      '@return the parameter that determines the scale of this distribution.'\n    ]\n  },\n  {\n    'tag': '@return mean (always Double.NaN)',\n    'alternatives': [\n      '@return mean (always Double.NaN)',\n      '@return the mean value (always Double.NaN)',\n      '@return the average value (always Double.NaN)',\n      '@return the expected value (always Double.NaN)',\n      '@return the statistical mean (always Double.NaN)'\n    ]\n  },\n  {\n    'tag': '@return variance (always Double.NaN)',\n    'alternatives': [\n      '@return variance (always Double.NaN)',\n      '@return the variance value (always Double.NaN)',\n      '@return the spread of data (always Double.NaN)',\n      '@return the statistical variance (always Double.NaN)',\n      '@return the measure of variability (always Double.NaN)'\n    ]\n  }\n]"