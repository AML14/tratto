"[\n  {\n    \"tag\": \"@param vertex end vertex of the path element.\",\n    \"alternatives\": [\n      \"@param vertex destination vertex of the path element.\",\n      \"@param vertex terminal vertex of the path element.\",\n      \"@param vertex last vertex of the path element.\",\n      \"@param vertex final vertex of the path element.\",\n      \"@param vertex target vertex of the path element.\"\n    ]\n  },\n  {\n    \"tag\": \"@param epsilon tolerance factor.\",\n    \"alternatives\": [\n      \"@param epsilon margin of error factor.\",\n      \"@param epsilon acceptable error level.\",\n      \"@param epsilon precision factor.\",\n      \"@param epsilon deviation factor.\",\n      \"@param epsilon threshold value.\"\n    ]\n  },\n  {\n    \"tag\": \"@return the graph on which this algorithm operates\",\n    \"alternatives\": [\n      \"@return the underlying graph that this algorithm operates on\",\n      \"@return the base graph used for this algorithm\",\n      \"@return the graph that is being processed by this algorithm\",\n      \"@return the main graph utilized by this algorithm\",\n      \"@return the primary graph on which the algorithm is performed\"\n    ]\n  },\n  {\n    \"tag\": \"@return total number of shortest paths\",\n    \"alternatives\": [\n      \"@return number of all the shortest paths\",\n      \"@return count of the shortest paths\",\n      \"@return total quantity of the shortest paths\",\n      \"@return the overall number of shortest paths\",\n      \"@return the total count of shortest paths\"\n    ]\n  },\n  {\n    \"tag\": \"@param a first vertex\",\n    \"alternatives\": [\n      \"@param a initial vertex\",\n      \"@param a starting vertex\",\n      \"@param a source vertex\",\n      \"@param a origin vertex\",\n      \"@param a primary vertex\"\n    ]\n  },\n  {\n    \"tag\": \"@param b second vertex\",\n    \"alternatives\": [\n      \"@param b secondary vertex\",\n      \"@param b end vertex\",\n      \"@param b target vertex\",\n      \"@param b destination vertex\",\n      \"@param b final vertex\"\n    ]\n  },\n  {\n    \"tag\": \"@return shortest distance between a and b\",\n    \"alternatives\": [\n      \"@return the smallest distance from a to b\",\n      \"@return the minimum distance between a and b\",\n      \"@return the closest distance between a and b\",\n      \"@return the smallest path length from a to b\",\n      \"@return the minimum route distance for a and b\"\n    ]\n  },\n  {\n    \"tag\": \"@return the diameter (longest of all the shortest paths) computed for the\\ngraph. If the graph is vertexless, return 0.0.\",\n    \"alternatives\": [\n      \"@return the calculated diameter (longest of all the shortest paths) for the\\ngraph. If the graph does not contain any vertices, return 0.0.\",\n      \"@return the computed longest path diameter among all the shortest paths in the\\ngiven graph. If the graph does not have any vertices, return 0.0.\",\n      \"@return the maximum length (longest of all the shortest paths) obtained for the\\ngiven graph. If the graph does not have any vertices, return 0.0.\",\n      \"@return the longest path diameter (maximum of all the shortest paths) determined for the graph.\\nIf the graph has no vertices, return 0.0.\",\n      \"@return the diameter of the graph, which is the longest among all the shortest paths.\\nIf the graph has no vertices, return 0.0.\"\n    ]\n  },\n  {\n    \"tag\": \"@param a From vertice\",\n    \"alternatives\": [\n      \"@param a Starting vertice\",\n      \"@param a Originating vertice\",\n      \"@param a Initial vertice\",\n      \"@param a Source vertice\",\n      \"@param a Primary vertice\"\n    ]\n  },\n  {\n    \"tag\": \"@param b To vertice\",\n    \"alternatives\": [\n      \"@param b Destination vertice\",\n      \"@param b Target vertice\",\n      \"@param b End vertice\",\n      \"@param b Final vertice\",\n      \"@param b Last vertice\"\n    ]\n  },\n  {\n    \"tag\": \"@return the path, or null if none found\",\n    \"alternatives\": [\n      \"@return the route, or null if no path is discovered\",\n      \"@return the track, or null if no path is detected\",\n      \"@return the sequence, or null if no path is identified\",\n      \"@return the trail, or null if no path is located\",\n      \"@return the itinerary, or null if no path is found\"\n    ]\n  },\n  {\n    \"tag\": \"@param v the originating vertex\",\n    \"alternatives\": [\n      \"@param v the starting vertex\",\n      \"@param v the source vertex\",\n      \"@param v the initial vertex\",\n      \"@param v the primary vertex\",\n      \"@param v the original vertex\"\n    ]\n  },\n  {\n    \"tag\": \"@return List of paths\",\n    \"alternatives\": [\n      \"@return Array of paths\",\n      \"@return Collection of paths\",\n      \"@return Set of paths\",\n      \"@return Group of paths\",\n      \"@return Assortment of paths\"\n    ]\n  },\n  {\n    \"tag\": \"@param element The element to add.\",\n    \"alternatives\": [\n      \"@param element Item to include.\",\n      \"@param element Object to insert.\",\n      \"@param element Entry to append.\",\n      \"@param element Component to append.\",\n      \"@param element Value to incorporate.\"\n    ]\n  },\n  {\n    \"tag\": \"@return map from element to parent element\",\n    \"alternatives\": [\n      \"@return mapping of element to its parent element\",\n      \"@return dictionary from element to its parent element\",\n      \"@return association from element to its parent element\",\n      \"@return correspondence from element to its parent element\",\n      \"@return relation from element to its parent element\"\n    ]\n  },\n  {\n    \"tag\": \"@return map from element to rank\",\n    \"alternatives\": [\n      \"@return mapping of element to its rank\",\n      \"@return dictionary from element to its rank\",\n      \"@return association from element to its rank\",\n      \"@return correspondence from element to its rank\",\n      \"@return relation from element to its rank\"\n    ]\n  },\n  {\n    \"tag\": \"@param element The element to find.\",\n    \"alternatives\": [\n      \"@param element Element to locate.\",\n      \"@param element Target element.\",\n      \"@param element Object to search for.\",\n      \"@param element Item to retrieve.\",\n      \"@param element Entry to look for.\"\n    ]\n  },\n  {\n    \"tag\": \"@return The element representing the set the element is in.\",\n    \"alternatives\": [\n      \"@return The element that denotes the set to which the element belongs.\",\n      \"@return The element indicating the set that contains the element.\",\n      \"@return The element signifying the set that includes the element.\",\n      \"@return The element that represents the collection that holds the element.\",\n      \"@return The element that denotes the group that contains the element.\"\n    ]\n  },\n  {\n    \"tag\": \"@param element1 The first element to union.\",\n    \"alternatives\": [\n      \"@param element1 First element to merge.\",\n      \"@param element1 Initial element to combine.\",\n      \"@param element1 Source element to unite.\",\n      \"@param element1 Primary element to amalgamate.\",\n      \"@param element1 Base element to fuse.\"\n    ]\n  },\n  {\n    \"tag\": \"@param element2 The second element to union.\",\n    \"alternatives\": [\n      \"@param element2 Second element to merge.\",\n      \"@param element2 Secondary element to combine.\",\n      \"@param element2 Destination element to unite.\",\n      \"@param element2 Final element to amalgamate.\",\n      \"@param element2 Target element to fuse.\"\n    ]\n  },\n  {\n    \"tag\": \"@param v1 the first vertex to be compared.\",\n    \"alternatives\": [\n      \"@param v1 the initial vertex to be compared.\",\n      \"@param v1 the starting vertex to be compared.\",\n      \"@param v1 the source vertex to be compared.\",\n      \"@param v1 the primary vertex to be compared.\",\n      \"@param v1 the original vertex to be compared.\"\n    ]\n  },\n  {\n    \"tag\": \"@param v2 the second vertex to be compared.\",\n    \"alternatives\": [\n      \"@param v2 the secondary vertex to be compared.\",\n      \"@param v2 the end vertex to be compared.\",\n      \"@param v2 the target vertex to be compared.\",\n      \"@param v2 the final vertex to be compared.\",\n      \"@param v2 the last vertex to be compared.\"\n    ]\n  },\n  {\n    \"tag\": \"@return -1 if <code>v1</code> comes before <code>v2</code>, +1 if <code>\\nv1</code> comes after <code>v2</code>, 0 if equal.\",\n    \"alternatives\": [\n      \"@return -1 if <code>v1</code> precedes <code>v2</code>, +1 if <code>\\nv1</code> succeeds <code>v2</code>, 0 if they are equal.\",\n      \"@return -1 if <code>v1</code> is prior to <code>v2</code>, +1 if <code>\\nv1</code> is subsequent to <code>v2</code>, 0 if they are equivalent.\",\n      \"@return -1 if <code>v1</code> is before <code>v2</code>, +1 if <code>\\nv1</code> is after <code>v2</code>, 0 if they are the same.\",\n      \"@return -1 if <code>v1</code> comes prior to <code>v2</code>, +1 if <code>\\nv1</code> comes subsequent to <code>v2</code>, 0 if they are identical.\",\n      \"@return -1 if <code>v1</code> precedes <code>v2</code>, +1 if <code>\\nv1</code> follows <code>v2</code>, 0 if they are on par.\"\n    ]\n  },\n  {\n    \"tag\": \"@param g graph with respect to which the degree is calculated.\",\n    \"alternatives\": [\n      \"@param g graph used to compute the degree.\",\n      \"@param g graph for which the degree is determined.\",\n      \"@param g graph that is considered when calculating the degree.\",\n      \"@param g graph from which the degree is derived.\",\n      \"@param g graph employed for the computation of the degree.\"\n    ]\n  }\n]"