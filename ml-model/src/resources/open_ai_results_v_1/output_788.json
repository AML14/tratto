"output=[\n  {\n    'tag': '@param starts Number of starts to perform. If {@code starts == 1},\\nthe {@link #optimize(OptimizationData[]) optimize} will return the\\nsame solution as the given {@code optimizer} would return.',\n    'alternatives': [\n      '@param starts Number of starts to execute. If {@code starts == 1}, the {@link #optimize(OptimizationData[]) optimize} method will produce the identical solution as the provided {@code optimizer} would produce.',\n      '@param starts Number of starting points to perform. In case {@code starts == 1}, the {@link #optimize(OptimizationData[]) optimize} operation will yield the same result as the specified {@code optimizer} would produce.',\n      '@param starts Number of initiation points to execute. If {@code starts == 1}, the {@link #optimize(OptimizationData[]) optimize} method will provide the same output as the given {@code optimizer} would provide.',\n      '@param starts The number of starts to be performed. In the event that {@code starts == 1}, the {@link #optimize(OptimizationData[]) optimize} method will return the identical solution as the provided {@code optimizer} would return.',\n      '@param starts Number of initializations to carry out. When {@code starts == 1}, the {@link #optimize(OptimizationData[]) optimize} method will return the same solution as the given {@code optimizer} would.'\n    ]\n  },\n  {\n    'tag': '@throws org.apache.commons.math3.exception.NumberIsTooLargeException if {@code min >= max}.',\n    'alternatives': [\n      '@throws org.apache.commons.math3.exception.NumberIsTooLargeException in case {@code min >= max}.',\n      '@throws org.apache.commons.math3.exception.NumberIsTooLargeException if the value of {@code min} is greater than or equal to {@code max}.',\n      '@throws org.apache.commons.math3.exception.NumberIsTooLargeException when {@code min >= max}.',\n      '@throws org.apache.commons.math3.exception.NumberIsTooLargeException if the minimum value {@code min} is greater than or equal to the maximum value {@code max}.',\n      '@throws org.apache.commons.math3.exception.NumberIsTooLargeException if the {@code min} value is greater than or equal to the {@code max} value.'\n    ]\n  },\n  {\n    'tag': '@return the point.',\n    'alternatives': [\n      '@return the point.',\n      '@return the specific point.',\n      '@return the particular point.',\n      '@return the designated point.',\n      '@return the given point.'\n    ]\n  },\n  {\n    'tag': '@return the stored value of the objective function.',\n    'alternatives': [\n      '@return the stored value of the objective function.',\n      '@return the value of the objective function that has been stored.',\n      '@return the objective function value that is stored.',\n      '@return the stored value of the function that represents the objective.',\n      '@return the value of the objective function stored.'\n    ]\n  },\n  {\n    'tag': '@param point Point.',\n    'alternatives': [\n      '@param point Point.',\n      '@param point The point.',\n      '@param point The specific point.',\n      '@param point The given point.',\n      '@param point The designated point.'\n    ]\n  },\n  {\n    'tag': '@param value Value of an objective function at the point',\n    'alternatives': [\n      '@param value Value of an objective function at the point',\n      '@param value Objective function value at the point',\n      '@param value The value of the objective function evaluated at the point',\n      '@param value The value of the function that represents the objective at the given point',\n      '@param value The value of the objective function at the specified point'\n    ]\n  },\n  {\n    'tag': '@param func Function whose optimum should be bracketed.',\n    'alternatives': [\n      '@param func Function whose optimum should be bracketed.',\n      '@param func Function that needs its optimum to be bracketed.',\n      '@param func Function that requires bracketing of its optimum.',\n      '@param func Function for which the optimum needs to be bracketed.',\n      '@param func Function that should have its optimum bracketed.'\n    ]\n  },\n  {\n    'tag': '@param goal {@link GoalType Goal type}.',\n    'alternatives': [\n      '@param goal {@link GoalType Goal type}.',\n      '@param goal Goal type (see {@link GoalType}).',\n      '@param goal The type of goal (refer to {@link GoalType}).',\n      '@param goal The desired goal type ({@link GoalType}).',\n      '@param goal Goal type (represented by {@link GoalType}).'\n    ]\n  },\n  {\n    'tag': '@param xA Initial point.',\n    'alternatives': [\n      '@param xA Initial point.',\n      '@param xA Starting point.',\n      '@param xA The point to initiate from.',\n      '@param xA The point where the execution begins.',\n      '@param xA The point to start from.'\n    ]\n  },\n  {\n    'tag': '@param xB Initial point.',\n    'alternatives': [\n      '@param xB Initial point.',\n      '@param xB Starting point.',\n      '@param xB The point to initiate from.',\n      '@param xB The point where the execution begins.',\n      '@param xB The point to start from.'\n    ]\n  },\n  {\n    'tag': '@throws TooManyEvaluationsException if the maximum number of evaluations\\nis exceeded.',\n    'alternatives': [\n      '@throws TooManyEvaluationsException if the maximum number of evaluations\\nis exceeded.',\n      '@throws TooManyEvaluationsException when the maximum number of evaluations\\nis surpassed.',\n      '@throws TooManyEvaluationsException if the number of evaluations surpasses the maximum limit.',\n      '@throws TooManyEvaluationsException if the maximum limit of evaluations is surpassed.',\n      '@throws TooManyEvaluationsException if the maximum number of evaluations is surpassed.'\n    ]\n  },\n  {\n    'tag': '@return the number of evalutations.',\n    'alternatives': [\n      '@return the number of evalutations.',\n      '@return the total evaluations count.',\n      '@return the count of evaluations.',\n      '@return the number of performed evaluations.',\n      '@return the number of evaluations conducted.'\n    ]\n  },\n  {\n    'tag': '@return the lower bound of the bracket.',\n    'alternatives': [\n      '@return the lower bound of the bracket.',\n      '@return the minimum bracket bound.',\n      '@return the bracket lower limit.',\n      '@return the lower limit of the bracket.',\n      '@return the bottom bound of the bracket.'\n    ]\n  },\n  {\n    'tag': '@return function value at {@link #getLo()}',\n    'alternatives': [\n      '@return function value at {@link #getLo()}',\n      '@return the function value at {@link #getLo()}',\n      '@return the value of the function at {@link #getLo()}',\n      '@return the function value obtained at {@link #getLo()}',\n      '@return the value of the function when {@link #getLo()} is evaluated'\n    ]\n  },\n  {\n    'tag': '@return the higher bound of the bracket.',\n    'alternatives': [\n      '@return the higher bound of the bracket.',\n      '@return the maximum bracket bound.',\n      '@return the bracket upper limit.',\n      '@return the upper limit of the bracket.',\n      '@return the top bound of the bracket.'\n    ]\n  },\n  {\n    'tag': '@return function value at {@link #getHi()}',\n    'alternatives': [\n      '@return function value at {@link #getHi()}',\n      '@return the function value at {@link #getHi()}',\n      '@return the value of the function at {@link #getHi()}',\n      '@return the function value obtained at {@link #getHi()}',\n      '@return the value of the function when {@link #getHi()} is evaluated'\n    ]\n  },\n  {\n    'tag': '@return a point in the middle of the bracket.',\n    'alternatives': [\n      '@return a point in the middle of the bracket.',\n      '@return a point that lies in the center of the bracket.',\n      '@return a point located in the middle of the bracket.',\n      '@return a point that is positioned in the middle of the bracket.',\n      '@return a point situated in the middle of the bracket.'\n    ]\n  },\n  {\n    'tag': '@return function value at {@link #getMid()}',\n    'alternatives': [\n      '@return function value at {@link #getMid()}',\n      '@return the function value at {@link #getMid()}',\n      '@return the value of the function at {@link #getMid()}',\n      '@return the function value obtained at {@link #getMid()}',\n      '@return the value of the function when {@link #getMid()} is evaluated'\n    ]\n  },\n  {\n    'tag': '@param f Function.',\n    'alternatives': [\n      '@param f Function.',\n      '@param f The function.',\n      '@param f The given function.',\n      '@param f The designated function.',\n      '@param f The specified function.'\n    ]\n  },\n  {\n    'tag': '@param x Argument.',\n    'alternatives': [\n      '@param x Argument.',\n      '@param x The argument.',\n      '@param x The given argument.',\n      '@param x The designated argument.',\n      '@param x The specified argument.'\n    ]\n  },\n  {\n    'tag': '@return {@code f(x)}',\n    'alternatives': [\n      '@return {@code f(x)}',\n      '@return the value of {@code f(x)}',\n      '@return the result of evaluating {@code f(x)}',\n      '@return the output of {@code f(x)}',\n      '@return the computation of {@code f(x)}'\n    ]\n  },\n  {\n    'tag': '@throws TooManyEvaluationsException if the maximal number of evaluations is\\nexceeded.',\n    'alternatives': [\n      '@throws TooManyEvaluationsException if the maximal number of evaluations is\\nexceeded.',\n      '@throws TooManyEvaluationsException when the maximum number of evaluations\\nis surpassed.',\n      '@throws TooManyEvaluationsException when the maximum number of evaluations\\nis exceeded.',\n      '@throws TooManyEvaluationsException if the maximum number of evaluations\\nis surpassed.',\n      '@throws TooManyEvaluationsException if the number of evaluations exceeds the specified maximum.'\n    ]\n  },\n  {\n    'tag': '@param growLimit Expanding factor.',\n    'alternatives': [\n      '@param growLimit Expanding factor.',\n      '@param growLimit Factor for expansion.',\n      '@param growLimit Growth factor.',\n      '@param growLimit Expansion multiplier.',\n      '@param growLimit Multiplicative factor for growth.'\n    ]\n  },\n  {\n    'tag': '@param maxEvaluations Maximum number of evaluations allowed for finding\\na bracketing interval.',\n    'alternatives': [\n      '@param maxEvaluations Maximum number of evaluations allowed for finding\\na bracketing interval.',\n      '@param maxEvaluations Maximum limit of evaluations when searching for a bracketing interval.',\n      '@param maxEvaluations Maximum count of evaluations permitted for locating\\na bracketing interval.',\n      '@param maxEvaluations Maximum number of evaluations that can be performed to determine\\na bracketing interval.',\n      '@param maxEvaluations The maximum number of evaluations that can be executed to find a bracketing interval.'\n    ]\n  }\n]"