"output = [\n  {\n    'tag': '@param gamma Contraction coefficient.',\n    'alternatives': [\n      '@param gamma Contraction factor.',\n      '@param gamma Coefficient of contraction.',\n      '@param gamma The contraction coefficient.',\n    ]\n  },\n  {\n    'tag': '@param sigma Shrinkage coefficient.',\n    'alternatives': [\n      '@param sigma Coefficient of shrinkage.',\n      '@param sigma Shrink factor.',\n      '@param sigma The shrinkage coefficient.',\n    ]\n  },\n  {\n    'tag': '@param referenceSimplex Reference simplex. See\\n{@link AbstractSimplex#AbstractSimplex(double[][])}.',\n    'alternatives': [\n      '@param referenceSimplex Reference simplex. Please refer to\\n{@link AbstractSimplex#AbstractSimplex(double[][])}.',\n      '@param referenceSimplex Reference simplex. Use\\n{@link AbstractSimplex#AbstractSimplex(double[][])} for more details.',\n      '@param referenceSimplex Reference simplex. Check out\\n{@link AbstractSimplex#AbstractSimplex(double[][])} for information.',\n    ]\n  },\n  {\n    'tag': '@param rho Reflection coefficient.',\n    'alternatives': [\n      '@param rho Coefficient of reflection.',\n      '@param rho Reflectivity coefficient.',\n      '@param rho The reflection coefficient.',\n    ]\n  },\n  {\n    'tag': '@param khi Expansion coefficient.',\n    'alternatives': [\n      '@param khi Coefficient of expansion.',\n      '@param khi Expand factor.',\n      '@param khi The expansion coefficient.',\n    ]\n  },\n  {\n    'tag': '@param point point to check',\n    'alternatives': [\n      '@param point Point to verify.',\n      '@param point The point that needs to be checked.',\n      '@param point The point that should be examined.',\n    ]\n  },\n  {\n    'tag': '@param maxOffset offset below which a cut sub-hyperplane is considered\\nclose to the point (in absolute value)',\n    'alternatives': [\n      '@param maxOffset Absolute value of the maximum offset\\nbelow which a cut sub-hyperplane is considered close to the point.',\n      '@param maxOffset Maximum allowed offset for a cut sub-hyperplane\\nto be regarded as close to the point.',\n      '@param maxOffset The maximum offset within which a cut sub-hyperplane\\nis considered close to the point.',\n    ]\n  },\n  {\n    'tag': '@return close cells (may be empty if all cut sub-hyperplanes are farther\\nthan maxOffset from the point)',\n    'alternatives': [\n      '@return close cells (empty if all cut sub-hyperplanes are\\nfurther than maxOffset from the point).',\n      '@return close cells (can be empty if all cut sub-hyperplanes\\nare at a distance greater than maxOffset from the point).',\n      '@return close cells (could be empty if all cut sub-hyperplanes\\nare more distant than maxOffset from the point).',\n    ]\n  },\n  {\n    'tag': '@param close list to fill',\n    'alternatives': [\n      '@param close List to be populated.',\n      '@param close List that needs to be filled.',\n      '@param close List to fill in.',\n    ]\n  },\n  {\n    'tag': '@param tree other tree to merge with the instance (will be\\n<em>unusable</em> after the operation, as well as the\\ninstance itself)',\n    'alternatives': [\n      '@param tree Another tree to merge with the instance (both the instance and\\nthe tree will become unusable after the operation).',\n      '@param tree Another tree to merge with the instance (the instance and\\nthe tree will not be usable after the operation).',\n      '@param tree Another tree to merge with the instance (both the instance and\\ntree will be rendered useless after the operation).',\n    ]\n  },\n  {\n    'tag': '@param leafMerger object implementing the final merging phase\\n(this is where the semantic of the operation occurs, generally\\ndepending on the attribute of the leaf node)',\n    'alternatives': [\n      '@param leafMerger Object that performs the final merging stage\\n(this is where the operation's essence lies, usually\\nbased on the attribute of the leaf node).',\n      '@param leafMerger Object responsible for carrying out the last merging step\\n(where the operation's meaning is determined, typically\\nbased on the attribute of the leaf node).',\n      '@param leafMerger Object that executes the final merging step\\n(where the operation's semantics are applied, typically\\ndepending on the attribute of the leaf node).',\n    ]\n  },\n  {\n    'tag': '@return a new tree, result of <code>instance &lt;op&gt;\\ntree</code>, this value can be ignored if parentTree is not null\\nsince all connections have already been established',\n    'alternatives': [\n      '@return a new tree obtained by performing <code>instance &lt;op&gt;\\ntree</code>, this value can be neglected if parentTree is not\\nnull because all connections have already been established.',\n      '@return a new tree resulting from the operation <code>instance &lt;op&gt;\\ntree</code>. This value is not important if parentTree is\\nnot null, as all connections have already been set up.',\n      '@return a new tree that is the outcome of <code>instance &lt;op&gt;\\ntree</code>. This return value can be disregarded if parentTree\\nis not null, since all connections have already been established.',\n    ]\n  },\n  {\n    'tag': '@param sub partitioning sub-hyperplane, must be already clipped\\nto the convex region represented by the instance, will be used as\\nthe cut sub-hyperplane of the returned tree',\n    'alternatives': [\n      '@param sub Clipped partitioning sub-hyperplane that should already\\nbe restricted to the convex region represented by the instance. It\\nwill serve as the cut sub-hyperplane of the resulting tree.',\n      '@param sub Partitioning sub-hyperplane that has already been\\nclipped to the convex region represented by the instance. It will\\nbe utilized as the cut sub-hyperplane of the returned tree.',\n      '@param sub Clipped sub-hyperplane for partitioning, which must\\nalready be limited to the convex region represented by the instance.\\nIt will function as the cut sub-hyperplane of the tree that is returned.',\n    ]\n  },\n  {\n    'tag': '@return a tree having the specified sub-hyperplane as its cut\\nsub-hyperplane, the two parts of the split instance as its two\\nsub-trees and a null parent',\n    'alternatives': [\n      '@return a tree with the given sub-hyperplane serving as its\\nsplitting sub-hyperplane, the two segments of the split instance\\nas its sub-trees, and a null parent.',\n      '@return a tree that includes the provided sub-hyperplane as its\\ncut sub-hyperplane, the two portions of the divided instance as\\nits sub-trees, and a null parent.',\n      '@return a tree that possesses the specified sub-hyperplane as its\\ncut sub-hyperplane, the two parts of the split instance as its\\ntwo sub-trees, and a null parent.',\n    ]\n  },\n  {\n    'tag': '@param parentTree parent tree to connect to (may be null)',\n    'alternatives': [\n      '@param parentTree The parent tree to be connected to (can be null).',\n      '@param parentTree The tree that will be linked as the parent (can\\nbe null).',\n      '@param parentTree The tree to connect to as the parent (can be null).',\n    ]\n  },\n  {\n    'tag': '@param isPlusChild if true and if parentTree is not null, the\\nresulting tree should be the plus child of its parent, ignored if\\nparentTree is null',\n    'alternatives': [\n      '@param isPlusChild If true and the parentTree is not null, the\\nproduced tree should be the positive child of its parent. It\\nis ignored if parentTree is null.',\n      '@param isPlusChild If set to true and parentTree is not null,\\nthe resulting tree will be the plus child of its parent. If\\nparentTree is null, it will be ignored.',\n      '@param isPlusChild When true and parentTree is not null, the\\ngenerated tree should be the plus child of its parent. It is\\nconsidered irrelevant if parentTree is null.',\n    ]\n  }\n]\n\nPlease note that due to the randomness of synonyms and paraphrasing, the alternatives provided may not be perfect or always sound natural."