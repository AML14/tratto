"[\n{\n  \"tag\": \"@param classname name of the type, in JVML format\",\n  \"alternatives\": [\n    \"@param classname name of the kind, in JVML format\",\n    \"@param classname type name, in JVML format\",\n    \"@param classname the name of the type, in JVML format\",\n    \"@param classname name of the category, in JVML format\",\n    \"@param classname type identifier, in JVML format\"\n  ]\n},\n{\n  \"tag\": \"@return name of the type, in Java format\",\n  \"alternatives\": [\n    \"@return the name of the type, as per Java format\",\n    \"@return type name in Java format\",\n    \"@return the Java format name of the type\",\n    \"@return the type name in Java representation\",\n    \"@return name of the type in the form of Java format\"\n  ]\n},\n{\n  \"tag\": \"@param arglist an argument list, in JVML format\",\n  \"alternatives\": [\n    \"@param arglist a list of arguments, in JVML format\",\n    \"@param arglist list of arguments, in JVML format\",\n    \"@param arglist list of arguments for the operation, in JVML format\",\n    \"@param arglist arguments passed, in JVML format\",\n    \"@param arglist collection of arguments, in JVML format\"\n  ]\n},\n{\n  \"tag\": \"@return argument list, in Java format\",\n  \"alternatives\": [\n    \"@return a list of arguments, in Java format\",\n    \"@return list of arguments, in Java format\",\n    \"@return list of arguments for the operation, in Java format\",\n    \"@return arguments passed, in Java format\",\n    \"@return collection of arguments, in Java format\"\n  ]\n},\n{\n  \"tag\": \"@param dir directory to add to the system classpath\",\n  \"alternatives\": [\n    \"@param dir directory to include in the system classpath\",\n    \"@param dir the directory to append to the system classpath\",\n    \"@param dir directory to be added to the system classpath\",\n    \"@param dir directory to incorporate into the system classpath\",\n    \"@param dir the path of the directory to add to the system classpath\"\n  ]\n},\n{\n  \"tag\": \"@param filename file whose size to count\",\n  \"alternatives\": [\n    \"@param filename file to calculate the size of\",\n    \"@param filename file to determine the size of\",\n    \"@param filename file for which to calculate the size\",\n    \"@param filename the file to count the size of\",\n    \"@param filename file to evaluate the size of\"\n  ]\n},\n{\n  \"tag\": \"@return number of lines in filename\",\n  \"alternatives\": [\n    \"@return count of lines in filename\",\n    \"@return the total lines in the file named filename\",\n    \"@return the number of lines found in filename\",\n    \"@return the line count in the file filename\",\n    \"@return number of lines retrieved from filename\"\n  ]\n},\n{\n  \"tag\": \"@throws IOException if there is trouble reading the file\",\n  \"alternatives\": [\n    \"@throws IOException if any issue occurs during file reading\",\n    \"@throws IOException if an error happens while reading the file\",\n    \"@throws IOException in case of file reading difficulties\",\n    \"@throws IOException if there is a problem when reading the file\",\n    \"@throws IOException if errors arise during file retrieval\"\n  ]\n},\n{\n  \"tag\": \"@param filename the file to infer a line separator from\",\n  \"alternatives\": [\n    \"@param filename file to deduce the line separator from\",\n    \"@param filename the file from which to derive the line separator\",\n    \"@param filename the location to extract a line separator from\",\n    \"@param filename file to determine the line separator from\",\n    \"@param filename file to discover the line separator from\"\n  ]\n},\n{\n  \"tag\": \"@return the inferred line separator used in filename\",\n  \"alternatives\": [\n    \"@return the line separator presumed to be used in filename\",\n    \"@return the deduced line separator employed in filename\",\n    \"@return the line separator found and used in filename\",\n    \"@return the line separator inferred for the file filename\",\n    \"@return the line separator detected and utilized in filename\"\n  ]\n},\n{\n  \"tag\": \"@throws IOException if there is trouble reading the file\",\n  \"alternatives\": [\n    \"@throws IOException if any issue occurs during file reading\",\n    \"@throws IOException if an error happens while reading the file\",\n    \"@throws IOException in case of file reading difficulties\",\n    \"@throws IOException if there is a problem when reading the file\",\n    \"@throws IOException if errors arise during file retrieval\"\n  ]\n},\n{\n  \"tag\": \"@param file the file to infer a line separator from\",\n  \"alternatives\": [\n    \"@param file file to deduce the line separator from\",\n    \"@param file the file from which to derive the line separator\",\n    \"@param file the location to extract a line separator from\",\n    \"@param file file to determine the line separator from\",\n    \"@param file file to discover the line separator from\"\n  ]\n},\n{\n  \"tag\": \"@return the inferred line separator used in filename\",\n  \"alternatives\": [\n    \"@return the line separator presumed to be used in filename\",\n    \"@return the deduced line separator employed in filename\",\n    \"@return the line separator found and used in filename\",\n    \"@return the line separator inferred for the file filename\",\n    \"@return the line separator detected and utilized in filename\"\n  ]\n},\n{\n  \"tag\": \"@throws IOException if there is trouble reading the file\",\n  \"alternatives\": [\n    \"@throws IOException if any issue occurs during file reading\",\n    \"@throws IOException if an error happens while reading the file\",\n    \"@throws IOException in case of file reading difficulties\",\n    \"@throws IOException if there is a problem when reading the file\",\n    \"@throws IOException if errors arise during file retrieval\"\n  ]\n},\n{\n  \"tag\": \"@param file1 first file to compare\",\n  \"alternatives\": [\n    \"@param file1 initial file to compare\",\n    \"@param file1 first file for comparison\",\n    \"@param file1 the primary file to be compared\",\n    \"@param file1 file that will serve as a basis for comparison\",\n    \"@param file1 the file that is used as the first basis for comparison\"\n  ]\n},\n{\n  \"tag\": \"@param file2 second file to compare\",\n  \"alternatives\": [\n    \"@param file2 subsequent file to compare\",\n    \"@param file2 second file for comparison\",\n    \"@param file2 the secondary file to be compared\",\n    \"@param file2 file that will be compared against the first file\",\n    \"@param file2 the file that is used as the second basis for comparison\"\n  ]\n},\n{\n  \"tag\": \"@param trimLines if true, call String.trim on each line before comparing\",\n  \"alternatives\": [\n    \"@param trimLines true if each line should be trimmed using String.trim before comparison\",\n    \"@param trimLines specify whether to trim each line using String.trim before comparing\",\n    \"@param trimLines if set to true, apply String.trim on each line before comparing\",\n    \"@param trimLines whether to invoke String.trim on each line before comparing\",\n    \"@param trimLines indicates whether or not String.trim should be called on each line before comparison\"\n  ]\n},\n{\n  \"tag\": \"@return true iff the files have the same contents\",\n  \"alternatives\": [\n    \"@return true if the files contain identical data\",\n    \"@return true if the files have identical contents\",\n    \"@return true if the files share the same content\",\n    \"@return true if the files possess the same data\",\n    \"@return true if the files exhibit equivalent content\"\n  ]\n},\n{\n  \"tag\": \"@param file the file to create and write\",\n  \"alternatives\": [\n    \"@param file file to be created and written to\",\n    \"@param file the file that will be generated and written to\",\n    \"@param file the file that will be newly created and written\",\n    \"@param file the file used for creating and writing\",\n    \"@param file the file to instantiate and write\"\n  ]\n},\n{\n  \"tag\": \"@return true iff the file can be created and written\",\n  \"alternatives\": [\n    \"@return true if the file can be created and written to\",\n    \"@return true if it is possible to create and write to the file\",\n    \"@return true if the file is eligible for creation and writing\",\n    \"@return true if it is feasible to create and write to the file\",\n    \"@return true if the ability exists to create and write to the file\"\n  ]\n},\n{\n  \"tag\": \"@param prefix the prefix string to be used in generating the file's\\n name; must be at least three characters long\",\n  \"alternatives\": [\n    \"@param prefix the prefix string to generate the file's\\n name; must be at least three characters long\",\n    \"@param prefix the string that will serve as the prefix when generating the file's\\n name; must be a minimum of three characters long\",\n    \"@param prefix the string used as the prefix to generate the file's\\n name; must have a length of at least three characters\",\n    \"@param prefix the prefix string for creating the file's\\n name; must have a minimum length of three characters\",\n    \"@param prefix the string that must be at least three characters long and will be used as the prefix in generating the file's\\n name\"\n  ]\n},\n{\n  \"tag\": \"@param suffix the suffix string to be used in generating the file's\\n name; may be null, in which case the suffix \\\".tmp\\\" will be used Returns:\\n An abstract pathname denoting a newly-created empty file\",\n  \"alternatives\": [\n    \"@param suffix the string that will be appended to the file's\\n name when generating it; can be null, in which case the suffix \\\".tmp\\\" will be utilized Returns:\\n An abstract pathname specifying a newly-created empty file\",\n    \"@param suffix the string used as the file's\\n name suffix when generating it; may be null, if omitted the suffix \\\".tmp\\\" will be employed Returns:\\n An abstract pathname representing a newly-created empty file\",\n    \"@param suffix the string that must be added to the file's\\n name when generating it; it can be null, but if so, the suffix \\\".tmp\\\" will be used instead Returns:\\n An abstract pathname indicating the creation of an empty file\",\n    \"@param suffix the string that will be used as the suffix in the file's\\n name when generating it; it can be null, in which case the suffix \\\".tmp\\\" will be chosen Returns:\\n An abstract pathname designating a newly-created empty file\",\n    \"@param suffix the suffix string for generating the file's\\n name; may be null, if omitted the suffix will default to \\\".tmp\\\" Returns:\\n An abstract pathname representing a newly-created empty file\"\n  ]\n},\n{\n  \"tag\": \"@return a File representing the newly-created temporary directory\",\n  \"alternatives\": [\n    \"@return a File object that represents the recently-created temporary directory\",\n    \"@return a File instance representing the newly-generated temporary directory\",\n    \"@return a File representing the newly-made temporary directory\",\n    \"@return a File object that denotes the newly-created temporary directory\",\n    \"@return a File instance indicating the creation of a temporary directory\"\n  ]\n},\n{\n  \"tag\": \"@throws IllegalArgumentException If the prefix argument contains fewer\\n than three characters\",\n  \"alternatives\": [\n    \"@throws IllegalArgumentException If the prefix argument has less than three\\n characters\",\n    \"@throws IllegalArgumentException If the prefix argument is shorter than three\\n characters\",\n    \"@throws IllegalArgumentException If the prefix argument consists of fewer than three\\n characters\",\n    \"@throws IllegalArgumentException If the prefix argument is not at least three\\n characters long\",\n    \"@throws IllegalArgumentException If the prefix argument does not contain a minimum of three\\n characters\"\n  ]\n},\n{\n  \"tag\": \"@throws IOException If a file could not be created\",\n  \"alternatives\": [\n    \"@throws IOException If a file creation failed\",\n    \"@throws IOException If the creation of a file was not successful\",\n    \"@throws IOException If it was not possible to create a file\",\n    \"@throws IOException If a file could not be generated\",\n    \"@throws IOException If the attempt to create a file encountered an error\"\n  ]\n}\n]"