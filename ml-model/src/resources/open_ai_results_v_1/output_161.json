"[\n  {\n    'tag': '@param m Symmetric, positive-definite (weight) matrix.',\n    'alternatives': [\n      '@param m weight matrix that is symmetric and positive-definite.',\n      '@param m Positive-definite symmetric matrix (weight)',\n      '@param m Weight matrix that is both symmetric and positive-definite.',\n      '@param m Symmetric matrix with positive-definite weights.',\n      '@param m Symmetric and positive-definite matrix (weight).'\n    ]\n  },\n  {\n    'tag': '@return the square-root of the weight matrix.',\n    'alternatives': [\n      '@return the square root of the weight matrix.',\n      '@return the square root value of the weight matrix.',\n      '@return the weight matrix's square root.',\n      '@return the square root of the matrix that represents the weight.',\n      '@return the square root of the matrix that contains the weight.'\n    ]\n  },\n  {\n    'tag': '@param value the vector value function',\n    'alternatives': [\n      '@param value the function that computes the vector value.',\n      '@param value a function that calculates the value of the vector.',\n      '@param value the function responsible for computing the vector value.',\n      '@param value the function that evaluates the value of the vector.',\n      '@param value a function that determines the value of the vector.'\n    ]\n  },\n  {\n    'tag': '@param jacobian the Jacobian function',\n    'alternatives': [\n      '@param jacobian the function representing the Jacobian.',\n      '@param jacobian a function that computes the Jacobian.',\n      '@param jacobian the function responsible for calculating the Jacobian.',\n      '@param jacobian the function that evaluates the Jacobian.',\n      '@param jacobian a function that determines the Jacobian.'\n    ]\n  },\n  {\n    'tag': '@return a function that computes both at the same time',\n    'alternatives': [\n      '@return a function that calculates both simultaneously.',\n      '@return a function that evaluates both concurrently.',\n      '@return a function that computes both concurrently.',\n      '@return a function that determines both at once.',\n      '@return a function that calculates both values simultaneously.'\n    ]\n  },\n  {\n    'tag': '@param params Point.',\n    'alternatives': [\n      '@param params a point in space.',\n      '@param params a point in the coordinate system.',\n      '@param params a point represented by its coordinates.',\n      '@param params a point defined by its location.',\n      '@param params a location represented as a point.'\n    ]\n  },\n  {\n    'tag': '@return the value at the given point.',\n    'alternatives': [\n      '@return the value corresponding to the specified point.',\n      '@return the value associated with the provided point.',\n      '@return the value obtained at the given point.',\n      '@return the value derived from the supplied point.',\n      '@return the value calculated for the given point.'\n    ]\n  },\n  {\n    'tag': '@param params Point.',\n    'alternatives': [\n      '@param params a point in space.',\n      '@param params a point in the coordinate system.',\n      '@param params a point represented by its coordinates.',\n      '@param params a point defined by its location.',\n      '@param params a location represented as a point.'\n    ]\n  },\n  {\n    'tag': '@return the Jacobian at the given point.',\n    'alternatives': [\n      '@return the Jacobian corresponding to the specified point.',\n      '@return the Jacobian associated with the provided point.',\n      '@return the Jacobian obtained at the given point.',\n      '@return the Jacobian derived from the supplied point.',\n      '@return the Jacobian calculated for the given point.'\n    ]\n  },\n  {\n    'tag': '@param point the abscissae',\n    'alternatives': [\n      '@param point the x-coordinates.',\n      '@param point the independent variable.',\n      '@param point the horizontal positions.',\n      '@param point the input values.',\n      '@param point the points on the x-axis.'\n    ]\n  },\n  {\n    'tag': '@return the values and their Jacobian of this vector valued function.',\n    'alternatives': [\n      '@return the function values and their respective Jacobians of this vector-valued function.',\n      '@return the function values and their Jacobians for this vector-valued function.',\n      '@return the values and their corresponding Jacobians of this vector-valued function.',\n      '@return the values and the Jacobian matrix of this vector-valued function.',\n      '@return the function values and their respective Jacobians obtained from this vector-valued function.'\n    ]\n  },\n  {\n    'tag': '@return a new {@link LeastSquaresProblem}.',\n    'alternatives': [\n      '@return a freshly created {@link LeastSquaresProblem}.',\n      '@return a brand new instance of {@link LeastSquaresProblem}.',\n      '@return a newly generated {@link LeastSquaresProblem}.',\n      '@return a newly constructed {@link LeastSquaresProblem}.',\n      '@return a newly created {@link LeastSquaresProblem} object.'\n    ]\n  },\n  {\n    'tag': '@param newMaxEvaluations the maximum number of evaluations permitted.',\n    'alternatives': [\n      '@param newMaxEvaluations the maximum allowed evaluations.',\n      '@param newMaxEvaluations the maximum number of permitted evaluations.',\n      '@param newMaxEvaluations the maximum evaluations that can be performed.',\n      '@param newMaxEvaluations the maximum number of evaluations allowed.',\n      '@param newMaxEvaluations the limit on the number of evaluations.'\n    ]\n  },\n  {\n    'tag': '@return this',\n    'alternatives': [\n      '@return the current object.',\n      '@return the current instance.',\n      '@return this object.',\n      '@return the same object.',\n      '@return this instance.'\n    ]\n  },\n  {\n    'tag': '@param newMaxIterations the maximum number of iterations permitted.',\n    'alternatives': [\n      '@param newMaxIterations the maximum allowed iterations.',\n      '@param newMaxIterations the maximum number of permitted iterations.',\n      '@param newMaxIterations the maximum iterations that can be performed.',\n      '@param newMaxIterations the maximum number of iterations allowed.',\n      '@param newMaxIterations the limit on the number of iterations.'\n    ]\n  },\n  {\n    'tag': '@return this',\n    'alternatives': [\n      '@return the current object.',\n      '@return the current instance.',\n      '@return this object.',\n      '@return the same object.',\n      '@return this instance.'\n    ]\n  },\n  {\n    'tag': '@param newChecker the convergence checker.',\n    'alternatives': [\n      '@param newChecker the checker for convergence.',\n      '@param newChecker the convergence validation object.',\n      '@param newChecker the object to check for convergence.',\n      '@param newChecker the convergence testing mechanism.',\n      '@param newChecker the convergence verification module.'\n    ]\n  },\n  {\n    'tag': '@return this',\n    'alternatives': [\n      '@return the current object.',\n      '@return the current instance.',\n      '@return this object.',\n      '@return the same object.',\n      '@return this instance.'\n    ]\n  },\n  {\n    'tag': '@param newChecker the convergence checker.',\n    'alternatives': [\n      '@param newChecker the checker for convergence.',\n      '@param newChecker the convergence validation object.',\n      '@param newChecker the object to check for convergence.',\n      '@param newChecker the convergence testing mechanism.',\n      '@param newChecker the convergence verification module.'\n    ]\n  },\n  {\n    'tag': '@return this',\n    'alternatives': [\n      '@return the current object.',\n      '@return the current instance.',\n      '@return this object.',\n      '@return the same object.',\n      '@return this instance.'\n    ]\n  },\n  {\n    'tag': '@param value the model function value',\n    'alternatives': [\n      '@param value the value of the model function.',\n      '@param value the function value of the model.',\n      '@param value the value obtained from the model function.',\n      '@param value the output value of the model function.',\n      '@param value the calculated value of the model function.'\n    ]\n  },\n  {\n    'tag': '@param jacobian the Jacobian of {@code value}',\n    'alternatives': [\n      '@param jacobian the Jacobian of the provided {@code value}.',\n      '@param jacobian the Jacobian corresponding to {@code value}.',\n      '@param jacobian the Jacobian derived from {@code value}.',\n      '@param jacobian the Jacobian calculated for {@code value}.',\n      '@param jacobian the Jacobian obtained from {@code value}.'\n    ]\n  },\n  {\n    'tag': '@return this',\n    'alternatives': [\n      '@return the current object.',\n      '@return the current instance.',\n      '@return this object.',\n      '@return the same object.',\n      '@return this instance.'\n    ]\n  },\n  {\n    'tag': '@param newModel the model function value and Jacobian',\n    'alternatives': [\n      '@param newModel the value of the model function and its Jacobian.',\n      '@param newModel the value and Jacobian of the model function.',\n      '@param newModel the value and Jacobian derived from the model function.',\n      '@param newModel the output value and Jacobian of the model function.',\n      '@param newModel the calculated value and Jacobian of the model function.'\n    ]\n  },\n  {\n    'tag': '@return this',\n    'alternatives': [\n      '@return the current object.',\n      '@return the current instance.',\n      '@return this object.',\n      '@return the same object.',\n      '@return this instance.'\n    ]\n  }\n]"