"output = [\n  {\n    'tag': '@return the validated values.',\n    'alternatives': [\n      '@return the validated data.',\n      '@return the values that have been validated.',\n      '@return the values after the validation process.',\n      '@return the values that passed the validation.',\n      '@return the verified values.'\n    ]\n  },\n  {\n    'tag': '@return a new instance.',\n    'alternatives': [\n      '@return a new object.',\n      '@return a fresh instance.',\n      '@return a newly created instance.',\n      '@return a newly instantiated object.',\n      '@return a newly generated instance.'\n    ]\n  },\n  {\n    'tag': '@param newCostRelativeTolerance Desired relative error in the sum of squares.',\n    'alternatives': [\n      '@param newCostRelativeTolerance Expected relative discrepancy in the sum of squares.',\n      '@param newCostRelativeTolerance Relative error desired in the sum of squares.',\n      '@param newCostRelativeTolerance Relative error expected in the sum of squares.',\n      '@param newCostRelativeTolerance Desired relative inaccuracy in the sum of squares.',\n      '@param newCostRelativeTolerance Desired relative deviation in the sum of squares.'\n    ]\n  },\n  {\n    'tag': '@param newParRelativeTolerance Desired relative error in the approximate solution\\nparameters.',\n    'alternatives': [\n      '@param newParRelativeTolerance Expected relative discrepancy in the approximate solution\\nparameters.',\n      '@param newParRelativeTolerance Relative error desired in the approximate solution\\nparameters.',\n      '@param newParRelativeTolerance Relative error expected in the approximate solution\\nparameters.',\n      '@param newParRelativeTolerance Desired relative inaccuracy in the approximate solution\\nparameters.',\n      '@param newParRelativeTolerance Desired relative deviation in the approximate solution\\nparameters.'\n    ]\n  },\n  {\n    'tag': '@param newOrthoTolerance Desired max cosine on the orthogonality between\\nthe function vector and the columns of the Jacobian.',\n    'alternatives': [\n      '@param newOrthoTolerance Desired maximum cosine on the orthogonality between\\nthe function vector and the columns of the Jacobian.',\n      '@param newOrthoTolerance Desired highest cosine on the orthogonality between\\nthe function vector and the columns of the Jacobian.',\n      '@param newOrthoTolerance Desired maximum cosine value for the orthogonality between\\nthe function vector and the columns of the Jacobian.',\n      '@param newOrthoTolerance Desired highest cosine value for the orthogonality between\\nthe function vector and the columns of the Jacobian.',\n      '@param newOrthoTolerance Maximum allowed cosine between the function vector and the columns of the Jacobian.'\n    ]\n  },\n  {\n    'tag': '@param newQRRankingThreshold Desired threshold for QR ranking.\\nIf the squared norm of a column vector is smaller or equal to this\\nthreshold during QR decomposition, it is considered to be a zero vector\\nand hence the rank of the matrix is reduced.',\n    'alternatives': [\n      '@param newQRRankingThreshold Desired threshold for QR ranking.\\nIf the squared norm of a column vector is less than or equal to this\\nthreshold during QR decomposition, it is considered to be a zero vector\\nand thus the rank of the matrix is decreased.',\n      '@param newQRRankingThreshold Desired threshold for QR ranking.\\nIf the squared norm of a column vector is equal to or smaller than this\\nthreshold during QR decomposition, it is considered to be a zero vector\\nand, as a result, the rank of the matrix is reduced.',\n      '@param newQRRankingThreshold Desired threshold for QR ranking.\\nIf the squared norm of a column vector is less than or equal to this\\nthreshold during QR decomposition, it is regarded as a zero vector\\nand therefore the rank of the matrix is decreased.',\n      '@param newQRRankingThreshold Desired threshold for QR ranking.\\nIf the squared norm of a column vector is smaller or equal to this\\nthreshold during QR decomposition, it is classified as a zero vector\\nand, consequently, the rank of the matrix is lowered.',\n      '@param newQRRankingThreshold Desired threshold for QR ranking.\\nIf the squared norm of a column vector is equal to or smaller than this\\nthreshold during QR decomposition, it is considered to be a zero vector\\nand hence the rank of the matrix is reduced.'\n    ]\n  },\n  {\n    'tag': '@return the parameter\\'s value.',\n    'alternatives': [\n      '@return the value of the parameter.',\n      '@return the value associated with the parameter.',\n      '@return the stored value of the parameter.',\n      '@return the assigned value of the parameter.',\n      '@return the retrieved value of the parameter.'\n    ]\n  },\n  {\n    'tag': '@param qy Array containing qTy.',\n    'alternatives': [\n      '@param qy Array that holds qTy.',\n      '@param qy Array with qTy values.',\n      '@param qy Array of qTy.',\n      '@param qy qTy data array.',\n      '@param qy Array containing values of qTy.'\n    ]\n  },\n  {\n    'tag': '@param delta Upper bound on the euclidean norm of diagR * lmDir.',\n    'alternatives': [\n      '@param delta Maximum limit on the euclidean norm of diagR * lmDir.',\n      '@param delta Upper threshold for the euclidean norm of diagR * lmDir.',\n      '@param delta Upper limit on the euclidean norm of diagR * lmDir.',\n      '@param delta Upper boundary for the euclidean norm of diagR * lmDir.',\n      '@param delta Maximum allowable value for the euclidean norm of diagR * lmDir.'\n    ]\n  },\n  {\n    'tag': '@param diag Diagonal matrix.',\n    'alternatives': [\n      '@param diag Matrix with only diagonal elements.',\n      '@param diag Matrix consisting of diagonal elements.',\n      '@param diag Matrix that contains only diagonal entries.',\n      '@param diag Matrix where only the diagonal elements are non-zero.',\n      '@param diag Matrix composed of diagonal elements.'\n    ]\n  },\n  {\n    'tag': '@param internalData Data (modified in-place in this method).',\n    'alternatives': [\n      '@param internalData Data (altered within this method).',\n      '@param internalData Data (changed within this method).',\n      '@param internalData Data (modified during the execution of this method).',\n      '@param internalData Data (manipulated within this method).',\n      '@param internalData Data (transformed in this method).'\n    ]\n  },\n  {\n    'tag': '@param solvedCols Number of solved point.',\n    'alternatives': [\n      '@param solvedCols Total count of solved points.',\n      '@param solvedCols Count of resolved points.',\n      '@param solvedCols Number of points that have been solved.',\n      '@param solvedCols Amount of solved points.',\n      '@param solvedCols Quantity of resolved points.'\n    ]\n  },\n  {\n    'tag': '@param work1 work array',\n    'alternatives': [\n      '@param work1 working array',\n      '@param work1 temporary array',\n      '@param work1 array used for calculations',\n      '@param work1 buffer array',\n      '@param work1 auxiliary array'\n    ]\n  },\n  {\n    'tag': '@param work2 work array',\n    'alternatives': [\n      '@param work2 working array',\n      '@param work2 temporary array',\n      '@param work2 array used for calculations',\n      '@param work2 buffer array',\n      '@param work2 auxiliary array'\n    ]\n  },\n  {\n    'tag': '@param work3 work array',\n    'alternatives': [\n      '@param work3 working array',\n      '@param work3 temporary array',\n      '@param work3 array used for calculations',\n      '@param work3 buffer array',\n      '@param work3 auxiliary array'\n    ]\n  },\n  {\n    'tag': '@param lmDir the \"returned\" LM direction will be stored in this array.',\n    'alternatives': [\n      '@param lmDir the LM direction will be placed in this array.',\n      '@param lmDir the computed LM direction will be stored in this array.',\n      '@param lmDir the resulting LM direction will be stored in this array.',\n      '@param lmDir the LM direction will be saved in this array.',\n      '@param lmDir the array where the LM direction will be written to.'\n    ]\n  },\n  {\n    'tag': '@param lmPar the value of the LM parameter from the previous iteration.',\n    'alternatives': [\n      '@param lmPar the LM parameter value from the previous iteration.',\n      '@param lmPar the previous iteration\\'s LM parameter value.',\n      '@param lmPar the value of the LM parameter in the previous iteration.',\n      '@param lmPar the LM parameter value at the prior iteration.',\n      '@param lmPar the LM parameter value from the preceding iteration.'\n    ]\n  }\n]"