"output = [\n  {\n    'tag': '@param <V> the value type',\n    'alternatives': [\n      '@param <V> the type of the value',\n      '@param <V> the type of value',\n      '@param <V> the data type of the value',\n      '@param <V> the value kind',\n      '@param <V> the type of the value parameter'\n    ]\n  },\n  {\n    'tag': '@return a new predicated sorted map',\n    'alternatives': [\n      '@return a new sorted map with predicates',\n      '@return a newly created sorted map with predicates',\n      '@return a new sorted map that is predicated',\n      '@return a newly created sorted map that satisfies the predicates',\n      '@return a fresh predicated sorted map'\n    ]\n  },\n  {\n    'tag': '@return the decorated map',\n    'alternatives': [\n      '@return the map that has been decorated',\n      '@return the map after decoration',\n      '@return the map with decoration',\n      '@return the map which is decorated',\n      '@return the map that has undergone decoration'\n    ]\n  },\n  {\n    'tag': '@param <K> the key type',\n    'alternatives': [\n      '@param <K> the type of the key',\n      '@param <K> the data type of the key',\n      '@param <K> the kind of key',\n      '@param <K> the type for the key',\n      '@param <K> the key parameter type'\n    ]\n  },\n  {\n    'tag': '@param <V> the value type',\n    'alternatives': [\n      '@param <V> the type of the value',\n      '@param <V> the data type of the value',\n      '@param <V> the kind of value',\n      '@param <V> the type for the value',\n      '@param <V> the value parameter type'\n    ]\n  },\n  {\n    'tag': '@param defaultValue the default value to return when the key is not found',\n    'alternatives': [\n      '@param defaultValue the value to be returned if the key is not found',\n      '@param defaultValue the value that will be returned if the key is not found',\n      '@param defaultValue the value to return in case the key is not found',\n      '@param defaultValue the value that is returned if the key is not found',\n      '@param defaultValue the value to return if the key is not found'\n    ]\n  },\n  {\n    'tag': '@return a new defaulting map',\n    'alternatives': [\n      '@return a newly created map with defaulting',\n      '@return a fresh defaulting map',\n      '@return a new map that provides default values',\n      '@return a newly created defaulting map',\n      '@return a map that returns defaults for missing values'\n    ]\n  },\n  {\n    'tag': '@param <K> the key type',\n    'alternatives': [\n      '@param <K> the type of the key',\n      '@param <K> the data type of the key',\n      '@param <K> the kind of key',\n      '@param <K> the type for the key',\n      '@param <K> the key parameter type'\n    ]\n  },\n  {\n    'tag': '@param <V> the value type',\n    'alternatives': [\n      '@param <V> the type of the value',\n      '@param <V> the data type of the value',\n      '@param <V> the kind of value',\n      '@param <V> the type for the value',\n      '@param <V> the value parameter type'\n    ]\n  },\n  {\n    'tag': '@return a new defaulting map',\n    'alternatives': [\n      '@return a newly created map with defaulting',\n      '@return a fresh defaulting map',\n      '@return a new map that provides default values',\n      '@return a newly created defaulting map',\n      '@return a map that returns defaults for missing values'\n    ]\n  },\n  {\n    'tag': '@param <K> the key type',\n    'alternatives': [\n      '@param <K> the type of the key',\n      '@param <K> the data type of the key',\n      '@param <K> the kind of key',\n      '@param <K> the type for the key',\n      '@param <K> the key parameter type'\n    ]\n  },\n  {\n    'tag': '@param <V> the value type',\n    'alternatives': [\n      '@param <V> the type of the value',\n      '@param <V> the data type of the value',\n      '@param <V> the kind of value',\n      '@param <V> the type for the value',\n      '@param <V> the value parameter type'\n    ]\n  },\n  {\n    'tag': '@return a new defaulting map',\n    'alternatives': [\n      '@return a newly created map with defaulting',\n      '@return a fresh defaulting map',\n      '@return a new map that provides default values',\n      '@return a newly created defaulting map',\n      '@return a map that returns defaults for missing values'\n    ]\n  },\n  {\n    'tag': '@param out the output stream',\n    'alternatives': [\n      '@param out the stream for output',\n      '@param out the output stream to be used',\n      '@param out the stream to write output',\n      '@param out the stream that represents output',\n      '@param out the stream used for output'\n    ]\n  },\n  {\n    'tag': '@throws IOException ',\n    'alternatives': [\n      '@throws IOException in case of an input/output error',\n      '@throws IOException if an I/O exception occurs',\n      '@throws IOException if there is an I/O problem',\n      '@throws IOException if input/output fails',\n      '@throws IOException when an I/O error occurs'\n    ]\n  },\n  {\n    'tag': '@param in the input stream',\n    'alternatives': [\n      '@param in the stream for input',\n      '@param in the input stream to be used',\n      '@param in the stream to read input',\n      '@param in the stream that represents input',\n      '@param in the stream used for input'\n    ]\n  },\n  {\n    'tag': '@throws IOException ',\n    'alternatives': [\n      '@throws IOException in case of an input/output error',\n      '@throws IOException if an I/O exception occurs',\n      '@throws IOException if there is an I/O problem',\n      '@throws IOException if input/output fails',\n      '@throws IOException when an I/O error occurs'\n    ]\n  },\n  {\n    'tag': '@throws ClassNotFoundException ',\n    'alternatives': [\n      '@throws ClassNotFoundException if the class is not found',\n      '@throws ClassNotFoundException in case the class is missing',\n      '@throws ClassNotFoundException if the class cannot be found',\n      '@throws ClassNotFoundException when the class is not located',\n      '@throws ClassNotFoundException if the specified class does not exist'\n    ]\n  },\n  {\n    'tag': '@param defaultValue the default value to return when the key is not found',\n    'alternatives': [\n      '@param defaultValue the value to be returned if the key is not found',\n      '@param defaultValue the value that will be returned if the key is not found',\n      '@param defaultValue the value to return in case the key is not found',\n      '@param defaultValue the value that is returned if the key is not found',\n      '@param defaultValue the value to return if the key is not found'\n    ]\n  },\n  {\n    'tag': '@param defaultValueTransformer transformer to use to generate missing values.',\n    'alternatives': [\n      '@param defaultValueTransformer converter to be used for generating missing values',\n      '@param defaultValueTransformer the transformer used for creating missing values',\n      '@param defaultValueTransformer the mapper to generate missing values',\n      '@param defaultValueTransformer the function that produces missing values',\n      '@param defaultValueTransformer the transformation function for generating missing values'\n    ]\n  },\n  {\n    'tag': '@param defaultValueTransformer the value transformer to use',\n    'alternatives': [\n      '@param defaultValueTransformer the transformer to be used for values',\n      '@param defaultValueTransformer the value mapping function to use',\n      '@param defaultValueTransformer the converter for transforming values',\n      '@param defaultValueTransformer the function that applies transformations to values',\n      '@param defaultValueTransformer the value conversion function to be applied'\n    ]\n  },\n  {\n    'tag': '@param key the key to get a hash code for',\n    'alternatives': [\n      '@param key the key for which to compute a hash code',\n      '@param key the key used to calculate the hash code',\n      '@param key the key that is used for hashing',\n      '@param key the key from which a hash code is derived',\n      '@param key the key for which a hash code is needed'\n    ]\n  },\n  {\n    'tag': '@return the hash code',\n    'alternatives': [\n      '@return the computed hash code value',\n      '@return the value representing the hash code',\n      '@return the calculated hash code',\n      '@return the resulting hash code',\n      '@return the hash code that has been generated'\n    ]\n  },\n  {\n    'tag': '@param key the key to get a hash code for, may be null',\n    'alternatives': [\n      '@param key the key for which to compute a hash code, possibly null',\n      '@param key the key used to calculate the hash code, can be null',\n      '@param key the key that is used for hashing, may be null',\n      '@param key the key from which a hash code is derived, possibly null',\n      '@param key the key for which a hash code is needed, can be null'\n    ]\n  },\n  {\n    'tag': '@param value the value to get a hash code for, may be null',\n    'alternatives': [\n      '@param value the value for which to compute a hash code, possibly null',\n      '@param value the value used to calculate the hash code, can be null',\n      '@param value the value that is used for hashing, may be null',\n      '@param value the value from which a hash code is derived, possibly null',\n      '@param value the value for which a hash code is needed, can be null'\n    ]\n  }\n]"