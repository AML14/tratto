"output=[\n  {\n    'tag': '@throws DimensionMismatchException if the length of <code>rowData</code>\\ndoes not match with the covariance matrix',\n    'alternatives': [\n      '@throws DimensionMismatchException if the size of <code>rowData</code>\\ndoes not correspond to the covariance matrix',\n      '@throws DimensionMismatchException if the length of <code>rowData</code>\\ndoes not align with the covariance matrix',\n      '@throws DimensionMismatchException when the number of elements in <code>rowData</code>\\ndoes not equal the size of the covariance matrix',\n    ]\n  },\n  {\n    'tag': '@param sc externally computed StorelessCovariance to add to this',\n    'alternatives': [\n      '@param sc StorelessCovariance externally computed to be added to this',\n      '@param sc StorelessCovariance that is computed externally to be included in this',\n      '@param sc StorelessCovariance computed externally to add to this',\n    ]\n  },\n  {\n    'tag': '@throws DimensionMismatchException if the dimension of sc does not match this',\n    'alternatives': [\n      '@throws DimensionMismatchException if the size of sc does not correspond to this',\n      '@throws DimensionMismatchException when the dimension of sc does not align with this',\n      '@throws DimensionMismatchException if the size of sc does not match this',\n    ]\n  },\n  {\n    'tag': '@throws NumberIsTooSmallException if the number of observations\\nin a cell is &lt; 2',\n    'alternatives': [\n      '@throws NumberIsTooSmallException if the count of observations\\nin a cell is less than 2',\n      '@throws NumberIsTooSmallException when the number of observations\\nin a cell is less than 2',\n      '@throws NumberIsTooSmallException if there are fewer than 2 observations\\nin a cell',\n    ]\n  },\n  {\n    'tag': '@return a two-dimensional double array of covariance values',\n    'alternatives': [\n      '@return a double array of covariance values, organized in a two-dimensional structure',\n      '@return a two-dimensional array containing covariance values of type double',\n      '@return a matrix of covariance values represented as a two-dimensional double array',\n    ]\n  },\n  {\n    'tag': '@throws NumberIsTooSmallException if the number of observations\\nfor a cell is &lt; 2',\n    'alternatives': [\n      '@throws NumberIsTooSmallException if the count of observations\\nfor a cell is less than 2',\n      '@throws NumberIsTooSmallException when the number of observations\\nfor a cell is less than 2',\n      '@throws NumberIsTooSmallException if there are fewer than 2 observations\\nfor a cell',\n    ]\n  },\n  {\n    'tag': '@return nothing as this implementation always throws a\\n{@link MathUnsupportedOperationException}',\n    'alternatives': [\n      '@return always throws a {@link MathUnsupportedOperationException},\\nresulting in no value returned',\n      '@return no value is returned since this implementation always throws\\na {@link MathUnsupportedOperationException}',\n      '@return this implementation always throws a {@link MathUnsupportedOperationException}\\nwithout returning any value',\n    ]\n  },\n  {\n    'tag': '@throws MathUnsupportedOperationException in all cases',\n    'alternatives': [\n      '@throws MathUnsupportedOperationException under all circumstances',\n      '@throws MathUnsupportedOperationException for any situation',\n      '@throws MathUnsupportedOperationException for every case',\n    ]\n  },\n  {\n    'tag': \"@return the next pseudorandom, uniformly distributed\\n <code>double</code> value between <code>0.0</code> and\\n <code>1.0</code> from this random number generator's sequence\",\n    'alternatives': [\n      \"@return a pseudorandom <code>double</code> value, uniformly distributed\\nbetween <code>0.0</code> and <code>1.0</code>, derived from the sequence\\nof this random number generator\",\n      \"@return a uniformly distributed, pseudorandom <code>double</code> value,\\nwithin the range <code>0.0</code> to <code>1.0</code>, generated from\\nthis random number generator's sequence\",\n      \"@return a <code>double</code> value that is extracted from the sequence of\\nthis random number generator, being uniformly distributed between\\n<code>0.0</code> and <code>1.0</code>\",\n    ]\n  },\n  {\n    'tag': \"@return the next pseudorandom, uniformly distributed <code>float</code>\\nvalue between <code>0.0</code> and <code>1.0</code> from this\\nrandom number generator's sequence\",\n    'alternatives': [\n      \"@return a pseudorandom <code>float</code> value, uniformly distributed\\n between <code>0.0</code> and <code>1.0</code>, obtained from the sequence\\n of this random number generator\",\n      \"@return a uniformly distributed, pseudorandom <code>float</code> value,\\n within the interval <code>0.0</code> to <code>1.0</code>, generated\\n from this random number generator's sequence\",\n      \"@return a <code>float</code> value that is derived from the sequence of\\nthis random number generator, being uniformly distributed between\\n<code>0.0</code> and <code>1.0</code>\",\n    ]\n  },\n  {\n    'tag': '@return the next pseudorandom, Gaussian (\"normally\") distributed\\n<code>double</code> value with mean <code>0.0</code> and\\nstandard deviation <code>1.0</code> from this random number\\n generator\\'s sequence',\n    'alternatives': [\n      '@return a pseudorandom <code>double</code> value, following a Gaussian\\n(\"normally\") distribution with mean <code>0.0</code> and standard\\n deviation <code>1.0</code>, obtained from the sequence of this\\nrandom number generator',\n      '@return a <code>double</code> value that is generated from the sequence\\nof this random number generator, and conforms to a Gaussian (\"normally\")\\ndistribution with mean <code>0.0</code> and standard deviation <code>1.0</code>',\n      '@return a <code>double</code> value that is drawn from the sequence of\\nthis random number generator, with a Gaussian (\"normally\") distribution\\ncharacterized by a mean of <code>0.0</code> and a standard deviation\\nof <code>1.0</code>',\n    ]\n  },\n  {\n    'tag': \"@return the next pseudorandom, uniformly distributed <code>int</code>\\n value from this random number generator's sequence\",\n    'alternatives': [\n      \"@return a pseudorandom <code>int</code> value, distributed uniformly,\\n extracted from the sequence of this random number generator\",\n      \"@return a uniformly distributed, pseudorandom <code>int</code> value\\n obtained from this random number generator's sequence\",\n      \"@return an <code>int</code> value that is uniformly distributed and is\\nextracted from the sequence of this random number generator\",\n    ]\n  },\n  {\n    'tag': '@return a pseudorandom, uniformly distributed {@code int}\\nvalue between 0 (inclusive) and n (exclusive).',\n    'alternatives': [\n      '@return a {@code int} value that is uniformly distributed and\\nfalls between 0 (inclusive) and n (exclusive)',\n      '@return a uniformly distributed pseudorandom {@code int} value,\\nbetween 0 (inclusive) and n (exclusive)',\n      '@return a {@code int} value that is pseudorandom and uniformly\\ndistributed over the interval from 0 (inclusive) to n (exclusive)',\n    ]\n  },\n  {\n    'tag': \"@return the next pseudorandom, uniformly distributed <code>long</code>\\nvalue from this random number generator's sequence\",\n    'alternatives': [\n      \"@return a pseudorandom <code>long</code> value, uniformly distributed,\\n obtained from the sequence of this random number generator\",\n      \"@return a uniformly distributed, pseudorandom <code>long</code> value\\n extracted from this random number generator's sequence\",\n      \"@return a <code>long</code> value that is uniformly distributed, and is\\n extracted from the sequence of this random number generator\",\n    ]\n  },\n  {\n    'tag': '@param randomGenerator the wrapped generator',\n    'alternatives': [\n      '@param randomGenerator the generator that is wrapped',\n      '@param randomGenerator the generator that is encapsulated',\n      '@param randomGenerator the generator that is contained',\n    ]\n  },\n  {\n    'tag': '@param rng JDK {@link Random} instance that will generate the\\nthe random data.',\n    'alternatives': [\n      '@param rng JDK {@link Random} instance that will produce the\\nrandom data.',\n      '@param rng JDK {@link Random} instance that will generate the\\ndata randomly.',\n      '@param rng JDK {@link Random} instance that will create the\\nrandom data.',\n    ]\n  },\n  {\n    'tag': '@return the given RNG, wrapped in a {@link RandomGenerator}.',\n    'alternatives': [\n      '@return the RNG provided, enclosed in a {@link RandomGenerator}.',\n      '@return the RNG supplied, encapsulated in a {@link RandomGenerator}.',\n      '@return the supplied RNG, wrapped in a {@link RandomGenerator}.',\n    ]\n  },\n  {\n    'tag': '@param seed Original seed.',\n    'alternatives': [\n      '@param seed Initial seed.',\n      '@param seed First seed.',\n      '@param seed The original seed.',\n    ]\n  },\n  {\n    'tag': '@return the converted seed.',\n    'alternatives': [\n      '@return the seed after being converted.',\n      '@return the seed that has been transformed.',\n      '@return the seed in its converted form.',\n    ]\n  },\n  {\n    'tag': '@param seed the initial seed (32 bits integer)',\n    'alternatives': [\n      '@param seed the seed initially provided (32 bits integer)',\n      '@param seed the seed that is initially passed (32 bits integer)',\n      '@param seed the seed at the beginning (32 bits integer)',\n    ]\n  },\n  {\n    'tag': '@param seed the initial seed (32 bits integers array). If null\\nthe seed of the generator will be the system time plus the system identity\\nhash code of the instance.',\n    'alternatives': [\n      '@param seed the seed that starts (32 bits integers array). If null,\\nthe seed of the generator will be the system time combined with the system identity\\nhash code of the instance.',\n      '@param seed the initial seed (32 bits integers array). If null, the\\ngenerator will have its seed set to the system time plus the system identity\\nhash code of the instance.',\n      '@param seed the seed at the beginning (32 bits integers array). If null,\\nthe seed of the generator will be set to the current system time plus the system\\nidentity hash code of the instance.',\n    ]\n  },\n  {\n    'tag': '@param seed the initial seed (64 bits integer)',\n    'alternatives': [\n      '@param seed the seed in the beginning (64 bits integer)',\n      '@param seed the seed at the start (64 bits integer)',\n      '@param seed the seed initially provided (64 bits integer)',\n    ]\n  },\n  {\n    'tag': '@param k number of bits in the pool (not necessarily a multiple of 32)',\n    'alternatives': [\n      '@param k the number of bits in the pool (not necessarily divisible by 32)',\n      '@param k the count of bits in the pool (not necessarily a multiple of 32)',\n      '@param k the quantity of bits in the pool (not necessarily a multiple of 32)',\n    ]\n  },\n  {\n    'tag': '@param m1 first parameter of the algorithm',\n    'alternatives': [\n      '@param m1 the initial parameter of the algorithm',\n      '@param m1 the first argument of the algorithm',\n      '@param m1 the primary parameter of the algorithm',\n    ]\n  },\n  {\n    'tag': '@param m2 second parameter of the algorithm',\n    'alternatives': [\n      '@param m2 the initial parameter of the algorithm',\n      '@param m2 the second argument of the algorithm',\n      '@param m2 the secondary parameter of the algorithm',\n    ]\n  }\n]"