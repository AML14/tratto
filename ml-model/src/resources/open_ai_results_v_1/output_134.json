"output = [\n  {\n    'tag': '@param reverse false = forward sort order; true = reverse sort order',\n    'alternatives': [\n      '@param reverse false = sorting order from smallest to largest; true = sorting order from largest to smallest',\n      '@param reverse sorting order is forward if false; otherwise, it is reversed',\n      '@param reverse the order of sorting. If false, it is forward; if true, it is reversed',\n      '@param reverse the sorting order. If false, it is forward; if true, it is reversed',\n      '@param reverse determines the sorting order. If set to false, it will be in the forward sort order; if set to true, it will be in the reverse sort order'\n    ]\n  },\n  {\n    'tag': '@return immutable empty collection',\n    'alternatives': [\n      '@return an unmodifiable empty collection',\n      '@return a collection that is immutable and empty',\n      '@return a collection that is both empty and immutable',\n      '@return a collection that cannot be modified and is empty',\n      '@return a collection that is empty and cannot be modified'\n    ]\n  },\n  {\n    'tag': '@param a the first collection, must not be null',\n    'alternatives': [\n      '@param a the initial collection, which must not be null',\n      '@param a the first input collection, which must not be null',\n      '@param a the collection that comes first, and it must not be null',\n      '@param a the primary collection, which must not be null',\n      '@param a the starting collection, and it must not be null'\n    ]\n  },\n  {\n    'tag': '@param b the second collection, must not be null',\n    'alternatives': [\n      '@param b the subsequent collection, which must not be null',\n      '@param b the second input collection, which must not be null',\n      '@param b the collection that comes next, and it must not be null',\n      '@param b the secondary collection, which must not be null',\n      '@param b the additional collection, and it must not be null'\n    ]\n  },\n  {\n    'tag': '@param a the collection to subtract from, must not be null',\n    'alternatives': [\n      '@param a the starting collection for subtraction, which must not be null',\n      '@param a the source collection for subtraction, which must not be null',\n      '@param a the collection from which subtraction will be performed, and it must not be null',\n      '@param a the collection to be subtracted from, which must not be null',\n      '@param a the original collection from which subtraction is done, and it must not be null'\n    ]\n  },\n  {\n    'tag': '@param b the collection to subtract, must not be null',\n    'alternatives': [\n      '@param b the collection for subtraction, which must not be null',\n      '@param b the subtracting collection, which must not be null',\n      '@param b the collection that will be subtracted, and it must not be null',\n      '@param b the collection to be subtracted, which must not be null',\n      '@param b the collection that will be removed, and it must not be null'\n    ]\n  },\n  {\n    'tag': '@param coll1 the first collection, must not be null',\n    'alternatives': [\n      '@param coll1 the initial collection, which must not be null',\n      '@param coll1 the first input collection, which must not be null',\n      '@param coll1 the collection that comes first, and it must not be null',\n      '@param coll1 the primary collection, which must not be null',\n      '@param coll1 the starting collection, and it must not be null'\n    ]\n  },\n  {\n    'tag': '@param coll2 the second collection, must not be null',\n    'alternatives': [\n      '@param coll2 the subsequent collection, which must not be null',\n      '@param coll2 the second input collection, which must not be null',\n      '@param coll2 the collection that comes next, and it must not be null',\n      '@param coll2 the secondary collection, which must not be null',\n      '@param coll2 the additional collection, and it must not be null'\n    ]\n  },\n  {\n    'tag': '@param coll the collection to get the cardinality map for, must not be null',\n    'alternatives': [\n      '@param coll the collection from which to obtain the cardinality map, which must not be null',\n      '@param coll the source collection for generating the cardinality map, which must not be null',\n      '@param coll the collection used to create the cardinality map, and it must not be null',\n      '@param coll the collection to be mapped for cardinality, which must not be null',\n      '@param coll the original collection to calculate the cardinality map from, and it must not be null'\n    ]\n  },\n  {\n    'tag': '@param a the first (sub?) collection, must not be null',\n    'alternatives': [\n      '@param a the primary (sub?) collection, which must not be null',\n      '@param a the collection that is considered the first (sub?), and it must not be null',\n      '@param a the first (sub?) collection, which is required to not be null',\n      '@param a the initial (sub?) collection, and it must not be null',\n      '@param a the collection with possible substrate, which must not be null'\n    ]\n  },\n  {\n    'tag': '@param b the second (super?) collection, must not be null',\n    'alternatives': [\n      '@param b the additional (super?) collection, which must not be null',\n      '@param b the collection that is considered the second (super?), and it must not be null',\n      '@param b the second (super?) collection, which is required to not be null',\n      '@param b the subsequent (super?) collection, and it must not be null',\n      '@param b the collection that is possibly a superset, which must not be null'\n    ]\n  },\n  {\n    'tag': '@return <code>true</code> iff <i>a</i> is a <i>proper</i> sub-collection of <i>b</i>',\n    'alternatives': [\n      '@return <code>true</code> if and only if <i>a</i> is a <i>proper</i> sub-collection of <i>b</i>',\n      '@return <code>true</code> only if <i>a</i> is a <i>proper</i> sub-collection of <i>b</i>',\n      '@return <code>true</code> if and only if <i>a</i> is a <i>valid</i> sub-collection of <i>b</i>',\n      '@return <code>true</code> only when <i>a</i> is a <i>proper</i> sub-collection of <i>b</i>',\n      '@return <code>true</code> if and only if <i>a</i> is a <i>correct</i> sub-collection of <i>b</i>'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if the equator is null',\n    'alternatives': [\n      '@throws NullPointerException when the equator is null',\n      '@throws NullPointerException if the equator parameter is null',\n      '@throws NullPointerException in case the equator is null',\n      '@throws NullPointerException if the equator object is null',\n      '@throws NullPointerException if a null equator is provided'\n    ]\n  }\n]"