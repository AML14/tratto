"output = [\n  {\n    'tag': '@return a new rotation which is the composition of r by the instance\\nusing vector operator convention',\n    'alternatives': [\n      '@return a new rotation obtained by combining r with the instance using vector operator convention',\n      '@return the result of the composition of r and the instance, using vector operator convention',\n      '@return a new rotation that is the composition of r and the instance, following vector operator convention',\n      '@return the combined rotation of r and the instance, using vector operator convention',\n      '@return the composition of r and the instance, using vector operator convention'\n    ]\n  },\n  {\n    'tag': '@param r rotation to apply the rotation to',\n    'alternatives': [\n      '@param r rotation to be used for applying the rotation',\n      '@param r the rotation to be applied',\n      '@param r the rotation that will be used',\n      '@param r the rotation that should be applied',\n      '@param r the rotation to apply'\n    ]\n  },\n  {\n    'tag': '@return a new rotation which is the composition of r by the inverse\\nof the instance',\n    'alternatives': [\n      '@return a new rotation obtained by combining r with the inverse of the instance',\n      '@return a new rotation that is the composition of r and the inverse of the instance',\n      '@return the result of the composition of r and the instance inverse',\n      '@return the combined rotation of r and the inverse of the instance',\n      '@return the composition of r and the instance inverse'\n    ]\n  },\n  {\n    'tag': '@param r rotation to apply the rotation to',\n    'alternatives': [\n      '@param r rotation to be used for applying the rotation',\n      '@param r the rotation to be applied',\n      '@param r the rotation that will be used',\n      '@param r the rotation that should be applied',\n      '@param r the rotation to apply'\n    ]\n  },\n  {\n    'tag': '@param convention convention to use for the semantics of the angle',\n    'alternatives': [\n      '@param convention the convention to be used for interpreting the angle',\n      '@param convention specifies the angle semantics convention',\n      '@param convention indicates the convention for the angle meaning',\n      '@param convention the chosen angle interpretation convention',\n      '@param convention the convention to follow for the angle semantics'\n    ]\n  },\n  {\n    'tag': '@return a new rotation which is the composition of r by the inverse\\nof the instance',\n    'alternatives': [\n      '@return a new rotation obtained by combining r with the inverse of the instance',\n      '@return a new rotation that is the composition of r and the inverse of the instance',\n      '@return the result of the composition of r and the instance inverse',\n      '@return the combined rotation of r and the inverse of the instance',\n      '@return the composition of r and the instance inverse'\n    ]\n  },\n  {\n    'tag': '@param r rotation to apply the rotation to',\n    'alternatives': [\n      '@param r rotation to be used for applying the rotation',\n      '@param r the rotation to be applied',\n      '@param r the rotation that will be used',\n      '@param r the rotation that should be applied',\n      '@param r the rotation to apply'\n    ]\n  },\n  {\n    'tag': '@return a new rotation which is the composition of r by the inverse\\nof the instance using vector operator convention',\n    'alternatives': [\n      '@return a new rotation obtained by combining r with the inverse of the instance using vector operator convention',\n      '@return a new rotation that is the composition of r and the inverse of the instance following vector operator convention',\n      '@return the result of the composition of r and the instance inverse, using vector operator convention',\n      '@return the combined rotation of r and the inverse of the instance using vector operator convention',\n      '@return the composition of r and the instance inverse, using vector operator convention'\n    ]\n  },\n  {\n    'tag': '@param m initial matrix (not exactly orthogonal)',\n    'alternatives': [\n      '@param m the initial matrix (which is approximate to orthogonal)',\n      '@param m the initial matrix (approximately orthogonal)',\n      '@param m the original matrix (not perfectly orthogonal)',\n      '@param m the matrix at the start (not exactly orthogonally oriented)',\n      '@param m the initial matrix (which may not be entirely orthogonal)'\n    ]\n  },\n  {\n    'tag': '@param threshold convergence threshold for the iterative\\northogonality correction (convergence is reached when the\\ndifference between two steps of the Frobenius norm of the\\ncorrection is below this threshold)',\n    'alternatives': [\n      '@param threshold the convergence threshold used in the iterative orthogonality correction (convergence is considered achieved when the difference between two consecutive steps of the Frobenius norm of the correction is lower than this threshold)',\n      '@param threshold the threshold for convergence in the iterative orthogonality correction (convergence is reached when the difference between consecutive steps of the Frobenius norm of the correction falls below this threshold)',\n      '@param threshold the convergence threshold for the iterative orthogonality correction (convergence is achieved when the difference between two steps of the Frobenius norm of the correction is lower than this threshold)',\n      '@param threshold the threshold for convergence in the iterative orthogonality correction (convergence is obtained when the difference between consecutive steps of the Frobenius norm of the correction is below this threshold)',\n      '@param threshold the convergence threshold to be used in the iterative orthogonality correction (convergence is considered reached when the difference between two steps of the Frobenius norm of the correction is less than this threshold)'\n    ]\n  },\n  {\n    'tag': '@param value The input to convert.',\n    'alternatives': [\n      '@param value The value to be converted.',\n      '@param value The input value to be transformed.',\n      '@param value The value that needs to be converted.',\n      '@param value The input that should be converted.',\n      '@param value The value to be translated.'\n    ]\n  },\n  {\n    'tag': '@return The value or -1 if the conversion failed. TODO should be named\\n        convertNumber',\n    'alternatives': [\n      '@return The result value or -1 if the conversion failed. TODO should be named convertNumber',\n      '@return The output value or -1 if the conversion failed. TODO should be named convertNumber',\n      '@return The converted value or -1 if the conversion failed. TODO should be named convertNumber',\n      '@return The transformed value or -1 if the conversion failed. TODO should be named convertNumber',\n      '@return The value obtained or -1 if the conversion failed. TODO should be named convertNumber'\n    ]\n  },\n  {\n    'tag': '@param value A Number or a CharSequence.',\n    'alternatives': [\n      '@param value An instance of Number or CharSequence.',\n      '@param value A variable that can be either of type Number or CharSequence.',\n      '@param value Either a Number or a CharSequence.',\n      '@param value A parameter that can be a Number or a CharSequence.',\n      '@param value A value that is either a Number or a CharSequence.'\n    ]\n  },\n  {\n    'tag': '@param id A string that identifies an element of the graph.',\n    'alternatives': [\n      '@param id A string that serves as an identifier for a graph element.',\n      '@param id A string that uniquely identifies a graph element.',\n      '@param id A string used to identify a specific graph element.',\n      '@param id A string that acts as an identifier for an element in the graph.',\n      '@param id A string that indicates the unique identifier of a graph element.'\n    ]\n  },\n  {\n    'tag': '@param clazz A string that matches all elements of a given class.',\n    'alternatives': [\n      '@param clazz A string that corresponds to elements of a particular class.',\n      '@param clazz A string that is applicable to elements from a specific class.',\n      '@param clazz A string that can be used to select elements of a certain class.',\n      '@param clazz A string that identifies elements belonging to a class.',\n      '@param clazz A string that represents elements of a specific class.'\n    ]\n  },\n  {\n    'tag': '@param pseudoClass A string that matches all elements of a given pseudo-class.',\n    'alternatives': [\n      '@param pseudoClass A string that corresponds to elements of a particular pseudo-class.',\n      '@param pseudoClass A string that is applicable to elements from a specific pseudo-class.',\n      '@param pseudoClass A string that can be used to select elements of a certain pseudo-class.',\n      '@param pseudoClass A string that identifies elements belonging to a pseudo-class.',\n      '@param pseudoClass A string that represents elements of a specific pseudo-class.'\n    ]\n  },\n  {\n    'tag': '@return An element type.',\n    'alternatives': [\n      '@return A type of element.',\n      '@return The type of element.',\n      '@return The category of element.',\n      '@return The kind of element.',\n      '@return The classification of element.'\n    ]\n  },\n  {\n    'tag': '@return The identifier or null if the selector is general.',\n    'alternatives': [\n      '@return The identifier or null if the selector is not specific.',\n      '@return The identification or null if the selector is general.',\n      '@return The unique identifier or null if the selector is general.',\n      '@return The ID or null if the selector is general.',\n      '@return The name or null if the selector is general.'\n    ]\n  },\n  {\n    'tag': '@return A class name or null if the selector is general.',\n    'alternatives': [\n      '@return A class name or null if the selector is not specific.',\n      '@return The name of a class or null if the selector is general.',\n      '@return The name of a specific class or null if the selector is general.',\n      '@return The class name or null if the selector is general.',\n      '@return The name of a class or null if the selector is general.'\n    ]\n  },\n  {\n    'tag': '@return A pseudo-class name or null.',\n    'alternatives': [\n      '@return The name of a pseudo-class or null.',\n      '@return The pseudo-class name or null.',\n      '@return The name of a specific pseudo-class or null.',\n      '@return A name representing a pseudo-class or null.',\n      '@return The pseudo-class name or null if not applicable.'\n    ]\n  },\n  {\n    'tag': '@param type The element type of this selector.',\n    'alternatives': [\n      '@param type The type of element for this selector.',\n      '@param type The category of element for this selector.',\n      '@param type The kind of element for this selector.',\n      '@param type The classification of element for this selector.',\n      '@param type The specific type of element for this selector.'\n    ]\n  },\n  {\n    'tag': '@param type The element type of this selector.',\n    'alternatives': [\n      '@param type The type of element for this selector.',\n      '@param type The category of element for this selector.',\n      '@param type The kind of element for this selector.',\n      '@param type The classification of element for this selector.',\n      '@param type The specific type of element for this selector.'\n    ]\n  },\n  {\n    'tag': '@param identifier The element name.',\n    'alternatives': [\n      '@param identifier The name of the element.',\n      '@param identifier The identification of the element.',\n      '@param identifier The element identifier.',\n      '@param identifier The name used to identify the element.',\n      '@param identifier The element label.'\n    ]\n  },\n  {\n    'tag': '@param clazz The element class.',\n    'alternatives': [\n      '@param clazz The class of the element.',\n      '@param clazz The category of the element.',\n      '@param clazz The kind of element.',\n      '@param clazz The classification of the element.',\n      '@param clazz The specific class of the element.'\n    ]\n  },\n  {\n    'tag': '@param type Either \"node\", \"edge\", \"graph\" or \"sprite\".',\n    'alternatives': [\n      '@param type One of the following: \"node\", \"edge\", \"graph\", or \"sprite\".',\n      '@param type A string that can be either \"node\", \"edge\", \"graph\", or \"sprite\".',\n      '@param type A variable that can have the values \"node\", \"edge\", \"graph\", or \"sprite\".',\n      '@param type A parameter that can be set to either \"node\", \"edge\", \"graph\", or \"sprite\".',\n      '@param type A value that is expected to be one of: \"node\", \"edge\", \"graph\", or \"sprite\".'\n    ]\n  }\n]"