"[\n  {\n    'tag': '@throws ClassCastException if key or value is not Comparable',\n    'alternatives': [\n      '@throws ClassCastException if the key or value is not Comparable',\n      '@throws ClassCastException if either the key or value is not Comparable',\n      '@throws ClassCastException if the key or value lacks Comparable implementation',\n      '@throws ClassCastException if the Comparable interface is not implemented by the key or value',\n      '@throws ClassCastException if the key or value does not support comparison'\n    ]\n  },\n  {\n    'tag': '@param newNode the node to be inserted',\n    'alternatives': [\n      '@param newNode the node that should be inserted',\n      '@param newNode the node that needs to be added',\n      '@param newNode the node to insert',\n      '@param newNode the node being inserted',\n      '@param newNode the node to be added'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if the node already exists\\n                                    in the value mapping',\n    'alternatives': [\n      '@throws IllegalArgumentException if the node is already present\\n                                    in the value mapping',\n      '@throws IllegalArgumentException if the node is duplicated\\n                                    in the value mapping',\n      '@throws IllegalArgumentException if the value mapping already contains the node',\n      '@throws IllegalArgumentException if the node is already in the value mapping',\n      '@throws IllegalArgumentException if the node exists in the value mapping'\n    ]\n  },\n  {\n    'tag': '@param obj the object to compare to',\n    'alternatives': [\n      '@param obj the object for comparison',\n      '@param obj the object to be compared',\n      '@param obj the object to compare against',\n      '@param obj the object to compare with',\n      '@param obj the object that needs to be compared'\n    ]\n  },\n  {\n    'tag': '@param type the KEY or VALUE int',\n    'alternatives': [\n      '@param type the int representing either KEY or VALUE',\n      '@param type the integer representing KEY or VALUE',\n      '@param type an integer representing either KEY or VALUE',\n      '@param type an int indicating either KEY or VALUE',\n      '@param type the int value denoting either KEY or VALUE'\n    ]\n  },\n  {\n    'tag': '@return true if equal',\n    'alternatives': [\n      '@return true if they are equal',\n      '@return true in case of equality',\n      '@return true if they are the same',\n      '@return true if they match',\n      '@return true if they have equality'\n    ]\n  },\n  {\n    'tag': '@return the hash code value for this map',\n    'alternatives': [\n      '@return the hash code value of this map',\n      '@return the hash code of this map',\n      '@return the map\\'s hash code',\n      '@return the hash value generated for this map',\n      '@return the generated hash code for this map'\n    ]\n  },\n  {\n    'tag': '@return the string form of this map',\n    'alternatives': [\n      '@return the string representation of this map',\n      '@return the map as a string',\n      '@return the textual representation of this map',\n      '@return a string that represents this map',\n      '@return the map in string format'\n    ]\n  },\n  {\n    'tag': '@param map the map to copy',\n    'alternatives': [\n      '@param map the map that will be copied',\n      '@param map the map to be duplicated',\n      '@param map the map that needs to be copied',\n      '@param map the map for cloning',\n      '@param map the map to be replicated'\n    ]\n  },\n  {\n    'tag': '@throws ClassCastException if the keys/values in the map are\\n not Comparable or are not mutually comparable',\n    'alternatives': [\n      '@throws ClassCastException if the keys/values in the map lack Comparable implementation\\n or are not compatible for comparison',\n      '@throws ClassCastException if the keys/values in the map are not Comparable or do not support mutual comparison',\n      '@throws ClassCastException if the keys/values in the map do not have Comparable implementation\\n or if they are not mutually comparable',\n      '@throws ClassCastException if the keys/values in the map are not Comparable or do not meet the requirement for mutual comparison',\n      '@throws ClassCastException if the keys/values in the map are not Comparable or are not mutually comparable'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if any key or value in the map is null',\n    'alternatives': [\n      '@throws NullPointerException if any key or value in the map is missing',\n      '@throws NullPointerException if any key or value in the map is absent',\n      '@throws NullPointerException if any key or value in the map is not present',\n      '@throws NullPointerException if any key or value in the map is undefined',\n      '@throws NullPointerException if any key or value in the map is not available'\n    ]\n  },\n  {\n    'tag': '@param <K> the type of key in the map',\n    'alternatives': [\n      '@param <K> the key type used in the map',\n      '@param <K> the type of the map\\'s keys',\n      '@param <K> the key data type employed in the map',\n      '@param <K> the data type for the keys in the map',\n      '@param <K> specifies the key type of the map'\n    ]\n  },\n  {\n    'tag': '@param <V> the type of value in the map',\n    'alternatives': [\n      '@param <V> the value type used in the map',\n      '@param <V> the type of the map\\'s values',\n      '@param <V> the value data type employed in the map',\n      '@param <V> the data type for the values in the map',\n      '@param <V> specifies the value type of the map'\n    ]\n  },\n  {\n    'tag': '@return immutable and empty <code>MultiValuedMap</code>',\n    'alternatives': [\n      '@return an empty <code>MultiValuedMap</code> that is immutable',\n      '@return a read-only <code>MultiValuedMap</code> that is empty',\n      '@return a <code>MultiValuedMap</code> object that is both immutable and empty',\n      '@return a <code>MultiValuedMap</code> instance that is empty and cannot be modified',\n      '@return a <code>MultiValuedMap</code> that is both empty and unmodifiable'\n    ]\n  },\n  {\n    'tag': '@param <K> the type of key in the map',\n    'alternatives': [\n      '@param <K> the key type used in the map',\n      '@param <K> the type of the map\\'s keys',\n      '@param <K> the key data type employed in the map',\n      '@param <K> the data type for the keys in the map',\n      '@param <K> specifies the key type of the map'\n    ]\n  },\n  {\n    'tag': '@param <V> the type of value in the map',\n    'alternatives': [\n      '@param <V> the value type used in the map',\n      '@param <V> the type of the map\\'s values',\n      '@param <V> the value data type employed in the map',\n      '@param <V> the data type for the values in the map',\n      '@param <V> specifies the value type of the map'\n    ]\n  },\n  {\n    'tag': '@param map the map, may be null',\n    'alternatives': [\n      '@param map the map, which can be null',\n      '@param map the possibly null map',\n      '@param map the map that could be null',\n      '@param map the map (nullable)',\n      '@param map the map, possibly absent'\n    ]\n  },\n  {\n    'tag': '@return an empty {@link MultiValuedMap} if the argument is null',\n    'alternatives': [\n      '@return an empty {@link MultiValuedMap} in case the argument is null',\n      '@return a {@link MultiValuedMap} that is empty if the argument is null',\n      '@return a {@link MultiValuedMap} object that is empty if the argument is null',\n      '@return an empty {@link MultiValuedMap} when the argument is null',\n      '@return an empty {@link MultiValuedMap} if the argument is missing'\n    ]\n  },\n  {\n    'tag': '@param map the map to check, may be null',\n    'alternatives': [\n      '@param map the map to verify, which could be null',\n      '@param map the map to examine, possibly null',\n      '@param map the map that needs to be checked, may be null',\n      '@param map the map to validate, which is allowed to be null',\n      '@param map the map to inspect, possibly absent'\n    ]\n  },\n  {\n    'tag': '@param <K> the key type',\n    'alternatives': [\n      '@param <K> the type of keys',\n      '@param <K> the type for the keys',\n      '@param <K> the key data type',\n      '@param <K> specifies the key type',\n      '@param <K> the datatype of the keys'\n    ]\n  },\n  {\n    'tag': '@param <V> the value type',\n    'alternatives': [\n      '@param <V> the type of values',\n      '@param <V> the type for the values',\n      '@param <V> the value data type',\n      '@param <V> specifies the value type',\n      '@param <V> the datatype of the values'\n    ]\n  },\n  {\n    'tag': '@param map the {@link MultiValuedMap} to use',\n    'alternatives': [\n      '@param map the {@link MultiValuedMap} to utilize',\n      '@param map the {@link MultiValuedMap} for usage',\n      '@param map the {@link MultiValuedMap} to apply',\n      '@param map the {@link MultiValuedMap} that should be used',\n      '@param map the {@link MultiValuedMap} to employ'\n    ]\n  },\n  {\n    'tag': '@param key the key to look up',\n    'alternatives': [\n      '@param key the key to search for',\n      '@param key the key for lookup',\n      '@param key the key to find',\n      '@param key the key to retrieve',\n      '@param key the key to locate'\n    ]\n  }\n]"