"output = [\n  {\n    'tag': '@throws IdAlreadyInUseException If an edge with the same id already exists and strict\\n            checking is enabled.',\n    'alternatives': [\n      '@throws IdAlreadyInUseException If there is already an edge with the same id and strict\\n            checking is enabled.',\n      '@throws IdAlreadyInUseException In case an edge with the same id already exists and strict\\n            checking is enabled.',\n      '@throws IdAlreadyInUseException If strict checking is enabled and there is already an edge\\n            with the same id.',\n      '@throws IdAlreadyInUseException If strict checking is enabled and an edge with the same\\n            id already exists.',\n      '@throws IdAlreadyInUseException If there is already an edge with the same id and strict\\n            checking is enabled.'\n    ]\n  },\n  {\n    'tag': '@throws EdgeRejectedException If strict checking is enabled and the edge is not accepted.',\n    'alternatives': [\n      '@throws EdgeRejectedException If strict checking is enabled and the edge is rejected.',\n      '@throws EdgeRejectedException If the edge is not accepted and strict checking is enabled.',\n      '@throws EdgeRejectedException If strict checking is enabled and the edge is not\\n            accepted.',\n      '@throws EdgeRejectedException If strict checking is enabled and the edge is rejected.',\n      '@throws EdgeRejectedException In case the edge is not accepted and strict checking\\n            is enabled.'\n    ]\n  },\n  {\n    'tag': '@param id Unique and arbitrary string identifying the edge.',\n    'alternatives': [\n      '@param id String that uniquely and randomly identifies the edge.',\n      '@param id Random and unique string that identifies the edge.',\n      '@param id Arbitrary and unique string used to identify the edge.',\n      '@param id Unique and random string that identifies the edge.',\n      '@param id String that identifies the edge uniquely and arbitrarily.'\n    ]\n  },\n  {\n    'tag': '@param node1 The first node',\n    'alternatives': [\n      '@param node1 The node that comes first.',\n      '@param node1 The initial node.',\n      '@param node1 The first node encountered.',\n      '@param node1 The node that is first in order.',\n      '@param node1 The node located in the first position.'\n    ]\n  },\n  {\n    'tag': '@param node2 The second node',\n    'alternatives': [\n      '@param node2 The node that comes second.',\n      '@param node2 The final node.',\n      '@param node2 The second node encountered.',\n      '@param node2 The node that is second in order.',\n      '@param node2 The node located in the second position.'\n    ]\n  },\n  {\n    'tag': '@return The newly created edge, an existing edge or {@code null}',\n    'alternatives': [\n      '@return The edge that was just created, an existing edge, or {@code null}',\n      '@return The edge that was recently created, an already existing edge, or\\n            {@code null}',\n      '@return The newly created edge, a pre-existing edge, or {@code null}',\n      '@return The edge that has been newly created, an already existing edge, or\\n            {@code null}',\n      '@return The edge that was just created, an already existing edge, or {@code null}'\n    ]\n  },\n  {\n    'tag': '@throws IdAlreadyInUseException If an edge with the same id already exists and strict\\n            checking is enabled.',\n    'alternatives': [\n      '@throws IdAlreadyInUseException If there is already an edge with the same id and strict\\n            checking is enabled.',\n      '@throws IdAlreadyInUseException In case an edge with the same id already exists and strict\\n            checking is enabled.',\n      '@throws IdAlreadyInUseException If strict checking is enabled and there is already an edge\\n            with the same id.',\n      '@throws IdAlreadyInUseException If strict checking is enabled and an edge with the same\\n            id already exists.',\n      '@throws IdAlreadyInUseException If there is already an edge with the same id and strict\\n            checking is enabled.'\n    ]\n  },\n  {\n    'tag': '@throws EdgeRejectedException If strict checking is enabled and the edge is not accepted.',\n    'alternatives': [\n      '@throws EdgeRejectedException If strict checking is enabled and the edge is rejected.',\n      '@throws EdgeRejectedException If the edge is not accepted and strict checking is enabled.',\n      '@throws EdgeRejectedException If strict checking is enabled and the edge is not\\n            accepted.',\n      '@throws EdgeRejectedException If strict checking is enabled and the edge is rejected.',\n      '@throws EdgeRejectedException In case the edge is not accepted and strict checking\\n            is enabled.'\n    ]\n  },\n  {\n    'tag': '@param id Unique and arbitrary string identifying the edge.',\n    'alternatives': [\n      '@param id String that uniquely and randomly identifies the edge.',\n      '@param id Random and unique string that identifies the edge.',\n      '@param id Arbitrary and unique string used to identify the edge.',\n      '@param id Unique and random string that identifies the edge.',\n      '@param id String that identifies the edge uniquely and arbitrarily.'\n    ]\n  },\n  {\n    'tag': '@param from The first node',\n    'alternatives': [\n      '@param from The node that comes first.',\n      '@param from The initial node.',\n      '@param from The first node encountered.',\n      '@param from The node that is first in order.',\n      '@param from The node located in the first position.'\n    ]\n  },\n  {\n    'tag': '@param to The second node',\n    'alternatives': [\n      '@param to The node that comes second.',\n      '@param to The final node.',\n      '@param to The second node encountered.',\n      '@param to The node that is second in order.',\n      '@param to The node located in the second position.'\n    ]\n  },\n  {\n    'tag': '@param directed Is the edge directed?',\n    'alternatives': [\n      '@param directed Indicates if the edge is directed.',\n      '@param directed Specifies whether the edge is directed or not.',\n      '@param directed Is the edge a directed one?',\n      '@param directed Does the edge have direction?',\n      '@param directed Determines whether the edge is directed or not.'\n    ]\n  },\n  {\n    'tag': '@return The newly created edge, an existing edge or {@code null}',\n    'alternatives': [\n      '@return The edge that was just created, an existing edge, or {@code null}',\n      '@return The edge that was recently created, an already existing edge, or\\n            {@code null}',\n      '@return The newly created edge, a pre-existing edge, or {@code null}',\n      '@return The edge that has been newly created, an already existing edge, or\\n            {@code null}',\n      '@return The edge that was just created, an already existing edge, or {@code null}'\n    ]\n  },\n  {\n    'tag': '@throws IdAlreadyInUseException If an edge with the same id already exists and strict\\n            checking is enabled.',\n    'alternatives': [\n      '@throws IdAlreadyInUseException If there is already an edge with the same id and strict\\n            checking is enabled.',\n      '@throws IdAlreadyInUseException In case an edge with the same id already exists and strict\\n            checking is enabled.',\n      '@throws IdAlreadyInUseException If strict checking is enabled and there is already an edge\\n            with the same id.',\n      '@throws IdAlreadyInUseException If strict checking is enabled and an edge with the same\\n            id already exists.',\n      '@throws IdAlreadyInUseException If there is already an edge with the same id and strict\\n            checking is enabled.'\n    ]\n  },\n  {\n    'tag': '@throws EdgeRejectedException If strict checking is enabled and the edge is not accepted.',\n    'alternatives': [\n      '@throws EdgeRejectedException If strict checking is enabled and the edge is rejected.',\n      '@throws EdgeRejectedException If the edge is not accepted and strict checking is enabled.',\n      '@throws EdgeRejectedException If strict checking is enabled and the edge is not\\n            accepted.',\n      '@throws EdgeRejectedException If strict checking is enabled and the edge is rejected.',\n      '@throws EdgeRejectedException In case the edge is not accepted and strict checking\\n            is enabled.'\n    ]\n  },\n  {\n    'tag': '@param index The index of the edge to be removed.',\n    'alternatives': [\n      '@param index The index corresponding to the edge that needs to be removed.',\n      '@param index The position of the edge that should be removed.',\n      '@param index The index value that identifies the edge to be removed.',\n      '@param index The index referring to the edge that will be removed.',\n      '@param index The index determining the edge that is going to be removed.'\n    ]\n  },\n  {\n    'tag': '@return The removed edge',\n    'alternatives': [\n      '@return The edge that was removed.',\n      '@return The edge which has been eliminated.',\n      '@return The edge that got removed.',\n      '@return The edge that was taken out.',\n      '@return The edge that was deleted.'\n    ]\n  },\n  {\n    'tag': '@throws IndexOutOfBoundsException if the index is negative or greater than {@code\\n            getEdgeCount() - 1}',\n    'alternatives': [\n      '@throws IndexOutOfBoundsException when the index is negative or exceeds {@code\\n            getEdgeCount() - 1}',\n      '@throws IndexOutOfBoundsException If the index is negative or larger than\\n            {@code getEdgeCount() - 1}',\n      '@throws IndexOutOfBoundsException If the index is less than zero or greater than\\n            {@code getEdgeCount() - 1}',\n      '@throws IndexOutOfBoundsException If the index is negative or greater than\\n            {@code getEdgeCount() - 1}',\n      '@throws IndexOutOfBoundsException When the index is negative or greater than\\n            {@code getEdgeCount() - 1}'\n    ]\n  },\n  {\n    'tag': '@param fromIndex the index of the source node',\n    'alternatives': [\n      '@param fromIndex The index indicating the source node.',\n      '@param fromIndex The index that represents the source node.',\n      '@param fromIndex The index corresponding to the source node.',\n      '@param fromIndex The index value of the source node.',\n      '@param fromIndex The index denoting the source node.'\n    ]\n  },\n  {\n    'tag': '@param toIndex the index of the target node',\n    'alternatives': [\n      '@param toIndex The index indicating the target node.',\n      '@param toIndex The index that represents the target node.',\n      '@param toIndex The index corresponding to the target node.',\n      '@param toIndex The index value of the target node.',\n      '@param toIndex The index denoting the target node.'\n    ]\n  },\n  {\n    'tag': '@return the removed edge or {@code null} if no edge is removed',\n    'alternatives': [\n      '@return The edge that was removed or {@code null} if no edge was removed.',\n      '@return The removed edge, or {@code null} in case no edge is removed.',\n      '@return The edge that got removed or {@code null} if no edge was removed.',\n      '@return The edge which was taken out, or {@code null} if no edge is removed.',\n      '@return The edge that was deleted or {@code null} if no edge was removed.'\n    ]\n  },\n  {\n    'tag': '@throws IndexOutOfBoundsException If one of the node indices is negative or greater than\\n            {@code getNodeCount() - 1}.',\n    'alternatives': [\n      '@throws IndexOutOfBoundsException If any of the node indices is negative or exceeds\\n            {@code getNodeCount() - 1}.',\n      '@throws IndexOutOfBoundsException If one of the node indices is less than zero or\\n            larger than {@code getNodeCount() - 1}.',\n      '@throws IndexOutOfBoundsException If the indices of any of the nodes are negative or\\n            greater than {@code getNodeCount() - 1}.',\n      '@throws IndexOutOfBoundsException If one of the node indices is negative or larger than\\n            {@code getNodeCount() - 1}.',\n      '@throws IndexOutOfBoundsException In case any of the node indices is negative or\\n            greater than {@code getNodeCount() - 1}.'\n    ]\n  },\n  {\n    'tag': '@throws ElementNotFoundException if strict checking is enabled and there is no edge between\\n            the two nodes.',\n    'alternatives': [\n      '@throws ElementNotFoundException If strict checking is enabled and there is no edge\\n            connecting the two nodes.',\n      '@throws ElementNotFoundException In case there is no edge between the two nodes and\\n            strict checking is enabled.',\n      '@throws ElementNotFoundException If there is no edge between the two nodes and strict\\n            checking is enabled.',\n      '@throws ElementNotFoundException If strict checking is enabled and there is no edge\\n            existing between the two nodes.',\n      '@throws ElementNotFoundException When strict checking is enabled and there is no edge\\n            between the two nodes.'\n    ]\n  },\n  {\n    'tag': '@param node1 the first node',\n    'alternatives': [\n      '@param node1 The node that comes first.',\n      '@param node1 The initial node.',\n      '@param node1 The first node encountered.',\n      '@param node1 The node that is first in order.',\n      '@param node1 The node located in the first position.'\n    ]\n  },\n  {\n    'tag': '@param node2 the second node',\n    'alternatives': [\n      '@param node2 The node that comes second.',\n      '@param node2 The final node.',\n      '@param node2 The second node encountered.',\n      '@param node2 The node that is second in order.',\n      '@param node2 The node located in the second position.'\n    ]\n  }\n]"