"[\n  { 'tag': '@param <I> the input type',\n    'alternatives': [\n      '@param <I> the type of the input',\n      '@param <I> the type of the input object',\n      '@param <I> the type for the input parameter',\n      '@param <I> specifies the type of the input',\n      '@param <I> represents the input type'\n    ]\n  },\n  { 'tag': '@param <O> the output type',\n    'alternatives': [\n      '@param <O> the type of the output',\n      '@param <O> the type of the return value',\n      '@param <O> denotes the output type',\n      '@param <O> represents the type of the result',\n      '@param <O> specifies the type of the returned value'\n    ]\n  },\n  { 'tag': '@param map the map, not cloned',\n    'alternatives': [\n      '@param map the map, without cloning',\n      '@param map the map that is not cloned',\n      '@param map the map, which is not copied',\n      '@param map represents the map, not cloned',\n      '@param map denotes the map, not a cloned version'\n    ]\n  },\n  { 'tag': '@return the transformer',\n    'alternatives': [\n      '@return the converter',\n      '@return the mapper',\n      '@return the function',\n      '@return the modifier',\n      '@return the translator'\n    ]\n  },\n  { 'tag': '@param input the input object to transform',\n    'alternatives': [\n      '@param input the object to convert',\n      '@param input denotes the object to change',\n      '@param input the object for transformation',\n      '@param input represents the object to modify',\n      '@param input specifies the object to transform'\n    ]\n  },\n  { 'tag': '@return the map',\n    'alternatives': [\n      '@return the table',\n      '@return the dictionary',\n      '@return the collection',\n      '@return the structure',\n      '@return the hash map'\n    ]\n  },\n  { 'tag': '@param map the map to use for lookup, not cloned',\n    'alternatives': [\n      '@param map the map to perform lookup, not cloned',\n      '@param map represents the map used for lookup (not cloned)',\n      '@param map denotes the map to be used for lookup, not cloned',\n      '@param map specifies the map for lookup, without cloning',\n      '@param map the map for perform lookup, not cloned'\n    ]\n  },\n  { 'tag': '@param <T> the type the factory creates',\n    'alternatives': [\n      '@param <T> the type generated by the factory',\n      '@param <T> denotes the type created by the factory',\n      '@param <T> specifies the type produced by the factory',\n      '@param <T> the type that the factory generates',\n      '@param <T> represents the type created by the factory'\n    ]\n  },\n  { 'tag': '@return the singleton instance',\n    'alternatives': [\n      '@return the unique instance',\n      '@return the one and only instance',\n      '@return the sole object',\n      '@return the individual instance',\n      '@return the distinct singleton'\n    ]\n  },\n  { 'tag': '@return never',\n    'alternatives': [\n      '@return always false',\n      '@return constantly false',\n      '@return never true',\n      '@return always returning false',\n      '@return constantly returning false'\n    ]\n  },\n  { 'tag': '@param <E> the type that the closure acts on',\n    'alternatives': [\n      '@param <E> the type used by the closure',\n      '@param <E> denotes the type affected by the closure',\n      '@param <E> describes the type the closure applies to',\n      '@param <E> specifies the type manipulated by the closure',\n      '@param <E> represents the type the closure operates on'\n    ]\n  },\n  { 'tag': '@param closures the closures to chain, copied, no nulls',\n    'alternatives': [\n      '@param closures the copied closures to join, with no nulls',\n      '@param closures denotes the chained closures, copied and no nulls',\n      '@param closures specifies the concatenated closures, with no nulls',\n      '@param closures represents the linked closures, copied and no nulls',\n      '@param closures the combined closures, with no nulls, copied'\n    ]\n  },\n  { 'tag': '@return the <code>chained</code> closure',\n    'alternatives': [\n      '@return the closure that is <code>chained</code>',\n      '@return the closure joined together',\n      '@return the closure combined in a chain',\n      '@return the closure that is connected',\n      '@return the closure linked in a sequence'\n    ]\n  },\n  { 'tag': '@param <E> the type that the closure acts on',\n    'alternatives': [\n      '@param <E> the type used by the closure',\n      '@param <E> denotes the type affected by the closure',\n      '@param <E> describes the type the closure applies to',\n      '@param <E> specifies the type manipulated by the closure',\n      '@param <E> represents the type the closure operates on'\n    ]\n  },\n  { 'tag': '@param closures a collection of closures to chain',\n    'alternatives': [\n      '@param closures a set of closures to join',\n      '@param closures denotes a collection of linked closures',\n      '@param closures specifies a group of connected closures',\n      '@param closures represents a list of concatenated closures',\n      '@param closures the collection of closures to be chained'\n    ]\n  },\n  { 'tag': '@return the <code>chained</code> closure',\n    'alternatives': [\n      '@return the closure that is <code>chained</code>',\n      '@return the closure joined together',\n      '@return the closure combined in a chain',\n      '@return the closure that is connected',\n      '@return the closure linked in a sequence'\n    ]\n  },\n  { 'tag': '@throws NullPointerException if any closure in the collection is null',\n    'alternatives': [\n      '@throws NullPointerException when there is a null closure in the collection',\n      '@throws NullPointerException if one or more closures in the collection are null',\n      '@throws NullPointerException in case of a null closure in the collection',\n      '@throws NullPointerException if any of the closures in the collection is null',\n      '@throws NullPointerException if there is a null closure in the collection'\n    ]\n  },\n  { 'tag': '@param input the input object passed to each closure',\n    'alternatives': [\n      '@param input the input object given to every closure',\n      '@param input denotes the object passed to each closure',\n      '@param input represents the object supplied to all closures',\n      '@param input specifies the object transmitted to every closure',\n      '@param input the object that is sent to each closure'\n    ]\n  },\n  { 'tag': '@return a copy of the closures',\n    'alternatives': [\n      '@return a duplicated version of the closures',\n      '@return a cloned copy of the closures',\n      '@return a replica of the closures',\n      '@return a replicated copy of the closures',\n      '@return a duplicate of the collection of closures'\n    ]\n  },\n  { 'tag': '@param clone if {@code true} the input argument will be cloned',\n    'alternatives': [\n      '@param clone if {@code true}, the input argument is copied',\n      '@param clone specifies whether the input argument should be cloned',\n      '@param clone denotes if the input argument needs to be cloned',\n      '@param clone represents whether to clone the input argument',\n      '@param clone indicates if the input argument is to be cloned'\n    ]\n  },\n  { 'tag': '@param closures the closures to chain, no nulls',\n    'alternatives': [\n      '@param closures the closures to join, without nulls',\n      '@param closures denotes the chained closures, without nulls',\n      '@param closures specifies the concatenated closures, no nulls',\n      '@param closures represents the linked closures, without nulls',\n      '@param closures the combined closures, without nulls'\n    ]\n  },\n  { 'tag': '@param closures the closures to chain, copied, no nulls',\n    'alternatives': [\n      '@param closures the copied closures to join, with no nulls',\n      '@param closures denotes the chained closures, copied and no nulls',\n      '@param closures specifies the concatenated closures, with no nulls',\n      '@param closures represents the linked closures, copied and no nulls',\n      '@param closures the combined closures, with no nulls, copied'\n    ]\n  },\n  { 'tag': '@param <T> the type that the predicate queries',\n    'alternatives': [\n      '@param <T> the type used by the predicate',\n      '@param <T> denotes the type interrogated by the predicate',\n      '@param <T> describes the type the predicate examines',\n      '@param <T> specifies the type inquired by the predicate',\n      '@param <T> represents the type the predicate analyzes'\n    ]\n  },\n  { 'tag': '@return the <code>and</code> predicate',\n    'alternatives': [\n      '@return the predicate joined by <code>and</code>',\n      '@return the predicate combined with <code>and</code>',\n      '@return the combined <code>and</code> predicate',\n      '@return the predicate that is connected with <code>and</code>',\n      '@return the <code>and</code> connected predicate'\n    ]\n  },\n  { 'tag': '@param object the input object',\n    'alternatives': [\n      '@param object the object passed',\n      '@param object denotes the provided object',\n      '@param object represents the supplied object',\n      '@param object specifies the given object',\n      '@param object the supplied object'\n    ]\n  }\n]"