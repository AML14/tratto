"output=[\n  {\n    'tag': '@param randomGenerator source of random data',\n    'alternatives': [\n      '@param randomGenerator source of arbitrary data',\n      '@param randomGenerator the source of random data',\n      '@param randomGenerator generator of random data',\n      '@param randomGenerator provider of random data',\n      '@param randomGenerator random data source'\n    ]\n  },\n  {\n    'tag': '@param data array of data to be ranked',\n    'alternatives': [\n      '@param data array of elements to be ranked',\n      '@param data input array to rank',\n      '@param data array to determine ranks',\n      '@param data array that needs to be ranked',\n      '@param data array of values requiring ranking'\n    ]\n  },\n  {\n    'tag': '@return an array of ranks corresponding to the elements of the input array',\n    'alternatives': [\n      '@return an array of ranks that match the elements in the input array',\n      '@return an array containing ranks for each element in the input array',\n      '@return an array of ranks that correspond to the elements in the input array',\n      '@return an array that holds ranks for each element in the input array',\n      '@return an array with ranks associated with the elements of the input array'\n    ]\n  },\n  {\n    'tag': '@param values array of values to sum',\n    'alternatives': [\n      '@param values array of elements to calculate sum',\n      '@param values input array for summation',\n      '@param values array containing values to be summed',\n      '@param values array of numbers to add',\n      '@param values array to perform summation on'\n    ]\n  },\n  {\n    'tag': '@return the sum of the values or <code>Double.NaN</code> if the array\\nis empty',\n    'alternatives': [\n      '@return sum of the values or <code>Double.NaN</code> if there are no elements in the array',\n      '@return the sum of the values or <code>Double.NaN</code> if the array is devoid of elements',\n      '@return the total sum of the values or <code>Double.NaN</code> if the array is empty',\n      '@return sum of the values in the array or <code>Double.NaN</code> if the array is empty',\n      '@return sum of the values or <code>Double.NaN</code> if the array contains no elements'\n    ]\n  },\n  {\n    'tag': '@param values the input array',\n    'alternatives': [\n      '@param values the provided array',\n      '@param values array as input',\n      '@param values the given array',\n      '@param values the array input',\n      '@param values the array as input'\n    ]\n  },\n  {\n    'tag': '@param begin index of the first array element to include',\n    'alternatives': [\n      '@param begin starting index of the initial array element to include',\n      '@param begin the index of the first element in the array to be included',\n      '@param begin the index of the initial element to include from the array',\n      '@param begin index indicating the starting position of the first element to include from the array',\n      '@param begin the starting position index of the initial array element to include'\n    ]\n  },\n  {\n    'tag': '@param length the number of elements to include',\n    'alternatives': [\n      '@param length number of elements to be included',\n      '@param length count of elements to include',\n      '@param length number of array elements to be included',\n      '@param length the total count of elements to include',\n      '@param length quantity of elements to include'\n    ]\n  },\n  {\n    'tag': '@return the sum of the values or Double.NaN if length = 0',\n    'alternatives': [\n      '@return sum of the values or Double.NaN if the length equals 0',\n      '@return the sum of the values or Double.NaN if the length is zero',\n      '@return sum of the values or Double.NaN if length is equal to zero',\n      '@return sum of the values or Double.NaN if the length is 0',\n      '@return the sum of the values or Double.NaN if the length equals zero'\n    ]\n  },\n  {\n    'tag': '@param values input array',\n    'alternatives': [\n      '@param values array as input',\n      '@param values the provided array',\n      '@param values the given array',\n      '@param values the input array',\n      '@param values the array input'\n    ]\n  },\n  {\n    'tag': '@return the sum of the squared values or <code>Double.NaN</code> if the\\narray is empty',\n    'alternatives': [\n      '@return sum of the values squared or <code>Double.NaN</code> if the array is empty',\n      '@return the sum of the values squared or <code>Double.NaN</code> if the array has no elements',\n      '@return the sum of squared values or <code>Double.NaN</code> if the array is empty',\n      '@return sum of the squared values or <code>Double.NaN</code> if no elements exist in the array',\n      '@return sum of values squared or <code>Double.NaN</code> if the array is empty'\n    ]\n  },\n  {\n    'tag': '@param values the input array',\n    'alternatives': [\n      '@param values the given array',\n      '@param values the provided array',\n      '@param values array as input',\n      '@param values the array input',\n      '@param values the input array'\n    ]\n  },\n  {\n    'tag': '@param begin index of the first array element to include',\n    'alternatives': [\n      '@param begin starting index of the initial array element to include',\n      '@param begin the index of the first element in the array to be included',\n      '@param begin the index of the initial element to include from the array',\n      '@param begin index indicating the starting position of the first element to include from the array',\n      '@param begin the starting position index of the initial array element to include'\n    ]\n  },\n  {\n    'tag': '@param length the number of elements to include',\n    'alternatives': [\n      '@param length number of elements to be included',\n      '@param length count of elements to include',\n      '@param length number of array elements to be included',\n      '@param length the total count of elements to include',\n      '@param length quantity of elements to include'\n    ]\n  },\n  {\n    'tag': '@return the sum of the squares of the values or Double.NaN if length = 0',\n    'alternatives': [\n      '@return the sum of squares of the values or Double.NaN if the length is zero',\n      '@return the sum of the squares of the values or Double.NaN if the length equals zero',\n      '@return sum of squared values or Double.NaN if length is equal to zero',\n      '@return the sum of values squared or Double.NaN if the length is 0',\n      '@return sum of the squares of the values or Double.NaN if the length equals 0'\n    ]\n  },\n  {\n    'tag': '@param values the input array',\n    'alternatives': [\n      '@param values array as input',\n      '@param values the given array',\n      '@param values the provided array',\n      '@param values the array input',\n      '@param values the input array'\n    ]\n  },\n  {\n    'tag': '@return the product of the values or Double.NaN if the array is empty',\n    'alternatives': [\n      '@return product of the values or Double.NaN if the array is devoid of elements',\n      '@return the product of the values or Double.NaN if there are no elements in the array',\n      '@return the total product of the values or Double.NaN if the array is empty',\n      '@return product of the values in the array or Double.NaN if the array is empty',\n      '@return product of the values or Double.NaN if the array contains no elements'\n    ]\n  },\n  {\n    'tag': '@param values the input array',\n    'alternatives': [\n      '@param values the provided array',\n      '@param values array as input',\n      '@param values the given array',\n      '@param values the array input',\n      '@param values the input array'\n    ]\n  },\n  {\n    'tag': '@param begin index of the first array element to include',\n    'alternatives': [\n      '@param begin starting index of the initial array element to include',\n      '@param begin the index of the first element in the array to be included',\n      '@param begin the index of the initial element to include from the array',\n      '@param begin index indicating the starting position of the first element to include from the array',\n      '@param begin the starting position index of the initial array element to include'\n    ]\n  },\n  {\n    'tag': '@param length the number of elements to include',\n    'alternatives': [\n      '@param length number of elements to be included',\n      '@param length count of elements to include',\n      '@param length number of array elements to be included',\n      '@param length the total count of elements to include',\n      '@param length quantity of elements to include'\n    ]\n  },\n  {\n    'tag': '@return the product of the values or Double.NaN if length = 0',\n    'alternatives': [\n      '@return product of the values or Double.NaN if length equals 0',\n      '@return the product of the values or Double.NaN if the length is zero',\n      '@return product of the values or Double.NaN if length is equal to zero',\n      '@return product of the values or Double.NaN if the length is 0',\n      '@return the product of the values or Double.NaN if the length equals zero'\n    ]\n  },\n  {\n    'tag': '@param values the input array',\n    'alternatives': [\n      '@param values array as input',\n      '@param values the provided array',\n      '@param values the given array',\n      '@param values the input array',\n      '@param values the array input'\n    ]\n  },\n  {\n    'tag': '@return the sum of the natural logs of the values or Double.NaN if\\nthe array is empty',\n    'alternatives': [\n      '@return sum of natural logs of the values or Double.NaN if the array is empty',\n      '@return the sum of the natural logarithms of the values or Double.NaN if the array has no elements',\n      '@return sum of natural logarithms of the values or Double.NaN if the array is devoid of elements',\n      '@return sum of natural log values or Double.NaN if there are no elements in the array',\n      '@return sum of the natural logarithms of the values or Double.NaN if the array contains no elements'\n    ]\n  },\n  {\n    'tag': '@param values the input array',\n    'alternatives': [\n      '@param values array as input',\n      '@param values the provided array',\n      '@param values the given array',\n      '@param values the array input',\n      '@param values the input array'\n    ]\n  },\n  {\n    'tag': '@param begin index of the first array element to include',\n    'alternatives': [\n      '@param begin starting index of the initial array element to include',\n      '@param begin the index of the first element in the array to be included',\n      '@param begin the index of the initial element to include from the array',\n      '@param begin index indicating the starting position of the first element to include from the array',\n      '@param begin the starting position index of the initial array element to include'\n    ]\n  }\n]"