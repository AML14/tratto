"output = [\n  {\n    'tag': '@throws NotStrictlyPositiveException if {@code abs <= 0}.',\n    'alternatives': [\n      '@throws NotStrictlyPositiveException if {@code abs <= 0}.',\n      '@throws NotStrictlyPositiveException when {@code abs} is less than or equal to zero.',\n      '@throws NotStrictlyPositiveException if the absolute value {@code abs} is not strictly positive.'\n    ]\n  },\n  {\n    'tag': '@throws NullArgumentException if original is null',\n    'alternatives': [\n      '@throws NullArgumentException if original is null.',\n      '@throws NullArgumentException when the original argument is null.',\n      '@throws NullArgumentException if the \"original\" parameter is null.'\n    ]\n  },\n  {\n    'tag': '@throws NullArgumentException if type or NaNStrategy passed is null',\n    'alternatives': [\n      '@throws NullArgumentException if type or NaNStrategy passed is null.',\n      '@throws NullArgumentException when either the type or NaNStrategy passed is null.',\n      '@throws NullArgumentException if either the type or NaNStrategy passed as arguments is null.'\n    ]\n  },\n  {\n    'tag': '@throws MathIllegalArgumentException if p is not a valid quantile value\\n(p must be greater than 0 and less than or equal to 100)',\n    'alternatives': [\n      '@throws MathIllegalArgumentException if p is not a valid quantile value\\n(p must be greater than 0 and less than or equal to 100).',\n      '@throws MathIllegalArgumentException when p is an invalid quantile value\\n(p must be within the range of 0 to 100, inclusive).',\n      '@throws MathIllegalArgumentException if the value of p is not a valid quantile value\\n(p must be greater than 0 and less than or equal to 100).'\n    ]\n  },\n  {\n    'tag': '@throws MathIllegalArgumentException if <code>values</code> is null\\n    or p is invalid',\n    'alternatives': [\n      '@throws MathIllegalArgumentException if <code>values</code> is null\\n    or p is invalid.',\n      '@throws MathIllegalArgumentException when <code>values</code> is null or p is invalid.',\n      '@throws MathIllegalArgumentException if either <code>values</code> is null or p is invalid.'\n    ]\n  },\n  {\n    'tag': '@throws MathIllegalArgumentException if p is not greater than 0 and less\\nthan or equal to 100',\n    'alternatives': [\n      '@throws MathIllegalArgumentException if p is not greater than 0 and less\\nthan or equal to 100.',\n      '@throws MathIllegalArgumentException if p does not satisfy the condition of being greater than 0 and less than or equal to 100.',\n      '@throws MathIllegalArgumentException when p does not fall within the range of 0 to 100, inclusive.'\n    ]\n  },\n  {\n    'tag': '@throws NullArgumentException when newEstimationType is null',\n    'alternatives': [\n      '@throws NullArgumentException when newEstimationType is null.',\n      '@throws NullArgumentException if the newEstimationType parameter is null.',\n      '@throws NullArgumentException if the value of newEstimationType is null.'\n    ]\n  },\n  {\n    'tag': '@throws NullArgumentException when newNaNStrategy is null',\n    'alternatives': [\n      '@throws NullArgumentException when newNaNStrategy is null.',\n      '@throws NullArgumentException if the newNaNStrategy argument is null.',\n      '@throws NullArgumentException if the value of newNaNStrategy is null.'\n    ]\n  },\n  {\n    'tag': '@throws NullArgumentException when newKthSelector is null',\n    'alternatives': [\n      '@throws NullArgumentException when newKthSelector is null.',\n      '@throws NullArgumentException if the newKthSelector parameter is null.',\n      '@throws NullArgumentException if the value of newKthSelector is null.'\n    ]\n  },\n  {\n    'tag': '@throws NonSquareMatrixException if matrix is not square.',\n    'alternatives': [\n      '@throws NonSquareMatrixException if matrix is not square.',\n      '@throws NonSquareMatrixException when the matrix is not square.',\n      '@throws NonSquareMatrixException if the given matrix is not square.'\n    ]\n  },\n  {\n    'tag': '@throws NonSquareMatrixException if matrix is not square',\n    'alternatives': [\n      '@throws NonSquareMatrixException if matrix is not square.',\n      '@throws NonSquareMatrixException when the matrix is not square.',\n      '@throws NonSquareMatrixException if the provided matrix is not square.'\n    ]\n  },\n  {\n    'tag': '@throws NumberIsTooSmallException if {@code numRows < 2} or\\n{@code numCols < 2}.',\n    'alternatives': [\n      '@throws NumberIsTooSmallException if {@code numRows < 2} or\\n{@code numCols < 2}.',\n      '@throws NumberIsTooSmallException when either {@code numRows} is less than 2 or {@code numCols} is less than 2.',\n      '@throws NumberIsTooSmallException if the values of {@code numRows} or {@code numCols} are too small.'\n    ]\n  },\n  {\n    'tag': '@throws NotStrictlyPositiveException if {@code n <= 0}.',\n    'alternatives': [\n      '@throws NotStrictlyPositiveException if {@code n <= 0}.',\n      '@throws NotStrictlyPositiveException when the value of {@code n} is not strictly positive.',\n      '@throws NotStrictlyPositiveException if the argument {@code n} is less than or equal to zero.'\n    ]\n  },\n  {\n    'tag': '@param isLast true if the step is the last one',\n    'alternatives': [\n      '@param isLast true if the step is the last one.',\n      '@param isLast indicates whether the step is the last one.',\n      '@param isLast specifies whether it is the last step.'\n    ]\n  },\n  {\n    'tag': '@param base Base of the logarithm, must be greater than 0.',\n    'alternatives': [\n      '@param base Base of the logarithm, must be greater than 0.',\n      '@param base The base of the logarithm, which must be greater than 0.',\n      '@param base The logarithm base, which has to be greater than 0.'\n    ]\n  },\n  {\n    'tag': '@param x Argument, must be greater than 0.',\n    'alternatives': [\n      '@param x Argument, must be greater than 0.',\n      '@param x The argument, which has to be greater than 0.',\n      '@param x The input value, which must be greater than 0.'\n    ]\n  },\n  {\n    'tag': '@return the value of the logarithm, i.e. the number {@code y} such that\\n<code>base<sup>y</sup> = x</code>.',\n    'alternatives': [\n      '@return the value of the logarithm, i.e. the number {@code y} such that\\n<code>base<sup>y</sup> = x</code>.',\n      '@return the logarithmic value, represented by {@code y}, that satisfies the equation\\n<code>base<sup>y</sup> = x</code>.',\n      '@return the value {@code y} that solves the equation <code>base<sup>y</sup> = x</code>.'\n    ]\n  },\n  {\n    'tag': '@return a if a is lesser or equal to b, b otherwise',\n    'alternatives': [\n      '@return a if a is lesser or equal to b, b otherwise.',\n      '@return a if the value of a is less than or equal to b, otherwise return b.',\n      '@return a if a is less than or equal to b, otherwise return b.'\n    ]\n  },\n  {\n    'tag': '@return a if a is lesser or equal to b, b otherwise',\n    'alternatives': [\n      '@return a if a is lesser or equal to b, b otherwise.',\n      '@return a if the value of a is less than or equal to b, otherwise return b.',\n      '@return a if a is less than or equal to b, otherwise return b.'\n    ]\n  },\n  {\n    'tag': '@return a if a is lesser or equal to b, b otherwise',\n    'alternatives': [\n      '@return a if a is lesser or equal to b, b otherwise.',\n      '@return a if the value of a is less than or equal to b, otherwise return b.',\n      '@return a if a is less than or equal to b, otherwise return b.'\n    ]\n  },\n  {\n    'tag': '@return a if a is lesser or equal to b, b otherwise',\n    'alternatives': [\n      '@return a if a is lesser or equal to b, b otherwise.',\n      '@return a if the value of a is less than or equal to b, otherwise return b.',\n      '@return a if a is less than or equal to b, otherwise return b.'\n    ]\n  },\n  {\n    'tag': '@return b if a is lesser or equal to b, a otherwise',\n    'alternatives': [\n      '@return b if a is lesser or equal to b, a otherwise.',\n      '@return b if the value of a is less than or equal to b, otherwise return a.',\n      '@return b if a is less than or equal to b, otherwise return a.'\n    ]\n  },\n  {\n    'tag': '@return b if a is lesser or equal to b, a otherwise',\n    'alternatives': [\n      '@return b if a is lesser or equal to b, a otherwise.',\n      '@return b if the value of a is less than or equal to b, otherwise return a.',\n      '@return b if a is less than or equal to b, otherwise return a.'\n    ]\n  },\n  {\n    'tag': '@return b if a is lesser or equal to b, a otherwise',\n    'alternatives': [\n      '@return b if a is lesser or equal to b, a otherwise.',\n      '@return b if the value of a is less than or equal to b, otherwise return a.',\n      '@return b if a is less than or equal to b, otherwise return a.'\n    ]\n  }\n]"