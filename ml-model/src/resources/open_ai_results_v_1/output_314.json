"output = [\n  {\n    'tag': '@return a collection view of the values contained in this map',\n    'alternatives': [\n      '@return a view of the values contained in this map as a collection',\n      '@return a collection that represents the values stored in this map',\n      '@return a collection that provides a view of the values in this map',\n      '@return a collection containing the values stored in this map',\n      '@return a collection that shows the values held in this map'\n    ]\n  },\n  {\n    'tag': '@param key the key to search for',\n    'alternatives': [\n      '@param key the key to look for',\n      '@param key the key to find',\n      '@param key the key to seek',\n      '@param key the key to locate',\n      '@param key the key to search'\n    ]\n  },\n  {\n    'tag': '@param value the value to search for',\n    'alternatives': [\n      '@param value the value to look for',\n      '@param value the value to find',\n      '@param value the value to seek',\n      '@param value the value to locate',\n      '@param value the value to search'\n    ]\n  },\n  {\n    'tag': '@return true if the map contains the value',\n    'alternatives': [\n      '@return true if the value is present in the map',\n      '@return true if the map holds the value',\n      '@return true if the value exists in the map',\n      '@return true if the map includes the value',\n      '@return true if the value is contained in the map'\n    ]\n  },\n  {\n    'tag': '@param key the key to retrieve',\n    'alternatives': [\n      '@param key the key to get',\n      '@param key the key to obtain',\n      '@param key the key to fetch',\n      '@param key the key to access',\n      '@param key the key to obtain the value for'\n    ]\n  },\n  {\n    'tag': '@return the collection mapped to the key, null if no mapping',\n    'alternatives': [\n      '@return the collection associated with the key, null if not mapped',\n      '@return the collection that corresponds to the key, null if no mapping',\n      '@return the collection mapped to the key, null if there is no mapping',\n      '@return the collection assigned to the key, null if no mapping exists',\n      '@return the collection that is linked to the key, null if no mapping found'\n    ]\n  },\n  {\n    'tag': '@param key the key to get size for',\n    'alternatives': [\n      '@param key the key for which to obtain the size',\n      '@param key the key to check the size of',\n      '@param key the key to determine the size for',\n      '@param key the key whose size should be retrieved',\n      '@param key the key to get the size of'\n    ]\n  },\n  {\n    'tag': '@return the size of the collection at the key, zero if key not in map',\n    'alternatives': [\n      '@return the size of the collection assigned to the key, zero if key is absent in the map',\n      '@return the size of the collection associated with the key, zero if the key is not present in the map',\n      '@return the size of the collection mapped to the key, zero if the key is not found in the map',\n      '@return the size of the collection that corresponds to the key, zero if key does not exist in the map',\n      '@return the size of the collection that is linked to the key, zero if the key is not mapped'\n    ]\n  },\n  {\n    'tag': '@param key the key to store against',\n    'alternatives': [\n      '@param key the key to store with',\n      '@param key the key to save against',\n      '@param key the key to use for storage',\n      '@param key the key to keep with',\n      '@param key the key to hold the value against'\n    ]\n  },\n  {\n    'tag': '@return true if this map changed',\n    'alternatives': [\n      '@return true if modifications were made to this map',\n      '@return true if changes were applied to this map',\n      '@return true if this map was modified',\n      '@return true if there were changes to this map',\n      '@return true if there were modifications to this map'\n    ]\n  },\n  {\n    'tag': '@param key the key to get an iterator for',\n    'alternatives': [\n      '@param key the key to obtain an iterator for',\n      '@param key the key to retrieve an iterator for',\n      '@param key the key to get an iterator with',\n      '@param key the key to access an iterator for',\n      '@param key the key to obtain an iterator from'\n    ]\n  },\n  {\n    'tag': '@return the iterator of the collection at the key, empty iterator if key not in map',\n    'alternatives': [\n      '@return the iterator for the collection associated with the key, empty iterator if key is not present in the map',\n      '@return the iterator for the collection mapped to the key, empty iterator if key is not found in the map',\n      '@return the iterator for the collection assigned to the key, empty iterator if key is absent in the map',\n      '@return the iterator for the collection corresponding to the key, empty iterator if key does not exist in the map',\n      '@return the iterator for the collection linked to the key, empty iterator if key is not mapped'\n    ]\n  },\n  {\n    'tag': '@return the iterator of all mappings in this map',\n    'alternatives': [\n      '@return the iterator that loops through all the mappings in this map',\n      '@return the iterator that encompasses all the mappings in this map',\n      '@return the iterator that traverses all the mappings in this map',\n      '@return the iterator that iterates over all the mappings in this map',\n      '@return the iterator that covers all the mappings in this map'\n    ]\n  },\n  {\n    'tag': '@return the total size of the map counting all values',\n    'alternatives': [\n      '@return the overall size of the map including all values',\n      '@return the combined size of the map taking into account all values',\n      '@return the total count of entries in the map considering all values',\n      '@return the sum of sizes of all collections in the map',\n      '@return the complete size of the map, counting all the values'\n    ]\n  },\n  {\n    'tag': '@param size the collection size that is about to be added',\n    'alternatives': [\n      '@param size the size of the collection that is going to be added',\n      '@param size the size of the collection about to be added',\n      '@param size the size of the collection being added',\n      '@param size the size of the collection to be added',\n      '@param size the size of the collection that will be added'\n    ]\n  },\n  {\n    'tag': '@return the new collection',\n    'alternatives': [\n      '@return the fresh collection',\n      '@return the brand new collection',\n      '@return the newly created collection',\n      '@return the recently generated collection',\n      '@return the updated collection'\n    ]\n  },\n  {\n    'tag': '@param <C> the collection class type',\n    'alternatives': [\n      '@param <C> the type of the collection class',\n      '@param <C> the class type of the collection',\n      '@param <C> the class representing the collection',\n      '@param <C> the collection class type',\n      '@param <C> the type of class for the collection'\n    ]\n  },\n  {\n    'tag': '@param map the map to decorate',\n    'alternatives': [\n      '@param map the map to enhance',\n      '@param map the map to modify',\n      '@param map the map to customize',\n      '@param map the map to embellish',\n      '@param map the map to adorn'\n    ]\n  },\n  {\n    'tag': '@param collectionFactory the collection factory which must return a Collection instance',\n    'alternatives': [\n      '@param collectionFactory the factory for creating collections that should produce a Collection instance',\n      '@param collectionFactory the factory responsible for generating collections that should provide a Collection instance',\n      '@param collectionFactory the factory function that should return an instance of Collection',\n      '@param collectionFactory the factory method used to create collections that must return a Collection instance',\n      '@param collectionFactory the factory that produces collections and must yield a Collection instance'\n    ]\n  },\n  {\n    'tag': '@param key the key',\n    'alternatives': [\n      '@param key the identifier',\n      '@param key the reference',\n      '@param key the name',\n      '@param key the symbol',\n      '@param key the element'\n    ]\n  },\n  {\n    'tag': '@return the mapped value, null if no match',\n    'alternatives': [\n      '@return the corresponding value, null if no match',\n      '@return the value associated with the key, null if no match',\n      '@return the value mapped to the key, null if no match',\n      '@return the value that corresponds to the key, null if no match',\n      '@return the value linked to the key, null if no match'\n    ]\n  },\n  {\n    'tag': '@param key the key',\n    'alternatives': [\n      '@param key the identifier',\n      '@param key the reference',\n      '@param key the name',\n      '@param key the symbol',\n      '@param key the element'\n    ]\n  },\n  {\n    'tag': '@param updateToMRU whether the key shall be updated to the\\n  most recently used position',\n    'alternatives': [\n      '@param updateToMRU whether to move the key to the most recently used position',\n      '@param updateToMRU indicates whether the key should be updated to the most recently used position',\n      '@param updateToMRU specifies whether the key needs to be updated to the most recently used position',\n      '@param updateToMRU determines whether the key should be moved to the most recently used position',\n      '@param updateToMRU defines whether the key is to be updated to the most recently used position'\n    ]\n  },\n  {\n    'tag': '@return the mapped value, null if no match',\n    'alternatives': [\n      '@return the corresponding value, null if no match',\n      '@return the value associated with the key, null if no match',\n      '@return the value mapped to the key, null if no match',\n      '@return the value that corresponds to the key, null if no match',\n      '@return the value linked to the key, null if no match'\n    ]\n  },\n  {\n    'tag': '@param entry the entry to update',\n    'alternatives': [\n      '@param entry the entry to modify',\n      '@param entry the entry to change',\n      '@param entry the entry to edit',\n      '@param entry the entry to revise',\n      '@param entry the entry to alter'\n    ]\n  }\n]"