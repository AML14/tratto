"output = [\r\n  {\r\n    'tag': '@param distance Distance function. The neuron's features are\\npassed as the first argument to {@link DistanceMeasure#compute(double[],double[])}.',\r\n    'alternatives': [\r\n      '@param distance Distance measure. The features of the neuron are\\npassed as the first argument to {@link DistanceMeasure#compute(double[],double[])}.',\r\n      '@param distance Distance measure. The features of the neuron are\\nused as the first parameter for {@link DistanceMeasure#compute(double[],double[])}.',\r\n      '@param distance The distance function. The features of the neuron\\nare provided as the first argument to {@link DistanceMeasure#compute(double[],double[])}.',\r\n      '@param distance The distance function. The features of the neuron\\nare passed as the first parameter to {@link DistanceMeasure#compute(double[],double[])}.',\r\n      '@param distance The distance function. The first argument to\\n{@link DistanceMeasure#compute(double[],double[])} is the features of the neuron.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@return the neuron whose features are closest to the given data.',\r\n    'alternatives': [\r\n      '@return the neuron with the closest features to the given data.',\r\n      '@return the neuron that has features closest to the given data.',\r\n      '@return the neuron with features that are the closest to the given\\ndata.',\r\n      '@return the neuron having the features that are closest to the\\ngiven data.',\r\n      '@return the neuron which features are closest to the given data.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@throws org.apache.commons.math3.exception.DimensionMismatchException if the size of the input is not compatible with the neurons features\\nsize.',\r\n    'alternatives': [\r\n      '@throws org.apache.commons.math3.exception.DimensionMismatchException if the size of the input does not match the size\\nof the neuron features.',\r\n      '@throws org.apache.commons.math3.exception.DimensionMismatchException if the size of the input is incompatible with the size\\nof the neuron features.',\r\n      '@throws org.apache.commons.math3.exception.DimensionMismatchException if the size of the input does not align with the size\\nof the neuron features.',\r\n      '@throws org.apache.commons.math3.exception.DimensionMismatchException if the size of the input does not correspond to the size\\nof the neuron features.',\r\n      '@throws org.apache.commons.math3.exception.DimensionMismatchException if the size of the input is not consistent with the size\\nof the neuron features.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param features Data.',\r\n    'alternatives': [\r\n      '@param features Input data.',\r\n      '@param features Feature data.',\r\n      '@param features The data.',\r\n      '@param features The input data.',\r\n      '@param features The feature data.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param neurons List of neurons to scan. If the list is empty\\n{@code null} will be returned.',\r\n    'alternatives': [\r\n      '@param neurons List of neurons to iterate through. If the list is empty,\\n{@code null} will be returned.',\r\n      '@param neurons The list of neurons to search. If the list is empty,\\n{@code null} will be returned.',\r\n      '@param neurons The list of neurons to iterate over. If the list is empty,\\n{@code null} will be returned.',\r\n      '@param neurons List containing the neurons to be scanned. If the list is empty,\\n{@code null} will be returned.',\r\n      '@param neurons List of neurons to inspect. Return {@code null} if the list is\\nempty.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': \"@param distance Distance function. The neuron's features are\\npassed as the first argument to {@link DistanceMeasure#compute(double[],double[])}.\",\r\n    'alternatives': [\r\n      '@param distance Distance measure. The features of the neuron are\\npassed as the first argument to {@link DistanceMeasure#compute(double[],double[])}.',\r\n      '@param distance Distance measure. The features of the neuron are\\nused as the first parameter for {@link DistanceMeasure#compute(double[],double[])}.',\r\n      '@param distance The distance function. The features of the neuron\\nare provided as the first argument to {@link DistanceMeasure#compute(double[],double[])}.',\r\n      '@param distance The distance function. The features of the neuron\\nare passed as the first parameter to {@link DistanceMeasure#compute(double[],double[])}.',\r\n      '@param distance The distance function. The first argument to\\n{@link DistanceMeasure#compute(double[],double[])} is the features of the neuron.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@return the two neurons whose features are closest to the given data.',\r\n    'alternatives': [\r\n      '@return the pair of neurons with the closest features to the given data.',\r\n      '@return the two neurons that have features closest to the given data.',\r\n      '@return the two neurons with features that are the closest to the given\\ndata.',\r\n      '@return the pair of neurons having the features that are closest to the\\ngiven data.',\r\n      '@return the two neurons which features are closest to the given data.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@throws org.apache.commons.math3.exception.DimensionMismatchException if the size of the input is not compatible with the neurons features\\nsize.',\r\n    'alternatives': [\r\n      '@throws org.apache.commons.math3.exception.DimensionMismatchException if the size of the input does not match the size\\nof the neuron features.',\r\n      '@throws org.apache.commons.math3.exception.DimensionMismatchException if the size of the input is incompatible with the size\\nof the neuron features.',\r\n      '@throws org.apache.commons.math3.exception.DimensionMismatchException if the size of the input does not align with the size\\nof the neuron features.',\r\n      '@throws org.apache.commons.math3.exception.DimensionMismatchException if the size of the input does not correspond to the size\\nof the neuron features.',\r\n      '@throws org.apache.commons.math3.exception.DimensionMismatchException if the size of the input is not consistent with the size\\nof the neuron features.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param features Data.',\r\n    'alternatives': [\r\n      '@param features Input data.',\r\n      '@param features Feature data.',\r\n      '@param features The data.',\r\n      '@param features The input data.',\r\n      '@param features The feature data.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param neurons List of neurons to scan. If it is empty, an empty array\\nwill be returned.',\r\n    'alternatives': [\r\n      '@param neurons List of neurons to iterate through. If it is empty, an empty array\\nwill be returned.',\r\n      '@param neurons The list of neurons to search. If it is empty, an empty array\\nwill be returned.',\r\n      '@param neurons The list of neurons to iterate over. If it is empty, an empty array\\nwill be returned.',\r\n      '@param neurons List containing the neurons to be scanned. If it is empty, an empty array\\nwill be returned.',\r\n      '@param neurons List of neurons to inspect. Return an empty array if it is empty.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param distance Distance function.',\r\n    'alternatives': [\r\n      '@param distance Distance measure.',\r\n      '@param distance The distance.',\r\n      '@param distance The distance function.',\r\n      '@param distance The measure of distance.',\r\n      '@param distance The distance calculation.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@return the neurons, sorted in increasing order of distance in data\\nspace.',\r\n    'alternatives': [\r\n      '@return the sorted neurons in ascending order of distance in data\\nspace.',\r\n      '@return the neurons organized in increasing order of distance in data\\nspace.',\r\n      '@return the neurons in data space, sorted in ascending order of distance.',\r\n      '@return the neurons sorted in ascending order of distance in data\\nspace.',\r\n      '@return the ordered neurons based on the increasing distance in data\\nspace.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@throws org.apache.commons.math3.exception.DimensionMismatchException if the size of the input is not compatible with the neurons features\\nsize.',\r\n    'alternatives': [\r\n      '@throws org.apache.commons.math3.exception.DimensionMismatchException if the size of the input does not match the size\\nof the neuron features.',\r\n      '@throws org.apache.commons.math3.exception.DimensionMismatchException if the size of the input is incompatible with the size\\nof the neuron features.',\r\n      '@throws org.apache.commons.math3.exception.DimensionMismatchException if the size of the input does not align with the size\\nof the neuron features.',\r\n      '@throws org.apache.commons.math3.exception.DimensionMismatchException if the size of the input does not correspond to the size\\nof the neuron features.',\r\n      '@throws org.apache.commons.math3.exception.DimensionMismatchException if the size of the input is not consistent with the size\\nof the neuron features.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param map Network.',\r\n    'alternatives': [\r\n      '@param map The network.',\r\n      '@param map The network structure.',\r\n      '@param map The network to analyze.',\r\n      '@param map The network object.',\r\n      '@param map The network architecture.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param distance Function to use for computing the average\\ndistance from a neuron to its neighbours.',\r\n    'alternatives': [\r\n      '@param distance Function that calculates the average distance from a neuron to its neighbours.',\r\n      '@param distance Function for calculating the average distance from a neuron to its neighbours.',\r\n      '@param distance The function that is used to compute the average distance from a neuron to its\\nneighbors.',\r\n      '@param distance The function that computes the average distance from a neuron to its\\nneighbors.',\r\n      '@param distance The function used for averaging the distance from a neuron to its\\nneighbors.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@return the matrix of average distances.',\r\n    'alternatives': [\r\n      '@return the average distance matrix.',\r\n      '@return the matrix containing the average distances.',\r\n      '@return the matrix that represents the average distances.',\r\n      '@return the distance matrix with the average values.',\r\n      '@return the matrix with the average distances.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param data Feature vectors.',\r\n    'alternatives': [\r\n      '@param data Input feature vectors.',\r\n      '@param data Data containing the feature vectors.',\r\n      '@param data The feature vectors.',\r\n      '@param data The input data with feature vectors.',\r\n      '@param data The vectors of features.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param map Network.',\r\n    'alternatives': [\r\n      '@param map The network.',\r\n      '@param map The network structure.',\r\n      '@param map The network to analyze.',\r\n      '@param map The network object.',\r\n      '@param map The network architecture.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param distance Function to use for determining the best matching unit.',\r\n    'alternatives': [\r\n      '@param distance Function for finding the best matching unit.',\r\n      '@param distance Distance function used for selecting the best matching unit.',\r\n      '@param distance The function used for determining the best matching unit.',\r\n      '@param distance The function that determines the best matching unit.',\r\n      '@param distance The function employed to determine the best matching unit.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@return the number of hits for each neuron in the map.',\r\n    'alternatives': [\r\n      '@return the count of hits for each neuron in the map.',\r\n      '@return the number of occurrences for each neuron in the map.',\r\n      '@return the number of hits associated with each neuron in the map.',\r\n      '@return the frequency of hits for each neuron in the map.',\r\n      '@return the tally of hits for each neuron in the map.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param data Feature vectors.',\r\n    'alternatives': [\r\n      '@param data Input feature vectors.',\r\n      '@param data Data containing the feature vectors.',\r\n      '@param data The feature vectors.',\r\n      '@param data The input data with feature vectors.',\r\n      '@param data The vectors of features.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param neurons List of neurons to scan.',\r\n    'alternatives': [\r\n      '@param neurons List of neurons to iterate through.',\r\n      '@param neurons The list of neurons to search.',\r\n      '@param neurons The list of neurons to iterate over.',\r\n      '@param neurons List containing the neurons to be scanned.',\r\n      '@param neurons List of neurons to inspect.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param distance Distance function.',\r\n    'alternatives': [\r\n      '@param distance Distance measure.',\r\n      '@param distance The distance.',\r\n      '@param distance The distance function.',\r\n      '@param distance The measure of distance.',\r\n      '@param distance The distance calculation.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@return the error.',\r\n    'alternatives': [\r\n      '@return the computed error.',\r\n      '@return the resulting error.',\r\n      '@return the calculated error.',\r\n      '@return the encountered error.',\r\n      '@return the obtained error.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@throws NoDataException if {@code data} is empty.',\r\n    'alternatives': [\r\n      '@throws NoDataException if the data array is empty.',\r\n      '@throws NoDataException if the input data is empty.',\r\n      '@throws NoDataException if there is no data in the array.',\r\n      '@throws NoDataException if the data set is empty.',\r\n      '@throws NoDataException if the provided data is empty.'\r\n    ]\r\n  }\r\n]"