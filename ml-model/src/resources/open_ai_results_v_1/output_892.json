"[\n  {\n    'tag': '@param iterators the array of iterators',\n    'alternatives': [\n      '@param iterators the collection of iterators',\n      '@param the array of iterators',\n      '@param a group of iterators',\n      '@param a collection of iterators',\n      '@param an array containing iterators'\n    ]\n  },\n  {\n    'tag': '@param iterators the collection of iterators',\n    'alternatives': [\n      '@param iterators the array of iterators',\n      '@param the collection of iterators',\n      '@param a group of iterators',\n      '@param a collection of iterators',\n      '@param a set of iterators'\n    ]\n  },\n  {\n    'tag': '@throws NullArgumentException if {@code divisor} is {@code null}.',\n    'alternatives': [\n      '@throws NullPointerException if {@code divisor} is {@code null}.',\n      '@throws NullArgumentException when {@code divisor} is {@code null}.',\n      '@throws NullArgumentException if the value of {@code divisor} is {@code null}.',\n      '@throws NullArgumentException if the provided {@code divisor} is {@code null}.',\n      '@throws NullArgumentException in case {@code divisor} is found to be {@code null}.'\n    ]\n  },\n  {\n    'tag': '@param x First value (cannot be {@code null}).',\n    'alternatives': [\n      '@param x The initial value (cannot be {@code null}).',\n      '@param x The starting value (cannot be {@code null}).',\n      '@param x The first parameter (cannot be {@code null}).',\n      '@param x The input value (cannot be {@code null}).',\n      '@param x The value at the beginning (cannot be {@code null}).'\n    ]\n  },\n  {\n    'tag': '@param y Second value (cannot be {@code null}).',\n    'alternatives': [\n      '@param y The final value (cannot be {@code null}).',\n      '@param y The ending value (cannot be {@code null}).',\n      '@param y The second parameter (cannot be {@code null}).',\n      '@param y The value at the end (cannot be {@code null}).',\n      '@param y The output value (cannot be {@code null}).'\n    ]\n  },\n  {\n    'tag': '@param x First value (cannot be {@code null}).',\n    'alternatives': [\n      '@param x The initial value (cannot be {@code null}).',\n      '@param x The starting value (cannot be {@code null}).',\n      '@param x The first parameter (cannot be {@code null}).',\n      '@param x The input value (cannot be {@code null}).',\n      '@param x The value at the beginning (cannot be {@code null}).'\n    ]\n  },\n  {\n    'tag': '@param y Second value (cannot be {@code null}).',\n    'alternatives': [\n      '@param y The final value (cannot be {@code null}).',\n      '@param y The ending value (cannot be {@code null}).',\n      '@param y The second parameter (cannot be {@code null}).',\n      '@param y The value at the end (cannot be {@code null}).',\n      '@param y The output value (cannot be {@code null}).'\n    ]\n  },\n  {\n    'tag': '@param x First value (cannot be {@code null}).',\n    'alternatives': [\n      '@param x The initial value (cannot be {@code null}).',\n      '@param x The starting value (cannot be {@code null}).',\n      '@param x The first parameter (cannot be {@code null}).',\n      '@param x The input value (cannot be {@code null}).',\n      '@param x The value at the beginning (cannot be {@code null}).'\n    ]\n  },\n  {\n    'tag': '@param y Second value (cannot be {@code null}).',\n    'alternatives': [\n      '@param y The final value (cannot be {@code null}).',\n      '@param y The ending value (cannot be {@code null}).',\n      '@param y The second parameter (cannot be {@code null}).',\n      '@param y The value at the end (cannot be {@code null}).',\n      '@param y The output value (cannot be {@code null}).'\n    ]\n  },\n  {\n    'tag': '@param x First value (cannot be {@code null}).',\n    'alternatives': [\n      '@param x The initial value (cannot be {@code null}).',\n      '@param x The starting value (cannot be {@code null}).',\n      '@param x The first parameter (cannot be {@code null}).',\n      '@param x The input value (cannot be {@code null}).',\n      '@param x The value at the beginning (cannot be {@code null}).'\n    ]\n  },\n  {\n    'tag': '@param y Second value (cannot be {@code null}).',\n    'alternatives': [\n      '@param y The final value (cannot be {@code null}).',\n      '@param y The ending value (cannot be {@code null}).',\n      '@param y The second parameter (cannot be {@code null}).',\n      '@param y The value at the end (cannot be {@code null}).',\n      '@param y The output value (cannot be {@code null}).'\n    ]\n  },\n  {\n    'tag': '@throws NullArgumentException if {@code factor} is {@code null}.',\n    'alternatives': [\n      '@throws NullPointerException if {@code factor} is {@code null}.',\n      '@throws NullArgumentException when {@code factor} is {@code null}.',\n      '@throws NullArgumentException if the value of {@code factor} is {@code null}.',\n      '@throws NullArgumentException if the provided {@code factor} is {@code null}.',\n      '@throws NullArgumentException in case {@code factor} is found to be {@code null}.'\n    ]\n  },\n  {\n    'tag': '@throws NullArgumentException if {@code subtrahend} is {@code null}.',\n    'alternatives': [\n      '@throws NullPointerException if {@code subtrahend} is {@code null}.',\n      '@throws NullArgumentException when {@code subtrahend} is {@code null}.',\n      '@throws NullArgumentException if the value of {@code subtrahend} is {@code null}.',\n      '@throws NullArgumentException if the provided {@code subtrahend} is {@code null}.',\n      '@throws NullArgumentException in case {@code subtrahend} is found to be {@code null}.'\n    ]\n  },\n  {\n    'tag': '@throws NullArgumentException if x is {@code null}.',\n    'alternatives': [\n      '@throws NullArgumentException when the value of x is {@code null}.',\n      '@throws NullArgumentException if the provided x is {@code null}.',\n      '@throws NullArgumentException if the variable x is {@code null}.',\n      '@throws NullArgumentException in case x is found to be {@code null}.',\n      '@throws NullArgumentException if the value of x is equal to {@code null}.'\n    ]\n  },\n  {\n    'tag': '@throws NotPositiveException if {@code n <= 0}.',\n    'alternatives': [\n      '@throws NotPositiveException when {@code n <= 0}.',\n      '@throws NotPositiveException if the value of {@code n} is less than or equal to 0.',\n      '@throws NotPositiveException if the provided {@code n} is less than or equal to 0.',\n      '@throws NotPositiveException in case {@code n} is found to be less than or equal to 0.',\n      '@throws NotPositiveException if the input {@code n} is not positive.'\n    ]\n  },\n  {\n    'tag': '@throws NoDataException if any of the arrays has zero length.',\n    'alternatives': [\n      '@throws NoDataException when any of the arrays has zero length.',\n      '@throws NoDataException if the size of any array is zero.',\n      '@throws NoDataException if any of the arrays does not contain any data.',\n      '@throws NoDataException in case any of the arrays has a length of zero.',\n      '@throws NoDataException if none of the arrays has any elements.'\n    ]\n  },\n  {\n    'tag': '@throws NoDataException if any of the arrays has zero length.',\n    'alternatives': [\n      '@throws NoDataException when any of the arrays has zero length.',\n      '@throws NoDataException if the size of any of the arrays is zero.',\n      '@throws NoDataException if any array does not contain any data.',\n      '@throws NoDataException in case any array has a length of zero.',\n      '@throws NoDataException if none of the arrays has any elements.'\n    ]\n  },\n  {\n    'tag': '@throws NullArgumentException if values is null',\n    'alternatives': [\n      '@throws NullArgumentException when values is null',\n      '@throws NullArgumentException if the value of values is null',\n      '@throws NullArgumentException if the provided values is null',\n      '@throws NullArgumentException in case values is found to be null',\n      '@throws NullArgumentException if the input values is null'\n    ]\n  },\n  {\n    'tag': '@throws NullArgumentException if d is null',\n    'alternatives': [\n      '@throws NullArgumentException when d is null',\n      '@throws NullArgumentException if the value of d is null',\n      '@throws NullArgumentException if the provided d is null',\n      '@throws NullArgumentException in case d is found to be null',\n      '@throws NullArgumentException if the input d is null'\n    ]\n  },\n  {\n    'tag': '@throws NullArgumentException if value is null',\n    'alternatives': [\n      '@throws NullArgumentException when value is null',\n      '@throws NullArgumentException if the value of value is null',\n      '@throws NullArgumentException if the provided value is null',\n      '@throws NullArgumentException in case value is found to be null',\n      '@throws NullArgumentException if the input value is null'\n    ]\n  },\n  {\n    'tag': '@throws NullArgumentException if value is null',\n    'alternatives': [\n      '@throws NullArgumentException when value is null',\n      '@throws NullArgumentException if the value of value is null',\n      '@throws NullArgumentException if the provided value is null',\n      '@throws NullArgumentException in case value is found to be null',\n      '@throws NullArgumentException if the input value is null'\n    ]\n  },\n  {\n    'tag': '@throws NumberIsTooSmallException if {@code end < start}.',\n    'alternatives': [\n      '@throws NumberIsTooSmallException if the value of {@code end} is less than {@code start}.',\n      '@throws NumberIsTooSmallException when {@code end < start}.',\n      '@throws NumberIsTooSmallException if the provided range is invalid.',\n      '@throws NumberIsTooSmallException in case the value of {@code end} is smaller than {@code start}.',\n      '@throws NumberIsTooSmallException if the end value is less than the start value.'\n    ]\n  },\n  {\n    'tag': '@throws NumberIsTooSmallException if {@code end < start}.',\n    'alternatives': [\n      '@throws NumberIsTooSmallException if the value of {@code end} is less than {@code start}.',\n      '@throws NumberIsTooSmallException when {@code end < start}.',\n      '@throws NumberIsTooSmallException if the specified range is incorrect.',\n      '@throws NumberIsTooSmallException in case the value of {@code end} is smaller than {@code start}.',\n      '@throws NumberIsTooSmallException if the end value is less than the start value.'\n    ]\n  },\n  {\n    'tag': '@throws NumberIsTooSmallException if {@code end < start}.',\n    'alternatives': [\n      '@throws NumberIsTooSmallException if the value of {@code end} is less than {@code start}.',\n      '@throws NumberIsTooSmallException when {@code end < start}.',\n      '@throws NumberIsTooSmallException if the provided range is invalid.',\n      '@throws NumberIsTooSmallException in case the value of {@code end} is smaller than {@code start}.',\n      '@throws NumberIsTooSmallException if the end value is smaller than the start value.'\n    ]\n  },\n  {\n    'tag': '@throws NumberIsTooSmallException if {@code end < start}.',\n    'alternatives': [\n      '@throws NumberIsTooSmallException if the value of {@code end} is less than {@code start}.',\n      '@throws NumberIsTooSmallException when {@code end < start}.',\n      '@throws NumberIsTooSmallException if the specified range is invalid.',\n      '@throws NumberIsTooSmallException in case the value of {@code end} is smaller than {@code start}.',\n      '@throws NumberIsTooSmallException if the end value is smaller than the start value.'\n    ]\n  }\n]"