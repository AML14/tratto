"output = [\n  {\n    'tag': '@param end the index of the last entry to be visited (inclusive)',\n    'alternatives': [\n      '@param end the index of the final entry to be visited (inclusive)',\n      '@param end the index of the ultimate entry to be visited (inclusive)',\n      '@param end the index of the concluding entry to be visited (inclusive)',\n      '@param end the index of the last element to be visited (inclusive)',\n      '@param end the index of the ultimate element to be visited (inclusive)'\n    ]\n  },\n  {\n    'tag': '@param index the index of the entry being visited',\n    'alternatives': [\n      '@param index the index of the visited entry',\n      '@param index the index of the entry that is being visited',\n      '@param index the index of the currently visited entry',\n      '@param index the index of the entry currently being visited',\n      '@param index the index of the currently visited element'\n    ]\n  },\n  {\n    'tag': '@param value the value of the entry being visited',\n    'alternatives': [\n      '@param value the value of the visited entry',\n      '@param value the value of the entry that is being visited',\n      '@param value the value of the currently visited entry',\n      '@param value the value of the entry currently being visited',\n      '@param value the value of the currently visited element'\n    ]\n  },\n  {\n    'tag': '@return the value returned by\\n{@link RealVector#walkInDefaultOrder(RealVectorPreservingVisitor)},\\n{@link RealVector#walkInDefaultOrder(RealVectorPreservingVisitor, int, int)},\\n{@link RealVector#walkInOptimizedOrder(RealVectorPreservingVisitor)}\\nor\\n{@link RealVector#walkInOptimizedOrder(RealVectorPreservingVisitor, int, int)}',\n    'alternatives': [\n      '@return the value obtained from\\n{@link RealVector#walkInDefaultOrder(RealVectorPreservingVisitor)},\\n{@link RealVector#walkInDefaultOrder(RealVectorPreservingVisitor, int, int)},\\n{@link RealVector#walkInOptimizedOrder(RealVectorPreservingVisitor)}\\nor\\n{@link RealVector#walkInOptimizedOrder(RealVectorPreservingVisitor, int, int)}',\n      '@return the value that is returned by\\n{@link RealVector#walkInDefaultOrder(RealVectorPreservingVisitor)},\\n{@link RealVector#walkInDefaultOrder(RealVectorPreservingVisitor, int, int)},\\n{@link RealVector#walkInOptimizedOrder(RealVectorPreservingVisitor)}\\nor\\n{@link RealVector#walkInOptimizedOrder(RealVectorPreservingVisitor, int, int)}',\n      '@return the value given by\\n{@link RealVector#walkInDefaultOrder(RealVectorPreservingVisitor)},\\n{@link RealVector#walkInDefaultOrder(RealVectorPreservingVisitor, int, int)},\\n{@link RealVector#walkInOptimizedOrder(RealVectorPreservingVisitor)}\\nor\\n{@link RealVector#walkInOptimizedOrder(RealVectorPreservingVisitor, int, int)}',\n      '@return the value coming from\\n{@link RealVector#walkInDefaultOrder(RealVectorPreservingVisitor)},\\n{@link RealVector#walkInDefaultOrder(RealVectorPreservingVisitor, int, int)},\\n{@link RealVector#walkInOptimizedOrder(RealVectorPreservingVisitor)}\\nor\\n{@link RealVector#walkInOptimizedOrder(RealVectorPreservingVisitor, int, int)}',\n      '@return the value returned from\\n{@link RealVector#walkInDefaultOrder(RealVectorPreservingVisitor)},\\n{@link RealVector#walkInDefaultOrder(RealVectorPreservingVisitor, int, int)},\\n{@link RealVector#walkInOptimizedOrder(RealVectorPreservingVisitor)}\\nor\\n{@link RealVector#walkInOptimizedOrder(RealVectorPreservingVisitor, int, int)}'\n    ]\n  },\n  {\n    'tag': '@param rawData Data array in raw layout.',\n    'alternatives': [\n      '@param rawData Array of data in raw layout.',\n      '@param rawData Raw layout data array.',\n      '@param rawData Data array in its raw layout.',\n      '@param rawData Array containing data in raw layout.',\n      '@param rawData Data array stored in raw layout.'\n    ]\n  },\n  {\n    'tag': '@return a new data array containing the same entries but in blocks layout.',\n    'alternatives': [\n      '@return a new array of data with the same entries but in blocks layout.',\n      '@return a new data array with the entries arranged in blocks layout.',\n      '@return a new array containing the same entries but in blocks layout.',\n      '@return a new data array organized in blocks layout.',\n      '@return a new array where the entries are laid out in blocks.'\n    ]\n  },\n  {\n    'tag': '@throws DimensionMismatchException if {@code rawData} is not rectangular.',\n    'alternatives': [\n      '@throws DimensionMismatchException if {@code rawData} is not a rectangular shape.',\n      '@throws DimensionMismatchException if {@code rawData} is not in a rectangular form.',\n      '@throws DimensionMismatchException if {@code rawData} is not a rectangular array.',\n      '@throws DimensionMismatchException if the shape of {@code rawData} is not rectangular.',\n      '@throws DimensionMismatchException if the array {@code rawData} is not rectangular.'\n    ]\n  },\n  {\n    'tag': '@param rows Number of rows in the new matrix.',\n    'alternatives': [\n      '@param rows Count of rows in the new matrix.',\n      '@param rows Total number of rows in the new matrix.',\n      '@param rows Number of rows in the newly created matrix.',\n      '@param rows Quantity of rows in the new matrix.',\n      '@param rows Amount of rows in the new matrix.'\n    ]\n  },\n  {\n    'tag': '@param columns Number of columns in the new matrix.',\n    'alternatives': [\n      '@param columns Count of columns in the new matrix.',\n      '@param columns Total number of columns in the new matrix.',\n      '@param columns Number of columns in the newly created matrix.',\n      '@param columns Quantity of columns in the new matrix.',\n      '@param columns Amount of columns in the new matrix.'\n    ]\n  },\n  {\n    'tag': '@return a new data array in blocks layout.',\n    'alternatives': [\n      '@return a new array of data in blocks layout.',\n      '@return a new data array organized in blocks layout.',\n      '@return a new array with the entries arranged in blocks layout.',\n      '@return a new data array with blocks layout.',\n      '@return a new array where the entries are laid out in blocks.'\n    ]\n  },\n  {\n    'tag': '@param m Matrix to be added.',\n    'alternatives': [\n      '@param m Matrix to be included.',\n      '@param m Matrix to be appended.',\n      '@param m Matrix to be joined.',\n      '@param m Matrix to be combined.',\n      '@param m Matrix to be included in the operation.'\n    ]\n  },\n  {\n    'tag': '@return {@code this} + m.',\n    'alternatives': [\n      '@return the result of adding {@code this} and m.',\n      '@return the addition of {@code this} and m.',\n      '@return the sum of {@code this} and m.',\n      '@return the outcome of the addition of {@code this} and m.',\n      '@return {@code this} plus m.'\n    ]\n  },\n  {\n    'tag': '@throws MatrixDimensionMismatchException if {@code m} is not the same\\nsize as this matrix.',\n    'alternatives': [\n      '@throws MatrixDimensionMismatchException if {@code m} has a different size than this matrix.',\n      '@throws MatrixDimensionMismatchException if the size of {@code m} differs from this matrix.',\n      '@throws MatrixDimensionMismatchException if {@code m} does not have the same size as this matrix.',\n      '@throws MatrixDimensionMismatchException if the dimensions of {@code m} are not equal to this matrix.',\n      '@throws MatrixDimensionMismatchException if the size of {@code m} does not match this matrix.'\n    ]\n  },\n  {\n    'tag': '@param m Matrix to be subtracted.',\n    'alternatives': [\n      '@param m Matrix to be deducted.',\n      '@param m Matrix to be removed.',\n      '@param m Matrix to be eliminated.',\n      '@param m Matrix to be taken away.',\n      '@param m Matrix to be subtracted from this one.'\n    ]\n  },\n  {\n    'tag': '@return {@code this} - m.',\n    'alternatives': [\n      '@return the result of subtracting m from {@code this}.',\n      '@return the subtraction of m from {@code this}.',\n      '@return the difference between {@code this} and m.',\n      '@return the outcome of the subtraction between {@code this} and m.',\n      '@return {@code this} minus m.'\n    ]\n  },\n  {\n    'tag': '@throws MatrixDimensionMismatchException if {@code m} is not the\\nsame size as this matrix.',\n    'alternatives': [\n      '@throws MatrixDimensionMismatchException if {@code m} has a different size than this matrix.',\n      '@throws MatrixDimensionMismatchException if the size of {@code m} differs from this matrix.',\n      '@throws MatrixDimensionMismatchException if {@code m} does not have the same size as this matrix.',\n      '@throws MatrixDimensionMismatchException if the dimensions of {@code m} are not equal to this matrix.',\n      '@throws MatrixDimensionMismatchException if the size of {@code m} does not match this matrix.'\n    ]\n  },\n  {\n    'tag': '@param m Matrix to postmultiply by.',\n    'alternatives': [\n      '@param m Matrix to multiply afterwards.',\n      '@param m Matrix to be multiplied after.',\n      '@param m Matrix to be applied after multiplication.',\n      '@param m Matrix to be post-multiplied.',\n      '@param m Matrix to multiply by after this one.'\n    ]\n  },\n  {\n    'tag': '@return {@code this} * m.',\n    'alternatives': [\n      '@return the result of multiplying {@code this} and m.',\n      '@return the multiplication of {@code this} and m.',\n      '@return the product of {@code this} and m.',\n      '@return the outcome of the multiplication of {@code this} and m.',\n      '@return {@code this} times m.'\n    ]\n  },\n  {\n    'tag': '@throws DimensionMismatchException if the matrices are not compatible.',\n    'alternatives': [\n      '@throws DimensionMismatchException if the matrices do not match in size.',\n      '@throws DimensionMismatchException if the matrices have incompatible dimensions.',\n      '@throws DimensionMismatchException if the matrices cannot be combined.',\n      '@throws DimensionMismatchException if the matrices are not suitable for the operation.',\n      '@throws DimensionMismatchException if the dimensions of the matrices are not compatible.'\n    ]\n  },\n  {\n    'tag': '@param srcBlock source block',\n    'alternatives': [\n      '@param srcBlock the source block',\n      '@param srcBlock block of source',\n      '@param srcBlock the block of source',\n      '@param srcBlock the original block',\n      '@param srcBlock the block from the source'\n    ]\n  },\n  {\n    'tag': '@param srcWidth source block width ({@link #BLOCK_SIZE} or smaller)',\n    'alternatives': [\n      '@param srcWidth width of the source block ({@link #BLOCK_SIZE} or smaller)',\n      '@param srcWidth width of the block from the source ({@link #BLOCK_SIZE} or smaller)',\n      '@param srcWidth the width of the source block ({@link #BLOCK_SIZE} or smaller)',\n      '@param srcWidth the width of the block from the source ({@link #BLOCK_SIZE} or smaller)',\n      '@param srcWidth the width of the source block (smaller or equal to {@link #BLOCK_SIZE})'\n    ]\n  },\n  {\n    'tag': '@param srcStartRow start row in the source block',\n    'alternatives': [\n      '@param srcStartRow starting row in the source block',\n      '@param srcStartRow initial row in the source block',\n      '@param srcStartRow row where the source block starts',\n      '@param srcStartRow first row in the source block',\n      '@param srcStartRow row at the beginning of the source block'\n    ]\n  },\n  {\n    'tag': '@param srcEndRow end row (exclusive) in the source block',\n    'alternatives': [\n      '@param srcEndRow finishing row (exclusive) in the source block',\n      '@param srcEndRow termination row (exclusive) in the source block',\n      '@param srcEndRow row where the source block ends (exclusive)',\n      '@param srcEndRow last row (exclusive) in the source block',\n      '@param srcEndRow row at the end (exclusive) of the source block'\n    ]\n  },\n  {\n    'tag': '@param srcStartColumn start column in the source block',\n    'alternatives': [\n      '@param srcStartColumn starting column in the source block',\n      '@param srcStartColumn initial column in the source block',\n      '@param srcStartColumn column where the source block starts',\n      '@param srcStartColumn first column in the source block',\n      '@param srcStartColumn column at the beginning of the source block'\n    ]\n  },\n  {\n    'tag': '@param srcEndColumn end column (exclusive) in the source block',\n    'alternatives': [\n      '@param srcEndColumn finishing column (exclusive) in the source block',\n      '@param srcEndColumn termination column (exclusive) in"