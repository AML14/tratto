"output = [\n  {\n    'tag': '@return the pair of new chromosomes that resulted from the crossover',\n    'alternatives': [\n      '@return the new chromosomes pair obtained from the crossover',\n      '@return the resulting pair of new chromosomes from the crossover',\n      '@return the pair of new chromosomes generated by the crossover',\n      '@return the pair of new chromosomes produced by the crossover'\n    ]\n  },\n  {\n    'tag': '@throws DimensionMismatchException if the length of the two chromosomes is different',\n    'alternatives': [\n      '@throws DimensionMismatchException when the length of the two chromosomes is not equal',\n      '@throws DimensionMismatchException if the two chromosomes have different lengths',\n      '@throws DimensionMismatchException if the length of both chromosomes is not the same',\n      '@throws DimensionMismatchException if the lengths of the two chromosomes differ'\n    ]\n  },\n  {\n    'tag': '@throws NumberIsTooSmallException is {@code endRow < startRow} of\\n{@code endColumn < startColumn}.',\n    'alternatives': [\n      '@throws NumberIsTooSmallException if {@code endRow < startRow} or {@code endColumn < startColumn}.',\n      '@throws NumberIsTooSmallException when {@code endRow < startRow} or {@code endColumn < startColumn}.',\n      '@throws NumberIsTooSmallException if either {@code endRow < startRow} or {@code endColumn < startColumn}.',\n      '@throws NumberIsTooSmallException in case {@code endRow < startRow} or {@code endColumn < startColumn}.'\n    ]\n  },\n  {\n    'tag': '@throws OutOfRangeException if the indices are not valid.',\n    'alternatives': [\n      '@throws OutOfRangeException when the indices are invalid.',\n      '@throws OutOfRangeException if the indices provided are not valid.',\n      '@throws OutOfRangeException if the indices given are out of range.',\n      '@throws OutOfRangeException in case of invalid indices.'\n    ]\n  },\n  {\n    'tag': '@param selectedRows Array of row indices.',\n    'alternatives': [\n      '@param selectedRows An array containing row indices.',\n      '@param selectedRows Array of indices for the rows.',\n      '@param selectedRows A array of row indices.',\n      '@param selectedRows Array of indexes for the rows.'\n    ]\n  },\n  {\n    'tag': '@param selectedColumns Array of column indices.',\n    'alternatives': [\n      '@param selectedColumns An array containing column indices.',\n      '@param selectedColumns Array of indices for the columns.',\n      '@param selectedColumns A array of column indices.',\n      '@param selectedColumns Array of indexes for the columns.'\n    ]\n  },\n  {\n    'tag': '@return the matrix containing the data in the\\nspecified rows and columns.',\n    'alternatives': [\n      '@return the matrix that holds the data in the specified rows and columns.',\n      '@return the matrix that includes the data from the specified rows and columns.',\n      '@return the matrix with the data in the specified rows and columns.',\n      '@return the matrix that consists of the data in the specified rows and columns.'\n    ]\n  },\n  {\n    'tag': '@throws OutOfRangeException if row or column selections are not valid.',\n    'alternatives': [\n      '@throws OutOfRangeException when either the row or column selections are invalid.',\n      '@throws OutOfRangeException if the selections for row or column are not valid.',\n      '@throws OutOfRangeException if the row or column selections provided are out of range.',\n      '@throws OutOfRangeException in case of invalid row or column selections.'\n    ]\n  },\n  {\n    'tag': '@param startRow Initial row index.',\n    'alternatives': [\n      '@param startRow The initial index for the row.',\n      '@param startRow The starting index for the row.',\n      '@param startRow The index at the beginning of the row.',\n      '@param startRow The index of the row to start from.'\n    ]\n  },\n  {\n    'tag': '@param endRow Final row index (inclusive).',\n    'alternatives': [\n      '@param endRow The final index for the row (inclusive).',\n      '@param endRow The ending index for the row (inclusive).',\n      '@param endRow The index at the end of the row (inclusive).',\n      '@param endRow The index of the last row in the range.'\n    ]\n  },\n  {\n    'tag': '@param startColumn Initial column index.',\n    'alternatives': [\n      '@param startColumn The initial index for the column.',\n      '@param startColumn The starting index for the column.',\n      '@param startColumn The index at the beginning of the column.',\n      '@param startColumn The index of the column to start from.'\n    ]\n  },\n  {\n    'tag': '@param endColumn Final column index (inclusive).',\n    'alternatives': [\n      '@param endColumn The final index for the column (inclusive).',\n      '@param endColumn The ending index for the column (inclusive).',\n      '@param endColumn The index at the end of the column (inclusive).',\n      '@param endColumn The index of the last column in the range.'\n    ]\n  },\n  {\n    'tag': '@param destination The array where the submatrix data should be copied\\n(if larger than rows/columns counts, only the upper-left part will be modified).',\n    'alternatives': [\n      '@param destination The array to store the submatrix data\\n(if larger than the number of rows/columns, only the upper-left part will be modified).',\n      '@param destination The target array for copying the submatrix data\\n(if bigger than row/column count, only the upper-left part will be changed).',\n      '@param destination The array in which the submatrix data will be placed\\n(if larger than rows/columns counts, only the upper-left part will be updated).',\n      '@param destination The array that will hold the submatrix data\\n(if larger than rows/columns counts, only the upper-left part will be altered).'\n    ]\n  },\n  {\n    'tag': '@throws MatrixDimensionMismatchException if the dimensions of\\n{@code destination} are not large enough to hold the submatrix.',\n    'alternatives': [\n      '@throws MatrixDimensionMismatchException when the dimensions of\\n{@code destination} are not sufficient to contain the submatrix.',\n      '@throws MatrixDimensionMismatchException if the dimensions of\\n{@code destination} are inadequate for storing the submatrix.',\n      '@throws MatrixDimensionMismatchException if the size of\\n{@code destination} is not enough to hold the submatrix.',\n      '@throws MatrixDimensionMismatchException in case the dimensions of\\n{@code destination} are too small to accommodate the submatrix.'\n    ]\n  },\n  {\n    'tag': '@throws OutOfRangeException if the indices are not valid.',\n    'alternatives': [\n      '@throws OutOfRangeException when the indices are invalid.',\n      '@throws OutOfRangeException if the indices provided are not valid.',\n      '@throws OutOfRangeException if the indices given are out of range.',\n      '@throws OutOfRangeException in case of invalid indices.'\n    ]\n  },\n  {\n    'tag': '@param selectedRows Array of row indices.',\n    'alternatives': [\n      '@param selectedRows An array containing row indices.',\n      '@param selectedRows Array of indices for the rows.',\n      '@param selectedRows A array of row indices.',\n      '@param selectedRows Array of indexes for the rows.'\n    ]\n  },\n  {\n    'tag': '@param selectedColumns Array of column indices.',\n    'alternatives': [\n      '@param selectedColumns An array containing column indices.',\n      '@param selectedColumns Array of indices for the columns.',\n      '@param selectedColumns A array of column indices.',\n      '@param selectedColumns Array of indexes for the columns.'\n    ]\n  },\n  {\n    'tag': '@param destination Arrays where the submatrix data should be copied\\n(if larger than rows/columns counts, only the upper-left part will be used)',\n    'alternatives': [\n      '@param destination The arrays to copy the submatrix data into\\n(if bigger than row/column count, only the upper-left part will be utilized).',\n      '@param destination The arrays that will hold the submatrix data\\n(if larger than rows/columns counts, only the upper-left part will be accessed).',\n      '@param destination Arrays where the submatrix data will be stored\\n(if bigger than row/column count, only the upper-left part will be employed).',\n      '@param destination The arrays to be filled with the submatrix data\\n(if larger than rows/columns counts, only the upper-left part will be used).'\n    ]\n  },\n  {\n    'tag': '@throws MatrixDimensionMismatchException if the dimensions of\\n{@code destination} do not match those of {@code this}.',\n    'alternatives': [\n      '@throws MatrixDimensionMismatchException when the dimensions of\\n{@code destination} do not match the dimensions of {@code this}.',\n      '@throws MatrixDimensionMismatchException if the dimensions of\\n{@code destination} are different from those of {@code this}.',\n      '@throws MatrixDimensionMismatchException if the size of\\n{@code destination} does not correspond to the size of {@code this}.',\n      '@throws MatrixDimensionMismatchException in case the dimensions of\\n{@code destination} are not the same as the dimensions of {@code this}.'\n    ]\n  },\n  {\n    'tag': '@throws OutOfRangeException if the indices are not valid.',\n    'alternatives': [\n      '@throws OutOfRangeException when the indices are invalid.',\n      '@throws OutOfRangeException if the indices provided are not valid.',\n      '@throws OutOfRangeException if the indices given are out of range.',\n      '@throws OutOfRangeException in case of invalid indices.'\n    ]\n  },\n  {\n    'tag': '@param subMatrix Array containing the submatrix replacement data.',\n    'alternatives': [\n      '@param subMatrix An array that holds the replacement data for the submatrix.',\n      '@param subMatrix Array of elements that will replace the submatrix.',\n      '@param subMatrix A matrix containing the data to be used for replacing the submatrix.',\n      '@param subMatrix Array that includes the data for the substitute submatrix.'\n    ]\n  },\n  {\n    'tag': '@param row Row coordinate of the top-left element to be replaced.',\n    'alternatives': [\n      '@param row The row index of the top-left element to be substituted.',\n      '@param row The row position of the top-left element to be exchanged.',\n      '@param row The index of the row that contains the top-left element to be replaced.',\n      '@param row The row coordinate of the top-left element to be swapped.'\n    ]\n  },\n  {\n    'tag': '@param column Column coordinate of the top-left element to be replaced.',\n    'alternatives': [\n      '@param column The column index of the top-left element to be substituted.',\n      '@param column The column position of the top-left element to be exchanged.',\n      '@param column The index of the column that contains the top-left element to be replaced.',\n      '@param column The column coordinate of the top-left element to be swapped.'\n    ]\n  },\n  {\n    'tag': '@throws OutOfRangeException if {@code subMatrix} does not fit into this\\nmatrix from element in {@code (row, column)}.',\n    'alternatives': [\n      '@throws OutOfRangeException when {@code subMatrix} cannot fit into this matrix starting from the element at position {@code (row, column)}.',\n      '@throws OutOfRangeException if it is not possible to fit {@code subMatrix} into this matrix starting from the element at {@code (row, column)}.',\n      '@throws OutOfRangeException when {@code subMatrix} is too large to fit into this matrix starting from the element at index {@code (row, column)}.',\n      '@throws OutOfRangeException if the dimensions of {@code subMatrix} prevent it from fitting into this matrix from the element at index {@code (row, column)}.'\n    ]\n  },\n  {\n    'tag': '@throws NoDataException if a row or column of {@code subMatrix} is empty.',\n    'alternatives': [\n      '@throws NoDataException when a row or column of {@code subMatrix} does not contain any data.',\n      '@throws NoDataException if any row or column of {@code subMatrix} is devoid of data.',\n      '@throws NoDataException when any row or column of {@code subMatrix} is empty.',\n      '@throws NoDataException if a row or column of {@code subMatrix} lacks data.'\n    ]\n  }\n]"