"output = [\n  {\n    'tag': '@return a two element array holding the bracketing values.',\n    'alternatives': [\n      '@return an array of two elements that holds the bracketing values.',\n      '@return a pair of values in an array that represent the bracketing range.',\n      '@return the bracketing values, stored as a two-element array.',\n      '@return a two-item array that contains the values representing the bracketing range.',\n      '@return an array with two elements that holds the bracketing values.'\n    ]\n  },\n  {\n    'tag': '@throws NoBracketingException if function cannot be bracketed in the search interval',\n    'alternatives': [\n      '@throws NoBracketingException when the function cannot be bracketed within the given search interval.',\n      '@throws NoBracketingException if it is not possible to bracket the function within the search interval.',\n      '@throws NoBracketingException if the search interval does not allow for bracketing of the function.',\n      '@throws NoBracketingException if the function cannot be properly bracketed within the interval of search.',\n      '@throws NoBracketingException in case the function cannot be bracketed within the provided search interval.'\n    ]\n  },\n  {\n    'tag': '@param a first value.',\n    'alternatives': [\n      '@param a the first value.',\n      '@param the first value (a).',\n      '@param the first value (a parameter).',\n      '@param the first value to be considered.',\n      '@param the first value, denoted by \"a\".'\n    ]\n  },\n  {\n    'tag': '@param b second value.',\n    'alternatives': [\n      '@param b the second value.',\n      '@param the second value (b).',\n      '@param the second value (b parameter).',\n      '@param the second value to be considered.',\n      '@param the second value, denoted by \"b\".'\n    ]\n  },\n  {\n    'tag': '@return the midpoint.',\n    'alternatives': [\n      '@return the middle point.',\n      '@return the central point.',\n      '@return the point in the middle.',\n      '@return the midpoint value.',\n      '@return the value at the center.'\n    ]\n  },\n  {\n    'tag': '@param function Function.',\n    'alternatives': [\n      '@param function The function.',\n      '@param function The input function.',\n      '@param the function to be used.',\n      '@param the given function (function).',\n      '@param the provided function (denoted by \"function\").'\n    ]\n  },\n  {\n    'tag': '@param lower Lower endpoint.',\n    'alternatives': [\n      '@param lower The lower endpoint.',\n      '@param lower The first endpoint.',\n      '@param the lower limit (lower).',\n      '@param the provided lower endpoint (denoted by \"lower\").',\n      '@param the endpoint at the bottom (lower).'\n    ]\n  },\n  {\n    'tag': '@param upper Upper endpoint.',\n    'alternatives': [\n      '@param upper The upper endpoint.',\n      '@param upper The second endpoint.',\n      '@param the upper limit (upper).',\n      '@param the provided upper endpoint (denoted by \"upper\").',\n      '@param the endpoint at the top (upper).'\n    ]\n  },\n  {\n    'tag': '@return {@code true} if the function values have opposite signs at the\\ngiven points.',\n    'alternatives': [\n      '@return {@code true} if the values of the function have opposite signs at the\\ngiven points.',\n      '@return {@code true} if the function values change sign at the\\ngiven points.',\n      '@return {@code true} if the function values exhibit opposite signs at the\\ngiven points.',\n      '@return {@code true} if the signs of the values of the function are opposite at the\\ngiven points.',\n      '@return {@code true} if the function values differ in signs at the\\ngiven points.'\n    ]\n  },\n  {\n    'tag': '@param start First number.',\n    'alternatives': [\n      '@param start The first number.',\n      '@param start The initial number.',\n      '@param the starting value (start).',\n      '@param the provided first number (denoted by \"start\").',\n      '@param the number at the start (start).'\n    ]\n  },\n  {\n    'tag': '@param mid Second number.',\n    'alternatives': [\n      '@param mid The second number.',\n      '@param mid The middle number.',\n      '@param the middle value (mid).',\n      '@param the provided second number (denoted by \"mid\").',\n      '@param the number in the middle (mid).'\n    ]\n  },\n  {\n    'tag': '@param end Third number.',\n    'alternatives': [\n      '@param end The third number.',\n      '@param end The final number.',\n      '@param the last value (end).',\n      '@param the provided third number (denoted by \"end\").',\n      '@param the number at the end (end).'\n    ]\n  },\n  {\n    'tag': '@return {@code true} if the arguments form an increasing sequence.',\n    'alternatives': [\n      '@return {@code true} if the arguments are arranged in an increasing sequence.',\n      '@return {@code true} if the arguments are in an ascending order.',\n      '@return {@code true} if the provided arguments form a sequence that increases.',\n      '@return {@code true} if the sequence of arguments is in an ascending order.',\n      '@return {@code true} if the values of the arguments increase progressively.'\n    ]\n  },\n  {\n    'tag': '@param lower Lower endpoint.',\n    'alternatives': [\n      '@param lower The lower endpoint.',\n      '@param lower The first endpoint.',\n      '@param the lower limit (lower).',\n      '@param the provided lower endpoint (denoted by \"lower\").',\n      '@param the endpoint at the bottom (lower).'\n    ]\n  },\n  {\n    'tag': '@param upper Upper endpoint.',\n    'alternatives': [\n      '@param upper The upper endpoint.',\n      '@param upper The second endpoint.',\n      '@param the upper limit (upper).',\n      '@param the provided upper endpoint (denoted by \"upper\").',\n      '@param the endpoint at the top (upper).'\n    ]\n  },\n  {\n    'tag': '@param lower Lower endpoint.',\n    'alternatives': [\n      '@param lower The lower endpoint.',\n      '@param lower The first endpoint.',\n      '@param the lower limit (lower).',\n      '@param the provided lower endpoint (denoted by \"lower\").',\n      '@param the endpoint at the bottom (lower).'\n    ]\n  },\n  {\n    'tag': '@param initial Initial value.',\n    'alternatives': [\n      '@param initial The initial value.',\n      '@param initial The starting value.',\n      '@param the initial condition (initial).',\n      '@param the provided initial value (denoted by \"initial\").',\n      '@param the value at the beginning (initial).'\n    ]\n  },\n  {\n    'tag': '@param upper Upper endpoint.',\n    'alternatives': [\n      '@param upper The upper endpoint.',\n      '@param upper The second endpoint.',\n      '@param the upper limit (upper).',\n      '@param the provided upper endpoint (denoted by \"upper\").',\n      '@param the endpoint at the top (upper).'\n    ]\n  },\n  {\n    'tag': '@param function Function.',\n    'alternatives': [\n      '@param function The function.',\n      '@param function The input function.',\n      '@param the function to be used.',\n      '@param the given function (function).',\n      '@param the provided function (denoted by \"function\").'\n    ]\n  },\n  {\n    'tag': '@param lower Lower endpoint.',\n    'alternatives': [\n      '@param lower The lower endpoint.',\n      '@param lower The first endpoint.',\n      '@param the lower limit (lower).',\n      '@param the provided lower endpoint (denoted by \"lower\").',\n      '@param the endpoint at the bottom (lower).'\n    ]\n  },\n  {\n    'tag': '@param upper Upper endpoint.',\n    'alternatives': [\n      '@param upper The upper endpoint.',\n      '@param upper The second endpoint.',\n      '@param the upper limit (upper).',\n      '@param the provided upper endpoint (denoted by \"upper\").',\n      '@param the endpoint at the top (upper).'\n    ]\n  },\n  {\n    'tag': '@throws NoBracketingException if the function has the same sign at the\\nendpoints.',\n    'alternatives': [\n      '@throws NoBracketingException if the function exhibits the same sign at the\\nendpoints.',\n      '@throws NoBracketingException if the function does not change sign at the\\nendpoints.',\n      '@throws NoBracketingException if the signs of the function values are the same at the\\nendpoints.',\n      '@throws NoBracketingException if the function maintains the same sign at the\\nendpoints.',\n      '@throws NoBracketingException if the function does not switch signs at the\\nendpoints.'\n    ]\n  },\n  {\n    'tag': '@return maximal order',\n    'alternatives': [\n      '@return maximum order',\n      '@return the highest order',\n      '@return the largest possible order',\n      '@return the greatest order',\n      '@return the order with the maximum value'\n    ]\n  },\n  {\n    'tag': '@return the maximal number of function evaluations.',\n    'alternatives': [\n      '@return the maximum number of function evaluations.',\n      '@return the highest count of function evaluations.',\n      '@return the largest possible quantity of function evaluations.',\n      '@return the greatest number of function evaluations.',\n      '@return the number of function evaluations with the maximum value.'\n    ]\n  },\n  {\n    'tag': '@return the number of evaluations of the objective function.',\n    'alternatives': [\n      '@return the count of evaluations of the objective function.',\n      '@return the quantity of evaluations of the objective function.',\n      '@return the total number of objective function evaluations.',\n      '@return the number of evaluations for the objective function.',\n      '@return the number of evaluations performed on the objective function.'\n    ]\n  }\n]"