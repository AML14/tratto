"output = [\n  {\n    'tag': '@param a the first collection, must not be null',\n    'alternatives': [\n      '@param a the initial collection, should not be null',\n      '@param a the primary collection, cannot be null',\n      '@param a the first set of elements, must not be null',\n      '@param a the starting collection, should not be null',\n      '@param a the initial group, cannot be null'\n    ]\n  },\n  {\n    'tag': '@param b the second collection, must not be null',\n    'alternatives': [\n      '@param b the second set of elements, should not be null',\n      '@param b the alternate collection, cannot be null',\n      '@param b the secondary collection, must not be null',\n      '@param b the additional collection, should not be null',\n      '@param b the second group, cannot be null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if coll is null',\n    'alternatives': [\n      '@throws NullPointerException when coll is null',\n      '@throws NullPointerException in case of coll being null',\n      '@throws NullPointerException if the coll parameter is null',\n      '@throws NullPointerException if the collection (coll) is null',\n      '@throws NullPointerException if the provided coll is null'\n    ]\n  },\n  {\n    'tag': '@return closure',\n    'alternatives': [\n      '@return the closure',\n      '@return the resulting closure',\n      '@return the closure object',\n      '@return the generated closure',\n      '@return the closure instance'\n    ]\n  },\n  {\n    'tag': '@return closure',\n    'alternatives': [\n      '@return the closure',\n      '@return the output closure',\n      '@return the closure object',\n      '@return the resulted closure',\n      '@return the resulting closure'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if the input collection is null',\n    'alternatives': [\n      '@throws NullPointerException in case the input collection is null',\n      '@throws NullPointerException if the input collection parameter is null',\n      '@throws NullPointerException if the passed input collection is null',\n      '@throws NullPointerException when the input collection is null',\n      '@throws NullPointerException if the given input collection is null'\n    ]\n  },\n  {\n    'tag': '@param inputCollection the collection to get the input from, may not be null',\n    'alternatives': [\n      '@param inputCollection the collection to obtain the input from, cannot be null',\n      '@param inputCollection the collection to retrieve the input from, must not be null',\n      '@param inputCollection the collection from which to obtain the input, may not be null',\n      '@param inputCollection the specified collection to retrieve the input from, should not be null',\n      '@param inputCollection the collection to get the input from, should not be null'\n    ]\n  },\n  {\n    'tag': '@param outputCollection the collection to output into, may not be null if the inputCollection\\n  and predicate or not null',\n    'alternatives': [\n      '@param outputCollection the collection to store the output, must not be null if inputCollection\\n  and predicate are not null',\n      '@param outputCollection the collection to receive the output, cannot be null if inputCollection\\n  and predicate are not null',\n      '@param outputCollection the target collection to hold the result, should not be null if the inputCollection\\n  and predicate are provided',\n      '@param outputCollection the collection to put the result into, may not be null if both inputCollection\\n  and predicate exist',\n      '@param outputCollection the collection to contain the output items, must not be null when the inputCollection\\n  and predicate are given'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if {@code tolerance} is {@code < 0} or NaN',\n    'alternatives': [\n      '@throws IllegalArgumentException if the {@code tolerance} is negative or NaN',\n      '@throws IllegalArgumentException when the value of {@code tolerance} is {@code < 0} or NaN',\n      '@throws IllegalArgumentException if {@code tolerance} is less than zero or not a number',\n      '@throws IllegalArgumentException in case the value of {@code tolerance} is below zero or NaN',\n      '@throws IllegalArgumentException if the provided {@code tolerance} is negative or NaN'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if {@code tolerance} is {@code < 0} or NaN',\n    'alternatives': [\n      '@throws IllegalArgumentException if the value of {@code tolerance} is negative or NaN',\n      '@throws IllegalArgumentException when the {@code tolerance} is not a positive number or isNaN',\n      '@throws IllegalArgumentException if the {@code tolerance} is less than zero or not a number',\n      '@throws IllegalArgumentException in case the value of {@code tolerance} is below zero or NaN',\n      '@throws IllegalArgumentException if the given {@code tolerance} is negative or NaN'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if {@code values} is empty or contains any non-finite value',\n    'alternatives': [\n      '@throws IllegalArgumentException if the {@code values} is empty or has non-finite values',\n      '@throws IllegalArgumentException when the {@code values} list is empty or contains non-finite values',\n      '@throws IllegalArgumentException if the {@code values} list is empty or has non-finite values',\n      '@throws IllegalArgumentException in case the {@code values} is empty or has values that are not finite',\n      '@throws IllegalArgumentException if the provided {@code values} is empty or contains any non-finite value'\n    ]\n  },\n  {\n    'tag': '@param values a nonempty series of values',\n    'alternatives': [\n      '@param values a series of values that is not empty',\n      '@param values a sequence of non-empty values',\n      '@param values a non-empty set of values',\n      '@param values a collection of values that is not empty',\n      '@param values a series of values that contains at least one element'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if {@code values} is empty',\n    'alternatives': [\n      '@throws IllegalArgumentException if the {@code values} is empty',\n      '@throws IllegalArgumentException in case the {@code values} is empty',\n      '@throws IllegalArgumentException if the provided {@code values} is empty',\n      '@throws IllegalArgumentException when the {@code values} list is empty',\n      '@throws IllegalArgumentException if the {@code values} list is empty'\n    ]\n  },\n  {\n    'tag': '@param values a nonempty series of values',\n    'alternatives': [\n      '@param values a series of values that is not empty',\n      '@param values a non-empty set of values',\n      '@param values a sequence of values containing at least one element',\n      '@param values a series of non-empty values',\n      '@param values a collection of values that is not empty'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if {@code values} is empty',\n    'alternatives': [\n      '@throws IllegalArgumentException if the {@code values} is empty',\n      '@throws IllegalArgumentException if the provided {@code values} is an empty list',\n      '@throws IllegalArgumentException in case the {@code values} is empty',\n      '@throws IllegalArgumentException when the {@code values} list is empty',\n      '@throws IllegalArgumentException if the {@code values} list is empty'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if {@code map} is not empty',\n    'alternatives': [\n      '@throws IllegalArgumentException if the {@code map} is not empty',\n      '@throws IllegalArgumentException when the {@code map} is not empty',\n      '@throws IllegalArgumentException in case the {@code map} is not empty',\n      '@throws IllegalArgumentException if the provided {@code map} is not empty',\n      '@throws IllegalArgumentException if the {@code map} contains elements'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if {@code map} is not empty',\n    'alternatives': [\n      '@throws IllegalArgumentException if the {@code map} is not empty',\n      '@throws IllegalArgumentException when the {@code map} is not empty',\n      '@throws IllegalArgumentException in case the {@code map} has elements',\n      '@throws IllegalArgumentException if the provided {@code map} is not empty',\n      '@throws IllegalArgumentException if the {@code map} contains entries'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if {@code map} is not empty',\n    'alternatives': [\n      '@throws IllegalArgumentException if the {@code map} is not empty',\n      '@throws IllegalArgumentException when the {@code map} is not empty',\n      '@throws IllegalArgumentException in case the {@code map} has entries',\n      '@throws IllegalArgumentException if the provided {@code map} is not empty',\n      '@throws IllegalArgumentException if the {@code map} contains elements'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if {@code map} is not empty',\n    'alternatives': [\n      '@throws IllegalArgumentException if the {@code map} is not empty',\n      '@throws IllegalArgumentException when the {@code map} is not empty',\n      '@throws IllegalArgumentException in case the {@code map} contains elements',\n      '@throws IllegalArgumentException if the provided {@code map} is not empty',\n      '@throws IllegalArgumentException if the {@code map} has entries'\n    ]\n  },\n  {\n    'tag': '@return {@code dest}',\n    'alternatives': [\n      '@return the destination object ({@code dest})',\n      '@return the resulting object ({@code dest})',\n      '@return the value of the {@code dest}',\n      '@return the object as {@code dest}',\n      '@return the {@code dest} object'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if {@code map} is not empty',\n    'alternatives': [\n      '@throws IllegalArgumentException if the {@code map} is not empty',\n      '@throws IllegalArgumentException when the {@code map} is not empty',\n      '@throws IllegalArgumentException if the {@code map} has elements',\n      '@throws IllegalArgumentException in case the {@code map} is not empty',\n      '@throws IllegalArgumentException if the provided {@code map} is not empty'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if any task is null',\n    'alternatives': [\n      '@throws NullPointerException when any task is null',\n      '@throws NullPointerException in case any task is null',\n      '@throws NullPointerException if any of the tasks is null',\n      '@throws NullPointerException if any task is a null value',\n      '@throws NullPointerException if any task parameter is null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if any task is null',\n    'alternatives': [\n      '@throws NullPointerException when any task is null',\n      '@throws NullPointerException if any of the tasks is null',\n      '@throws NullPointerException in case any task is null',\n      '@throws NullPointerException if any task is a null value',\n      '@throws NullPointerException if any task parameter is null'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if {@code length} is zero or negative',\n    'alternatives': [\n      '@throws IllegalArgumentException if the {@code length} is zero or negative',\n      '@throws IllegalArgumentException when the {@code length} is less than or equal to zero',\n      '@throws IllegalArgumentException in case the {@code length} is zero or negative',\n      '@throws IllegalArgumentException if {@code length} is less than or equal to zero',\n      '@throws IllegalArgumentException if the provided {@code length} is zero or negative'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if {@code size} is negative',\n    'alternatives': [\n      '@throws IllegalArgumentException when the {@code size} is negative',\n      '@throws IllegalArgumentException if the {@code size} is less than zero',\n      '@throws IllegalArgumentException in case the {@code size} is negative',\n      '@throws IllegalArgumentException if {@code size} is less than zero',\n      '@throws IllegalArgumentException if the given {@code size} is negative'\n    ]\n  }\n]"