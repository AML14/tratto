"output = [\n  {\n    'tag': '@return {@code true} if the arguments satify the convergence criterion.',\n    'alternatives': [\n      '@return {@code true} if the arguments meet the convergence criterion.',\n      '@return {@code true} if the arguments satisfy the convergence condition.',\n      '@return {@code true} if the arguments fulfill the convergence criterion.',\n      '@return {@code true} if the convergence criterion is satisfied by the arguments.',\n      '@return {@code true} if the arguments adhere to the convergence criterion.'\n    ]\n  },\n  {\n    'tag': '@param relativeThreshold relative tolerance threshold',\n    'alternatives': [\n      '@param relativeThreshold threshold for relative tolerance',\n      '@param relativeThreshold threshold for tolerance relative to the value',\n      '@param relativeThreshold threshold for relative tolerance levels',\n      '@param relativeThreshold threshold for the relative level of tolerance',\n      '@param relativeThreshold tolerance threshold relative to a reference'\n    ]\n  },\n  {\n    'tag': '@param absoluteThreshold absolute tolerance threshold',\n    'alternatives': [\n      '@param absoluteThreshold threshold for absolute tolerance',\n      '@param absoluteThreshold threshold for tolerance absolute to the value',\n      '@param absoluteThreshold threshold for absolute tolerance levels',\n      '@param absoluteThreshold threshold for the absolute level of tolerance',\n      '@param absoluteThreshold tolerance threshold absolute to a reference'\n    ]\n  },\n  {\n    'tag': '@param relativeThreshold Relative tolerance threshold.',\n    'alternatives': [\n      '@param relativeThreshold threshold for tolerance relative to the value.',\n      '@param relativeThreshold threshold for relative tolerance levels.',\n      '@param relativeThreshold threshold for the relative level of tolerance.',\n      '@param relativeThreshold tolerance threshold relative to a reference.',\n      '@param relativeThreshold threshold for tolerance, relative to the value.'\n    ]\n  },\n  {\n    'tag': '@param absoluteThreshold Absolute tolerance threshold.',\n    'alternatives': [\n      '@param absoluteThreshold threshold for absolute tolerance.',\n      '@param absoluteThreshold threshold for tolerance absolute to the value.',\n      '@param absoluteThreshold threshold for absolute tolerance levels.',\n      '@param absoluteThreshold threshold for the absolute level of tolerance.',\n      '@param absoluteThreshold tolerance threshold absolute to a reference.'\n    ]\n  },\n  {\n    'tag': '@param maxIter Maximum iteration count.',\n    'alternatives': [\n      '@param maxIter count of the maximum iterations.',\n      '@param maxIter maximum number of iterations.',\n      '@param maxIter number of iterations to be performed at most.',\n      '@param maxIter maximum count of iterations.',\n      '@param maxIter limit on the number of iterations.'\n    ]\n  },\n  {\n    'tag': '@return the maximal number of function evaluations.',\n    'alternatives': [\n      '@return maximum number of function evaluations.',\n      '@return the highest count of function evaluations.',\n      '@return the number of function evaluations at maximum.',\n      '@return maximum count of evaluations of the function.',\n      '@return the maximum allowable number of function evaluations.'\n    ]\n  },\n  {\n    'tag': '@return the number of evaluations of the objective function.',\n    'alternatives': [\n      '@return count of evaluations of the objective function.',\n      '@return number of objective function evaluations.',\n      '@return total count of evaluations of the objective function.',\n      '@return the summation of evaluations of the objective function.',\n      '@return the total number of evaluations performed on the objective function.'\n    ]\n  },\n  {\n    'tag': '@return the maximal number of iterations.',\n    'alternatives': [\n      '@return maximum number of iterations.',\n      '@return the highest count of iterations.',\n      '@return the number of iterations at maximum.',\n      '@return maximum count of iterations.',\n      '@return the maximum allowable number of iterations.'\n    ]\n  },\n  {\n    'tag': '@return the number of evaluations of the objective function.',\n    'alternatives': [\n      '@return count of evaluations of the objective function.',\n      '@return number of objective function evaluations.',\n      '@return total count of evaluations of the objective function.',\n      '@return the summation of evaluations of the objective function.',\n      '@return the total number of evaluations performed on the objective function.'\n    ]\n  },\n  {\n    'tag': '@return the object used to check for convergence.',\n    'alternatives': [\n      '@return the convergence checking object.',\n      '@return the convergence checker object.',\n      '@return the checker object used for convergence testing.',\n      '@return the object used for verifying convergence.',\n      '@return the object employed for checking convergence.'\n    ]\n  },\n  {\n    'tag': '@param optData Optimization data.\\nThis method will register the following data:\\n<ul>\\n <li>{@link MaxEval}</li>\\n <li>{@link MaxIter}</li>\\n</ul>',\n    'alternatives': [\n      '@param optData optimization data that will be registered by this method.\\nIt includes the following data:\\n<ul>\\n <li>{@link MaxEval}</li>\\n <li>{@link MaxIter}</li>\\n</ul>',\n      '@param optData optimization data that this method will register.\\nThe registered data includes the following:\\n<ul>\\n <li>{@link MaxEval}</li>\\n <li>{@link MaxIter}</li>\\n</ul>',\n      '@param optData optimization data for registration by this method.\\nIt will include the following data:\\n<ul>\\n <li>{@link MaxEval}</li>\\n <li>{@link MaxIter}</li>\\n</ul>',\n      '@param optData optimization data which will be registered by this method.\\nIt consists of the following data:\\n<ul>\\n <li>{@link MaxEval}</li>\\n <li>{@link MaxIter}</li>\\n</ul>',\n      '@param optData optimization data to be registered by this method.\\nIt will include the following data:\\n<ul>\\n <li>{@link MaxEval}</li>\\n <li>{@link MaxIter}</li>\\n</ul>'\n    ]\n  },\n  {\n    'tag': '@return a point/value pair that satisfies the convergence criteria.',\n    'alternatives': [\n      '@return a point/value pair that fulfills the convergence criteria.',\n      '@return a point/value pair that meets the convergence criteria.',\n      '@return a point/value pair that satisfies the convergence condition.',\n      '@return a point/value pair that adheres to the convergence criteria.',\n      '@return a point/value pair that fulfills the conditions for convergence.'\n    ]\n  },\n  {\n    'tag': '@throws TooManyEvaluationsException if the maximal number of\\nevaluations is exceeded.',\n    'alternatives': [\n      '@throws TooManyEvaluationsException if the number of evaluations exceeds the maximum allowed.',\n      '@throws TooManyEvaluationsException when the maximum number of evaluations is exceeded.',\n      '@throws TooManyEvaluationsException if the number of evaluations surpasses the maximum limit.',\n      '@throws TooManyEvaluationsException if the maximum number of evaluations is exceeded.',\n      '@throws TooManyEvaluationsException when the number of evaluations exceeds the upper limit.'\n    ]\n  },\n  {\n    'tag': '@throws TooManyIterationsException if the maximal number of\\niterations is exceeded.',\n    'alternatives': [\n      '@throws TooManyIterationsException if the number of iterations exceeds the maximum allowed.',\n      '@throws TooManyIterationsException when the maximum number of iterations is exceeded.',\n      '@throws TooManyIterationsException if the number of iterations surpasses the maximum limit.',\n      '@throws TooManyIterationsException if the maximum number of iterations is exceeded.',\n      '@throws TooManyIterationsException when the number of iterations exceeds the upper limit.'\n    ]\n  },\n  {\n    'tag': '@return the point/value pair giving the optimal value of the\\nobjective function.',\n    'alternatives': [\n      '@return the point/value pair that provides the optimal value of the objective function.',\n      '@return the point/value pair that yields the optimal value of the objective function.',\n      '@return the point/value pair that obtains the optimal value of the objective function.',\n      '@return the point/value pair that produces the optimal value of the objective function.',\n      '@return the point/value pair that achieves the optimal value of the objective function.'\n    ]\n  },\n  {\n    'tag': '@throws TooManyEvaluationsException if the allowed evaluations\\nhave been exhausted.',\n    'alternatives': [\n      '@throws TooManyEvaluationsException if the permitted evaluations have been used up.',\n      '@throws TooManyEvaluationsException when the allowed evaluations have been depleted.',\n      '@throws TooManyEvaluationsException if there are no more allowed evaluations.',\n      '@throws TooManyEvaluationsException if the number of evaluations allowed has been reached.',\n      '@throws TooManyEvaluationsException when the permitted number of evaluations has been reached.'\n    ]\n  },\n  {\n    'tag': '@throws TooManyIterationsException if the allowed iterations\\nhave been exhausted.',\n    'alternatives': [\n      '@throws TooManyIterationsException if the permitted iterations have been used up.',\n      '@throws TooManyIterationsException when the allowed iterations have been depleted.',\n      '@throws TooManyIterationsException if there are no more allowed iterations.',\n      '@throws TooManyIterationsException if the number of iterations allowed has been reached.',\n      '@throws TooManyIterationsException when the permitted number of iterations has been reached.'\n    ]\n  },\n  {\n    'tag': '@param optData Optimization data.\\nThe following data will be looked for:\\n<ul>\\n <li>{@link MaxEval}</li>\\n <li>{@link MaxIter}</li>\\n</ul>',\n    'alternatives': [\n      '@param optData Optimization data.\\nThis method will search for the following data:\\n<ul>\\n <li>{@link MaxEval}</li>\\n <li>{@link MaxIter}</li>\\n</ul>',\n      '@param optData Optimization data.\\nThe method will look for the following data:\\n<ul>\\n <li>{@link MaxEval}</li>\\n <li>{@link MaxIter}</li>\\n</ul>',\n      '@param optData Optimization data.\\nThe following data will be sought:\\n<ul>\\n <li>{@link MaxEval}</li>\\n <li>{@link MaxIter}</li>\\n</ul>',\n      '@param optData Optimization data.\\nThe following data will be searched for:\\n<ul>\\n <li>{@link MaxEval}</li>\\n <li>{@link MaxIter}</li>\\n</ul>',\n      '@param optData Optimization data.\\nThis method will look for the following data:\\n<ul>\\n <li>{@link MaxEval}</li>\\n <li>{@link MaxIter}</li>\\n</ul>'\n    ]\n  },\n  {\n    'tag': '@param checker Convergence checker.',\n    'alternatives': [\n      '@param checker Checker for convergence.',\n      '@param checker Object used to check for convergence.',\n      '@param checker Convergence verification object.',\n      '@param checker Object employed for convergence checking.',\n      '@param checker Convergence condition checker.'\n    ]\n  },\n  {\n    'tag': '@param checker Convergence checker.',\n    'alternatives': [\n      '@param checker Checker for convergence.',\n      '@param checker Object used to check for convergence.',\n      '@param checker Convergence verification object.',\n      '@param checker Object employed for convergence checking.',\n      '@param checker Convergence condition checker.'\n    ]\n  },\n  {\n    'tag': '@param maxEval Maximum number of objective function evaluations.',\n    'alternatives': [\n      '@param maxEval Maximum count of objective function evaluations.',\n      '@param maxEval Maximum number of evaluations of the objective function.',\n      '@param maxEval Maximum allowable count of objective function evaluations.',\n      '@param maxEval Maximum limit on the number of evaluations of the objective function.',\n      '@param maxEval Maximum count of evaluations of the objective function.'\n    ]\n  }\n]"