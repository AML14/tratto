"output = [\n  {\n    'tag': '@param sample Training data.',\n    'alternatives': [\n      '@param sample Training dataset.',\n      '@param sample Data for training.',\n      '@param sample Set of training examples.',\n      '@param sample Input data for training.',\n      '@param sample Data used for training.'\n    ]\n  },\n  {\n    'tag': '@param learningRate Learning factor.',\n    'alternatives': [\n      '@param learningRate Factor for learning.',\n      '@param learningRate Factor used for learning.',\n      '@param learningRate Rate of learning.',\n      '@param learningRate Learning coefficient.',\n      '@param learningRate Learning parameter.'\n    ]\n  },\n  {\n    'tag': '@return the new values for the features.',\n    'alternatives': [\n      '@return the updated feature values.',\n      '@return the computed feature values.',\n      '@return the values of the features after the update.',\n      '@return the modified feature values.',\n      '@return the feature values after the update.'\n    ]\n  },\n  {\n    'tag': '@param distance Distance function.',\n    'alternatives': [\n      '@param distance Function to calculate distance.',\n      '@param distance Function used to compute distance.',\n      '@param distance Method to measure distance.',\n      '@param distance Algorithm for computing distance.',\n      '@param distance Distance calculation function.'\n    ]\n  },\n  {\n    'tag': '@param learningFactor Learning factor update function.',\n    'alternatives': [\n      '@param learningFactor Function to update learning factor.',\n      '@param learningFactor Method for updating learning factor.',\n      '@param learningFactor Learning factor adjustment function.',\n      '@param learningFactor Function used to modify learning factor.',\n      '@param learningFactor Function for updating the learning factor.'\n    ]\n  },\n  {\n    'tag': '@param neighbourhoodSize Neighbourhood size update function.',\n    'alternatives': [\n      '@param neighbourhoodSize Function to update neighbourhood size.',\n      '@param neighbourhoodSize Method for updating neighbourhood size.',\n      '@param neighbourhoodSize Size adjustment function for neighbourhood.',\n      '@param neighbourhoodSize Function used to modify neighbourhood size.',\n      '@param neighbourhoodSize Function for updating the neighbourhood size.'\n    ]\n  },\n  {\n    'tag': '@param numCall Current step of the training task.',\n    'alternatives': [\n      '@param numCall Current iteration of the training task.',\n      '@param numCall Current stage of the training task.',\n      '@param numCall The current step in the training process.',\n      '@param numCall The current phase of the training task.',\n      '@param numCall The current timestep in the training task.'\n    ]\n  },\n  {\n    'tag': '@return the value of the function at {@code numCall}.',\n    'alternatives': [\n      '@return the function value at {@code numCall}.',\n      '@return the output of the function at {@code numCall}.',\n      '@return the result of evaluating the function at {@code numCall}.',\n      '@return the computed value of the function at {@code numCall}.',\n      '@return the function's value at {@code numCall}.'\n    ]\n  },\n  {\n    'tag': '@param initValue Initial value, i.e. {@link #value(long) value(0)}.',\n    'alternatives': [\n      '@param initValue Starting value, i.e. {@link #value(long) value(0)}.',\n      '@param initValue Initial state, e.g. {@link #value(long) value(0)}.',\n      '@param initValue Initial condition, such as {@link #value(long) value(0)}.',\n      '@param initValue Initial setting, for example {@link #value(long) value(0)}.',\n      '@param initValue Initial parameter, specified as {@link #value(long) value(0)}.'\n    ]\n  },\n  {\n    'tag': '@param slope Value of the function derivative at {@code numCall}.',\n    'alternatives': [\n      '@param slope Function's derivative value at {@code numCall}.',\n      '@param slope Derivative value of the function at {@code numCall}.',\n      '@param slope Rate of change of the function at {@code numCall}.',\n      '@param slope Gradient of the function at {@code numCall}.',\n      '@param slope The change rate of the function at {@code numCall}.'\n    ]\n  },\n  {\n    'tag': '@param numCall Inflexion point.',\n    'alternatives': [\n      '@param numCall Point of inflection.',\n      '@param numCall Changing point.',\n      '@param numCall Turning point.',\n      '@param numCall Critical point.',\n      '@param numCall Transition point.'\n    ]\n  },\n  {\n    'tag': '@param valueAtNumCall Value of the function at {@code numCall}.',\n    'alternatives': [\n      '@param valueAtNumCall Function's value at {@code numCall}.',\n      '@param valueAtNumCall Value of the function evaluated at {@code numCall}.',\n      '@param valueAtNumCall The computed value of the function at {@code numCall}.',\n      '@param valueAtNumCall Output of the function at {@code numCall}.',\n      '@param valueAtNumCall The value of the function at the point {@code numCall}.'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if any predicate in the array is null',\n    'alternatives': [\n      '@throws NullPointerException if any element in the array of predicates is null',\n      '@throws NullPointerException if any predicate in the array is undefined',\n      '@throws NullPointerException if any element in the predicate array is null',\n      '@throws NullPointerException if any element in the array of conditions is null',\n      '@throws NullPointerException if any predicate in the provided array is null'\n    ]\n  },\n  {\n    'tag': '@param predicates an array of predicates to check, may not be null',\n    'alternatives': [\n      '@param predicates a non-null array of predicates to verify',\n      '@param predicates an array of predicates to validate, must not be null',\n      '@param predicates an array of predicates for validation, cannot be null',\n      '@param predicates a not-null array of predicates to examine',\n      '@param predicates a non-empty array of predicates to confirm, not null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if the predicates collection is null',\n    'alternatives': [\n      '@throws NullPointerException if the collection of predicates is null',\n      '@throws NullPointerException if the predicates collection is undefined',\n      '@throws NullPointerException if the passed collection of predicates is null',\n      '@throws NullPointerException if the predicates collection is absent',\n      '@throws NullPointerException if the provided collection of predicates is null'\n    ]\n  },\n  {\n    'tag': '@param predicates a collection of predicates to check, may not be null',\n    'alternatives': [\n      '@param predicates a non-null collection of predicates to verify',\n      '@param predicates a collection of predicates to validate, must not be null',\n      '@param predicates a collection of predicates for validation, cannot be null',\n      '@param predicates a not-null collection of predicates to examine',\n      '@param predicates a non-empty collection of predicates to confirm, not null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if either predicate is null',\n    'alternatives': [\n      '@throws NullPointerException if any of the predicates is null',\n      '@throws NullPointerException if either of the predicates is null',\n      '@throws NullPointerException if any predicate is undefined',\n      '@throws NullPointerException if either predicate is undefined',\n      '@throws NullPointerException if any of the provided predicates is null'\n    ]\n  },\n  {\n    'tag': '@param predicate1 the first predicate, may not be null',\n    'alternatives': [\n      '@param predicate1 the initial predicate, must not be null',\n      '@param predicate1 the first condition, cannot be null',\n      '@param predicate1 the main predicate, should not be null',\n      '@param predicate1 the primary predicate, must not be null',\n      '@param predicate1 the initial test condition, not null'\n    ]\n  },\n  {\n    'tag': '@param predicate2 the second predicate, may not be null',\n    'alternatives': [\n      '@param predicate2 the alternate predicate, must not be null',\n      '@param predicate2 the second condition, cannot be null',\n      '@param predicate2 the secondary predicate, should not be null',\n      '@param predicate2 the alternative predicate, must not be null',\n      '@param predicate2 the secondary test condition, not null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if the predicates array is null',\n    'alternatives': [\n      '@throws NullPointerException if the array of predicates is null',\n      '@throws NullPointerException if the predicates array is undefined',\n      '@throws NullPointerException if the passed array of predicates is null',\n      '@throws NullPointerException if the predicates array is absent',\n      '@throws NullPointerException if the provided array of predicates is null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if any predicate in the array is null',\n    'alternatives': [\n      '@throws NullPointerException if any element in the array of predicates is null',\n      '@throws NullPointerException if any predicate in the array is undefined',\n      '@throws NullPointerException if any element in the predicate array is null',\n      '@throws NullPointerException if any element in the array of conditions is null',\n      '@throws NullPointerException if any predicate in the provided array is null'\n    ]\n  },\n  {\n    'tag': '@param predicates an array of predicates to check, may not be null',\n    'alternatives': [\n      '@param predicates a non-null array of predicates to verify',\n      '@param predicates an array of predicates to validate, must not be null',\n      '@param predicates an array of predicates for validation, cannot be null',\n      '@param predicates a not-null array of predicates to examine',\n      '@param predicates a non-empty array of predicates to confirm, not null'\n    ]\n  }\n]\n"