"[\n  {\n    \"tag\": \"@return the object at the specified index\",\n    \"alternatives\": [\n      \"@return the element at the specified index\",\n      \"@return the item located at the given index\",\n      \"@return the value corresponding to the specified index\",\n      \"@return the object found at the specified index\",\n      \"@return the element retrieved from the index\"\n    ]\n  },\n  {\n    \"tag\": \"@throws IndexOutOfBoundsException if the index is invalid\",\n    \"alternatives\": [\n      \"@throws IndexOutOfBoundsException in case of an invalid index\",\n      \"@throws IndexOutOfBoundsException if the index is out of bounds\",\n      \"@throws IndexOutOfBoundsException if the index is not valid\",\n      \"@throws IndexOutOfBoundsException when the index is invalid\",\n      \"@throws IndexOutOfBoundsException if the index provided is invalid\"\n    ]\n  },\n  {\n    \"tag\": \"@throws IllegalArgumentException if the object type is invalid\",\n    \"alternatives\": [\n      \"@throws IllegalArgumentException when the object type is not valid\",\n      \"@throws IllegalArgumentException in case of an invalid object type\",\n      \"@throws IllegalArgumentException if the object type is not recognized\",\n      \"@throws IllegalArgumentException if the object type is invalid\",\n      \"@throws IllegalArgumentException when the object type is invalid\"\n    ]\n  },\n  {\n    \"tag\": \"@param <K> the key type in the {@link Map}\",\n    \"alternatives\": [\n      \"@param <K> the type of key in the {@link Map}\",\n      \"@param <K> the key type used in the {@link Map}\",\n      \"@param <K> the type representing the key in the {@link Map}\",\n      \"@param <K> the key's data type in the {@link Map}\",\n      \"@param <K> the type of the key stored in the {@link Map}\"\n    ]\n  },\n  {\n    \"tag\": \"@param <V> the key type in the {@link Map}\",\n    \"alternatives\": [\n      \"@param <V> the type of value in the {@link Map}\",\n      \"@param <V> the value type used in the {@link Map}\",\n      \"@param <V> the type representing the value in the {@link Map}\",\n      \"@param <V> the value's data type in the {@link Map}\",\n      \"@param <V> the type of the value stored in the {@link Map}\"\n    ]\n  },\n  {\n    \"tag\": \"@param map the object to get a value from\",\n    \"alternatives\": [\n      \"@param map the source to retrieve a value from\",\n      \"@param map the container to obtain a value from\",\n      \"@param map the map to fetch a value from\",\n      \"@param map the object used to extract a value\",\n      \"@param map the instance to retrieve a value from\"\n    ]\n  },\n  {\n    \"tag\": \"@param index the index to get\",\n    \"alternatives\": [\n      \"@param index the index to retrieve\",\n      \"@param index the position to obtain\",\n      \"@param index the location to get\",\n      \"@param index the number representing the index\",\n      \"@param index the position from which to obtain\"\n    ]\n  },\n  {\n    \"tag\": \"@return the object at the specified index\",\n    \"alternatives\": [\n      \"@return the element at the provided index\",\n      \"@return the item located at the given index\",\n      \"@return the value corresponding to the specified index\",\n      \"@return the object found at the specified index\",\n      \"@return the element retrieved from the index\"\n    ]\n  },\n  {\n    \"tag\": \"@throws IndexOutOfBoundsException if the index is invalid\",\n    \"alternatives\": [\n      \"@throws IndexOutOfBoundsException in case of an invalid index\",\n      \"@throws IndexOutOfBoundsException if the index is out of bounds\",\n      \"@throws IndexOutOfBoundsException if the index is not valid\",\n      \"@throws IndexOutOfBoundsException when the index is invalid\",\n      \"@throws IndexOutOfBoundsException if the index provided is invalid\"\n    ]\n  },\n  {\n    \"tag\": \"@param object the object to get the size of, may be null\",\n    \"alternatives\": [\n      \"@param object the object to determine the size of, nullable\",\n      \"@param object the object to obtain the size of, could be null\",\n      \"@param object the object to fetch the size of, optional\",\n      \"@param object the object used for size calculation, possibly null\",\n      \"@param object the object to measure the size of, potentially null\"\n    ]\n  },\n  {\n    \"tag\": \"@return the size of the specified collection or 0 if the object was null\",\n    \"alternatives\": [\n      \"@return the size of the given collection or 0 if the object is null\",\n      \"@return the number of elements in the specified collection or 0 if object is null\",\n      \"@return the length of the specified collection or 0 if object is null\",\n      \"@return the count of items in the provided collection or 0 if object is null\",\n      \"@return the size of the collection passed or 0 if the object is null\"\n    ]\n  },\n  {\n    \"tag\": \"@throws IllegalArgumentException thrown if object is not recognised\",\n    \"alternatives\": [\n      \"@throws IllegalArgumentException if object is not recognized\",\n      \"@throws IllegalArgumentException in case the object is not identified\",\n      \"@throws IllegalArgumentException if object is not known\",\n      \"@throws IllegalArgumentException when the object is not recognized\",\n      \"@throws IllegalArgumentException when the object is not identified\"\n    ]\n  },\n  {\n    \"tag\": \"@param object the object to get the size of, may be null\",\n    \"alternatives\": [\n      \"@param object the object to determine the size of, nullable\",\n      \"@param object the object to obtain the size of, could be null\",\n      \"@param object the object to fetch the size of, optional\",\n      \"@param object the object used for size calculation, possibly null\",\n      \"@param object the object to measure the size of, potentially null\"\n    ]\n  },\n  {\n    \"tag\": \"@return true if empty or null\",\n    \"alternatives\": [\n      \"@return true if empty or unspecified\",\n      \"@return true in case of being empty or null\",\n      \"@return true if it is empty or null\",\n      \"@return true when there is no content or null\",\n      \"@return true if the input is empty or missing\"\n    ]\n  },\n  {\n    \"tag\": \"@throws IllegalArgumentException thrown if object is not recognised\",\n    \"alternatives\": [\n      \"@throws IllegalArgumentException if object is not recognized\",\n      \"@throws IllegalArgumentException in case the object is not identified\",\n      \"@throws IllegalArgumentException if object is not known\",\n      \"@throws IllegalArgumentException when the object is not recognized\",\n      \"@throws IllegalArgumentException when the object is not identified\"\n    ]\n  },\n  {\n    \"tag\": \"@param coll the collection to check, may be null\",\n    \"alternatives\": [\n      \"@param coll the collection to validate, can be null\",\n      \"@param coll the collection to examine, might be null\",\n      \"@param coll the collection to inspect, optionally null\",\n      \"@param coll the collection to verify, possibly null\",\n      \"@param coll the collection to assess, may or may not be null\"\n    ]\n  },\n  {\n    \"tag\": \"@return true if empty or null\",\n    \"alternatives\": [\n      \"@return true if empty or unspecified\",\n      \"@return true in case of being empty or null\",\n      \"@return true if it is empty or null\",\n      \"@return true when there is no content or null\",\n      \"@return true if the input is empty or missing\"\n    ]\n  },\n  {\n    \"tag\": \"@param coll the collection to check, may be null\",\n    \"alternatives\": [\n      \"@param coll the collection to validate, can be null\",\n      \"@param coll the collection to examine, might be null\",\n      \"@param coll the collection to inspect, optionally null\",\n      \"@param coll the collection to verify, possibly null\",\n      \"@param coll the collection to assess, may or may not be null\"\n    ]\n  },\n  {\n    \"tag\": \"@return true if non-null and non-empty\",\n    \"alternatives\": [\n      \"@return true if not null and has contents\",\n      \"@return true if it is neither null nor empty\",\n      \"@return true when there are elements and not null\",\n      \"@return true if there is data and not null\",\n      \"@return true if the input is non-null and contains items\"\n    ]\n  },\n  {\n    \"tag\": \"@param array the array to reverse\",\n    \"alternatives\": [\n      \"@param array the array to invert\",\n      \"@param array the array to flip\",\n      \"@param array the array to turn around\",\n      \"@param array the array to reverse the order of\",\n      \"@param array the array to rearrange in reverse\"\n    ]\n  },\n  {\n    \"tag\": \"@param coll the collection to check\",\n    \"alternatives\": [\n      \"@param coll the collection to verify\",\n      \"@param coll the collection to examine\",\n      \"@param coll the collection to inspect\",\n      \"@param coll the collection to assess\",\n      \"@param coll the collection to evaluate\"\n    ]\n  },\n  {\n    \"tag\": \"@return true if the BoundedCollection is full\",\n    \"alternatives\": [\n      \"@return true if the BoundedCollection is at maximum capacity\",\n      \"@return true if the BoundedCollection has reached its limit\",\n      \"@return true if the BoundedCollection is filled to capacity\",\n      \"@return true if the BoundedCollection is completely occupied\",\n      \"@return true if the BoundedCollection has no further space available\"\n    ]\n  },\n  {\n    \"tag\": \"@param coll the collection to check\",\n    \"alternatives\": [\n      \"@param coll the collection to verify\",\n      \"@param coll the collection to examine\",\n      \"@param coll the collection to inspect\",\n      \"@param coll the collection to assess\",\n      \"@param coll the collection to evaluate\"\n    ]\n  },\n  {\n    \"tag\": \"@return the maximum size of the BoundedCollection, -1 if no maximum size\",\n    \"alternatives\": [\n      \"@return the highest possible size of the BoundedCollection, -1 if no maximum size\",\n      \"@return the upper limit of the BoundedCollection size, -1 if no maximum size\",\n      \"@return the maximum capacity of the BoundedCollection, -1 if no maximum size\",\n      \"@return the maximum number of elements the BoundedCollection can hold, -1 if no maximum size\",\n      \"@return the largest size the BoundedCollection can reach, -1 if no maximum size\"\n    ]\n  },\n  {\n    \"tag\": \"@param <O> the element type\",\n    \"alternatives\": [\n      \"@param <O> the type of element\",\n      \"@param <O> the element's type\",\n      \"@param <O> the data type of the element\",\n      \"@param <O> the type representing the element\",\n      \"@param <O> the type used for the element\"\n    ]\n  }\n]"