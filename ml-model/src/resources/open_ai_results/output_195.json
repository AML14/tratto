"output = [\n  {\n    'tag': '@param diagonalOnly Number of initial iterations, where the covariance matrix\\nremains diagonal.',\n    'alternatives': [\n      '@param diagonalOnly Number of initial iterations, where the covariance matrix\\nremains diagonal.',\n      '@param diagonalOnly Number of first iterations, where the covariance matrix\\nstays diagonal.',\n      '@param diagonalOnly Number of initial loops, where the covariance matrix\\nremains diagonal.',\n    ]\n  },\n  {\n    'tag': '@param checkFeasableCount Determines how often new random objective variables are\\ngenerated in case they are out of bounds.',\n    'alternatives': [\n      '@param checkFeasableCount Determines how often new random objective variables are\\ngenerated in case they are out of bounds.',\n      '@param checkFeasableCount Specifies the frequency of generating new random objective variables\\nwhen they are out of bounds.',\n      '@param checkFeasableCount Controls the frequency of generating new random objective variables\\nif they exceed the bounds.',\n    ]\n  },\n  {\n    'tag': '@param random Random generator.',\n    'alternatives': [\n      '@param random Random generator.',\n      '@param random Generator for random values.',\n      '@param random Random value generator.',\n    ]\n  },\n  {\n    'tag': '@param generateStatistics Whether statistic data is collected.',\n    'alternatives': [\n      '@param generateStatistics Whether statistic data is collected.',\n      '@param generateStatistics Indicates if statistical data is gathered.',\n      '@param generateStatistics Determines if statistics are collected.',\n    ]\n  },\n  {\n    'tag': '@param checker Convergence checker.',\n    'alternatives': [\n      '@param checker Convergence checker.',\n      '@param checker Checker for convergence.',\n      '@param checker Convergence testing utility.',\n    ]\n  },\n  {\n    'tag': '@param p Point used in the line search.',\n    'alternatives': [\n      '@param p Point used in the line search.',\n      '@param p Point utilized in the line search.',\n      '@param p Point employed in the line search.',\n    ]\n  },\n  {\n    'tag': '@param d Direction used in the line search.',\n    'alternatives': [\n      '@param d Direction used in the line search.',\n      '@param d Direction utilized in the line search.',\n      '@param d Direction employed in the line search.',\n    ]\n  },\n  {\n    'tag': '@param optimum Optimum found by the line search.',\n    'alternatives': [\n      '@param optimum Optimum found by the line search.',\n      '@param optimum Best solution discovered by the line search.',\n      '@param optimum Optimal result obtained from the line search.',\n    ]\n  },\n  {\n    'tag': '@param plusOutside part of the node cut sub-hyperplane that\\nbelongs to the boundary and has the outside of the region on\\nthe plus side of its underlying hyperplane (may be null)',\n    'alternatives': [\n      '@param plusOutside part of the node cut sub-hyperplane that\\nbelongs to the boundary and has the outside of the region on\\nthe plus side of its underlying hyperplane (may be null)',\n      '@param plusOutside portion of the sub-hyperplane of the node cut that\\nis part of the boundary and is outside the region on\\nthe positive side of its underlying hyperplane (may be null)',\n      '@param plusOutside area of the node cut sub-hyperplane that\\nis a member of the boundary and represents the outside region on\\nthe positive side of its underlying hyperplane (could be null)',\n    ]\n  },\n  {\n    'tag': '@param plusInside part of the node cut sub-hyperplane that\\nbelongs to the boundary and has the inside of the region on the\\nplus side of its underlying hyperplane (may be null)',\n    'alternatives': [\n      '@param plusInside part of the node cut sub-hyperplane that\\nbelongs to the boundary and has the inside of the region on the\\nplus side of its underlying hyperplane (may be null)',\n      '@param plusInside portion of the sub-hyperplane of the node cut that\\nis part of the boundary and is inside the region on\\nthe positive side of its underlying hyperplane (may be null)',\n      '@param plusInside area of the node cut sub-hyperplane that\\nis a member of the boundary and represents the inside region on\\nthe positive side of its underlying hyperplane (could be null)',\n    ]\n  },\n  {\n    'tag': '@param splitters sub-hyperplanes that were used to\\nsplit the boundary part (may be null)',\n    'alternatives': [\n      '@param splitters sub-hyperplanes that were used to\\nsplit the boundary part (may be null)',\n      '@param splitters sub-hyperplanes utilized for\\npartitioning the boundary part (may be null)',\n      '@param splitters sub-hyperplanes employed to\\ndivide the boundary part (may be null)',\n    ]\n  },\n  {\n    'tag': '@return a new sub-hyperplane, copy of the instance',\n    'alternatives': [\n      '@return a new sub-hyperplane, copy of the instance',\n      '@return a new sub-hyperplane that is an identical copy of the original',\n      '@return a new sub-hyperplane, duplicate of the current one',\n    ]\n  },\n  {\n    'tag': '@return underlying hyperplane',\n    'alternatives': [\n      '@return underlying hyperplane',\n      '@return base hyperplane',\n      '@return fundamental hyperplane',\n    ]\n  },\n  {\n    'tag': '@return true if the instance is empty',\n    'alternatives': [\n      '@return true if the instance is empty',\n      '@return true if the object is devoid of contents',\n      '@return true if the instance has no elements',\n    ]\n  },\n  {\n    'tag': '@return the size of the instance (this is a length in 1D, an area\\nin 2D, a volume in 3D ...)',\n    'alternatives': [\n      '@return the size of the instance (this is a length in 1D, an area\\nin 2D, a volume in 3D ...)',\n      '@return the dimensionality of the instance (1D length, 2D area,\\n3D volume, ...)',\n      '@return the magnitude of the instance (1D length, 2D area,\\n3D volume, ...)',\n    ]\n  },\n  {\n    'tag': '@param hyperplane hyperplane to check instance against',\n    'alternatives': [\n      '@param hyperplane hyperplane to check instance against',\n      '@param hyperplane hyperplane for verifying the instance',\n      '@param hyperplane hyperplane used to validate the instance',\n    ]\n  },\n  {\n    'tag': '@return one of {@link Side#PLUS}, {@link Side#MINUS}, {@link Side#BOTH},\\n{@link Side#HYPER}',\n    'alternatives': [\n      '@return one of {@link Side#PLUS}, {@link Side#MINUS}, {@link Side#BOTH},\\n{@link Side#HYPER}',\n      '@return either {@link Side#PLUS}, {@link Side#MINUS}, {@link Side#BOTH}, or\\n{@link Side#HYPER}',\n      '@return possible values: {@link Side#PLUS}, {@link Side#MINUS}, {@link Side#BOTH},\\nor {@link Side#HYPER}',\n    ]\n  },\n  {\n    'tag': '@param hyperplane splitting hyperplane',\n    'alternatives': [\n      '@param hyperplane splitting hyperplane',\n      '@param hyperplane hyperplane for splitting',\n      '@param hyperplane hyperplane used to perform splitting',\n    ]\n  },\n  {\n    'tag': '@return an object containing both the part of the instance\\non the plus side of the hyperplane and the part of the\\ninstance on the minus side of the hyperplane',\n    'alternatives': [\n      '@return an object containing both the part of the instance\\non the plus side of the hyperplane and the part of the\\ninstance on the minus side of the hyperplane',\n      '@return an object that includes the section of the instance\\nlocated on the positive side of the hyperplane and the section\\nof the instance located on the negative side of the hyperplane',\n      '@return an object that combines the portion of the instance\\non the plus side of the hyperplane with the portion of the\\ninstance on the minus side of the hyperplane',\n    ]\n  },\n  {\n    'tag': '@param other other sub-hyperplane to union (\\u003cem>\\u003c/em> must\\u003c/em> be in the\\nsame hyperplane as the instance)',\n    'alternatives': [\n      '@param other other sub-hyperplane to union (\\u003cem>\\u003c/em> must\\u003c/em> be in the\\nsame hyperplane as the instance)',\n      '@param other other sub-hyperplane to merge (\\u003cem>\\u003c/em> must\\u003c/em> be within the\\nsame hyperplane as the instance)',\n      '@param other other sub-hyperplane to combine (\\u003cem>\\u003c/em> must\\u003c/em> be in the\\nsame hyperplane as the instance)',\n    ]\n  },\n  {\n    'tag': '@return a new sub-hyperplane, union of the instance and other',\n    'alternatives': [\n      '@return a new sub-hyperplane, union of the instance and other',\n      '@return a new sub-hyperplane that results from combining the instance and other',\n      '@return a new sub-hyperplane formed by merging the instance and other',\n    ]\n  },\n  {\n    'tag': '@return dimension of the space',\n    'alternatives': [\n      '@return dimension of the space',\n      '@return space dimension',\n      '@return number of dimensions in the space',\n    ]\n  },\n  {\n    'tag': '@return n-1 dimension sub-space of this space',\n    'alternatives': [\n      '@return n-1 dimension sub-space of this space',\n      '@return subspace with dimension n-1 of this space',\n      '@return sub-space having n-1 dimensions of this space',\n    ]\n  },\n  {\n    'tag': '@throws MathUnsupportedOperationException for dimension-1 spaces\\nwhich do not have sub-spaces',\n    'alternatives': [\n      '@throws MathUnsupportedOperationException for dimension-1 spaces\\nwhich do not have sub-spaces',\n      '@throws MathUnsupportedOperationException for dimension-1 spaces\\nthat lack sub-spaces',\n      '@throws MathUnsupportedOperationException for dimension-1 spaces\\nthat do not possess sub-spaces',\n    ]\n  },\n  {\n    'tag': '@return additive identity of the field',\n    'alternatives': [\n      '@return additive identity of the field',\n      '@return zero element of the field',\n      '@return element representing zero in the field',\n    ]\n  }\n]"