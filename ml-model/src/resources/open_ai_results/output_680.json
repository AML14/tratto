"output=[\n  {\n    'tag': '@return an empty map if the argument is <code>null</code>',\n    'alternatives': [\n      '@return an empty map if the argument is <code>null</code>.',\n      '@return if the argument is <code>null</code>, an empty map is returned.',\n      '@return it returns an empty map if the argument is <code>null</code>.',\n      '@return when the argument is <code>null</code>, it returns an empty map.',\n      '@return if the argument is <code>null</code>, an empty map is returned back.'\n    ]\n  },\n  {\n    'tag': '@param map the map to check, may be null',\n    'alternatives': [\n      '@param map the map to check, which could be null.',\n      '@param map it is the map to check, which might be null.',\n      '@param map the map to be checked, which can be null.',\n      '@param map the map to check, it may be null.',\n      '@param map the map which needs to be checked, may be null.'\n    ]\n  },\n  {\n    'tag': '@return true if empty or null',\n    'alternatives': [\n      '@return true if empty or null.',\n      '@return true if it is empty or null.',\n      '@return it returns true if empty or null.',\n      '@return if it is empty or null, then true is returned.',\n      '@return true is returned if it is empty or null.'\n    ]\n  },\n  {\n    'tag': '@param map the map to check, may be null',\n    'alternatives': [\n      '@param map the map to check, which could be null.',\n      '@param map it is the map to check, which might be null.',\n      '@param map the map to be checked, which can be null.',\n      '@param map the map to check, it may be null.',\n      '@param map the map which needs to be checked, may be null.'\n    ]\n  },\n  {\n    'tag': '@return true if non-null and non-empty',\n    'alternatives': [\n      '@return true if not null and not empty.',\n      '@return if not null and not empty, true is returned.',\n      '@return it returns true if non-null and non-empty.',\n      '@return when it is non-null and non-empty, true is returned.',\n      '@return if it is non-null and non-empty, then true is returned.'\n    ]\n  },\n  {\n    'tag': '@param <K> the key type',\n    'alternatives': [\n      '@param <K> the type of keys.',\n      '@param <K> it represents the key type.',\n      '@param <K> it is the type of keys.',\n      '@param <K> the type of the keys.',\n      '@param <K> the keys are of this type.'\n    ]\n  },\n  {\n    'tag': '@param <V> the value type',\n    'alternatives': [\n      '@param <V> the type of values.',\n      '@param <V> it represents the value type.',\n      '@param <V> it is the type of values.',\n      '@param <V> the type of the values.',\n      '@param <V> the values are of this type.'\n    ]\n  },\n  {\n    'tag': '@return a synchronized map backed by the given map',\n    'alternatives': [\n      '@return a map backed by the given map, but with synchronization.',\n      '@return a map backed by the given map, that is synchronized.',\n      '@return a map backed by the given map and synchronized.',\n      '@return a synchronized map that uses the given map as its basis.',\n      '@return a map that is synchronized and backed by the given map.'\n    ]\n  },\n  {\n    'tag': '@param <K> the key type',\n    'alternatives': [\n      '@param <K> the type of keys.',\n      '@param <K> it represents the key type.',\n      '@param <K> it is the type of keys.',\n      '@param <K> the type of the keys.',\n      '@param <K> the keys are of this type.'\n    ]\n  },\n  {\n    'tag': '@param <V> the value type',\n    'alternatives': [\n      '@param <V> the type of values.',\n      '@param <V> it represents the value type.',\n      '@param <V> it is the type of values.',\n      '@param <V> the type of the values.',\n      '@param <V> the values are of this type.'\n    ]\n  },\n  {\n    'tag': '@return an unmodifiable map backed by the given map',\n    'alternatives': [\n      '@return a map that is backed by the given map, but unmodifiable.',\n      '@return a map backed by the given map, which cannot be modified.',\n      '@return a map that is backed by the given map and cannot be modified.',\n      '@return a map backed by the given map, but it is unmodifiable.',\n      '@return a map that cannot be modified and is backed by the given map.'\n    ]\n  },\n  {\n    'tag': '@param <K> the key type',\n    'alternatives': [\n      '@param <K> the type of keys.',\n      '@param <K> it represents the key type.',\n      '@param <K> it is the type of keys.',\n      '@param <K> the type of the keys.',\n      '@param <K> the keys are of this type.'\n    ]\n  },\n  {\n    'tag': '@param <V> the value type',\n    'alternatives': [\n      '@param <V> the type of values.',\n      '@param <V> it represents the value type.',\n      '@param <V> it is the type of values.',\n      '@param <V> the type of the values.',\n      '@param <V> the values are of this type.'\n    ]\n  },\n  {\n    'tag': '@return a predicated map backed by the given map',\n    'alternatives': [\n      '@return a map backed by the given map, with a predicate.',\n      '@return a map backed by the given map, that is subject to a predicate.',\n      '@return a map backed by the given map and checked by a predicate.',\n      '@return a map that is backed by the given map and validated by a predicate.',\n      '@return a map that is subject to a predicate and backed by the given map.'\n    ]\n  },\n  {\n    'tag': '@param <K> the key type',\n    'alternatives': [\n      '@param <K> the type of keys.',\n      '@param <K> it represents the key type.',\n      '@param <K> it is the type of keys.',\n      '@param <K> the type of the keys.',\n      '@param <K> the keys are of this type.'\n    ]\n  },\n  {\n    'tag': '@param url The URL to fetch.',\n    'alternatives': [\n      '@param url The URL to retrieve.',\n      '@param url The URL to obtain.',\n      '@param url The URL to fetch from.',\n      '@param url The URL to get.',\n      '@param url The URL to access.'\n    ]\n  },\n  {\n    'tag': '@throws IOException If an I/O error occurs while fetching the URL.',\n    'alternatives': [\n      '@throws IOException In case of an I/O error during URL fetching.',\n      '@throws IOException If there is an I/O error while retrieving the URL.',\n      '@throws IOException If an I/O error happens when fetching the URL.',\n      '@throws IOException If there is any I/O error during URL fetch.',\n      '@throws IOException In the event of an I/O error while fetching the URL.'\n    ]\n  },\n  {\n    'tag': '@param url The URL to fetch.',\n    'alternatives': [\n      '@param url The URL to retrieve.',\n      '@param url The URL to obtain.',\n      '@param url The URL to fetch from.',\n      '@param url The URL to get.',\n      '@param url The URL to access.'\n    ]\n  },\n  {\n    'tag': '@throws IOException If an I/O error occurs while reading.',\n    'alternatives': [\n      '@throws IOException In case of an I/O error during reading.',\n      '@throws IOException If there is an I/O error while reading.',\n      '@throws IOException If an I/O error happens when reading.',\n      '@throws IOException If there is any I/O error during read.',\n      '@throws IOException In the event of an I/O error while reading.'\n    ]\n  },\n  {\n    'tag': '@return true if there are still events to read, false as soon as the file\\n        is finished.',\n    'alternatives': [\n      '@return true while there are still events to read, false once the file\\n        is finished.',\n      '@return true if there are still events to be read, false when the file\\n        is completed.',\n      '@return true until all the events have been read, false when the file\\n        is done.',\n      '@return true if there are any remaining events to read, false when the\\n        file is completed.',\n      '@return true if there are still events left to be read, false as soon\\n        as the file is finished.'\n    ]\n  },\n  {\n    'tag': '@throws IOException If an I/O error occurs while reading.',\n    'alternatives': [\n      '@throws IOException In case of an I/O error during reading.',\n      '@throws IOException If there is an I/O error while reading.',\n      '@throws IOException If an I/O error happens when reading.',\n      '@throws IOException If there is any I/O error during read.',\n      '@throws IOException In the event of an I/O error while reading.'\n    ]\n  },\n  {\n    'tag': '@throws IOException If an I/O error occurs while closing the file.',\n    'alternatives': [\n      '@throws IOException In case of an I/O error during file closing.',\n      '@throws IOException If there is an I/O error while closing the file.',\n      '@throws IOException If an I/O error happens when closing the file.',\n      '@throws IOException If there is any I/O error during file close.',\n      '@throws IOException In the event of an I/O error while closing the file.'\n    ]\n  },\n  {\n    'tag': '@param graphId id of the graph',\n    'alternatives': [\n      '@param graphId the id of the graph.',\n      '@param graphId it represents the graph identifier.',\n      '@param graphId the id of the graph to be passed.',\n      '@param graphId the graph identifier.',\n      '@param graphId the graph ID.'\n    ]\n  },\n  {\n    'tag': '@param port port on which server will be bound',\n    'alternatives': [\n      '@param port the port on which the server will be bound.',\n      '@param port the server will bind to this port.',\n      '@param port it represents the port on which the server will be bound.',\n      '@param port the port that the server will be bound to.',\n      '@param port the port at which the server will be bound.'\n    ]\n  },\n  {\n    'tag': '@throws IOException if server creation failed.',\n    'alternatives': [\n      '@throws IOException if the creation of the server failed.',\n      '@throws IOException in case of failure to create the server.',\n      '@throws IOException when the server creation fails.',\n      '@throws IOException if there is a failure in creating the server.',\n      '@throws IOException if the server creation encounters an error.'\n    ]\n  }\n]"