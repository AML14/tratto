"[\n  {\n    \"tag\": \"@param sortedMultiset the sorted multiset for which an unmodifiable view is\\n    to be generated\",\n    \"alternatives\": [\n      \"@param sortedMultiset the sorted multiset from which we want to create an unmodifiable view\",\n      \"@param sortedMultiset the sorted multiset used to generate an unmodifiable view\",\n      \"@param sortedMultiset the sorted multiset that will be used to generate an unmodifiable view\",\n      \"@param sortedMultiset the sorted multiset that the unmodifiable view is based on\",\n      \"@param sortedMultiset the sorted multiset from which the unmodifiable view is generated\"\n    ]\n  },\n  {\n    \"tag\": \"@return an unmodifiable view of the multiset\",\n    \"alternatives\": [\n      \"@return a view of the multiset that cannot be modified\",\n      \"@return an unmodifiable version of the multiset\",\n      \"@return a read-only view of the multiset\",\n      \"@return a multiset that cannot be modified\",\n      \"@return a view of the multiset that is not modifiable\"\n    ]\n  },\n  {\n    \"tag\": \"@param e the element to be associated with the returned entry\",\n    \"alternatives\": [\n      \"@param e the element that will be linked with the returned entry\",\n      \"@param e the element that will be associated with the entry\",\n      \"@param e the element that will be connected to the returned entry\",\n      \"@param e the element that will be related to the returned entry\",\n      \"@param e the element that will be assigned to the returned entry\"\n    ]\n  },\n  {\n    \"tag\": \"@param n the count to be associated with the returned entry\",\n    \"alternatives\": [\n      \"@param n the number that will be linked with the returned entry\",\n      \"@param n the count that will be associated with the entry\",\n      \"@param n the quantity that will be connected to the returned entry\",\n      \"@param n the value that will be related to the returned entry\",\n      \"@param n the count that will be assigned to the returned entry\"\n    ]\n  },\n  {\n    \"tag\": \"@return {@code true} if {@code multisetToModify} was changed as a result\\n        of this operation\",\n    \"alternatives\": [\n      \"@return {@code true} in case {@code multisetToModify} has been modified due to this operation\",\n      \"@return {@code true} if this operation caused a change in {@code multisetToModify}\",\n      \"@return {@code true} if {@code multisetToModify} was altered as a result of this operation\",\n      \"@return {@code true} if the operation caused a modification in {@code multisetToModify}\",\n      \"@return {@code true} if this operation resulted in a change to {@code multisetToModify}\"\n    ]\n  },\n  {\n    \"tag\": \"@param rowKey the row key to be associated with the returned cell\",\n    \"alternatives\": [\n      \"@param rowKey the row key that will be linked with the returned cell\",\n      \"@param rowKey the row key that will be associated with the cell\",\n      \"@param rowKey the row key that will be connected to the returned cell\",\n      \"@param rowKey the row key that will be related to the returned cell\",\n      \"@param rowKey the row key that will be assigned to the returned cell\"\n    ]\n  },\n  {\n    \"tag\": \"@param columnKey the column key to be associated with the returned cell\",\n    \"alternatives\": [\n      \"@param columnKey the column key that will be linked with the returned cell\",\n      \"@param columnKey the column key that will be associated with the cell\",\n      \"@param columnKey the column key that will be connected to the returned cell\",\n      \"@param columnKey the column key that will be related to the returned cell\",\n      \"@param columnKey the column key that will be assigned to the returned cell\"\n    ]\n  },\n  {\n    \"tag\": \"@param value the value to be associated with the returned cell\",\n    \"alternatives\": [\n      \"@param value the value that will be linked with the returned cell\",\n      \"@param value the value that will be associated with the cell\",\n      \"@param value the value that will be connected to the returned cell\",\n      \"@param value the value that will be related to the returned cell\",\n      \"@param value the value that will be assigned to the returned cell\"\n    ]\n  },\n  {\n    \"tag\": \"@param backingMap place to store the mapping from each row key to its\\n    corresponding column key / value map\",\n    \"alternatives\": [\n      \"@param backingMap the destination to store the mapping from each row key to its associated column key / value map\",\n      \"@param backingMap the target for storing the mapping from each row key to its respective column key / value map\",\n      \"@param backingMap the container to hold the mapping from each row key to its corresponding column key / value map\",\n      \"@param backingMap where the mapping from each row key to its respective column key / value map will be stored\",\n      \"@param backingMap the location to store the mapping from each row key to its corresponding column key / value map\"\n    ]\n  },\n  {\n    \"tag\": \"@param factory supplier of new, empty maps that will each hold all column\\n    key / value mappings for a given row key\",\n    \"alternatives\": [\n      \"@param factory a provider of fresh, empty maps that will collectively hold all column key / value mappings for a specific row key\",\n      \"@param factory a supplier that generates new, empty maps capable of containing all column key / value mappings for a given row key\",\n      \"@param factory a source of new, empty maps that will individually contain all column key / value mappings for a particular row key\",\n      \"@param factory the creator of new, empty maps, each capable of holding all column key / value mappings for a given row key\",\n      \"@param factory a generator of new, empty maps, which will collectively hold all column key / value mappings for a specific row key\"\n    ]\n  },\n  {\n    \"tag\": \"@param table the table for which an unmodifiable view is to be returned\",\n    \"alternatives\": [\n      \"@param table the table that will be used to generate an unmodifiable view\",\n      \"@param table the table for which a view that cannot be modified is returned\",\n      \"@param table the table that the unmodifiable view is based on\",\n      \"@param table the table from which the unmodifiable view is generated\",\n      \"@param table the table that will be linked to the unmodifiable view\"\n    ]\n  },\n  {\n    \"tag\": \"@return an unmodifiable view of the specified table\",\n    \"alternatives\": [\n      \"@return a view of the specified table that cannot be modified\",\n      \"@return an unmodifiable version of the specified table\",\n      \"@return a read-only view of the specified table\",\n      \"@return a table that cannot be modified\",\n      \"@return a view of the specified table that is not modifiable\"\n    ]\n  },\n  {\n    \"tag\": \"@param table the row-sorted table for which an unmodifiable view is to be returned\",\n    \"alternatives\": [\n      \"@param table the row-sorted table that will be used to generate an unmodifiable view\",\n      \"@param table the row-sorted table for which a view that cannot be modified is returned\",\n      \"@param table the row-sorted table that the unmodifiable view is based on\",\n      \"@param table the row-sorted table from which the unmodifiable view is generated\",\n      \"@param table the row-sorted table that will be linked to the unmodifiable view\"\n    ]\n  },\n  {\n    \"tag\": \"@return an unmodifiable view of the specified table\",\n    \"alternatives\": [\n      \"@return a view of the specified table that cannot be modified\",\n      \"@return an unmodifiable version of the specified table\",\n      \"@return a read-only view of the specified table\",\n      \"@return a table that cannot be modified\",\n      \"@return a view of the specified table that is not modifiable\"\n    ]\n  },\n  {\n    \"tag\": \"@param reference any array of the desired type\",\n    \"alternatives\": [\n      \"@param reference an array of the desired type\",\n      \"@param reference an array containing elements of the desired type\",\n      \"@param reference an array of the specified type\",\n      \"@param reference an array consisting of elements of the desired type\",\n      \"@param reference an array that holds elements of the desired type\"\n    ]\n  },\n  {\n    \"tag\": \"@param length the length of the new array\",\n    \"alternatives\": [\n      \"@param length the size of the new array\",\n      \"@param length the number of elements in the new array\",\n      \"@param length the count of items in the new array\",\n      \"@param length the amount of elements in the new array\",\n      \"@param length the dimension of the new array\"\n    ]\n  },\n  {\n    \"tag\": \"@param keyType the key type\",\n    \"alternatives\": [\n      \"@param keyType the type of the key\",\n      \"@param keyType the type that represents the key\",\n      \"@param keyType the kind of key used\",\n      \"@param keyType the data type of the key\",\n      \"@param keyType the category of key\"\n    ]\n  },\n  {\n    \"tag\": \"@param map the map whose mappings are to be placed in this map\",\n    \"alternatives\": [\n      \"@param map the source map from which mappings will be added to this map\",\n      \"@param map the map whose mappings will be inserted into this map\",\n      \"@param map the map that provides the mappings to be included in this map\",\n      \"@param map the map from which mappings will be copied to this map\",\n      \"@param map the map that contains the mappings to be placed in this map\"\n    ]\n  },\n  {\n    \"tag\": \"@throws IllegalArgumentException if map is not an {@code EnumBiMap} or an\\n    {@code EnumHashBiMap} instance and contains no mappings\",\n    \"alternatives\": [\n      \"@throws IllegalArgumentException if map is not an instance of {@code EnumBiMap} or {@code EnumHashBiMap} and has no mappings\",\n      \"@throws IllegalArgumentException in case map is not of type {@code EnumBiMap} or {@code EnumHashBiMap} and has no mappings\",\n      \"@throws IllegalArgumentException if map is not an {@code EnumBiMap} or {@code EnumHashBiMap} implementation and contains no mappings\",\n      \"@throws IllegalArgumentException if map does not implement the {@code EnumBiMap} or {@code EnumHashBiMap} interface and does not have any mappings\",\n      \"@throws IllegalArgumentException if map is not an instance of {@code EnumBiMap} or {@code EnumHashBiMap} and doesn't contain any mappings\"\n    ]\n  },\n  {\n    \"tag\": \"@return a string representation of the multimap\",\n    \"alternatives\": [\n      \"@return a textual representation of the multimap\",\n      \"@return a string that represents the multimap\",\n      \"@return a string describing the multimap\",\n      \"@return a textual view of the multimap\",\n      \"@return a string that shows the multimap\"\n    ]\n  },\n  {\n    \"tag\": \"@param map place to store the mapping from each key to its corresponding\\n    values\",\n    \"alternatives\": [\n      \"@param map the location to store the mapping from each key to its associated values\",\n      \"@param map the destination for storing the mapping from each key to its respective values\",\n      \"@param map the container to hold the mapping from each key to its corresponding values\",\n      \"@param map where the mapping from each key to its respective values will be stored\",\n      \"@param map the place to keep the mapping from each key to its associated values\"\n    ]\n  },\n  {\n    \"tag\": \"@param factory supplier of new, empty collections that will each hold all\\n    values for a given key\",\n    \"alternatives\": [\n      \"@param factory a provider of fresh, empty collections that will collectively hold all values for a specific key\",\n      \"@param factory a supplier that generates new, empty collections capable of containing all values for a given key\",\n      \"@param factory a source of new, empty collections that will individually contain all values for a particular key\",\n      \"@param factory the creator of new, empty collections, each capable of holding all values for a given key\",\n      \"@param factory a generator of new, empty collections, which will collectively hold all values for a specific key\"\n    ]\n  },\n  {\n    \"tag\": \"@param map place to store the mapping from each key to its corresponding\\n    values\",\n    \"alternatives\": [\n      \"@param map the location to store the mapping from each key to its associated values\",\n      \"@param map the destination for storing the mapping from each key to its respective values\",\n      \"@param map the container to hold the mapping from each key to its corresponding values\",\n      \"@param map where the mapping from each key to its respective values will be stored\",\n      \"@param map the place to keep the mapping from each key to its associated values\"\n    ]\n  }\n]"