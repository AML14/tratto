"output = [\n  {\n    'tag': '@throws MathUnsupportedOperationException if bounds were passed to the\\n{@link #optimize(OptimizationData[]) optimize} method.',\n    'alternatives': [\n      '@throws MathUnsupportedOperationException if limits were provided to\\nthe {@link #optimize(OptimizationData[]) optimize} method.',\n      '@throws MathUnsupportedOperationException if boundaries were passed to the\\n{@link #optimize(OptimizationData[]) optimize} method.',\n      '@throws MathUnsupportedOperationException when bounds were provided to the\\n{@link #optimize(OptimizationData[]) optimize} method.',\n    ]\n  },\n  {\n    'tag': '@param checker Convergence checker.',\n    'alternatives': [\n      '@param checker Algorithm to check for convergence.',\n      '@param checker Object to check for convergence.',\n      '@param checker Convergence checker object.',\n    ]\n  },\n  {\n    'tag': '@param useLU If {@code true}, the normal equations will be solved\\nusing LU decomposition, otherwise they will be solved using QR\\ndecomposition.',\n    'alternatives': [\n      '@param useLU If {@code true}, solve the normal equations\\nusing LU decomposition. Otherwise, solve using QR decomposition.',\n      '@param useLU Determines whether to solve the normal equations using LU\\ndecomposition or QR decomposition.',\n      '@param useLU When set to {@code true}, solve the normal equations\\nusing LU decomposition. Otherwise, solve using QR decomposition.',\n    ]\n  },\n  {\n    'tag': '@param checker Convergence checker.',\n    'alternatives': [\n      '@param checker Algorithm to check for convergence.',\n      '@param checker Object to check for convergence.',\n      '@param checker Convergence checker object.',\n    ]\n  },\n  {\n    'tag': '@return the model function Jacobian.',\n    'alternatives': [\n      '@return the Jacobian of the model function.',\n      '@return Jacobian of the model function.',\n      '@return the derivative of the model function.',\n    ]\n  },\n  {\n    'tag': '@param j Jacobian of the model function to be optimized.',\n    'alternatives': [\n      '@param j Derivative of the model function to be optimized.',\n      '@param j Gradient of the model function to be optimized.',\n      '@param j Jacobian matrix of the model function to be optimized.',\n    ]\n  },\n  {\n    'tag': '@param params Point at which the Jacobian must be evaluated.',\n    'alternatives': [\n      '@param params Point to evaluate the Jacobian at.',\n      '@param params The point for Jacobian evaluation.',\n      '@param params The location to compute the Jacobian.',\n    ]\n  },\n  {\n    'tag': '@return the Jacobian at the specified point.',\n    'alternatives': [\n      '@return Jacobian at the given point.',\n      '@return the derivative matrix at the specified point.',\n      '@return the gradient matrix at the specified point.',\n    ]\n  },\n  {\n    'tag': '@param optData Optimization data. In addition to those documented in\\n{@link MultivariateVectorOptimizer#optimize(OptimizationData...)}\\nMultivariateOptimizer}, this method will register the following data:\\n<ul>\\n <li>{@link ModelFunctionJacobian}</li>\\n</ul>',\n    'alternatives': [\n      '@param optData Optimization data. In addition to the documented\\n{@link MultivariateVectorOptimizer#optimize(OptimizationData...)}\\nMultivariateOptimizer}, this method will also register the following data:\\n<ul>\\n <li>{@link ModelFunctionJacobian}</li>\\n</ul>',\n      '@param optData Optimization data. This method will register the following data\\nin addition to those documented in\\n{@link MultivariateVectorOptimizer#optimize(OptimizationData...)}\\nMultivariateOptimizer}:\\n<ul>\\n <li>{@link ModelFunctionJacobian}</li>\\n</ul>',\n      '@param optData Optimization data. This method will additionally register the\\nfollowing data:\\n<ul>\\n <li>{@link ModelFunctionJacobian}</li>\\n</ul>,\\nin addition to those documented in\\n{@link MultivariateVectorOptimizer#optimize(OptimizationData...)}\\nMultivariateOptimizer}.',\n    ]\n  },\n  {\n    'tag': '@return {@inheritDoc}',\n    'alternatives': [\n      '@return the same as the overridden method.',\n      '@return the result from the overridden method.',\n      '@return the value provided by the overridden method.',\n    ]\n  },\n  {\n    'tag': '@throws TooManyEvaluationsException if the maximal number of\\nevaluations is exceeded.',\n    'alternatives': [\n      '@throws TooManyEvaluationsException if the maximum number of\\nevaluations has been reached.',\n      '@throws TooManyEvaluationsException when the number of evaluations exceeds the maximum.',\n      '@throws TooManyEvaluationsException if the evaluation limit is surpassed.',\n    ]\n  },\n  {\n    'tag': '@throws DimensionMismatchException if the initial guess, target, and weight\\narguments have inconsistent dimensions.',\n    'alternatives': [\n      '@throws DimensionMismatchException if the dimensions of the initial guess,\\ntarget, and weight arguments are inconsistent.',\n      '@throws DimensionMismatchException when the dimensions of the initial guess,\\ntarget, and weight arguments do not match.',\n      '@throws DimensionMismatchException if the sizes of the initial guess, target,\\nand weight arguments are inconsistent.',\n    ]\n  },\n  {\n    'tag': '@param optData Optimization data.\\nThe following data will be looked for:\\n<ul>\\n <li>{@link ModelFunctionJacobian}</li>\\n</ul>',\n    'alternatives': [\n      '@param optData Optimization data. The following data will be\\nsearched for:\\n<ul>\\n <li>{@link ModelFunctionJacobian}</li>\\n</ul>',\n      '@param optData Optimization data.\\nThis method will search for the following information:\\n<ul>\\n <li>{@link ModelFunctionJacobian}</li>\\n</ul>',\n      '@param optData Optimization data. Look for the following information:\\n<ul>\\n <li>{@link ModelFunctionJacobian}</li>\\n</ul>',\n    ]\n  },\n  {\n    'tag': '@param checker Convergence checker.',\n    'alternatives': [\n      '@param checker Algorithm to check for convergence.',\n      '@param checker Object to check for convergence.',\n      '@param checker Convergence checker object.',\n    ]\n  },\n  {\n    'tag': '@param params Point at which the objective function must be evaluated.',\n    'alternatives': [\n      '@param params Point to evaluate the objective function at.',\n      '@param params The point for objective function evaluation.',\n      '@param params The location to compute the objective function.',\n    ]\n  },\n  {\n    'tag': '@return the objective function value at the specified point.',\n    'alternatives': [\n      '@return the value of the objective function at the given point.',\n      '@return the result of the evaluation of the objective function at the specified point.',\n      '@return the output of the objective function at the specified point.',\n    ]\n  },\n  {\n    'tag': '@throws TooManyEvaluationsException if the maximal number of evaluations\\n(of the model vector function) is exceeded.',\n    'alternatives': [\n      '@throws TooManyEvaluationsException if the maximum number of evaluations\\n(of the model vector function) has been reached.',\n      '@throws TooManyEvaluationsException when the number of evaluations\\n(of the model vector function) exceeds the maximum.',\n      '@throws TooManyEvaluationsException if the evaluation limit\\n(of the model vector function) is surpassed.',\n    ]\n  },\n  {\n    'tag': '@param optData Optimization data. In addition to those documented in\\n{@link BaseMultivariateOptimizer#parseOptimizationData(OptimizationData[])\\nBaseMultivariateOptimizer}, this method will register the following data:\\n<ul>\\n <li>{@link Target}</li>\\n <li>{@link Weight}</li>\\n <li>{@link ModelFunction}</li>\\n</ul>',\n    'alternatives': [\n      '@param optData Optimization data. In addition to the documented\\n{@link BaseMultivariateOptimizer#parseOptimizationData(OptimizationData[])\\nBaseMultivariateOptimizer}, this method will also register the following data:\\n<ul>\\n <li>{@link Target}</li>\\n <li>{@link Weight}</li>\\n <li>{@link ModelFunction}</li>\\n</ul>',\n      '@param optData Optimization data. This method will register the following data\\nin addition to those documented in\\n{@link BaseMultivariateOptimizer#parseOptimizationData(OptimizationData[])\\nBaseMultivariateOptimizer}:\\n<ul>\\n <li>{@link Target}</li>\\n <li>{@link Weight}</li>\\n <li>{@link ModelFunction}</li>\\n</ul>',\n      '@param optData Optimization data. This method will additionally register the\\nfollowing data:\\n<ul>\\n <li>{@link Target}</li>\\n <li>{@link Weight}</li>\\n <li>{@link ModelFunction}</li>\\n</ul>,\\nin addition to those documented in\\n{@link BaseMultivariateOptimizer#parseOptimizationData(OptimizationData[])\\nBaseMultivariateOptimizer}.',\n    ]\n  },\n  {\n    'tag': '@return {@inheritDoc}',\n    'alternatives': [\n      '@return the same as the overridden method.',\n      '@return the result from the overridden method.',\n      '@return the value provided by the overridden method.',\n    ]\n  },\n  {\n    'tag': '@throws TooManyEvaluationsException if the maximal number of\\nevaluations is exceeded.',\n    'alternatives': [\n      '@throws TooManyEvaluationsException if the maximum number of\\nevaluations has been reached.',\n      '@throws TooManyEvaluationsException when the number of evaluations exceeds the maximum.',\n      '@throws TooManyEvaluationsException if the evaluation limit is surpassed.',\n    ]\n  },\n  {\n    'tag': '@throws DimensionMismatchException if the initial guess, target, and weight\\narguments have inconsistent dimensions.',\n    'alternatives': [\n      '@throws DimensionMismatchException if the dimensions of the initial guess,\\ntarget, and weight arguments are inconsistent.',\n      '@throws DimensionMismatchException when the dimensions of the initial guess,\\ntarget, and weight arguments do not match.',\n      '@throws DimensionMismatchException if the sizes of the initial guess, target,\\nand weight arguments are inconsistent.',\n    ]\n  },\n  {\n    'tag': '@return the weight matrix.',\n    'alternatives': [\n      '@return the matrix of weights.',\n      '@return the matrix storing the weights.',\n      '@return the weight values.',\n    ]\n  },\n  {\n    'tag': '@return the target values.',\n    'alternatives': [\n      '@return the values of the target.',\n      '@return the target array.',\n      '@return the array of target values.',\n    ]\n  },\n  {\n    'tag': '@return the length of the target vector.',\n    'alternatives': [\n      '@return the size of the target vector.',\n      '@return the number of elements in the target vector.',\n      '@return the length of the target array.',\n    ]\n  },\n  {\n    'tag': '@param optData Optimization data. The following data will be looked for:\\n<ul>\\n <li>{@link Target}</li>\\n <li>{@link Weight}</li>\\n <li>{@link ModelFunction}</li>\\n</ul>',\n    'alternatives': [\n      '@param optData Optimization data. The following data will be\\nsearched for:\\n<ul>\\n <li>{@link Target}</li>\\n <li>{@link Weight}</li>\\n <li>{@link ModelFunction}</li>\\n</ul>',\n      '@param optData Optimization data.\\nThis method will search for the following information:\\n<ul>\\n <li>{@link Target}</li>\\n <li>{@link Weight}</li>\\n <li>{@link ModelFunction}</li>\\n</ul>',\n      '@param optData Optimization data. Look for the following information:\\n<ul>\\n <li>{@link Target}</li>\\n <li>{@link Weight}</li>\\n <li>{@link ModelFunction}</li>\\n</ul>',\n    ]\n  }\n]"