"output = [\n  {\n    'tag': '@param to the output stream',\n    'alternatives': [\n      '@param to the output stream',\n      '@param output stream',\n      '@param stream',\n      '@param destination stream',\n      '@param target stream'\n    ]\n  },\n  {\n    'tag': '@throws IOException if an I/O error occurs',\n    'alternatives': [\n      '@throws IOException if an I/O error occurs',\n      '@throws IOException in case of I/O error',\n      '@throws IOException when there is an I/O error',\n      '@throws IOException in case of any I/O error',\n      '@throws IOException if any error occurs during I/O'\n    ]\n  },\n  {\n    'tag': '@param from the source file',\n    'alternatives': [\n      '@param from the source file',\n      '@param source file',\n      '@param input file',\n      '@param origin file',\n      '@param file from'\n    ]\n  },\n  {\n    'tag': '@param to the destination file',\n    'alternatives': [\n      '@param to the destination file',\n      '@param destination file',\n      '@param output file',\n      '@param target file',\n      '@param file to'\n    ]\n  },\n  {\n    'tag': '@throws IOException if an I/O error occurs',\n    'alternatives': [\n      '@throws IOException if an I/O error occurs',\n      '@throws IOException in case of I/O error',\n      '@throws IOException when there is an I/O error',\n      '@throws IOException in case of any I/O error',\n      '@throws IOException if any error occurs during I/O'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if {@code from.equals(to)}',\n    'alternatives': [\n      '@throws IllegalArgumentException if {@code from.equals(to)}',\n      '@throws IllegalArgumentException when from equals to',\n      '@throws IllegalArgumentException if the from and to are equal',\n      '@throws IllegalArgumentException if the two parameters are equal',\n      '@throws IllegalArgumentException in case of equal from and to'\n    ]\n  },\n  {\n    'tag': '@param from the character sequence to write',\n    'alternatives': [\n      '@param from the character sequence to write',\n      '@param character sequence to write',\n      '@param input sequence for writing',\n      '@param source sequence for writing',\n      '@param sequence to be written'\n    ]\n  },\n  {\n    'tag': '@param to the destination file',\n    'alternatives': [\n      '@param to the destination file',\n      '@param destination file',\n      '@param output file',\n      '@param target file',\n      '@param file to'\n    ]\n  },\n  {\n    'tag': '@param charset the charset used to encode the output stream; see {@link\\n    Charsets} for helpful predefined constants',\n    'alternatives': [\n      '@param charset the charset used to encode the output stream; see {@link\\n    Charsets} for helpful predefined constants',\n      '@param charset used for encoding the output stream; see {@link\\n    Charsets} for useful predefined constants',\n      '@param charset for encoding the output stream; see {@link\\n    Charsets} for convenient predefined constants',\n      '@param charset utilized to encode the output stream; see {@link\\n    Charsets} for handy predefined constants',\n      '@param charset employed for encoding the output stream; see {@link\\n    Charsets} for practical predefined constants'\n    ]\n  },\n  {\n    'tag': '@throws IOException if an I/O error occurs',\n    'alternatives': [\n      '@throws IOException if an I/O error occurs',\n      '@throws IOException in case of I/O error',\n      '@throws IOException when there is an I/O error',\n      '@throws IOException in case of any I/O error',\n      '@throws IOException if any error occurs during I/O'\n    ]\n  },\n  {\n    'tag': '@param from the character sequence to append',\n    'alternatives': [\n      '@param from the character sequence to append',\n      '@param character sequence to append',\n      '@param input sequence for appending',\n      '@param source sequence for appending',\n      '@param sequence to be appended'\n    ]\n  },\n  {\n    'tag': '@param to the destination file',\n    'alternatives': [\n      '@param to the destination file',\n      '@param destination file',\n      '@param output file',\n      '@param target file',\n      '@param file to'\n    ]\n  },\n  {\n    'tag': '@param charset the charset used to encode the output stream; see {@link\\n    Charsets} for helpful predefined constants',\n    'alternatives': [\n      '@param charset the charset used to encode the output stream; see {@link\\n    Charsets} for helpful predefined constants',\n      '@param charset used for encoding the output stream; see {@link\\n    Charsets} for useful predefined constants',\n      '@param charset for encoding the output stream; see {@link\\n    Charsets} for convenient predefined constants',\n      '@param charset utilized to encode the output stream; see {@link\\n    Charsets} for handy predefined constants',\n      '@param charset employed for encoding the output stream; see {@link\\n    Charsets} for practical predefined constants'\n    ]\n  },\n  {\n    'tag': '@throws IOException if an I/O error occurs',\n    'alternatives': [\n      '@throws IOException if an I/O error occurs',\n      '@throws IOException in case of I/O error',\n      '@throws IOException when there is an I/O error',\n      '@throws IOException in case of any I/O error',\n      '@throws IOException if any error occurs during I/O'\n    ]\n  },\n  {\n    'tag': '@param from the character sequence to append',\n    'alternatives': [\n      '@param from the character sequence to append',\n      '@param character sequence to append',\n      '@param input sequence for appending',\n      '@param source sequence for appending',\n      '@param sequence to be appended'\n    ]\n  },\n  {\n    'tag': '@param to the destination file',\n    'alternatives': [\n      '@param to the destination file',\n      '@param destination file',\n      '@param output file',\n      '@param target file',\n      '@param file to'\n    ]\n  },\n  {\n    'tag': '@param charset the charset used to encode the output stream; see {@link\\n    Charsets} for helpful predefined constants',\n    'alternatives': [\n      '@param charset the charset used to encode the output stream; see {@link\\n    Charsets} for helpful predefined constants',\n      '@param charset used for encoding the output stream; see {@link\\n    Charsets} for useful predefined constants',\n      '@param charset for encoding the output stream; see {@link\\n    Charsets} for convenient predefined constants',\n      '@param charset utilized to encode the output stream; see {@link\\n    Charsets} for handy predefined constants',\n      '@param charset employed for encoding the output stream; see {@link\\n    Charsets} for practical predefined constants'\n    ]\n  },\n  {\n    'tag': '@param append true to append, false to overwrite',\n    'alternatives': [\n      '@param append true to append, false to overwrite',\n      '@param true to append, false to overwrite',\n      '@param append flag indicating whether to append or overwrite',\n      '@param flag indicating if append or overwrite',\n      '@param append option (true to append, false to overwrite)'\n    ]\n  },\n  {\n    'tag': '@throws IOException if an I/O error occurs',\n    'alternatives': [\n      '@throws IOException if an I/O error occurs',\n      '@throws IOException in case of I/O error',\n      '@throws IOException when there is an I/O error',\n      '@throws IOException in case of any I/O error',\n      '@throws IOException if any error occurs during I/O'\n    ]\n  },\n  {\n    'tag': '@param from the source file',\n    'alternatives': [\n      '@param from the source file',\n      '@param source file',\n      '@param input file',\n      '@param origin file',\n      '@param file from'\n    ]\n  },\n  {\n    'tag': '@param charset the charset used to decode the input stream; see {@link\\n    Charsets} for helpful predefined constants',\n    'alternatives': [\n      '@param charset the charset used to decode the input stream; see {@link\\n    Charsets} for helpful predefined constants',\n      '@param charset used for decoding the input stream; see {@link\\n    Charsets} for useful predefined constants',\n      '@param charset for decoding the input stream; see {@link\\n    Charsets} for convenient predefined constants',\n      '@param charset utilized to decode the input stream; see {@link\\n    Charsets} for handy predefined constants',\n      '@param charset employed for decoding the input stream; see {@link\\n    Charsets} for practical predefined constants'\n    ]\n  },\n  {\n    'tag': '@param to the appendable object',\n    'alternatives': [\n      '@param to the appendable object',\n      '@param appendable object',\n      '@param target object',\n      '@param object to append to',\n      '@param append target'\n    ]\n  },\n  {\n    'tag': '@throws IOException if an I/O error occurs',\n    'alternatives': [\n      '@throws IOException if an I/O error occurs',\n      '@throws IOException in case of I/O error',\n      '@throws IOException when there is an I/O error',\n      '@throws IOException in case of any I/O error',\n      '@throws IOException if any error occurs during I/O'\n    ]\n  },\n  {\n    'tag': '@throws IOException if an I/O error occurs',\n    'alternatives': [\n      '@throws IOException if an I/O error occurs',\n      '@throws IOException in case of I/O error',\n      '@throws IOException when there is an I/O error',\n      '@throws IOException in case of any I/O error',\n      '@throws IOException if any error occurs during I/O'\n    ]\n  },\n  {\n    'tag': '@return the newly-created directory',\n    'alternatives': [\n      '@return the newly-created directory',\n      '@return the newly created directory',\n      '@return the recently created directory',\n      '@return directory just created',\n      '@return the directory that was created'\n    ]\n  }\n]"