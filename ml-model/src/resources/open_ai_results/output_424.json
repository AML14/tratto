"output = [\n  {\n    'tag': '@return {@code true} if the matrix is singular, {@code false} otherwise',\n    'alternatives': [\n      '@return {@code true} if the matrix is non-invertible, {@code false} otherwise',\n      '@return {@code true} if the matrix is not invertible, {@code false} otherwise',\n      '@return whether the matrix is singular or not',\n      '@return {@code true} if the matrix lacks a unique inverse, {@code false} otherwise',\n      '@return whether the matrix is non-invertible or not'\n    ]\n  },\n  {\n    'tag': '@param dimension Number of rows and columns in the new matrix.',\n    'alternatives': [\n      '@param dimension Number of columns and rows in the new matrix.',\n      '@param dimension The number of rows and columns in the new matrix.',\n      '@param dimension The dimensions of the new matrix (number of rows and columns).',\n      '@param dimension The size of the new matrix (number of rows and columns).',\n      '@param dimension The number of rows and columns for the new matrix.'\n    ]\n  },\n  {\n    'tag': '@param d Data for the new matrix.',\n    'alternatives': [\n      '@param d Data for the newly created matrix.',\n      '@param d The data used to populate the new matrix.',\n      '@param d Data to initialize the new matrix.',\n      '@param d Data values for the new matrix.',\n      '@param d Input data for the new matrix.'\n    ]\n  },\n  {\n    'tag': '@param d Data for new matrix.',\n    'alternatives': [\n      '@param d Data for a different matrix.',\n      '@param d Data for another matrix.',\n      '@param d Matrix data.',\n      '@param d Data for an alternative matrix.',\n      '@param d Data input for a separate matrix.'\n    ]\n  },\n  {\n    'tag': '@param copyArray if {@code true}, the input array will be copied,\\notherwise it will be referenced.',\n    'alternatives': [\n      '@param copyArray if {@code true}, a copy of the input array will be made,\\notherwise it will be referenced.',\n      '@param copyArray if {@code true}, create a copy of the input array,\\notherwise use the original array.',\n      '@param copyArray if {@code true}, duplicate the input array,\\notherwise reference the original array.',\n      '@param copyArray if {@code true}, make a copy of the input array,\\notherwise keep a reference to the original array.',\n      '@param copyArray if {@code true}, clone the input array,\\notherwise keep a reference to the original array.'\n    ]\n  },\n  {\n    'tag': '@return the P matrix',\n    'alternatives': [\n      '@return the matrix P',\n      '@return matrix P',\n      '@return the matrix corresponding to P',\n      '@return the P matrix values',\n      '@return the matrix representing P'\n    ]\n  },\n  {\n    'tag': '@return the transpose of the P matrix',\n    'alternatives': [\n      '@return the P matrix transposed',\n      '@return the transpose matrix of P',\n      '@return the P matrix flipped',\n      '@return the matrix obtained by transposing P',\n      '@return the P matrix converted to a transposed form'\n    ]\n  },\n  {\n    'tag': '@return the H matrix',\n    'alternatives': [\n      '@return matrix H',\n      '@return the H matrix values',\n      '@return the matrix corresponding to H',\n      '@return the matrix H',\n      '@return the matrix representing H'\n    ]\n  },\n  {\n    'tag': '@return the main diagonal elements of the B matrix',\n    'alternatives': [\n      '@return the diagonal elements of the matrix B',\n      '@return the main diagonal of matrix B',\n      '@return the elements on the diagonal of the matrix B',\n      '@return the elements located on the main diagonal of matrix B',\n      '@return the values of B matrix main diagonal'\n    ]\n  },\n  {\n    'tag': '@param matrix matrix to transform',\n    'alternatives': [\n      '@param matrix the matrix to be transformed',\n      '@param matrix the input matrix for transformation',\n      '@param matrix the matrix that needs to be transformed',\n      '@param matrix the original matrix to be converted',\n      '@param matrix the matrix to be changed'\n    ]\n  },\n  {\n    'tag': '@return root of the square matrix',\n    'alternatives': [\n      '@return the square root of the matrix',\n      '@return the square root of the given matrix',\n      '@return the matrix square root',\n      '@return the square root value of the matrix',\n      '@return the square root of the input matrix'\n    ]\n  },\n  {\n    'tag': '@return r of the square matrix.',\n    'alternatives': [\n      '@return the r value of the matrix square',\n      '@return the r constant of the square matrix',\n      '@return the r coefficient of the square matrix',\n      '@return the square matrix r value',\n      '@return the r value for the square matrix'\n    ]\n  },\n  {\n    'tag': '@param matrix Symmetric positive semidefinite matrix.',\n    'alternatives': [\n      '@param matrix Positive semidefinite symmetric matrix.',\n      '@param matrix The matrix is symmetric and positive semidefinite.',\n      '@param matrix Matrix with both positive semidefinite and symmetric properties.',\n      '@param matrix The matrix must be symmetric and positive semidefinite.',\n      '@param matrix Symmetric semidefinite positive matrix.'\n    ]\n  },\n  {\n    'tag': '@throws NonPositiveDefiniteMatrixException if the matrix is not\\npositive semidefinite.',\n    'alternatives': [\n      '@throws NonPositiveDefiniteMatrixException if the matrix does not satisfy\\npositive semidefinite conditions.',\n      '@throws NonPositiveDefiniteMatrixException if the matrix does not meet the\\nconditions for positive semidefiniteness.',\n      '@throws NonPositiveDefiniteMatrixException if the matrix fails to be\\npositive semidefinite.',\n      '@throws NonPositiveDefiniteMatrixException if the matrix is not positive\\nsemidefinite.',\n      '@throws NonPositiveDefiniteMatrixException if the matrix violates the\\nrequirements for positive semidefiniteness.'\n    ]\n  },\n  {\n    'tag': '@param small Diagonal elements threshold under which columns are\\nconsidered to be dependent on previous ones and are discarded.',\n    'alternatives': [\n      '@param small Threshold for diagonal elements below which columns are\\nregarded as dependent on previous ones and discarded.',\n      '@param small Threshold value for diagonal elements below which columns are\\nseen as dependent on previous ones and discarded.',\n      '@param small Diagonal element threshold indicating dependency of columns\\non previous ones, leading to discarding.',\n      '@param small Cost threshold for diagonal elements below which columns are\\nconsidered dependent on previous ones and discarded.',\n      '@param small The threshold for diagonal elements that determines when\\ncolumns are considered dependent on previous ones and are discarded.'\n    ]\n  },\n  {\n    'tag': '@param rows number of rows of the matrix',\n    'alternatives': [\n      '@param rows the number of rows for the matrix',\n      '@param rows the count of rows in the matrix',\n      '@param rows the number of rows in the matrix',\n      '@param rows the amount of rows in the matrix',\n      '@param rows the quantity of rows in the matrix'\n    ]\n  },\n  {\n    'tag': '@param columns number of columns of the matrix',\n    'alternatives': [\n      '@param columns the number of columns for the matrix',\n      '@param columns the count of columns in the matrix',\n      '@param columns the number of columns in the matrix',\n      '@param columns the amount of columns in the matrix',\n      '@param columns the quantity of columns in the matrix'\n    ]\n  },\n  {\n    'tag': '@param startRow Initial row index',\n    'alternatives': [\n      '@param startRow Index of the initial row',\n      '@param startRow Starting row index',\n      '@param startRow Row index to begin with',\n      '@param startRow Row index at the beginning',\n      '@param startRow The index of the first row'\n    ]\n  },\n  {\n    'tag': '@param endRow Final row index (inclusive)',\n    'alternatives': [\n      '@param endRow Index of the final row (inclusive)',\n      '@param endRow Last row index (inclusive)',\n      '@param endRow Row index to end with (inclusive)',\n      '@param endRow The index of the last row (inclusive)',\n      '@param endRow Row index at the end (inclusive)'\n    ]\n  },\n  {\n    'tag': '@param startColumn Initial column index',\n    'alternatives': [\n      '@param startColumn Index of the initial column',\n      '@param startColumn Starting column index',\n      '@param startColumn Column index to begin with',\n      '@param startColumn Column index at the beginning',\n      '@param startColumn The index of the first column'\n    ]\n  },\n  {\n    'tag': '@param endColumn Final column index (inclusive)',\n    'alternatives': [\n      '@param endColumn Index of the final column (inclusive)',\n      '@param endColumn Last column index (inclusive)',\n      '@param endColumn Column index to end with (inclusive)',\n      '@param endColumn The index of the last column (inclusive)',\n      '@param endColumn Column index at the end (inclusive)'\n    ]\n  },\n  {\n    'tag': '@param row row index of the entry',\n    'alternatives': [\n      '@param row The index of the entry row',\n      '@param row Index of the row where the entry is located',\n      '@param row Row index for the specified entry',\n      '@param row Row index of the desired entry',\n      '@param row The row index of the entry'\n    ]\n  },\n  {\n    'tag': '@param column column index of the entry',\n    'alternatives': [\n      '@param column The index of the entry column',\n      '@param column Index of the column where the entry is located',\n      '@param column Column index for the specified entry',\n      '@param column Column index of the desired entry',\n      '@param column The column index of the entry'\n    ]\n  }\n]"