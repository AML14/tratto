"output = [\n  {\n    'tag': '@throws NullPointerException if bag is null',\n    'alternatives': [\n      '@throws NullPointerException in case bag is null',\n      '@throws NullPointerException if the bag is null',\n      '@throws NullPointerException if the bag parameter is null',\n      '@throws NullPointerException if the bag is not defined',\n      '@throws NullPointerException if bag has a null value'\n    ]\n  },\n  {\n    'tag': '@param bag the bag to decorate, must not be null',\n    'alternatives': [\n      '@param bag is the bag that needs to be decorated and it should not be null',\n      '@param bag refers to the bag object that must not be null and is needed for decoration',\n      '@param bag (not null) - the bag object to be decorated',\n      '@param bag specifies the bag for decoration and it must not be null',\n      '@param bag, which is the bag object to decorate, must not be null'\n    ]\n  },\n  {\n    'tag': '@return <code>true</code>, always',\n    'alternatives': [\n      '@return always <code>true</code>',\n      '@return <code>true</code> as an always returned value',\n      '@return always returns <code>true</code>',\n      '@return the value <code>true</code> is always returned',\n      '@return the return value is always <code>true</code>'\n    ]\n  },\n  {\n    'tag': '@throws FunctorException always',\n    'alternatives': [\n      '@throws FunctorException - always thrown',\n      '@throws FunctorException is always raised',\n      '@throws FunctorException is always thrown',\n      '@throws always throws a FunctorException',\n      '@throws always raises a FunctorException'\n    ]\n  },\n  {\n    'tag': '@param predicate predicate to switch on, not null',\n    'alternatives': [\n      '@param predicate is the not null predicate to switch on',\n      '@param predicate (not null) - the predicate to switch on',\n      '@param predicate specifies the predicate to switch on and it must not be null',\n      '@param predicate that is not null and used for switching',\n      '@param predicate, which is the not null predicate used for switching'\n    ]\n  },\n  {\n    'tag': '@param trueTransformer transformer used if true, not null',\n    'alternatives': [\n      '@param trueTransformer is the transformer used when the condition is true and it must not be null',\n      '@param trueTransformer (not null) - the transformer used if the condition is true',\n      '@param trueTransformer specifies the transformer to be used if the condition is true and it must not be null',\n      '@param trueTransformer that is not null and used when the condition is true',\n      '@param trueTransformer, which is the not null transformer used if the condition is true'\n    ]\n  },\n  {\n    'tag': '@param falseTransformer transformer used if false, not null',\n    'alternatives': [\n      '@param falseTransformer is the transformer used when the condition is false and it must not be null',\n      '@param falseTransformer (not null) - the transformer used if the condition is false',\n      '@param falseTransformer specifies the transformer to be used if the condition is false and it must not be null',\n      '@param falseTransformer that is not null and used when the condition is false',\n      '@param falseTransformer, which is the not null transformer used if the condition is false'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if either argument is null',\n    'alternatives': [\n      '@throws NullPointerException when either argument is null',\n      '@throws NullPointerException if any of the arguments is null',\n      '@throws NullPointerException if either of the arguments is null',\n      '@throws NullPointerException in case any argument is null',\n      '@throws NullPointerException if one of the arguments is null'\n    ]\n  },\n  {\n    'tag': '@return the transformed result',\n    'alternatives': [\n      '@return the result after transformation',\n      '@return the outcome of the transformation',\n      '@return the transformed outcome',\n      '@return the result that has been transformed',\n      '@return the result obtained after transformation'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if iterable is null',\n    'alternatives': [\n      '@throws NullPointerException in case iterable is null',\n      '@throws NullPointerException if the iterable is null',\n      '@throws NullPointerException if the iterable parameter is null',\n      '@throws NullPointerException if the iterable is not defined',\n      '@throws NullPointerException if iterable has a null value'\n    ]\n  },\n  {\n    'tag': '@param iterable the iterable to wrap into a FluentIterable, may not be null',\n    'alternatives': [\n      '@param iterable is the not null iterable to wrap into a FluentIterable',\n      '@param iterable (not null) - the iterable to be wrapped into a FluentIterable',\n      '@param iterable specifies the iterable to be wrapped into a FluentIterable and it must not be null',\n      '@param iterable that is not null and needs to be wrapped into a FluentIterable',\n      '@param iterable, which is the not null iterable to wrap into a FluentIterable'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if other is null',\n    'alternatives': [\n      '@throws NullPointerException in case other is null',\n      '@throws NullPointerException if the other is null',\n      '@throws NullPointerException if the other parameter is null',\n      '@throws NullPointerException if the other object is not defined',\n      '@throws NullPointerException if other has a null value'\n    ]\n  },\n  {\n    'tag': '@param other the other iterable to combine, may not be null',\n    'alternatives': [\n      '@param other is the not null iterable to combine',\n      '@param other (not null) - the iterable to combine with',\n      '@param other specifies the iterable to be combined with and it must not be null',\n      '@param other that is not null and should be combined with',\n      '@param other, which is the not null iterable to combine'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if other is null',\n    'alternatives': [\n      '@throws NullPointerException in case other is null',\n      '@throws NullPointerException if the other is null',\n      '@throws NullPointerException if the other parameter is null',\n      '@throws NullPointerException if the other object is not defined',\n      '@throws NullPointerException if other has a null value'\n    ]\n  },\n  {\n    'tag': '@param other the other iterable to collate, may not be null',\n    'alternatives': [\n      '@param other is the not null iterable to collate',\n      '@param other (not null) - the iterable to collate',\n      '@param other specifies the iterable to be collated and it must not be null',\n      '@param other that is not null and needs to be collated',\n      '@param other, which is the not null iterable to collate'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if other is null',\n    'alternatives': [\n      '@throws NullPointerException in case other is null',\n      '@throws NullPointerException if the other is null',\n      '@throws NullPointerException if the other parameter is null',\n      '@throws NullPointerException if the other object is not defined',\n      '@throws NullPointerException if other has a null value'\n    ]\n  },\n  {\n    'tag': '@param other the other iterable to collate, may not be null',\n    'alternatives': [\n      '@param other is the not null iterable to collate',\n      '@param other (not null) - the iterable to collate',\n      '@param other specifies the iterable to be collated and it must not be null',\n      '@param other that is not null and needs to be collated',\n      '@param other, which is the not null iterable to collate'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if predicate is null',\n    'alternatives': [\n      '@throws NullPointerException in case predicate is null',\n      '@throws NullPointerException if the predicate is null',\n      '@throws NullPointerException if the predicate parameter is null',\n      '@throws NullPointerException if the predicate is not defined',\n      '@throws NullPointerException if predicate has a null value'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if maxSize is negative',\n    'alternatives': [\n      '@throws IllegalArgumentException when maxSize is negative',\n      '@throws IllegalArgumentException if the maxSize is negative',\n      '@throws IllegalArgumentException if the maxSize parameter is negative',\n      '@throws IllegalArgumentException if the maxSize value is less than 0',\n      '@throws IllegalArgumentException if maxSize has a negative value'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if elementsToSkip is negative',\n    'alternatives': [\n      '@throws IllegalArgumentException when elementsToSkip is negative',\n      '@throws IllegalArgumentException if the elementsToSkip is negative',\n      '@throws IllegalArgumentException if the elementsToSkip parameter is negative',\n      '@throws IllegalArgumentException if the elementsToSkip value is less than 0',\n      '@throws IllegalArgumentException if elementsToSkip has a negative value'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if transformer is null',\n    'alternatives': [\n      '@throws NullPointerException in case transformer is null',\n      '@throws NullPointerException if the transformer is null',\n      '@throws NullPointerException if the transformer parameter is null',\n      '@throws NullPointerException if the transformer is not defined',\n      '@throws NullPointerException if transformer has a null value'\n    ]\n  }\n]"