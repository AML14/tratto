"output = [\n  {\n    'tag': '@return the composite function.',\n    'alternatives': [\n      '@return the composed function.',\n      '@return the result of the composition of functions.',\n      '@return the function obtained by composing multiple functions.',\n      '@return the final function after composition.',\n      '@return the combined function.'\n    ]\n  },\n  {\n    'tag': '@param combiner Combiner function.',\n    'alternatives': [\n      '@param combiner Concatenation function.',\n      '@param combiner Joining function.',\n      '@param combiner Merging function.',\n      '@param combiner Aggregation function.',\n      '@param combiner Combination function.'\n    ]\n  },\n  {\n    'tag': '@param f Function.',\n    'alternatives': [\n      '@param f Mapping function.',\n      '@param f Transformation function.',\n      '@param f Converter function.',\n      '@param f Operation function.',\n      '@param f Processing function.'\n    ]\n  },\n  {\n    'tag': '@param initialValue Initial value.',\n    'alternatives': [\n      '@param initialValue Starting value.',\n      '@param initialValue Seed value.',\n      '@param initialValue Initial state.',\n      '@param initialValue Base value.',\n      '@param initialValue Default value.'\n    ]\n  },\n  {\n    'tag': '@return a collector function.',\n    'alternatives': [\n      '@return a collecting function.',\n      '@return a function for collecting values.',\n      '@return a function that gathers elements.',\n      '@return a function used for collecting items.',\n      '@return a function that accumulates data.'\n    ]\n  },\n  {\n    'tag': '@param combiner Combiner function.',\n    'alternatives': [\n      '@param combiner Concatenation function.',\n      '@param combiner Joining function.',\n      '@param combiner Merging function.',\n      '@param combiner Aggregation function.',\n      '@param combiner Combination function.'\n    ]\n  },\n  {\n    'tag': '@param initialValue Initial value.',\n    'alternatives': [\n      '@param initialValue Starting value.',\n      '@param initialValue Seed value.',\n      '@param initialValue Initial state.',\n      '@param initialValue Base value.',\n      '@param initialValue Default value.'\n    ]\n  },\n  {\n    'tag': '@return a collector function.',\n    'alternatives': [\n      '@return a collecting function.',\n      '@return a function for collecting values.',\n      '@return a function that gathers elements.',\n      '@return a function used for collecting items.',\n      '@return a function that accumulates data.'\n    ]\n  },\n  {\n    'tag': '@param f Binary function.',\n    'alternatives': [\n      '@param f Binary operation.',\n      '@param f Two-argument function.',\n      '@param f Operator function.',\n      '@param f Computation function.',\n      '@param f Calculation function.'\n    ]\n  },\n  {\n    'tag': '@param fixed value to which the first argument of {@code f} is set.',\n    'alternatives': [\n      '@param fixed value assigned to the first parameter of {@code f}.',\n      '@param fixed constant for the first argument of {@code f}.',\n      '@param fixed value that replaces the first parameter of {@code f}.',\n      '@param fixed parameter value for the first argument of {@code f}.',\n      '@param fixed value assigned to the initial argument of {@code f}.'\n    ]\n  },\n  {\n    'tag': '@return the unary function h(x) = f(fixed, x)',\n    'alternatives': [\n      '@return the one-argument function h(x) = f(fixed, x).',\n      '@return the function h(x) obtained by applying f to fixed and x.',\n      '@return the resulting unary function h(x) = f(fixed, x).',\n      '@return the transformed function h(x) = f(fixed, x).',\n      '@return the function h(x) that evaluates f(fixed, x).'\n    ]\n  },\n  {\n    'tag': '@param f Binary function.',\n    'alternatives': [\n      '@param f Binary operation.',\n      '@param f Two-argument function.',\n      '@param f Operator function.',\n      '@param f Computation function.',\n      '@param f Calculation function.'\n    ]\n  },\n  {\n    'tag': '@param fixed value to which the second argument of {@code f} is set.',\n    'alternatives': [\n      '@param fixed value assigned to the second parameter of {@code f}.',\n      '@param fixed constant for the second argument of {@code f}.',\n      '@param fixed value that replaces the second parameter of {@code f}.',\n      '@param fixed parameter value for the second argument of {@code f}.',\n      '@param fixed value assigned to the final argument of {@code f}.'\n    ]\n  },\n  {\n    'tag': '@return the unary function h(x) = f(x, fixed)',\n    'alternatives': [\n      '@return the one-argument function h(x) = f(x, fixed).',\n      '@return the function h(x) obtained by applying f to x and fixed.',\n      '@return the resulting unary function h(x) = f(x, fixed).',\n      '@return the transformed function h(x) = f(x, fixed).',\n      '@return the function h(x) that evaluates f(x, fixed).'\n    ]\n  },\n  {\n    'tag': '@param f Function to be sampled',\n    'alternatives': [\n      '@param f Function to be measured',\n      '@param f Function to be evaluated',\n      '@param f Function to be analyzed',\n      '@param f Function to be examined',\n      '@param f Function to be inspected'\n    ]\n  },\n  {\n    'tag': '@param min Lower bound of the interval (included).',\n    'alternatives': [\n      '@param min Starting point of the interval (inclusive).',\n      '@param min Smallest value in the range (inclusive).',\n      '@param min Minimum value of the interval (inclusive).',\n      '@param min First value of the range (inclusive).',\n      '@param min Lower limit of the interval (inclusive).'\n    ]\n  },\n  {\n    'tag': '@param max Upper bound of the interval (excluded).',\n    'alternatives': [\n      '@param max Ending point of the interval (exclusive).',\n      '@param max Greatest value in the range (exclusive).',\n      '@param max Maximum value of the interval (exclusive).',\n      '@param max Last value of the range (exclusive).',\n      '@param max Upper limit of the interval (exclusive).'\n    ]\n  },\n  {\n    'tag': '@param n Number of sample points.',\n    'alternatives': [\n      '@param n Quantity of sample points.',\n      '@param n Count of sample points.',\n      '@param n Total number of samples.',\n      '@param n Size of the sample set.',\n      '@param n Number of data points.'\n    ]\n  },\n  {\n    'tag': '@return the array of samples.',\n    'alternatives': [\n      '@return the sample array.',\n      '@return the array containing the samples.',\n      '@return the list of sample values.',\n      '@return the collection of sample data.',\n      '@return the set of sampled elements.'\n    ]\n  },\n  {\n    'tag': '@throws NumberIsTooLargeException if the lower bound {@code min} is\\ngreater than, or equal to the upper bound {@code max}.',\n    'alternatives': [\n      '@throws NumberIsTooLargeException if the {@code min} lower bound is\\ngreater than or equal to the {@code max} upper bound.',\n      '@throws NumberIsTooLargeException if the interval boundaries {@code min}\\nand {@code max} are incorrectly specified.',\n      '@throws NumberIsTooLargeException if the lower limit {@code min} is\\ngreater than or equal to the upper limit {@code max}.',\n      '@throws NumberIsTooLargeException if the bounds {@code min} and {@code max}\\nare not correctly defined.',\n      '@throws NumberIsTooLargeException if the range limits {@code min} and\\n{@code max} are improperly set.'\n    ]\n  },\n  {\n    'tag': '@throws NotStrictlyPositiveException if the number of sample points\\n{@code n} is negative.',\n    'alternatives': [\n      '@throws NotStrictlyPositiveException if the count of sample points {@code n}\\nis less than or equal to zero.',\n      '@throws NotStrictlyPositiveException if the number of sample points\\n{@code n} is not positive.',\n      '@throws NotStrictlyPositiveException if the total number of samples\\n{@code n} is negative.',\n      '@throws NotStrictlyPositiveException if the size of the sample set\\n{@code n} is non-positive.',\n      '@throws NotStrictlyPositiveException if the number of data points\\n{@code n} is less than or equal to zero.'\n    ]\n  },\n  {\n    'tag': '@param f function to convert',\n    'alternatives': [\n      '@param f function to transform',\n      '@param f function to change',\n      '@param f function to modify',\n      '@param f function to adapt',\n      '@param f function to alter'\n    ]\n  },\n  {\n    'tag': '@return converted function',\n    'alternatives': [\n      '@return transformed function',\n      '@return modified function',\n      '@return adapted function',\n      '@return altered function',\n      '@return function after conversion'\n    ]\n  },\n  {\n    'tag': '@param f function to convert',\n    'alternatives': [\n      '@param f function to transform',\n      '@param f function to change',\n      '@param f function to modify',\n      '@param f function to adapt',\n      '@param f function to alter'\n    ]\n  },\n  {\n    'tag': '@return converted function',\n    'alternatives': [\n      '@return transformed function',\n      '@return modified function',\n      '@return adapted function',\n      '@return altered function',\n      '@return function after conversion'\n    ]\n  }\n]"