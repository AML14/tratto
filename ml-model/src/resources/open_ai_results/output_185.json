"output = [\n  {\n    'tag': '@throws IllegalArgumentException if a valid {@link Inet4Address} can not be created',\n    'alternatives': [\n      '@throws IllegalArgumentException if it is not possible to create a valid {@link Inet4Address}',\n      '@throws IllegalArgumentException when a {@link Inet4Address} cannot be successfully created',\n      '@throws IllegalArgumentException if it is impossible to generate a valid {@link Inet4Address}',\n    ]\n  },\n  {\n    'tag': '@param ipString {@code String} containing an IPv4 or IPv6 string literal, e.g.\\n    {@code \"192.168.0.1\"} or {@code \"2001:db8::1\"}',\n    'alternatives': [\n      '@param ipString {@code String} with an IPv4 or IPv6 string literal, e.g.\\n    {@code \"192.168.0.1\"} or {@code \"2001:db8::1\"}',\n      '@param ipString the {@code String} representation of an IPv4 or IPv6 string literal, for example\\n    {@code \"192.168.0.1\"} or {@code \"2001:db8::1\"}',\n      '@param ipString {@code String} containing a string literal for either an IPv4 or IPv6 address, such as\\n    {@code \"192.168.0.1\"} or {@code \"2001:db8::1\"}',\n    ]\n  },\n  {\n    'tag': '@return {@link InetAddress} representing the argument',\n    'alternatives': [\n      '@return an {@link InetAddress} object representing the argument',\n      '@return the {@link InetAddress} that represents the argument',\n      '@return a {@link InetAddress} instance that represents the argument',\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if the argument is not a valid IP string literal',\n    'alternatives': [\n      '@throws IllegalArgumentException if the provided argument is not a valid IP string literal',\n      '@throws IllegalArgumentException if the argument does not conform to the requirements of an IP string literal',\n      '@throws IllegalArgumentException if the argument is an invalid IP string literal',\n    ]\n  },\n  {\n    'tag': '@param ipString {@code String} to evaluated as an IP string literal',\n    'alternatives': [\n      '@param ipString {@code String} to be evaluated as an IP string literal',\n      '@param ipString the {@code String} to assess as an IP string literal',\n      '@param ipString {@code String} that will be treated as an IP string literal',\n    ]\n  },\n  {\n    'tag': '@return {@code true} if the argument is a valid IP string literal',\n    'alternatives': [\n      '@return {@code true} if the argument is a valid IP string literal',\n      '@return {@code true} when the argument is determined to be a valid IP string literal',\n      '@return {@code true} if the argument qualifies as a valid IP string literal',\n    ]\n  },\n  {\n    'tag': '@param addr the raw 4-byte or 16-byte IP address in big-endian order',\n    'alternatives': [\n      '@param addr the IP address in big-endian order, either 4-byte or 16-byte format',\n      '@param addr the IP address in either 4-byte or 16-byte format, following big-endian order',\n      '@param addr the IP address provided in big-endian order, either as 4-byte or 16-byte',\n    ]\n  },\n  {\n    'tag': '@return an InetAddress object created from the raw IP address',\n    'alternatives': [\n      '@return an InetAddress object generated from the given raw IP address',\n      '@return an InetAddress object constructed from the supplied raw IP address',\n      '@return an InetAddress object that is created from the provided raw IP address',\n    ]\n  },\n  {\n    'tag': '@param ip {@link InetAddress} to be converted to an address string',\n    'alternatives': [\n      '@param ip the {@link InetAddress} to transform into a textual representation',\n      '@param ip the {@link InetAddress} that should be converted to an address string',\n      '@param ip the {@link InetAddress} to be changed into a string representing the address',\n    ]\n  },\n  {\n    'tag': '@return {@code String} containing the text-formatted IP address',\n    'alternatives': [\n      '@return a {@code String} that contains the IP address in text format',\n      '@return a {@code String} with the text representation of the IP address',\n      '@return a {@code String} containing the IP address represented in text format',\n    ]\n  },\n  {\n    'tag': '@param hextets {@code int[]} mutable array of eight 16-bit hextets',\n    'alternatives': [\n      '@param hextets {@code int[]} array of eight 16-bit hextets that can be modified',\n      '@param hextets {@code int[]} an array of eight 16-bit hextets that can be changed',\n      '@param hextets {@code int[]} mutable array of hextets with a length of eight (16-bit)',\n    ]\n  },\n  {\n    'tag': '@param hextets {@code int[]} array of eight 16-bit hextets, or -1s',\n    'alternatives': [\n      '@param hextets {@code int[]} array of 16-bit hextets, with either eight values or -1s',\n      '@param hextets {@code int[]} an array of eight 16-bit hextets, which may also contain -1s',\n      '@param hextets {@code int[]} array of eight hextets, each with a length of 16 bits, also allowing -1s',\n    ]\n  },\n  {\n    'tag': '@param ip {@link InetAddress} to be converted to URI string literal',\n    'alternatives': [\n      '@param ip {@link InetAddress} to be transformed into a URI string literal',\n      '@param ip the {@link InetAddress} that needs to be changed into a URI string literal',\n      '@param ip the {@link InetAddress} to convert into a URI string literal',\n    ]\n  },\n  {\n    'tag': '@return {@code String} containing URI-safe string literal',\n    'alternatives': [\n      '@return a {@code String} that contains a URI-safe string literal',\n      '@return a {@code String} representing a string literal that is safe for URI usage',\n      '@return a {@code String} containing a string literal that is guaranteed to be URI-safe',\n    ]\n  },\n  {\n    'tag': '@param hostAddr A RFC 3986 section 3.2.2 encoded IPv4 or IPv6 address',\n    'alternatives': [\n      '@param hostAddr an IPv4 or IPv6 address encoded according to RFC 3986 section 3.2.2',\n      '@param hostAddr an IPv4 or IPv6 address encoded as specified in RFC 3986 section 3.2.2',\n      '@param hostAddr an IPv4 or IPv6 address encoded using the format described in RFC 3986 section 3.2.2',\n    ]\n  },\n  {\n    'tag': '@return an InetAddress representing the address in {@code hostAddr}',\n    'alternatives': [\n      '@return an InetAddress that represents the address specified in {@code hostAddr}',\n      '@return an InetAddress instance that corresponds to the address in {@code hostAddr}',\n      '@return an InetAddress object representing the host address in {@code hostAddr}',\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if {@code hostAddr} is not a valid\\n    IPv4 address, or IPv6 address surrounded by square brackets',\n    'alternatives': [\n      '@throws IllegalArgumentException if {@code hostAddr} does not constitute a valid\\n    IPv4 address or an IPv6 address enclosed in square brackets',\n      '@throws IllegalArgumentException when {@code hostAddr} is determined to be an invalid\\n    IPv4 address or an IPv6 address not enclosed in square brackets',\n      '@throws IllegalArgumentException if the provided {@code hostAddr} is not a valid\\n    IPv4 address or an IPv6 address that is not surrounded by square brackets',\n    ]\n  },\n  {\n    'tag': '@param ipString {@code String} to evaluated as an IP URI host string literal',\n    'alternatives': [\n      '@param ipString {@code String} to be assessed as an IP URI host string literal',\n      '@param ipString the {@code String} that will be evaluated as an IP URI host string literal',\n      '@param ipString {@code String} to be examined as an IP URI host string literal',\n    ]\n  },\n  {\n    'tag': '@return {@code true} if the argument is a valid IP URI host',\n    'alternatives': [\n      '@return {@code true} if the argument qualifies as a valid IP URI host',\n      '@return {@code true} when the argument is determined to be a valid IP URI host',\n      '@return {@code true} if the argument meets the requirements of a valid IP URI host',\n    ]\n  },\n  {\n    'tag': '@param ip {@link Inet6Address} to be examined for embedded IPv4 compatible address format',\n    'alternatives': [\n      '@param ip {@link Inet6Address} to be inspected for the presence of an embedded IPv4 compatible address format',\n      '@param ip the {@link Inet6Address} that will be checked for an embedded IPv4 compatible address format',\n      '@param ip the {@link Inet6Address} to be analyzed to determine if it contains an embedded IPv4 compatible address format',\n    ]\n  },\n  {\n    'tag': '@return {@code true} if the argument is a valid \"compat\" address',\n    'alternatives': [\n      '@return {@code true} if the argument meets the requirements of a valid \"compat\" address',\n      '@return {@code true} when the argument is determined to be a valid \"compat\" address',\n      '@return {@code true} if the argument qualifies as a valid \"compat\" address',\n    ]\n  },\n  {\n    'tag': '@param ip {@link Inet6Address} to be examined for an embedded IPv4 address',\n    'alternatives': [\n      '@param ip {@link Inet6Address} to be inspected for the presence of an embedded IPv4 address',\n      '@param ip the {@link Inet6Address} that will be checked for an embedded IPv4 address',\n      '@param ip the {@link Inet6Address} to be analyzed to determine if it contains an embedded IPv4 address',\n    ]\n  },\n  {\n    'tag': '@return {@link Inet4Address} of the embedded IPv4 address',\n    'alternatives': [\n      '@return the {@link Inet4Address} object representing the embedded IPv4 address',\n      '@return an instance of {@link Inet4Address} that corresponds to the embedded IPv4 address',\n      '@return the {@link Inet4Address} that contains the embedded IPv4 address',\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if the argument is not a valid IPv4 compatible address',\n    'alternatives': [\n      '@throws IllegalArgumentException when the argument does not constitute a valid IPv4 compatible address',\n      '@throws IllegalArgumentException if the provided argument is not a valid IPv4 compatible address',\n      '@throws IllegalArgumentException if the argument is an invalid IPv4 compatible address',\n    ]\n  },\n  {\n    'tag': '@param ip {@link Inet6Address} to be examined for 6to4 address format',\n    'alternatives': [\n      '@param ip {@link Inet6Address} to be inspected for the presence of a 6to4 address format',\n      '@param ip the {@link Inet6Address} that will be checked for a 6to4 address format',\n      '@param ip the {@link Inet6Address} to be analyzed to determine if it contains a 6to4 address format',\n    ]\n  }\n]"