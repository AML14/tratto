"[\n  {\n    'tag': '@throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code x}\\n        is not a power of two',\n    'alternatives': [\n      '@throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code x}\\n        is not a multiple of two',\n      '@throws ArithmeticException if {@code x} is not a power of two and {@code mode} is {@link RoundingMode#UNNECESSARY}',\n      '@throws ArithmeticException if {@code x} is not a power of two. This exception is thrown when {@code mode} is {@link RoundingMode#UNNECESSARY}.'\n    ]\n  },\n  {\n    'tag': '@throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code x}\\n        is not a power of ten',\n    'alternatives': [\n      '@throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code x}\\n        is not a multiple of ten',\n      '@throws ArithmeticException if {@code x} is not a power of ten and {@code mode} is {@link RoundingMode#UNNECESSARY}',\n      '@throws ArithmeticException if {@code x} is not a power of ten. This exception is thrown when {@code mode} is {@link RoundingMode#UNNECESSARY}.'\n    ]\n  },\n  {\n    'tag': '@throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and\\n        {@code sqrt(x)} is not an integer',\n    'alternatives': [\n      '@throws ArithmeticException if {@code sqrt(x)} is not an integer and {@code mode} is {@link RoundingMode#UNNECESSARY}',\n      '@throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and\\n        {@code sqrt(x)} is not a whole number',\n      '@throws ArithmeticException if the square root of {@code x} is not an integer. This exception is thrown when {@code mode} is {@link RoundingMode#UNNECESSARY}.'\n    ]\n  },\n  {\n    'tag': '@throws ArithmeticException if {@code a + b} overflows in signed {@code int} arithmetic',\n    'alternatives': [\n      '@throws ArithmeticException if the addition of {@code a} and {@code b} causes an overflow in signed {@code int} arithmetic',\n      '@throws ArithmeticException if the sum of {@code a} and {@code b} overflows in signed {@code int} arithmetic',\n      '@throws ArithmeticException if the signed {@code int} arithmetic addition of {@code a} and {@code b} results in an overflow'\n    ]\n  },\n  {\n    'tag': '@throws ArithmeticException if {@code a - b} overflows in signed {@code int} arithmetic',\n    'alternatives': [\n      '@throws ArithmeticException if the subtraction of {@code b} from {@code a} causes an overflow in signed {@code int} arithmetic',\n      '@throws ArithmeticException if the difference between {@code a} and {@code b} overflows in signed {@code int} arithmetic',\n      '@throws ArithmeticException if the signed {@code int} arithmetic subtraction of {@code b} from {@code a} results in an overflow'\n    ]\n  },\n  {\n    'tag': '@throws ArithmeticException if {@code a * b} overflows in signed {@code int} arithmetic',\n    'alternatives': [\n      '@throws ArithmeticException if the multiplication of {@code a} and {@code b} causes an overflow in signed {@code int} arithmetic',\n      '@throws ArithmeticException if the product of {@code a} and {@code b} overflows in signed {@code int} arithmetic',\n      '@throws ArithmeticException if the signed {@code int} arithmetic multiplication of {@code a} and {@code b} results in an overflow'\n    ]\n  },\n  {\n    'tag': '@throws ArithmeticException if {@code b} to the {@code k}th power overflows in signed\\n        {@code int} arithmetic',\n    'alternatives': [\n      '@throws ArithmeticException if raising {@code b} to the power of {@code k} causes an overflow in signed {@code int} arithmetic',\n      '@throws ArithmeticException if the {@code k}th power of {@code b} overflows in signed {@code int} arithmetic',\n      '@throws ArithmeticException if the signed {@code int} arithmetic exponentiation of {@code b} to the power of {@code k} results in an overflow'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if {@code n < 0}, {@code k < 0} or {@code k > n}',\n    'alternatives': [\n      '@throws IllegalArgumentException if {@code n} is negative, {@code k} is negative, or {@code k} is greater than {@code n}',\n      '@throws IllegalArgumentException if {@code n} is less than zero, {@code k} is less than zero, or {@code k} is not less than or equal to {@code n}',\n      '@throws IllegalArgumentException if the values of {@code n}, {@code k} are invalid. The valid range is {@code n >= 0}, {@code k >= 0}, and {@code k <= n}.'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if {@code x <= 0}',\n    'alternatives': [\n      '@throws IllegalArgumentException if {@code x} is less than or equal to zero',\n      '@throws IllegalArgumentException if the value of {@code x} is not positive',\n      '@throws IllegalArgumentException if {@code x} is not greater than zero'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if {@code x < 0}',\n    'alternatives': [\n      '@throws IllegalArgumentException if {@code x} is negative',\n      '@throws IllegalArgumentException if the value of {@code x} is not non-negative',\n      '@throws IllegalArgumentException if {@code x} is not greater than or equal to zero'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if {@code q == 0}, or if {@code mode == UNNECESSARY} and {@code a}\\n        is not an integer multiple of {@code b}',\n    'alternatives': [\n      '@throws IllegalArgumentException if {@code q} is equal to zero, or if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code a} is not a multiple of {@code b}',\n      '@throws IllegalArgumentException if the value of {@code q} is zero, or if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code a} is not an integer multiple of {@code b}',\n      '@throws IllegalArgumentException if {@code q} equals zero, or if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code a} is not an integer multiple of {@code b}'\n    ]\n  },\n  {\n    'tag': '@throws ArithmeticException if\\n        <ul>\\n        <li>{@code x} is infinite or NaN\\n        <li>{@code x}, after being rounded to a mathematical integer using the specified\\n        rounding mode, is either less than {@code Integer.MIN_VALUE} or greater than {@code\\n        Integer.MAX_VALUE}\\n        <li>{@code x} is not a mathematical integer and {@code mode} is\\n        {@link RoundingMode#UNNECESSARY}\\n        </ul>',\n    'alternatives': [\n      '@throws ArithmeticException if\\n        <ul>\\n        <li>{@code x} is infinite or NaN\\n        <li>{@code x} is either smaller than {@code Integer.MIN_VALUE} or larger than {@code Integer.MAX_VALUE} after being rounded to a mathematical integer using the specified rounding mode\\n        <li>{@code x} is not a mathematical integer and {@code mode} is {@link RoundingMode#UNNECESSARY}\\n        </ul>',\n      '@throws ArithmeticException if\\n        <ul>\\n        <li>{@code x} is infinite or NaN\\n        <li>{@code x}, after being rounded using the specified rounding mode, is either less than {@code Integer.MIN_VALUE} or greater than {@code Integer.MAX_VALUE}\\n        <li>{@code x} is not a mathematical integer and {@code mode} is not {@link RoundingMode#UNNECESSARY}\\n        </ul>',\n      '@throws ArithmeticException if\\n        <ul>\\n        <li>{@code x} is infinite or NaN\\n        <li>{@code x} is outside the representable range of the {@code int} type after rounding to a mathematical integer using the specified rounding mode\\n        <li>{@code x} is not a mathematical integer and {@code mode} is {@link RoundingMode#UNNECESSARY}\\n        </ul>'\n    ]\n  },\n  {\n    'tag': '@throws ArithmeticException if\\n        <ul>\\n        <li>{@code x} is infinite or NaN\\n        <li>{@code x}, after being rounded to a mathematical integer using the specified\\n        rounding mode, is either less than {@code Long.MIN_VALUE} or greater than {@code\\n        Long.MAX_VALUE}\\n        <li>{@code x} is not a mathematical integer and {@code mode} is\\n        {@link RoundingMode#UNNECESSARY}\\n        </ul>',\n    'alternatives': [\n      '@throws ArithmeticException if\\n        <ul>\\n        <li>{@code x} is infinite or NaN\\n        <li>{@code x} is either smaller than {@code Long.MIN_VALUE} or larger than {@code Long.MAX_VALUE} after being rounded to a mathematical integer using the specified rounding mode\\n        <li>{@code x} is not a mathematical integer and {@code mode} is {@link RoundingMode#UNNECESSARY}\\n        </ul>',\n      '@throws ArithmeticException if\\n        <ul>\\n        <li>{@code x} is infinite or NaN\\n        <li>{@code x}, after being rounded using the specified rounding mode, is either less than {@code Long.MIN_VALUE} or greater than {@code Long.MAX_VALUE}\\n        <li>{@code x} is not a mathematical integer and {@code mode} is not {@link RoundingMode#UNNECESSARY}\\n        </ul>',\n      '@throws ArithmeticException if\\n        <ul>\\n        <li>{@code x} is infinite or NaN\\n        <li>{@code x} is outside the representable range of the {@code long} type after rounding to a mathematical integer using the specified rounding mode\\n        <li>{@code x} is not a mathematical integer and {@code mode} is {@link RoundingMode#UNNECESSARY}\\n        </ul>'\n    ]\n  },\n  {\n    'tag': '@throws ArithmeticException if\\n        <ul>\\n        <li>{@code x} is infinite or NaN\\n        <li>{@code x} is not a mathematical integer and {@code mode} is\\n        {@link RoundingMode#UNNECESSARY}\\n        </ul>',\n    'alternatives': [\n      '@throws ArithmeticException if\\n        <ul>\\n        <li>{@code x} is infinite or NaN\\n        <li>{@code x} is not a mathematical"