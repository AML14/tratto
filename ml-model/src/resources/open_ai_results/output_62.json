"Output = [\n  {\n    'tag': '@param knew ',\n    'alternatives': [\n      '@param knew ',\n      '@param new ',\n      '@param unknown '\n    ]\n  },\n  {\n    'tag': '@param lowerBound Lower bounds (constraints) of the objective variables.',\n    'alternatives': [\n      '@param lowerBound Constraints (lower bounds) of the objective variables.',\n      '@param lowerBound Objective variable constraints (lower bounds).',\n      '@param lowerBound Constraints that determine the lower bounds of the objective variables.'\n    ]\n  },\n  {\n    'tag': '@param upperBound Upperer bounds (constraints) of the objective variables.',\n    'alternatives': [\n      '@param upperBound Constraints (upper bounds) of the objective variables.',\n      '@param upperBound Objective variable constraints (upper bounds).',\n      '@param upperBound Constraints that determine the upper bounds of the objective variables.'\n    ]\n  },\n  {\n    'tag': '@param numberOfInterpolationPoints Number of interpolation conditions.\\nFor a problem of dimension {@code n}, its value must be in the interval\\n{@code [n+2, (n+1)(n+2)/2]}.\\nChoices that exceed {@code 2n+1} are not recommended.',\n    'alternatives': [\n      '@param numberOfInterpolationPoints Number of conditions for interpolation.\\nFor a problem with dimension {@code n}, the value should fall within the range\\n{@code [n+2, (n+1)(n+2)/2]}.\\nIt is not advisable to exceed {@code 2n+1} choices.',\n      '@param numberOfInterpolationPoints Number of conditions to perform interpolation.\\nFor a problem with dimension {@code n}, the value must be within the range\\n{@code [n+2, (n+1)(n+2)/2]}.\\nAvoid choices that go beyond {@code 2n+1}.',\n      '@param numberOfInterpolationPoints Number of conditions used for interpolation.\\nFor a problem of dimension {@code n}, the value should be between\\n{@code [n+2, (n+1)(n+2)/2]}.\\nIt is not recommended to go above {@code 2n+1} options.'\n    ]\n  },\n  {\n    'tag': '@param numberOfInterpolationPoints Number of interpolation conditions.\\nFor a problem of dimension {@code n}, its value must be in the interval\\n{@code [n+2, (n+1)(n+2)/2]}.\\nChoices that exceed {@code 2n+1} are not recommended.',\n    'alternatives': [\n      '@param numberOfInterpolationPoints Number of conditions used for interpolation operations.\\nFor problems with dimension {@code n}, the value should fall within the range\\n{@code [n+2, (n+1)(n+2)/2]}.\\nThe use of choices that exceed {@code 2n+1} is not advised.',\n      '@param numberOfInterpolationPoints Number of interpolation conditions needed.\\nFor problems of dimension {@code n}, the value must lie within the interval\\n{@code [n+2, (n+1)(n+2)/2]}.\\nIt is not recommended to choose values exceeding {@code 2n+1}.',\n      '@param numberOfInterpolationPoints Number of conditions required for interpolation.\\nFor a problem with dimension {@code n}, the value needs to be in the range\\n{@code [n+2, (n+1)(n+2)/2]}.\\nAvoid selecting choices that exceed {@code 2n+1}.'\n    ]\n  },\n  {\n    'tag': '@param initialTrustRegionRadius Initial trust region radius.',\n    'alternatives': [\n      '@param initialTrustRegionRadius Starting trust region radius.',\n      '@param initialTrustRegionRadius Trust region radius at the beginning.',\n      '@param initialTrustRegionRadius Radius of the trust region at the start.'\n    ]\n  },\n  {\n    'tag': '@param stoppingTrustRegionRadius Stopping trust region radius.',\n    'alternatives': [\n      '@param stoppingTrustRegionRadius Trust region radius for stopping.',\n      '@param stoppingTrustRegionRadius Radius of the trust region when stopping.',\n      '@param stoppingTrustRegionRadius Trust region radius at the end.'\n    ]\n  },\n  {\n    'tag': '@param n Dimension of the simplex.',\n    'alternatives': [\n      '@param n Dimension of the basic geometric figure.',\n      '@param n Dimension of the simplicial complex.',\n      '@param n Dimension of the simplicial shape.'\n    ]\n  },\n  {\n    'tag': '@param n Dimension of the simplex.',\n    'alternatives': [\n      '@param n Dimension of the basic geometric figure.',\n      '@param n Dimension of the simplicial complex.',\n      '@param n Dimension of the simplicial shape.'\n    ]\n  },\n  {\n    'tag': '@param sideLength Length of the sides of the default (hypercube)\\nsimplex. See {@link AbstractSimplex#AbstractSimplex(int,double)}.',\n    'alternatives': [\n      '@param sideLength Size of the edges of the default (hypercube)\\nsimplex. Refer to {@link AbstractSimplex#AbstractSimplex(int,double)}.',\n      '@param sideLength Length of the edges of the default (hypercube)\\nsimplex. See {@link AbstractSimplex#AbstractSimplex(int,double)}.',\n      '@param sideLength Measurement of the sides of the default (hypercube)\\nsimplex. Refer to {@link AbstractSimplex#AbstractSimplex(int,double)}.'\n    ]\n  },\n  {\n    'tag': '@param n Dimension of the simplex. See\\n{@link AbstractSimplex#AbstractSimplex(int,double)}.',\n    'alternatives': [\n      '@param n Dimension of the simplicial shape. See\\n{@link AbstractSimplex#AbstractSimplex(int,double)}.',\n      '@param n Dimension of the basic geometric figure. See\\n{@link AbstractSimplex#AbstractSimplex(int,double)}.',\n      '@param n Dimension of the simplicial complex. See\\n{@link AbstractSimplex#AbstractSimplex(int,double)}.'\n    ]\n  },\n  {\n    'tag': '@param sideLength Length of the sides of the default (hypercube)\\nsimplex. See {@link AbstractSimplex#AbstractSimplex(int,double)}.',\n    'alternatives': [\n      '@param sideLength Size of the edges of the default (hypercube)\\nsimplex. Refer to {@link AbstractSimplex#AbstractSimplex(int,double)}.',\n      '@param sideLength Length of the edges of the default (hypercube)\\nsimplex. See {@link AbstractSimplex#AbstractSimplex(int,double)}.',\n      '@param sideLength Measurement of the sides of the default (hypercube)\\nsimplex. Refer to {@link AbstractSimplex#AbstractSimplex(int,double)}.'\n    ]\n  },\n  {\n    'tag': '@param rho Reflection coefficient.',\n    'alternatives': [\n      '@param rho Coefficient of reflection.',\n      '@param rho Reflective coefficient.',\n      '@param rho Reflection factor.'\n    ]\n  },\n  {\n    'tag': '@param khi Expansion coefficient.',\n    'alternatives': [\n      '@param khi Coefficient of expansion.',\n      '@param khi Expanding coefficient.',\n      '@param khi Expansion factor.'\n    ]\n  },\n  {\n    'tag': '@param gamma Contraction coefficient.',\n    'alternatives': [\n      '@param gamma Coefficient of contraction.',\n      '@param gamma Contracting coefficient.',\n      '@param gamma Contraction factor.'\n    ]\n  },\n  {\n    'tag': '@param sigma Shrinkage coefficient.',\n    'alternatives': [\n      '@param sigma Coefficient of shrinkage.',\n      '@param sigma Shrinking coefficient.',\n      '@param sigma Shrinkage factor.'\n    ]\n  },\n  {\n    'tag': '@param n Dimension of the simplex. See\\n{@link AbstractSimplex#AbstractSimplex(int)}.',\n    'alternatives': [\n      '@param n Dimension of the simplicial shape. See\\n{@link AbstractSimplex#AbstractSimplex(int)}.',\n      '@param n Dimension of the basic geometric figure. See\\n{@link AbstractSimplex#AbstractSimplex(int)}.',\n      '@param n Dimension of the simplicial complex. See\\n{@link AbstractSimplex#AbstractSimplex(int)}.'\n    ]\n  },\n  {\n    'tag': '@param rho Reflection coefficient.',\n    'alternatives': [\n      '@param rho Coefficient of reflection.',\n      '@param rho Reflective coefficient.',\n      '@param rho Reflection factor.'\n    ]\n  },\n  {\n    'tag': '@param khi Expansion coefficient.',\n    'alternatives': [\n      '@param khi Coefficient of expansion.',\n      '@param khi Expanding coefficient.',\n      '@param khi Expansion factor.'\n    ]\n  },\n  {\n    'tag': '@param gamma Contraction coefficient.',\n    'alternatives': [\n      '@param gamma Coefficient of contraction.',\n      '@param gamma Contracting coefficient.',\n      '@param gamma Contraction factor.'\n    ]\n  },\n  {\n    'tag': '@param sigma Shrinkage coefficient.',\n    'alternatives': [\n      '@param sigma Coefficient of shrinkage.',\n      '@param sigma Shrinking coefficient.',\n      '@param sigma Shrinkage factor.'\n    ]\n  },\n  {\n    'tag': '@param steps Steps along the canonical axes representing box edges.\\nThey may be negative but not zero. See',\n    'alternatives': [\n      '@param steps Steps that go through the canonical axes illustrating box edges.\\nThey may be negative but not zero. See',\n      '@param steps Changes along the canonical axes representing box edges.\\nThey may be negative but not zero. See',\n      '@param steps Variations along the canonical axes representing box edges.\\nThey may be negative but not zero. See'\n    ]\n  },\n  {\n    'tag': '@param steps Steps along the canonical axes representing box edges.\\nThey may be negative but not zero. See\\n{@link AbstractSimplex#AbstractSimplex(double[])}.',\n    'alternatives': [\n      '@param steps Steps that go through the canonical axes illustrating box edges.\\nThey may be negative but not zero. See\\n{@link AbstractSimplex#AbstractSimplex(double[])}.',\n      '@param steps Changes along the canonical axes representing box edges.\\nThey may be negative but not zero. See\\n{@link AbstractSimplex#AbstractSimplex(double[])}.',\n      '@param steps Variations along the canonical axes representing box edges.\\nThey may be negative but not zero. See\\n{@link AbstractSimplex#AbstractSimplex(double[])}.'\n    ]\n  },\n  {\n    'tag': '@param rho Reflection coefficient.',\n    'alternatives': [\n      '@param rho Coefficient of reflection.',\n      '@param rho Reflective coefficient.',\n      '@param rho Reflection factor.'\n    ]\n  },\n  {\n    'tag': '@param khi Expansion coefficient.',\n    'alternatives': [\n      '@param khi Coefficient of expansion.',\n      '@param khi Expanding coefficient.',\n      '@param khi Expansion factor.'\n    ]\n  }\n]"