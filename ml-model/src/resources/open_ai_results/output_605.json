"output=[\n  {\n    'tag': '@throws NullPointerException if map is null',\n    'alternatives': [\n      '@throws NullPointerException if the map is null',\n      '@throws NullPointerException if the map parameter is null',\n      '@throws NullPointerException in case the map is null',\n      '@throws NullPointerException if the input map is null',\n      '@throws NullPointerException when the map is null'\n    ]\n  },\n  {\n    'tag': '@param map the MultiValuedMap to decorate, may not be null',\n    'alternatives': [\n      '@param map the MultiValuedMap to enhance, must not be null',\n      '@param map the MultiValuedMap to modify, can't be null',\n      '@param map the MultiValuedMap to wrap, should not be null',\n      '@param map the MultiValuedMap that requires decoration, cannot be null',\n      '@param map the MultiValuedMap to adorn, should not be null'\n    ]\n  },\n  {\n    'tag': '@param keyTransformer the transformer to use for key conversion, null means no conversion',\n    'alternatives': [\n      '@param keyTransformer conversion transformer to apply on keys, null indicates no transformation',\n      '@param keyTransformer the transformer for converting keys, null implies no conversion',\n      '@param keyTransformer the converter to use for key transformation, null indicates no conversion',\n      '@param keyTransformer the transformer to be used for key conversion, null to avoid conversion',\n      '@param keyTransformer the transformer that will be used for key conversion, null implies no conversion'\n    ]\n  },\n  {\n    'tag': '@param valueTransformer the transformer to use for value conversion, null means no conversion',\n    'alternatives': [\n      '@param valueTransformer conversion transformer to apply on values, null indicates no transformation',\n      '@param valueTransformer the transformer for converting values, null implies no conversion',\n      '@param valueTransformer the converter to use for value transformation, null indicates no conversion',\n      '@param valueTransformer the transformer to be used for value conversion, null to avoid conversion',\n      '@param valueTransformer the transformer that will be used for value conversion, null implies no conversion'\n    ]\n  },\n  {\n    'tag': '@param map the MultiValuedMap to decorate, may not be null',\n    'alternatives': [\n      '@param map the MultiValuedMap to enhance, must not be null',\n      '@param map the MultiValuedMap to modify, can't be null',\n      '@param map the MultiValuedMap to wrap, should not be null',\n      '@param map the MultiValuedMap that requires decoration, cannot be null',\n      '@param map the MultiValuedMap to adorn, should not be null'\n    ]\n  },\n  {\n    'tag': '@param map the MultiValuedMap to decorate, may not be null',\n    'alternatives': [\n      '@param map the MultiValuedMap to enhance, must not be null',\n      '@param map the MultiValuedMap to modify, can't be null',\n      '@param map the MultiValuedMap to wrap, should not be null',\n      '@param map the MultiValuedMap that requires decoration, cannot be null',\n      '@param map the MultiValuedMap to adorn, should not be null'\n    ]\n  },\n  {\n    'tag': '@param keyTransformer the transformer to use for key conversion, null means no conversion',\n    'alternatives': [\n      '@param keyTransformer conversion transformer to apply on keys, null indicates no transformation',\n      '@param keyTransformer the transformer for converting keys, null implies no conversion',\n      '@param keyTransformer the converter to use for key transformation, null indicates no conversion',\n      '@param keyTransformer the transformer to be used for key conversion, null to avoid conversion',\n      '@param keyTransformer the transformer that will be used for key conversion, null implies no conversion'\n    ]\n  },\n  {\n    'tag': '@param valueTransformer the transformer to use for value conversion, null means no conversion',\n    'alternatives': [\n      '@param valueTransformer conversion transformer to apply on values, null indicates no transformation',\n      '@param valueTransformer the transformer for converting values, null implies no conversion',\n      '@param valueTransformer the converter to use for value transformation, null indicates no conversion',\n      '@param valueTransformer the transformer to be used for value conversion, null to avoid conversion',\n      '@param valueTransformer the transformer that will be used for value conversion, null implies no conversion'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if map is null',\n    'alternatives': [\n      '@throws NullPointerException if the map is null',\n      '@throws NullPointerException if the map parameter is null',\n      '@throws NullPointerException in case the map is null',\n      '@throws NullPointerException if the input map is null',\n      '@throws NullPointerException when the map is null'\n    ]\n  },\n  {\n    'tag': '@param map the MultiValuedMap to decorate, may not be null',\n    'alternatives': [\n      '@param map the MultiValuedMap to enhance, must not be null',\n      '@param map the MultiValuedMap to modify, can't be null',\n      '@param map the MultiValuedMap to wrap, should not be null',\n      '@param map the MultiValuedMap that requires decoration, cannot be null',\n      '@param map the MultiValuedMap to adorn, should not be null'\n    ]\n  },\n  {\n    'tag': '@param length the number of elements to include',\n    'alternatives': [\n      '@param length total count of elements to incorporate',\n      '@param length number of elements to encompass',\n      '@param length quantity of elements to comprise',\n      '@param length total number of elements to encompass',\n      '@param length count of elements to include'\n    ]\n  },\n  {\n    'tag': '@return true if the parameters are valid and designate a subarray of positive length',\n    'alternatives': [\n      '@return true if the arguments are valid and represent a positive length subarray',\n      '@return true if the parameters are valid and identify a subarray with a positive length',\n      '@return true if the input is valid and denotes a subarray of positive length',\n      '@return true if the parameters are valid and indicate a subarray with positive length',\n      '@return true if the arguments are valid and indicate a subarray of positive length'\n    ]\n  },\n  {\n    'tag': '@throws MathIllegalArgumentException if the indices are invalid or the array is null',\n    'alternatives': [\n      '@throws MathIllegalArgumentException if the indices are not valid or the array is null',\n      '@throws MathIllegalArgumentException in case of invalid indices or null array',\n      '@throws MathIllegalArgumentException if the array is null or the indices are invalid',\n      '@throws MathIllegalArgumentException when the indices are invalid or the array is null',\n      '@throws MathIllegalArgumentException if the indices are invalid or the array parameter is null'\n    ]\n  },\n  {\n    'tag': '@param values the input array.',\n    'alternatives': [\n      '@param values the array as input.',\n      '@param values the given array.',\n      '@param values the provided array.',\n      '@param values the array that is given as input.',\n      '@param values the inputted array.'\n    ]\n  },\n  {\n    'tag': '@param weights the weights array.',\n    'alternatives': [\n      '@param weights array containing the weights.',\n      '@param weights the given array of weights.',\n      '@param weights the provided array of weights.',\n      '@param weights the array that contains the weights.',\n      '@param weights the input array of weights.'\n    ]\n  },\n  {\n    'tag': '@param begin index of the first array element to include.',\n    'alternatives': [\n      '@param begin starting index of the first element to incorporate from the array.',\n      '@param begin index from which the inclusion of elements from the array begins.',\n      '@param begin the index from where the incorporation of elements from the array starts.',\n      '@param begin the starting index of the first element to encompass from the array.',\n      '@param begin index indicating the starting point of the first array element to include.'\n    ]\n  },\n  {\n    'tag': '@param length the number of elements to include.',\n    'alternatives': [\n      '@param length total count of elements to incorporate',\n      '@param length number of elements to encompass',\n      '@param length quantity of elements to comprise',\n      '@param length total number of elements to encompass',\n      '@param length count of elements to include'\n    ]\n  },\n  {\n    'tag': '@param allowEmpty if {@code true} than allow zero length arrays to pass.',\n    'alternatives': [\n      '@param allowEmpty if {@code true}, then permit zero length arrays to proceed.',\n      '@param allowEmpty if {@code true}, zero length arrays are permitted to proceed.',\n      '@param allowEmpty if {@code true}, zero length arrays are allowed to pass.',\n      '@param allowEmpty if {@code true}, then zero length arrays are allowed to pass.',\n      '@param allowEmpty if {@code true}, then permit zero length arrays to be accepted.'\n    ]\n  },\n  {\n    'tag': '@return {@code true} if the parameters are valid.',\n    'alternatives': [\n      '@return {@code true} if the arguments are valid.',\n      '@return {@code true} if the parameters are acceptable.',\n      '@return {@code true} if the input is valid.',\n      '@return {@code true} if the parameters are correct.',\n      '@return {@code true} if the arguments are acceptable.'\n    ]\n  },\n  {\n    'tag': '@throws NullArgumentException if either of the arrays are null',\n    'alternatives': [\n      '@throws NullArgumentException if any of the arrays is null',\n      '@throws NullArgumentException if any of the arrays are null',\n      '@throws NullArgumentException if one of the arrays is null',\n      '@throws NullArgumentException if any of the provided arrays are null',\n      '@throws NullArgumentException if either of the input arrays is null'\n    ]\n  },\n  {\n    'tag': '@throws MathIllegalArgumentException if the array indices are not valid,\\nthe weights array contains NaN, infinite or negative elements, or there\\nare no positive weights.',\n    'alternatives': [\n      '@throws MathIllegalArgumentException if the indices of the array are invalid, the weights array includes infinite, NaN or negative elements, or if there are no positive weights',\n      '@throws MathIllegalArgumentException in case the indices of the array are not valid, the weights array contains infinite, NaN or negative elements, or there are no positive weights',\n      '@throws MathIllegalArgumentException if the array indices are not valid, the weights array contains infinite, NaN, or negative elements, or there are no positive weights',\n      '@throws MathIllegalArgumentException if the array indices are invalid, the weights array contains negative, infinite or NaN elements, or there are no positive weights',\n      '@throws MathIllegalArgumentException if the indices of the array are not valid, the weights array consists of NaN, infinite or negative elements, or if there are no positive weights'\n    ]\n  },\n  {\n    'tag': '@return Current values of statistics',\n    'alternatives': [\n      '@return Current statistical values',\n      '@return Statistics values at the moment',\n      '@return The present values of statistics',\n      '@return Current statistical data',\n      '@return Statistics values currently'\n    ]\n  },\n  {\n    'tag': '@param value the value to add',\n    'alternatives': [\n      '@param value the value to include',\n      '@param value the value to incorporate',\n      '@param value the value to append',\n      '@param value the value to join',\n      '@param value the value to append'\n    ]\n  },\n  {\n    'tag': '@return The number of available values',\n    'alternatives': [\n      '@return The count of available values',\n      '@return The quantity of accessible values',\n      '@return The total number of available values',\n      '@return The number of values that are available',\n      '@return The amount of values that can be accessed'\n    ]\n  },\n  {\n    'tag': '@return The sum or <code>Double.NaN</code> if no values have been added',\n    'alternatives': [\n      '@return The sum or <code>Double.NaN</code> in case no values have been included',\n      '@return The sum or <code>Double.NaN</code> if no values were added',\n      '@return The sum or <code>Double.NaN</code> when no values have been appended',\n      '@return The sum or <code>Double.NaN</code> if no values were appended',\n      '@return The sum or <code>Double.NaN</code> in case no values were added'\n    ]\n  }\n]"