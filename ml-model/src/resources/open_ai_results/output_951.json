"[\r\n  {\r\n    'tag': '@param b value to compare.',\r\n    'alternatives': [\r\n      '@param b value to evaluate.',\r\n      '@param b value for comparison.',\r\n      '@param b value to be compared.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@throws ClassCastException if the parameters are not <i>mutually\\n    comparable</i> under this ordering.',\r\n    'alternatives': [\r\n      '@throws ClassCastException if the arguments cannot be compared with each other.',\r\n      '@throws ClassCastException if the parameters cannot be compared in this ordering.',\r\n      '@throws ClassCastException if the elements are not mutually comparable under this ordering.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param a value to compare, returned if less than or equal to the rest.',\r\n    'alternatives': [\r\n      '@param a value to be compared, returned if less than or equal to the others.',\r\n      '@param a value for comparison, returned if less than or equal to the remaining.',\r\n      '@param a value to compare, returned if it is less than or equal to the others.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param b value to compare',\r\n    'alternatives': [\r\n      '@param b value for comparison',\r\n      '@param b value to be compared',\r\n      '@param b value to evaluate'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param c value to compare',\r\n    'alternatives': [\r\n      '@param c value for comparison',\r\n      '@param c value to be compared',\r\n      '@param c value to evaluate'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param rest values to compare',\r\n    'alternatives': [\r\n      '@param rest values to compare with',\r\n      '@param rest values for comparison',\r\n      '@param rest values to evaluate'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@throws ClassCastException if the parameters are not <i>mutually\\n    comparable</i> under this ordering.',\r\n    'alternatives': [\r\n      '@throws ClassCastException if the elements cannot be compared with each other under this ordering.',\r\n      '@throws ClassCastException if the parameters cannot be compared in this specific ordering.',\r\n      '@throws ClassCastException if the objects are not mutually comparable under this ordering.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param iterator the iterator whose maximum element is to be determined',\r\n    'alternatives': [\r\n      '@param iterator the iterator from which the largest element needs to be found',\r\n      '@param iterator the iterator used to find the maximum element',\r\n      '@param iterator the iterator to determine the maximum element'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@throws NoSuchElementException if {@code iterator} is empty',\r\n    'alternatives': [\r\n      '@throws NoSuchElementException if the {@code iterator} is empty',\r\n      '@throws NoSuchElementException if there are no elements in the {@code iterator}',\r\n      '@throws NoSuchElementException if the {@code iterator} does not contain any elements'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@throws ClassCastException if the parameters are not <i>mutually\\n    comparable</i> under this ordering.',\r\n    'alternatives': [\r\n      '@throws ClassCastException if the elements cannot be compared with each other under this ordering.',\r\n      '@throws ClassCastException if the parameters cannot be compared in this specific ordering.',\r\n      '@throws ClassCastException if the objects are not mutually comparable under this ordering.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param iterable the iterable whose maximum element is to be determined',\r\n    'alternatives': [\r\n      '@param iterable the iterable from which the largest element needs to be found',\r\n      '@param iterable the iterable used to find the maximum element',\r\n      '@param iterable the iterable to determine the maximum element'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@throws NoSuchElementException if {@code iterable} is empty',\r\n    'alternatives': [\r\n      '@throws NoSuchElementException if the {@code iterable} is empty',\r\n      '@throws NoSuchElementException if there are no elements in the {@code iterable}',\r\n      '@throws NoSuchElementException if the {@code iterable} does not contain any elements'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@throws ClassCastException if the parameters are not <i>mutually\\n    comparable</i> under this ordering.',\r\n    'alternatives': [\r\n      '@throws ClassCastException if the elements cannot be compared with each other under this ordering.',\r\n      '@throws ClassCastException if the parameters cannot be compared in this specific ordering.',\r\n      '@throws ClassCastException if the objects are not mutually comparable under this ordering.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param a value to compare, returned if greater than or equal to b.',\r\n    'alternatives': [\r\n      '@param a value to be compared, returned if it is greater than or equal to b.',\r\n      '@param a value for comparison, returned if it is greater than or equal to b.',\r\n      '@param a value to compare, returned if it is greater than or equal to b.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param b value to compare.',\r\n    'alternatives': [\r\n      '@param b value for comparison.',\r\n      '@param b value to be compared.',\r\n      '@param b value to evaluate.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@throws ClassCastException if the parameters are not <i>mutually\\n    comparable</i> under this ordering.',\r\n    'alternatives': [\r\n      '@throws ClassCastException if the elements cannot be compared with each other under this ordering.',\r\n      '@throws ClassCastException if the parameters cannot be compared in this specific ordering.',\r\n      '@throws ClassCastException if the objects are not mutually comparable under this ordering.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param a value to compare, returned if greater than or equal to the rest.',\r\n    'alternatives': [\r\n      '@param a value to be compared, returned if greater than or equal to the others.',\r\n      '@param a value for comparison, returned if greater than or equal to the remaining.',\r\n      '@param a value to compare, returned if it is greater than or equal to the others.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param b value to compare',\r\n    'alternatives': [\r\n      '@param b value for comparison',\r\n      '@param b value to be compared',\r\n      '@param b value to evaluate'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param c value to compare',\r\n    'alternatives': [\r\n      '@param c value for comparison',\r\n      '@param c value to be compared',\r\n      '@param c value to evaluate'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param rest values to compare',\r\n    'alternatives': [\r\n      '@param rest values to compare with',\r\n      '@param rest values for comparison',\r\n      '@param rest values to evaluate'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@throws ClassCastException if the parameters are not <i>mutually\\n    comparable</i> under this ordering.',\r\n    'alternatives': [\r\n      '@throws ClassCastException if the elements cannot be compared with each other under this ordering.',\r\n      '@throws ClassCastException if the parameters cannot be compared in this specific ordering.',\r\n      '@throws ClassCastException if the objects are not mutually comparable under this ordering.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@return an immutable {@code RandomAccess} list of the {@code k} least\\n    elements in ascending order',\r\n    'alternatives': [\r\n      '@return a read-only {@code RandomAccess} list containing the lowest {@code k} elements in ascending order',\r\n      '@return a fixed-size {@code RandomAccess} list of the smallest {@code k} elements in ascending order',\r\n      '@return an unmodifiable {@code RandomAccess} list with the {@code k} smallest elements in ascending order'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@return an immutable {@code RandomAccess} list of the {@code k} least\\n    elements in ascending order',\r\n    'alternatives': [\r\n      '@return a read-only {@code RandomAccess} list containing the lowest {@code k} elements in ascending order',\r\n      '@return a fixed-size {@code RandomAccess} list of the smallest {@code k} elements in ascending order',\r\n      '@return an unmodifiable {@code RandomAccess} list with the {@code k} smallest elements in ascending order'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@return an immutable {@code RandomAccess} list of the {@code k} greatest\\n    elements in <i>descending order</i>',\r\n    'alternatives': [\r\n      '@return a read-only {@code RandomAccess} list containing the highest {@code k} elements in <i>descending order</i>',\r\n      '@return a fixed-size {@code RandomAccess} list of the largest {@code k} elements in <i>descending order</i>',\r\n      '@return an unmodifiable {@code RandomAccess} list with the {@code k} largest elements in <i>descending order</i>'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@return an immutable {@code RandomAccess} list of the {@code k} greatest\\n    elements in <i>descending order</i>',\r\n    'alternatives': [\r\n      '@return a read-only {@code RandomAccess} list containing the highest {@code k} elements in <i>descending order</i>',\r\n      '@return a fixed-size {@code RandomAccess} list of the largest {@code k} elements in <i>descending order</i>',\r\n      '@return an unmodifiable {@code RandomAccess} list with the {@code k} largest elements in <i>descending order</i>'\r\n    ]\r\n  }\r\n]"