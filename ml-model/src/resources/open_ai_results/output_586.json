"output=[\r\n  {\r\n    'tag': '@return vertices of the convex hull',\r\n    'alternatives': [\r\n      '@return points forming the convex hull',\r\n      '@return vertices that make up the convex hull',\r\n      '@return the convex hull's vertex data',\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@return the region enclosed by the convex hull',\r\n    'alternatives': [\r\n      '@return area enclosed by the convex hull',\r\n      '@return the bounded region of the convex hull',\r\n      '@return the region that is covered by the convex hull',\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@throws InsufficientDataException if the number of vertices is not enough to\\nbuild a region in the respective space',\r\n    'alternatives': [\r\n      '@throws InsufficientDataException when there are too few vertices to create a region in the given space',\r\n      '@throws InsufficientDataException if the vertex count is insufficient to construct a region in the specified space',\r\n      '@throws InsufficientDataException if the number of vertices provided is not suitable for building a region in the respective space',\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param lower lower angular bound of the arc',\r\n    'alternatives': [\r\n      '@param lower the lower limit of the arc's angular range',\r\n      '@param lower the minimum angle for the arc',\r\n      '@param lower the starting angle of the arc',\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param upper upper angular bound of the arc',\r\n    'alternatives': [\r\n      '@param upper the upper limit of the arc's angular range',\r\n      '@param upper the maximum angle for the arc',\r\n      '@param upper the ending angle of the arc',\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param tolerance tolerance below which close sub-arcs are merged together',\r\n    'alternatives': [\r\n      '@param tolerance the threshold at which close sub-arcs are combined',\r\n      '@param tolerance the value below which adjacent sub-arcs are merged',\r\n      '@param tolerance the maximum allowed difference for merging close sub-arcs',\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@return the built tree',\r\n    'alternatives': [\r\n      '@return the constructed tree',\r\n      '@return the tree that was created',\r\n      '@return the resulting tree',\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@throws NumberIsTooLargeException if lower is greater than upper',\r\n    'alternatives': [\r\n      '@throws NumberIsTooLargeException when the lower value is larger than the upper value',\r\n      '@throws NumberIsTooLargeException if the lower bound exceeds the upper bound',\r\n      '@throws NumberIsTooLargeException if the value of lower is greater than the value of upper',\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@throws InconsistentStateAt2PiWrapping if the tree leaf nodes are not\\nconsistent across the \\\\( 0, 2 \\\\pi \\\\) crossing',\r\n    'alternatives': [\r\n      '@throws InconsistentStateAt2PiWrapping when the tree's leaf nodes are inconsistent across the crossing of \\\\(0, 2 \\\\pi\\\\)',\r\n      '@throws InconsistentStateAt2PiWrapping if the leaf nodes of the tree are not consistent when crossing \\\\(0, 2 \\\\pi\\\\)',\r\n      '@throws InconsistentStateAt2PiWrapping if the tree's leaf nodes exhibit inconsistency across the \\\\(0, 2 \\\\pi\\\\) crossing',\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param root tree root',\r\n    'alternatives': [\r\n      '@param root the root of the tree',\r\n      '@param root the root node of the tree',\r\n      '@param root the starting point of the tree',\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@return first leaf node (i.e. node corresponding to the region just after 0.0 radians)',\r\n    'alternatives': [\r\n      '@return the initial leaf node (i.e. node representing the region immediately following 0.0 radians)',\r\n      '@return the first leaf node (i.e. the node that corresponds to the region right after 0.0 radians)',\r\n      '@return the leaf node that comes first (i.e. the node corresponding to the region just after 0.0 radians)',\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param root tree root',\r\n    'alternatives': [\r\n      '@param root the root of the tree',\r\n      '@param root the root node of the tree',\r\n      '@param root the starting point of the tree',\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@return last leaf node (i.e. node corresponding to the region just before \\\\( 2 \\\\pi \\\\) radians)',\r\n    'alternatives': [\r\n      '@return the final leaf node (i.e. node representing the region immediately before \\\\( 2 \\\\pi \\\\) radians)',\r\n      '@return the last leaf node (i.e. the node that corresponds to the region right before \\\\( 2 \\\\pi \\\\) radians)',\r\n      '@return the leaf node that comes last (i.e. the node corresponding to the region just before \\\\( 2 \\\\pi \\\\) radians)',\r\n    ]\r\n  },\r\n  {\r\n    'tag': \"@return smallest internal node (i.e. first after 0.0 radians, in trigonometric direction),\\nor null if there are no internal nodes (i.e. the set is either empty or covers the full circle)\",\r\n    'alternatives': [\r\n      \"@return the smallest internal node (i.e. the first one after 0.0 radians, in the direction of trigonometry). Return null if there are no internal nodes (i.e. the set is empty or covers the full circle)\",\r\n      \"@return the first internal node after 0.0 radians, according to the trigonometric direction. If there are no internal nodes (i.e. the set is either empty or covers the full circle), then null is returned\",\r\n      \"@return the internal node that comes first in the trigonometric order after 0.0 radians. If there are no internal nodes (i.e. the set is either empty or covers the full circle), null is returned\",\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param node internal node to check',\r\n    'alternatives': [\r\n      '@param node the internal node to validate',\r\n      '@param node the internal node that needs to be verified',\r\n      '@param node the node to check if it is an internal node',\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@return true if the node corresponds to the start angle of an arc',\r\n    'alternatives': [\r\n      '@return true if the node represents the beginning angle of an arc',\r\n      '@return true if the node is the starting point of an arc',\r\n      '@return true if the node is associated with the initial angle of an arc',\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param node internal node to check',\r\n    'alternatives': [\r\n      '@param node the internal node to validate',\r\n      '@param node the internal node that needs to be verified',\r\n      '@param node the node to check if it is an internal node',\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@return true if the node corresponds to the end angle of an arc',\r\n    'alternatives': [\r\n      '@return true if the node represents the ending angle of an arc',\r\n      '@return true if the node is the ending point of an arc',\r\n      '@return true if the node is associated with the final angle of an arc',\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param node current internal node',\r\n    'alternatives': [\r\n      '@param node the current internal node',\r\n      '@param node the internal node being processed',\r\n      '@param node the node that is currently being examined',\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@return next internal node in trigonometric order, or null\\nif this is the last internal node',\r\n    'alternatives': [\r\n      '@return the subsequent internal node according to the trigonometric order, or null if this is the final internal node',\r\n      '@return the next internal node following the trigonometric order. If this is the last internal node, null is returned',\r\n      '@return the succeeding internal node in the trigonometric sequence, or null if this is the last internal node',\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param node current internal node',\r\n    'alternatives': [\r\n      '@param node the current internal node',\r\n      '@param node the internal node being processed',\r\n      '@param node the node that is currently being examined',\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@return previous internal node in trigonometric order, or null\\nif this is the first internal node',\r\n    'alternatives': [\r\n      '@return the preceding internal node according to the trigonometric order, or null if this is the initial internal node',\r\n      '@return the previous internal node in the trigonometric sequence. If this is the first internal node, null is returned',\r\n      '@return the internal node that comes before in the trigonometric order, or null if this is the starting internal node',\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param node internal node at which the sub-tree starts',\r\n    'alternatives': [\r\n      '@param node the internal node where the sub-tree begins',\r\n      '@param node the internal node marking the start of the sub-tree',\r\n      '@param node the node from which the sub-tree originates',\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@return leaf node just before the internal node',\r\n    'alternatives': [\r\n      '@return the leaf node immediately preceding the internal node',\r\n      '@return the last leaf node before the internal node',\r\n      '@return the leaf node that comes right before the internal node',\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param node internal node at which the sub-tree starts',\r\n    'alternatives': [\r\n      '@param node the internal node where the sub-tree begins',\r\n      '@param node the internal node marking the start of the sub-tree',\r\n      '@param node the node from which the sub-tree originates',\r\n    ]\r\n  }\r\n]\n"