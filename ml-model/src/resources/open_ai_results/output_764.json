"output=[\n  {\n    'tag': '@param order rotation order to use',\n    'alternatives': [\n        '@param order rotation order to be utilized',\n        '@param order utilize rotation order',\n        '@param order use rotation order',\n        '@param use rotation order',\n        '@param rotation order to use'\n    ]\n  },\n  {\n    'tag': '@return an array of three angles, in the order specified by the set',\n    'alternatives': [\n        '@return an array containing three angles, arranged according to the specified order',\n        '@return an array with three angles in the order specified by the set',\n        '@return an array that contains three angles, following the order specified by the set',\n        '@return an array holding three angles, ordered as specified by the set',\n        '@return an array representing three angles, in the specified set order'\n    ]\n  },\n  {\n    'tag': '@throws CardanEulerSingularityException if the rotation is\\nsingular with respect to the angles set specified',\n    'alternatives': [\n        '@throws CardanEulerSingularityException when the rotation is singular with respect to the specified angle set',\n        '@throws CardanEulerSingularityException if the rotation is singular in relation to the angles specified in the set',\n        '@throws CardanEulerSingularityException if the rotation exhibits singularity with respect to the specified angle set',\n        '@throws CardanEulerSingularityException if the rotation is singular with respect to the specified angle set',\n        '@throws CardanEulerSingularityException when the rotation is singular concerning the specified angle set'\n    ]\n  },\n  {\n    'tag': '@param convention convention to use for the semantics of the angle',\n    'alternatives': [\n        '@param convention angle semantics convention to be adopted',\n        '@param convention use convention for angle semantics',\n        '@param convention choose convention for angle semantics',\n        '@param use convention for angle semantics',\n        '@param angle semantics convention to use'\n    ]\n  },\n  {\n    'tag': '@return new array',\n    'alternatives': [\n        '@return fresh array',\n        '@return array',\n        '@return a new array',\n        '@return an updated array',\n        '@return newly created array'\n    ]\n  },\n  {\n    'tag': '@param x abscissa',\n    'alternatives': [\n        '@param x horizontal coordinate',\n        '@param x x-coordinate',\n        '@param x value for the abscissa',\n        '@param x point abscissa',\n        '@param x value along the x-axis'\n    ]\n  },\n  {\n    'tag': '@param y ordinate',\n    'alternatives': [\n        '@param y vertical coordinate',\n        '@param y y-coordinate',\n        '@param y value for the ordinate',\n        '@param y point ordinate',\n        '@param y value along the y-axis'\n    ]\n  },\n  {\n    'tag': '@param z height',\n    'alternatives': [\n        '@param z elevation',\n        '@param z z-coordinate',\n        '@param z value for the height',\n        '@param z point height',\n        '@param z value along the z-axis'\n    ]\n  },\n  {\n    'tag': '@return a constant vector',\n    'alternatives': [\n        '@return an unchanging vector',\n        '@return vector that remains constant',\n        '@return vector with constant values',\n        '@return vector that does not vary',\n        '@return fixed vector'\n    ]\n  },\n  {\n    'tag': '@param weight new weight for edge',\n    'alternatives': [\n        '@param weight modification for the edge weight',\n        '@param weight set new weight for edge',\n        '@param weight adjust weight for edge',\n        '@param weight change weight for edge',\n        '@param weight update weight for edge'\n    ]\n  },\n  {\n    'tag': '@param dim This is the dimension of the hypercube.',\n    'alternatives': [\n        '@param dim The hypercube dimension.',\n        '@param dim Dimension of the hypercube.',\n        '@param dim Hypercube dimension.',\n        '@param dim Value indicating the hypercube dimension.',\n        '@param dim This parameter represents the hypercube dimension.'\n    ]\n  },\n  {\n    'tag': '@param size number of vertices to be generated',\n    'alternatives': [\n        '@param size number of vertices to create',\n        '@param size generate a specific number of vertices',\n        '@param size determine the amount of vertices to be generated',\n        '@param generate a number of vertices',\n        '@param size specify the vertex quantity to be generated'\n    ]\n  },\n  {\n    'tag': '@param size number of vertices to be generated.',\n    'alternatives': [\n        '@param size number of vertices to create.',\n        '@param size generate a specific number of vertices.',\n        '@param size determine the amount of vertices to be generated.',\n        '@param generate a number of vertices.',\n        '@param size specify the vertex quantity to be generated.'\n    ]\n  },\n  {\n    'tag': '@param size number of vertices to be generated.',\n    'alternatives': [\n        '@param size number of vertices to create.',\n        '@param size generate a specific number of vertices.',\n        '@param size determine the amount of vertices to be generated.',\n        '@param generate a number of vertices.',\n        '@param size specify the vertex quantity to be generated.'\n    ]\n  },\n  {\n    'tag': '@param inwardSpokes if <code>true</code> and graph is directed, spokes\\nare oriented from rim to hub; else from hub to rim.',\n    'alternatives': [\n        '@param inwardSpokes if <code>true</code> and the graph is directed, spokes\\nwill be oriented from the rim to the hub; otherwise, they will be oriented from the hub to the rim.',\n        '@param inwardSpokes if <code>true</code> and the graph is directed, the spokes\\nwill point from the rim to the hub; otherwise, they will point from the hub to the rim.',\n        '@param inwardSpokes if <code>true</code> and graph is directed, the orientation of spokes\\nwill be from rim to hub; otherwise, it will be from hub to rim.',\n        '@param inwardSpokes if <code>true</code> and the graph is directed, the spokes\\nare oriented from rim to hub; otherwise, they are oriented from hub to rim.',\n        '@param inwardSpokes if <code>true</code> and graph is directed, spokes\\nwill be oriented from rim to hub; otherwise, from hub to rim.'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException ',\n    'alternatives': [\n        '@throws IllegalArgumentException',\n        '@throws IllegalArgumentException if input is invalid',\n        '@throws IllegalArgumentException for incorrect input format',\n        '@throws IllegalArgumentException when the argument does not meet the requirements',\n        '@throws IllegalArgumentException if the parameter is not valid'\n    ]\n  },\n  {\n    'tag': '@param rows the number of rows',\n    'alternatives': [\n        '@param rows number of rows',\n        '@param rows quantity of rows',\n        '@param rows count of rows',\n        '@param rows determine the row count',\n        '@param rows specify the number of rows'\n    ]\n  },\n  {\n    'tag': '@param cols the number of columns',\n    'alternatives': [\n        '@param cols number of columns',\n        '@param cols quantity of columns',\n        '@param cols count of columns',\n        '@param cols determine the column count',\n        '@param cols specify the number of columns'\n    ]\n  },\n  {\n    'tag': '@param target receives the generated edges and vertices; if this is\\nnon-empty on entry, the result will be a disconnected graph since\\ngenerated elements will not be connected to existing elements',\n    'alternatives': [\n        '@param target target to store the generated edges and vertices; if this is not empty when the function is called, the resulting graph will be disconnected because newly created elements will not be connected to existing ones',\n        '@param target the container that will hold the generated edges and vertices; if this is not empty on function entry, the resulting graph will be disconnected as the generated elements will not be connected to the existing ones',\n        '@param target container to receive the generated edges and vertices; if this is not empty when the function is called, the resulting graph will be disconnected because the generated elements will not be connected to the existing ones',\n        '@param target the object that will contain the generated edges and vertices; if this is not empty on entry, the resulting graph will be disconnected since the generated elements will not be connected to the existing ones',\n        '@param target storage for the generated edges and vertices; if this is not empty when the function is called, the resulting graph will be disconnected because the newly created elements will not be connected to the existing elements'\n    ]\n  }\n]"