"output = [\n  {\n    'tag': '@param array a <i>nonempty</i> array of {@code short} values',\n    'alternatives': [\n      '@param array an <i>nonempty</i> array of {@code short} values',\n      '@param a <i>nonempty</i> {@code short} values array',\n      '@param a <i>nonempty</i> array of {@code short} values',\n      '@param array a <i>nonempty</i> array of {@code short} numbers',\n      '@param array a <i>nonempty</i> collection of {@code short} values'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if {@code minLength} or {@code padding} is\\n    negative',\n    'alternatives': [\n      '@throws IllegalArgumentException if {@code minLength} or {@code padding} are\\n    negative',\n      '@throws IllegalArgumentException if there is a negative value for {@code minLength} or {@code padding}',\n      '@throws IllegalArgumentException if the values of {@code minLength} or {@code padding} are negative',\n      '@throws IllegalArgumentException if either {@code minLength} or {@code padding} is negative',\n      '@throws IllegalArgumentException if the values of {@code minLength} or {@code padding} are less than zero'\n    ]\n  },\n  {\n    'tag': '@return an empty MultiSet',\n    'alternatives': [\n      '@return an empty MultiSet data structure',\n      '@return a MultiSet that contains no elements',\n      '@return an empty MultiSet collection',\n      '@return a MultiSet with no items',\n      '@return a MultiSet structure that is empty'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if map is null',\n    'alternatives': [\n      '@throws NullPointerException if the map is null',\n      '@throws NullPointerException if the provided map is null',\n      '@throws NullPointerException if the value of map is null',\n      '@throws NullPointerException if the argument map is null',\n      '@throws NullPointerException if map parameter has a null value'\n    ]\n  },\n  {\n    'tag': '@param map the map to decorate, must not be null',\n    'alternatives': [\n      '@param map the map to enhance, cannot be null',\n      '@param map the map to modify, should not be null',\n      '@param map the map to adorn, must have a non-null value',\n      '@param map the map to augment, should not have a null value',\n      '@param map the map to supplement, must not be null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if set is null',\n    'alternatives': [\n      '@throws NullPointerException if the set is null',\n      '@throws NullPointerException if the provided set is null',\n      '@throws NullPointerException if the value of set is null',\n      '@throws NullPointerException if the argument set is null',\n      '@throws NullPointerException if set parameter has a null value'\n    ]\n  },\n  {\n    'tag': '@param set the list to decorate, must not be null',\n    'alternatives': [\n      '@param set the list to enhance, cannot be null',\n      '@param set the list to modify, should not be null',\n      '@param set the list to adorn, must have a non-null value',\n      '@param set the list to augment, should not have a null value',\n      '@param set the list to supplement, must not be null'\n    ]\n  },\n  {\n    'tag': '@param predicate predicate to switch on, not null',\n    'alternatives': [\n      '@param predicate the condition to switch upon, not null',\n      '@param predicate the switch condition, cannot be null',\n      '@param predicate the condition to toggle, must not be null',\n      '@param predicate the condition to change, not null',\n      '@param predicate the criterion to switch, not null'\n    ]\n  },\n  {\n    'tag': '@param trueClosure closure used if true, not null',\n    'alternatives': [\n      '@param trueClosure closure executed when true, not null',\n      '@param trueClosure closure invoked if true, not null',\n      '@param trueClosure closure applied if true, not null',\n      '@param trueClosure closure triggered if true, not null',\n      '@param trueClosure closure performed when true, not null'\n    ]\n  },\n  {\n    'tag': '@param predicate predicate to switch on, not null',\n    'alternatives': [\n      '@param predicate the condition to switch upon, not null',\n      '@param predicate the switch condition, cannot be null',\n      '@param predicate the condition to toggle, must not be null',\n      '@param predicate the condition to change, not null',\n      '@param predicate the criterion to switch, not null'\n    ]\n  },\n  {\n    'tag': '@param trueClosure closure used if true, not null',\n    'alternatives': [\n      '@param trueClosure closure executed when true, not null',\n      '@param trueClosure closure invoked if true, not null',\n      '@param trueClosure closure applied if true, not null',\n      '@param trueClosure closure triggered if true, not null',\n      '@param trueClosure closure performed when true, not null'\n    ]\n  },\n  {\n    'tag': '@param falseClosure closure used if false, not null',\n    'alternatives': [\n      '@param falseClosure closure executed when false, not null',\n      '@param falseClosure closure invoked if false, not null',\n      '@param falseClosure closure applied if false, not null',\n      '@param falseClosure closure triggered if false, not null',\n      '@param falseClosure closure performed when false, not null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if either argument is null',\n    'alternatives': [\n      '@throws NullPointerException if any of the arguments is null',\n      '@throws NullPointerException if at least one of the arguments is null',\n      '@throws NullPointerException if either argument has a null value',\n      '@throws NullPointerException if one of the arguments is null',\n      '@throws NullPointerException if one of the parameters is null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if any argument is null',\n    'alternatives': [\n      '@throws NullPointerException if any of the arguments is null',\n      '@throws NullPointerException if at least one of the arguments is null',\n      '@throws NullPointerException if any argument has a null value',\n      '@throws NullPointerException if one of the arguments is null',\n      '@throws NullPointerException if one of the parameters is null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if the predicate is null',\n    'alternatives': [\n      '@throws NullPointerException if the condition is null',\n      '@throws NullPointerException if the switch is null',\n      '@throws NullPointerException if the criterion is null',\n      '@throws NullPointerException if the argument predicate is null',\n      '@throws NullPointerException if the value of the predicate is null'\n    ]\n  },\n  {\n    'tag': '@param predicate the predicate to decorate, not null',\n    'alternatives': [\n      '@param predicate the predicate to enhance, not null',\n      '@param predicate the predicate to modify, not null',\n      '@param predicate the predicate to adorn, cannot be null',\n      '@param predicate the predicate to augment, not null',\n      '@param predicate the predicate to supplement, not null'\n    ]\n  },\n  {\n    'tag': '@param values the values to add to the collection at the key, null ignored',\n    'alternatives': [\n      '@param values the values to append to the collection at the key, null ignored',\n      '@param values the values to insert into the collection at the key, null ignored',\n      '@param values the values to include in the collection at the key, null ignored',\n      '@param values the values to place in the collection at the key, null ignored',\n      '@param values the values to add to the set at the key, null ignored'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if list or predicate is null',\n    'alternatives': [\n      '@throws NullPointerException if the list or predicate is null',\n      '@throws NullPointerException if either the list or predicate is null',\n      '@throws NullPointerException if the value of list or predicate is null',\n      '@throws NullPointerException if any of the arguments list or predicate is null',\n      '@throws NullPointerException if either list or predicate parameters have a null value'\n    ]\n  },\n  {\n    'tag': '@param list the list to decorate, must not be null',\n    'alternatives': [\n      '@param list the list to enhance, cannot be null',\n      '@param list the list to modify, should not be null',\n      '@param list the list to adorn, must have a non-null value',\n      '@param list the list to augment, should not have a null value',\n      '@param list the list to supplement, must not be null'\n    ]\n  },\n  {\n    'tag': '@param predicate the predicate to use for validation, must not be null',\n    'alternatives': [\n      '@param predicate the predicate to utilize for validation, must not be null',\n      '@param predicate the predicate to apply for validation, must have a non-null value',\n      '@param predicate the predicate to employ for validation, should not be null',\n      '@param predicate the predicate to use for verification, must not have a null value',\n      '@param predicate the predicate to utilize for validation, should not be null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if list or predicate is null',\n    'alternatives': [\n      '@throws NullPointerException if the list or predicate is null',\n      '@throws NullPointerException if either the list or predicate is null',\n      '@throws NullPointerException if the value of list or predicate is null',\n      '@throws NullPointerException if any of the arguments list or predicate is null',\n      '@throws NullPointerException if either list or predicate parameters have a null value'\n    ]\n  },\n  {\n    'tag': '@param list the list to decorate, must not be null',\n    'alternatives': [\n      '@param list the list to enhance, cannot be null',\n      '@param list the list to modify, should not be null',\n      '@param list the list to adorn, must have a non-null value',\n      '@param list the list to augment, should not have a null value',\n      '@param list the list to supplement, must not be null'\n    ]\n  },\n  {\n    'tag': '@param predicate the predicate to use for validation, must not be null',\n    'alternatives': [\n      '@param predicate the predicate to utilize for validation, must not be null',\n      '@param predicate the predicate to apply for validation, must have a non-null value',\n      '@param predicate the predicate to employ for validation, should not be null',\n      '@param predicate the predicate to use for verification, must not have a null value',\n      '@param predicate the predicate to utilize for validation, should not be null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if <code>array</code> is <code>null</code>',\n    'alternatives': [\n      '@throws NullPointerException if <code>array</code> has a <code>null</code> value',\n      '@throws NullPointerException if <code>array</code> is a <code>null</code> object',\n      '@throws NullPointerException if <code>array</code> is equal to <code>null</code>',\n      '@throws NullPointerException if the value of <code>array</code> is <code>null</code>',\n      '@throws NullPointerException if <code>array</code> has no value'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if <code>array</code> is <code>null</code>',\n    'alternatives': [\n      '@throws NullPointerException if <code>array</code> has a <code>null</code> value',\n      '@throws NullPointerException if <code>array</code> is a <code>null</code> object',\n      '@throws NullPointerException if <code>array</code> is equal to <code>null</code>',\n      '@throws NullPointerException if the value of <code>array</code> is <code>null</code>',\n      '@throws NullPointerException if <code>array</code> has no value'\n    ]\n  }\n]"