"[\n  {\n    \"tag\": \"@param maxImpl the StorelessUnivariateStatistic instance to use for\\n       computing the maximum\",\n    \"alternatives\": [\n      \"@param maxImpl the StorelessUnivariateStatistic implementation to be used for\\n       calculating the maximum\",\n      \"@param maxImpl the StorelessUnivariateStatistic instance for computing the maximum\",\n      \"@param maxImpl the StorelessUnivariateStatistic object used to compute the maximum\",\n      \"@param maxImpl the StorelessUnivariateStatistic instance responsible for computing the maximum\",\n      \"@param maxImpl the StorelessUnivariateStatistic implementation to compute the maximum\"\n    ]\n  },\n  {\n    \"tag\": \"@throws MathIllegalStateException if data has already been added (i.e if n > 0)\",\n    \"alternatives\": [\n      \"@throws MathIllegalStateException when data has already been added (i.e., if n > 0)\",\n      \"@throws MathIllegalStateException if the data has been added before (i.e., if n > 0)\",\n      \"@throws MathIllegalStateException if the data has already been added (i.e., when n > 0)\",\n      \"@throws MathIllegalStateException if the data has been already added (i.e., if n > 0)\",\n      \"@throws MathIllegalStateException if there is already data added (i.e., if n > 0)\"\n    ]\n  },\n  {\n    \"tag\": \"@return the StorelessUnivariateStatistic implementing the log sum\",\n    \"alternatives\": [\n      \"@return the log sum implemented by the StorelessUnivariateStatistic\",\n      \"@return the log sum calculated by the StorelessUnivariateStatistic\",\n      \"@return the log sum computed using the StorelessUnivariateStatistic\",\n      \"@return the log sum implemented by the StorelessUnivariateStatistic object\",\n      \"@return the log sum calculated with the StorelessUnivariateStatistic implementation\"\n    ]\n  },\n  {\n    \"tag\": \"@param sumLogImpl the StorelessUnivariateStatistic instance to use for\\n       computing the log sum\",\n    \"alternatives\": [\n      \"@param sumLogImpl the StorelessUnivariateStatistic implementation to be used for\\n       calculating the log sum\",\n      \"@param sumLogImpl the StorelessUnivariateStatistic instance for computing the log sum\",\n      \"@param sumLogImpl the StorelessUnivariateStatistic object used to compute the log sum\",\n      \"@param sumLogImpl the StorelessUnivariateStatistic instance responsible for computing the log sum\",\n      \"@param sumLogImpl the StorelessUnivariateStatistic implementation to compute the log sum\"\n    ]\n  },\n  {\n    \"tag\": \"@throws MathIllegalStateException if data has already been added (i.e if n > 0)\",\n    \"alternatives\": [\n      \"@throws MathIllegalStateException when data has already been added (i.e., if n > 0)\",\n      \"@throws MathIllegalStateException if the data has been added before (i.e., if n > 0)\",\n      \"@throws MathIllegalStateException if the data has already been added (i.e., when n > 0)\",\n      \"@throws MathIllegalStateException if the data has been already added (i.e., if n > 0)\",\n      \"@throws MathIllegalStateException if there is already data added (i.e., if n > 0)\"\n    ]\n  },\n  {\n    \"tag\": \"@return the StorelessUnivariateStatistic implementing the geometric mean\",\n    \"alternatives\": [\n      \"@return the geometric mean implemented by the StorelessUnivariateStatistic\",\n      \"@return the geometric mean calculated by the StorelessUnivariateStatistic\",\n      \"@return the geometric mean computed using the StorelessUnivariateStatistic\",\n      \"@return the geometric mean implemented by the StorelessUnivariateStatistic object\",\n      \"@return the geometric mean calculated with the StorelessUnivariateStatistic implementation\"\n    ]\n  },\n  {\n    \"tag\": \"@param geoMeanImpl the StorelessUnivariateStatistic instance to use for\\n       computing the geometric mean\",\n    \"alternatives\": [\n      \"@param geoMeanImpl the StorelessUnivariateStatistic implementation to be used for\\n       calculating the geometric mean\",\n      \"@param geoMeanImpl the StorelessUnivariateStatistic instance for computing the geometric mean\",\n      \"@param geoMeanImpl the StorelessUnivariateStatistic object used to compute the geometric mean\",\n      \"@param geoMeanImpl the StorelessUnivariateStatistic instance responsible for computing the geometric mean\",\n      \"@param geoMeanImpl the StorelessUnivariateStatistic implementation to compute the geometric mean\"\n    ]\n  },\n  {\n    \"tag\": \"@throws MathIllegalStateException if data has already been added (i.e if n > 0)\",\n    \"alternatives\": [\n      \"@throws MathIllegalStateException when data has already been added (i.e., if n > 0)\",\n      \"@throws MathIllegalStateException if the data has been added before (i.e., if n > 0)\",\n      \"@throws MathIllegalStateException if the data has already been added (i.e., when n > 0)\",\n      \"@throws MathIllegalStateException if the data has been already added (i.e., if n > 0)\",\n      \"@throws MathIllegalStateException if there is already data added (i.e., if n > 0)\"\n    ]\n  },\n  {\n    \"tag\": \"@return the StorelessUnivariateStatistic implementing the mean\",\n    \"alternatives\": [\n      \"@return the mean implemented by the StorelessUnivariateStatistic\",\n      \"@return the mean calculated by the StorelessUnivariateStatistic\",\n      \"@return the mean computed using the StorelessUnivariateStatistic\",\n      \"@return the mean implemented by the StorelessUnivariateStatistic object\",\n      \"@return the mean calculated with the StorelessUnivariateStatistic implementation\"\n    ]\n  },\n  {\n    \"tag\": \"@param meanImpl the StorelessUnivariateStatistic instance to use for\\n       computing the mean\",\n    \"alternatives\": [\n      \"@param meanImpl the StorelessUnivariateStatistic implementation to be used for\\n       calculating the mean\",\n      \"@param meanImpl the StorelessUnivariateStatistic instance for computing the mean\",\n      \"@param meanImpl the StorelessUnivariateStatistic object used to compute the mean\",\n      \"@param meanImpl the StorelessUnivariateStatistic instance responsible for computing the mean\",\n      \"@param meanImpl the StorelessUnivariateStatistic implementation to compute the mean\"\n    ]\n  },\n  {\n    \"tag\": \"@throws MathIllegalStateException if data has already been added (i.e if n > 0)\",\n    \"alternatives\": [\n      \"@throws MathIllegalStateException when data has already been added (i.e., if n > 0)\",\n      \"@throws MathIllegalStateException if the data has been added before (i.e., if n > 0)\",\n      \"@throws MathIllegalStateException if the data has already been added (i.e., when n > 0)\",\n      \"@throws MathIllegalStateException if the data has been already added (i.e., if n > 0)\",\n      \"@throws MathIllegalStateException if there is already data added (i.e., if n > 0)\"\n    ]\n  },\n  {\n    \"tag\": \"@return the StorelessUnivariateStatistic implementing the variance\",\n    \"alternatives\": [\n      \"@return the variance implemented by the StorelessUnivariateStatistic\",\n      \"@return the variance calculated by the StorelessUnivariateStatistic\",\n      \"@return the variance computed using the StorelessUnivariateStatistic\",\n      \"@return the variance implemented by the StorelessUnivariateStatistic object\",\n      \"@return the variance calculated with the StorelessUnivariateStatistic implementation\"\n    ]\n  },\n  {\n    \"tag\": \"@param varianceImpl the StorelessUnivariateStatistic instance to use for\\n       computing the variance\",\n    \"alternatives\": [\n      \"@param varianceImpl the StorelessUnivariateStatistic implementation to be used for\\n       calculating the variance\",\n      \"@param varianceImpl the StorelessUnivariateStatistic instance for computing the variance\",\n      \"@param varianceImpl the StorelessUnivariateStatistic object used to compute the variance\",\n      \"@param varianceImpl the StorelessUnivariateStatistic instance responsible for computing the variance\",\n      \"@param varianceImpl the StorelessUnivariateStatistic implementation to compute the variance\"\n    ]\n  },\n  {\n    \"tag\": \"@throws MathIllegalStateException if data has already been added (i.e if n > 0)\",\n    \"alternatives\": [\n      \"@throws MathIllegalStateException when data has already been added (i.e., if n > 0)\",\n      \"@throws MathIllegalStateException if the data has been added before (i.e., if n > 0)\",\n      \"@throws MathIllegalStateException if the data has already been added (i.e., when n > 0)\",\n      \"@throws MathIllegalStateException if the data has been already added (i.e., if n > 0)\",\n      \"@throws MathIllegalStateException if there is already data added (i.e., if n > 0)\"\n    ]\n  },\n  {\n    \"tag\": \"@throws MathIllegalStateException if data has been added\",\n    \"alternatives\": [\n      \"@throws MathIllegalStateException if the data has been added\",\n      \"@throws MathIllegalStateException when data has been added\",\n      \"@throws MathIllegalStateException if there is data added\",\n      \"@throws MathIllegalStateException if there are added data\",\n      \"@throws MathIllegalStateException when the data has been added\"\n    ]\n  },\n  {\n    \"tag\": \"@return a copy of this\",\n    \"alternatives\": [\n      \"@return a duplicate of this\",\n      \"@return a cloned version of this\",\n      \"@return a replica of this\",\n      \"@return this object copied\",\n      \"@return this object duplicated\"\n    ]\n  },\n  {\n    \"tag\": \"@param source SummaryStatistics to copy\",\n    \"alternatives\": [\n      \"@param source the SummaryStatistics to be copied\",\n      \"@param source the SummaryStatistics instance to duplicate\",\n      \"@param source the original SummaryStatistics to replicate\",\n      \"@param source the SummaryStatistics object to clone\",\n      \"@param source the SummaryStatistics implementation to be copied\"\n    ]\n  },\n  {\n    \"tag\": \"@param dest SummaryStatistics to copy to\",\n    \"alternatives\": [\n      \"@param dest the SummaryStatistics to copy to\",\n      \"@param dest the target SummaryStatistics for copying\",\n      \"@param dest the final SummaryStatistics after copy\",\n      \"@param dest the SummaryStatistics instance to duplicate to\",\n      \"@param dest the SummaryStatistics object to clone to\"\n    ]\n  },\n  {\n    \"tag\": \"@param original the {@code SummaryStatistics} instance to copy\",\n    \"alternatives\": [\n      \"@param original the instance of {@code SummaryStatistics} to be copied\",\n      \"@param original the {@code SummaryStatistics} object to duplicate\",\n      \"@param original the source {@code SummaryStatistics} to replicate\",\n      \"@param original the original {@code SummaryStatistics} to be copied\",\n      \"@param original the implementation of {@code SummaryStatistics} to copy\"\n    ]\n  },\n  {\n    \"tag\": \"@param v the value to be added\",\n    \"alternatives\": [\n      \"@param v the value to add\",\n      \"@param v the value for addition\",\n      \"@param v the value that will be added\",\n      \"@param v the value to be included\",\n      \"@param v the value to append\"\n    ]\n  },\n  {\n    \"tag\": \"@throws MathIllegalStateException if there are no elements stored\",\n    \"alternatives\": [\n      \"@throws MathIllegalStateException when there are no stored elements\",\n      \"@throws MathIllegalStateException if no elements are stored\",\n      \"@throws MathIllegalStateException if there are no stored elements\",\n      \"@throws MathIllegalStateException if the stored elements are empty\",\n      \"@throws MathIllegalStateException when there are no elements stored\"\n    ]\n  },\n  {\n    \"tag\": \"@param v the value to replace the most recent stored value\",\n    \"alternatives\": [\n      \"@param v the value for replacing the most recent stored value\",\n      \"@param v the value to substitute the most recent stored value\",\n      \"@param v the value to overwrite the most recent stored value\",\n      \"@param v the value to supplant the most recent stored value\",\n      \"@param v the value that will replace the most recent stored value\"\n    ]\n  },\n  {\n    \"tag\": \"@return replaced value\",\n    \"alternatives\": [\n      \"@return the value that has been replaced\",\n      \"@return the value after replacement\",\n      \"@return the replaced value\",\n      \"@return the value that was exchanged\",\n      \"@return the new value\"\n    ]\n  },\n  {\n    \"tag\": \"@throws MathIllegalStateException if there are no elements stored\",\n    \"alternatives\": [\n      \"@throws MathIllegalStateException when there are no stored elements\",\n      \"@throws MathIllegalStateException if no elements are stored\",\n      \"@throws MathIllegalStateException if there are no stored elements\",\n      \"@throws MathIllegalStateException if the stored elements are empty\",\n      \"@throws MathIllegalStateException when there are no elements stored\"\n    ]\n  },\n  {\n    \"tag\": \"@return The mean or Double.NaN if no values have been added.\",\n    \"alternatives\": [\n      \"@return The calculated mean or Double.NaN if no values have been added.\",\n      \"@return The computed mean or Double.NaN if no values have been added.\",\n      \"@return The mean value or Double.NaN if there are no added values.\",\n      \"@return The mean or Double.NaN when no values have been added.\",\n      \"@return The mean, or Double.NaN if no values have been added.\"\n    ]\n  }\n]"