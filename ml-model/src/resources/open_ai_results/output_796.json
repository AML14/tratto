"[{'tag': '@param initialSize the initial size of the ArrayList',\n  'alternatives': ['@param initialSize the initial size of the ArrayList',\n   '@param the initial size of the ArrayList is passed as initialSize',\n   '@param the initial size of the list is given as initialSize',\n   '@param the initial size of the ArrayList, referred to as initialSize',\n   '@param the ArrayList is initialized with the initial size provided as initialSize']},\n {'tag': '@throws IllegalArgumentException if initial size is invalid',\n  'alternatives': ['@throws IllegalArgumentException if the initial size is not valid',\n   '@throws IllegalArgumentException in case of an invalid initial size',\n   '@throws IllegalArgumentException when the initial size is considered invalid',\n   '@throws IllegalArgumentException if the provided initial size is invalid',\n   '@throws IllegalArgumentException if the initial size does not meet the requirements']},\n {'tag': '@throws NullPointerException if any key or value in {@code multimap} is\\n    null',\n  'alternatives': ['@throws NullPointerException if any key or value in {@code multimap} is null',\n   '@throws NullPointerException if there is a null key or value in {@code multimap}',\n   '@throws NullPointerException if any key or value in the {@code multimap} is null',\n   '@throws NullPointerException if any key or value in the multimap is null',\n   '@throws NullPointerException if any key or value in the multimap, denoted as {@code multimap}, is null']},\n {'tag': '@throws NullPointerException if any key, value, or entry is null',\n  'alternatives': ['@throws NullPointerException if any key, value, or entry is null',\n   '@throws NullPointerException if there is a null key, value, or entry',\n   '@throws NullPointerException if any key, value, or entry becomes null',\n   '@throws NullPointerException if any key, value, or entry is set to null',\n   '@throws NullPointerException if any key, value, or entry is found to be null']},\n {'tag': '@param keyComparator the comparator that determines the key ordering',\n  'alternatives': ['@param keyComparator the comparator that specifies the ordering of the keys',\n   '@param keyComparator is the comparator used to order the keys',\n   '@param the keyComparator defines the order of the keys',\n   '@param the ordering of the keys is determined by the keyComparator',\n   '@param the key ordering is established by the keyComparator']},\n {'tag': '@param valueComparator the comparator that determines the value ordering',\n  'alternatives': ['@param valueComparator the comparator that specifies the ordering of the values',\n   '@param valueComparator is the comparator used to order the values',\n   '@param the valueComparator defines the order of the values',\n   '@param the ordering of the values is determined by the valueComparator',\n   '@param the value ordering is established by the valueComparator']},\n {'tag': '@param multimap the multimap whose contents are copied to this multimap',\n  'alternatives': ['@param multimap the multimap from which the contents are copied',\n   '@param the multimap that is used as the source for the copy of contents',\n   '@param the multimap, referred to as multimap, is the source of the content copy',\n   '@param the contents of the multimap are copied from the provided multimap',\n   '@param multimap is the source multimap from which the contents are copied']},\n {'tag': '@return a new {@code TreeSet} containing a collection of values for one\\n    key',\n  'alternatives': ['@return a new {@code TreeSet} that holds a collection of values for one key',\n   '@return a new {@code TreeSet} which contains a set of values for a single key',\n   '@return a new {@code TreeSet} that stores a collection of values for a particular key',\n   '@return a new {@code TreeSet} that includes a collection of values for one key',\n   '@return a new {@code TreeSet} that possesses a collection of values for a single key']},\n {'tag': '@param distinctElements the expected number of distinct elements',\n  'alternatives': ['@param distinctElements the expected count of unique elements',\n   '@param the expected number of diverse elements is passed as distinctElements',\n   '@param the predicted count of distinct elements is specified as distinctElements',\n   '@param the expected number of different elements is provided as distinctElements',\n   '@param the number of distinct elements expected is given as distinctElements']},\n {'tag': '@param elements the elements that the multiset should contain',\n  'alternatives': ['@param elements the elements that should be present in the multiset',\n   '@param the elements that should be included in the multiset are specified as elements',\n   '@param the multiset is expected to contain the provided elements',\n   '@param the multiset should include the elements specified as elements',\n   '@param the elements that need to be present in the multiset are indicated as elements']},\n {'tag': '@param expectedKeys the expected number of distinct keys',\n  'alternatives': ['@param expectedKeys the expected count of unique keys',\n   '@param the expected number of diverse keys is passed as expectedKeys',\n   '@param the predicted count of distinct keys is specified as expectedKeys',\n   '@param the estimated number of different keys is provided as expectedKeys',\n   '@param the number of distinct keys expected is given as expectedKeys']},\n {'tag': '@param expectedValuesPerKey the expected average number of values per key',\n  'alternatives': ['@param expectedValuesPerKey the expected average count of values per key',\n   '@param the expected average number of values per key is passed as expectedValuesPerKey',\n   '@param the predicted average count of values per key is specified as expectedValuesPerKey',\n   '@param the estimated average number of values per key is provided as expectedValuesPerKey',\n   '@param the average number of values per key expected is given as expectedValuesPerKey']},\n {'tag': '@return a new {@code LinkedHashSet} containing a collection of values for\\n    one key',\n  'alternatives': ['@return a new {@code LinkedHashSet} that holds a collection of values for one key',\n   '@return a new {@code LinkedHashSet} which contains a set of values for a single key',\n   '@return a new {@code LinkedHashSet} that stores a collection of values for a particular key',\n   '@return a new {@code LinkedHashSet} that includes a collection of values for one key',\n   '@return a new {@code LinkedHashSet} that possesses a collection of values for a single key']},\n {'tag': '@param key key to associate with values in the collection',\n  'alternatives': ['@param key the key that is associated with the values in the collection',\n   '@param the key, denoted as key, is used to associate values in the collection',\n   '@param the key to be linked with the values in the collection is passed as key',\n   '@param key is the identifier that connects with the values in the collection',\n   '@param the collection is identified by the key provided as key']},\n {'tag': '@return a new decorated set containing a collection of values for one key',\n  'alternatives': ['@return a new decorated set that holds a collection of values for one key',\n   '@return a new decorated set which contains a set of values for a single key',\n   '@return a new decorated set that stores a collection of values for a particular key',\n   '@return a new decorated set that includes a collection of values for one key',\n   '@return a new decorated set that possesses a collection of values for a single key']},\n {'tag': '@throws NullPointerException if any element is null',\n  'alternatives': ['@throws NullPointerException if any element is null',\n   '@throws NullPointerException if there is a null element',\n   '@throws NullPointerException if any of the elements is null',\n   '@throws NullPointerException if any element becomes null',\n   '@throws NullPointerException if any element is found to be null']},\n {'tag': '@throws NullPointerException if any element is null',\n  'alternatives': ['@throws NullPointerException if any element is null',\n   '@throws NullPointerException if there is a null element',\n   '@throws NullPointerException if any of the elements is null',\n   '@throws NullPointerException if any element becomes null',\n   '@throws NullPointerException if any element is found to be null']},\n {'tag': '@throws NullPointerException if any element is null',\n  'alternatives': ['@throws NullPointerException if any element is null',\n   '@throws NullPointerException if there is a null element',\n   '@throws NullPointerException if any of the elements is null',\n   '@throws NullPointerException if any element becomes null',\n   '@throws NullPointerException if any element is found to be null']},\n {'tag': '@throws NullPointerException if any element is null',\n  'alternatives': ['@throws NullPointerException if any element is null',\n   '@throws NullPointerException if there is a null element',\n   '@throws NullPointerException if any of the elements is null',\n   '@throws NullPointerException if any element becomes null',\n   '@throws NullPointerException if any element is found to be null']},\n {'tag': '@throws NullPointerException if any element is null',\n  'alternatives': ['@throws NullPointerException if any element is null',\n   '@throws NullPointerException if there is a null element',\n   '@throws NullPointerException if any of the elements is null',\n   '@throws NullPointerException if any element becomes null',\n   '@throws NullPointerException if any element is found to be null']},\n {'tag': '@throws NullPointerException if any of the first {@code n} elements of {@code elements} is\\n         null',\n  'alternatives': ['@throws NullPointerException if any of the first {@code n} elements of {@code elements} is null',\n   '@throws NullPointerException if any of the first {@code n} elements of elements is found null',\n   '@throws NullPointerException if any of the first {@code n} elements of elements is null',\n   '@throws NullPointerException if any of the first {@code n} elements of the list elements becomes null',\n   '@throws NullPointerException if any of the first {@code n} elements of the {@code elements} list is null']},\n {'tag': '@param map the map to make an immutable copy of',\n  'alternatives': ['@param map the map that will be copied as an immutable version',\n   '@param the map, referred to as map, is used to create an immutable copy',\n   '@param the map that needs to be copied as an immutable version is provided as map',\n   '@param map is the source map that will be transformed into an immutable copy',\n   '@param the map to be converted into an immutable copy is passed as map']},\n {'tag': '@return an immutable map containing those entries',\n  'alternatives': ['@return a map that is immutable and includes those entries',\n   '@return an immutable map that holds the specified entries',\n   '@return a map that is unmodifiable and contains the given entries',\n   '@return a map which is immutable and possesses the provided entries',\n   '@return an immutable map that includes the specified entries']},\n {'tag': '@return a new, empty {@code HashMap}',\n  'alternatives': ['@return a new, empty {@code HashMap} instance',\n   '@return a new, empty instance of {@code HashMap}',\n   '@return a newly created, empty {@code HashMap}',\n   '@return a fresh, empty {@code HashMap}',\n   '@return a newly instantiated, empty {@code HashMap}']}]"