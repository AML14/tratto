"output=[\n  {\n    'tag': '@param <E> the type of the elements in the bag',\n    'alternatives': [\n      '@param <E> the type of the items in the bag',\n      '@param <E> the kind of the elements in the bag',\n      '@param <E> the category of the elements in the bag',\n      '@param <E> the variety of the elements in the bag',\n      '@param <E> the class of the elements in the bag'\n    ]\n  },\n  {\n    'tag': '@return a new predicated SortedBag',\n    'alternatives': [\n      '@return a fresh predicated SortedBag',\n      '@return a brand new predicated SortedBag',\n      '@return a newly created predicated SortedBag',\n      '@return a newly generated predicated SortedBag',\n      '@return a newly formed predicated SortedBag'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if the bag contains invalid elements',\n    'alternatives': [\n      '@throws IllegalArgumentException when the bag contains illegal elements',\n      '@throws IllegalArgumentException if the bag has invalid elements',\n      '@throws IllegalArgumentException if the bag holds invalid elements',\n      '@throws IllegalArgumentException in case the bag contains invalid elements',\n      '@throws IllegalArgumentException if the bag includes invalid elements'\n    ]\n  },\n  {\n    'tag': '@return the decorated bag',\n    'alternatives': [\n      '@return the bag that has been decorated',\n      '@return the bag with decoration',\n      '@return the bag that was adorned',\n      '@return the applied decoration to the bag',\n      '@return the bag after being embellished'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if the bag contains invalid elements',\n    'alternatives': [\n      '@throws IllegalArgumentException when the bag includes illegal elements',\n      '@throws IllegalArgumentException if the bag holds invalid elements',\n      '@throws IllegalArgumentException if the bag contains invalid elements',\n      '@throws IllegalArgumentException in case the bag has invalid elements',\n      '@throws IllegalArgumentException if the bag possesses invalid elements'\n    ]\n  },\n  {\n    'tag': '@param <E> the type of the elements in the bag',\n    'alternatives': [\n      '@param <E> the kind of the elements in the bag',\n      '@param <E> the category of the elements in the bag',\n      '@param <E> the variety of the elements in the bag',\n      '@param <E> the class of the elements in the bag',\n      '@param <E> the type of the items in the bag'\n    ]\n  },\n  {\n    'tag': '@return an unmodifiable SortedBag',\n    'alternatives': [\n      '@return a SortedBag that cannot be modified',\n      '@return a SortedBag that is not modifiable',\n      '@return a SortedBag that is immutable',\n      '@return a SortedBag that is read-only',\n      '@return a SortedBag that is not changeable'\n    ]\n  },\n  {\n    'tag': '@param out the output stream',\n    'alternatives': [\n      '@param out the stream to print the output',\n      '@param out the output stream to use',\n      '@param out the stream for the output',\n      '@param out the output stream that will be used',\n      '@param out the stream to use for the output'\n    ]\n  },\n  {\n    'tag': '@throws NotPositiveException if {@code e < 0}.',\n    'alternatives': [\n      '@throws NotPositiveException when {@code e} is less than 0.',\n      '@throws NotPositiveException if the value of {@code e} is negative.',\n      '@throws NotPositiveException in case of a negative {@code e}.',\n      '@throws NotPositiveException if {@code e} is not positive.',\n      '@throws NotPositiveException if the integer {@code e} is negative.'\n    ]\n  },\n  {\n    'tag': '@param e Exponent (must be positive or zero).',\n    'alternatives': [\n      '@param e Power (must be positive or zero).',\n      '@param e Value of the exponent (must be positive or zero).',\n      '@param e The exponent value (must be positive or zero).',\n      '@param e The power to raise (must be positive or zero).',\n      '@param e The positive or zero exponent.'\n    ]\n  },\n  {\n    'tag': '@throws NotPositiveException if {@code e < 0}.',\n    'alternatives': [\n      '@throws NotPositiveException when {@code e} is negative.',\n      '@throws NotPositiveException in case of a negative {@code e}.',\n      '@throws NotPositiveException if the value of {@code e} is not positive.',\n      '@throws NotPositiveException if the integer {@code e} is not positive.',\n      '@throws NotPositiveException if {@code e} is less than or equal to 0.'\n    ]\n  },\n  {\n    'tag': '@param e Exponent (must be positive or zero).',\n    'alternatives': [\n      '@param e Power (must be positive or zero).',\n      '@param e Value of the exponent (must be positive or zero).',\n      '@param e The exponent value (must be positive or zero).',\n      '@param e The power to raise (must be positive or zero).',\n      '@param e The non-negative exponent.'\n    ]\n  },\n  {\n    'tag': '@throws NotPositiveException if {@code k < 0}.',\n    'alternatives': [\n      '@throws NotPositiveException when {@code k} is negative.',\n      '@throws NotPositiveException in case of a negative {@code k}.',\n      '@throws NotPositiveException if the value of {@code k} is not positive.',\n      '@throws NotPositiveException if the integer {@code k} is not positive.',\n      '@throws NotPositiveException if {@code k} is less than or equal to 0.'\n    ]\n  },\n  {\n    'tag': '@throws NumberIsTooLargeException if {@code k > n}.',\n    'alternatives': [\n      '@throws NumberIsTooLargeException when {@code k} exceeds {@code n}.',\n      '@throws NumberIsTooLargeException if the value of {@code k} is greater than {@code n}.',\n      '@throws NumberIsTooLargeException in case of {@code k} being larger than {@code n}.',\n      '@throws NumberIsTooLargeException if the integer {@code k} is greater than {@code n}.',\n      '@throws NumberIsTooLargeException if {@code k} is larger than {@code n}.'\n    ]\n  },\n  {\n    'tag': '@throws MathIllegalArgumentException if the data points are null or the number\\n    of clusters is larger than the number of data points',\n    'alternatives': [\n      '@throws MathIllegalArgumentException when the data points are null or the number\\n    of clusters exceeds the number of data points',\n      '@throws MathIllegalArgumentException if either the data points are null or the number\\n    of clusters is greater than the number of data points',\n      '@throws MathIllegalArgumentException if the number\\n    of clusters is larger than the number of data points or the data points are null',\n      '@throws MathIllegalArgumentException in case of null data points or the number\\n    of clusters surpassing the number of data points',\n      '@throws MathIllegalArgumentException if the number\\n    of clusters exceeds the number of data points or the data points are null'\n    ]\n  },\n  {\n    'tag': '@throws MathIllegalArgumentException if values is null or the indices\\nare not valid',\n    'alternatives': [\n      '@throws MathIllegalArgumentException when values are null or the indices\\nare invalid',\n      '@throws MathIllegalArgumentException if either values are null or the indices\\nare not valid',\n      '@throws MathIllegalArgumentException if values are null or the indices\\nare not valid',\n      '@throws MathIllegalArgumentException in case of null values or invalid indices',\n      '@throws MathIllegalArgumentException if either values are null or the indices\\nare invalid'\n    ]\n  },\n  {\n    'tag': '@throws MathIllegalArgumentException if the stored data array is null',\n    'alternatives': [\n      '@throws MathIllegalArgumentException when the stored data array is null',\n      '@throws MathIllegalArgumentException if the array holding the data is null',\n      '@throws MathIllegalArgumentException if the data array is null',\n      '@throws MathIllegalArgumentException if the stored data is null',\n      '@throws MathIllegalArgumentException in case of null stored data array'\n    ]\n  },\n  {\n    'tag': '@throws NullArgumentException if original is null',\n    'alternatives': [\n      '@throws NullArgumentException when original is null',\n      '@throws NullArgumentException if the original object is null',\n      '@throws NullArgumentException if the value original is null',\n      '@throws NullArgumentException if the input original is null',\n      '@throws NullArgumentException in case of null original value'\n    ]\n  },\n  {\n    'tag': '@throws NullArgumentException if either source or dest is null',\n    'alternatives': [\n      '@throws NullArgumentException when either source or dest is null',\n      '@throws NullArgumentException if either source or dest is null',\n      '@throws NullArgumentException if either source or dest are null',\n      '@throws NullArgumentException if either source or dest has a null value',\n      '@throws NullArgumentException in case of null source or dest'\n    ]\n  },\n  {\n    'tag': '@throws org.apache.commons.math3.exception.NotStrictlyPositiveException if {@code sampleSize} is not positive.',\n    'alternatives': [\n      '@throws org.apache.commons.math3.exception.NotStrictlyPositiveException when {@code sampleSize} is negative or zero.',\n      '@throws org.apache.commons.math3.exception.NotStrictlyPositiveException if the value of {@code sampleSize} is not positive.',\n      '@throws org.apache.commons.math3.exception.NotStrictlyPositiveException in case of non-positive {@code sampleSize}.',\n      '@throws org.apache.commons.math3.exception.NotStrictlyPositiveException if the integer {@code sampleSize} is not positive.',\n      '@throws org.apache.commons.math3.exception.NotStrictlyPositiveException if {@code sampleSize} is either zero or negative.'\n    ]\n  },\n  {\n    'tag': '@throws NullArgumentException if prototypeStatistics is null',\n    'alternatives': [\n      '@throws NullArgumentException when prototypeStatistics is null',\n      '@throws NullArgumentException if the prototypeStatistics object is null',\n      '@throws NullArgumentException if the value prototypeStatistics is null',\n      '@throws NullArgumentException if the input prototypeStatistics is null',\n      '@throws NullArgumentException in case of null prototypeStatistics value'\n    ]\n  },\n  {\n    'tag': '@throws NotPositiveException if {@code exponent < 0}.',\n    'alternatives': [\n      '@throws NotPositiveException when the value of {@code exponent} is negative.',\n      '@throws NotPositiveException if the given {@code exponent} is less than 0.',\n      '@throws NotPositiveException if the exponent is not positive.',\n      '@throws NotPositiveException if the integer {@code exponent} is negative.',\n      '@throws NotPositiveException if {@code exponent} is less than 0.'\n    ]\n  },\n  {\n    'tag': '@throws NotStrictlyPositiveException if {@code elements <= 0}.',\n    'alternatives': [\n      '@throws NotStrictlyPositiveException when {@code elements} is not positive.',\n      '@throws NotStrictlyPositiveException if the count of {@code elements} is zero or less.',\n      '@throws NotStrictlyPositiveException if the value {@code elements} is not strictly positive.',\n      '@throws NotStrictlyPositiveException if the integer {@code elements} is not positive.',\n      '@throws NotStrictlyPositiveException if {@code elements} is equal to or less than 0.'\n    ]\n  },\n  {\n    'tag': '@throws NotStrictlyPositiveException if {@code maxIter <= 0}.',\n    'alternatives': [\n      '@throws NotStrictlyPositiveException when {@code maxIter} is not positive.',\n      '@throws NotStrictlyPositiveException if the value of {@code maxIter} is zero or negative.',\n      '@throws NotStrictlyPositiveException if {@code maxIter} is not strictly positive.',\n      '@throws NotStrictlyPositiveException if the integer {@code maxIter} is not positive.',\n      '@throws NotStrictlyPositiveException if {@code maxIter} is equal to or less than 0.'\n    ]\n  },\n  {\n    'tag': '@throws NullArgumentException if original is null',\n    'alternatives': [\n      '@throws NullArgumentException when original is null',\n      '@throws NullArgumentException if the original object is null',\n      '@throws NullArgumentException if the value original is null',\n      '@throws NullArgumentException if the input original is null',\n      '@throws NullArgumentException in case of null original value'\n    ]\n  }\n]"