"output=[\r\n  {\r\n    'tag': '@param predicates the predicates to check, not cloned, not null',\r\n    'alternatives': [\r\n      '@param predicates the conditions to verify, not duplicated, not null',\r\n      '@param predicates the assertions to validate, not copied, not null',\r\n      '@param predicates the criteria to examine, not replicated, not null',\r\n      '@param predicates the predicates to evaluate, not copied, not null',\r\n      '@param predicates the conditions to test, not cloned, not null'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@throws NullPointerException if the MultiSet is null',\r\n    'alternatives': [\r\n      '@throws NullPointerException when the MultiSet is null',\r\n      '@throws NullPointerException if the MultiSet object is null',\r\n      '@throws NullPointerException if the MultiSet parameter is null',\r\n      '@throws NullPointerException in case the MultiSet is null',\r\n      '@throws NullPointerException if the MultiSet instance is null'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param multiset the multiset to synchronize, must not be null',\r\n    'alternatives': [\r\n      '@param multiset the multiset to make synchronized, should not be null',\r\n      '@param multiset the multiset to lock, must not be null',\r\n      '@param multiset the multiset to synchronize, cannot be null',\r\n      '@param multiset the multiset to synchronize, should not be null',\r\n      '@param multiset the multiset to synchronize, not null'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@throws NullPointerException if the MultiSet is null',\r\n    'alternatives': [\r\n      '@throws NullPointerException when the MultiSet is null',\r\n      '@throws NullPointerException if the MultiSet object is null',\r\n      '@throws NullPointerException if the MultiSet parameter is null',\r\n      '@throws NullPointerException in case the MultiSet is null',\r\n      '@throws NullPointerException if the MultiSet instance is null'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param multiset the multiset whose unmodifiable view is to be returned, must not be null',\r\n    'alternatives': [\r\n      '@param multiset the multiset that should be returned as an unmodifiable view, cannot be null',\r\n      '@param multiset the multiset for which the unmodifiable view is desired, must not be null',\r\n      '@param multiset the multiset to be returned as an unmodifiable view, shouldn\\'t be null',\r\n      '@param multiset the multiset for which the unmodifiable view is to be obtained, must not be null',\r\n      '@param multiset the multiset to return as an unmodifiable view, not null'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@throws NullPointerException if the MultiSet or Predicate is null',\r\n    'alternatives': [\r\n      '@throws NullPointerException when either the MultiSet or Predicate is null',\r\n      '@throws NullPointerException if either the MultiSet or Predicate is null',\r\n      '@throws NullPointerException if the MultiSet or Predicate object is null',\r\n      '@throws NullPointerException if the MultiSet or Predicate argument is null',\r\n      '@throws NullPointerException in case the MultiSet or Predicate is null'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param multiset the multiset to predicate, must not be null',\r\n    'alternatives': [\r\n      '@param multiset the multiset to apply a predicate to, must not be null',\r\n      '@param multiset the multiset to check with a predicate, must not be null',\r\n      '@param multiset the multiset to verify using a predicate, cannot be null',\r\n      '@param multiset the multiset to assess with a predicate, should not be null',\r\n      '@param multiset the multiset to evaluate based on a predicate, not null'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param predicate the predicate for the multiset, must not be null',\r\n    'alternatives': [\r\n      '@param predicate the function for the multiset, should not be null',\r\n      '@param predicate the condition for the multiset, must not be null',\r\n      '@param predicate the assertion for the multiset, cannot be null',\r\n      '@param predicate the criteria for the multiset, should not be null',\r\n      '@param predicate the rule for the multiset, not null'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param queue the queue to decorate, must not be null',\r\n    'alternatives': [\r\n      '@param queue the queue to enhance, must not be null',\r\n      '@param queue the queue to modify, should not be null',\r\n      '@param queue the queue to wrap, cannot be null',\r\n      '@param queue the queue to extend, should not be null',\r\n      '@param queue the queue to embellish, not null'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@throws NullPointerException if map is null',\r\n    'alternatives': [\r\n      '@throws NullPointerException when map is null',\r\n      '@throws NullPointerException if map is null',\r\n      '@throws NullPointerException if the provided map is null',\r\n      '@throws NullPointerException in case map is null',\r\n      '@throws NullPointerException if the map parameter is null'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param map the map to decorate, must not be null',\r\n    'alternatives': [\r\n      '@param map the map to modify, should not be null',\r\n      '@param map the map to enhance, must not be null',\r\n      '@param map the map to wrap, cannot be null',\r\n      '@param map the map to extend, should not be null',\r\n      '@param map the map to embellish, not null'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@throws NullPointerException if the specified value is null and nulls are invalid',\r\n    'alternatives': [\r\n      '@throws NullPointerException when the specified value is null and nulls are not allowed',\r\n      '@throws NullPointerException if the provided value is null and nulls are forbidden',\r\n      '@throws NullPointerException if the given value is null and nulls are prohibited',\r\n      '@throws NullPointerException in case the value is null and nulls are not valid',\r\n      '@throws NullPointerException if the specified value is null and nulls are not permitted'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@return true always',\r\n    'alternatives': [\r\n      '@return always true',\r\n      '@return true all the time',\r\n      '@return true in any situation',\r\n      '@return true without exception',\r\n      '@return constantly true'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@throws NullPointerException if map or transformer is null',\r\n    'alternatives': [\r\n      '@throws NullPointerException when map or transformer is null',\r\n      '@throws NullPointerException if map or transformer is null',\r\n      '@throws NullPointerException if the provided map or transformer is null',\r\n      '@throws NullPointerException in case map or transformer is null',\r\n      '@throws NullPointerException if the map or transformer parameter is null'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param map the map to decorate, must not be null',\r\n    'alternatives': [\r\n      '@param map the map to modify, should not be null',\r\n      '@param map the map to enhance, must not be null',\r\n      '@param map the map to wrap, cannot be null',\r\n      '@param map the map to extend, should not be null',\r\n      '@param map the map to embellish, not null'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@throws NullPointerException if map is null',\r\n    'alternatives': [\r\n      '@throws NullPointerException when map is null',\r\n      '@throws NullPointerException if map is null',\r\n      '@throws NullPointerException if the provided map is null',\r\n      '@throws NullPointerException in case map is null',\r\n      '@throws NullPointerException if the map parameter is null'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param map the map to decorate, must not be null',\r\n    'alternatives': [\r\n      '@param map the map to modify, should not be null',\r\n      '@param map the map to enhance, must not be null',\r\n      '@param map the map to wrap, cannot be null',\r\n      '@param map the map to extend, should not be null',\r\n      '@param map the map to embellish, not null'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@throws NullPointerException if map or factory is null',\r\n    'alternatives': [\r\n      '@throws NullPointerException when map or factory is null',\r\n      '@throws NullPointerException if map or factory is null',\r\n      '@throws NullPointerException if the provided map or factory is null',\r\n      '@throws NullPointerException in case map or factory is null',\r\n      '@throws NullPointerException if the map or factory parameter is null'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param map the map to decorate, must not be null',\r\n    'alternatives': [\r\n      '@param map the map to modify, should not be null',\r\n      '@param map the map to enhance, must not be null',\r\n      '@param map the map to wrap, cannot be null',\r\n      '@param map the map to extend, should not be null',\r\n      '@param map the map to embellish, not null'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param factory the factory to use to create entries, must not be null',\r\n    'alternatives': [\r\n      '@param factory the factory for creating entries, should not be null',\r\n      '@param factory the factory to construct entries, cannot be null',\r\n      '@param factory the factory to generate entries, must not be null',\r\n      '@param factory the factory to produce entries, should not be null',\r\n      '@param factory the factory to instantiate entries, not null'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@throws NullPointerException if map or factory is null',\r\n    'alternatives': [\r\n      '@throws NullPointerException when map or factory is null',\r\n      '@throws NullPointerException if map or factory is null',\r\n      '@throws NullPointerException if the provided map or factory is null',\r\n      '@throws NullPointerException in case map or factory is null',\r\n      '@throws NullPointerException if the map or factory parameter is null'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param map the map to decorate, must not be null',\r\n    'alternatives': [\r\n      '@param map the map to modify, should not be null',\r\n      '@param map the map to enhance, must not be null',\r\n      '@param map the map to wrap, cannot be null',\r\n      '@param map the map to extend, should not be null',\r\n      '@param map the map to embellish, not null'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param transformer the transformer to use as a factory to create entries, must not be null',\r\n    'alternatives': [\r\n      '@param transformer the transformer for creating entries, should not be null',\r\n      '@param transformer the transformer to construct entries, cannot be null',\r\n      '@param transformer the transformer to generate entries, must not be null',\r\n      '@param transformer the transformer to produce entries, should not be null',\r\n      '@param transformer the transformer to instantiate entries, not null'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@throws NullPointerException if the value is null and null value are invalid',\r\n    'alternatives': [\r\n      '@throws NullPointerException when the value is null and null value is not allowed',\r\n      '@throws NullPointerException if the value is null and null value is forbidden',\r\n      '@throws NullPointerException if the value is null and null value is prohibited',\r\n      '@throws NullPointerException in case the value is null and null value is not valid',\r\n      '@throws NullPointerException if the value is null and null value is not permitted'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param pair the pair to copy, must not be null',\r\n    'alternatives': [\r\n      '@param pair the pair to duplicate, should not be null',\r\n      '@param pair the pair to replicate, cannot be null',\r\n      '@param pair the pair to clone, must not be null',\r\n      '@param pair the pair to reproduce, should not be null',\r\n      '@param pair the pair to recreate, not null'\r\n    ]\r\n  }\r\n]"