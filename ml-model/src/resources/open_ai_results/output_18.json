"output = [\n  {\n    'tag': '@param <T> the type the factory creates',\n    'alternatives': [\n      '@param <T> the type produced by the factory',\n      '@param <T> the type that the factory generates',\n      '@param <T> the type created by the factory',\n      '@param <T> the type instantiated by the factory',\n      '@param <T> the type the factory produces'\n    ]\n  },\n  {\n    'tag': '@param paramTypes the constructor parameter types, cloned',\n    'alternatives': [\n      '@param paramTypes cloned constructor parameter types',\n      '@param paramTypes copied constructor parameter types',\n      '@param paramTypes the cloned types of the constructor parameters',\n      '@param paramTypes constructor parameter types, after being cloned',\n      '@param paramTypes the parameter types of the constructor, after being cloned'\n    ]\n  },\n  {\n    'tag': '@param args the constructor arguments, cloned',\n    'alternatives': [\n      '@param args cloned constructor arguments',\n      '@param args copied constructor arguments',\n      '@param args the cloned arguments of the constructor',\n      '@param args constructor arguments, after being cloned',\n      '@param args the arguments of the constructor, after being cloned'\n    ]\n  },\n  {\n    'tag': '@return a new instantiate factory',\n    'alternatives': [\n      '@return a new factory for instantiation',\n      '@return a new factory that instantiates',\n      '@return a fresh factory for instantiation',\n      '@return a brand new instantiation factory',\n      '@return a newly created factory for instantiation'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if paramTypes does not match args',\n    'alternatives': [\n      '@throws IllegalArgumentException when paramTypes does not match args',\n      '@throws IllegalArgumentException in case paramTypes does not correspond to args',\n      '@throws IllegalArgumentException if paramTypes and args are not compatible',\n      '@throws IllegalArgumentException when there is a mismatch between paramTypes and args',\n      '@throws IllegalArgumentException if the types of paramTypes and args do not match'\n    ]\n  },\n  {\n    'tag': '@return the new object',\n    'alternatives': [\n      '@return the freshly created object',\n      '@return the newly instantiated object',\n      '@return the newly created instance',\n      '@return the object that was just created',\n      '@return the result of the object's instantiation'\n    ]\n  },\n  {\n    'tag': '@param classToInstantiate the class to instantiate',\n    'alternatives': [\n      '@param classToInstantiate the class that needs to be instantiated',\n      '@param classToInstantiate the class that should be created',\n      '@param classToInstantiate the class that is being instantiated',\n      '@param classToInstantiate the class that will be instantiated',\n      '@param classToInstantiate the class that is being created'\n    ]\n  },\n  {\n    'tag': '@param classToInstantiate the class to instantiate',\n    'alternatives': [\n      '@param classToInstantiate the class that needs to be instantiated',\n      '@param classToInstantiate the class that should be created',\n      '@param classToInstantiate the class that is being instantiated',\n      '@param classToInstantiate the class that will be instantiated',\n      '@param classToInstantiate the class that is being created'\n    ]\n  },\n  {\n    'tag': '@param paramTypes the constructor parameter types, cloned',\n    'alternatives': [\n      '@param paramTypes cloned constructor parameter types',\n      '@param paramTypes copied constructor parameter types',\n      '@param paramTypes the cloned types of the constructor parameters',\n      '@param paramTypes constructor parameter types, after being cloned',\n      '@param paramTypes the parameter types of the constructor, after being cloned'\n    ]\n  },\n  {\n    'tag': '@param args the constructor arguments, cloned',\n    'alternatives': [\n      '@param args cloned constructor arguments',\n      '@param args copied constructor arguments',\n      '@param args the cloned arguments of the constructor',\n      '@param args constructor arguments, after being cloned',\n      '@param args the arguments of the constructor, after being cloned'\n    ]\n  },\n  {\n    'tag': '@param <E> the type that the closure acts on',\n    'alternatives': [\n      '@param <E> the type which the closure operates on',\n      '@param <E> the type that the closure works on',\n      '@param <E> the type that the closure applies to',\n      '@param <E> the type that the closure acts upon',\n      '@param <E> the type that the closure performs on'\n    ]\n  },\n  {\n    'tag': '@param predicate predicate to switch on',\n    'alternatives': [\n      '@param predicate predicate for switching',\n      '@param predicate the condition for switching',\n      '@param predicate the condition to switch on',\n      '@param predicate the switch condition',\n      '@param predicate the switching criterion'\n    ]\n  },\n  {\n    'tag': '@param trueClosure closure used if true',\n    'alternatives': [\n      '@param trueClosure closure invoked when true',\n      '@param trueClosure closure executed if true',\n      '@param trueClosure closure to be executed if true',\n      '@param trueClosure closure to use when true',\n      '@param trueClosure closure to be applied if true'\n    ]\n  },\n  {\n    'tag': '@return the <code>if</code> closure',\n    'alternatives': [\n      '@return the closure for <code>if</code>',\n      '@return the closure associated with <code>if</code>',\n      '@return the closure used with <code>if</code>',\n      '@return the closure that corresponds to <code>if</code>',\n      '@return the closure linked to <code>if</code>'\n    ]\n  },\n  {\n    'tag': '@param <E> the type that the closure acts on',\n    'alternatives': [\n      '@param <E> the type which the closure operates on',\n      '@param <E> the type that the closure works on',\n      '@param <E> the type that the closure applies to',\n      '@param <E> the type that the closure acts upon',\n      '@param <E> the type that the closure performs on'\n    ]\n  },\n  {\n    'tag': '@param predicate predicate to switch on',\n    'alternatives': [\n      '@param predicate predicate for switching',\n      '@param predicate the condition for switching',\n      '@param predicate the condition to switch on',\n      '@param predicate the switch condition',\n      '@param predicate the switching criterion'\n    ]\n  },\n  {\n    'tag': '@param trueClosure closure used if true',\n    'alternatives': [\n      '@param trueClosure closure invoked when true',\n      '@param trueClosure closure executed if true',\n      '@param trueClosure closure to be executed if true',\n      '@param trueClosure closure to use when true',\n      '@param trueClosure closure to be applied if true'\n    ]\n  },\n  {\n    'tag': '@param falseClosure closure used if false',\n    'alternatives': [\n      '@param falseClosure closure invoked when false',\n      '@param falseClosure closure executed if false',\n      '@param falseClosure closure to be executed if false',\n      '@param falseClosure closure to use when false',\n      '@param falseClosure closure to be applied if false'\n    ]\n  },\n  {\n    'tag': '@return the <code>if</code> closure',\n    'alternatives': [\n      '@return the closure for <code>if</code>',\n      '@return the closure associated with <code>if</code>',\n      '@return the closure used with <code>if</code>',\n      '@return the closure that corresponds to <code>if</code>',\n      '@return the closure linked to <code>if</code>'\n    ]\n  },\n  {\n    'tag': '@param input the input object',\n    'alternatives': [\n      '@param input the object that serves as input',\n      '@param input the object used as input',\n      '@param input the object to be used for input',\n      '@param input the object that acts as input',\n      '@param input the object considered as input'\n    ]\n  },\n  {\n    'tag': '@return the predicate',\n    'alternatives': [\n      '@return the condition',\n      '@return the test',\n      '@return the check',\n      '@return the evaluation',\n      '@return the judgment'\n    ]\n  },\n  {\n    'tag': '@return the closure',\n    'alternatives': [\n      '@return the function',\n      '@return the method',\n      '@return the operation',\n      '@return the procedure',\n      '@return the subroutine'\n    ]\n  },\n  {\n    'tag': '@return the closure',\n    'alternatives': [\n      '@return the function',\n      '@return the method',\n      '@return the operation',\n      '@return the procedure',\n      '@return the subroutine'\n    ]\n  },\n  {\n    'tag': '@return <code>true</code> if the iterator has a previous element',\n    'alternatives': [\n      '@return <code>true</code> if the iterator contains a previous element',\n      '@return <code>true</code> if the iterator has a previous item',\n      '@return <code>true</code> if there is a previous element in the iterator',\n      '@return <code>true</code> if the iterator has a preceding element',\n      '@return <code>true</code> if there exists a previous element in the iterator'\n    ]\n  },\n  {\n    'tag': '@return the previous element in the iteration',\n    'alternatives': [\n      '@return the element that precedes in the iteration',\n      '@return the element before in the iteration',\n      '@return the element that comes before in the iteration',\n      '@return the element that occurred earlier in the iteration',\n      '@return the element that was visited prior in the iteration'\n    ]\n  }\n]"