"[\n  {\n    'tag': '@param array an array of {@code int} values, possibly empty',\n    'alternatives': [\n      '@param array a collection of {@code int} values, possibly empty',\n      '@param array a list of {@code int} values, possibly empty',\n      '@param array an array of {@code int} elements, maybe empty',\n      '@param array a sequence of {@code int} values, maybe empty',\n      '@param array a set of {@code int} values, possibly empty'\n    ]\n  },\n  {\n    'tag': '@param target a primitive {@code int} value',\n    'alternatives': [\n      '@param target an integer value',\n      '@param target an {@code int} primitive',\n      '@param target a basic {@code int} value',\n      '@param target a simple integer',\n      '@param target an {@code int} number'\n    ]\n  },\n  {\n    'tag': '@return {@code true} if {@code array[i] == target} for some value of {@code\\n    i}',\n    'alternatives': [\n      '@return {@code true} if there is a value in the array that is equal to the target',\n      '@return {@code true} if there exists an {@code i} such that {@code array[i]} is equal to the target',\n      '@return {@code true} if any element in the array equals the target',\n      '@return {@code true} if there is an index {@code i} where {@code array[i]} equals the target',\n      '@return {@code true} if there is a value in the array that matches the target'\n    ]\n  },\n  {\n    'tag': '@param inputGraph The graph we listen at.',\n    'alternatives': [\n      '@param inputGraph The graph at which we are listening.',\n      '@param inputGraph The graph where we are listening.',\n      '@param inputGraph The graph being observed.',\n      '@param inputGraph The graph that is being monitored.',\n      '@param inputGraph The graph from which we are receiving events.'\n    ]\n  },\n  {\n    'tag': '@param replayGraph If false, and if the input graph already contains element they\\n           are not replayed.',\n    'alternatives': [\n      '@param replayGraph If set to false, existing elements in the input graph will not be replayed.',\n      '@param replayGraph If false, elements already present in the input graph will not be replayed.',\n      '@param replayGraph If set to false, any existing elements in the input graph will not be replayed.',\n      '@param replayGraph If false, elements that are already in the input graph will not be replayed.',\n      '@param replayGraph If set to false, any elements already contained in the input graph will not be replayed.'\n    ]\n  },\n  {\n    'tag': '@param firstListener The initial listener to register.',\n    'alternatives': [\n      '@param firstListener The initial listener that needs to be registered.',\n      '@param firstListener The listener that should be registered as the first one.',\n      '@param firstListener The listener to be initially registered.',\n      '@param firstListener The listener to be registered at the beginning.',\n      '@param firstListener The listener that will be registered first.'\n    ]\n  },\n  {\n    'tag': '@param sharedMBox The message box used to send and receive graph messages across\\n           the thread boundary.',\n    'alternatives': [\n      '@param sharedMBox The message box for sending and receiving graph messages across the thread boundary.',\n      '@param sharedMBox The message box that facilitates sending and receiving of graph messages across threads.',\n      '@param sharedMBox The message box utilized for graph message exchanges between threads.',\n      '@param sharedMBox The shared message box for inter-thread graph message communication.',\n      '@param sharedMBox The message box employed for graph message transmission and reception across threads.'\n    ]\n  },\n  {\n    'tag': '@param sourceId The source identifier.',\n    'alternatives': [\n      '@param sourceId The unique identifier of the source.',\n      '@param sourceId The identifier representing the source.',\n      '@param sourceId The ID of the source.',\n      '@param sourceId The source's identification.',\n      '@param sourceId The identifier of the source object.'\n    ]\n  },\n  {\n    'tag': '@param nodeId The node identifier.',\n    'alternatives': [\n      '@param nodeId The identifier of the node.',\n      '@param nodeId The ID of the node.',\n      '@param nodeId The unique identifier for the node.',\n      '@param nodeId The identification of the node.',\n      '@param nodeId The node's identification.'\n    ]\n  },\n  {\n    'tag': '@param timeId ',\n    'alternatives': [\n      '@param timeId The ID representing the time.',\n      '@param timeId The unique identifier for the time.',\n      '@param timeId The identification of the time.',\n      '@param timeId The time's identification.',\n      '@param timeId The identifier of the time.'\n    ]\n  },\n  {\n    'tag': '@param step The step time stamp.',\n    'alternatives': [\n      '@param step The time stamp corresponding to the step.',\n      '@param step The time stamp at the step.',\n      '@param step The step's time stamp.',\n      '@param step The time stamp associated with the step.',\n      '@param step The time stamp for the given step.'\n    ]\n  }\n]"