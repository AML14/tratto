"output = [\n  {\n    'tag': '@param y second sample',\n    'alternatives': [\n      '@param y second example',\n      '@param y another sample',\n      '@param y next example',\n      '@param y second instance',\n      '@param y second input'\n    ]\n  },\n  {\n    'tag': '@throws NullArgumentException if {@code x} or {@code y} are {@code null}.',\n    'alternatives': [\n      '@throws NullArgumentException when {@code x} or {@code y} are {@code null}.',\n      '@throws NullArgumentException if either {@code x} or {@code y} are {@code null}.',\n      '@throws NullArgumentException if the values of {@code x} or {@code y} are {@code null}.',\n      '@throws NullArgumentException if either parameter {@code x} or parameter {@code y} is {@code null}.',\n      '@throws NullArgumentException if the values for the parameters {@code x} or {@code y} are {@code null}.'\n    ]\n  },\n  {\n    'tag': '@throws NoDataException if {@code x} or {@code y} are zero-length.',\n    'alternatives': [\n      '@throws NoDataException when {@code x} or {@code y} have zero length.',\n      '@throws NoDataException if either {@code x} or {@code y} are empty.',\n      '@throws NoDataException if the lengths of {@code x} or {@code y} are zero.',\n      '@throws NoDataException if either parameter {@code x} or parameter {@code y} have zero length.',\n      '@throws NoDataException if the lengths for the parameters {@code x} or {@code y} are zero.'\n    ]\n  },\n  {\n    'tag': '@param x first sample',\n    'alternatives': [\n      '@param x initial sample',\n      '@param x primary example',\n      '@param x original sample',\n      '@param x starting instance',\n      '@param x input sample'\n    ]\n  },\n  {\n    'tag': '@param y second sample',\n    'alternatives': [\n      '@param y second example',\n      '@param y another sample',\n      '@param y next example',\n      '@param y second instance',\n      '@param y second input'\n    ]\n  },\n  {\n    'tag': '@return concatenated array',\n    'alternatives': [\n      '@return array that is concatenated',\n      '@return resulting concatenated array',\n      '@return the concatenation of the arrays',\n      '@return array obtained by concatenation',\n      '@return the array after concatenation'\n    ]\n  },\n  {\n    'tag': '@param x the first sample',\n    'alternatives': [\n      '@param x first example',\n      '@param x initial sample',\n      '@param x primary instance',\n      '@param x original sample',\n      '@param x starting sample'\n    ]\n  },\n  {\n    'tag': '@param y the second sample',\n    'alternatives': [\n      '@param y second example',\n      '@param y another sample',\n      '@param y next example',\n      '@param y second instance',\n      '@param y second input'\n    ]\n  },\n  {\n    'tag': '@param visitor visitor used to process all matrix entries',\n    'alternatives': [\n      '@param visitor matrix visitor used to process all entries',\n      '@param visitor matrix visitor for processing all entries',\n      '@param visitor visitor that handles processing of all matrix entries',\n      '@param visitor matrix visitor that processes all entries',\n      '@param visitor visitor for handling matrix entry processing'\n    ]\n  },\n  {\n    'tag': '@param startRow Initial row index',\n    'alternatives': [\n      '@param startRow starting row index',\n      '@param startRow initial row position',\n      '@param startRow index of the initial row',\n      '@param startRow row index to begin with',\n      '@param startRow initial position for row'\n    ]\n  },\n  {\n    'tag': '@param endRow Final row index (inclusive)',\n    'alternatives': [\n      '@param endRow last row index (inclusive)',\n      '@param endRow final row position (inclusive)',\n      '@param endRow index of the final row (inclusive)',\n      '@param endRow row index to end with (inclusive)',\n      '@param endRow final position for row (inclusive)'\n    ]\n  },\n  {\n    'tag': '@param startColumn Initial column index',\n    'alternatives': [\n      '@param startColumn starting column index',\n      '@param startColumn initial column position',\n      '@param startColumn index of the initial column',\n      '@param startColumn column index to begin with',\n      '@param startColumn initial position for column'\n    ]\n  },\n  {\n    'tag': '@param endColumn Final column index',\n    'alternatives': [\n      '@param endColumn last column index',\n      '@param endColumn final column position',\n      '@param endColumn index of the final column',\n      '@param endColumn column index to end with',\n      '@param endColumn final position for column'\n    ]\n  },\n  {\n    'tag': '@throws OutOfRangeException if the indices are not valid.',\n    'alternatives': [\n      '@throws OutOfRangeException when the indices are invalid.',\n      '@throws OutOfRangeException if the indices are out of range.',\n      '@throws OutOfRangeException if the indices are not within the allowed range.',\n      '@throws OutOfRangeException if the provided indices are not valid.',\n      '@throws OutOfRangeException if the indices fall outside the valid range.'\n    ]\n  },\n  {\n    'tag': '@return the value returned by {@link FieldMatrixChangingVisitor#end()} at the end\\nof the walk',\n    'alternatives': [\n      '@return value obtained from calling {@link FieldMatrixChangingVisitor#end()} at the end\\nof the traversal',\n      '@return result obtained by invoking {@link FieldMatrixChangingVisitor#end()} at the end\\nof the iteration',\n      '@return value returned from {@link FieldMatrixChangingVisitor#end()} at the end\\nof the walk',\n      '@return the value that {@link FieldMatrixChangingVisitor#end()} returns at the end\\nof the traversal',\n      '@return the returned value of {@link FieldMatrixChangingVisitor#end()} at the end\\nof the iteration'\n    ]\n  },\n  {\n    'tag': '@param visitor visitor used to process all matrix entries',\n    'alternatives': [\n      '@param visitor matrix visitor used to process all entries',\n      '@param visitor matrix visitor for processing all entries',\n      '@param visitor visitor that handles processing of all matrix entries',\n      '@param visitor matrix visitor that processes all entries',\n      '@param visitor visitor for handling matrix entry processing'\n    ]\n  },\n  {\n    'tag': '@param startRow Initial row index',\n    'alternatives': [\n      '@param startRow starting row index',\n      '@param startRow initial row position',\n      '@param startRow index of the initial row',\n      '@param startRow row index to begin with',\n      '@param startRow initial position for row'\n    ]\n  },\n  {\n    'tag': '@param endRow Final row index (inclusive)',\n    'alternatives': [\n      '@param endRow last row index (inclusive)',\n      '@param endRow final row position (inclusive)',\n      '@param endRow index of the final row (inclusive)',\n      '@param endRow row index to end with (inclusive)',\n      '@param endRow final position for row (inclusive)'\n    ]\n  },\n  {\n    'tag': '@param startColumn Initial column index',\n    'alternatives': [\n      '@param startColumn starting column index',\n      '@param startColumn initial column position',\n      '@param startColumn index of the initial column',\n      '@param startColumn column index to begin with',\n      '@param startColumn initial position for column'\n    ]\n  },\n  {\n    'tag': '@param endColumn Final column index',\n    'alternatives': [\n      '@param endColumn last column index',\n      '@param endColumn final column position',\n      '@param endColumn index of the final column',\n      '@param endColumn column index to end with',\n      '@param endColumn final position for column'\n    ]\n  },\n  {\n    'tag': '@throws OutOfRangeException if the indices are not valid.',\n    'alternatives': [\n      '@throws OutOfRangeException when the indices are invalid.',\n      '@throws OutOfRangeException if the indices are out of range.',\n      '@throws OutOfRangeException if the indices are not within the allowed range.',\n      '@throws OutOfRangeException if the provided indices are not valid.',\n      '@throws OutOfRangeException if the indices fall outside the valid range.'\n    ]\n  },\n  {\n    'tag': '@return the value returned by {@link FieldMatrixPreservingVisitor#end()} at the end\\nof the walk',\n    'alternatives': [\n      '@return value obtained from calling {@link FieldMatrixPreservingVisitor#end()} at the end\\nof the traversal',\n      '@return result obtained by invoking {@link FieldMatrixPreservingVisitor#end()} at the end\\nof the iteration',\n      '@return value returned from {@link FieldMatrixPreservingVisitor#end()} at the end\\nof the walk',\n      '@return the value that {@link FieldMatrixPreservingVisitor#end()} returns at the end\\nof the traversal',\n      '@return the returned value of {@link FieldMatrixPreservingVisitor#end()} at the end\\nof the iteration'\n    ]\n  },\n  {\n    'tag': '@param visitor visitor used to process all matrix entries',\n    'alternatives': [\n      '@param visitor matrix visitor used to process all entries',\n      '@param visitor matrix visitor for processing all entries',\n      '@param visitor visitor that handles processing of all matrix entries',\n      '@param visitor matrix visitor that processes all entries',\n      '@param visitor visitor for handling matrix entry processing'\n    ]\n  },\n  {\n    'tag': '@return the value returned by {@link FieldMatrixChangingVisitor#end()} at the end\\nof the walk',\n    'alternatives': [\n      '@return value obtained from calling {@link FieldMatrixChangingVisitor#end()} at the end\\nof the traversal',\n      '@return result obtained by invoking {@link FieldMatrixChangingVisitor#end()} at the end\\nof the iteration',\n      '@return value returned from {@link FieldMatrixChangingVisitor#end()} at the end\\nof the walk',\n      '@return the value that {@link FieldMatrixChangingVisitor#end()} returns at the end\\nof the traversal',\n      '@return the returned value of {@link FieldMatrixChangingVisitor#end()} at the end\\nof the iteration'\n    ]\n  },\n  {\n    'tag': '@param visitor visitor used to process all matrix entries',\n    'alternatives': [\n      '@param visitor matrix visitor used to process all entries',\n      '@param visitor matrix visitor for processing all entries',\n      '@param visitor visitor that handles processing of all matrix entries',\n      '@param visitor matrix visitor that processes all entries',\n      '@param visitor visitor for handling matrix entry processing'\n    ]\n  }\n]"