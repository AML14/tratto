"[\n    {\n        \"tag\": \"@param vertexFactory called to produce new vertices\",\n        \"alternatives\": [\n            \"@param vertexFactory used for generating new vertices\",\n            \"@param vertexFactory responsible for creating new vertices\",\n            \"@param vertexFactory utilized to create new vertices\"\n        ]\n    },\n    {\n        \"tag\": \"@param resultMap unused parameter\",\n        \"alternatives\": [\n            \"@param resultMap parameter not used\",\n            \"@param resultMap parameter that is not utilized\",\n            \"@param resultMap parameter that is currently unused\"\n        ]\n    },\n    {\n        \"tag\": \"@param size number of vertices to be generated\",\n        \"alternatives\": [\n            \"@param size indicates the quantity of vertices to generate\",\n            \"@param size specifies the count of vertices to be created\",\n            \"@param size denotes the number of vertices to generate\"\n        ]\n    },\n    {\n        \"tag\": \"@param size number of vertices to be generated\",\n        \"alternatives\": [\n            \"@param size specifies the count of vertices to generate\",\n            \"@param size indicates the quantity of vertices to generate\",\n            \"@param size denotes the number of vertices to generate\"\n        ]\n    },\n    {\n        \"tag\": \"@param seed initial seed for the random generator\",\n        \"alternatives\": [\n            \"@param seed starting seed for the random generator\",\n            \"@param seed represents the initial value for the random generator\",\n            \"@param seed is the seed used to initialize the random generator\"\n        ]\n    },\n    {\n        \"tag\": \"@param size number of vertices to be generated\",\n        \"alternatives\": [\n            \"@param size specifies the count of vertices to generate\",\n            \"@param size indicates the quantity of vertices to generate\",\n            \"@param size denotes the number of vertices to generate\"\n        ]\n    },\n    {\n        \"tag\": \"@param size number of vertices to be generated\",\n        \"alternatives\": [\n            \"@param size indicates the quantity of vertices to generate\",\n            \"@param size specifies the count of vertices to generate\",\n            \"@param size denotes the number of vertices to generate\"\n        ]\n    },\n    {\n        \"tag\": \"@throws IllegalArgumentException if the aNumOfEdges passed in the\\nconstructor, cannot be created on a graph of the concrete type with\\naNumOfVertexes.\\norg.jgrapht.generate.RandomGraphGenerator.DefaultEdgeTopologyFactory#isNumberOfEdgesValid(org.jgrapht.Graph,\\nint)\",\n        \"alternatives\": [\n            \"@throws IllegalArgumentException if the number of edges provided in the constructor cannot be created on a graph of the given type with the specified number of vertices. Check org.jgrapht.generate.RandomGraphGenerator.DefaultEdgeTopologyFactory#isNumberOfEdgesValid(org.jgrapht.Graph, int)\",\n            \"@throws IllegalArgumentException if the graph's concrete type and the given number of vertices cannot support the specified number of edges. Check org.jgrapht.generate.RandomGraphGenerator.DefaultEdgeTopologyFactory#isNumberOfEdgesValid(org.jgrapht.Graph, int)\",\n            \"@throws IllegalArgumentException if the number of edges passed in the constructor cannot be generated on the specific type of graph with the given number of vertices. See org.jgrapht.generate.RandomGraphGenerator.DefaultEdgeTopologyFactory#isNumberOfEdgesValid(org.jgrapht.Graph, int)\"\n        ]\n    },\n    {\n        \"tag\": \"@param target \",\n        \"alternatives\": [\n            \"@param target the target object\",\n            \"@param target the desired destination\",\n            \"@param target the object to be operated on\"\n        ]\n    },\n    {\n        \"tag\": \"@return \",\n        \"alternatives\": [\n            \"@return the result\",\n            \"@return the output\",\n            \"@return the returned value\"\n        ]\n    },\n    {\n        \"tag\": \"@param size number of vertices to be generated\",\n        \"alternatives\": [\n            \"@param size indicates the quantity of vertices to generate\",\n            \"@param size specifies the count of vertices to generate\",\n            \"@param size denotes the number of vertices to generate\"\n        ]\n    },\n    {\n        \"tag\": \"@param partitionOne This is the number of vertices in the first partition\",\n        \"alternatives\": [\n            \"@param partitionOne represents the count of vertices in the first partition\",\n            \"@param partitionOne indicates the number of vertices in the first partition\",\n            \"@param partitionOne denotes the quantity of vertices in the first partition\"\n        ]\n    },\n    {\n        \"tag\": \"@param partitionTwo This is the number of vertices in the second parition\",\n        \"alternatives\": [\n            \"@param partitionTwo represents the count of vertices in the second partition\",\n            \"@param partitionTwo indicates the number of vertices in the second partition\",\n            \"@param partitionTwo denotes the quantity of vertices in the second partition\"\n        ]\n    },\n    {\n        \"tag\": \"@param target receives the generated edges and vertices; if this is\\nnon-empty on entry, the result will be a disconnected graph since\\ngenerated elements will not be connected to existing elements\",\n        \"alternatives\": [\n            \"@param target receives the edges and vertices produced. If this is\\nnot empty when the function is called, the resulting graph will be disconnected as the generated elements won't be linked to existing elements\",\n            \"@param target gets the generated edges and vertices. If this is\\npopulated before the function call, the output will be an unconnected graph because the generated elements won't be connected to existing ones\",\n            \"@param target stores the generated edges and vertices. If it is\\nnot empty when using this method, the resulting graph will be disconnected since the generated elements won't be connected to any existing elements\"\n        ]\n    },\n    {\n        \"tag\": \"@param vertexFactory called to produce new vertices\",\n        \"alternatives\": [\n            \"@param vertexFactory used for generating new vertices\",\n            \"@param vertexFactory responsible for creating new vertices\",\n            \"@param vertexFactory utilized to create new vertices\"\n        ]\n    },\n    {\n        \"tag\": \"@param resultMap if non-null, receives implementation-specific mappings\\nfrom String roles to graph elements (or collections of graph elements)\",\n        \"alternatives\": [\n            \"@param resultMap captures implementation-specific mappings\\nfrom String roles to graph elements (or collections of graph elements) if it is not null\",\n            \"@param resultMap stores role-to-element (or collection) mappings specific to the implementation if it's not null\",\n            \"@param resultMap holds the mappings from String roles to graph elements (or collections of graph elements), specific to the implementation if it's not null\"\n        ]\n    },\n    {\n        \"tag\": \"@param order number of total vertices including the center vertex\",\n        \"alternatives\": [\n            \"@param order represents the count of vertices, including the central vertex\",\n            \"@param order indicates the total number of vertices, including the center vertex\",\n            \"@param order denotes the quantity of vertices, including the central vertex\"\n        ]\n    },\n    {\n        \"tag\": \"@param vertex vertex whose degree is to be calculated.\",\n        \"alternatives\": [\n            \"@param vertex the vertex for which the degree needs to be calculated.\",\n            \"@param vertex the vertex to determine the degree of.\",\n            \"@param vertex the vertex whose degree is being computed.\"\n        ]\n    },\n    {\n        \"tag\": \"@return the degree of the specified vertex.\",\n        \"alternatives\": [\n            \"@return the degree value of the specified vertex.\",\n            \"@return the degree of the given vertex.\",\n            \"@return the number representing the degree of the specified vertex.\"\n        ]\n    },\n    {\n        \"tag\": \"@param vertex the vertex whose in-degree will be decremented.\",\n        \"alternatives\": [\n            \"@param vertex the vertex to decrease the in-degree of.\",\n            \"@param vertex the vertex from which to subtract the in-degree.\",\n            \"@param vertex the vertex whose in-degree is being reduced.\"\n        ]\n    },\n    {\n        \"tag\": \"@param dg the directed graph to be iterated.\",\n        \"alternatives\": [\n            \"@param dg the directed graph that will be iterated.\",\n            \"@param dg the directed graph object to iterate through.\",\n            \"@param dg the directed graph that needs to be traversed.\"\n        ]\n    },\n    {\n        \"tag\": \"@param queue initializer for queue\",\n        \"alternatives\": [\n            \"@param queue the initial setup for the queue\",\n            \"@param queue provides the initial state of the queue\",\n            \"@param queue initializes the queue data structure\"\n        ]\n    },\n    {\n        \"tag\": \"@param inDegreeMap initializer for inDegreeMap\",\n        \"alternatives\": [\n            \"@param inDegreeMap the initial setup for the inDegreeMap\",\n            \"@param inDegreeMap provides the initial state of the inDegreeMap\",\n            \"@param inDegreeMap initializes the inDegreeMap data structure\"\n        ]\n    },\n    {\n        \"tag\": \"@return start vertex\",\n        \"alternatives\": [\n            \"@return the starting vertex\",\n            \"@return the initial vertex\",\n            \"@return the vertex at the beginning\"\n        ]\n    },\n    {\n        \"tag\": \"@param dg the directed graph to be iterated.\",\n        \"alternatives\": [\n            \"@param dg the directed graph that will be iterated.\",\n            \"@param dg the directed graph object to iterate through.\",\n            \"@param dg the directed graph that needs to be traversed.\"\n        ]\n    }\n]"