"[\n  {\n    'tag': '@param relativeThreshold relative tolerance threshold',\n    'alternatives': [\n      '@param relativeThreshold threshold for relative tolerance',\n      '@param relativeThreshold tolerance threshold for relative value',\n      '@param relativeThreshold relative threshold of tolerance',\n      '@param relativeThreshold threshold for relative tolerances',\n      '@param relativeThreshold threshold for tolerances relative to'\n    ]\n  },\n  {\n    'tag': '@param absoluteThreshold absolute tolerance threshold',\n    'alternatives': [\n      '@param absoluteThreshold threshold for absolute tolerance',\n      '@param absoluteThreshold tolerance threshold for absolute value',\n      '@param absoluteThreshold absolute threshold of tolerance',\n      '@param absoluteThreshold threshold for absolute tolerances',\n      '@param absoluteThreshold threshold for tolerances absolute to'\n    ]\n  },\n  {\n    'tag': '@param relativeThreshold Relative tolerance threshold.',\n    'alternatives': [\n      '@param relativeThreshold threshold for relative tolerance.',\n      '@param relativeThreshold tolerance threshold relative to.',\n      '@param relativeThreshold relative threshold against tolerance.',\n      '@param relativeThreshold threshold for tolerance relative.',\n      '@param relativeThreshold threshold relative to tolerance.'\n    ]\n  },\n  {\n    'tag': '@param absoluteThreshold Absolute tolerance threshold.',\n    'alternatives': [\n      '@param absoluteThreshold threshold for absolute tolerance.',\n      '@param absoluteThreshold tolerance threshold absolute to.',\n      '@param absoluteThreshold absolute threshold against tolerance.',\n      '@param absoluteThreshold threshold for tolerance absolute.',\n      '@param absoluteThreshold threshold absolute to tolerance.'\n    ]\n  },\n  {\n    'tag': '@param maxIter Maximum iteration count.',\n    'alternatives': [\n      '@param maxIter count of maximum iterations.',\n      '@param maxIter maximum count of iterations.',\n      '@param maxIter iteration count limit.',\n      '@param maxIter count of maximum iterations allowed.',\n      '@param maxIter maximum limit of iterations.'\n    ]\n  },\n  {\n    'tag': '@return the maximal number of function evaluations.',\n    'alternatives': [\n      '@return the maximum number of function evaluations.',\n      '@return the highest count of function evaluations.',\n      '@return the maximum count of evaluations for the function.',\n      '@return the maximum number of evaluations for the function.',\n      '@return the greatest number of function evaluations.'\n    ]\n  },\n  {\n    'tag': '@return the number of evaluations of the objective function.',\n    'alternatives': [\n      '@return the count of evaluations of the objective function.',\n      '@return the total evaluations of the objective function.',\n      '@return the number of function objective evaluations.',\n      '@return the number of evaluations of the function objective.',\n      '@return the objective function evaluations count.'\n    ]\n  },\n  {\n    'tag': '@return the object used to check for convergence.',\n    'alternatives': [\n      '@return the object for convergence checking.',\n      '@return the convergence checking object used.',\n      '@return the object to verify convergence.',\n      '@return the convergence-checking object.',\n      '@return the object for checking if convergence is reached.'\n    ]\n  },\n  {\n    'tag': '@param a Point and value.',\n    'alternatives': [\n      '@param a Point along with its value.',\n      '@param a Point together with its value.',\n      '@param a Point accompanied by its value.',\n      '@param a Point associated with its value.',\n      '@param a Pair of a point and its value.'\n    ]\n  },\n  {\n    'tag': '@param b Point and value.',\n    'alternatives': [\n      '@param b Point along with its value.',\n      '@param b Point together with its value.',\n      '@param b Point accompanied by its value.',\n      '@param b Point associated with its value.',\n      '@param b Pair of a point and its value.'\n    ]\n  },\n  {\n    'tag': '@param isMinim {@code true} if the selected point must be the one with\\nthe lowest value.',\n    'alternatives': [\n      '@param isMinim {@code true} if the chosen point should have the\\nlowest value.',\n      '@param isMinim {@code true} if the point selected must have the\\nminimum value.',\n      '@param isMinim if the selected point must have the lowest value,\\n{@code true}.',\n      '@param isMinim {@code true} if the selected point should be the one\\nwith the lowest value.',\n      '@param isMinim if the selected point must be the one with the lowest\\nvalue, then {@code true}.'\n    ]\n  },\n  {\n    'tag': '@return the best point, or {@code null} if {@code a} and {@code b} are\\nboth {@code null}. When {@code a} and {@code b} have the same function\\nvalue, {@code a} is returned.',\n    'alternatives': [\n      '@return the optimal point, or {@code null} if both {@code a} and\\n{@code b} are {@code null}. If both {@code a} and {@code b} have\\nequal function values, {@code a} is returned.',\n      '@return the top point, or {@code null} if both {@code a} and\\n{@code b} are {@code null}. When both {@code a} and {@code b} have\\nthe same function value, {@code a} will be returned.',\n      '@return the best point, or {@code null} if both {@code a} and\\n{@code b} are {@code null}. In case both {@code a} and {@code b}\\nhave the same function value, {@code a} will be returned.',\n      '@return the optimal point, or {@code null} if both {@code a} and\\n{@code b} are {@code null}. If both {@code a} and {@code b} show\\nequal function values, {@code a} will be returned.',\n      '@return the best point, or {@code null} if both {@code a} and\\n{@code b} are {@code null}. When both {@code a} and {@code b} have\\nthe same value for the function, the value of {@code a} is\\nobtained.'\n    ]\n  },\n  {\n    'tag': '@param rel Relative threshold.',\n    'alternatives': [\n      '@param rel Threshold relative to another value.',\n      '@param rel Threshold with respect to a relative value.',\n      '@param rel Relative threshold value.',\n      '@param rel Threshold that is relative.',\n      '@param rel Threshold compared to a relative value.'\n    ]\n  },\n  {\n    'tag': '@param abs Absolute threshold.',\n    'alternatives': [\n      '@param abs Threshold with an absolute value.',\n      '@param abs Absolute threshold value.',\n      '@param abs Threshold that is absolute.',\n      '@param abs Threshold compared to an absolute value.',\n      '@param abs Absolute threshold amount.'\n    ]\n  },\n  {\n    'tag': '@param checker Additional, user-defined, convergence checking\\nprocedure.',\n    'alternatives': [\n      '@param checker Procedure for additional user-defined convergence\\nchecking.',\n      '@param checker Convergence checking procedure that is user-defined\\nand additional.',\n      '@param checker User-defined procedure for checking convergence\\nadditionally.',\n      '@param checker Additional convergence checking procedure defined\\nby the user.',\n      '@param checker Convergence checking procedure that is user-defined\\nand additional.'\n    ]\n  },\n  {\n    'tag': '@throws NumberIsTooSmallException if {@code rel < 2 * Math.ulp(1d)}.',\n    'alternatives': [\n      '@throws NumberIsTooSmallException if the relative input value {@code rel}\\nis smaller than twice the minimum positive value.',\n      '@throws NumberIsTooSmallException if the input value for relative threshold\\n{@code rel} is below 2 times the smallest positive value.',\n      '@throws NumberIsTooSmallException when the relative value {@code rel} is\\ngreater than or equal to twice the smallest positive value.',\n      '@throws NumberIsTooSmallException if the value of {@code rel} is smaller\\nthan 2 times the smallest positive value.',\n      '@throws NumberIsTooSmallException if the relative input {@code rel} is\\nless than twice the smallest positive value.'\n    ]\n  },\n  {\n    'tag': '@return an array containing the optima.',\n    'alternatives': [\n      '@return an array with the optimal values.',\n      '@return an array that contains the optimal values.',\n      '@return an array of the optimal values.',\n      '@return an array with the optima.',\n      '@return an array containing the optimal results.'\n    ]\n  },\n  {\n    'tag': '@throws MathIllegalStateException if {@link\\n#optimize(int,UnivariateFunction,GoalType,double,double) optimize}\\nhas not been called.',\n    'alternatives': [\n      '@throws MathIllegalStateException if the method {@link\\n#optimize(int,UnivariateFunction,GoalType,double,double) optimize}\\nhas not been invoked.',\n      '@throws MathIllegalStateException when the call to {@link\\n#optimize(int,UnivariateFunction,GoalType,double,double) optimize}\\nhas not yet been made.',\n      '@throws MathIllegalStateException if the invocation of the method {@link\\n#optimize(int,UnivariateFunction,GoalType,double,double) optimize}\\nhas not occurred.',\n      '@throws MathIllegalStateException if the method {@link\\n#optimize(int,UnivariateFunction,GoalType,double,double) optimize}\\nwas not called.',\n      '@throws MathIllegalStateException if the call to the method {@link\\n#optimize(int,UnivariateFunction,GoalType,double,double) optimize}\\nhas not been made.'\n    ]\n  },\n  {\n    'tag': '@param goal Goal type.',\n    'alternatives': [\n      '@param goal Type of goal.',\n      '@param goal Type of the objective.',\n      '@param goal Objective type.',\n      '@param goal Type of target.',\n      '@param goal Type of the goal.'\n    ]\n  },\n  {\n    'tag': '@param optimizer Single-start optimizer to wrap.',\n    'alternatives': [\n      '@param optimizer Optimizer to wrap as a single start one.',\n      '@param optimizer Single start optimizer to be encapsulated.',\n      '@param optimizer Single-start optimizer to be wrapped.',\n      '@param optimizer Single-starting optimizer to encapsulate.',\n      '@param optimizer Single start optimizer to be wrapped.'\n    ]\n  },\n  {\n    'tag': '@param generator Random generator to use for restarts.',\n    'alternatives': [\n      '@param generator Random generator to utilize for restarts.',\n      '@param generator Random number generator to be used for restarts.',\n      '@param generator Random generator to be employed for restarts.',\n      '@param generator Random generator to apply for restarts.',\n      '@param generator Random generator to be used in restarts.'\n    ]\n  },\n  {\n    'tag': '@param f Function to optimize.',\n    'alternatives': [\n      '@param f Function to be optimized.',\n      '@param f Function for optimization.',\n      '@param f Function that needs to be optimized.',\n      '@param f Function that is to be optimized.',\n      '@param f Function that requires optimization.'\n    ]\n  }\n]"