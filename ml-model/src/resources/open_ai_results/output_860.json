"[\n  {\n    \"tag\": \"@throws TooManyEvaluationsException if the maximum number of evaluations\\nis exceeded.\",\n    \"alternatives\": [\n      \"@throws TooManyEvaluationsException when the maximum number of evaluations\\nis surpassed.\",\n      \"@throws TooManyEvaluationsException if the evaluations exceed the maximum limit.\",\n      \"@throws TooManyEvaluationsException if the number of evaluations surpasses the maximum limit.\"\n    ]\n  },\n  {\n    \"tag\": \"@return the number of evalutations.\",\n    \"alternatives\": [\n      \"@return the count of evaluations.\",\n      \"@return the total number of evaluations.\",\n      \"@return the number of performed evaluations.\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NullPointerException if <code>array</code> is <code>null</code>\",\n    \"alternatives\": [\n      \"@throws NullPointerException in case <code>array</code> is <code>null</code>\",\n      \"@throws NullPointerException if the provided <code>array</code> is <code>null</code>\",\n      \"@throws NullPointerException when <code>array</code> is <code>null</code>\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NullPointerException if either the key or value is null\",\n    \"alternatives\": [\n      \"@throws NullPointerException if either the key or value is <code>null</code>\",\n      \"@throws NullPointerException in case either the key or value is <code>null</code>\",\n      \"@throws NullPointerException when either the key or value is <code>null</code>\"\n    ]\n  },\n  {\n    \"tag\": \"@param key the key to add, must not be null\",\n    \"alternatives\": [\n      \"@param key the key to insert, must not be null\",\n      \"@param key - the non-null key to be added\",\n      \"@param key - the key that needs to be added, and it mustn't be null\"\n    ]\n  },\n  {\n    \"tag\": \"@param value the value to add, must not be null\",\n    \"alternatives\": [\n      \"@param value the value to insert, must not be null\",\n      \"@param value - the non-null value to be added\",\n      \"@param value - the value that needs to be added, and it mustn't be null\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NullPointerException (optional) if the map limits the values to\\n non-null and null was specified\",\n    \"alternatives\": [\n      \"@throws NullPointerException (optional) if the map restricts the values to\\n non-null and null was specified\",\n      \"@throws NullPointerException (optional) when null is specified for a value\\nand the map enforces non-null values\",\n      \"@throws NullPointerException (optional) if the map mandates non-null values\\nand null is provided\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NullPointerException if array is null\",\n    \"alternatives\": [\n      \"@throws NullPointerException if the array is null\",\n      \"@throws NullPointerException in case the array is null\",\n      \"@throws NullPointerException when the array parameter is null\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NullPointerException if the map is null\",\n    \"alternatives\": [\n      \"@throws NullPointerException in case the map is null\",\n      \"@throws NullPointerException if the provided map is null\",\n      \"@throws NullPointerException when the map parameter is null\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NullPointerException if the queue is null\",\n    \"alternatives\": [\n      \"@throws NullPointerException if the provided queue is null\",\n      \"@throws NullPointerException in case the queue is null\",\n      \"@throws NullPointerException when the queue parameter is null\"\n    ]\n  },\n  {\n    \"tag\": \"@param queue the queue to make unmodifiable, must not be null\",\n    \"alternatives\": [\n      \"@param queue the queue to transform into an unmodifiable one, must not be null\",\n      \"@param queue - the non-null queue to be made unmodifiable\",\n      \"@param queue - the queue that needs to be turned into an unmodifiable one, and it mustn't be null\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NullPointerException if the queue or predicate is null\",\n    \"alternatives\": [\n      \"@throws NullPointerException in case the queue or predicate is null\",\n      \"@throws NullPointerException if either the queue or predicate is null\",\n      \"@throws NullPointerException when the queue or predicate parameter is null\"\n    ]\n  },\n  {\n    \"tag\": \"@param queue the queue to predicate, must not be null\",\n    \"alternatives\": [\n      \"@param queue the queue to evaluate, must not be null\",\n      \"@param queue - the non-null queue to apply the predicate on\",\n      \"@param queue - the queue that needs to be subjected to the predicate, and it mustn't be null\"\n    ]\n  },\n  {\n    \"tag\": \"@param predicate the predicate used to evaluate new elements, must not be null\",\n    \"alternatives\": [\n      \"@param predicate the predicate to assess new elements, must not be null\",\n      \"@param predicate - the non-null predicate used for evaluating new elements\",\n      \"@param predicate - the predicate that is employed to evaluate fresh elements, and it mustn't be null\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NullPointerException if the queue or transformer is null\",\n    \"alternatives\": [\n      \"@throws NullPointerException in case the queue or transformer is null\",\n      \"@throws NullPointerException if either the queue or transformer is null\",\n      \"@throws NullPointerException when the queue or transformer parameter is null\"\n    ]\n  },\n  {\n    \"tag\": \"@param transformer the transformer for the queue, must not be null\",\n    \"alternatives\": [\n      \"@param transformer the transformer to be used with the queue, must not be null\",\n      \"@param transformer - the non-null transformer for the queue\",\n      \"@param transformer - the transformer to apply to the queue, and it mustn't be null\"\n    ]\n  },\n  {\n    \"tag\": \"@return an empty {@link Queue}\",\n    \"alternatives\": [\n      \"@return a {@link Queue} that is empty\",\n      \"@return an instance of an empty {@link Queue}\",\n      \"@return a {@link Queue} with no elements\"\n    ]\n  },\n  {\n    \"tag\": \"@return whether the sets are equal by value comparison\",\n    \"alternatives\": [\n      \"@return true if the sets are equal when compared by value\",\n      \"@return indicates if the sets are equal through value comparison\",\n      \"@return determines the equality of the sets via value comparison\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NullPointerException if the set is null\",\n    \"alternatives\": [\n      \"@throws NullPointerException in case the set is null\",\n      \"@throws NullPointerException if the provided set is null\",\n      \"@throws NullPointerException when the set parameter is null\"\n    ]\n  },\n  {\n    \"tag\": \"@param set the set to synchronize, must not be null\",\n    \"alternatives\": [\n      \"@param set the set to be synchronized, must not be null\",\n      \"@param set - the non-null set to synchronize\",\n      \"@param set - the set that needs to be synchronized, and it mustn't be null\"\n    ]\n  }\n]"