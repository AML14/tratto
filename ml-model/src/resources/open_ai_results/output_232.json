"output = [\n  {\n    'tag': '@param array the source array',\n    'alternatives': [\n      '@param array the source array',\n      '@param sourceArr the array used as the input',\n      '@param inputArr the array that serves as the source',\n      '@param arr the array from which values are taken',\n      '@param source the array for which values are extracted'\n    ]\n  },\n  {\n    'tag': '@param minLength the minimum length the returned array must guarantee',\n    'alternatives': [\n      '@param minLength the minimum length the returned array must guarantee',\n      '@param minLen the minimum length required for the output array',\n      '@param guaranteedLength the minimum length that the result array must have',\n      '@param lengthReq the minimum length that the returned array needs to ensure',\n      '@param requiredLength the smallest length that the output array needs to satisfy'\n    ]\n  },\n  {\n    'tag': '@param padding an extra amount to \"grow\" the array by if growth is\\n    necessary',\n    'alternatives': [\n      '@param padding an extra amount to \"grow\" the array by if growth is\\n    necessary',\n      '@param padding the additional size to expand the array if required',\n      '@param extraSize the additional capacity to increase the array if needed',\n      '@param additionalAmount the extra space to enlarge the array when necessary',\n      '@param extension the extra size to expand the array in case of necessity'\n    ]\n  },\n  {\n    'tag': '@return an array containing the values of {@code array}, with guaranteed\\n    minimum length {@code minLength}',\n    'alternatives': [\n      '@return an array containing the values of {@code array}, with guaranteed\\n    minimum length {@code minLength}',\n      '@return the array including the elements of {@code array}, ensuring a\\n    minimum length of {@code minLength}',\n      '@return an array that holds the values of {@code array}, with a minimum\\n    length of {@code minLength} ensured',\n      '@return the array that consists of the elements of {@code array},\\n    ensuring a minimum length of {@code minLength}',\n      '@return an array containing the values of {@code array} and a minimum length\\n    of {@code minLength}'\n    ]\n  },\n  {\n    'tag': '@param separator the text that should appear between consecutive values in\\n    the resulting string (but not at the start or end)',\n    'alternatives': [\n      '@param separator the text that should appear between consecutive values in\\n    the resulting string (but not at the start or end)',\n      '@param separator the string that will be inserted between consecutive\\n    values in the resulting string (excluding the start and end)',\n      '@param separator the string to be placed between successive values in\\n    the final string (excluding the beginning and end)',\n      '@param separator the text to appear between successive values in the\\n    resulting string (excluding the start and end)',\n      '@param separator the character sequence that will be placed between values\\n    in the resulting string (excluding the start and end)'\n    ]\n  },\n  {\n    'tag': '@param array an array of {@code long} values, possibly empty',\n    'alternatives': [\n      '@param array an array of {@code long} values, possibly empty',\n      '@param array an array containing {@code long} values, which may be empty',\n      '@param array a collection of {@code long} values, maybe empty',\n      '@param array a group of {@code long} values, which can be empty',\n      '@param array a set of {@code long} values, possibly without any element'\n    ]\n  },\n  {\n    'tag': '@param collection a collection of {@code Number} instances',\n    'alternatives': [\n      '@param collection a collection of {@code Number} instances',\n      '@param collection a group of {@code Number} objects',\n      '@param collection a set of {@code Number} elements',\n      '@param collection a sequence of {@code Number} instances',\n      '@param collection a container that holds {@code Number} objects'\n    ]\n  },\n  {\n    'tag': '@return an array containing the same values as {@code collection}, in the\\n    same order, converted to primitives',\n    'alternatives': [\n      '@return an array containing the same values as {@code collection}, in the\\n    same order, converted to primitives',\n      '@return an array with the elements converted to primitives, having\\n    the same values and order as {@code collection}',\n      '@return an array that consists of the elements of {@code collection},\\n    converted to primitives, and maintaining the same order',\n      '@return an array with the values of {@code collection}, converted to\\n    primitives, in the same order',\n      '@return an array containing the elements of {@code collection}, converted to\\n    primitives, in the exact same order'\n    ]\n  },\n  {\n    'tag': '@param backingArray the array to back the list',\n    'alternatives': [\n      '@param backingArray the array to back the list',\n      '@param backingArray the array that supports the list',\n      '@param backingArray the array used as the foundation for the list',\n      '@param backingArray the array that forms the basis for the list',\n      '@param backingArray the array which serves as the backbone for the list'\n    ]\n  },\n  {\n    'tag': '@return a list view of the array',\n    'alternatives': [\n      '@return a list view of the array',\n      '@return a view of the array as a list',\n      '@return a list representation of the array',\n      '@return a list perspective of the array',\n      '@return an array presented as a list'\n    ]\n  },\n  {\n    'tag': '@param expression a boolean expression',\n    'alternatives': [\n      '@param expression a boolean expression',\n      '@param expression a condition that evaluates to boolean',\n      '@param expression a logical statement',\n      '@param expression a true/false condition',\n      '@param expression a boolean value'\n    ]\n  },\n  {\n    'tag': '@param errorMessage the exception message to use if the check fails; will be converted to a\\n    string using {@link String#valueOf(Object)}',\n    'alternatives': [\n      '@param errorMessage the exception message to use if the check fails; will be converted to a\\n    string using {@link String#valueOf(Object)}',\n      '@param errorMessage the error message to be employed if the check fails;\\n    it will be converted to a string using {@link String#valueOf(Object)}',\n      '@param errorMessage the error message to utilize in case the check\\n    fails; it will be converted to a string using {@link String#valueOf(Object)}',\n      '@param errorMessage the message to display in case the check fails;\\n    it will be converted to a string using {@link String#valueOf(Object)}',\n      '@param errorMessage the message to be shown if the check fails; it\\n    will be converted to a string using {@link String#valueOf(Object)}'\n    ]\n  },\n  {\n    'tag': '@param errorMessageTemplate a template for the exception message should the check fail. The\\n    message is formed by replacing each {@code %s} placeholder in the template with an\\n    argument. These are matched by position - the first {@code %s} gets {@code\\n    errorMessageArgs[0]}, etc.  Unmatched arguments will be appended to the formatted message\\n    in square braces. Unmatched placeholders will be left as-is.',\n    'alternatives': [\n      '@param errorMessageTemplate a template for the exception message should the check fail. The\\n    message is formed by replacing each {@code %s} placeholder in the template with an\\n    argument. These are matched by position - the first {@code %s} gets {@code\\n    errorMessageArgs[0]}, etc.  Unmatched arguments will be appended to the formatted message\\n    in square braces. Unmatched placeholders will be left as-is.',\n      '@param errorMessageTemplate a template to use when creating the\\n    exception message if the check fails. The message is generated by\\n    replacing each {@code %s} placeholder in the template with an\\n    argument. These are matched by position - the first {@code %s}\\n    corresponds to {@code errorMessageArgs[0]}, and so on. Any extra\\n    arguments will be enclosed in square brackets and appended to the\\n    formatted message as unmatched placeholders.',\n      '@param errorMessageTemplate a template that will be employed in case\\n    the check fails. The message is constructed by replacing each\\n    occurrence of the {@code %s} placeholder in the template with an\\n    argument. The arguments are matched by their respective positions\\n    - the initial {@code %s} represents {@code errorMessageArgs[0]},\\n    and so on. Any arguments that do not have a matching placeholder\\n    will be appended to the formatted message surrounded by square\\n    brackets. Unmatched placeholders will be left unaltered.',\n      '@param errorMessageTemplate a template to be used for the exception\\n    message if the check fails. The message is created by substituting\\n    each occurrence of the {@code %s} placeholder in the template\\n    with an argument. The placeholders are matched in order, starting\\n    with the first {@code %s}, which represents {@code errorMessageArgs[0]}.\\n    Any additional arguments will be enclosed in square brackets and\\n    attached to the formatted message as unmatched placeholders.',\n      '@param errorMessageTemplate a template used to form the exception\\n    message if the check fails. The message is generated by replacing\\n    each {@code %s} placeholder in the template with an argument.\\n    The arguments are matched by their respective positions, starting\\n    with the first {@code %s} representing {@code errorMessageArgs[0]}. Any\\n    leftover arguments will be appended to the final message inside\\n    square brackets. Unmatched placeholders will remain unmodified.'\n    ]\n  },\n  {\n    'tag': '@param errorMessageArgs the arguments to be substituted into the message template. Arguments\\n    are converted to strings using {@link String#valueOf(Object)}.',\n    'alternatives': [\n      '@param errorMessageArgs the arguments to be substituted into the message template. Arguments\\n    are converted to strings using {@link String#valueOf(Object)}.',\n      '@param errorMessageArgs the arguments that will replace the\\n    placeholders in the message template. The arguments will be\\n    converted to strings using {@link String#valueOf(Object)}.',\n      '@param errorMessageArgs the arguments that should be inserted\\n    into the message template. The arguments will be converted to\\n    strings using {@link String#valueOf(Object)}.',\n      '@param errorMessageArgs the arguments that need to be put into\\n    the message template. The arguments will be transformed to\\n    strings using {@link String#valueOf(Object)}.',\n      '@param errorMessageArgs the arguments that are meant to be\\n    substituted into the message template. Arguments will be\\n    converted to strings using {@link String#valueOf(Object)}.'\n    ]\n  },\n  {\n    'tag': '@param reference an object reference',\n    'alternatives': [\n      '@param reference an object reference',\n      '@param reference a reference to an object',\n      '@param reference the reference to an object',\n      '@param reference the object reference',\n      '@param reference a pointer to an object'\n    ]\n  },\n  {\n    'tag': '@return the non-null reference that was validated',\n    'alternatives': [\n      '@return the non-null reference that was validated',\n      '@return the reference that has been validated to be non-null',\n      '@return the reference that is checked to be non-null',\n      '@return the validated reference that is not null',\n      '@return the reference that has been confirmed as non-null'\n    ]\n  },\n  {\n    'tag': '@param reference an object reference',\n    'alternatives': [\n      '@param reference an object reference',\n      '@param reference a reference to an object',\n      '@param reference the reference to an object',\n      '@param reference the object reference',\n      '@param reference a pointer to an object'\n    ]\n  }\n]"