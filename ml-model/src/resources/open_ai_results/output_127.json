"[\n  {\n    'tag': '@throws UnsupportedOperationException always',\n    'alternatives': [\n      '@throws UnsupportedOperationException at all times',\n      '@throws UnsupportedOperationException in any circumstance',\n      '@throws UnsupportedOperationException consistently'\n    ]\n  },\n  {\n    'tag': '@throws UnsupportedOperationException always',\n    'alternatives': [\n      '@throws UnsupportedOperationException at all times',\n      '@throws UnsupportedOperationException in any circumstance',\n      '@throws UnsupportedOperationException consistently'\n    ]\n  },\n  {\n    'tag': '@throws UnsupportedOperationException always',\n    'alternatives': [\n      '@throws UnsupportedOperationException at all times',\n      '@throws UnsupportedOperationException in any circumstance',\n      '@throws UnsupportedOperationException consistently'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if {@code name} is not syntactically valid according to {@link #isValid}',\n    'alternatives': [\n      '@throws IllegalArgumentException when {@code name} does not adhere to the syntactic validity defined by {@link #isValid}',\n      '@throws IllegalArgumentException if {@code name} is not valid according to the syntax specified in {@link #isValid}',\n      '@throws IllegalArgumentException in case {@code name} is syntactically invalid as per the rules described in {@link #isValid}',\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if leftParts is null',\n    'alternatives': [\n      '@throws NullPointerException when leftParts is null',\n      '@throws NullPointerException if null is passed as leftParts',\n      '@throws NullPointerException in case of null value for leftParts'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if the resulting name is not valid',\n    'alternatives': [\n      '@throws IllegalArgumentException when the resultant name is invalid',\n      '@throws IllegalArgumentException if the name obtained is not valid',\n      '@throws IllegalArgumentException if the name generated is not valid'\n    ]\n  },\n  {\n    'tag': '@return function that returns {@code map.get(a)} when {@code a} is a key, or {@code\\n        defaultValue} otherwise',\n    'alternatives': [\n      '@return a function that retrieves the value associated with {@code a} in the map, or returns {@code defaultValue} if {@code a} is not a key',\n      '@return a function that retrieves the value of {@code a} from the map, or returns {@code defaultValue} if {@code a} is not a key',\n      '@return a function that returns the value corresponding to the key {@code a} in the map, or {@code defaultValue} if {@code a} is not a key'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if {@code n < 0}',\n    'alternatives': [\n      '@throws IllegalArgumentException when {@code n} is less than 0',\n      '@throws IllegalArgumentException if the value of {@code n} is negative',\n      '@throws IllegalArgumentException in case of a negative value for {@code n}'\n    ]\n  },\n  {\n    'tag': '@return the outputCollection',\n    'alternatives': [\n      '@return the provided outputCollection',\n      '@return the collection specified as output',\n      '@return the outputCollection parameter'\n    ]\n  },\n  {\n    'tag': '@param outputCollection the collection to output selected elements into, may not be null if the inputCollection and predicate are not null',\n    'alternatives': [\n      '@param outputCollection the collection to store the selected elements, must not be null when both the inputCollection and predicate are not null',\n      '@param outputCollection the destination collection for the selected elements, must be specified if both the inputCollection and predicate are not null',\n      '@param outputCollection the collection where the selected elements will be stored, can't be null when both inputCollection and predicate are not null'\n    ]\n  },\n  {\n    'tag': '@param rejectedCollection the collection to output rejected elements into, may not be null if the inputCollection or predicate are not null',\n    'alternatives': [\n      '@param rejectedCollection the collection to store the rejected elements, must not be null when either the inputCollection or predicate is not null',\n      '@param rejectedCollection the destination collection for the rejected elements, must be specified if either the inputCollection or predicate is not null',\n      '@param rejectedCollection the collection where the rejected elements will be stored, can't be null when either inputCollection or predicate is not null'\n    ]\n  },\n  {\n    'tag': '@return the outputCollection',\n    'alternatives': [\n      '@return the provided outputCollection',\n      '@return the collection specified as output',\n      '@return the outputCollection parameter'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if the input collection is null',\n    'alternatives': [\n      '@throws NullPointerException when the input collection is null',\n      '@throws NullPointerException if the input collection is set to null',\n      '@throws NullPointerException in case of a null input collection'\n    ]\n  },\n  {\n    'tag': '@param inputCollection the collection to get the input from, may not be null',\n    'alternatives': [\n      '@param inputCollection the collection from which the input is obtained, must not be null',\n      '@param inputCollection the source collection for the input, cannot be null',\n      '@param inputCollection the collection that provides the input, must not be null'\n    ]\n  },\n  {\n    'tag': '@param outputCollection the collection to output into, may not be null if the inputCollection and predicate or not null',\n    'alternatives': [\n      '@param outputCollection the collection to store the output, must not be null if both the inputCollection and predicate are not null',\n      '@param outputCollection the destination collection for the output, must be specified if both the inputCollection and predicate are not null',\n      '@param outputCollection the collection where the output will be stored, can't be null when both inputCollection and predicate are not null'\n    ]\n  },\n  {\n    'tag': '@return outputCollection',\n    'alternatives': [\n      '@return the outputCollection',\n      '@return the resulting outputCollection',\n      '@return the collection named outputCollection'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if the input collection is null',\n    'alternatives': [\n      '@throws NullPointerException when the input collection is null',\n      '@throws NullPointerException if the input collection is set to null',\n      '@throws NullPointerException in case of a null input collection'\n    ]\n  },\n  {\n    'tag': '@param inputCollection the collection to get the input from, may not be null',\n    'alternatives': [\n      '@param inputCollection the collection from which the input is obtained, must not be null',\n      '@param inputCollection the source collection for the input, cannot be null',\n      '@param inputCollection the collection that provides the input, must not be null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if the outputCollection is null and both, inputCollection and transformer are not null',\n    'alternatives': [\n      '@throws NullPointerException when the outputCollection is null and both the inputCollection and transformer are not null',\n      '@throws NullPointerException if the outputCollection is set to null and both the inputCollection and transformer are not null',\n      '@throws NullPointerException in case of a null outputCollection and both inputCollection and transformer are not null'\n    ]\n  },\n  {\n    'tag': '@param outputCollection the collection to output into, may not be null if inputCollection and transformer are not null',\n    'alternatives': [\n      '@param outputCollection the collection to store the output, must not be null if both the inputCollection and transformer are not null',\n      '@param outputCollection the destination collection for the output, must be specified when both the inputCollection and transformer are not null',\n      '@param outputCollection the collection where the output will be stored, can't be null when both inputCollection and transformer are not null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if the output collection is null and both, inputIterator and transformer are not null',\n    'alternatives': [\n      '@throws NullPointerException when the output collection is null and both the inputIterator and transformer are not null',\n      '@throws NullPointerException if the output collection is set to null and both the inputIterator and transformer are not null',\n      '@throws NullPointerException in case of a null output collection and both inputIterator and transformer are not null'\n    ]\n  },\n  {\n    'tag': '@param outputCollection the collection to output into, may not be null if inputIterator and transformer are not null',\n    'alternatives': [\n      '@param outputCollection the collection to store the output, must not be null if both the inputIterator and transformer are not null',\n      '@param outputCollection the destination collection for the output, must be specified when both the inputIterator and transformer are not null',\n      '@param outputCollection the collection where the output will be stored, can't be null when both inputIterator and transformer are not null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if the collection is null',\n    'alternatives': [\n      '@throws NullPointerException when the collection is null',\n      '@throws NullPointerException if the collection is set to null',\n      '@throws NullPointerException in case of a null collection'\n    ]\n  },\n  {\n    'tag': '@param collection the collection to add to, must not be null',\n    'alternatives': [\n      '@param collection the collection to append to, cannot be null',\n      '@param collection the target collection for the addition, must not be null',\n      '@param collection the collection to which elements are added, must not be null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if the collection or iterator is null',\n    'alternatives': [\n      '@throws NullPointerException when either the collection or iterator is null',\n      '@throws NullPointerException if either the collection or iterator is set to null',\n      '@throws NullPointerException in case of a null collection or iterator'\n    ]\n  }\n]"