"output = [\n{\n  'tag': '@return fitted model or {@code null} if no fit has been performed yet.',\n  'alternatives': [\n    '@return adjusted model or {@code null} if no fitting has been executed yet.',\n    '@return obtained model or {@code null} if no fitting has been carried out yet.',\n    '@return model that has been fitted or {@code null} if no fit has been done yet.',\n    '@return fitted model object or {@code null} if no fitting has been performed yet.',\n    '@return model that has been adjusted or {@code null} if no fit has been executed yet.'\n  ]\n},\n{\n  'tag': '@throws NotStrictlyPositiveException if data has no rows',\n  'alternatives': [\n    '@throws NotStrictlyPositiveException when there are no rows in the data.',\n    '@throws NotStrictlyPositiveException in case the data does not contain any rows.',\n    '@throws NotStrictlyPositiveException if the data has zero rows.',\n    '@throws NotStrictlyPositiveException if there are no rows present in the data.',\n    '@throws NotStrictlyPositiveException if the data does not have any rows.'\n  ]\n},\n{\n  'tag': '@throws DimensionMismatchException if rows of data have different numbers\\n            of columns',\n  'alternatives': [\n    '@throws DimensionMismatchException when the columns of the data\\'s rows have different numbers.',\n    '@throws DimensionMismatchException if the rows of the data have varying column counts.',\n    '@throws DimensionMismatchException in case the columns of the data rows differ in quantity.',\n    '@throws DimensionMismatchException if the number of columns in each row of the data are unequal.',\n    '@throws DimensionMismatchException if the data has rows with inconsistent column counts.'\n  ]\n},\n{\n  'tag': '@throws NumberIsTooSmallException if the number of columns in the data is\\n            less than 2',\n  'alternatives': [\n    '@throws NumberIsTooSmallException when the data has less than 2 columns.',\n    '@throws NumberIsTooSmallException if there are fewer than 2 columns in the data.',\n    '@throws NumberIsTooSmallException if the data contains less than 2 columns.',\n    '@throws NumberIsTooSmallException if the column count in the data is below 2.',\n    '@throws NumberIsTooSmallException in case the data has a column count smaller than 2.'\n  ]\n},\n{\n  'tag': '@return the first shape parameter.',\n  'alternatives': [\n    '@return the initial shape parameter.',\n    '@return the shape parameter at the beginning.',\n    '@return the first parameter describing the shape.',\n    '@return the shape parameter in the first position.',\n    '@return the shape parameter with the lowest index.'\n  ]\n},\n{\n  'tag': '@return the second shape parameter.',\n  'alternatives': [\n    '@return the secondary shape parameter.',\n    '@return the shape parameter following the first one.',\n    '@return the second parameter describing the shape.',\n    '@return the shape parameter in the second position.',\n    '@return the shape parameter with the next index.'\n  ]\n},\n{\n  'tag': '@return the solver absolute accuracy.',\n  'alternatives': [\n    '@return the absolute accuracy of the solver.',\n    '@return the solver\\'s accuracy level.',\n    '@return the accuracy of the solver.',\n    '@return the precision that the solver achieves.',\n    '@return the level of accuracy provided by the solver.'\n  ]\n},\n{\n  'tag': '@return lower bound of the support (always 0)',\n  'alternatives': [\n    '@return smallest allowable value for the support (always 0)',\n    '@return minimum value for the support (always 0)',\n    '@return the lowest possible value for the support (always 0)',\n    '@return the support\\'s lower limit (always 0)',\n    '@return the smallest value that the support can have (always 0)'\n  ]\n},\n{\n  'tag': '@return upper bound of the support (always 1)',\n  'alternatives': [\n    '@return largest allowable value for the support (always 1)',\n    '@return maximum value for the support (always 1)',\n    '@return the highest possible value for the support (always 1)',\n    '@return the support\\'s upper limit (always 1)',\n    '@return the largest value that the support can have (always 1)'\n  ]\n},\n{\n  'tag': '@param alpha2 angle of the second elementary rotation',\n  'alternatives': [\n    '@param alpha2 angle for the second elementary rotation',\n    '@param alpha2 angle representing the second elementary rotation',\n    '@param alpha2 angle specifying the second elementary rotation',\n    '@param alpha2 angle used in the second elementary rotation',\n    '@param alpha2 angle that defines the second elementary rotation'\n  ]\n},\n{\n  'tag': '@param alpha3 angle of the third elementary rotation',\n  'alternatives': [\n    '@param alpha3 angle for the third elementary rotation',\n    '@param alpha3 angle representing the third elementary rotation',\n    '@param alpha3 angle specifying the third elementary rotation',\n    '@param alpha3 angle used in the third elementary rotation',\n    '@param alpha3 angle that defines the third elementary rotation'\n  ]\n},\n{\n  'tag': '@return abscissa of the vector',\n  'alternatives': [\n    '@return x-coordinate of the vector',\n    '@return horizontal position of the vector',\n    '@return the first coordinate of the vector',\n    '@return the component of the vector along the x-axis',\n    '@return the value of the vector in the x-direction'\n  ]\n},\n{\n  'tag': '@return ordinate of the vector',\n  'alternatives': [\n    '@return y-coordinate of the vector',\n    '@return vertical position of the vector',\n    '@return the second coordinate of the vector',\n    '@return the component of the vector along the y-axis',\n    '@return the value of the vector in the y-direction'\n  ]\n},\n{\n  'tag': '@return height of the vector',\n  'alternatives': [\n    '@return z-coordinate of the vector',\n    '@return altitude of the vector',\n    '@return the third coordinate of the vector',\n    '@return the component of the vector along the z-axis',\n    '@return the value of the vector in the z-direction'\n  ]\n},\n{\n  'tag': '@return vector coordinates',\n  'alternatives': [\n    '@return coordinates of the vector',\n    '@return the positions of the vector',\n    '@return the components of the vector',\n    '@return the values of the vector',\n    '@return the vector\\'s coordinate values'\n  ]\n},\n{\n  'tag': '@return azimuth (&alpha;) of the vector, between -&pi; and +&pi;',\n  'alternatives': [\n    '@return the azimuthal angle (&alpha;) of the vector, ranging from -&pi; to +&pi;',\n    '@return the angle (&alpha;) indicating the azimuth of the vector, between -&pi; and +&pi;',\n    '@return the azimuth (&alpha;) of the vector, lying in the range of -&pi; to +&pi;',\n    '@return the azimuthal angle (&alpha;) of the vector, constrained between -&pi; and +&pi;',\n    '@return the vector\\'s azimuth (&alpha;) expressed as a value between -&pi; and +&pi;'\n  ]\n},\n{\n  'tag': '@return elevation (&delta;) of the vector, between -&pi;/2 and +&pi;/2',\n  'alternatives': [\n    '@return the inclination (&delta;) of the vector, ranging from -&pi;/2 to +&pi;/2',\n    '@return the angle (&delta;) indicating the elevation of the vector, between -&pi;/2 and +&pi;/2',\n    '@return the elevation (&delta;) of the vector, lying in the range of -&pi;/2 to +&pi;/2',\n    '@return the angle (&delta;) specifying the vector\\'s elevation, between -&pi;/2 and +&pi;/2',\n    '@return the vector\\'s elevation (&delta;) expressed as a value between -&pi;/2 and +&pi;/2'\n  ]\n},\n{\n  'tag': '@return a new normalized vector orthogonal to the instance',\n  'alternatives': [\n    '@return a freshly computed unit vector perpendicular to the given one',\n    '@return a newly constructed vector that is perpendicular and has a unit length compared to the original',\n    '@return a newly created normalized vector that is orthogonal to the input vector',\n    '@return a newly generated vector which is orthogonal to the instance and has unit length',\n    '@return a new vector that is both orthogonal to the original and has a normalized magnitude'\n  ]\n},\n{\n  'tag': '@throws MathArithmeticException if the norm of the instance is null',\n  'alternatives': [\n    '@throws MathArithmeticException when the norm of the object equals zero',\n    '@throws MathArithmeticException in case the norm of the instance is zero',\n    '@throws MathArithmeticException if the instance\\'s norm is equal to zero',\n    '@throws MathArithmeticException if the norm of the object is null',\n    '@throws MathArithmeticException if the object\\'s norm equals zero'\n  ]\n},\n{\n  'tag': '@param v1 first vector',\n  'alternatives': [\n    '@param v1 initial vector',\n    '@param v1 vector at the start',\n    '@param v1 first input vector',\n    '@param v1 primary vector',\n    '@param v1 vector in the first position'\n  ]\n},\n{\n  'tag': '@param v2 second vector',\n  'alternatives': [\n    '@param v2 subsequent vector',\n    '@param v2 vector following',\n    '@param v2 second input vector',\n    '@param v2 secondary vector',\n    '@param v2 vector in the second position'\n  ]\n},\n{\n  'tag': '@return angular separation between v1 and v2',\n  'alternatives': [\n    '@return the angle separating v1 and v2',\n    '@return the angle of separation between v1 and v2',\n    '@return the angular difference between v1 and v2',\n    '@return the difference in angle between v1 and v2',\n    '@return the amount of angular separation between v1 and v2'\n  ]\n},\n{\n  'tag': '@throws MathArithmeticException if either vector has a null norm',\n  'alternatives': [\n    '@throws MathArithmeticException when either vector\\'s norm is zero',\n    '@throws MathArithmeticException if either vector has a zero norm',\n    '@throws MathArithmeticException in case either vector has a null norm',\n    '@throws MathArithmeticException if the norm of either vector is null',\n    '@throws MathArithmeticException if either vector has a norm equal to zero'\n  ]\n},\n{\n  'tag': '@param other Object to test for equality to this',\n  'alternatives': [\n    '@param other Object to check if it\\'s equal to this one',\n    '@param other Object to compare for equality with the current object',\n    '@param other The object to be compared with this one for equality',\n    '@param other Object to be tested against this one for equality',\n    '@param other The other object this one is being compared to for equality'\n  ]\n}\n]"