"[\n  {\n    \"tag\": \"@return The i-th entering edge.\",\n    \"alternatives\": [\n      \"@return The entering edge at index i.\",\n      \"@return The edge that enters at index i.\",\n      \"@return The edge entering at the i-th position.\"\n    ]\n  },\n  {\n    \"tag\": \"@throws IndexOutOfBoundException if <code>i</code> is negative or greater than or equal to the\\n            in-degree\",\n    \"alternatives\": [\n      \"@throws IndexOutOfBoundException when i is less than 0 or greater than or equal to the in-degree.\",\n      \"@throws IndexOutOfBoundException if i is a negative number or exceeds the in-degree.\",\n      \"@throws IndexOutOfBoundException if the value of i is negative or exceeds the in-degree.\"\n    ]\n  },\n  {\n    \"tag\": \"@param i Index of the edge.\",\n    \"alternatives\": [\n      \"@param i The index of the edge.\",\n      \"@param i Specifies the index of the edge.\",\n      \"@param i Indicates the position of the edge.\"\n    ]\n  },\n  {\n    \"tag\": \"@return The i-th leaving edge.\",\n    \"alternatives\": [\n      \"@return The leaving edge at index i.\",\n      \"@return The edge that leaves at index i.\",\n      \"@return The edge leaving at the i-th position.\"\n    ]\n  },\n  {\n    \"tag\": \"@throws IndexOutOfBoundException if <code>i</code> is negative or greater than or equal to the\\n            out-degree\",\n    \"alternatives\": [\n      \"@throws IndexOutOfBoundException when i is less than 0 or greater than or equal to the out-degree.\",\n      \"@throws IndexOutOfBoundException if i is a negative number or exceeds the out-degree.\",\n      \"@throws IndexOutOfBoundException if the value of i is negative or exceeds the out-degree.\"\n    ]\n  },\n  {\n    \"tag\": \"@return An iterator able to explore the graph in a breadth first way\\n        starting at this node.\",\n    \"alternatives\": [\n      \"@return A breadth first iterator for exploring the graph starting at this node.\",\n      \"@return An iterator that traverses the graph in a breadth first manner, starting from this node.\",\n      \"@return An iterator that explores the graph in a breadth-first manner, starting from this node.\"\n    ]\n  },\n  {\n    \"tag\": \"@param directed If false, the iterator will ignore edge orientation (the\\n           default is \\\"True\\\").\",\n    \"alternatives\": [\n      \"@param directed If set to false, the iterator will disregard edge orientation (the default is true).\",\n      \"@param directed If set to false, the iterator will not consider edge direction (the default is true).\",\n      \"@param directed If false, the iterator will treat edge orientation as irrelevant (true by default).\"\n    ]\n  },\n  {\n    \"tag\": \"@return An iterator able to explore the graph in a depth first way\\n        starting at this node.\",\n    \"alternatives\": [\n      \"@return A depth first iterator for exploring the graph starting at this node.\",\n      \"@return An iterator that traverses the graph in a depth first manner, starting from this node.\",\n      \"@return An iterator that explores the graph in a depth-first manner, starting from this node.\"\n    ]\n  },\n  {\n    \"tag\": \"@return A collection containing all directed and undirected edges,\\n        leaving or entering.\",\n    \"alternatives\": [\n      \"@return A collection that includes all directed and undirected edges, both leaving and entering.\",\n      \"@return A collection of all edges, directed or undirected, that either leave or enter this node.\",\n      \"@return A collection that contains all edges, whether directed or undirected, leaving or entering this node.\"\n    ]\n  },\n  {\n    \"tag\": \"@return A collection of only edges that leave this node plus all\\n        undirected edges.\",\n    \"alternatives\": [\n      \"@return A collection consisting only of edges that leave this node, as well as all undirected edges.\",\n      \"@return A collection that includes only the edges leaving this node, along with any undirected edges.\",\n      \"@return A collection containing exclusively the edges leaving this node, in addition to the undirected edges.\"\n    ]\n  },\n  {\n    \"tag\": \"@return A collection of only edges that enter this node plus all\\n        undirected edges.\",\n    \"alternatives\": [\n      \"@return A collection consisting only of edges that enter this node, as well as all undirected edges.\",\n      \"@return A collection that includes only the edges entering this node, along with any undirected edges.\",\n      \"@return A collection containing exclusively the edges entering this node, in addition to the undirected edges.\"\n    ]\n  },\n  {\n    \"tag\": \"@param node The target node.\",\n    \"alternatives\": [\n      \"@param node The node being targeted.\",\n      \"@param node The node that is the target.\",\n      \"@param node The node to which the operation is directed.\"\n    ]\n  },\n  {\n    \"tag\": \"@return True if a directed edge goes from this node to the other node or\\n        if an undirected edge exists.\",\n    \"alternatives\": [\n      \"@return Returns true if there is a directed edge from this node to the other node or if there is an undirected edge.\",\n      \"@return Returns true if there is a directed edge from this node to another node, or if there exists an undirected edge.\",\n      \"@return True if there is a directed edge from this node to another node or if there exists an undirected edge.\"\n    ]\n  },\n  {\n    \"tag\": \"@param index Index of the target node.\",\n    \"alternatives\": [\n      \"@param index The index of the target node.\",\n      \"@param index Indicates the index of the target node.\",\n      \"@param index Specifies the position of the target node.\"\n    ]\n  },\n  {\n    \"tag\": \"@throws IndexOutOfBoundsException if the index is negative or greater than {@code\\n            getNodeCount() - 1}.\",\n    \"alternatives\": [\n      \"@throws IndexOutOfBoundsException when the index is less than 0 or greater than or equal to getNodeCount() - 1.\",\n      \"@throws IndexOutOfBoundsException if the index is negative or exceeds getNodeCount() - 1.\",\n      \"@throws IndexOutOfBoundsException if the value of the index is negative or exceeds getNodeCount() - 1.\"\n    ]\n  },\n  {\n    \"tag\": \"@param node The source node.\",\n    \"alternatives\": [\n      \"@param node The node serving as the source.\",\n      \"@param node The node from which the operation originates.\",\n      \"@param node The node providing the source.\"\n    ]\n  },\n  {\n    \"tag\": \"@param index Index of the source node.\",\n    \"alternatives\": [\n      \"@param index The index of the source node.\",\n      \"@param index Indicates the index of the source node.\",\n      \"@param index Specifies the position of the source node.\"\n    ]\n  }\n]"