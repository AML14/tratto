"output=[\n  {\n    'tag': '@param dstBlock destination block',\n    'alternatives': [\n      '@param dstBlock the block that will be used as the destination'\n      '@param dstBlock the target block'\n      '@param dstBlock the block to which the operation will be applied'\n      '@param dstBlock the block where the data will be copied'\n      '@param dstBlock the block that will receive the data'\n    ]\n  },\n  {\n    'tag': '@param dstWidth destination block width ({@link #BLOCK_SIZE} or smaller)',\n    'alternatives': [\n      '@param dstWidth width of the destination block ({@link #BLOCK_SIZE} or less)'\n      '@param dstWidth width of the destination block (maximum {@link #BLOCK_SIZE})'\n      '@param dstWidth width of the target block (up to {@link #BLOCK_SIZE})'\n      '@param dstWidth width of the block where the data will be copied (up to {@link #BLOCK_SIZE})'\n      '@param dstWidth width of the block that will receive the data (maximum {@link #BLOCK_SIZE})'\n    ]\n  },\n  {\n    'tag': '@param dstStartRow start row in the destination block',\n    'alternatives': [\n      '@param dstStartRow starting row index in the destination block'\n      '@param dstStartRow index of the row where the operation starts in the destination block'\n      '@param dstStartRow beginning row in the destination block'\n      '@param dstStartRow row index to begin the operation in the destination block'\n      '@param dstStartRow first row in the destination block where the data will be placed'\n    ]\n  },\n  {\n    'tag': '@param dstStartColumn start column in the destination block',\n    'alternatives': [\n      '@param dstStartColumn starting column index in the destination block'\n      '@param dstStartColumn index of the column where the operation starts in the destination block'\n      '@param dstStartColumn beginning column in the destination block'\n      '@param dstStartColumn column index to begin the operation in the destination block'\n      '@param dstStartColumn first column in the destination block where the data will be placed'\n    ]\n  },\n  {\n    'tag': '@param row the row to be set',\n    'alternatives': [\n      '@param row the row that will be assigned'\n      '@param row the row to set'\n      '@param row the assigned row'\n      '@param row the row that needs to be updated'\n      '@param row the row that should be modified'\n    ]\n  },\n  {\n    'tag': '@param matrix row matrix (must have one row and the same number of columns\\nas the instance)',\n    'alternatives': [\n      '@param matrix row matrix (should have a single row and the same number of columns as the instance)'\n      '@param matrix row matrix (requires one row and the same number of columns as the instance)'\n      '@param matrix row matrix (must have one row and the exact number of columns as the instance)'\n      '@param matrix row matrix (needs to have one row and the identical number of columns as the instance)'\n      '@param matrix row matrix (must be a single row and have the same number of columns as the instance)'\n    ]\n  },\n  {\n    'tag': '@throws OutOfRangeException if the specified row index is invalid.',\n    'alternatives': [\n      '@throws OutOfRangeException when the provided row index is not valid.'\n      '@throws OutOfRangeException if the given row index is out of range.'\n      '@throws OutOfRangeException if the row index provided is invalid.'\n      '@throws OutOfRangeException when the specified row index is not within the valid range.'\n      '@throws OutOfRangeException if the row index is outside the acceptable range.'\n    ]\n  },\n  {\n    'tag': '@throws MatrixDimensionMismatchException if the matrix dimensions do\\nnot match one instance row.',\n    'alternatives': [\n      '@throws MatrixDimensionMismatchException when the dimensions of the matrix do not match an instance row.'\n      '@throws MatrixDimensionMismatchException if the matrix size is not compatible with a single row of the instance.'\n      '@throws MatrixDimensionMismatchException if the matrix does not have the same dimensions as one row of the instance.'\n      '@throws MatrixDimensionMismatchException when the matrix size does not match the dimensions of a row in the instance.'\n      '@throws MatrixDimensionMismatchException if the dimensions of the matrix are not the same as one row of the instance.'\n    ]\n  },\n  {\n    'tag': '@param column the column to be set',\n    'alternatives': [\n      '@param column the column that will be assigned'\n      '@param column the column to set'\n      '@param column the assigned column'\n      '@param column the column that needs to be updated'\n      '@param column the column that should be modified'\n    ]\n  },\n  {\n    'tag': '@param matrix column matrix (must have one column and the same number of rows\\nas the instance)',\n    'alternatives': [\n      '@param matrix column matrix (should have a single column and the same number of rows as the instance)'\n      '@param matrix column matrix (requires one column and the same number of rows as the instance)'\n      '@param matrix column matrix (must have one column and the exact number of rows as the instance)'\n      '@param matrix column matrix (needs to have one column and the identical number of rows as the instance)'\n      '@param matrix column matrix (must be a single column and have the same number of rows as the instance)'\n    ]\n  },\n  {\n    'tag': '@throws OutOfRangeException if the specified column index is invalid.',\n    'alternatives': [\n      '@throws OutOfRangeException when the provided column index is not valid.'\n      '@throws OutOfRangeException if the given column index is out of range.'\n      '@throws OutOfRangeException if the column index provided is invalid.'\n      '@throws OutOfRangeException when the specified column index is not within the valid range.'\n      '@throws OutOfRangeException if the column index is outside the acceptable range.'\n    ]\n  },\n  {\n    'tag': '@throws MatrixDimensionMismatchException if the matrix dimensions do\\nnot match one instance column.',\n    'alternatives': [\n      '@throws MatrixDimensionMismatchException when the dimensions of the matrix do not match an instance column.'\n      '@throws MatrixDimensionMismatchException if the matrix size is not compatible with a single column of the instance.'\n      '@throws MatrixDimensionMismatchException if the matrix does not have the same dimensions as one column of the instance.'\n      '@throws MatrixDimensionMismatchException when the matrix size does not match the dimensions of a column in the instance.'\n      '@throws MatrixDimensionMismatchException if the dimensions of the matrix are not the same as one column of the instance.'\n    ]\n  },\n  {\n    'tag': '@param blockRow row index (in block sense) of the block',\n    'alternatives': [\n      '@param blockRow index of the block row (relative to the block)'\n      '@param blockRow row index (w.r.t the block) of the block'\n      '@param blockRow row index within the block'\n      '@param blockRow the row index (using block coordinates) of the block'\n      '@param blockRow the index of the block row (based on block sense)'\n    ]\n  },\n  {\n    'tag': '@return height (number of rows) of the block',\n    'alternatives': [\n      '@return height (number of rows) of the specific block'\n      '@return block height (number of rows)'\n      '@return number of rows constituting the block height'\n      '@return block height represented by the number of rows'\n      '@return the height of the block in terms of the number of rows'\n    ]\n  },\n  {\n    'tag': '@param blockColumn column index (in block sense) of the block',\n    'alternatives': [\n      '@param blockColumn index of the block column (relative to the block)'\n      '@param blockColumn column index (w.r.t the block) of the block'\n      '@param blockColumn column index within the block'\n      '@param blockColumn the column index (using block coordinates) of the block'\n      '@param blockColumn the index of the block column (based on block sense)'\n    ]\n  },\n  {\n    'tag': '@return width (number of columns) of the block',\n    'alternatives': [\n      '@return width (number of columns) of the specific block'\n      '@return block width (number of columns)'\n      '@return number of columns constituting the block width'\n      '@return block width represented by the number of columns'\n      '@return the width of the block in terms of the number of columns'\n    ]\n  },\n  {\n    'tag': '@param rows the number of rows in the new matrix',\n    'alternatives': [\n      '@param rows the number of rows in the new mathematical object'\n      '@param rows the number of rows in the created matrix'\n      '@param rows the count of rows that the new matrix will have'\n      '@param rows the number of rows in the resulting matrix'\n      '@param rows the total rows the new matrix should have'\n    ]\n  },\n  {\n    'tag': '@param columns the number of columns in the new matrix',\n    'alternatives': [\n      '@param columns the number of columns in the new mathematical object'\n      '@param columns the number of columns in the created matrix'\n      '@param columns the count of columns that the new matrix will have'\n      '@param columns the number of columns in the resulting matrix'\n      '@param columns the total columns the new matrix should have'\n    ]\n  },\n  {\n    'tag': '@throws NotStrictlyPositiveException if row or column dimension is not\\npositive.',\n    'alternatives': [\n      '@throws NotStrictlyPositiveException when either row or column dimension is not positive.'\n      '@throws NotStrictlyPositiveException if the row or column dimension is not a positive value.'\n      '@throws NotStrictlyPositiveException if either the row or column dimension is not positive.'\n      '@throws NotStrictlyPositiveException when the dimensional values of row or column are not positive.'\n      '@throws NotStrictlyPositiveException if the dimensions of row or column are not positive values.'\n    ]\n  },\n  {\n    'tag': '@param rawData data for new matrix, in raw layout',\n    'alternatives': [\n      '@param rawData the data to be used for creating a new matrix, represented in raw format'\n      '@param rawData the raw format data to build the new matrix'\n      '@param rawData data in raw format for constructing a new matrix'\n      '@param rawData the source data to construct a new matrix, in raw form'\n      '@param rawData raw data to be used when creating a new matrix'\n    ]\n  },\n  {\n    'tag': '@throws DimensionMismatchException if the shape of {@code blockData} is\\ninconsistent with block layout.',\n    'alternatives': [\n      '@throws DimensionMismatchException when the shape of {@code blockData} is not compatible with the block layout.'\n      '@throws DimensionMismatchException if the dimensions of {@code blockData} do not match the block layout.'\n      '@throws DimensionMismatchException if the structure of {@code blockData} is inconsistent with the block layout.'\n      '@throws DimensionMismatchException when the layout of the {@code blockData} is not consistent with the block structure.'\n      '@throws DimensionMismatchException if the shape of {@code blockData} is not in accordance with the block layout.'\n    ]\n  },\n  {\n    'tag': '@throws NotStrictlyPositiveException if row or column dimension is not\\npositive.',\n    'alternatives': [\n      '@throws NotStrictlyPositiveException when either row or column dimension is not positive.'\n      '@throws NotStrictlyPositiveException if the row or column dimension is not a positive value.'\n      '@throws NotStrictlyPositiveException if either the row or column dimension is not positive.'\n      '@throws NotStrictlyPositiveException when the dimensional values of row or column are not positive.'\n      '@throws NotStrictlyPositiveException if the dimensions of row or column are not positive values.'\n    ]\n  },\n  {\n    'tag': '@param rows Number of rows in the new matrix.',\n    'alternatives': [\n      '@param rows Number of rows present in the newly created matrix.'\n      '@param rows Number of rows expected in the resultant matrix.'\n      '@param rows Total number of rows in the new matrix.'\n      '@param rows The count of rows that the new matrix will have.'\n      '@param rows The number of rows in the resulting matrix.'\n    ]\n  },\n  {\n    'tag': '@param columns Number of columns in the new matrix.',\n    'alternatives': [\n      '@param columns Number of columns present in the newly created matrix.'\n      '@param columns Number of columns expected in the resultant matrix.'\n      '@param columns Total number of columns in the new matrix.'\n      '@param columns The count of columns that the new matrix will have.'\n      '@param columns The number of columns in the resulting matrix.'\n    ]\n  },\n  {\n    'tag': '@param blockData data for new matrix',\n    'alternatives': [\n      '@param blockData data used to create a new matrix'\n      '@param blockData data for constructing a new matrix'\n      '@param blockData the data for creating a new matrix'\n      '@param blockData data to build a new matrix'\n      '@param blockData data that will be used to generate a new matrix'\n    ]\n  }\n]"