"output = [\n  {\n    'tag': '@return this builder object',\n    'alternatives': [\n      '@return this object from the builder',\n      '@return the builder object',\n      '@return this object created by the builder',\n      '@return this object that was built by the builder',\n      '@return the builder instance itself'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if the specified edge factory is <code>\\nnull</code>.',\n    'alternatives': [\n      '@throws NullPointerException when the edge factory specified is <code>\\nnull</code>.',\n      '@throws NullPointerException if the provided edge factory is <code>\\nnull</code>.',\n      '@throws NullPointerException if the edge factory given is <code>\\nnull</code>.',\n      '@throws NullPointerException if the edge factory parameter is <code>\\nnull</code>.',\n      '@throws NullPointerException in the case where the edge factory is <code>\\nnull</code>.'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if the argument is <code>null</code>.',\n    'alternatives': [\n      '@throws IllegalArgumentException when the argument is <code>null</code>.',\n      '@throws IllegalArgumentException if the provided argument is <code>null</code>.',\n      '@throws IllegalArgumentException if the argument given is <code>null</code>.',\n      '@throws IllegalArgumentException if the argument parameter is <code>null</code>.',\n      '@throws IllegalArgumentException in case the argument is <code>null</code>.'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if the current graph is null.',\n    'alternatives': [\n      '@throws IllegalArgumentException when the current graph is null.',\n      '@throws IllegalArgumentException if the provided graph is null.',\n      '@throws IllegalArgumentException if the current graph is null.',\n      '@throws IllegalArgumentException if the graph parameter is null.',\n      '@throws IllegalArgumentException in case the current graph is null.'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if <code>maxSize</code> is negative or\\n0.',\n    'alternatives': [\n      '@throws IllegalArgumentException when <code>maxSize</code> is negative or\\n0.',\n      '@throws IllegalArgumentException if <code>maxSize</code> is less than or equal to 0.',\n      '@throws IllegalArgumentException if <code>maxSize</code> is negative or\\n0.',\n      '@throws IllegalArgumentException if the value of <code>maxSize</code> is negative or\\n0.',\n      '@throws IllegalArgumentException in the scenario where <code>maxSize</code> is negative or\\n0.'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if the specified path-element is <code>\\nnull</code>.',\n    'alternatives': [\n      '@throws NullPointerException when the specified path-element is <code>\\nnull</code>.',\n      '@throws NullPointerException if the provided path-element is <code>\\nnull</code>.',\n      '@throws NullPointerException if the path-element given is <code>\\nnull</code>.',\n      '@throws NullPointerException if the path-element parameter is <code>\\nnull</code>.',\n      '@throws NullPointerException in case the specified path-element is <code>\\nnull</code>.'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if the specified size is negative.',\n    'alternatives': [\n      '@throws IllegalArgumentException when the specified size is negative.',\n      '@throws IllegalArgumentException if the provided size is negative.',\n      '@throws IllegalArgumentException if the size given is negative.',\n      '@throws IllegalArgumentException if the size parameter is negative.',\n      '@throws IllegalArgumentException in case the specified size is negative.'\n    ]\n  },\n  {\n    'tag': '@return G<sub>1</sub>',\n    'alternatives': [\n      '@return G<sub>1</sub> graph',\n      '@return the graph G<sub>1</sub>',\n      '@return the G<sub>1</sub> graph object',\n      '@return the graph object G<sub>1</sub>',\n      '@return the graph identified as G<sub>1</sub>'\n    ]\n  },\n  {\n    'tag': '@param target ',\n    'alternatives': [\n      '@param targetObject ',\n      '@param targetItem ',\n      '@param destination ',\n      '@param targetEntity ',\n      '@param targetParameter '\n    ]\n  },\n  {\n    'tag': '@param vertexFactory ',\n    'alternatives': [\n      '@param nodeFactory ',\n      '@param vertexMaker ',\n      '@param nodeCreator ',\n      '@param vertexGenerator ',\n      '@param vertexProducer '\n    ]\n  },\n  {\n    'tag': '@param resultMap some array of vertices',\n    'alternatives': [\n      '@param resultMap an array containing vertices',\n      '@param resultMap an array of vertex objects',\n      '@param resultMap an array that holds vertices',\n      '@param resultMap an array storing vertex instances',\n      '@param resultMap a list of vertices stored in an array'\n    ]\n  },\n  {\n    'tag': '@param numVertices1 number of vertices in the first partition',\n    'alternatives': [\n      '@param numVertices1 total count of vertices in the first partition',\n      '@param numVertices1 count of vertices within the initial partition',\n      '@param numVertices1 number of vertices assigned to the first partition',\n      '@param numVertices1 quantity of vertices belonging to the initial partition',\n      '@param numVertices1 amount of vertices in the first partition'\n    ]\n  },\n  {\n    'tag': '@param numVertices2 number of vertices in the second partition',\n    'alternatives': [\n      '@param numVertices2 total count of vertices in the second partition',\n      '@param numVertices2 count of vertices within the subsequent partition',\n      '@param numVertices2 number of vertices assigned to the second partition',\n      '@param numVertices2 quantity of vertices belonging to the subsequent partition',\n      '@param numVertices2 amount of vertices in the second partition'\n    ]\n  },\n  {\n    'tag': '@param numEdges number of edges to be generated',\n    'alternatives': [\n      '@param numEdges quantity of edges to generate',\n      '@param numEdges total count of edges to be generated',\n      '@param numEdges count of edges that will be generated',\n      '@param numEdges number of edges to create',\n      '@param numEdges amount of edges to be generated'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException ',\n    'alternatives': [\n      '@throws IllegalArgumentException error',\n      '@throws IllegalArgumentException exception',\n      '@throws IllegalArgumentException case',\n      '@throws IllegalArgumentException scenario',\n      '@throws IllegalArgumentException condition'\n    ]\n  },\n  {\n    'tag': '@param numVertices number of vertices in the k partitions',\n    'alternatives': [\n      '@param numVertices count of vertices assigned to each of the k partitions',\n      '@param numVertices quantity of vertices belonging to the k partitions',\n      '@param numVertices the total number of vertices across the k partitions',\n      '@param numVertices total count of vertices spread evenly across the k partitions',\n      '@param numVertices amount of vertices in each of the k partitions'\n    ]\n  },\n  {\n    'tag': '@param numEdges number of edges to be generated between any two\\npartitions',\n    'alternatives': [\n      '@param numEdges quantity of edges to generate between any pair of partitions',\n      '@param numEdges total count of edges that will be generated between any two partitions',\n      '@param numEdges count of edges to create between each pair of partitions',\n      '@param numEdges number of edges to be generated connecting any two partitions',\n      '@param numEdges amount of edges to generate between any two partitions'\n    ]\n  },\n  {\n    'tag': '@param target ',\n    'alternatives': [\n      '@param targetObject ',\n      '@param targetItem ',\n      '@param destination ',\n      '@param targetEntity ',\n      '@param targetParameter '\n    ]\n  }\n]"