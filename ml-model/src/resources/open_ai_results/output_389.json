"output=[\n  {\n    'tag': '@throws OutOfRangeException if {@code index} is not in the interval\\n{@code [0, number of parameters)}.',\n    'alternatives': [\n      '@throws OutOfRangeException if {@code index} is outside the range\\n{@code [0, number of parameters)}.',\n      '@throws OutOfRangeException if the value of {@code index} is not within the\\ninterval {@code [0, number of parameters)}.'\n    ]\n  },\n  {\n    'tag': '@return an array standard errors associated with parameters estimates,\\n null if no estimation occurred',\n    'alternatives': [\n      '@return an array containing the standard errors of the parameter estimates.\\n If no estimation occurred, this method returns null.',\n      '@return null if no estimation has been performed.\\n Otherwise, it returns an array with the standard errors associated\\nto the parameter estimates.'\n    ]\n  },\n  {\n    'tag': '@param i {@code i}th regression parameter.',\n    'alternatives': [\n      '@param i the regression parameter with index {@code i}.',\n      '@param i denotes the {@code i}th regression parameter.'\n    ]\n  },\n  {\n    'tag': '@param j {@code j}th regression parameter.',\n    'alternatives': [\n      '@param j the regression parameter with index {@code j}.',\n      '@param j denotes the {@code j}th regression parameter.'\n    ]\n  },\n  {\n    'tag': '@return the covariance of the parameter estimates.',\n    'alternatives': [\n      '@return the covariance matrix of the parameter estimates.',\n      '@return the covariance between the estimated parameters.'\n    ]\n  },\n  {\n    'tag': '@throws OutOfRangeException if {@code i} or {@code j} is not in the\\ninterval {@code [0, number of parameters)}.',\n    'alternatives': [\n      '@throws OutOfRangeException if either {@code i} or {@code j} is outside\\nthe range {@code [0, number of parameters)}.',\n      '@throws OutOfRangeException if either {@code i} or {@code j} is not within\\nthe interval {@code [0, number of parameters)}.'\n    ]\n  },\n  {\n    'tag': '@return number of regressors, -1 if not estimated',\n    'alternatives': [\n      '@return the number of regressors. If they were not estimated, this\\nmethod returns -1.',\n      '@return -1 if the regressors were not estimated. Otherwise, it\\nreturns the actual number of regressors.'\n    ]\n  },\n  {\n    'tag': '@return Number of observations, -1 if an error condition prevents estimation',\n    'alternatives': [\n      '@return the number of observations. If an error condition prevents\\nestimation, this method returns -1.',\n      '@return -1 if an error condition prevents estimation. Otherwise,\\nit returns the actual number of observations.'\n    ]\n  },\n  {\n    'tag': '@return sum of squared deviations of y values',\n    'alternatives': [\n      '@return the sum of squared deviations of the y values.',\n      '@return the sum of the squares of the deviations of the y values.'\n    ]\n  },\n  {\n    'tag': '@return sum of squared deviations of predicted y values',\n    'alternatives': [\n      '@return the sum of squared deviations of the predicted y values.',\n      '@return the sum of the squares of the deviations of the predicted y values.'\n    ]\n  },\n  {\n    'tag': '@return sum of squared errors associated with the regression model',\n    'alternatives': [\n      '@return the sum of squared errors of the regression model.',\n      '@return the sum of the squares of the errors associated with the regression model.'\n    ]\n  },\n  {\n    'tag': '@return sum of squared deviations of y values',\n    'alternatives': [\n      '@return the sum of squared deviations of the y values.',\n      '@return the sum of the squares of the deviations of the y values.'\n    ]\n  },\n  {\n    'tag': '@return r-square, a double in the interval [0, 1]',\n    'alternatives': [\n      '@return r-square, a double between 0 and 1 (inclusive).',\n      '@return the coefficient of determination (r-squared), which is a\\nvalue between 0 and 1 (inclusive).'\n    ]\n  },\n  {\n    'tag': '@return adjusted R-Squared statistic',\n    'alternatives': [\n      '@return the adjusted R-Squared statistic.',\n      '@return the adjusted coefficient of determination (R-Squared).'\n    ]\n  },\n  {\n    'tag': '@return true if the model has an intercept term',\n    'alternatives': [\n      '@return true if the model includes an intercept term.',\n      '@return whether or not the model contains an intercept term.'\n    ]\n  },\n  {\n    'tag': '@param i first variable index',\n    'alternatives': [\n      '@param i the index of the first variable.',\n      '@param i denotes the index of the first variable.'\n    ]\n  },\n  {\n    'tag': '@param f the function to be sampled and transformed',\n    'alternatives': [\n      '@param f the function that will be sampled and transformed.',\n      '@param f represents the function that is going to be sampled and transformed.'\n    ]\n  },\n  {\n    'tag': '@param min the (inclusive) lower bound for the interval',\n    'alternatives': [\n      '@param min the lower bound of the interval (inclusive).',\n      '@param min represents the lower limit of the interval (inclusive).'\n    ]\n  },\n  {\n    'tag': '@param max the (exclusive) upper bound for the interval',\n    'alternatives': [\n      '@param max the upper bound of the interval (exclusive).',\n      '@param max represents the upper limit of the interval (exclusive).'\n    ]\n  },\n  {\n    'tag': '@param n the number of sample points',\n    'alternatives': [\n      '@param n the total number of sample points.',\n      '@param n denotes the total number of points in the sample.'\n    ]\n  },\n  {\n    'tag': '@param type the type of transform (forward, inverse) to be performed',\n    'alternatives': [\n      '@param type the type of transform to be performed (forward, inverse).',\n      '@param type specifies the transform type (forward or inverse) to be executed.'\n    ]\n  },\n  {\n    'tag': '@return the real transformed array',\n    'alternatives': [\n      '@return the array after performing the real transformation.',\n      '@return the transformed array of real numbers.'\n    ]\n  },\n  {\n    'tag': '@throws NonMonotonicSequenceException if the lower bound is greater than, or equal to the upper bound',\n    'alternatives': [\n      '@throws NonMonotonicSequenceException if the lower bound is not strictly\\nless than the upper bound.',\n      '@throws NonMonotonicSequenceException if the upper bound is not\\ngreater than the lower bound.'\n    ]\n  },\n  {\n    'tag': '@throws MathIllegalArgumentException if the sample cannot be transformed\\n  with the given type (this may be for example due to sample size, which is\\n  constrained in some transforms)',\n    'alternatives': [\n      '@throws MathIllegalArgumentException if the sample size is not within\\ncertain constraints for the given type of transform.',\n      '@throws MathIllegalArgumentException if it is not possible to transform the\\nsample according to the specific type, for example due to restrictions\\non sample size.'\n    ]\n  },\n  {\n    'tag': '@throws MathIllegalArgumentException if the length of the data array is\\n  not a power of two, or the first element of the data array is not zero',\n    'alternatives': [\n      '@throws MathIllegalArgumentException if the length of the data array is\\nnot a power of two or if the first element is different from zero.',\n      '@throws MathIllegalArgumentException if the length of the data array is\\nnot a power of two or if the first element is not equal to zero.'\n    ]\n  }\n]"