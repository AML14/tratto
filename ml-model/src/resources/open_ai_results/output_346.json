"output=[\n  {\n    'tag': '@param key the next key',\n    'alternatives': [\n      '@param key the following key',\n      '@param key the key that comes next',\n      '@param key the subsequent key',\n      '@param key the key to be used next',\n      '@param key the key for the upcoming operation'\n    ]\n  },\n  {\n    'tag': '@return null always',\n    'alternatives': [\n      '@return always null',\n      '@return null in all cases',\n      '@return null every time',\n      '@return null without exception',\n      '@return null as the result',\n      '@return the value null'\n    ]\n  },\n  {\n    'tag': '@param key the key to compare',\n    'alternatives': [\n      '@param key the key for comparison',\n      '@param key for comparing',\n      '@param key used for comparison',\n      '@param key to be compared',\n      '@param the key to compare against'\n    ]\n  },\n  {\n    'tag': '@return true if equal',\n    'alternatives': [\n      '@return true if they are equal',\n      '@return true in case of equality',\n      '@return true when they are the same',\n      '@return true if they match',\n      '@return true if they have equal values'\n    ]\n  },\n  {\n    'tag': '@param value the value to compare',\n    'alternatives': [\n      '@param value for comparison',\n      '@param value to be compared',\n      '@param value to check against',\n      '@param value used for comparison',\n      '@param the value to compare'\n    ]\n  },\n  {\n    'tag': '@param obj the object to compare to',\n    'alternatives': [\n      '@param obj for comparison',\n      '@param obj to be compared',\n      '@param obj to check against',\n      '@param obj used for comparison',\n      '@param the object to compare'\n    ]\n  },\n  {\n    'tag': '@return true if equal',\n    'alternatives': [\n      '@return true if they are equal',\n      '@return true in case of equality',\n      '@return true when they are the same',\n      '@return true if they match',\n      '@return true if they have equal values'\n    ]\n  },\n  {\n    'tag': '@return a shallow clone',\n    'alternatives': [\n      '@return a shallow copy',\n      '@return a clone without deep copying',\n      '@return a clone with shallow copying',\n      '@return a clone that is not deep',\n      '@return a partially copied clone'\n    ]\n  },\n  {\n    'tag': '@param obj the object to compare to',\n    'alternatives': [\n      '@param obj for comparison',\n      '@param obj to be compared',\n      '@param obj to check against',\n      '@param obj used for comparison',\n      '@param the object to compare'\n    ]\n  },\n  {\n    'tag': '@return true if equal',\n    'alternatives': [\n      '@return true if they are equal',\n      '@return true in case of equality',\n      '@return true when they are the same',\n      '@return true if they match',\n      '@return true if they have equal values'\n    ]\n  },\n  {\n    'tag': '@return the hash code defined in the Map interface',\n    'alternatives': [\n      '@return the hash code defined by the Map interface',\n      '@return the hash code specified in the Map interface',\n      '@return the Map interface-defined hash code',\n      '@return the Map interface-specified hash code',\n      '@return the hash code as defined in the Map interface'\n    ]\n  },\n  {\n    'tag': '@return a string version of the map',\n    'alternatives': [\n      '@return a string representation of the map',\n      '@return a string format of the map',\n      '@return a textual version of the map',\n      '@return a text representation of the map',\n      '@return a string form of the map'\n    ]\n  },\n  {\n    'tag': '@param key the key to use',\n    'alternatives': [\n      '@param key to be employed',\n      '@param the key to utilize',\n      '@param key used in the operation',\n      '@param key to use in the process',\n      '@param key for the task'\n    ]\n  },\n  {\n    'tag': '@param value the value to use',\n    'alternatives': [\n      '@param value to be employed',\n      '@param the value to utilize',\n      '@param value used in the operation',\n      '@param value to use in the process',\n      '@param value for the task'\n    ]\n  },\n  {\n    'tag': '@param keyValue the key value pair to use',\n    'alternatives': [\n      '@param keyValue the pair to utilize',\n      '@param keyValue used in the operation',\n      '@param keyValue to use in the process',\n      '@param keyValue for the task',\n      '@param keyValue to be employed'\n    ]\n  },\n  {\n    'tag': '@param mapEntry the mapEntry to use',\n    'alternatives': [\n      '@param mapEntry to be employed',\n      '@param the mapEntry to utilize',\n      '@param mapEntry used in the operation',\n      '@param mapEntry to use in the process',\n      '@param mapEntry for the task'\n    ]\n  },\n  {\n    'tag': '@param map the map to copy, must be size 1',\n    'alternatives': [\n      '@param map to be copied, size must be 1',\n      '@param the map to replicate, size should be 1',\n      '@param map that needs to be copied, size needs to be 1',\n      '@param map to duplicate, size must be 1',\n      '@param the map to clone, size must equal 1'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if the size is not 1',\n    'alternatives': [\n      '@throws IllegalArgumentException when size is not 1',\n      '@throws IllegalArgumentException if size is different from 1',\n      '@throws IllegalArgumentException in case of size not being 1',\n      '@throws IllegalArgumentException if size does not equal 1',\n      '@throws IllegalArgumentException if the size differs from 1'\n    ]\n  },\n  {\n    'tag': '@param <K> the key type',\n    'alternatives': [\n      '@param <K> the type of the key',\n      '@param <K> the type assigned to the key',\n      '@param <K> the type of key used',\n      '@param <K> the key type expected',\n      '@param <K> the specific key type'\n    ]\n  },\n  {\n    'tag': '@param <V> the value type',\n    'alternatives': [\n      '@param <V> the type of the value',\n      '@param <V> the type assigned to the value',\n      '@param <V> the type of value used',\n      '@param <V> the value type expected',\n      '@param <V> the specific value type'\n    ]\n  },\n  {\n    'tag': '@return a new unmodifiable entry set',\n    'alternatives': [\n      '@return an unmodifiable entry set',\n      '@return a newly created entry set that cannot be modified',\n      '@return a brand new entry set that is unmodifiable',\n      '@return a fresh entry set that is read-only',\n      '@return a completely new entry set that is unmodifiable'\n    ]\n  },\n  {\n    'tag': '@param set the set to decorate, must not be null',\n    'alternatives': [\n      '@param set the set to enhance, not null',\n      '@param set the set to embellish, should not be null',\n      '@param set the set to beautify, cannot be null',\n      '@param set the set to augment, must be non-null',\n      '@param set the set to improve, should not be null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if set is null',\n    'alternatives': [\n      '@throws NullPointerException in case of null set',\n      '@throws NullPointerException when set is null',\n      '@throws NullPointerException if set parameter is null',\n      '@throws NullPointerException if argument set is null',\n      '@throws NullPointerException if provided set is null'\n    ]\n  },\n  {\n    'tag': '@return the current size',\n    'alternatives': [\n      '@return the size at present',\n      '@return the size currently',\n      '@return the size at this moment',\n      '@return the size at the current time',\n      '@return the size as of now'\n    ]\n  }\n]"