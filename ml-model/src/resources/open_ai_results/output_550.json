"[\n  {\n    \"tag\": \"@throws NullArgumentException if {@code format} is {@code null}.\",\n    \"alternatives\": [\n      \"@throws NullArgumentException if {@code format} is null.\",\n      \"@throws NullArgumentException when {@code format} is null.\",\n      \"@throws NullArgumentException if the value of {@code format} is null.\",\n      \"@throws NullArgumentException if the parameter {@code format} is null.\",\n      \"@throws NullArgumentException if the {@code format} argument is null.\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NullArgumentException if original is null\",\n    \"alternatives\": [\n      \"@throws NullArgumentException if the original value is null.\",\n      \"@throws NullArgumentException when the original argument is null.\",\n      \"@throws NullArgumentException if the parameter 'original' is null.\",\n      \"@throws NullArgumentException if the argument 'original' is null.\",\n      \"@throws NullArgumentException if {@code original} is null.\"\n    ]\n  },\n  {\n    \"tag\": \"@throws MathIllegalArgumentException if the array is null or the array index\\n parameters are not valid\",\n    \"alternatives\": [\n      \"@throws MathIllegalArgumentException if the array is null or the array index parameters are invalid.\",\n      \"@throws MathIllegalArgumentException when either the array is null or the array index parameters are not valid.\",\n      \"@throws MathIllegalArgumentException if the array is null or the array index parameters are incorrect.\",\n      \"@throws MathIllegalArgumentException when the array is null or the array index parameters are not valid.\",\n      \"@throws MathIllegalArgumentException if either the array is null or the array index parameters are not valid.\"\n    ]\n  },\n  {\n    \"tag\": \"@return the sum of the squares of the values or 0 if length = 0\",\n    \"alternatives\": [\n      \"@return the sum of the squares of the values, or 0 if the length is 0.\",\n      \"@return the sum of the values squared or 0 if the length is 0.\",\n      \"@return the sum of the values squared, unless the length is 0 in which case returns 0.\",\n      \"@return the sum of the squares of the values. Returns 0 if the length is 0.\",\n      \"@return the sum of the squares of the values. If the length is 0, returns 0.\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NullArgumentException if either source or dest is null\",\n    \"alternatives\": [\n      \"@throws NullArgumentException if either source or dest is null.\",\n      \"@throws NullArgumentException when either the source or destination is null.\",\n      \"@throws NullArgumentException if the source or dest argument is null.\",\n      \"@throws NullArgumentException if both source and dest are null.\",\n      \"@throws NullArgumentException if either the source parameter or the dest parameter is null.\"\n    ]\n  },\n  {\n    \"tag\": \"@throws org.apache.commons.math3.exception.NullArgumentException if\\nany argument is {@code null}.\",\n    \"alternatives\": [\n      \"@throws org.apache.commons.math3.exception.NullArgumentException if any argument is null.\",\n      \"@throws org.apache.commons.math3.exception.NullArgumentException when any argument is null.\",\n      \"@throws org.apache.commons.math3.exception.NullArgumentException if any of the arguments are null.\",\n      \"@throws org.apache.commons.math3.exception.NullArgumentException when any argument is set to null.\",\n      \"@throws org.apache.commons.math3.exception.NullArgumentException if any parameter is null.\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NotPositiveException if the number of elements is not positive.\",\n    \"alternatives\": [\n      \"@throws NotPositiveException if the number of elements is not greater than zero.\",\n      \"@throws NotPositiveException when the number of elements is not positive.\",\n      \"@throws NotPositiveException if the count of elements is not positive.\",\n      \"@throws NotPositiveException when the number of elements is not strictly positive.\",\n      \"@throws NotPositiveException if the number of elements is less than or equal to zero.\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NumberIsTooSmallException if {@code end < start}\",\n    \"alternatives\": [\n      \"@throws NumberIsTooSmallException if {@code end} is less than {@code start}.\",\n      \"@throws NumberIsTooSmallException if the value of {@code end} is smaller than {@code start}.\",\n      \"@throws NumberIsTooSmallException when {@code end} is less than {@code start}.\",\n      \"@throws NumberIsTooSmallException if the end parameter is less than the start parameter.\",\n      \"@throws NumberIsTooSmallException if the end value is smaller than the start value.\"\n    ]\n  },\n  {\n    \"tag\": \"@throws MathArithmeticException if the norm is zero.\",\n    \"alternatives\": [\n      \"@throws MathArithmeticException if the norm equals zero.\",\n      \"@throws MathArithmeticException when the norm is zero.\",\n      \"@throws MathArithmeticException if the norm is equal to zero.\",\n      \"@throws MathArithmeticException if the norm value is zero.\",\n      \"@throws MathArithmeticException if the norm is zero or undefined.\"\n    ]\n  },\n  {\n    \"tag\": \"@param initialStepBoundFactor Positive input variable used in\\ndetermining the initial step bound. This bound is set to the\\nproduct of initialStepBoundFactor and the euclidean norm of\\n{@code diag * x} if non-zero, or else to {@code initialStepBoundFactor}\\nitself. In most cases factor should lie in the interval\\n{@code (0.1, 100.0)}. {@code 100} is a generally recommended value.\",\n    \"alternatives\": [\n      \"@param initialStepBoundFactor Positive input variable used to determine the initial step bound. The bound is calculated as the product of initialStepBoundFactor and the euclidean norm of {@code diag * x}. If the euclidean norm is zero, the bound is set to initialStepBoundFactor itself. Generally, the recommended value for the factor is {@code 100}, which should be within the range (0.1, 100.0).\",\n      \"@param initialStepBoundFactor Positive input variable that determines the initial step bound. This bound is computed as the product of the initialStepBoundFactor and the euclidean norm of {@code diag * x}. If the euclidean norm is zero, the bound is set to the initialStepBoundFactor itself. Typically, the factor should be in the range of (0.1, 100.0), and a value of {@code 100} is often suggested.\",\n      \"@param initialStepBoundFactor Positive input variable used to calculate the initial step bound. This bound is obtained by multiplying the initialStepBoundFactor with the euclidean norm of {@code diag * x}. If the euclidean norm is zero, the bound is set to initialStepBoundFactor. Generally, the factor should be in the interval (0.1, 100.0), and a recommended value is {@code 100}.\",\n      \"@param initialStepBoundFactor Positive input variable that determines the initial step bound. The bound is set to the product of initialStepBoundFactor and the euclidean norm of {@code diag * x}, unless the euclidean norm is zero, in which case the bound is set to initialStepBoundFactor itself. In most cases, the recommended value for the factor is {@code 100}, which should be within the range (0.1, 100.0).\",\n      \"@param initialStepBoundFactor Positive input variable used for computing the initial step bound. The bound is determined by multiplying the initialStepBoundFactor by the euclidean norm of {@code diag * x}. If the euclidean norm is zero, the bound is set to the initialStepBoundFactor itself. Typically, the factor should be in the range between 0.1 and 100.0, and a value of {@code 100} is commonly used.\"\n    ]\n  },\n  {\n    \"tag\": \"@param minimalStep minimal step (must be positive even for backward\\nintegration), the last step can be smaller than this\",\n    \"alternatives\": [\n      \"@param minimalStep smallest step size, which must be positive even for backward integration. The size of the last step can be smaller than this value.\",\n      \"@param minimalStep minimum step size, which must be positive even when integrating backward. The last step may be smaller than this value.\",\n      \"@param minimalStep minimum step value (must be positive, even for backward integration), with the last step allowed to be smaller.\",\n      \"@param minimalStep the smallest step size allowed, even when integrating backwards. The size of the last step may be smaller than this.\",\n      \"@param minimalStep the minimum step size, which must be positive even for backward integration, where the last step can be smaller than this.\"\n    ]\n  },\n  {\n    \"tag\": \"@param maximalStep maximal step (must be positive even for backward\\nintegration)\",\n    \"alternatives\": [\n      \"@param maximalStep maximum step size (also positive, even when integrating backward)\",\n      \"@param maximalStep largest step size (must be positive even for backward integration)\",\n      \"@param maximalStep the maximum step size, which must be positive even for backward integration\",\n      \"@param maximalStep the largest step size allowed, even for backward integration. Must be a positive value.\",\n      \"@param maximalStep the maximum step size, which must be positive even when integrating backward.\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NullArgumentException if {@code optimizer} or {@code generator}\\nis {@code null}.\",\n    \"alternatives\": [\n      \"@throws NullArgumentException if either {@code optimizer} or {@code generator} is null.\",\n      \"@throws NullArgumentException when either the {@code optimizer} or {@code generator} is null.\",\n      \"@throws NullArgumentException if the {@code optimizer} or {@code generator} argument is null.\",\n      \"@throws NullArgumentException if the either the {@code optimizer} parameter or the {@code generator} parameter is null.\",\n      \"@throws NullArgumentException if either the optimizer or generator is null.\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NotStrictlyPositiveException if {@code starts < 1}.\",\n    \"alternatives\": [\n      \"@throws NotStrictlyPositiveException if the value of {@code starts} is less than 1.\",\n      \"@throws NotStrictlyPositiveException when {@code starts} is smaller than 1.\",\n      \"@throws NotStrictlyPositiveException if the starts parameter is less than 1.\",\n      \"@throws NotStrictlyPositiveException if the value of starts is not positive.\",\n      \"@throws NotStrictlyPositiveException if the number of starts is less than 1.\"\n    ]\n  },\n  {\n    \"tag\": \"@param starts Number of starts to perform. If {@code starts == 1},\\nthe {@link #optimize(int,MultivariateFunction,GoalType,double[])\\noptimize} will return the same solution as {@code optimizer} would.\",\n    \"alternatives\": [\n      \"@param starts The number of starts to perform. If starts is equal to 1, the optimize method will return the same solution as the optimizer.\",\n      \"@param starts The count of starts to be executed. If starts is equal to 1, the optimize method will return the same result as the optimizer.\",\n      \"@param starts The total number of starts that will be performed. In case starts is equal to 1, the optimize method will return the same solution as the optimizer.\",\n      \"@param starts The number of starting points to use. If starts is equal to 1, the optimize method will yield the same solution as the optimizer.\",\n      \"@param starts The number of start iterations to make. If starts is set to 1, the optimize method will return the exact solution given by the optimizer.\"\n    ]\n  },\n  {\n    \"tag\": \"@return the tree node containing the smallest element in the tree\\nor null if the tree is empty\",\n    \"alternatives\": [\n      \"@return the tree node that holds the minimum element in the tree, or null if the tree is empty.\",\n      \"@return the tree node that contains the smallest element in the tree. If the tree is empty, it returns null.\",\n      \"@return the tree node with the minimum value in the tree, or null if the tree is empty.\",\n      \"@return the tree node that stores the smallest element in the tree. Returns null if the tree is empty.\",\n      \"@return the tree node that represents the smallest element in the tree. If the tree is empty, it returns null.\"\n    ]\n  },\n  {\n    \"tag\": \"@return the tree node containing the largest element in the tree\\nor null if the tree is empty\",\n    \"alternatives\": [\n      \"@return the tree node that holds the maximum element in the tree, or null if the tree is empty.\",\n      \"@return the tree node that contains the largest element in the tree. If the tree is"