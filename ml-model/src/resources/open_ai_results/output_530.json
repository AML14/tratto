"[\n  {\n    \"tag\": \"@param map the map\",\n    \"alternatives\": [\n      \"@param map the dictionary\",\n      \"@param map the table\",\n      \"@param map the collection\",\n      \"@param map the hashmap\",\n      \"@param map the associative array\"\n    ]\n  },\n  {\n    \"tag\": \"@param key the key\",\n    \"alternatives\": [\n      \"@param key the identifier\",\n      \"@param key the index\",\n      \"@param key the symbol\",\n      \"@param key the keyword\",\n      \"@param key the access code\"\n    ]\n  },\n  {\n    \"tag\": \"@param value the new value\",\n    \"alternatives\": [\n      \"@param value the updated value\",\n      \"@param value the modified value\",\n      \"@param value the assigned value\",\n      \"@param value the input value\",\n      \"@param value the changed value\"\n    ]\n  },\n  {\n    \"tag\": \"@return the previous value\",\n    \"alternatives\": [\n      \"@return the value before\",\n      \"@return the old value\",\n      \"@return the initial value\",\n      \"@return the preexisting value\",\n      \"@return the prior value\"\n    ]\n  },\n  {\n    \"tag\": \"@param obj the object to compare to\",\n    \"alternatives\": [\n      \"@param obj the object to compare against\",\n      \"@param obj the object for comparison\",\n      \"@param obj the object to be compared\",\n      \"@param obj the object of comparison\",\n      \"@param obj the object to compare with\"\n    ]\n  },\n  {\n    \"tag\": \"@return true if equal key and value\",\n    \"alternatives\": [\n      \"@return true if key and value are equal\",\n      \"@return true when key and value match\",\n      \"@return true if key and value are identical\",\n      \"@return true when key and value coincide\",\n      \"@return true if key and value correspond\"\n    ]\n  },\n  {\n    \"tag\": \"@return a suitable hash code\",\n    \"alternatives\": [\n      \"@return an appropriate hash code\",\n      \"@return a valid hash code\",\n      \"@return a proper hash code\",\n      \"@return a relevant hash code\",\n      \"@return a fitting hash code\"\n    ]\n  },\n  {\n    \"tag\": \"@param key the key for the entry, may be null\",\n    \"alternatives\": [\n      \"@param key the entry key, optionally null\",\n      \"@param key the identifier of the entry, possibly null\",\n      \"@param key the entry's key, could be null\",\n      \"@param key the key associated with the entry, null allowed\",\n      \"@param key the key of the entry, may be null\"\n    ]\n  },\n  {\n    \"tag\": \"@param value the value for the entry, may be null\",\n    \"alternatives\": [\n      \"@param value the entry value, optionally null\",\n      \"@param value the data of the entry, possibly null\",\n      \"@param value the entry's value, could be null\",\n      \"@param value the value associated with the entry, null allowed\",\n      \"@param value the value of the entry, may be null\"\n    ]\n  },\n  {\n    \"tag\": \"@param <E> the element type\",\n    \"alternatives\": [\n      \"@param <E> the type of element\",\n      \"@param <E> the type of object\",\n      \"@param <E> the class of elements\",\n      \"@param <E> the kind of element\",\n      \"@param <E> the category of element\"\n    ]\n  },\n  {\n    \"tag\": \"@return a synchronized multiset backed by that multiset\",\n    \"alternatives\": [\n      \"@return a thread-safe multiset that is based on the same multiset\",\n      \"@return a synchronized multiset that shares the same underlying multiset\",\n      \"@return a concurrent multiset implemented using the provided multiset\",\n      \"@return a synchronized multiset utilizing the given multiset\",\n      \"@return a multiset with synchronized access, supported by the original multiset\"\n    ]\n  },\n  {\n    \"tag\": \"@param <E> the element type\",\n    \"alternatives\": [\n      \"@param <E> the specific item type\",\n      \"@param <E> the particular element type\",\n      \"@param <E> the distinctive object type\",\n      \"@param <E> the unique element category\",\n      \"@param <E> the singular item kind\"\n    ]\n  },\n  {\n    \"tag\": \"@return an unmodifiable view of that multiset\",\n    \"alternatives\": [\n      \"@return a read-only representation of the multiset\",\n      \"@return a view of the multiset that cannot be modified\",\n      \"@return an immutable version of the multiset\",\n      \"@return a non-modifiable perspective of the multiset\",\n      \"@return a view of the multiset that is not changeable\"\n    ]\n  },\n  {\n    \"tag\": \"@param <E> the element type\",\n    \"alternatives\": [\n      \"@param <E> the type of element\",\n      \"@param <E> the kind of object\",\n      \"@param <E> the class of elements\",\n      \"@param <E> the category of element\",\n      \"@param <E> the sort of item\"\n    ]\n  },\n  {\n    \"tag\": \"@return a predicated multiset backed by the given multiset\",\n    \"alternatives\": [\n      \"@return a filtered multiset that is based on the provided collection\",\n      \"@return a multiset with elements restricted by a condition, using the given multiset\",\n      \"@return a multiset that only contains elements satisfying a certain predicate, backed by the original multiset\",\n      \"@return a multiset with elements limited by a requirement, supported by the provided multiset\",\n      \"@return a multiset where elements are subject to a condition, utilizing the given multiset\"\n    ]\n  },\n  {\n    \"tag\": \"@param <E> the element type\",\n    \"alternatives\": [\n      \"@param <E> the specific item type\",\n      \"@param <E> the particular element type\",\n      \"@param <E> the distinctive object type\",\n      \"@param <E> the unique element category\",\n      \"@param <E> the singular item kind\"\n    ]\n  },\n  {\n    \"tag\": \"@return <code>true</code> if the iterator has more elements\",\n    \"alternatives\": [\n      \"@return <code>true</code> when there are additional elements in the iterator\",\n      \"@return <code>true</code> if there are more elements to iterate over\",\n      \"@return <code>true</code> when the iterator contains more elements\",\n      \"@return <code>true</code> if there are remaining elements to be iterated\",\n      \"@return <code>true</code> if there are still more elements in the iterator\"\n    ]\n  },\n  {\n    \"tag\": \"@return the next key in the iteration\",\n    \"alternatives\": [\n      \"@return the following key in the iteration\",\n      \"@return the key that comes after in the iteration\",\n      \"@return the key that comes next in the iteration\",\n      \"@return the key that follows in the iteration\",\n      \"@return the subsequent key in the iteration\"\n    ]\n  },\n  {\n    \"tag\": \"@throws java.util.NoSuchElementException if the iteration is finished\",\n    \"alternatives\": [\n      \"@throws java.util.NoSuchElementException when the iteration is completed\",\n      \"@throws java.util.NoSuchElementException if the iteration has reached the end\",\n      \"@throws java.util.NoSuchElementException when there are no more elements in the iteration\",\n      \"@throws java.util.NoSuchElementException if there are no elements left to iterate over\",\n      \"@throws java.util.NoSuchElementException when the iteration is done\"\n    ]\n  },\n  {\n    \"tag\": \"@return the current key\",\n    \"alternatives\": [\n      \"@return the key at the current position\",\n      \"@return the key that is presently selected\",\n      \"@return the key currently being accessed\",\n      \"@return the key at the current index\",\n      \"@return the key that is currently active\"\n    ]\n  },\n  {\n    \"tag\": \"@throws IllegalStateException if <code>next()</code> has not yet been called\",\n    \"alternatives\": [\n      \"@throws IllegalStateException if <code>next()</code> hasn't been invoked yet\",\n      \"@throws IllegalStateException if <code>next()</code> hasn't been executed yet\",\n      \"@throws IllegalStateException if <code>next()</code> hasn't been used yet\",\n      \"@throws IllegalStateException if <code>next()</code> hasn't been called yet\",\n      \"@throws IllegalStateException if <code>next()</code> hasn't been utilized yet\"\n    ]\n  },\n  {\n    \"tag\": \"@return the current value\",\n    \"alternatives\": [\n      \"@return the value at the current position\",\n      \"@return the value that is presently selected\",\n      \"@return the value currently being accessed\",\n      \"@return the value at the current index\",\n      \"@return the value that is currently active\"\n    ]\n  },\n  {\n    \"tag\": \"@throws IllegalStateException if <code>next()</code> has not yet been called\",\n    \"alternatives\": [\n      \"@throws IllegalStateException if <code>next()</code> hasn't been invoked yet\",\n      \"@throws IllegalStateException if <code>next()</code> hasn't been executed yet\",\n      \"@throws IllegalStateException if <code>next()</code> hasn't been used yet\",\n      \"@throws IllegalStateException if <code>next()</code> hasn't been called yet\",\n      \"@throws IllegalStateException if <code>next()</code> hasn't been utilized yet\"\n    ]\n  },\n  {\n    \"tag\": \"@throws UnsupportedOperationException if remove is not supported by the map\",\n    \"alternatives\": [\n      \"@throws UnsupportedOperationException if the map does not support removals\",\n      \"@throws UnsupportedOperationException if the map does not allow removal\",\n      \"@throws UnsupportedOperationException when the map does not permit removal\",\n      \"@throws UnsupportedOperationException if the map does not enable remove operations\",\n      \"@throws UnsupportedOperationException if the map does not have remove capability\"\n    ]\n  },\n  {\n    \"tag\": \"@throws IllegalStateException if <code>next()</code> has not yet been called\",\n    \"alternatives\": [\n      \"@throws IllegalStateException if <code>next()</code> hasn't been invoked yet\",\n      \"@throws IllegalStateException if <code>next()</code> hasn't been executed yet\",\n      \"@throws IllegalStateException if <code>next()</code> hasn't been used yet\",\n      \"@throws IllegalStateException if <code>next()</code> hasn't been called yet\",\n      \"@throws IllegalStateException if <code>next()</code> hasn't been utilized yet\"\n    ]\n  }\n]"