"output = [\n  {\n    'tag': '@param obj1 the first object to compare',\n    'alternatives': [\n      '@param obj1 the initial object for comparison',\n      '@param obj1 the primary object for comparison',\n      '@param obj1 the first object to evaluate',\n      '@param obj1 the object to compare in the first place',\n      '@param obj1 the object to be compared as the first argument'\n    ]\n  },\n  {\n    'tag': '@param obj2 the second object to compare',\n    'alternatives': [\n      '@param obj2 the next object for comparison',\n      '@param obj2 the secondary object for comparison',\n      '@param obj2 the second object to evaluate',\n      '@param obj2 the object to compare in the second place',\n      '@param obj2 the object to be compared as the second argument'\n    ]\n  },\n  {\n    'tag': '@return negative if obj1 is less, positive if greater, zero if equal',\n    'alternatives': [\n      '@return -1 if obj1 is smaller, +1 if greater, 0 if they are equal',\n      '@return the signum result of comparing obj1 to obj2 (negative if less, positive if greater, zero if equal)',\n      '@return the result of the comparison between obj1 and obj2 (negative if less, positive if greater, zero if equal)',\n      '@return the comparison result of obj1 and obj2 (negative if less, positive if greater, zero if equal)',\n      '@return the value indicating the relation between obj1 and obj2 (-1 if less, +1 if greater, 0 if equal)'\n    ]\n  },\n  {\n    'tag': '@throws ClassCastException if <i>obj1</i> is not a <code>Comparable</code>,\\n        or when <code>((Comparable)obj1).compareTo(obj2)</code> does',\n    'alternatives': [\n      '@throws ClassCastException when <i>obj1</i> is not a <code>Comparable</code>, or when comparing <code>((Comparable)obj1).compareTo(obj2)</code>',\n      '@throws ClassCastException if <i>obj1</i> is not an instance of <code>Comparable</code>, or when <code>((Comparable)obj1).compareTo(obj2)</code> fails',\n      '@throws ClassCastException if <i>obj1</i> does not implement <code>Comparable</code>, or when <code>((Comparable)obj1).compareTo(obj2)</code> encounters an error',\n      '@throws ClassCastException if <i>obj1</i> is not compatible with <code>Comparable</code>, or when <code>((Comparable)obj1).compareTo(obj2)</code> raises an exception',\n      '@throws ClassCastException if <i>obj1</i> is not of type <code>Comparable</code>, or when <code>((Comparable)obj1).compareTo(obj2)</code> gives an error'\n    ]\n  },\n  {\n    'tag': '@return a hash code for this comparator.',\n    'alternatives': [\n      '@return the hash code associated with this comparator.',\n      '@return the computed hash code for this comparator.',\n      '@return the hash value generated for this comparator.',\n      '@return the unique identifier calculated for this comparator.',\n      '@return the resulting hash code obtained for this comparator.'\n    ]\n  },\n  {\n    'tag': '@param object the object to compare with',\n    'alternatives': [\n      '@param object the object to be compared against',\n      '@param object the object for comparison',\n      '@param object the target object to compare with',\n      '@param object the object to be compared to',\n      '@param object the argument for comparison'\n    ]\n  },\n  {\n    'tag': '@return {@code true} if equal',\n    'alternatives': [\n      '@return {@code true} if they are equal',\n      '@return {@code true} if they have the same value',\n      '@return {@code true} in case of equality',\n      '@return {@code true} if they are identical',\n      '@return {@code true} if they match'\n    ]\n  },\n  {\n    'tag': '@param obj1 the first object to transform then compare',\n    'alternatives': [\n      '@param obj1 the initial object to transform and compare',\n      '@param obj1 the first transformed object for comparison',\n      '@param obj1 the object to be converted and compared as the first argument',\n      '@param obj1 the transformed object to compare as the first argument',\n      '@param obj1 the object to be modified and evaluated as the first argument'\n    ]\n  },\n  {\n    'tag': '@param obj2 the second object to transform then compare',\n    'alternatives': [\n      '@param obj2 the next object to transform and compare',\n      '@param obj2 the second transformed object for comparison',\n      '@param obj2 the object to be converted and compared as the second argument',\n      '@param obj2 the transformed object to compare as the second argument',\n      '@param obj2 the object to be modified and evaluated as the second argument'\n    ]\n  },\n  {\n    'tag': '@return negative if obj1 is less, positive if greater, zero if equal',\n    'alternatives': [\n      '@return -1 if obj1 is smaller, +1 if greater, 0 if they are equal',\n      '@return the signum result of comparing obj1 to obj2 (negative if less, positive if greater, zero if equal)',\n      '@return the result of the comparison between obj1 and obj2 (negative if less, positive if greater, zero if equal)',\n      '@return the comparison result of obj1 and obj2 (negative if less, positive if greater, zero if equal)',\n      '@return the value indicating the relation between obj1 and obj2 (-1 if less, +1 if greater, 0 if equal)'\n    ]\n  },\n  {\n    'tag': '@return a hash code for this comparator.',\n    'alternatives': [\n      '@return the hash code associated with this comparator.',\n      '@return the computed hash code for this comparator.',\n      '@return the hash value generated for this comparator.',\n      '@return the unique identifier calculated for this comparator.',\n      '@return the resulting hash code obtained for this comparator.'\n    ]\n  },\n  {\n    'tag': '@param object the object to compare to',\n    'alternatives': [\n      '@param object the object to be compared with',\n      '@param object the object to check against',\n      '@param object the target object to compare to',\n      '@param object the object to be compared against',\n      '@param object the argument to compare to'\n    ]\n  },\n  {\n    'tag': '@return true if equal',\n    'alternatives': [\n      '@return true if they are equal',\n      '@return true if they have the same value',\n      '@return true in case of equality',\n      '@return true if they are identical',\n      '@return true if they match'\n    ]\n  },\n  {\n    'tag': '@param transformer what will transform the arguments to <code>compare</code>',\n    'alternatives': [\n      '@param transformer the function to convert the arguments for <code>compare</code>',\n      '@param transformer the method to modify the arguments for <code>compare</code>',\n      '@param transformer the object responsible for transforming the arguments in <code>compare</code>',\n      '@param transformer the converter used to change the arguments for <code>compare</code>',\n      '@param transformer the operation to apply to the arguments of <code>compare</code>'\n    ]\n  },\n  {\n    'tag': '@param transformer what will transform the arguments to <code>compare</code>',\n    'alternatives': [\n      '@param transformer the function to convert the arguments for <code>compare</code>',\n      '@param transformer the method to modify the arguments for <code>compare</code>',\n      '@param transformer the object responsible for transforming the arguments in <code>compare</code>',\n      '@param transformer the converter used to change the arguments for <code>compare</code>',\n      '@param transformer the operation to apply to the arguments of <code>compare</code>'\n    ]\n  },\n  {\n    'tag': '@param decorated the decorated Comparator',\n    'alternatives': [\n      '@param decorated the Comparator being decorated',\n      '@param decorated the Comparator used for decoration',\n      '@param decorated the Comparator that is wrapped',\n      '@param decorated the Comparator being wrapped',\n      '@param decorated the Comparator used as a decorator'\n    ]\n  },\n  {\n    'tag': '@return true if attempts to change the FixedOrderComparator yield an\\n UnsupportedOperationException, false if it can be changed.',\n    'alternatives': [\n      '@return true if changing the FixedOrderComparator leads to an UnsupportedOperationException, false if it can be modified.',\n      '@return true if it is not possible to modify the FixedOrderComparator without an UnsupportedOperationException, false if modification is allowed.',\n      '@return true if the FixedOrderComparator cannot be changed without an UnsupportedOperationException, false if it can be altered.',\n      '@return true if any attempt to modify the FixedOrderComparator results in an UnsupportedOperationException, false if modification is permissible.',\n      '@return true if it is not possible to modify the FixedOrderComparator without raising an UnsupportedOperationException, false if modification is allowed.'\n    ]\n  },\n  {\n    'tag': '@return {@link UnknownObjectBehavior}',\n    'alternatives': [\n      '@return the behavior for unknown objects ({@link UnknownObjectBehavior})',\n      '@return the unknown object behavior ({@link UnknownObjectBehavior})',\n      '@return the handling strategy for unidentified objects ({@link UnknownObjectBehavior})',\n      '@return the response when encountering unknown objects ({@link UnknownObjectBehavior})',\n      '@return the way unknown objects are handled ({@link UnknownObjectBehavior})'\n    ]\n  },\n  {\n    'tag': '@param unknownObjectBehavior the flag for unknown behaviour -\\nUNKNOWN_AFTER, UNKNOWN_BEFORE or UNKNOWN_THROW_EXCEPTION',\n    'alternatives': [\n      '@param unknownObjectBehavior the identifier for unknown behavior - UNKNOWN_AFTER, UNKNOWN_BEFORE, or UNKNOWN_THROW_EXCEPTION',\n      '@param unknownObjectBehavior the marker for unknown behavior - UNKNOWN_AFTER, UNKNOWN_BEFORE, or UNKNOWN_THROW_EXCEPTION',\n      '@param unknownObjectBehavior the symbol for unknown behavior - UNKNOWN_AFTER, UNKNOWN_BEFORE, or UNKNOWN_THROW_EXCEPTION',\n      '@param unknownObjectBehavior the indicator representing unknown behavior - UNKNOWN_AFTER, UNKNOWN_BEFORE, or UNKNOWN_THROW_EXCEPTION',\n      '@param unknownObjectBehavior the value indicating unknown behavior - UNKNOWN_AFTER, UNKNOWN_BEFORE, or UNKNOWN_THROW_EXCEPTION'\n    ]\n  },\n  {\n    'tag': '@throws UnsupportedOperationException if a comparison has been performed',\n    'alternatives': [\n      '@throws UnsupportedOperationException when a comparison has already been executed',\n      '@throws UnsupportedOperationException if an evaluation has taken place',\n      '@throws UnsupportedOperationException if a comparison has already occurred',\n      '@throws UnsupportedOperationException if a comparison has been already made',\n      '@throws UnsupportedOperationException if a comparison has been performed previously'\n    ]\n  },\n  {\n    'tag': '@param obj the item to be added to the Comparator.',\n    'alternatives': [\n      '@param obj the element to include in the Comparator.',\n      '@param obj the object to append to the Comparator.',\n      '@param obj the item to insert into the Comparator.',\n      '@param obj the value to add to the Comparator.',\n      '@param obj the element to be added to the Comparator.'\n    ]\n  },\n  {\n    'tag': '@return true if obj has been added for the first time, false if\\n it was already known to the Comparator.',\n    'alternatives': [\n      '@return true if obj is newly added, false if it was already present in the Comparator.',\n      '@return true if obj is added for the first time, false if it was already known to the Comparator.',\n      '@return true if obj is inserted for the first time, false if it was already recognized by the Comparator.',\n      '@return true if obj is newly included, false if it was already in the Comparator.',\n      '@return true if obj is appended for the first time, false if it existed in the Comparator.'\n    ]\n  },\n  {\n    'tag': '@throws UnsupportedOperationException if a comparison has already been made',\n    'alternatives': [\n      '@throws UnsupportedOperationException when a comparison has already occurred',\n      '@throws UnsupportedOperationException if an evaluation has taken place',\n      '@throws UnsupportedOperationException if a comparison has been already executed',\n      '@throws UnsupportedOperationException if a comparison has been made previously',\n      '@throws UnsupportedOperationException if a comparison has been performed'\n    ]\n  },\n  {\n    'tag': \"@param existingObj an item already in the Comparator's set of\\n known objects\",\n    'alternatives': [\n      \"@param existingObj a pre-existing item in the set of known objects in the Comparator\",\n      \"@param existingObj an object that already exists in the set of known objects maintained by the Comparator\",\n      \"@param existingObj an item that is already in the collection of known objects belonging to the Comparator\",\n      \"@param existingObj a formerly added item in the Comparator's collection of known objects\",\n      \"@param existingObj an element already present in the known objects set of the Comparator\"\n    ]\n  },\n  {\n    'tag': \"@param newObj an item to be added to the Comparator's set of\\n known objects\",\n    'alternatives': [\n      \"@param newObj a new item to include in the set of known objects in the Comparator\",\n      \"@param newObj an object to append to the set of known objects maintained by the Comparator\",\n      \"@param newObj an item that needs to be added to the collection of known objects in the Comparator\",\n      \"@param newObj a recently added item in the Comparator's collection of known objects\",\n      \"@param newObj an element that should be included in the known objects set of the Comparator\"\n    ]\n  }\n]\n\nNote: The alternatives provided here are just examples. There can be multiple correct ways to paraphrase or modify these Javadoc tags."