"output=[\n  {\n    'tag': '@return <code>true</code> if this call changed the collection',\n    'alternatives': [\n      '@return <code>true</code> if the collection was modified by this call',\n      '@return <code>true</code> if this operation caused a change in the collection',\n      '@return <code>true</code> if the collection was altered as a result of this call',\n      '@return <code>true</code> if this call resulted in a modification of the collection',\n      '@return <code>true</code> if changes were made to the collection by this call'\n    ]\n  },\n  {\n    'tag': '@param object the object to remove',\n    'alternatives': [\n      '@param object the item to be removed',\n      '@param object the element to delete',\n      '@param object the object that should be eliminated',\n      '@param object the item that needs to be taken out',\n      '@param object the element that is going to be removed'\n    ]\n  },\n  {\n    'tag': '@param nCopies the number of copies to remove',\n    'alternatives': [\n      '@param nCopies the quantity of duplicates to eliminate',\n      '@param nCopies the count of copies to be removed',\n      '@param nCopies the number of repetitions to delete',\n      '@param nCopies the amount of duplicates to remove',\n      '@param nCopies the quantity of copies that should be eliminated'\n    ]\n  },\n  {\n    'tag': '@return <code>true</code> if this call changed the collection',\n    'alternatives': [\n      '@return <code>true</code> if the collection was modified by this call',\n      '@return <code>true</code> if this operation caused a change in the collection',\n      '@return <code>true</code> if the collection was altered as a result of this call',\n      '@return <code>true</code> if this call resulted in a modification of the collection',\n      '@return <code>true</code> if changes were made to the collection by this call'\n    ]\n  },\n  {\n    'tag': '@return the Set of unique Bag elements',\n    'alternatives': [\n      '@return the Set containing distinct Bag elements',\n      '@return the Set that consists of unique Bag elements',\n      '@return the Set with no duplicate Bag elements',\n      '@return the Set that only contains unique Bag elements',\n      '@return the Set that includes exclusively distinct Bag elements'\n    ]\n  },\n  {\n    'tag': '@return the total size of the Bag',\n    'alternatives': [\n      '@return the overall size of the Bag',\n      '@return the complete size of the Bag',\n      '@return the total count of elements in the Bag',\n      '@return the size of the Bag as a whole',\n      '@return the entire size of the Bag'\n    ]\n  },\n  {\n    'tag': '@param coll the collection to check against',\n    'alternatives': [\n      '@param coll the collection to compare with',\n      '@param coll the collection for comparison',\n      '@param coll the collection to be compared',\n      '@param coll the collection to be checked against',\n      '@param coll the collection that will be used for comparison'\n    ]\n  },\n  {\n    'tag': '@return <code>true</code> if the Bag contains all the collection',\n    'alternatives': [\n      '@return <code>true</code> if the Bag includes all elements from the collection',\n      '@return <code>true</code> if the Bag contains all elements in the collection',\n      '@return <code>true</code> if all elements of the collection are present in the Bag',\n      '@return <code>true</code> if the Bag has all the elements of the collection',\n      '@return <code>true</code> if every item in the collection is contained in the Bag'\n    ]\n  },\n  {\n    'tag': '@param coll the collection to remove',\n    'alternatives': [\n      '@param coll the collection containing elements to delete',\n      '@param coll the collection that holds elements for removal',\n      '@param coll the collection to be used for elimination',\n      '@param coll the collection from which to remove elements',\n      '@param coll the collection from which items need to be taken out'\n    ]\n  },\n  {\n    'tag': '@return <code>true</code> if this call changed the collection',\n    'alternatives': [\n      '@return <code>true</code> if the collection was modified by this call',\n      '@return <code>true</code> if this operation caused a change in the collection',\n      '@return <code>true</code> if the collection was altered as a result of this call',\n      '@return <code>true</code> if this call resulted in a modification of the collection',\n      '@return <code>true</code> if changes were made to the collection by this call'\n    ]\n  },\n  {\n    'tag': '@param coll the collection to retain',\n    'alternatives': [\n      '@param coll the collection to keep',\n      '@param coll the collection to preserve',\n      '@param coll the collection to retain elements from',\n      '@param coll the collection that should be maintained',\n      '@param coll the collection to remain unchanged'\n    ]\n  },\n  {\n    'tag': '@return <code>true</code> if this call changed the collection',\n    'alternatives': [\n      '@return <code>true</code> if the collection was modified by this call',\n      '@return <code>true</code> if this operation caused a change in the collection',\n      '@return <code>true</code> if the collection was altered as a result of this call',\n      '@return <code>true</code> if this call resulted in a modification of the collection',\n      '@return <code>true</code> if changes were made to the collection by this call'\n    ]\n  },\n  {\n    'tag': '@return iterator over all elements in the Bag',\n    'alternatives': [\n      '@return iterator that traverses all elements in the Bag',\n      '@return iterator for going through all Bag elements',\n      '@return iterator to iterate over all Bag elements',\n      '@return iterator that loops through all elements in the Bag',\n      '@return iterator to access each element in the Bag'\n    ]\n  },\n  {\n    'tag': '@param object the object to evaluate, should not be changed',\n    'alternatives': [\n      '@param object the object to assess, must not be modified',\n      '@param object the object to examine, should not be altered',\n      '@param object the object to analyze, must remain unchanged',\n      '@param object the object to inspect, must not be modified',\n      '@param object the object to consider, should not be changed'\n    ]\n  },\n  {\n    'tag': '@return true or false',\n    'alternatives': [\n      '@return false or true',\n      '@return a boolean indicating the result',\n      '@return either true or false',\n      '@return the boolean value',\n      '@return a boolean representing the outcome'\n    ]\n  },\n  {\n    'tag': '@throws ClassCastException (runtime) if the input is the wrong class',\n    'alternatives': [\n      '@throws ClassCastException (runtime) if the input has an incorrect class',\n      '@throws ClassCastException (runtime) if the type of the input is invalid',\n      '@throws ClassCastException (runtime) if the input object has an incompatible class',\n      '@throws ClassCastException (runtime) if the class of the input is not appropriate',\n      '@throws ClassCastException (runtime) if the input is of an inappropriate class'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException (runtime) if the input is invalid',\n    'alternatives': [\n      '@throws IllegalArgumentException (runtime) if the input is not valid',\n      '@throws IllegalArgumentException (runtime) if the input is incorrect',\n      '@throws IllegalArgumentException (runtime) if the input is not acceptable',\n      '@throws IllegalArgumentException (runtime) if the input has an invalid value',\n      '@throws IllegalArgumentException (runtime) if the input does not meet the criteria'\n    ]\n  },\n  {\n    'tag': '@throws FunctorException (runtime) if the predicate encounters a problem',\n    'alternatives': [\n      '@throws FunctorException (runtime) if there is an issue with the predicate',\n      '@throws FunctorException (runtime) if a problem arises with the predicate',\n      '@throws FunctorException (runtime) if the predicate faces an error',\n      '@throws FunctorException (runtime) if the predicate experiences a difficulty',\n      '@throws FunctorException (runtime) if the predicate encounters an obstacle'\n    ]\n  },\n  {\n    'tag': '@return the comparator in use, or null if natural ordering',\n    'alternatives': [\n      '@return the current comparator, or null if using natural ordering',\n      '@return the comparator currently employed, or null if using natural ordering',\n      '@return the active comparator, or null if the natural ordering is being used',\n      '@return the comparator being used, or null if natural ordering is applied',\n      '@return the comparator that is currently in use, or null if natural ordering is used'\n    ]\n  },\n  {\n    'tag': '@return the first element in the sorted bag',\n    'alternatives': [\n      '@return the initial element in the sorted bag',\n      '@return the earliest element in the sorted bag',\n      '@return the primary element in the sorted bag',\n      '@return the first item in the sorted bag',\n      '@return the earliest occurrence in the sorted bag'\n    ]\n  },\n  {\n    'tag': '@return the last element in the sorted bag',\n    'alternatives': [\n      '@return the final element in the sorted bag',\n      '@return the latest element in the sorted bag',\n      '@return the ultimate element in the sorted bag',\n      '@return the last item in the sorted bag',\n      '@return the final occurrence in the sorted bag'\n    ]\n  },\n  {\n    'tag': '@param <K> the key type',\n    'alternatives': [\n      '@param <K> the type of keys',\n      '@param <K> the type for the keys',\n      '@param <K> the datatype of the keys',\n      '@param <K> the category of keys',\n      '@param <K> the kind of keys'\n    ]\n  },\n  {\n    'tag': '@param <V> the value type',\n    'alternatives': [\n      '@param <V> the type of values',\n      '@param <V> the type for the values',\n      '@param <V> the datatype of the values',\n      '@param <V> the category of values',\n      '@param <V> the kind of values'\n    ]\n  },\n  {\n    'tag': '@return an unmodifiable trie backed by the given trie',\n    'alternatives': [\n      '@return a read-only trie that is based on the provided trie',\n      '@return a trie that cannot be modified, with the given trie as its source',\n      '@return a trie that cannot be changed, but is powered by the given trie',\n      '@return an immutable trie that is supported by the given trie',\n      '@return a trie that is unchangeable and relies on the given trie'\n    ]\n  },\n  {\n    'tag': '@param <E> the type that the closure acts on',\n    'alternatives': [\n      '@param <E> the type on which the closure operates',\n      '@param <E> the datatype for the closure to work on',\n      '@param <E> the category of object that the closure applies to',\n      '@param <E> the kind of element that the closure operates on',\n      '@param <E> the class of objects that the closure affects'\n    ]\n  }\n]"