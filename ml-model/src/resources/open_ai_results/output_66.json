"[\n  {\n    \"tag\": \"@return exponent\",\n    \"alternatives\": [\n      \"@return power\",\n      \"@return value of the exponent\",\n      \"@return the exponent\",\n      \"@return the power\",\n      \"@return the numerical exponent\"\n    ]\n  },\n  {\n    \"tag\": \"@param bits binary representation of the double\",\n    \"alternatives\": [\n      \"@param bits binary form of the double\",\n      \"@param bits double represented in binary\",\n      \"@param bits binary code for the double\",\n      \"@param bits binary representation of a double\",\n      \"@param bits double expressed in binary\"\n    ]\n  },\n  {\n    \"tag\": \"@return mantissa\",\n    \"alternatives\": [\n      \"@return fractional part\",\n      \"@return decimal part\",\n      \"@return the mantissa\",\n      \"@return the fractional component\",\n      \"@return the part after the decimal point\"\n    ]\n  },\n  {\n    \"tag\": \"@param l long from which the most significant bit is requested\",\n    \"alternatives\": [\n      \"@param l long used for obtaining the most significant bit\",\n      \"@param l long value for which the most significant bit is needed\",\n      \"@param l long from which we want the most significant bit\",\n      \"@param l input long to extract the most significant bit\",\n      \"@param l long to find the most significant bit from\"\n    ]\n  },\n  {\n    \"tag\": \"@return scale of the most significant bit of {@code l},\\nor 0 if {@code l} is zero\",\n    \"alternatives\": [\n      \"@return magnitude of the most significant bit of {@code l},\\nor 0 if {@code l} is zero\",\n      \"@return order of magnitude of the most significant bit of {@code l},\\nor 0 if {@code l} is zero\",\n      \"@return value representing the scale of the most significant bit of {@code l},\\nor 0 if {@code l} is zero\",\n      \"@return significance of the leading bit of {@code l},\\nor 0 if {@code l} is zero\",\n      \"@return the power of the most significant bit of {@code l},\\nor 0 if {@code l} is zero\"\n    ]\n  },\n  {\n    \"tag\": \"@param l long from which the least significant bit is requested\",\n    \"alternatives\": [\n      \"@param l long used for obtaining the least significant bit\",\n      \"@param l long value for which the least significant bit is needed\",\n      \"@param l long from which we want the least significant bit\",\n      \"@param l input long to extract the least significant bit\",\n      \"@param l long to find the least significant bit from\"\n    ]\n  },\n  {\n    \"tag\": \"@return scale of the least significant bit of {@code l},\\nor 63 if {@code l} is zero\",\n    \"alternatives\": [\n      \"@return magnitude of the least significant bit of {@code l},\\nor 63 if {@code l} is zero\",\n      \"@return order of magnitude of the least significant bit of {@code l},\\nor 63 if {@code l} is zero\",\n      \"@return value representing the scale of the least significant bit of {@code l},\\nor 63 if {@code l} is zero\",\n      \"@return significance of the trailing bit of {@code l},\\nor 63 if {@code l} is zero\",\n      \"@return the power of the least significant bit of {@code l},\\nor 63 if {@code l} is zero\"\n    ]\n  },\n  {\n    \"tag\": \"@param i index of the component\",\n    \"alternatives\": [\n      \"@param i position of the element\",\n      \"@param i location of the element\",\n      \"@param i index of the item\",\n      \"@param i array index of the component\",\n      \"@param i the component's index\"\n    ]\n  },\n  {\n    \"tag\": \"@param k scale of the requested bit\",\n    \"alternatives\": [\n      \"@param k size of the desired bit\",\n      \"@param k magnitude of the requested bit\",\n      \"@param k level of the indicated bit\",\n      \"@param k the bit's scale\",\n      \"@param k order of the bit being queried\"\n    ]\n  },\n  {\n    \"tag\": \"@return the specified bit (either 0 or 1), after the offset has\\nbeen added to the double\",\n    \"alternatives\": [\n      \"@return the indicated bit (either 0 or 1), after the offset has\\nbeen applied to the double\",\n      \"@return the designated bit (either 0 or 1), after the offset has\\nbeen added to the double\",\n      \"@return the requested bit (either 0 or 1), adjusted by the offset\\napplied to the double\",\n      \"@return the chosen bit (either 0 or 1), after the offset has\\nbeen incorporated into the double\",\n      \"@return the specific bit (either 0 or 1), after the offset has\\nbeen combined with the double\"\n    ]\n  },\n  {\n    \"tag\": \"@param components double components of the T-uple\",\n    \"alternatives\": [\n      \"@param components double parts of the T-uple\",\n      \"@param components array of T-uple floats\",\n      \"@param components array of double elements\",\n      \"@param components multiple values of type double\",\n      \"@param components double components of a tuple\"\n    ]\n  },\n  {\n    \"tag\": \"@param node BSP node guaranteed to have a non null cut sub-hyperplane\",\n    \"alternatives\": [\n      \"@param node BSP node with an ensured non-null cut sub-hyperplane\",\n      \"@param node BSP node that must contain a non-empty cut sub-hyperplane\",\n      \"@param node BSP node that is known to possess a non-empty cut sub-hyperplane\",\n      \"@param node BSP node which is required to have a non-null cut sub-hyperplane\",\n      \"@param node BSP node with a confirmed non-empty cut sub-hyperplane\"\n    ]\n  },\n  {\n    \"tag\": \"@return desired visit order, must be one of\\n{@link Order#PLUS_MINUS_SUB}, {@link Order#PLUS_SUB_MINUS},\\n{@link Order#MINUS_PLUS_SUB}, {@link Order#MINUS_SUB_PLUS},\\n{@link Order#SUB_PLUS_MINUS}, {@link Order#SUB_MINUS_PLUS}\",\n    \"alternatives\": [\n      \"@return preferred visit order, should be {@link Order#PLUS_MINUS_SUB}, {@link Order#PLUS_SUB_MINUS},\\n{@link Order#MINUS_PLUS_SUB}, {@link Order#MINUS_SUB_PLUS},\\n{@link Order#SUB_PLUS_MINUS}, or {@link Order#SUB_MINUS_PLUS}\",\n      \"@return intended visit order, must be one of\\n{@link Order#PLUS_MINUS_SUB}, {@link Order#PLUS_SUB_MINUS},\\n{@link Order#MINUS_PLUS_SUB}, {@link Order#MINUS_SUB_PLUS},\\n{@link Order#SUB_PLUS_MINUS}, or {@link Order#SUB_MINUS_PLUS}\",\n      \"@return required visit order, has to be one of\\n{@link Order#PLUS_MINUS_SUB}, {@link Order#PLUS_SUB_MINUS},\\n{@link Order#MINUS_PLUS_SUB}, {@link Order#MINUS_SUB_PLUS},\\n{@link Order#SUB_PLUS_MINUS}, or {@link Order#SUB_MINUS_PLUS}\",\n      \"@return desired visiting sequence, should be either\\n{@link Order#PLUS_MINUS_SUB}, {@link Order#PLUS_SUB_MINUS},\\n{@link Order#MINUS_PLUS_SUB}, {@link Order#MINUS_SUB_PLUS},\\n{@link Order#SUB_PLUS_MINUS}, or {@link Order#SUB_MINUS_PLUS}\",\n      \"@return expected visit order, must be one of\\n{@link Order#PLUS_MINUS_SUB}, {@link Order#PLUS_SUB_MINUS},\\n{@link Order#MINUS_PLUS_SUB}, {@link Order#MINUS_SUB_PLUS},\\n{@link Order#SUB_PLUS_MINUS}, or {@link Order#SUB_MINUS_PLUS}\"\n    ]\n  },\n  {\n    \"tag\": \"@param node BSP node guaranteed to have a non null cut sub-hyperplane\",\n    \"alternatives\": [\n      \"@param node BSP node with an ensured non-null cut sub-hyperplane\",\n      \"@param node BSP node that must contain a non-empty cut sub-hyperplane\",\n      \"@param node BSP node that is known to possess a non-empty cut sub-hyperplane\",\n      \"@param node BSP node which is required to have a non-null cut sub-hyperplane\",\n      \"@param node BSP node with a confirmed non-empty cut sub-hyperplane\"\n    ]\n  },\n  {\n    \"tag\": \"@param node leaf BSP node having a null sub-hyperplane\",\n    \"alternatives\": [\n      \"@param node leaf BSP node with a non-existent sub-hyperplane\",\n      \"@param node leaf BSP node that does not have a sub-hyperplane\",\n      \"@param node leaf BSP node without a non-null sub-hyperplane\",\n      \"@param node leaf BSP node missing a valid sub-hyperplane\",\n      \"@param node leaf BSP node lacking a non-empty sub-hyperplane\"\n    ]\n  },\n  {\n    \"tag\": \"@return a new hyperplane, copy of the instance\",\n    \"alternatives\": [\n      \"@return a fresh hyperplane, duplicate of the original\",\n      \"@return a newly created hyperplane, identical to the given one\",\n      \"@return a brand new hyperplane, being a clone of the current entity\",\n      \"@return a newly generated hyperplane, which is a replica of the existing one\",\n      \"@return a pristine hyperplane, an exact replica of the instance\"\n    ]\n  },\n  {\n    \"tag\": \"@param point point to check\",\n    \"alternatives\": [\n      \"@param point the point to verify\",\n      \"@param point the point for inspection\",\n      \"@param point the point to examine\",\n      \"@param point the point for validation\",\n      \"@param point the point to assess\"\n    ]\n  },\n  {\n    \"tag\": \"@return offset of the point\",\n    \"alternatives\": [\n      \"@return displacement of the point\",\n      \"@return shift applied to the point\",\n      \"@return position adjustment of the point\",\n      \"@return change in position of the point\",\n      \"@return the point's displacement\"\n    ]\n  },\n  {\n    \"tag\": \"@param point point to project\",\n    \"alternatives\": [\n      \"@param point point for projection\",\n      \"@param point point to be projected\",\n      \"@param point point to transform\",\n      \"@param point point for conversion\",\n      \"@param point point to map\"\n    ]\n  },\n  {\n    \"tag\": \"@return tolerance below which points are considered to belong to the hyperplane\",\n    \"alternatives\": [\n      \"@return threshold for classifying points as part of the hyperplane\",\n      \"@return acceptable error when determining if points lie on the hyperplane\",\n      \"@return maximum allowed discrepancy for points to be classified as belonging to the hyperplane\",\n      \"@return precision limit for considering points as part of the hyperplane\",\n      \"@return margin of error for classifying points as part of the hyperplane\"\n    ]\n  },\n  {\n    \"tag\": \"@param other other hyperplane to check against the instance\",\n    \"alternatives\": [\n      \"@param other hyperplane to compare with the instance\",\n      \"@param other hyperplane for comparison with the current one\",\n      \"@param other hyperplane to validate against the instance\",\n      \"@param other hyperplane to test against the current one\",\n      \"@param other hyperplane to ascertain against the instance\"\n    ]\n  },\n  {\n    \"tag\": \"@return true if the instance and the other hyperplane have\\nthe same orientation\",\n    \"alternatives\": [\n      \"@return true if the instance and the other hyperplane share the same orientation\",\n      \"@return true if the instance and the other hyperplane exhibit identical orientation\",\n      \"@return true if the instance and the other hyperplane possess the same orientation\",\n      \"@return true if the instance and the other hyperplane display the same orientation\",\n      \"@return true if the instance and the other hyperplane demonstrate the same orientation\"\n    ]\n  },\n  {\n    \"tag\": \"@return a sub-hyperplane covering the whole hyperplane\",\n    \"alternatives\": [\n      \"@return a sub-hyperplane that encompasses the entire hyperplane\",\n      \"@return a sub-hyperplane that spans the entire hyperplane\",\n      \"@return a sub-hyperplane which includes the entire hyperplane\",\n      \"@return a sub-hyperplane that covers the entire hyperplane\",\n      \"@return a sub-hyperplane that encompasses the whole hyperplane\"\n    ]\n  },\n  {\n    \"tag\": \"@return a region containing the instance\",\n    \"alternatives\": [\n      \"@return a region that includes the instance\",\n      \"@return a region which encompasses the instance\",\n      \"@return a region that covers the instance\",\n      \"@return a region containing the object\",\n      \"@return a region that surrounds the instance\"\n    ]\n  },\n  {\n    \"tag\": \"@param point n-dimension point of the space\",\n    \"alternatives\": [\n      \"@param point multi-dimensional point of the space\",\n      \"@param point point in the n-dimensional space\",\n      \"@param point n-dimensional coordinate\",\n      \"@param point point within an n-dimensional system\",\n      \"@param point n-dimensional object\"\n    ]\n  }\n]"