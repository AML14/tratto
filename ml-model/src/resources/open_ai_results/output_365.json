"output=[\n  {\n    'tag': '@return the value returned by {@link FieldVectorChangingVisitor#end()}\\nat the end of the walk',\n    'alternatives': [\n      '@return the value given back by {@link FieldVectorChangingVisitor#end()}\\nwhen the walk is finished',\n      '@return the final value provided by {@link FieldVectorChangingVisitor#end()}\\nat the end of the iteration',\n      '@return the result value obtained from {@link FieldVectorChangingVisitor#end()}\\nafter the traversal',\n      '@return the value obtained from {@link FieldVectorChangingVisitor#end()}\\nwhen the walk ends',\n      '@return the value that {@link FieldVectorChangingVisitor#end()} returns\\nat the conclusion of the walk'\n    ]\n  },\n  {\n    'tag': '@param visitor visitor to be used to process the entries of this vector',\n    'alternatives': [\n      '@param visitor the visitor that will be utilized to operate on the entries\\nof this vector',\n      '@param visitor the visitor that will be employed to process the elements\\nof this vector',\n      '@param visitor the visitor that will be used for processing the elements\\nof this vector',\n      '@param visitor the visitor to apply when handling the entries\\nof this vector',\n      '@param visitor the visitor to be utilized in order to operate on the entries\\nof this vector'\n    ]\n  },\n  {\n    'tag': '@param start the index of the first entry to be visited',\n    'alternatives': [\n      '@param start the position of the initial element to be examined',\n      '@param start the index of the first item to visit',\n      '@param start the index of the initial element to be traversed',\n      '@param start the index of the first entry to be explored',\n      '@param start the position of the starting element to be inspected'\n    ]\n  },\n  {\n    'tag': '@param end the index of the last entry to be visited (inclusive)',\n    'alternatives': [\n      '@param end the position of the final element to be examined (inclusive)',\n      '@param end the index of the last item to visit (inclusive)',\n      '@param end the index of the ending element to be traversed (inclusive)',\n      '@param end the index of the last entry to be explored (inclusive)',\n      '@param end the position of the ending element to be inspected (inclusive)'\n    ]\n  },\n  {\n    'tag': '@return the value returned by {@link FieldVectorChangingVisitor#end()}\\nat the end of the walk',\n    'alternatives': [\n      '@return the value given back by {@link FieldVectorChangingVisitor#end()}\\nwhen the walk is finished',\n      '@return the final value provided by {@link FieldVectorChangingVisitor#end()}\\nat the end of the iteration',\n      '@return the result value obtained from {@link FieldVectorChangingVisitor#end()}\\nafter the traversal',\n      '@return the value obtained from {@link FieldVectorChangingVisitor#end()}\\nwhen the walk ends',\n      '@return the value that {@link FieldVectorChangingVisitor#end()} returns\\nat the conclusion of the walk'\n    ]\n  },\n  {\n    'tag': '@throws OutOfRangeException if the indices are not valid.',\n    'alternatives': [\n      '@throws OutOfRangeException when the indices are invalid.',\n      '@throws OutOfRangeException if the indices are out of range.',\n      '@throws OutOfRangeException in case of invalid indices.',\n      '@throws OutOfRangeException if the indices are invalid.',\n      '@throws OutOfRangeException when the indices are not valid.'\n    ]\n  },\n  {\n    'tag': '@param field Field to which the elements belong.',\n    'alternatives': [\n      '@param field The field to which the elements belong.',\n      '@param field The field that the elements are associated with.',\n      '@param field The field that the elements belong to.',\n      '@param field The field representing the elements\\' membership.',\n      '@param field The field that holds the elements.'\n    ]\n  },\n  {\n    'tag': '@param field Field to which the elements belong.',\n    'alternatives': [\n      '@param field The field to which the elements belong.',\n      '@param field The field that the elements are associated with.',\n      '@param field The field that the elements belong to.',\n      '@param field The field representing the elements\\' membership.',\n      '@param field The field that holds the elements.'\n    ]\n  },\n  {\n    'tag': '@param dimension Size of the vector.',\n    'alternatives': [\n      '@param dimension The length of the vector.',\n      '@param dimension The size of the vector.',\n      '@param dimension The dimension of the vector.',\n      '@param dimension The number of elements in the vector.',\n      '@param dimension The quantity of elements in the vector.'\n    ]\n  },\n  {\n    'tag': '@param v Original vector',\n    'alternatives': [\n      '@param v The initial vector',\n      '@param v The source vector',\n      '@param v The original source vector',\n      '@param v The vector in its original state',\n      '@param v The base vector'\n    ]\n  },\n  {\n    'tag': '@param resize Amount to add.',\n    'alternatives': [\n      '@param resize The increment to be added.',\n      '@param resize The amount to increase by.',\n      '@param resize The quantity to be added.',\n      '@param resize The value to add.',\n      '@param resize The size to be augmented.'\n    ]\n  },\n  {\n    'tag': '@param field Field to which the elements belong.',\n    'alternatives': [\n      '@param field The field to which the elements belong.',\n      '@param field The field that the elements are associated with.',\n      '@param field The field that the elements belong to.',\n      '@param field The field representing the elements\\' membership.',\n      '@param field The field that holds the elements.'\n    ]\n  },\n  {\n    'tag': '@param dimension Size of the vector.',\n    'alternatives': [\n      '@param dimension The length of the vector.',\n      '@param dimension The size of the vector.',\n      '@param dimension The dimension of the vector.',\n      '@param dimension The number of elements in the vector.',\n      '@param dimension The quantity of elements in the vector.'\n    ]\n  },\n  {\n    'tag': '@param expectedSize Expected number of non-zero entries.',\n    'alternatives': [\n      '@param expectedSize The anticipated count of non-zero elements.',\n      '@param expectedSize The estimated quantity of non-zero entries.',\n      '@param expectedSize The predicted size of non-zero values.',\n      '@param expectedSize The expected number of non-zero values.',\n      '@param expectedSize The projected length of non-zero elements.'\n    ]\n  },\n  {\n    'tag': '@param field Field to which the elements belong.',\n    'alternatives': [\n      '@param field The field to which the elements belong.',\n      '@param field The field that the elements are associated with.',\n      '@param field The field that the elements belong to.',\n      '@param field The field representing the elements\\' membership.',\n      '@param field The field that holds the elements.'\n    ]\n  },\n  {\n    'tag': '@param values Set of values to create from.',\n    'alternatives': [\n      '@param values The collection of values to generate from.',\n      '@param values The set of values to create from.',\n      '@param values The group of values to build from.',\n      '@param values The array of values to form from.',\n      '@param values The sequence of values to derive from.'\n    ]\n  },\n  {\n    'tag': '@param array an array of {@code int} values, possibly empty',\n    'alternatives': [\n      '@param array an array of {@code int} values, maybe empty',\n      '@param array an array of {@code int} values, potentially empty',\n      '@param array an array of {@code int} values, could be empty',\n      '@param array an array of {@code int} values, may be empty',\n      '@param array an array of {@code int} values, might be empty'\n    ]\n  },\n  {\n    'tag': '@param target a primitive {@code int} value',\n    'alternatives': [\n      '@param target a primitive {@code int} number',\n      '@param target an {@code int} primitive value',\n      '@param target an {@code int} value of primitive type',\n      '@param target a primitive value of type {@code int}',\n      '@param target an {@code int} value of primitive data type'\n    ]\n  },\n  {\n    'tag': '@return the least index {@code i} for which {@code array[i] == target}, or\\n    {@code -1} if no such index exists.',\n    'alternatives': [\n      '@return the smallest index {@code i} where {@code array[i] == target}, or\\n    {@code -1} if no such index is found.',\n      '@return the minimum index {@code i} at which the value of {@code array[i]} is equal to\\n    {@code target}, or {@code -1} if there is no such index.',\n      '@return the lowest index {@code i} where {@code array[i] == target}, or\\n    {@code -1} if there is no such index.',\n      '@return the smallest possible index {@code i} such that {@code array[i] == target}, or\\n    {@code -1} if no such index can be found.',\n      '@return the minimum index value {@code i} for which {@code array[i] == target}, or\\n    {@code -1} if an appropriate index does not exist.'\n    ]\n  },\n  {\n    'tag': '@param array the array to search for the sequence {@code target}',\n    'alternatives': [\n      '@param array the array to look for the sequence {@code target}',\n      '@param array the array to seek the sequence {@code target} in',\n      '@param array the array to hunt for the sequence {@code target}',\n      '@param array the array to explore for the sequence {@code target}',\n      '@param array the array to examine for the sequence {@code target}'\n    ]\n  },\n  {\n    'tag': '@param target the array to search for as a sub-sequence of {@code array}',\n    'alternatives': [\n      '@param target the array to find as a sub-sequence of {@code array}',\n      '@param target the array to locate as a sub-sequence of {@code array}',\n      '@param target the array to detect as a sub-sequence of {@code array}',\n      '@param target the array to identify as a sub-sequence of {@code array}',\n      '@param target the array to detect as a sub-sequence within {@code array}'\n    ]\n  },\n  {\n    'tag': '@param array an array of {@code int} values, possibly empty',\n    'alternatives': [\n      '@param array an array of {@code int} values, maybe empty',\n      '@param array an array of {@code int} values, potentially empty',\n      '@param array an array of {@code int} values, could be empty',\n      '@param array an array of {@code int} values, may be empty',\n      '@param array an array of {@code int} values, might be empty'\n    ]\n  },\n  {\n    'tag': '@param target a primitive {@code int} value',\n    'alternatives': [\n      '@param target a primitive {@code int} number',\n      '@param target an {@code int} primitive value',\n      '@param target an {@code int} value of primitive type',\n      '@param target a primitive value of type {@code int}',\n      '@param target an {@code int} value of primitive data type'\n    ]\n  },\n  {\n    'tag': '@return the greatest index {@code i} for which {@code array[i] == target},\\n    or {@code -1} if no such index exists.',\n    'alternatives': [\n      '@return the largest index {@code i} where {@code array[i] == target},\\n    or {@code -1} if no such index is found.',\n      '@return the maximum index {@code i} at which the value of {@code array[i]} is equal to\\n    {@code target}, or {@code -1} if there is no such index.',\n      '@return the highest index {@code i} where {@code array[i] == target},\\n    or {@code -1} if there is no such index.',\n      '@return the greatest possible index {@code i} such that {@code array[i] == target},\\n    or {@code -1} if no such index can be found.',\n      '@return the maximum index value {@code i} for which {@code array[i] == target},\\n    or {@code -1} if an appropriate index does not exist.'\n    ]\n  },\n  {\n    'tag': '@return the value present in {@code array} that is less than or equal to\\n    every other value in the array',\n    'alternatives': [\n      '@return the value existing in {@code array} that is less than or equal to\\n    any other value in the array',\n      '@return the value found in {@code array} that is less than or equal to\\n    all other values in the array',\n      '@return the value contained in {@code array} that is less than or equal to\\n    each of the other values in the array',\n      '@return the value in {@code array} which is less than or equal to\\n    each of the remaining values in the array',\n      '@return the value within {@code array} that is less than or equal to\\n    every other value in the array'\n    ]\n  }\n]"