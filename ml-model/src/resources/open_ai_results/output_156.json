"output = [\n  {\n    'tag': '@param n Degree of root.',\n    'alternatives': [\n      '@param n Degree of the root.',\n      '@param n Number of the root\\'s degree.',\n      '@param n Degree of the specified root.',\n      '@param n The degree of the root.',\n      '@param n The root\\'s degree.'\n    ]\n  },\n  {\n    'tag': '@return a List of all {@code n}-th roots of {@code this}.',\n    'alternatives': [\n      '@return a List containing all the {@code n}-th roots of {@code this}.',\n      '@return a List that contains all the roots of {@code this} with degree {@code n}.',\n      '@return a List of all the roots with degree {@code n} for the current object.',\n      '@return a List that includes all the {@code n}-th roots of the current object.',\n      '@return a List of all the roots with degree {@code n} for the specified object.'\n    ]\n  },\n  {\n    'tag': '@param realPart Real part.',\n    'alternatives': [\n      '@param realPart The real part.',\n      '@param realPart The part that is real.',\n      '@param realPart The real component.',\n      '@param realPart The part that represents the real number.',\n      '@param realPart The real portion.'\n    ]\n  },\n  {\n    'tag': '@param imaginaryPart Imaginary part.',\n    'alternatives': [\n      '@param imaginaryPart The imaginary part.',\n      '@param imaginaryPart The part that is imaginary.',\n      '@param imaginaryPart The part that represents the imaginary number.',\n      '@param imaginaryPart The imaginary component.',\n      '@param imaginaryPart The imaginary portion.'\n    ]\n  },\n  {\n    'tag': '@return a new complex number instance.',\n    'alternatives': [\n      '@return a new instance of a complex number.',\n      '@return a newly created complex number object.',\n      '@return a new complex number.',\n      '@return a newly instantiated complex number.',\n      '@return a newly generated instance of a complex number.'\n    ]\n  },\n  {\n    'tag': '@param realPart Real part.',\n    'alternatives': [\n      '@param realPart The real part.',\n      '@param realPart The part that is real.',\n      '@param realPart The real component.',\n      '@param realPart The part that represents the real number.',\n      '@param realPart The real portion.'\n    ]\n  },\n  {\n    'tag': '@param imaginaryPart Imaginary part.',\n    'alternatives': [\n      '@param imaginaryPart The imaginary part.',\n      '@param imaginaryPart The part that is imaginary.',\n      '@param imaginaryPart The part that represents the imaginary number.',\n      '@param imaginaryPart The imaginary component.',\n      '@param imaginaryPart The imaginary portion.'\n    ]\n  },\n  {\n    'tag': '@return a Complex instance.',\n    'alternatives': [\n      '@return an instance of Complex.',\n      '@return a Complex object.',\n      '@return a newly created Complex instance.',\n      '@return a Complex instance object.',\n      '@return a new Complex instance.'\n    ]\n  },\n  {\n    'tag': '@param realPart Real part.',\n    'alternatives': [\n      '@param realPart The real part.',\n      '@param realPart The part that is real.',\n      '@param realPart The real component.',\n      '@param realPart The part that represents the real number.',\n      '@param realPart The real portion.'\n    ]\n  },\n  {\n    'tag': '@return a Complex instance.',\n    'alternatives': [\n      '@return an instance of Complex.',\n      '@return a Complex object.',\n      '@return a newly created Complex instance.',\n      '@return a Complex instance object.',\n      '@return a new Complex instance.'\n    ]\n  },\n  {\n    'tag': '@return A Complex instance with all fields resolved.',\n    'alternatives': [\n      '@return A fully resolved Complex instance.',\n      '@return A Complex instance with all its properties resolved.',\n      '@return A Complex object with all fields resolved.',\n      '@return A Complex instance that has all its fields resolved.',\n      '@return A Complex instance where all fields are resolved.'\n    ]\n  },\n  {\n    'tag': '@param real Real part.',\n    'alternatives': [\n      '@param real The real part.',\n      '@param real The part that is real.',\n      '@param real The real component.',\n      '@param real The part that represents the real number.',\n      '@param real The real portion.'\n    ]\n  },\n  {\n    'tag': '@param real Real part.',\n    'alternatives': [\n      '@param real The real part.',\n      '@param real The part that is real.',\n      '@param real The real component.',\n      '@param real The part that represents the real number.',\n      '@param real The real portion.'\n    ]\n  },\n  {\n    'tag': '@param imaginary Imaginary part.',\n    'alternatives': [\n      '@param imaginary The imaginary part.',\n      '@param imaginary The part that is imaginary.',\n      '@param imaginary The part that represents the imaginary number.',\n      '@param imaginary The imaginary component.',\n      '@param imaginary The imaginary portion.'\n    ]\n  },\n  {\n    'tag': '@param r the modulus of the complex number to create',\n    'alternatives': [\n      '@param r the magnitude of the complex number to generate',\n      '@param r the absolute value of the complex number to construct',\n      '@param r the norm of the complex number to create',\n      '@param r the magnitude of the complex number to form',\n      '@param r the modulus value of the complex number to generate'\n    ]\n  },\n  {\n    'tag': '@param theta the argument of the complex number to create',\n    'alternatives': [\n      '@param theta the phase of the complex number to generate',\n      '@param theta the angle of the complex number to construct',\n      '@param theta the argument of the complex number to form',\n      '@param theta the argument value of the complex number to generate',\n      '@param theta the angle value of the complex number to build'\n    ]\n  },\n  {\n    'tag': '@return <code>r&middot;e<sup>i&middot;theta</sup></code>',\n    'alternatives': [\n      '@return <code>r&middot;e<sup>i&middot;theta</sup></code>',\n      '@return <code>r times e to the power of i times theta</code>',\n      '@return <code>r multiplied by e raised to the power of i multiplied by theta</code>',\n      '@return the result of multiplying <code>r</code> by <code>e</code> raised to the power <code>i&middot;theta</code>',\n      '@return <code>r times e raised to the power of i times theta</code>'\n    ]\n  },\n  {\n    'tag': '@param real Array of numbers to be converted to their {@code Complex}\\nequivalent.',\n    'alternatives': [\n      '@param real An array of numbers to be transformed into their corresponding {@code Complex} representation.',\n      '@param real Array of numbers to be changed to their equivalent {@code Complex} form.',\n      '@param real An array of values to be converted into their corresponding {@code Complex} equivalents.',\n      '@param real Array of numbers to be converted into their respective {@code Complex} representations.',\n      '@param real An array of numeric values to be converted to their corresponding {@code Complex} forms.'\n    ]\n  },\n  {\n    'tag': '@return an array of {@code Complex} objects.',\n    'alternatives': [\n      '@return a collection of {@code Complex} instances.',\n      '@return a list of {@code Complex} objects.',\n      '@return a series of {@code Complex} instances.',\n      '@return an array of {@code Complex} elements.',\n      '@return a group of {@code Complex} objects.'\n    ]\n  },\n  {\n    'tag': '@param function vectorial residuals function to wrap',\n    'alternatives': [\n      '@param function Residuals function for vectorial values to encapsulate',\n      '@param function Function for vectorial residuals to wrap',\n      '@param function The function representing vectorial residuals to enclose',\n      '@param function The function that computes vectorial residuals to be wrapped',\n      '@param function Residuals function with vectorial outputs to be encapsulated'\n    ]\n  },\n  {\n    'tag': '@param observations observations to be compared to objective function to compute residuals',\n    'alternatives': [\n      '@param observations Observations to be compared with objective function for residual computation',\n      '@param observations Inputs to compare with objective function in order to calculate residuals',\n      '@param observations The data to be compared with the objective function for residuals computation',\n      '@param observations Data points to compare against objective function for computing residuals',\n      '@param observations Values to be compared to the objective function in order to compute residuals'\n    ]\n  },\n  {\n    'tag': '@param function vectorial residuals function to wrap',\n    'alternatives': [\n      '@param function Residuals function for vectorial values to encapsulate',\n      '@param function Function for vectorial residuals to wrap',\n      '@param function The function representing vectorial residuals to enclose',\n      '@param function The function that computes vectorial residuals to be wrapped',\n      '@param function Residuals function with vectorial outputs to be encapsulated'\n    ]\n  },\n  {\n    'tag': '@param observations observations to be compared to objective function to compute residuals',\n    'alternatives': [\n      '@param observations Observations to be compared with objective function for residual computation',\n      '@param observations Inputs to compare with objective function in order to calculate residuals',\n      '@param observations The data to be compared with the objective function for residuals computation',\n      '@param observations Data points to compare against objective function for computing residuals',\n      '@param observations Values to be compared to the objective function in order to compute residuals'\n    ]\n  },\n  {\n    'tag': '@param weights weights to apply to the residuals',\n    'alternatives': [\n      '@param weights Residuals weighting factors',\n      '@param weights Factors to be multiplied with the residuals',\n      '@param weights Values to be used as weights for the residuals',\n      '@param weights Coefficients to be applied to the residuals',\n      '@param weights Scale factors for the residuals'\n    ]\n  },\n  {\n    'tag': '@throws DimensionMismatchException if the observations vector and the weights\\nvector dimensions do not match (objective function dimension is checked only when\\nthe {@link #value(double[])} method is called)',\n    'alternatives': [\n      '@throws DimensionMismatchException when the dimensions of the observations vector and the weights vector do not match (the objective function dimension is only checked when the {@link #value(double[])} method is invoked)',\n      '@throws DimensionMismatchException if the dimensions of the observations vector and the weights vector do not coincide (the dimension of the objective function is only verified when calling the {@link #value(double[])} method)',\n      '@throws DimensionMismatchException if the sizes of the observations vector and the weights vector are not equal (the dimension of the objective function will only be checked when the {@link #value(double[])} method is called)',\n      '@throws DimensionMismatchException if the observations vector and the weights vector have different sizes (the objective function dimension is only checked when the {@link #value(double[])} method is called)',\n      '@throws DimensionMismatchException if the dimensions of the observations vector and the weights vector are not the same (the dimension of the objective function is only verified when the {@link #value(double[])} method is invoked)'\n    ]\n  }\n]"