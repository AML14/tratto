"output=[\n  {\n    'tag': '@param in the input stream',\n    'alternatives': [\n      '@param in the input stream',\n      '@param in the stream of input',\n      '@param stream the input stream',\n      '@param inputStream the input stream',\n      '@param input the stream'\n    ]\n  },\n  {\n    'tag': '@throws IOException ',\n    'alternatives': [\n      '@throws IOException ',\n      '@throws IOException error',\n      '@throws IOException exception',\n      '@throws IOException if an I/O error occurs',\n      '@throws IOException in case of input/output error'\n    ]\n  },\n  {\n    'tag': '@throws ClassNotFoundException ',\n    'alternatives': [\n      '@throws ClassNotFoundException ',\n      '@throws ClassNotFoundException error',\n      '@throws ClassNotFoundException exception',\n      '@throws ClassNotFoundException if class cannot be found',\n      '@throws ClassNotFoundException when the class is not found'\n    ]\n  },\n  {\n    'tag': '@throws ClassCastException if deserialised object has wrong type',\n    'alternatives': [\n      '@throws ClassCastException if deserialised object has wrong type',\n      '@throws ClassCastException in case the deserialized object is of incorrect type',\n      '@throws ClassCastException if the deserialized object has an incorrect type',\n      '@throws ClassCastException if the object obtained after deserialization has the wrong type',\n      '@throws ClassCastException when the deserialized object is of the wrong type'\n    ]\n  },\n  {\n    'tag': '@param coll the collection to check against',\n    'alternatives': [\n      '@param coll the collection to check against',\n      '@param coll the collection to compare with',\n      '@param coll the collection to compare against',\n      '@param coll the collection for comparison',\n      '@param coll the collection to be checked'\n    ]\n  },\n  {\n    'tag': '@return <code>true</code> if the Bag contains at least one of every object in the collection',\n    'alternatives': [\n      '@return <code>true</code> if the Bag contains at least one of every object in the collection',\n      '@return <code>true</code> if the Bag has at least one instance of every object in the collection',\n      '@return <code>true</code> if the Bag contains at least one occurrence of each object in the collection',\n      '@return <code>true</code> if every object in the collection is present in the Bag',\n      '@return <code>true</code> if the collection is a subset of the Bag'\n    ]\n  },\n  {\n    'tag': '@param object the object to add',\n    'alternatives': [\n      '@param object the object to add',\n      '@param obj the object to include',\n      '@param element the element to append',\n      '@param item the item to insert',\n      '@param value the value to put'\n    ]\n  },\n  {\n    'tag': '@param object the object to remove',\n    'alternatives': [\n      '@param object the object to remove',\n      '@param obj the object to delete',\n      '@param element the element to exclude',\n      '@param item the item to take out',\n      '@param value the value to discard'\n    ]\n  },\n  {\n    'tag': '@return <code>true</code> if this call changed the collection',\n    'alternatives': [\n      '@return <code>true</code> if this call changed the collection',\n      '@return <code>true</code> if the collection was modified by this call',\n      '@return <code>true</code> if the collection was altered by this operation',\n      '@return <code>true</code> if the call caused a change in the collection',\n      '@return <code>true</code> if the collection was impacted by this action'\n    ]\n  },\n  {\n    'tag': '@param coll the collection to remove',\n    'alternatives': [\n      '@param coll the collection to remove',\n      '@param coll the collection to delete',\n      '@param coll the collection to exclude',\n      '@param coll the collection from which elements should be taken out',\n      '@param coll the collection to eliminate elements from'\n    ]\n  },\n  {\n    'tag': '@return <code>true</code> if this call changed the collection',\n    'alternatives': [\n      '@return <code>true</code> if this call changed the collection',\n      '@return <code>true</code> if the collection was modified by this call',\n      '@return <code>true</code> if the collection was altered by this operation',\n      '@return <code>true</code> if the call caused a change in the collection',\n      '@return <code>true</code> if the collection was impacted by this action'\n    ]\n  },\n  {\n    'tag': '@param coll the collection to retain',\n    'alternatives': [\n      '@param coll the collection to retain',\n      '@param coll the collection to keep',\n      '@param coll the collection to preserve',\n      '@param coll the collection from which other elements should be removed',\n      '@param coll the collection to filter'\n    ]\n  },\n  {\n    'tag': '@return <code>true</code> if this call changed the collection',\n    'alternatives': [\n      '@return <code>true</code> if this call changed the collection',\n      '@return <code>true</code> if the collection was modified by this call',\n      '@return <code>true</code> if the collection was altered by this operation',\n      '@return <code>true</code> if the call caused a change in the collection',\n      '@return <code>true</code> if the collection was impacted by this action'\n    ]\n  },\n  {\n    'tag': '@param object the object to add',\n    'alternatives': [\n      '@param object the object to add',\n      '@param obj the object to include',\n      '@param element the element to append',\n      '@param item the item to insert',\n      '@param value the value to put'\n    ]\n  },\n  {\n    'tag': '@param count the number of copies to add',\n    'alternatives': [\n      '@param count the number of copies to add',\n      '@param count the quantity to insert',\n      '@param count the amount to increase',\n      '@param count the number of instances to include',\n      '@param count the value to duplicate'\n    ]\n  },\n  {\n    'tag': '@param <E> the type of the elements in the bag',\n    'alternatives': [\n      '@param <E> the type of the elements in the bag',\n      '@param <E> the element type in the bag',\n      '@param <E> the type of objects stored in the bag',\n      '@param <E> the kind of elements contained in the bag',\n      '@param <E> the specific type of items in the bag'\n    ]\n  },\n  {\n    'tag': '@return an unmodifiable Bag',\n    'alternatives': [\n      '@return an unmodifiable Bag',\n      '@return a Bag that cannot be modified',\n      '@return a Bag that is read-only',\n      '@return a Bag that is not modifiable',\n      '@return a Bag that is immutable'\n    ]\n  },\n  {\n    'tag': '@param out the output stream',\n    'alternatives': [\n      '@param out the output stream',\n      '@param out the stream to write to',\n      '@param out the destination stream',\n      '@param out the stream for output',\n      '@param out the target output stream'\n    ]\n  },\n  {\n    'tag': '@throws IOException ',\n    'alternatives': [\n      '@throws IOException ',\n      '@throws IOException error',\n      '@throws IOException exception',\n      '@throws IOException if an I/O error occurs',\n      '@throws IOException in case of input/output error'\n    ]\n  },\n  {\n    'tag': '@param in the input stream',\n    'alternatives': [\n      '@param in the input stream',\n      '@param in the stream of input',\n      '@param stream the input stream',\n      '@param inputStream the input stream',\n      '@param input the stream'\n    ]\n  },\n  {\n    'tag': '@throws IOException ',\n    'alternatives': [\n      '@throws IOException ',\n      '@throws IOException error',\n      '@throws IOException exception',\n      '@throws IOException if an I/O error occurs',\n      '@throws IOException in case of input/output error'\n    ]\n  },\n  {\n    'tag': '@throws ClassNotFoundException ',\n    'alternatives': [\n      '@throws ClassNotFoundException ',\n      '@throws ClassNotFoundException error',\n      '@throws ClassNotFoundException exception',\n      '@throws ClassNotFoundException if class cannot be found',\n      '@throws ClassNotFoundException when the class is not found'\n    ]\n  },\n  {\n    'tag': '@throws ClassCastException if deserialised object has wrong type',\n    'alternatives': [\n      '@throws ClassCastException if deserialised object has wrong type',\n      '@throws ClassCastException in case the deserialized object is of incorrect type',\n      '@throws ClassCastException if the deserialized object has an incorrect type',\n      '@throws ClassCastException if the object obtained after deserialization has the wrong type',\n      '@throws ClassCastException when the deserialized object is of the wrong type'\n    ]\n  },\n  {\n    'tag': '@param bag the bag to decorate, must not be null',\n    'alternatives': [\n      '@param bag the bag to decorate, must not be null',\n      '@param bag the bag to wrap, cannot be null',\n      '@param bag the bag to enhance, should not be null',\n      '@param bag the bag to modify, must be non-null',\n      '@param bag the bag to adorn, must be non-null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if bag is null',\n    'alternatives': [\n      '@throws NullPointerException if bag is null',\n      '@throws NullPointerException if the bag is null',\n      '@throws NullPointerException if the provided bag is null',\n      '@throws NullPointerException when the bag is null',\n      '@throws NullPointerException in case of a null bag'\n    ]\n  }\n]"