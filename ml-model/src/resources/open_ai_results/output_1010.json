"output=[\n  {\n    \"tag\": \"@param set the set to decorate, must not be null\",\n    \"alternatives\": [\n      \"@param set the set to embellish, must not be null\",\n      \"@param set the set to adorn, must not be null\",\n      \"@param set the set to enhance, must not be null\",\n      \"@param set the set to beautify, must not be null\",\n      \"@param set the set to modify, must not be null\"\n    ]\n  },\n  {\n    \"tag\": \"@throws IllegalArgumentException if the initial capacity is negative\",\n    \"alternatives\": [\n      \"@throws IllegalArgumentException when the initial capacity is negative\",\n      \"@throws IllegalArgumentException in case of a negative initial capacity\",\n      \"@throws IllegalArgumentException if the initial capacity has a negative value\",\n      \"@throws IllegalArgumentException if a negative value is used for the initial capacity\",\n      \"@throws IllegalArgumentException if the initial capacity is less than zero\"\n    ]\n  },\n  {\n    \"tag\": \"@throws IllegalArgumentException if the initial capacity is negative\",\n    \"alternatives\": [\n      \"@throws IllegalArgumentException when the initial capacity is negative\",\n      \"@throws IllegalArgumentException in case of a negative initial capacity\",\n      \"@throws IllegalArgumentException if the initial capacity has a negative value\",\n      \"@throws IllegalArgumentException if a negative value is used for the initial capacity\",\n      \"@throws IllegalArgumentException if the initial capacity is less than zero\"\n    ]\n  },\n  {\n    \"tag\": \"@throws IllegalArgumentException if the load factor is less than zero\",\n    \"alternatives\": [\n      \"@throws IllegalArgumentException when the load factor is below zero\",\n      \"@throws IllegalArgumentException in case of a negative load factor\",\n      \"@throws IllegalArgumentException if the load factor has a negative value\",\n      \"@throws IllegalArgumentException if a negative value is used for the load factor\",\n      \"@throws IllegalArgumentException if the load factor is smaller than zero\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NullPointerException if the map is null\",\n    \"alternatives\": [\n      \"@throws NullPointerException when the map is null\",\n      \"@throws NullPointerException in case of a null map\",\n      \"@throws NullPointerException if the provided map is null\",\n      \"@throws NullPointerException if a null value is passed for the map\",\n      \"@throws NullPointerException if the map parameter is null\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NullPointerException if list or factory is null\",\n    \"alternatives\": [\n      \"@throws NullPointerException when either the list or factory is null\",\n      \"@throws NullPointerException in case of a null list or factory\",\n      \"@throws NullPointerException if either the list or the factory is null\",\n      \"@throws NullPointerException if a null value is passed for either the list or factory\",\n      \"@throws NullPointerException if the list parameter or factory parameter is null\"\n    ]\n  },\n  {\n    \"tag\": \"@param list the list to decorate, must not be null\",\n    \"alternatives\": [\n      \"@param list the list to embellish, must not be null\",\n      \"@param list the list to adorn, must not be null\",\n      \"@param list the list to enhance, must not be null\",\n      \"@param list the list to beautify, must not be null\",\n      \"@param list the list to modify, must not be null\"\n    ]\n  },\n  {\n    \"tag\": \"@param factory the factory to use for creation, must not be null\",\n    \"alternatives\": [\n      \"@param factory the factory to use for generation, must not be null\",\n      \"@param factory the factory to use for construction, must not be null\",\n      \"@param factory the factory to use for building, must not be null\",\n      \"@param factory the factory to use for producing, must not be null\",\n      \"@param factory the factory to use for forming, must not be null\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NullPointerException if list or factory is null\",\n    \"alternatives\": [\n      \"@throws NullPointerException when either the list or factory is null\",\n      \"@throws NullPointerException in case of a null list or factory\",\n      \"@throws NullPointerException if either the list or the factory is null\",\n      \"@throws NullPointerException if a null value is passed for either the list or factory\",\n      \"@throws NullPointerException if the list parameter or factory parameter is null\"\n    ]\n  },\n  {\n    \"tag\": \"@param list the list to decorate, must not be null\",\n    \"alternatives\": [\n      \"@param list the list to embellish, must not be null\",\n      \"@param list the list to adorn, must not be null\",\n      \"@param list the list to enhance, must not be null\",\n      \"@param list the list to beautify, must not be null\",\n      \"@param list the list to modify, must not be null\"\n    ]\n  },\n  {\n    \"tag\": \"@param factory the factory to use for creation, must not be null\",\n    \"alternatives\": [\n      \"@param factory the factory to use for generation, must not be null\",\n      \"@param factory the factory to use for construction, must not be null\",\n      \"@param factory the factory to use for building, must not be null\",\n      \"@param factory the factory to use for producing, must not be null\",\n      \"@param factory the factory to use for forming, must not be null\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NullPointerException if node is null\",\n    \"alternatives\": [\n      \"@throws NullPointerException when node is null\",\n      \"@throws NullPointerException in case of a null node\",\n      \"@throws NullPointerException if the provided node is null\",\n      \"@throws NullPointerException if a null value is passed for the node\",\n      \"@throws NullPointerException if the node parameter is null\"\n    ]\n  },\n  {\n    \"tag\": \"@param node Node, who's child nodes are wrapped by this class. Must not be null\",\n    \"alternatives\": [\n      \"@param node Node, whose child nodes are encompassed by this class. Must not be null\",\n      \"@param node Node, who's offspring nodes are contained within this class. Must not be null\",\n      \"@param node Node, who's descendent nodes are enclosed by this class. Must not be null\",\n      \"@param node Node, who's progeny nodes are incorporated in this class. Must not be null\",\n      \"@param node Node, who's subordinate nodes are encased by this class. Must not be null\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NullPointerException if nodeList is null\",\n    \"alternatives\": [\n      \"@throws NullPointerException when nodeList is null\",\n      \"@throws NullPointerException in case of a null nodeList\",\n      \"@throws NullPointerException if the provided nodeList is null\",\n      \"@throws NullPointerException if a null value is passed for the nodeList\",\n      \"@throws NullPointerException if the nodeList parameter is null\"\n    ]\n  },\n  {\n    \"tag\": \"@param nodeList node list, which is wrapped by this class. Must not be null\",\n    \"alternatives\": [\n      \"@param nodeList list of nodes, which is encompassed by this class. Must not be null\",\n      \"@param nodeList list of nodes, which is incorporated in this class. Must not be null\",\n      \"@param nodeList list of nodes, which is contained within this class. Must not be null\",\n      \"@param nodeList list of nodes, which is enclosed by this class. Must not be null\",\n      \"@param nodeList list of nodes, which is encased by this class. Must not be null\"\n    ]\n  },\n  {\n    \"tag\": \"@throws UnsupportedOperationException always\",\n    \"alternatives\": [\n      \"@throws UnsupportedOperationException at all times\",\n      \"@throws UnsupportedOperationException under all circumstances\",\n      \"@throws UnsupportedOperationException consistently\",\n      \"@throws UnsupportedOperationException every time\",\n      \"@throws UnsupportedOperationException without exception\"\n    ]\n  },\n  {\n    \"tag\": \"@param pair the pair to copy, must not be null\",\n    \"alternatives\": [\n      \"@param pair the pair to duplicate, must not be null\",\n      \"@param pair the pair to replicate, must not be null\",\n      \"@param pair the pair to clone, must not be null\",\n      \"@param pair the pair to reproduce, must not be null\",\n      \"@param pair the pair to recreate, must not be null\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NullPointerException if the entry is null\",\n    \"alternatives\": [\n      \"@throws NullPointerException when the entry is null\",\n      \"@throws NullPointerException in case of a null entry\",\n      \"@throws NullPointerException if the provided entry is null\",\n      \"@throws NullPointerException if a null value is passed for the entry\",\n      \"@throws NullPointerException if the entry parameter is null\"\n    ]\n  },\n  {\n    \"tag\": \"@param entry the entry to copy, must not be null\",\n    \"alternatives\": [\n      \"@param entry the entry to duplicate, must not be null\",\n      \"@param entry the entry to replicate, must not be null\",\n      \"@param entry the entry to clone, must not be null\",\n      \"@param entry the entry to reproduce, must not be null\",\n      \"@param entry the entry to recreate, must not be null\"\n    ]\n  },\n  {\n    \"tag\": \"@return true always\",\n    \"alternatives\": [\n      \"@return always true\",\n      \"@return true in all cases\",\n      \"@return true every time\",\n      \"@return true without exception\",\n      \"@return true under all circumstances\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NullPointerException if map is null\",\n    \"alternatives\": [\n      \"@throws NullPointerException when the map is null\",\n      \"@throws NullPointerException in case of a null map\",\n      \"@throws NullPointerException if the provided map is null\",\n      \"@throws NullPointerException if a null value is passed for the map\",\n      \"@throws NullPointerException if the map parameter is null\"\n    ]\n  },\n  {\n    \"tag\": \"@param map the map to decorate, must not be null\",\n    \"alternatives\": [\n      \"@param map the map to embellish, must not be null\",\n      \"@param map the map to adorn, must not be null\",\n      \"@param map the map to enhance, must not be null\",\n      \"@param map the map to beautify, must not be null\",\n      \"@param map the map to modify, must not be null\"\n    ]\n  },\n  {\n    \"tag\": \"@param keyTransformer the transformer to use for key conversion, null means no conversion\",\n    \"alternatives\": [\n      \"@param keyTransformer the transformer to use for key translation, null means no conversion\",\n      \"@param keyTransformer the transformer to use for key modification, null means no conversion\",\n      \"@param keyTransformer the transformer to use for key alteration, null means no conversion\",\n      \"@param keyTransformer the transformer to use for key adjustment, null means no conversion\",\n      \"@param keyTransformer the transformer to use for key transformation, null means no conversion\"\n    ]\n  },\n  {\n    \"tag\": \"@param valueTransformer the transformer to use for value conversion, null means no conversion\",\n    \"alternatives\": [\n      \"@param valueTransformer the transformer to use for value translation, null means no conversion\",\n      \"@param valueTransformer the transformer to use for value modification, null means no conversion\",\n      \"@param valueTransformer the transformer to use for value alteration, null means no conversion\",\n      \"@param valueTransformer the transformer to use for value adjustment, null means no conversion\",\n      \"@param valueTransformer the transformer to use for value transformation, null means no conversion\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NullPointerException if map is null\",\n    \"alternatives\": [\n      \"@throws NullPointerException when the map is null\",\n      \"@throws NullPointerException in case of a null map\",\n      \"@throws NullPointerException if the provided map is null\",\n      \"@throws NullPointerException if a null value is passed for the map\",\n      \"@throws NullPointerException if the map parameter is null\"\n    ]\n  }\n]"