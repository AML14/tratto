"output = [\n  {\n    'tag': '@param lowerBound Lower bounds (constraints) of the objective variables.',\n    'alternatives': [\n      '@param lowerBound Minimum constraints for the objective variables.',\n      '@param lowerBound Constraints that define the lower bounds of the objective variables.',\n      '@param lowerBound Bounds that restrict the values of the objective variables.'\n    ]\n  },\n  {\n    'tag': '@param upperBound Upperer bounds (constraints) of the objective variables.',\n    'alternatives': [\n      '@param upperBound Maximum constraints for the objective variables.',\n      '@param upperBound Constraints that define the upper bounds of the objective variables.',\n      '@param upperBound Bounds that restrict the values of the objective variables.'\n    ]\n  },\n  {\n    'tag': '@param numberOfInterpolationPoints Number of interpolation conditions.\\nFor a problem of dimension {@code n}, its value must be in the interval\\n{@code [n+2, (n+1)(n+2)/2]}.\\nChoices that exceed {@code 2n+1} are not recommended.',\n    'alternatives': [\n      '@param numberOfInterpolationPoints The count of interpolation conditions.\\nFor a problem with dimension {@code n}, the value must fall within the range\\n{@code [n+2, (n+1)(n+2)/2]}.\\nIt is not advisable to choose values greater than {@code 2n+1}.',\n      '@param numberOfInterpolationPoints Number of interpolation constraints.\\nFor a problem with dimension {@code n}, the value should be within the range\\n{@code [n+2, (n+1)(n+2)/2]}.\\nAvoid selecting values that exceed {@code 2n+1}.',\n      '@param numberOfInterpolationPoints The total number of interpolation conditions.\\nFor a problem of dimension {@code n}, the value must lie within the interval\\n{@code [n+2, (n+1)(n+2)/2]}.\\nIt is not recommended to choose values greater than {@code 2n+1}.'\n    ]\n  },\n  {\n    'tag': '@param numberOfInterpolationPoints Number of interpolation conditions.\\nFor a problem of dimension {@code n}, its value must be in the interval\\n{@code [n+2, (n+1)(n+2)/2]}.\\nChoices that exceed {@code 2n+1} are not recommended.',\n    'alternatives': [\n      '@param numberOfInterpolationPoints The count of interpolation conditions.\\nFor a problem with dimension {@code n}, the value must fall within the range\\n{@code [n+2, (n+1)(n+2)/2]}.\\nIt is not advisable to choose values greater than {@code 2n+1}.',\n      '@param numberOfInterpolationPoints Number of interpolation constraints.\\nFor a problem with dimension {@code n}, the value should be within the range\\n{@code [n+2, (n+1)(n+2)/2]}.\\nAvoid selecting values that exceed {@code 2n+1}.',\n      '@param numberOfInterpolationPoints The total number of interpolation conditions.\\nFor a problem of dimension {@code n}, the value must lie within the interval\\n{@code [n+2, (n+1)(n+2)/2]}.\\nIt is not recommended to choose values greater than {@code 2n+1}.'\n    ]\n  },\n  {\n    'tag': '@param initialTrustRegionRadius Initial trust region radius.',\n    'alternatives': [\n      '@param initialTrustRegionRadius Starting trust region radius.',\n      '@param initialTrustRegionRadius The initial radius of the trust region.',\n      '@param initialTrustRegionRadius The initial size of the trust region.'\n    ]\n  },\n  {\n    'tag': '@param stoppingTrustRegionRadius Stopping trust region radius.',\n    'alternatives': [\n      '@param stoppingTrustRegionRadius The radius of the trust region when stopping.',\n      '@param stoppingTrustRegionRadius The radius of the trust region to terminate.',\n      '@param stoppingTrustRegionRadius The trust region radius for stopping.'\n    ]\n  },\n  {\n    'tag': '@param n Dimension of the simplex.',\n    'alternatives': [\n      '@param n Size of the simplex.',\n      '@param n Number of dimensions for the simplex.',\n      '@param n The dimensionality of the simplex.'\n    ]\n  },\n  {\n    'tag': '@param n Dimension of the simplex.',\n    'alternatives': [\n      '@param n Size of the simplex.',\n      '@param n Number of dimensions for the simplex.',\n      '@param n The dimensionality of the simplex.'\n    ]\n  },\n  {\n    'tag': '@param sideLength Length of the sides of the default (hypercube)\\nsimplex. See {@link AbstractSimplex#AbstractSimplex(int,double)}.',\n    'alternatives': [\n      '@param sideLength The size of the sides of the default (hypercube)\\nsimplex. Refer to {@link AbstractSimplex#AbstractSimplex(int,double)}.',\n      '@param sideLength The length of the edges of the default (hypercube)\\nsimplex. Check {@link AbstractSimplex#AbstractSimplex(int,double)}.',\n      '@param sideLength The measurement of the sides of the default (hypercube)\\nsimplex. View {@link AbstractSimplex#AbstractSimplex(int,double)}.'\n    ]\n  },\n  {\n    'tag': '@param n Dimension of the simplex. See\\n{@link AbstractSimplex#AbstractSimplex(int,double)}.',\n    'alternatives': [\n      '@param n Size of the simplex. See\\n{@link AbstractSimplex#AbstractSimplex(int,double)}.',\n      '@param n Number of dimensions for the simplex. Refer to\\n{@link AbstractSimplex#AbstractSimplex(int,double)}.',\n      '@param n The dimensionality of the simplex. Check\\n{@link AbstractSimplex#AbstractSimplex(int,double)}.'\n    ]\n  },\n  {\n    'tag': '@param sideLength Length of the sides of the default (hypercube)\\nsimplex. See {@link AbstractSimplex#AbstractSimplex(int,double)}.',\n    'alternatives': [\n      '@param sideLength The size of the sides of the default (hypercube)\\nsimplex. Refer to {@link AbstractSimplex#AbstractSimplex(int,double)}.',\n      '@param sideLength The length of the edges of the default (hypercube)\\nsimplex. Check {@link AbstractSimplex#AbstractSimplex(int,double)}.',\n      '@param sideLength The measurement of the sides of the default (hypercube)\\nsimplex. View {@link AbstractSimplex#AbstractSimplex(int,double)}.'\n    ]\n  },\n  {\n    'tag': '@param rho Reflection coefficient.',\n    'alternatives': [\n      '@param rho Coefficient of reflection.',\n      '@param rho Reflection factor.',\n      '@param rho Reflective coefficient.'\n    ]\n  },\n  {\n    'tag': '@param khi Expansion coefficient.',\n    'alternatives': [\n      '@param khi Coefficient of expansion.',\n      '@param khi Expansion factor.',\n      '@param khi Expansive coefficient.'\n    ]\n  },\n  {\n    'tag': '@param gamma Contraction coefficient.',\n    'alternatives': [\n      '@param gamma Coefficient of contraction.',\n      '@param gamma Contraction factor.',\n      '@param gamma Contractive coefficient.'\n    ]\n  },\n  {\n    'tag': '@param sigma Shrinkage coefficient.',\n    'alternatives': [\n      '@param sigma Coefficient of shrinkage.',\n      '@param sigma Shrinkage factor.',\n      '@param sigma Shrinkage coefficient.'\n    ]\n  },\n  {\n    'tag': '@param n Dimension of the simplex. See\\n{@link AbstractSimplex#AbstractSimplex(int)}.',\n    'alternatives': [\n      '@param n Size of the simplex. See\\n{@link AbstractSimplex#AbstractSimplex(int)}.',\n      '@param n Number of dimensions for the simplex. Refer to\\n{@link AbstractSimplex#AbstractSimplex(int)}.',\n      '@param n The dimensionality of the simplex. Check\\n{@link AbstractSimplex#AbstractSimplex(int)}.'\n    ]\n  },\n  {\n    'tag': '@param key the key to remove from',\n    'alternatives': [\n      '@param key the key to delete from',\n      '@param key the key to eliminate from',\n      '@param key the key to exclude from'\n    ]\n  },\n  {\n    'tag': '@param value the value to remove',\n    'alternatives': [\n      '@param value the value to delete',\n      '@param value the value to eliminate',\n      '@param value the value to exclude'\n    ]\n  },\n  {\n    'tag': '@return {@code true} if the mapping was removed, {@code false} otherwise',\n    'alternatives': [\n      '@return {@code true} if the mapping was deleted, {@code false} otherwise',\n      '@return {@code true} if the mapping was eliminated, {@code false} otherwise',\n      '@return {@code true} if the mapping was excluded, {@code false} otherwise'\n    ]\n  },\n  {\n    'tag': '@param value the value to search for',\n    'alternatives': [\n      '@param value the value to look for',\n      '@param value the value to find',\n      '@param value the value to locate'\n    ]\n  },\n  {\n    'tag': '@return true if the map contains the value',\n    'alternatives': [\n      '@return true if the map holds the value',\n      '@return true if the map includes the value',\n      '@return true if the map has the value'\n    ]\n  },\n  {\n    'tag': '@param key the key to store against',\n    'alternatives': [\n      '@param key the key to save under',\n      '@param key the key to record with',\n      '@param key the key to assign to'\n    ]\n  },\n  {\n    'tag': '@param value the value to add to the collection at the key',\n    'alternatives': [\n      '@param value the value to insert into the collection at the key',\n      '@param value the value to append to the collection at the key',\n      '@param value the value to include in the collection at the key'\n    ]\n  },\n  {\n    'tag': '@return the value added if the map changed and null if the map did not change',\n    'alternatives': [\n      '@return the value inserted if the map was modified and null if the map remained unchanged',\n      '@return the value appended if the map was altered and null if the map remained the same',\n      '@return the value included if the map was updated and null if the map stayed the same'\n    ]\n  },\n  {\n    'tag': '@param map the map to copy (either a normal or multi map)',\n    'alternatives': [\n      '@param map the map to duplicate (either a normal or multi map)',\n      '@param map the map to replicate (either a normal or multi map)',\n      '@param map the map to reproduce (either a normal or multi map)'\n    ]\n  }\n]"