"[\n  {\n    \"tag\": \"@param index the index to insert at\",\n    \"alternatives\": [\n      \"@param index the position to insert at\",\n      \"@param index the position to add at\",\n      \"@param index the location for insertion\",\n      \"@param index the position where to insert\",\n      \"@param index the spot to insert at\"\n    ]\n  },\n  {\n    \"tag\": \"@param object the object to add\",\n    \"alternatives\": [\n      \"@param object the item to add\",\n      \"@param object the element to insert\",\n      \"@param object the value to include\",\n      \"@param object the new item to append\",\n      \"@param object the thing to put in\"\n    ]\n  },\n  {\n    \"tag\": \"@param coll the collection to add in iterator order\",\n    \"alternatives\": [\n      \"@param coll the iterable to add in iterator order\",\n      \"@param coll the container to include in iterator order\",\n      \"@param coll the sequence to append in iterator order\",\n      \"@param coll the set to add in iterator order\",\n      \"@param coll the list to insert in iterator order\"\n    ]\n  },\n  {\n    \"tag\": \"@return true if this collection changed\",\n    \"alternatives\": [\n      \"@return true if the collection was modified\",\n      \"@return true if the collection has been altered\",\n      \"@return true if changes occurred in the collection\",\n      \"@return true if the collection has been modified\",\n      \"@return true if the collection underwent changes\"\n    ]\n  },\n  {\n    \"tag\": \"@param index the index to insert at\",\n    \"alternatives\": [\n      \"@param index the position to insert at\",\n      \"@param index the location for insertion\",\n      \"@param index the spot to insert at\",\n      \"@param index the point of insertion\",\n      \"@param index the place to insert\"\n    ]\n  },\n  {\n    \"tag\": \"@param coll the collection to add in iterator order\",\n    \"alternatives\": [\n      \"@param coll the set to add in iterator order\",\n      \"@param coll the iterable to include in iterator order\",\n      \"@param coll the sequence to append in iterator order\",\n      \"@param coll the container to insert in iterator order\",\n      \"@param coll the list to include in iterator order\"\n    ]\n  },\n  {\n    \"tag\": \"@return true if this collection changed\",\n    \"alternatives\": [\n      \"@return true if the collection has changed\",\n      \"@return true if the collection was modified\",\n      \"@return true if changes occurred in the collection\",\n      \"@return true if the collection has been altered\",\n      \"@return true if the collection underwent changes\"\n    ]\n  },\n  {\n    \"tag\": \"@param index the index to insert at\",\n    \"alternatives\": [\n      \"@param index the position to insert at\",\n      \"@param index the place for insertion\",\n      \"@param index the spot to insert at\",\n      \"@param index the location of insertion\",\n      \"@param index the point to insert\"\n    ]\n  },\n  {\n    \"tag\": \"@param object the object to set\",\n    \"alternatives\": [\n      \"@param object the new value to set\",\n      \"@param object the item to assign\",\n      \"@param object the element to update\",\n      \"@param object the value to change to\",\n      \"@param object the object to assign\"\n    ]\n  },\n  {\n    \"tag\": \"@return the previous object\",\n    \"alternatives\": [\n      \"@return the object that was replaced\",\n      \"@return the previous value\",\n      \"@return the object before the change\",\n      \"@return the object that was previously there\",\n      \"@return the value that was previously assigned\"\n    ]\n  },\n  {\n    \"tag\": \"@param list the {@link List} to populate the {@link Set}\",\n    \"alternatives\": [\n      \"@param list the {@link List} containing elements for {@link Set} population\",\n      \"@param list the {@link List} used to populate the {@link Set}\",\n      \"@param list the {@link List} that provides elements for {@link Set} population\",\n      \"@param list the {@link List} from which to populate the {@link Set}\",\n      \"@param list the {@link List} supplying elements for {@link Set} population\"\n    ]\n  },\n  {\n    \"tag\": \"@return a new {@link Set} populated with all elements of the provided\\n  {@link List}\",\n    \"alternatives\": [\n      \"@return a new {@link Set} containing all elements from the given\\n  {@link List}\",\n      \"@return a new {@link Set} that has been populated with the elements of the provided\\n  {@link List}\",\n      \"@return a new {@link Set} with all the elements from the given\\n  {@link List}\",\n      \"@return a new {@link Set} that includes all elements of the provided\\n  {@link List}\",\n      \"@return a new {@link Set} filled with all elements from the provided\\n  {@link List}\"\n    ]\n  },\n  {\n    \"tag\": \"@return the decorated list\",\n    \"alternatives\": [\n      \"@return the list with decorators applied\",\n      \"@return the list that has been decorated\",\n      \"@return the list after decoration\",\n      \"@return the decorated version of the list\",\n      \"@return the list that has been modified by decorators\"\n    ]\n  },\n  {\n    \"tag\": \"@return the maximum cache size\",\n    \"alternatives\": [\n      \"@return the size limit of the cache\",\n      \"@return the maximum size of the cache\",\n      \"@return the upper limit for the cache size\",\n      \"@return the maximum allowed size for the cache\",\n      \"@return the largest capacity the cache can hold\"\n    ]\n  },\n  {\n    \"tag\": \"@param maximumCacheSize the new maximum cache size\",\n    \"alternatives\": [\n      \"@param maximumCacheSize the updated maximum cache size\",\n      \"@param maximumCacheSize the revised cache size limit\",\n      \"@param maximumCacheSize the new limit for the cache size\",\n      \"@param maximumCacheSize the modified maximum size for the cache\",\n      \"@param maximumCacheSize the fresh maximum allowed size for the cache\"\n    ]\n  },\n  {\n    \"tag\": \"@return a node, or <code>null</code> if there are no nodes in the cache.\",\n    \"alternatives\": [\n      \"@return a node, or return <code>null</code> if the cache is empty.\",\n      \"@return a node, or <code>null</code> if the cache contains no nodes.\",\n      \"@return a node, or <code>null</code> if the cache does not have any nodes.\",\n      \"@return a node, or return <code>null</code> if there are no nodes stored in the cache.\",\n      \"@return a node, or return <code>null</code> if the cache does not contain any nodes.\"\n    ]\n  },\n  {\n    \"tag\": \"@return true if the cache is full\",\n    \"alternatives\": [\n      \"@return true if the cache has reached its capacity\",\n      \"@return true if the cache is at maximum capacity\",\n      \"@return true if the cache is completely filled\",\n      \"@return true if the cache has no more space\",\n      \"@return true if the cache is occupied\"\n    ]\n  },\n  {\n    \"tag\": \"@param node the node to add to the cache\",\n    \"alternatives\": [\n      \"@param node the node to insert into the cache\",\n      \"@param node the new entry to include in the cache\",\n      \"@param node the item to add to the cache\",\n      \"@param node the element to store in the cache\",\n      \"@param node the value to put into the cache\"\n    ]\n  },\n  {\n    \"tag\": \"@param value value of the new node\",\n    \"alternatives\": [\n      \"@param value the value of the newly added node\",\n      \"@param value the value assigned to the new node\",\n      \"@param value the value to set for the new node\",\n      \"@param value the value associated with the new node\",\n      \"@param value the value that the new node holds\"\n    ]\n  },\n  {\n    \"tag\": \"@return the newly created node\",\n    \"alternatives\": [\n      \"@return the newly generated node\",\n      \"@return the recently created node\",\n      \"@return the node that has just been created\",\n      \"@return the node that was just added\",\n      \"@return the new node that has been generated\"\n    ]\n  },\n  {\n    \"tag\": \"@param node the node to remove\",\n    \"alternatives\": [\n      \"@param node the node to delete\",\n      \"@param node the element to extract\",\n      \"@param node the item to eliminate\",\n      \"@param node the object to exclude\",\n      \"@param node the value to take out\"\n    ]\n  },\n  {\n    \"tag\": \"@param coll the collection to copy\",\n    \"alternatives\": [\n      \"@param coll the collection to duplicate\",\n      \"@param coll the container to replicate\",\n      \"@param coll the source collection to replicate\",\n      \"@param coll the set to clone\",\n      \"@param coll the original collection to copy\"\n    ]\n  },\n  {\n    \"tag\": \"@param maximumCacheSize the maximum cache size\",\n    \"alternatives\": [\n      \"@param maximumCacheSize the size of the cache\",\n      \"@param maximumCacheSize the limit for the cache size\",\n      \"@param maximumCacheSize the upper bound on cache size\",\n      \"@param maximumCacheSize the size limit of the cache\",\n      \"@param maximumCacheSize the maximum size for the cache\"\n    ]\n  },\n  {\n    \"tag\": \"@param <E> the type of the elements in the list\",\n    \"alternatives\": [\n      \"@param <E> the class of elements in the list\",\n      \"@param <E> the kind of elements in the list\",\n      \"@param <E> the element type for the list\",\n      \"@param <E> the data type of the elements in the list\",\n      \"@param <E> the type assigned to elements in the list\"\n    ]\n  },\n  {\n    \"tag\": \"@return a new unmodifiable list\",\n    \"alternatives\": [\n      \"@return a new list that cannot be modified\",\n      \"@return a new list that is read-only\",\n      \"@return a new list that is not modifiable\",\n      \"@return a new list that is immutable\",\n      \"@return a new list that cannot be changed\"\n    ]\n  }\n]"