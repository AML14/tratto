"output = [\n  {\n    'tag': '@throws IllegalArgumentException if any alphabet or padding characters appear in the separator\\n        string, or if {@code n <= 0}',\n    'alternatives': [\n      '@throws IllegalArgumentException if there are any alphabetic or padding characters present in the separator string, or if {@code n <= 0}',\n      '@throws IllegalArgumentException if the separator contains any alphabetic or padding characters, or if {@code n <= 0}',\n      '@throws IllegalArgumentException if there are alphabet or padding characters in the separator string, or if {@code n <= 0}',\n      '@throws IllegalArgumentException if the separator string contains any alphabet or padding characters, or if {@code n <= 0}',\n      '@throws IllegalArgumentException if there are any characters in the separator string that are alphabets or padding characters, or if {@code n <= 0}'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if {@code expression} is false',\n    'alternatives': [\n      '@throws IllegalArgumentException if the given expression evaluates to false',\n      '@throws IllegalArgumentException if the provided expression is false',\n      '@throws IllegalArgumentException if the expression is false',\n      '@throws IllegalArgumentException if the given condition is false',\n      '@throws IllegalArgumentException if the provided condition evaluates to false'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if {@code expression} is false',\n    'alternatives': [\n      '@throws IllegalArgumentException if the given expression is false',\n      '@throws IllegalArgumentException if the provided expression evaluates to false',\n      '@throws IllegalArgumentException if the expression evaluates to false',\n      '@throws IllegalArgumentException if the given condition is false',\n      '@throws IllegalArgumentException if the provided condition is false'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if {@code expression} is false',\n    'alternatives': [\n      '@throws IllegalArgumentException if the expression is not true',\n      '@throws IllegalArgumentException if the given expression evaluates to false',\n      '@throws IllegalArgumentException if the provided expression is not true',\n      '@throws IllegalArgumentException if the given condition is false',\n      '@throws IllegalArgumentException if the provided condition is not true'\n    ]\n  },\n  {\n    'tag': \"@throws NullPointerException if the check fails and either {@code errorMessageTemplate} or\\n    {@code errorMessageArgs} is null (don't let this happen)\",\n    'alternatives': [\n      \"@throws NullPointerException if the check fails and either {@code errorMessageTemplate} or\\n    {@code errorMessageArgs} is null (do not permit this to happen)\",\n      \"@throws NullPointerException if the check fails and either {@code errorMessageTemplate} or\\n    {@code errorMessageArgs} is null (avoid this situation)\",\n      \"@throws NullPointerException if the check fails and either {@code errorMessageTemplate} or\\n    {@code errorMessageArgs} is null (prevent this from occurring)\",\n      \"@throws NullPointerException if the check fails and either {@code errorMessageTemplate} or\\n    {@code errorMessageArgs} is null (ensure this does not happen)\",\n      \"@throws NullPointerException if the check fails and either {@code errorMessageTemplate} or\\n    {@code errorMessageArgs} is null (make sure this doesn't occur)\"\n    ]\n  },\n  {\n    'tag': '@throws IllegalStateException if {@code expression} is false',\n    'alternatives': [\n      '@throws IllegalStateException if the given expression is false',\n      '@throws IllegalStateException if the provided expression evaluates to false',\n      '@throws IllegalStateException if the expression is false',\n      '@throws IllegalStateException if the given condition is false',\n      '@throws IllegalStateException if the provided condition is false'\n    ]\n  },\n  {\n    'tag': '@throws IllegalStateException if {@code expression} is false',\n    'alternatives': [\n      '@throws IllegalStateException if the given expression evaluates to false',\n      '@throws IllegalStateException if the provided expression is false',\n      '@throws IllegalStateException if the expression evaluates to false',\n      '@throws IllegalStateException if the given condition is false',\n      '@throws IllegalStateException if the provided condition is false'\n    ]\n  },\n  {\n    'tag': '@throws IllegalStateException if {@code expression} is false',\n    'alternatives': [\n      '@throws IllegalStateException if the expression is not true',\n      '@throws IllegalStateException if the given expression evaluates to false',\n      '@throws IllegalStateException if the provided expression is not true',\n      '@throws IllegalStateException if the given condition is false',\n      '@throws IllegalStateException if the provided condition is not true'\n    ]\n  },\n  {\n    'tag': \"@throws NullPointerException if the check fails and either {@code errorMessageTemplate} or\\n    {@code errorMessageArgs} is null (don't let this happen)\",\n    'alternatives': [\n      \"@throws NullPointerException if the check fails and either {@code errorMessageTemplate} or\\n    {@code errorMessageArgs} is null (do not permit this to happen)\",\n      \"@throws NullPointerException if the check fails and either {@code errorMessageTemplate} or\\n    {@code errorMessageArgs} is null (avoid this situation)\",\n      \"@throws NullPointerException if the check fails and either {@code errorMessageTemplate} or\\n    {@code errorMessageArgs} is null (prevent this from occurring)\",\n      \"@throws NullPointerException if the check fails and either {@code errorMessageTemplate} or\\n    {@code errorMessageArgs} is null (ensure this does not happen)\",\n      \"@throws NullPointerException if the check fails and either {@code errorMessageTemplate} or\\n    {@code errorMessageArgs} is null (make sure this doesn't occur)\"\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if {@code reference} is null',\n    'alternatives': [\n      '@throws NullPointerException if the given reference is null',\n      '@throws NullPointerException if the provided reference is null',\n      '@throws NullPointerException if the reference is null',\n      '@throws NullPointerException if the given object is null',\n      '@throws NullPointerException if the provided object is null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if {@code reference} is null',\n    'alternatives': [\n      '@throws NullPointerException if the provided reference is null',\n      '@throws NullPointerException if the given reference is null',\n      '@throws NullPointerException if the reference is null',\n      '@throws NullPointerException if the provided object is null',\n      '@throws NullPointerException if the given object is null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if {@code reference} is null',\n    'alternatives': [\n      '@throws NullPointerException if the reference is not provided',\n      '@throws NullPointerException if the given reference is null',\n      '@throws NullPointerException if the provided reference is not provided',\n      '@throws NullPointerException if the given object is null',\n      '@throws NullPointerException if the provided object is not provided'\n    ]\n  },\n  {\n    'tag': '@throws IndexOutOfBoundsException if {@code index} is negative or is not less than {@code size}',\n    'alternatives': [\n      '@throws IndexOutOfBoundsException if the provided index is negative or is not smaller than the size',\n      '@throws IndexOutOfBoundsException if the given index is negative or is not less than the size',\n      '@throws IndexOutOfBoundsException if the index is either negative or not less than the size',\n      '@throws IndexOutOfBoundsException if the provided index is not smaller than the size',\n      '@throws IndexOutOfBoundsException if the given index is either negative or greater than or equal to the size'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if {@code size} is negative',\n    'alternatives': [\n      '@throws IllegalArgumentException if the provided size value is negative',\n      '@throws IllegalArgumentException if the given size is negative',\n      '@throws IllegalArgumentException if the size is negative',\n      '@throws IllegalArgumentException if the provided value for size is less than zero',\n      '@throws IllegalArgumentException if the given value for size is negative'\n    ]\n  },\n  {\n    'tag': '@throws IndexOutOfBoundsException if {@code index} is negative or is not less than {@code size}',\n    'alternatives': [\n      '@throws IndexOutOfBoundsException if the given index is negative or is not smaller than the size',\n      '@throws IndexOutOfBoundsException if the provided index is negative or is not less than the size',\n      '@throws IndexOutOfBoundsException if the index is either negative or not less than the size',\n      '@throws IndexOutOfBoundsException if the provided index is not smaller than the size',\n      '@throws IndexOutOfBoundsException if the given index is either negative or greater than or equal to the size'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if {@code size} is negative',\n    'alternatives': [\n      '@throws IllegalArgumentException if the provided size value is negative',\n      '@throws IllegalArgumentException if the given size is negative',\n      '@throws IllegalArgumentException if the size is negative',\n      '@throws IllegalArgumentException if the provided value for size is less than zero',\n      '@throws IllegalArgumentException if the given value for size is negative'\n    ]\n  },\n  {\n    'tag': '@throws IndexOutOfBoundsException if {@code index} is negative or is greater than {@code size}',\n    'alternatives': [\n      '@throws IndexOutOfBoundsException if the provided index is negative or is greater than the size',\n      '@throws IndexOutOfBoundsException if the given index is negative or is greater than the size',\n      '@throws IndexOutOfBoundsException if the index is either negative or greater than the size',\n      '@throws IndexOutOfBoundsException if the provided index is greater than the size',\n      '@throws IndexOutOfBoundsException if the given index is either negative or greater than or equal to the size'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if {@code size} is negative',\n    'alternatives': [\n      '@throws IllegalArgumentException if the provided size value is negative',\n      '@throws IllegalArgumentException if the given size is negative',\n      '@throws IllegalArgumentException if the size is negative',\n      '@throws IllegalArgumentException if the provided value for size is less than zero',\n      '@throws IllegalArgumentException if the given value for size is negative'\n    ]\n  },\n  {\n    'tag': '@throws IndexOutOfBoundsException if {@code index} is negative or is greater than {@code size}',\n    'alternatives': [\n      '@throws IndexOutOfBoundsException if the given index is negative or is greater than the size',\n      '@throws IndexOutOfBoundsException if the provided index is negative or is greater than the size',\n      '@throws IndexOutOfBoundsException if the index is either negative or greater than the size',\n      '@throws IndexOutOfBoundsException if the provided index is greater than the size',\n      '@throws IndexOutOfBoundsException if the given index is either negative or greater than or equal to the size'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if {@code size} is negative',\n    'alternatives': [\n      '@throws IllegalArgumentException if the provided size value is negative',\n      '@throws IllegalArgumentException if the given size is negative',\n      '@throws IllegalArgumentException if the size is negative',\n      '@throws IllegalArgumentException if the provided value for size is less than zero',\n      '@throws IllegalArgumentException if the given value for size is negative'\n    ]\n  },\n  {\n    'tag': '@throws IndexOutOfBoundsException if either index is negative or is greater than {@code size},\\n    or if {@code end} is less than {@code start}',\n    'alternatives': [\n      '@throws IndexOutOfBoundsException if either the index is negative or is greater than the size, or if the end is less than the start',\n      '@throws IndexOutOfBoundsException if either index is negative or is greater than the size, or if end is less than start',\n      '@throws IndexOutOfBoundsException if either the index is negative or is greater than the size, or if the end is smaller than the start',\n      '@throws IndexOutOfBoundsException if either index is negative or is greater than the size, or if the end is less than the start position',\n      '@throws IndexOutOfBoundsException if either the index is negative or is greater than the size, or if the end is smaller than the start position'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if {@code size} is negative',\n    'alternatives': [\n      '@throws IllegalArgumentException if the provided size value is negative',\n      '@throws IllegalArgumentException if the given size is negative',\n      '@throws IllegalArgumentException if the size is negative',\n      '@throws IllegalArgumentException if the provided value for size is less than zero',\n      '@throws IllegalArgumentException if the given value for size is negative'\n    ]\n  },\n  {\n    'tag': '@return the provided element',\n    'alternatives': [\n      '@return the element that was provided',\n      '@return the specified element',\n      '@return the element given as input',\n      '@return the element provided as argument',\n      '@return the given element'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if {@code capacity} is less than 1',\n    'alternatives': [\n      '@throws IllegalArgumentException if the provided capacity is less than 1',\n      '@throws IllegalArgumentException if the given capacity is less than 1',\n      '@throws IllegalArgumentException if the capacity is less than 1',\n      '@throws IllegalArgumentException if the provided value for capacity is less than 1',\n      '@throws IllegalArgumentException if the given value for capacity is less than 1'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if {@code capacity} is less than 1',\n    'alternatives': [\n      '@throws IllegalArgumentException if the given capacity is less than 1',\n      '@throws IllegalArgumentException if the provided capacity is less than 1',\n      '@throws IllegalArgumentException if the capacity is less than 1',\n      '@throws IllegalArgumentException if the provided value for capacity is less than 1',\n      '@throws IllegalArgumentException if the given value for capacity is less than 1'\n    ]\n  }\n]"