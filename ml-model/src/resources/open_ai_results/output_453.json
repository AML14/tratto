"output = [\n  {'tag': '@throws NullPointerException if map is null',\n   'alternatives': ['@throws NullPointerException if map is null']},\n  {'tag': '@return the decorated map',\n   'alternatives': ['@return the decorated map']},\n  {'tag': '@throws NullPointerException if the collection is null',\n   'alternatives': ['@throws NullPointerException if the collection is null']},\n  {'tag': '@param a1 the first value to compare',\n   'alternatives': ['@param a1 the first value to compare']},\n  {'tag': '@param a2 the first value to compare',\n   'alternatives': ['@param a2 the first value to compare']},\n  {'tag': '@return true if a1 and a2 are set equivalent, false otherwise',\n   'alternatives': ['@return true if a1 and a2 are set equivalent, false otherwise']},\n  {'tag': '@param smaller the possibly-smaller subset',\n   'alternatives': ['@param smaller the possibly-smaller subset']},\n  {'tag': '@param bigger the possibly-larger set',\n   'alternatives': ['@param bigger the possibly-larger set']},\n  {'tag': '@return true if smaller is a subset (each element of smaller is\\nalso a element of bigger) of bigger, false otherwise',\n   'alternatives': ['@return true if smaller is a subset (each element of smaller is\\nalso a element of bigger) of bigger, false otherwise']},\n  {'tag': '@param rel_diff the relative diff to use',\n   'alternatives': ['@param rel_diff the relative diff to use']},\n  {'tag': '@return {@code true} if the condition for modification was met. This\\n    implies that the multiset was indeed modified, unless\\n    {@code oldCount == newCount}.',\n   'alternatives': ['@return {@code true} if the condition for modification was met. This\\n    implies that the multiset was indeed modified, unless\\n    {@code oldCount == newCount}.']},\n  {'tag': '@return a view of the set of distinct elements in this multiset',\n   'alternatives': ['@return a view of the set of distinct elements in this multiset']},\n  {'tag': '@return a set of entries representing the data of this multiset',\n   'alternatives': ['@return a set of entries representing the data of this multiset']},\n  {'tag': '@param element the element to check for',\n   'alternatives': ['@param element the element to check for']},\n  {'tag': '@return {@code true} if this multiset contains at least one occurrence of\\n    the element',\n   'alternatives': ['@return {@code true} if this multiset contains at least one occurrence of\\n    the element']},\n  {'tag': '@param elements the collection of elements to be checked for containment in\\n    this multiset',\n   'alternatives': ['@param elements the collection of elements to be checked for containment in\\n    this multiset']},\n  {'tag': '@return {@code true} if this multiset contains at least one occurrence of\\n    each element contained in {@code elements}',\n   'alternatives': ['@return {@code true} if this multiset contains at least one occurrence of\\n    each element contained in {@code elements}']},\n  {'tag': '@param element the element to add one occurrence of; may be null only if\\n    explicitly allowed by the implementation',\n   'alternatives': ['@param element the element to add one occurrence of; may be null only if\\n    explicitly allowed by the implementation']},\n  {'tag': '@return {@code true} always, since this call is required to modify the\\n    multiset, unlike other {@link Collection} types',\n   'alternatives': ['@return {@code true} always, since this call is required to modify the\\n    multiset, unlike other {@link Collection} types']},\n  {'tag': '@throws IllegalArgumentException if {@link Integer#MAX_VALUE} occurrences\\n    of {@code element} are already contained in this multiset',\n   'alternatives': ['@throws IllegalArgumentException if {@link Integer#MAX_VALUE} occurrences\\n    of {@code element} are already contained in this multiset']},\n  {'tag': '@param element the element to remove one occurrence of',\n   'alternatives': ['@param element the element to remove one occurrence of']},\n  {'tag': '@return {@code true} if an occurrence was found and removed',\n   'alternatives': ['@return {@code true} if an occurrence was found and removed']},\n  {'tag': '@return the value previously associated with this class (possibly {@code\\n    null}), or {@code null} if there was no previous entry.',\n   'alternatives': ['@return the value previously associated with this class (possibly {@code\\n    null}), or {@code null} if there was no previous entry.']},\n  {'tag': '@throws IllegalArgumentException if the call would result in more than\\n    {@link Integer#MAX_VALUE} occurrences of {@code element} in this\\n    multiset.',\n   'alternatives': ['@throws IllegalArgumentException if the call would result in more than\\n    {@link Integer#MAX_VALUE} occurrences of {@code element} in this\\n    multiset.']},\n  {'tag': '@param key key to store in the multimap',\n   'alternatives': ['@param key key to store in the multimap']}\n]"