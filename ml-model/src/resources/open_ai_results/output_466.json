"output=[\n  {\n    'tag': '@throws MathIllegalArgumentException if n &lt; 0.',\n    'alternatives': [\n      '@throws MathIllegalArgumentException if n is less than 0.',\n      '@throws MathIllegalArgumentException when n is negative.',\n      '@throws MathIllegalArgumentException if n is smaller than 0.'\n    ]\n  },\n  {\n    'tag': '@param n a positive number.',\n    'alternatives': [\n      '@param n a number that is greater than 0.',\n      '@param n a number that is positive.',\n      '@param n a number that is above zero.'\n    ]\n  },\n  {\n    'tag': '@return the smallest prime greater than or equal to n.',\n    'alternatives': [\n      '@return the smallest prime number that is larger than or equal to n.',\n      '@return the lowest prime greater than or equal to n.',\n      '@return the smallest prime number equal to or greater than n.'\n    ]\n  },\n  {\n    'tag': '@throws MathIllegalArgumentException if n &lt; 2.',\n    'alternatives': [\n      '@throws MathIllegalArgumentException if n is less than 2.',\n      '@throws MathIllegalArgumentException when n is smaller than 2.',\n      '@throws MathIllegalArgumentException if n is smaller than 2.'\n    ]\n  },\n  {\n    'tag': '@param n number to factorize: must be &ge; 2',\n    'alternatives': [\n      '@param n number to factorize: should be greater than or equal to 2',\n      '@param n number to be factorized: must be at least 2',\n      '@param n the number to factorize, which has to be equal or greater than 2'\n    ]\n  },\n  {\n    'tag': '@throws NumberIsTooSmallException if the size of {@code x} is smaller\\nthan 3.',\n    'alternatives': [\n      '@throws NumberIsTooSmallException if the size of {@code x} is less than 3.',\n      '@throws NumberIsTooSmallException when the size of {@code x} is smaller than 3.',\n      '@throws NumberIsTooSmallException if the size of {@code x} is below 3.'\n    ]\n  },\n  {\n    'tag': '@param isLast true if the step is the last one',\n    'alternatives': [\n      '@param isLast indicating whether the step is the last one',\n      '@param isLast a boolean value to determine if it is the final step',\n      '@param isLast true if it is the final step'\n    ]\n  },\n  {\n    'tag': '@throws NullArgumentException if original is null',\n    'alternatives': [\n      '@throws NullArgumentException when the original object is null',\n      '@throws NullArgumentException if the original parameter is null',\n      '@throws NullArgumentException if the original input is null'\n    ]\n  },\n  {\n    'tag': '@throws NullArgumentException if either source or dest is null',\n    'alternatives': [\n      '@throws NullArgumentException if either source or destination is null',\n      '@throws NullArgumentException when either source or dest is null',\n      '@throws NullArgumentException if source or dest is null'\n    ]\n  },\n  {\n    'tag': '@param isLast true if the step is the last one',\n    'alternatives': [\n      '@param isLast indicating whether the step represents the last one',\n      '@param isLast a boolean value to indicate if it is the final step',\n      '@param isLast true if it is the last step'\n    ]\n  },\n  {\n    'tag': '@throws NotStrictlyPositiveException if {@code scale <= 0}.',\n    'alternatives': [\n      '@throws NotStrictlyPositiveException if {@code scale} is less than or equal to 0.',\n      '@throws NotStrictlyPositiveException when {@code scale} is not positive.',\n      '@throws NotStrictlyPositiveException if {@code scale} is not greater than 0.'\n    ]\n  },\n  {\n    'tag': '@throws NotStrictlyPositiveException if {@code scale <= 0}.',\n    'alternatives': [\n      '@throws NotStrictlyPositiveException if {@code scale} is smaller than or equal to 0.',\n      '@throws NotStrictlyPositiveException when {@code scale} is not positive.',\n      '@throws NotStrictlyPositiveException if {@code scale} is not greater than 0.'\n    ]\n  },\n  {\n    'tag': '@throws NotStrictlyPositiveException if {@code scale <= 0}.',\n    'alternatives': [\n      '@throws NotStrictlyPositiveException if {@code scale} is below or equal to 0.',\n      '@throws NotStrictlyPositiveException when {@code scale} is not positive.',\n      '@throws NotStrictlyPositiveException if {@code scale} is not greater than 0.'\n    ]\n  },\n  {\n    'tag': '@return {@code true}',\n    'alternatives': [\n      '@return the value of true.',\n      '@return true as the result.',\n      '@return the boolean value true.'\n    ]\n  },\n  {\n    'tag': '@throws NotPositiveException if {@code numberOfSuccesses < 0}.',\n    'alternatives': [\n      '@throws NotPositiveException if {@code numberOfSuccesses} is negative.',\n      '@throws NotPositiveException when {@code numberOfSuccesses} is smaller than 0.',\n      '@throws NotPositiveException if {@code numberOfSuccesses} is below 0.'\n    ]\n  },\n  {\n    'tag': '@throws NotStrictlyPositiveException if {@code populationSize <= 0}.',\n    'alternatives': [\n      '@throws NotStrictlyPositiveException if {@code populationSize} is less than or equal to 0.',\n      '@throws NotStrictlyPositiveException when {@code populationSize} is not positive.',\n      '@throws NotStrictlyPositiveException if {@code populationSize} is not greater than 0.'\n    ]\n  },\n  {\n    'tag': '@throws NumberIsTooLargeException if {@code numberOfSuccesses > populationSize},\\nor {@code sampleSize > populationSize}.',\n    'alternatives': [\n      '@throws NumberIsTooLargeException if {@code numberOfSuccesses} is larger than populationSize, or if sampleSize exceeds populationSize.',\n      '@throws NumberIsTooLargeException when {@code numberOfSuccesses} is greater than populationSize, or the sampleSize is larger than the populationSize.',\n      '@throws NumberIsTooLargeException if {@code numberOfSuccesses} exceeds populationSize, or if sampleSize is larger than populationSize.'\n    ]\n  },\n  {\n    'tag': '@throws NotPositiveException if {@code numberOfSuccesses < 0}.',\n    'alternatives': [\n      '@throws NotPositiveException if {@code numberOfSuccesses} is negative.',\n      '@throws NotPositiveException when {@code numberOfSuccesses} is smaller than 0.',\n      '@throws NotPositiveException if {@code numberOfSuccesses} is below 0.'\n    ]\n  },\n  {\n    'tag': '@throws NotStrictlyPositiveException if {@code populationSize <= 0}.',\n    'alternatives': [\n      '@throws NotStrictlyPositiveException if {@code populationSize} is less than or equal to 0.',\n      '@throws NotStrictlyPositiveException when {@code populationSize} is not positive.',\n      '@throws NotStrictlyPositiveException if {@code populationSize} is not greater than 0.'\n    ]\n  },\n  {\n    'tag': '@throws NumberIsTooLargeException if {@code numberOfSuccesses > populationSize},\\nor {@code sampleSize > populationSize}.',\n    'alternatives': [\n      '@throws NumberIsTooLargeException if {@code numberOfSuccesses} is larger than populationSize, or if sampleSize exceeds populationSize.',\n      '@throws NumberIsTooLargeException when {@code numberOfSuccesses} is greater than populationSize, or the sampleSize is larger than the populationSize.',\n      '@throws NumberIsTooLargeException if {@code numberOfSuccesses} exceeds populationSize, or if sampleSize is larger than populationSize.'\n    ]\n  },\n  {\n    'tag': '@return {@code true}',\n    'alternatives': [\n      '@return the value of true.',\n      '@return true as the result.',\n      '@return the boolean value true.'\n    ]\n  },\n  {\n    'tag': '@throws NotPositiveException if {@code numberOfTrials} or {@code numberOfSuccesses} is negative',\n    'alternatives': [\n      '@throws NotPositiveException if either {@code numberOfTrials} or {@code numberOfSuccesses} is negative.',\n      '@throws NotPositiveException when either {@code numberOfTrials} or {@code numberOfSuccesses} is below 0.',\n      '@throws NotPositiveException if either {@code numberOfTrials} or {@code numberOfSuccesses} is smaller than 0.'\n    ]\n  },\n  {\n    'tag': '@throws OutOfRangeException if {@code probability} is not between 0 and 1',\n    'alternatives': [\n      '@throws OutOfRangeException if {@code probability} is outside the range of 0 to 1.',\n      '@throws OutOfRangeException when {@code probability} is not between 0 and 1.',\n      '@throws OutOfRangeException if {@code probability} is not within the interval from 0 to 1.'\n    ]\n  },\n  {\n    'tag': '@throws MathIllegalArgumentException if {@code numberOfTrials} &lt; {@code numberOfSuccesses} or\\nif {@code alternateHypothesis} is null.',\n    'alternatives': [\n      '@throws MathIllegalArgumentException if {@code numberOfTrials} is smaller than {@code numberOfSuccesses} or if {@code alternateHypothesis} is null.',\n      '@throws MathIllegalArgumentException when {@code numberOfTrials} is less than {@code numberOfSuccesses} or when {@code alternateHypothesis} is null.',\n      '@throws MathIllegalArgumentException if {@code numberOfTrials} is below {@code numberOfSuccesses} or if {@code alternateHypothesis} is null.'\n    ]\n  },\n  {\n    'tag': '@throws NotPositiveException if {@code numberOfTrials} or {@code numberOfSuccesses} is negative',\n    'alternatives': [\n      '@throws NotPositiveException if either {@code numberOfTrials} or {@code numberOfSuccesses} is negative.',\n      '@throws NotPositiveException when either {@code numberOfTrials} or {@code numberOfSuccesses} is below 0.',\n      '@throws NotPositiveException if either {@code numberOfTrials} or {@code numberOfSuccesses} is smaller than 0.'\n    ]\n  }\n]"