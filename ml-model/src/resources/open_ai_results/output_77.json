"output = [\n  {\n    'tag': '@throws ExecutionException if a checked exception was thrown while loading the value. ({@code\\n    ExecutionException} is thrown <a\\n    href=\"https://github.com/google/guava/wiki/CachesExplained#interruption\">even if\\n    computation was interrupted by an {@code InterruptedException}</a>.)',\n    'alternatives': [\n      '@throws ExecutionException if an exception of type checked was thrown while loading the value. ({@code\\n    ExecutionException} is thrown <a\\n    href=\"https://github.com/google/guava/wiki/CachesExplained#interruption\">even if\\n    computation was interrupted by an {@code InterruptedException}</a>.)',\n      '@throws ExecutionException if there was a thrown checked exception while loading the value. ({@code\\n    ExecutionException} is thrown <a\\n    href=\"https://github.com/google/guava/wiki/CachesExplained#interruption\">even if\\n    computation was interrupted by an {@code InterruptedException}</a>.)',\n      '@throws ExecutionException if loading the value resulted in a checked exception being thrown. ({@code\\n    ExecutionException} is thrown <a\\n    href=\"https://github.com/google/guava/wiki/CachesExplained#interruption\">even if\\n    computation was interrupted by an {@code InterruptedException}</a>.)'\n    ]\n  },\n  {\n    'tag': '@throws UncheckedExecutionException if an unchecked exception was thrown while loading the\\n    values',\n    'alternatives': [\n      '@throws UncheckedExecutionException if a thrown unchecked exception occurred while loading the\\n    values',\n      '@throws UncheckedExecutionException if loading the values resulted in an unchecked exception being thrown',\n      '@throws UncheckedExecutionException if there was an unchecked exception thrown while loading the values'\n    ]\n  },\n  {\n    'tag': '@throws ExecutionError if an error was thrown while loading the values',\n    'alternatives': [\n      '@throws ExecutionError if a thrown error occurred while loading the values',\n      '@throws ExecutionError if loading the values resulted in an error being thrown',\n      '@throws ExecutionError if there was an error thrown while loading the values'\n    ]\n  },\n  {\n    'tag': '@throws UncheckedExecutionException if an exception was thrown while loading the value. (As\\n    described in the documentation for {@link #getUnchecked}, {@code LoadingCache} should be\\n    used as a {@code Function} only with cache loaders that throw only unchecked exceptions.)',\n    'alternatives': [\n      '@throws UncheckedExecutionException if a thrown exception occurred while loading the value. (As\\n    described in the documentation for {@link #getUnchecked}, {@code LoadingCache} should be\\n    used as a {@code Function} only with cache loaders that throw only unchecked exceptions.)',\n      '@throws UncheckedExecutionException if loading the value resulted in an exception being thrown. (As\\n    described in the documentation for {@link #getUnchecked}, {@code LoadingCache} should be\\n    used as a {@code Function} only with cache loaders that throw only unchecked exceptions.)',\n      '@throws UncheckedExecutionException if there was an exception thrown while loading the value. (As\\n    described in the documentation for {@link #getUnchecked}, {@code LoadingCache} should be\\n    used as a {@code Function} only with cache loaders that throw only unchecked exceptions.)'\n    ]\n  },\n  {\n    'tag': '@throws Exception if unable to load the result',\n    'alternatives': [\n      '@throws Exception if unable to load the outcome',\n      '@throws Exception if the result cannot be loaded',\n      '@throws Exception if loading the result fails'\n    ]\n  },\n  {\n    'tag': \"@throws InterruptedException if this method is interrupted. {@code InterruptedException} is\\n    treated like any other {@code Exception} in all respects except that, when it is caught,\\n    the thread's interrupt status is set\",\n    'alternatives': [\n      \"@throws InterruptedException if the method gets interrupted. {@code InterruptedException} is\\n    treated as any other {@code Exception} in all aspects except that, when it is caught,\\n    the thread's interrupt status is set\",\n      \"@throws InterruptedException if this method gets interrupted. {@code InterruptedException} is\\n    treated just like any other {@code Exception} in all respects except that, when it is caught,\\n    the interrupt status of the thread is set\",\n      \"@throws InterruptedException if the method is interrupted. {@code InterruptedException} is\\n    treated similarly to any other {@code Exception} with the exception that, when it is caught,\\n    the thread's interrupt status is set\"\n    ]\n  },\n  {\n    'tag': '@throws Exception if unable to reload the result',\n    'alternatives': [\n      '@throws Exception if unable to reload the outcome',\n      '@throws Exception if the result cannot be reloaded',\n      '@throws Exception if reloading the result fails'\n    ]\n  },\n  {\n    'tag': \"@param keys the unique, non-null keys whose values should be loaded\",\n    'alternatives': [\n      \"@param keys the unique, non-null keys for which values should be loaded\",\n      \"@param keys the unique, non-null keys from which values should be loaded\",\n      \"@param keys the unique, non-null keys that should be used to load values\"\n    ]\n  },\n  {\n    'tag': '@return a map from each key in {@code keys} to the value associated with that key;\\n    <b>may not contain null values</b>',\n    'alternatives': [\n      '@return a mapping from each key in {@code keys} to the corresponding value;\\n    <b>should not contain null values</b>',\n      '@return a map that links each key in {@code keys} to its associated value;\\n    <b>must not contain null values</b>',\n      '@return a dictionary that relates each key in {@code keys} to its value;\\n    <b>cannot contain null values</b>'\n    ]\n  },\n  {\n    'tag': '@throws Exception if unable to load the result',\n    'alternatives': [\n      '@throws Exception if unable to load the outcome',\n      '@throws Exception if the result cannot be loaded',\n      '@throws Exception if loading the result fails'\n    ]\n  },\n  {\n    'tag': '@return a cache loader that loads values by passing each key to {@code function}',\n    'alternatives': [\n      '@return a cache loader that loads values by providing each key to {@code function}',\n      '@return a cache loader that loads values by passing each key to the {@code function}',\n      '@return a cache loader that loads values by submitting each key to {@code function}'\n    ]\n  },\n  {\n    'tag': '@return a cache loader that loads values by calling {@link Supplier#get}, irrespective of the\\n    key',\n    'alternatives': [\n      '@return a cache loader that loads values by invoking {@link Supplier#get}, regardless of the\\n    key',\n      '@return a cache loader that loads values by using {@link Supplier#get}, no matter the\\n    key',\n      '@return a cache loader that loads values by retrieving them through {@link Supplier#get}, regardless of the\\n    key'\n    ]\n  },\n  {\n    'tag': '@param spec a String in the format specified by {@link CacheBuilderSpec}',\n    'alternatives': [\n      '@param spec a String in the format defined by {@link CacheBuilderSpec}',\n      '@param spec a String in the format determined by {@link CacheBuilderSpec}',\n      '@param spec a String in the format guided by {@link CacheBuilderSpec}'\n    ]\n  },\n  {\n    'tag': '@throws IllegalStateException if an initial capacity was already set',\n    'alternatives': [\n      '@throws IllegalStateException if the initial capacity has already been set',\n      '@throws IllegalStateException if there is already an initial capacity set',\n      '@throws IllegalStateException if an initial capacity has been set before'\n    ]\n  },\n  {\n    'tag': '@throws IllegalStateException if a concurrency level was already set',\n    'alternatives': [\n      '@throws IllegalStateException if the concurrency level has already been set',\n      '@throws IllegalStateException if there is already a concurrency level set',\n      '@throws IllegalStateException if a concurrency level has been set before'\n    ]\n  },\n  {\n    'tag': '@param size the maximum size of the cache',\n    'alternatives': [\n      '@param size the maximum capacity of the cache',\n      '@param size the maximum limit of the cache',\n      '@param size the maximum volume of the cache'\n    ]\n  },\n  {\n    'tag': '@throws IllegalStateException if a maximum size or weight was already set',\n    'alternatives': [\n      '@throws IllegalStateException if a maximum capacity or weight has already been set',\n      '@throws IllegalStateException if there is already a maximum size or weight set',\n      '@throws IllegalStateException if a maximum size or weight has been set before'\n    ]\n  },\n  {\n    'tag': '@param weight the maximum total weight of entries the cache may contain',\n    'alternatives': [\n      '@param weight the maximum aggregated weight of entries the cache may contain',\n      '@param weight the maximum cumulative weight of entries the cache may contain',\n      '@param weight the maximum combined weight of entries the cache may contain'\n    ]\n  },\n  {\n    'tag': '@throws IllegalStateException if a maximum weight or size was already set',\n    'alternatives': [\n      '@throws IllegalStateException if a maximum weight or capacity has already been set',\n      '@throws IllegalStateException if there is already a maximum weight or size set',\n      '@throws IllegalStateException if a maximum weight or size has been set before'\n    ]\n  },\n  {\n    'tag': '@param weigher the weigher to use in calculating the weight of cache entries',\n    'alternatives': [\n      '@param weigher the evaluator to utilize in computing the weight of cache entries',\n      '@param weigher the calibrator to apply when determining the weight of cache entries',\n      '@param weigher the measurer to employ when calculating the weight of cache entries'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if {@code size} is negative',\n    'alternatives': [\n      '@throws IllegalArgumentException if {@code size} has a negative value',\n      '@throws IllegalArgumentException if {@code size} is less than zero',\n      '@throws IllegalArgumentException if {@code size} is a negative number'\n    ]\n  },\n  {\n    'tag': '@throws IllegalStateException if a maximum size was already set',\n    'alternatives': [\n      '@throws IllegalStateException if there is already a maximum size set',\n      '@throws IllegalStateException if a maximum size has been set before',\n      '@throws IllegalStateException if the maximum size has already been set'\n    ]\n  },\n  {\n    'tag': '@throws IllegalStateException if the key strength was already set',\n    'alternatives': [\n      '@throws IllegalStateException if there is already a key strength set',\n      '@throws IllegalStateException if the key strength has been set before',\n      '@throws IllegalStateException if a key strength has already been set'\n    ]\n  }\n]"