"[\n    {\n        'tag': '@param background Value returned when the {@code maxDarkFraction}\\nthreshold is exceeded.',\n        'alternatives': [\n            '@param background Value received when the {@code maxDarkFraction}\\nthreshold is surpassed.',\n            '@param background Value given when the {@code maxDarkFraction}\\nthreshold is exceeded.'\n        ]\n    },\n    {\n        'tag': '@param sharedSphere Whether the sphere can be shared among the\\ninterpolating function instances.  If {@code true}, the instances\\nwill share the same data, and thus will <em>not</em> be thread-safe.',\n        'alternatives': [\n            '@param sharedSphere Whether the sphere can be shared among the\\ninterpolating function instances.  If {@code true}, the instances\\nwill have the same data, and therefore will <em>not</em> be thread-safe.',\n            '@param sharedSphere Whether the sphere can be shared among the\\ninstances of the interpolating function.  If {@code true}, the\\ninstances will share the data, and thus will <em>not</em> be\\nthread-safe.'\n        ]\n    },\n    {\n        'tag': '@param noInterpolationTolerance When the distance between an\\ninterpolated point and one of the sample points is less than this\\nvalue, no interpolation will be performed (the value of the sample\\nwill be returned).',\n        'alternatives': [\n            '@param noInterpolationTolerance When the distance between an\\ninterpolated point and one of the sample points is below this\\nvalue, no interpolation will occur (the sample value will be\\nreturned).',\n            '@param noInterpolationTolerance If the distance between an\\ninterpolated point and one of the sample points is smaller than\\nthis value, no interpolation will be done (the sample value will\\nbe returned).'\n        ]\n    },\n    {\n        'tag': '@throws org.apache.commons.math3.exception.OutOfRangeException if\\n{@code maxDarkFraction} does not belong to the interval {@code [0, 1]}.',\n        'alternatives': [\n            '@throws org.apache.commons.math3.exception.OutOfRangeException if\\n{@code maxDarkFraction} is not in the range of {@code [0, 1]}.',\n            '@throws org.apache.commons.math3.exception.OutOfRangeException if\\n{@code maxDarkFraction} is outside the interval {@code [0, 1]}.'\n        ]\n    },\n    {\n        'tag': '@param microsphere Microsphere.',\n        'alternatives': [\n            '@param microsphere Spherical particle.',\n            '@param microsphere Tiny sphere.'\n        ]\n    },\n    {\n        'tag': '@param exponent Exponent used in the power law that computes the\\nweights (distance dimming factor) of the sample data.',\n        'alternatives': [\n            '@param exponent Power used in the mathematical formula that\\ncomputes the weights (distance attenuation factor) of the sample\\ndata.',\n            '@param exponent Exponent employed in the power equation that\\ncomputes the weights (distance damping factor) of the sample data.'\n        ]\n    },\n    {\n        'tag': '@param xvals the arguments for the interpolation points',\n        'alternatives': [\n            '@param xvals the inputs for the interpolation points',\n            '@param xvals the parameters for the interpolation nodes'\n        ]\n    },\n    {\n        'tag': '@param yvals the values for the interpolation points',\n        'alternatives': [\n            '@param yvals the outputs for the interpolation points',\n            '@param yvals the results for the interpolation nodes'\n        ]\n    },\n    {\n        'tag': '@return a function which interpolates the data set',\n        'alternatives': [\n            '@return a function that performs interpolation on the data set',\n            '@return a function that calculates interpolation for the dataset'\n        ]\n    },\n    {\n        'tag': '@throws DimensionMismatchException if {@code xvals} and {@code yvals} have\\n        different sizes.',\n        'alternatives': [\n            '@throws DimensionMismatchException if {@code xvals} and {@code yvals} do not\\n        have the same sizes.',\n            '@throws DimensionMismatchException if the sizes of {@code xvals} and {@code yvals}\\n        are not equal.'\n        ]\n    },\n    {\n        'tag': '@throws NonMonotonicSequenceException if {@code xvals} is not sorted in\\n        strict increasing order.',\n        'alternatives': [\n            '@throws NonMonotonicSequenceException if {@code xvals} is not arranged in\\n        strictly ascending order.',\n            '@throws NonMonotonicSequenceException if {@code xvals} is not in sorted\\n        increasing order.'\n        ]\n    },\n    {\n        'tag': '@param xvals x values to calculate the numerical derivative with',\n        'alternatives': [\n            '@param xvals x values to compute the numerical derivative using',\n            '@param xvals x values for computing the numerical derivative'\n        ]\n    },\n    {\n        'tag': '@param yvals y values to calculate the numerical derivative with',\n        'alternatives': [\n            '@param yvals y values to compute the numerical derivative using',\n            '@param yvals y values for computing the numerical derivative'\n        ]\n    },\n    {\n        'tag': '@param indexOfDifferentiation index of the elemnt we are calculating the derivative around',\n        'alternatives': [\n            '@param indexOfDifferentiation index of the element around which\\n        the derivative is being calculated',\n            '@param indexOfDifferentiation index of the element for which\\n        the derivative is being computed'\n        ]\n    },\n    {\n        'tag': '@param indexOfFirstSample index of the first element to sample for the three point method',\n        'alternatives': [\n            '@param indexOfFirstSample index of the initial element to use in\\n        the three-point method sampling',\n            '@param indexOfFirstSample index of the first element to include\\n        in the three-point method sampling'\n        ]\n    },\n    {\n        'tag': '@param indexOfSecondsample index of the second element to sample for the three point method',\n        'alternatives': [\n            '@param indexOfSecondsample index of the second element to utilize\\n        in the three-point method sampling',\n            '@param indexOfSecondsample index of the element to sample as the\\n        second point in the three point method'\n        ]\n    },\n    {\n        'tag': '@param indexOfThirdSample index of the third element to sample for the three point method',\n        'alternatives': [\n            '@param indexOfThirdSample index of the third element to utilize\\n        in the three-point method sampling',\n            '@param indexOfThirdSample index of the element to sample as the\\n        third point in the three point method'\n        ]\n    },\n    {\n        'tag': '@return the derivative',\n        'alternatives': [\n            '@return the rate of change',\n            '@return the result of the differentiation'\n        ]\n    },\n    {\n        'tag': '@param xvals x values for interpolation',\n        'alternatives': [\n            '@param xvals inputs for interpolation',\n            '@param xvals interpolation parameters'\n        ]\n    },\n    {\n        'tag': '@param yvals y values for interpolation',\n        'alternatives': [\n            '@param yvals outputs for interpolation',\n            '@param yvals interpolation results'\n        ]\n    },\n    {\n        'tag': '@param firstDerivatives first derivative values of the function',\n        'alternatives': [\n            '@param firstDerivatives values of the first derivative of the\\n        function',\n            '@param firstDerivatives function\\'s first derivatives'\n        ]\n    },\n    {\n        'tag': '@return polynomial that fits the function',\n        'alternatives': [\n            '@return polynomial that corresponds to the function',\n            '@return polynomial that represents the function'\n        ]\n    },\n    {\n        'tag': '@param xval the arguments for the interpolation points.\\n{@code xval[i][0]} is the first component of interpolation point\\n{@code i}, {@code xval[i][1]} is the second component, and so on\\nuntil {@code xval[i][d-1]}, the last component of that interpolation\\npoint (where {@code d} is thus the dimension of the space).',\n        'alternatives': [\n            '@param xval the inputs for the interpolation points.\\n{@code xval[i][0]} represents the first coordinate of interpolation\\npoint {@code i}, {@code xval[i][1]} represents the second coordinate,\\nand so on until {@code xval[i][d-1]}, which is the last coordinate of\\nthat interpolation point (where {@code d} is the dimension of the\\nspace).',\n            '@param xval the parameters for the interpolation points.\\n{@code xval[i][0]} corresponds to the initial component of\\ninterpolation point {@code i}, {@code xval[i][1]} corresponds to the\\nsecond component, and so on until {@code xval[i][d-1]}, which is\\nthe final component of that interpolation point (where {@code d}\\nis the dimension of the space).'\n        ]\n    }\n]"