"output = [\n  {\n    'tag': '@param map the map to decorate, must not be null',\n    'alternatives': [\n      '@param map the map to embellish, must not be null',\n      '@param map the map to enhance, must not be null',\n      '@param map the map to modify, must not be null',\n      '@param decoratedMap the map to decorate, must not be null',\n      '@param modifiedMap the map to decorate, must not be null'\n    ]\n  },\n  {\n    'tag': '@param keyTransformer the transformer to use for key conversion, null means no transformation',\n    'alternatives': [\n      '@param keyTransformer the converter to be used for key conversion, null implies no transformation',\n      '@param transformerForKeys the transformer to be used for key conversion, null indicates no transformation',\n      '@param keyTransformer the converter to apply for key conversion, null indicating no conversion',\n      '@param converterForKeyTransformation the transformer for key conversion, null implying no transformation',\n      '@param keyTransformer the transformer to perform key conversion, null indicating no transformation'\n    ]\n  },\n  {\n    'tag': '@param valueTransformer the transformer to use for value conversion, null means no transformation',\n    'alternatives': [\n      '@param valueTransformer the converter to be used for value conversion, null implies no transformation',\n      '@param transformerForValues the transformer to be used for value conversion, null indicates no transformation',\n      '@param valueTransformer the converter to apply for value conversion, null indicating no conversion',\n      '@param converterForValueTransformation the transformer for value conversion, null implying no transformation',\n      '@param valueTransformer the transformer to perform value conversion, null indicating no transformation'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if map is null',\n    'alternatives': [\n      '@throws NullPointerException in case of null map',\n      '@throws NullPointerException if the map parameter is null',\n      '@throws NullPointerException if the map is null',\n      '@throws NullPointerException if the argument \"map\" is null',\n      '@throws NullPointerException if the provided map is null'\n    ]\n  },\n  {\n    'tag': '@param map the map to decorate, must not be null',\n    'alternatives': [\n      '@param map the map to embellish, must not be null',\n      '@param map the map to enhance, must not be null',\n      '@param map the map to modify, must not be null',\n      '@param decoratedMap the map to decorate, must not be null',\n      '@param modifiedMap the map to decorate, must not be null'\n    ]\n  },\n  {\n    'tag': '@param keyTransformer the transformer to use for key conversion, null means no transformation',\n    'alternatives': [\n      '@param keyTransformer the converter to be used for key conversion, null implies no transformation',\n      '@param transformerForKeys the transformer to be used for key conversion, null indicates no transformation',\n      '@param keyTransformer the converter to apply for key conversion, null indicating no conversion',\n      '@param converterForKeyTransformation the transformer for key conversion, null implying no transformation',\n      '@param keyTransformer the transformer to perform key conversion, null indicating no transformation'\n    ]\n  },\n  {\n    'tag': '@param valueTransformer the transformer to use for value conversion, null means no transformation',\n    'alternatives': [\n      '@param valueTransformer the converter to be used for value conversion, null implies no transformation',\n      '@param transformerForValues the transformer to be used for value conversion, null indicates no transformation',\n      '@param valueTransformer the converter to apply for value conversion, null indicating no conversion',\n      '@param converterForValueTransformation the transformer for value conversion, null implying no transformation',\n      '@param valueTransformer the transformer to perform value conversion, null indicating no transformation'\n    ]\n  },\n  {\n    'tag': '@return the transformed object',\n    'alternatives': [\n      '@return the converted object',\n      '@return the resultant object',\n      '@return the object after transformation',\n      '@return the object that has been transformed',\n      '@return the resulting object'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if the iterator is null',\n    'alternatives': [\n      '@throws NullPointerException in case of null iterator',\n      '@throws NullPointerException if the iterator parameter is null',\n      '@throws NullPointerException if the iterator is null',\n      '@throws NullPointerException if the argument \"iterator\" is null',\n      '@throws NullPointerException if the provided iterator is null'\n    ]\n  },\n  {\n    'tag': '@param predicates the predicates to check, not cloned, not null',\n    'alternatives': [\n      '@param predicates the predicates to validate, not cloned, not null',\n      '@param predicates the predicates to verify, not cloned, not null',\n      '@param predicates the predicates to examine, not cloned, not null',\n      '@param predicates the predicates to assess, not cloned, not null',\n      '@param predicates the predicates to test, not cloned, not null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if the predicates array is null',\n    'alternatives': [\n      '@throws NullPointerException in case of null predicates array',\n      '@throws NullPointerException if the predicates array parameter is null',\n      '@throws NullPointerException if the predicates array is null',\n      '@throws NullPointerException if the argument \"predicates\" is null',\n      '@throws NullPointerException if the provided predicates array is null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if any predicate in the array is null',\n    'alternatives': [\n      '@throws NullPointerException if there is any null predicate in the array',\n      '@throws NullPointerException if any predicate in the array parameter is null',\n      '@throws NullPointerException if any predicate in the array is null',\n      '@throws NullPointerException if any predicate in the array is set to null',\n      '@throws NullPointerException if any predicate in the provided array is null'\n    ]\n  },\n  {\n    'tag': '@param predicates the predicates to check, cloned, not null',\n    'alternatives': [\n      '@param predicates the predicates to validate, cloned, not null',\n      '@param predicates the predicates to verify, cloned, not null',\n      '@param predicates the predicates to examine, cloned, not null',\n      '@param predicates the predicates to assess, cloned, not null',\n      '@param predicates the predicates to test, cloned, not null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if the predicates array is null',\n    'alternatives': [\n      '@throws NullPointerException in case of null predicates array',\n      '@throws NullPointerException if the predicates array parameter is null',\n      '@throws NullPointerException if the predicates array is null',\n      '@throws NullPointerException if the argument \"predicates\" is null',\n      '@throws NullPointerException if the provided predicates array is null'\n    ]\n  },\n  {\n    'tag': '@param predicates the predicates to check, cloned, not null',\n    'alternatives': [\n      '@param predicates the predicates to validate, cloned, not null',\n      '@param predicates the predicates to verify, cloned, not null',\n      '@param predicates the predicates to examine, cloned, not null',\n      '@param predicates the predicates to assess, cloned, not null',\n      '@param predicates the predicates to test, cloned, not null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if the collection is null',\n    'alternatives': [\n      '@throws NullPointerException in case of null collection',\n      '@throws NullPointerException if the collection parameter is null',\n      '@throws NullPointerException if the collection is null',\n      '@throws NullPointerException if the argument \"collection\" is null',\n      '@throws NullPointerException if the provided collection is null'\n    ]\n  },\n  {\n    'tag': '@return the transformed object',\n    'alternatives': [\n      '@return the converted object',\n      '@return the resultant object',\n      '@return the object after transformation',\n      '@return the object that has been transformed',\n      '@return the resulting object'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if list is null',\n    'alternatives': [\n      '@throws NullPointerException in case of null list',\n      '@throws NullPointerException if the list parameter is null',\n      '@throws NullPointerException if list is null',\n      '@throws NullPointerException if the argument \"list\" is null',\n      '@throws NullPointerException if the provided list is null'\n    ]\n  },\n  {\n    'tag': '@param list the list to decorate, must not be null',\n    'alternatives': [\n      '@param list the list to embellish, must not be null',\n      '@param list the list to enhance, must not be null',\n      '@param list the list to modify, must not be null',\n      '@param decoratedList the list to decorate, must not be null',\n      '@param modifiedList the list to decorate, must not be null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if list is null',\n    'alternatives': [\n      '@throws NullPointerException in case of null list',\n      '@throws NullPointerException if the list parameter is null',\n      '@throws NullPointerException if list is null',\n      '@throws NullPointerException if the argument \"list\" is null',\n      '@throws NullPointerException if the provided list is null'\n    ]\n  },\n  {\n    'tag': '@param list the list to decorate, must not be null',\n    'alternatives': [\n      '@param list the list to embellish, must not be null',\n      '@param list the list to enhance, must not be null',\n      '@param list the list to modify, must not be null',\n      '@param decoratedList the list to decorate, must not be null',\n      '@param modifiedList the list to decorate, must not be null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if the map is null',\n    'alternatives': [\n      '@throws NullPointerException in case of null map',\n      '@throws NullPointerException if the map parameter is null',\n      '@throws NullPointerException if the map is null',\n      '@throws NullPointerException if the argument \"map\" is null',\n      '@throws NullPointerException if the provided map is null'\n    ]\n  },\n  {\n    'tag': '@param map the map to decorate, must not be null',\n    'alternatives': [\n      '@param map the map to embellish, must not be null',\n      '@param map the map to enhance, must not be null',\n      '@param map the map to modify, must not be null',\n      '@param decoratedMap the map to decorate, must not be null',\n      '@param modifiedMap the map to decorate, must not be null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if set is null',\n    'alternatives': [\n      '@throws NullPointerException in case of null set',\n      '@throws NullPointerException if the set parameter is null',\n      '@throws NullPointerException if set is null',\n      '@throws NullPointerException if the argument \"set\" is null',\n      '@throws NullPointerException if the provided set is null'\n    ]\n  },\n  {\n    'tag': '@param set the set to decorate, must not be null',\n    'alternatives': [\n      '@param set the set to embellish, must not be null',\n      '@param set the set to enhance, must not be null',\n      '@param set the set to modify, must not be null',\n      '@param decoratedSet the set to decorate, must not be null',\n      '@param modifiedSet the set to decorate, must not be null'\n    ]\n  }\n]"