"output = [\n  {\n    'tag': '@param length the number of elements to include',\n    'alternatives': [\n      '@param length the count of elements to include',\n      '@param length the quantity of elements to include',\n      '@param length the size of elements to include',\n      '@param length the total of elements to include',\n      '@param length the amount of elements to include'\n    ]\n  },\n  {\n    'tag': '@param values the input array',\n    'alternatives': [\n      '@param values the array of input',\n      '@param values the array containing the input',\n      '@param values the array that holds the input',\n      '@param values the array with the input',\n      '@param values the array storing the input'\n    ]\n  },\n  {\n    'tag': '@param weights the weights array',\n    'alternatives': [\n      '@param weights the array of weights',\n      '@param weights the array containing the weights',\n      '@param weights the array that holds the weights',\n      '@param weights the array with the weights',\n      '@param weights the array storing the weights'\n    ]\n  },\n  {\n    'tag': '@param begin index of the first array element to include',\n    'alternatives': [\n      '@param begin the index of the first array element to include',\n      '@param begin the starting index of the first array element to include',\n      '@param begin the initial index of the first array element to include',\n      '@param begin the position of the first array element to include',\n      '@param begin the location of the first array element to include'\n    ]\n  },\n  {\n    'tag': '@param length the number of elements to include',\n    'alternatives': [\n      '@param length the count of elements to include',\n      '@param length the quantity of elements to include',\n      '@param length the size of elements to include',\n      '@param length the total of elements to include',\n      '@param length the amount of elements to include'\n    ]\n  },\n  {\n    'tag': '@throws MathIllegalArgumentException if the parameters are not valid',\n    'alternatives': [\n      '@throws MathIllegalArgumentException when the parameters are invalid',\n      '@throws MathIllegalArgumentException in case of invalid parameters',\n      '@throws MathIllegalArgumentException if the input parameters are not valid',\n      '@throws MathIllegalArgumentException if the provided parameters are invalid',\n      '@throws MathIllegalArgumentException if the arguments are not valid'\n    ]\n  },\n  {\n    'tag': '@param values the input array',\n    'alternatives': [\n      '@param values the array of input',\n      '@param values the array containing the input',\n      '@param values the array that holds the input',\n      '@param values the array with the input',\n      '@param values the array storing the input'\n    ]\n  },\n  {\n    'tag': '@param weights the weights array',\n    'alternatives': [\n      '@param weights the array of weights',\n      '@param weights the array containing the weights',\n      '@param weights the array that holds the weights',\n      '@param weights the array with the weights',\n      '@param weights the array storing the weights'\n    ]\n  },\n  {\n    'tag': '@return the product of the values or Double.NaN if length = 0',\n    'alternatives': [\n      '@return the result of multiplying the values or Double.NaN if length equals zero',\n      '@return the outcome of multiplying the values or Double.NaN if length is zero',\n      '@return the answer obtained by multiplying the values or Double.NaN if length is equal to zero',\n      '@return the product calculated from the values or Double.NaN if length is zero',\n      '@return the product derived from the values or Double.NaN if length equals zero'\n    ]\n  },\n  {\n    'tag': '@throws MathIllegalArgumentException if the parameters are not valid',\n    'alternatives': [\n      '@throws MathIllegalArgumentException when the parameters are invalid',\n      '@throws MathIllegalArgumentException in case of invalid parameters',\n      '@throws MathIllegalArgumentException if the input parameters are not valid',\n      '@throws MathIllegalArgumentException if the provided parameters are invalid',\n      '@throws MathIllegalArgumentException if the arguments are not valid'\n    ]\n  },\n  {\n    'tag': '@param source Product to copy',\n    'alternatives': [\n      '@param source the Product to duplicate',\n      '@param source the Product for replication',\n      '@param source the Product to clone',\n      '@param source the Product to make a copy of',\n      '@param source the Product to replicate'\n    ]\n  },\n  {\n    'tag': '@param dest Product to copy to',\n    'alternatives': [\n      '@param dest the destination Product to copy to',\n      '@param dest the target Product for copying',\n      '@param dest the Product to duplicate to',\n      '@param dest the Product to replicate to',\n      '@param dest the Product to make a copy to'\n    ]\n  },\n  {\n    'tag': '@param original the {@code Product} instance to copy',\n    'alternatives': [\n      '@param original the instance of {@code Product} to duplicate',\n      '@param original the {@code Product} object for copying',\n      '@param original the original instance of {@code Product} to be copied',\n      '@param original the {@code Product} instance to replicate',\n      '@param original the instance of {@code Product} to make a copy of'\n    ]\n  },\n  {\n    'tag': '@param values the input array',\n    'alternatives': [\n      '@param values the array of input',\n      '@param values the array containing the input',\n      '@param values the array that holds the input',\n      '@param values the array with the input',\n      '@param values the array storing the input'\n    ]\n  },\n  {\n    'tag': '@param begin index of the first array element to include',\n    'alternatives': [\n      '@param begin the index of the first array element to include',\n      '@param begin the starting index of the first array element to include',\n      '@param begin the initial index of the first array element to include',\n      '@param begin the position of the first array element to include',\n      '@param begin the location of the first array element to include'\n    ]\n  },\n  {\n    'tag': '@param length the number of elements to include',\n    'alternatives': [\n      '@param length the count of elements to include',\n      '@param length the quantity of elements to include',\n      '@param length the size of elements to include',\n      '@param length the total of elements to include',\n      '@param length the amount of elements to include'\n    ]\n  },\n  {\n    'tag': '@param values the input array',\n    'alternatives': [\n      '@param values the array of input',\n      '@param values the array containing the input',\n      '@param values the array that holds the input',\n      '@param values the array with the input',\n      '@param values the array storing the input'\n    ]\n  },\n  {\n    'tag': '@param weights the weights array',\n    'alternatives': [\n      '@param weights the array of weights',\n      '@param weights the array containing the weights',\n      '@param weights the array that holds the weights',\n      '@param weights the array with the weights',\n      '@param weights the array storing the weights'\n    ]\n  },\n  {\n    'tag': '@param begin index of the first array element to include',\n    'alternatives': [\n      '@param begin the index of the first array element to include',\n      '@param begin the starting index of the first array element to include',\n      '@param begin the initial index of the first array element to include',\n      '@param begin the position of the first array element to include',\n      '@param begin the location of the first array element to include'\n    ]\n  },\n  {\n    'tag': '@param length the number of elements to include',\n    'alternatives': [\n      '@param length the count of elements to include',\n      '@param length the quantity of elements to include',\n      '@param length the size of elements to include',\n      '@param length the total of elements to include',\n      '@param length the amount of elements to include'\n    ]\n  },\n  {\n    'tag': '@throws MathIllegalArgumentException if the parameters are not valid',\n    'alternatives': [\n      '@throws MathIllegalArgumentException when the parameters are invalid',\n      '@throws MathIllegalArgumentException in case of invalid parameters',\n      '@throws MathIllegalArgumentException if the input parameters are not valid',\n      '@throws MathIllegalArgumentException if the provided parameters are invalid',\n      '@throws MathIllegalArgumentException if the arguments are not valid'\n    ]\n  },\n  {\n    'tag': '@param values the input array',\n    'alternatives': [\n      '@param values the array of input',\n      '@param values the array containing the input',\n      '@param values the array that holds the input',\n      '@param values the array with the input',\n      '@param values the array storing the input'\n    ]\n  },\n  {\n    'tag': '@param weights the weights array',\n    'alternatives': [\n      '@param weights the array of weights',\n      '@param weights the array containing the weights',\n      '@param weights the array that holds the weights',\n      '@param weights the array with the weights',\n      '@param weights the array storing the weights'\n    ]\n  },\n  {\n    'tag': '@return the sum of the values or Double.NaN if length = 0',\n    'alternatives': [\n      '@return the result of adding the values or Double.NaN if length equals zero',\n      '@return the outcome of adding the values or Double.NaN if length is zero',\n      '@return the answer obtained by adding the values or Double.NaN if length is equal to zero',\n      '@return the sum calculated from the values or Double.NaN if length is zero',\n      '@return the sum derived from the values or Double.NaN if length equals zero'\n    ]\n  },\n  {\n    'tag': '@throws MathIllegalArgumentException if the parameters are not valid',\n    'alternatives': [\n      '@throws MathIllegalArgumentException when the parameters are invalid',\n      '@throws MathIllegalArgumentException in case of invalid parameters',\n      '@throws MathIllegalArgumentException if the input parameters are not valid',\n      '@throws MathIllegalArgumentException if the provided parameters are invalid',\n      '@throws MathIllegalArgumentException if the arguments are not valid'\n    ]\n  }\n]"