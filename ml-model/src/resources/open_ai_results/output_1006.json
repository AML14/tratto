"output=[\n  {\n    'tag': '@param n expected insertions (must be positive)',\n    'alternatives': [\n      '@param n anticipated additions (must be positive)',\n      '@param n predicted insertions (must be positive)',\n      '@param n desired insertions (must be positive)'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if {@code interfaceType} is a regular\\n    class, enum, or annotation type, rather than an interface',\n    'alternatives': [\n      '@throws IllegalArgumentException if {@code interfaceType} is not an interface but a class, enum, or annotation type',\n      '@throws IllegalArgumentException if {@code interfaceType} is a class, enum, or annotation type instead of an interface',\n      '@throws IllegalArgumentException if {@code interfaceType} is something other than an interface, such as a class, enum, or annotation type'\n    ]\n  },\n  {\n    'tag': '@throws InterruptedException if {@code interruptible} is true and our\\n    thread is interrupted during execution',\n    'alternatives': [\n      '@throws InterruptedException if the thread is interrupted during execution and {@code interruptible} is set to true',\n      '@throws InterruptedException if the execution is interrupted and {@code interruptible} is set to true',\n      '@throws InterruptedException if {@code interruptible} is true and our thread gets interrupted during execution'\n    ]\n  },\n  {\n    'tag': '@param throwable the non-null {@code Throwable} to extract causes from',\n    'alternatives': [\n      '@param throwable the not-null {@code Throwable} from which to extract causes',\n      '@param throwable the {@code Throwable} that is not null and will be used to extract causes',\n      '@param throwable the non-null {@code Throwable} from which causes will be extracted'\n    ]\n  },\n  {\n    'tag': '@param key the non-null key whose value should be loaded',\n    'alternatives': [\n      '@param key the key, which is not null, that should have its value loaded',\n      '@param key the key, which must not be null, for which the value should be loaded',\n      '@param key the key (not null) for which the value should be loaded'\n    ]\n  },\n  {\n    'tag': '@return the value associated with {@code key}; <b>must not be null</b>',\n    'alternatives': [\n      '@return the value linked to {@code key}; <b>should never be null</b>',\n      '@return the value that is associated with {@code key}; <b>cannot be null</b>',\n      '@return the value that corresponds to {@code key}; <b>must not be null</b>'\n    ]\n  },\n  {\n    'tag': '@param oldValue the non-null old value corresponding to {@code key}',\n    'alternatives': [\n      '@param oldValue the old (non-null) value that corresponds to {@code key}',\n      '@param oldValue the old value (not null) that is associated with {@code key}',\n      '@param oldValue the previous value (non-null) that corresponds to {@code key}'\n    ]\n  },\n  {\n    'tag': '@return the future new value associated with {@code key};\\n    <b>must not be null, must not return null</b>',\n    'alternatives': [\n      '@return the future value that will be associated with {@code key};\\n    <b>must not be null, must not return null</b>',\n      '@return the future value that will be linked to {@code key};\\n    <b>cannot be null, cannot return null</b>',\n      '@return the future new value that corresponds to {@code key};\\n    <b>should never be null, should never return null</b>'\n    ]\n  },\n  {\n    'tag': '@param function the function to be used for loading values; must never return {@code null}',\n    'alternatives': [\n      '@param function the function that will be employed for loading values; must not return {@code null}',\n      '@param function the function that will be used to load values; should never return {@code null}',\n      '@param function the function to be used for loading values; should not return {@code null}'\n    ]\n  },\n  {\n    'tag': '@param supplier the supplier to be used for loading values; must never return {@code null}',\n    'alternatives': [\n      '@param supplier the supplier that will be employed for loading values; must not return {@code null}',\n      '@param supplier the supplier that will be used to load values; should never return {@code null}',\n      '@param supplier the supplier to be used for loading values; should not return {@code null}'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if {@code array} is empty',\n    'alternatives': [\n      '@throws IllegalArgumentException if the {@code array} is devoid of elements',\n      '@throws IllegalArgumentException if the {@code array} does not contain any elements',\n      '@throws IllegalArgumentException if the {@code array} has no elements'\n    ]\n  },\n  {\n    'tag': '@param array a <i>nonempty</i> array of {@code double} values',\n    'alternatives': [\n      '@param array an array of nonempty {@code double} values',\n      '@param array a <i>nonempty</i> collection of {@code double} values',\n      '@param array a collection of <i>nonempty</i> {@code double} values'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if {@code array} is empty',\n    'alternatives': [\n      '@throws IllegalArgumentException if the {@code array} is devoid of elements',\n      '@throws IllegalArgumentException if the {@code array} does not contain any elements',\n      '@throws IllegalArgumentException if the {@code array} has no elements'\n    ]\n  },\n  {\n    'tag': '@param array a <i>nonempty</i> array of {@code double} values',\n    'alternatives': [\n      '@param array an array of nonempty {@code double} values',\n      '@param array a <i>nonempty</i> collection of {@code double} values',\n      '@param array a collection of <i>nonempty</i> {@code double} values'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if {@code minLength} or {@code padding} is\\n    negative',\n    'alternatives': [\n      '@throws IllegalArgumentException if {@code minLength} or {@code padding} is\\n    less than zero',\n      '@throws IllegalArgumentException if {@code minLength} or {@code padding} is\\n    negative in value',\n      '@throws IllegalArgumentException if {@code minLength} or {@code padding} is\\n    a negative number'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if {@code collection} or any of its elements\\n    is null',\n    'alternatives': [\n      '@throws NullPointerException if {@code collection} or any of the elements contained within it is null',\n      '@throws NullPointerException if {@code collection} or any of its elements is null',\n      '@throws NullPointerException if {@code collection} or any element it holds is null'\n    ]\n  },\n  {\n    'tag': \"@param result the result to return on successful completion. If you don't\\n    need a particular result, consider using constructions of the form:\\n    {@code ListenableFuture<?> f = ListenableFutureTask.create(runnable,\\n    null)}\",\n    'alternatives': [\n      \"@param result the outcome to be returned upon successful completion. If you don't\\n    need any specific outcome, consider using constructs like:\\n    {@code ListenableFuture<?> f = ListenableFutureTask.create(runnable,\\n    null)}\",\n      \"@param result the result to be returned if the execution is successful. If you don't\\n    require a specific result, consider using constructions like:\\n    {@code ListenableFuture<?> f = ListenableFutureTask.create(runnable,\\n    null)}\",\n      \"@param result the return value to be provided on successful completion. If you don't\\n    require any particular return value, consider using constructs such as:\\n    {@code ListenableFuture<?> f = ListenableFutureTask.create(runnable,\\n    null)}\"\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if {@code array} is empty',\n    'alternatives': [\n      '@throws IllegalArgumentException if the {@code array} is devoid of elements',\n      '@throws IllegalArgumentException if the {@code array} does not contain any elements',\n      '@throws IllegalArgumentException if the {@code array} has no elements'\n    ]\n  },\n  {\n    'tag': '@param array a <i>nonempty</i> array of {@code float} values',\n    'alternatives': [\n      '@param array an array of nonempty {@code float} values',\n      '@param array a <i>nonempty</i> collection of {@code float} values',\n      '@param array a collection of <i>nonempty</i> {@code float} values'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if {@code array} is empty',\n    'alternatives': [\n      '@throws IllegalArgumentException if the {@code array} is devoid of elements',\n      '@throws IllegalArgumentException if the {@code array} does not contain any elements',\n      '@throws IllegalArgumentException if the {@code array} has no elements'\n    ]\n  },\n  {\n    'tag': '@param array a <i>nonempty</i> array of {@code float} values',\n    'alternatives': [\n      '@param array an array of nonempty {@code float} values',\n      '@param array a <i>nonempty</i> collection of {@code float} values',\n      '@param array a collection of <i>nonempty</i> {@code float} values'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if {@code minLength} or {@code padding} is\\n    negative',\n    'alternatives': [\n      '@throws IllegalArgumentException if {@code minLength} or {@code padding} is\\n    less than zero',\n      '@throws IllegalArgumentException if {@code minLength} or {@code padding} is\\n    negative in value',\n      '@throws IllegalArgumentException if {@code minLength} or {@code padding} is\\n    a negative number'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if {@code collection} or any of its elements\\n    is null',\n    'alternatives': [\n      '@throws NullPointerException if {@code collection} or any of the elements contained within it is null',\n      '@throws NullPointerException if {@code collection} or any of its elements is null',\n      '@throws NullPointerException if {@code collection} or any element it holds is null'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if the specified expected size is negative',\n    'alternatives': [\n      '@throws IllegalArgumentException if the expected size specified is negative',\n      '@throws IllegalArgumentException if the size expected is negative',\n      '@throws IllegalArgumentException if the expected size is less than zero'\n    ]\n  }\n]"