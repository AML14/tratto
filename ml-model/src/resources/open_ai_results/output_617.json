"output = [\n  {\n    'tag': '@param forward forward integration indicator',\n    'alternatives': [\n      '@param forward forward flag to indicate integration direction',\n      '@param forward indicator for forward integration',\n      '@param forward indicator for integration in the forward direction',\n      '@param forward boolean flag indicating forward integration',\n      '@param forward flag for indicating the integration direction as forward'\n    ]\n  },\n  {\n    'tag': '@param acceptSmall if true, steps smaller than the minimal value\\nare silently increased up to this value, if false such small\\nsteps generate an exception',\n    'alternatives': [\n      '@param acceptSmall if true, steps smaller than the minimum value\\nare increased silently up to this value, if false such small\\nsteps throw an exception',\n      '@param acceptSmall if true, smaller steps than the minimum value\\nare silently adjusted to equal this value; if false, such small\\nsteps will cause an exception',\n      '@param acceptSmall if set to true, steps smaller than the minimum value\\nwill be silently incremented up to this value; if set to false,\\nthese small steps will result in an exception',\n      '@param acceptSmall if true, steps smaller than the minimum value\\nare silently increased until they reach this value; if false, such\\nsmall steps will result in an exception',\n      '@param acceptSmall if true, steps smaller than the minimum value\\nare silently adjusted to reach this value, if set to false such\\nsmall steps generate an exception'\n    ]\n  },\n  {\n    'tag': '@return a bounded integration step (h if no bound is reach, or a bounded value)',\n    'alternatives': [\n      '@return a bounded step for integration (h if no bound is reached,\\nor a bounded value)',\n      '@return a step for integration that is bounded (h if no bound is\\nreached, or a bounded value)',\n      '@return a bounded integration step (h if no bound is reached,\\nor a value bounded)',\n      '@return a bounded step for integration (h if no bound is reached,\\nor a value that is bounded)',\n      '@return a step for integration that is bounded (h if no bound is\\nreached, or a value that is bounded)'\n    ]\n  },\n  {\n    'tag': '@throws NumberIsTooSmallException if the step is too small and acceptSmall is false',\n    'alternatives': [\n      '@throws NumberIsTooSmallException if the step is deemed to be too\\nsmall and acceptSmall is set to false',\n      '@throws NumberIsTooSmallException if the step is considered too\\nsmall and acceptSmall is not true',\n      '@throws NumberIsTooSmallException if the step is too small and\\nthe acceptSmall parameter is false',\n      '@throws NumberIsTooSmallException if the step is too small and\\nacceptSmall is not set to true',\n      '@throws NumberIsTooSmallException if the step is too small and the\\nacceptSmall flag is false'\n    ]\n  },\n  {\n    'tag': '@return minimal step',\n    'alternatives': [\n      '@return smallest step',\n      '@return minimum step',\n      '@return step with minimum value',\n      '@return step that is minimal',\n      '@return step that has the least value'\n    ]\n  },\n  {\n    'tag': '@return maximal step',\n    'alternatives': [\n      '@return largest step',\n      '@return maximum step',\n      '@return step with maximum value',\n      '@return step that is maximal',\n      '@return step that has the highest value'\n    ]\n  },\n  {\n    'tag': '@param name name of the method',\n    'alternatives': [\n      '@param name the name of the method',\n      '@param name the method name',\n      '@param name of the method being referred to',\n      '@param name denotes the name of the method',\n      '@param name, which refers to the method name'\n    ]\n  },\n  {\n    'tag': '@param minStep minimal step (sign is irrelevant, regardless of\\nintegration direction, forward or backward), the last step can\\nbe smaller than this',\n    'alternatives': [\n      '@param minStep minimum step (sign is irrelevant, irrespective of the\\nintegration direction, forward or backward), the last step\\ncan be smaller than this',\n      '@param minStep smallest step (sign is disregarded, regardless of\\nintegration direction being forward or backward), the\\nlast step can be smaller than this',\n      '@param minStep smallest step (sign doesn\\'t matter, regardless of the\\nintegration direction, forward or backward), the last\\nstep can be smaller than this',\n      '@param minStep minimum step (sign is not important, regardless of the\\nintegration direction being forward or backward), the\\nlast step can be smaller than this',\n      '@param minStep minimum step (sign is unimportant, irrespective of the\\nintegration direction, forward or backward), the\\nlast step can be smaller than this'\n    ]\n  },\n  {\n    'tag': '@param maxStep maximal step (sign is irrelevant, regardless of\\nintegration direction, forward or backward), the last step can\\nbe smaller than this',\n    'alternatives': [\n      '@param maxStep maximum step (sign is irrelevant, irrespective of the\\nintegration direction, forward or backward), the last step\\ncan be smaller than this',\n      '@param maxStep largest step (sign is disregarded, regardless of the\\nintegration direction being forward or backward), the\\nlast step can be smaller than this',\n      '@param maxStep largest step (sign doesn\\'t matter, regardless of the\\nintegration direction, forward or backward), the last\\nstep can be smaller than this',\n      '@param maxStep maximum step (sign is not important, regardless of the\\nintegration direction being forward or backward), the\\nlast step can be smaller than this',\n      '@param maxStep maximum step (sign is unimportant, irrespective of the\\nintegration direction, forward or backward), the last step\\ncan be smaller than this'\n    ]\n  },\n  {\n    'tag': '@param scalAbsoluteTolerance allowed absolute error',\n    'alternatives': [\n      '@param scalAbsoluteTolerance absolute error limit allowed',\n      '@param scalAbsoluteTolerance permissible absolute error',\n      '@param scalAbsoluteTolerance acceptable absolute error',\n      '@param scalAbsoluteTolerance limit of allowed absolute error',\n      '@param scalAbsoluteTolerance absolute error threshold allowed'\n    ]\n  },\n  {\n    'tag': '@param plane3 third plane2',\n    'alternatives': [\n      '@param plane3 third plane',\n      '@param plane3 the third plane',\n      '@param plane3 plane number three',\n      '@param plane3 plane indexed as three',\n      '@param plane3 the third of the planes'\n    ]\n  },\n  {\n    'tag': '@return intersection point of three planes, null if some planes are parallel',\n    'alternatives': [\n      '@return point of intersection of three planes, null if some planes\\nare parallel',\n      '@return point where three planes intersect, null if some planes are\\nparallel',\n      '@return intersection point of three planes, null if any of the planes\\nare parallel',\n      '@return intersection point of three planes, null if there are any\\nparallel planes',\n      '@return point of intersection of three planes, null if there are any\\nplanes that are parallel'\n    ]\n  },\n  {\n    'tag': '@return a region covering the whole hyperplane',\n    'alternatives': [\n      '@return a region that covers the entire hyperplane',\n      '@return a region that encompasses the whole hyperplane',\n      '@return a region that spans the entire hyperplane',\n      '@return a region that includes the entire hyperplane',\n      '@return a region that involves the whole hyperplane'\n    ]\n  },\n  {\n    'tag': '@return a region containing the instance (really a {@link\\nPolyhedronsSet PolyhedronsSet} instance)',\n    'alternatives': [\n      '@return a region that holds the instance (actually a\\n{@link PolyhedronsSet PolyhedronsSet} instance)',\n      '@return a region that contains the instance (specifically a\\n{@link PolyhedronsSet PolyhedronsSet} instance)',\n      '@return a region that encompasses the instance (which is essentially\\na {@link PolyhedronsSet PolyhedronsSet} instance)',\n      '@return a region that encloses the instance (a {@link\\nPolyhedronsSet PolyhedronsSet} instance)',\n      '@return a region that surrounds the instance (essentially a\\n{@link PolyhedronsSet PolyhedronsSet} instance)'\n    ]\n  },\n  {\n    'tag': '@param p point to check',\n    'alternatives': [\n      '@param p point that needs to be validated',\n      '@param p point to be examined',\n      '@param p point for verification',\n      '@param p point that requires checking',\n      '@param p point to assess'\n    ]\n  },\n  {\n    'tag': '@return true if p belongs to the plane',\n    'alternatives': [\n      '@return true if p is on the plane',\n      '@return true if p lies on the plane',\n      '@return true if p is part of the plane',\n      '@return true if p is within the plane',\n      '@return true if p is a member of the plane'\n    ]\n  },\n  {\n    'tag': '@param plane plane to check',\n    'alternatives': [\n      '@param plane plane that needs to be validated',\n      '@param plane plane to be examined',\n      '@param plane plane for verification',\n      '@param plane plane that requires checking',\n      '@param plane plane to assess'\n    ]\n  },\n  {\n    'tag': '@return offset of the plane',\n    'alternatives': [\n      '@return plane offset',\n      '@return plane\\'s offset',\n      '@return the offset of the plane',\n      '@return offset value for the plane',\n      '@return plane offset amount'\n    ]\n  },\n  {\n    'tag': '@param vector vector to check',\n    'alternatives': [\n      '@param vector vector that needs to be validated',\n      '@param vector vector to be examined',\n      '@param vector vector for verification',\n      '@param vector vector that requires checking',\n      '@param vector vector to assess'\n    ]\n  },\n  {\n    'tag': '@return offset of the vector',\n    'alternatives': [\n      '@return vector offset',\n      '@return vector\\'s offset',\n      '@return the offset of the vector',\n      '@return offset value for the vector',\n      '@return vector offset amount'\n    ]\n  },\n  {\n    'tag': '@param point point to check',\n    'alternatives': [\n      '@param point point that needs to be validated',\n      '@param point point to be examined',\n      '@param point point for verification',\n      '@param point point that requires checking',\n      '@param point point to assess'\n    ]\n  },\n  {\n    'tag': '@return offset of the point',\n    'alternatives': [\n      '@return point offset',\n      '@return point\\'s offset',\n      '@return the offset of the point',\n      '@return offset value for the point',\n      '@return point offset amount'\n    ]\n  },\n  {\n    'tag': '@param other other hyperplane to check against the instance',\n    'alternatives': [\n      '@param other other hyperplane that needs to be validated against\\nthe instance',\n      '@param other other hyperplane to be examined against the instance',\n      '@param other other hyperplane for verification against the instance',\n      '@param other other hyperplane that requires checking against the\\ninstance',\n      '@param other other hyperplane to assess against the instance'\n    ]\n  },\n  {\n    'tag': '@return true if the instance and the other hyperplane have\\nthe same orientation',\n    'alternatives': [\n      '@return true if the instance and the other hyperplane share the\\nsame orientation',\n      '@return true if the instance and the other hyperplane have an\\nidentical orientation',\n      '@return true if the orientation of the instance and the other\\nhyperplane is the same',\n      '@return true if the instance and the other hyperplane exhibit\\nthe same orientation',\n      '@return true if the instance and the other hyperplane possess the\\nsame orientation'\n    ]\n  },\n  {\n    'tag': '@param normal normal direction to the plane',\n    'alternatives': [\n      '@param normal direction perpendicular to the plane',\n      '@param normal direction that is normal to the plane',\n      '@param normal direction orthogonal to the plane',\n      '@param normal direction of the plane\\'s normal vector',\n      '@param normal direction that is perpendicular to the plane'\n    ]\n  }\n]"