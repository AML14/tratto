"output=[\n  {\n    'tag': '@return The newly created edge, an existing edge or {@code null}',\n    'alternatives': [\n      '@return The edge that was just created, an existing edge, or {@code null}',\n      '@return The edge, which can be either newly created or existing, or {@code null}',\n      '@return The edge, which may be newly created or already existing, or {@code null}'\n    ]\n  },\n  {\n    'tag': '@throws IndexOutOfBoundsException If node indices are negative or greater than {@code\\n            getNodeCount() - 1}',\n    'alternatives': [\n      '@throws IndexOutOfBoundsException If the indices of the nodes are negative or exceed {@code getNodeCount() - 1}',\n      '@throws IndexOutOfBoundsException If node indices are less than zero or greater than {@code getNodeCount() - 1}',\n      '@throws IndexOutOfBoundsException If the indices of the nodes are negative or larger than {@code getNodeCount() - 1}'\n    ]\n  },\n  {\n    'tag': '@param exact whether the probability should be calculated exact using\\n       {@link org.apache.commons.math3.fraction.BigFraction} everywhere at the expense of\\n       very slow execution time, or if {@code double} should be used convenient places to\\n       gain speed. Almost never choose {@code true} in real applications unless you are very\\n       sure; {@code true} is almost solely for verification purposes.',\n    'alternatives': [\n      '@param exact specifies whether the probability should be computed accurately by using\\n       {@link org.apache.commons.math3.fraction.BigFraction} throughout, resulting in\\n       significantly slower execution, or if {@code double} should be used in certain\\n       places for speed. In real-world applications, it is rare to choose {@code true}\\n       unless one is completely certain. {@code true} is primarily intended for\\n       validation purposes.',\n      '@param exact determines if the probability should be accurately calculated using\\n       {@link org.apache.commons.math3.fraction.BigFraction} in all cases, resulting in\\n       very slow execution time, or if {@code double} should be used in convenient\\n       places to improve speed. It is generally not recommended to choose {@code true}\\n       unless in specific verification scenarios.',\n      '@param exact indicates whether the probability should be accurately calculated using\\n       {@link org.apache.commons.math3.fraction.BigFraction} everywhere at the cost of\\n       significantly slower execution time, or if {@code double} should be used in\\n       appropriate places for faster performance. It is highly discouraged to choose\\n       {@code true} in most real-world applications, unless there is absolute certainty;\\n       {@code true} is mostly used for validation purposes.'\n    ]\n  },\n  {\n    'tag': '@throws MathArithmeticException if algorithm fails to convert {@code h} to a\\n        {@link org.apache.commons.math3.fraction.BigFraction} in expressing {@code d} as \\\\((k\\n        - h) / m\\\\) for integer {@code k, m} and \\\\(0 \\\\le h < 1\\\\).',\n    'alternatives': [\n      '@throws MathArithmeticException if the algorithm cannot convert {@code h} to a\\n        {@link org.apache.commons.math3.fraction.BigFraction} while expressing {@code d}\\n        as \\\\((k - h) / m\\\\) for integer values of {@code k} and {@code m}, where\\n        \\\\(0 \\\\le h < 1\\\\).',\n      '@throws MathArithmeticException if the conversion of {@code h} to a\\n        {@link org.apache.commons.math3.fraction.BigFraction} in the expression\\n        \\\\((k - h) / m\\\\) for integer {@code k, m} and \\\\(0 \\\\le h < 1\\\\) fails.',\n      '@throws MathArithmeticException if the algorithm fails at converting {@code h} to\\n        a {@link org.apache.commons.math3.fraction.BigFraction} while expressing the\\n        value of {@code d} as \\\\((k - h) / m\\\\) for integer values of {@code k} and\\n        {@code m} such that \\\\(0 \\\\le h < 1\\\\).'\n    ]\n  },\n  {\n    'tag': '@param d statistic',\n    'alternatives': [\n      '@param d the statistic',\n      '@param d the statistical value',\n      '@param d the value of the statistic'\n    ]\n  },\n  {\n    'tag': '@param n sample size',\n    'alternatives': [\n      '@param n the sample size',\n      '@param n the size of the sample',\n      '@param n the number of observations'\n    ]\n  },\n  {\n    'tag': '@return the two-sided probability of \\\\(P(D_n < d)\\\\)',\n    'alternatives': [\n      '@return the probability \\\\(P(D_n < d)\\\\) with two sides',\n      '@return the probability of \\\\(P(D_n < d)\\\\) from both sides',\n      '@return the probability of \\\\(P(D_n < d)\\\\) considering both directions'\n    ]\n  },\n  {\n    'tag': '@param d value of d-statistic (x in [2])',\n    'alternatives': [\n      '@param d the value of the d-statistic (x in [2])',\n      '@param d the value of the d-statistic, denoted as (x in [2])',\n      '@param d the value of d-statistic specified as (x in [2])'\n    ]\n  },\n  {\n    'tag': '@return H matrix',\n    'alternatives': [\n      '@return the H matrix',\n      '@return the matrix H',\n      '@return the matrix representing H'\n    ]\n  },\n  {\n    'tag': '@throws NumberIsTooLargeException if fractional part is greater than 1',\n    'alternatives': [\n      '@throws NumberIsTooLargeException if the fractional part exceeds 1',\n      '@throws NumberIsTooLargeException if the fractional part is larger than 1',\n      '@throws NumberIsTooLargeException if the fractional part is greater than 1'\n    ]\n  },\n  {\n    'tag': '@throws FractionConversionException if algorithm fails to convert {@code h} to a\\n        {@link org.apache.commons.math3.fraction.BigFraction} in expressing {@code d} as \\\\((k\\n        - h) / m\\\\) for integer {@code k, m} and \\\\(0 <= h < 1\\\\).',\n    'alternatives': [\n      '@throws FractionConversionException if the algorithm cannot convert {@code h} to a\\n        {@link org.apache.commons.math3.fraction.BigFraction} while expressing {@code d}\\n        as \\\\((k - h) / m\\\\) for integer values of {@code k} and {@code m}, where\\n        \\\\(0 <= h < 1\\\\).',\n      '@throws FractionConversionException if the conversion of {@code h} to a\\n        {@link org.apache.commons.math3.fraction.BigFraction} fails in expressing\\n        {@code d} as \\\\((k - h) / m\\\\) for integer values of {@code k} and {@code m}\\n        such that \\\\(0 <= h < 1\\\\).',\n      '@throws FractionConversionException if the algorithm fails at converting {@code h} to\\n        a {@link org.apache.commons.math3.fraction.BigFraction} while expressing the value\\n        of {@code d} as \\\\((k - h) / m\\\\) for integer values of {@code k} and {@code m}\\n        such that \\\\(0 <= h < 1\\\\).'\n    ]\n  },\n  {\n    'tag': '@param array array to test',\n    'alternatives': [\n      '@param array the array to be tested',\n      '@param array the array that needs testing',\n      '@param array the array that will be tested'\n    ]\n  },\n  {\n    'tag': '@throws NullArgumentException if array is null',\n    'alternatives': [\n      '@throws NullArgumentException if the array is null',\n      '@throws NullArgumentException if the input array is null',\n      '@throws NullArgumentException if the array parameter is null'\n    ]\n  },\n  {\n    'tag': '@throws InsufficientDataException if array is too short',\n    'alternatives': [\n      '@throws InsufficientDataException if the array is too short',\n      '@throws InsufficientDataException if the input array is too small',\n      '@throws InsufficientDataException if the array length is inadequate'\n    ]\n  }\n]"