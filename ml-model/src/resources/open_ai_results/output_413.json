"output = [\n  {\n    'tag': '@return a {@code SummaryStatistics} whose data will be aggregated with\\n     those of this {@code AggregateSummaryStatistics}.  The initial state\\n     is a copy of the configured prototype statistics.',\n    'alternatives': [\n      '@return a {@code SummaryStatistics} object that will combine its data with the data of this {@code AggregateSummaryStatistics}. The initial state is a copy of the configured prototype statistics.',\n      '@return an instance of {@code SummaryStatistics} that will be used to aggregate the data alongside this {@code AggregateSummaryStatistics}. The initial state is a copy of the configured prototype statistics.',\n      '@return a new {@code SummaryStatistics} that will be used to accumulate the data together with this {@code AggregateSummaryStatistics}. The initial state is a copy of the provided prototype statistics.',\n    ]\n  },\n  {\n    'tag': '@param statistics collection of SummaryStatistics to aggregate',\n    'alternatives': [\n      '@param statistics set of SummaryStatistics to combine',\n      '@param statistics a collection of SummaryStatistics to merge',\n      '@param statistics a group of SummaryStatistics to aggregate',\n    ]\n  },\n  {\n    'tag': '@return summary statistics for the combined dataset',\n    'alternatives': [\n      '@return statistical summary for the merged dataset',\n      '@return aggregated statistics for the combined data',\n      '@return summary statistics of the combined dataset',\n    ]\n  },\n  {\n    'tag': '@param value any value in the range of the {@code byte} type',\n    'alternatives': [\n      '@param value any value within the range of the {@code byte} data type',\n      '@param value any value that falls within the range of the {@code byte} type',\n      '@param value any value that is within the range acceptable for the {@code byte} type',\n    ]\n  },\n  {\n    'tag': '@return the {@code byte} value that equals {@code value}',\n    'alternatives': [\n      '@return the {@code byte} value that is equal to the given {@code value}',\n      '@return the {@code byte} value that matches the specified {@code value}',\n      '@return the {@code byte} value equivalent to the provided {@code value}',\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if {@code value} is greater than {@link\\n    Byte#MAX_VALUE} or less than {@link Byte#MIN_VALUE}',\n    'alternatives': [\n      '@throws IllegalArgumentException when {@code value} exceeds {@link\\n    Byte#MAX_VALUE} or is less than {@link Byte#MIN_VALUE}',\n      '@throws IllegalArgumentException if the {@code value} is outside the valid range specified by {@link Byte#MIN_VALUE} and {@link\\n    Byte#MAX_VALUE}',\n      '@throws IllegalArgumentException if the {@code value} is larger than the maximum value allowed by {@link\\n    Byte#MAX_VALUE} or smaller than the minimum value allowed by {@link Byte#MIN_VALUE}',\n    ]\n  },\n  {\n    'tag': '@param value any {@code long} value',\n    'alternatives': [\n      '@param value any value of type {@code long}',\n      '@param value any value that is of the {@code long} data type',\n      '@param value any value represented as a {@code long}',\n    ]\n  },\n  {\n    'tag': '@return the same value cast to {@code byte} if it is in the range of the\\n    {@code byte} type, {@link Byte#MAX_VALUE} if it is too large,\\n    or {@link Byte#MIN_VALUE} if it is too small',\n    'alternatives': [\n      '@return the value itself cast to {@code byte} if it falls within the range of the\\n    {@code byte} type, {@link Byte#MAX_VALUE} if it exceeds the maximum limit,\\n    or {@link Byte#MIN_VALUE} if it is smaller than the minimum limit',\n      '@return the value unchanged, but cast to {@code byte} if it is within the valid range of the\\n    {@code byte} type, {@link Byte#MAX_VALUE} if it is greater than the maximum limit,\\n    or {@link Byte#MIN_VALUE} if it is smaller than the minimum limit',\n      '@return the value that is identical, but converted to the {@code byte} type if it is within the\\n    range specified for the {@code byte} type, {@link Byte#MAX_VALUE} if it exceeds the maximum limit,\\n    or {@link Byte#MIN_VALUE} if it is smaller than the minimum limit',\n    ]\n  },\n  {\n    'tag': '@return the value present in {@code array} that is less than or equal to\\n    every other value in the array',\n    'alternatives': [\n      '@return the value in {@code array} that is lower or equal to\\n    all other values in the array',\n      '@return the value that exists in {@code array} and is less than or equal to\\n    all other values in the array',\n      '@return the value from the {@code array} that is smaller or equal to\\n    every other value in the array',\n    ]\n  },\n  {\n    'tag': '@return the value present in {@code array} that is greater than or equal to\\n    every other value in the array',\n    'alternatives': [\n      '@return the value in {@code array} that is higher or equal to\\n    all other values in the array',\n      '@return the value that exists in {@code array} and is greater than or equal to\\n    all other values in the array',\n      '@return the value from the {@code array} that is larger or equal to\\n    every other value in the array',\n    ]\n  },\n  {\n    'tag': '@param separator the text that should appear between consecutive values in\\n    the resulting string (but not at the start or end)',\n    'alternatives': [\n      '@param separator the string to be inserted between successive values in\\n    the generated string (except at the beginning or end)',\n      '@param separator the text that separates individual values in\\n    the produced string (excluding the first and last positions)',\n      '@param separator the string used to delimit consecutive values within\\n    the resulting string (excluding the first and last positions)',\n    ]\n  },\n  {\n    'tag': '@param array an array of {@code byte} values, possibly empty',\n    'alternatives': [\n      '@param array a possibly empty array of {@code byte} values',\n      '@param array a potentially empty array containing values of type {@code byte}',\n      '@param array an array that may be empty or contain items of type {@code byte}',\n    ]\n  },\n  {\n    'tag': '@param value a primitive {@code double} value',\n    'alternatives': [\n      '@param value a basic {@code double} value',\n      '@param value a simple value of type {@code double}',\n      '@param value a fundamental value represented as a {@code double}',\n    ]\n  },\n  {\n    'tag': '@return a hash code for the value',\n    'alternatives': [\n      '@return the computed hash code for the given value',\n      '@return the calculated hash code for the specified value',\n      '@return the generated hash code for the provided value',\n    ]\n  },\n  {\n    'tag': '@param a the first {@code double} to compare',\n    'alternatives': [\n      '@param a the initial {@code double} value to compare',\n      '@param a the first value of type {@code double} that will be compared',\n      '@param a the starting point for the comparison, which is a {@code double} value',\n    ]\n  },\n  {\n    'tag': '@param b the second {@code double} to compare',\n    'alternatives': [\n      '@param b the second {@code double} value to compare',\n      '@param b the second value of type {@code double} that will be compared',\n      '@param b the value to compare against, which is a {@code double} value',\n    ]\n  },\n  {\n    'tag': '@return a negative value if {@code a} is less than {@code b}; a positive\\n    value if {@code a} is greater than {@code b}; or zero if they are equal',\n    'alternatives': [\n      '@return a negative number when {@code a} is smaller than {@code b}, a positive\\n    number when {@code a} is greater than {@code b}, or zero if they are equal',\n      '@return a negative value if {@code a} is less than {@code b}, a positive\\n    value if {@code a} is greater than {@code b}, or zero if they are equal',\n      '@return a negative number if {@code a} is smaller than {@code b}, a positive\\n    number if {@code a} is greater than {@code b}, or zero if they are equal',\n    ]\n  },\n  {\n    'tag': '@param array an array of {@code double} values, possibly empty',\n    'alternatives': [\n      '@param array a possibly empty array of {@code double} values',\n      '@param array a potentially empty array containing values of type {@code double}',\n      '@param array an array that may be empty or contain items of type {@code double}',\n    ]\n  },\n  {\n    'tag': '@param target a primitive {@code double} value',\n    'alternatives': [\n      '@param target a basic {@code double} value',\n      '@param target a simple value of type {@code double}',\n      '@param target a fundamental value represented as a {@code double}',\n    ]\n  },\n  {\n    'tag': '@return {@code true} if {@code array[i] == target} for some value of {@code\\n    i}',\n    'alternatives': [\n      '@return {@code true} if there exists a value of {@code i} such that {@code array[i] == target}',\n      '@return {@code true} if there is at least one {@code i} such that {@code array[i] == target}',\n      '@return {@code true} if there is any index {@code i} for which {@code array[i] == target}',\n    ]\n  },\n  {\n    'tag': '@param array an array of {@code double} values, possibly empty',\n    'alternatives': [\n      '@param array a possibly empty array of {@code double} values',\n      '@param array a potentially empty array containing values of type {@code double}',\n      '@param array an array that may be empty or contain items of type {@code double}',\n    ]\n  },\n  {\n    'tag': '@param target a primitive {@code double} value',\n    'alternatives': [\n      '@param target a basic {@code double} value',\n      '@param target a simple value of type {@code double}',\n      '@param target a fundamental value represented as a {@code double}',\n    ]\n  },\n  {\n    'tag': '@return the least index {@code i} for which {@code array[i] == target}, or\\n    {@code -1} if no such index exists.',\n    'alternatives': [\n      '@return the smallest index {@code i} that satisfies the condition {@code array[i] == target}, or\\n    {@code -1} if there is no such index.',\n      '@return the minimum index {@code i} where {@code array[i] == target}, or\\n    {@code -1} if there is no such index.',\n      '@return the index {@code i} with the lowest value that matches the condition {@code array[i] == target}, or\\n    {@code -1} if there is no such index.',\n    ]\n  },\n  {\n    'tag': '@param array the array to search for the sequence {@code target}',\n    'alternatives': [\n      '@param array the array in which to look for the sequence {@code target}',\n      '@param array the array that should be searched for the sequence {@code target}',\n      '@param array the array where the occurrence of the sequence {@code target} is sought',\n    ]\n  },\n  {\n    'tag': '@param target the array to search for as a sub-sequence of {@code array}',\n    'alternatives': [\n      '@param target the array to be found as a sub-sequence of {@code array}',\n      '@param target the array that is considered as a sub-sequence of {@code array}',\n      '@param target the array that should exist as a subsequence of {@code array}',\n    ]\n  }\n]"