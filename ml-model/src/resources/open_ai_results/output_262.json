"output=[\n    {\n        'tag': '@param points the respective points with min/max x/y coordinate',\n        'alternatives': [\n            '@param points the given points with minimum/maximum x/y coordinates',\n            '@param points the points with minimum/maximum x/y coordinates',\n            '@param points the points that have minimum/maximum x/y coordinate values',\n            '@param points the respective points that have the minimum/maximum x/y coordinate',\n            '@param points the points whose x/y coordinates have the minimum/maximum values'\n        ]\n    },\n    {\n        'tag': '@return the quadrilateral',\n        'alternatives': [\n            '@return the four-sided figure',\n            '@return the shape with four sides',\n            '@return the figure that has four sides',\n            '@return the polygon with four sides',\n            '@return the object representing a quadrilateral'\n        ]\n    },\n    {\n        'tag': '@param point the point to check',\n        'alternatives': [\n            '@param point the point to verify',\n            '@param point the point to validate',\n            '@param point the point to examine',\n            '@param point the point to test',\n            '@param point the point that needs to be checked'\n        ]\n    },\n    {\n        'tag': '@param quadrilateralPoints the convex quadrilateral, represented by 4 points',\n        'alternatives': [\n            '@param quadrilateralPoints the convex quadrilateral, which is described by 4 points',\n            '@param quadrilateralPoints the 4 points that define the convex quadrilateral',\n            '@param quadrilateralPoints the 4 points representing a convex quadrilateral',\n            '@param quadrilateralPoints the 4 points that represent a convex quadrilateral',\n            '@param quadrilateralPoints the 4 points that form a convex quadrilateral'\n        ]\n    },\n    {\n        'tag': '@return {@code true} if the point is inside the quadrilateral, {@code false} otherwise',\n        'alternatives': [\n            '@return {@code true} if the point lies within the quadrilateral, {@code false} otherwise',\n            '@return {@code true} if the point is contained inside the quadrilateral, {@code false} otherwise',\n            '@return {@code true} if the point is situated inside the quadrilateral, {@code false} otherwise',\n            '@return {@code true} if the point resides within the quadrilateral, {@code false} otherwise',\n            '@return {@code true} if the point exists inside the quadrilateral, {@code false} otherwise'\n        ]\n    },\n    {\n        'tag': '@param hullVertices the hull vertices',\n        'alternatives': [\n            '@param hullVertices the vertices of the hull',\n            '@param hullVertices the points that make up the hull',\n            '@param hullVertices the points forming the hull',\n            '@param hullVertices the vertices comprising the hull',\n            '@param hullVertices the points that constitute the hull'\n        ]\n    },\n    {\n        'tag': '@return {@code true} if the vertices form a convex hull, {@code false} otherwise',\n        'alternatives': [\n            '@return {@code true} if the vertices create a convex hull, {@code false} otherwise',\n            '@return {@code true} if the vertices make a convex hull, {@code false} otherwise',\n            '@return {@code true} if the vertices generate a convex hull, {@code false} otherwise',\n            '@return {@code true} if the vertices construct a convex hull, {@code false} otherwise',\n            '@return {@code true} if the vertices shape a convex hull, {@code false} otherwise'\n        ]\n    },\n    {\n        'tag': '@return the line segments of the convex hull',\n        'alternatives': [\n            '@return the line segments that constitute the convex hull',\n            '@return the line segments forming the convex hull',\n            '@return the line segments that make up the convex hull',\n            '@return the line segments belonging to the convex hull',\n            '@return the line segments which define the convex hull'\n        ]\n    },\n    {\n        'tag': '@return the array of line segments',\n        'alternatives': [\n            '@return the array containing the line segments',\n            '@return the array that includes the line segments',\n            '@return the array composed of the line segments',\n            '@return the array holding the line segments',\n            '@return an array of line segments'\n        ]\n    },\n    {\n        'tag': '@param vertices the vertices of the convex hull, must be ordered',\n        'alternatives': [\n            '@param vertices the ordered vertices of the convex hull',\n            '@param vertices the vertices that form a convex hull, must be in order',\n            '@param vertices the vertices composing a convex hull, must be arranged',\n            '@param vertices the ordered set of vertices that make up the convex hull',\n            '@param vertices the vertices that create a convex hull, must be in a specific order'\n        ]\n    },\n    {\n        'tag': '@param tolerance tolerance below which points are considered identical',\n        'alternatives': [\n            '@param tolerance tolerance that indicates when points are considered identical',\n            '@param tolerance value that determines when points are considered identical',\n            '@param tolerance threshold for points to be considered identical',\n            '@param tolerance amount below which points are considered identical',\n            '@param tolerance level at which points are considered identical'\n        ]\n    },\n    {\n        'tag': '@throws MathIllegalArgumentException if the vertices do not form a convex hull',\n        'alternatives': [\n            '@throws MathIllegalArgumentException if the vertices fail to create a convex hull',\n            '@throws MathIllegalArgumentException if the vertices are incapable of forming a convex hull',\n            '@throws MathIllegalArgumentException if the vertices cannot produce a convex hull',\n            '@throws MathIllegalArgumentException if the vertices are not able to form a convex hull',\n            '@throws MathIllegalArgumentException if the vertices do not result in a convex hull'\n        ]\n    },\n    {\n        'tag': '@param point the current point',\n        'alternatives': [\n            '@param point the point at the current position',\n            '@param point the point that is currently being processed',\n            '@param point the point being considered at the moment',\n            '@param point the point at the present time',\n            '@param point the point in the current context'\n        ]\n    },\n    {\n        'tag': '@param hull the partial hull',\n        'alternatives': [\n            '@param hull the incomplete hull',\n            '@param hull the hull that is not yet finished',\n            '@param hull the hull that is still being built',\n            '@param hull the hull with missing parts',\n            '@param hull the partially constructed hull'\n        ]\n    },\n    {\n        'tag': '@param includeCollinearPoints whether collinear points shall be added as hull vertices',\n        'alternatives': [\n            '@param includeCollinearPoints whether to include collinear points as hull vertices',\n            '@param includeCollinearPoints whether to add collinear points as hull vertices',\n            '@param includeCollinearPoints whether or not to include collinear points as hull vertices',\n            '@param includeCollinearPoints whether collinear points should be added as hull vertices',\n            '@param includeCollinearPoints whether collinear points need to be included as hull vertices'\n        ]\n    },\n    {\n        'tag': '@param includeCollinearPoints whether collinear points shall be added as hull vertices',\n        'alternatives': [\n            '@param includeCollinearPoints whether to include collinear points as hull vertices',\n            '@param includeCollinearPoints whether to add collinear points as hull vertices',\n            '@param includeCollinearPoints whether or not to include collinear points as hull vertices',\n            '@param includeCollinearPoints whether collinear points should be added as hull vertices',\n            '@param includeCollinearPoints whether collinear points need to be included as hull vertices'\n        ]\n    },\n    {\n        'tag': '@param tolerance tolerance below which points are considered identical',\n        'alternatives': [\n            '@param tolerance tolerance that indicates when points are considered identical',\n            '@param tolerance value that determines when points are considered identical',\n            '@param tolerance threshold for points to be considered identical',\n            '@param tolerance amount below which points are considered identical',\n            '@param tolerance level at which points are considered identical'\n        ]\n    },\n    {\n        'tag': '@return the default 2D vector format.',\n        'alternatives': [\n            '@return the format used for the default 2D vector.',\n            '@return the format that is standard for 2D vectors.',\n            '@return the format typically employed for 2D vectors.',\n            '@return the format commonly used for 2D vectors.',\n            '@return the format that is normal for 2D vectors.'\n        ]\n    },\n    {\n        'tag': '@param locale the specific locale used by the format.',\n        'alternatives': [\n            '@param locale the particular locale utilized by the format.',\n            '@param locale the specific locale that the format employs.',\n            '@param locale the certain locale that the format uses.',\n            '@param locale the particular locale applied by the format.',\n            '@param locale the specific locale that is used by the format.'\n        ]\n    },\n    {\n        'tag': '@return the 2D vector format specific to the given locale.',\n        'alternatives': [\n            '@return the format for 2D vectors that is specific to the provided locale.',\n            '@return the format of 2D vectors that relates to the given locale.',\n            '@return the format used for 2D vectors that is specific to the locale.',\n            '@return the format for 2D vectors that is tailor-made for the given locale.',\n            '@return the format of 2D vectors that is unique to the specified locale.'\n        ]\n    },\n    {\n        'tag': '@param format the custom format for components.',\n        'alternatives': [\n            '@param format the user-defined format for components.',\n            '@param format the format that is specific to the user for components.',\n            '@param format the format that is customized for components.',\n            '@param format the format created by the user for components.',\n            '@param format the format that is made by the user for components.'\n        ]\n    },\n    {\n        'tag': '@param prefix prefix to use instead of the default \"{\"',\n        'alternatives': [\n            '@param prefix the starting characters to use instead of the default \"{\"',\n            '@param prefix the characters at the beginning to use instead of the default \"{\"',\n            '@param prefix the initial sequence of characters to use instead of the default \"{\"',\n            '@param prefix the string at the start to use instead of the default \"{\"',\n            '@param prefix the characters that replace the default \"{\" at the beginning'\n        ]\n    },\n    {\n        'tag': '@param suffix suffix to use instead of the default \"}\"',\n        'alternatives': [\n            '@param suffix the closing characters to use instead of the default \"}\"',\n            '@param suffix the characters at the end to use instead of the default \"}\"',\n            '@param suffix the final sequence of characters to use instead of the default \"}\"',\n            '@param suffix the string at the end to use instead of the default \"}\"',\n            '@param suffix the characters that replace the default \"}\" at the end'\n        ]\n    },\n    {\n        'tag': '@param separator separator to use instead of the default \"; \"',\n        'alternatives': [\n            '@param separator the delimiter to use instead of the default \"; \"',\n            '@param separator the characters that separate instead of the default \"; \"',\n            '@param separator the string that separates instead of the default \"; \"',\n            '@param separator the characters used as a separator instead of the default \"; \"',\n            '@param separator the characters that replace the default \"; \" as a separator'\n        ]\n    },\n    {\n        'tag': '@param prefix prefix to use instead of the default \"{\"',\n        'alternatives': [\n            '@param prefix the starting characters to use instead of the default \"{\"',\n            '@param prefix the characters at the beginning to use instead of the default \"{\"',\n            '@param prefix the initial sequence of characters to use instead of the default \"{\"',\n            '@param prefix the string at the start to use instead of the default \"{\"',\n            '@param prefix the characters that replace the default \"{\" at the beginning'\n        ]\n    }\n]"