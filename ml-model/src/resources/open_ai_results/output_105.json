"output = [\n  {\n    'tag': '@return true if this call changed the collection',\n    'alternatives': [\n      '@return true if this method modified the collection',\n      '@return true if this operation resulted in a change in the collection',\n      '@return true if the collection was modified by this call',\n      '@return true if this invocation altered the collection',\n      '@return true if the collection was changed by this method call'\n    ]\n  },\n  {\n    'tag': '@param other the bag to retain',\n    'alternatives': [\n      '@param other the bag to preserve',\n      '@param other the bag to keep',\n      '@param other the bag to maintain',\n      '@param other the bag to hold onto',\n      '@param other the bag to hold'\n    ]\n  },\n  {\n    'tag': '@return <code>true</code> if this call changed the collection',\n    'alternatives': [\n      '@return <code>true</code> if the collection was modified by this operation',\n      '@return <code>true</code> if the collection was altered by this call',\n      '@return <code>true</code> if the call resulted in a change in the collection',\n      '@return <code>true</code> if this invocation resulted in a modification of the collection',\n      '@return <code>true</code> if the collection was modified by this method call'\n    ]\n  },\n  {\n    'tag': \"@return an array of all of this bag's elements\",\n    'alternatives': [\n      \"@return an array containing all the elements in this bag\",\n      \"@return an array that includes all the elements of this bag\",\n      \"@return an array holding all the elements contained in this bag\",\n      \"@return an array comprising all the elements within this bag\",\n      \"@return an array consisting of all the elements present in this bag\"\n    ]\n  },\n  {\n    'tag': '@param <T> the type of the array elements',\n    'alternatives': [\n      '@param <T> the element type of the array',\n      '@param <T> the type of the elements in the array',\n      '@param <T> the array element type',\n      '@param <T> the type of elements in the array',\n      '@param <T> the type of objects stored in the array'\n    ]\n  },\n  {\n    'tag': '@param array the array to populate',\n    'alternatives': [\n      '@param array the array to fill',\n      '@param array the array to populate with data',\n      '@param array the array to populate with elements',\n      '@param array the array to populate with values',\n      '@param array the array to be populated'\n    ]\n  },\n  {\n    'tag': \"@return an array of all of this bag's elements\",\n    'alternatives': [\n      \"@return an array containing all the elements in this bag\",\n      \"@return an array that includes all the elements of this bag\",\n      \"@return an array holding all the elements contained in this bag\",\n      \"@return an array comprising all the elements within this bag\",\n      \"@return an array consisting of all the elements present in this bag\"\n    ]\n  },\n  {\n    'tag': '@throws ArrayStoreException if the runtime type of the specified array is not\\n  a supertype of the runtime type of the elements in this list',\n    'alternatives': [\n      '@throws ArrayStoreException if the specified array does not have a supertype runtime type',\n      '@throws ArrayStoreException if the runtime type of the array does not match the runtime type of the elements in the list',\n      '@throws ArrayStoreException if the array type is not a supertype of the element types in the list',\n      '@throws ArrayStoreException if the elements in the list cannot be stored in the specified array',\n      '@throws ArrayStoreException if the runtime type of the array is incompatible with the element types in the list'\n    ]\n  },\n  {\n    'tag': '@return the set of unique elements in this bag',\n    'alternatives': [\n      '@return the set containing distinct elements in this bag',\n      '@return the unique elements present in this bag',\n      '@return the set of non-duplicate elements in this bag',\n      '@return the distinct elements stored in this bag',\n      '@return the set of singular elements in this bag'\n    ]\n  },\n  {\n    'tag': '@param out the output stream',\n    'alternatives': [\n      '@param out the destination output stream',\n      '@param out the stream to write to',\n      '@param out the output destination',\n      '@param out the stream for output',\n      '@param out the stream to be used for output'\n    ]\n  },\n  {\n    'tag': '@throws IOException any of the usual I/O related exceptions',\n    'alternatives': [\n      '@throws IOException any of the standard I/O exceptions',\n      '@throws IOException any of the common I/O related exceptions',\n      '@throws IOException any of the typical I/O exceptions',\n      '@throws IOException any of the regular I/O related exceptions',\n      '@throws IOException any of the known I/O exceptions'\n    ]\n  },\n  {\n    'tag': '@param map the map to use',\n    'alternatives': [\n      '@param map the map to utilize',\n      '@param map the map to employ',\n      '@param map the map to apply',\n      '@param map the map to make use of',\n      '@param map the map to work with'\n    ]\n  },\n  {\n    'tag': '@param in the input stream',\n    'alternatives': [\n      '@param in the incoming stream',\n      '@param in the stream for input',\n      '@param in the stream to read from',\n      '@param in the source input stream',\n      '@param in the stream for receiving input'\n    ]\n  },\n  {\n    'tag': '@throws IOException any of the usual I/O related exceptions',\n    'alternatives': [\n      '@throws IOException any of the standard I/O exceptions',\n      '@throws IOException any of the common I/O related exceptions',\n      '@throws IOException any of the typical I/O exceptions',\n      '@throws IOException any of the regular I/O related exceptions',\n      '@throws IOException any of the known I/O exceptions'\n    ]\n  },\n  {\n    'tag': '@throws ClassNotFoundException if the stream contains an object which class can not be loaded',\n    'alternatives': [\n      '@throws ClassNotFoundException if the stream has an object with an unloadable class',\n      '@throws ClassNotFoundException if the stream contains an object whose class cannot be loaded',\n      '@throws ClassNotFoundException if the class of a stream object cannot be loaded',\n      '@throws ClassNotFoundException if the object class in the stream cannot be loaded',\n      '@throws ClassNotFoundException if the specified stream object has an unidentifiable class'\n    ]\n  },\n  {\n    'tag': '@throws ClassCastException if the stream does not contain the correct objects',\n    'alternatives': [\n      '@throws ClassCastException if the stream has incompatible objects',\n      '@throws ClassCastException if the stream contains objects of the wrong type',\n      '@throws ClassCastException if the objects in the stream cannot be cast correctly',\n      '@throws ClassCastException if the object types in the stream are not compatible',\n      '@throws ClassCastException if the stream objects cannot be correctly casted'\n    ]\n  },\n  {\n    'tag': '@param object the Bag to compare to',\n    'alternatives': [\n      '@param object the Bag to be compared with',\n      '@param object the Bag to compare against',\n      '@param object the Bag to be compared to',\n      '@param object the Bag to compare with',\n      '@param object the Bag to compare'\n    ]\n  },\n  {\n    'tag': '@return true if equal',\n    'alternatives': [\n      '@return true if they are equal',\n      '@return true if they are identical',\n      '@return true if they are the same',\n      '@return true if they match',\n      '@return true if they have equality'\n    ]\n  },\n  {\n    'tag': '@return the hash code of the Bag',\n    'alternatives': [\n      '@return the Bag\\'s hash code',\n      '@return the hash code for the Bag',\n      '@return the hash value of the Bag',\n      '@return the Bag\\'s hash value',\n      '@return the Bag\\'s hash code value'\n    ]\n  },\n  {\n    'tag': '@return a debugging toString',\n    'alternatives': [\n      '@return a toString for debugging purposes',\n      '@return a String representation for debugging',\n      '@return a debug-oriented toString',\n      '@return a toString used for debugging',\n      '@return a toString specifically for debugging'\n    ]\n  },\n  {\n    'tag': '@param map the map to assign',\n    'alternatives': [\n      '@param map the map to set',\n      '@param map the map to assign values',\n      '@param map the map to populate',\n      '@param map the map to initialize',\n      '@param map the map to be assigned'\n    ]\n  },\n  {\n    'tag': '@param <E> the type of the elements in the bag',\n    'alternatives': [\n      '@param <E> the element type of the bag',\n      '@param <E> the type of objects stored in the bag',\n      '@param <E> the type of elements contained in the bag',\n      '@param <E> the bag element type',\n      '@param <E> the type of items held in the bag'\n    ]\n  },\n  {\n    'tag': '@return a Bag that complies to the Collection contract',\n    'alternatives': [\n      '@return a Collection-compliant Bag',\n      '@return a Bag that follows the Collection contract',\n      '@return a Bag adhering to the Collection interface rules',\n      '@return a Bag that meets the requirements of the Collection contract',\n      '@return a Bag that is in accordance with the rules of the Collection interface'\n    ]\n  },\n  {\n    'tag': '@param out the output stream',\n    'alternatives': [\n      '@param out the destination output stream',\n      '@param out the stream to write to',\n      '@param out the output destination',\n      '@param out the stream for output',\n      '@param out the stream to be used for output'\n    ]\n  },\n  {\n    'tag': '@throws IOException',\n    'alternatives': [\n      '@throws IOException if an I/O error occurs',\n      '@throws IOException in case of an I/O error',\n      '@throws IOException if a problem arises during I/O',\n      '@throws IOException if any I/O issue arises',\n      '@throws IOException if there is an I/O related problem'\n    ]\n  }\n]"