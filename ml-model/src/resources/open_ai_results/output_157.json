"output=[\n  {'tag': '@param function vectorial residuals function to wrap',\n   'alternatives': [\"@param function vectorial residuals function to encapsulate\",\n                    \"@param function vectorial residuals function to enclose\",\n                    \"@param function vectorial residuals function to cover\",\n                    \"@param function vectorial residuals function to envelop\"]},\n  {'tag': '@param observations observations to be compared to objective function to compute residuals',\n   'alternatives': [\"@param observations observations to be compared to the objective function in order to calculate residuals\",\n                    \"@param observations observations to compare with objective function for computing residuals\",\n                    \"@param observations observations that are compared to the objective function to calculate residuals\",\n                    \"@param observations observations to be evaluated against the objective function to generate residuals\"]},\n  {'tag': '@param scale scaling matrix',\n   'alternatives': [\"@param scale scaling matrix used\",\n                    \"@param scale scaling matrix applied\",\n                    \"@param scale scaling matrix employed\",\n                    \"@param scale scaling matrix utilized\"]},\n  {'tag': '@throws DimensionMismatchException if the observations vector and the scale\\nmatrix dimensions do not match (objective function dimension is checked only when\\nthe {@link #value(double[])} method is called)',\n   'alternatives': [\"@throws DimensionMismatchException when the dimensions of the observations vector and the scale matrix do not match (the objective function dimension is verified only when the method {@link #value (double[])} is invoked)\",\n                    \"@throws DimensionMismatchException if the dimensions of the observations vector and the scale matrix do not correspond (the objective function's dimension is only verified when the {@link #value(double[])} method is called)\",\n                    \"@throws DimensionMismatchException if the dimensions of the observations vector and the scaling matrix do not match (the dimension of the objective function is checked only when the {@link #value(double[])} method is invoked)\",\n                    \"@throws DimensionMismatchException if the dimensions of the observations vector and the scaling matrix are not compatible (objective function dimension is checked only when the {@link #value(double[])} method is called)\"]},\n  {'tag': '@param f Objective function.',\n   'alternatives': [\"@param f Function that represents the objective.\",\n                    \"@param f Objective function to be minimized or maximized.\",\n                    \"@param f Function that serves as the objective.\",\n                    \"@param f Function representing the objective.\"]},\n  {'tag': '@param goalType Type of optimization goal: either\\n{@link GoalType#MAXIMIZE} or {@link GoalType#MINIMIZE}.',\n   'alternatives': [\"@param goalType Type of optimization objective: either\\n{@link GoalType#MAXIMIZE} or {@link GoalType#MINIMIZE}.\",\n                    \"@param goalType Optimization objective type: either\\n{@link GoalType#MAXIMIZE} or {@link GoalType#MINIMIZE}.\",\n                    \"@param goalType Type of objective for optimization: either\\n{@link GoalType#MAXIMIZE} or {@link GoalType#MINIMIZE}.\",\n                    \"@param goalType The type of optimization goal: either\\n{@link GoalType#MAXIMIZE} or {@link GoalType#MINIMIZE}.\"]},\n  {'tag': '@param startPoint Start point for optimization.',\n   'alternatives': [\"@param startPoint Initial point for optimization.\",\n                    \"@param startPoint Starting point for optimization.\",\n                    \"@param startPoint The initial point for optimization.\",\n                    \"@param startPoint Point from which optimization starts.\"]},\n  {'tag': '@param maxEval Maximum number of function evaluations.',\n   'alternatives': [\"@param maxEval Maximum number of evaluations of the function.\",\n                    \"@param maxEval The maximum number of function evaluations allowed.\",\n                    \"@param maxEval Maximum number of function calls.\",\n                    \"@param maxEval The maximum number of evaluations of the objective function.\"]},\n  {'tag': '@param lowerBound Lower bound for each of the parameters.',\n   'alternatives': [\"@param lowerBound Lower limit for each parameter.\",\n                    \"@param lowerBound Lower boundary for each of the parameters.\",\n                    \"@param lowerBound The minimum value allowed for each parameter.\",\n                    \"@param lowerBound The lower bound for all parameters.\"]},\n  {'tag': '@param upperBound Upper bound for each of the parameters.',\n   'alternatives': [\"@param upperBound Upper limit for each parameter.\",\n                    \"@param upperBound Upper boundary for each of the parameters.\",\n                    \"@param upperBound The maximum value allowed for each parameter.\",\n                    \"@param upperBound The upper bound for all parameters.\"]},\n  {'tag': '@return the point/value pair giving the optimal value for objective\\nfunction.',\n   'alternatives': [\"@return the pair of point/value that represents the optimal value for the objective function.\",\n                    \"@return the point/value pair that provides the optimal value for the objective function.\",\n                    \"@return the pair of point/value that corresponds to the optimal value for the objective function.\",\n                    \"@return the point/value pair that denotes the optimal value of the objective function.\"]},\n  {'tag': '@throws org.apache.commons.math3.exception.DimensionMismatchException if the array sizes are wrong.',\n   'alternatives': [\"@throws org.apache.commons.math3.exception.DimensionMismatchException if the sizes of the arrays are incorrect.\",\n                    \"@throws org.apache.commons.math3.exception.DimensionMismatchException when the sizes of the arrays are incorrect.\",\n                    \"@throws org.apache.commons.math3.exception.DimensionMismatchException if the sizes of the arrays are not correct.\",\n                    \"@throws org.apache.commons.math3.exception.DimensionMismatchException if the array dimensions are incorrect.\"]},\n  {'tag': '@throws org.apache.commons.math3.exception.TooManyEvaluationsException if the maximal number of evaluations is exceeded.',\n   'alternatives': [\"@throws org.apache.commons.math3.exception.TooManyEvaluationsException if the maximum number of evaluations is surpassed.\",\n                    \"@throws org.apache.commons.math3.exception.TooManyEvaluationsException when the maximum number of evaluations is exceeded.\",\n                    \"@throws org.apache.commons.math3.exception.TooManyEvaluationsException if the maximum number of evaluations is exceeded.\",\n                    \"@throws org.apache.commons.math3.exception.TooManyEvaluationsException if the number of evaluations exceeds the maximum.\"]},\n  {'tag': '@throws org.apache.commons.math3.exception.NumberIsTooSmallException if any\\nof the initial values is less than its lower bound.',\n   'alternatives': [\"@throws org.apache.commons.math3.exception.NumberIsTooSmallException if any\\nof the initial values is smaller than its lower limit.\",\n                    \"@throws org.apache.commons.math3.exception.NumberIsTooSmallException if any\\nof the initial values is below its lower bound.\",\n                    \"@throws org.apache.commons.math3.exception.NumberIsTooSmallException if any\\nof the initial values is less than its lower boundary.\",\n                    \"@throws org.apache.commons.math3.exception.NumberIsTooSmallException if any\\nof the initial values is lower than its lowest bound.\"]},\n  {'tag': '@throws org.apache.commons.math3.exception.NumberIsTooLargeException if any\\nof the initial values is greater than its upper bound.',\n   'alternatives': [\"@throws org.apache.commons.math3.exception.NumberIsTooLargeException if any\\nof the initial values is larger than its upper limit.\",\n                    \"@throws org.apache.commons.math3.exception.NumberIsTooLargeException if any\\nof the initial values is above its upper bound.\",\n                    \"@throws org.apache.commons.math3.exception.NumberIsTooLargeException if any\\nof the initial values is greater than its upper boundary.\",\n                    \"@throws org.apache.commons.math3.exception.NumberIsTooLargeException if any\\nof the initial values exceeds its upper bound.\"]},\n  {'tag': '@return a copy of the stored point.',\n   'alternatives': [\"@return a duplicate of the stored point.\",\n                    \"@return a replica of the stored point.\",\n                    \"@return a copy of the point stored.\",\n                    \"@return a cloned version of the stored point.\"]},\n  {'tag': '@return a reference to the internal array storing the point.',\n   'alternatives': [\"@return a pointer to the internal array that stores the point.\",\n                    \"@return a reference to the internal array that holds the point.\",\n                    \"@return a link to the internal array that stores the point.\",\n                    \"@return a handle to the internal array that holds the point.\"]},\n  {'tag': '@return data transfer object that will be serialized',\n   'alternatives': [\"@return serializable data transfer object.\",\n                    \"@return transfer object that can be serialized.\",\n                    \"@return serializable data transfer object.\",\n                    \"@return serializable transfer object.\"]},\n  {'tag': '@param point Point coordinates. This instance will store\\na copy of the array, not the array passed as argument.',\n   'alternatives': [\"@param point Coordinates of the point. This object will save a copy\\nof the array, not the array passed as an argument.\",\n                    \"@param point Coordinates of the point. This instance will retain\\na copy of the array, not the array passed as an argument.\",\n                    \"@param point Point coordinates. This instance will keep\\na duplicate of the array, not the array passed as an argument.\",\n                    \"@param point Coordinates of the point. This object will maintain\\na copy of the array, not the array passed as an argument.\"]},\n  {'tag': '@param value Value of the objective function at the point.',\n   'alternatives': [\"@param value Objective function value at the point.\",\n                    \"@param value Value of the objective function for the given point.\",\n                    \"@param value The value of the objective function at the given point.\",\n                    \"@param value Objective function's value at the given point.\"]},\n  {'tag': '@param point Point coordinates.',\n   'alternatives': [\"@param point Coordinates of the point.\",\n                    \"@param point Point's coordinates.\",\n                    \"@param point The coordinates of the point.\",\n                    \"@param point The point's coordinates.\"]},\n  {'tag': '@param value Value of the objective function at the point.',\n   'alternatives': [\"@param value Objective function value at the point.\",\n                    \"@param value Value of the objective function for the given point.\",\n                    \"@param value The value of the objective function at the given point.\",\n                    \"@param value The value of the objective function at the specified point.\"]},\n  {'tag': '@param copyArray if {@code true}, the input array will be copied,\\notherwise it will be referenced.',\n   'alternatives': [\"@param copyArray if {@code true}, the input array will be duplicated,\\notherwise it will be referenced.\",\n                    \"@param copyArray if {@code true}, the input array will be cloned,\\notherwise it will be referenced.\",\n                    \"@param copyArray if {@code true}, the input array will be replicated,\\notherwise it will be referenced.\",\n                    \"@param copyArray whether to make a copy of the input array (if {@code true}) or reference it (if {@code false}).\"]},\n  {'tag': '@param iteration Index of current iteration',\n   'alternatives': [\"@param iteration Current iteration index\",\n                    \"@param iteration Index of the present iteration\",\n                    \"@param iteration Index of the ongoing iteration\",\n                    \"@param iteration Current iteration's index\"]},\n  {'tag': '@param previous Best point in the previous iteration.',\n   'alternatives': [\"@param previous Optimal point from the previous iteration.\",\n                    \"@param previous Point with the best performance in the previous iteration.\",\n                    \"@param previous Best point obtained in the previous iteration.\",\n                    \"@param previous Optimal solution from the previous iteration.\"]}\n]"