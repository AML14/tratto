"[\n  {\n    'tag': '@param b the second collection, must not be null',\n    'alternatives': [\n      '@param b the second set, must not be null',\n      '@param b the second container, must not be null',\n      '@param b the second group, must not be null',\n      '@param b the second assortment, must not be null',\n      '@param b the second aggregation, must not be null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if collection is null',\n    'alternatives': [\n      '@throws NullPointerException if the collection is null',\n      '@throws NullPointerException if the provided collection is null',\n      '@throws NullPointerException if the input collection is null',\n      '@throws NullPointerException if collection parameter is null',\n      '@throws NullPointerException if provided collection is null'\n    ]\n  },\n  {\n    'tag': '@param collection the collection to create permutations for, may not be null',\n    'alternatives': [\n      '@param collection the collection for generating permutations, must not be null',\n      '@param collection the collection for which permutations are created, may not be null',\n      '@param collection the input collection for generating permutations, cannot be null',\n      '@param collection the collection to generate permutations from, must not be null',\n      '@param collection the collection on which to perform permutation operation, may not be null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if either parameter is null',\n    'alternatives': [\n      '@throws NullPointerException if any of the parameters is null',\n      '@throws NullPointerException if either of the parameters is null',\n      '@throws NullPointerException if any parameter is null',\n      '@throws NullPointerException if one of the parameters is null',\n      '@throws NullPointerException if any argument is null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if any of the parameters is null',\n    'alternatives': [\n      '@throws NullPointerException if either of the parameters is null',\n      '@throws NullPointerException if any parameter is null',\n      '@throws NullPointerException if one of the parameters is null',\n      '@throws NullPointerException if any argument is null',\n      '@throws NullPointerException if any parameter value is null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if either parameter is null',\n    'alternatives': [\n      '@throws NullPointerException if any of the parameters is null',\n      '@throws NullPointerException if one of the parameters is null',\n      '@throws NullPointerException if any parameter is null',\n      '@throws NullPointerException if any argument is null',\n      '@throws NullPointerException if any parameter value is null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if any of the parameters is null',\n    'alternatives': [\n      '@throws NullPointerException if either of the parameters is null',\n      '@throws NullPointerException if one of the parameters is null',\n      '@throws NullPointerException if any parameter is null',\n      '@throws NullPointerException if any argument is null',\n      '@throws NullPointerException if any parameter value is null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if the collection is null',\n    'alternatives': [\n      '@throws NullPointerException if the provided collection is null',\n      '@throws NullPointerException if the input collection is null',\n      '@throws NullPointerException if collection parameter is null',\n      '@throws NullPointerException if provided collection is null',\n      '@throws NullPointerException if the specified collection is null'\n    ]\n  },\n  {\n    'tag': '@param collection the collection to synchronize, must not be null',\n    'alternatives': [\n      '@param collection the collection to make thread-safe, must not be null',\n      '@param collection the collection to ensure synchronization, must not be null',\n      '@param collection the collection to synchronize access for, must not be null',\n      '@param collection the collection to apply synchronization on, must not be null',\n      '@param collection the collection to guard with synchronization, must not be null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if the collection is null',\n    'alternatives': [\n      '@throws NullPointerException if the provided collection is null',\n      '@throws NullPointerException if the input collection is null',\n      '@throws NullPointerException if collection parameter is null',\n      '@throws NullPointerException if provided collection is null',\n      '@throws NullPointerException if the specified collection is null'\n    ]\n  },\n  {\n    'tag': '@param collection the collection to make unmodifiable, must not be null',\n    'alternatives': [\n      '@param collection the collection to create an unmodifiable view of, must not be null',\n      '@param collection the collection to convert to an unmodifiable collection, must not be null',\n      '@param collection the collection to make read-only, must not be null',\n      '@param collection the collection to transform into an unmodifiable collection, must not be null',\n      '@param collection the collection to wrap with unmodifiable behavior, must not be null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if the Collection is null',\n    'alternatives': [\n      '@throws NullPointerException if the provided Collection is null',\n      '@throws NullPointerException if the input Collection is null',\n      '@throws NullPointerException if Collection parameter is null',\n      '@throws NullPointerException if provided Collection is null',\n      '@throws NullPointerException if the specified Collection is null'\n    ]\n  },\n  {\n    'tag': '@param collection the collection to predicate, must not be null',\n    'alternatives': [\n      '@param collection the collection to filter, must not be null',\n      '@param collection the collection to apply the predicate on, must not be null',\n      '@param collection the collection to check with the predicate, must not be null',\n      '@param collection the collection to evaluate the predicate, must not be null',\n      '@param collection the collection to test the predicate against, must not be null'\n    ]\n  },\n  {\n    'tag': '@param predicate the predicate for the collection, must not be null',\n    'alternatives': [\n      '@param predicate the condition for the collection, must not be null',\n      '@param predicate the filter for the collection, must not be null',\n      '@param predicate the test for the collection, must not be null',\n      '@param predicate the function for the collection, must not be null',\n      '@param predicate the criterion for the collection, must not be null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if the Collection or Transformer is null',\n    'alternatives': [\n      '@throws NullPointerException if the provided Collection or Transformer is null',\n      '@throws NullPointerException if the input Collection or Transformer is null',\n      '@throws NullPointerException if Collection or Transformer parameter is null',\n      '@throws NullPointerException if provided Collection or Transformer is null',\n      '@throws NullPointerException if the specified Collection or Transformer is null'\n    ]\n  },\n  {\n    'tag': '@param collection the collection to predicate, must not be null',\n    'alternatives': [\n      '@param collection the collection to filter, must not be null',\n      '@param collection the collection to apply the predicate on, must not be null',\n      '@param collection the collection to check with the predicate, must not be null',\n      '@param collection the collection to evaluate the predicate, must not be null',\n      '@param collection the collection to test the predicate against, must not be null'\n    ]\n  },\n  {\n    'tag': '@param transformer the transformer for the collection, must not be null',\n    'alternatives': [\n      '@param transformer the function for the collection, must not be null',\n      '@param transformer the converter for the collection, must not be null',\n      '@param transformer the mapper for the collection, must not be null',\n      '@param transformer the operation for the collection, must not be null',\n      '@param transformer the modifier for the collection, must not be null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if collection is null',\n    'alternatives': [\n      '@throws NullPointerException if the collection is null',\n      '@throws NullPointerException if the provided collection is null',\n      '@throws NullPointerException if the input collection is null',\n      '@throws NullPointerException if the specified collection is null',\n      '@throws NullPointerException if the collection parameter is null'\n    ]\n  },\n  {\n    'tag': '@throws UnsupportedOperationException always',\n    'alternatives': [\n      '@throws UnsupportedOperationException in any case',\n      '@throws UnsupportedOperationException under any circumstance',\n      '@throws UnsupportedOperationException without exception',\n      '@throws UnsupportedOperationException without fail',\n      '@throws UnsupportedOperationException inevitably'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if list is null',\n    'alternatives': [\n      '@throws NullPointerException if the list is null',\n      '@throws NullPointerException if the provided list is null',\n      '@throws NullPointerException if the input list is null',\n      '@throws NullPointerException if the specified list is null',\n      '@throws NullPointerException if the list parameter is null'\n    ]\n  },\n  {\n    'tag': '@param list the list to decorate, must not be null',\n    'alternatives': [\n      '@param list the list to enhance, must not be null',\n      '@param list the list to modify, must not be null',\n      '@param list the list to extend, must not be null',\n      '@param list the list to wrap, must not be null',\n      '@param list the list to enrich, must not be null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if set is null',\n    'alternatives': [\n      '@throws NullPointerException if the set is null',\n      '@throws NullPointerException if the provided set is null',\n      '@throws NullPointerException if the input set is null',\n      '@throws NullPointerException if the specified set is null',\n      '@throws NullPointerException if the set parameter is null'\n    ]\n  },\n  {\n    'tag': '@param set the set to decorate, must not be null',\n    'alternatives': [\n      '@param set the set to enhance, must not be null',\n      '@param set the set to modify, must not be null',\n      '@param set the set to extend, must not be null',\n      '@param set the set to wrap, must not be null',\n      '@param set the set to enrich, must not be null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if bag or predicate is null',\n    'alternatives': [\n      '@throws NullPointerException if the bag or predicate is null',\n      '@throws NullPointerException if the provided bag or predicate is null',\n      '@throws NullPointerException if the input bag or predicate is null',\n      '@throws NullPointerException if the specified bag or predicate is null',\n      '@throws NullPointerException if the bag or predicate parameter is null'\n    ]\n  },\n  {\n    'tag': '@param bag the bag to decorate, must not be null',\n    'alternatives': [\n      '@param bag the bag to enhance, must not be null',\n      '@param bag the bag to modify, must not be null',\n      '@param bag the bag to extend, must not be null',\n      '@param bag the bag to wrap, must not be null',\n      '@param bag the bag to enrich, must not be null'\n    ]\n  }\n]"