"output = [\n  {\n    'tag': '@param vertex vertex in the initial graph.',\n    'alternatives': [\n      '@param vertex node in the initial graph.',\n      '@param node vertex in the original graph.',\n      '@param node vertex in the graph initially.'\n    ]\n  },\n  {\n    'tag': '@param vertex vertex in the initial graph.',\n    'alternatives': [\n      '@param vertex node in the initial graph.',\n      '@param node vertex in the original graph.',\n      '@param node vertex in the graph initially.'\n    ]\n  },\n  {\n    'tag': '@param sourceVertex the source vertex',\n    'alternatives': [\n      '@param sourceVertex source node',\n      '@param sourceVertex starting vertex',\n      '@param sourceVertex vertex from which the calculation starts'\n    ]\n  },\n  {\n    'tag': '@param targetVertex the target vertex',\n    'alternatives': [\n      '@param targetVertex destination node',\n      '@param targetVertex ending vertex',\n      '@param targetVertex vertex to reach'\n    ]\n  },\n  {\n    'tag': '@param simplePathsOnly if true, only search simple\\n(non-self-intersecting) paths',\n    'alternatives': [\n      '@param simplePathsOnly if true, look only for basic\\n(non-self-intersecting) paths',\n      '@param simplePathsOnly if set to true, search exclusively for simple\\n(non-self-intersecting) paths',\n      '@param simplePathsOnly if true, search for simple\\n(non-self-intersecting) paths only'\n    ]\n  },\n  {\n    'tag': '@param maxPathLength maximum number of edges to allow in a path (if null,\\nall paths are considered, which may be very slow due to potentially huge\\noutput)',\n    'alternatives': [\n      '@param maxPathLength max number of edges allowed in a path (if null,\\nall paths are considered, which can be slow due to potentially huge\\noutput)',\n      '@param maxPathLength max number of edges allowed in a path (if null,\\nall paths are considered, which might be slow due to potentially huge\\noutput)',\n      '@param maxPathLength maximum number of edges allowed in a path (if null,\\nall paths are considered, which could be slow because of potentially huge\\noutput)'\n    ]\n  },\n  {\n    'tag': '@param sourceVertices the source vertices',\n    'alternatives': [\n      '@param sourceVertices source nodes',\n      '@param sourceVertices starting vertices',\n      '@param sourceVertices vertices from which the calculation starts'\n    ]\n  },\n  {\n    'tag': '@param targetVertices the target vertices',\n    'alternatives': [\n      '@param targetVertices destination nodes',\n      '@param targetVertices ending vertices',\n      '@param targetVertices vertices to reach'\n    ]\n  },\n  {\n    'tag': '@param simplePathsOnly if true, only search simple\\n(non-self-intersecting) paths',\n    'alternatives': [\n      '@param simplePathsOnly if true, look only for basic\\n(non-self-intersecting) paths',\n      '@param simplePathsOnly if set to true, search exclusively for simple\\n(non-self-intersecting) paths',\n      '@param simplePathsOnly if true, search for simple\\n(non-self-intersecting) paths only'\n    ]\n  },\n  {\n    'tag': '@param maxPathLength maximum number of edges to allow in a path (if null,\\nall paths are considered, which may be very slow due to potentially huge\\noutput)',\n    'alternatives': [\n      '@param maxPathLength max number of edges allowed in a path (if null,\\nall paths are considered, which can be slow due to potentially huge\\noutput)',\n      '@param maxPathLength max number of edges allowed in a path (if null,\\nall paths are considered, which might be slow due to potentially huge\\noutput)',\n      '@param maxPathLength maximum number of edges allowed in a path (if null,\\nall paths are considered, which could be slow because of potentially huge\\noutput)'\n    ]\n  },\n  {\n    'tag': '@return list of all paths from the sources to the targets containing no\\nmore than maxPathLength edges',\n    'alternatives': [\n      '@return list of all paths from the sources to the targets, with a maximum of\\nmaxPathLength edges',\n      '@return list of all paths from the sources to the targets that do not exceed\\nmaxPathLength edges',\n      '@return list of all paths from the sources to the targets, with at most\\nmaxPathLength edges'\n    ]\n  },\n  {\n    'tag': '@param targetVertices the target vertices',\n    'alternatives': [\n      '@param targetVertices destination nodes',\n      '@param targetVertices ending vertices',\n      '@param targetVertices vertices to reach'\n    ]\n  },\n  {\n    'tag': '@param maxPathLength maximum number of edges to allow in a path (if null,\\nall edges will be considered, which may be expensive)',\n    'alternatives': [\n      '@param maxPathLength max number of edges allowed in a path (if null,\\nall edges will be considered, which could be costly)',\n      '@param maxPathLength max number of edges allowed in a path (if null,\\nall edges will be considered, which might be expensive)',\n      '@param maxPathLength maximum number of edges allowed in a path (if null,\\nall edges will be considered, which can be expensive)'\n    ]\n  },\n  {\n    'tag': '@return the minimum number of edges in a path from each edge to the\\ntargets, encoded in a Map',\n    'alternatives': [\n      '@return the smallest number of edges in a path from each edge to the\\ntargets, encoded in a Map',\n      '@return the minimum number of edges in a path from each edge to the\\ntargets, stored in a Map',\n      '@return the fewest number of edges in a path from each edge to the\\ntargets, encoded in a Map'\n    ]\n  },\n  {\n    'tag': '@param sourceVertices the source vertices',\n    'alternatives': [\n      '@param sourceVertices source nodes',\n      '@param sourceVertices starting vertices',\n      '@param sourceVertices vertices from which the calculation starts'\n    ]\n  },\n  {\n    'tag': '@param targetVertices the target vertices',\n    'alternatives': [\n      '@param targetVertices destination nodes',\n      '@param targetVertices ending vertices',\n      '@param targetVertices vertices to reach'\n    ]\n  },\n  {\n    'tag': '@param maxPathLength maximum number of edges to allow in a path',\n    'alternatives': [\n      '@param maxPathLength max number of edges allowed in a path',\n      '@param maxPathLength maximum number of edges permitted in a path',\n      '@param maxPathLength max number of edges that can be in a path'\n    ]\n  },\n  {\n    'tag': '@param simplePathsOnly if true, only search simple\\n(non-self-intersecting) paths (if null, all edges will be considered,\\nwhich may be expensive)',\n    'alternatives': [\n      '@param simplePathsOnly if true, look only for basic\\n(non-self-intersecting) paths (if null, all edges will be considered,\\nwhich might be expensive)',\n      '@param simplePathsOnly if set to true, search exclusively for simple\\n(non-self-intersecting) paths (if null, all edges will be considered,\\nwhich can be expensive)',\n      '@param simplePathsOnly if true, search for simple\\n(non-self-intersecting) paths only (if null, all edges will be considered,\\nwhich could be expensive)'\n    ]\n  },\n  {\n    'tag': '@param edgeMinDistancesFromTargets the minimum number of edges in a path\\nto a target through each edge, as computed by {@code\\nedgeMinDistancesBackwards}.',\n    'alternatives': [\n      '@param edgeMinDistancesFromTargets the smallest number of edges in a path from each edge\\nto a target, as calculated by {@code edgeMinDistancesBackwards}.',\n      '@param edgeMinDistancesFromTargets the minimum number of edges in a path from each edge\\nto a target, calculated by {@code edgeMinDistancesBackwards}.',\n      '@param edgeMinDistancesFromTargets the fewest number of edges in a path from each edge\\nto a target, as computed by {@code edgeMinDistancesBackwards}.'\n    ]\n  },\n  {\n    'tag': '@return a List of all GraphPaths from the sources to the targets\\nsatisfying the given constraints',\n    'alternatives': [\n      '@return a List of all GraphPaths from the sources to the targets\\nthat meet the specified requirements',\n      '@return a List including all GraphPaths from the sources to the targets\\nfulfilling the given constraints',\n      '@return a List of all GraphPaths from the sources to the targets\\nthat satisfy the provided constraints'\n    ]\n  },\n  {\n    'tag': '@param edges the edges',\n    'alternatives': [\n      '@param edges the arcs',\n      '@param edges the links',\n      '@param edges the connectivity'\n    ]\n  },\n  {\n    'tag': '@return the corresponding GraphPath',\n    'alternatives': [\n      '@return the associated GraphPath',\n      '@return the related GraphPath',\n      '@return the matching GraphPath'\n    ]\n  },\n  {\n    'tag': '@return <code>true</code> if at least one path has been improved during\\nthe previous pass, <code>false</code> otherwise.',\n    'alternatives': [\n      '@return <code>true</code> if at least one path has been enhanced during\\nthe previous pass, <code>false</code> otherwise.',\n      '@return <code>true</code> if there has been any improvement in at least one path during\\nthe previous pass, <code>false</code> otherwise.',\n      '@return <code>true</code> if there has been any enhancement in at least one path during\\nthe previous pass, <code>false</code> otherwise.'\n    ]\n  },\n  {\n    'tag': '@param endVertex end vertex.',\n    'alternatives': [\n      '@param endVertex final node.',\n      '@param endVertex terminating vertex.',\n      '@param endVertex vertex at the end.'\n    ]\n  },\n  {\n    'tag': '@return list of <code>RankingPathElement</code>, or <code>null</code> of\\nno path exists between the start vertex and the end vertex.',\n    'alternatives': [\n      '@return list of <code>RankingPathElement</code>, or <code>null</code> if\\nthere is no path between the start vertex and the end vertex.',\n      '@return list of <code>RankingPathElement</code>, or <code>null</code> if\\nno path exists between the start vertex and the end vertex.',\n      '@return list of <code>RankingPathElement</code>, or <code>null</code> if\\nthere is no route between the start vertex and the end vertex.'\n    ]\n  }\n]"