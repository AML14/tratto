"[\n  {\n    'tag': '@param expectedSize expected number of elements in the map',\n    'alternatives': [\n      '@param expectedSize expected size of the map',\n      '@param expectedSize number of elements anticipated in the map',\n      '@param expectedSize estimated count of elements in the map',\n      '@param expectedSize expected count of elements in the map',\n      '@param expectedSize number of elements to be stored in the map'\n    ]\n  },\n  {\n    'tag': '@param missingEntries value to return when a missing entry is fetched',\n    'alternatives': [\n      '@param missingEntries the value to be returned when an entry is not found',\n      '@param missingEntries value to be returned if an entry is absent',\n      '@param missingEntries default value for a missing entry',\n      '@param missingEntries the return value when no corresponding entry is found',\n      '@param missingEntries value to be returned when the entry is not present'\n    ]\n  },\n  {\n    'tag': '@param source map to copy',\n    'alternatives': [\n      '@param source original map to be copied',\n      '@param source map object to duplicate',\n      '@param source map to be replicated',\n      '@param source map to be cloned',\n      '@param source map to create a copy from'\n    ]\n  },\n  {\n    'tag': '@param arr Array to scale.',\n    'alternatives': [\n      '@param arr Array to resize.',\n      '@param arr Array to adjust.',\n      '@param arr Array to modify proportionally.',\n      '@param arr Array to change the size.',\n      '@param arr Array to be scaled.'\n    ]\n  },\n  {\n    'tag': '@param val Scalar.',\n    'alternatives': [\n      '@param val Single value.',\n      '@param val Constant factor.',\n      '@param val Numeric scalar.',\n      '@param val Individual element.',\n      '@param val Numeric value.'\n    ]\n  },\n  {\n    'tag': '@return scaled copy of array with each entry multiplied by val.',\n    'alternatives': [\n      '@return array copy with each element scaled by val.',\n      '@return scaled array clone with each entry multiplied by val.',\n      '@return array that is a scaled version of the original with elements multiplied by val.',\n      '@return array with each entry multiplied by val, resulting in a scaled copy.',\n      '@return array with each element multiplied by val, creating a scaled copy.'\n    ]\n  },\n  {\n    'tag': '@param arr Array to scale',\n    'alternatives': [\n      '@param arr Array to resize',\n      '@param arr Array to adjust',\n      '@param arr Array to modify proportionally',\n      '@param arr Array to change the size',\n      '@param arr Array to be scaled'\n    ]\n  },\n  {\n    'tag': '@param val Scalar',\n    'alternatives': [\n      '@param val Single value',\n      '@param val Constant factor',\n      '@param val Numeric scalar',\n      '@param val Individual element',\n      '@param val Numeric value'\n    ]\n  },\n  {\n    'tag': '@param a First term of the addition.',\n    'alternatives': [\n      '@param a First operand of the addition.',\n      '@param a First value for the addition.',\n      '@param a Initial value to add.',\n      '@param a Element to be added.',\n      '@param a First number to be summed.'\n    ]\n  },\n  {\n    'tag': '@param b Second term of the addition.',\n    'alternatives': [\n      '@param b Second operand of the addition.',\n      '@param b Second value for the addition.',\n      '@param b Value to add.',\n      '@param b Element to be added.',\n      '@param b Second number to be summed.'\n    ]\n  },\n  {\n    'tag': '@return a new array {@code r} where {@code r[i] = a[i] + b[i]}.',\n    'alternatives': [\n      '@return a new array {@code r} containing the sum of the corresponding elements of a and b.',\n      '@return a new array {@code r} computed by element-wise addition of a and b.',\n      '@return a new array {@code r} with elements calculated by adding a and b together.',\n      '@return a new array {@code r} resulting from adding the elements of a and b.',\n      '@return a new array {@code r} formed by adding the elements of a and b together.'\n    ]\n  },\n  {\n    'tag': '@throws DimensionMismatchException if the array lengths differ.',\n    'alternatives': [\n      '@throws DimensionMismatchException when the lengths of the arrays are not equal.',\n      '@throws DimensionMismatchException in case of differing array lengths.',\n      '@throws DimensionMismatchException if the size of the arrays are inconsistent.',\n      '@throws DimensionMismatchException if the lengths of supplied arrays do not match.',\n      '@throws DimensionMismatchException if there is a discrepancy in the lengths of the arrays.'\n    ]\n  },\n  {\n    'tag': '@param a First term.',\n    'alternatives': [\n      '@param a First element.',\n      '@param a Initial value.',\n      '@param a First input.',\n      '@param a Starting number.',\n      '@param a First quantity.'\n    ]\n  },\n  {\n    'tag': '@param b Element to be subtracted.',\n    'alternatives': [\n      '@param b Value to subtract.',\n      '@param b Number to deduct.',\n      '@param b Subtraction operand.',\n      '@param b Subtracted value.',\n      '@param b Quantity to be subtracted.'\n    ]\n  },\n  {\n    'tag': '@throws DimensionMismatchException if the array lengths differ.',\n    'alternatives': [\n      '@throws DimensionMismatchException when the lengths of the arrays are not equal.',\n      '@throws DimensionMismatchException in case of differing array lengths.',\n      '@throws DimensionMismatchException if the size of the arrays are inconsistent.',\n      '@throws DimensionMismatchException if the lengths of supplied arrays do not match.',\n      '@throws DimensionMismatchException if there is a discrepancy in the lengths of the arrays.'\n    ]\n  },\n  {\n    'tag': '@param a First factor of the multiplication.',\n    'alternatives': [\n      '@param a First component of the multiplication.',\n      '@param a First value to multiply.',\n      '@param a Initial factor.',\n      '@param a Multiplication operand.',\n      '@param a First number to be multiplied.'\n    ]\n  },\n  {\n    'tag': '@param b Second factor of the multiplication.',\n    'alternatives': [\n      '@param b Second component of the multiplication.',\n      '@param b Second value to multiply.',\n      '@param b Factor to multiply.',\n      '@param b Multiplication operand.',\n      '@param b Second number to be multiplied.'\n    ]\n  },\n  {\n    'tag': '@return a new array {@code r} where {@code r[i] = a[i] * b[i]}.',\n    'alternatives': [\n      '@return a new array {@code r} containing the product of the corresponding elements of a and b.',\n      '@return a new array {@code r} computed by element-wise multiplication of a and b.',\n      '@return a new array {@code r} with elements calculated by multiplying a and b together.',\n      '@return a new array {@code r} resulting from multiplying the elements of a and b.',\n      '@return a new array {@code r} formed by multiplying the elements of a and b together.'\n    ]\n  },\n  {\n    'tag': '@throws DimensionMismatchException if the array lengths differ.',\n    'alternatives': [\n      '@throws DimensionMismatchException when the lengths of the arrays are not equal.',\n      '@throws DimensionMismatchException in case of differing array lengths.',\n      '@throws DimensionMismatchException if the size of the arrays are inconsistent.',\n      '@throws DimensionMismatchException if the lengths of supplied arrays do not match.',\n      '@throws DimensionMismatchException if there is a discrepancy in the lengths of the arrays.'\n    ]\n  },\n  {\n    'tag': '@param a Numerator of the division.',\n    'alternatives': [\n      '@param a First value in the division.',\n      '@param a Numerator value.',\n      '@param a Dividend.',\n      '@param a First number to be divided.',\n      '@param a Value to be divided.'\n    ]\n  },\n  {\n    'tag': '@param b Denominator of the division.',\n    'alternatives': [\n      '@param b Second value in the division.',\n      '@param b Denominator value.',\n      '@param b Divisor.',\n      '@param b Second number to be divided.',\n      '@param b Value to divide by.'\n    ]\n  },\n  {\n    'tag': '@return a new array {@code r} where {@code r[i] = a[i] / b[i]}.',\n    'alternatives': [\n      '@return a new array {@code r} containing the quotient of the corresponding elements of a and b.',\n      '@return a new array {@code r} computed by element-wise division of a and b.',\n      '@return a new array {@code r} with elements calculated by dividing a by b.',\n      '@return a new array {@code r} resulting from dividing the elements of a by b.',\n      '@return a new array {@code r} formed by dividing the elements of a by b.'\n    ]\n  },\n  {\n    'tag': '@throws DimensionMismatchException if the array lengths differ.',\n    'alternatives': [\n      '@throws DimensionMismatchException when the lengths of the arrays are not equal.',\n      '@throws DimensionMismatchException in case of differing array lengths.',\n      '@throws DimensionMismatchException if the size of the arrays are inconsistent.',\n      '@throws DimensionMismatchException if the lengths of supplied arrays do not match.',\n      '@throws DimensionMismatchException if there is a discrepancy in the lengths of the arrays.'\n    ]\n  },\n  {\n    'tag': '@param p1 the first point',\n    'alternatives': [\n      '@param p1 initial point',\n      '@param p1 starting point',\n      '@param p1 first coordinate',\n      '@param p1 origin of the line',\n      '@param p1 original position'\n    ]\n  },\n  {\n    'tag': '@param p2 the second point',\n    'alternatives': [\n      '@param p2 final point',\n      '@param p2 ending point',\n      '@param p2 second coordinate',\n      '@param p2 termination of the line',\n      '@param p2 end position'\n    ]\n  }\n]"