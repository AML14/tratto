"output = [\n  {\n    'tag': '@param function Function to fit.',\n    'alternatives': [\n      '@param function Function to be fitted.',\n      '@param function Function for fitting.',\n      '@param function Function to apply fit.'\n    ]\n  },\n  {\n    'tag': '@param initialGuess Initial guess. Cannot be {@code null}. Its length must\\nbe consistent with the number of parameters of the {@code function} to fit.',\n    'alternatives': [\n      '@param initialGuess Initial estimation. Must be non-null. Its length must\\nalign with the number of parameters of the {@code function} to fit.',\n      '@param initialGuess Initial approximation. Must not be {@code null}. The number of its elements must\\nmatch the number of parameters in the {@code function} being fitted.',\n      '@param initialGuess Starting point. Must not be null. The length of the array must\\nbe compatible with the number of parameters of the {@code function} to fit.'\n    ]\n  },\n  {\n    'tag': '@param maxIter Maximum number of iterations of the optimization algorithm.',\n    'alternatives': [\n      '@param maxIter Maximum iteration count of the optimization algorithm.',\n      '@param maxIter Maximum number of iterations for the optimization algorithm.',\n      '@param maxIter Maximum iterations allowed for the optimization algorithm.'\n    ]\n  },\n  {\n    'tag': \"@param guess First guess for the coefficients. They must be sorted in\\nincreasing order of the polynomial's degree.\",\n    'alternatives': [\n      \"@param guess Initial estimation for the coefficients. They should be arranged in\\nascending order based on the polynomial's degree.\",\n      \"@param guess Initial approximation of the coefficients. Arrange them in\\nincreasing order of the polynomial's degree.\",\n      \"@param guess Initial approximation for the coefficients. Sort them in\\nascending order according to the degree of the polynomial.\"\n    ]\n  },\n  {\n    'tag': '@param maxEval Maximum number of evaluations of the polynomial.',\n    'alternatives': [\n      '@param maxEval Maximum evaluation count of the polynomial.',\n      '@param maxEval Maximum number of evaluations for the polynomial.',\n      '@param maxEval Maximum evaluations allowed for the polynomial.'\n    ]\n  },\n  {\n    'tag': '@return the coefficients of the polynomial that best fits the observed points.',\n    'alternatives': [\n      '@return the coefficients of the polynomial that provides the best fit for the observed points.',\n      '@return the coefficients of the polynomial that yield the optimal fit to the observed points.',\n      '@return the coefficients of the polynomial that give the best approximation to the observed points.'\n    ]\n  },\n  {\n    'tag': '@throws org.apache.commons.math3.exception.TooManyEvaluationsException if\\nthe number of evaluations exceeds {@code maxEval}.',\n    'alternatives': [\n      '@throws org.apache.commons.math3.exception.TooManyEvaluationsException when\\nthe evaluation count exceeds the maximum allowed value of {@code maxEval}.',\n      '@throws org.apache.commons.math3.exception.TooManyEvaluationsException if\\nthe number of evaluations surpasses the specified limit of {@code maxEval}.',\n      '@throws org.apache.commons.math3.exception.TooManyEvaluationsException if\\nthe evaluation count goes beyond the maximum permissible value of {@code maxEval}.'\n    ]\n  },\n  {\n    'tag': '@throws org.apache.commons.math3.exception.ConvergenceException if the algorithm failed to converge.',\n    'alternatives': [\n      '@throws org.apache.commons.math3.exception.ConvergenceException when the algorithm does not converge.',\n      '@throws org.apache.commons.math3.exception.ConvergenceException if the algorithm fails to converge.',\n      '@throws org.apache.commons.math3.exception.ConvergenceException if the convergence of the algorithm is unsuccessful.'\n    ]\n  },\n  {\n    'tag': \"@param optimizer Optimizer to use for the fitting.\",\n    'alternatives': [\n      \"@param optimizer Optimizer to employ for the fitting process.\",\n      \"@param optimizer Optimizer for performing the fitting.\",\n      \"@param optimizer Optimizer to apply in the fitting procedure.\"\n    ]\n  },\n  {\n    'tag': '@param initialGuess First guess values in the following order:\\n<ul>\\n <li>Amplitude</li>\\n <li>Angular frequency</li>\\n <li>Phase</li>\\n</ul>',\n    'alternatives': [\n      '@param initialGuess Initial approximation values in the order of:\\n<ul>\\n <li>Amplitude</li>\\n <li>Angular frequency</li>\\n <li>Phase</li>\\n</ul>',\n      '@param initialGuess Starting values in the order of:\\n<ul>\\n <li>Amplitude</li>\\n <li>Angular frequency</li>\\n <li>Phase</li>\\n</ul>',\n      '@param initialGuess First estimation values following the order:\\n<ul>\\n <li>Amplitude</li>\\n <li>Angular frequency</li>\\n <li>Phase</li>\\n</ul>'\n    ]\n  },\n  {\n    'tag': '@return the parameters of the harmonic function that best fits the\\nobserved points (in the same order as above).',\n    'alternatives': [\n      '@return the parameters of the harmonic function that yield the optimal fit to the\\nobserved points (in the same order as before).',\n      '@return the parameters of the harmonic function that give the best approximation to the\\nobserved points (in the same order as earlier).',\n      '@return the parameters of the harmonic function that provide the best fit to the\\nobserved points (in the same order as previously).'\n    ]\n  },\n  {\n    'tag': '@return the parameters of the harmonic function that best fits the\\nobserved points (see the other {@link #fit(double[]) fit} method.',\n    'alternatives': [\n      '@return the parameters of the harmonic function that give the best approximation to the\\nobserved points (refer to the other {@link #fit(double[]) fit} method.',\n      '@return the parameters of the harmonic function that provide the best fit to the\\nobserved points (check the other {@link #fit(double[]) fit} method.',\n      '@return the parameters of the harmonic function that yield the optimal fit to the\\nobserved points (see the other {@link #fit(double[]) fit} method.'\n    ]\n  },\n  {\n    'tag': '@throws NumberIsTooSmallException if the sample is too short for the\\nthe first guess to be computed.',\n    'alternatives': [\n      '@throws NumberIsTooSmallException if the sample size is insufficient for the\\ncomputation of the first estimation.',\n      '@throws NumberIsTooSmallException if the sample is not large enough to calculate\\nthe initial approximation.',\n      '@throws NumberIsTooSmallException if the sample size is too small to estimate\\nthe first guess.'\n    ]\n  },\n  {\n    'tag': '@throws ZeroException if the first guess cannot be computed because\\nthe abscissa range is zero.',\n    'alternatives': [\n      '@throws ZeroException if the first estimation fails to compute due to a\\nzero abscissa range.',\n      '@throws ZeroException if the initial approximation cannot be calculated because\\nthe abscissa range is zero.',\n      '@throws ZeroException if the first guess cannot be computed due to a\\nzero abscissa range.'\n    ]\n  },\n  {\n    'tag': '@param optimizer Optimizer to use for the fitting.',\n    'alternatives': [\n      '@param optimizer Optimizer to employ for the fitting process.',\n      '@param optimizer Optimizer for performing the fitting.',\n      '@param optimizer Optimizer to apply in the fitting procedure.'\n    ]\n  },\n  {\n    'tag': '@return the weight of the measurement in the fitting process.',\n    'alternatives': [\n      '@return the weight of the measurement in the fitting procedure.',\n      '@return the weight of the measurement used in the fitting process.',\n      '@return the weight assigned to the measurement in the fitting process.'\n    ]\n  },\n  {\n    'tag': '@return the abscissa of the point.',\n    'alternatives': [\n      '@return the abscissa of the data point.',\n      '@return the x-coordinate of the point.',\n      '@return the horizontal position of the point.'\n    ]\n  },\n  {\n    'tag': '@return the observed value of the function at x.',\n    'alternatives': [\n      '@return the observed function value at x.',\n      '@return the function value as observed at x.',\n      '@return the value of the function observed at x.'\n    ]\n  },\n  {\n    'tag': '@param weight Weight of the measurement in the fitting process.',\n    'alternatives': [\n      '@param weight Measurement weight used in the fitting process.',\n      '@param weight Weight assigned to the measurement in the fitting procedure.',\n      '@param weight Weight of the measurement applied during the fitting process.'\n    ]\n  },\n  {\n    'tag': '@param x Abscissa of the measurement.',\n    'alternatives': [\n      '@param x Measurement abscissa.',\n      '@param x Abscissa value of the measurement.',\n      '@param x Horizontal position of the measurement.'\n    ]\n  },\n  {\n    'tag': '@param y Ordinate of the measurement.',\n    'alternatives': [\n      '@param y Measurement ordinate.',\n      '@param y Ordinate value of the measurement.',\n      '@param y Vertical position of the measurement.'\n    ]\n  },\n  {\n    'tag': '@param params Input parameters.',\n    'alternatives': [\n      '@param params Parameters as input.',\n      '@param params Input values.',\n      '@param params Passed parameters.'\n    ]\n  }\n]"