"[\n  {\n    'tag': '@param sources the sources to concatenate',\n    'alternatives': [\n      '@param sources the sources to merge',\n      '@param sources the sources to combine',\n      '@param sources the sources to join',\n      '@param sources the sources to unify',\n      '@param sources the sources to link'\n    ]\n  },\n  {\n    'tag': '@return a {@code ByteSource} containing the concatenated data',\n    'alternatives': [\n      '@return a {@code ByteSource} containing the merged data',\n      '@return a {@code ByteSource} containing the combined data',\n      '@return a {@code ByteSource} containing the joined data',\n      '@return a {@code ByteSource} containing the unified data',\n      '@return a {@code ByteSource} containing the linked data'\n    ]\n  },\n  {\n    'tag': '@param sources the sources to concatenate',\n    'alternatives': [\n      '@param sources to merge',\n      '@param sources to combine',\n      '@param sources to join',\n      '@param sources to unify',\n      '@param sources to link'\n    ]\n  },\n  {\n    'tag': '@return a {@code ByteSource} containing the concatenated data',\n    'alternatives': [\n      '@return a {@code ByteSource} containing the merged data',\n      '@return a {@code ByteSource} containing the combined data',\n      '@return a {@code ByteSource} containing the joined data',\n      '@return a {@code ByteSource} containing the unified data',\n      '@return a {@code ByteSource} containing the linked data'\n    ]\n  },\n  {\n    'tag': '@return the next two bytes of the input stream, interpreted as an \\n        unsigned 16-bit integer in little-endian byte order',\n    'alternatives': [\n      '@return the next two bytes of the input stream as a 16-bit unsigned integer in little-endian byte order',\n      '@return the next two bytes of the input stream, representing an unsigned 16-bit integer in little-endian byte order',\n      '@return the next two bytes of the input stream, where they are interpreted as an unsigned 16-bit integer in little-endian byte order',\n      '@return the next two bytes of the input stream as an unsigned 16-bit integer in little-endian byte order',\n      '@return the next two bytes of the input stream, decoding them as an unsigned 16-bit integer in little-endian byte order'\n    ]\n  },\n  {\n    'tag': '@throws IOException if an I/O error occurs',\n    'alternatives': [\n      '@throws IOException in case of any I/O error',\n      '@throws IOException if there is an error in I/O',\n      '@throws IOException if any I/O error happens',\n      '@throws IOException if an I/O exception is encountered',\n      '@throws IOException when an I/O error takes place'\n    ]\n  },\n  {\n    'tag': '@return the next four bytes of the input stream, interpreted as an \\n        {@code int} in little-endian byte order',\n    'alternatives': [\n      '@return the next four bytes of the input stream as an {@code int} in little-endian byte order',\n      '@return the next four bytes of the input stream, representing an {@code int} in little-endian byte order',\n      '@return the next four bytes of the input stream, where they are interpreted as an {@code int} in little-endian byte order',\n      '@return the next four bytes of the input stream as a 32-bit integer in little-endian byte order',\n      '@return the next four bytes of the input stream, decoding them as an {@code int} in little-endian byte order'\n    ]\n  },\n  {\n    'tag': '@throws IOException if an I/O error occurs',\n    'alternatives': [\n      '@throws IOException in case of any I/O error',\n      '@throws IOException if there is an error in I/O',\n      '@throws IOException if any I/O error happens',\n      '@throws IOException if an I/O exception is encountered',\n      '@throws IOException when an I/O error takes place'\n    ]\n  },\n  {\n    'tag': '@return the next eight bytes of the input stream, interpreted as a \\n        {@code long} in little-endian byte order',\n    'alternatives': [\n      '@return the next eight bytes of the input stream as a {@code long} in little-endian byte order',\n      '@return the next eight bytes of the input stream, representing a {@code long} in little-endian byte order',\n      '@return the next eight bytes of the input stream, where they are interpreted as a {@code long} in little-endian byte order',\n      '@return the next eight bytes of the input stream as a 64-bit integer in little-endian byte order',\n      '@return the next eight bytes of the input stream, decoding them as a {@code long} in little-endian byte order'\n    ]\n  },\n  {\n    'tag': '@throws IOException if an I/O error occurs',\n    'alternatives': [\n      '@throws IOException in case of any I/O error',\n      '@throws IOException if there is an error in I/O',\n      '@throws IOException if any I/O error happens',\n      '@throws IOException if an I/O exception is encountered',\n      '@throws IOException when an I/O error takes place'\n    ]\n  },\n  {\n    'tag': '@return the next four bytes of the input stream, interpreted as a\\n        {@code float} in little-endian byte order',\n    'alternatives': [\n      '@return the next four bytes of the input stream as a {@code float} in little-endian byte order',\n      '@return the next four bytes of the input stream, representing a {@code float} in little-endian byte order',\n      '@return the next four bytes of the input stream, where they are interpreted as a {@code float} in little-endian byte order',\n      '@return the next four bytes of the input stream as a floating-point value in little-endian byte order',\n      '@return the next four bytes of the input stream, decoding them as a {@code float} in little-endian byte order'\n    ]\n  },\n  {\n    'tag': '@throws IOException if an I/O error occurs',\n    'alternatives': [\n      '@throws IOException in case of any I/O error',\n      '@throws IOException if there is an error in I/O',\n      '@throws IOException if any I/O error happens',\n      '@throws IOException if an I/O exception is encountered',\n      '@throws IOException when an I/O error takes place'\n    ]\n  },\n  {\n    'tag': '@return the next eight bytes of the input stream, interpreted as a\\n        {@code double} in little-endian byte order',\n    'alternatives': [\n      '@return the next eight bytes of the input stream as a {@code double} in little-endian byte order',\n      '@return the next eight bytes of the input stream, representing a {@code double} in little-endian byte order',\n      '@return the next eight bytes of the input stream, where they are interpreted as a {@code double} in little-endian byte order',\n      '@return the next eight bytes of the input stream as a floating-point value in little-endian byte order',\n      '@return the next eight bytes of the input stream, decoding them as a {@code double} in little-endian byte order'\n    ]\n  },\n  {\n    'tag': '@throws IOException if an I/O error occurs',\n    'alternatives': [\n      '@throws IOException in case of any I/O error',\n      '@throws IOException if there is an error in I/O',\n      '@throws IOException if any I/O error happens',\n      '@throws IOException if an I/O exception is encountered',\n      '@throws IOException when an I/O error takes place'\n    ]\n  },\n  {\n    'tag': '@return the next two bytes of the input stream, interpreted as a\\n        {@code short} in little-endian byte order.',\n    'alternatives': [\n      '@return the next two bytes of the input stream as a {@code short} in little-endian byte order',\n      '@return the next two bytes of the input stream, representing a {@code short} in little-endian byte order',\n      '@return the next two bytes of the input stream, where they are interpreted as a {@code short} in little-endian byte order',\n      '@return the next two bytes of the input stream as a 16-bit integer in little-endian byte order',\n      '@return the next two bytes of the input stream, decoding them as a {@code short} in little-endian byte order'\n    ]\n  },\n  {\n    'tag': '@throws IOException if an I/O error occurs.',\n    'alternatives': [\n      '@throws IOException in case of any I/O error',\n      '@throws IOException if there is an error in I/O',\n      '@throws IOException if any I/O error happens',\n      '@throws IOException if an I/O exception is encountered',\n      '@throws IOException when an I/O error takes place'\n    ]\n  },\n  {\n    'tag': '@return the next two bytes of the input stream, interpreted as a \\n        {@code char} in little-endian byte order',\n    'alternatives': [\n      '@return the next two bytes of the input stream as a {@code char} in little-endian byte order',\n      '@return the next two bytes of the input stream, representing a {@code char} in little-endian byte order',\n      '@return the next two bytes of the input stream, where they are interpreted as a {@code char} in little-endian byte order',\n      '@return the next two bytes of the input stream as a character in little-endian byte order',\n      '@return the next two bytes of the input stream, decoding them as a {@code char} in little-endian byte order'\n    ]\n  },\n  {\n    'tag': '@throws IOException if an I/O error occurs',\n    'alternatives': [\n      '@throws IOException in case of any I/O error',\n      '@throws IOException if there is an error in I/O',\n      '@throws IOException if any I/O error happens',\n      '@throws IOException if an I/O exception is encountered',\n      '@throws IOException when an I/O error takes place'\n    ]\n  },\n  {\n    'tag': '@return byte read from input',\n    'alternatives': [\n      '@return read byte from input',\n      '@return byte extracted from input',\n      '@return byte obtained from input',\n      '@return byte retrieved from input',\n      '@return byte acquired from input'\n    ]\n  },\n  {\n    'tag': '@throws IOException if an error is encountered while reading',\n    'alternatives': [\n      '@throws IOException when an error occurs while reading',\n      '@throws IOException in case of any reading error',\n      '@throws IOException if there is an error during the reading process',\n      '@throws IOException if any error is encountered while reading',\n      '@throws IOException if a reading error occurs'\n    ]\n  },\n  {\n    'tag': '@throws EOFException if the end of file (EOF) is encountered.',\n    'alternatives': [\n      '@throws EOFException if the end of file (EOF) is reached',\n      '@throws EOFException in case of reaching the end of file (EOF)',\n      '@throws EOFException if the end of file (EOF) is detected',\n      '@throws EOFException if the end of file (EOF) is found',\n      '@throws EOFException when the end of file (EOF) is encountered'\n    ]\n  },\n  {\n    'tag': '@param in the stream to delegate to',\n    'alternatives': [\n      '@param in the stream to assign to',\n      '@param in the stream to hand over',\n      '@param in the stream to pass to',\n      '@param in the stream to forward to',\n      '@param in the stream to transfer to'\n    ]\n  },\n  {\n    'tag': '@param line the line read from the input, without delimiter',\n    'alternatives': [\n      '@param line the line extracted from the input, without delimiter',\n      '@param line the line obtained from the input, without delimiter',\n      '@param line the line taken from the input, without delimiter',\n      '@param line the line retrieved from the input, without delimiter',\n      '@param line the line acquired from the input, without delimiter'\n    ]\n  },\n  {\n    'tag': '@return true to continue processing, false to stop',\n    'alternatives': [\n      '@return true to proceed with processing, false to halt',\n      '@return true to continue with processing, false to cease',\n      '@return true to keep processing, false to end',\n      '@return true to carry on with processing, false to terminate',\n      '@return true to move forward with processing, false to pause'\n    ]\n  },\n  {\n    'tag': '@throws IOException if an I/O error occurred while deleting the file buffer',\n    'alternatives': [\n      '@throws IOException in case of any I/O error while deleting the file buffer',\n      '@throws IOException if there is an error in I/O while deleting the file buffer',\n      '@throws IOException if any I/O error happens while deleting the file buffer',\n      '@throws IOException if an I/O exception is encountered while deleting the file buffer',\n      '@throws IOException when an I/O error takes place while deleting the file buffer'\n    ]\n  }\n]"