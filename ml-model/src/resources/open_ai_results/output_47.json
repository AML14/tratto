"output=[\n  {\n    'tag': '@param preset All entries will be set with this value.',\n    'alternatives': [\n      '@param preset All entries will be assigned with this value.',\n      '@param preset Each entry will be initialized with this value.',\n      '@param preset This value will be used to set all entries.',\n      '@param preset The value to be applied to all entries.',\n      '@param preset Set all entries to this value.'\n    ]\n  },\n  {\n    'tag': '@param d Array.',\n    'alternatives': [\n      '@param d Array input.',\n      '@param d Input array.',\n      '@param d Array parameter.',\n      '@param d The array.',\n      '@param d The input array.'\n    ]\n  },\n  {\n    'tag': '@param d Data for the new vector.',\n    'alternatives': [\n      '@param d Information for the new vector.',\n      '@param d Input for the new vector.',\n      '@param d The data to create the new vector.',\n      '@param d The data used to construct the new vector.',\n      '@param d Data used to form the new vector.'\n    ]\n  },\n  {\n    'tag': '@param copyArray if {@code true}, the input array will be copied,\\notherwise it will be referenced.',\n    'alternatives': [\n      '@param copyArray if the value is {@code true}, the input array will be duplicated, otherwise it will be referred to.',\n      '@param copyArray determines whether the input array should be duplicated ({@code true}) or referenced ({@code false}).',\n      '@param copyArray specifies whether the input array should be replicated or referenced.',\n      '@param copyArray A flag indicating if the input array should be duplicated or referenced.',\n      '@param copyArray If set to {@code true}, the input array will be duplicated; otherwise, it will be referred to.'\n    ]\n  },\n  {\n    'tag': '@param d Array.',\n    'alternatives': [\n      '@param d Input array.',\n      '@param d Array parameter.',\n      '@param d Array to consider.',\n      '@param d The given array.',\n      '@param d The array to use.'\n    ]\n  },\n  {\n    'tag': '@param pos Position of first entry.',\n    'alternatives': [\n      '@param pos Position of the initial entry.',\n      '@param pos Index of the first element.',\n      '@param pos Initial entry position.',\n      '@param pos Index of the starting element.',\n      '@param pos The position of the first entry.'\n    ]\n  },\n  {\n    'tag': '@param size Number of entries to copy.',\n    'alternatives': [\n      '@param size Number of entries to duplicate.',\n      '@param size Number of elements to replicate.',\n      '@param size Amount of entries to clone.',\n      '@param size Count of entries to replicate.',\n      '@param size The number of entries to make a copy of.'\n    ]\n  },\n  {\n    'tag': '@throws NumberIsTooLargeException if the size of {@code d} is less\\nthan {@code pos + size}.',\n    'alternatives': [\n      '@throws NumberIsTooLargeException if the length of {@code d} is smaller than {@code pos + size}.',\n      '@throws NumberIsTooLargeException if the size of the array {@code d} is not greater than or equal to the sum of {@code pos} and {@code size}.',\n      '@throws NumberIsTooLargeException when the size of array {@code d} is less than {@code pos + size}.',\n      '@throws NumberIsTooLargeException if the size of the array {@code d} is less than or equal to {@code pos + size}.',\n      '@throws NumberIsTooLargeException if the {@code d} array size is smaller than the sum of {@code pos} and {@code size}.'\n    ]\n  },\n  {\n    'tag': '@param net Network.',\n    'alternatives': [\n      '@param net Computational network.',\n      '@param net Neural network.',\n      '@param net The network.',\n      '@param net The computation structure.',\n      '@param net The neural network.'\n    ]\n  },\n  {\n    'tag': '@param features Training data.',\n    'alternatives': [\n      '@param features Input data for training.',\n      '@param features Data set for training.',\n      '@param features The training dataset.',\n      '@param features The data used for training.',\n      '@param features The samples for training.'\n    ]\n  },\n  {\n    'tag': '@return absolute accuracy',\n    'alternatives': [\n      '@return the absolute precision',\n      '@return the accuracy in absolute terms',\n      '@return the precise value',\n      '@return the absolute error',\n      '@return the exact accuracy'\n    ]\n  },\n  {\n    'tag': '@return relative accuracy',\n    'alternatives': [\n      '@return the relative precision',\n      '@return the accuracy in relative terms',\n      '@return the proportionate value',\n      '@return the relative error',\n      '@return the exact relative accuracy'\n    ]\n  },\n  {\n    'tag': '@return function accuracy',\n    'alternatives': [\n      '@return the accuracy of the function',\n      '@return the precision of the function',\n      '@return the goodness of fit',\n      '@return the exact accuracy of the function',\n      '@return the exact precision of the function'\n    ]\n  },\n  {\n    'tag': '@param maxEval Maximum number of evaluations.',\n    'alternatives': [\n      '@param maxEval Maximum count of evaluations.',\n      '@param maxEval Maximum number of function evaluations.',\n      '@param maxEval The maximum number of evaluations.',\n      '@param maxEval The maximum count of iterations.',\n      '@param maxEval The maximum number of steps.'\n    ]\n  },\n  {\n    'tag': '@param f Function to solve.',\n    'alternatives': [\n      '@param f The function being solved.',\n      '@param f The target function.',\n      '@param f The function to find a solution for.',\n      '@param f The function to be solved.',\n      '@param f The function under consideration.'\n    ]\n  },\n  {\n    'tag': '@param min Lower bound for the interval.',\n    'alternatives': [\n      '@param min The lower limit of the interval.',\n      '@param min The smallest value of the range.',\n      '@param min The minimum value for the range.',\n      '@param min The starting point of the interval.',\n      '@param min The smallest value of the domain.'\n    ]\n  },\n  {\n    'tag': '@param max Upper bound for the interval.',\n    'alternatives': [\n      '@param max The upper limit of the interval.',\n      '@param max The largest value of the range.',\n      '@param max The maximum value for the range.',\n      '@param max The endpoint of the interval.',\n      '@param max The largest value of the domain.'\n    ]\n  },\n  {\n    'tag': '@param allowedSolution The kind of solutions that the root-finding algorithm may\\naccept as solutions.',\n    'alternatives': [\n      '@param allowedSolution The acceptable type of solutions for the root-finding algorithm.',\n      '@param allowedSolution The possible solutions that the root-finding algorithm can accept.',\n      '@param allowedSolution The type of solutions that the root-finding algorithm can consider valid.',\n      '@param allowedSolution Specifies the valid solutions for the root-finding algorithm.',\n      '@param allowedSolution The solutions that the root-finding algorithm can accept as valid.'\n    ]\n  },\n  {\n    'tag': '@return a value where the function is zero.',\n    'alternatives': [\n      '@return a value that evaluates to zero for the function.',\n      '@return a value that satisfies the function being zero.',\n      '@return a value at which the function evaluates to zero.',\n      '@return a value that makes the function equal to zero.',\n      '@return a value that results in a zero function evaluation.'\n    ]\n  },\n  {\n    'tag': '@throws NoBracketingException if root cannot be bracketed',\n    'alternatives': [\n      '@throws NoBracketingException when it is not possible to find a bracket for the root.',\n      '@throws NoBracketingException if it is impossible to create a bracket for the root.',\n      '@throws NoBracketingException if no bracket can be found for the root.',\n      '@throws NoBracketingException when no bracketing can be achieved for the root.',\n      '@throws NoBracketingException when a bracket cannot be determined for the root.'\n    ]\n  },\n  {\n    'tag': '@param maxEval Maximum number of evaluations.',\n    'alternatives': [\n      '@param maxEval Maximum count of evaluations.',\n      '@param maxEval Maximum number of function evaluations.',\n      '@param maxEval The maximum number of evaluations.',\n      '@param maxEval The maximum count of iterations.',\n      '@param maxEval The maximum number of steps.'\n    ]\n  },\n  {\n    'tag': '@param f Function to solve.',\n    'alternatives': [\n      '@param f The function being solved.',\n      '@param f The target function.',\n      '@param f The function to find a solution for.',\n      '@param f The function to be solved.',\n      '@param f The function under consideration.'\n    ]\n  },\n  {\n    'tag': '@param min Lower bound for the interval.',\n    'alternatives': [\n      '@param min The lower limit of the interval.',\n      '@param min The smallest value of the range.',\n      '@param min The minimum value for the range.',\n      '@param min The starting point of the interval.',\n      '@param min The smallest value of the domain.'\n    ]\n  },\n  {\n    'tag': '@param max Upper bound for the interval.',\n    'alternatives': [\n      '@param max The upper limit of the interval.',\n      '@param max The largest value of the range.',\n      '@param max The maximum value for the range.',\n      '@param max The endpoint of the interval.',\n      '@param max The largest value of the domain.'\n    ]\n  },\n  {\n    'tag': '@param startValue Start value to use.',\n    'alternatives': [\n      '@param startValue Initial value to utilize.',\n      '@param startValue Beginning value to employ.',\n      '@param startValue Value to start with.',\n      '@param startValue The value to commence with.',\n      '@param startValue The initial value to use.'\n    ]\n  }\n]\n"