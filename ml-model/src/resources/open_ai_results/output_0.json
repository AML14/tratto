"[\n  {\n    'tag': '@throws DimensionMismatchException if\\n{@code singletons.length != probabilities.length}',\n    'alternatives': [\n      '@throws DimensionMismatchException if array lengths of singletons and probabilities are not equal.',\n      '@throws DimensionMismatchException if the length of the singletons array is not equal to the length of the probabilities array.',\n      '@throws DimensionMismatchException when the lengths of the singletons and probabilities arrays are not the same.',\n      '@throws DimensionMismatchException if the number of singletons is not equal to the number of probabilities.',\n      '@throws DimensionMismatchException if the sizes of the singletons and probabilities arrays do not match.'\n    ]\n  },\n  {\n    'tag': '@throws NotPositiveException if any of the probabilities are negative.',\n    'alternatives': [\n      '@throws NotPositiveException if any of the probabilities have a negative value.',\n      '@throws NotPositiveException when one or more of the probabilities are less than zero.',\n      '@throws NotPositiveException if there exists a negative probability value.',\n      '@throws NotPositiveException if any of the probabilities are less than or equal to zero.',\n      '@throws NotPositiveException if the probabilities contain any negative values.'\n    ]\n  },\n  {\n    'tag': '@throws NotFiniteNumberException if any of the probabilities are infinite.',\n    'alternatives': [\n      '@throws NotFiniteNumberException if any of the probabilities are infinitely large.',\n      '@throws NotFiniteNumberException when one or more of the probabilities are infinite.',\n      '@throws NotFiniteNumberException if there exists an infinite probability value.',\n      '@throws NotFiniteNumberException if any of the probabilities are not finite.',\n      '@throws NotFiniteNumberException if the probabilities contain any infinite values.'\n    ]\n  },\n  {\n    'tag': '@throws NotANumberException if any of the probabilities are NaN.',\n    'alternatives': [\n      '@throws NotANumberException if any of the probabilities are not a number.',\n      '@throws NotANumberException when one or more of the probabilities are NaN.',\n      '@throws NotANumberException if there exists a NaN probability value.',\n      '@throws NotANumberException if any of the probabilities are invalid numbers.',\n      '@throws NotANumberException if the probabilities contain any NaN values.'\n    ]\n  },\n  {\n    'tag': '@throws MathArithmeticException all of the probabilities are 0.',\n    'alternatives': [\n      '@throws MathArithmeticException if all of the probabilities equal zero.',\n      '@throws MathArithmeticException when all of the probabilities are zero.',\n      '@throws MathArithmeticException if there are no non-zero probabilities.',\n      '@throws MathArithmeticException if all the probabilities are equal to zero.',\n      '@throws MathArithmeticException if none of the probabilities are non-zero.'\n    ]\n  },\n  {\n    'tag': '@param rng random number generator used for sampling',\n    'alternatives': [\n      '@param rng random number generator for sampling purposes',\n      '@param rng random number generator used for random sampling',\n      '@param rng RNG for random number generation during sampling',\n      '@param rng random number generator to use for obtaining samples',\n      '@param rng source of randomness for sampling'\n    ]\n  },\n  {\n    'tag': '@param data input dataset',\n    'alternatives': [\n      '@param data dataset used as input',\n      '@param data the dataset that serves as input',\n      '@param data the input dataset to be processed',\n      '@param data the dataset provided as input',\n      '@param data input data that needs to be processed'\n    ]\n  },\n  {\n    'tag': '@return the location parameter.',\n    'alternatives': [\n      '@return the parameter representing the location.',\n      '@return the value indicating the location.',\n      '@return the location parameter value.',\n      '@return the parameter that describes the location.',\n      '@return the value that denotes the location.'\n    ]\n  },\n  {\n    'tag': '@return the scale parameter.',\n    'alternatives': [\n      '@return the parameter representing the scale.',\n      '@return the value indicating the scale.',\n      '@return the scale parameter value.',\n      '@return the parameter that describes the scale.',\n      '@return the value that denotes the scale.'\n    ]\n  },\n  {\n    'tag': '@param mu location parameter',\n    'alternatives': [\n      '@param mu parameter specifying the location',\n      '@param mu parameter indicating the location',\n      '@param mu value representing the location',\n      '@param mu parameter that describes the location',\n      '@param mu value that denotes the location'\n    ]\n  },\n  {\n    'tag': '@throws NotStrictlyPositiveException if {@code beta <= 0}',\n    'alternatives': [\n      '@throws NotStrictlyPositiveException if beta is less than or equal to zero.',\n      '@throws NotStrictlyPositiveException if the beta value is not positive.',\n      '@throws NotStrictlyPositiveException when the beta parameter is invalid.',\n      '@throws NotStrictlyPositiveException if the value of beta is less than or equal to zero.',\n      '@throws NotStrictlyPositiveException if the beta value is not strictly positive.'\n    ]\n  },\n  {\n    'tag': '@param rng Random number generator',\n    'alternatives': [\n      '@param rng RNG (random number generator)',\n      '@param rng random number generator (RNG)',\n      '@param rng a random number generator',\n      '@param rng generator of random numbers',\n      '@param rng source of random numbers'\n    ]\n  },\n  {\n    'tag': '@param c scale parameter',\n    'alternatives': [\n      '@param c parameter representing the scale',\n      '@param c parameter indicating the scale',\n      '@param c value representing the scale',\n      '@param c parameter that describes the scale',\n      '@param c value that denotes the scale'\n    ]\n  },\n  {\n    'tag': '@return scale parameter of the distribution',\n    'alternatives': [\n      '@return the distribution\\'s scale parameter',\n      '@return the parameter indicating the scale of the distribution',\n      '@return the scale parameter value of the distribution',\n      '@return the parameter that describes the scale of the distribution',\n      '@return the value representing the scale of the distribution'\n    ]\n  },\n  {\n    'tag': '@return location parameter of the distribution',\n    'alternatives': [\n      '@return the distribution\\'s location parameter',\n      '@return the parameter indicating the location of the distribution',\n      '@return the location parameter value of the distribution',\n      '@return the parameter that describes the location of the distribution',\n      '@return the value representing the location of the distribution'\n    ]\n  },\n  {\n    'tag': '@return a copy of the stored point.',\n    'alternatives': [\n      '@return a duplicate of the stored point.',\n      '@return a cloned version of the stored point.',\n      '@return a replica of the stored point.',\n      '@return a copied instance of the stored point.',\n      '@return a new object that is a copy of the stored point.'\n    ]\n  },\n  {\n    'tag': '@return a reference to the internal array storing the point.',\n    'alternatives': [\n      '@return a pointer to the internal array that stores the point.',\n      '@return a link to the internal array holding the point.',\n      '@return a pointer to the stored point\\'s internal array.',\n      '@return a reference to the point\\'s internal array.',\n      '@return a handle to the internal array that contains the point.'\n    ]\n  },\n  {\n    'tag': '@return data transfer object that will be serialized',\n    'alternatives': [\n      '@return a serialized data transfer object',\n      '@return the serialized representation of a data transfer object',\n      '@return the data transfer object that will be serialized',\n      '@return the serialized version of the data transfer object',\n      '@return the object used for transferring data that will be serialized'\n    ]\n  }\n]"