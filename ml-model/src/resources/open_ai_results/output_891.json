"[\n  {\n    \"tag\": \"@param <E> the element type\",\n    \"alternatives\": [\n      \"@param <E> the type of the element\",\n      \"@param <E> the type of object\",\n      \"@param <E> the object type\",\n      \"@param <E> the generic type\",\n      \"@param <E> the type of items\"\n    ]\n  },\n  {\n    \"tag\": \"@param iterator the iterator to decorate\",\n    \"alternatives\": [\n      \"@param iterator the iterator to enhance\",\n      \"@param iterator the decorated iterator\",\n      \"@param iterator the iterator to modify\",\n      \"@param iterator the iterator to wrap\",\n      \"@param iterator the iterator to adorn\"\n    ]\n  },\n  {\n    \"tag\": \"@return a new unmodifiable iterator\",\n    \"alternatives\": [\n      \"@return a fresh immutable iterator\",\n      \"@return a brand new iterator that cannot be modified\",\n      \"@return an iterator that is not modifiable\",\n      \"@return a newly created iterator that cannot be changed\",\n      \"@return an unmodifiable iterator instance\"\n    ]\n  },\n  {\n    \"tag\": \"@param iterator the iterator to decorate\",\n    \"alternatives\": [\n      \"@param iterator the iterator to enhance\",\n      \"@param iterator the decorated iterator\",\n      \"@param iterator the iterator to modify\",\n      \"@param iterator the iterator to wrap\",\n      \"@param iterator the iterator to adorn\"\n    ]\n  },\n  {\n    \"tag\": \"@throws IllegalStateException if iteration has started\",\n    \"alternatives\": [\n      \"@throws IllegalStateException if iteration is already ongoing\",\n      \"@throws IllegalStateException if the iteration has already begun\",\n      \"@throws IllegalStateException if the iteration process has started\",\n      \"@throws IllegalStateException if the iteration is in progress\",\n      \"@throws IllegalStateException if the iteration has commenced\"\n    ]\n  },\n  {\n    \"tag\": \"@param index index of the Iterator to replace\",\n    \"alternatives\": [\n      \"@param index the position of the Iterator to substitute\",\n      \"@param index the index of the Iterator to exchange\",\n      \"@param index the location of the Iterator to swap\",\n      \"@param index the index of the Iterator to replace\",\n      \"@param index the position of the Iterator to substitute\"\n    ]\n  },\n  {\n    \"tag\": \"@param iterator Iterator to place at the given index\",\n    \"alternatives\": [\n      \"@param iterator the Iterator to put at the specified index\",\n      \"@param iterator the Iterator to position at the given index\",\n      \"@param iterator the Iterator to insert at the given index\",\n      \"@param iterator the Iterator to set at the specified index\",\n      \"@param iterator the Iterator to place at the given position\"\n    ]\n  },\n  {\n    \"tag\": \"@throws IndexOutOfBoundsException if index &lt; 0 or index &gt; size()\",\n    \"alternatives\": [\n      \"@throws IndexOutOfBoundsException if the index is less than 0 or greater than size()\",\n      \"@throws IndexOutOfBoundsException if the index is outside the valid range\",\n      \"@throws IndexOutOfBoundsException if index goes beyond the bounds of the container\",\n      \"@throws IndexOutOfBoundsException if the index is not within the valid range\",\n      \"@throws IndexOutOfBoundsException if the index is invalid\"\n    ]\n  },\n  {\n    \"tag\": \"@throws IllegalStateException if iteration has started\",\n    \"alternatives\": [\n      \"@throws IllegalStateException if iteration is already ongoing\",\n      \"@throws IllegalStateException if the iteration has already begun\",\n      \"@throws IllegalStateException if the iteration process has started\",\n      \"@throws IllegalStateException if the iteration is in progress\",\n      \"@throws IllegalStateException if the iteration has commenced\"\n    ]\n  },\n  {\n    \"tag\": \"@return the unmodifiable list of iterators added\",\n    \"alternatives\": [\n      \"@return the list of added iterators that cannot be modified\",\n      \"@return the list of appendable iterators that is not modifiable\",\n      \"@return the list of incorporated iterators that cannot be changed\",\n      \"@return the list of newly added iterators that cannot be modified\",\n      \"@return the list of appended iterators that is unmodifiable\"\n    ]\n  },\n  {\n    \"tag\": \"@return the {@link Comparator}\",\n    \"alternatives\": [\n      \"@return the {@link Comparator} instance\",\n      \"@return the {@link Comparator} object\",\n      \"@return the {@link Comparator} implementation\",\n      \"@return the {@link Comparator} that is used\",\n      \"@return the {@link Comparator} used for comparison\"\n    ]\n  },\n  {\n    \"tag\": \"@param comp the {@link Comparator} to set\",\n    \"alternatives\": [\n      \"@param comp the {@link Comparator} to assign\",\n      \"@param comp the {@link Comparator} to specify\",\n      \"@param comp the {@link Comparator} to apply\",\n      \"@param comp the {@link Comparator} to configure\",\n      \"@param comp the {@link Comparator} to establish\"\n    ]\n  },\n  {\n    \"tag\": \"@throws IllegalStateException if iteration has started\",\n    \"alternatives\": [\n      \"@throws IllegalStateException if iteration is already ongoing\",\n      \"@throws IllegalStateException if the iteration has already begun\",\n      \"@throws IllegalStateException if the iteration process has started\",\n      \"@throws IllegalStateException if the iteration is in progress\",\n      \"@throws IllegalStateException if the iteration has commenced\"\n    ]\n  },\n  {\n    \"tag\": \"@return true if this iterator has remaining elements\",\n    \"alternatives\": [\n      \"@return true if there are remaining elements in this iterator\",\n      \"@return true if the iterator has more elements left\",\n      \"@return true if there are still elements to iterate over\",\n      \"@return true if there are elements remaining in this iterator\",\n      \"@return true if there are elements yet to be traversed in this iterator\"\n    ]\n  },\n  {\n    \"tag\": \"@return the next ordered element\",\n    \"alternatives\": [\n      \"@return the following ordered element\",\n      \"@return the succeeding ordered element\",\n      \"@return the subsequent ordered element\",\n      \"@return the next sorted element\",\n      \"@return the element that comes next in order\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NoSuchElementException if no child iterator has any more elements\",\n    \"alternatives\": [\n      \"@throws NoSuchElementException if none of the child iterators have additional elements\",\n      \"@throws NoSuchElementException if there are no more elements across all child iterators\",\n      \"@throws NoSuchElementException if none of the child iterators contain further elements\",\n      \"@throws NoSuchElementException if there are no elements left in any of the child iterators\",\n      \"@throws NoSuchElementException if none of the child iterators hold any more elements\"\n    ]\n  },\n  {\n    \"tag\": \"@throws IllegalStateException if there is no last returned element, or if\\nthe last returned element has already been removed\",\n    \"alternatives\": [\n      \"@throws IllegalStateException if the last returned element is missing or has been deleted\",\n      \"@throws IllegalStateException if the previous element accessed no longer exists or has been removed\",\n      \"@throws IllegalStateException if there is no previous element returned or if it has been deleted\",\n      \"@throws IllegalStateException if the last element returned is not present or has been removed\",\n      \"@throws IllegalStateException if the last returned element is absent or has already been removed\"\n    ]\n  },\n  {\n    \"tag\": \"@return the index of the iterator that returned the last element\",\n    \"alternatives\": [\n      \"@return the index of the iterator that produced the previous element\",\n      \"@return the index of the iterator that generated the last element\",\n      \"@return the index of the iterator responsible for the latest element\",\n      \"@return the index of the iterator that yielded the preceding element\",\n      \"@return the index position of the iterator that returned the most recent element\"\n    ]\n  },\n  {\n    \"tag\": \"@throws IllegalStateException if there is no last returned element\",\n    \"alternatives\": [\n      \"@throws IllegalStateException if the last returned element is missing\",\n      \"@throws IllegalStateException if the previous element accessed no longer exists\",\n      \"@throws IllegalStateException if there is no previous element returned\",\n      \"@throws IllegalStateException if the last element returned is not present\",\n      \"@throws IllegalStateException if the last returned element is absent\"\n    ]\n  },\n  {\n    \"tag\": \"@return {@code false} iff there was no value to set\",\n    \"alternatives\": [\n      \"@return {@code false} if there was no value available to assign\",\n      \"@return {@code false} if no value was provided for setting\",\n      \"@return {@code false} if there was no value to be assigned\",\n      \"@return {@code false} if there was no value to be set\",\n      \"@return {@code false} if there was no value given to assign\"\n    ]\n  },\n  {\n    \"tag\": \"@throws IllegalStateException if iteration started\",\n    \"alternatives\": [\n      \"@throws IllegalStateException if iteration has already commenced\",\n      \"@throws IllegalStateException if the iteration has already started\",\n      \"@throws IllegalStateException if the iteration process has begun\",\n      \"@throws IllegalStateException if the iteration is already in progress\",\n      \"@throws IllegalStateException if the iteration has been initiated\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NullPointerException if no comparator is set\",\n    \"alternatives\": [\n      \"@throws NullPointerException if the comparator is not set\",\n      \"@throws NullPointerException if the comparator is null\",\n      \"@throws NullPointerException if the comparator is not defined\",\n      \"@throws NullPointerException if no comparator has been set\",\n      \"@throws NullPointerException if the comparator is undefined\"\n    ]\n  },\n  {\n    \"tag\": \"@param initIterCapacity the initial capacity for the internal list of\\n  child iterators\",\n    \"alternatives\": [\n      \"@param initIterCapacity the starting size of the internal list of child iterators\",\n      \"@param initIterCapacity the initial size of the internal list containing child iterators\",\n      \"@param initIterCapacity the initial number of positions reserved for child iterators\",\n      \"@param initIterCapacity the initial capacity of the internal array of child iterators\",\n      \"@param initIterCapacity the initial number of slots allocated for child iterators\"\n    ]\n  },\n  {\n    \"tag\": \"@param a the first child ordered iterator\",\n    \"alternatives\": [\n      \"@param a the initial ordered child iterator\",\n      \"@param a the first sorted child iterator\",\n      \"@param a the primary child iterator in order\",\n      \"@param a the initial child iterator in the sequence\",\n      \"@param a the foremost child ordered iterator\"\n    ]\n  },\n  {\n    \"tag\": \"@param b the second child ordered iterator\",\n    \"alternatives\": [\n      \"@param b the subsequent child ordered iterator\",\n      \"@param b the second sorted child iterator\",\n      \"@param b the secondary child iterator in order\",\n      \"@param b the next child iterator in the sequence\",\n      \"@param b the second child ordered iterator\"\n    ]\n  }\n]"