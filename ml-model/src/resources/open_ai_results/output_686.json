"output = [\n  {\n    'tag': '@throws DimensionMismatchException if the lengths of {@code yval} and\\n{@code xval} (equal to {@code n}, the number of interpolation points)\\ndo not match, or the the arrays {@code xval[0]} ... {@code xval[n]},\\nhave lengths different from {@code dimension}.',\n    'alternatives': [\n      '@throws DimensionMismatchException if the sizes of {@code yval} and\\n{@code xval} (which is equal to {@code n}, the number of interpolation points)\\ndo not match, or the arrays from {@code xval[0]} to {@code xval[n]},\\nhave different lengths than {@code dimension}.',\n      '@throws DimensionMismatchException if the sizes of the arrays {@code yval} and\\n{@code xval} (which are equal to {@code n}, the number of interpolation points)\\nare not the same, or if the arrays {@code xval[0]} ... {@code xval[n]}\\ndiffer in length from {@code dimension}.',\n      '@throws DimensionMismatchException if the lengths of {@code yval} and\\n{@code xval} (equal to {@code n}, the number of interpolation points)\\ndo not match, or if the arrays {@code xval[0]} ... {@code xval[n]}\\nhave lengths different from {@code dimension}.'\n    ]\n  },\n  {\n    'tag': '@param elements Number of surface elements of the microsphere.',\n    'alternatives': [\n      '@param elements Number of surface particles in the microsphere.',\n      '@param elements Count of surface elements on the microsphere.',\n      '@param elements Quantity of surface elements for the microsphere.'\n    ]\n  },\n  {\n    'tag': '@param exponent Exponent used in the power law that computes the\\nweights (distance dimming factor) of the sample data.',\n    'alternatives': [\n      '@param exponent Power used in the power law that calculates the\\nweights (dimming factor) of the sample data.',\n      '@param exponent Exponential value applied in the power law that calculates the\\nweights (dimming factor) of the sample data.',\n      '@param exponent Value of the exponent used in the power law that computes the\\nweights (dimming factor) of the sample data.'\n    ]\n  },\n  {\n    'tag': '@param x the first number',\n    'alternatives': [\n      '@param x the initial number',\n      '@param x the first value',\n      '@param x the primary number'\n    ]\n  },\n  {\n    'tag': '@param y the second number',\n    'alternatives': [\n      '@param y the second value',\n      '@param y the secondary number',\n      '@param y the next number'\n    ]\n  },\n  {\n    'tag': '@param eps the amount of error to allow when checking for equality',\n    'alternatives': [\n      '@param eps the permissible error amount for equality checking',\n      '@param eps the tolerance for error when checking for equality',\n      '@param eps the error threshold to use for equality checking'\n    ]\n  },\n  {\n    'tag': '@return <ul><li>0 if  {@link #equals(double, double, double) equals(x, y, eps)}</li>\\n      <li>&lt; 0 if !{@link #equals(double, double, double) equals(x, y, eps)} &amp;&amp; x &lt; y</li>\\n      <li>> 0 if !{@link #equals(double, double, double) equals(x, y, eps)} &amp;&amp; x > y or\\n      either argument is NaN</li></ul>',\n    'alternatives': [\n      '@return <ul><li>0 if  {@link #equals(double, double, double) equals(x, y, eps)}</li>\\n      <li>&lt; 0 if the values of x and y are not equal within the allowed error threshold eps, and x is less than y</li>\\n      <li>> 0 if the values of x and y are not equal within the allowed error threshold eps, and x is greater than y or\\n      if either x or y is NaN</li></ul>',\n      '@return <ul><li>0 if the values of x and y are equal, considering an acceptable error of eps</li>\\n      <li>&lt; 0 if the values of x and y are not equal within the allowed error threshold eps, and x is less than y</li>\\n      <li>> 0 if the values of x and y are not equal within the allowed error threshold eps, and x is greater than y or if either x or y is NaN</li></ul>',\n      '@return <ul><li>0 if both x and y are equal within the allowable error margin eps as determined by the {@link #equals(double, double, double) equals(x, y, eps)} method</li>\\n      <li>&lt; 0 if x is not equal to y within the allowable error margin eps as determined by the {@link #equals(double, double, double) equals(x, y, eps)} method and x is less than y</li>\\n      <li>> 0 if x is not equal to y within the allowable error margin eps as determined by the {@link #equals(double, double, double) equals(x, y, eps)} method and x is greater than y, or if either x or y is NaN</li></ul>'\n    ]\n  },\n  {\n    'tag': '@param x first value',\n    'alternatives': [\n      '@param x initial value',\n      '@param x primary value',\n      '@param x starting value'\n    ]\n  },\n  {\n    'tag': '@param y second value',\n    'alternatives': [\n      '@param y second value',\n      '@param y secondary value',\n      '@param y next value'\n    ]\n  },\n  {\n    'tag': '@return {@code true} if the values are equal.',\n    'alternatives': [\n      '@return {@code true} if the values are the same.',\n      '@return {@code true} if the values match.',\n      '@return {@code true} if the values are identical.'\n    ]\n  },\n  {\n    'tag': '@param x first value',\n    'alternatives': [\n      '@param x first value',\n      '@param x initial value',\n      '@param x primary value'\n    ]\n  },\n  {\n    'tag': '@param y second value',\n    'alternatives': [\n      '@param y second value',\n      '@param y secondary value',\n      '@param y next value'\n    ]\n  },\n  {\n    'tag': '@return {@code true} if the values are equal or both are NaN.',\n    'alternatives': [\n      '@return {@code true} if the values are equal or if both are NaN.',\n      '@return {@code true} if the values are the same or both are NaN.',\n      '@return {@code true} if the values match or if they are both NaN.'\n    ]\n  },\n  {\n    'tag': '@param x first value',\n    'alternatives': [\n      '@param x first value',\n      '@param x initial value',\n      '@param x primary value'\n    ]\n  },\n  {\n    'tag': '@param y second value',\n    'alternatives': [\n      '@param y second value',\n      '@param y secondary value',\n      '@param y next value'\n    ]\n  },\n  {\n    'tag': '@param eps the amount of absolute error to allow.',\n    'alternatives': [\n      '@param eps the allowable absolute error amount.',\n      '@param eps the maximum absolute error allowed.',\n      '@param eps the absolute error threshold.'\n    ]\n  },\n  {\n    'tag': '@return {@code true} if the values are equal or within range of each other.',\n    'alternatives': [\n      '@return {@code true} if the values are the same or close to each other.',\n      '@return {@code true} if the values are within an acceptable range of each other.',\n      '@return {@code true} if the values fall within a specified range of each other.'\n    ]\n  },\n  {\n    'tag': '@param x first value',\n    'alternatives': [\n      '@param x first value',\n      '@param x initial value',\n      '@param x primary value'\n    ]\n  },\n  {\n    'tag': '@param y second value',\n    'alternatives': [\n      '@param y second value',\n      '@param y secondary value',\n      '@param y next value'\n    ]\n  },\n  {\n    'tag': '@param eps the amount of absolute error to allow.',\n    'alternatives': [\n      '@param eps the allowable absolute error amount.',\n      '@param eps the maximum absolute error allowed.',\n      '@param eps the absolute error threshold.'\n    ]\n  },\n  {\n    'tag': '@return {@code true} if the values are equal or within range of each other,\\nor both are NaN.',\n    'alternatives': [\n      '@return {@code true} if the values are the same or close to each other, or if both are NaN.',\n      '@return {@code true} if the values are within an acceptable range of each other, or if both are NaN.',\n      '@return {@code true} if the values fall within a specified range of each other, or if both are NaN.'\n    ]\n  }\n]"