"output = [\n  {\n    'tag': '@param region1 first region (will be unusable after the operation as\\nparts of it will be reused in the new region)',\n    'alternatives': [\n      '@param region1 initial region (will not be usable anymore after the operation since\\nsome parts will be reused in the new region)',\n      '@param region1 the first region (will become unusable after the operation as\\nsome parts will be reused in the new region)',\n      '@param region1 the original region (will be no longer usable after the operation\\nas certain parts will be reused in the new region)',\n      '@param region1 first region (not usable anymore after the operation as\\nsome parts will be reused in the new region)',\n      '@param region1 the starting region (will be unusable after the operation\\nas portions of it will be reused in the new region)'\n    ]\n  },\n  {\n    'tag': '@param region2 second region (will be unusable after the operation as\\nparts of it will be reused in the new region)',\n    'alternatives': [\n      '@param region2 next region (will no longer be usable after the operation as\\nsome parts will be reused in the new region)',\n      '@param region2 the second region (will become unusable after the operation as\\nsome parts will be reused in the new region)',\n      '@param region2 the subsequent region (will be no longer usable after the operation\\nas certain parts will be reused in the new region)',\n      '@param region2 second region (not usable anymore after the operation as\\nsome parts will be reused in the new region)',\n      '@param region2 the following region (will be unusable after the operation\\nas portions of it will be reused in the new region)'\n    ]\n  },\n  {\n    'tag': '@return a new region, result of {@code region1 minus region2}',\n    'alternatives': [\n      '@return a new region obtained from subtracting region2 from region1',\n      '@return the resulting region after subtracting region2 from region1',\n      '@return a new region that is the difference between region1 and region2',\n      '@return the new region that is the result of subtracting region2 from region1',\n      '@return a new region representing the outcome of subtracting region2 from region1'\n    ]\n  },\n  {\n    'tag': '@param region region to complement, it will not modified, a new\\nregion independent region will be built',\n    'alternatives': [\n      '@param region region to complement, it will not be modified. A new\\nindependent region will be constructed.',\n      '@param region region to complement, it will remain unaltered. A new\\nindependent region will be created.',\n      '@param region region to complement, no modifications will be made. A new\\nindependent region will be generated.',\n      '@param region region to complement, it will be unchanged. A new\\nindependent region will be formed.',\n      '@param region region to complement, it will not be modified. A new\\nindependent region will be formed.'\n    ]\n  },\n  {\n    'tag': '@return a new region, complement of the specified one',\n    'alternatives': [\n      '@return a new region that is the opposite of the specified one',\n      '@return the complement of the specified region in a new form',\n      '@return a new region which complements the specified one',\n      '@return the new region that is the inverse of the specified one',\n      '@return a new region that is the reverse of the specified region'\n    ]\n  },\n  {\n    'tag': '@param node current node of the original tree',\n    'alternatives': [\n      '@param node current node in the original tree',\n      '@param node the current node from the original tree',\n      '@param node node representing the current position in the original tree',\n      '@param node current node within the original tree',\n      '@param node the node that is currently being examined in the original tree'\n    ]\n  },\n  {\n    'tag': '@return new tree, complement of the node',\n    'alternatives': [\n      '@return a new tree that is the inverse of the node',\n      '@return new tree which complements the specified node',\n      '@return a new tree that serves as the opposite of the node',\n      '@return the new tree that is the complement of the node',\n      '@return new tree representing the opposite of the node'\n    ]\n  },\n  {\n    'tag': '@param node current node of the original tree',\n    'alternatives': [\n      '@param node current node in the original tree',\n      '@param node the current node from the original tree',\n      '@param node node representing the current position in the original tree',\n      '@param node current node within the original tree',\n      '@param node the node that is currently being examined in the original tree'\n    ]\n  },\n  {\n    'tag': '@param map transformed nodes map',\n    'alternatives': [\n      '@param map map containing the transformed nodes',\n      '@param map map that holds the transformed nodes',\n      '@param map data structure that stores the transformed nodes',\n      '@param map map with the converted nodes',\n      '@param map map of the modified nodes'\n    ]\n  },\n  {\n    'tag': '@return new tree, complement of the node',\n    'alternatives': [\n      '@return a new tree that is the inverse of the node',\n      '@return new tree which complements the specified node',\n      '@return a new tree that serves as the opposite of the node',\n      '@return the new tree that is the complement of the node',\n      '@return new tree representing the opposite of the node'\n    ]\n  },\n  {\n    'tag': '@return size of the boundary',\n    'alternatives': [\n      '@return length of the boundary',\n      '@return the size of the boundary',\n      '@return the dimension of the boundary',\n      '@return the measurement of the boundary',\n      '@return the extent of the boundary'\n    ]\n  },\n  {\n    'tag': '@param element element to insert (silently ignored if null)',\n    'alternatives': [\n      '@param element item to be inserted (ignored silently if null)',\n      '@param element object to be added (silently ignored if null)',\n      '@param element component to be inserted (silently disregarded if null)',\n      '@param element value to be inserted (silently ignored if null)',\n      '@param element item to add (silently ignored if null)'\n    ]\n  },\n  {\n    'tag': '@param element element to delete (silently ignored if null)',\n    'alternatives': [\n      '@param element item to be deleted (ignored silently if null)',\n      '@param element object to be removed (silently ignored if null)',\n      '@param element component to be deleted (silently disregarded if null)',\n      '@param element value to be deleted (silently ignored if null)',\n      '@param element item to remove (silently ignored if null)'\n    ]\n  },\n  {\n    'tag': '@return true if the element was deleted from the tree',\n    'alternatives': [\n      '@return true if the element has been removed from the tree',\n      '@return true if the element was successfully eliminated from the tree',\n      '@return true if the element has been deleted from the tree',\n      '@return true if the element was effectively eliminated from the tree',\n      '@return true if the element was successfully removed from the tree'\n    ]\n  },\n  {\n    'tag': '@return true if the tree is empty',\n    'alternatives': [\n      '@return true if the tree contains no elements',\n      '@return true if the tree has no elements',\n      '@return true if the tree does not have any items',\n      '@return true if the tree is devoid of elements',\n      '@return true if the tree is without any elements'\n    ]\n  },\n  {\n    'tag': '@return number of elements contained in the tree',\n    'alternatives': [\n      '@return count of elements present in the tree',\n      '@return the total number of elements in the tree',\n      '@return the quantity of elements contained in the tree',\n      '@return the number of items held within the tree',\n      '@return the total count of elements in the tree'\n    ]\n  },\n  {\n    'tag': '@param reference reference object (may not be in the tree)',\n    'alternatives': [\n      '@param reference object of reference (may not exist in the tree)',\n      '@param reference object to be used (might not be in the tree)',\n      '@param reference object (might not be present in the tree)',\n      '@param reference object (possibly not part of the tree)',\n      '@param reference object (may not belong to the tree)'\n    ]\n  },\n  {\n    'tag': '@param reference reference object (may not be in the tree)',\n    'alternatives': [\n      '@param reference object of reference (may not exist in the tree)',\n      '@param reference object to be used (might not be in the tree)',\n      '@param reference object (might not be present in the tree)',\n      '@param reference object (possibly not part of the tree)',\n      '@param reference object (may not belong to the tree)'\n    ]\n  },\n  {\n    'tag': '@param minOffset minimal scale of the offset to add to all\\ncomponents (must be greater than the MSBs of all components)',\n    'alternatives': [\n      '@param minOffset minimum magnitude of the offset to be added to\\nall components (must be larger than the most significant bits of all components)',\n      '@param minOffset smallest value for the offset to be added to\\nall components (must be greater than the most significant bits of all components)',\n      '@param minOffset the least possible scale of the offset to be added to\\nall components (must exceed the most significant bits of all components)',\n      '@param minOffset minimum scale of the offset that will be added to all\\ncomponents (must be larger than the most significant bits of all components)',\n      '@param minOffset the smallest magnitude of the offset to add to all\\ncomponents (must be larger than the most significant bits of all components)'\n    ]\n  },\n  {\n    'tag': '@param ot T-uple to compare instance with',\n    'alternatives': [\n      '@param ot T-uple to compare the instance with',\n      '@param ot object of type T-uple to compare with the instance',\n      '@param ot object representing a T-uple to compare with',\n      '@param ot the T-uple that will be compared with the instance',\n      '@param ot the T-uple for comparison with the instance'\n    ]\n  },\n  {\n    'tag': '@return a negative integer if the instance is less than the\\nobject, zero if they are equal, or a positive integer if the\\ninstance is greater than the object',\n    'alternatives': [\n      '@return a negative value if the instance precedes the object,\\nzero if they are equivalent, or a positive value if the\\ninstance follows the object',\n      '@return a negative number if the instance comes before the\\nobject, zero if they are the same, or a positive number if the\\ninstance comes after the object',\n      '@return a negative integer if the instance is earlier than the\\nobject, zero if they are the same, or a positive integer if the\\ninstance is later than the object',\n      '@return a negative integer if the instance is smaller than the\\nobject, zero if they are identical, or a positive integer if the\\ninstance is greater than the object',\n      '@return a negative value if the instance is lower than the\\nobject, zero if they are the same, or a positive value if the\\ninstance is higher than the object'\n    ]\n  },\n  {\n    'tag': '@return array containing the T-uple components',\n    'alternatives': [\n      '@return array that holds the components of the T-uple',\n      '@return an array with the elements of the T-uple',\n      '@return an array containing the parts of the T-uple',\n      '@return array that consists of the T-uple components',\n      '@return array representing the constituents of the T-uple'\n    ]\n  },\n  {\n    'tag': '@param bits binary representation of the double',\n    'alternatives': [\n      '@param bits binary form of the double value',\n      '@param bits binary encoding of the double',\n      '@param bits binary format of the double',\n      '@param bits binary representation of the floating-point number',\n      '@param bits binary sequence that represents the double'\n    ]\n  },\n  {\n    'tag': '@return sign bit (zero if positive, non zero if negative)',\n    'alternatives': [\n      '@return the sign bit (zero if positive, non-zero if negative)',\n      '@return the value of the sign bit (zero for positive, non-zero for negative)',\n      '@return the sign bit value (zero for positive, non-zero for negative)',\n      '@return sign bit information (zero if positive, non-zero if negative)',\n      '@return value indicating the sign bit (zero for positive, non-zero for negative)'\n    ]\n  },\n  {\n    'tag': '@param bits binary representation of the double',\n    'alternatives': [\n      '@param bits binary form of the double value',\n      '@param bits binary encoding of the double',\n      '@param bits binary format of the double',\n      '@param bits binary representation of the floating-point number',\n      '@param bits binary sequence that represents the double'\n    ]\n  }\n]"