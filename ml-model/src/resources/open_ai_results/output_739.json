"output=[{'tag': '@return vertices array',\n  'alternatives': ['@return array of vertices',\n   '@return an array containing the vertices',\n   '@return the array of vertices']},\n {'tag': '@param hyperplaneThickness tolerance below which points are consider to\\nbelong to the hyperplane (which is therefore more a slab)',\n  'alternatives': ['@param hyperplaneThickness tolerance defining the threshold for points\\nregarded as belonging to the hyperplane (which can be seen as a slab)',\n   '@param hyperplaneThickness tolerance that determines which points are considered\\nas belonging to the hyperplane (which may be considered as a slab)',\n   '@param hyperplaneThickness tolerance indicating the threshold below which points\\nare considered to belong to the hyperplane (which can be seen as a slab)']},\n {'tag': '@param vertices vertices of the simple loop boundary',\n  'alternatives': ['@param vertices array of points that form the boundary of the simple loop',\n   '@param vertices array representing the simple loop boundary',\n   '@param vertices array containing the simple loop boundary']},\n {'tag': '@return the BSP tree of the input vertices',\n  'alternatives': ['@return the BSP tree constructed from the given vertices',\n   '@return the BSP tree generated using the provided vertices',\n   '@return the input vertices represented as a BSP tree']},\n {'tag': '@param hyperplaneThickness tolerance below which points are considered to\\nbelong to the hyperplane (which is therefore more a slab)',\n  'alternatives': ['@param hyperplaneThickness tolerance defining the threshold for points\\nregarded as belonging to the hyperplane (which can be seen as a slab)',\n   '@param hyperplaneThickness tolerance that determines which points are considered\\nas belonging to the hyperplane (which may be considered as a slab)',\n   '@param hyperplaneThickness tolerance indicating the threshold below which points\\nare considered to belong to the hyperplane (which can be seen as a slab)']},\n {'tag': '@param node current tree node (it is a leaf node at the beginning\\nof the call)',\n  'alternatives': ['@param node the current tree node (initially a leaf node)',\n   '@param node the tree node passed in (initially a leaf node)',\n   '@param node the current node in the tree (a leaf node at the start)']},\n {'tag': '@param edges list of edges to insert in the cell defined by this node\\n(excluding edges not belonging to the cell defined by this node)',\n  'alternatives': ['@param edges the list of edges to be inserted into the cell defined by this node\\n(edges that do not belong to the cell defined by this node are excluded)',\n   '@param edges list of edges that will be inserted in the cell defined by this node\\n(edges not belonging to the cell defined by this node are excluded)',\n   '@param edges list of edges that should be inserted into the cell defined by this node\\n(edges not belonging to the cell defined by this node should be excluded)']},\n {'tag': '@throws MathIllegalStateException if the tolerance setting does not allow to build\\na clean non-ambiguous boundary',\n  'alternatives': ['@throws MathIllegalStateException if the tolerance chosen does not\\npermit constructing a clean unambiguous boundary',\n   '@throws MathIllegalStateException if the chosen tolerance does not enable\\nthe creation of a clean and unambiguous boundary',\n   '@throws MathIllegalStateException if the tolerance setting does not enable\\nthe construction of a clean and unambiguous boundary']},\n {'tag': '@return boundary of the polygon, organized as an unmodifiable list of loops start vertices.',\n  'alternatives': ['@return the organized boundary of the polygon, represented as an unmodifiable\\nlist of starting vertices for loops',\n   '@return the boundary of the polygon, arranged as an unmodifiable list of starting vertices\\nfor loops',\n   '@return the polygon boundary, structured as an unmodifiable list of starting vertices\\nfor loops']},\n {'tag': '@throws MathIllegalStateException if the tolerance setting does not allow to build\\na clean non-ambiguous boundary',\n  'alternatives': ['@throws MathIllegalStateException if the tolerance chosen does not\\npermit constructing a clean unambiguous boundary',\n   '@throws MathIllegalStateException if the chosen tolerance does not enable\\nthe creation of a clean and unambiguous boundary',\n   '@throws MathIllegalStateException if the tolerance setting does not enable\\nthe construction of a clean and unambiguous boundary']},\n {'tag': '@return a spherical cap enclosing the polygon',\n  'alternatives': ['@return a spherical cap that contains the polygon',\n   '@return a spherical cap that encloses the given polygon',\n   '@return a spherical cap which bounds the polygon']},\n {'tag': '@return list of points known to be strictly in all inside convex cells',\n  'alternatives': ['@return a list of points that are guaranteed to be strictly inside all\\nconvex cells',\n   '@return a list of points that are known to be strictly contained within all\\ninterior convex cells',\n   '@return a list of points that are confirmed to be strictly inside all convex cells']},\n {'tag': '@return list of points known to be strictly in all outside convex cells',\n  'alternatives': ['@return a list of points that are guaranteed to be strictly outside all\\nconvex cells',\n   '@return a list of points that are known to be strictly outside all\\nexterior convex cells',\n   '@return a list of points that are confirmed to be strictly outside all convex cells']},\n {'tag': '@param tolerance below which points are consider to be identical',\n  'alternatives': ['@param tolerance indicating the threshold below which points are\\ndeemed to be identical',\n   '@param tolerance that determines the threshold below which points are considered\\nidentical',\n   '@param tolerance defining the threshold below which points are regarded as\\nidentical']},\n {'tag': '@param pole pole of the hemisphere (the pole is in the inside half)',\n  'alternatives': ['@param pole the pole of the hemisphere (located in the inner half)',\n   '@param pole the pole of the hemisphere (found in the inner half)',\n   '@param pole the pole of the hemisphere (situated in the inner half)']},\n {'tag': '@param tolerance below which points are consider to be identical',\n  'alternatives': ['@param tolerance indicating the threshold below which points are\\nconsidered identical',\n   '@param tolerance that determines the threshold below which points are considered\\nto be identical',\n   '@param tolerance defining the threshold below which points are regarded as\\nidentical']},\n {'tag': '@param center center of the polygon (the center is in the inside half)',\n  'alternatives': ['@param center the center point of the polygon (located in the inner half)',\n   '@param center the center of the polygon (found in the inner half)',\n   '@param center the center of the polygon (situated in the inner half)']},\n {'tag': '@param meridian point defining the reference meridian for first polygon vertex',\n  'alternatives': ['@param meridian point that specifies the reference meridian for the first\\nvertex of the polygon',\n   '@param meridian point used to define the reference meridian for the initial\\nvertex of the polygon',\n   '@param meridian point that establishes the reference meridian for the first\\nvertex of the polygon']},\n {'tag': '@param outsideRadius distance of the vertices to the center',\n  'alternatives': ['@param outsideRadius the distance between the vertices and the center',\n   '@param outsideRadius the distance from the vertices to the center',\n   '@param outsideRadius the distance of the vertices from the center']},\n {'tag': '@param n number of sides of the polygon',\n  'alternatives': ['@param n the number of sides that the polygon has',\n   '@param n the total count of sides in the polygon',\n   '@param n the number of edges present in the polygon']},\n {'tag': '@param tolerance below which points are consider to be identical',\n  'alternatives': ['@param tolerance indicating the threshold below which points are\\ndeemed to be identical',\n   '@param tolerance that determines the threshold below which points are considered\\nidentical',\n   '@param tolerance defining the threshold below which points are regarded as\\nidentical']},\n {'tag': '@param tree inside/outside BSP tree representing the region',\n  'alternatives': ['@param tree the BSP tree that represents the region inside and outside',\n   '@param tree the BSP tree that defines the inside and outside regions',\n   '@param tree the BSP tree representing the inside and outside regions']},\n {'tag': '@param tolerance below which points are consider to be identical',\n  'alternatives': ['@param tolerance indicating the threshold below which points are\\nconsidered identical',\n   '@param tolerance that determines the threshold below which points are considered\\nto be identical',\n   '@param tolerance defining the threshold below which points are regarded as\\nidentical']},\n {'tag': '@param boundary collection of boundary elements, as a\\ncollection of {@link SubHyperplane SubHyperplane} objects',\n  'alternatives': ['@param boundary a collection of boundary elements in the form\\nof {@link SubHyperplane SubHyperplane} objects',\n   '@param boundary a collection of boundary elements represented as a\\ncollection of {@link SubHyperplane SubHyperplane} objects',\n   '@param boundary a collection of boundary elements organized as a collection\\nof {@link SubHyperplane SubHyperplane} objects']},\n {'tag': '@param tolerance below which points are consider to be identical',\n  'alternatives': ['@param tolerance indicating the threshold below which points are\\nconsidered identical',\n   '@param tolerance that determines the threshold below which points are considered\\nto be identical',\n   '@param tolerance defining the threshold below which points are regarded as\\nidentical']}]"