"output = [\n{\n    'tag': '@param defaultValue what to return if the value is null or if the\\n  conversion fails',\n    'alternatives': [\n      '@param defaultValue the value to be returned in case the value is null or if the\\n  conversion fails',\n      '@param defaultValue what should be returned if the value is null or if the\\n  conversion fails',\n      '@param defaultValue the return value in case the value is null or if the\\n  conversion fails',\n      '@param defaultValue what to be returned if the value is null or if the\\n  conversion fails',\n      '@param defaultValue returns the value if it is not null or if the\\n  conversion fails'\n    ]\n},\n{\n    'tag': '@throws NullPointerException if the bundle is null',\n    'alternatives': [\n      '@throws NullPointerException when the bundle is null',\n      '@throws NullPointerException if the bundle contains null',\n      '@throws NullPointerException if the bundle does not have a value',\n      '@throws NullPointerException if the bundle is lacking a value',\n      '@throws NullPointerException if the bundle is without a value'\n    ]\n},\n{\n    'tag': '@param resourceBundle the resource bundle to convert, may not be null',\n    'alternatives': [\n      '@param resourceBundle the resource bundle that needs to be converted, must not be null',\n      '@param resourceBundle the resource bundle that should be converted, cannot be null',\n      '@param resourceBundle the resource bundle to be converted, may not be null',\n      '@param resourceBundle the resource bundle that requires conversion, must not be null',\n      '@param resourceBundle the resource bundle to be transformed, must not be null'\n    ]\n},\n{\n    'tag': '@param out the stream to print to, must not be null',\n    'alternatives': [\n      '@param out the output stream to print to, cannot be null',\n      '@param out the stream from which to print, must not be null',\n      '@param out the destination stream for printing, must not be null',\n      '@param out the stream that will be printed to, must not be null',\n      '@param out the stream to which printing is done, must not be null'\n    ]\n},\n{\n    'tag': '@throws NullPointerException if the map is null',\n    'alternatives': [\n      '@throws NullPointerException when the map is null',\n      '@throws NullPointerException if the map contains null',\n      '@throws NullPointerException if there is no map',\n      '@throws NullPointerException if the map does not have a value',\n      '@throws NullPointerException if the map is without a value'\n    ]\n},\n{\n    'tag': '@param map the map to invert, may not be null',\n    'alternatives': [\n      '@param map the map that needs to be inverted, must not be null',\n      '@param map the map that should be inverted, cannot be null',\n      '@param map the map to be inverted, may not be null',\n      '@param map the map that requires inversion, must not be null',\n      '@param map the map to be transformed into invert format, must not be null'\n    ]\n},\n{\n    'tag': '@param map the map to add to, may not be null',\n    'alternatives': [\n      '@param map the map that needs to be added to, must not be null',\n      '@param map the map that should be added to, cannot be null',\n      '@param map the map to be added to, may not be null',\n      '@param map the map that requires addition, must not be null',\n      '@param map the map to be transformed into the added format, must not be null'\n    ]\n},\n{\n    'tag': '@param value the value, null converted to \"\"',\n    'alternatives': [\n      '@param value the value, null converted to empty string',\n      '@param value the value, null changed to empty string',\n      '@param value the value, null becomes empty string',\n      '@param value the value, null is turned into empty string',\n      '@param value the value, null transformed to empty string'\n    ]\n},\n{\n    'tag': '@throws NullPointerException if map is null',\n    'alternatives': [\n      '@throws NullPointerException when map is null',\n      '@throws NullPointerException if map contains null',\n      '@throws NullPointerException if there is no map',\n      '@throws NullPointerException if map does not have a value',\n      '@throws NullPointerException if map is without a value'\n    ]\n},\n{\n    'tag': '@param map the map to populate, must not be null',\n    'alternatives': [\n      '@param map the map that needs to be populated, must not be null',\n      '@param map the map that should be populated, cannot be null',\n      '@param map the map to be populated, may not be null',\n      '@param map the map that requires population, must not be null',\n      '@param map the map to be transformed into populated format, must not be null'\n    ]\n},\n{\n    'tag': '@param array an array to populate from, null ignored',\n    'alternatives': [\n      '@param array an array to populate from, discard null',\n      '@param array an array to populate from, disregard null',\n      '@param array an array to populate from, null values ignored',\n      '@param array an array to populate from, null elements not considered',\n      '@param array an array to populate from, null entries not counted'\n    ]\n},\n{\n    'tag': '@param map the map to synchronize, must not be null',\n    'alternatives': [\n      '@param map the map that needs to be synchronized, must not be null',\n      '@param map the map that should be synchronized, cannot be null',\n      '@param map the map to be synchronized, may not be null',\n      '@param map the map that requires synchronization, must not be null',\n      '@param map the map to be transformed into synchronized format, must not be null'\n    ]\n},\n{\n    'tag': '@throws NullPointerException if the map is null',\n    'alternatives': [\n      '@throws NullPointerException when the map is null',\n      '@throws NullPointerException if the map contains null',\n      '@throws NullPointerException if there is no map',\n      '@throws NullPointerException if the map does not have a value',\n      '@throws NullPointerException if the map is without a value'\n    ]\n},\n{\n    'tag': '@param map the map to make unmodifiable, must not be null',\n    'alternatives': [\n      '@param map the map that needs to be made unmodifiable, must not be null',\n      '@param map the map that should be made unmodifiable, cannot be null',\n      '@param map the map to be made unmodifiable, may not be null',\n      '@param map the map that requires making unmodifiable, must not be null',\n      '@param map the map to be transformed into unmodifiable format, must not be null'\n    ]\n},\n{\n    'tag': '@throws NullPointerException if the Map is null',\n    'alternatives': [\n      '@throws NullPointerException when the Map is null',\n      '@throws NullPointerException if the Map contains null',\n      '@throws NullPointerException if there is no Map',\n      '@throws NullPointerException if the Map does not have a value',\n      '@throws NullPointerException if the Map is without a value'\n    ]\n},\n{\n    'tag': '@param map the map to predicate, must not be null',\n    'alternatives': [\n      '@param map the map that needs to be checked against the predicate, must not be null',\n      '@param map the map that should be checked according to the predicate, cannot be null',\n      '@param map the map to be checked based on the predicate, may not be null',\n      '@param map the map that requires predicate evaluation, must not be null',\n      '@param map the map to be transformed into predicates format, must not be null'\n    ]\n},\n{\n    'tag': '@param keyPred the predicate for keys, null means no check',\n    'alternatives': [\n      '@param keyPred the predicate for keys, null implies no verification',\n      '@param keyPred the predicate for keys, null indicates no validation',\n      '@param keyPred the predicate for keys, null signifies no evaluation',\n      '@param keyPred the predicate for keys, null denotes no validation',\n      '@param keyPred the predicate for keys, null indicates no scrutiny'\n    ]\n},\n{\n    'tag': '@param valuePred the predicate for values, null means no check',\n    'alternatives': [\n      '@param valuePred the predicate for values, null implies no verification',\n      '@param valuePred the predicate for values, null indicates no validation',\n      '@param valuePred the predicate for values, null signifies no evaluation',\n      '@param valuePred the predicate for values, null denotes no validation',\n      '@param valuePred the predicate for values, null indicates no scrutiny'\n    ]\n},\n{\n    'tag': '@throws NullPointerException if the Map is null',\n    'alternatives': [\n      '@throws NullPointerException when the Map is null',\n      '@throws NullPointerException if the Map contains null',\n      '@throws NullPointerException if there is no Map',\n      '@throws NullPointerException if the Map does not have a value',\n      '@throws NullPointerException if the Map is without a value'\n    ]\n}\n]"