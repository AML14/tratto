"output = [\n  {\n    'tag': '@return a sychronized view of the specified bimap',\n    'alternatives': [\n      '@return a synchronized representation of the specified bimap',\n      '@return a synchronized view of the specified bimap',\n      '@return a synchronized version of the specified bimap',\n      '@return a synchronized bimap',\n      '@return the specified bimap as a synchronized view'\n    ]\n  },\n  {\n    'tag': '@param bimap the bimap for which an unmodifiable view is to be returned',\n    'alternatives': [\n      '@param bimap the bimap to obtain an unmodifiable view for',\n      '@param bimap the bimap that should have an unmodifiable view returned',\n      '@param bimap the bimap from which to retrieve an unmodifiable view',\n      '@param bimap the bimap that requires an unmodifiable view to be returned',\n      '@param bimap the bimap that needs an unmodifiable view to be obtained'\n    ]\n  },\n  {\n    'tag': '@return an unmodifiable view of the specified bimap',\n    'alternatives': [\n      '@return a readonly view of the specified bimap',\n      '@return an unmodifiable representation of the specified bimap',\n      '@return an unmodifiable version of the specified bimap',\n      '@return an unmodifiable bimap',\n      '@return the specified bimap as an unmodifiable view'\n    ]\n  },\n  {\n    'tag': '@param map the navigable map for which an unmodifiable view is to be returned',\n    'alternatives': [\n      '@param map the map to get an unmodifiable view for',\n      '@param map the map that should have an unmodifiable view returned',\n      '@param map the map from which to retrieve an unmodifiable view',\n      '@param map the map that requires an unmodifiable view to be returned',\n      '@param map the map that needs an unmodifiable view to be obtained'\n    ]\n  },\n  {\n    'tag': '@return an unmodifiable view of the specified navigable map',\n    'alternatives': [\n      '@return a readonly view of the specified navigable map',\n      '@return an unmodifiable representation of the specified navigable map',\n      '@return an unmodifiable version of the specified navigable map',\n      '@return an unmodifiable navigable map',\n      '@return the specified navigable map as an unmodifiable view'\n    ]\n  },\n  {\n    'tag': '@param navigableMap the navigable map to be \"wrapped\" in a synchronized\\n   navigable map.',\n    'alternatives': [\n      '@param navigableMap the navigable map to be encapsulated with synchronization',\n      '@param navigableMap the navigable map to be protected with synchronization',\n      '@param navigableMap the navigable map to be synchronized',\n      '@param navigableMap the navigable map to be enclosed in a synchronized navigable map',\n      '@param navigableMap the navigable map to be guarded with synchronization'\n    ]\n  },\n  {\n    'tag': '@return a synchronized view of the specified navigable map.',\n    'alternatives': [\n      '@return a synchronized representation of the specified navigable map',\n      '@return a synchronized view of the specified navigable map',\n      '@return a synchronized version of the specified navigable map',\n      '@return a synchronized navigable map',\n      '@return the specified navigable map as a synchronized view'\n    ]\n  },\n  {\n    'tag': '@param c the delegate (unwrapped) collection of map entries',\n    'alternatives': [\n      '@param c the underlying (unwrapped) collection of map entries',\n      '@param c the original (unwrapped) collection of map entries',\n      '@param c the source (unwrapped) collection of map entries',\n      '@param c the base (unwrapped) collection of map entries',\n      '@param c the primary (unwrapped) collection of map entries'\n    ]\n  },\n  {\n    'tag': '@param o the object that might be contained in {@code c}',\n    'alternatives': [\n      '@param o the object that could be present in {@code c}',\n      '@param o the object that may exist in {@code c}',\n      '@param o the object that possibly exists in {@code c}',\n      '@param o the object that potentially resides in {@code c}',\n      '@param o the object that could potentially be found in {@code c}'\n    ]\n  },\n  {\n    'tag': '@param c the delegate (unwrapped) collection of map entries',\n    'alternatives': [\n      '@param c the underlying (unwrapped) collection of map entries',\n      '@param c the original (unwrapped) collection of map entries',\n      '@param c the source (unwrapped) collection of map entries',\n      '@param c the base (unwrapped) collection of map entries',\n      '@param c the primary (unwrapped) collection of map entries'\n    ]\n  },\n  {\n    'tag': '@param o the object to remove from {@code c}',\n    'alternatives': [\n      '@param o the object that needs to be deleted from {@code c}',\n      '@param o the object that should be removed from {@code c}',\n      '@param o the object that must be taken out from {@code c}',\n      '@param o the object to be eliminated from {@code c}',\n      '@param o the object to be removed from {@code c}'\n    ]\n  },\n  {\n    'tag': '@return {@code true} if {@code c} was changed',\n    'alternatives': [\n      '@return {@code true} if {@code c} has been modified',\n      '@return {@code true} if {@code c} was altered',\n      '@return {@code true} if {@code c} has undergone changes',\n      '@return {@code true} if {@code c} experienced modifications',\n      '@return {@code true} if {@code c} was modified'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if duplicate keys or values are added',\n    'alternatives': [\n      '@throws IllegalArgumentException in case of duplicate keys or values being added',\n      '@throws IllegalArgumentException if there are repeated keys or values added',\n      '@throws IllegalArgumentException if duplicate keys or values are inserted',\n      '@throws IllegalArgumentException when duplicate keys or values are added',\n      '@throws IllegalArgumentException if there are duplicated keys or values added'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if duplicate keys or values are added',\n    'alternatives': [\n      '@throws IllegalArgumentException in case of duplicate keys or values being added',\n      '@throws IllegalArgumentException if there are repeated keys or values added',\n      '@throws IllegalArgumentException if duplicate keys or values are inserted',\n      '@throws IllegalArgumentException when duplicate keys or values are added',\n      '@throws IllegalArgumentException if there are duplicated keys or values added'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if duplicate keys or values are added',\n    'alternatives': [\n      '@throws IllegalArgumentException in case of duplicate keys or values being added',\n      '@throws IllegalArgumentException if there are repeated keys or values added',\n      '@throws IllegalArgumentException if duplicate keys or values are inserted',\n      '@throws IllegalArgumentException when duplicate keys or values are added',\n      '@throws IllegalArgumentException if there are duplicated keys or values added'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if duplicate keys or values are added',\n    'alternatives': [\n      '@throws IllegalArgumentException in case of duplicate keys or values being added',\n      '@throws IllegalArgumentException if there are repeated keys or values added',\n      '@throws IllegalArgumentException if duplicate keys or values are inserted',\n      '@throws IllegalArgumentException when duplicate keys or values are added',\n      '@throws IllegalArgumentException if there are duplicated keys or values added'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if two keys have the same value',\n    'alternatives': [\n      '@throws IllegalArgumentException if two keys share the same value',\n      '@throws IllegalArgumentException if two keys possess the same value',\n      '@throws IllegalArgumentException if two keys hold the same value',\n      '@throws IllegalArgumentException in case of two keys having the same value',\n      '@throws IllegalArgumentException if there are two keys with the same value'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if any key or value in {@code map} is null',\n    'alternatives': [\n      '@throws NullPointerException if any key or value in {@code map} is null',\n      '@throws NullPointerException in case of any null key or value in {@code map}',\n      '@throws NullPointerException if {@code map} contains any null key or value',\n      '@throws NullPointerException when any key or value in {@code map} is null',\n      '@throws NullPointerException if there is any null key or value in {@code map}'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if two keys have the same value or two\\n        values have the same key',\n    'alternatives': [\n      '@throws IllegalArgumentException if two keys share the same value or two\\n        values share the same key',\n      '@throws IllegalArgumentException if two keys possess the same value or two\\n        values possess the same key',\n      '@throws IllegalArgumentException if two keys hold the same value or two\\n        values hold the same key',\n      '@throws IllegalArgumentException in case of two keys having the same value or two\\n        values having the same key',\n      '@throws IllegalArgumentException if there are two keys with the same value or two\\n        values with the same key'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if any key, value, or entry is null',\n    'alternatives': [\n      '@throws NullPointerException if any key, value, or entry is null',\n      '@throws NullPointerException in case of any null key, value, or entry',\n      '@throws NullPointerException if there is any null key, value, or entry',\n      '@throws NullPointerException when any key, value, or entry is null',\n      '@throws NullPointerException if {@code map} contains any null key, value, or entry'\n    ]\n  },\n  {\n    'tag': '@param expectedKeys the expected number of distinct keys',\n    'alternatives': [\n      '@param expectedKeys the anticipated count of unique keys',\n      '@param expectedKeys the estimated number of different keys',\n      '@param expectedKeys the projected amount of distinct keys',\n      '@param expectedKeys the assumed quantity of individual keys',\n      '@param expectedKeys the expected number of separate keys'\n    ]\n  },\n  {\n    'tag': '@param expectedValuesPerKey the expected average number of values per key',\n    'alternatives': [\n      '@param expectedValuesPerKey the anticipated average count of values per key',\n      '@param expectedValuesPerKey the estimated average number of values per key',\n      '@param expectedValuesPerKey the projected average amount of values per key',\n      '@param expectedValuesPerKey the assumed average quantity of values per key',\n      '@param expectedValuesPerKey the expected average number of values for each key'\n    ]\n  },\n  {\n    'tag': '@param multimap the multimap whose contents are copied to this multimap',\n    'alternatives': [\n      '@param multimap the multimap from which the contents will be duplicated into this multimap',\n      '@param multimap the multimap to be replicated into this multimap',\n      '@param multimap the multimap that will serve as the source for the contents in this multimap',\n      '@param multimap the multimap to copy the contents from into this multimap',\n      '@param multimap the multimap that should have its contents copied to this multimap'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if neither range nor the domain has a lower bound, or if\\n    neither has an upper bound',\n    'alternatives': [\n      '@throws IllegalArgumentException if both range and domain lack a lower bound, or if\\n    both lack an upper bound',\n      '@throws IllegalArgumentException in case neither range nor the domain has a lower bound, or if\\n    neither has an upper bound',\n      '@throws IllegalArgumentException if either range or domain has no lower bound, or if\\n    either has no upper bound',\n      '@throws IllegalArgumentException when neither range nor the domain has a lower bound, or if\\n    neither has an upper bound',\n      '@throws IllegalArgumentException if there is no lower bound for either range or the domain, or if\\n    there is no upper bound for either'\n    ]\n  },\n  {\n    'tag': '@throws NoSuchElementException if this range set is {@linkplain #isEmpty() empty}',\n    'alternatives': [\n      '@throws NoSuchElementException if this range set is empty',\n      '@throws NoSuchElementException if this range set has no elements',\n      '@throws NoSuchElementException if there are no elements in this range set',\n      '@throws NoSuchElementException when this range set is empty',\n      '@throws NoSuchElementException if there are no elements in this range set'\n    ]\n  }\n]"