"output = [\n  {\n    'tag': '@throws OutOfRangeException if {@code x} (resp. {@code y}) is outside\\nthe range defined by the boundary values of {@code xval} (resp.\\n{@code yval}).',\n    'alternatives': [\n      '@throws OutOfRangeException if {@code x} (or {@code y}) falls outside the range defined by the boundary values of {@code xval} (or {@code yval}).',\n      '@throws OutOfRangeException if the value of {@code x} (or {@code y}) is beyond the boundary values defined by the range of {@code xval} (or {@code yval}).',\n      '@throws OutOfRangeException if the value of {@code x} (or {@code y}) exceeds the range defined by the boundary values of {@code xval} (or {@code yval}).'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if the internal data were not initialized\\n(cf. {@link #BicubicSplineInterpolatingFunction(double[],double[],double[][],\\n            double[][],double[][],double[][],boolean) constructor}).',\n    'alternatives': [\n      '@throws NullPointerException if the internal data has not been initialized\\n(refer to the {@link #BicubicSplineInterpolatingFunction(double[],double[],double[][],\\n            double[][],double[][],double[][],boolean) constructor}).',\n      '@throws NullPointerException if the internal data is null or uninitialized\\n(see {@link #BicubicSplineInterpolatingFunction(double[],double[],double[][],\\n            double[][],double[][],double[][],boolean) constructor}).',\n      '@throws NullPointerException if the internal data has not been set up\\n(as described in the {@link #BicubicSplineInterpolatingFunction(double[],double[],double[][],\\n            double[][],double[][],double[][],boolean) constructor}).'\n    ]\n  },\n  {\n    'tag': '@param which First index in {@link #partialDerivatives}.',\n    'alternatives': [\n      '@param which The initial index in {@link #partialDerivatives}.',\n      '@param which Represents the first index in {@link #partialDerivatives}.',\n      '@param which Denotes the starting index in {@link #partialDerivatives}.'\n    ]\n  },\n  {\n    'tag': '@param x x-coordinate.',\n    'alternatives': [\n      '@param x The x-coordinate.',\n      '@param x Represents the x-coordinate.',\n      '@param x Denotes the value of the x-coordinate.'\n    ]\n  },\n  {\n    'tag': '@param y y-coordinate.',\n    'alternatives': [\n      '@param y The y-coordinate.',\n      '@param y Represents the y-coordinate.',\n      '@param y Denotes the value of the y-coordinate.'\n    ]\n  },\n  {\n    'tag': '@return the value at point (x, y) of the selected partial derivative.',\n    'alternatives': [\n      '@return The value of the selected partial derivative at point (x, y).',\n      '@return The value of the partial derivative selected at point (x, y).',\n      '@return The partial derivative value selected at point (x, y).'\n    ]\n  },\n  {\n    'tag': '@throws OutOfRangeException if {@code x} (resp. {@code y}) is outside\\nthe range defined by the boundary values of {@code xval} (resp.\\n{@code yval}).',\n    'alternatives': [\n      '@throws OutOfRangeException if {@code x} (or {@code y}) falls outside the range defined by the boundary values of {@code xval} (or {@code yval}).',\n      '@throws OutOfRangeException if the value of {@code x} (or {@code y}) is beyond the boundary values defined by the range of {@code xval} (or {@code yval}).',\n      '@throws OutOfRangeException if the value of {@code x} (or {@code y}) exceeds the range defined by the boundary values of {@code xval} (or {@code yval}).'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if the internal data were not initialized\\n(cf. {@link #BicubicSplineInterpolatingFunction(double[],double[],double[][],\\n            double[][],double[][],double[][],boolean) constructor}).',\n    'alternatives': [\n      '@throws NullPointerException if the internal data has not been initialized\\n(refer to the {@link #BicubicSplineInterpolatingFunction(double[],double[],double[][],\\n            double[][],double[][],double[][],boolean) constructor}).',\n      '@throws NullPointerException if the internal data is null or uninitialized\\n(see {@link #BicubicSplineInterpolatingFunction(double[],double[],double[][],\\n            double[][],double[][],double[][],boolean) constructor}).',\n      '@throws NullPointerException if the internal data has not been set up\\n(as described in the {@link #BicubicSplineInterpolatingFunction(double[],double[],double[][],\\n            double[][],double[][],double[][],boolean) constructor}).'\n    ]\n  },\n  {\n    'tag': '@param c Coordinate.',\n    'alternatives': [\n      '@param c The coordinate.',\n      '@param c Represents the coordinate.',\n      '@param c Denotes the value of the coordinate.'\n    ]\n  },\n  {\n    'tag': '@param val Coordinate samples.',\n    'alternatives': [\n      '@param val Samples of the coordinate.',\n      '@param val Represents the coordinate samples.',\n      '@param val Denotes the values of the coordinate samples.'\n    ]\n  },\n  {\n    'tag': '@return the index in {@code val} corresponding to the interval\\ncontaining {@code c}.',\n    'alternatives': [\n      '@return The index in {@code val} that corresponds to the interval\\ncontaining {@code c}.',\n      '@return The index within {@code val} that corresponds to the interval\\nwhich contains {@code c}.',\n      '@return The interval index within {@code val} that contains {@code c}.'\n    ]\n  },\n  {\n    'tag': '@throws OutOfRangeException if {@code c} is out of the\\nrange defined by the boundary values of {@code val}.',\n    'alternatives': [\n      '@throws OutOfRangeException if {@code c} falls outside the\\nrange defined by the boundary values of {@code val}.',\n      '@throws OutOfRangeException if the value of {@code c} is beyond the\\nrange defined by the boundary values of {@code val}.',\n      '@throws OutOfRangeException if the value of {@code c} exceeds the\\nrange defined by the boundary values of {@code val}.'\n    ]\n  },\n  {\n    'tag': '@param beta List of function values and function partial derivatives\\nvalues.',\n    'alternatives': [\n      '@param beta The list of function values and derivatives values.',\n      '@param beta Represents the list of function values and function partial derivatives.',\n      '@param beta Denotes the values list of function and partial derivatives.'\n    ]\n  },\n  {\n    'tag': '@return the spline coefficients.',\n    'alternatives': [\n      '@return The coefficients of the spline.',\n      '@return The coefficients for the spline.',\n      '@return The spline's coefficients.'\n    ]\n  },\n  {\n    'tag': '@param x Sample values of the x-coordinate, in increasing order.',\n    'alternatives': [\n      '@param x The sample values of the x-coordinate, sorted in ascending order.',\n      '@param x Represents the sample values of the x-coordinate, arranged in ascending order.',\n      '@param x Denotes the values of the x-coordinate samples, in increasing order.'\n    ]\n  },\n  {\n    'tag': '@param key the key to look up',\n    'alternatives': [\n      '@param key The key to search for',\n      '@param key Represents the key to be searched',\n      '@param key Denotes the key to be looked up'\n    ]\n  },\n  {\n    'tag': '@return the value in the Map as a short, <code>0</code> if null map input',\n    'alternatives': [\n      '@return The value in the Map as a short. Returns <code>0</code> if the map input is null.',\n      '@return The value in the Map as a short, unless the map input is null, in which case it returns <code>0</code>.',\n      '@return The value in the Map as a short. If the map input is null, it returns <code>0</code>.'\n    ]\n  },\n  {\n    'tag': '@param <K> the key type',\n    'alternatives': [\n      '@param <K> The type of the key',\n      '@param <K> Represents the key type',\n      '@param <K> Denotes the type of the key'\n    ]\n  },\n  {\n    'tag': '@param map the map to use',\n    'alternatives': [\n      '@param map The map to utilize',\n      '@param map Represents the map to be used',\n      '@param map Denotes the map to be employed'\n    ]\n  },\n  {\n    'tag': '@param key the key to look up',\n    'alternatives': [\n      '@param key The key to search for',\n      '@param key Represents the key to be searched',\n      '@param key Denotes the key to be looked up'\n    ]\n  },\n  {\n    'tag': '@return the value in the Map as an int, <code>0</code> if null map input',\n    'alternatives': [\n      '@return The value in the Map as an integer. Returns <code>0</code> if the map input is null.',\n      '@return The value in the Map as an integer, unless the map input is null, in which case it returns <code>0</code>.',\n      '@return The value in the Map as an integer. If the map input is null, it returns <code>0</code>.'\n    ]\n  },\n  {\n    'tag': '@param <K> the key type',\n    'alternatives': [\n      '@param <K> The type of the key',\n      '@param <K> Represents the key type',\n      '@param <K> Denotes the type of the key'\n    ]\n  },\n  {\n    'tag': '@param map the map to use',\n    'alternatives': [\n      '@param map The map to utilize',\n      '@param map Represents the map to be used',\n      '@param map Denotes the map to be employed'\n    ]\n  },\n  {\n    'tag': '@param key the key to look up',\n    'alternatives': [\n      '@param key The key to search for',\n      '@param key Represents the key to be searched',\n      '@param key Denotes the key to be looked up'\n    ]\n  },\n  {\n    'tag': '@return the value in the Map as a long, <code>0L</code> if null map input',\n    'alternatives': [\n      '@return The value in the Map as a long. Returns <code>0L</code> if the map input is null.',\n      '@return The value in the Map as a long, unless the map input is null, in which case it returns <code>0L</code>.',\n      '@return The value in the Map as a long. If the map input is null, it returns <code>0L</code>.'\n    ]\n  }\n]"