"output = [\n  {\n    'tag': '@return <code>true</code> if the iterator has more elements',\n    'alternatives': [\n      '@return <code>true</code> if there are more elements in the iterator',\n      '@return <code>true</code> if there are additional elements in the iterator',\n      '@return <code>true</code> if the iterator contains more elements',\n      '@return <code>true</code> if there are still elements in the iterator',\n      '@return <code>true</code> if there are further elements in the iterator'\n    ]\n  },\n  {\n    'tag': '@return the next key in the iteration',\n    'alternatives': [\n      '@return the key that follows in the iteration',\n      '@return the key that comes after in the iteration',\n      '@return the key that is next in the iteration',\n      '@return the key that succeeds in the iteration',\n      '@return the key that is to be returned next in the iteration'\n    ]\n  },\n  {\n    'tag': '@throws java.util.NoSuchElementException if the iteration is finished',\n    'alternatives': [\n      '@throws java.util.NoSuchElementException if the iteration has reached its end',\n      '@throws java.util.NoSuchElementException if there are no more elements in the iteration',\n      '@throws java.util.NoSuchElementException if the iteration has been completed',\n      '@throws java.util.NoSuchElementException if the iteration has come to an end',\n      '@throws java.util.NoSuchElementException if the iteration has been concluded'\n    ]\n  },\n  {\n    'tag': '@throws UnsupportedOperationException if remove is not supported by the map',\n    'alternatives': [\n      '@throws UnsupportedOperationException if the map does not support remove operation',\n      '@throws UnsupportedOperationException if the map does not allow remove operation',\n      '@throws UnsupportedOperationException if the map does not permit remove operation',\n      '@throws UnsupportedOperationException if remove operation is not supported by the map',\n      '@throws UnsupportedOperationException if the map does not have support for remove operation'\n    ]\n  },\n  {\n    'tag': '@throws IllegalStateException if <code>next()</code> has not yet been called',\n    'alternatives': [\n      '@throws IllegalStateException if <code>next()</code> has not been invoked yet',\n      '@throws IllegalStateException if <code>next()</code> method has not been called yet',\n      '@throws IllegalStateException if <code>next()</code> has not been previously invoked',\n      '@throws IllegalStateException if <code>next()</code> has not been used yet',\n      '@throws IllegalStateException if <code>next()</code> has not yet been utilized'\n    ]\n  },\n  {\n    'tag': '@throws IllegalStateException if <code>remove()</code> has already been called\\n since the last call to <code>next()</code>',\n    'alternatives': [\n      '@throws IllegalStateException if <code>remove()</code> has been called again since the previous <code>next()</code> call',\n      '@throws IllegalStateException if <code>remove()</code> has been invoked more than once since the last <code>next()</code>',\n      '@throws IllegalStateException if <code>remove()</code> has been utilized multiple times since the previous <code>next()</code>',\n      '@throws IllegalStateException if <code>remove()</code> has already been called after the last <code>next()</code>',\n      '@throws IllegalStateException if <code>remove()</code> has been used more than once since the previous <code>next()</code>'\n    ]\n  },\n  {\n    'tag': '@return the current key',\n    'alternatives': [\n      '@return the key at the present moment',\n      '@return the key that is currently being referred to',\n      '@return the key that is presently being referenced',\n      '@return the key that is currently in focus',\n      '@return the key that is currently selected'\n    ]\n  },\n  {\n    'tag': '@throws IllegalStateException if <code>next()</code> has not yet been called',\n    'alternatives': [\n      '@throws IllegalStateException if <code>next()</code> has not been invoked yet',\n      '@throws IllegalStateException if <code>next()</code> method has not been called yet',\n      '@throws IllegalStateException if <code>next()</code> has not been previously invoked',\n      '@throws IllegalStateException if <code>next()</code> has not been used yet',\n      '@throws IllegalStateException if <code>next()</code> has not yet been utilized'\n    ]\n  },\n  {\n    'tag': '@return the current value',\n    'alternatives': [\n      '@return the value at the present moment',\n      '@return the value that is currently being referred to',\n      '@return the value that is presently being referenced',\n      '@return the value that is currently in focus',\n      '@return the value that is currently selected'\n    ]\n  },\n  {\n    'tag': '@throws IllegalStateException if <code>next()</code> has not yet been called',\n    'alternatives': [\n      '@throws IllegalStateException if <code>next()</code> has not been invoked yet',\n      '@throws IllegalStateException if <code>next()</code> method has not been called yet',\n      '@throws IllegalStateException if <code>next()</code> has not been previously invoked',\n      '@throws IllegalStateException if <code>next()</code> has not been used yet',\n      '@throws IllegalStateException if <code>next()</code> has not yet been utilized'\n    ]\n  },\n  {\n    'tag': '@param value the new value',\n    'alternatives': [\n      '@param value the updated value',\n      '@param value the modified value',\n      '@param value the revised value',\n      '@param value the changed value',\n      '@param value the altered value'\n    ]\n  },\n  {\n    'tag': '@return the previous value',\n    'alternatives': [\n      '@return the value that came before',\n      '@return the value that preceded',\n      '@return the value that was prior',\n      '@return the value that was earlier',\n      '@return the value that was already'\n    ]\n  },\n  {\n    'tag': '@throws UnsupportedOperationException if setValue is not supported by the map',\n    'alternatives': [\n      '@throws UnsupportedOperationException if the map does not support setValue',\n      '@throws UnsupportedOperationException if the map does not allow setValue operation',\n      '@throws UnsupportedOperationException if the map does not permit setValue operation',\n      '@throws UnsupportedOperationException if setValue operation is not supported by the map',\n      '@throws UnsupportedOperationException if the map does not have support for setValue operation'\n    ]\n  },\n  {\n    'tag': '@throws IllegalStateException if <code>next()</code> has not yet been called',\n    'alternatives': [\n      '@throws IllegalStateException if <code>next()</code> has not been invoked yet',\n      '@throws IllegalStateException if <code>next()</code> method has not been called yet',\n      '@throws IllegalStateException if <code>next()</code> has not been previously invoked',\n      '@throws IllegalStateException if <code>next()</code> has not been used yet',\n      '@throws IllegalStateException if <code>next()</code> has not yet been utilized'\n    ]\n  },\n  {\n    'tag': '@throws IllegalStateException if <code>remove()</code> has been called since the\\n last call to <code>next()</code>',\n    'alternatives': [\n      '@throws IllegalStateException if <code>remove()</code> has been invoked after the previous <code>next()</code> call',\n      '@throws IllegalStateException if <code>remove()</code> has already been called since the last <code>next()</code>',\n      '@throws IllegalStateException if <code>remove()</code> has been utilized since the last <code>next()</code> call',\n      '@throws IllegalStateException if <code>remove()</code> has been called again since the previous <code>next()</code>',\n      '@throws IllegalStateException if <code>remove()</code> has been used since the last <code>next()</code> invocation'\n    ]\n  },\n  {\n    'tag': '@return a string version of the iterator',\n    'alternatives': [\n      '@return a textual representation of the iterator',\n      '@return a string representation of the iterator',\n      '@return a string format of the iterator',\n      '@return a textual version of the iterator',\n      '@return a string that represents the iterator'\n    ]\n  },\n  {\n    'tag': '@param map the map to iterate over',\n    'alternatives': [\n      '@param map the map to traverse',\n      '@param map the map to go through',\n      '@param map the map to loop over',\n      '@param map the map to examine',\n      '@param map the map to iterate through'\n    ]\n  },\n  {\n    'tag': '@param <E> the element type',\n    'alternatives': [\n      '@param <E> the type of elements',\n      '@param <E> the type of the element',\n      '@param <E> the specific element type',\n      '@param <E> the kind of elements',\n      '@param <E> the category of elements'\n    ]\n  },\n  {\n    'tag': '@param iterator the iterator to decorate',\n    'alternatives': [\n      '@param iterator the iterator to enhance',\n      '@param iterator the iterator to modify',\n      '@param iterator the iterator to improve',\n      '@param iterator the iterator to customize',\n      '@param iterator the iterator to embellish'\n    ]\n  },\n  {\n    'tag': '@return a new peeking iterator',\n    'alternatives': [\n      '@return a freshly created peeking iterator',\n      '@return a newly generated peeking iterator',\n      '@return a brand new peeking iterator',\n      '@return a newly instantiated peeking iterator',\n      '@return a newly formed peeking iterator'\n    ]\n  },\n  {\n    'tag': '@param item the element to push back to the iterator',\n    'alternatives': [\n      '@param item the element to rewind in the iterator',\n      '@param item the element to move back in the iterator',\n      '@param item the element to go back in the iterator',\n      '@param item the element to reset in the iterator',\n      '@param item the element to backtrack in the iterator'\n    ]\n  },\n  {\n    'tag': '@param iterator the iterator to decorate',\n    'alternatives': [\n      '@param iterator the iterator to enhance',\n      '@param iterator the iterator to modify',\n      '@param iterator the iterator to improve',\n      '@param iterator the iterator to customize',\n      '@param iterator the iterator to embellish'\n    ]\n  },\n  {\n    'tag': '@return true if there is another object that matches the predicate',\n    'alternatives': [\n      '@return true if there is another object that satisfies the condition',\n      '@return true if there is another object that fulfills the predicate',\n      '@return true if there is another object that meets the specified condition',\n      '@return true if there is another object that complies with the predicate',\n      '@return true if there is another object that matches the specified criterion'\n    ]\n  },\n  {\n    'tag': '@return the next object which matches the given predicate',\n    'alternatives': [\n      '@return the next object that satisfies the provided condition',\n      '@return the next object that fulfills the given predicate',\n      '@return the next object that meets the specified condition',\n      '@return the next object that complies with the given predicate',\n      '@return the next object that matches the specified criterion'\n    ]\n  },\n  {\n    'tag': '@throws NoSuchElementException if there are no more elements that\\n match the predicate',\n    'alternatives': [\n      '@throws NoSuchElementException if there are no additional elements that meet the predicate',\n      '@throws NoSuchElementException if there are no more elements that satisfy the condition',\n      '@throws NoSuchElementException if there are no elements left that fulfill the predicate',\n      '@throws NoSuchElementException if there are no more elements that meet the specified criterion',\n      '@throws NoSuchElementException if there are no remaining elements that match the predicate'\n    ]\n  }\n]"