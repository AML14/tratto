"output = [\n  {\n    'tag': '@param f Objective function.',\n    'alternatives': [\n      '@param f Function to be optimized.',\n      '@param f Function that represents the objective.',\n      '@param f The function to optimize.',\n      '@param f The goal function.',\n      '@param f The target function.'\n    ]\n  },\n  {\n    'tag': '@param goalType Optimization type.',\n    'alternatives': [\n      '@param goalType Type of optimization.',\n      '@param goalType Type of goal.',\n      '@param goalType The type of optimization.',\n      '@param goalType The objective type.',\n      '@param goalType The optimization category.'\n    ]\n  },\n  {\n    'tag': '@param optData Optimization data. The following data will be looked for:\\n<ul>\\n <li>{@link InitialGuess}</li>\\n <li>{@link SimpleBounds}</li>\\n</ul>',\n    'alternatives': [\n      '@param optData Data related to the optimization. The following data will be searched for:\\n<ul>\\n <li>{@link InitialGuess}</li>\\n <li>{@link SimpleBounds}</li>\\n</ul>',\n      '@param optData Optimization data. The data to be searched for are as follows:\\n<ul>\\n <li>{@link InitialGuess}</li>\\n <li>{@link SimpleBounds}</li>\\n</ul>',\n      '@param optData Data used in the optimization process. The data being searched for include:\\n<ul>\\n <li>{@link InitialGuess}</li>\\n <li>{@link SimpleBounds}</li>\\n</ul>',\n      '@param optData Optimization data. The following data will be sought after:\\n<ul>\\n <li>{@link InitialGuess}</li>\\n <li>{@link SimpleBounds}</li>\\n</ul>',\n      '@param optData The data used for optimization. The following data will be searched for:\\n<ul>\\n <li>{@link InitialGuess}</li>\\n <li>{@link SimpleBounds}</li>\\n</ul>'\n    ]\n  },\n  {\n    'tag': '@return the point/value pair giving the optimal value of the objective\\nfunction.',\n    'alternatives': [\n      '@return the point/value pair that gives the optimum value of the objective\\nfunction.',\n      '@return the point/value pair that represents the optimal value of the objective\\nfunction.',\n      '@return the point/value pair that provides the optimal value for the objective\\nfunction.',\n      '@return the point/value pair that yields the optimal value of the objective\\nfunction.',\n      '@return the point/value pair that denotes the optimal value of the objective\\nfunction.'\n    ]\n  },\n  {\n    'tag': '@param f Objective function.',\n    'alternatives': [\n      '@param f Function to be optimized.',\n      '@param f Function that represents the objective.',\n      '@param f The function to optimize.',\n      '@param f The goal function.',\n      '@param f The target function.'\n    ]\n  },\n  {\n    'tag': '@param goalType Type of optimization goal: either\\n{@link GoalType#MAXIMIZE} or {@link GoalType#MINIMIZE}.',\n    'alternatives': [\n      '@param goalType The optimization goal type: either\\n{@link GoalType#MAXIMIZE} or {@link GoalType#MINIMIZE}.',\n      '@param goalType Optimization goal type: either\\n{@link GoalType#MAXIMIZE} or {@link GoalType#MINIMIZE}.',\n      '@param goalType Type of optimization target: either\\n{@link GoalType#MAXIMIZE} or {@link GoalType#MINIMIZE}.',\n      '@param goalType The goal type of the optimization: either\\n{@link GoalType#MAXIMIZE} or {@link GoalType#MINIMIZE}.',\n      '@param goalType The type of optimization goal: either\\n{@link GoalType#MAXIMIZE} or {@link GoalType#MINIMIZE}.'\n    ]\n  },\n  {\n    'tag': '@param startPoint Start point for optimization.',\n    'alternatives': [\n      '@param startPoint Starting point for optimization.',\n      '@param startPoint Initial point for optimization.',\n      '@param startPoint First point for optimization.',\n      '@param startPoint Point of origin for optimization.',\n      '@param startPoint The initial point for optimization.'\n    ]\n  },\n  {\n    'tag': '@param maxEval Maximum number of function evaluations.',\n    'alternatives': [\n      '@param maxEval Maximal number of function evaluations.',\n      '@param maxEval Maximum evaluation count.',\n      '@param maxEval Maximum number of evaluations.',\n      '@param maxEval Maximum function evaluation limit.',\n      '@param maxEval The maximum number of function evaluations.'\n    ]\n  },\n  {\n    'tag': '@return the point/value pair giving the optimal value for objective\\nfunction.',\n    'alternatives': [\n      '@return the point/value pair that gives the optimal value for the objective\\nfunction.',\n      '@return the point/value pair that represents the optimal value for the objective\\nfunction.',\n      '@return the point/value pair that provides the optimal value for the objective\\nfunction.',\n      '@return the point/value pair that yields the optimal value for the objective\\nfunction.',\n      '@return the point/value pair that denotes the optimal value for the objective\\nfunction.'\n    ]\n  },\n  {\n    'tag': '@throws org.apache.commons.math3.exception.DimensionMismatchException if the start point dimension is wrong.',\n    'alternatives': [\n      '@throws org.apache.commons.math3.exception.DimensionMismatchException if the dimension of the start point is incorrect.',\n      '@throws org.apache.commons.math3.exception.DimensionMismatchException if the start point has an incorrect dimension.',\n      '@throws org.apache.commons.math3.exception.DimensionMismatchException when the dimension of the start point is incorrect.',\n      '@throws org.apache.commons.math3.exception.DimensionMismatchException if the start point is of the wrong dimension.',\n      '@throws org.apache.commons.math3.exception.DimensionMismatchException if the start point has the wrong dimension.'\n    ]\n  },\n  {\n    'tag': '@throws NoSuchElementException if all the elements in the array\\n have already been returned',\n    'alternatives': [\n      '@throws NoSuchElementException if all the elements in the array\\n have already been retrieved.',\n      '@throws NoSuchElementException if all the elements in the array\\n have been previously returned.',\n      '@throws NoSuchElementException when all the elements in the array\\n have already been returned.',\n      '@throws NoSuchElementException if all the elements in the array\\n have been returned before.',\n      '@throws NoSuchElementException if all the elements in the array\\n have already been fetched.'\n    ]\n  },\n  {\n    'tag': '@return the array this iterator iterates over.',\n    'alternatives': [\n      '@return the array that this iterator iterates over.',\n      '@return the array being iterated by this iterator.',\n      '@return the array over which this iterator iterates.',\n      '@return the array that is iterated by this iterator.',\n      '@return the array which is being iterated over by this iterator.'\n    ]\n  },\n  {\n    'tag': '@return the start index',\n    'alternatives': [\n      '@return the beginning index',\n      '@return the initial index',\n      '@return the first index',\n      '@return the index at the beginning',\n      '@return the starting index'\n    ]\n  },\n  {\n    'tag': '@return the end index',\n    'alternatives': [\n      '@return the last index',\n      '@return the final index',\n      '@return the concluding index',\n      '@return the index at the end',\n      '@return the terminating index'\n    ]\n  },\n  {\n    'tag': '@param array the array to iterate over.',\n    'alternatives': [\n      '@param array The array to be iterated over.',\n      '@param array The array that will be iterated over.',\n      '@param array The array to be used for iteration.',\n      '@param array The array over which iteration will be performed.',\n      '@param array The array to iterate through.'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if <code>array</code> is not an array.',\n    'alternatives': [\n      '@throws IllegalArgumentException if <code>array</code> is not of array type.',\n      '@throws IllegalArgumentException if <code>array</code> is not a valid array.',\n      '@throws IllegalArgumentException when <code>array</code> is not an array.',\n      '@throws IllegalArgumentException if <code>array</code> is invalid array.',\n      '@throws IllegalArgumentException if <code>array</code> does not represent an array.'\n    ]\n  },\n  {\n    'tag': '@param array the array to iterate over.',\n    'alternatives': [\n      '@param array The array to be iterated over.',\n      '@param array The array that will be iterated over.',\n      '@param array The array to be used for iteration.',\n      '@param array The array over which iteration will be performed.',\n      '@param array The array to iterate through.'\n    ]\n  },\n  {\n    'tag': '@param startIndex the index to start iterating at.',\n    'alternatives': [\n      '@param startIndex The starting index for iteration.',\n      '@param startIndex The index from which iteration begins.',\n      '@param startIndex The index at which iteration starts.',\n      '@param startIndex The initial index for iterating.',\n      '@param startIndex The index where iteration begins.'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if <code>array</code> is not an array.',\n    'alternatives': [\n      '@throws IllegalArgumentException if <code>array</code> is not of array type.',\n      '@throws IllegalArgumentException if <code>array</code> is not a valid array.',\n      '@throws IllegalArgumentException when <code>array</code> is not an array.',\n      '@throws IllegalArgumentException if <code>array</code> is invalid array.',\n      '@throws IllegalArgumentException if <code>array</code> does not represent an array.'\n    ]\n  },\n  {\n    'tag': '@throws IndexOutOfBoundsException if the index is invalid',\n    'alternatives': [\n      '@throws IndexOutOfBoundsException if the index is not valid',\n      '@throws IndexOutOfBoundsException if the index is out of bounds',\n      '@throws IndexOutOfBoundsException if the index is invalid',\n      '@throws IndexOutOfBoundsException if the index is beyond the limits',\n      '@throws IndexOutOfBoundsException if the index is incorrect'\n    ]\n  },\n  {\n    'tag': '@param array the array to iterate over.',\n    'alternatives': [\n      '@param array The array to be iterated over.',\n      '@param array The array that will be iterated over.',\n      '@param array The array to be used for iteration.',\n      '@param array The array over which iteration will be performed.',\n      '@param array The array to iterate through.'\n    ]\n  },\n  {\n    'tag': '@param startIndex the index to start iterating at.',\n    'alternatives': [\n      '@param startIndex The starting index for iteration.',\n      '@param startIndex The index from which iteration begins.',\n      '@param startIndex The index at which iteration starts.',\n      '@param startIndex The initial index for iterating.',\n      '@param startIndex The index where iteration begins.'\n    ]\n  },\n  {\n    'tag': '@param endIndex the index to finish iterating at.',\n    'alternatives': [\n      '@param endIndex The ending index for iteration.',\n      '@param endIndex The index at which iteration ends.',\n      '@param endIndex The index to stop iterating at.',\n      '@param endIndex The final index for iterating.',\n      '@param endIndex The index where iteration concludes.'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if <code>array</code> is not an array.',\n    'alternatives': [\n      '@throws IllegalArgumentException if <code>array</code> is not of array type.',\n      '@throws IllegalArgumentException if <code>array</code> is not a valid array.',\n      '@throws IllegalArgumentException when <code>array</code> is not an array.',\n      '@throws IllegalArgumentException if <code>array</code> is invalid array.',\n      '@throws IllegalArgumentException if <code>array</code> does not represent an array.'\n    ]\n  },\n  {\n    'tag': '@throws IndexOutOfBoundsException if either index is invalid',\n    'alternatives': [\n      '@throws IndexOutOfBoundsException if either index is not valid',\n      '@throws IndexOutOfBoundsException if either index is out of bounds',\n      '@throws IndexOutOfBoundsException if either index is invalid',\n      '@throws IndexOutOfBoundsException if either index is beyond the limits',\n      '@throws IndexOutOfBoundsException if either index is incorrect'\n    ]\n  }\n]"