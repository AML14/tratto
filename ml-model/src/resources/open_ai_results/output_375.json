"output = [\n  {\n    'tag': '@param weights the weights array',\n    'alternatives': [\n      '@param weights the array of weights',\n      '@param weights an array that contains the weights',\n      '@param the array weights',\n      '@param the weights array',\n      '@param the weight array'\n    ]\n  },\n  {\n    'tag': '@param mean the precomputed weighted mean value',\n    'alternatives': [\n      '@param mean the precalculated value of the weighted mean',\n      '@param mean precomputed value of the weighted mean',\n      '@param mean the value of the weighted mean that has been calculated in advance',\n      '@param mean value of the precomputed weighted mean',\n      '@param mean the value of the weighted mean that has been precalculated'\n    ]\n  },\n  {\n    'tag': '@return the variance of the values or Double.NaN if length = 0',\n    'alternatives': [\n      '@return the variance of the values or Double.NaN if the length is zero',\n      '@return the variance of the values or Double.NaN in case the length is 0',\n      '@return the variance of the values or Double.NaN if the length is equal to zero',\n      '@return the variance of the values or Double.NaN if the length equals zero',\n      '@return the variance of the values or Double.NaN when the length is zero'\n    ]\n  },\n  {\n    'tag': '@throws MathIllegalArgumentException if the parameters are not valid',\n    'alternatives': [\n      '@throws MathIllegalArgumentException when the parameters are invalid',\n      '@throws MathIllegalArgumentException in case the parameters are not valid',\n      '@throws MathIllegalArgumentException if the parameters do not meet the criteria',\n      '@throws MathIllegalArgumentException if the parameters are considered invalid',\n      '@throws MathIllegalArgumentException if the provided parameters do not satisfy the requirements'\n    ]\n  },\n  {\n    'tag': '@return Returns the isBiasCorrected.',\n    'alternatives': [\n      '@return Returns the value of isBiasCorrected.',\n      '@return Returns the flag indicating whether bias correction is applied.',\n      '@return Returns the value of the isBiasCorrected attribute.',\n      '@return Returns the state of the isBiasCorrected flag.',\n      '@return Returns the current setting of isBiasCorrected.'\n    ]\n  },\n  {\n    'tag': '@param source Variance to copy',\n    'alternatives': [\n      '@param source the source Variance object to be copied',\n      '@param source the Variance object that will be duplicated',\n      '@param source the Variance to be cloned',\n      '@param source the Variance instance from which to make a copy',\n      '@param source the original Variance object to be replicated'\n    ]\n  },\n  {\n    'tag': '@param dest Variance to copy to',\n    'alternatives': [\n      '@param dest the destination Variance object to copy to',\n      '@param dest the Variance object to which the data will be copied',\n      '@param dest the Variance to be populated with the values',\n      '@param dest the Variance instance to receive the copied data',\n      '@param dest the target Variance object to copy to'\n    ]\n  },\n  {\n    'tag': '@param m2 the SecondMoment (Third or Fourth moments work\\nhere as well.)',\n    'alternatives': [\n      '@param m2 the SecondMoment (Third or Fourth moments can also be used here.)',\n      '@param m2 the SecondMoment (Third or Fourth moments are also applicable here.)',\n      '@param m2 the SecondMoment (Third or Fourth moments are valid here as well.)',\n      '@param m2 the SecondMoment (Third or Fourth moments can be utilized here as well.)',\n      '@param m2 the SecondMoment (Third or Fourth moments are also suitable in this context.)'\n    ]\n  },\n  {\n    'tag': '@param isBiasCorrected setting for bias correction - true means\\nbias will be corrected and is equivalent to using the argumentless\\nconstructor',\n    'alternatives': [\n      '@param isBiasCorrected a flag indicating whether bias correction will be applied - setting it to true is equivalent to utilizing the argumentless constructor',\n      '@param isBiasCorrected setting for bias correction - setting it to true corresponds to using the constructor without arguments, enabling bias correction',\n      '@param isBiasCorrected a boolean value specifying whether bias correction should be performed - when set to true, it is equal to using the constructor without any arguments',\n      '@param isBiasCorrected setting for bias correction - if set to true, the bias will be corrected and it will be the same as using the constructor without arguments',\n      '@param isBiasCorrected setting for bias correction - true indicates that bias correction will take place, which is the same as utilizing the constructor without arguments'\n    ]\n  },\n  {\n    'tag': '@param isBiasCorrected setting for bias correction - true means\\nbias will be corrected',\n    'alternatives': [\n      '@param isBiasCorrected setting for bias correction - when true, the bias will be corrected',\n      '@param isBiasCorrected a boolean value specifying whether bias correction should be applied - if set to true, the bias will be corrected',\n      '@param isBiasCorrected setting for bias correction - if set to true, the bias will be adjusted',\n      '@param isBiasCorrected a flag indicating whether bias correction should be performed - setting it to true adjusts the bias',\n      '@param isBiasCorrected setting for bias correction - when true, the bias will be compensated'\n    ]\n  },\n  {\n    'tag': '@param m2 the SecondMoment (Third or Fourth moments work\\nhere as well.)',\n    'alternatives': [\n      '@param m2 the SecondMoment (Third or Fourth moments can also be used here.)',\n      '@param m2 the SecondMoment (Third or Fourth moments are also applicable here.)',\n      '@param m2 the SecondMoment (Third or Fourth moments are valid here as well.)',\n      '@param m2 the SecondMoment (Third or Fourth moments can be utilized here as well.)',\n      '@param m2 the SecondMoment (Third or Fourth moments are also suitable in this context.)'\n    ]\n  },\n  {\n    'tag': '@param original the {@code Variance} instance to copy',\n    'alternatives': [\n      '@param original the instance of {@code Variance} to be duplicated',\n      '@param original the original object of {@code Variance} to replicate',\n      '@param original the {@code Variance} object to be cloned',\n      '@param original the {@code Variance} instance to be copied',\n      '@param original the source {@code Variance} object to be copied'\n    ]\n  },\n  {\n    'tag': '@param values the input array',\n    'alternatives': [\n      '@param values the array as input',\n      '@param values the array that contains the input',\n      '@param values an array containing the input',\n      '@param values the array of input',\n      '@param values the provided input array'\n    ]\n  },\n  {\n    'tag': '@param begin index of the first array element to include',\n    'alternatives': [\n      '@param begin the starting index of the array element to be included',\n      '@param begin the index of the initial array element to be incorporated',\n      '@param begin the position of the first array element to include',\n      '@param begin the index of the first element in the array to be considered',\n      '@param begin the location of the initial array element to be encompassed'\n    ]\n  },\n  {\n    'tag': '@param length the number of elements to include',\n    'alternatives': [\n      '@param length the count of elements to be included',\n      '@param length the quantity of elements to be incorporated',\n      '@param length the total number of elements to include',\n      '@param length the number of items to be considered',\n      '@param length the size of the elements to include'\n    ]\n  },\n  {\n    'tag': '@return the kurtosis of the values or Double.NaN if length is less than 4',\n    'alternatives': [\n      '@return the kurtosis of the values or Double.NaN when the length is smaller than 4',\n      '@return the kurtosis of the values or Double.NaN if the length is below 4',\n      '@return the kurtosis of the values or Double.NaN if the length is less than four',\n      '@return the kurtosis of the values or Double.NaN when the length is not at least 4',\n      '@return the kurtosis of the values or Double.NaN if the length is less than 4'\n    ]\n  },\n  {\n    'tag': '@param source Kurtosis to copy',\n    'alternatives': [\n      '@param source the Kurtosis object to be duplicated',\n      '@param source the Kurtosis instance to be copied',\n      '@param source the original Kurtosis object to replicate',\n      '@param source the source Kurtosis object to be copied',\n      '@param source the Kurtosis to be cloned'\n    ]\n  },\n  {\n    'tag': '@param dest Kurtosis to copy to',\n    'alternatives': [\n      '@param dest the destination Kurtosis object to copy to',\n      '@param dest the Kurtosis object to which the data will be copied',\n      '@param dest the Kurtosis to be populated with the values',\n      '@param dest the Kurtosis instance to receive the copied data',\n      '@param dest the target Kurtosis object to copy to'\n    ]\n  },\n  {\n    'tag': '@param m4 external Moment',\n    'alternatives': [\n      '@param m4 an external Moment',\n      '@param m4 a Moment from an external source',\n      '@param m4 a Moment that originates from an external context',\n      '@param m4 a Moment obtained from an external provider',\n      '@param m4 a Moment that comes from an external object'\n    ]\n  },\n  {\n    'tag': '@param original the {@code Kurtosis} instance to copy',\n    'alternatives': [\n      '@param original the instance of {@code Kurtosis} to be duplicated',\n      '@param original the original object of {@code Kurtosis} to replicate',\n      '@param original the {@code Kurtosis} object to be cloned',\n      '@param original the {@code Kurtosis} instance to be copied',\n      '@param original the source {@code Kurtosis} object to be copied'\n    ]\n  },\n  {\n    'tag': '@param values input array containing the values',\n    'alternatives': [\n      '@param values array input containing the values',\n      '@param values array with the values as input',\n      '@param values array containing the provided values',\n      '@param values an array that includes the values',\n      '@param values input array with the values'\n    ]\n  },\n  {\n    'tag': '@param begin first array element to include',\n    'alternatives': [\n      '@param begin initial array element to be included',\n      '@param begin starting point of the array element to include',\n      '@param begin location of the first array element to be incorporated',\n      '@param begin index of the initial array element to be encompassed',\n      '@param begin the position of the first element in the array to include'\n    ]\n  },\n  {\n    'tag': '@param length the number of elements to include',\n    'alternatives': [\n      '@param length quantity of elements to be included',\n      '@param length total number of elements to include',\n      '@param length the number of items to be incorporated',\n      '@param length the count of elements to encompass',\n      '@param length the size of the elements to be included'\n    ]\n  },\n  {\n    'tag': '@return the geometric mean or Double.NaN if length = 0 or\\nany of the values are &lt;= 0.',\n    'alternatives': [\n      '@return the geometric mean or Double.NaN if the length is zero or\\nany of the values are less than or equal to 0.',\n      '@return the geometric mean or Double.NaN if the length equals 0 or\\nany of the values are less than or equal to zero.',\n      '@return the geometric mean or Double.NaN if the length is 0 or\\nany of the values are less than or equal to zero.',\n      '@return the geometric mean or Double.NaN if the length is zero or\\nany of the values are not greater than 0.',\n      '@return the geometric mean or Double.NaN if the length equals 0 or\\nany of the values are not larger than 0.'\n    ]\n  },\n  {\n    'tag': '@param sumLogImpl the StorelessUnivariateStatistic instance to use\\nfor computing the log sum',\n    'alternatives': [\n      '@param sumLogImpl the StorelessUnivariateStatistic object to utilize\\nfor calculating the sum of logarithms',\n      '@param sumLogImpl the StorelessUnivariateStatistic instance to employ\\nfor the computation of the logarithmic sum',\n      '@param sumLogImpl the StorelessUnivariateStatistic to use for computing\\nthe logarithmic sum',\n      '@param sumLogImpl the StorelessUnivariateStatistic implementation to be used\\nfor calculating the sum of logarithms',\n      '@param sumLogImpl the StorelessUnivariateStatistic that will be used\\nto compute the log sum'\n    ]\n  }\n]"