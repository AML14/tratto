"output = [\n  {\n    'tag': '@return a map iterator over nothing',\n    'alternatives': [\n      '@return an iterator that iterates over nothing in the map',\n      '@return an iterator that traverses the map with no elements',\n      '@return an iterator over nothing in the map',\n      '@return an iterator that goes through the map without any elements',\n      '@return an iterator that moves through the map with no elements'\n    ]\n  },\n  {\n    'tag': '@param <K> the key type',\n    'alternatives': [\n      '@param <K> the type of the key',\n      '@param <K> the type that represents the key',\n      '@param <K> the kind of key',\n      '@param <K> the key category',\n      '@param <K> the specific key type'\n    ]\n  },\n  {\n    'tag': '@param <V> the value type',\n    'alternatives': [\n      '@param <V> the type of the value',\n      '@param <V> the type that represents the value',\n      '@param <V> the kind of value',\n      '@param <V> the value category',\n      '@param <V> the specific value type'\n    ]\n  },\n  {\n    'tag': '@return a map iterator over nothing',\n    'alternatives': [\n      '@return an iterator that iterates over nothing in the map',\n      '@return an iterator that traverses the map with no elements',\n      '@return an iterator over nothing in the map',\n      '@return an iterator that goes through the map without any elements',\n      '@return an iterator that moves through the map with no elements'\n    ]\n  },\n  {\n    'tag': '@param <E> the element type',\n    'alternatives': [\n      '@param <E> the type of the element',\n      '@param <E> the type that represents the element',\n      '@param <E> the kind of element',\n      '@param <E> the element category',\n      '@param <E> the specific element type'\n    ]\n  },\n  {\n    'tag': '@param object the single object over which to iterate',\n    'alternatives': [\n      '@param object the lone object to iterate over',\n      '@param object the only item to iterate through',\n      '@param object the singular element for iteration',\n      '@param object the individual item for iteration',\n      '@param object the sole object to iterate'\n    ]\n  },\n  {\n    'tag': '@return a singleton iterator over the object',\n    'alternatives': [\n      '@return an iterator that contains only the object',\n      '@return a solitary iterator that holds the object',\n      '@return an iterator consisting of just the object',\n      '@return an iterator with a single element, the object',\n      '@return an iterator that has only one element which is the object'\n    ]\n  },\n  {\n    'tag': '@param <E> the element type',\n    'alternatives': [\n      '@param <E> the type of the element',\n      '@param <E> the type that represents the element',\n      '@param <E> the kind of element',\n      '@param <E> the element category',\n      '@param <E> the specific element type'\n    ]\n  },\n  {\n    'tag': '@param object the single object over which to iterate',\n    'alternatives': [\n      '@param object the lone object to iterate over',\n      '@param object the only item to iterate through',\n      '@param object the singular element for iteration',\n      '@param object the individual item for iteration',\n      '@param object the sole object to iterate'\n    ]\n  },\n  {\n    'tag': '@return a singleton list iterator over the object',\n    'alternatives': [\n      '@return a list iterator that contains only the object',\n      '@return a solitary list iterator that holds the object',\n      '@return a list iterator consisting of just the object',\n      '@return a list iterator with a single element, the object',\n      '@return a list iterator that has only one element which is the object'\n    ]\n  },\n  {\n    'tag': '@param <E> the element type',\n    'alternatives': [\n      '@param <E> the type of the element',\n      '@param <E> the type that represents the element',\n      '@param <E> the kind of element',\n      '@param <E> the element category',\n      '@param <E> the specific element type'\n    ]\n  },\n  {\n    'tag': '@param array the array over which to iterate',\n    'alternatives': [\n      '@param array the array to iterate over',\n      '@param array the array for iteration',\n      '@param array the array being traversed',\n      '@param array the array undergoing iteration',\n      '@param array the array that is being iterated'\n    ]\n  },\n  {\n    'tag': '@return an iterator over the array',\n    'alternatives': [\n      '@return an iterator that traverses the array',\n      '@return an iterator for the array',\n      '@return an iterator that moves through the array',\n      '@return an iterator that goes over the array',\n      '@return an iterator to iterate through the array'\n    ]\n  },\n  {\n    'tag': '@param <E> the element type',\n    'alternatives': [\n      '@param <E> the type of the element',\n      '@param <E> the type that represents the element',\n      '@param <E> the kind of element',\n      '@param <E> the element category',\n      '@param <E> the specific element type'\n    ]\n  },\n  {\n    'tag': '@param array the array over which to iterate',\n    'alternatives': [\n      '@param array the array to iterate over',\n      '@param array the array for iteration',\n      '@param array the array being traversed',\n      '@param array the array undergoing iteration',\n      '@param array the array that is being iterated'\n    ]\n  },\n  {\n    'tag': '@return an iterator over the array',\n    'alternatives': [\n      '@return an iterator that traverses the array',\n      '@return an iterator for the array',\n      '@return an iterator that moves through the array',\n      '@return an iterator that goes over the array',\n      '@return an iterator to iterate through the array'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if the array is not an array',\n    'alternatives': [\n      '@throws IllegalArgumentException when the array is not an array',\n      '@throws IllegalArgumentException if the array is not of array type',\n      '@throws IllegalArgumentException if the array is not an actual array',\n      '@throws IllegalArgumentException in case the array is not an array',\n      '@throws IllegalArgumentException if the array is not an array instance'\n    ]\n  },\n  {\n    'tag': '@param <E> the element type',\n    'alternatives': [\n      '@param <E> the type of the element',\n      '@param <E> the type that represents the element',\n      '@param <E> the kind of element',\n      '@param <E> the element category',\n      '@param <E> the specific element type'\n    ]\n  },\n  {\n    'tag': '@param array the array over which to iterate',\n    'alternatives': [\n      '@param array the array to iterate over',\n      '@param array the array for iteration',\n      '@param array the array being traversed',\n      '@param array the array undergoing iteration',\n      '@param array the array that is being iterated'\n    ]\n  },\n  {\n    'tag': '@param start the index to start iterating at',\n    'alternatives': [\n      '@param start the starting index for iteration',\n      '@param start the index to begin iteration from',\n      '@param start the initial index to iterate from',\n      '@param start the position to start iteration from',\n      '@param start the index where iteration should begin'\n    ]\n  },\n  {\n    'tag': '@return an iterator over part of the array',\n    'alternatives': [\n      '@return an iterator that traverses a portion of the array',\n      '@return an iterator for a section of the array',\n      '@return an iterator that moves through part of the array',\n      '@return an iterator that goes over a subset of the array',\n      '@return an iterator to iterate through a part of the array'\n    ]\n  },\n  {\n    'tag': '@param <E> the element type',\n    'alternatives': [\n      '@param <E> the type of the element',\n      '@param <E> the type that represents the element',\n      '@param <E> the kind of element',\n      '@param <E> the element category',\n      '@param <E> the specific element type'\n    ]\n  },\n  {\n    'tag': '@param array the array over which to iterate',\n    'alternatives': [\n      '@param array the array to iterate over',\n      '@param array the array for iteration',\n      '@param array the array being traversed',\n      '@param array the array undergoing iteration',\n      '@param array the array that is being iterated'\n    ]\n  },\n  {\n    'tag': '@param start the index to start iterating at',\n    'alternatives': [\n      '@param start the starting index for iteration',\n      '@param start the index to begin iteration from',\n      '@param start the initial index to iterate from',\n      '@param start the position to start iteration from',\n      '@param start the index where iteration should begin'\n    ]\n  },\n  {\n    'tag': '@return an iterator over part of the array',\n    'alternatives': [\n      '@return an iterator that traverses a portion of the array',\n      '@return an iterator for a section of the array',\n      '@return an iterator that moves through part of the array',\n      '@return an iterator that goes over a subset of the array',\n      '@return an iterator to iterate through a part of the array'\n    ]\n  }\n]"