"output = [\n  {\n    'tag': '@param field field to which the time and state vector elements belong',\n    'alternatives': [\n      '@param field field to which the elements of time and state vector pertain',\n      '@param field field to which the elements of the time and state vector belong',\n      '@param field field to which the elements of the state vector and time belong',\n      '@param field field to which the state vector and time elements belong',\n      '@param field field to which the elements of the state vector and time pertain'\n    ]\n  },\n  {\n    'tag': '@param forward integration direction indicator',\n    'alternatives': [\n      '@param indicator forward integration direction indicator',\n      '@param forward indicator integration direction',\n      '@param indicator indicating the forward integration direction',\n      '@param integration direction indicator indicating forward',\n      '@param indicator indicating the direction of forward integration'\n    ]\n  },\n  {\n    'tag': '@param yDotK slopes at the intermediate points',\n    'alternatives': [\n      '@param slopes yDotK at the intermediate points',\n      '@param yDotK at the intermediate points',\n      '@param intermediate points slopes yDotK',\n      '@param slopes at the intermediate points yDotK',\n      '@param yDotK at the points between the known points'\n    ]\n  },\n  {\n    'tag': '@param globalPreviousState start of the global step',\n    'alternatives': [\n      '@param start of the global step globalPreviousState',\n      '@param globalPreviousState start of the step globally',\n      '@param globalPreviousState which is the starting point for the global step',\n      '@param the starting point of the global step globalPreviousState',\n      '@param globalPreviousState that marks the beginning of the global step'\n    ]\n  },\n  {\n    'tag': '@param globalCurrentState end of the global step',\n    'alternatives': [\n      '@param end of the global step globalCurrentState',\n      '@param globalCurrentState end of the step globally',\n      '@param globalCurrentState which is the ending point for the global step',\n      '@param the ending point of the global step globalCurrentState',\n      '@param globalCurrentState that marks the end of the global step'\n    ]\n  },\n  {\n    'tag': '@param softPreviousState start of the restricted step',\n    'alternatives': [\n      '@param start of the restricted step softPreviousState',\n      '@param softPreviousState start of the step restricted',\n      '@param softPreviousState which is the starting point for the restricted step',\n      '@param the starting point of the restricted step softPreviousState',\n      '@param softPreviousState that marks the beginning of the restricted step'\n    ]\n  },\n  {\n    'tag': '@param softCurrentState end of the restricted step',\n    'alternatives': [\n      '@param end of the restricted step softCurrentState',\n      '@param softCurrentState end of the step restricted',\n      '@param softCurrentState which is the ending point for the restricted step',\n      '@param the ending point of the restricted step softCurrentState',\n      '@param softCurrentState that marks the end of the restricted step'\n    ]\n  },\n  {\n    'tag': '@param mapper equations mapper for the all equations',\n    'alternatives': [\n      '@param equations mapper for the all equations mapper',\n      '@param mapper equations for all the equations',\n      '@param equations mapper for all the equations',\n      '@param mapper for the equations of all equations',\n      '@param equations mapper for all equations'\n    ]\n  },\n  {\n    'tag': '@param step integration step',\n    'alternatives': [\n      '@param integration step step',\n      '@param step of the integration',\n      '@param integration step value',\n      '@param integration step size',\n      '@param step size of the integration'\n    ]\n  },\n  {\n    'tag': '@param field field to which the time and state vector elements belong',\n    'alternatives': [\n      '@param field field to which the elements of time and state vector pertain',\n      '@param field field to which the elements of the time and state vector belong',\n      '@param field field to which the elements of the state vector and time belong',\n      '@param field field to which the state vector and time elements belong',\n      '@param field field to which the elements of the state vector and time pertain'\n    ]\n  },\n  {\n    'tag': '@return The control points coordinates or null if this edge is a straight\\n        line.',\n    'alternatives': [\n      '@return The coordinates of control points or null if this edge is a straight line.',\n      '@return The control points coordinates or null if this edge represents a straight line.',\n      '@return The coordinates of control points or null if this edge is straight.',\n      '@return The control points coordinates or null if this edge is a straight line segment.',\n      '@return The control points coordinates or null if this edge is a straight line edge.'\n    ]\n  },\n  {\n    'tag': '@return True if control points are available.',\n    'alternatives': [\n      '@return True if there are control points.',\n      '@return True if control points exist.',\n      '@return True if the control points are present.',\n      '@return True if there are available control points.',\n      '@return True if control points can be obtained.'\n    ]\n  },\n  {\n    'tag': '@param points The new set of points. See the {@link #getControlPoints()}\\n           method for an explanation on the organisation of this array.',\n    'alternatives': [\n      '@param points The new array of points. For information on the organization\\n      of this array, see the {@link #getControlPoints()} method.',\n      '@param points The new set of points. Refer to the {@link #getControlPoints()}\\n      method for an explanation on the array organization.',\n      '@param points The newly provided set of points. The organization of this\\n      array is explained in the {@link #getControlPoints()} method.',\n      '@param points The new set of points. This array is organized as described\\n      in the {@link #getControlPoints()} method.',\n      '@param points The new set of points. The structure of this array is detailed\\n      in the {@link #getControlPoints()} method.'\n    ]\n  },\n  {\n    'tag': '@return The edge index between the two nodes if there are several such\\n        edges.',\n    'alternatives': [\n      '@return The index of the edge between the two nodes if multiple edges exist.',\n      '@return The index of the edge between the two nodes if there are multiple such edges.',\n      '@return The index of the edge between the two nodes if there are multiple edges.',\n      '@return The edge index between the two nodes if multiple edges are present.',\n      '@return The edge index between the two nodes if there are multiple edges.'\n    ]\n  },\n  {\n    'tag': '@param edgeList The actual set of edges between two nodes (see the\\n           connectivity in the graphic graph).',\n    'alternatives': [\n      '@param edgeList The current set of edges between two nodes (refer to the\\n      connectivity in the graphic graph).',\n      '@param edgeList The effective set of edges between two nodes (consider the\\n      connectivity in the graphic graph).',\n      '@param edgeList The existing set of edges between two nodes (check the\\n      connectivity in the graphic graph).',\n      '@param edgeList The real set of edges between two nodes (observe the\\n      connectivity in the graphic graph).',\n      '@param edgeList The actual set of edges between two nodes (inspect the\\n      connectivity in the graphic graph).'\n    ]\n  },\n  {\n    'tag': '@return The group of edges between two same nodes, null if the edge is\\n        alone between the two nodes.',\n    'alternatives': [\n      '@return The group of edges between identical nodes, null if the edge is the\\n      only one between these nodes.',\n      '@return The group of edges between similar nodes, null if the edge is the\\n      lone one between these nodes.',\n      '@return The set of edges between two identical nodes, null if the edge is the\\n      only one existing between these nodes.',\n      '@return The set of edges between the same nodes, null if the edge is the sole\\n      one between these nodes.',\n      '@return The set of edges between the nodes of the same type, null if the edge\\n      is the singular one between these nodes.'\n    ]\n  },\n  {\n    'tag': '@param id The edge unique identifier.',\n    'alternatives': [\n      '@param id The identifier unique to the edge.',\n      '@param id The unique identifier of the edge.',\n      '@param id The unique identifier assigned to the edge.',\n      '@param id The edge identifier that is unique.',\n      '@param id The identifier that is exclusive to the edge.'\n    ]\n  },\n  {\n    'tag': '@param from The source node.',\n    'alternatives': [\n      '@param from The node of origin.',\n      '@param from The originating node.',\n      '@param from The node where the edge starts.',\n      '@param from The starting node.',\n      '@param from The node that initiates the edge.'\n    ]\n  },\n  {\n    'tag': '@param to The target node.',\n    'alternatives': [\n      '@param to The destination node.',\n      '@param to The targetting node.',\n      '@param to The node where the edge ends.',\n      '@param to The ending node.',\n      '@param to The node that the edge is directed towards.'\n    ]\n  },\n  {\n    'tag': '@param dir True if the edge is directed in the direction from-to.',\n    'alternatives': [\n      '@param dir True if the edge is directed from \\'from\\' to \\'to\\'.',\n      '@param dir True if the edge is directed towards \\'to\\' from \\'from\\'.',\n      '@param dir True if the edge is directed in the direction from \\'from\\' to \\'to\\'.',\n      '@param dir True if the edge is directed from \\'from\\' to the \\'to\\' direction.',\n      '@param dir True if the edge is directed to \\'to\\' from \\'from\\'.'\n    ]\n  },\n  {\n    'tag': '@param attributes A set of initial attributes.',\n    'alternatives': [\n      '@param attributes An initial set of attributes.',\n      '@param attributes A set of attributes initially.',\n      '@param attributes Initial set of attributes.',\n      '@param attributes The initial attributes set.',\n      '@param attributes The set of initial attributes.'\n    ]\n  },\n  {\n    'tag': '@return true if the graph was changed.',\n    'alternatives': [\n      '@return true if modifications were made to the graph.',\n      '@return true if there were changes in the graph.',\n      '@return true if alterations were made to the graph.',\n      '@return true if the graph has been modified.',\n      '@return true if there were modifications in the graph.'\n    ]\n  },\n  {\n    'tag': '@return A style sheet.',\n    'alternatives': [\n      '@return A set of style rules.',\n      '@return A style template.',\n      '@return A style document.',\n      '@return A collection of style definitions.',\n      '@return A layout of style attributes.'\n    ]\n  },\n  {\n    'tag': '@return A style group.',\n    'alternatives': [\n      '@return A collection of style elements.',\n      '@return A set of style entities.',\n      '@return A group of style declarations.',\n      '@return A cluster of style items.',\n      '@return A compilation of style aspects.'\n    ]\n  },\n  {\n    'tag': '@return The style groups.',\n    'alternatives': [\n      '@return The sets of style groups.',\n      '@return The groups of style elements.',\n      '@return The style groupings.',\n      '@return The style clusters.',\n      '@return The collections of style groups.'\n    ]\n  }\n]"