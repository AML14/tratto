"output = [\n  {\n    'tag': '@param vertex a vertex which has just been encountered.',\n    'alternatives': [\n      '@param vertex a recently encountered vertex.',\n      '@param vertex a vertex that was recently encountered.',\n      '@param vertex a vertex that has been encountered recently.',\n      '@param vertex a vertex that has just been found.',\n      '@param vertex a vertex that has been newly discovered.'\n    ]\n  },\n  {\n    'tag': '@param edge the edge via which the vertex was encountered.',\n    'alternatives': [\n      '@param edge the edge through which the vertex was reached.',\n      '@param edge the edge that led to the vertex.',\n      '@param edge the edge by which the vertex was found.',\n      '@param edge the edge that was used to encounter the vertex.',\n      '@param edge the edge that provided access to the vertex.'\n    ]\n  },\n  {\n    'tag': '@return the new entry.',\n    'alternatives': [\n      '@return the newly added entry.',\n      '@return the updated entry.',\n      '@return the latest entry.',\n      '@return the recently created entry.',\n      '@return the fresh entry.'\n    ]\n  },\n  {\n    'tag': '@param vertex ',\n    'alternatives': [\n      '@param vertex the vertex.',\n      '@param vertex - the vertex.',\n      '@param vertex: the vertex.',\n      '@param vertex (input):',\n      '@param vertex (input) -'\n    ]\n  },\n  {\n    'tag': '@return .',\n    'alternatives': [\n      '@return the result.',\n      '@return the output.',\n      '@return the value.',\n      '@return the response.',\n      '@return the computed result.'\n    ]\n  },\n  {\n    'tag': '@param vertex vertex reached by a path.',\n    'alternatives': [\n      '@param vertex a vertex that has been reached through a path.',\n      '@param vertex the vertex that has been reached via a path.',\n      '@param vertex the vertex that has been reached by a path.',\n      '@param vertex the vertex that was reached by traversing a path.',\n      '@param vertex the vertex obtained from a path.'\n    ]\n  },\n  {\n    'tag': '@param edge edge reaching the vertex.',\n    'alternatives': [\n      '@param edge the edge that reaches the vertex.',\n      '@param edge the edge that leads to the vertex.',\n      '@param edge the edge through which the vertex is reached.',\n      '@param edge the edge that connects to the vertex.',\n      '@param edge the edge that provides access to the vertex.'\n    ]\n  },\n  {\n    'tag': '@param vertex a vertex which has just been encountered.',\n    'alternatives': [\n      '@param vertex a recently encountered vertex.',\n      '@param vertex a vertex that was recently encountered.',\n      '@param vertex a vertex that has been encountered recently.',\n      '@param vertex a vertex that has just been found.',\n      '@param vertex a vertex that has been newly discovered.'\n    ]\n  },\n  {\n    'tag': '@param edge the edge via which the vertex was encountered.',\n    'alternatives': [\n      '@param edge the edge through which the vertex was reached.',\n      '@param edge the edge that led to the vertex.',\n      '@param edge the edge by which the vertex was found.',\n      '@param edge the edge that was used to encounter the vertex.',\n      '@param edge the edge that provided access to the vertex.'\n    ]\n  },\n  {\n    'tag': '@param vertex ',\n    'alternatives': [\n      '@param vertex the vertex.',\n      '@param vertex - the vertex.',\n      '@param vertex: the vertex.',\n      '@param vertex (input):',\n      '@param vertex (input) -'\n    ]\n  },\n  {\n    'tag': '@param improvedVertices ',\n    'alternatives': [\n      '@param improvedVertices the improved vertices.',\n      '@param improvedVertices - the improved vertices.',\n      '@param improvedVertices: the improved vertices.',\n      '@param improvedVertices (input):',\n      '@param improvedVertices (input) -'\n    ]\n  },\n  {\n    'tag': '@param graph graph on which shortest paths are searched.',\n    'alternatives': [\n      '@param graph the graph where shortest paths are being searched.',\n      '@param graph the graph used for searching shortest paths.',\n      '@param graph the graph being searched for shortest paths.',\n      '@param graph the graph where the search for shortest paths is performed.',\n      '@param graph the graph utilized to find shortest paths.'\n    ]\n  },\n  {\n    'tag': '@param startVertex start vertex of the calculated paths.',\n    'alternatives': [\n      '@param startVertex the vertex from which the paths are calculated.',\n      '@param startVertex the initial vertex for computing the paths.',\n      '@param startVertex the vertex used as the starting point for path calculations.',\n      '@param startVertex the vertex where the path calculation begins.',\n      '@param startVertex the starting point for path calculations.'\n    ]\n  },\n  {\n    'tag': '@param endVertex end vertex of the calculated paths.',\n    'alternatives': [\n      '@param endVertex the vertex where the paths end.',\n      '@param endVertex the final vertex of the calculated paths.',\n      '@param endVertex the destination vertex for the paths.',\n      '@param endVertex the vertex marking the end of the paths.',\n      '@param endVertex the vertex that serves as the destination for the paths.'\n    ]\n  },\n  {\n    'tag': '@param maxSize number of paths stored at end vertex of the graph.',\n    'alternatives': [\n      '@param maxSize the maximum number of paths stored at the graph\\'s end vertex.',\n      '@param maxSize the total number of paths stored at the last vertex of the graph.',\n      '@param maxSize the maximum number of paths allowed to be stored at the graph\\'s end vertex.',\n      '@param maxSize the number of paths that can be stored at the final vertex of the graph.',\n      '@param maxSize the limit of paths that can be stored at the graph\\'s last vertex.'\n    ]\n  },\n  {\n    'tag': '@return minimum spanning-tree edges set',\n    'alternatives': [\n      '@return the set of edges representing the minimum spanning-tree.',\n      '@return the edges forming the minimum spanning-tree.',\n      '@return the set of edges that comprise the minimum spanning-tree.',\n      '@return the minimum spanning-tree represented by the edges set.',\n      '@return the set of edges which form the minimum spanning-tree.'\n    ]\n  },\n  {\n    'tag': '@return minimum spanning-tree total weight',\n    'alternatives': [\n      '@return the total weight of the minimum spanning-tree.',\n      '@return the weight of the minimum spanning-tree.',\n      '@return the sum of weights in the minimum spanning-tree.',\n      '@return the total weight of the spanning-tree with minimum weight.',\n      '@return the weight of the spanning-tree that is minimal.'\n    ]\n  },\n  {\n    'tag': '@param graph the graph to be searched',\n    'alternatives': [\n      '@param graph the graph that needs to be searched.',\n      '@param graph the graph for which the search is performed.',\n      '@param graph the graph to search within.',\n      '@param graph the graph that is being searched.',\n      '@param graph the graph subject to the searching process.'\n    ]\n  },\n  {\n    'tag': '@return the graph inspected by this StrongConnectivityAlgorithm',\n    'alternatives': [\n      '@return the graph that is examined by this StrongConnectivityAlgorithm.',\n      '@return the inspected graph by this StrongConnectivityAlgorithm.',\n      '@return the graph being investigated by this StrongConnectivityAlgorithm.',\n      '@return the graph under inspection by this StrongConnectivityAlgorithm.',\n      '@return the graph analyzed by this StrongConnectivityAlgorithm.'\n    ]\n  },\n  {\n    'tag': '@return true if the graph is strongly connected, false otherwise',\n    'alternatives': [\n      '@return true if the graph exhibits strong connectivity, false otherwise.',\n      '@return true if the graph demonstrates strong connectedness, false otherwise.',\n      '@return true if the graph displays strong connectivity, false otherwise.',\n      '@return true if the graph shows strong connectedness, false otherwise.',\n      '@return true if the graph has strong connectivity, false otherwise.'\n    ]\n  },\n  {\n    'tag': '@return <code>List</code> of <code>Set</code> s containing the strongly\\nconnected components',\n    'alternatives': [\n      '@return a <code>List</code> of <code>Set</code> s that hold the strongly\\nconnected components.',\n      '@return a <code>List</code> of <code>Set</code> s comprising the strongly\\nconnected components.',\n      '@return a <code>List</code> of <code>Set</code> s representing the strongly\\nconnected components.',\n      '@return a <code>List</code> of <code>Set</code> s containing the sets of strongly\\nconnected components.',\n      '@return a <code>List</code> of <code>Set</code> s that store the strongly\\nconnected components.'\n    ]\n  },\n  {\n    'tag': '@return a list of subgraphs representing the strongly connected\\ncomponents',\n    'alternatives': [\n      '@return a list of subgraphs that represent the strongly connected\\ncomponents.',\n      '@return a list of subgraphs that depict the strongly connected\\ncomponents.',\n      '@return a list of subgraphs showing the strongly connected\\ncomponents.',\n      '@return a list of subgraphs containing the strongly connected\\ncomponents.',\n      '@return a list of subgraphs featuring the strongly connected\\ncomponents.'\n    ]\n  },\n  {\n    'tag': '@param directedGraph the graph to inspect',\n    'alternatives': [\n      '@param directedGraph the graph to examine.',\n      '@param directedGraph the graph that is being analyzed.',\n      '@param directedGraph the graph subject to inspection.',\n      '@param directedGraph the graph under consideration.',\n      '@param directedGraph the graph to be investigated.'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException ',\n    'alternatives': [\n      '@throws IllegalArgumentException in case of invalid input.',\n      '@throws IllegalArgumentException if the input is not valid.',\n      '@throws IllegalArgumentException if the provided argument is not acceptable.',\n      '@throws IllegalArgumentException when the input does not meet the requirements.',\n      '@throws IllegalArgumentException if the argument does not satisfy the conditions.'\n    ]\n  },\n  {\n    'tag': '@return false, if there are no more pairs left',\n    'alternatives': [\n      '@return false if there are no remaining pairs.',\n      '@return false in case there are no more pairs available.',\n      '@return false if there are no further pairs.',\n      '@return false when there are no pairs left.',\n      '@return false if there are no additional pairs.'\n    ]\n  }\n]"