"output = [\n  {\n    'tag': '@param rng random number generator.',\n    'alternatives': [\n      '@param rng random number generator.',\n      '@param rng RNG random number generator.',\n      '@param random number generator rng.',\n      '@param RNG rng random number generator.',\n      '@param rng random number generator used.'\n    ]\n  },\n  {\n    'tag': '@param singletons array of random variable values.',\n    'alternatives': [\n      '@param singletons array of random variable values.',\n      '@param singletons random variable values array.',\n      '@param array of random variable values singletons.',\n      '@param singletons random values of variables array.',\n      '@param random variable values array of singletons.'\n    ]\n  },\n  {\n    'tag': '@param probabilities array of probabilities.',\n    'alternatives': [\n      '@param probabilities array of probabilities.',\n      '@param probabilities probability array.',\n      '@param array of probabilities probabilities.',\n      '@param probability array probabilities.',\n      '@param probability array of probabilities.'\n    ]\n  },\n  {\n    'tag': '@param <E> the type of object the {@link Iterator} contains',\n    'alternatives': [\n      '@param <E> the type of object the {@link Iterator} contains',\n      '@param <E> type of object contained in the {@link Iterator}.',\n      '@param <E> the object type contained in the {@link Iterator}.',\n      '@param <E> the type of the object contained in the {@link Iterator}.',\n      '@param <E> the type of element contained in the {@link Iterator}.'\n    ]\n  },\n  {\n    'tag': '@param iterator the {@link Iterator} to use, may be null',\n    'alternatives': [\n      '@param iterator the {@link Iterator} to use, may be null',\n      '@param iterator to be used, may be null, {@link Iterator}.',\n      '@param iterator to use, may be null, {@link Iterator}.',\n      '@param iterator that can be null, {@link Iterator} to be used.',\n      '@param iterator that can be null, use {@link Iterator}.'\n    ]\n  },\n  {\n    'tag': '@return true if every element of the collection matches the predicate or if the\\n  collection is empty, false otherwise',\n    'alternatives': [\n      '@return true if every element of the collection matches the predicate or if the\\n  collection is empty, false otherwise',\n      '@return true if all elements in the collection match the predicate, or if the collection is empty, otherwise return false.',\n      '@return true if each element in the collection satisfies the predicate, or if the collection is empty, false otherwise.',\n      '@return true if every element in the collection fulfills the predicate or if the collection is empty, otherwise false.',\n      '@return true if all elements of the collection satisfy the predicate, or false if the collection is not empty.'\n    ]\n  },\n  {\n    'tag': '@param iterator the {@link Iterator} to use, may be null',\n    'alternatives': [\n      '@param iterator the {@link Iterator} to use, may be null',\n      '@param iterator to be used, may be null, {@link Iterator}.',\n      '@param iterator to use, may be null, {@link Iterator}.',\n      '@param iterator that can be null, {@link Iterator} to be used.',\n      '@param iterator that can be null, use {@link Iterator}.'\n    ]\n  },\n  {\n    'tag': '@return true if the iterator is exhausted or null, false otherwise',\n    'alternatives': [\n      '@return true if the iterator is exhausted or null, false otherwise',\n      '@return true if the iterator is null or has no more elements, false otherwise.',\n      '@return true if there are no more elements in the iterator or if the iterator is null, false otherwise.',\n      '@return true if the iterator has reached its end or is null, false otherwise.',\n      '@return true if the iterator is null or no more elements can be extracted, false otherwise.'\n    ]\n  },\n  {\n    'tag': '@param <E> the type of object the {@link Iterator} contains',\n    'alternatives': [\n      '@param <E> the type of object the {@link Iterator} contains',\n      '@param <E> type of object contained in the {@link Iterator}.',\n      '@param <E> the object type contained in the {@link Iterator}.',\n      '@param <E> the type of the object contained in the {@link Iterator}.',\n      '@param <E> the type of element contained in the {@link Iterator}.'\n    ]\n  },\n  {\n    'tag': '@param iterator the iterator to check, may be null',\n    'alternatives': [\n      '@param iterator the iterator to check, may be null',\n      '@param iterator to be checked, may be null.',\n      '@param iterator that needs to be checked, can be null.',\n      '@param iterator that can be null, needs to be checked.',\n      '@param iterator to be verified, can be null.'\n    ]\n  },\n  {\n    'tag': '@param object the object to check',\n    'alternatives': [\n      '@param object the object to check',\n      '@param object that needs to be verified.',\n      '@param object to be checked.',\n      '@param object to validate.',\n      '@param object that requires checking.'\n    ]\n  },\n  {\n    'tag': '@return true if the object is contained in the iterator, false otherwise',\n    'alternatives': [\n      '@return true if the object is contained in the iterator, false otherwise',\n      '@return true if the iterator contains the object, otherwise return false.',\n      '@return true if the iterator includes the object, or false otherwise.',\n      '@return true if the object can be found in the iterator, otherwise false.',\n      '@return true if the iterator holds the object, false otherwise.'\n    ]\n  },\n  {\n    'tag': '@param <E> the type of object in the {@link Iterator}',\n    'alternatives': [\n      '@param <E> the type of object in the {@link Iterator}',\n      '@param <E> type of object in the {@link Iterator}.',\n      '@param <E> the object type in the {@link Iterator}.',\n      '@param <E> the type of element in the {@link Iterator}.',\n      '@param <E> object type contained in the {@link Iterator}.'\n    ]\n  },\n  {\n    'tag': '@param iterator the iterator to get a value from',\n    'alternatives': [\n      '@param iterator the iterator to get a value from',\n      '@param iterator to obtain a value from.',\n      '@param iterator from which a value should be obtained.',\n      '@param iterator from which to retrieve a value.',\n      '@param iterator, obtain a value from it.'\n    ]\n  },\n  {\n    'tag': '@param index the index to get',\n    'alternatives': [\n      '@param index the index to get',\n      '@param index to retrieve.',\n      '@param get index.',\n      '@param request index.',\n      '@param index that needs to be obtained.'\n    ]\n  },\n  {\n    'tag': '@return the object at the specified index',\n    'alternatives': [\n      '@return the object at the specified index',\n      '@return the object located at the given index.',\n      '@return object at the indicated index.',\n      '@return object found at the specific index.',\n      '@return the element at the specified index.'\n    ]\n  },\n  {\n    'tag': '@throws IndexOutOfBoundsException if the index is invalid',\n    'alternatives': [\n      '@throws IndexOutOfBoundsException if the index is invalid',\n      '@throws IndexOutOfBoundsException if the index is not valid.',\n      '@throws IndexOutOfBoundsException if the index is out of range.',\n      '@throws IndexOutOfBoundsException if the index is illegal.',\n      '@throws IndexOutOfBoundsException if the index is incorrect.'\n    ]\n  },\n  {\n    'tag': '@param iterator the iterator to check, may be null',\n    'alternatives': [\n      '@param iterator the iterator to check, may be null',\n      '@param iterator to be checked, may be null.',\n      '@param iterator that needs to be checked, can be null.',\n      '@param iterator that can be null, needs to be checked.',\n      '@param iterator to be verified, can be null.'\n    ]\n  },\n  {\n    'tag': '@return the number of elements contained in the iterator',\n    'alternatives': [\n      '@return the number of elements contained in the iterator',\n      '@return the count of elements in the iterator.',\n      '@return the total number of elements in the iterator.',\n      '@return the amount of elements present in the iterator.',\n      '@return the quantity of elements within the iterator.'\n    ]\n  },\n  {\n    'tag': '@param <E> the element type',\n    'alternatives': [\n      '@param <E> the element type',\n      '@param <E> type of the element.',\n      '@param <E> the type of element.',\n      '@param <E> the type of the element.',\n      '@param <E> element type.'\n    ]\n  },\n  {\n    'tag': '@param iterator the iterator to convert to a string, may be null',\n    'alternatives': [\n      '@param iterator the iterator to convert to a string, may be null',\n      '@param iterator to be converted to a string, may be null.',\n      '@param iterator to be transformed to a string, can be null.',\n      '@param iterator that can be null, to be converted into a string.',\n      '@param iterator to be changed to a string, may be null.'\n    ]\n  },\n  {\n    'tag': '@return a string representation of {@code iterator}',\n    'alternatives': [\n      '@return a string representation of {@code iterator}',\n      '@return a string representing the {@code iterator}.',\n      '@return a string that represents the {@code iterator}.',\n      '@return a string that describes the {@code iterator}.',\n      '@return a textual representation of the {@code iterator}.'\n    ]\n  },\n  {\n    'tag': '@param <E> the element type',\n    'alternatives': [\n      '@param <E> the element type',\n      '@param <E> type of the element.',\n      '@param <E> the type of element.',\n      '@param <E> the type of the element.',\n      '@param <E> element type.'\n    ]\n  },\n  {\n    'tag': '@param iterator the iterator to convert to a string, may be null',\n    'alternatives': [\n      '@param iterator the iterator to convert to a string, may be null',\n      '@param iterator to be converted to a string, may be null.',\n      '@param iterator to be transformed to a string, can be null.',\n      '@param iterator that can be null, to be converted into a string.',\n      '@param iterator to be changed to a string, may be null.'\n    ]\n  },\n  {\n    'tag': '@param transformer the transformer used to get a string representation of an element',\n    'alternatives': [\n      '@param transformer the transformer used to get a string representation of an element',\n      '@param transformer that is utilized to obtain a string representation of an element.',\n      '@param transformer that is used to retrieve a string representation of an element.',\n      '@param transformer used to convert an element into a string.',\n      '@param transformer used to get the string representation of an element.'\n    ]\n  }\n]"