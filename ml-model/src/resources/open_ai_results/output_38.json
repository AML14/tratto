"output = [\n   {\n      'tag':'@throws NumberIsTooSmallException if {@code endRow < startRow} or\\n{@code endColumn < startColumn}.',\n      'alternatives':[\n         '@throws NumberIsTooSmallException if either {@code endRow < startRow} or\\n{@code endColumn < startColumn}.',\n         '@throws NumberIsTooSmallException when {@code endRow < startRow} or\\n{@code endColumn < startColumn}.',\n         '@throws NumberIsTooSmallException in case {@code endRow < startRow} or\\n{@code endColumn < startColumn}.'\n      ]\n   },\n   {\n      'tag':'@throws NullArgumentException if orginal is null',\n      'alternatives':[\n         '@throws NullArgumentException when orginal is null',\n         '@throws NullArgumentException in case orginal is null',\n         '@throws NullArgumentException if the orginal is null'\n      ]\n   },\n   {\n      'tag':'@throws NullArgumentException if either source or dest is null',\n      'alternatives':[\n         '@throws NullArgumentException when either source or dest is null',\n         '@throws NullArgumentException if either source or dest is null',\n         '@throws NullArgumentException in case either source or dest is null'\n      ]\n   },\n   {\n      'tag':'@return a number {@code delta} so that {@code x + delta} and {@code x}\\ndiffer by a representable floating number.',\n      'alternatives':[\n         '@return a number {@code delta} which is such that {@code x + delta} and {@code x}\\ndiffer by a representable floating number.',\n         '@return a number {@code delta} such that the difference between {@code x + delta} and {@code x} is a representable floating number.',\n         '@return a number {@code delta} that ensures {@code x + delta} and {@code x}\\ndiffer by a representable floating number.'\n      ]\n   },\n   {\n      'tag':'@throws NullArgumentException if {@code optimizer} or {@code generator}\\nis {@code null}.',\n      'alternatives':[\n         '@throws NullArgumentException when either {@code optimizer} or {@code generator}\\nis {@code null}.',\n         '@throws NullArgumentException if either {@code optimizer} or {@code generator}\\nis {@code null}.',\n         '@throws NullArgumentException in case {@code optimizer} or {@code generator}\\nis {@code null}.'\n      ]\n   },\n   {\n      'tag':'@throws NotStrictlyPositiveException if {@code starts < 1}.',\n      'alternatives':[\n         '@throws NotStrictlyPositiveException when {@code starts < 1}.',\n         '@throws NotStrictlyPositiveException if {@code starts < 1}.',\n         '@throws NotStrictlyPositiveException in case {@code starts < 1}.'\n      ]\n   },\n   {\n      'tag':'@param starts Number of starts to perform. If {@code starts == 1},\\nthe {@link #optimize(int,MultivariateVectorFunction,double[],double[],double[])\\noptimize} will return the same solution as {@code optimizer} would.',\n      'alternatives':[\n         '@param starts Number of starts to execute. If {@code starts == 1},\\nthe {@link #optimize(int,MultivariateVectorFunction,double[],double[],double[])\\noptimize} will provide the same result as {@code optimizer} would.',\n         '@param starts Number of starts to carry out. If {@code starts == 1},\\nthe {@link #optimize(int,MultivariateVectorFunction,double[],double[],double[])\\noptimize} will give back the same answer as {@code optimizer} would.',\n         '@param starts Number of starts to perform. In case {@code starts == 1},\\nthe {@link #optimize(int,MultivariateVectorFunction,double[],double[],double[])\\noptimize} will return the same outcome as {@code optimizer} would.'\n      ]\n   },\n   {\n      'tag':'@throws org.apache.commons.math3.exception.NotStrictlyPositiveException if row or column dimension is not positive.',\n      'alternatives':[\n         '@throws org.apache.commons.math3.exception.NotStrictlyPositiveException when row or column dimension is not positive.',\n         '@throws org.apache.commons.math3.exception.NotStrictlyPositiveException if row or column dimension is not positive.',\n         '@throws org.apache.commons.math3.exception.NotStrictlyPositiveException in case row or column dimension is not positive.'\n      ]\n   },\n   {\n      'tag':'@throws org.apache.commons.math3.exception.NullArgumentException if\\nany argument is {@code null}.',\n      'alternatives':[\n         '@throws org.apache.commons.math3.exception.NullArgumentException when\\nany argument is {@code null}.',\n         '@throws org.apache.commons.math3.exception.NullArgumentException if\\nany argument is {@code null}.',\n         '@throws org.apache.commons.math3.exception.NullArgumentException in case\\nany argument is {@code null}.'\n      ]\n   },\n   {\n      'tag':'@throws OutOfRangeException if {@code index} is not between\\n{@code 0} and the value returned by {@link #getSize()} (excluded).',\n      'alternatives':[\n         '@throws OutOfRangeException when {@code index} is not between\\n{@code 0} and the value returned by {@link #getSize()} (excluded).',\n         '@throws OutOfRangeException if {@code index} is not between\\n{@code 0} and the value returned by {@link #getSize()} (excluded).',\n         '@throws OutOfRangeException in case {@code index} is not between\\n{@code 0} and the value returned by {@link #getSize()} (excluded).'\n      ]\n   },\n   {\n      'tag':'@return A value where the function is zero.',\n      'alternatives':[\n         '@return A value that corresponds to the zero function.',\n         '@return A value that satisfies the zero function.',\n         '@return A value which makes the function equal to zero.'\n      ]\n   },\n   {\n      'tag':'@return A value where the function is zero.',\n      'alternatives':[\n         '@return A value that corresponds to the zero function.',\n         '@return A value that satisfies the zero function.',\n         '@return A value which makes the function equal to zero.'\n      ]\n   },\n   {\n      'tag':'@return predicted <code>y</code> value',\n      'alternatives':[\n         '@return predicted <code>y</code> result.',\n         '@return predicted <code>y</code> output.',\n         '@return predicted <code>y</code> outcome.'\n      ]\n   },\n   {\n      'tag':'@throws MathIllegalArgumentException if the variablesToInclude array is null or zero length',\n      'alternatives':[\n         '@throws MathIllegalArgumentException when the variablesToInclude array is null or has zero length',\n         '@throws MathIllegalArgumentException if the variablesToInclude array is null or has zero length',\n         '@throws MathIllegalArgumentException in case the variablesToInclude array is null or has zero length'\n      ]\n   },\n   {\n      'tag':'@throws NullArgumentException if original is null',\n      'alternatives':[\n         '@throws NullArgumentException when original is null',\n         '@throws NullArgumentException if original is null',\n         '@throws NullArgumentException in case original is null'\n      ]\n   },\n   {\n      'tag':'@throws NullArgumentException if any of the arguments are null',\n      'alternatives':[\n         '@throws NullArgumentException when any of the arguments are null',\n         '@throws NullArgumentException if any of the arguments are null',\n         '@throws NullArgumentException in case any of the arguments are null'\n      ]\n   },\n   {\n      'tag':'@throws NoDataException if any of the arrays has zero length.',\n      'alternatives':[\n         '@throws NoDataException when any of the arrays has zero length.',\n         '@throws NoDataException if any of the arrays has zero length.',\n         '@throws NoDataException in case any of the arrays has zero length.'\n      ]\n   },\n   {\n      'tag':'@return a new array {@code r} where {@code r[i] = a[i] - b[i]}.',\n      'alternatives':[\n         '@return a new array {@code r} such that {@code r[i] = a[i] - b[i]}.',\n         '@return a new array {@code r} which satisfies {@code r[i] = a[i] - b[i]}.',\n         '@return a new array {@code r} that ensures {@code r[i] = a[i] - b[i]}.'\n      ]\n   },\n   {\n      'tag':'@throws DimensionMismatchException if the lengths differ and\\n{@code abort} is {@code true}.',\n      'alternatives':[\n         '@throws DimensionMismatchException when the lengths differ and\\n{@code abort} is {@code true}.',\n         '@throws DimensionMismatchException if the lengths differ and\\n{@code abort} is {@code true}.',\n         '@throws DimensionMismatchException in case the lengths differ and\\n{@code abort} is {@code true}.'\n      ]\n   },\n   {\n      'tag':'@throws DimensionMismatchException if the lengths differ and\\n{@code abort} is {@code true}.',\n      'alternatives':[\n         '@throws DimensionMismatchException when the lengths differ and\\n{@code abort} is {@code true}.',\n         '@throws DimensionMismatchException if the lengths differ and\\n{@code abort} is {@code true}.',\n         '@throws DimensionMismatchException in case the lengths differ and\\n{@code abort} is {@code true}.'\n      ]\n   },\n   {\n      'tag':'@throws NullArgumentException if input array is null',\n      'alternatives':[\n         '@throws NullArgumentException when input array is null',\n         '@throws NullArgumentException if input array is null',\n         '@throws NullArgumentException in case input array is null'\n      ]\n   },\n   {\n      'tag':'@throws NotPositiveException if any array entries are less than 0.',\n      'alternatives':[\n         '@throws NotPositiveException when any array entries are less than 0.',\n         '@throws NotPositiveException if any array entries are less than 0.',\n         '@throws NotPositiveException in case any array entries are less than 0.'\n      ]\n   },\n   {\n      'tag':'@throws NotPositiveException if any array entries are less than 0.',\n      'alternatives':[\n         '@throws NotPositiveException when any array entries are less than 0.',\n         '@throws NotPositiveException if any array entries are less than 0.',\n         '@throws NotPositiveException in case any array entries are less than 0.'\n      ]\n   },\n   {\n      'tag':'@throws NullArgumentException if {@code x} or any {@code y} is null.',\n      'alternatives':[\n         '@throws NullArgumentException when {@code x} or any {@code y} is null.',\n         '@throws NullArgumentException if {@code x} or any {@code y} is null.',\n         '@throws NullArgumentException in case {@code x} or any {@code y} is null.'\n      ]\n   },\n   {\n      'tag':'@throws NullArgumentException if {@code x} or any {@code y} is null.',\n      'alternatives':[\n         '@throws NullArgumentException when {@code x} or any {@code y} is null.',\n         '@throws NullArgumentException if {@code x} or any {@code y} is null.',\n         '@throws NullArgumentException in case {@code x} or any {@code y} is null.'\n      ]\n   }\n]"