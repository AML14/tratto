"output=[\n  {\n    'tag': '@param iterator the iterator to decorate, not null',\n    'alternatives': [\n      '@param iterator the iterator to embellish, not null',\n      '@param iterator the iterator to enhance, not null',\n      '@param iterator not null, the iterator to decorate',\n      '@param iterator not null, the iterator to modify',\n      '@param iterator not null, the iterator to adorn'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if the iterator is null',\n    'alternatives': [\n      '@throws NullPointerException if the iterator is empty',\n      '@throws NullPointerException if the iterator is missing',\n      '@throws NullPointerException if the iterator is absent',\n      '@throws NullPointerException if the iterator is not provided',\n      '@throws NullPointerException if the iterator is not present'\n    ]\n  },\n  {\n    'tag': '@param iterator the iterator to decorate, not null',\n    'alternatives': [\n      '@param iterator the iterator to embellish, not null',\n      '@param iterator the iterator to enhance, not null',\n      '@param iterator not null, the iterator to decorate',\n      '@param iterator not null, the iterator to modify',\n      '@param iterator not null, the iterator to adorn'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if the iterator is null',\n    'alternatives': [\n      '@throws NullPointerException if the iterator is empty',\n      '@throws NullPointerException if the iterator is missing',\n      '@throws NullPointerException if the iterator is absent',\n      '@throws NullPointerException if the iterator is not provided',\n      '@throws NullPointerException if the iterator is not present'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if offset is negative',\n    'alternatives': [\n      '@throws IllegalArgumentException when offset is negative',\n      '@throws IllegalArgumentException in case of negative offset',\n      '@throws IllegalArgumentException if offset has a negative value',\n      '@throws IllegalArgumentException if the offset is less than zero',\n      '@throws IllegalArgumentException if offset is not positive'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if any iterator is null',\n    'alternatives': [\n      '@throws NullPointerException if any iterator is missing',\n      '@throws NullPointerException if any iterator is absent',\n      '@throws NullPointerException if any iterator is not provided',\n      '@throws NullPointerException if any iterator is not present',\n      '@throws NullPointerException if any iterator is empty'\n    ]\n  },\n  {\n    'tag': '@return an iterator, interleaving the decorated iterators',\n    'alternatives': [\n      '@return an iterator, combining the decorated iterators',\n      '@return an iterator that merges the decorated iterators',\n      '@return an iterator that interleaves the decorated iterators',\n      '@return an iterator that combines the decorated iterators',\n      '@return an iterator that mixes the decorated iterators'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if any iterator is null',\n    'alternatives': [\n      '@throws NullPointerException if any iterator is missing',\n      '@throws NullPointerException if any iterator is absent',\n      '@throws NullPointerException if any iterator is not provided',\n      '@throws NullPointerException if any iterator is not present',\n      '@throws NullPointerException if any iterator is empty'\n    ]\n  },\n  {\n    'tag': '@return an iterator, interleaving the decorated iterators',\n    'alternatives': [\n      '@return an iterator, combining the decorated iterators',\n      '@return an iterator that merges the decorated iterators',\n      '@return an iterator that interleaves the decorated iterators',\n      '@return an iterator that combines the decorated iterators',\n      '@return an iterator that mixes the decorated iterators'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if any iterator is null',\n    'alternatives': [\n      '@throws NullPointerException if any iterator is missing',\n      '@throws NullPointerException if any iterator is absent',\n      '@throws NullPointerException if any iterator is not provided',\n      '@throws NullPointerException if any iterator is not present',\n      '@throws NullPointerException if any iterator is empty'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if enumeration is null',\n    'alternatives': [\n      '@throws NullPointerException if enumeration is missing',\n      '@throws NullPointerException if enumeration is absent',\n      '@throws NullPointerException if enumeration is not provided',\n      '@throws NullPointerException if enumeration is not present',\n      '@throws NullPointerException if enumeration is empty'\n    ]\n  },\n  {\n    'tag': '@param enumeration the enumeration to use, may not be null',\n    'alternatives': [\n      '@param enumeration not null, the enumeration to use',\n      '@param enumeration the enumeration to utilize, must not be null',\n      '@param enumeration the enumeration to employ, cannot be null',\n      '@param enumeration the enumeration to apply, should not be null',\n      '@param enumeration the enumeration to operate on, not null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if enumeration or removeCollection is null',\n    'alternatives': [\n      '@throws NullPointerException if enumeration or removeCollection is missing',\n      '@throws NullPointerException if enumeration or removeCollection is absent',\n      '@throws NullPointerException if enumeration or removeCollection is not provided',\n      '@throws NullPointerException if enumeration or removeCollection is not present',\n      '@throws NullPointerException if enumeration or removeCollection is empty'\n    ]\n  },\n  {\n    'tag': '@param enumeration the enumeration to use, may not be null',\n    'alternatives': [\n      '@param enumeration not null, the enumeration to use',\n      '@param enumeration the enumeration to utilize, must not be null',\n      '@param enumeration the enumeration to employ, cannot be null',\n      '@param enumeration the enumeration to apply, should not be null',\n      '@param enumeration the enumeration to operate on, not null'\n    ]\n  },\n  {\n    'tag': '@param removeCollection the collection to remove elements from, may not be null',\n    'alternatives': [\n      '@param removeCollection not null, the collection from which to remove elements',\n      '@param removeCollection the collection to delete elements from, must not be null',\n      '@param removeCollection the collection to eliminate elements from, cannot be null',\n      '@param removeCollection the collection to take elements out of, should not be null',\n      '@param removeCollection the collection to extract elements from, not null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if iterator is null',\n    'alternatives': [\n      '@throws NullPointerException if iterator is empty',\n      '@throws NullPointerException if iterator is missing',\n      '@throws NullPointerException if iterator is absent',\n      '@throws NullPointerException if iterator is not provided',\n      '@throws NullPointerException if iterator is not present'\n    ]\n  },\n  {\n    'tag': '@param iterator the iterator to use, may not be null',\n    'alternatives': [\n      '@param iterator not null, the iterator to use',\n      '@param iterator the iterator to utilize, must not be null',\n      '@param iterator the iterator to employ, cannot be null',\n      '@param iterator the iterator to apply, should not be null',\n      '@param iterator the iterator to operate on, not null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if iterator is null',\n    'alternatives': [\n      '@throws NullPointerException if iterator is empty',\n      '@throws NullPointerException if iterator is missing',\n      '@throws NullPointerException if iterator is absent',\n      '@throws NullPointerException if iterator is not provided',\n      '@throws NullPointerException if iterator is not present'\n    ]\n  },\n  {\n    'tag': '@param iterator the iterator to use, may not be null',\n    'alternatives': [\n      '@param iterator not null, the iterator to use',\n      '@param iterator the iterator to utilize, must not be null',\n      '@param iterator the iterator to employ, cannot be null',\n      '@param iterator the iterator to apply, should not be null',\n      '@param iterator the iterator to operate on, not null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if iterator is null',\n    'alternatives': [\n      '@throws NullPointerException if iterator is empty',\n      '@throws NullPointerException if iterator is missing',\n      '@throws NullPointerException if iterator is absent',\n      '@throws NullPointerException if iterator is not provided',\n      '@throws NullPointerException if iterator is not present'\n    ]\n  },\n  {\n    'tag': '@param iterator the iterator to use, may not be null',\n    'alternatives': [\n      '@param iterator not null, the iterator to use',\n      '@param iterator the iterator to utilize, must not be null',\n      '@param iterator the iterator to employ, cannot be null',\n      '@param iterator the iterator to apply, should not be null',\n      '@param iterator the iterator to operate on, not null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if iterator parameter is null',\n    'alternatives': [\n      '@throws NullPointerException if iterator parameter is empty',\n      '@throws NullPointerException if iterator parameter is missing',\n      '@throws NullPointerException if iterator parameter is absent',\n      '@throws NullPointerException if iterator parameter is not provided',\n      '@throws NullPointerException if iterator parameter is not present'\n    ]\n  },\n  {\n    'tag': '@param iterator the iterator to use, may not be null',\n    'alternatives': [\n      '@param iterator not null, the iterator to use',\n      '@param iterator the iterator to utilize, must not be null',\n      '@param iterator the iterator to employ, cannot be null',\n      '@param iterator the iterator to apply, should not be null',\n      '@param iterator the iterator to operate on, not null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if iterator parameter is null',\n    'alternatives': [\n      '@throws NullPointerException if iterator parameter is empty',\n      '@throws NullPointerException if iterator parameter is missing',\n      '@throws NullPointerException if iterator parameter is absent',\n      '@throws NullPointerException if iterator parameter is not provided',\n      '@throws NullPointerException if iterator parameter is not present'\n    ]\n  },\n  {\n    'tag': '@param iterator the iterator to use, not null',\n    'alternatives': [\n      '@param iterator the non-null iterator to use',\n      '@param iterator the iterator to utilize, cannot be null',\n      '@param iterator the iterator to employ, should not be null',\n      '@param iterator the iterator to apply, must not be null',\n      '@param iterator the not null iterator to operate on'\n    ]\n  }\n]"