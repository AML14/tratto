"output = [\n  {\n    'tag': '@param in the input stream',\n    'alternatives': [\n      '@param in the input stream',\n      '@param in the input source',\n      '@param the input stream',\n      '@param the source stream',\n      '@param the stream input'\n    ]\n  },\n  {\n    'tag': '@throws IOException',\n    'alternatives': [\n      '@throws IOException',\n      '@throws IOException error',\n      '@throws IOException exception',\n      '@throws IOException problem',\n      '@throws IOException issue'\n    ]\n  },\n  {\n    'tag': '@throws ClassNotFoundException',\n    'alternatives': [\n      '@throws ClassNotFoundException',\n      '@throws ClassNotFoundException error',\n      '@throws ClassNotFoundException exception',\n      '@throws ClassNotFoundException problem',\n      '@throws ClassNotFoundException issue'\n    ]\n  },\n  {\n    'tag': '@throws ClassCastException if deserialised object has wrong type',\n    'alternatives': [\n      '@throws ClassCastException if deserialised object has wrong type',\n      '@throws ClassCastException if deserialised object type is incorrect',\n      '@throws ClassCastException if the type of the deserialized object is wrong',\n      '@throws ClassCastException if the type of the deserialized object is not correct',\n      '@throws ClassCastException if the wrong type is detected in the deserialized object'\n    ]\n  },\n  {\n    'tag': '@param multiset the multiset to decorate, may not be null',\n    'alternatives': [\n      '@param multiset the multiset to decorate, may not be null',\n      '@param multiset the multiset to enhance, must not be null',\n      '@param multiset the multiset to modify, should not be null',\n      '@param multiset the multiset to adorn, cannot be null',\n      '@param multiset the multiset to beautify, should never be null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if multiset is null',\n    'alternatives': [\n      '@throws NullPointerException if multiset is null',\n      '@throws NullPointerException if the multiset is null',\n      '@throws NullPointerException when multiset is null',\n      '@throws NullPointerException in case multiset is null',\n      '@throws NullPointerException if the multiset parameter is null'\n    ]\n  },\n  {\n    'tag': '@param <E> the type of the elements in the multiset',\n    'alternatives': [\n      '@param <E> the type of the elements in the multiset',\n      '@param <E> the elements\\' type in the multiset',\n      '@param <E> the class of the items in the multiset',\n      '@param <E> the element type in the multiset',\n      '@param <E> the type of objects stored in the multiset'\n    ]\n  },\n  {\n    'tag': '@return a new synchronized MultiSet',\n    'alternatives': [\n      '@return a new synchronized MultiSet',\n      '@return a fresh synchronized MultiSet',\n      '@return a newly created synchronized MultiSet',\n      '@return a synchronized MultiSet instance',\n      '@return a newly generated synchronized MultiSet'\n    ]\n  },\n  {\n    'tag': '@param maximalIterationCount maximum number of iterations\\n(must be less than or equal to {@link #MIDPOINT_MAX_ITERATIONS_COUNT}',\n    'alternatives': [\n      '@param maximalIterationCount maximum number of iterations\\n(must be less than or equal to {@link #MIDPOINT_MAX_ITERATIONS_COUNT}',\n      '@param maximalIterationCount the maximum count of iterations\\n(must be less than or equal to {@link #MIDPOINT_MAX_ITERATIONS_COUNT}',\n      '@param maximalIterationCount the maximum number of iterations allowed\\n(must be less than or equal to {@link #MIDPOINT_MAX_ITERATIONS_COUNT}',\n      '@param maximalIterationCount the maximum iteration limit\\n(must be less than or equal to {@link #MIDPOINT_MAX_ITERATIONS_COUNT}',\n      '@param maximalIterationCount the biggest number of iterations possible\\n(must be less than or equal to {@link #MIDPOINT_MAX_ITERATIONS_COUNT}'\n    ]\n  },\n  {\n    'tag': '@throws NotStrictlyPositiveException if {@code p <= 0}.',\n    'alternatives': [\n      '@throws NotStrictlyPositiveException if {@code p <= 0}.',\n      '@throws NotStrictlyPositiveException if {@code p} is less than or equal to 0.',\n      '@throws NotStrictlyPositiveException if the value of {@code p} is not positive.',\n      '@throws NotStrictlyPositiveException if the parameter {@code p} is not strictly positive.',\n      '@throws NotStrictlyPositiveException if the value of {@code p} is less than or equal to 0.'\n    ]\n  },\n  {\n    'tag': '@return {@code true}',\n    'alternatives': [\n      '@return {@code true}',\n      '@return true',\n      '@return the value true',\n      '@return the boolean value true',\n      '@return the result as true'\n    ]\n  },\n  {\n    'tag': '@param nans code of the value, must be one of {@link #INFINITE},\\n{@link #SNAN},  {@link #QNAN}',\n    'alternatives': [\n      '@param nans code of the value, must be one of {@link #INFINITE},\\n{@link #SNAN},  {@link #QNAN}',\n      '@param nans the code representing the value, must be one of {@link #INFINITE},\\n{@link #SNAN},  {@link #QNAN}',\n      '@param nans the value code, should be one of {@link #INFINITE},\\n{@link #SNAN},  {@link #QNAN}',\n      '@param nans code for the value, must be either {@link #INFINITE},\\n{@link #SNAN},  {@link #QNAN}',\n      '@param nans code of the value, allowed values are {@link #INFINITE},\\n{@link #SNAN},  {@link #QNAN}'\n    ]\n  },\n  {\n    'tag': '@throws NullArgumentException if the measurement vector is {@code null}',\n    'alternatives': [\n      '@throws NullArgumentException if the measurement vector is {@code null}',\n      '@throws NullArgumentException if the vector of measurements is {@code null}',\n      '@throws NullArgumentException if the measurement array is {@code null}',\n      '@throws NullArgumentException if the measurement vector is null',\n      '@throws NullArgumentException if the vector containing the measurements is null'\n    ]\n  },\n  {\n    'tag': '@throws MathIllegalArgumentException if the array is null',\n    'alternatives': [\n      '@throws MathIllegalArgumentException if the array is null',\n      '@throws MathIllegalArgumentException if the array is not valid',\n      '@throws MathIllegalArgumentException if the array is invalid',\n      '@throws MathIllegalArgumentException if the array is empty',\n      '@throws MathIllegalArgumentException if the array parameter is null'\n    ]\n  },\n  {\n    'tag': '@throws MathIllegalArgumentException if the array is null or the array index\\n parameters are not valid',\n    'alternatives': [\n      '@throws MathIllegalArgumentException if the array is null or the array index\\n parameters are not valid',\n      '@throws MathIllegalArgumentException if the array is null or the indices\\n are not valid',\n      '@throws MathIllegalArgumentException if the array or the array index\\n parameters are incorrect',\n      '@throws MathIllegalArgumentException if the array or the indices\\n are not valid',\n      '@throws MathIllegalArgumentException if the array or the array index\\n parameters are invalid'\n    ]\n  },\n  {\n    'tag': '@throws MathIllegalArgumentException if the array is null',\n    'alternatives': [\n      '@throws MathIllegalArgumentException if the array is null',\n      '@throws MathIllegalArgumentException if the array is not valid',\n      '@throws MathIllegalArgumentException if the array is invalid',\n      '@throws MathIllegalArgumentException if the array is empty',\n      '@throws MathIllegalArgumentException if the array parameter is null'\n    ]\n  },\n  {\n    'tag': '@throws MathIllegalArgumentException if the array is null or the array index\\nparameters are not valid',\n    'alternatives': [\n      '@throws MathIllegalArgumentException if the array is null or the array index\\nparameters are not valid',\n      '@throws MathIllegalArgumentException if the array is null or the array index\\nparameters are invalid',\n      '@throws MathIllegalArgumentException if the array is null or the indices\\nare not valid',\n      '@throws MathIllegalArgumentException if the array is null or the indices\\nare invalid',\n      '@throws MathIllegalArgumentException if the array is null or the array index\\nparameters are not correct'\n    ]\n  },\n  {\n    'tag': '@throws MathIllegalArgumentException if the array is null',\n    'alternatives': [\n      '@throws MathIllegalArgumentException if the array is null',\n      '@throws MathIllegalArgumentException if the array is not valid',\n      '@throws MathIllegalArgumentException if the array is invalid',\n      '@throws MathIllegalArgumentException if the array is empty',\n      '@throws MathIllegalArgumentException if the array parameter is null'\n    ]\n  },\n  {\n    'tag': '@throws MathIllegalArgumentException if the array is null or the array index\\nparameters are not valid',\n    'alternatives': [\n      '@throws MathIllegalArgumentException if the array is null or the array index\\nparameters are not valid',\n      '@throws MathIllegalArgumentException if the array is null or the array index\\nparameters are invalid',\n      '@throws MathIllegalArgumentException if the array is null or the indices\\nare not valid',\n      '@throws MathIllegalArgumentException if the array is null or the indices\\nare invalid',\n      '@throws MathIllegalArgumentException if the array is null or the array index\\nparameters are not correct'\n    ]\n  }\n]"