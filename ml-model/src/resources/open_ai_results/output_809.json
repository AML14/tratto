"[\n  {\n    'tag': '@throws IllegalArgumentException if the load factor is less than or equal to zero',\n    'alternatives': [\n      '@throws IllegalArgumentException if the load factor is less than or equal to zero',\n      '@throws IllegalArgumentException when the load factor is less than or equal to zero',\n      '@throws IllegalArgumentException if the load factor is zero or negative',\n      '@throws IllegalArgumentException if the load factor is zero or less',\n      '@throws IllegalArgumentException if the load factor is not positive'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if the map is null',\n    'alternatives': [\n      '@throws NullPointerException if the map is null',\n      '@throws NullPointerException when the map is null',\n      '@throws NullPointerException if the map is not provided',\n      '@throws NullPointerException if a null map is passed',\n      '@throws NullPointerException if the provided map is null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if the map is null',\n    'alternatives': [\n      '@throws NullPointerException if the map is null',\n      '@throws NullPointerException when the map is null',\n      '@throws NullPointerException if the map is not provided',\n      '@throws NullPointerException if a null map is passed',\n      '@throws NullPointerException if the provided map is null'\n    ]\n  },\n  {\n    'tag': '@return the inverse map',\n    'alternatives': [\n      '@return the inverted map',\n      '@return the map in reverse order',\n      '@return the map with the keys and values swapped',\n      '@return the map that is the inverse of the original',\n      '@return the map with the key-value pairs reversed'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if the map is null',\n    'alternatives': [\n      '@throws NullPointerException if the map is null',\n      '@throws NullPointerException when the map is null',\n      '@throws NullPointerException if the map is not provided',\n      '@throws NullPointerException if a null map is passed',\n      '@throws NullPointerException if the provided map is null'\n    ]\n  },\n  {\n    'tag': '@param map the map to wrap, must not be null',\n    'alternatives': [\n      '@param map the map to wrap, must not be null',\n      '@param map the map to be wrapped, cannot be null',\n      '@param map the map that needs to be wrapped, must not be null',\n      '@param map the map that should be wrapped, cannot be null',\n      '@param map the map that will be wrapped, must not be null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if map is null',\n    'alternatives': [\n      '@throws NullPointerException if map is null',\n      '@throws NullPointerException when map is null',\n      '@throws NullPointerException if map is not provided',\n      '@throws NullPointerException if a null map is passed',\n      '@throws NullPointerException if the provided map is null'\n    ]\n  },\n  {\n    'tag': '@param map mappings to be stored in this map, may not be null',\n    'alternatives': [\n      '@param map mappings to be stored in this map, may not be null',\n      '@param map the mappings to be stored in this map, cannot be null',\n      '@param map the map containing the mappings to store, must not be null',\n      '@param map the map with the mappings to be stored, may not be null',\n      '@param map the map holding the mappings to store, must not be null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if map is null',\n    'alternatives': [\n      '@throws NullPointerException if map is null',\n      '@throws NullPointerException when map is null',\n      '@throws NullPointerException if map is not provided',\n      '@throws NullPointerException if a null map is passed',\n      '@throws NullPointerException if the provided map is null'\n    ]\n  },\n  {\n    'tag': '@param map mappings to be stored in this map, may not be null',\n    'alternatives': [\n      '@param map mappings to be stored in this map, may not be null',\n      '@param map the mappings to be stored in this map, cannot be null',\n      '@param map the map containing the mappings to store, must not be null',\n      '@param map the map with the mappings to be stored, may not be null',\n      '@param map the map holding the mappings to store, must not be null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if values is null',\n    'alternatives': [\n      '@throws NullPointerException if values is null',\n      '@throws NullPointerException when values are null',\n      '@throws NullPointerException if the values parameter is null',\n      '@throws NullPointerException if a null value is passed',\n      '@throws NullPointerException if the provided values are null'\n    ]\n  },\n  {\n    'tag': '@param values the values to add to the collection at the key, may not be null',\n    'alternatives': [\n      '@param values the values to add to the collection at the key, may not be null',\n      '@param values the values to be added to the collection at the key, must not be null',\n      '@param values the values that need to be added to the collection at the key, cannot be null',\n      '@param values the values to insert into the collection at the key, may not be null',\n      '@param values the values to place in the collection at the key, must not be null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if bag or transformer is null',\n    'alternatives': [\n      '@throws NullPointerException if bag or transformer is null',\n      '@throws NullPointerException when bag or transformer is null',\n      '@throws NullPointerException if either bag or transformer is null',\n      '@throws NullPointerException if the bag or transformer is null',\n      '@throws NullPointerException if the provided bag or transformer is null'\n    ]\n  },\n  {\n    'tag': '@param bag the bag to decorate, must not be null',\n    'alternatives': [\n      '@param bag the bag to decorate, must not be null',\n      '@param bag the bag to be decorated, cannot be null',\n      '@param bag the bag that needs decoration, must not be null',\n      '@param bag the bag that should be decorated, cannot be null',\n      '@param bag the bag that will be decorated, must not be null'\n    ]\n  },\n  {\n    'tag': '@param transformer the transformer to use for conversion, must not be null',\n    'alternatives': [\n      '@param transformer the transformer to use for conversion, must not be null',\n      '@param transformer the transformer for performing conversion, cannot be null',\n      '@param transformer the transformer that should be used for conversion, must not be null',\n      '@param transformer the transformer to be used for conversion, cannot be null',\n      '@param transformer the transformer that will be used for conversion, must not be null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if bag or transformer is null',\n    'alternatives': [\n      '@throws NullPointerException if bag or transformer is null',\n      '@throws NullPointerException when bag or transformer is null',\n      '@throws NullPointerException if either bag or transformer is null',\n      '@throws NullPointerException if the bag or transformer is null',\n      '@throws NullPointerException if the provided bag or transformer is null'\n    ]\n  },\n  {\n    'tag': '@param bag the bag to decorate, must not be null',\n    'alternatives': [\n      '@param bag the bag to decorate, must not be null',\n      '@param bag the bag to be decorated, cannot be null',\n      '@param bag the bag that needs decoration, must not be null',\n      '@param bag the bag that should be decorated, cannot be null',\n      '@param bag the bag that will be decorated, must not be null'\n    ]\n  },\n  {\n    'tag': '@param transformer the transformer to use for conversion, must not be null',\n    'alternatives': [\n      '@param transformer the transformer to use for conversion, must not be null',\n      '@param transformer the transformer for performing conversion, cannot be null',\n      '@param transformer the transformer that should be used for conversion, must not be null',\n      '@param transformer the transformer to be used for conversion, cannot be null',\n      '@param transformer the transformer that will be used for conversion, must not be null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if bag or transformer is null',\n    'alternatives': [\n      '@throws NullPointerException if bag or transformer is null',\n      '@throws NullPointerException when bag or transformer is null',\n      '@throws NullPointerException if either bag or transformer is null',\n      '@throws NullPointerException if the bag or transformer is null',\n      '@throws NullPointerException if the provided bag or transformer is null'\n    ]\n  },\n  {\n    'tag': '@param bag the bag to decorate, must not be null',\n    'alternatives': [\n      '@param bag the bag to decorate, must not be null',\n      '@param bag the bag to be decorated, cannot be null',\n      '@param bag the bag that needs decoration, must not be null',\n      '@param bag the bag that should be decorated, cannot be null',\n      '@param bag the bag that will be decorated, must not be null'\n    ]\n  },\n  {\n    'tag': '@param transformer the transformer to use for conversion, must not be null',\n    'alternatives': [\n      '@param transformer the transformer to use for conversion, must not be null',\n      '@param transformer the transformer for performing conversion, cannot be null',\n      '@param transformer the transformer that should be used for conversion, must not be null',\n      '@param transformer the transformer to be used for conversion, cannot be null',\n      '@param transformer the transformer that will be used for conversion, must not be null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if multiset or predicate is null',\n    'alternatives': [\n      '@throws NullPointerException if multiset or predicate is null',\n      '@throws NullPointerException when multiset or predicate is null',\n      '@throws NullPointerException if either multiset or predicate is null',\n      '@throws NullPointerException if the multiset or predicate is null',\n      '@throws NullPointerException if the provided multiset or predicate is null'\n    ]\n  },\n  {\n    'tag': '@param multiset the multiset to decorate, must not be null',\n    'alternatives': [\n      '@param multiset the multiset to decorate, must not be null',\n      '@param multiset the multiset to be decorated, cannot be null',\n      '@param multiset the multiset that needs decoration, must not be null',\n      '@param multiset the multiset that should be decorated, cannot be null',\n      '@param multiset the multiset that will be decorated, must not be null'\n    ]\n  },\n  {\n    'tag': '@param predicate the predicate to use for validation, must not be null',\n    'alternatives': [\n      '@param predicate the predicate to use for validation, must not be null',\n      '@param predicate the predicate for performing validation, cannot be null',\n      '@param predicate the predicate that should be used for validation, must not be null',\n      '@param predicate the predicate to be used for validation, cannot be null',\n      '@param predicate the predicate that will be used for validation, must not be null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if multiset or predicate is null',\n    'alternatives': [\n      '@throws NullPointerException if multiset or predicate is null',\n      '@throws NullPointerException when multiset or predicate is null',\n      '@throws NullPointerException if either multiset or predicate is null',\n      '@throws NullPointerException if the multiset or predicate is null',\n      '@throws NullPointerException if the provided multiset or predicate is null'\n    ]\n  }\n]"