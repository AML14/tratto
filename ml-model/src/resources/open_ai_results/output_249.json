"output = [\n  {\n    'tag': '@param <O> the output type',\n    'alternatives': [\n      '@param <O> the type of the output',\n      '@param <O> the type of the result',\n      '@param <O> the type of the returned value',\n      '@param <O> the output datatype',\n      '@param <O> the result type'\n    ]\n  },\n  {\n    'tag': '@return the <code>factory</code> transformer',\n    'alternatives': [\n      '@return the transformer that represents the <code>factory</code>',\n      '@return the transformer obtained from the <code>factory</code>',\n      '@return the transformer produced by the <code>factory</code>',\n      '@return the transformer created by the <code>factory</code>',\n      '@return the transformer generated by the <code>factory</code>'\n    ]\n  },\n  {\n    'tag': '@param input the input object to transform',\n    'alternatives': [\n      '@param input the object to be transformed',\n      '@param input the object that needs to be transformed',\n      '@param input the object for transformation',\n      '@param input the object to undergo transformation',\n      '@param input the object that requires transformation'\n    ]\n  },\n  {\n    'tag': '@return the factory',\n    'alternatives': [\n      '@return the factory object',\n      '@return the instance of the factory',\n      '@return the factory implementation',\n      '@return the factory reference',\n      '@return the factory instance'\n    ]\n  },\n  {\n    'tag': '@param <T> the type that the predicate queries',\n    'alternatives': [\n      '@param <T> the type of the queried predicate',\n      '@param <T> the type that the predicate examines',\n      '@param <T> the type being checked by the predicate',\n      '@param <T> the type the predicate operates on',\n      '@param <T> the type involved in the predicate check'\n    ]\n  },\n  {\n    'tag': '@return the singleton instance',\n    'alternatives': [\n      '@return the instance of the singleton',\n      '@return the unique instance',\n      '@return the sole instance',\n      '@return the only instance',\n      '@return the single instance'\n    ]\n  },\n  {\n    'tag': '@param object the object to evaluate',\n    'alternatives': [\n      '@param object the object to assess',\n      '@param object the object to analyze',\n      '@param object the object to inspect',\n      '@param object the object to examine',\n      '@param object the object to appraise'\n    ]\n  },\n  {\n    'tag': '@return true if not null',\n    'alternatives': [\n      '@return true if not empty',\n      '@return true if not void',\n      '@return true if not missing',\n      '@return true if not nonexistent',\n      '@return true if not absent'\n    ]\n  },\n  {\n    'tag': '@param <E> the type that the closure acts on',\n    'alternatives': [\n      '@param <E> the type of the affected closure',\n      '@param <E> the type the closure operates on',\n      '@param <E> the type involved in the closure action',\n      '@param <E> the type targeted by the closure',\n      '@param <E> the type handled by the closure'\n    ]\n  },\n  {\n    'tag': '@param predicates array of predicates, cloned, no nulls',\n    'alternatives': [\n      '@param predicates the cloned array of predicates without nulls',\n      '@param predicates the array of predicates (cloned), no nulls',\n      '@param predicates the array of cloned predicates with no nulls',\n      '@param predicates the predicates array (cloned and without nulls)',\n      '@param predicates the cloned array of non-null predicates'\n    ]\n  },\n  {\n    'tag': '@param closures matching array of closures, cloned, no nulls',\n    'alternatives': [\n      '@param closures the cloned array of closures without nulls',\n      '@param closures the array of closures (cloned), no nulls',\n      '@param closures the array of cloned closures with no nulls',\n      '@param closures the closures array (cloned and without nulls)',\n      '@param closures the cloned array of non-null closures'\n    ]\n  },\n  {\n    'tag': '@param defaultClosure the closure to use if no match, null means nop',\n    'alternatives': [\n      '@param defaultClosure the closure to be used if there is no match, null means no operation',\n      '@param defaultClosure the closure to apply in case of no match, null means no operation',\n      '@param defaultClosure the closure to utilize when there is no match, null means no operation',\n      '@param defaultClosure the closure to use if no match is found, null means no operation',\n      '@param defaultClosure the closure to employ if no match is found, null means no operation'\n    ]\n  },\n  {\n    'tag': '@return the <code>chained</code> closure',\n    'alternatives': [\n      '@return the closure that has been <code>chained</code>',\n      '@return the closure that is <code>chained</code>',\n      '@return the closure with <code>chained</code> behavior',\n      '@return the closure that was <code>chained</code>',\n      '@return the closure which is <code>chained</code>'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if any element in the array is null',\n    'alternatives': [\n      '@throws NullPointerException if any item in the array is null',\n      '@throws NullPointerException if any element in the array is missing',\n      '@throws NullPointerException if any value in the array is null',\n      '@throws NullPointerException if any entry in the array is null',\n      '@throws NullPointerException if any object in the array is null'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if the array lengths of predicates and closures do not match',\n    'alternatives': [\n      '@throws IllegalArgumentException if the lengths of the predicates and closures arrays do not match',\n      '@throws IllegalArgumentException if the sizes of the predicates and closures arrays do not match',\n      '@throws IllegalArgumentException if the lengths of the predicate and closure arrays differ',\n      '@throws IllegalArgumentException if the predicate and closure arrays have different lengths',\n      '@throws IllegalArgumentException if the predicate array and closure array have unequal sizes'\n    ]\n  },\n  {\n    'tag': '@param <E> the type that the closure acts on',\n    'alternatives': [\n      '@param <E> the type of the closure target',\n      '@param <E> the type the closure operates on',\n      '@param <E> the type involved in the closure behavior',\n      '@param <E> the type targeted by the closure',\n      '@param <E> the type handled by the closure'\n    ]\n  },\n  {\n    'tag': '@param destP number of free parameters in destination derivative structure',\n    'alternatives': [\n      '@param destP the count of free parameters in the destination derivative structure',\n      '@param destP the number of available parameters in the destination derivative structure',\n      '@param destP the quantity of unbound parameters in the destination derivative structure',\n      '@param destP the total of unconstrained parameters in the destination derivative structure',\n      '@param destP the amount of unused parameters in the destination derivative structure'\n    ]\n  },\n  {\n    'tag': '@param destO derivation order in destination derivative structure',\n    'alternatives': [\n      '@param destO the order of derivation in the destination derivative structure',\n      '@param destO the derivative order in the destination derivative structure',\n      '@param destO the level of derivation in the destination derivative structure',\n      '@param destO the derivative degree in the destination derivative structure',\n      '@param destO the derivative magnitude in the destination derivative structure'\n    ]\n  },\n  {\n    'tag': '@param destSizes sizes array for the destination derivative structure',\n    'alternatives': [\n      '@param destSizes the array of sizes for the destination derivative structure',\n      '@param destSizes the sizes array for the target derivative structure',\n      '@param destSizes the array of dimensions for the destination derivative structure',\n      '@param destSizes the dimensions array for the destination derivative structure',\n      '@param destSizes the size information array for the destination derivative structure'\n    ]\n  },\n  {\n    'tag': '@return index of the partial derivative with the <em>same</em> characteristics\\nin destination derivative structure',\n    'alternatives': [\n      '@return the index of the partial derivative with the identical characteristics\\nin the destination derivative structure',\n      '@return the index of the partial derivative with the equivalent characteristics\\nin the destination derivative structure',\n      '@return the index of the partial derivative with the matching characteristics\\nin the destination derivative structure',\n      '@return the index of the partial derivative with the similar characteristics\\nin the destination derivative structure',\n      '@return the index of the partial derivative with the corresponding characteristics\\nin the destination derivative structure'\n    ]\n  },\n  {\n    'tag': '@throws NumberIsTooLargeException if order is too large',\n    'alternatives': [\n      '@throws NumberIsTooLargeException if the order exceeds the limit',\n      '@throws NumberIsTooLargeException if the order is excessively large',\n      '@throws NumberIsTooLargeException if the order is too high',\n      '@throws NumberIsTooLargeException if the order is larger than allowed',\n      '@throws NumberIsTooLargeException if the order is beyond the acceptable range'\n    ]\n  },\n  {\n    'tag': '@param index of the partial derivative',\n    'alternatives': [\n      '@param index the index of the partial derivative',\n      '@param index the position of the partial derivative',\n      '@param index the location of the partial derivative',\n      '@param index the offset of the partial derivative',\n      '@param index the spot of the partial derivative'\n    ]\n  },\n  {\n    'tag': '@return orders derivation orders with respect to each parameter',\n    'alternatives': [\n      '@return orders the derivative orders corresponding to each parameter',\n      '@return orders the orders of derivation for each parameter',\n      '@return orders the derivative degrees for each parameter',\n      '@return orders the degrees of differentiation for each parameter',\n      '@return orders the magnitudes of the derivatives for each parameter'\n    ]\n  },\n  {\n    'tag': '@return number of free parameters',\n    'alternatives': [\n      '@return the count of free parameters',\n      '@return the total number of available parameters',\n      '@return the quantity of unconstrained parameters',\n      '@return the amount of unused parameters',\n      '@return the number of unbound parameters'\n    ]\n  },\n  {\n    'tag': '@return derivation order',\n    'alternatives': [\n      '@return the order of derivation',\n      '@return the derivative order',\n      '@return the differentiation level',\n      '@return the degree of differentiation',\n      '@return the magnitude of differentiation'\n    ]\n  }\n]"