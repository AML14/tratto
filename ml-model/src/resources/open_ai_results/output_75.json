"output=[\n  {\n    'tag': '@param x valued to be left-shifted',\n    'alternatives': [\n      '@param x value to be shifted to the left',\n      '@param x value to undergo a left-shift',\n      '@param x is the value that will be left-shifted'\n    ]\n  },\n  {\n    'tag': '@param y magnitude of the left-shift',\n    'alternatives': [\n      '@param y size of the left-shift',\n      '@param y represents the amount of left-shift',\n      '@param y is the magnitude for the left-shift'\n    ]\n  },\n  {\n    'tag': '@param x valued to be left-shifted',\n    'alternatives': [\n      '@param x value to be shifted to the left',\n      '@param x value to undergo a left-shift',\n      '@param x is the value that will be left-shifted'\n    ]\n  },\n  {\n    'tag': '@param y magnitude of the left-shift',\n    'alternatives': [\n      '@param y size of the left-shift',\n      '@param y represents the amount of left-shift',\n      '@param y is the magnitude for the left-shift'\n    ]\n  },\n  {\n    'tag': '@param x valued to be right-shifted',\n    'alternatives': [\n      '@param x value to be shifted to the right',\n      '@param x value to undergo a right-shift',\n      '@param x is the value that will be right-shifted'\n    ]\n  },\n  {\n    'tag': '@param y magnitude of the right-shift',\n    'alternatives': [\n      '@param y size of the right-shift',\n      '@param y represents the amount of right-shift',\n      '@param y is the magnitude for the right-shift'\n    ]\n  },\n  {\n    'tag': '@param x valued to be right-shifted',\n    'alternatives': [\n      '@param x value to be shifted to the right',\n      '@param x value to undergo a right-shift',\n      '@param x is the value that will be right-shifted'\n    ]\n  },\n  {\n    'tag': '@param y magnitude of the right-shift',\n    'alternatives': [\n      '@param y size of the right-shift',\n      '@param y represents the amount of right-shift',\n      '@param y is the magnitude for the right-shift'\n    ]\n  },\n  {\n    'tag': '@param address the InetAddress to increment',\n    'alternatives': [\n      '@param address the InetAddress to increase',\n      '@param address is the InetAddress to be incremented',\n      '@param address is the InetAddress that will be incremented'\n    ]\n  },\n  {\n    'tag': '@return a new InetAddress that is one more than the passed in address',\n    'alternatives': [\n      '@return an updated InetAddress that is greater than the given address',\n      '@return a fresh InetAddress that is incremented from the original address',\n      '@return a recently generated InetAddress that is slightly greater than the initial address'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if InetAddress is at the end of its range',\n    'alternatives': [\n      '@throws IllegalArgumentException when InetAddress reaches its maximum limit',\n      '@throws IllegalArgumentException if InetAddress is already at the maximum range',\n      '@throws IllegalArgumentException in case the InetAddress exceeds its maximum range'\n    ]\n  },\n  {\n    'tag': '@return true if the InetAddress is either 255.255.255.255 for IPv4 or\\n ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff for IPv6',\n    'alternatives': [\n      '@return true if the InetAddress is 255.255.255.255 for IPv4 or\\n     ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff for IPv6',\n      '@return true if the InetAddress equals either 255.255.255.255 for IPv4 or\\n     ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff for IPv6',\n      '@return true if the InetAddress falls into the range of 255.255.255.255 for IPv4 or\\n     ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff for IPv6'\n    ]\n  },\n  {\n    'tag': '@return a validated port number, in the range [0..65535]',\n    'alternatives': [\n      '@return a validated port number, ranging from 0 to 65535',\n      '@return a verified port number that falls within the range [0..65535]',\n      '@return a secured port number, within the acceptable range of [0..65535]'\n    ]\n  },\n  {\n    'tag': '@throws IllegalStateException if no port is defined.  You can use\\n        {@link #withDefaultPort(int)} to prevent this from occurring.',\n    'alternatives': [\n      '@throws IllegalStateException if the port is not specified.  To avoid this, utilize\\n        {@link #withDefaultPort(int)}',\n      '@throws IllegalStateException when there is no defined port.  To avoid this, consider\\n        using {@link #withDefaultPort(int)}',\n      '@throws IllegalStateException if no port is provided.  To prevent this, utilize\\n        {@link #withDefaultPort(int)}'\n    ]\n  },\n  {\n    'tag': '@param host the host string to parse.  Must not contain a port number.',\n    'alternatives': [\n      '@param host the string representation of the host.  It should not contain any port number.',\n      '@param host the string that represents the host.  It should not have a port number.',\n      '@param host the string to be parsed as the host.  It must not include any port number.'\n    ]\n  },\n  {\n    'tag': '@param port a port number from [0..65535]',\n    'alternatives': [\n      '@param port a port number within the range [0..65535]',\n      '@param port a port number that falls in the interval [0..65535]',\n      '@param port a valid port number, ranging from 0 to 65535'\n    ]\n  },\n  {\n    'tag': '@return if parsing was successful, a populated HostAndPort object.',\n    'alternatives': [\n      '@return a filled HostAndPort object if parsing was successful.',\n      '@return a HostAndPort object that is populated when parsing was successful.',\n      '@return a HostAndPort object with data, if parsing was successful.'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if {@code host} contains a port number,\\n    or {@code port} is out of range.',\n    'alternatives': [\n      '@throws IllegalArgumentException when {@code host} has a port number,\\n    or when {@code port} exceeds the acceptable range.',\n      '@throws IllegalArgumentException if {@code host} includes a port number,\\n    or when {@code port} is beyond the allowed range.',\n      '@throws IllegalArgumentException if {@code host} contains a port number,\\n    or {@code port} is not within the valid range.'\n    ]\n  },\n  {\n    'tag': '@param host the host-only string to parse.  Must not contain a port number.',\n    'alternatives': [\n      '@param host the string representation of the host (without a port number).',\n      '@param host the string that represents only the host (no port number).',\n      '@param host the string to be parsed as the host. It must not include any port number.'\n    ]\n  },\n  {\n    'tag': '@return if parsing was successful, a populated HostAndPort object.',\n    'alternatives': [\n      '@return a filled HostAndPort object if parsing was successful.',\n      '@return a HostAndPort object that is populated when parsing was successful.',\n      '@return a HostAndPort object with data, if parsing was successful.'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if {@code host} contains a port number.',\n    'alternatives': [\n      '@throws IllegalArgumentException when {@code host} includes a port number.',\n      '@throws IllegalArgumentException if {@code host} has a port number.',\n      '@throws IllegalArgumentException if {@code host} contains a port number.'\n    ]\n  },\n  {\n    'tag': '@param hostPortString the input string to parse.',\n    'alternatives': [\n      '@param hostPortString the string to be parsed as the input.',\n      '@param hostPortString the string that is the intended input to be parsed.',\n      '@param hostPortString the string used as the input to be parsed.'\n    ]\n  },\n  {\n    'tag': '@return if parsing was successful, a populated HostAndPort object.',\n    'alternatives': [\n      '@return a filled HostAndPort object if parsing was successful.',\n      '@return a HostAndPort object that is populated when parsing was successful.',\n      '@return a HostAndPort object with data, if parsing was successful.'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if nothing meaningful could be parsed.',\n    'alternatives': [\n      '@throws IllegalArgumentException if no meaningful information could be parsed.',\n      '@throws IllegalArgumentException in case the parsed data is not meaningful.',\n      '@throws IllegalArgumentException if there is no meaningful data that can be parsed.'\n    ]\n  },\n  {\n    'tag': '@param hostPortString the full bracketed host-port specification. Post might not be specified.',\n    'alternatives': [\n      '@param hostPortString the complete host-port specification enclosed in brackets. The port might not be specified.',\n      '@param hostPortString the host-port specification that includes brackets. The port may not be specified.',\n      '@param hostPortString the entire host-port specification in brackets. The port might be unspecified.'\n    ]\n  }\n]"