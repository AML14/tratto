"output = [\n  {\n    'tag': '@param period Period.',\n    'alternatives': [\n      '@param period Duration.',\n      '@param period Time interval.',\n      '@param period Length of time.',\n      '@param period Time period.',\n      '@param period Time span.'\n    ]\n  },\n  {\n    'tag': '@param extend Number of points to be appended at the beginning and\\nend of the sample arrays in order to avoid interpolation failure at\\nthe (periodic) boundaries of the orginal interval. The value is the\\nnumber of sample points which the original {@code interpolator} needs\\non each side of the interpolated point.',\n    'alternatives': [\n\t  '@param extend The additional points added to the sample arrays in order to prevent interpolation failure at the boundaries of the original interval. The number of added sample points required by the original {@code interpolator} on each side of the interpolated point.',\n      '@param extend The number of extra points added at the start and end of the sample arrays to avoid interpolation failure at the periodic boundaries of the original interval. This value represents the number of sample points needed by the original {@code interpolator} on both sides of the interpolated point.',\n      '@param extend The amount of points to be added at the beginning and end of the sample arrays to prevent interpolation failure at the boundaries of the original interval. The value represents the number of sample points required by the original {@code interpolator} on each side of the interpolated point.',\n      '@param extend Number of additional points appended at the start and end of the sample arrays to avoid interpolation failure at the boundaries of the original interval. This corresponds to the number of sample points needed by the original {@code interpolator} on both sides of the interpolated point.',\n      '@param extend Number of extra sample points added at the beginning and end of the sample arrays to prevent interpolation failure at the (periodic) boundaries of the original interval. This value represents the number of sample points required by the original {@code interpolator} on each side of the interpolated point.'\n    ]\n  },\n  {\n    'tag': '@param interpolator Interpolator.',\n    'alternatives': [\n      '@param interpolator Interpolation function.',\n      '@param interpolator Interpolation algorithm.',\n      '@param interpolator Interpolation method.',\n      '@param interpolator Interpolation technique.',\n      '@param interpolator Interpolation model.'\n    ]\n  },\n  {\n    'tag': '@param period Period.',\n    'alternatives': [\n      '@param period Duration.',\n      '@param period Time interval.',\n      '@param period Length of time.',\n      '@param period Time period.',\n      '@param period Time span.'\n    ]\n  },\n  {\n    'tag': '@param xval Arguments for the interpolation points.',\n    'alternatives': [\n      '@param xval Input values for the interpolation points.',\n      '@param xval Data points for the interpolation.',\n      '@param xval Interpolation arguments.',\n      '@param xval Interpolation coordinates.',\n      '@param xval Independent variables.'\n    ]\n  },\n  {\n    'tag': '@param yval Values for the interpolation points.',\n    'alternatives': [\n      '@param yval Output values for the interpolation points.',\n      '@param yval Function values for the interpolation.',\n      '@param yval Interpolation values.',\n      '@param yval Dependent variables.',\n      '@param yval Response variables.'\n    ]\n  },\n  {\n    'tag': '@return a function which interpolates the dataset.',\n    'alternatives': [\n      '@return a function that performs dataset interpolation.',\n      '@return a function that does the interpolation for the dataset.',\n      '@return a function that carries out interpolation on the dataset.',\n      '@return a function that conducts dataset interpolation.',\n      '@return a function that executes interpolation on the dataset.'\n    ]\n  },\n  {\n    'tag': '@throws MathIllegalArgumentException if the arguments violate assumptions made by the interpolation\\nalgorithm.',\n    'alternatives': [\n      '@throws MathIllegalArgumentException if the arguments do not meet the assumptions made by the interpolation algorithm.',\n      '@throws MathIllegalArgumentException if the assumptions made by the interpolation algorithm are violated by the arguments.',\n      '@throws MathIllegalArgumentException if the arguments contradict the assumptions made by the interpolation algorithm.',\n      '@throws MathIllegalArgumentException if the assumptions made by the interpolation algorithm are not satisfied by the arguments.',\n      '@throws MathIllegalArgumentException if the arguments go against the assumptions made by the interpolation algorithm.'\n    ]\n  },\n  {\n    'tag': '@throws DimensionMismatchException if arrays lengthes do not match',\n    'alternatives': [\n      '@throws DimensionMismatchException if the lengths of the arrays do not match',\n      '@throws DimensionMismatchException if the arrays have different lengths',\n      '@throws DimensionMismatchException if the sizes of the arrays are not equal',\n      '@throws DimensionMismatchException if the lengths of the arrays are not the same',\n      '@throws DimensionMismatchException if the arrays do not have the same size'\n    ]\n  },\n  {\n    'tag': '@param degree Degree of the polynomial fitting functions.',\n    'alternatives': [\n      '@param degree Polynomial fitting functions degree.',\n      '@param degree Degree of the polynomial functions used in fitting.',\n      '@param degree Degree of the fitting polynomial functions.',\n      '@param degree Degree of the polynomial functions for fitting.',\n      '@param degree Degree of the polynomial used for fitting.'\n    ]\n  },\n  {\n    'tag': '@param xDegree Degree of the polynomial fitting functions along the\\nx-dimension.',\n    'alternatives': [\n      '@param xDegree Polynomial fitting functions degree along the x-dimension.',\n      '@param xDegree Degree of the polynomial functions used in fitting along the x-dimension.',\n      '@param xDegree Degree of the fitting polynomial functions along the x-dimension.',\n      '@param xDegree Degree of the polynomial functions for fitting along the x-dimension.',\n      '@param xDegree Degree of the polynomial used for fitting along the x-dimension.'\n    ]\n  },\n  {\n    'tag': '@param yDegree Degree of the polynomial fitting functions along the\\ny-dimension.',\n    'alternatives': [\n      '@param yDegree Polynomial fitting functions degree along the y-dimension.',\n      '@param yDegree Degree of the polynomial functions used in fitting along the y-dimension.',\n      '@param yDegree Degree of the fitting polynomial functions along the y-dimension.',\n      '@param yDegree Degree of the polynomial functions for fitting along the y-dimension.',\n      '@param yDegree Degree of the polynomial used for fitting along the y-dimension.'\n    ]\n  },\n  {\n    'tag': '@param x First coordinate.',\n    'alternatives': [\n      '@param x Initial coordinate.',\n      '@param x Starting point.',\n      '@param x First point.',\n      '@param x Primary coordinate.',\n      '@param x Base point.'\n    ]\n  },\n  {\n    'tag': '@param y Second coordinate.',\n    'alternatives': [\n      '@param y Secondary coordinate.',\n      '@param y Ending point.',\n      '@param y Last point.',\n      '@param y Auxiliary coordinate.',\n      '@param y Final point.'\n    ]\n  },\n  {\n    'tag': '@return {@code true} if (x, y) is a valid point.',\n    'alternatives': [\n      '@return {@code true} if the point (x, y) is valid.',\n      '@return {@code true} if the (x, y) pair is a valid point.',\n      '@return {@code true} if the point (x, y) is considered valid.',\n      '@return {@code true} if the coordinates (x, y) represent a valid point.',\n      '@return {@code true} if the (x, y) values form a valid point.'\n    ]\n  },\n  {\n    'tag': '@param c Coordinate.',\n    'alternatives': [\n      '@param c Point.',\n      '@param c Position.',\n      '@param c Location.',\n      '@param c Data point.',\n      '@param c Value.'\n    ]\n  },\n  {\n    'tag': '@param val Coordinate samples.',\n    'alternatives': [\n      '@param val Sampling coordinates.',\n      '@param val Sampled points.',\n      '@param val Data samples.',\n      '@param val Sampled coordinates.',\n      '@param val Sample values.'\n    ]\n  },\n  {\n    'tag': '@return the index in {@code val} corresponding to the interval\\ncontaining {@code c}.',\n    'alternatives': [\n      '@return the index in {@code val} that corresponds to the interval\\nthat contains the {@code c} value.',\n      '@return the index in {@code val} which corresponds to the interval\\nthat includes {@code c}.',\n      '@return the index in {@code val} that represents the interval\\ncontaining {@code c}.',\n      '@return the index in {@code val} corresponding to the interval\\nthat holds the {@code c} value.',\n      '@return the index in {@code val} that indicates the interval\\ncontaining {@code c}.'\n    ]\n  },\n  {\n    'tag': '@throws OutOfRangeException if {@code c} is out of the\\nrange defined by the boundary values of {@code val}.',\n    'alternatives': [\n      '@throws OutOfRangeException if {@code c} exceeds the\\ndefined range of the boundary values in {@code val}.',\n      '@throws OutOfRangeException if {@code c} falls outside the\\nrange defined by the boundaries of {@code val}.',\n      '@throws OutOfRangeException if {@code c} is beyond the\\nrange defined by the boundary values in {@code val}.',\n      '@throws OutOfRangeException if {@code c} is outside the\\nrange defined by the boundary values of {@code val}.',\n      '@throws OutOfRangeException if {@code c} is not within the\\nrange defined by the boundary values of {@code val}.'\n    ]\n  },\n  {\n    'tag': '@param beta List of function values and function partial derivatives\\nvalues.',\n    'alternatives': [\n      '@param beta List of values of the function and the partial derivatives\\of the function.',\n      '@param beta List of function values and the corresponding\\nfunction partial derivatives.',\n      '@param beta List of values for the function and its partial derivatives.',\n      '@param beta List of function values and the function\\'s partial derivatives.',\n      '@param beta List of values representing the function and the partial derivatives of the function.'\n    ]\n  },\n  {\n    'tag': '@return the spline coefficients.',\n    'alternatives': [\n      '@return the coefficients of the spline.',\n      '@return the coefficients for the spline function.',\n      '@return the spline function coefficients.',\n      '@return the coefficients of the spline curve.',\n      '@return the coefficients for the spline interpolation.'\n    ]\n  },\n  {\n    'tag': '@param x Sample values of the x-coordinate, in increasing order.',\n    'alternatives': [\n      '@param x Sample values of the x-coordinate, sorted in ascending order.',\n      '@param x Sample points of the x-coordinate, in ascending order.',\n      '@param x Sample values of the x-coordinate, arranged in increasing order.',\n      '@param x Sample data for the x-coordinate, ordered in ascending sequence.',\n      '@param x Sample values of the x-coordinate, listed in increasing order.'\n    ]\n  },\n  {\n    'tag': '@param y Sample values of the y-coordinate, in increasing order.',\n    'alternatives': [\n      '@param y Sample values of the y-coordinate, sorted in ascending order.',\n      '@param y Sample points of the y-coordinate, in ascending order.',\n      '@param y Sample values of the y-coordinate, arranged in increasing order.',\n      '@param y Sample data for the y-coordinate, ordered in ascending sequence.',\n      '@param y Sample values of the y-coordinate, listed in increasing order.'\n    ]\n  },\n  {\n    'tag': '@param f Values of the function on every grid point.',\n    'alternatives': [\n      '@param f Function values at each grid point.',\n      '@param f Function values on all grid points.',\n      '@param f Function values for each grid point.',\n      '@param f Values of the function at every grid point.',\n      '@param f Function values for all grid points.'\n    ]\n  },\n  {\n    'tag': '@param dFdX Values of the partial derivative of function with respect\\nto x on every grid point.',\n    'alternatives': [\n      '@param dFdX Partial derivatives of the function with respect to x at each grid point.',\n      '@param dFdX Derivative values of the function with respect to x on all grid points.',\n      '@param dFdX Values of the derivative of the function with respect to x for each grid point.',\n      '@param dFdX Partial derivative values of the function with respect to x at every grid point.',\n      '@param dFdX Derivatives of the function with respect to x for all grid points.'\n    ]\n  }\n]"