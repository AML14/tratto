"output= [{'tag': '@param key the key of the value to look up in that map', 'alternatives': ['@param key the key of the value to search for in that map', '@param key the key used to search for the value in that map', '@param key the identifier of the value to be retrieved from that map', '@param key the access key for the desired value in that map', '@param key the unique identifier for the value to be accessed in that map']}, {'tag': '@return the value in the map as a number, or defaultValue if the\\n  original value is null, the map is null or the number conversion fails', 'alternatives': ['@return the value in the map as a numeric representation, or defaultValue if the\\n  original value is null, the map is null or the conversion to a number fails', '@return the numerical value stored in the map, or defaultValue if the\\n  original value is null, the map is null or the number conversion is unsuccessful', '@return the numeric representation of the value in the map, or defaultValue if the\\n  original value is null, the map is null or the conversion to a number fails', '@return the value in the map expressed as a number, or defaultValue if the\\n  original value is null, the map is null or the number conversion fails', '@return the value in the map represented as a number, or defaultValue if the\\n  original value is null, the map is null or the number conversion fails']}, {'tag': '@param <K> the key type', 'alternatives': ['@param <K> the type of the key', '@param <K> the type parameter for the key', '@param <K> the type of the identifier', '@param <K> the data type for the key', '@param <K> the type of the access key']}, {'tag': '@param map the map whose value to look up', 'alternatives': ['@param map the map to search for the value', '@param map the map that contains the desired value', '@param map the map from which to retrieve the value', '@param map the map that holds the value to be accessed', '@param map the map that stores the value to be retrieved']}, {'tag': '@return the value in the map as a number, or defaultValue if the\\n  original value is null, the map is null or the map conversion fails', 'alternatives': ['@return the value in the map expressed as a number, or defaultValue if the\\n  original value is null, the map is null or the map conversion fails', '@return the numeric representation of the value in the map, or defaultValue if the\\n  original value is null, the map is null or the map conversion fails', '@return the number value stored in the map, or defaultValue if the\\n  original value is null, the map is null or the map conversion is unsuccessful', '@return the value in the map as a numeric representation, or defaultValue if the\\n  original value is null, the map is null or the conversion to a number fails', '@return the value in the map represented as a number, or defaultValue if the\\n  original value is null, the map is null or the map conversion fails']}, {'tag': '@param <K> the key type', 'alternatives': ['@param <K> the type of the key', '@param <K> the type parameter for the key', '@param <K> the type of the identifier', '@param <K> the data type for the key', '@param <K> the type of the access key']}, {'tag': '@param map the map to use', 'alternatives': ['@param map the input map to utilize', '@param map the map that will be employed', '@param map the map for usage', '@param map the map to be used', '@param map the map to utilize']}, {'tag': '@param key the key to look up', 'alternatives': ['@param key the key used for accessing', '@param key the key for searching', '@param key the key to retrieve', '@param key the identifier to be looked up', '@param key the access key to be used']}, {'tag': '@return the value in the Map as a Boolean, <code>false</code> if null map input', 'alternatives': ['@return the Boolean value in the Map, <code>false</code> if the map input is null', '@return the Boolean value found in the Map, <code>false</code> if the map input is null', '@return the Boolean value stored in the Map, <code>false</code> if the map input is null', '@return the Boolean value contained in the Map, <code>false</code> if the map input is null', '@return the Boolean value of the Map, <code>false</code> if the map input is null']}, {'tag': '@param <K> the key type', 'alternatives': ['@param <K> the type of the key', '@param <K> the type parameter for the key', '@param <K> the type of the identifier', '@param <K> the data type for the key', '@param <K> the type of the access key']}, {'tag': '@param map the map to use', 'alternatives': ['@param map the input map to utilize', '@param map the map that will be employed', '@param map the map for usage', '@param map the map to be used', '@param map the map to utilize']}, {'tag': '@param key the key to look up', 'alternatives': ['@param key the key used for accessing', '@param key the key for searching', '@param key the key to retrieve', '@param key the identifier to be looked up', '@param key the access key to be used']}, {'tag': '@return the value in the Map as a byte, <code>0</code> if null map input', 'alternatives': ['@return the byte value in the Map, <code>0</code> if the map input is null', '@return the byte value found in the Map, <code>0</code> if the map input is null', '@return the byte value stored in the Map, <code>0</code> if the map input is null', '@return the byte value contained in the Map, <code>0</code> if the map input is null', '@return the byte value of the Map, <code>0</code> if the map input is null']}, {'tag': '@param <K> the key type', 'alternatives': ['@param <K> the type of the key', '@param <K> the type parameter for the key', '@param <K> the type of the identifier', '@param <K> the data type for the key', '@param <K> the type of the access key']}, {'tag': '@param map the map to use', 'alternatives': ['@param map the input map to utilize', '@param map the map that will be employed', '@param map the map for usage', '@param map the map to be used', '@param map the map to utilize']}, {'tag': '@param readSteps If true, read several events (usually starting with a step\\n           event, but it may be preceded by other events), until another\\n           step is encountered.', 'alternatives': ['@param readSteps If set to true, read multiple events (typically commencing with a step\\n           event, although it might be preceded by additional events), until a different\\n           step is encountered.', '@param readSteps When set to true, it reads multiple events (generally starting with a step\\n           event, but possibly preceded by other events) until another\\n           step is encountered.', '@param readSteps If true is passed, it reads multiple events (usually starting with a step\\n           event, but possibly preceded by other events) until a different\\n           step is encountered.', '@param readSteps In case it's true, read multiple events (usually starting with a step\\n           event, but it may be preceded by other events) until another\\n           step is encountered.', '@param readSteps If set to true, it reads several events (usually starting with a step\\n           event, but it may be preceded by other events) until another\\n           step is encountered.']}, {'tag': '@param stop If true stop at the next step encountered (and push it back so\\n           that is is readable at the next call to this method).', 'alternatives': ['@param stop If true, stop at the next encountered step (and push it back so\\n           that it can be read in the next method call).', '@param stop In case it's true, stop at the next step encountered (and push it back so\\n           that is is readable at the next call to this method).', '@param stop When set to true, stop at the next encountered step (and push it back so\\n           that it can be read in the next method call).', '@param stop If true is passed, stop at the next step encountered (and push it back so\\n           that it is readable at the next call to this method).', '@param stop If set to true, stop at the next step encountered (and push it back so\\n           that it can be read in the next method call).']}, {'tag': '@return True if it remains things to read.', 'alternatives': ['@return True if there are still things to be read.', '@return True if there are more items to read.', '@return True if there are still items to be read.', '@return True if there are additional items to read.', '@return True if there are remaining items to be read.']}, {'tag': '@param key The attribute name, already read.', 'alternatives': ['@param key The name of the attribute that has already been read.', '@param key The name of the attribute that was already read.', '@param key The name of the attribute that has been previously read.', '@param key The name of the attribute that was previously read.', '@param key The name of the attribute that has been read already.']}, {'tag': '@param key attribute key', 'alternatives': ['@param key key of the attribute', '@param key key for the attribute', '@param key key associated with the attribute', '@param key identifier for the attribute', '@param key access key for the attribute']}, {'tag': '@return a vector', 'alternatives': ['@return a list', '@return an array', '@return a collection', '@return a sequence', '@return a group']}, {'tag': '@throws IOException ', 'alternatives': ['@throws IOException exception will be thrown', '@throws IOException error will be raised', '@throws IOException an IOException will be thrown', '@throws IOException an IOException will occur', '@throws IOException a throwing of IOException will occur']}, {'tag': '@param attribute must name the attribute.', 'alternatives': ['@param attribute must specify the attribute name.', '@param attribute must provide the attribute identifier.', '@param attribute must indicate the attribute name.', '@param attribute must state the attribute key.', '@param attribute must mention the attribute name.']}, {'tag': '@param attribute_class must be the complete name of a Java class that will represent\\n           the attribute.', 'alternatives': ['@param attribute_class must be the fully qualified name of a Java class that will be used to represent\\n           the attribute.', '@param attribute_class must be the whole name of a Java class that will serve as\\n           the representation of the attribute.', '@param attribute_class must be the fully qualified name of a Java class to be used for representing\\n           the attribute.', '@param attribute_class must be the complete name of a Java class that will be employed to represent\\n           the attribute.', '@param attribute_class must be the complete name of a Java class which will be used to represent\\n           the attribute.']}]"