"[\n  {\n    'tag': '@param endRow Final row index (inclusive)',\n    'alternatives': [\n      '@param endRow Final row index (inclusive)',\n      '@param Final row index (inclusive) is the endRow parameter',\n      '@param the final row index, which is inclusive, is represented by endRow',\n      '@param the endRow parameter refers to the final row index, including the last row',\n      '@param the inclusive final row index is denoted by endRow'\n    ]\n  },\n  {\n    'tag': '@param startColumn Initial column index',\n    'alternatives': [\n      '@param startColumn Initial column index',\n      '@param Initial column index is represented by startColumn',\n      '@param the startColumn parameter refers to the initial column index',\n      '@param startColumn parameter denotes the index of the first column',\n      '@param the column index at the beginning is given by startColumn'\n    ]\n  },\n  {\n    'tag': '@param endColumn Final column index',\n    'alternatives': [\n      '@param endColumn Final column index',\n      '@param Final column index is represented by endColumn',\n      '@param endColumn parameter refers to the final index of the columns',\n      '@param the column index at the end is given by endColumn',\n      '@param the endColumn parameter denotes the last column index'\n    ]\n  },\n  {\n    'tag': '@throws OutOfRangeException if the indices are not valid.',\n    'alternatives': [\n      '@throws OutOfRangeException if the indices are not valid.',\n      '@throws OutOfRangeException if the indices provided are not within the valid range.',\n      '@throws OutOfRangeException in case the indices are outside the valid range.',\n      '@throws OutOfRangeException if the indices do not fall within the valid range.',\n      '@throws OutOfRangeException when the provided indices are not valid.'\n    ]\n  },\n  {\n    'tag': '@return the value returned by {@link RealMatrixPreservingVisitor#end()} at the end\\nof the walk',\n    'alternatives': [\n      '@return the value returned by {@link RealMatrixPreservingVisitor#end()} at the end\\nof the walk',\n      '@return the value obtained from the final call of {@link RealMatrixPreservingVisitor#end()} after the walk',\n      '@return the value returned by the {@link RealMatrixPreservingVisitor#end()} method at the end of the traversal',\n      '@return the final value returned by the {@link RealMatrixPreservingVisitor#end()} method after the walk',\n      '@return the result obtained from the last invocation of {@link RealMatrixPreservingVisitor#end()} at the end of the iteration'\n    ]\n  },\n  {\n    'tag': '@param visitor visitor used to process all matrix entries',\n    'alternatives': [\n      '@param visitor visitor used to process all matrix entries',\n      '@param visitor represents the object that processes all entries of the matrix',\n      '@param visitor parameter denotes the visitor that performs operations on all matrix entries',\n      '@param visitor parameter is a visitor object used for handling all matrix entries',\n      '@param the visitor parameter is responsible for processing every matrix entry'\n    ]\n  },\n  {\n    'tag': '@return the value returned by {@link RealMatrixChangingVisitor#end()} at the end\\nof the walk',\n    'alternatives': [\n      '@return the value returned by {@link RealMatrixChangingVisitor#end()} at the end\\nof the walk',\n      '@return the value obtained from the final call of {@link RealMatrixChangingVisitor#end()} after the walk',\n      '@return the value returned by the {@link RealMatrixChangingVisitor#end()} method at the end of the traversal',\n      '@return the final value returned by the {@link RealMatrixChangingVisitor#end()} method after the walk',\n      '@return the result obtained from the last invocation of {@link RealMatrixChangingVisitor#end()} at the end of the iteration'\n    ]\n  },\n  {\n    'tag': '@param visitor visitor used to process all matrix entries',\n    'alternatives': [\n      '@param visitor visitor used to process all matrix entries',\n      '@param visitor represents the object that processes all entries of the matrix',\n      '@param visitor parameter denotes the visitor that performs operations on all matrix entries',\n      '@param visitor parameter is a visitor object used for handling all matrix entries',\n      '@param the visitor parameter is responsible for processing every matrix entry'\n    ]\n  },\n  {\n    'tag': '@param startRow Initial row index',\n    'alternatives': [\n      '@param startRow Initial row index',\n      '@param Initial row index is represented by startRow',\n      '@param the startRow parameter refers to the initial row index',\n      '@param startRow parameter denotes the index of the first row',\n      '@param the row index at the beginning is given by startRow'\n    ]\n  },\n  {\n    'tag': '@param endRow Final row index (inclusive)',\n    'alternatives': [\n      '@param endRow Final row index (inclusive)',\n      '@param Final row index (inclusive) is the endRow parameter',\n      '@param the final row index, which is inclusive, is represented by endRow',\n      '@param the endRow parameter refers to the final row index, including the last row',\n      '@param the inclusive final row index is denoted by endRow'\n    ]\n  },\n  {\n    'tag': '@param startColumn Initial column index',\n    'alternatives': [\n      '@param startColumn Initial column index',\n      '@param Initial column index is represented by startColumn',\n      '@param the startColumn parameter refers to the initial column index',\n      '@param startColumn parameter denotes the index of the first column',\n      '@param the column index at the beginning is given by startColumn'\n    ]\n  },\n  {\n    'tag': '@param endColumn Final column index',\n    'alternatives': [\n      '@param endColumn Final column index',\n      '@param Final column index is represented by endColumn',\n      '@param endColumn parameter refers to the final index of the columns',\n      '@param the column index at the end is given by endColumn',\n      '@param the endColumn parameter denotes the last column index'\n    ]\n  },\n  {\n    'tag': '@throws OutOfRangeException if the indices are not valid.',\n    'alternatives': [\n      '@throws OutOfRangeException if the indices are not valid.',\n      '@throws OutOfRangeException if the indices provided are not within the valid range.',\n      '@throws OutOfRangeException in case the indices are outside the valid range.',\n      '@throws OutOfRangeException if the indices do not fall within the valid range.',\n      '@throws OutOfRangeException when the provided indices are not valid.'\n    ]\n  },\n  {\n    'tag': '@return the value returned by {@link RealMatrixChangingVisitor#end()} at the end\\nof the walk',\n    'alternatives': [\n      '@return the value returned by {@link RealMatrixChangingVisitor#end()} at the end\\nof the walk',\n      '@return the value obtained from the final call of {@link RealMatrixChangingVisitor#end()} after the walk',\n      '@return the value returned by the {@link RealMatrixChangingVisitor#end()} method at the end of the traversal',\n      '@return the final value returned by the {@link RealMatrixChangingVisitor#end()} method after the walk',\n      '@return the result obtained from the last invocation of {@link RealMatrixChangingVisitor#end()} at the end of the iteration'\n    ]\n  },\n  {\n    'tag': '@param visitor visitor used to process all matrix entries',\n    'alternatives': [\n      '@param visitor visitor used to process all matrix entries',\n      '@param visitor represents the object that processes all entries of the matrix',\n      '@param visitor parameter denotes the visitor that performs operations on all matrix entries',\n      '@param visitor parameter is a visitor object used for handling all matrix entries',\n      '@param the visitor parameter is responsible for processing every matrix entry'\n    ]\n  },\n  {\n    'tag': '@param startRow Initial row index',\n    'alternatives': [\n      '@param startRow Initial row index',\n      '@param Initial row index is represented by startRow',\n      '@param the startRow parameter refers to the initial row index',\n      '@param startRow parameter denotes the index of the first row',\n      '@param the row index at the beginning is given by startRow'\n    ]\n  },\n  {\n    'tag': '@param endRow Final row index (inclusive)',\n    'alternatives': [\n      '@param endRow Final row index (inclusive)',\n      '@param Final row index (inclusive) is the endRow parameter',\n      '@param the final row index, which is inclusive, is represented by endRow',\n      '@param the endRow parameter refers to the final row index, including the last row',\n      '@param the inclusive final row index is denoted by endRow'\n    ]\n  },\n  {\n    'tag': '@param startColumn Initial column index',\n    'alternatives': [\n      '@param startColumn Initial column index',\n      '@param Initial column index is represented by startColumn',\n      '@param the startColumn parameter refers to the initial column index',\n      '@param startColumn parameter denotes the index of the first column',\n      '@param the column index at the beginning is given by startColumn'\n    ]\n  },\n  {\n    'tag': '@param endColumn Final column index',\n    'alternatives': [\n      '@param endColumn Final column index',\n      '@param Final column index is represented by endColumn',\n      '@param endColumn parameter refers to the final index of the columns',\n      '@param the column index at the end is given by endColumn',\n      '@param the endColumn parameter denotes the last column index'\n    ]\n  },\n  {\n    'tag': '@throws OutOfRangeException if the indices are not valid.',\n    'alternatives': [\n      '@throws OutOfRangeException if the indices are not valid.',\n      '@throws OutOfRangeException if the indices provided are not within the valid range.',\n      '@throws OutOfRangeException in case the indices are outside the valid range.',\n      '@throws OutOfRangeException if the indices do not fall within the valid range.',\n      '@throws OutOfRangeException when the provided indices are not valid.'\n    ]\n  },\n  {\n    'tag': '@return the value returned by {@link RealMatrixPreservingVisitor#end()} at the end\\nof the walk',\n    'alternatives': [\n      '@return the value returned by {@link RealMatrixPreservingVisitor#end()} at the end\\nof the walk',\n      '@return the value obtained from the final call of {@link RealMatrixPreservingVisitor#end()} after the walk',\n      '@return the value returned by the {@link RealMatrixPreservingVisitor#end()} method at the end of the traversal',\n      '@return the final value returned by the {@link RealMatrixPreservingVisitor#end()} method after the walk',\n      '@return the result obtained from the last invocation of {@link RealMatrixPreservingVisitor#end()} at the end of the iteration'\n    ]\n  }\n]"