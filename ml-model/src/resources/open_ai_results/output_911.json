"output=[\n  {\n    'tag': '@param v1 first vector',\n    'alternatives': [\n      '@param v1 initial vector',\n      '@param v1 the first vector',\n      '@param v1 the starting vector',\n      '@param v1 vector1',\n      '@param v1 input vector'\n    ]\n  },\n  {\n    'tag': '@param v2 second vector',\n    'alternatives': [\n      '@param v2 subsequent vector',\n      '@param v2 the second vector',\n      '@param v2 the ending vector',\n      '@param v2 vector2',\n      '@param v2 input vector'\n    ]\n  },\n  {\n    'tag': '@param <T> the type of the field elements',\n    'alternatives': [\n      '@param <T> the type of the elements in the field',\n      '@param <T> field elements type',\n      '@param <T> element type of the field',\n      '@param <T> type of field elements',\n      '@param <T> the type of elements in the field'\n    ]\n  },\n  {\n    'tag': '@return angular separation between v1 and v2',\n    'alternatives': [\n      '@return angle between v1 and v2',\n      '@return separation angle of v1 and v2',\n      '@return angular distance between v1 and v2',\n      '@return angle in radians between v1 and v2',\n      '@return the angular separation of v1 and v2'\n    ]\n  },\n  {\n    'tag': '@throws MathArithmeticException if either vector has a null norm',\n    'alternatives': [\n      '@throws MathArithmeticException if any vector has a null norm',\n      '@throws MathArithmeticException if either vector has a zero magnitude',\n      '@throws MathArithmeticException if any vector has a zero norm',\n      '@throws MathArithmeticException if either vector is degenerate',\n      '@throws MathArithmeticException if one of the vectors has a null norm'\n    ]\n  },\n  {\n    'tag': '@return a new vector which is opposite to the instance',\n    'alternatives': [\n      '@return a new vector that is the negation of the current instance',\n      '@return a new vector with opposite direction to the instance',\n      '@return a new vector that is the inverse of the current instance',\n      '@return a new vector pointing in the opposite direction of the instance',\n      '@return a new vector that is the counterpart of the instance'\n    ]\n  },\n  {\n    'tag': '@param a scalar',\n    'alternatives': [\n      '@param scalar a scalar value',\n      '@param scalar constant',\n      '@param scalar input',\n      '@param scalar value',\n      '@param scalar parameter'\n    ]\n  },\n  {\n    'tag': '@return a new vector',\n    'alternatives': [\n      '@return a newly created vector',\n      '@return a fresh vector',\n      '@return a newly instantiated vector',\n      '@return a new instance of a vector',\n      '@return a brand new vector'\n    ]\n  },\n  {\n    'tag': '@return true if any coordinate of this vector is NaN; false otherwise',\n    'alternatives': [\n      '@return true if any element of this vector is NaN; false otherwise',\n      '@return true if any component of this vector is NaN; false otherwise',\n      '@return true if any value of this vector is NaN; false otherwise',\n      '@return true if any coordinate of this vector is not a number; false otherwise',\n      '@return true if any entry of this vector is NaN; false otherwise'\n    ]\n  },\n  {\n    'tag': '@return true if any coordinate of this vector is infinite and none are NaN;\\nfalse otherwise',\n    'alternatives': [\n      '@return true if any element of this vector is infinite and none are NaN; false otherwise',\n      '@return true if any component of this vector is infinite and none are NaN; false otherwise',\n      '@return true if any value of this vector is infinite and none are NaN; false otherwise',\n      '@return true if any entry of this vector is infinite and none are NaN; false otherwise',\n      '@return true if any coordinate of this vector is unbounded and none are NaN; false otherwise'\n    ]\n  },\n  {\n    'tag': '@param other Object to test for equality to this',\n    'alternatives': [\n      '@param other the object to compare with this',\n      '@param other the object being checked for equality with this',\n      '@param other the object being compared with this',\n      '@param other the object to test if it is equal to this',\n      '@param other the object for which equality is being tested against this'\n    ]\n  },\n  {\n    'tag': '@return true if two 3D vector objects are equal, false if\\n        object is null, not an instance of Vector3D, or\\n        not equal to this Vector3D instance',\n    'alternatives': [\n      '@return true if two 3D vector objects are identical, false if the\\n        object is null, not an instance of Vector3D, or\\n        not equal to this Vector3D instance',\n      '@return true if two 3D vector objects are the same, false if\\n        object is null, not an instance of Vector3D, or\\n        not equal to this Vector3D instance',\n      '@return true if two 3D vector objects are equivalent, false if\\n        object is null, not an instance of Vector3D, or\\n        not equal to this Vector3D instance',\n      '@return true if two 3D vector objects have the same values, false if\\n        object is null, not an instance of Vector3D, or\\n        not equal to this Vector3D instance',\n      '@return true if two 3D vector objects are indistinguishable, false if\\n        object is null, not an instance of Vector3D, or\\n        not equal to this Vector3D instance'\n    ]\n  },\n  {\n    'tag': '@return a hash code value for this object',\n    'alternatives': [\n      '@return a hash value for this object',\n      '@return the hash code of this object',\n      '@return the hash value of this object',\n      '@return a unique identifier for this object',\n      '@return the hash of this object'\n    ]\n  },\n  {\n    'tag': '@param v second vector',\n    'alternatives': [\n      '@param v another vector',\n      '@param v the second parameter',\n      '@param v the second input vector',\n      '@param v vector2',\n      '@param v input vector'\n    ]\n  },\n  {\n    'tag': '@param v other vector',\n    'alternatives': [\n      '@param v additional vector',\n      '@param v another vector',\n      '@param v the other parameter',\n      '@param v the other input vector',\n      '@param v vector2'\n    ]\n  },\n  {\n    'tag': '@return the cross product this ^ v as a new Vector3D',\n    'alternatives': [\n      '@return the resulting cross product of this and v as a new Vector3D',\n      '@return a new Vector3D that represents the cross product of this and v',\n      '@return a Vector3D that is the cross product of this and v',\n      '@return a new Vector3D obtained by the cross product of this and v',\n      '@return a newly created Vector3D that is the cross product of this and v'\n    ]\n  }\n]"