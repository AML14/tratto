"output=[\n  {\n    'tag': '@return x &lt;&lt; y',\n    'alternatives': [\n      '@return x shifted left by y',\n      '@return x left-shifted by y',\n      '@return x moved to the left by y',\n      '@return x shifted towards the left by y',\n      '@return the result of left-shifting x by y'\n    ]\n  },\n  {\n    'tag': '@return x &lt;&lt; y',\n    'alternatives': [\n      '@return x shifted left by y',\n      '@return x left-shifted by y',\n      '@return x moved to the left by y',\n      '@return x shifted towards the left by y',\n      '@return the result of left-shifting x by y'\n    ]\n  },\n  {\n    'tag': '@return x &gt;&gt; y',\n    'alternatives': [\n      '@return x shifted right by y',\n      '@return x right-shifted by y',\n      '@return x moved to the right by y',\n      '@return x shifted towards the right by y',\n      '@return the result of right-shifting x by y'\n    ]\n  },\n  {\n    'tag': '@return x &gt;&gt; y',\n    'alternatives': [\n      '@return x shifted right by y',\n      '@return x right-shifted by y',\n      '@return x moved to the right by y',\n      '@return x shifted towards the right by y',\n      '@return the result of right-shifting x by y'\n    ]\n  },\n  {\n    'tag': '@return x &gt;&gt;&gt; y',\n    'alternatives': [\n      '@return x unsigned shifted right by y',\n      '@return x unsigned right-shifted by y',\n      '@return x moved to the unsigned right by y',\n      '@return x unsigned shifted towards the right by y',\n      '@return the result of unsigned right-shifting x by y'\n    ]\n  },\n  {\n    'tag': '@return x &gt;&gt;&gt; y',\n    'alternatives': [\n      '@return x unsigned shifted right by y',\n      '@return x unsigned right-shifted by y',\n      '@return x moved to the unsigned right by y',\n      '@return x unsigned shifted towards the right by y',\n      '@return the result of unsigned right-shifting x by y'\n    ]\n  },\n  {\n    'tag': '@return x &amp; y',\n    'alternatives': [\n      '@return bitwise and of x and y',\n      '@return x AND y',\n      '@return x bit-wise conjunction with y',\n      '@return the result of bitwise 'and' operation between x and y',\n      '@return the result of performing a bitwise and operation on x and y'\n    ]\n  },\n  {\n    'tag': '@return x &amp; y',\n    'alternatives': [\n      '@return bitwise and of x and y',\n      '@return x AND y',\n      '@return x bit-wise conjunction with y',\n      '@return the result of bitwise 'and' operation between x and y',\n      '@return the result of performing a bitwise and operation on x and y'\n    ]\n  },\n  {\n    'tag': '@return the logical and of x and y; the result is always 0 or 1',\n    'alternatives': [\n      '@return the boolean result of evaluating x AND y; it is always 0 or 1',\n      '@return the outcome of logical conjunction between x and y; the result is always 0 or 1',\n      '@return 0 if x and y are not both non-zero; otherwise, return 1',\n      '@return 1 if both x and y are non-zero; otherwise, return 0',\n      '@return the result of evaluating the logical conjunction between x and y; the outcome is always 0 or 1'\n    ]\n  },\n  {\n    'tag': '@return the logical and of x and y; the result is always 0 or 1',\n    'alternatives': [\n      '@return the boolean result of evaluating x AND y; it is always 0 or 1',\n      '@return the outcome of logical conjunction between x and y; the result is always 0 or 1',\n      '@return 0 if x and y are not both non-zero; otherwise, return 1',\n      '@return 1 if both x and y are non-zero; otherwise, return 0',\n      '@return the result of evaluating the logical conjunction between x and y; the outcome is always 0 or 1'\n    ]\n  },\n  {\n    'tag': '@return x ^ y',\n    'alternatives': [\n      '@return x exclusive or y',\n      '@return x XOR y',\n      '@return x bit-wise disjunction with y',\n      '@return the result of bitwise 'xor' operation between x and y',\n      '@return the result of performing a bitwise xor operation on x and y'\n    ]\n  },\n  {\n    'tag': '@return x ^ y',\n    'alternatives': [\n      '@return x exclusive or y',\n      '@return x XOR y',\n      '@return x bit-wise disjunction with y',\n      '@return the result of bitwise 'xor' operation between x and y',\n      '@return the result of performing a bitwise xor operation on x and y'\n    ]\n  },\n  {\n    'tag': '@return the logical xor of x and y; the result is always 0 or 1',\n    'alternatives': [\n      '@return the boolean result of evaluating x XOR y; it is always 0 or 1',\n      '@return the outcome of logical exclusive disjunction between x and y; the result is always 0 or 1',\n      '@return 0 if x and y are equal; otherwise, return 1',\n      '@return 1 if x and y are different; otherwise, return 0',\n      '@return the result of evaluating the logical exclusive disjunction between x and y; the outcome is always 0 or 1'\n    ]\n  },\n  {\n    'tag': '@return the logical xor of x and y; the result is always 0 or 1',\n    'alternatives': [\n      '@return the boolean result of evaluating x XOR y; it is always 0 or 1',\n      '@return the outcome of logical exclusive disjunction between x and y; the result is always 0 or 1',\n      '@return 0 if x and y are equal; otherwise, return 1',\n      '@return 1 if x and y are different; otherwise, return 0',\n      '@return the result of evaluating the logical exclusive disjunction between x and y; the outcome is always 0 or 1'\n    ]\n  },\n  {\n    'tag': '@return x | y',\n    'alternatives': [\n      '@return bitwise or of x and y',\n      '@return x OR y',\n      '@return x bit-wise disjunction with y',\n      '@return the result of bitwise 'or' operation between x and y',\n      '@return the result of performing a bitwise or operation on x and y'\n    ]\n  },\n  {\n    'tag': '@return x | y',\n    'alternatives': [\n      '@return bitwise or of x and y',\n      '@return x OR y',\n      '@return x bit-wise disjunction with y',\n      '@return the result of bitwise 'or' operation between x and y',\n      '@return the result of performing a bitwise or operation on x and y'\n    ]\n  },\n  {\n    'tag': '@return the logical or of x and y; the result is always 0 or 1',\n    'alternatives': [\n      '@return the boolean result of evaluating x OR y; it is always 0 or 1',\n      '@return the outcome of logical disjunction between x and y; the result is always 0 or 1',\n      '@return 0 if both x and y are zero; otherwise, return 1',\n      '@return 1 if either x or y is non-zero; otherwise, return 0',\n      '@return the result of evaluating the logical disjunction between x and y; the outcome is always 0 or 1'\n    ]\n  },\n  {\n    'tag': '@return the logical or of x and y; the result is always 0 or 1',\n    'alternatives': [\n      '@return the boolean result of evaluating x OR y; it is always 0 or 1',\n      '@return the outcome of logical disjunction between x and y; the result is always 0 or 1',\n      '@return 0 if both x and y are zero; otherwise, return 1',\n      '@return 1 if either x or y is non-zero; otherwise, return 0',\n      '@return the result of evaluating the logical disjunction between x and y; the outcome is always 0 or 1'\n    ]\n  },\n  {\n    'tag': '@return base to the expt power',\n    'alternatives': [\n      '@return the result of raising base to the power of expt',\n      '@return base raised to the power of expt',\n      '@return the outcome of exponentiating base to the expt',\n      '@return the result of performing exponentiation on base with expt',\n      '@return the value obtained by exponentiating base with the power of expt'\n    ]\n  },\n  {\n    'tag': '@return base to the expt power',\n    'alternatives': [\n      '@return the result of raising base to the power of expt',\n      '@return base raised to the power of expt',\n      '@return the outcome of exponentiating base to the expt',\n      '@return the result of performing exponentiation on base with expt',\n      '@return the value obtained by exponentiating base with the power of expt'\n    ]\n  },\n  {\n    'tag': '@return x % y, where the result is constrained to be positive',\n    'alternatives': [\n      '@return the positive remainder of x divided by y',\n      '@return the result of modulo operation on x and y, restricted to be positive',\n      '@return the outcome of dividing x by y, ensuring the result is positive',\n      '@return the value obtained by taking the modulo of x and y, ensuring it is positive',\n      '@return the positive value obtained by calculating the remainder of dividing x by y'\n    ]\n  },\n  {\n    'tag': '@return x % y, where the result is constrained to be positive',\n    'alternatives': [\n      '@return the positive remainder of x divided by y',\n      '@return the result of modulo operation on x and y, restricted to be positive',\n      '@return the outcome of dividing x by y, ensuring the result is positive',\n      '@return the value obtained by taking the modulo of x and y, ensuring it is positive',\n      '@return the positive value obtained by calculating the remainder of dividing x by y'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException If the initial capacity is less than\\n                                  zero, or if the load factor is\\n                                  nonpositive',\n    'alternatives': [\n      '@throws IllegalArgumentException when the initial capacity is negative, or the load factor is not positive',\n      '@throws IllegalArgumentException if the initial capacity is lesser than zero, or the load factor is not positive',\n      '@throws IllegalArgumentException in case the initial capacity is below zero, or the load factor is not positive',\n      '@throws IllegalArgumentException If the initial capacity is negative, or if the load factor is not positive',\n      '@throws IllegalArgumentException when the initial capacity is less than zero, or if the load factor is non-positive'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException If the initial capacity is less than\\n                                  zero',\n    'alternatives': [\n      '@throws IllegalArgumentException when the initial capacity is negative',\n      '@throws IllegalArgumentException if the initial capacity is lesser than zero',\n      '@throws IllegalArgumentException in case the initial capacity is below zero',\n      '@throws IllegalArgumentException If the initial capacity is negative',\n      '@throws IllegalArgumentException when the initial capacity is less than zero'\n    ]\n  },\n  {\n    'tag': '@param a value to negate',\n    'alternatives': [\n      '@param a value to make negative',\n      '@param a value to invert its sign',\n      '@param a value to change its sign',\n      '@param a value to assign the negative of',\n      '@param a value to convert it into negative'\n    ]\n  }\n]"