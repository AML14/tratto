"[\n  {\n    \"tag\": \"@param iterator the iterator to decorate\",\n    \"alternatives\": [\n      \"@param iterator the iterator to embellish\",\n      \"@param iterator the iterator to enhance\",\n      \"@param iterator the decorated iterator\",\n      \"@param iterator the iterator to modify\",\n      \"@param iterator the decorated iterator\"\n    ]\n  },\n  {\n    \"tag\": \"@return the keySet iterator\",\n    \"alternatives\": [\n      \"@return the iterator for the keySet\",\n      \"@return the iterator of the keySet\",\n      \"@return the iterator that contains the keySet\",\n      \"@return the iterator associated with the keySet\",\n      \"@return the iterator that retrieves the keySet\"\n    ]\n  },\n  {\n    \"tag\": \"@return the values view\",\n    \"alternatives\": [\n      \"@return the view of the values\",\n      \"@return the view containing the values\",\n      \"@return the view that represents the values\",\n      \"@return the view for accessing the values\",\n      \"@return the view that holds the values\"\n    ]\n  },\n  {\n    \"tag\": \"@param iterator the iterator to decorate\",\n    \"alternatives\": [\n      \"@param iterator the iterator to embellish\",\n      \"@param iterator the iterator to enhance\",\n      \"@param iterator the decorated iterator\",\n      \"@param iterator the iterator to modify\",\n      \"@param iterator the decorated iterator\"\n    ]\n  },\n  {\n    \"tag\": \"@return the values iterator\",\n    \"alternatives\": [\n      \"@return the iterator for the values\",\n      \"@return the iterator of the values\",\n      \"@return the iterator that contains the values\",\n      \"@return the iterator associated with the values\",\n      \"@return the iterator that retrieves the values\"\n    ]\n  },\n  {\n    \"tag\": \"@return the entrySet view\",\n    \"alternatives\": [\n      \"@return the view of the entrySet\",\n      \"@return the view containing the entrySet\",\n      \"@return the view that represents the entrySet\",\n      \"@return the view for accessing the entrySet\",\n      \"@return the view that holds the entrySet\"\n    ]\n  },\n  {\n    \"tag\": \"@param iterator the iterator to decorate\",\n    \"alternatives\": [\n      \"@param iterator the iterator to embellish\",\n      \"@param iterator the iterator to enhance\",\n      \"@param iterator the decorated iterator\",\n      \"@param iterator the iterator to modify\",\n      \"@param iterator the decorated iterator\"\n    ]\n  },\n  {\n    \"tag\": \"@return the entrySet iterator\",\n    \"alternatives\": [\n      \"@return the iterator for the entrySet\",\n      \"@return the iterator of the entrySet\",\n      \"@return the iterator that contains the entrySet\",\n      \"@return the iterator associated with the entrySet\",\n      \"@return the iterator that retrieves the entrySet\"\n    ]\n  },\n  {\n    \"tag\": \"@param normalMap the normal direction map\",\n    \"alternatives\": [\n      \"@param normalMap the map for the normal direction\",\n      \"@param normalMap the map containing the normal direction\",\n      \"@param normalMap the map representing the normal direction\",\n      \"@param normalMap the map that holds the normal direction\",\n      \"@param normalMap the map associated with the normal direction\"\n    ]\n  },\n  {\n    \"tag\": \"@param reverseMap the reverse direction map\",\n    \"alternatives\": [\n      \"@param reverseMap the map for the reverse direction\",\n      \"@param reverseMap the map containing the reverse direction\",\n      \"@param reverseMap the map representing the reverse direction\",\n      \"@param reverseMap the map that holds the reverse direction\",\n      \"@param reverseMap the map associated with the reverse direction\"\n    ]\n  },\n  {\n    \"tag\": \"@param normalMap the normal direction map\",\n    \"alternatives\": [\n      \"@param normalMap the map for the normal direction\",\n      \"@param normalMap the map containing the normal direction\",\n      \"@param normalMap the map representing the normal direction\",\n      \"@param normalMap the map that holds the normal direction\",\n      \"@param normalMap the map associated with the normal direction\"\n    ]\n  },\n  {\n    \"tag\": \"@param reverseMap the reverse direction map\",\n    \"alternatives\": [\n      \"@param reverseMap the map for the reverse direction\",\n      \"@param reverseMap the map containing the reverse direction\",\n      \"@param reverseMap the map representing the reverse direction\",\n      \"@param reverseMap the map that holds the reverse direction\",\n      \"@param reverseMap the map associated with the reverse direction\"\n    ]\n  },\n  {\n    \"tag\": \"@param inverseBidiMap the inverse BidiMap\",\n    \"alternatives\": [\n      \"@param inverseBidiMap the BidiMap's inverse\",\n      \"@param inverseBidiMap the opposite BidiMap\",\n      \"@param inverseBidiMap the reversed BidiMap\",\n      \"@param inverseBidiMap the BidiMap with inverted keys and values\",\n      \"@param inverseBidiMap the BidiMap that is the inverse\"\n    ]\n  },\n  {\n    \"tag\": \"@param <K> the key type\",\n    \"alternatives\": [\n      \"@param <K> the type of the keys\",\n      \"@param <K> the type of the key elements\",\n      \"@param <K> the element type of the keys\",\n      \"@param <K> the type assigned to the keys\",\n      \"@param <K> the key class\"\n    ]\n  },\n  {\n    \"tag\": \"@param <V> the value type\",\n    \"alternatives\": [\n      \"@param <V> the type of the values\",\n      \"@param <V> the type of the value elements\",\n      \"@param <V> the element type of the values\",\n      \"@param <V> the type assigned to the values\",\n      \"@param <V> the value class\"\n    ]\n  },\n  {\n    \"tag\": \"@return an unmodifiable BidiMap\",\n    \"alternatives\": [\n      \"@return a BidiMap that cannot be modified\",\n      \"@return a BidiMap that is read-only\",\n      \"@return a BidiMap that is immutable\",\n      \"@return an unchangeable BidiMap\",\n      \"@return a BidiMap that is not alterable\"\n    ]\n  },\n  {\n    \"tag\": \"@param map the map to decorate, must not be null\",\n    \"alternatives\": [\n      \"@param map the map to embellish, cannot be null\",\n      \"@param map the map to enhance, must not be null\",\n      \"@param map the decorated map, must not be null\",\n      \"@param map the map to modify, must not be null\",\n      \"@param map the decorated map, cannot be null\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NullPointerException if map is null\",\n    \"alternatives\": [\n      \"@throws NullPointerException when map is null\",\n      \"@throws NullPointerException if the map parameter is null\",\n      \"@throws NullPointerException in case of a null map\",\n      \"@throws NullPointerException if the map argument is null\",\n      \"@throws NullPointerException if the provided map is null\"\n    ]\n  },\n  {\n    \"tag\": \"@return the decorated map\",\n    \"alternatives\": [\n      \"@return the embellished map\",\n      \"@return the enhanced map\",\n      \"@return the modified map\",\n      \"@return the map with decorations\",\n      \"@return the map that has been decorated\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NullPointerException if the collection is null\",\n    \"alternatives\": [\n      \"@throws NullPointerException when the collection is null\",\n      \"@throws NullPointerException if the collection parameter is null\",\n      \"@throws NullPointerException in case of a null collection\",\n      \"@throws NullPointerException if the collection argument is null\",\n      \"@throws NullPointerException if the provided collection is null\"\n    ]\n  },\n  {\n    \"tag\": \"@param <K> the key type\",\n    \"alternatives\": [\n      \"@param <K> the type of the keys\",\n      \"@param <K> the type of the key elements\",\n      \"@param <K> the element type of the keys\",\n      \"@param <K> the type assigned to the keys\",\n      \"@param <K> the key class\"\n    ]\n  },\n  {\n    \"tag\": \"@param <V> the value type\",\n    \"alternatives\": [\n      \"@param <V> the type of the values\",\n      \"@param <V> the type of the value elements\",\n      \"@param <V> the element type of the values\",\n      \"@param <V> the type assigned to the values\",\n      \"@param <V> the value class\"\n    ]\n  },\n  {\n    \"tag\": \"@return an unmodifiable OrderedBidiMap\",\n    \"alternatives\": [\n      \"@return a OrderedBidiMap that cannot be modified\",\n      \"@return a OrderedBidiMap that is read-only\",\n      \"@return a OrderedBidiMap that is immutable\",\n      \"@return an unchangeable OrderedBidiMap\",\n      \"@return a OrderedBidiMap that is not alterable\"\n    ]\n  },\n  {\n    \"tag\": \"@return an inverted unmodifiable bidirectional map\",\n    \"alternatives\": [\n      \"@return a bidirectional map that is reversed and cannot be modified\",\n      \"@return a bidirectional map that is inverted and read-only\",\n      \"@return an unmodifiable bidirectional map with inverted keys and values\",\n      \"@return an unmodifiable bidirectional map that is reversed\",\n      \"@return a read-only bidirectional map that is inverted\"\n    ]\n  },\n  {\n    \"tag\": \"@param map the map to decorate, must not be null\",\n    \"alternatives\": [\n      \"@param map the map to embellish, cannot be null\",\n      \"@param map the map to enhance, must not be null\",\n      \"@param map the decorated map, must not be null\",\n      \"@param map the map to modify, must not be null\",\n      \"@param map the decorated map, cannot be null\"\n    ]\n  }\n]"