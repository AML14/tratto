"output=[\n  {\n    'tag': '@throws IllegalStateException if <code>remove()</code> has already been called\\n since the last call to <code>next()</code>',\n    'alternatives': [\n      '@throws IllegalStateException if <code>next()</code> has been called before <code>remove()</code> since the last <code>next()</code> call',\n      '@throws IllegalStateException if <code>remove()</code> is called after a <code>next()</code> call',\n      '@throws IllegalStateException if <code>next()</code> is not called before <code>remove()</code> after the last <code>next()</code> call',\n      '@throws IllegalStateException if <code>next()</code> has not been called before <code>remove()</code> since the previous <code>next()</code> call',\n      '@throws IllegalStateException if <code>remove()</code> is invoked after a <code>next()</code> call and before the next <code>next()</code> call'\n    ]\n  },\n  {\n    'tag': '@param value the new value',\n    'alternatives': [\n      '@param value the value to be assigned',\n      '@param value the updated value',\n      '@param value the value to set',\n      '@param value the value that will be used',\n      '@param value the value of the new element'\n    ]\n  },\n  {\n    'tag': '@return the previous value',\n    'alternatives': [\n      '@return the value that was previously stored',\n      '@return the value before the change',\n      '@return the value that was present before',\n      '@return the value that existed earlier',\n      '@return the value prior to the update'\n    ]\n  },\n  {\n    'tag': '@throws UnsupportedOperationException if setValue is not supported by the map',\n    'alternatives': [\n      '@throws UnsupportedOperationException if the map does not support the setValue operation',\n      '@throws UnsupportedOperationException if the map does not allow the setValue method',\n      '@throws UnsupportedOperationException if the map does not implement support for the setValue operation',\n      '@throws UnsupportedOperationException if the map does not provide support for the setValue method',\n      '@throws UnsupportedOperationException if the map does not permit the setValue operation'\n    ]\n  },\n  {\n    'tag': '@throws IllegalStateException if <code>next()</code> has not yet been called',\n    'alternatives': [\n      '@throws IllegalStateException if a call to <code>next()</code> has not been made yet',\n      '@throws IllegalStateException if <code>next()</code> has not been invoked yet',\n      '@throws IllegalStateException if <code>next()</code> has not been called before',\n      '@throws IllegalStateException if no call to <code>next()</code> has been made',\n      '@throws IllegalStateException if <code>next()</code> has not been used yet'\n    ]\n  },\n  {\n    'tag': '@throws IllegalStateException if <code>remove()</code> has been called since the\\n last call to <code>next()</code>',\n    'alternatives': [\n      '@throws IllegalStateException if <code>next()</code> has been called before <code>remove()</code> since the last <code>next()</code> call',\n      '@throws IllegalStateException if <code>remove()</code> has been invoked after a <code>next()</code> call',\n      '@throws IllegalStateException if <code>next()</code> is called before <code>remove()</code> since the previous <code>next()</code> call',\n      '@throws IllegalStateException if <code>next()</code> has been called before <code>remove()</code> after the last <code>next()</code> call',\n      '@throws IllegalStateException if <code>remove()</code> is invoked after a <code>next()</code> call and before the next <code>next()</code> call'\n    ]\n  },\n  {\n    'tag': '@return the wrapped map',\n    'alternatives': [\n      '@return the map that is wrapped',\n      '@return the underlying map',\n      '@return the map being wrapped',\n      '@return the original map',\n      '@return the map that is being wrapped'\n    ]\n  },\n  {\n    'tag': '@param map the map to wrap',\n    'alternatives': [\n      '@param map the map that will be wrapped',\n      '@param map the map to be used for wrapping',\n      '@param map the map that needs to be wrapped',\n      '@param map the map to be wrapped around',\n      '@param map the map that should be wrapped'\n    ]\n  },\n  {\n    'tag': '@param key the key to retrieve',\n    'alternatives': [\n      '@param key the key that should be obtained',\n      '@param key the key to fetch',\n      '@param key the key that needs to be retrieved',\n      '@param key the key to get',\n      '@param key the key for which to obtain the value'\n    ]\n  },\n  {\n    'tag': '@return the {@code Collection} of values, will return an empty {@code Collection} for no mapping',\n    'alternatives': [\n      '@return the {@code Collection} of values, returns an empty {@code Collection} if there is no mapping',\n      '@return the {@code Collection} of values, an empty {@code Collection} is returned if there is no mapping',\n      '@return the {@code Collection} of values, if there is no mapping an empty {@code Collection} is returned',\n      '@return the {@code Collection} of values, return an empty {@code Collection} if no mapping exists',\n      '@return the {@code Collection} of values, if there is no mapping, an empty {@code Collection} will be returned'\n    ]\n  },\n  {\n    'tag': '@param key the key to remove values from',\n    'alternatives': [\n      '@param key the key from which values should be removed',\n      '@param key the key for which values are to be removed',\n      '@param key the key from which to delete values',\n      '@param key the key from which values should be eliminated',\n      '@param key the key for which values need to be removed'\n    ]\n  },\n  {\n    'tag': '@return the <code>Collection</code> of values removed, will return an\\n  empty, unmodifiable collection for no mapping found',\n    'alternatives': [\n      '@return the <code>Collection</code> of values that were removed, an empty, unmodifiable collection is returned if no mapping is found',\n      '@return the <code>Collection</code> of values that are removed, if no mapping is found an empty, unmodifiable collection is returned',\n      '@return the <code>Collection</code> of values that have been removed, an empty, unmodifiable collection will be returned if no mapping is found',\n      '@return the <code>Collection</code> of values that were deleted, if no mapping is found an empty, unmodifiable collection will be returned',\n      '@return the <code>Collection</code> of values that have been eliminated, an empty, unmodifiable collection is returned if no mapping is found'\n    ]\n  },\n  {\n    'tag': '@param key the key to remove from',\n    'alternatives': [\n      '@param key the key from which to remove',\n      '@param key the key to be removed from',\n      '@param key the key for which removal is required',\n      '@param key the key that should be eliminated',\n      '@param key the key from which elimination is desired'\n    ]\n  },\n  {\n    'tag': '@param value the value to remove',\n    'alternatives': [\n      '@param value the value that needs to be eliminated',\n      '@param value the value that should be removed',\n      '@param value the value to be deleted',\n      '@param value the value that is to be eliminated',\n      '@param value the value that should be eradicated'\n    ]\n  },\n  {\n    'tag': '@return true if the mapping was removed, false otherwise',\n    'alternatives': [\n      '@return true if the mapping was eliminated, false otherwise',\n      '@return true if the mapping has been deleted, false otherwise',\n      '@return true if the mapping was erased, false otherwise',\n      '@return true if the mapping has been eradicated, false otherwise',\n      '@return true if the mapping was eliminated, otherwise it returns false'\n    ]\n  },\n  {\n    'tag': '@return a collection view of the values contained in this map',\n    'alternatives': [\n      '@return a view of the collection containing the values in this map',\n      '@return a view of the collection that holds the values in this map',\n      '@return a collection view that displays the values within this map',\n      '@return a collection view that presents the values in this map',\n      '@return a view of the collection which contains the values from this map'\n    ]\n  },\n  {\n    'tag': '@param key the key to store against',\n    'alternatives': [\n      '@param key the key to use for storage',\n      '@param key the key to be associated with',\n      '@param key the key to utilize for storage',\n      '@param key the key to store data with',\n      '@param key the key to be used for storage'\n    ]\n  },\n  {\n    'tag': '@param value the value to add to the collection at the key',\n    'alternatives': [\n      '@param value the value to be inserted into the collection at the key',\n      '@param value the value to append to the collection associated with the key',\n      '@param value the value to be included in the collection at the key',\n      '@param value the value to be added to the collection corresponding to the key',\n      '@param value the value that will be added to the collection at the key'\n    ]\n  },\n  {\n    'tag': '@return the value added if the map changed and null if the map did not change',\n    'alternatives': [\n      '@return the value that was added if the map was modified, otherwise return null if it remained unchanged',\n      '@return the value that has been added if the map was altered, or return null if it remained unaltered',\n      '@return the value that was inserted if the map was changed, if it was not modified return null',\n      '@return the value that has been added if the map was modified, return null if it was unchanged',\n      '@return the value that was added if the map was modified, otherwise return null if it was not changed'\n    ]\n  },\n  {\n    'tag': '@return true if the map changed as a result of this operation',\n    'alternatives': [\n      '@return true if the map was altered by this operation',\n      '@return true if the map was modified due to this operation',\n      '@return true if the map changed after this operation',\n      '@return true if the map was changed as a result of this action',\n      '@return true if the map was modified by this action'\n    ]\n  },\n  {\n    'tag': '@return true if the map changed as a result of this operation',\n    'alternatives': [\n      '@return true if the map was altered by this operation',\n      '@return true if the map was modified due to this operation',\n      '@return true if the map changed after this operation',\n      '@return true if the map was changed as a result of this action',\n      '@return true if the map was modified by this action'\n    ]\n  },\n  {\n    'tag': '@return a bag view of the key mapping contained in this map',\n    'alternatives': [\n      '@return a view that displays the key mapping in the form of a bag contained in this map',\n      '@return a view that presents the key mapping as a bag within this map',\n      '@return a bag view containing the key mapping found in this map',\n      '@return a collection view that shows the key mapping in the form of a bag inside this map',\n      '@return a view that exhibits the key mapping in the form of a bag contained in this map'\n    ]\n  },\n  {\n    'tag': '@param key the key to store against',\n    'alternatives': [\n      '@param key the key to use for storage',\n      '@param key the key to be associated with',\n      '@param key the key to utilize for storage',\n      '@param key the key to store data with',\n      '@param key the key to be used for storage'\n    ]\n  },\n  {\n    'tag': '@return true if this map changed',\n    'alternatives': [\n      '@return true if any changes were made to this map',\n      '@return true if there were modifications to this map',\n      '@return true if the map was altered',\n      '@return true if any modifications occurred in this map',\n      '@return true if the map has been modified'\n    ]\n  },\n  {\n    'tag': '@param out the output stream',\n    'alternatives': [\n      '@param out the output stream to be used',\n      '@param out the stream to which output is written',\n      '@param out the output stream to send data to',\n      '@param out the output stream used for sending data',\n      '@param out the stream used for writing output'\n    ]\n  }\n]"