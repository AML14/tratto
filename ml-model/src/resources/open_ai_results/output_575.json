"[\n  {\n    \"tag\": \"@param out the output stream\",\n    \"alternatives\": [\n      \"@param out the output stream\",\n      \"@param out the stream where the output will be written\",\n      \"@param out the stream to which the output will be sent\",\n      \"@param out the destination stream\",\n      \"@param out the stream used for the output\"\n    ]\n  },\n  {\n    \"tag\": \"@throws IOException \",\n    \"alternatives\": [\n      \"@throws IOException \",\n      \"@throws IOException exception\",\n      \"@throws IOException error\",\n      \"@throws IOException when an I/O error occurs\",\n      \"@throws IOException if an I/O error happens\"\n    ]\n  },\n  {\n    \"tag\": \"@param in the input stream\",\n    \"alternatives\": [\n      \"@param in the input stream\",\n      \"@param in the stream from which the input is read\",\n      \"@param in the source stream\",\n      \"@param in the stream being used as input\",\n      \"@param in the stream that provides the input\"\n    ]\n  },\n  {\n    \"tag\": \"@throws IOException \",\n    \"alternatives\": [\n      \"@throws IOException \",\n      \"@throws IOException exception\",\n      \"@throws IOException error\",\n      \"@throws IOException when an I/O error occurs\",\n      \"@throws IOException if an I/O error happens\"\n    ]\n  },\n  {\n    \"tag\": \"@throws ClassNotFoundException \",\n    \"alternatives\": [\n      \"@throws ClassNotFoundException \",\n      \"@throws ClassNotFoundException exception\",\n      \"@throws ClassNotFoundException error\",\n      \"@throws ClassNotFoundException when the requested class is not found\",\n      \"@throws ClassNotFoundException if the specified class cannot be found\"\n    ]\n  },\n  {\n    \"tag\": \"@param map the map to decorate\",\n    \"alternatives\": [\n      \"@param map the map to decorate\",\n      \"@param map the map that will be decorated\",\n      \"@param map the map which will be wrapped\",\n      \"@param map the map used for decoration\",\n      \"@param map the underlying map to be decorated\"\n    ]\n  },\n  {\n    \"tag\": \"@return a shallow clone\",\n    \"alternatives\": [\n      \"@return a shallow clone\",\n      \"@return a copy that shares the same references\",\n      \"@return a clone with shallow copy\",\n      \"@return a replica that has shallow cloning\",\n      \"@return a duplicated object with the same references\"\n    ]\n  },\n  {\n    \"tag\": \"@param initialCapacity the initial capacity\",\n    \"alternatives\": [\n      \"@param initialCapacity the initial capacity\",\n      \"@param initialCapacity the capacity at the beginning\",\n      \"@param initialCapacity the size at the start\",\n      \"@param initialCapacity the initial size\",\n      \"@param initialCapacity the number of elements initially allowed\"\n    ]\n  },\n  {\n    \"tag\": \"@param initialCapacity the initial capacity\",\n    \"alternatives\": [\n      \"@param initialCapacity the initial capacity\",\n      \"@param initialCapacity the capacity at the beginning\",\n      \"@param initialCapacity the size at the start\",\n      \"@param initialCapacity the initial size\",\n      \"@param initialCapacity the number of elements initially allowed\"\n    ]\n  },\n  {\n    \"tag\": \"@param loadFactor the load factor\",\n    \"alternatives\": [\n      \"@param loadFactor the load factor\",\n      \"@param loadFactor the ratio of occupied space to total space\",\n      \"@param loadFactor the proportion of used capacity\",\n      \"@param loadFactor the occupancy rate\",\n      \"@param loadFactor the factor that determines when rehashing occurs\"\n    ]\n  },\n  {\n    \"tag\": \"@param map the map to copy\",\n    \"alternatives\": [\n      \"@param map the map to copy\",\n      \"@param map the source map to duplicate\",\n      \"@param map the original map to replicate\",\n      \"@param map the map for the cloning process\",\n      \"@param map the existing map to make a copy of\"\n    ]\n  },\n  {\n    \"tag\": \"@param <K> the key type\",\n    \"alternatives\": [\n      \"@param <K> the key type\",\n      \"@param <K> the type of the keys\",\n      \"@param <K> the type used for the keys\",\n      \"@param <K> the data type for the keys\",\n      \"@param <K> the class of objects used as keys\"\n    ]\n  },\n  {\n    \"tag\": \"@param <V> the value type\",\n    \"alternatives\": [\n      \"@param <V> the value type\",\n      \"@param <V> the type of the values\",\n      \"@param <V> the type used for the values\",\n      \"@param <V> the data type for the values\",\n      \"@param <V> the class of objects used as values\"\n    ]\n  },\n  {\n    \"tag\": \"@return a new lazy map\",\n    \"alternatives\": [\n      \"@return a new lazy map\",\n      \"@return a freshly created lazy map\",\n      \"@return a newly instantiated lazy map\",\n      \"@return a brand new map created lazily\",\n      \"@return a newly generated lazy map\"\n    ]\n  },\n  {\n    \"tag\": \"@param <K> the key type\",\n    \"alternatives\": [\n      \"@param <K> the key type\",\n      \"@param <K> the type of the keys\",\n      \"@param <K> the type used for the keys\",\n      \"@param <K> the data type for the keys\",\n      \"@param <K> the class of objects used as keys\"\n    ]\n  },\n  {\n    \"tag\": \"@param <V> the value type\",\n    \"alternatives\": [\n      \"@param <V> the value type\",\n      \"@param <V> the type of the values\",\n      \"@param <V> the type used for the values\",\n      \"@param <V> the data type for the values\",\n      \"@param <V> the class of objects used as values\"\n    ]\n  },\n  {\n    \"tag\": \"@return a new lazy map\",\n    \"alternatives\": [\n      \"@return a new lazy map\",\n      \"@return a freshly created lazy map\",\n      \"@return a newly instantiated lazy map\",\n      \"@return a brand new map created lazily\",\n      \"@return a newly generated lazy map\"\n    ]\n  },\n  {\n    \"tag\": \"@param out the output stream\",\n    \"alternatives\": [\n      \"@param out the output stream\",\n      \"@param out the stream where the output will be written\",\n      \"@param out the stream to which the output will be sent\",\n      \"@param out the destination stream\",\n      \"@param out the stream used for the output\"\n    ]\n  },\n  {\n    \"tag\": \"@throws IOException \",\n    \"alternatives\": [\n      \"@throws IOException \",\n      \"@throws IOException exception\",\n      \"@throws IOException error\",\n      \"@throws IOException when an I/O error occurs\",\n      \"@throws IOException if an I/O error happens\"\n    ]\n  },\n  {\n    \"tag\": \"@param in the input stream\",\n    \"alternatives\": [\n      \"@param in the input stream\",\n      \"@param in the stream from which the input is read\",\n      \"@param in the source stream\",\n      \"@param in the stream being used as input\",\n      \"@param in the stream that provides the input\"\n    ]\n  },\n  {\n    \"tag\": \"@throws IOException \",\n    \"alternatives\": [\n      \"@throws IOException \",\n      \"@throws IOException exception\",\n      \"@throws IOException error\",\n      \"@throws IOException when an I/O error occurs\",\n      \"@throws IOException if an I/O error happens\"\n    ]\n  },\n  {\n    \"tag\": \"@throws ClassNotFoundException \",\n    \"alternatives\": [\n      \"@throws ClassNotFoundException \",\n      \"@throws ClassNotFoundException exception\",\n      \"@throws ClassNotFoundException error\",\n      \"@throws ClassNotFoundException when the requested class is not found\",\n      \"@throws ClassNotFoundException if the specified class cannot be found\"\n    ]\n  },\n  {\n    \"tag\": \"@param timeToLive the constant amount of time an entry is available\\n       before it expires. A negative value results in entries that NEVER\\n       expire. A zero value results in entries that ALWAYS expire.\",\n    \"alternatives\": [\n      \"@param timeToLive the constant amount of time an entry is available\\n       before it expires. A negative value results in entries that NEVER\\n       expire. A zero value results in entries that ALWAYS expire.\",\n      \"@param timeToLive the duration that an entry remains valid before expiration.\\n       Negative values indicate entries that never expire, while\\n       zero values indicate entries that always expire.\",\n      \"@param timeToLive the period for which an entry is valid before it expires.\\n       A negative value implies that entries never expire,\\n       while a zero value implies that entries always expire.\",\n      \"@param timeToLive the time interval during which an entry can be accessed\\n       before it expires. A negative value denotes entries that NEVER\\n       expire, while a zero value denotes entries that ALWAYS expire.\",\n      \"@param timeToLive the time duration for which an entry stays valid\\n       before it expires. A negative value signifies entries that NEVER\\n       expire, whereas a zero value signifies entries that ALWAYS expire.\"\n    ]\n  },\n  {\n    \"tag\": \"@param timeUnit the unit of time for the <code>timeToLive</code>\\n       parameter, must not be null.\",\n    \"alternatives\": [\n      \"@param timeUnit the unit of time for the <code>timeToLive</code>\\n       parameter, must not be null.\",\n      \"@param timeUnit the time measurement unit for the <code>timeToLive</code>\\n       parameter, must be non-null.\",\n      \"@param timeUnit the time scale used for the <code>timeToLive</code>\\n       parameter. This value cannot be null.\",\n      \"@param timeUnit the time unit for the <code>timeToLive</code> parameter,\\n       which must not be null.\",\n      \"@param timeUnit the unit of time for the <code>timeToLive</code>\\n       parameter. It should not be null.\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NullPointerException if the time unit is null.\",\n    \"alternatives\": [\n      \"@throws NullPointerException if the time unit is null.\",\n      \"@throws NullPointerException when the time unit is null.\",\n      \"@throws NullPointerException if the time unit parameter is null.\",\n      \"@throws NullPointerException if a null time unit is provided.\",\n      \"@throws NullPointerException in case a null time unit is passed.\"\n    ]\n  }\n]"