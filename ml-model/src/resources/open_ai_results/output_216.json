"output = [\n  {\n    'tag': '@return the transformed result',\n    'alternatives': [\n      '@return the result after transformation',\n      '@return the converted result',\n      '@return the outcome of the transformation',\n      '@return the result that has been transformed',\n      '@return the changed result'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if set or transformer is null',\n    'alternatives': [\n      '@throws NullPointerException if the set or transformer is null',\n      '@throws NullPointerException if either the set or the transformer is null',\n      '@throws NullPointerException if null is passed as set or transformer',\n      '@throws NullPointerException if set or transformer parameters are null',\n      '@throws NullPointerException if either set or transformer is null'\n    ]\n  },\n  {\n    'tag': '@param set the set to decorate, must not be null',\n    'alternatives': [\n      '@param set the set to enhance, should not be null',\n      '@param set set to be decorated, cannot be null',\n      '@param set the set to modify, must not be null',\n      '@param set the set that needs to be embellished, must not be null',\n      '@param set the set to wrap, cannot be null'\n    ]\n  },\n  {\n    'tag': '@param transformer the transformer to use for conversion, must not be null',\n    'alternatives': [\n      '@param transformer the converter to be employed, should not be null',\n      '@param transformer the transformer for performing conversion, cannot be null',\n      '@param transformer the object for changing the format, must not be null',\n      '@param transformer the converter to apply for transforming, must not be null',\n      '@param transformer the converter to use for conversion, should not be null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if set or transformer is null',\n    'alternatives': [\n      '@throws NullPointerException if the set or transformer is null',\n      '@throws NullPointerException if either the set or the transformer is null',\n      '@throws NullPointerException if null is passed as set or transformer',\n      '@throws NullPointerException if set or transformer parameters are null',\n      '@throws NullPointerException if either set or transformer is null'\n    ]\n  },\n  {\n    'tag': '@param set the set to decorate, must not be null',\n    'alternatives': [\n      '@param set the set to enhance, should not be null',\n      '@param set set to be decorated, cannot be null',\n      '@param set the set to modify, must not be null',\n      '@param set the set that needs to be embellished, must not be null',\n      '@param set the set to wrap, cannot be null'\n    ]\n  },\n  {\n    'tag': '@param transformer the transformer to use for conversion, must not be null',\n    'alternatives': [\n      '@param transformer the converter to be employed, should not be null',\n      '@param transformer the transformer for performing conversion, cannot be null',\n      '@param transformer the object for changing the format, must not be null',\n      '@param transformer the converter to apply for transforming, must not be null',\n      '@param transformer the converter to use for conversion, should not be null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if set or transformer is null',\n    'alternatives': [\n      '@throws NullPointerException if the set or transformer is null',\n      '@throws NullPointerException if either the set or the transformer is null',\n      '@throws NullPointerException if null is passed as set or transformer',\n      '@throws NullPointerException if set or transformer parameters are null',\n      '@throws NullPointerException if either set or transformer is null'\n    ]\n  },\n  {\n    'tag': '@param set the set to decorate, must not be null',\n    'alternatives': [\n      '@param set the set to enhance, should not be null',\n      '@param set set to be decorated, cannot be null',\n      '@param set the set to modify, must not be null',\n      '@param set the set that needs to be embellished, must not be null',\n      '@param set the set to wrap, cannot be null'\n    ]\n  },\n  {\n    'tag': '@param transformer the transformer to use for conversion, must not be null',\n    'alternatives': [\n      '@param transformer the converter to be employed, should not be null',\n      '@param transformer the transformer for performing conversion, cannot be null',\n      '@param transformer the object for changing the format, must not be null',\n      '@param transformer the converter to apply for transforming, must not be null',\n      '@param transformer the converter to use for conversion, should not be null'\n    ]\n  },\n  {\n    'tag': '@return true if input is null',\n    'alternatives': [\n      '@return true if the input is null',\n      '@return true when the input is null',\n      '@return true in case of input being null',\n      '@return true if the input parameter is null',\n      '@return true if the input value is null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if <code>array</code> is <code>null</code>',\n    'alternatives': [\n      '@throws NullPointerException if <code>array</code> is <code>null</code>',\n      '@throws NullPointerException when <code>array</code> is <code>null</code>',\n      '@throws NullPointerException if <code>array</code> parameter is <code>null</code>',\n      '@throws NullPointerException if <code>array</code> value is <code>null</code>',\n      '@throws NullPointerException if <code>array</code> is <code>null</code>'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if <code>array</code> is <code>null</code>',\n    'alternatives': [\n      '@throws NullPointerException if <code>array</code> is <code>null</code>',\n      '@throws NullPointerException when <code>array</code> is <code>null</code>',\n      '@throws NullPointerException if <code>array</code> parameter is <code>null</code>',\n      '@throws NullPointerException if <code>array</code> value is <code>null</code>',\n      '@throws NullPointerException if <code>array</code> is <code>null</code>'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if <code>array</code> is <code>null</code>',\n    'alternatives': [\n      '@throws NullPointerException if <code>array</code> is <code>null</code>',\n      '@throws NullPointerException when <code>array</code> is <code>null</code>',\n      '@throws NullPointerException if <code>array</code> parameter is <code>null</code>',\n      '@throws NullPointerException if <code>array</code> value is <code>null</code>',\n      '@throws NullPointerException if <code>array</code> is <code>null</code>'\n    ]\n  },\n  {\n    'tag': '@throws UnsupportedOperationException always',\n    'alternatives': [\n      '@throws UnsupportedOperationException under every circumstance',\n      '@throws UnsupportedOperationException without any exception',\n      '@throws UnsupportedOperationException at all times',\n      '@throws UnsupportedOperationException consistently',\n      '@throws UnsupportedOperationException invariably'\n    ]\n  },\n  {\n    'tag': '@param defaultList the returned values if list is {@code null}',\n    'alternatives': [\n      '@param defaultList the values to return if the list is {@code null}',\n      '@param defaultList values that will be returned if list is {@code null}',\n      '@param defaultList the values to be returned in case of list being {@code null}',\n      '@param defaultList the returned values if the list parameter is {@code null}',\n      '@param defaultList the values to return when the list is {@code null}'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if either list is null',\n    'alternatives': [\n      '@throws NullPointerException if one of the lists is null',\n      '@throws NullPointerException when either of the lists is null',\n      '@throws NullPointerException if any list is null',\n      '@throws NullPointerException if at least one list is null',\n      '@throws NullPointerException if either list is null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if either list is null',\n    'alternatives': [\n      '@throws NullPointerException if one of the lists is null',\n      '@throws NullPointerException when either of the lists is null',\n      '@throws NullPointerException if any list is null',\n      '@throws NullPointerException if at least one list is null',\n      '@throws NullPointerException if either list is null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if either list is null',\n    'alternatives': [\n      '@throws NullPointerException if one of the lists is null',\n      '@throws NullPointerException when either of the lists is null',\n      '@throws NullPointerException if any list is null',\n      '@throws NullPointerException if at least one list is null',\n      '@throws NullPointerException if either list is null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if either list is null',\n    'alternatives': [\n      '@throws NullPointerException if one of the lists is null',\n      '@throws NullPointerException when either of the lists is null',\n      '@throws NullPointerException if any list is null',\n      '@throws NullPointerException if at least one list is null',\n      '@throws NullPointerException if either list is null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if the input list is null',\n    'alternatives': [\n      '@throws NullPointerException if the list passed as input is null',\n      '@throws NullPointerException if the provided list is null',\n      '@throws NullPointerException when the list input is null',\n      '@throws NullPointerException if the input list parameter is null',\n      '@throws NullPointerException if the input list is null'\n    ]\n  },\n  {\n    'tag': '@param inputCollection the collection to get the input from, may not be null',\n    'alternatives': [\n      '@param inputCollection the collection to retrieve the input from, must not be null',\n      '@param inputCollection the collection from which the input should be obtained, cannot be null',\n      '@param inputCollection the collection that contains the input, may not be null',\n      '@param inputCollection the collection to fetch the input from, must not be null',\n      '@param inputCollection the collection from which to obtain the input, may not be null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if the input collection is null',\n    'alternatives': [\n      '@throws NullPointerException if the collection input is null',\n      '@throws NullPointerException when the input collection is null',\n      '@throws NullPointerException if the provided collection is null',\n      '@throws NullPointerException if the input collection parameter is null',\n      '@throws NullPointerException if the input collection is null'\n    ]\n  },\n  {\n    'tag': '@param inputCollection the collection to get the input from, may not be null',\n    'alternatives': [\n      '@param inputCollection the collection to retrieve the input from, must not be null',\n      '@param inputCollection the collection from which the input should be obtained, cannot be null',\n      '@param inputCollection the collection that contains the input, may not be null',\n      '@param inputCollection the collection to fetch the input from, must not be null',\n      '@param inputCollection the collection from which to obtain the input, may not be null'\n    ]\n  },\n  {\n    'tag': '@return whether the lists are equal by value comparison',\n    'alternatives': [\n      '@return true if the lists are equal by value comparison',\n      '@return whether the lists are equal when comparing their values',\n      '@return true if the value comparison of the lists is equal',\n      '@return whether the lists have the same values when compared',\n      '@return true if the value comparison of the lists yields equality'\n    ]\n  }\n]"