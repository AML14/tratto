"[\n  {\n    \"tag\": \"@return the <code>chained</code> closure\",\n    \"alternatives\": [\n      \"@return the closure that is <code>chained</code>\",\n      \"@return the closure that has been <code>chained</code>\",\n      \"@return the closure resulting from the <code>chained</code> operation\",\n      \"@return the closure obtained by <code>chaining</code>\",\n      \"@return the closure that is a result of the <code>chained</code> operation\"\n    ]\n  },\n  {\n    \"tag\": \"@param <E> the type that the closure acts on\",\n    \"alternatives\": [\n      \"@param <E> the type on which the closure operates\",\n      \"@param <E> the type the closure applies to\",\n      \"@param <E> the type that is affected by the closure\",\n      \"@param <E> the type on which the closure performs actions\",\n      \"@param <E> the type on which the closure acts\"\n    ]\n  },\n  {\n    \"tag\": \"@param closures a collection of closures to chain\",\n    \"alternatives\": [\n      \"@param closures a collection of closures for <code>chaining</code>\",\n      \"@param closures a collection of closures to be <code>chained</code>\",\n      \"@param closures a collection of closures that will be <code>chained</code>\",\n      \"@param closures a collection of closures to perform <code>chaining</code>\",\n      \"@param closures a collection of closures to be used for <code>chaining</code>\"\n    ]\n  },\n  {\n    \"tag\": \"@return the <code>chained</code> closure\",\n    \"alternatives\": [\n      \"@return the closure that is <code>chained</code>\",\n      \"@return the closure that has been <code>chained</code>\",\n      \"@return the closure resulting from the <code>chained</code> operation\",\n      \"@return the closure obtained by <code>chaining</code>\",\n      \"@return the closure that is a result of the <code>chained</code> operation\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NullPointerException if any closure in the collection is null\",\n    \"alternatives\": [\n      \"@throws NullPointerException if any closure within the collection is null\",\n      \"@throws NullPointerException if there is a null closure in the collection\",\n      \"@throws NullPointerException if a null closure exists within the collection\",\n      \"@throws NullPointerException if any closure contained in the collection is null\",\n      \"@throws NullPointerException when a null closure is found in the collection\"\n    ]\n  },\n  {\n    \"tag\": \"@param <E> the type that the closure acts on\",\n    \"alternatives\": [\n      \"@param <E> the type on which the closure operates\",\n      \"@param <E> the type the closure applies to\",\n      \"@param <E> the type that is affected by the closure\",\n      \"@param <E> the type on which the closure performs actions\",\n      \"@param <E> the type on which the closure acts\"\n    ]\n  },\n  {\n    \"tag\": \"@param predicate the validating predicate\",\n    \"alternatives\": [\n      \"@param predicate the predicate used for validation\",\n      \"@param predicate the predicate responsible for validation\",\n      \"@param predicate the predicate that performs validation\",\n      \"@param predicate the validating condition\",\n      \"@param predicate the condition used for validation\"\n    ]\n  },\n  {\n    \"tag\": \"@param trueClosure the closure called if the predicate is true\",\n    \"alternatives\": [\n      \"@param trueClosure the closure invoked when the predicate is true\",\n      \"@param trueClosure the closure executed when the predicate is true\",\n      \"@param trueClosure the closure to be called if the predicate is true\",\n      \"@param trueClosure the closure to execute if the predicate is true\",\n      \"@param trueClosure the closure that will be invoked if the predicate is true\"\n    ]\n  },\n  {\n    \"tag\": \"@return the <code>if</code> closure\",\n    \"alternatives\": [\n      \"@return the closure associated with the <code>if</code> statement\",\n      \"@return the closure used in the <code>if</code> condition\",\n      \"@return the closure that corresponds to the <code>if</code> clause\",\n      \"@return the closure employed in the <code>if</code> logic\",\n      \"@return the closure related to the <code>if</code> condition\"\n    ]\n  },\n  {\n    \"tag\": \"@param <E> the type that the closure acts on\",\n    \"alternatives\": [\n      \"@param <E> the type on which the closure operates\",\n      \"@param <E> the type the closure applies to\",\n      \"@param <E> the type that is affected by the closure\",\n      \"@param <E> the type on which the closure performs actions\",\n      \"@param <E> the type on which the closure acts\"\n    ]\n  },\n  {\n    \"tag\": \"@param predicate the predicate to switch on\",\n    \"alternatives\": [\n      \"@param predicate the predicate used for switching\",\n      \"@param predicate the condition for the switch statement\",\n      \"@param predicate the predicate that triggers the switch\",\n      \"@param predicate the condition to activate the switch\",\n      \"@param predicate the criterion to switch on\"\n    ]\n  },\n  {\n    \"tag\": \"@param trueClosure the closure called if the predicate is true\",\n    \"alternatives\": [\n      \"@param trueClosure the closure invoked when the predicate is true\",\n      \"@param trueClosure the closure executed when the predicate is true\",\n      \"@param trueClosure the closure to be called if the predicate is true\",\n      \"@param trueClosure the closure to execute if the predicate is true\",\n      \"@param trueClosure the closure that will be invoked if the predicate is true\"\n    ]\n  },\n  {\n    \"tag\": \"@param falseClosure the closure called if the predicate is false\",\n    \"alternatives\": [\n      \"@param falseClosure the closure invoked when the predicate is false\",\n      \"@param falseClosure the closure executed when the predicate is false\",\n      \"@param falseClosure the closure to be called if the predicate is false\",\n      \"@param falseClosure the closure to execute if the predicate is false\",\n      \"@param falseClosure the closure that will be invoked if the predicate is false\"\n    ]\n  },\n  {\n    \"tag\": \"@return the <code>switch</code> closure\",\n    \"alternatives\": [\n      \"@return the closure associated with the <code>switch</code> statement\",\n      \"@return the closure used in the <code>switch</code> logic\",\n      \"@return the closure that corresponds to the <code>switch</code> clause\",\n      \"@return the closure employed in the <code>switch</code> condition\",\n      \"@return the closure related to the <code>switch</code> statement\"\n    ]\n  },\n  {\n    \"tag\": \"@param <E> the type that the closure acts on\",\n    \"alternatives\": [\n      \"@param <E> the type on which the closure operates\",\n      \"@param <E> the type the closure applies to\",\n      \"@param <E> the type that is affected by the closure\",\n      \"@param <E> the type on which the closure performs actions\",\n      \"@param <E> the type on which the closure acts\"\n    ]\n  },\n  {\n    \"tag\": \"@return the <code>switch</code> closure\",\n    \"alternatives\": [\n      \"@return the closure associated with the <code>switch</code> statement\",\n      \"@return the closure used in the <code>switch</code> logic\",\n      \"@return the closure that corresponds to the <code>switch</code> clause\",\n      \"@return the closure employed in the <code>switch</code> condition\",\n      \"@return the closure related to the <code>switch</code> statement\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NullPointerException if the either array is null\",\n    \"alternatives\": [\n      \"@throws NullPointerException if either array is null\",\n      \"@throws NullPointerException if any of the arrays is null\",\n      \"@throws NullPointerException if either of the arrays is null\",\n      \"@throws NullPointerException when the either array is null\",\n      \"@throws NullPointerException if the array is null\"\n    ]\n  },\n  {\n    \"tag\": \"@throws IllegalArgumentException if the arrays have different sizes\",\n    \"alternatives\": [\n      \"@throws IllegalArgumentException if the arrays are of different sizes\",\n      \"@throws IllegalArgumentException if the sizes of the arrays differ\",\n      \"@throws IllegalArgumentException if the arrays do not have the same sizes\",\n      \"@throws IllegalArgumentException if the arrays are not the same size\",\n      \"@throws IllegalArgumentException when the sizes of the arrays are unequal\"\n    ]\n  },\n  {\n    \"tag\": \"@param <E> the type that the closure acts on\",\n    \"alternatives\": [\n      \"@param <E> the type on which the closure operates\",\n      \"@param <E> the type the closure applies to\",\n      \"@param <E> the type that is affected by the closure\",\n      \"@param <E> the type on which the closure performs actions\",\n      \"@param <E> the type on which the closure acts\"\n    ]\n  },\n  {\n    \"tag\": \"@param defaultClosure the default to call if no predicate matches\",\n    \"alternatives\": [\n      \"@param defaultClosure the closure to invoke if no predicate matches\",\n      \"@param defaultClosure the closure to be called when no predicate matches\",\n      \"@param defaultClosure the closure to execute if no predicate matches\",\n      \"@param defaultClosure the closure that will be invoked if no predicate matches\",\n      \"@param defaultClosure the closure that is called in the absence of a matching predicate\"\n    ]\n  },\n  {\n    \"tag\": \"@return the <code>switch</code> closure\",\n    \"alternatives\": [\n      \"@return the closure associated with the <code>switch</code> statement\",\n      \"@return the closure used in the <code>switch</code> logic\",\n      \"@return the closure that corresponds to the <code>switch</code> clause\",\n      \"@return the closure employed in the <code>switch</code> condition\",\n      \"@return the closure related to the <code>switch</code> statement\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NullPointerException if the either array is null\",\n    \"alternatives\": [\n      \"@throws NullPointerException if either array is null\",\n      \"@throws NullPointerException if any of the arrays is null\",\n      \"@throws NullPointerException if either of the arrays is null\",\n      \"@throws NullPointerException when the either array is null\",\n      \"@throws NullPointerException if the array is null\"\n    ]\n  },\n  {\n    \"tag\": \"@throws IllegalArgumentException if the arrays are different sizes\",\n    \"alternatives\": [\n      \"@throws IllegalArgumentException if the sizes of the arrays differ\",\n      \"@throws IllegalArgumentException if the arrays do not have the same sizes\",\n      \"@throws IllegalArgumentException if the arrays have unequal sizes\",\n      \"@throws IllegalArgumentException if the arrays are not the same size\",\n      \"@throws IllegalArgumentException when the sizes of the arrays are different\"\n    ]\n  },\n  {\n    \"tag\": \"@param <E> the type that the closure acts on\",\n    \"alternatives\": [\n      \"@param <E> the type on which the closure operates\",\n      \"@param <E> the type the closure applies to\",\n      \"@param <E> the type that is affected by the closure\",\n      \"@param <E> the type on which the closure performs actions\",\n      \"@param <E> the type on which the closure acts\"\n    ]\n  },\n  {\n    \"tag\": \"@param predicatesAndClosures a map of predicates to closures\",\n    \"alternatives\": [\n      \"@param predicatesAndClosures a mapping of predicates to closures\",\n      \"@param predicatesAndClosures a collection of predicate-closure pairs\",\n      \"@param predicatesAndClosures a dictionary linking predicates to closures\",\n      \"@param predicatesAndClosures a map that associates predicates with closures\",\n      \"@param predicatesAndClosures an associative array of predicates and closures\"\n    ]\n  }\n]"