"output=[\n  {'tag': '@param elements the <code>Iterable</code> containing the input values for the map.',\n  'alternatives': [\n    '@param collection the <code>Iterable</code> containing the input values for the map.',\n    '@param items the <code>Iterable</code> containing the input values for the map.',\n    '@param entries the <code>Iterable</code> containing the input values for the map.',\n    '@param objects the <code>Iterable</code> containing the input values for the map.',\n    '@param data the <code>Iterable</code> containing the input values for the map.']\n  },\n  {'tag': '@param keyTransformer the <code>Transformer</code> used to transform the element into a key value',\n  'alternatives': [\n    '@param keyMapper the <code>Transformer</code> used to transform the element into a key value',\n    '@param keyConverter the <code>Transformer</code> used to transform the element into a key value',\n    '@param keyMappingFunction the <code>Transformer</code> used to transform the element into a key value',\n    '@param keyChangeFunction the <code>Transformer</code> used to transform the element into a key value',\n    '@param keyTransformMethod the <code>Transformer</code> used to transform the element into a key value']\n  },\n  {'tag': '@param valueTransformer the <code>Transformer</code> used to transform the element into a value',\n  'alternatives': [\n    '@param valueMapper the <code>Transformer</code> used to transform the element into a value',\n    '@param valueConverter the <code>Transformer</code> used to transform the element into a value',\n    '@param valueMappingFunction the <code>Transformer</code> used to transform the element into a value',\n    '@param valueChangeFunction the <code>Transformer</code> used to transform the element into a value',\n    '@param valueTransformMethod the <code>Transformer</code> used to transform the element into a value']\n  },\n  {'tag': '@param <K> the key type',\n  'alternatives': [\n    '@param <K> the type of the key',\n    '@param <K> the generic type for the key',\n    '@param <K> the type parameter of the key',\n    '@param <K> the class type of the key',\n    '@param <K> the parameter representing the key type']\n  },\n  {'tag': '@param <V> the value type',\n  'alternatives': [\n    '@param <V> the type of the value',\n    '@param <V> the generic type for the value',\n    '@param <V> the type parameter of the value',\n    '@param <V> the class type of the value',\n    '@param <V> the parameter representing the value type']\n  },\n  {'tag': '@param map the <code>MultiMap</code> to populate.',\n  'alternatives': [\n    '@param dictionary the <code>MultiMap</code> to populate.',\n    '@param hashTable the <code>MultiMap</code> to populate.',\n    '@param associativeArray the <code>MultiMap</code> to populate.',\n    '@param hashMap the <code>MultiMap</code> to populate.',\n    '@param mapToFill the <code>MultiMap</code> to populate.']\n  },\n  {'tag': '@param elements the <code>Iterable</code> to use as input values for the map.',\n  'alternatives': [\n    '@param collection the <code>Iterable</code> to use as input values for the map.',\n    '@param items the <code>Iterable</code> to use as input values for the map.',\n    '@param entries the <code>Iterable</code> to use as input values for the map.',\n    '@param objects the <code>Iterable</code> to use as input values for the map.',\n    '@param data the <code>Iterable</code> to use as input values for the map.']\n  },\n  {'tag': '@param keyTransformer the <code>Transformer</code> used to transform the element into a key value',\n  'alternatives': [\n    '@param keyMapper the <code>Transformer</code> used to transform the element into a key value',\n    '@param keyConverter the <code>Transformer</code> used to transform the element into a key value',\n    '@param keyMappingFunction the <code>Transformer</code> used to transform the element into a key value',\n    '@param keyChangeFunction the <code>Transformer</code> used to transform the element into a key value',\n    '@param keyTransformMethod the <code>Transformer</code> used to transform the element into a key value']\n  },\n  {'tag': '@param <K> the key type',\n  'alternatives': [\n    '@param <K> the type of the key',\n    '@param <K> the generic type for the key',\n    '@param <K> the type parameter of the key',\n    '@param <K> the class type of the key',\n    '@param <K> the parameter representing the key type']\n  },\n  {'tag': '@param <V> the value type',\n  'alternatives': [\n    '@param <V> the type of the value',\n    '@param <V> the generic type for the value',\n    '@param <V> the type parameter of the value',\n    '@param <V> the class type of the value',\n    '@param <V> the parameter representing the value type']\n  },\n  {'tag': '@param <E> the type of object contained in the {@link Iterable}',\n  'alternatives': [\n    '@param <E> the element type contained in the {@link Iterable}',\n    '@param <E> the object type contained in the {@link Iterable}',\n    '@param <E> the generic type of the object contained in the {@link Iterable}',\n    '@param <E> the class type of the object contained in the {@link Iterable}',\n    '@param <E> the parameter representing the type of the object contained in the {@link Iterable}']\n  },\n  {'tag': '@param map the <code>MultiMap</code> to populate.',\n  'alternatives': [\n    '@param dictionary the <code>MultiMap</code> to populate.',\n    '@param hashTable the <code>MultiMap</code> to populate.',\n    '@param associativeArray the <code>MultiMap</code> to populate.',\n    '@param hashMap the <code>MultiMap</code> to populate.',\n    '@param mapToFill the <code>MultiMap</code> to populate.']\n  },\n  {'tag': '@param elements the <code>Iterable</code> containing the input values for the map.',\n  'alternatives': [\n    '@param collection the <code>Iterable</code> containing the input values for the map.',\n    '@param items the <code>Iterable</code> containing the input values for the map.',\n    '@param entries the <code>Iterable</code> containing the input values for the map.',\n    '@param objects the <code>Iterable</code> containing the input values for the map.',\n    '@param data the <code>Iterable</code> containing the input values for the map.']\n  },\n  {'tag': '@param keyTransformer the <code>Transformer</code> used to transform the element into a key value',\n  'alternatives': [\n    '@param keyMapper the <code>Transformer</code> used to transform the element into a key value',\n    '@param keyConverter the <code>Transformer</code> used to transform the element into a key value',\n    '@param keyMappingFunction the <code>Transformer</code> used to transform the element into a key value',\n    '@param keyChangeFunction the <code>Transformer</code> used to transform the element into a key value',\n    '@param keyTransformMethod the <code>Transformer</code> used to transform the element into a key value']\n  },\n  {'tag': '@param valueTransformer the <code>Transformer</code> used to transform the element into a value',\n  'alternatives': [\n    '@param valueMapper the <code>Transformer</code> used to transform the element into a value',\n    '@param valueConverter the <code>Transformer</code> used to transform the element into a value',\n    '@param valueMappingFunction the <code>Transformer</code> used to transform the element into a value',\n    '@param valueChangeFunction the <code>Transformer</code> used to transform the element into a value',\n    '@param valueTransformMethod the <code>Transformer</code> used to transform the element into a value']\n  },\n  {'tag': '@param <K> the key type',\n  'alternatives': [\n    '@param <K> the type of the key',\n    '@param <K> the generic type for the key',\n    '@param <K> the type parameter of the key',\n    '@param <K> the class type of the key',\n    '@param <K> the parameter representing the key type']\n  },\n  {'tag': '@param <V> the value type',\n  'alternatives': [\n    '@param <V> the type of the value',\n    '@param <V> the generic type for the value',\n    '@param <V> the type parameter of the value',\n    '@param <V> the class type of the value',\n    '@param <V> the parameter representing the value type']\n  },\n  {'tag': '@param map to wrap if necessary.',\n  'alternatives': [\n    '@param mapToWrap the map to wrap if necessary.',\n    '@param dictionary to wrap if necessary.',\n    '@param hashTable to wrap if necessary.',\n    '@param associativeArray to wrap if necessary.',\n    '@param hashMap to wrap if necessary.']\n  },\n  {'tag': '@return IterableMap<K, V>',\n  'alternatives': [\n    '@return IterableMap with keys of type K and values of type V',\n    '@return IterableMap instance with key type K and value type V',\n    '@return IterableMap object with keys of type K and values of type V',\n    '@return IterableMap implementation with keys of type K and values of type V',\n    '@return IterableMap structure with keys of type K and values of type V']\n  },\n  {'tag': '@param <K> the key type',\n  'alternatives': [\n    '@param <K> the type of the key',\n    '@param <K> the generic type for the key',\n    '@param <K> the type parameter of the key',\n    '@param <K> the class type of the key',\n    '@param <K> the parameter representing the key type']\n  },\n  {'tag': '@param <V> the value type',\n  'alternatives': [\n    '@param <V> the type of the value',\n    '@param <V> the generic type for the value',\n    '@param <V> the type parameter of the value',\n    '@param <V> the class type of the value',\n    '@param <V> the parameter representing the value type']\n  },\n  {'tag': '@param sortedMap to wrap if necessary',\n  'alternatives': [\n    '@param sortedMapToWrap the map to wrap if necessary',\n    '@param sortedDictionary to wrap if necessary',\n    '@param sortedHashTable to wrap if necessary',\n    '@param sortedAssociativeArray to wrap if necessary',\n    '@param sortedHashMap to wrap if necessary']\n  },\n  {'tag': '@return {@link IterableSortedMap}<K, V>',\n  'alternatives': [\n    '@return instance of {@link IterableSortedMap} with keys of type K and values of type V',\n    '@return object of {@link IterableSortedMap} with key type K and value type V',\n    '@return representation of {@link IterableSortedMap} with keys of type K and values of type V',\n    '@return {@link IterableSortedMap} implementation with keys of type K and values of type V',\n    '@return {@link IterableSortedMap} structure with keys of type K and values of type V']\n  },\n  {'tag': '@param input the object to be transformed, should be left unchanged',\n  'alternatives': [\n    '@param object the object to be transformed, should be left unchanged',\n    '@param item the object to be transformed, should be left unchanged',\n    '@param itemToTransform the object to be transformed, should be left unchanged',\n    '@param entry the object to be transformed, should be left unchanged',\n    '@param value the object to be transformed, should be left unchanged']\n  },\n  {'tag': '@throws ClassCastException (runtime) if the input is the wrong class',\n  'alternatives': [\n    '@throws InvalidCastException (runtime) if the input is the wrong class',\n    '@throws TypeCastException (runtime) if the input is the wrong class',\n    '@throws ClassCastException (runtime) if the input has the wrong class',\n    '@throws InvalidCastException (runtime) if the input has the wrong class',\n    '@throws TypeCastException (runtime) if the input has the wrong class']\n  }\n]"