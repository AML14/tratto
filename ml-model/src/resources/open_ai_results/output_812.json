"[\n    {\n        \"tag\": \"@throws NullPointerException if either iterator is null\",\n        \"alternatives\": [\n            \"@throws NullPointerException if either iterator is equal to null\",\n            \"@throws NullPointerException if any of the iterators is null\",\n            \"@throws NullPointerException if both iterators are null\",\n            \"@throws NullPointerException if any iterator is null\",\n            \"@throws NullPointerException if either of the iterators is null\"\n        ]\n    },\n    {\n        \"tag\": \"@param first the first child iterator in the IteratorChain, not null\",\n        \"alternatives\": [\n            \"@param first the initial child iterator in the IteratorChain, not null\",\n            \"@param first the first iterator child in the IteratorChain, not null\",\n            \"@param first the child iterator that comes first in the IteratorChain, not null\",\n            \"@param first the first iterator that is a child in the IteratorChain, not null\",\n            \"@param first the first iterator in the IteratorChain that is not null\"\n        ]\n    },\n    {\n        \"tag\": \"@param numCall Argument for which the function returns\\n{@code valueAtNumCall}.\",\n        \"alternatives\": [\n            \"@param numCall The argument that leads to the function returning\\n{@code valueAtNumCall}.\",\n            \"@param numCall The argument that results in the function returning\\n{@code valueAtNumCall}.\",\n            \"@param numCall The argument that causes the function to return\\n{@code valueAtNumCall}.\",\n            \"@param numCall The argument that produces the function's return of\\n{@code valueAtNumCall}.\",\n            \"@param numCall The argument that generates the function's return value\\n{@code valueAtNumCall}.\"\n        ]\n    },\n    {\n        \"tag\": \"@param initValue Initial value, i.e.\\n{@link NeighbourhoodSizeFunction#value(long) value(0)}.\",\n        \"alternatives\": [\n            \"@param initValue Starting value, i.e.\\n{@link NeighbourhoodSizeFunction#value(long) value(0)}.\",\n            \"@param initValue The initial value, represented by\\n{@link NeighbourhoodSizeFunction#value(long) value(0)}.\",\n            \"@param initValue The value at the beginning, which is\\n{@link NeighbourhoodSizeFunction#value(long) value(0)}.\",\n            \"@param initValue The initial value, specifically\\n{@link NeighbourhoodSizeFunction#value(long) value(0)}.\",\n            \"@param initValue The value at the start, namely\\n{@link NeighbourhoodSizeFunction#value(long) value(0)}.\"\n        ]\n    },\n    {\n        \"tag\": \"@param valueAtNumCall Value of the function at {@code numCall}.\",\n        \"alternatives\": [\n            \"@param valueAtNumCall The function's value at {@code numCall}.\",\n            \"@param valueAtNumCall The value of the function when {@code numCall} is used.\",\n            \"@param valueAtNumCall The function's value for the argument {@code numCall}.\",\n            \"@param valueAtNumCall The value that the function returns for the input {@code numCall}.\",\n            \"@param valueAtNumCall The value obtained from the function by using {@code numCall}.\"\n        ]\n    },\n    {\n        \"tag\": \"@param numCall Argument for which the function returns\\n{@code valueAtNumCall}.\",\n        \"alternatives\": [\n            \"@param numCall Input for which the function yields\\n{@code valueAtNumCall}.\",\n            \"@param numCall Argument that produces the function result\\n{@code valueAtNumCall}.\",\n            \"@param numCall The argument that causes the function to output\\n{@code valueAtNumCall}.\",\n            \"@param numCall The argument resulting in the function outputting\\n{@code valueAtNumCall}.\",\n            \"@param numCall The input for which the function provides\\n{@code valueAtNumCall}.\"\n        ]\n    },\n    {\n        \"tag\": \"@return the neighbourhood size function.\",\n        \"alternatives\": [\n            \"@return the function for determining the size of the neighborhood.\",\n            \"@return the size function of the neighborhood.\",\n            \"@return the function that calculates the size of the neighborhood.\",\n            \"@return the function used to determine the neighborhood's size.\",\n            \"@return the function that computes the size of the neighborhood.\"\n        ]\n    },\n    {\n        \"tag\": \"@param initValue Initial value, i.e.\\n{@link NeighbourhoodSizeFunction#value(long) value(0)}.\",\n        \"alternatives\": [\n            \"@param initValue Starting value, i.e.\\n{@link NeighbourhoodSizeFunction#value(long) value(0)}.\",\n            \"@param initValue The initial value, represented by\\n{@link NeighbourhoodSizeFunction#value(long) value(0)}.\",\n            \"@param initValue The value at the beginning, which is\\n{@link NeighbourhoodSizeFunction#value(long) value(0)}.\",\n            \"@param initValue The initial value, specifically\\n{@link NeighbourhoodSizeFunction#value(long) value(0)}.\",\n            \"@param initValue The value at the start, namely\\n{@link NeighbourhoodSizeFunction#value(long) value(0)}.\"\n        ]\n    },\n    {\n        \"tag\": \"@param slope Value of the function derivative at {@code numCall}.\",\n        \"alternatives\": [\n            \"@param slope The value of the function's derivative when {@code numCall} is used.\",\n            \"@param slope The rate of change of the function at the input {@code numCall}.\",\n            \"@param slope The derivative value of the function for the argument {@code numCall}.\",\n            \"@param slope The rate of change of the function with respect to {@code numCall}.\",\n            \"@param slope The function's derivative value at {@code numCall}.\"\n        ]\n    },\n    {\n        \"tag\": \"@param numCall Inflexion point.\",\n        \"alternatives\": [\n            \"@param numCall The point of inflection.\",\n            \"@param numCall The location of the inflection point.\",\n            \"@param numCall The inflection point value.\",\n            \"@param numCall The value of the point of inflection.\",\n            \"@param numCall The point where the curve changes concavity.\"\n        ]\n    },\n    {\n        \"tag\": \"@return the neighbourhood size function.\",\n        \"alternatives\": [\n            \"@return the function for determining the size of the neighborhood.\",\n            \"@return the size function of the neighborhood.\",\n            \"@return the function that calculates the size of the neighborhood.\",\n            \"@return the function used to determine the neighborhood's size.\",\n            \"@return the function that computes the size of the neighborhood.\"\n        ]\n    },\n    {\n        \"tag\": \"@param initValue Initial value, i.e.\\n{@link LearningFactorFunction#value(long) value(0)}.\",\n        \"alternatives\": [\n            \"@param initValue Starting value, i.e.\\n{@link LearningFactorFunction#value(long) value(0)}.\",\n            \"@param initValue The initial value, represented by\\n{@link LearningFactorFunction#value(long) value(0)}.\",\n            \"@param initValue The value at the beginning, which is\\n{@link LearningFactorFunction#value(long) value(0)}.\",\n            \"@param initValue The initial value, specifically\\n{@link LearningFactorFunction#value(long) value(0)}.\",\n            \"@param initValue The value at the start, namely\\n{@link LearningFactorFunction#value(long) value(0)}.\"\n        ]\n    },\n    {\n        \"tag\": \"@param valueAtNumCall Value of the function at {@code numCall}.\",\n        \"alternatives\": [\n            \"@param valueAtNumCall The function's value at {@code numCall}.\",\n            \"@param valueAtNumCall The value of the function when {@code numCall} is used.\",\n            \"@param valueAtNumCall The function's value for the argument {@code numCall}.\",\n            \"@param valueAtNumCall The value that the function returns for the input {@code numCall}.\",\n            \"@param valueAtNumCall The value obtained from the function by using {@code numCall}.\"\n        ]\n    },\n    {\n        \"tag\": \"@param numCall Argument for which the function returns\\n{@code valueAtNumCall}.\",\n        \"alternatives\": [\n            \"@param numCall Input for which the function yields\\n{@code valueAtNumCall}.\",\n            \"@param numCall Argument that produces the function result\\n{@code valueAtNumCall}.\",\n            \"@param numCall The argument that causes the function to output\\n{@code valueAtNumCall}.\",\n            \"@param numCall The argument resulting in the function outputting\\n{@code valueAtNumCall}.\",\n            \"@param numCall The input for which the function provides\\n{@code valueAtNumCall}.\"\n        ]\n    },\n    {\n        \"tag\": \"@return the learning factor function.\",\n        \"alternatives\": [\n            \"@return the function for determining the learning factor.\",\n            \"@return the learning factor calculation function.\",\n            \"@return the function that calculates the learning factor.\",\n            \"@return the function used to determine the learning factor.\",\n            \"@return the function that computes the learning factor.\"\n        ]\n    },\n    {\n        \"tag\": \"@param numCall Current step of the training task.\",\n        \"alternatives\": [\n            \"@param numCall The current iteration of the training process.\",\n            \"@param numCall The present stage of the training task.\",\n            \"@param numCall The current step in the training procedure.\",\n            \"@param numCall The step number in the ongoing training task.\",\n            \"@param numCall The current phase of the training task.\"\n        ]\n    },\n    {\n        \"tag\": \"@return the value of the function at {@code numCall}.\",\n        \"alternatives\": [\n            \"@return the function's value at {@code numCall}.\",\n            \"@return the value that the function produces when {@code numCall} is used.\",\n            \"@return the output of the function for the input {@code numCall}.\",\n            \"@return the value obtained from the function by applying {@code numCall}.\",\n            \"@return the result of the function with the argument {@code numCall}.\"\n        ]\n    },\n    {\n        \"tag\": \"@param numCall Current step of the training task.\",\n        \"alternatives\": [\n            \"@param numCall The current iteration of the training process.\",\n            \"@param numCall The present stage of the training task.\",\n            \"@param numCall The current step in the training procedure.\",\n            \"@param numCall The step number in the ongoing training task.\",\n            \"@param numCall The current phase of the training task.\"\n        ]\n    },\n    {\n        \"tag\": \"@return the value of the function at {@code numCall}.\",\n        \"alternatives\": [\n            \"@return the function's value at {@code numCall}.\",\n            \"@return the value that the function produces when {@code numCall} is used.\",\n            \"@return the output of the function for the input {@code numCall}.\",\n            \"@return the value obtained from the function by applying {@code numCall}.\",\n            \"@return the result of the function with the argument {@code numCall}.\"\n        ]\n    },\n    {\n        \"tag\": \"@param features Data.\",\n        \"alternatives\": [\n            \"@param features Input data.\",\n            \"@param features Dataset.\",\n            \"@param features The data to process.\",\n            \"@param features Input features.\",\n            \"@param features Data source.\"\n        ]\n    },\n    {\n        \"tag\": \"@param neurons List of neurons to scan. If the list is empty\\n{@code null} will be returned.\",\n        \"alternatives\": [\n            \"@param neurons List of neurons to search through. If the list is empty, {@code null} will be returned.\",\n            \"@param neurons List of neurons to examine. If the list is empty, then {@code null} will be returned.\",\n            \"@param neurons List of neurons to explore. If the list is empty, the method will return {@code null}.\",\n            \"@param neurons List of neurons to analyze. If the list is empty, {@code null} is returned.\",\n            \"@param neurons List of neurons to investigate. If there are no neurons, the value {@code null} will be returned.\"\n        ]\n    }\n]"