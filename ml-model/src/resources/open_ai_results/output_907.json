"output=[\n  {\n    'tag': '@return dimension of the problem',\n    'alternatives': [\n      '@return problem size',\n      '@return problem dimension',\n      '@return size of the problem',\n      '@return dimensionality of the problem',\n      '@return number of dimensions in the problem'\n    ]\n  },\n  {\n    'tag': '@param t current value of the independent <I>time</I> variable',\n    'alternatives': [\n      '@param t current time value',\n      '@param t current time',\n      '@param t current time variable',\n      '@param t current value of the time variable',\n      '@param t value of the time variable at the moment'\n    ]\n  },\n  {\n    'tag': '@param y array containing the current value of the state vector',\n    'alternatives': [\n      '@param y array with the current state vector value',\n      '@param y array representing the current state vector',\n      '@param y array that holds the current state vector value',\n      '@param y array which contains the current state vector value',\n      '@param y array storing the current state vector value'\n    ]\n  },\n  {\n    'tag': '@param yDot placeholder array where to put the time derivative of the state vector',\n    'alternatives': [\n      '@param yDot array to store the time derivative of the state vector',\n      '@param yDot array for holding the derivative of the state vector',\n      '@param yDot array to contain the derivative of the state vector',\n      '@param yDot array used for storing the time derivative of the state vector',\n      '@param yDot array to collect the time derivative of the state vector'\n    ]\n  },\n  {\n    'tag': '@param equations second order equations set to convert',\n    'alternatives': [\n      '@param equations set of second order equations to convert',\n      '@param equations set of equations in second order to be converted',\n      '@param equations set of second order equations for conversion',\n      '@param equations set of equations in second order for conversion',\n      '@param equations set of equations in second order to be transformed'\n    ]\n  },\n  {\n    'tag': '@param t current value of the independent <I>time</I> variable',\n    'alternatives': [\n      '@param t current time value',\n      '@param t current time',\n      '@param t current time variable',\n      '@param t current value of the time variable',\n      '@param t value of the time variable at the moment'\n    ]\n  },\n  {\n    'tag': '@param y array containing the current value of the main state vector',\n    'alternatives': [\n      '@param y array with the current main state vector value',\n      '@param y array representing the current main state vector',\n      '@param y array that holds the current main state vector value',\n      '@param y array which contains the current main state vector value',\n      '@param y array storing the current main state vector value'\n    ]\n  },\n  {\n    'tag': '@param yDot array containing the current value of the time derivative\\nof the main state vector',\n    'alternatives': [\n      '@param yDot array with the current value of the derivative of the main state vector',\n      '@param yDot array representing the current value of the derivative of the main state vector',\n      '@param yDot array that holds the current value of the time derivative of the main state vector',\n      '@param yDot array which contains the current value of the time derivative of the main state vector',\n      '@param yDot array storing the current value of the time derivative of the main state vector'\n    ]\n  },\n  {\n    'tag': '@param paramName name of the parameter to consider',\n    'alternatives': [\n      '@param paramName parameter name to take into account',\n      '@param paramName name of the parameter to include',\n      '@param paramName parameter name to consider',\n      '@param paramName name of the parameter to take into consideration',\n      '@param paramName name of the parameter to be considered'\n    ]\n  },\n  {\n    'tag': '@param dFdP placeholder array where to put the Jacobian matrix of the\\nODE with respect to the parameter',\n    'alternatives': [\n      '@param dFdP array to store the Jacobian matrix of the ODE with respect to the parameter',\n      '@param dFdP array for holding the Jacobian matrix of the ODE with respect to the parameter',\n      '@param dFdP array to contain the Jacobian matrix of the ODE with respect to the parameter',\n      '@param dFdP array used for storing the Jacobian matrix of the ODE with respect to the parameter',\n      '@param dFdP array to collect the Jacobian matrix of the ODE with respect to the parameter'\n    ]\n  },\n  {\n    'tag': '@throws MaxCountExceededException if the number of functions evaluations is exceeded',\n    'alternatives': [\n      '@throws MaxCountExceededException if the number of function evaluations is exceeded',\n      '@throws MaxCountExceededException if the function evaluation count exceeds the limit',\n      '@throws MaxCountExceededException when the function evaluation count is exceeded',\n      '@throws MaxCountExceededException if the limit of function evaluations is exceeded',\n      '@throws MaxCountExceededException if the count of function evaluations exceeds the allowed limit'\n    ]\n  },\n  {\n    'tag': '@throws DimensionMismatchException if arrays dimensions do not match equations settings',\n    'alternatives': [\n      '@throws DimensionMismatchException if the dimensions of the arrays do not match the equations settings',\n      '@throws DimensionMismatchException if the arrays dimensions are incompatible with the equations settings',\n      '@throws DimensionMismatchException when the dimensions of the arrays do not match the equations settings',\n      '@throws DimensionMismatchException if the arrays do not have dimensions that match the equations settings',\n      '@throws DimensionMismatchException if the dimensions of the arrays do not align with the equations settings'\n    ]\n  },\n  {\n    'tag': '@throws UnknownParameterException if the parameter is not supported',\n    'alternatives': [\n      '@throws UnknownParameterException if the parameter is not recognized',\n      '@throws UnknownParameterException when the provided parameter is not supported',\n      '@throws UnknownParameterException if the parameter is not known',\n      '@throws UnknownParameterException if the parameter is not valid',\n      '@throws UnknownParameterException if the provided parameter is unsupported'\n    ]\n  },\n  {\n    'tag': '@param equations differential equations to integrate',\n    'alternatives': [\n      '@param equations equations to be integrated',\n      '@param equations differential equations for integration',\n      '@param equations equations for integration',\n      '@param equations set of equations to integrate',\n      '@param equations equations set for integration'\n    ]\n  },\n  {\n    'tag': '@param t0 initial time',\n    'alternatives': [\n      '@param t0 starting time',\n      '@param t0 initial time point',\n      '@param t0 time at the beginning',\n      '@param t0 time at the start',\n      '@param t0 time at the initial moment'\n    ]\n  },\n  {\n    'tag': '@param y0 initial value of the state vector at t0',\n    'alternatives': [\n      '@param y0 initial value of the state vector at time t0',\n      '@param y0 starting value of the state vector at t0',\n      '@param y0 value of the state vector at t0',\n      '@param y0 state vector initial value at t0',\n      '@param y0 value of the state vector at the initial moment'\n    ]\n  },\n  {\n    'tag': '@param yDot0 initial value of the first derivative of the state\\nvector at t0',\n    'alternatives': [\n      '@param yDot0 initial value of the first derivative of the state vector at time t0',\n      '@param yDot0 starting value of the first derivative of the state vector at t0',\n      '@param yDot0 value of the first derivative of the state vector at t0',\n      '@param yDot0 first derivative of the state vector initial value at t0',\n      '@param yDot0 value of the first derivative of the state vector at the initial moment'\n    ]\n  },\n  {\n    'tag': '@param t target time for the integration\\n(can be set to a value smaller thant <code>t0</code> for backward integration)',\n    'alternatives': [\n      '@param t target time for integration\\n(can be set to a value smaller than <code>t0</code> for backward integration)',\n      '@param t time target for the integration\\n(can be set to a smaller value than <code>t0</code> for backward integration)',\n      '@param t desired time for the integration\\n(can be set to a value smaller than <code>t0</code> for backward integration)',\n      '@param t time to aim for during integration\\n(can be set to a value smaller than <code>t0</code> for backward integration)',\n      '@param t time value to reach during the integration\\n(can be set to a smaller value than <code>t0</code> for backward integration)'\n    ]\n  },\n  {\n    'tag': '@param y placeholder where to put the state vector at each\\nsuccessful step (and hence at the end of integration), can be the\\nsame object as y0',\n    'alternatives': [\n      '@param y placeholder to store the state vector at each successful step (and therefore at the end of integration), can be the same object as y0',\n      '@param y placeholder for the state vector at each successful step (and hence at the end of integration), can be the same object as y0',\n      '@param y placeholder to hold the state vector at each successful step (and thus at the end of integration), can be the same object as y0',\n      '@param y placeholder used for storing the state vector at each successful step (and consequently at the end of integration), can be the same object as y0',\n      '@param y placeholder to collect the state vector at each successful step (and therefore at the end of integration), can be the same object as y0'\n    ]\n  },\n  {\n    'tag': '@param yDot placeholder where to put the first derivative of\\nthe state vector at time t, can be the same object as yDot0',\n    'alternatives': [\n      '@param yDot placeholder to store the first derivative of the state vector at time t, can be the same object as yDot0',\n      '@param yDot placeholder for the first derivative of the state vector at time t, can be the same object as yDot0',\n      '@param yDot placeholder to hold the first derivative of the state vector at time t, can be the same object as yDot0',\n      '@param yDot placeholder used for storing the first derivative of the state vector at time t, can be the same object as yDot0',\n      '@param yDot placeholder to collect the first derivative of the state vector at time t, can be the same object as yDot0'\n    ]\n  },\n  {\n    'tag': '@throws MathIllegalStateException if the integrator cannot perform integration',\n    'alternatives': [\n      '@throws MathIllegalStateException if the integrator is unable to perform integration',\n      '@throws MathIllegalStateException if the integration cannot be performed by the integrator',\n      '@throws MathIllegalStateException when the integrator is unable to perform integration',\n      '@throws MathIllegalStateException if integration is not possible for the integrator',\n      '@throws MathIllegalStateException if the integrator does not support the integration'\n    ]\n  },\n  {\n    'tag': '@throws MathIllegalArgumentException if integration parameters are wrong (typically\\ntoo small integration span)',\n    'alternatives': [\n      '@throws MathIllegalArgumentException if the integration parameters are incorrect (typically\\nintegration span is too small)',\n      '@throws MathIllegalArgumentException if the integration parameters are not valid (typically\\nintegration span is too small)',\n      '@throws MathIllegalArgumentException when the integration parameters are wrong (typically\\nintegration span is too small)',\n      '@throws MathIllegalArgumentException if the integration parameters are invalid (typically\\nintegration span is too small)',\n      '@throws MathIllegalArgumentException if the integration parameters are not suitable (typically\\nintegration span is too small)'\n    ]\n  },\n  {\n    'tag': '@return field to which state vector elements belong',\n    'alternatives': [\n      '@return field to which the state vector elements pertain',\n      '@return field to which the elements of the state vector belong',\n      '@return field to which the state vector elements are associated',\n      '@return field that the state vector elements are related to',\n      '@return field to which the elements of the state vector are assigned to'\n    ]\n  },\n  {\n    'tag': '@param eqn equations to integrate',\n    'alternatives': [\n      '@param eqn equations for integration',\n      '@param eqn equations to be integrated',\n      '@param eqn differential equations to integrate',\n      '@param eqn set of equations to integrate',\n      '@param eqn equations set for integration'\n    ]\n  },\n  {\n    'tag': '@param t0 start value of the independent <i>time</i> variable',\n    'alternatives': [\n      '@param t0 initial value of the independent <i>time</i> variable',\n      '@param t0 beginning value of the independent <i>time</i> variable',\n      '@param t0 value of the independent <i>time</i> variable at the start',\n      '@param t0 value of the independent <i>time</i> variable at the beginning',\n      '@param t0 first value of the independent <i>time</i> variable'\n    ]\n  }\n]"