"output=[\n{\"tag\": \"@throws NonSquareMatrixException if the matrix {@code rm} is not\\nsquare\", \n \"alternatives\": [\n   \"@throws NonSquareMatrixException if the matrix {@code rm} is not\\nsquare\",\n   \"@throws NonSquareMatrixException if the {@code rm} matrix is not\\nsquare\",\n   \"@throws NonSquareMatrixException if the matrix {@code rm} is not\\nrectangular\"\n ]},\n\n{\"tag\": \"@throws NonSquareMatrixException if {@code m} is not square.\",\n \"alternatives\": [\n   \"@throws NonSquareMatrixException if the {@code m} matrix is not square\",\n   \"@throws NonSquareMatrixException if the matrix {@code m} is not\\nrectangular\",\n   \"@throws NonSquareMatrixException if the {@code m} matrix is not\\nsquare-shaped\"\n ]},\n\n {\"tag\": \"@throws NullArgumentException if {@code matrix} is {@code null}\",\n \"alternatives\": [\n   \"@throws NullArgumentException if the {@code matrix} parameter is\\n{@code null}\",\n   \"@throws NullArgumentException if the input {@code matrix} is\\n{@code null}\",\n   \"@throws NullArgumentException if the object {@code matrix} is\\nnull\"\n ]},\n\n {\"tag\": \"@throws NonSquareMatrixException if matrix is not square\",\n \"alternatives\": [\n   \"@throws NonSquareMatrixException if the matrix is not square\",\n   \"@throws NonSquareMatrixException if the matrix is not square-shaped\",\n   \"@throws NonSquareMatrixException if the given matrix is not\\nsquare\"\n ]},\n\n {\"tag\": \"@throws NullArgumentException if {@code matrix} is {@code null}\",\n \"alternatives\": [\n   \"@throws NullArgumentException if the {@code matrix} is\\n{@code null}\",\n   \"@throws NullArgumentException if the input {@code matrix} is\\nnull\",\n   \"@throws NullArgumentException if the object {@code matrix} is\\nnull\"\n ]},\n\n {\"tag\": \"@throws NonSquareMatrixException if matrix is not square\",\n \"alternatives\": [\n   \"@throws NonSquareMatrixException if the matrix is not square\",\n   \"@throws NonSquareMatrixException if the matrix is not square-shaped\",\n   \"@throws NonSquareMatrixException if the given matrix is not\\nsquare\"\n ]},\n\n {\"tag\": \"@throws NumberIsTooLargeException if {@code lower >= upper}.\",\n \"alternatives\": [\n   \"@throws NumberIsTooLargeException if {@code lower >= upper}.\",\n   \"@throws NumberIsTooLargeException when {@code lower} is not less\\nthan {@code upper}.\",\n   \"@throws NumberIsTooLargeException if the value of {@code lower}\\nis not strictly less than {@code upper}.\"\n ]},\n\n {\"tag\": \"@throws NumberIsTooLargeException if {@code lower >= upper}.\",\n \"alternatives\": [\n   \"@throws NumberIsTooLargeException if {@code lower >= upper}.\",\n   \"@throws NumberIsTooLargeException when {@code lower} is not less\\nthan {@code upper}.\",\n   \"@throws NumberIsTooLargeException if the value of {@code lower}\\nis not strictly less than {@code upper}.\"\n ]},\n\n {\"tag\": \"@throws NumberIsTooLargeException if {@code lower >= upper}.\",\n \"alternatives\": [\n   \"@throws NumberIsTooLargeException if {@code lower >= upper}.\",\n   \"@throws NumberIsTooLargeException when {@code lower} is not less\\nthan {@code upper}.\",\n   \"@throws NumberIsTooLargeException if the value of {@code lower}\\nis not strictly less than {@code upper}.\"\n ]},\n\n {\"tag\": \"@throws NumberIsTooLargeException if {@code lower >= upper}.\",\n \"alternatives\": [\n   \"@throws NumberIsTooLargeException if {@code lower >= upper}.\",\n   \"@throws NumberIsTooLargeException when {@code lower} is not less\\nthan {@code upper}.\",\n   \"@throws NumberIsTooLargeException if the value of {@code lower}\\nis not strictly less than {@code upper}.\"\n ]},\n\n {\"tag\": \"@return {@code true}\",\n \"alternatives\": [\n   \"@return {@code true}\",\n   \"@return the boolean value {@code true}\",\n   \"@return a boolean value indicating {@code true}\"\n ]},\n\n {\"tag\": \"@throws NotStrictlyPositiveException if minimal number of iterations\\nis not strictly positive\",\n \"alternatives\": [\n   \"@throws NotStrictlyPositiveException if the minimum number of\\niterations is not strictly positive\",\n   \"@throws NotStrictlyPositiveException if the number of iterations\\ndoes not meet the strict positivity requirement\",\n   \"@throws NotStrictlyPositiveException when the minimal number of\\niterations is not strictly positive\"\n ]},\n\n {\"tag\": \"@throws NotStrictlyPositiveException if minimal number of iterations\\nis not strictly positive\",\n \"alternatives\": [\n   \"@throws NotStrictlyPositiveException if the minimum number of\\niterations is not strictly positive\",\n   \"@throws NotStrictlyPositiveException if the number of iterations\\ndoes not meet the strict positivity requirement\",\n   \"@throws NotStrictlyPositiveException when the minimal number of\\niterations is not strictly positive\"\n ]},\n\n {\"tag\": \"@param minStep minimal step (must be positive even for backward\\nintegration), the last step can be smaller than this\",\n \"alternatives\": [\n   \"@param minStep the minimum step size (must be positive even\\nfor backward integration), allowing the last step to be smaller than this\",\n   \"@param minStep the minimum step (must be positive even for\\nbackward integration), with the possibility that the last step\\nmay be smaller\",\n   \"@param minStep the minimal step value (must be positive even\\nwhen integrating backwards), where the last step can be smaller than this\"\n ]},\n\n {\"tag\": \"@param maxStep maximal step (must be positive even for backward\\nintegration)\",\n \"alternatives\": [\n   \"@param maxStep the maximum step size (must be positive even\\nfor backward integration)\",\n   \"@param maxStep the maximum step allowed (must be positive\\neven for backward integration)\",\n   \"@param maxStep the largest allowable step (must be positive\\neven when integrating backwards)\"\n ]},\n\n {\"tag\": \"@param start Initial guess for the parameters.  Cannot be {@code null}.\\nIts length must be consistent with the number of parameters of the\\nfunction to fit.\",\n \"alternatives\": [\n   \"@param start the initial approximation for the parameters (cannot\\nbe {@code null}). Its length must be compatible with the\\nnumber of parameters used in the function to be fitted.\",\n   \"@param start the initial estimation for the parameters (must\\nnot be {@code null}). The length of the argument must match\\nthe number of function parameters being fitted.\",\n   \"@param start the initial value assigned to the parameters (cannot\\nbe {@code null}). The length of the parameter should be\\nequal to the number of parameters for the function being fitted.\"\n ]},\n\n {\"tag\": \"@throws NullArgumentException if original is null\",\n \"alternatives\": [\n   \"@throws NullArgumentException if the original argument is null\",\n   \"@throws NullArgumentException if the {@code original} is null\",\n   \"@throws NullArgumentException if the provided {@code original}\\nis null\"\n ]},\n\n {\"tag\": \"@throws MathIllegalArgumentException if the input array is null or the array\\nindex parameters are not valid\",\n \"alternatives\": [\n   \"@throws MathIllegalArgumentException if the input array is\\n{@code null} or the array index parameters are invalid\",\n   \"@throws MathIllegalArgumentException if the input array is null,\\nor if any of the array index parameters are invalid\",\n   \"@throws MathIllegalArgumentException if the array passed as\\ninput is null or if any of the array index parameters\\nare invalid\"\n ]},\n\n {\"tag\": \"@throws NullArgumentException if either source or dest is null\",\n \"alternatives\": [\n   \"@throws NullArgumentException if either the source or destination\\nis null\",\n   \"@throws NullArgumentException if either the source or\\ndestination is null\",\n   \"@throws NullArgumentException if the input source or\\ndestination is null\"\n ]},\n\n {\"tag\": \"@return {@code true}\",\n \"alternatives\": [\n   \"@return {@code true}\",\n   \"@return the boolean value {@code true}\",\n   \"@return a boolean value indicating {@code true}\"\n ]},\n\n {\"tag\": \"@return {@code true}\",\n \"alternatives\": [\n   \"@return {@code true}\",\n   \"@return the boolean value {@code true}\",\n   \"@return a boolean value indicating {@code true}\"\n ]},\n\n {\"tag\": \"@return {@code true}\",\n \"alternatives\": [\n   \"@return {@code true}\",\n   \"@return the boolean value {@code true}\",\n   \"@return a boolean value indicating {@code true}\"\n ]},\n\n {\"tag\": \"@throws NoDataException if an array has zero-length.\",\n \"alternatives\": [\n   \"@throws NoDataException if the array has zero-length\",\n   \"@throws NoDataException when the array has a length of zero\",\n   \"@throws NoDataException in case the array has zero length\"\n ]},\n\n {\"tag\": \"@throws NullArgumentException if the arguments are {@code null}.\",\n \"alternatives\": [\n   \"@throws NullArgumentException when the arguments are\\n{@code null}\",\n   \"@throws NullArgumentException if both arguments are {@code null}\",\n   \"@throws NullArgumentException if the provided arguments are\\nnull\"\n ]},\n\n {\"tag\": \"@throws NullArgumentException if {@code a} is {@code null}.\",\n \"alternatives\": [\n   \"@throws NullArgumentException if the {@code a} parameter is\\n{@code null}\",\n   \"@throws NullArgumentException if the argument {@code a} is\\nnull\",\n   \"@throws NullArgumentException if the supplied value {@code a}\\nis {@code null}\"\n ]}\n]"