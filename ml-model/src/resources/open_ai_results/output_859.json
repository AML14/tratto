"[\n  {\n    'tag': '@param iteration Index of current iteration',\n    'alternatives': [\n      '@param iteration the index of the current iteration',\n      '@param iteration represents the index of the current iteration',\n      '@param iteration denotes the index of the current iteration',\n      '@param iteration indicates the index of the current iteration',\n      '@param iteration refers to the index of the current iteration'\n    ]\n  },\n  {\n    'tag': '@param previous Best point in the previous iteration.',\n    'alternatives': [\n      '@param previous the best point from the previous iteration',\n      '@param previous represents the best point in the previous iteration',\n      '@param previous denotes the best point in the previous iteration',\n      '@param previous indicates the best point in the previous iteration',\n      '@param previous refers to the best point from the previous iteration'\n    ]\n  },\n  {\n    'tag': '@param current Best point in the current iteration.',\n    'alternatives': [\n      '@param current the best point from the current iteration',\n      '@param current represents the best point in the current iteration',\n      '@param current denotes the best point in the current iteration',\n      '@param current indicates the best point in the current iteration',\n      '@param current refers to the best point from the current iteration'\n    ]\n  },\n  {\n    'tag': '@return {@code true} if the algorithm has converged.',\n    'alternatives': [\n      '@return {@code true} when the algorithm has reached convergence',\n      '@return {@code true} if the algorithm has achieved convergence',\n      '@return {@code true} in case the algorithm has converged',\n      '@return {@code true} if convergence has been reached by the algorithm',\n      '@return {@code true} if the algorithm has successfully converged'\n    ]\n  },\n  {\n    'tag': '@param relativeThreshold relative tolerance threshold',\n    'alternatives': [\n      '@param relativeThreshold the threshold for relative tolerance',\n      '@param relativeThreshold represents the threshold for relative tolerance',\n      '@param relativeThreshold denotes the threshold for relative tolerance',\n      '@param relativeThreshold indicates the threshold for relative tolerance',\n      '@param relativeThreshold refers to the threshold for relative tolerance'\n    ]\n  },\n  {\n    'tag': '@param absoluteThreshold absolute tolerance threshold',\n    'alternatives': [\n      '@param absoluteThreshold the threshold for absolute tolerance',\n      '@param absoluteThreshold represents the threshold for absolute tolerance',\n      '@param absoluteThreshold denotes the threshold for absolute tolerance',\n      '@param absoluteThreshold indicates the threshold for absolute tolerance',\n      '@param absoluteThreshold refers to the threshold for absolute tolerance'\n    ]\n  },\n  {\n    'tag': '@param relativeThreshold relative tolerance threshold',\n    'alternatives': [\n      '@param relativeThreshold the threshold for relative tolerance',\n      '@param relativeThreshold represents the threshold for relative tolerance',\n      '@param relativeThreshold denotes the threshold for relative tolerance',\n      '@param relativeThreshold indicates the threshold for relative tolerance',\n      '@param relativeThreshold refers to the threshold for relative tolerance'\n    ]\n  },\n  {\n    'tag': '@param absoluteThreshold absolute tolerance threshold',\n    'alternatives': [\n      '@param absoluteThreshold the threshold for absolute tolerance',\n      '@param absoluteThreshold represents the threshold for absolute tolerance',\n      '@param absoluteThreshold denotes the threshold for absolute tolerance',\n      '@param absoluteThreshold indicates the threshold for absolute tolerance',\n      '@param absoluteThreshold refers to the threshold for absolute tolerance'\n    ]\n  },\n  {\n    'tag': '@param maxIter Maximum iteration count.',\n    'alternatives': [\n      '@param maxIter the maximum count of iterations',\n      '@param maxIter represents the maximum iteration count',\n      '@param maxIter denotes the maximum iteration count',\n      '@param maxIter indicates the maximum iteration count',\n      '@param maxIter refers to the maximum count of iterations'\n    ]\n  },\n  {\n    'tag': '@return the lower bound.',\n    'alternatives': [\n      '@return the minimum limit.',\n      '@return the smallest possible value.',\n      '@return the lowest bound.',\n      '@return the bottom threshold.',\n      '@return the minimum boundary.'\n    ]\n  },\n  {\n    'tag': '@return the upper bound.',\n    'alternatives': [\n      '@return the maximum limit.',\n      '@return the largest possible value.',\n      '@return the highest bound.',\n      '@return the top threshold.',\n      '@return the maximum boundary.'\n    ]\n  },\n  {\n    'tag': '@return the start value.',\n    'alternatives': [\n      '@return the initial value.',\n      '@return the beginning point.',\n      '@return the initial point.',\n      '@return the first value.',\n      '@return the value at the start.'\n    ]\n  },\n  {\n    'tag': '@param lo Lower bound.',\n    'alternatives': [\n      '@param lo the minimum limit.',\n      '@param lo represents the lower boundary.',\n      '@param lo denotes the smallest possible value.',\n      '@param lo indicates the bottom threshold.',\n      '@param lo refers to the minimum bound.'\n    ]\n  },\n  {\n    'tag': '@param hi Upper bound.',\n    'alternatives': [\n      '@param hi the maximum limit.',\n      '@param hi represents the upper boundary.',\n      '@param hi denotes the largest possible value.',\n      '@param hi indicates the top threshold.',\n      '@param hi refers to the maximum bound.'\n    ]\n  },\n  {\n    'tag': '@param init Start value.',\n    'alternatives': [\n      '@param init the initial value.',\n      '@param init represents the starting point.',\n      '@param init denotes the initial point.',\n      '@param init indicates the first value.',\n      '@param init refers to the value at the start.'\n    ]\n  },\n  {\n    'tag': '@param lo Lower bound.',\n    'alternatives': [\n      '@param lo the minimum limit.',\n      '@param lo represents the lower boundary.',\n      '@param lo denotes the smallest possible value.',\n      '@param lo indicates the bottom threshold.',\n      '@param lo refers to the minimum bound.'\n    ]\n  },\n  {\n    'tag': '@param hi Upper bound.',\n    'alternatives': [\n      '@param hi the maximum limit.',\n      '@param hi represents the upper boundary.',\n      '@param hi denotes the largest possible value.',\n      '@param hi indicates the top threshold.',\n      '@param hi refers to the maximum bound.'\n    ]\n  },\n  {\n    'tag': '@return the point.',\n    'alternatives': [\n      '@return the location.',\n      '@return the position.',\n      '@return the coordinate.',\n      '@return the spot.',\n      '@return the specific point.'\n    ]\n  },\n  {\n    'tag': '@return the stored value of the objective function.',\n    'alternatives': [\n      '@return the value of the objective function that is stored.',\n      '@return the objective function value that is stored.',\n      '@return the stored value of the target function.',\n      '@return the value of the stored aim function.',\n      '@return the objective function value stored in memory.'\n    ]\n  },\n  {\n    'tag': '@param point Point.',\n    'alternatives': [\n      '@param point the specific location.',\n      '@param point represents the exact position.',\n      '@param point denotes the precise coordinate.',\n      '@param point indicates the particular spot.',\n      '@param point refers to the given point.'\n    ]\n  },\n  {\n    'tag': '@param value Value of an objective function at the point',\n    'alternatives': [\n      '@param value the value of the objective function at the specific point',\n      '@param value represents the objective function value at the given point',\n      '@param value denotes the value of the aim function at the provided point',\n      '@param value indicates the numeric value of the target function at the point',\n      '@param value refers to the specific value of the function at the point'\n    ]\n  },\n  {\n    'tag': '@param func Function whose optimum should be bracketed.',\n    'alternatives': [\n      '@param func the function for which the optimum should be bracketed',\n      '@param func represents the function that needs to bracket the optimum',\n      '@param func denotes the function whose optimum should be enclosed',\n      '@param func indicates the function that needs to determine the optimal range',\n      '@param func refers to the function that is required to bracket the optimum'\n    ]\n  },\n  {\n    'tag': '@param goal {@link GoalType Goal type}.',\n    'alternatives': [\n      '@param goal the type of goal specified by {@link GoalType}',\n      '@param goal represents the objective type defined by {@link GoalType}',\n      '@param goal denotes the desired goal type described in {@link GoalType}',\n      '@param goal indicates the goal type provided by {@link GoalType}',\n      '@param goal refers to the specified objective type in {@link GoalType}'\n    ]\n  },\n  {\n    'tag': '@param xA Initial point.',\n    'alternatives': [\n      '@param xA the starting point.',\n      '@param xA represents the initial position.',\n      '@param xA denotes the initial coordinate.',\n      '@param xA indicates the initial spot.',\n      '@param xA refers to the first point.'\n    ]\n  },\n  {\n    'tag': '@param xB Initial point.',\n    'alternatives': [\n      '@param xB the starting point.',\n      '@param xB represents the initial position.',\n      '@param xB denotes the initial coordinate.',\n      '@param xB indicates the initial spot.',\n      '@param xB refers to the first point.'\n    ]\n  }\n]"