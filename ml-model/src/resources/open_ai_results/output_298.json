"output=[\n  {\n    'tag': '@param targetVertex ending vertex of the path',\n    'alternatives': [\n      '@param targetVertex final vertex of the path',\n      '@param targetVertex vertex where the path ends',\n      '@param targetVertex vertex at the end of the path',\n      '@param targetVertex vertex that represents the path\\'s endpoint',\n      '@param targetVertex last vertex in the path'\n    ]\n  },\n  {\n    'tag': '@param pathLength length of the path',\n    'alternatives': [\n      '@param pathLength size of the path',\n      '@param pathLength total distance of the path',\n      '@param pathLength measurement of the path',\n      '@param pathLength extent of the path',\n      '@param pathLength distance covered by the path'\n    ]\n  },\n  {\n    'tag': '@return the shortest path from startVertex to endVertex',\n    'alternatives': [\n      '@return the most efficient path starting from startVertex up to endVertex',\n      '@return the minimum path between startVertex and endVertex',\n      '@return the quickest route from startVertex to endVertex',\n      '@return the shortest possible path connecting startVertex and endVertex',\n      '@return the path with the smallest length from startVertex to endVertex'\n    ]\n  },\n  {\n    'tag': '@param currentNode node',\n    'alternatives': [\n      '@param currentNode current node',\n      '@param currentNode present node',\n      '@param currentNode node currently being analyzed',\n      '@param currentNode node under consideration',\n      '@param currentNode node in the current iteration'\n    ]\n  },\n  {\n    'tag': '@return List of edges/arcs that constitutes the path',\n    'alternatives': [\n      '@return List of edges/arcs forming the path',\n      '@return collection of edges/arcs that make up the path',\n      '@return set of edges/arcs that compose the path',\n      '@return list of edges/arcs that construct the path',\n      '@return array of edges/arcs that make the path'\n    ]\n  },\n  {\n    'tag': '@return number of expanded nodes',\n    'alternatives': [\n      '@return count of expanded nodes',\n      '@return quantity of nodes that have been expanded',\n      '@return total number of nodes that were expanded',\n      '@return number of nodes that underwent expansion',\n      '@return amount of nodes that have been expanded'\n    ]\n  },\n  {\n    'tag': '@param source source vertex',\n    'alternatives': [\n      '@param source starting vertex',\n      '@param source origin vertex',\n      '@param source initial vertex',\n      '@param source vertex where the path begins',\n      '@param source vertex from which the path starts'\n    ]\n  },\n  {\n    'tag': '@param sink sink vertex',\n    'alternatives': [\n      '@param sink ending vertex',\n      '@param sink destination vertex',\n      '@param sink final vertex',\n      '@param sink vertex where the path ends',\n      '@param sink vertex where the path terminates'\n    ]\n  },\n  {\n    'tag': '@return maximum flow value',\n    'alternatives': [\n      '@return value of the maximum flow',\n      '@return highest flow value',\n      '@return maximum flow amount',\n      '@return maximum possible flow',\n      '@return greatest flow value'\n    ]\n  },\n  {\n    'tag': '@return <i>read-only</i> mapping from edges to doubles - flow values',\n    'alternatives': [\n      '@return mapping from edges to doubles - flow values (read-only)',\n      '@return read-only map of edges to doubles - flow values',\n      '@return mapping from edges to doubles - flow values that cannot be modified',\n      '@return flow values expressed as a read-only mapping from edges to doubles',\n      '@return immutable mapping from edges to doubles representing flow values'\n    ]\n  },\n  {\n    'tag': '@return current source',\n    'alternatives': [\n      '@return present source',\n      '@return current origin',\n      '@return source vertex in the current context',\n      '@return source that is currently considered',\n      '@return source vertex in the present state'\n    ]\n  },\n  {\n    'tag': '@return current sink',\n    'alternatives': [\n      '@return present sink',\n      '@return current destination',\n      '@return sink vertex in the current context',\n      '@return sink that is currently considered',\n      '@return destination vertex in the present state'\n    ]\n  },\n  {\n    'tag': '@param network network, where maximum flow will be calculated',\n    'alternatives': [\n      '@param network graph where maximum flow will be computed',\n      '@param network graph used for maximum flow calculation',\n      '@param network structure on which maximum flow is determined',\n      '@param network graph in which maximum flow will be evaluated',\n      '@param network graph where maximum flow is computed'\n    ]\n  },\n  {\n    'tag': '@param network network, where maximum flow will be calculated',\n    'alternatives': [\n      '@param network graph where maximum flow will be computed',\n      '@param network graph used for maximum flow calculation',\n      '@param network structure on which maximum flow is determined',\n      '@param network graph in which maximum flow will be evaluated',\n      '@param network graph where maximum flow is computed'\n    ]\n  },\n  {\n    'tag': '@param epsilon tolerance for comparing doubles',\n    'alternatives': [\n      '@param epsilon acceptable error margin when comparing doubles',\n      '@param epsilon precision level for double comparison',\n      '@param epsilon threshold value for double comparisons',\n      '@param epsilon range within which doubles are considered equal',\n      '@param epsilon sensitivity for comparing doubles'\n    ]\n  },\n  {\n    'tag': '@return .',\n    'alternatives': [\n      '@return result.',\n      '@return output.',\n      '@return response.',\n      '@return outcome.',\n      '@return conclusion.'\n    ]\n  },\n  {\n    'tag': '@param candidatePrevPathElement ',\n    'alternatives': [\n      '@param candidatePrevPathElement possible previous path element',\n      '@param candidatePrevPathElement potential previous element in the path',\n      '@param candidatePrevPathElement element that could be previous in the path',\n      '@param candidatePrevPathElement candidate for the previous path element',\n      '@param candidatePrevPathElement contender for the previous element in the path'\n    ]\n  },\n  {\n    'tag': '@param candidateEdge ',\n    'alternatives': [\n      '@param candidateEdge potential edge',\n      '@param candidateEdge possible arc',\n      '@param candidateEdge edge under consideration',\n      '@param candidateEdge edge being evaluated',\n      '@param candidateEdge edge being tested'\n    ]\n  },\n  {\n    'tag': '@param candidateCost ',\n    'alternatives': [\n      '@param candidateCost potential cost',\n      '@param candidateCost possible expense',\n      '@param candidateCost cost under consideration',\n      '@param candidateCost cost being evaluated',\n      '@param candidateCost cost being tested'\n    ]\n  },\n  {\n    'tag': '@return .',\n    'alternatives': [\n      '@return result.',\n      '@return output.',\n      '@return response.',\n      '@return outcome.',\n      '@return conclusion.'\n    ]\n  },\n  {\n    'tag': '@param pathElement ',\n    'alternatives': [\n      '@param pathElement element of the path',\n      '@param pathElement piece in the path',\n      '@param pathElement part of the route',\n      '@param pathElement segment of the path',\n      '@param pathElement component of the path'\n    ]\n  },\n  {\n    'tag': '@param edge edge reaching the end vertex of the path element created.',\n    'alternatives': [\n      '@param edge edge that leads to the endpoint of the newly created path element.',\n      '@param edge edge connecting to the end vertex of the created path element.',\n      '@param edge edge extending to the final vertex of the generated path element.',\n      '@param edge edge that reaches the termination point of the constructed path element.',\n      '@param edge edge that goes to the last vertex of the newly formed path element.'\n    ]\n  },\n  {\n    'tag': '@param cost total cost of the created path element.',\n    'alternatives': [\n      '@param cost overall cost of the produced path element.',\n      '@param cost sum of expenses for the generated path element.',\n      '@param cost entire expenditure of the created path element.',\n      '@param cost complete cost of the constructed path element.',\n      '@param cost total spending for the newly formed path element.'\n    ]\n  },\n  {\n    'tag': '@param epsilon tolerance factor.',\n    'alternatives': [\n      '@param epsilon factor of tolerance.',\n      '@param epsilon level of acceptable error.',\n      '@param epsilon multiplication factor for tolerance.',\n      '@param epsilon coefficient for acceptable deviation.',\n      '@param epsilon scale for the tolerance factor.'\n    ]\n  },\n  {\n    'tag': '@param original source to copy from',\n    'alternatives': [\n      '@param original source to duplicate',\n      '@param original source from which to replicate',\n      '@param original source to make a copy of',\n      '@param original source from which to create a copy',\n      '@param original source to be cloned'\n    ]\n  }\n]"