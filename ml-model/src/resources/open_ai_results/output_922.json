"[\n  {\n    'tag': '@return the value which was previously associated with the key, which may\\n    be {@code null}, or {@code null} if there was no previous entry',\n    'alternatives': [\n      '@return the previously associated value with the key, which might be {@code null}, or {@code null} if no previous entry was found',\n      '@return the value that was previously linked to the key, which could be {@code null}, or {@code null} if there was no prior entry',\n      '@return the value that was associated with the key before, it can be {@code null}, or {@code null} if there was no previous entry',\n      '@return the value previously associated with the key, which may be {@code null}, or {@code null} if no prior entry exists',\n      '@return the value that was previously associated with the key, which might be {@code null}, or {@code null} if there was no previous entry'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if an attempt to {@code put} any\\n    entry fails. Note that some map entries may have been added to the\\n    bimap before the exception was thrown.',\n    'alternatives': [\n      '@throws IllegalArgumentException if an effort to {@code put} any\\n    entry fails. Keep in mind that some map entries might have been inserted into the\\n    bimap before the exception was raised.',\n      '@throws IllegalArgumentException if trying to {@code put} any\\n    entry fails. Take into account that some map entries could have been added to the\\n    bimap before throwing the exception.',\n      '@throws IllegalArgumentException if an attempt to {@code put} any\\n    entry fails. Remember that some map entries may have been added to the\\n    bimap before the exception was raised.',\n      '@throws IllegalArgumentException if any attempt to {@code put} an\\n    entry fails. Note that some map entries might have been added to the\\n    bimap before the exception was thrown.',\n      '@throws IllegalArgumentException if trying to {@code put} any\\n    entry fails. Also, bear in mind that some map entries may have been added to the\\n    bimap prior to the exception being thrown.'\n    ]\n  },\n  {\n    'tag': '@return the inverse view of this bimap',\n    'alternatives': [\n      '@return the opposite view of this bimap',\n      '@return the view that represents the inverse of this bimap',\n      '@return the bimap seen from the other side',\n      '@return the view that shows the inverse of this bimap',\n      '@return the bimap with keys and values swapped'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if any element is null',\n    'alternatives': [\n      '@throws NullPointerException if any item is null',\n      '@throws NullPointerException if any element is {@code null}',\n      '@throws NullPointerException if any of the elements is null',\n      '@throws NullPointerException if any element has a null value',\n      '@throws NullPointerException if any element is undefined'\n    ]\n  },\n  {\n    'tag': '@throws ClassCastException if the elements are not mutually comparable',\n    'alternatives': [\n      '@throws ClassCastException if the elements cannot be compared to each other',\n      '@throws ClassCastException if the elements lack mutual comparability',\n      '@throws ClassCastException if the elements are not comparably related',\n      '@throws ClassCastException if the elements do not have a mutual comparison',\n      '@throws ClassCastException if the elements are not mutually comparable to one another'\n    ]\n  },\n  {\n    'tag': \"@return {@code true} if the method increased the size of the multimap, or\\n    {@code false} if the multimap already contained the key-value pair and\\n    doesn't allow duplicates\",\n    'alternatives': [\n      \"@return {@code true} if the method enlarged the size of the multimap, or\\n    {@code false} if the multimap already had the key-value pair and\\n    does not permit duplicates\",\n      \"@return {@code true} if the operation expanded the size of the multimap, or\\n    {@code false} if the multimap already had the key-value pair and\\n    does not support duplicates\",\n      \"@return {@code true} if the method increased the multimap's size, or\\n    {@code false} if the multimap already had the key-value pair and\\n    does not accept duplicates\",\n      \"@return {@code true} if the procedure added to the size of the multimap, or\\n    {@code false} if the multimap already contained the key-value pair and\\n    does not allow duplicates\",\n      \"@return {@code true} if the operation caused the multimap's size to grow, or\\n    {@code false} if the multimap already consisted of the key-value pair and\\n    does not permit duplicates\"\n    ]\n  },\n  {\n    'tag': '@return {@code true} if the multimap changed',\n    'alternatives': [\n      '@return {@code true} if the multimap was modified',\n      '@return {@code true} if the multimap has changed',\n      '@return {@code true} if the multimap underwent changes',\n      '@return {@code true} if modifications were made to the multimap',\n      '@return {@code true} if the multimap experienced alterations'\n    ]\n  },\n  {\n    'tag': '@return the collection of replaced values, or an empty collection if no\\n    values were previously associated with the key. The collection\\n    <i>may</i> be modifiable, but updating it will have no effect on the\\n    multimap.',\n    'alternatives': [\n      '@return the set of substituted values, or an empty collection if no\\n    values were previously linked to the key. The collection\\n    <i>may</i> be mutable, but making changes will not impact the\\n    multimap.',\n      '@return the group of values that were replaced, or an empty collection if there\\n    were no prior values associated with the key. The collection\\n    <i>may</i> be modified, but any updates will not affect the\\n    multimap.',\n      '@return the series of values that were substituted, or an empty collection if no\\n    values were previously associated with the key. The collection\\n    <i>may</i> be changeable, but editing it will not have any effect on the\\n    multimap.',\n      '@return the assortment of values that were exchanged, or an empty collection if\\n    there were no prior values linked to the key. The collection\\n    <i>may</i> be alterable, but any changes will not influence the\\n    multimap.',\n      '@return the collection of values that were replaced, or an empty collection if\\n    there were no previous values associated with the key. The collection\\n    <i>may</i> be modifiable, but updating it will not affect the\\n    multimap.'\n    ]\n  },\n  {\n    'tag': '@return the values that were removed (possibly empty). The returned\\n    collection <i>may</i> be modifiable, but updating it will have no\\n    effect on the multimap.',\n    'alternatives': [\n      '@return the removed values (possibly empty). The returned collection\\n    <i>may</i> be mutable, but modifying it will not alter the\\n    multimap.',\n      '@return the values that were deleted (possibly empty). The collection returned\\n    <i>may</i> be changeable, but any updates will not affect the\\n    multimap.',\n      '@return the values that were eliminated (possibly empty). The collection\\n    returned <i>may</i> be alterable, but editing it will not have any effect on the\\n    multimap.',\n      '@return the values that were taken out (possibly empty). The collection returned\\n    <i>may</i> be modifiable, but any changes will not influence the\\n    multimap.',\n      '@return the values which have been removed (possibly empty). The returned\\n    collection <i>may</i> be modifiable but altering it will not affect the\\n    multimap.'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if any element is null',\n    'alternatives': [\n      '@throws NullPointerException if any item is null',\n      '@throws NullPointerException if any element is {@code null}',\n      '@throws NullPointerException if any of the elements is null',\n      '@throws NullPointerException if any element has a null value',\n      '@throws NullPointerException if any element is undefined'\n    ]\n  },\n  {\n    'tag': '@throws ClassCastException if the elements are not mutually comparable',\n    'alternatives': [\n      '@throws ClassCastException if the elements cannot be compared to each other',\n      '@throws ClassCastException if the elements lack mutual comparability',\n      '@throws ClassCastException if the elements are not comparably related',\n      '@throws ClassCastException if the elements do not have a mutual comparison',\n      '@throws ClassCastException if the elements are not mutually comparable to one another'\n    ]\n  },\n  {\n    'tag': '@throws ClassCastException if the elements are not mutually comparable',\n    'alternatives': [\n      '@throws ClassCastException if the elements cannot be compared to each other',\n      '@throws ClassCastException if the elements lack mutual comparability',\n      '@throws ClassCastException if the elements are not comparably related',\n      '@throws ClassCastException if the elements do not have a mutual comparison',\n      '@throws ClassCastException if the elements are not mutually comparable to one another'\n    ]\n  },\n  {\n    'tag': '@throws ClassCastException if the elements are not mutually comparable',\n    'alternatives': [\n      '@throws ClassCastException if the elements cannot be compared to each other',\n      '@throws ClassCastException if the elements lack mutual comparability',\n      '@throws ClassCastException if the elements are not comparably related',\n      '@throws ClassCastException if the elements do not have a mutual comparison',\n      '@throws ClassCastException if the elements are not mutually comparable to one another'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if any element is null',\n    'alternatives': [\n      '@throws NullPointerException if any item is null',\n      '@throws NullPointerException if any element is {@code null}',\n      '@throws NullPointerException if any of the elements is null',\n      '@throws NullPointerException if any element has a null value',\n      '@throws NullPointerException if any element is undefined'\n    ]\n  }\n]"