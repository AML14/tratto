"[\n  {\n    'tag': '@param scanUntilRemovable scan until a removeable entry is found, default false',\n    'alternatives': [\n      '@param scanUntilRemovable scan until a removable item is discovered, default false',\n      '@param scanUntilRemovable scan until a removable entry is encountered, default false',\n      '@param scanUntilRemovable scan until a removable element is detected, default false',\n      '@param scanUntilRemovable scan until a removable item is located, default false',\n      '@param scanUntilRemovable scan until a removable entry is identified, default false'\n    ]\n  },\n  {\n    'tag': '@param maxSize the maximum size of the map',\n    'alternatives': [\n      '@param maxSize the map\\'s maximum size',\n      '@param maxSize the maximum size the map can reach',\n      '@param maxSize the largest size the map can have',\n      '@param maxSize the maximum size allowed for the map',\n      '@param maxSize the maximum capacity of the map'\n    ]\n  },\n  {\n    'tag': '@param loadFactor the load factor',\n    'alternatives': [\n      '@param loadFactor the scaling factor',\n      '@param loadFactor the factor by which the capacity is multiplied',\n      '@param loadFactor the proportion of capacity before resizing',\n      '@param loadFactor the ratio determining resizing',\n      '@param loadFactor the factor influencing capacity adjustment'\n    ]\n  },\n  {\n    'tag': '@param initialSize the initial size of the map',\n    'alternatives': [\n      '@param initialSize the map\\'s initial size',\n      '@param initialSize the size the map starts with',\n      '@param initialSize the initially allocated size of the map',\n      '@param initialSize the map\\'s starting capacity',\n      '@param initialSize the size of the map at the beginning'\n    ]\n  },\n  {\n    'tag': '@param map the map to copy',\n    'alternatives': [\n      '@param map the map to duplicate',\n      '@param map the map to replicate',\n      '@param map the map to clone',\n      '@param map the map to mirror',\n      '@param map the map to create a copy of'\n    ]\n  },\n  {\n    'tag': '@param keyType the type of reference to use for keys;\\n  must be {@link AbstractReferenceMap.ReferenceStrength#HARD HARD},\\n  {@link AbstractReferenceMap.ReferenceStrength#SOFT SOFT},\\n  {@link AbstractReferenceMap.ReferenceStrength#WEAK WEAK}',\n    'alternatives': [\n      '@param keyType the reference type for keys;\\n  must be {@link AbstractReferenceMap.ReferenceStrength#HARD HARD},\\n  {@link AbstractReferenceMap.ReferenceStrength#SOFT SOFT},\\n  {@link AbstractReferenceMap.ReferenceStrength#WEAK WEAK}',\n      '@param keyType the reference strength for keys;\\n  must be {@link AbstractReferenceMap.ReferenceStrength#HARD HARD},\\n  {@link AbstractReferenceMap.ReferenceStrength#SOFT SOFT},\\n  {@link AbstractReferenceMap.ReferenceStrength#WEAK WEAK}',\n      '@param keyType the reference class for keys;\\n  must be {@link AbstractReferenceMap.ReferenceStrength#HARD HARD},\\n  {@link AbstractReferenceMap.ReferenceStrength#SOFT SOFT},\\n  {@link AbstractReferenceMap.ReferenceStrength#WEAK WEAK}',\n      '@param keyType the reference level for keys;\\n  must be {@link AbstractReferenceMap.ReferenceStrength#HARD HARD},\\n  {@link AbstractReferenceMap.ReferenceStrength#SOFT SOFT},\\n  {@link AbstractReferenceMap.ReferenceStrength#WEAK WEAK}',\n      '@param keyType the reference strategy for keys;\\n  must be {@link AbstractReferenceMap.ReferenceStrength#HARD HARD},\\n  {@link AbstractReferenceMap.ReferenceStrength#SOFT SOFT},\\n  {@link AbstractReferenceMap.ReferenceStrength#WEAK WEAK}'\n    ]\n  },\n  {\n    'tag': '@param valueType the type of reference to use for values;\\n  must be {@link AbstractReferenceMap.ReferenceStrength#HARD HARD},\\n  {@link AbstractReferenceMap.ReferenceStrength#SOFT SOFT},\\n  {@link AbstractReferenceMap.ReferenceStrength#WEAK WEAK}',\n    'alternatives': [\n      '@param valueType the reference type for values;\\n  must be {@link AbstractReferenceMap.ReferenceStrength#HARD HARD},\\n  {@link AbstractReferenceMap.ReferenceStrength#SOFT SOFT},\\n  {@link AbstractReferenceMap.ReferenceStrength#WEAK WEAK}',\n      '@param valueType the reference strength for values;\\n  must be {@link AbstractReferenceMap.ReferenceStrength#HARD HARD},\\n  {@link AbstractReferenceMap.ReferenceStrength#SOFT SOFT},\\n  {@link AbstractReferenceMap.ReferenceStrength#WEAK WEAK}',\n      '@param valueType the reference class for values;\\n  must be {@link AbstractReferenceMap.ReferenceStrength#HARD HARD},\\n  {@link AbstractReferenceMap.ReferenceStrength#SOFT SOFT},\\n  {@link AbstractReferenceMap.ReferenceStrength#WEAK WEAK}',\n      '@param valueType the reference level for values;\\n  must be {@link AbstractReferenceMap.ReferenceStrength#HARD HARD},\\n  {@link AbstractReferenceMap.ReferenceStrength#SOFT SOFT},\\n  {@link AbstractReferenceMap.ReferenceStrength#WEAK WEAK}',\n      '@param valueType the reference strategy for values;\\n  must be {@link AbstractReferenceMap.ReferenceStrength#HARD HARD},\\n  {@link AbstractReferenceMap.ReferenceStrength#SOFT SOFT},\\n  {@link AbstractReferenceMap.ReferenceStrength#WEAK WEAK}'\n    ]\n  },\n  {\n    'tag': '@param purgeValues should the value be automatically purged when the\\n  key is garbage collected',\n    'alternatives': [\n      '@param purgeValues should the value be removed automatically when the\\n  key is garbage collected',\n      '@param purgeValues should the value be discarded when the\\n  key is garbage collected',\n      '@param purgeValues should the value be deleted when the\\n  key is garbage collected',\n      '@param purgeValues should the value be wiped out when the\\n  key is garbage collected',\n      '@param purgeValues should the value be cleared when the\\n  key is garbage collected'\n    ]\n  },\n  {\n    'tag': '@param capacity the initial capacity for the map',\n    'alternatives': [\n      '@param capacity the map\\'s initial capacity',\n      '@param capacity the size the map starts with',\n      '@param capacity the capacity the map begins with',\n      '@param capacity the initially allocated capacity of the map',\n      '@param capacity the capacity of the map at the beginning'\n    ]\n  },\n  {\n    'tag': '@param loadFactor the load factor for the map',\n    'alternatives': [\n      '@param loadFactor the scaling factor for the map',\n      '@param loadFactor the factor for resizing the map',\n      '@param loadFactor the proportion of capacity before resizing the map',\n      '@param loadFactor the ratio for adjusting the map\\'s capacity',\n      '@param loadFactor the factor influencing the map\\'s capacity adjustment'\n    ]\n  }\n]"