"[\n  {\n    'tag': '@throws IllegalArgumentException if {@code array} is empty',\n    'alternatives': [\n      '@throws IllegalArgumentException if the {@code array} is empty',\n      '@throws IllegalArgumentException when the {@code array} is empty',\n      '@throws IllegalArgumentException if the array is empty',\n      '@throws IllegalArgumentException in case the {@code array} is empty',\n      '@throws IllegalArgumentException if the array is not populated'\n    ]\n  },\n  {\n    'tag': '@param array a <i>nonempty</i> array of {@code long} values',\n    'alternatives': [\n      '@param array a <i>nonempty</i> array containing {@code long} values',\n      '@param array a <i>nonempty</i> collection of {@code long} values',\n      '@param array a <i>nonempty</i> array consisting of {@code long} values',\n      '@param array a <i>nonempty</i> array that holds {@code long} values',\n      '@param array a <i>nonempty</i> array containing values of type {@code long}'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if {@code minLength} or {@code padding} is\\n    negative',\n    'alternatives': [\n      '@throws IllegalArgumentException in case {@code minLength} or {@code padding} is negative',\n      '@throws IllegalArgumentException if either {@code minLength} or {@code padding} is negative',\n      '@throws IllegalArgumentException if the value of {@code minLength} or {@code padding} is negative',\n      '@throws IllegalArgumentException if negative values are provided for either {@code minLength} or {@code padding}',\n      '@throws IllegalArgumentException if either {@code minLength} or {@code padding} has a negative value'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if {@code collection} or any of its elements\\n    is null',\n    'alternatives': [\n      '@throws NullPointerException when {@code collection} or any of its elements is null',\n      '@throws NullPointerException in case {@code collection} or any of its elements are null',\n      '@throws NullPointerException if {@code collection} or any elements in it are null',\n      '@throws NullPointerException if null is passed as the {@code collection} or any of its elements',\n      '@throws NullPointerException if either {@code collection} or any of its elements is null'\n    ]\n  },\n  {\n    'tag': '@param array a <i>nonempty</i> array of unsigned {@code long} values',\n    'alternatives': [\n      '@param array a <i>nonempty</i> array consisting of unsigned {@code long} values',\n      '@param array a <i>nonempty</i> collection of unsigned {@code long} values',\n      '@param array a <i>nonempty</i> array containing unsigned {@code long} values',\n      '@param array a <i>nonempty</i> array of values that are unsigned {@code long}',\n      '@param array a <i>nonempty</i> array with {@code long} values that are unsigned'\n    ]\n  },\n  {\n    'tag': '@throws ArithmeticException if divisor is 0',\n    'alternatives': [\n      '@throws ArithmeticException if the divisor is 0',\n      '@throws ArithmeticException when the divisor is 0',\n      '@throws ArithmeticException in case the divisor equals 0',\n      '@throws ArithmeticException if a value of 0 is encountered as the divisor',\n      '@throws ArithmeticException in the event of the divisor being 0'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if {@code s} is null\\n        (in contrast to {@link Long#parseLong(String)})',\n    'alternatives': [\n      '@throws NullPointerException when {@code s} is null\\n        (opposite of {@link Long#parseLong(String)})',\n      '@throws NullPointerException in case {@code s} is null\\n        (unlike {@link Long#parseLong(String)})',\n      '@throws NullPointerException if {@code s} is null\\n        (not like {@link Long#parseLong(String)})',\n      '@throws NullPointerException if {@code s} is null\\n        (opposite to {@link Long#parseLong(String)})',\n      '@throws NullPointerException when {@code s} is null\\n        (not the same as {@link Long#parseLong(String)})'\n    ]\n  },\n  {\n    'tag': '@param plusForSpace true if ASCII space should be escaped to {@code +}\\n       rather than {@code %20}',\n    'alternatives': [\n      '@param plusForSpace true if ASCII space should be replaced by {@code +}\\n       instead of {@code %20}',\n      '@param plusForSpace true to escape ASCII space with {@code +}\\n       rather than {@code %20}',\n      '@param plusForSpace true when ASCII space should be transformed into {@code +}\\n       instead of {@code %20}',\n      '@param plusForSpace true in case ASCII space should be converted to {@code +}\\n       and not {@code %20}',\n      '@param plusForSpace true if you want to escape ASCII space with {@code +}\\n       instead of {@code %20}'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if {@code expectedSize} is negative',\n    'alternatives': [\n      '@throws IllegalArgumentException in case {@code expectedSize} is negative',\n      '@throws IllegalArgumentException if {@code expectedSize} has a negative value',\n      '@throws IllegalArgumentException when a negative value is provided for {@code expectedSize}',\n      '@throws IllegalArgumentException if negative is specified for {@code expectedSize}',\n      '@throws IllegalArgumentException if the value of {@code expectedSize} is negative'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if any element of {@code keys} is\\n    {@code null}, or if {@code valueFunction} produces {@code null}\\n    for any key',\n    'alternatives': [\n      '@throws NullPointerException when any element of {@code keys} is\\n    {@code null}, or if {@code valueFunction} generates {@code null}\\n    for any key',\n      '@throws NullPointerException if any element in {@code keys} is\\n    {@code null}, or if the {@code valueFunction} results in {@code null}\\n    for any key',\n      '@throws NullPointerException in case any element of {@code keys} is\\n    {@code null}, or if {@code valueFunction} yields {@code null}\\n    for any key',\n      '@throws NullPointerException if {@code null} is found in any element of {@code keys}, or if {@code valueFunction} returns {@code null}\\n    for any key',\n      '@throws NullPointerException if an element of {@code keys} is\\n    {@code null}, or if {@code valueFunction} generates {@code null}\\n    for any key'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if any elements of {@code values} is null, or\\n        if {@code keyFunction} produces {@code null} for any value',\n    'alternatives': [\n      '@throws NullPointerException when any elements of {@code values} is null, or\\n        if {@code keyFunction} generates {@code null} for any value',\n      '@throws NullPointerException in case any elements of {@code values} are null, or\\n        if {@code keyFunction} yields {@code null} for any value',\n      '@throws NullPointerException if any value in {@code values} is null, or\\n        if {@code keyFunction} returns {@code null} for any value',\n      '@throws NullPointerException if {@code values} contains null, or\\n        if {@code keyFunction} produces {@code null} for any value',\n      '@throws NullPointerException if an element of {@code values} is null, or\\n        if {@code keyFunction} generates {@code null} for any value'\n    ]\n  },\n  {\n    'tag': '@return {@code true} if {@code c} contains {@code o}',\n    'alternatives': [\n      '@return {@code true} if {@code c} holds {@code o}',\n      '@return {@code true} when {@code c} includes {@code o}',\n      '@return {@code true} in case {@code c} contains {@code o}',\n      '@return {@code true} if {@code c} has {@code o}',\n      '@return {@code true} if {@code c} contains the item {@code o}'\n    ]\n  },\n  {\n    'tag': '@param array a <i>nonempty</i> array of {@code short} values',\n    'alternatives': [\n      '@param array a <i>nonempty</i> array consisting of {@code short} values',\n      '@param array a <i>nonempty</i> collection of {@code short} values',\n      '@param array a <i>nonempty</i> array containing {@code short} values',\n      '@param array a <i>nonempty</i> array that holds {@code short} values',\n      '@param array a <i>nonempty</i> array with values of type {@code short}'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if {@code array} is empty',\n    'alternatives': [\n      '@throws IllegalArgumentException if the {@code array} is empty',\n      '@throws IllegalArgumentException when the {@code array} is empty',\n      '@throws IllegalArgumentException if the array is empty',\n      '@throws IllegalArgumentException in case the {@code array} is empty',\n      '@throws IllegalArgumentException if the array is not populated'\n    ]\n  }\n]"