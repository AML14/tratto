"[\n  {\n    'tag': '@param multiset the multiset to decorate, must not be null',\n    'alternatives': [\n      '@param multiset the decorated multiset, must not be null',\n      '@param multiset the multiset to enhance, must not be null',\n      '@param multiset the multiset to adorn, must not be null',\n      '@param multiset the multiset to embellish, must not be null',\n      '@param multiset the multiset to beautify, must not be null'\n    ]\n  },\n  {\n    'tag': '@param predicate the predicate to use for validation, must not be null',\n    'alternatives': [\n      '@param predicate the validation predicate, must not be null',\n      '@param predicate the predicate for validation, must not be null',\n      '@param predicate the validating function, must not be null',\n      '@param predicate the condition for validation, must not be null',\n      '@param predicate the assertion to check, must not be null'\n    ]\n  },\n  {\n    'tag': '@param transformer the transformer to call, not null',\n    'alternatives': [\n      '@param transformer the invoked transformer, not null',\n      '@param transformer the function to invoke, not null',\n      '@param transformer the mapping function, not null',\n      '@param transformer the converter to use, not null',\n      '@param transformer the operation to perform, not null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if bag or predicate is null',\n    'alternatives': [\n      '@throws NullPointerException when bag or predicate is null',\n      '@throws NullPointerException in case bag or predicate is null',\n      '@throws NullPointerException if bag or predicate are null',\n      '@throws NullPointerException when bag or predicate are null',\n      '@throws NullPointerException in the event of bag or predicate being null'\n    ]\n  },\n  {\n    'tag': '@param bag the bag to decorate, must not be null',\n    'alternatives': [\n      '@param bag the decorated bag, must not be null',\n      '@param bag the bag to enhance, must not be null',\n      '@param bag the bag to adorn, must not be null',\n      '@param bag the bag to embellish, must not be null',\n      '@param bag the bag to beautify, must not be null'\n    ]\n  },\n  {\n    'tag': '@param predicate the predicate to use for validation, must not be null',\n    'alternatives': [\n      '@param predicate the validation predicate, must not be null',\n      '@param predicate the predicate for validation, must not be null',\n      '@param predicate the validating function, must not be null',\n      '@param predicate the condition for validation, must not be null',\n      '@param predicate the assertion to check, must not be null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if bag or predicate is null',\n    'alternatives': [\n      '@throws NullPointerException when bag or predicate is null',\n      '@throws NullPointerException in case bag or predicate is null',\n      '@throws NullPointerException if bag or predicate are null',\n      '@throws NullPointerException when bag or predicate are null',\n      '@throws NullPointerException in the event of bag or predicate being null'\n    ]\n  },\n  {\n    'tag': '@param bag the bag to decorate, must not be null',\n    'alternatives': [\n      '@param bag the decorated bag, must not be null',\n      '@param bag the bag to enhance, must not be null',\n      '@param bag the bag to adorn, must not be null',\n      '@param bag the bag to embellish, must not be null',\n      '@param bag the bag to beautify, must not be null'\n    ]\n  },\n  {\n    'tag': '@param predicate the predicate to use for validation, must not be null',\n    'alternatives': [\n      '@param predicate the validation predicate, must not be null',\n      '@param predicate the predicate for validation, must not be null',\n      '@param predicate the validating function, must not be null',\n      '@param predicate the condition for validation, must not be null',\n      '@param predicate the assertion to check, must not be null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if the underlying enumeration is null',\n    'alternatives': [\n      '@throws NullPointerException when the underlying enumeration is null',\n      '@throws NullPointerException in case the underlying enumeration is null',\n      '@throws NullPointerException if the underlying enumeration is null',\n      '@throws NullPointerException when the underlying enumeration becomes null',\n      '@throws NullPointerException if the underlying enumeration becomes null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if the enumeration is null',\n    'alternatives': [\n      '@throws NullPointerException when the enumeration is null',\n      '@throws NullPointerException in case the enumeration is null',\n      '@throws NullPointerException if the enumeration is null',\n      '@throws NullPointerException when the enumeration becomes null',\n      '@throws NullPointerException if the enumeration becomes null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if the predicate is null',\n    'alternatives': [\n      '@throws NullPointerException when the predicate is null',\n      '@throws NullPointerException in case the predicate is null',\n      '@throws NullPointerException if the predicate is null',\n      '@throws NullPointerException when the predicate becomes null',\n      '@throws NullPointerException if the predicate becomes null'\n    ]\n  },\n  {\n    'tag': '@param predicate the predicate to decorate, not null',\n    'alternatives': [\n      '@param predicate the decorated predicate, not null',\n      '@param predicate the predicate to enhance, not null',\n      '@param predicate the predicate to adorn, not null',\n      '@param predicate the predicate to embellish, not null',\n      '@param predicate the predicate to beautify, not null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if bag is null',\n    'alternatives': [\n      '@throws NullPointerException when bag is null',\n      '@throws NullPointerException in case bag is null',\n      '@throws NullPointerException if bag is null',\n      '@throws NullPointerException when bag becomes null',\n      '@throws NullPointerException if bag becomes null'\n    ]\n  },\n  {\n    'tag': '@param bag the bag to decorate, must not be null',\n    'alternatives': [\n      '@param bag the decorated bag, must not be null',\n      '@param bag the bag to enhance, must not be null',\n      '@param bag the bag to adorn, must not be null',\n      '@param bag the bag to embellish, must not be null',\n      '@param bag the bag to beautify, must not be null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if bag or lock is null',\n    'alternatives': [\n      '@throws NullPointerException when bag or lock is null',\n      '@throws NullPointerException in case bag or lock is null',\n      '@throws NullPointerException if bag or lock are null',\n      '@throws NullPointerException when bag or lock are null',\n      '@throws NullPointerException in the event of bag or lock being null'\n    ]\n  },\n  {\n    'tag': '@param bag the bag to decorate, must not be null',\n    'alternatives': [\n      '@param bag the decorated bag, must not be null',\n      '@param bag the bag to enhance, must not be null',\n      '@param bag the bag to adorn, must not be null',\n      '@param bag the bag to embellish, must not be null',\n      '@param bag the bag to beautify, must not be null'\n    ]\n  },\n  {\n    'tag': '@param lock the lock to use, must not be null',\n    'alternatives': [\n      '@param lock the used lock, must not be null',\n      '@param lock the lock to utilize, must not be null',\n      '@param lock the lock to apply, must not be null',\n      '@param lock the lock to employ, must not be null',\n      '@param lock the lock to utilize, must not be null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if bag is null',\n    'alternatives': [\n      '@throws NullPointerException when bag is null',\n      '@throws NullPointerException in case bag is null',\n      '@throws NullPointerException if bag is null',\n      '@throws NullPointerException when bag becomes null',\n      '@throws NullPointerException if bag becomes null'\n    ]\n  },\n  {\n    'tag': '@param bag the bag to decorate, must not be null',\n    'alternatives': [\n      '@param bag the decorated bag, must not be null',\n      '@param bag the bag to enhance, must not be null',\n      '@param bag the bag to adorn, must not be null',\n      '@param bag the bag to embellish, must not be null',\n      '@param bag the bag to beautify, must not be null'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if the size is &lt; 1',\n    'alternatives': [\n      '@throws IllegalArgumentException when the size is &lt; 1',\n      '@throws IllegalArgumentException in case the size is &lt; 1',\n      '@throws IllegalArgumentException if the size is less than 1',\n      '@throws IllegalArgumentException when the size is less than 1',\n      '@throws IllegalArgumentException if the size is smaller than 1'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if the collection is null',\n    'alternatives': [\n      '@throws NullPointerException when the collection is null',\n      '@throws NullPointerException in case the collection is null',\n      '@throws NullPointerException if the collection is null',\n      '@throws NullPointerException when the collection becomes null',\n      '@throws NullPointerException if the collection becomes null'\n    ]\n  },\n  {\n    'tag': '@param coll the collection to copy into the queue, may not be null',\n    'alternatives': [\n      '@param coll the copied collection to insert into the queue, may not be null',\n      '@param coll the collection to duplicate into the queue, may not be null',\n      '@param coll the collection to replicate into the queue, may not be null',\n      '@param coll the collection to clone into the queue, may not be null',\n      '@param coll the collection to reproduce into the queue, may not be null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if the given element is null',\n    'alternatives': [\n      '@throws NullPointerException when the given element is null',\n      '@throws NullPointerException in case the given element is null',\n      '@throws NullPointerException if the given element is null',\n      '@throws NullPointerException when the given element becomes null',\n      '@throws NullPointerException if the given element becomes null'\n    ]\n  },\n  {\n    'tag': '@return true, always',\n    'alternatives': [\n      '@return always true',\n      '@return true in all cases',\n      '@return true without exception',\n      '@return true without fail',\n      '@return true every time'\n    ]\n  }\n]"