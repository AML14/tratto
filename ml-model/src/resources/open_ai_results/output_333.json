"[\n  {\n    'tag': '@return negative value if o1 &lt; o2; 0 if o1 == o2; positive\\n        value if o1 &gt; o2',\n    'alternatives': [\n      '@return the value is negative if o1 is less than o2; 0 if o1 is equal to o2;\notherwise, the value is positive if o1 is greater than o2',\n      '@return if o1 &lt; o2, the value is negative. If o1 == o2, the value is 0.\nIf o1 &gt; o2, the value is positive',\n      '@return the value is negative if o1 is less than o2. If o1 is equal to o2, the\nvalue is 0. Otherwise, the value is positive if o1 is greater than o2',\n      '@return returns a negative value if o1 is less than o2, 0 if o1 is equal to\no2, and a positive value if o1 is greater than o2',\n      '@return if o1 is less than o2, it returns a negative value. If o1 is equal to\no2, it returns 0. If o1 is greater than o2, it returns a positive value'\n    ]\n  },\n  {\n    'tag': '@param node the node from which we will start searching',\n    'alternatives': [\n      '@param node the starting node for the search',\n      '@param node the node where the search will begin',\n      '@param node the starting point for the search',\n      '@param node the node to start searching from',\n      '@param node the initial node for the search'\n    ]\n  },\n  {\n    'tag': '@param index the KEY or VALUE int',\n    'alternatives': [\n      '@param index the int value representing the KEY or VALUE',\n      '@param index the integer representing the KEY or VALUE',\n      '@param index the int value of either the KEY or VALUE',\n      '@param index the integer that represents either the KEY or VALUE',\n      '@param index the int value that represents the KEY or VALUE'\n    ]\n  },\n  {\n    'tag': '@return the smallest node, from the specified node, in the\\n        specified mapping',\n    'alternatives': [\n      '@return the smallest node in the specified mapping, starting from the specified\nnode',\n      '@return the smallest node from the specified node in the specified mapping',\n      '@return the node with the smallest value in the specified mapping, starting\nfrom the specified node',\n      '@return the smallest node in the specified mapping, starting from the specified\nnode',\n      '@return the smallest node found in the specified mapping, starting from the\nspecified node'\n    ]\n  },\n  {\n    'tag': '@param node the node from which we will start searching',\n    'alternatives': [\n      '@param node the starting node for the search',\n      '@param node the node where the search will begin',\n      '@param node the starting point for the search',\n      '@param node the node to start searching from',\n      '@param node the initial node for the search'\n    ]\n  },\n  {\n    'tag': '@param index the KEY or VALUE int',\n    'alternatives': [\n      '@param index the int value representing the KEY or VALUE',\n      '@param index the integer representing the KEY or VALUE',\n      '@param index the int value of either the KEY or VALUE',\n      '@param index the integer that represents either the KEY or VALUE',\n      '@param index the int value that represents the KEY or VALUE'\n    ]\n  },\n  {\n    'tag': '@return the greatest node, from the specified node',\n    'alternatives': [\n      '@return the node with the highest value, starting from the specified node',\n      '@return the largest node from the specified node',\n      '@return the greatest node in the path starting from the specified node',\n      '@return the node with the highest value in the path starting from the specified\nnode',\n      '@return the node with the highest value found, starting from the specified\nnode'\n    ]\n  },\n  {\n    'tag': \"@param from the node whose color we're copying; may be null\",\n    'alternatives': [\n      \"@param from the node from which we're copying the color; can be null\",\n      \"@param from the node to copy the color from; can be null\",\n      \"@param from the node that serves as the color source; may be null\",\n      \"@param from the node to take the color from; can be null\",\n      \"@param from the node whose color is being copied; may be null\"\n    ]\n  },\n  {\n    'tag': \"@param to the node whose color we're changing; may be null\",\n    'alternatives': [\n      \"@param to the node to which we're applying the color change; can be null\",\n      \"@param to the node that will have its color changed; may be null\",\n      \"@param to the node to modify the color of; can be null\",\n      \"@param to the node that will receive the color change; may be null\",\n      \"@param to the node whose color is being modified; may be null\"\n    ]\n  },\n  {\n    'tag': '@param index the KEY or VALUE int',\n    'alternatives': [\n      '@param index the int value representing the KEY or VALUE',\n      '@param index the integer representing the KEY or VALUE',\n      '@param index the int value of either the KEY or VALUE',\n      '@param index the integer that represents either the KEY or VALUE',\n      '@param index the int value that represents the KEY or VALUE'\n    ]\n  },\n  {\n    'tag': '@param node the node (may be null) in question',\n    'alternatives': [\n      '@param node the node in question (can be null)',\n      '@param node the node being queried (may be null)',\n      '@param node the node under consideration (could be null)',\n      '@param node the node being examined (possibly null)',\n      '@param node the node that is being checked (may be null)'\n    ]\n  },\n  {\n    'tag': '@param index the KEY or VALUE int',\n    'alternatives': [\n      '@param index the int value representing the KEY or VALUE',\n      '@param index the integer representing the KEY or VALUE',\n      '@param index the int value of either the KEY or VALUE',\n      '@param index the integer that represents either the KEY or VALUE',\n      '@param index the int value that represents the KEY or VALUE'\n    ]\n  },\n  {\n    'tag': '@param node the node (may be null) in question',\n    'alternatives': [\n      '@param node the node in question (can be null)',\n      '@param node the node being queried (may be null)',\n      '@param node the node under consideration (could be null)',\n      '@param node the node being examined (possibly null)',\n      '@param node the node that is being checked (may be null)'\n    ]\n  },\n  {\n    'tag': '@param index the KEY or VALUE int',\n    'alternatives': [\n      '@param index the int value representing the KEY or VALUE',\n      '@param index the integer representing the KEY or VALUE',\n      '@param index the int value of either the KEY or VALUE',\n      '@param index the integer that represents either the KEY or VALUE',\n      '@param index the int value that represents the KEY or VALUE'\n    ]\n  },\n  {\n    'tag': '@param node the node (may be null) in question',\n    'alternatives': [\n      '@param node the node in question (can be null)',\n      '@param node the node being queried (may be null)',\n      '@param node the node under consideration (could be null)',\n      '@param node the node being examined (possibly null)',\n      '@param node the node that is being checked (may be null)'\n    ]\n  },\n  {\n    'tag': '@param index the KEY or VALUE int',\n    'alternatives': [\n      '@param index the int value representing the KEY or VALUE',\n      '@param index the integer representing the KEY or VALUE',\n      '@param index the int value of either the KEY or VALUE',\n      '@param index the integer that represents either the KEY or VALUE',\n      '@param index the int value that represents the KEY or VALUE'\n    ]\n  },\n  {\n    'tag': '@throws NotANumberException if any of the probabilities are NaN.',\n    'alternatives': [\n      '@throws NotANumberException if NaN is encountered in any of the probabilities.',\n      '@throws NotANumberException if any of the probabilities are not a number (NaN).',\n      '@throws NotANumberException if any of the probabilities are NaN values.',\n      '@throws NotANumberException if any of the probabilities are not valid numbers.',\n      '@throws NotANumberException if any of the probabilities are NaN.'\n    ]\n  },\n  {\n    'tag': '@throws MathArithmeticException all of the probabilities are 0.',\n    'alternatives': [\n      '@throws MathArithmeticException if all of the probabilities are equal to 0.',\n      '@throws MathArithmeticException if all probabilities have a value of 0.',\n      '@throws MathArithmeticException if all the probabilities are 0.',\n      '@throws MathArithmeticException if all the probabilities have a value of 0.',\n      '@throws MathArithmeticException if all of the probabilities are 0.'\n    ]\n  },\n  {\n    'tag': '@param seed (ignored)',\n    'alternatives': [\n      '@param seed (not used)',\n      '@param seed (not considered)',\n      '@param seed (has no effect)',\n      '@param seed (not relevant)',\n      '@param seed (does not matter)'\n    ]\n  },\n  {\n    'tag': '@param value the constant value of this distribution',\n    'alternatives': [\n      '@param value the constant value for this distribution',\n      '@param value the fixed value of this distribution',\n      '@param value the value that remains constant for this distribution',\n      '@param value the value that does not change for this distribution',\n      '@param value the constant value associated with this distribution'\n    ]\n  },\n  {\n    'tag': '@return the mean vector.',\n    'alternatives': [\n      '@return the vector representing the mean.',\n      '@return the vector that denotes the mean.',\n      '@return the vector that represents the mean.',\n      '@return the mean value as a vector.',\n      '@return the mean expressed as a vector.'\n    ]\n  },\n  {\n    'tag': '@return the covariance matrix.',\n    'alternatives': [\n      '@return the matrix that represents the covariance.',\n      '@return the matrix denoting the covariance.',\n      '@return the matrix that denotes the covariance.',\n      '@return the covariance expressed as a matrix.',\n      '@return the covariance matrix as a result.'\n    ]\n  },\n  {\n    'tag': '@return the standard deviations.',\n    'alternatives': [\n      '@return the deviations expressed as standard values.',\n      '@return the standard values denoting the deviations.',\n      '@return the standard values that represent the deviations.',\n      '@return the standard deviations as a result.',\n      '@return the standard deviations for the given data.'\n    ]\n  },\n  {\n    'tag': '@param values Values at which to compute density.',\n    'alternatives': [\n      '@param values The values to calculate the density at.',\n      '@param values The values used for density computation.',\n      '@param values The input values for density calculation.',\n      '@param values The values for which to compute the density.',\n      '@param values The values to be used in the density computation.'\n    ]\n  },\n  {\n    'tag': '@return the multiplication factor of density calculations.',\n    'alternatives': [\n      '@return the factor by which density calculations are multiplied.',\n      '@return the multiplication factor for density calculations.',\n      '@return the factor used to multiply density calculations.',\n      '@return the multiplication factor applied to density calculations.',\n      '@return the factor that is multiplied with density calculations.'\n    ]\n  }\n]"