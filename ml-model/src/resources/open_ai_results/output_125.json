"output=[\n  {\n    'tag': '@throws UnsupportedOperationException always',\n    'alternatives': [\n      '@throws UnsupportedOperationException at all times',\n      '@throws UnsupportedOperationException constantly',\n      '@throws UnsupportedOperationException every time',\n      '@throws UnsupportedOperationException without exception',\n      '@throws UnsupportedOperationException consistently'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if {@code duration} is not positive',\n    'alternatives': [\n      '@throws IllegalArgumentException when {@code duration} is not greater than zero',\n      '@throws IllegalArgumentException if {@code duration} is not a positive value',\n      '@throws IllegalArgumentException in case {@code duration} is not positive',\n      '@throws IllegalArgumentException if the value of {@code duration} is not positive',\n      '@throws IllegalArgumentException if the given {@code duration} is not positive'\n    ]\n  },\n  {\n    'tag': '@return {@code true} always',\n    'alternatives': [\n      '@return always {@code true}',\n      '@return {@code true} in any situation',\n      '@return {@code true} under any circumstance',\n      '@return {@code true} no matter what',\n      '@return always {@code true}, without exception'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if {@code backingMap} is not empty',\n    'alternatives': [\n      '@throws IllegalArgumentException if the {@code backingMap} is not empty',\n      '@throws IllegalArgumentException when {@code backingMap} is not empty',\n      '@throws IllegalArgumentException if the provided {@code backingMap} is not empty',\n      '@throws IllegalArgumentException in case the {@code backingMap} is not empty',\n      '@throws IllegalArgumentException if {@code backingMap} is not devoid of elements'\n    ]\n  },\n  {\n    'tag': '@return whether the guard is now satisfied',\n    'alternatives': [\n      '@return the current satisfaction state of the guard',\n      '@return the current status of the guard satisfaction',\n      '@return whether the guard is satisfied at the moment',\n      '@return whether the guard is presently satisfied',\n      '@return whether the guard currently meets the satisfaction criteria'\n    ]\n  },\n  {\n    'tag': '@return whether the guard is now satisfied',\n    'alternatives': [\n      '@return the current satisfaction state of the guard',\n      '@return the current status of the guard satisfaction',\n      '@return whether the guard is satisfied at the moment',\n      '@return whether the guard is presently satisfied',\n      '@return whether the guard currently meets the satisfaction criteria'\n    ]\n  },\n  {\n    'tag': '@throws UnsupportedOperationException always',\n    'alternatives': [\n      '@throws UnsupportedOperationException at all times',\n      '@throws UnsupportedOperationException constantly',\n      '@throws UnsupportedOperationException every time',\n      '@throws UnsupportedOperationException without exception',\n      '@throws UnsupportedOperationException consistently'\n    ]\n  },\n  {\n    'tag': '@throws UnsupportedOperationException always',\n    'alternatives': [\n      '@throws UnsupportedOperationException at all times',\n      '@throws UnsupportedOperationException constantly',\n      '@throws UnsupportedOperationException every time',\n      '@throws UnsupportedOperationException without exception',\n      '@throws UnsupportedOperationException consistently'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if {@code input} is null and this function does not accept null arguments',\n    'alternatives': [\n      '@throws NullPointerException if the {@code input} is null and this function does not support null arguments',\n      '@throws NullPointerException when the {@code input} is null and this function does not allow null arguments',\n      '@throws NullPointerException if the provided {@code input} is null and the function does not accept null arguments',\n      '@throws NullPointerException in case the {@code input} is null and this function does not permit null arguments',\n      '@throws NullPointerException if {@code input} is null and this function is not intended to accept null arguments'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if {@code x <= 0}',\n    'alternatives': [\n      '@throws IllegalArgumentException when {@code x} is less than or equal to zero',\n      '@throws IllegalArgumentException in case {@code x} is not greater than zero',\n      '@throws IllegalArgumentException if the value of {@code x} is not positive',\n      '@throws IllegalArgumentException if {@code x} is less than or equal to zero',\n      '@throws IllegalArgumentException if the given {@code x} is not positive'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if {@code x <= 0}',\n    'alternatives': [\n      '@throws IllegalArgumentException when {@code x} is less than or equal to zero',\n      '@throws IllegalArgumentException in case {@code x} is not greater than zero',\n      '@throws IllegalArgumentException if the value of {@code x} is not positive',\n      '@throws IllegalArgumentException if {@code x} is less than or equal to zero',\n      '@throws IllegalArgumentException if the given {@code x} is not positive'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if {@code k < 0}',\n    'alternatives': [\n      '@throws IllegalArgumentException when {@code k} is less than zero',\n      '@throws IllegalArgumentException if {@code k} is not a non-negative value',\n      '@throws IllegalArgumentException in case {@code k} is negative',\n      '@throws IllegalArgumentException if the value of {@code k} is less than zero',\n      '@throws IllegalArgumentException if {@code k} is a negative number'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if {@code x < 0}',\n    'alternatives': [\n      '@throws IllegalArgumentException when {@code x} is less than zero',\n      '@throws IllegalArgumentException if {@code x} is not a non-negative value',\n      '@throws IllegalArgumentException in case {@code x} is negative',\n      '@throws IllegalArgumentException if the value of {@code x} is less than zero',\n      '@throws IllegalArgumentException if {@code x} is a negative number'\n    ]\n  },\n  {\n    'tag': '@throws ArithmeticException if {@code q == 0}, or if {@code mode == UNNECESSARY} and {@code a}\\n        is not an integer multiple of {@code b}',\n    'alternatives': [\n      '@throws ArithmeticException if {@code q} is equal to zero, or if {@code mode} is UNNECESSARY and {@code a}\\n        is not an integer multiple of {@code b}',\n      '@throws ArithmeticException when {@code q} equals zero, or if {@code mode} is UNNECESSARY and {@code a}\\n        is not an integer multiple of {@code b}',\n      '@throws ArithmeticException in case {@code q} is zero, or if {@code mode} takes value UNNECESSARY and {@code a}\\n        is not an integer multiple of {@code b}',\n      '@throws ArithmeticException if {@code q} is zero, or if {@code mode} is UNNECESSARY and {@code a}\\n        is not an integer multiple of {@code b}',\n      '@throws ArithmeticException if {@code q} equals zero, or if {@code mode} is UNNECESSARY and {@code a}\\n        is not an integer multiple of {@code b}'\n    ]\n  },\n  {\n    'tag': '@throws ArithmeticException if {@code m <= 0}',\n    'alternatives': [\n      '@throws ArithmeticException when {@code m} is less than or equal to zero',\n      '@throws ArithmeticException if {@code m} is not a positive value',\n      '@throws ArithmeticException in case {@code m} is not positive',\n      '@throws ArithmeticException if the value of {@code m} is less than or equal to zero',\n      '@throws ArithmeticException if the given {@code m} is not positive'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if {@code a < 0} or {@code b < 0}',\n    'alternatives': [\n      '@throws IllegalArgumentException when either {@code a} or {@code b} is negative',\n      '@throws IllegalArgumentException if either {@code a} or {@code b} is not a non-negative value',\n      '@throws IllegalArgumentException in case either {@code a} or {@code b} is negative',\n      '@throws IllegalArgumentException if the value of either {@code a} or {@code b} is less than zero',\n      '@throws IllegalArgumentException if either {@code a} or {@code b} is a negative number'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if {@code n < 0}',\n    'alternatives': [\n      '@throws IllegalArgumentException when {@code n} is negative',\n      '@throws IllegalArgumentException if {@code n} is not a non-negative value',\n      '@throws IllegalArgumentException in case {@code n} is negative',\n      '@throws IllegalArgumentException if the value of {@code n} is less than zero',\n      '@throws IllegalArgumentException if {@code n} is a negative number'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if any of the provided keys is null',\n    'alternatives': [\n      '@throws NullPointerException if any of the given keys is null',\n      '@throws NullPointerException when any of the provided keys is null',\n      '@throws NullPointerException in case any of the given keys is null',\n      '@throws NullPointerException if any of the keys provided is null',\n      '@throws NullPointerException if any of the supplied keys is null'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if the provided table is empty',\n    'alternatives': [\n      '@throws IllegalArgumentException when the provided table is empty',\n      '@throws IllegalArgumentException if the given table does not contain any elements',\n      '@throws IllegalArgumentException in case the provided table is devoid of elements',\n      '@throws IllegalArgumentException if the table provided is empty',\n      '@throws IllegalArgumentException if the supplied table has no elements'\n    ]\n  },\n  {\n    'tag': '@throws UnsupportedOperationException always',\n    'alternatives': [\n      '@throws UnsupportedOperationException at all times',\n      '@throws UnsupportedOperationException constantly',\n      '@throws UnsupportedOperationException every time',\n      '@throws UnsupportedOperationException without exception',\n      '@throws UnsupportedOperationException consistently'\n    ]\n  },\n  {\n    'tag': '@throws UnsupportedOperationException always',\n    'alternatives': [\n      '@throws UnsupportedOperationException at all times',\n      '@throws UnsupportedOperationException constantly',\n      '@throws UnsupportedOperationException every time',\n      '@throws UnsupportedOperationException without exception',\n      '@throws UnsupportedOperationException consistently'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if {@code n < 0}',\n    'alternatives': [\n      '@throws IllegalArgumentException when {@code n} is negative',\n      '@throws IllegalArgumentException if {@code n} is not a non-negative value',\n      '@throws IllegalArgumentException in case {@code n} is negative',\n      '@throws IllegalArgumentException if the value of {@code n} is less than zero',\n      '@throws IllegalArgumentException if {@code n} is a negative number'\n    ]\n  },\n  {\n    'tag': '@param wasUncontended false if CAS failed before call',\n    'alternatives': [\n      '@param wasUncontended false if CAS has failed prior to the call',\n      '@param wasUncontended false if CAS has been unsuccessful before the call',\n      '@param wasUncontended false when CAS failed in previous invocations',\n      '@param wasUncontended false if CAS has not succeeded prior to this call',\n      '@param wasUncontended false if CAS was not successful before the invocation'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if {@code n} is negative',\n    'alternatives': [\n      '@throws IllegalArgumentException when {@code n} is less than zero',\n      '@throws IllegalArgumentException if {@code n} is not a non-negative value',\n      '@throws IllegalArgumentException in case {@code n} is negative',\n      '@throws IllegalArgumentException if the value of {@code n} is less than zero',\n      '@throws IllegalArgumentException if {@code n} is a negative number'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if any of {@code elements} is null',\n    'alternatives': [\n      '@throws NullPointerException if any of the provided {@code elements} is null',\n      '@throws NullPointerException when any of {@code elements} is null',\n      '@throws NullPointerException in case any of the {@code elements} is null',\n      '@throws NullPointerException if any of the {@code elements} is null',\n      '@throws NullPointerException if any of the {@code elements} supplied is null'\n    ]\n  }\n]"