"output = [\n  {\n    'tag': '@throws MathArithmeticException if the result can not be represented as an long',\n    'alternatives': [\n      '@throws MathArithmeticException if the outcome cannot be expressed as a long',\n      '@throws MathArithmeticException if the result cannot be represented as a long',\n      '@throws MathArithmeticException if the solution cannot be represented as a long',\n      '@throws MathArithmeticException if the answer cannot be represented as a long',\n      '@throws MathArithmeticException if the computed value cannot be stored as a long'\n    ]\n  },\n  {\n    'tag': '@param n the size of the set',\n    'alternatives': [\n      '@param n set size',\n      '@param n size of the set',\n      '@param n number of elements in the set',\n      '@param n the cardinality of the set',\n      '@param n number of items in the set'\n    ]\n  },\n  {\n    'tag': '@param k the size of the subsets to be counted',\n    'alternatives': [\n      '@param k subset size to count',\n      '@param k size of the subsets to calculate',\n      '@param k number of elements in the subsets',\n      '@param k the cardinality of the subsets',\n      '@param k number of items in the subsets'\n    ]\n  },\n  {\n    'tag': '@return {@code n choose k}',\n    'alternatives': [\n      '@return {@code n pick k}',\n      '@return the result of choosing k elements from n',\n      '@return the combination of n items taken k at a time',\n      '@return the binomial coefficient n choose k',\n      '@return the number of ways to choose k items from a set of n items'\n    ]\n  },\n  {\n    'tag': '@throws MathArithmeticException if the result is too large to be\\nrepresented by a long integer.',\n    'alternatives': [\n      '@throws MathArithmeticException if the outcome exceeds the capacity of a long',\n      '@throws MathArithmeticException if the result cannot be stored as a long integer',\n      '@throws MathArithmeticException if the solution exceeds the maximum value of a long',\n      '@throws MathArithmeticException if the calculated value overflows a long integer',\n      '@throws MathArithmeticException if the answer is too large to fit in a long'\n    ]\n  },\n  {\n    'tag': '@param n argument',\n    'alternatives': [\n      '@param n input',\n      '@param n value',\n      '@param n parameter',\n      '@param n value of the argument',\n      '@param n input parameter'\n    ]\n  },\n  {\n    'tag': '@return {@code n!}',\n    'alternatives': [\n      '@return factorial of n',\n      '@return the factorial of n',\n      '@return the value of n factorial',\n      '@return the product of all positive integers less than or equal to n',\n      '@return the result of multiplying all positive integers less than or equal to n'\n    ]\n  },\n  {\n    'tag': '@throws MathArithmeticException if the result is too large to be represented\\nby a {@code long}.',\n    'alternatives': [\n      '@throws MathArithmeticException if the outcome exceeds the capacity of a {@code long}',\n      '@throws MathArithmeticException if the result cannot be stored as a {@code long}',\n      '@throws MathArithmeticException if the solution exceeds the maximum value of a {@code long}',\n      '@throws MathArithmeticException if the calculated value overflows a {@code long} integer',\n      '@throws MathArithmeticException if the answer is too large to fit in a {@code long}'\n    ]\n  },\n  {\n    'tag': '@param p Number.',\n    'alternatives': [\n      '@param p Value.',\n      '@param p Numeric value.',\n      '@param p Input number.',\n      '@param p Argument.',\n      '@param p Numeric argument.'\n    ]\n  },\n  {\n    'tag': '@param q Number.',\n    'alternatives': [\n      '@param q Value.',\n      '@param q Numeric value.',\n      '@param q Input number.',\n      '@param q Argument.',\n      '@param q Numeric argument.'\n    ]\n  },\n  {\n    'tag': '@return the greatest common divisor (never negative).',\n    'alternatives': [\n      '@return the highest common factor (always non-negative).',\n      '@return the largest positive divisor.',\n      '@return the biggest number that divides both inputs without remainder.',\n      '@return the largest positive integer that divides both inputs.',\n      '@return the greatest positive number that divides both inputs exactly.'\n    ]\n  },\n  {\n    'tag': '@throws MathArithmeticException if the result cannot be represented as\\na non-negative {@code int} value.',\n    'alternatives': [\n      '@throws MathArithmeticException if the outcome cannot be expressed as a non-negative {@code int}',\n      '@throws MathArithmeticException if the result cannot be stored as a non-negative {@code int}',\n      '@throws MathArithmeticException if the solution cannot be represented as a non-negative {@code int}',\n      '@throws MathArithmeticException if the answer cannot be represented as a non-negative {@code int}',\n      '@throws MathArithmeticException if the computed value cannot be stored as a non-negative {@code int}'\n    ]\n  },\n  {\n    'tag': '@param a Positive number.',\n    'alternatives': [\n      '@param a Number that is positive.',\n      '@param a Numeric value that is positive.',\n      '@param a Input number that is positive.',\n      '@param a Argument that is positive.',\n      '@param a Numeric argument that is positive.'\n    ]\n  }\n]"