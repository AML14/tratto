"output=[\n  {\n    'tag': '@throws IOException any of the usual I/O related exceptions',\n    'alternatives': [\n      '@throws IOException any of the common I/O related exceptions',\n      '@throws IOException any of the standard I/O related exceptions',\n      '@throws IOException any of the typical I/O related exceptions',\n      '@throws IOException any of the regular I/O related exceptions',\n      '@throws IOException any of the customary I/O related exceptions'\n    ]\n  },\n  {\n    'tag': '@param in the input stream',\n    'alternatives': [\n      '@param in the stream of input',\n      '@param in the input stream',\n      '@param the input stream',\n      '@param the stream of input',\n      '@param the stream used as input'\n    ]\n  },\n  {\n    'tag': '@throws IOException any of the usual I/O related exceptions',\n    'alternatives': [\n      '@throws IOException any of the common I/O related exceptions',\n      '@throws IOException any of the standard I/O related exceptions',\n      '@throws IOException any of the typical I/O related exceptions',\n      '@throws IOException any of the regular I/O related exceptions',\n      '@throws IOException any of the customary I/O related exceptions'\n    ]\n  },\n  {\n    'tag': '@throws ClassNotFoundException if the stream contains an object which class can not be loaded',\n    'alternatives': [\n      '@throws ClassNotFoundException if the stream contains an object whose class cannot be loaded',\n      '@throws ClassNotFoundException if the stream contains an object that cannot be loaded',\n      '@throws ClassNotFoundException if the stream contains an object with a class that cannot be loaded',\n      '@throws ClassNotFoundException if the stream contains an object that has an unloadable class',\n      '@throws ClassNotFoundException if the stream contains an object with a class unable to be loaded'\n    ]\n  },\n  {\n    'tag': '@throws ClassCastException if the stream does not contain the correct objects',\n    'alternatives': [\n      '@throws ClassCastException if the stream does not have the appropriate objects',\n      '@throws ClassCastException if the stream contains objects that are not of the correct type',\n      '@throws ClassCastException if the stream contains objects that cannot be cast to the correct type',\n      '@throws ClassCastException if the stream contains objects that are not the expected type',\n      '@throws ClassCastException if the stream contains objects that cannot be converted to the correct type'\n    ]\n  },\n  {\n    'tag': '@param <K> the type of key elements',\n    'alternatives': [\n      '@param <K> the type of key elements',\n      '@param <K> the element type of keys',\n      '@param <K> the type of elements used as keys',\n      '@param <K> the type of the elements representing keys',\n      '@param <K> the type of elements that act as keys'\n    ]\n  },\n  {\n    'tag': '@param <V> the type of value elements',\n    'alternatives': [\n      '@param <V> the type of value elements',\n      '@param <V> the element type of values',\n      '@param <V> the type of elements used as values',\n      '@param <V> the type of the elements representing values',\n      '@param <V> the type of elements that act as values'\n    ]\n  },\n  {\n    'tag': '@return an unmodifiable MultiValuedMap',\n    'alternatives': [\n      '@return a MultiValuedMap that cannot be modified',\n      '@return an immutable MultiValuedMap',\n      '@return a MultiValuedMap that is not modifiable',\n      '@return a MultiValuedMap that is read-only',\n      '@return a MultiValuedMap that is in a state where it cannot be changed'\n    ]\n  },\n  {\n    'tag': '@param map the MultiValuedMap to decorate, may not be null',\n    'alternatives': [\n      '@param map the MultiValuedMap to decorate, must not be null',\n      '@param map the MultiValuedMap to enhance, cannot be null',\n      '@param map the MultiValuedMap to modify, should not be null',\n      '@param map the MultiValuedMap to augment, may not be null',\n      '@param map the MultiValuedMap to manipulate, should be non-null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if the map is null',\n    'alternatives': [\n      '@throws NullPointerException if the map is null',\n      '@throws NullPointerException when the map is null',\n      '@throws NullPointerException if the map parameter is null',\n      '@throws NullPointerException if map is null',\n      '@throws NullPointerException in case the map is null'\n    ]\n  },\n  {\n    'tag': '@param initialSetCapacity the initial capacity used for value collections',\n    'alternatives': [\n      '@param initialSetCapacity the initial capacity for storing values',\n      '@param initialSetCapacity the starting size of value collections',\n      '@param initialSetCapacity the initial amount of space for value collections',\n      '@param initialSetCapacity the value collections starting capacity',\n      '@param initialSetCapacity the initial storage size for value collections'\n    ]\n  },\n  {\n    'tag': '@param initialMapCapacity the initial hashmap capacity',\n    'alternatives': [\n      '@param initialMapCapacity the initial capacity of the hashmap',\n      '@param initialMapCapacity the starting size of the hashmap',\n      '@param initialMapCapacity the initial amount of space for the hashmap',\n      '@param initialMapCapacity the hashmap starting capacity',\n      '@param initialMapCapacity the initial storage size of the hashmap'\n    ]\n  },\n  {\n    'tag': '@param initialSetCapacity the initial capacity used for value collections',\n    'alternatives': [\n      '@param initialSetCapacity the initial capacity for storing values',\n      '@param initialSetCapacity the starting size of value collections',\n      '@param initialSetCapacity the initial amount of space for value collections',\n      '@param initialSetCapacity the value collections starting capacity',\n      '@param initialSetCapacity the initial storage size for value collections'\n    ]\n  },\n  {\n    'tag': '@param map a <code>MultiValuedMap</code> to copy into this map',\n    'alternatives': [\n      '@param map a <code>MultiValuedMap</code> to duplicate in this map',\n      '@param map a <code>MultiValuedMap</code> to replicate in this map',\n      '@param map a <code>MultiValuedMap</code> to clone into this map',\n      '@param map a <code>MultiValuedMap</code> to reproduce in this map',\n      '@param map a <code>MultiValuedMap</code> to imitate in this map'\n    ]\n  },\n  {\n    'tag': '@param map a <code>Map</code> to copy into this map',\n    'alternatives': [\n      '@param map a <code>Map</code> to duplicate in this map',\n      '@param map a <code>Map</code> to replicate in this map',\n      '@param map a <code>Map</code> to clone into this map',\n      '@param map a <code>Map</code> to reproduce in this map',\n      '@param map a <code>Map</code> to imitate in this map'\n    ]\n  },\n  {\n    'tag': '@param <K> the key type',\n    'alternatives': [\n      '@param <K> the type of the key',\n      '@param <K> the type of the key elements',\n      '@param <K> the element type of the key',\n      '@param <K> the type of the elements representing keys',\n      '@param <K> the type of elements that act as keys'\n    ]\n  },\n  {\n    'tag': '@param <V> the value type',\n    'alternatives': [\n      '@param <V> the type of the value',\n      '@param <V> the type of the value elements',\n      '@param <V> the element type of the value',\n      '@param <V> the type of the elements representing values',\n      '@param <V> the type of elements that act as values'\n    ]\n  },\n  {\n    'tag': '@return a new transformed MultiValuedMap',\n    'alternatives': [\n      '@return a new MultiValuedMap resulting from transformation',\n      '@return a transformed MultiValuedMap object',\n      '@return a newly created altered MultiValuedMap',\n      '@return a MultiValuedMap that has been modified',\n      '@return a fresh MultiValuedMap obtained from the transformation'\n    ]\n  },\n  {\n    'tag': '@param <K> the key type',\n    'alternatives': [\n      '@param <K> the type of the key',\n      '@param <K> the type of the key elements',\n      '@param <K> the element type of the key',\n      '@param <K> the type of the elements representing keys',\n      '@param <K> the type of elements that act as keys'\n    ]\n  },\n  {\n    'tag': '@param <V> the value type',\n    'alternatives': [\n      '@param <V> the type of the value',\n      '@param <V> the type of the value elements',\n      '@param <V> the element type of the value',\n      '@param <V> the type of the elements representing values',\n      '@param <V> the type of elements that act as values'\n    ]\n  },\n  {\n    'tag': '@return a new transformed MultiValuedMap',\n    'alternatives': [\n      '@return a new MultiValuedMap resulting from transformation',\n      '@return a transformed MultiValuedMap object',\n      '@return a newly created altered MultiValuedMap',\n      '@return a MultiValuedMap that has been modified',\n      '@return a fresh MultiValuedMap obtained from the transformation'\n    ]\n  },\n  {\n    'tag': '@param object the object to transform',\n    'alternatives': [\n      '@param object the object that needs to be transformed',\n      '@param object the object that requires transformation',\n      '@param object the object to be converted',\n      '@param object the object that should undergo transformation',\n      '@param object the object that needs to be changed'\n    ]\n  },\n  {\n    'tag': '@return the transformed object',\n    'alternatives': [\n      '@return the object after being transformed',\n      '@return the object that has been converted',\n      '@return the object after undergoing transformation',\n      '@return the object that has been altered',\n      '@return the object that experienced a change'\n    ]\n  },\n  {\n    'tag': '@param object the object to transform',\n    'alternatives': [\n      '@param object the object that needs to be transformed',\n      '@param object the object that requires transformation',\n      '@param object the object to be converted',\n      '@param object the object that should undergo transformation',\n      '@param object the object that needs to be changed'\n    ]\n  },\n  {\n    'tag': '@return the transformed object',\n    'alternatives': [\n      '@return the object after being transformed',\n      '@return the object that has been converted',\n      '@return the object after undergoing transformation',\n      '@return the object that has been altered',\n      '@return the object that experienced a change'\n    ]\n  }\n]"