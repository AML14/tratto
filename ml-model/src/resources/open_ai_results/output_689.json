"output = [\n  {\n    'tag': '@return <code>true</code> if the specified path element disconnects the\\nguard-vertex, <code>false</code> otherwise.',\n    'alternatives': [\n      '@return <code>true</code> if the given path element separates the guard-vertex, <code>false</code> otherwise.',\n      '@return <code>true</code> if the specified path element isolates the guard-vertex, <code>false</code> otherwise.',\n      '@return <code>false</code> if the guard-vertex is not disconnected by the specified path element, <code>true</code> otherwise.',\n      '@return <code>false</code> if the specified path element does not separate the guard-vertex, <code>true</code> otherwise.',\n      '@return <code>true</code> or <code>false</code> depending on whether the specified path element disconnects the guard-vertex or not.'\n    ]\n  },\n  {\n    'tag': '@param prevPathElement ',\n    'alternatives': [\n      '@param prevPathElement -',\n      '@param prevPathElement: ',\n      '@param prevPathElement is ',\n      '@param prevPathElement (',\n      '@param prevPathElement input:'\n    ]\n  },\n  {\n    'tag': '@param edge ',\n    'alternatives': [\n      '@param edge -',\n      '@param edge: ',\n      '@param edge is ',\n      '@param edge (',\n      '@param edge input:'\n    ]\n  },\n  {\n    'tag': '@return <code>true</code> if the resulting path (obtained by\\nconcatenating the specified edge to the specified path) is simple, <code>\\nfalse</code> otherwise.',\n    'alternatives': [\n      '@return <code>true</code> if the resulting path (obtained by joining the specified edge to the specified path) is not complex, <code>false</code> otherwise.',\n      '@return <code>true</code> if the resulting path (obtained by appending the specified edge to the specified path) is straightforward, <code>false</code> otherwise.',\n      '@return <code>true</code> if the resulting path (obtained by concatenating the specified edge with the specified path) is simple, <code>false</code> otherwise.',\n      '@return <code>true</code> if the resulting path (formed by merging the specified edge and the specified path) is uncomplicated, <code>false</code> otherwise.',\n      '@return <code>true</code> if the resulting path (achieved by connecting the specified edge to the specified path) is basic, <code>false</code> otherwise.'\n    ]\n  },\n  {\n    'tag': '@param maxSize max number of paths the list is able to store.',\n    'alternatives': [\n      '@param maxSize maximum size of the list to store paths.',\n      '@param maxSize - the maximum number of paths that can be stored in the list.',\n      '@param maxSize: the maximum number of paths the list can store.',\n      '@param maxSize is the maximum number of paths that can be stored in the list.',\n      '@param maxSize input specifies the maximum number of paths the list can contain.'\n    ]\n  },\n  {\n    'tag': '@param prevPathElementList paths, list of <code>\\nRankingPathElement</code>.',\n    'alternatives': [\n      '@param prevPathElementList - list of paths consisting of <code>RankingPathElement</code>.',\n      '@param prevPathElementList: a list of <code>RankingPathElement</code> paths.',\n      '@param prevPathElementList is a list of <code>RankingPathElement</code> paths.',\n      '@param prevPathElementList (paths) containing <code>RankingPathElement</code>.',\n      '@param prevPathElementList input is a list of <code>RankingPathElement</code> paths.'\n    ]\n  },\n  {\n    'tag': '@param edge edge reaching the end vertex of the created paths.',\n    'alternatives': [\n      '@param edge - edge that leads to the terminal vertex of the generated paths.',\n      '@param edge: edge that reaches the destination vertex of the paths created.',\n      '@param edge is the edge that reaches the final vertex of the created paths.',\n      '@param edge (edge) reaching the ending vertex of the paths generated.',\n      '@param edge input is the edge that connects to the last vertex of the created paths.'\n    ]\n  },\n  {\n    'tag': '@return set of Edges',\n    'alternatives': [\n      '@return collection of Edges',\n      '@return group of Edges',\n      '@return array of Edges',\n      '@return series of Edges',\n      '@return sequence of Edges'\n    ]\n  },\n  {\n    'tag': '@param graph - Graph to compute transitive closure for.',\n    'alternatives': [\n      '@param graph - Graph used to compute transitive closure.',\n      '@param graph: Graph to perform transitive closure calculation on.',\n      '@param graph is the Graph object used for calculating transitive closure.',\n      '@param graph (Graph) for transitive closure computation.',\n      '@param graph input is the Graph object that is used to compute the transitive closure.'\n    ]\n  },\n  {\n    'tag': '@param augmentingPath ',\n    'alternatives': [\n      '@param augmentingPath -',\n      '@param augmentingPath: ',\n      '@param augmentingPath is ',\n      '@param augmentingPath (',\n      '@param augmentingPath input:'\n    ]\n  },\n  {\n    'tag': '@param vertexSet1 ',\n    'alternatives': [\n      '@param vertexSet1 -',\n      '@param vertexSet1: ',\n      '@param vertexSet1 is ',\n      '@param vertexSet1 (',\n      '@param vertexSet1 input:'\n    ]\n  },\n  {\n    'tag': '@param vertexSet2 ',\n    'alternatives': [\n      '@param vertexSet2 -',\n      '@param vertexSet2: ',\n      '@param vertexSet2 is ',\n      '@param vertexSet2 (',\n      '@param vertexSet2 input:'\n    ]\n  },\n  {\n    'tag': '@return true if the intersection is NOT empty.',\n    'alternatives': [\n      '@return true if the intersection is not empty.',\n      '@return true if there is a non-empty intersection.',\n      '@return true if there exists a non-empty intersection.',\n      '@return true if there is any overlap.',\n      '@return true if there is a common element.'\n    ]\n  },\n  {\n    'tag': '@param graph graph over which to run algorithm',\n    'alternatives': [\n      '@param graph graph for the algorithm to be executed on',\n      '@param graph: the graph on which the algorithm will operate',\n      '@param graph is the graph on which the algorithm is to be run',\n      '@param graph (graph) to execute the algorithm on',\n      '@param graph input is the graph on which the algorithm will be applied'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if a negative weight edge is found',\n    'alternatives': [\n      '@throws IllegalArgumentException when encountering a negative weight edge',\n      '@throws IllegalArgumentException if there is a weighted edge with a negative value',\n      '@throws IllegalArgumentException if a negative-weighted edge is detected',\n      '@throws IllegalArgumentException if an edge with negative weight is encountered',\n      '@throws IllegalArgumentException in case of a negative weighted edge'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if graph has less than 2 vertices',\n    'alternatives': [\n      '@throws IllegalArgumentException when the graph has fewer than 2 vertices',\n      '@throws IllegalArgumentException if the graph contains less than 2 vertices',\n      '@throws IllegalArgumentException if there are less than 2 vertices in the graph',\n      '@throws IllegalArgumentException if the number of vertices in the graph is less than 2',\n      '@throws IllegalArgumentException in case the graph has fewer than 2 vertices'\n    ]\n  },\n  {\n    'tag': '@param elementList paths, list of <code>AbstractPathElement</code>.',\n    'alternatives': [\n      '@param elementList - list of paths consisting of <code>AbstractPathElement</code>.',\n      '@param elementList: a list of <code>AbstractPathElement</code> paths.',\n      '@param elementList is a list of <code>AbstractPathElement</code> paths.',\n      '@param elementList (paths) containing <code>AbstractPathElement</code>.',\n      '@param elementList input is a list of <code>AbstractPathElement</code> paths.'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if the specified prevPathElementList or edge\\nis <code>null</code>.',\n    'alternatives': [\n      '@throws NullPointerException when the provided prevPathElementList or edge\\nis <code>null</code>.',\n      '@throws NullPointerException if the given prevPathElementList or edge\\nis <code>null</code>.',\n      '@throws NullPointerException if the specified prevPathElementList or edge\\nparameter is <code>null</code>.',\n      '@throws NullPointerException in case the provided prevPathElementList or edge\\nis <code>null</code>.',\n      '@throws NullPointerException if the given prevPathElementList or edge\\nparameter is <code>null</code>.'\n    ]\n  }\n]"