"[\n  {\n    'tag': '@throws NullPointerException if either parameter is null',\n    'alternatives': [\n      '@throws NullPointerException if either argument is null',\n      '@throws NullPointerException if any of the parameters is null',\n      '@throws NullPointerException if either input is null',\n      '@throws NullPointerException if any parameter is null',\n      '@throws NullPointerException in case any of the parameters is null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if the list is null',\n    'alternatives': [\n      '@throws NullPointerException if the provided list is null',\n      '@throws NullPointerException when the list parameter is null',\n      '@throws NullPointerException if the list parameter is null',\n      '@throws NullPointerException if the given list is null',\n      '@throws NullPointerException in case the list is null'\n    ]\n  },\n  {\n    'tag': '@param list the list to synchronize, must not be null',\n    'alternatives': [\n      '@param list the list to be synchronized, cannot be null',\n      '@param list the list that should be synchronized, must not be null',\n      '@param list - the list to synchronize, should not be null',\n      '@param list - the list that requires synchronization, must not be null',\n      '@param list - the list which needs to be synchronized, cannot be null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if the List or Predicate is null',\n    'alternatives': [\n      '@throws NullPointerException if either the List or Predicate is null',\n      '@throws NullPointerException if the List or Predicate parameter is null',\n      '@throws NullPointerException if either List or Predicate is null',\n      '@throws NullPointerException if either List or Predicate parameter is null',\n      '@throws NullPointerException if the provided List or Predicate is null'\n    ]\n  },\n  {\n    'tag': '@param list the list to predicate, must not be null',\n    'alternatives': [\n      '@param list the list to apply the predicate to, cannot be null',\n      '@param list the list that the predicate should be applied to, must not be null',\n      '@param list - the list to be subjected to the predicate, should not be null',\n      '@param list - the list that the predicate needs to be applied to, must not be null',\n      '@param list - the list for which the predicate will be used, cannot be null'\n    ]\n  },\n  {\n    'tag': '@param predicate the predicate for the list, must not be null',\n    'alternatives': [\n      '@param predicate the predicate that will be used on the list, cannot be null',\n      '@param predicate the predicate to apply on the list, must not be null',\n      '@param predicate - the predicate for the list, should not be null',\n      '@param predicate - the predicate that needs to be applied to the list, must not be null',\n      '@param predicate - the predicate that will be used with the list, cannot be null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if the List or Transformer is null',\n    'alternatives': [\n      '@throws NullPointerException if either the List or Transformer is null',\n      '@throws NullPointerException if the List or Transformer parameter is null',\n      '@throws NullPointerException if either List or Transformer is null',\n      '@throws NullPointerException if either List or Transformer parameter is null',\n      '@throws NullPointerException if the provided List or Transformer is null'\n    ]\n  },\n  {\n    'tag': '@param list the list to predicate, must not be null',\n    'alternatives': [\n      '@param list the list to be filtered, cannot be null',\n      '@param list the list that should be subjected to the predicate, must not be null',\n      '@param list - the list to apply the predicate to, should not be null',\n      '@param list - the list that needs to be filtered, must not be null',\n      '@param list - the list that will be processed by the predicate, cannot be null'\n    ]\n  },\n  {\n    'tag': '@param transformer the transformer for the list, must not be null',\n    'alternatives': [\n      '@param transformer the transformer to be applied on the list, cannot be null',\n      '@param transformer the transformer that will transform the list, must not be null',\n      '@param transformer - the transformer for the list, should not be null',\n      '@param transformer - the transformer that needs to be used on the list, must not be null',\n      '@param transformer - the transformer that will be applied to the list, cannot be null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if the List or Factory is null',\n    'alternatives': [\n      '@throws NullPointerException if either the List or Factory is null',\n      '@throws NullPointerException if the List or Factory parameter is null',\n      '@throws NullPointerException if either List or Factory is null',\n      '@throws NullPointerException if either List or Factory parameter is null',\n      '@throws NullPointerException if the provided List or Factory is null'\n    ]\n  },\n  {\n    'tag': '@param list the list to make lazy, must not be null',\n    'alternatives': [\n      '@param list the list to be converted to a lazy list, cannot be null',\n      '@param list the list that will be transformed into a lazy list, must not be null',\n      '@param list - the list to be lazified, should not be null',\n      '@param list - the list that needs to be made lazy, must not be null',\n      '@param list - the list that will be turned into a lazy list, cannot be null'\n    ]\n  },\n  {\n    'tag': '@param factory the factory for creating new objects, must not be null',\n    'alternatives': [\n      '@param factory the factory responsible for object creation, cannot be null',\n      '@param factory the factory that will be used for creating new objects, must not be null',\n      '@param factory - the factory for creating new objects, should not be null',\n      '@param factory - the factory for object creation, must not be null',\n      '@param factory - the factory that will be responsible for creating objects, cannot be null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if the List is null',\n    'alternatives': [\n      '@throws NullPointerException if the provided List is null',\n      '@throws NullPointerException when the List parameter is null',\n      '@throws NullPointerException if the List parameter is null',\n      '@throws NullPointerException if the given List is null',\n      '@throws NullPointerException in case the List is null'\n    ]\n  },\n  {\n    'tag': '@param list the list whose size to fix, must not be null',\n    'alternatives': [\n      '@param list the list to set the fixed size, cannot be null',\n      '@param list the list that needs to have its size fixed, must not be null',\n      '@param list - the list to be configured with fixed size, should not be null',\n      '@param list - the list that will have its size fixed, must not be null',\n      '@param list - the list for which the size needs to be fixed, cannot be null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if either list is {@code null}',\n    'alternatives': [\n      '@throws NullPointerException if any of the two lists is {@code null}',\n      '@throws NullPointerException if either list parameter is {@code null}',\n      '@throws NullPointerException if any list is {@code null}',\n      '@throws NullPointerException if either list or the other list is {@code null}',\n      '@throws NullPointerException in case either list is {@code null}'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if either list or the equator is {@code null}',\n    'alternatives': [\n      '@throws NullPointerException if any of the lists or the equator is {@code null}',\n      '@throws NullPointerException if either list parameter or the equator is {@code null}',\n      '@throws NullPointerException if any list or the equator is {@code null}',\n      '@throws NullPointerException if either list or equator parameter is {@code null}',\n      '@throws NullPointerException in case either list or the equator is {@code null}'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if either sequence is {@code null}',\n    'alternatives': [\n      '@throws NullPointerException if any of the sequences is {@code null}',\n      '@throws NullPointerException if either sequence parameter is {@code null}',\n      '@throws NullPointerException if any sequence is {@code null}',\n      '@throws NullPointerException if either sequence or the other sequence is {@code null}',\n      '@throws NullPointerException in case either sequence is {@code null}'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if list is null',\n    'alternatives': [\n      '@throws NullPointerException if the provided list is null',\n      '@throws NullPointerException when the list parameter is null',\n      '@throws NullPointerException if the list parameter is null',\n      '@throws NullPointerException if the given list is null',\n      '@throws NullPointerException in case the list is null'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if size is not strictly positive',\n    'alternatives': [\n      '@throws IllegalArgumentException if the size is not strictly positive',\n      '@throws IllegalArgumentException in case the size is not strictly positive',\n      '@throws IllegalArgumentException if the provided size is not strictly positive',\n      '@throws IllegalArgumentException when the size is not strictly positive',\n      '@throws IllegalArgumentException if the given size is not strictly positive'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if set or list is null',\n    'alternatives': [\n      '@throws NullPointerException if either set or list is null',\n      '@throws NullPointerException if the set parameter or the list parameter is null',\n      '@throws NullPointerException if either set or list parameter is null',\n      '@throws NullPointerException if any of the parameters set or list is null',\n      '@throws NullPointerException in case the set or list is null'\n    ]\n  },\n  {\n    'tag': '@param set the set to decorate, must not be null',\n    'alternatives': [\n      '@param set the set that will be decorated, cannot be null',\n      '@param set the set to be enhanced, must not be null',\n      '@param set - the set to decorate, should not be null',\n      '@param set - the set that needs decoration, must not be null',\n      '@param set - the set that will be used for decoration, cannot be null'\n    ]\n  },\n  {\n    'tag': '@param list the list to decorate, must not be null',\n    'alternatives': [\n      '@param list the list that will be decorated, cannot be null',\n      '@param list the list to be enhanced, must not be null',\n      '@param list - the list to decorate, should not be null',\n      '@param list - the list that needs decoration, must not be null',\n      '@param list - the list that will be used for decoration, cannot be null'\n    ]\n  }\n]"