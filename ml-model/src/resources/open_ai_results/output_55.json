"output = [\n  {\n    'tag': '@param map the map to decorate, must not be null',\n    'alternatives': [\n      '@param map the decorated map, which must not be null',\n      '@param map the map to be decorated, should not be null',\n      '@param map the map that needs to be decorated, cannot be null',\n      '@param map the map to wrap and decorate, cannot be null',\n      '@param map the underlying map that will be decorated, must not be null'\n    ]\n  },\n  {\n    'tag': '@param factory the factory to use, must not be null',\n    'alternatives': [\n      '@param factory the chosen factory, which must not be null',\n      '@param factory the selected factory to be used, should not be null',\n      '@param factory the designated factory to utilize, cannot be null',\n      '@param factory the factory that will be utilized, must not be null',\n      '@param factory the specified factory to use, must not be null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if multiset is null',\n    'alternatives': [\n      '@throws NullPointerException when multiset is null',\n      '@throws NullPointerException if multiset parameter is null',\n      '@throws NullPointerException in case multiset is null',\n      '@throws NullPointerException if multiset is found to be null',\n      '@throws NullPointerException if multiset argument is null'\n    ]\n  },\n  {\n    'tag': '@param multiset the multiset to decorate, must not be null',\n    'alternatives': [\n      '@param multiset the decorated multiset, which must not be null',\n      '@param multiset the multiset to be decorated, should not be null',\n      '@param multiset the multiset that needs to be decorated, cannot be null',\n      '@param multiset the multiset to wrap and decorate, cannot be null',\n      '@param multiset the underlying multiset that will be decorated, must not be null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if queue is null',\n    'alternatives': [\n      '@throws NullPointerException when queue is null',\n      '@throws NullPointerException if queue parameter is null',\n      '@throws NullPointerException in case queue is null',\n      '@throws NullPointerException if queue is found to be null',\n      '@throws NullPointerException if queue argument is null'\n    ]\n  },\n  {\n    'tag': '@param queue the queue to decorate, must not be null',\n    'alternatives': [\n      '@param queue the decorated queue, which must not be null',\n      '@param queue the queue to be decorated, should not be null',\n      '@param queue the queue that needs to be decorated, cannot be null',\n      '@param queue the queue to wrap and decorate, cannot be null',\n      '@param queue the underlying queue that will be decorated, must not be null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if map is null',\n    'alternatives': [\n      '@throws NullPointerException when map is null',\n      '@throws NullPointerException if map parameter is null',\n      '@throws NullPointerException in case map is null',\n      '@throws NullPointerException if map is found to be null',\n      '@throws NullPointerException if map argument is null'\n    ]\n  },\n  {\n    'tag': '@param map the map to decorate, must not be null',\n    'alternatives': [\n      '@param map the decorated map, which must not be null',\n      '@param map the map to be decorated, should not be null',\n      '@param map the map that needs to be decorated, cannot be null',\n      '@param map the map to wrap and decorate, cannot be null',\n      '@param map the underlying map that will be decorated, must not be null'\n    ]\n  },\n  {\n    'tag': '@return true if the distribution has been loaded',\n    'alternatives': [\n      '@return true if the distribution was successfully loaded',\n      '@return true if the loading of the distribution was successful',\n      '@return true if the distribution loading was completed',\n      '@return true if the distribution has been successfully loaded',\n      '@return true if the distribution has finished loading'\n    ]\n  },\n  {\n    'tag': '@param seed random generator seed',\n    'alternatives': [\n      '@param seed the seed for the random generator',\n      '@param seed the seed value for the random generator',\n      '@param seed the initial seed for the random generator',\n      '@param seed the seed parameter for the random generator',\n      '@param seed the random generator seed to be used'\n    ]\n  },\n  {\n    'tag': '@param i the index of the bin',\n    'alternatives': [\n      '@param i the bin index',\n      '@param i the index value of the bin',\n      '@param i the bin position',\n      '@param i the specific bin index',\n      '@param i the bin identifier'\n    ]\n  },\n  {\n    'tag': '@return the probability that selection begins in bin i',\n    'alternatives': [\n      '@return the probability of starting selection in bin i',\n      '@return the probability for the start of selection in bin i',\n      '@return the probability of selection starting in bin i',\n      '@return the probability that choose begins in bin i',\n      '@return the probability of beginning selection in bin i'\n    ]\n  },\n  {\n    'tag': '@param i the index of the bin',\n    'alternatives': [\n      '@param i the bin index',\n      '@param i the index value of the bin',\n      '@param i the bin position',\n      '@param i the specific bin index',\n      '@param i the bin identifier'\n    ]\n  },\n  {\n    'tag': '@return the probability that selection begins in a bin below bin i.',\n    'alternatives': [\n      '@return the probability of starting selection in a bin below bin i',\n      '@return the probability for the start of selection in a bin below bin i',\n      '@return the probability of selection starting in a bin below bin i',\n      '@return the probability that choose begins in a bin below bin i',\n      '@return the probability of beginning selection in a bin below bin i'\n    ]\n  },\n  {\n    'tag': '@param i index of the bin',\n    'alternatives': [\n      '@param i bin index',\n      '@param i index value of the bin',\n      '@param i bin position',\n      '@param i specific bin index',\n      '@param i bin identifier'\n    ]\n  },\n  {\n    'tag': '@return the difference in the within-bin kernel cdf between the\\nupper and lower endpoints of bin i',\n    'alternatives': [\n      '@return the range between the upper and lower endpoints of bin i in the within-bin kernel cdf',\n      '@return the discrepancy of the within-bin kernel cdf between the upper and lower endpoints of bin i',\n      '@return the variation in the within-bin kernel cdf from the upper to lower endpoints of bin i',\n      '@return the within-bin kernel cdf difference between the upper and lower endpoints of bin i',\n      '@return the divergence in the within-bin kernel cdf across bin i from top to bottom'\n    ]\n  },\n  {\n    'tag': '@param x the value to locate within a bin',\n    'alternatives': [\n      '@param x the value to find the location within a bin',\n      '@param x the value to search for within a bin',\n      '@param x the value to locate inside a bin',\n      '@param x the value to determine the position within a bin',\n      '@param x the value to identify the placement within a bin'\n    ]\n  },\n  {\n    'tag': '@return the within-bin kernel of the bin containing x',\n    'alternatives': [\n      '@return the kernel within the bin that contains x',\n      '@return the kernel of the bin where x is located',\n      '@return the kernel value of the bin that holds x',\n      '@return the kernel within the bin that includes x',\n      '@return the bin\\'s kernel value that encloses x'\n    ]\n  },\n  {\n    'tag': '@param binIndex maximum bin index',\n    'alternatives': [\n      '@param binIndex the highest index value for a bin',\n      '@param binIndex the maximum index of a bin',\n      '@param binIndex the maximum value allowed for a bin index',\n      '@param binIndex the maximum bin position',\n      '@param binIndex the upper limit for bin indices'\n    ]\n  },\n  {\n    'tag': '@return sum of the probabilities of bins through binIndex',\n    'alternatives': [\n      '@return total sum of probabilities for bins up to binIndex',\n      '@return the accumulation of probabilities for bins until binIndex',\n      '@return the total probability sum of all bins prior to binIndex',\n      '@return the sum of probabilities for bins preceding binIndex',\n      '@return the aggregated probability of bins leading up to binIndex'\n    ]\n  },\n  {\n    'tag': '@param bStats summary statistics for the bin',\n    'alternatives': [\n      '@param bStats the summarized statistics for the bin',\n      '@param bStats the statistical summary for the bin',\n      '@param bStats the summary characteristics for the bin',\n      '@param bStats the statistics summary of the bin',\n      '@param bStats the summarization of statistics for the bin'\n    ]\n  },\n  {\n    'tag': '@return within-bin kernel parameterized by bStats',\n    'alternatives': [\n      '@return the within-bin kernel with the given bStats parameter',\n      '@return the bStats parameterized within-bin kernel',\n      '@return the kernel within the bin parameterized by bStats',\n      '@return the within-bin kernel that depends on bStats',\n      '@return the kernel within the bin using the bStats parameter'\n    ]\n  },\n  {\n    'tag': '@param generator random data generator (may be null, resulting in default JDK generator)',\n    'alternatives': [\n      '@param generator the random data generator (optional, if not provided, the default JDK generator will be used)',\n      '@param generator the generator for random data (can be null, in which case the default JDK generator will be used)',\n      '@param generator the random number generator (nullable, if not specified, the default JDK generator will be employed)',\n      '@param generator the random data provider (possibly null, in such case, the default JDK generator will be employed)',\n      '@param generator the source of random data (may be null, if not provided, the default JDK generator will be used)'\n    ]\n  },\n  {\n    'tag': '@param generator random data generator (may be null, resulting in default JDK generator)',\n    'alternatives': [\n      '@param generator the random data generator (optional, if not provided, the default JDK generator will be used)',\n      '@param generator the generator for random data (can be null, in which case the default JDK generator will be used)',\n      '@param generator the random number generator (nullable, if not specified, the default JDK generator will be employed)',\n      '@param generator the random data provider (possibly null, in such case, the default JDK generator will be employed)',\n      '@param generator the source of random data (may be null, if not provided, the default JDK generator will be used)'\n    ]\n  },\n  {\n    'tag': '@param binCount number of bins',\n    'alternatives': [\n      '@param binCount the count of bins',\n      '@param binCount the total number of bins',\n      '@param binCount the quantity of bins',\n      '@param binCount the number of available bins',\n      '@param binCount the size of the bin collection'\n    ]\n  }\n]"