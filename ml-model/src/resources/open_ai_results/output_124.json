"output = [\n  {\n    'tag': '@throws NullPointerException if any of {@code elements} is null',\n    'alternatives': [\n      '@throws NullPointerException if any of {@code elements} is equal to null',\n      '@throws NullPointerException if any of the {@code elements} is null',\n      '@throws NullPointerException if any of the {@code elements} equals null',\n      '@throws NullPointerException if null is encountered in any of the {@code elements}',\n      '@throws NullPointerException in case any of {@code elements} is null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if {@code comparator} or any of\\n    {@code elements} is null',\n    'alternatives': [\n      '@throws NullPointerException if any of {@code elements} or {@code comparator} is null',\n      '@throws NullPointerException if any of the {@code elements} or {@code comparator} is null',\n      '@throws NullPointerException if {@code comparator} or any of the {@code elements} equals null',\n      '@throws NullPointerException if any of the {@code elements} or the {@code comparator} is null',\n      '@throws NullPointerException if {@code comparator} or any of the {@code elements} is encountered as null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if {@code comparator} or any of {@code\\n        elements} is null',\n    'alternatives': [\n      '@throws NullPointerException if any of {@code elements} or {@code comparator} is null',\n      '@throws NullPointerException if any of the {@code elements} or {@code comparator} is null',\n      '@throws NullPointerException if {@code comparator} or any of the {@code elements} equals null',\n      '@throws NullPointerException if any of the {@code elements} or the {@code comparator} is null',\n      '@throws NullPointerException if {@code comparator} or any of the {@code elements} is encountered as null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if {@code comparator} or any of\\n    {@code elements} is null',\n    'alternatives': [\n      '@throws NullPointerException if any of {@code elements} or {@code comparator} is null',\n      '@throws NullPointerException if any of the {@code elements} or {@code comparator} is null',\n      '@throws NullPointerException if {@code comparator} or any of the {@code elements} equals null',\n      '@throws NullPointerException if any of the {@code elements} or the {@code comparator} is null',\n      '@throws NullPointerException if {@code comparator} or any of the {@code elements} is encountered as null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if {@code sortedSet} or any of its elements\\n    is null',\n    'alternatives': [\n      '@throws NullPointerException if any element of {@code sortedSet} or the set itself is null',\n      '@throws NullPointerException if {@code sortedSet} or any of its elements equals null',\n      '@throws NullPointerException if any of the elements in {@code sortedSet} or the set itself is null',\n      '@throws NullPointerException if {@code sortedSet} or any of its elements is encountered as null',\n      '@throws NullPointerException if the set {@code sortedSet} or any of its elements is null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if {@code comparator} is null',\n    'alternatives': [\n      '@throws NullPointerException if the {@code comparator} argument is null',\n      '@throws NullPointerException if the {@code comparator} parameter is null',\n      '@throws NullPointerException if {@code comparator} is encountered as null',\n      '@throws NullPointerException in case the {@code comparator} parameter equals null',\n      '@throws NullPointerException if the supplied {@code comparator} is null'\n    ]\n  },\n  {\n    'tag': '@throws UnsupportedOperationException always',\n    'alternatives': [\n      '@throws UnsupportedOperationException under all circumstances',\n      '@throws UnsupportedOperationException at all times',\n      '@throws UnsupportedOperationException in every case',\n      '@throws UnsupportedOperationException regardless',\n      '@throws UnsupportedOperationException without exception'\n    ]\n  },\n  {\n    'tag': '@throws UnsupportedOperationException always',\n    'alternatives': [\n      '@throws UnsupportedOperationException under all circumstances',\n      '@throws UnsupportedOperationException at all times',\n      '@throws UnsupportedOperationException in every case',\n      '@throws UnsupportedOperationException regardless',\n      '@throws UnsupportedOperationException without exception'\n    ]\n  },\n  {\n    'tag': '@throws UnsupportedOperationException always',\n    'alternatives': [\n      '@throws UnsupportedOperationException under all circumstances',\n      '@throws UnsupportedOperationException at all times',\n      '@throws UnsupportedOperationException in every case',\n      '@throws UnsupportedOperationException regardless',\n      '@throws UnsupportedOperationException without exception'\n    ]\n  },\n  {\n    'tag': '@throws UnsupportedOperationException always',\n    'alternatives': [\n      '@throws UnsupportedOperationException under all circumstances',\n      '@throws UnsupportedOperationException at all times',\n      '@throws UnsupportedOperationException in every case',\n      '@throws UnsupportedOperationException regardless',\n      '@throws UnsupportedOperationException without exception'\n    ]\n  },\n  {\n    'tag': '@throws UnsupportedOperationException always',\n    'alternatives': [\n      '@throws UnsupportedOperationException under all circumstances',\n      '@throws UnsupportedOperationException at all times',\n      '@throws UnsupportedOperationException in every case',\n      '@throws UnsupportedOperationException regardless',\n      '@throws UnsupportedOperationException without exception'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if {@code array} is empty',\n    'alternatives': [\n      '@throws IllegalArgumentException in case the {@code array} is empty',\n      '@throws IllegalArgumentException if the {@code array} parameter is empty',\n      '@throws IllegalArgumentException if {@code array} has no elements',\n      '@throws IllegalArgumentException when the {@code array} argument is empty',\n      '@throws IllegalArgumentException if the supplied {@code array} is empty'\n    ]\n  },\n  {\n    'tag': '@param array a <i>nonempty</i> array of unsigned {@code int} values',\n    'alternatives': [\n      '@param array an array of nonempty unsigned {@code int} values',\n      '@param array an array of unsigned {@code int} values that is not empty',\n      '@param array a nonempty array containing unsigned {@code int} values',\n      '@param array a <i>nonempty</i> array with unsigned {@code int} values',\n      '@param array a nonempty array of unsigned {@code int} values'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if {@code array} is empty',\n    'alternatives': [\n      '@throws IllegalArgumentException in case the {@code array} is empty',\n      '@throws IllegalArgumentException if the {@code array} parameter is empty',\n      '@throws IllegalArgumentException if {@code array} has no elements',\n      '@throws IllegalArgumentException when the {@code array} argument is empty',\n      '@throws IllegalArgumentException if the supplied {@code array} is empty'\n    ]\n  },\n  {\n    'tag': '@param array a <i>nonempty</i> array of unsigned {@code int} values',\n    'alternatives': [\n      '@param array an array of nonempty unsigned {@code int} values',\n      '@param array an array of unsigned {@code int} values that is not empty',\n      '@param array a nonempty array containing unsigned {@code int} values',\n      '@param array a <i>nonempty</i> array with unsigned {@code int} values',\n      '@param array a nonempty array of unsigned {@code int} values'\n    ]\n  },\n  {\n    'tag': '@throws ArithmeticException if divisor is 0',\n    'alternatives': [\n      '@throws ArithmeticException when the divisor is 0',\n      '@throws ArithmeticException in case the divisor equals 0',\n      '@throws ArithmeticException if the divisor parameter is 0',\n      '@throws ArithmeticException if 0 is provided as the divisor',\n      '@throws ArithmeticException if the supplied divisor is 0'\n    ]\n  },\n  {\n    'tag': '@throws ArithmeticException if divisor is 0',\n    'alternatives': [\n      '@throws ArithmeticException when the divisor is 0',\n      '@throws ArithmeticException in case the divisor equals 0',\n      '@throws ArithmeticException if the divisor parameter is 0',\n      '@throws ArithmeticException if 0 is provided as the divisor',\n      '@throws ArithmeticException if the supplied divisor is 0'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if {@code s} is null\\n        (in contrast to {@link Integer#parseInt(String)})',\n    'alternatives': [\n      '@throws NullPointerException if {@code s} is null\\n        (as opposed to {@link Integer#parseInt(String)})',\n      '@throws NullPointerException if {@code s} is null\\n        (unlike {@link Integer#parseInt(String)})',\n      '@throws NullPointerException if {@code s} is null\\n        (differently from {@link Integer#parseInt(String)})',\n      '@throws NullPointerException if {@code s} is null\\n        (contrary to {@link Integer#parseInt(String)})',\n      '@throws NullPointerException if {@code s} is null\\n        (not like {@link Integer#parseInt(String)})'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if {@code initialArraySize} is negative',\n    'alternatives': [\n      '@throws IllegalArgumentException when {@code initialArraySize} is negative',\n      '@throws IllegalArgumentException in case {@code initialArraySize} is less than 0',\n      '@throws IllegalArgumentException if {@code initialArraySize} parameter is negative',\n      '@throws IllegalArgumentException if a negative value is provided for {@code initialArraySize}',\n      '@throws IllegalArgumentException if the supplied {@code initialArraySize} is negative'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if {@code estimatedSize} is negative',\n    'alternatives': [\n      '@throws IllegalArgumentException when {@code estimatedSize} is negative',\n      '@throws IllegalArgumentException in case {@code estimatedSize} is less than 0',\n      '@throws IllegalArgumentException if {@code estimatedSize} parameter is negative',\n      '@throws IllegalArgumentException if a negative value is provided for {@code estimatedSize}',\n      '@throws IllegalArgumentException if the supplied {@code estimatedSize} is negative'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if {@code lists}, any one of the {@code lists},\\n    or any element of a provided list is null',\n    'alternatives': [\n      '@throws NullPointerException if any of the {@code lists}, any one of the {@code lists},\\n    or any element of a provided list is null',\n      '@throws NullPointerException if any element of {@code lists}, any one of the {@code lists},\\n    or any element of a provided list is null',\n      '@throws NullPointerException if any {@code lists}, any one of the {@code lists},\\n    or any element in a provided list is null',\n      '@throws NullPointerException if {@code lists}, any one of the {@code lists},\\n    or any element of a provided list is encountered as null',\n      '@throws NullPointerException if any of the {@code lists}, any one of the {@code lists},\\n    or any element of a supplied list is null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if {@code lists}, any one of the\\n    {@code lists}, or any element of a provided list is null',\n    'alternatives': [\n      '@throws NullPointerException if any of the {@code lists}, any one of the\\n    {@code lists}, or any element of a provided list is null',\n      '@throws NullPointerException if any element of {@code lists}, any one of the\\n    {@code lists}, or any element of a provided list is null',\n      '@throws NullPointerException if any {@code lists}, any one of the\\n    {@code lists}, or any element in a provided list is null',\n      '@throws NullPointerException if {@code lists}, any one of the\\n    {@code lists}, or any element of a provided list is encountered as null',\n      '@throws NullPointerException if any of the {@code lists}, any one of the\\n    {@code lists}, or any element of a supplied list is null'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if {@code value} is negative',\n    'alternatives': [\n      '@throws IllegalArgumentException when {@code value} is negative',\n      '@throws IllegalArgumentException in case the {@code value} parameter is negative',\n      '@throws IllegalArgumentException if {@code value} is less than 0',\n      '@throws IllegalArgumentException when a negative value is provided for {@code value}',\n      '@throws IllegalArgumentException if the supplied {@code value} is negative'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if {@code comparator} is null',\n    'alternatives': [\n      '@throws NullPointerException if the {@code comparator} argument is null',\n      '@throws NullPointerException if the {@code comparator} parameter is null',\n      '@throws NullPointerException if {@code comparator} is encountered as null',\n      '@throws NullPointerException in case the {@code comparator} parameter equals null',\n      '@throws NullPointerException if the supplied {@code comparator} is null'\n    ]\n  },\n  {\n    'tag': '@throws UnsupportedOperationException always',\n    'alternatives': [\n      '@throws UnsupportedOperationException under all circumstances',\n      '@throws UnsupportedOperationException at all times',\n      '@throws UnsupportedOperationException in every case',\n      '@throws UnsupportedOperationException regardless',\n      '@throws UnsupportedOperationException without exception'\n    ]\n  }\n]"