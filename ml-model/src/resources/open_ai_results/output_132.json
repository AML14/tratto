"output=[\n{\n    'tag': '@throws NullPointerException if the entry is null',\n    'alternatives': [\n        '@throws NullPointerException in case the entry is null',\n        '@throws NullPointerException if the entry has a null value',\n        '@throws NullPointerException when the entry parameter is null',\n        '@throws NullPointerException if the entry parameter is set to null',\n        '@throws NullPointerException if the entry provided is null'\n    ]\n},\n{\n    'tag': '@param entry the entry to copy, must not be null',\n    'alternatives': [\n        '@param entry the entry to duplicate, should not be null',\n        '@param entry the entry to replicate, must not be null',\n        '@param entry the entry to be duplicated, must not be null',\n        '@param entry the entry that needs to be copied, must not be null',\n        '@param entry the entry to be cloned, must not be null'\n    ]\n},\n{\n    'tag': '@throws NullPointerException if set is null',\n    'alternatives': [\n        '@throws NullPointerException if the set is empty',\n        '@throws NullPointerException in case set is assigned to null',\n        '@throws NullPointerExcepetion if the set is not initialized',\n        '@throws NullPointerException when the set parameter is null',\n        '@throws NullPointerException if the set parameter is set to null'\n    ]\n},\n{\n    'tag': '@param set the set to decorate, must not be null',\n    'alternatives': [\n        '@param set the set to embellish, must not be null',\n        '@param set the set to enhance, should not be null',\n        '@param set the set to modify, must not be null',\n        '@param set the set to adorn, should not be null',\n        '@param set the set to enrich, must not be null'\n    ]\n},\n{\n    'tag': '@return the value',\n    'alternatives': [\n        '@return the result',\n        '@return the output',\n        '@return the returned value',\n        '@return the computed value',\n        '@return the final value'\n    ]\n},\n{\n    'tag': '@param predicates the predicates to check, not cloned, not null',\n    'alternatives': [\n        '@param predicates the predicates for verification, not duplicated, not null',\n        '@param predicates the predicates to validate, not cloned, not null',\n        '@param predicates the predicates to examine, not cloned, not null',\n        '@param predicates the predicates to verify, not duplicated, not null',\n        '@param predicates the predicates to inspect, not cloned, not null'\n    ]\n},\n{\n    'tag': '@throws NullPointerException if the predicates array is null',\n    'alternatives': [\n        '@throws NullPointerException when the predicates array is null',\n        '@throws NullPointerException in case the predicates array is empty',\n        '@throws NullPointerException if predicates array is assigned to null',\n        '@throws NullPointerException if the array of predicates is null',\n        '@throws NullPointerException if the predicates array has a null value'\n    ]\n},\n{\n    'tag': '@throws NullPointerException if any predicate in the array is null',\n    'alternatives': [\n        '@throws NullPointerException if any predicate in the array is assigned to null',\n        '@throws NullPointerException if one of the predicates in the array is null',\n        '@throws NullPointerException if there is a null predicate in the array',\n        '@throws NullPointerException when a predicate in the array is null',\n        '@throws NullPointerException if an element of the predicate array is null'\n    ]\n},\n{\n    'tag': '@param predicates the predicates to check, cloned, not null',\n    'alternatives': [\n        '@param predicates the cloned predicates to confirm, not null',\n        '@param predicates the copied predicates to validate, not null',\n        '@param predicates the cloned predicates to examine, not null',\n        '@param predicates the duplicated predicates to verify, not null',\n        '@param predicates the copied predicates to evaluate, not null'\n    ]\n},\n{\n    'tag': '@throws NullPointerException if the predicates array is null',\n    'alternatives': [\n        '@throws NullPointerException when the predicates array is null',\n        '@throws NullPointerException in case the predicates array is empty',\n        '@throws NullPointerException if predicates array is assigned to null',\n        '@throws NullPointerException if the array of predicates is null',\n        '@throws NullPointerException if the predicates array has a null value'\n    ]\n},\n{\n    'tag': '@param predicates the predicates to check, cloned, not null',\n    'alternatives': [\n        '@param predicates the cloned predicates to confirm, not null',\n        '@param predicates the copied predicates to validate, not null',\n        '@param predicates the cloned predicates to examine, not null',\n        '@param predicates the duplicated predicates to verify, not null',\n        '@param predicates the copied predicates to evaluate, not null'\n    ]\n},\n{\n    'tag': '@throws NullPointerException if <i>obj1</i> is <code>null</code>,\\n        or when <code>((Comparable)obj1).compareTo(obj2)</code> does',\n    'alternatives': [\n        '@throws NullPointerException if <i>obj1</i> is <code>null</code>,\\n        or if <code>((Comparable)obj1).compareTo(obj2)</code> does',\n        '@throws NullPointerException when <i>obj1</i> is <code>null</code>,\\n        or when <code>((Comparable)obj1).compareTo(obj2)</code> does',\n        '@throws NullPointerException if <i>obj1</i> is <code>null</code>,\\n        or when <code>((Comparable)obj1).compareTo(obj2)</code> returns',\n        '@throws NullPointerException if <i>obj1</i> is <code>null</code>,\\n        or if <code>((Comparable)obj1).compareTo(obj2)</code> returns',\n        '@throws NullPointerException in case <i>obj1</i> is <code>null</code>,\\n        or when <code>((Comparable)obj1).compareTo(obj2)</code> does not'\n    ]\n},\n{\n    'tag': '@throws NullPointerException if the classToInstantiate is null',\n    'alternatives': [\n        '@throws NullPointerException when the classToInstantiate is null',\n        '@throws NullPointerException if the classToInstantiate is not provided',\n        '@throws NullPointerException in case the classToInstantiate is not initialized',\n        '@throws NullPointerException if the classToInstantiate parameter is set to null',\n        '@throws NullPointerException if the classToInstantiate is assigned to null'\n    ]\n},\n{\n    'tag': '@throws NullPointerException if the classToInstantiate is null',\n    'alternatives': [\n        '@throws NullPointerException when the classToInstantiate is null',\n        '@throws NullPointerException if the classToInstantiate is not provided',\n        '@throws NullPointerException in case the classToInstantiate is not initialized',\n        '@throws NullPointerException if the classToInstantiate parameter is set to null',\n        '@throws NullPointerException if the classToInstantiate is assigned to null'\n    ]\n},\n{\n    'tag': '@throws NullPointerException if the argument is null',\n    'alternatives': [\n        '@throws NullPointerException when the argument is null',\n        '@throws NullPointerException if the argument has a null value',\n        '@throws NullPointerException in case the argument is not initialized',\n        '@throws NullPointerException if the argument parameter is set to null',\n        '@throws NullPointerException if the argument is assigned to null'\n    ]\n},\n{\n    'tag': '@param get to wrap, must not be null',\n    'alternatives': [\n        '@param get the object to enclose, must not be null',\n        '@param get the object to encapsulate, must not be null',\n        '@param get the object to envelop, must not be null',\n        '@param get the object to surround, must not be null',\n        '@param get the object to include, must not be null'\n    ]\n},\n{\n    'tag': '@throws NullPointerException if the argument is null',\n    'alternatives': [\n        '@throws NullPointerException when the argument is null',\n        '@throws NullPointerException if the argument has a null value',\n        '@throws NullPointerException in case the argument is not initialized',\n        '@throws NullPointerException if the argument parameter is set to null',\n        '@throws NullPointerException if the argument is assigned to null'\n    ]\n},\n{\n    'tag': '@param put to wrap, must not be null',\n    'alternatives': [\n        '@param put the object to enclose, must not be null',\n        '@param put the object to encapsulate, must not be null',\n        '@param put the object to envelop, must not be null',\n        '@param put the object to surround, must not be null',\n        '@param put the object to include, must not be null'\n    ]\n},\n{\n    'tag': '@throws NullPointerException if set or predicate is null',\n    'alternatives': [\n        '@throws NullPointerException if set or predicate are null',\n        '@throws NullPointerException in case set or predicate are assigned to null',\n        '@throws NullPointerException if set or predicate are not initialized',\n        '@throws NullPointerException when set or predicate parameters are null',\n        '@throws NullPointerException if set or predicate are assigned to null values'\n    ]\n},\n{\n    'tag': '@param set the set to decorate, must not be null',\n    'alternatives': [\n        '@param set the set to embellish, must not be null',\n        '@param set the set to enhance, should not be null',\n        '@param set the set to modify, must not be null',\n        '@param set the set to adorn, should not be null',\n        '@param set the set to enrich, must not be null'\n    ]\n},\n{\n    'tag': '@param predicate the predicate to use for validation, must not be null',\n    'alternatives': [\n        '@param predicate the predicate to employ for validation, should not be null',\n        '@param predicate the predicate to apply for verification, must not be null',\n        '@param predicate the predicate to utilize for validation, must not be null',\n        '@param predicate the predicate to implement for validation, should not be null',\n        '@param predicate the predicate to employ for verification, must not be null'\n    ]\n},\n{\n    'tag': '@throws NullPointerException if set or predicate is null',\n    'alternatives': [\n        '@throws NullPointerException if set or predicate are null',\n        '@throws NullPointerException in case set or predicate are assigned to null',\n        '@throws NullPointerException if set or predicate are not initialized',\n        '@throws NullPointerException when set or predicate parameters are null',\n        '@throws NullPointerException if set or predicate are assigned to null values'\n    ]\n},\n{\n    'tag': '@param set the set to decorate, must not be null',\n    'alternatives': [\n        '@param set the set to embellish, must not be null',\n        '@param set the set to enhance, should not be null',\n        '@param set the set to modify, must not be null',\n        '@param set the set to adorn, should not be null',\n        '@param set the set to enrich, must not be null'\n    ]\n},\n{\n    'tag': '@param predicate the predicate to use for validation, must not be null',\n    'alternatives': [\n        '@param predicate the predicate to employ for validation, should not be null',\n        '@param predicate the predicate to apply for verification, must not be null',\n        '@param predicate the predicate to utilize for validation, must not be null',\n        '@param predicate the predicate to implement for validation, should not be null',\n        '@param predicate the predicate to employ for verification, must not be null'\n    ]\n},\n{\n    'tag': '@throws NullPointerException if bag is null',\n    'alternatives': [\n        '@throws NullPointerException when bag is null',\n        '@throws NullPointerException if bag has a null value',\n        '@throws NullPointerException in case bag is not initialized',\n        '@throws NullPointerException if the bag parameter is set to null',\n        '@throws NullPointerException if bag is assigned to null'\n    ]\n}\n]\r\n"