"[\n  {\n    \"tag\": \"@throws NullPointerException if any of {@code elements} (or {@code\\n    elements} itself) is null\",\n    \"alternatives\": [\n      \"@throws NullPointerException when any of {@code elements} (or {@code\\n    elements} itself) is null\",\n      \"@throws NullPointerException in case any of {@code elements} (or {@code\\n    elements} itself) is null\",\n      \"@throws NullPointerException if null is found among {@code elements} (or {@code\\n    elements} itself)\",\n      \"@throws NullPointerException if any of the {@code elements} (or {@code\\n    elements} itself) is null\",\n      \"@throws NullPointerException if there's a null value in either {@code elements} (or {@code\\n    elements} itself)\"\n    ]\n  },\n  {\n    \"tag\": \"@param sortedList the list to be searched\",\n    \"alternatives\": [\n      \"@param sortedList the list to search in\",\n      \"@param sortedList the list that needs to be searched\",\n      \"@param sortedList, the list to be queried\",\n      \"@param sortedList, the list that requires searching\",\n      \"@param sortedList is the list to be considered for searching\"\n    ]\n  },\n  {\n    \"tag\": \"@param bits Sort order for each Comparator.  Extra bits are ignored,\\n              unless extra Comparators are added by another method.\",\n    \"alternatives\": [\n      \"@param bits Sort order for each Comparator. Ecess bits are ignored,\\n              unless another method adds more Comparators.\",\n      \"@param bits Sort order for each Comparator. Additional bits are disregarded,\\n              except if extra Comparators are appended by another method.\",\n      \"@param bits Sort order for each Comparator. Extra bits are not taken into account,\\n              unless additional Comparators are included by another method.\",\n      \"@param bits Sort order for each Comparator. Any extra bits are not considered,\\n              unless additional Comparators are introduced by another method.\",\n      \"@param bits Sort order for each Comparator. Extra bits are not taken into consideration,\\n              unless further Comparators are added by another method.\"\n    ]\n  },\n  {\n    \"tag\": \"@return the true first singleton BooleanComparator\",\n    \"alternatives\": [\n      \"@return the singleton BooleanComparator where true comes first\",\n      \"@return the first singleton BooleanComparator with true as the primary order\",\n      \"@return the BooleanComparator singleton with true as the primary sorting order\",\n      \"@return the singleton BooleanComparator with true as the initial order\",\n      \"@return the singleton BooleanComparator where true is the leading order\"\n    ]\n  },\n  {\n    \"tag\": \"@return the false first singleton BooleanComparator\",\n    \"alternatives\": [\n      \"@return the singleton BooleanComparator where false comes first\",\n      \"@return the first singleton BooleanComparator with false as the primary order\",\n      \"@return the BooleanComparator singleton with false as the primary sorting order\",\n      \"@return the singleton BooleanComparator with false as the initial order\",\n      \"@return the singleton BooleanComparator where false is the leading order\"\n    ]\n  },\n  {\n    \"tag\": \"@param trueFirst when <code>true</code>, sort\\n<code>true</code> <code>Boolean</code>s before <code>false</code>\",\n    \"alternatives\": [\n      \"@param trueFirst if <code>true</code>, prioritize\\n<code>true</code> <code>Boolean</code>s over <code>false</code>\",\n      \"@param trueFirst when <code>true</code>, arrange\\n<code>true</code> <code>Boolean</code>s ahead of <code>false</code>\",\n      \"@param trueFirst if <code>true</code>, place\\n<code>true</code> <code>Boolean</code>s before <code>false</code>\",\n      \"@param trueFirst when <code>true</code>, order\\n<code>true</code> <code>Boolean</code>s prior to <code>false</code>\",\n      \"@param trueFirst if <code>true</code>, sort\\n<code>true</code> <code>Boolean</code>s prior to <code>false</code>\"\n    ]\n  },\n  {\n    \"tag\": \"@return a singleton BooleanComparator instance\",\n    \"alternatives\": [\n      \"@return a singleton instance of BooleanComparator\",\n      \"@return a singleton instance of BooleanComparator class\",\n      \"@return a singleton instance of the BooleanComparator\",\n      \"@return an instance of the singleton BooleanComparator\",\n      \"@return an instance of the BooleanComparator singleton\"\n    ]\n  },\n  {\n    \"tag\": \"@param b1 the first boolean to compare\",\n    \"alternatives\": [\n      \"@param b1 first boolean to be compared\",\n      \"@param b1 the initial boolean for comparison\",\n      \"@param b1 the first boolean value to compare\",\n      \"@param b1 first boolean value to be compared\",\n      \"@param b1 represents the initial boolean for comparison\"\n    ]\n  },\n  {\n    \"tag\": \"@param b2 the second boolean to compare\",\n    \"alternatives\": [\n      \"@param b2 second boolean to be compared\",\n      \"@param b2 the subsequent boolean for comparison\",\n      \"@param b2 the second boolean value to compare\",\n      \"@param b2 second boolean value to be compared\",\n      \"@param b2 represents the subsequent boolean for comparison\"\n    ]\n  },\n  {\n    \"tag\": \"@return negative if obj1 is less, positive if greater, zero if equal\",\n    \"alternatives\": [\n      \"@return negative if obj1 is smaller, positive if greater, zero if equal\",\n      \"@return negative if obj1 is lesser, positive if greater, zero if equal\",\n      \"@return negative if obj1 is lower, positive if greater, zero if equal\",\n      \"@return negative if obj1 is below, positive if greater, zero if equal\",\n      \"@return negative if obj1 is inferior, positive if greater, zero if equal\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NullPointerException when either argument <code>null</code>\",\n    \"alternatives\": [\n      \"@throws NullPointerException if either argument <code>null</code>\",\n      \"@throws NullPointerException in case any argument is <code>null</code>\",\n      \"@throws NullPointerException when any argument <code>null</code>\",\n      \"@throws NullPointerException if either parameter <code>null</code>\",\n      \"@throws NullPointerException if any of the arguments <code>null</code>\"\n    ]\n  },\n  {\n    \"tag\": \"@return a hash code for this comparator.\",\n    \"alternatives\": [\n      \"@return the hash code for this comparator.\",\n      \"@return the hash code of this comparator.\",\n      \"@return the hash code generated for this comparator.\",\n      \"@return a generated hash code for this comparator.\",\n      \"@return the computed hash code of this comparator.\"\n    ]\n  },\n  {\n    \"tag\": \"@param object the object to compare to\",\n    \"alternatives\": [\n      \"@param object object to compare against\",\n      \"@param object the object to be compared against\",\n      \"@param object the object for comparison\",\n      \"@param object object to be compared to\",\n      \"@param object represents the object to compare against\"\n    ]\n  },\n  {\n    \"tag\": \"@return true if equal\",\n    \"alternatives\": [\n      \"@return true if they are equal\",\n      \"@return true if they are identical\",\n      \"@return true if the two are equal\",\n      \"@return true if they have the same value\",\n      \"@return true if they possess equal values\"\n    ]\n  },\n  {\n    \"tag\": \"@return the trueFirst flag\",\n    \"alternatives\": [\n      \"@return the flag indicating trueFirst\",\n      \"@return the flag that specifies trueFirst\",\n      \"@return the trueFirst indicator\",\n      \"@return the flag distinguishing trueFirst\",\n      \"@return the trueFirst marker\"\n    ]\n  },\n  {\n    \"tag\": \"@param trueFirst when <code>true</code>, sort\\n <code>true</code> boolean values before <code>false</code>\",\n    \"alternatives\": [\n      \"@param trueFirst if <code>true</code>, prioritize\\n <code>true</code> boolean values over <code>false</code>\",\n      \"@param trueFirst when <code>true</code>, arrange\\n <code>true</code> boolean values ahead of <code>false</code>\",\n      \"@param trueFirst if <code>true</code>, place\\n <code>true</code> boolean values before <code>false</code>\",\n      \"@param trueFirst when <code>true</code>, order\\n <code>true</code> boolean values prior to <code>false</code>\",\n      \"@param trueFirst if <code>true</code>, sort\\n <code>true</code> boolean values prior to <code>false</code>\"\n    ]\n  },\n  {\n    \"tag\": \"@param obj1 the first object to compare\",\n    \"alternatives\": [\n      \"@param obj1 first object to be compared\",\n      \"@param obj1 the initial object for comparison\",\n      \"@param obj1 the first object to compare against\",\n      \"@param obj1 first object to compare with\",\n      \"@param obj1 represents the initial object for comparison\"\n    ]\n  },\n  {\n    \"tag\": \"@param obj2 the second object to compare\",\n    \"alternatives\": [\n      \"@param obj2 second object to be compared\",\n      \"@param obj2 the subsequent object for comparison\",\n      \"@param obj2 the second object to compare against\",\n      \"@param obj2 second object to compare with\",\n      \"@param obj2 represents the subsequent object for comparison\"\n    ]\n  },\n  {\n    \"tag\": \"@return negative if obj1 is less, positive if greater, zero if equal\",\n    \"alternatives\": [\n      \"@return negative if obj1 is smaller, positive if greater, zero if equal\",\n      \"@return negative if obj1 is lesser, positive if greater, zero if equal\",\n      \"@return negative if obj1 is lower, positive if greater, zero if equal\",\n      \"@return negative if obj1 is below, positive if greater, zero if equal\",\n      \"@return negative if obj1 is inferior, positive if greater, zero if equal\"\n    ]\n  },\n  {\n    \"tag\": \"@return a suitable hash code\",\n    \"alternatives\": [\n      \"@return an appropriate hash code\",\n      \"@return a valid hash code\",\n      \"@return a fitting hash code\",\n      \"@return a suitable hash value\",\n      \"@return a proper hash code\"\n    ]\n  },\n  {\n    \"tag\": \"@param object the object to compare to\",\n    \"alternatives\": [\n      \"@param object object to compare against\",\n      \"@param object the object to be compared against\",\n      \"@param object the object for comparison\",\n      \"@param object object to be compared to\",\n      \"@param object represents the object to compare against\"\n    ]\n  },\n  {\n    \"tag\": \"@return true if equal\",\n    \"alternatives\": [\n      \"@return true if they are equal\",\n      \"@return true if they are identical\",\n      \"@return true if the two are equal\",\n      \"@return true if they have the same value\",\n      \"@return true if they possess equal values\"\n    ]\n  },\n  {\n    \"tag\": \"@param comparator Comparator to reverse\",\n    \"alternatives\": [\n      \"@param comparator Comparator to be reversed\",\n      \"@param comparator Comparator for reversing\",\n      \"@param comparator the Comparator to invert\",\n      \"@param comparator the Comparator to be flipped\",\n      \"@param comparator represents the Comparator to reverse\"\n    ]\n  },\n  {\n    \"tag\": \"@param <E> the element type\",\n    \"alternatives\": [\n      \"@param <E> element type\",\n      \"@param <E> the type of elements\",\n      \"@param <E> the type of the element\",\n      \"@param <E> the generic type parameter\",\n      \"@param <E> represents the element type\"\n    ]\n  },\n  {\n    \"tag\": \"@return the singleton ComparableComparator\",\n    \"alternatives\": [\n      \"@return the ComparableComparator singleton\",\n      \"@return the singleton instance of ComparableComparator\",\n      \"@return the ComparableComparator instance\",\n      \"@return the singleton ComparableComparator object\",\n      \"@return the ComparableComparator as singleton\"\n    ]\n  }\n]"