"[\n  {\n    \"tag\": \"@param graph The graph to which this node belongs.\",\n    \"alternatives\": [\n      \"@param graph The graph to which this node is associated.\",\n      \"@param graph The graph that contains this node.\",\n      \"@param graph The graph this node is a part of.\",\n      \"@param graph The graph in which this node exists.\",\n      \"@param graph The graph to which this node is connected.\"\n    ]\n  },\n  {\n    \"tag\": \"@param id Unique identifier of this node.\",\n    \"alternatives\": [\n      \"@param id The unique identifier for this node.\",\n      \"@param id The identifier that distinguishes this node.\",\n      \"@param id The unique ID of this node.\",\n      \"@param id The identifier that is unique to this node.\",\n      \"@param id The unique identification of this node.\"\n    ]\n  },\n  {\n    \"tag\": \"@param id Unique identifier of the graph.\",\n    \"alternatives\": [\n      \"@param id The unique identifier for the graph.\",\n      \"@param id The identifier that distinguishes the graph.\",\n      \"@param id The unique ID of the graph.\",\n      \"@param id The identifier that is unique to the graph.\",\n      \"@param id The unique identification of the graph.\"\n    ]\n  },\n  {\n    \"tag\": \"@param strictChecking If true any non-fatal error throws an exception.\",\n    \"alternatives\": [\n      \"@param strictChecking If set to true, any non-fatal error will result in an exception being thrown.\",\n      \"@param strictChecking If enabled, any non-fatal error will throw an exception.\",\n      \"@param strictChecking If true, exceptions will be thrown for any non-fatal errors.\",\n      \"@param strictChecking If set to true, exceptions are thrown for non-fatal errors.\",\n      \"@param strictChecking If true, throw an exception for any non-fatal errors.\"\n    ]\n  },\n  {\n    \"tag\": \"@param initialNodeCapacity Initial capacity of the node storage data structures. Use this\\n           if you know the approximate maximum number of nodes of the\\n           graph. The graph can grow beyond this limit, but storage\\n           reallocation is expensive operation.\",\n    \"alternatives\": [\n      \"@param initialNodeCapacity Initial capacity of the node storage. Use this if you have an estimate of the maximum number of nodes in the graph. The graph may exceed this capacity, but reallocating storage is costly.\",\n      \"@param initialNodeCapacity Starting size for the node storage data structures. Use this if you can estimate the maximum number of nodes in the graph. The graph may expand beyond this size, but resizing storage is costly.\",\n      \"@param initialNodeCapacity The initial capacity of the node storage. Use this if you know the approximate maximum number of nodes in the graph. The graph can exceed this capacity, but reallocating storage is an expensive operation.\",\n      \"@param initialNodeCapacity The initial capacity of the node storage data structures. Use this if you have an estimate of the maximum number of nodes in the graph. The graph can grow beyond this limit, but resizing storage is expensive.\",\n      \"@param initialNodeCapacity The initial capacity of the node storage. Use this if you know the approximate maximum number of nodes in the graph. The graph may exceed this capacity, but reallocating storage is costly.\"\n    ]\n  },\n  {\n    \"tag\": \"@param initialEdgeCapacity Initial capacity of the edge storage data structures. Use this\\n           if you know the approximate maximum number of edges of the\\n           graph. The graph can grow beyond this limit, but storage\\n           reallocation is expensive operation.\",\n    \"alternatives\": [\n      \"@param initialEdgeCapacity Initial capacity of the edge storage. Use this if you have an estimate of the maximum number of edges in the graph. The graph may exceed this capacity, but reallocating storage is costly.\",\n      \"@param initialEdgeCapacity Starting size for the edge storage data structures. Use this if you can estimate the maximum number of edges in the graph. The graph may expand beyond this size, but resizing storage is costly.\",\n      \"@param initialEdgeCapacity The initial capacity of the edge storage. Use this if you know the approximate maximum number of edges in the graph. The graph can exceed this capacity, but reallocating storage is an expensive operation.\",\n      \"@param initialEdgeCapacity The initial capacity of the edge storage data structures. Use this if you have an estimate of the maximum number of edges in the graph. The graph can grow beyond this limit, but resizing storage is expensive.\",\n      \"@param initialEdgeCapacity The initial capacity of the edge storage. Use this if you know the approximate maximum number of edges in the graph. The graph may exceed this capacity, but reallocating storage is costly.\"\n    ]\n  },\n  {\n    \"tag\": \"@return a synchronized wrapper for g\",\n    \"alternatives\": [\n      \"@return a wrapper for g that provides thread-safety.\",\n      \"@return a synchronized version of g.\",\n      \"@return a thread-safe wrapper for g.\",\n      \"@return a synchronized representation of g.\",\n      \"@return a wrapped version of g with synchronization.\"\n    ]\n  },\n  {\n    \"tag\": \"@param graphs graphs to merge\",\n    \"alternatives\": [\n      \"@param graphs The list of graphs to be merged.\",\n      \"@param graphs The graphs that will be combined.\",\n      \"@param graphs The input graphs that need to be merged.\",\n      \"@param graphs The collection of graphs to merge.\",\n      \"@param graphs The set of graphs that should be merged.\"\n    ]\n  },\n  {\n    \"tag\": \"@return merge result\",\n    \"alternatives\": [\n      \"@return the result of the merge operation.\",\n      \"@return the outcome of merging.\",\n      \"@return the merged result.\",\n      \"@return the output after merging.\",\n      \"@return the result of the combination.\"\n    ]\n  },\n  {\n    \"tag\": \"@param result destination graph.\",\n    \"alternatives\": [\n      \"@param result The graph to which the merge destination will be assigned.\",\n      \"@param result The graph that will receive the merged data.\",\n      \"@param result The graph object that will hold the merged output.\",\n      \"@param result The graph where the merged data will be placed.\",\n      \"@param result The graph to which the merge will be applied.\"\n    ]\n  },\n  {\n    \"tag\": \"@param graphs all graphs that will be merged in result.\",\n    \"alternatives\": [\n      \"@param graphs The list of all graphs that will be merged into the result.\",\n      \"@param graphs The complete set of graphs to be merged into the result.\",\n      \"@param graphs All the graphs that will be combined and merged into the result.\",\n      \"@param graphs The collection of all input graphs to be merged into the result.\",\n      \"@param graphs The set of all the graphs that will be merged into the result.\"\n    ]\n  },\n  {\n    \"tag\": \"@param g the graph to clone\",\n    \"alternatives\": [\n      \"@param g The graph that will be cloned.\",\n      \"@param g The graph object to be duplicated.\",\n      \"@param g The graph that needs to be copied.\",\n      \"@param g The graph that will be replicated.\",\n      \"@param g The graph to be cloned.\"\n    ]\n  },\n  {\n    \"tag\": \"@return a copy of g\",\n    \"alternatives\": [\n      \"@return a duplicate of g.\",\n      \"@return a replicated version of g.\",\n      \"@return a cloned representation of g.\",\n      \"@return a copied graph based on g.\",\n      \"@return a new graph that is equivalent to g.\"\n    ]\n  },\n  {\n    \"tag\": \"@param source \",\n    \"alternatives\": [\n      \"@param source The source of the data.\",\n      \"@param source The origin of the data.\",\n      \"@param source The data source object.\",\n      \"@param source The location from which the data is obtained.\",\n      \"@param source The input of the data.\"\n    ]\n  }\n]"