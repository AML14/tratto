"output = [\n  {\n    'tag': '@return {@code this * v}',\n    'alternatives': [\n      '@return the result of multiplying {@code this} by {@code v}',\n      '@return the product of {@code this} and {@code v}',\n      '@return the multiplication of {@code this} with {@code v}'\n    ]\n  },\n  {\n    'tag': '@throws DimensionMismatchException if the length of {@code v} does not\\nmatch the column dimension of {@code this}.',\n    'alternatives': [\n      '@throws DimensionMismatchException if the size of {@code v} does not correspond\\nto the column dimension of {@code this}.',\n      '@throws DimensionMismatchException if the length of {@code v} doesn\\'t\\nmatch the column size of {@code this}.',\n      '@throws DimensionMismatchException if {@code v} does not have the same length as the number of columns in {@code this}.'\n    ]\n  },\n  {\n    'tag': '@param v the vector to operate on',\n    'alternatives': [\n      '@param v the vector to perform operations on',\n      '@param v the vector to apply operations to',\n      '@param v the vector on which the operations will be performed'\n    ]\n  },\n  {\n    'tag': '@return {@code v * this}',\n    'alternatives': [\n      '@return the result of premultiplying {@code v} by {@code this}',\n      '@return the product of {@code v} with {@code this}',\n      '@return the multiplication of {@code v} and {@code this}'\n    ]\n  },\n  {\n    'tag': '@throws DimensionMismatchException if the length of {@code v} does not\\nmatch the row dimension of {@code this}.',\n    'alternatives': [\n      '@throws DimensionMismatchException if the size of {@code v} does not correspond\\nto the row dimension of {@code this}.',\n      '@throws DimensionMismatchException if the length of {@code v} doesn\\'t\\nmatch the row size of {@code this}.',\n      '@throws DimensionMismatchException if {@code v} does not have the same length as the number of rows in {@code this}.'\n    ]\n  },\n  {\n    'tag': '@param v the row vector to premultiply by',\n    'alternatives': [\n      '@param v the vector to multiply with the rows of this matrix',\n      '@param v the row vector to multiply with',\n      '@param v the vector to be premultiplied by the rows of this matrix'\n    ]\n  },\n  {\n    'tag': '@param visitor visitor used to process all matrix entries',\n    'alternatives': [\n      '@param visitor the visitor used to iterate through all matrix entries',\n      '@param visitor the visitor that will process all matrix elements',\n      '@param visitor the visitor responsible for visiting all matrix entries'\n    ]\n  },\n  {\n    'tag': '@return the value returned by {@link RealMatrixChangingVisitor#end()} at the end\\nof the walk',\n    'alternatives': [\n      '@return the final value returned by {@link RealMatrixChangingVisitor#end()}',\n      '@return the result obtained after the execution of {@link RealMatrixChangingVisitor#end()}',\n      '@return the value obtained from {@link RealMatrixChangingVisitor#end()} at the end'\n    ]\n  },\n  {\n    'tag': '@throws IOException if an I/O error occurs',\n    'alternatives': [\n      '@throws IOException in case of an I/O error',\n      '@throws IOException if any I/O error happens',\n      '@throws IOException if there is an I/O error'\n    ]\n  },\n  {\n    'tag': '@throws IOException if an I/O error occurs in the process of reading the size of this source',\n    'alternatives': [\n      '@throws IOException when an I/O error happens while reading the size of this source',\n      '@throws IOException if an I/O error occurs while trying to read the size of this source',\n      '@throws IOException if there is an I/O error while reading the size of this source'\n    ]\n  },\n  {\n    'tag': '@throws IOException if an I/O error occurs in the process of reading from this source or\\n    writing to {@code output}',\n    'alternatives': [\n      '@throws IOException if there is an I/O error while reading from this source or\\n    writing to {@code output}',\n      '@throws IOException if an I/O error occurs while trying to read from this source or\\n    write to {@code output}',\n      '@throws IOException in case of an I/O error during the process of reading from this source or\\n    writing to {@code output}'\n    ]\n  },\n  {\n    'tag': '@throws IOException if an I/O error occurs in the process of reading from this source or\\n    writing to {@code sink}',\n    'alternatives': [\n      '@throws IOException if there is an I/O error while reading from this source or\\n    writing to {@code sink}',\n      '@throws IOException if an I/O error occurs while trying to read from this source or\\n    write to {@code sink}',\n      '@throws IOException in case of an I/O error during the process of reading from this source or\\n    writing to {@code sink}'\n    ]\n  },\n  {\n    'tag': '@throws IOException if an I/O error occurs in the process of reading from this source',\n    'alternatives': [\n      '@throws IOException if there is an I/O error while reading from this source',\n      '@throws IOException if an I/O error occurs while trying to read from this source',\n      '@throws IOException in case of an I/O error during the process of reading from this source'\n    ]\n  },\n  {\n    'tag': '@throws IOException if an I/O error occurs in the process of reading from this source or if\\n    {@code processor} throws an {@code IOException}',\n    'alternatives': [\n      '@throws IOException if there is an I/O error while reading from this source or if\\n    {@code processor} throws an {@code IOException}',\n      '@throws IOException if an I/O error occurs while trying to read from this source or if\\n    {@code processor} throws an {@code IOException}',\n      '@throws IOException in case of an I/O error during the process of reading from this source or if\\n    {@code processor} throws an {@code IOException}'\n    ]\n  },\n  {\n    'tag': '@throws IOException if an I/O error occurs in the process of reading from this source',\n    'alternatives': [\n      '@throws IOException if there is an I/O error while reading from this source',\n      '@throws IOException if an I/O error occurs while trying to read from this source',\n      '@throws IOException in case of an I/O error during the process of reading from this source'\n    ]\n  },\n  {\n    'tag': '@throws IOException if an I/O error occurs in the process of reading from this source or\\n    {@code other}',\n    'alternatives': [\n      '@throws IOException if there is an I/O error while reading from this source or\\n    {@code other}',\n      '@throws IOException if an I/O error occurs while trying to read from this source or\\n    {@code other}',\n      '@throws IOException in case of an I/O error during the process of reading from this source or\\n    {@code other}'\n    ]\n  },\n  {\n    'tag': '@param sources the sources to concatenate',\n    'alternatives': [\n      '@param sources the sources that will be concatenated',\n      '@param sources the sources that need to be combined',\n      '@param sources the sources that should be joined together'\n    ]\n  },\n  {\n    'tag': '@return a {@code ByteSource} containing the concatenated data',\n    'alternatives': [\n      '@return a {@code ByteSource} that holds the concatenated data',\n      '@return a {@code ByteSource} object with the data concatenated',\n      '@return a {@code ByteSource} that contains the joined data'\n    ]\n  }\n]"