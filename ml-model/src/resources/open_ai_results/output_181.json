"output = [\n  {\n    'tag': '@param y The point ordinate.',\n    'alternatives': [\n      '@param y The point altitude.',\n      '@param y The value representing the y-coordinate of the point.',\n      '@param y The vertical position of the point.',\n      '@param y The location of the point on the y-axis.',\n      '@param y The ordinate of the point.'\n    ]\n  },\n  {\n    'tag': '@return The first node or sprite at the given coordinates or null if\\n        nothing found.',\n    'alternatives': [\n      '@return The initial node or sprite found at the provided coordinates, or null if\\n        no object is found.',\n      '@return The first sprite or node found at the specified coordinates. If no object is found,\\n        null is returned.',\n      '@return The initial node or sprite that matches the given coordinates. If no object is found,\\n        null is returned.',\n      '@return The first node or sprite found at the provided coordinates. If nothing is found, null is\\n        returned.',\n      '@return The first sprite or node encountered at the given coordinates, or null if no\\n        object is found.'\n    ]\n  },\n  {\n    'tag': '@param graph The graph to search for.',\n    'alternatives': [\n      '@param graph The graph to look for.',\n      '@param graph The graph in which to perform the search.',\n      '@param graph The graph that needs to be searched.',\n      '@param graph The graph to explore.',\n      '@param graph The graph to be examined.'\n    ]\n  },\n  {\n    'tag': '@param x1 The rectangle lowest point abscissa.',\n    'alternatives': [\n      '@param x1 The abscissa of the lowest point of the rectangle.',\n      '@param x1 The x-coordinate of the bottom-left point of the rectangle.',\n      '@param x1 The horizontal position of the lowest point of the rectangle.',\n      '@param x1 The x-coordinate of the leftmost point of the rectangle.',\n      '@param x1 The position on the x-axis of the lowest point of the rectangle.'\n    ]\n  },\n  {\n    'tag': '@param y1 The rectangle lowest point ordinate.',\n    'alternatives': [\n      '@param y1 The ordinate of the lowest point of the rectangle.',\n      '@param y1 The y-coordinate of the bottom-left point of the rectangle.',\n      '@param y1 The vertical position of the lowest point of the rectangle.',\n      '@param y1 The y-coordinate of the leftmost point of the rectangle.',\n      '@param y1 The position on the y-axis of the lowest point of the rectangle.'\n    ]\n  },\n  {\n    'tag': '@param x2 The rectangle highest point abscissa.',\n    'alternatives': [\n      '@param x2 The abscissa of the highest point of the rectangle.',\n      '@param x2 The x-coordinate of the top-right point of the rectangle.',\n      '@param x2 The horizontal position of the highest point of the rectangle.',\n      '@param x2 The x-coordinate of the rightmost point of the rectangle.',\n      '@param x2 The position on the x-axis of the highest point of the rectangle.'\n    ]\n  },\n  {\n    'tag': '@param y2 The rectangle highest point ordinate.',\n    'alternatives': [\n      '@param y2 The ordinate of the highest point of the rectangle.',\n      '@param y2 The y-coordinate of the top-right point of the rectangle.',\n      '@param y2 The vertical position of the highest point of the rectangle.',\n      '@param y2 The y-coordinate of the rightmost point of the rectangle.',\n      '@param y2 The position on the y-axis of the highest point of the rectangle.'\n    ]\n  },\n  {\n    'tag': '@return The set of sprites and nodes in the given rectangle.',\n    'alternatives': [\n      '@return The collection of sprites and nodes within the specified rectangle.',\n      '@return The group of sprites and nodes located inside the provided rectangle.',\n      '@return The set of sprites and nodes that fall within the given rectangle.',\n      '@return The collection of sprites and nodes contained in the specified rectangle.',\n      '@return The group of sprites and nodes found within the given rectangle.'\n    ]\n  },\n  {\n    'tag': '@param sprite The sprite.',\n    'alternatives': [\n      '@param sprite The graphical object.',\n      '@param sprite The visual representation.',\n      '@param sprite The graphical element.',\n      '@param sprite The image component.',\n      '@param sprite The animated character.'\n    ]\n  },\n  {\n    'tag': '@param pos Receiver for the sprite 2D position, can be null.',\n    'alternatives': [\n      '@param pos The recipient of the sprite's two-dimensional location, can be null.',\n      '@param pos The target where the sprite's position in two dimensions is stored, can be null.',\n      '@param pos The destination for storing the sprite's 2D coordinates, can be null.',\n      '@param pos The object that will receive the two-dimensional position of the sprite, can be null.',\n      '@param pos The variable that will be assigned with the sprite's position in two dimensions, can be null.'\n    ]\n  },\n  {\n    'tag': '@param units The units in which the position must be computed (the sprite\\n           already contains units).',\n    'alternatives': [\n      '@param units The measurement system in which the position needs to be calculated (the sprite\\n           already uses units).',\n      '@param units The scale to be used for calculating the position (the sprite already\\n           has units).',\n      '@param units The system of measurement to be used for computing the position (the sprite\\n           already has units).',\n      '@param units The measurement units that should be used for determining the position (the\\n           sprite already employs units).',\n      '@param units The unit of measurement to be used for calculating the position (the sprite\\n           already has units).'\n    ]\n  },\n  {\n    'tag': '@return The same instance as the one given by parameter pos or a new one\\n        if pos was null, containing the computed position in the given\\n        units.',\n    'alternatives': [\n      '@return Either the original instance provided in the pos parameter or a new instance\\n        if pos was null, which holds the calculated position using the specified\\n        units.',\n      '@return The instance passed as the pos parameter or a new instance if pos is null,\\n        which contains the computed position using the given units.',\n      '@return The instance provided in the pos parameter itself, unless it is null, in which\\n        case a new instance is returned containing the calculated position in the\\n        specified units.',\n      '@return The instance passed as the pos parameter, or if it is null, a new instance\\n        with the calculated position in the given units.',\n      '@return Either the same instance as pos or a newly created instance (if pos is null)\\n        that holds the calculated position using the specified units.'\n    ]\n  },\n  {\n    'tag': '@param g2 The Swing graphics to change.',\n    'alternatives': [\n      '@param g2 The Swing graphics object to modify.',\n      '@param g2 The Swing graphics element to alter.',\n      '@param g2 The Swing graphics instance to be modified.',\n      '@param g2 The Swing graphics component to update.',\n      '@param g2 The Swing graphics object to manipulate.'\n    ]\n  },\n  {\n    'tag': '@param g2 The Swing graphics to restore.',\n    'alternatives': [\n      '@param g2 The Swing graphics object to revert.',\n      '@param g2 The Swing graphics element to restore.',\n      '@param g2 The Swing graphics instance to be restored.',\n      '@param g2 The Swing graphics component to bring back.',\n      '@param g2 The Swing graphics object to recover.'\n    ]\n  },\n  {\n    'tag': '@param g2 The Swing graphics.',\n    'alternatives': [\n      '@param g2 The Swing graphical object.',\n      '@param g2 The Swing graphics element.',\n      '@param g2 The Swing graphical instance.',\n      '@param g2 The Swing graphics component.',\n      '@param g2 The Swing graphical element.'\n    ]\n  },\n  {\n    'tag': '@param g2 The Swing graphics.',\n    'alternatives': [\n      '@param g2 The Swing graphical object.',\n      '@param g2 The Swing graphics element.',\n      '@param g2 The Swing graphical instance.',\n      '@param g2 The Swing graphics component.',\n      '@param g2 The Swing graphical element.'\n    ]\n  },\n  {\n    'tag': '@param on If true, automatic adjustment is enabled.',\n    'alternatives': [\n      '@param on If true, automatic adaptation is activated.',\n      '@param on If true, automatic modification is enabled.',\n      '@param on If true, automatic tuning is turned on.',\n      '@param on If true, automatic customization is enabled.',\n      '@param on If true, automatic regulation is enabled.'\n    ]\n  },\n  {\n    'tag': '@param z The zoom.',\n    'alternatives': [\n      '@param z The scale.',\n      '@param z The magnification.',\n      '@param z The zoom level.',\n      '@param z The enlargement.',\n      '@param z The zoom factor.'\n    ]\n  },\n  {\n    'tag': '@param theta The rotation angle in degrees.',\n    'alternatives': [\n      '@param theta The rotation angle in degrees.',\n      '@param theta The angle of rotation in degrees.',\n      '@param theta The degree measure of the rotation angle.',\n      '@param theta The angle of rotation expressed in degrees.',\n      '@param theta The rotation angle specified in degrees.'\n    ]\n  },\n  {\n    'tag': '@param viewportWidth The width in pixels of the view port.',\n    'alternatives': [\n      '@param viewportWidth The view port width in pixels.',\n      '@param viewportWidth The width of the viewport in pixels.',\n      '@param viewportWidth The pixel width of the viewable area.',\n      '@param viewportWidth The number of pixels representing the viewport width.',\n      '@param viewportWidth The width of the visible area measured in pixels.'\n    ]\n  },\n  {\n    'tag': '@param viewportHeight The width in pixels of the view port.',\n    'alternatives': [\n      '@param viewportHeight The view port height in pixels.',\n      '@param viewportHeight The height of the viewport in pixels.',\n      '@param viewportHeight The pixel height of the viewable area.',\n      '@param viewportHeight The number of pixels representing the viewport height.',\n      '@param viewportHeight The height of the visible area measured in pixels.'\n    ]\n  },\n  {\n    'tag': '@param graph The graphic graph.',\n    'alternatives': [\n      '@param graph The graphical graph.',\n      '@param graph The visualization graph.',\n      '@param graph The visual representation of the graph.',\n      '@param graph The graph used for visualization.',\n      '@param graph The graph in the graphical form.'\n    ]\n  },\n  {\n    'tag': '@param sprite The sprite to check.',\n    'alternatives': [\n      '@param sprite The graphical object for verification.',\n      '@param sprite The visual element to be examined.',\n      '@param sprite The graphics component to be validated.',\n      '@param sprite The character animation for evaluation.',\n      '@param sprite The image symbol to be inspected.'\n    ]\n  },\n  {\n    'tag': '@return True if visible.',\n    'alternatives': [\n      '@return Returns true if it is visible.',\n      '@return Indicates whether it is visible or not.',\n      '@return If visible, returns true.',\n      '@return True if it is currently visible.',\n      '@return The value true if it is visible.'\n    ]\n  },\n  {\n    'tag': '@param edge The edge to check.',\n    'alternatives': [\n      '@param edge The edge for verification.',\n      '@param edge The edge element to be examined.',\n      '@param edge The graphical component to be checked.',\n      '@param edge The connection for evaluation.',\n      '@param edge The link to be inspected.'\n    ]\n  }\n]"