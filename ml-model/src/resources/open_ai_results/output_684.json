"output = [\n  {\n    'tag': '@throws XMLStreamException ',\n    'alternatives': [\n      '@throws XMLStreamException ',\n      '@throws XML Stream exception',\n      '@throws XMLStreamException error',\n      '@throws XMLStreamException is thrown',\n      '@throws XMLStreamException is raised'\n    ]\n  },\n  {\n    'tag': '@param e the event',\n    'alternatives': [\n      '@param e the event',\n      '@param e event',\n      '@param e input event',\n      '@param e event object',\n      '@param e event instance'\n    ]\n  },\n  {\n    'tag': '@param e event producing an error',\n    'alternatives': [\n      '@param e event producing an error',\n      '@param e event causing an error',\n      '@param e error-producing event',\n      '@param e event responsible for the error',\n      '@param e event that generates an error'\n    ]\n  },\n  {\n    'tag': '@param msg message to put in the exception',\n    'alternatives': [\n      '@param msg message to put in the exception',\n      '@param msg exception message',\n      '@param msg error message',\n      '@param msg message for the exception',\n      '@param msg exception description'\n    ]\n  },\n  {\n    'tag': '@param args arguments of the message',\n    'alternatives': [\n      '@param args arguments of the message',\n      '@param args message arguments',\n      '@param args message parameters',\n      '@param args arguments for the message',\n      '@param args parameters of the message'\n    ]\n  },\n  {\n    'tag': '@return a new parse exception',\n    'alternatives': [\n      '@return a new parse exception',\n      '@return a new exception for parsing',\n      '@return a fresh parse exception',\n      '@return a newly created parsing exception',\n      '@return a parse exception instance'\n    ]\n  },\n  {\n    'tag': '@param e event to check',\n    'alternatives': [\n      '@param e event to check',\n      '@param e check event',\n      '@param e verification event',\n      '@param e event for validation',\n      '@param e event validation'\n    ]\n  },\n  {\n    'tag': '@param type expected type',\n    'alternatives': [\n      '@param type expected type',\n      '@param type type expected',\n      '@param type desired type',\n      '@param type requested type',\n      '@param type anticipated type'\n    ]\n  },\n  {\n    'tag': '@param name expected name',\n    'alternatives': [\n      '@param name expected name',\n      '@param name name expected',\n      '@param name desired name',\n      '@param name requested name',\n      '@param name anticipated name'\n    ]\n  },\n  {\n    'tag': '@return true is type and name are valid',\n    'alternatives': [\n      '@return true is type and name are valid',\n      '@return true if type and name are valid',\n      '@return true if both type and name are valid',\n      '@return true when type and name are valid',\n      '@return true in case type and name are valid'\n    ]\n  },\n  {\n    'tag': '@param e event to check',\n    'alternatives': [\n      '@param e event to check',\n      '@param e check event',\n      '@param e verification event',\n      '@param e event for validation',\n      '@param e event validation'\n    ]\n  },\n  {\n    'tag': '@param type expected type',\n    'alternatives': [\n      '@param type expected type',\n      '@param type type expected',\n      '@param type desired type',\n      '@param type requested type',\n      '@param type anticipated type'\n    ]\n  },\n  {\n    'tag': '@param name expected name',\n    'alternatives': [\n      '@param name expected name',\n      '@param name name expected',\n      '@param name desired name',\n      '@param name requested name',\n      '@param name anticipated name'\n    ]\n  },\n  {\n    'tag': '@throws XMLStreamException if event has invalid type or name',\n    'alternatives': [\n      '@throws XMLStreamException if event has invalid type or name',\n      '@throws XMLStreamException when event's type or name is invalid',\n      '@throws XMLStreamException in case of an event with invalid type or name',\n      '@throws XMLStreamException if the type or name of the event is invalid',\n      '@throws XMLStreamException when the event has an invalid type or name'\n    ]\n  },\n  {\n    'tag': '@param stream ',\n    'alternatives': [\n      '@param stream ',\n      '@param stream to process',\n      '@param stream source',\n      '@param stream input',\n      '@param stream data'\n    ]\n  },\n  {\n    'tag': '@return the next index',\n    'alternatives': [\n      '@return the next index',\n      '@return index of the next element',\n      '@return the following index',\n      '@return index for the next item',\n      '@return the index that comes after'\n    ]\n  },\n  {\n    'tag': '@param i Index',\n    'alternatives': [\n      '@param i Index',\n      '@param i position',\n      '@param i position index',\n      '@param i element index',\n      '@param i index of the item'\n    ]\n  },\n  {\n    'tag': '@return the previous index',\n    'alternatives': [\n      '@return the previous index',\n      '@return index of the previous element',\n      '@return the preceding index',\n      '@return index for the previous item',\n      '@return the index that comes before'\n    ]\n  },\n  {\n    'tag': '@return a copy of this instance.',\n    'alternatives': [\n      '@return a copy of this instance.',\n      '@return a clone of this object.',\n      '@return a duplicate of this instance.',\n      '@return an instance that is a replica of this one.',\n      '@return a replicated version of this object.'\n    ]\n  },\n  {\n    'tag': '@param size Number of surface elements of the sphere.',\n    'alternatives': [\n      '@param size Number of surface elements of the sphere.',\n      '@param size Sphere surface element count.',\n      '@param size Count of surface components in the sphere.',\n      '@param size Number of surface units in the sphere.',\n      '@param size Quantity of surface elements in the sphere.'\n    ]\n  },\n  {\n    'tag': '@param maxDarkFraction Maximum fraction of the facets that can be dark.\\nIf the fraction of \"non-illuminated\" facets is larger, no estimation\\nof the value will be performed, and the {@code background} value will\\nbe returned instead.',\n    'alternatives': [\n      '@param maxDarkFraction Maximum fraction of the facets that can be dark.\\nIf the fraction of \"non-illuminated\" facets is larger, no estimation\\nof the value will be performed, and the {@code background} value will\\nbe returned instead.',\n      '@param maxDarkFraction Maximum proportion of the facets that can appear dark.\\nIf the proportion of \"non-bright\" facets is higher, no estimation\\nwill be calculated, and the {@code background} value will\\nbe returned instead.',\n      '@param maxDarkFraction Maximum percentage of the facets allowed to be dark.\\nIf the percentage of \"non-lighted\" facets is higher, no estimation\\nwill be done, and the {@code background} value will\\nbe returned instead.',\n      '@param maxDarkFraction Maximum ratio of the facets that can be dark.\\nIf the ratio of \"non-lit\" facets is greater, no estimation\\nwill be carried out, and the {@code background} value will\\nbe returned instead.',\n      '@param maxDarkFraction Maximum part of the facets that can be dark.\\nIf the part of \"non-illuminated\" facets is larger, no estimation\\nof the value will be performed, and the {@code background} value will\\nbe returned instead.'\n    ]\n  },\n  {\n    'tag': '@param darkThreshold Value of the illumination below which a facet is\\nconsidered dark.',\n    'alternatives': [\n      '@param darkThreshold Value of the illumination below which a facet is\\nconsidered dark.',\n      '@param darkThreshold Threshold value for considering a facet dark.',\n      '@param darkThreshold Illumination value below which a facet is\\nregarded as dark.',\n      '@param darkThreshold Illumination threshold to classify a facet as dark.',\n      '@param darkThreshold Value that determines when a facet is considered dark.'\n    ]\n  },\n  {\n    'tag': '@param background Value returned when the {@code maxDarkFraction}\\nthreshold is exceeded.',\n    'alternatives': [\n      '@param background Value returned when the {@code maxDarkFraction}\\nthreshold is exceeded.',\n      '@param background Value to be returned if the {@code maxDarkFraction}\\nthreshold is surpassed.',\n      '@param background Value to return when the {@code maxDarkFraction}\\nthreshold is exceeded.',\n      '@param background Value that is returned if the {@code maxDarkFraction}\\nthreshold is crossed.',\n      '@param background Value that will be returned if the {@code maxDarkFraction}\\nthreshold is exceeded.'\n    ]\n  },\n  {\n    'tag': '@throws org.apache.commons.math3.exception.OutOfRangeException if\\n{@code maxDarkFraction} does not belong to the interval {@code [0, 1]}.',\n    'alternatives': [\n      '@throws org.apache.commons.math3.exception.OutOfRangeException if\\n{@code maxDarkFraction} does not belong to the interval {@code [0, 1]}.',\n      '@throws org.apache.commons.math3.exception.OutOfRangeException if\\n{@code maxDarkFraction} is not in the range {@code [0, 1]}.',\n      '@throws org.apache.commons.math3.exception.OutOfRangeException if\\n{@code maxDarkFraction}falls outside the range {@code [0, 1]}.',\n      '@throws org.apache.commons.math3.exception.OutOfRangeException if\\n{@code maxDarkFraction} is not within the interval {@code [0, 1]}.',\n      '@throws org.apache.commons.math3.exception.OutOfRangeException if\\n{@code maxDarkFraction} is outside the range {@code [0, 1]}.'\n    ]\n  },\n  {\n    'tag': '@param other Instance to copy.',\n    'alternatives': [\n      '@param other Instance to copy.',\n      '@param other Object to duplicate.',\n      '@param other Object instance to replicate.',\n      '@param other Another instance to clone.',\n      '@param other Object that needs to be copied.'\n    ]\n  }\n]"