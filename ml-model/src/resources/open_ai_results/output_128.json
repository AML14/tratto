"[\n  {\n    'tag': '@param collection the collection to add to, must not be null',\n    'alternatives': [\n      '@param collection the collection to insert elements into, must not be null',\n      '@param collection the target collection to append to, must not be null',\n      '@param collection the collection to populate, must not be null',\n      '@param collection the container to add elements to, must not be null',\n      '@param collection the destination collection to merge with, must not be null'\n    ]\n  },\n  {\n    'tag': '@param iterable the iterable of elements to add, must not be null',\n    'alternatives': [\n      '@param iterable the iterable containing elements to include, must not be null',\n      '@param iterable the iterable of objects to incorporate, must not be null',\n      '@param iterable the iterable source of elements to merge, must not be null',\n      '@param iterable the iterable to retrieve elements from, must not be null',\n      '@param iterable the iterable providing elements to include, must not be null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if the collection or iterator is null',\n    'alternatives': [\n      '@throws NullPointerException if the collection or iterator parameter is null',\n      '@throws NullPointerException if the collection or iterator argument is null',\n      '@throws NullPointerException if the collection or iterator reference is null',\n      '@throws NullPointerException if the collection or iterator object is null',\n      '@throws NullPointerException if the collection or iterator value is null'\n    ]\n  },\n  {\n    'tag': '@param collection the collection to add to, must not be null',\n    'alternatives': [\n      '@param collection the collection to append elements to, must not be null',\n      '@param collection the container to add items into, must not be null',\n      '@param collection the target collection to insert to, must not be null',\n      '@param collection the collection to populate with elements, must not be null',\n      '@param collection the destination collection to merge with, must not be null'\n    ]\n  },\n  {\n    'tag': '@param iterator the iterator of elements to add, must not be null',\n    'alternatives': [\n      '@param iterator the iterator supplying items to include, must not be null',\n      '@param iterator the iterator containing elements for addition, must not be null',\n      '@param iterator the iterator to retrieve objects from, must not be null',\n      '@param iterator the iterator providing elements to incorporate, must not be null',\n      '@param iterator the iterator source of elements to merge, must not be null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if the collection or enumeration is null',\n    'alternatives': [\n      '@throws NullPointerException if the collection or enumeration parameter is null',\n      '@throws NullPointerException if the collection or enumeration argument is null',\n      '@throws NullPointerException if the collection or enumeration reference is null',\n      '@throws NullPointerException if the collection or enumeration object is null',\n      '@throws NullPointerException if the collection or enumeration value is null'\n    ]\n  },\n  {\n    'tag': '@param collection the collection to add to, must not be null',\n    'alternatives': [\n      '@param collection the collection to insert items into, must not be null',\n      '@param collection the container to add elements into, must not be null',\n      '@param collection the target collection to append to, must not be null',\n      '@param collection the collection to populate with, must not be null',\n      '@param collection the destination collection to merge with, must not be null'\n    ]\n  },\n  {\n    'tag': '@param enumeration the enumeration of elements to add, must not be null',\n    'alternatives': [\n      '@param enumeration the enumeration supplying elements to include, must not be null',\n      '@param enumeration the enumeration containing elements for addition, must not be null',\n      '@param enumeration the enumeration to retrieve objects from, must not be null',\n      '@param enumeration the enumeration providing elements to incorporate, must not be null',\n      '@param enumeration the enumeration source of elements to merge, must not be null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if the collection or array is null',\n    'alternatives': [\n      '@throws NullPointerException if the collection or array parameter is null',\n      '@throws NullPointerException if the collection or array argument is null',\n      '@throws NullPointerException if the collection or array reference is null',\n      '@throws NullPointerException if the collection or array object is null',\n      '@throws NullPointerException if the collection or array value is null'\n    ]\n  },\n  {\n    'tag': '@param collection the collection to add to, must not be null',\n    'alternatives': [\n      '@param collection the collection to insert elements into, must not be null',\n      '@param collection the container to add items into, must not be null',\n      '@param collection the target collection to append to, must not be null',\n      '@param collection the collection to populate with elements, must not be null',\n      '@param collection the destination collection to merge with, must not be null'\n    ]\n  },\n  {\n    'tag': '@param elements the array of elements to add, must not be null',\n    'alternatives': [\n      '@param elements the array of items to include, must not be null',\n      '@param elements the array supplying elements for addition, must not be null',\n      '@param elements the array to retrieve objects from, must not be null',\n      '@param elements the array providing elements to incorporate, must not be null',\n      '@param elements the array source of elements to merge, must not be null'\n    ]\n  },\n  {\n    'tag': '@throws IndexOutOfBoundsException if the index is negative.',\n    'alternatives': [\n      '@throws IndexOutOfBoundsException when the index is less than zero.',\n      '@throws IndexOutOfBoundsException if the index value is negative.',\n      '@throws IndexOutOfBoundsException if a negative index is provided.',\n      '@throws IndexOutOfBoundsException if the index parameter is negative.',\n      '@throws IndexOutOfBoundsException if the provided index value is negative.'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if the collection is null',\n    'alternatives': [\n      '@throws NullPointerException if the collection parameter is null',\n      '@throws NullPointerException if the collection argument is null',\n      '@throws NullPointerException if the collection reference is null',\n      '@throws NullPointerException if the collection object is null',\n      '@throws NullPointerException if the collection value is null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if the collection is null',\n    'alternatives': [\n      '@throws NullPointerException if the collection parameter is null',\n      '@throws NullPointerException if the collection argument is null',\n      '@throws NullPointerException if the collection reference is null',\n      '@throws NullPointerException if the collection object is null',\n      '@throws NullPointerException if the collection value is null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if either collection is null',\n    'alternatives': [\n      '@throws NullPointerException if either collection parameter is null',\n      '@throws NullPointerException if either collection argument is null',\n      '@throws NullPointerException if either collection reference is null',\n      '@throws NullPointerException if either collection object is null',\n      '@throws NullPointerException if either collection value is null'\n    ]\n  },\n  {\n    'tag': '@param a the first collection, must not be null',\n    'alternatives': [\n      '@param a the initial collection, must not be null',\n      '@param a the primary collection, must not be null',\n      '@param a the source collection, must not be null',\n      '@param a the starting collection, must not be null',\n      '@param a the collection to begin with, must not be null'\n    ]\n  },\n  {\n    'tag': '@param b the second collection, must not be null',\n    'alternatives': [\n      '@param b the secondary collection, must not be null',\n      '@param b the other collection, must not be null',\n      '@param b the target collection, must not be null',\n      '@param b the second source collection, must not be null',\n      '@param b the collection to merge, must not be null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if either collection is null',\n    'alternatives': [\n      '@throws NullPointerException if either collection parameter is null',\n      '@throws NullPointerException if either collection argument is null',\n      '@throws NullPointerException if either collection reference is null',\n      '@throws NullPointerException if either collection object is null',\n      '@throws NullPointerException if either collection value is null'\n    ]\n  },\n  {\n    'tag': '@param a the first collection, must not be null',\n    'alternatives': [\n      '@param a the initial collection, must not be null',\n      '@param a the primary collection, must not be null',\n      '@param a the source collection, must not be null',\n      '@param a the starting collection, must not be null',\n      '@param a the collection to begin with, must not be null'\n    ]\n  },\n  {\n    'tag': '@param b the second collection, must not be null',\n    'alternatives': [\n      '@param b the secondary collection, must not be null',\n      '@param b the other collection, must not be null',\n      '@param b the target collection, must not be null',\n      '@param b the second source collection, must not be null',\n      '@param b the collection to merge, must not be null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if either collection or the comparator is null',\n    'alternatives': [\n      '@throws NullPointerException if either collection or the comparator parameter is null',\n      '@throws NullPointerException if either collection or the comparator argument is null',\n      '@throws NullPointerException if either collection or the comparator reference is null',\n      '@throws NullPointerException if either collection or the comparator object is null',\n      '@throws NullPointerException if either collection or the comparator value is null'\n    ]\n  },\n  {\n    'tag': '@param a the first collection, must not be null',\n    'alternatives': [\n      '@param a the initial collection, must not be null',\n      '@param a the primary collection, must not be null',\n      '@param a the source collection, must not be null',\n      '@param a the starting collection, must not be null',\n      '@param a the collection to begin with, must not be null'\n    ]\n  }\n]"