"[\n  {\n    'tag': '@param executor Executor to run the function in.',\n    'alternatives': [\n      '@param executor Executor to execute the function in.',\n      '@param executor The executor to execute the function in.',\n      '@param executor The executor to run the provided function in.',\n      '@param executor The executor that will run the function.',\n      '@param executor The executor responsible for executing the function.'\n    ]\n  },\n  {\n    'tag': \"@return A future that holds result of the function (if the input succeeded) or the original\\n    input's failure (if not)\",\n    'alternatives': [\n      '@return A future containing the result of the function (in case of success) or the original\\n    input's failure (if it failed)',\n      '@return A future that stores the result of the function (if the input succeeded) or the failure\\n    of the input (if it failed)',\n      '@return A future that carries the outcome of the function (if the input was successful) or the\\n    failure of the input (if it was not)',\n      '@return A future that holds the function's result (if the input was successful) or the original\\n    input's failure (if it was not)',\n      '@return A future that contains the result of the function (in case of success) or the original\\n    input's failure (if it failed)'\n    ]\n  },\n  {\n    'tag': '@param input The future to transform',\n    'alternatives': [\n      '@param input The future that needs to be transformed',\n      '@param input The future that should be converted',\n      '@param input The future object to be modified',\n      '@param input The future which requires transformation',\n      '@param input The future that requires conversion'\n    ]\n  },\n  {\n    'tag': '@param function A Function to transform the results of the provided future\\n    to the results of the returned future.  This will be run in the thread\\n    that notifies input it is complete.',\n    'alternatives': [\n      '@param function A Function used to convert the results of the given future\\n    to the results of the resulting future. This will be executed in the\\n    thread that notifies the completion of the input.',\n      '@param function A Function that transforms the outcomes of the given future\\n    to the outcomes of the future that will be returned. This will be\\n    executed in the thread responsible for notifying the completion of the\\n    input.',\n      '@param function A Function that converts the results of the provided future\\n    to the results of the future that will be returned. This will run in the\\n    thread that notifies the completion of the input.',\n      '@param function A Function that transforms the results of the given future\\n    to the results of the future that will be returned. This will be executed\\n    in the thread that sends the notification about the input\\'s completion.',\n      '@param function A Function that converts the results of the given future\\n    to the results of the returned future. This will run on the thread that\\n    notifies the input of its completion.'\n    ]\n  },\n  {\n    'tag': '@return A future that holds result of the transformation.',\n    'alternatives': [\n      '@return A future containing the outcome of the transformation.',\n      '@return A future that carries the result of the transformation.',\n      '@return A future that holds the result of the transformation process.',\n      '@return A future that stores the result of the transformation.',\n      '@return A future that contains the result of the transformation.'\n    ]\n  },\n  {\n    'tag': '@param nested The nested future to transform.',\n    'alternatives': [\n      '@param nested The future that is nested and needs to be transformed.',\n      '@param nested The enclosed future that should be converted.',\n      '@param nested The nested future object to be modified.',\n      '@param nested The future which is nested and requires transformation.',\n      '@param nested The future that is contained inside and needs conversion.'\n    ]\n  },\n  {\n    'tag': '@return A future that holds result of the inner future.',\n    'alternatives': [\n      '@return A future that contains the outcome of the inner future.',\n      '@return A future carrying the result of the inner future.',\n      '@return A future that holds the result of the inner future.',\n      '@return A future that stores the result of the inner future.',\n      '@return A future that carries the outcome of the inner future.'\n    ]\n  },\n  {\n    'tag': '@param futures futures to combine',\n    'alternatives': [\n      '@param futures The futures to merge',\n      '@param futures The futures that need to be combined',\n      '@param futures The collection of futures to merge',\n      '@param futures The futures to combine into a single result',\n      '@param futures The futures that should be combined together'\n    ]\n  },\n  {\n    'tag': '@return a future that provides a list of the results of the component\\n        futures',\n    'alternatives': [\n      '@return a future that contains a list with the results of the component\\n        futures',\n      '@return a future that carries a list of the results produced by the individual\\n        futures',\n      '@return a future that holds a list of the results from the component\\n        futures',\n      '@return a future that stores a list of the results obtained from the\\n        individual futures',\n      '@return a future that provides a list containing the results of the component\\n        futures'\n    ]\n  },\n  {\n    'tag': '@param future The future attach the callback to.',\n    'alternatives': [\n      '@param future The future to which the callback will be attached.',\n      '@param future The future that will have the callback attached to it.',\n      '@param future The future to connect the callback to.',\n      '@param future The future to which the callback needs to be assigned.',\n      '@param future The future object that the callback will be linked to.'\n    ]\n  },\n  {\n    'tag': '@param callback The callback to invoke when {@code future} is completed.',\n    'alternatives': [\n      '@param callback The callback to be triggered when the {@code future} is finished.',\n      '@param callback The callback to execute when {@code future} is done.',\n      '@param callback The callback function to invoke upon the completion of\\n    {@code future}.',\n      '@param callback The callback method to be called when {@code future}\\n    is completed.',\n      '@param callback The callback to be invoked when the {@code future} is completed.'\n    ]\n  },\n  {\n    'tag': '@param future The future attach the callback to.',\n    'alternatives': [\n      '@param future The future to which the callback will be attached.',\n      '@param future The future that will have the callback attached to it.',\n      '@param future The future to connect the callback to.',\n      '@param future The future to which the callback needs to be assigned.',\n      '@param future The future object that the callback will be linked to.'\n    ]\n  }\n]"