"output = [\n  {\n    'tag': '@throws NullArgumentException if either source or dest is null',\n    'alternatives': [\n      '@throws NullArgumentException if either origin or destination is null',\n      '@throws NullArgumentException if either source or destination is null',\n      '@throws NullArgumentException if source or dest is null',\n      '@throws NullArgumentException if either of the arguments, source or dest, is null',\n      '@throws NullArgumentException if the source or destination is null'\n    ]\n  },\n  {\n    'tag': '@throws NullArgumentException if original is null',\n    'alternatives': [\n      '@throws NullArgumentException if the original object is null',\n      '@throws NullArgumentException if the input original is null',\n      '@throws NullArgumentException if the parameter original is null',\n      '@throws NullArgumentException if the provided original is null',\n      '@throws NullArgumentException if the original argument is null'\n    ]\n  },\n  {\n    'tag': '@throws NotStrictlyPositiveException if minimal number of iterations is not strictly positive',\n    'alternatives': [\n      '@throws NotStrictlyPositiveException if the smallest number of iterations is not strictly positive',\n      '@throws NotStrictlyPositiveException if the minimum iteration count is not strictly positive',\n      '@throws NotStrictlyPositiveException if the number of iterations is not positive',\n      '@throws NotStrictlyPositiveException if the count of minimum iterations is not strictly positive',\n      '@throws NotStrictlyPositiveException if the minimal iteration number is not strictly positive'\n    ]\n  },\n  {\n    'tag': '@throws NumberIsTooLargeException if maximal number of iterations is greater than {@link #MIDPOINT_MAX_ITERATIONS_COUNT}',\n    'alternatives': [\n      '@throws NumberIsTooLargeException if the maximum count of iterations is greater than {@link #MIDPOINT_MAX_ITERATIONS_COUNT}',\n      '@throws NumberIsTooLargeException if the number of maximum iterations is larger than {@link #MIDPOINT_MAX_ITERATIONS_COUNT}',\n      '@throws NumberIsTooLargeException if the iteration maximum count is greater than {@link #MIDPOINT_MAX_ITERATIONS_COUNT}',\n      '@throws NumberIsTooLargeException if the maximal iteration number exceeds {@link #MIDPOINT_MAX_ITERATIONS_COUNT}',\n      '@throws NumberIsTooLargeException if the maximum iterations is larger than {@link #MIDPOINT_MAX_ITERATIONS_COUNT}'\n    ]\n  },\n  {\n    'tag': '@param maximalIterationCount maximum number of iterations\\n(must be less than or equal to {@link #MIDPOINT_MAX_ITERATIONS_COUNT}',\n    'alternatives': [\n      '@param maximalIterationCount maximum iterations count\\n(must be less than or equal to {@link #MIDPOINT_MAX_ITERATIONS_COUNT}',\n      '@param maximalIterationCount maximum number of iterations\\n(should not exceed {@link #MIDPOINT_MAX_ITERATIONS_COUNT}',\n      '@param maximalIterationCount maximum iterations to perform\\n(must be less than or equal to {@link #MIDPOINT_MAX_ITERATIONS_COUNT}',\n      '@param maximalIterationCount maximum number of iterations\\n(the value has to be less than or equal to {@link #MIDPOINT_MAX_ITERATIONS_COUNT}',\n      '@param maximalIterationCount maximum iterations allowed\\n(must be less than or equal to {@link #MIDPOINT_MAX_ITERATIONS_COUNT}'\n    ]\n  },\n  {\n    'tag': '@param imaginaryFormat the custom format for the imaginary part.',\n    'alternatives': [\n      '@param imaginaryFormat the format for the imaginary part of the number.',\n      '@param imaginaryFormat the user-specified format for the imaginary component.',\n      '@param imaginaryFormat the format to be used for the imaginary part.',\n      '@param imaginaryFormat the format that defines the representation of the imaginary part.',\n      '@param imaginaryFormat the custom format to apply to the imaginary component.'\n    ]\n  },\n  {\n    'tag': '@throws NoDataException if {@code imaginaryCharacter} is an\\nempty string.',\n    'alternatives': [\n      '@throws NoDataException if the provided {@code imaginaryCharacter} is an\\nempty string.',\n      '@throws NoDataException if the {@code imaginaryCharacter} parameter is an\\nempty string.',\n      '@throws NoDataException if the string {@code imaginaryCharacter} is empty.',\n      '@throws NoDataException if the {@code imaginaryCharacter} argument is an\\nempty string.',\n      '@throws NoDataException if the provided string {@code imaginaryCharacter} is empty.'\n    ]\n  },\n  {\n    'tag': '@return the unique instance',\n    'alternatives': [\n      '@return the instance that is unique',\n      '@return the only instance',\n      '@return the single instance',\n      '@return the instance that is distinct',\n      '@return the one and only instance'\n    ]\n  },\n  {\n    'tag': '@return the singleton instance',\n    'alternatives': [\n      '@return the instance that is a singleton',\n      '@return the instance that is the only one',\n      '@return the instance that is uniquely created',\n      '@return the singular instance',\n      '@return the sole instance'\n    ]\n  },\n  {\n    'tag': '@return {@code true} if the roots of unity are stored in\\ncounter-clockwise order',\n    'alternatives': [\n      '@return {@code true} if the stored roots of unity are in counter-clockwise order',\n      '@return {@code true} if the order of roots of unity is counter-clockwise',\n      '@return {@code true} if the roots of unity are arranged in counter-clockwise order',\n      '@return {@code true} if the order of the roots of unity is counter-clockwise',\n      '@return {@code true} if the roots of unity are organized in counter-clockwise order'\n    ]\n  },\n  {\n    'tag': '@throws MathIllegalStateException if no roots of unity have been computed\\nyet',\n    'alternatives': [\n      '@throws MathIllegalStateException if the computation of roots of unity has not been performed\\nyet',\n      '@throws MathIllegalStateException if roots of unity have not been calculated\\nyet',\n      '@throws MathIllegalStateException if no calculation of roots of unity has taken place\\nyet',\n      '@throws MathIllegalStateException if the roots of unity have not yet been computed',\n      '@throws MathIllegalStateException if the roots of unity have not been computed\\nyet'\n    ]\n  },\n  {\n    'tag': '@param n the (signed) number of roots of unity to be computed',\n    'alternatives': [\n      '@param n the (signed) count of roots of unity to be calculated',\n      '@param n the (signed) number of roots of unity to compute',\n      '@param n the (signed) number of roots of unity to determine',\n      '@param n the (signed) number of roots of unity to find',\n      '@param n the (signed) number of roots of unity to generate'\n    ]\n  },\n  {\n    'tag': '@param k index of the {@code n}-th root of unity',\n    'alternatives': [\n      '@param k the position of the {@code n}-th root of unity',\n      '@param k the index of the {@code n}-th unity root',\n      '@param k the location of the {@code n}-th root of unity',\n      '@param k the order of the {@code n}-th root of unity',\n      '@param k the place of the {@code n}-th root of unity'\n    ]\n  },\n  {\n    'tag': '@return real part of the {@code k}-th {@code n}-th root of unity',\n    'alternatives': [\n      '@return the real component of the {@code k}-th {@code n}-th unity root',\n      '@return the real part of the {@code k}-th {@code n}-th unity root',\n      '@return the real value of the {@code k}-th {@code n}-th root of unity',\n      '@return the real part of the {@code k}-th {@code n}-th root of unity',\n      '@return the real component of the {@code k}-th {@code n}-th root of unity'\n    ]\n  },\n  {\n    'tag': '@throws MathIllegalStateException if no roots of unity have been\\ncomputed yet',\n    'alternatives': [\n      '@throws MathIllegalStateException if the computation of roots of unity has not been\\nperformed yet',\n      '@throws MathIllegalStateException if roots of unity have not been\\ncomputed yet',\n      '@throws MathIllegalStateException if no calculation of roots of unity has taken place\\nyet',\n      '@throws MathIllegalStateException if the roots of unity have not yet been computed',\n      '@throws MathIllegalStateException if the roots of unity have not been computed\\ntill now'\n    ]\n  },\n  {\n    'tag': '@throws MathIllegalArgumentException if {@code k} is out of range',\n    'alternatives': [\n      '@throws MathIllegalArgumentException if the provided {@code k} is out of range',\n      '@throws MathIllegalArgumentException if the argument {@code k} is outside the valid range',\n      '@throws MathIllegalArgumentException if the value of {@code k} is not within the valid range',\n      '@throws MathIllegalArgumentException if the input {@code k} is out of the allowed range',\n      '@throws MathIllegalArgumentException if {@code k} is outside the acceptable range'\n    ]\n  },\n  {\n    'tag': '@param k index of the {@code n}-th root of unity',\n    'alternatives': [\n      '@param k the position of the {@code n}-th root of unity',\n      '@param k the index of the unity root number {@code n}',\n      '@param k the location of the {@code n}-th root of unity',\n      '@param k the order of the {@code n}-th root of unity',\n      '@param k the place of the {@code n}-th root of unity'\n    ]\n  },\n  {\n    'tag': '@return imaginary part of the {@code k}-th {@code n}-th root of unity',\n    'alternatives': [\n      '@return the imaginary component of the {@code k}-th {@code n}-th unity root',\n      '@return the imaginary part of the {@code k}-th {@code n}-th unity root',\n      '@return the imaginary value of the {@code k}-th {@code n}-th root of unity',\n      '@return the imaginary part of the {@code k}-th {@code n}-th root of unity',\n      '@return the imaginary component of the {@code k}-th {@code n}-th root of unity'\n    ]\n  },\n  {\n    'tag': '@throws MathIllegalStateException if no roots of unity have been\\ncomputed yet',\n    'alternatives': [\n      '@throws MathIllegalStateException if the computation of roots of unity has not been\\nperformed yet',\n      '@throws MathIllegalStateException if roots of unity have not been\\ncomputed yet',\n      '@throws MathIllegalStateException if no calculation of roots of unity has taken place\\nyet',\n      '@throws MathIllegalStateException if the roots of unity have not yet been computed',\n      '@throws MathIllegalStateException if the roots of unity have not been computed\\ntill now'\n    ]\n  },\n  {\n    'tag': '@throws OutOfRangeException if {@code k} is out of range',\n    'alternatives': [\n      '@throws OutOfRangeException if the provided {@code k} is out of range',\n      '@throws OutOfRangeException if the argument {@code k} is outside the valid range',\n      '@throws OutOfRangeException if the value of {@code k} is not within the valid range',\n      '@throws OutOfRangeException if the input {@code k} is out of the allowed range',\n      '@throws OutOfRangeException if {@code k} is outside the acceptable range'\n    ]\n  },\n  {\n    'tag': '@return the number of roots of unity currently stored',\n    'alternatives': [\n      '@return the count of currently stored roots of unity',\n      '@return the total number of roots of unity present',\n      '@return the number of unity roots currently in storage',\n      '@return the quantity of roots of unity currently held',\n      '@return the amount of stored roots of unity'\n    ]\n  },\n  {\n    'tag': '@return the conjugate quaternion',\n    'alternatives': [\n      '@return the quaternion that is conjugate',\n      '@return the quaternion with its conjugate',\n      '@return the quaternion that is the conjugate',\n      '@return the quaternion flipped in sign',\n      '@return the quaternion that is the reverse'\n    ]\n  }\n]"