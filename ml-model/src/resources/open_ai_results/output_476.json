"output = [\n  {\n    'tag': '@param factors the list where to add the factors.',\n    'alternatives': [\n      '@param factors the list in which to include the factors.',\n      '@param factors the list to which the factors should be appended.',\n      '@param factors the list that will receive the factors.',\n      '@param factors the list where the factors should be placed.',\n      '@param factors the list to add the factors to.'\n    ]\n  },\n  {\n    'tag': '@return the part of n which remains to be factored, it is either a prime or a semi-prime',\n    'alternatives': [\n      '@return the remaining part of n to be factored, which can be a prime or a semi-prime.',\n      '@return the portion of n that still needs to be factored, which can be either a prime or a semi-prime.',\n      '@return the part of n that is left to be factored, and can be a prime or a semi-prime.',\n      '@return the section of n that is yet to be factored, and can be a prime or a semi-prime.',\n      '@return the component of n that is yet to be factored, and can be either a prime or a semi-prime.'\n    ]\n  },\n  {\n    'tag': '@param maxFactor the upper bound of trial division: if it is reached, the method gives up and returns n.',\n    'alternatives': [\n      '@param maxFactor is the maximum limit for trial division: if reached, the method stops and returns n.',\n      '@param maxFactor is the highest limit for trial division: if it is reached, the method gives up and returns n.',\n      '@param maxFactor represents the upper threshold for trial division: if it is reached, the method aborts and returns n.',\n      '@param maxFactor is the maximum value for trial division: if reached, the method terminates and returns n.',\n      '@param maxFactor is the highest possible value for trial division: if reached, the method abandons and returns n.'\n    ]\n  },\n  {\n    'tag': '@param factors the list where to add the factors.',\n    'alternatives': [\n      '@param factors the list in which to include the factors.',\n      '@param factors the list to which the factors should be appended.',\n      '@param factors the list that will receive the factors.',\n      '@param factors the list where the factors should be placed.',\n      '@param factors the list to add the factors to.'\n    ]\n  },\n  {\n    'tag': '@return n or 1 if factorization is completed.',\n    'alternatives': [\n      '@return n or 1 if the factorization process is finished.',\n      '@return n or 1 if the factorization is done.',\n      '@return n or 1 if the factorization is complete.',\n      '@return n or 1 if the factorization process is concluded.',\n      '@return n or 1 if the factorization is finished.'\n    ]\n  },\n  {\n    'tag': '@param n the number to factor',\n    'alternatives': [\n      '@param n the digit to be factored',\n      '@param n the value to factorize',\n      '@param n the variable to be factored',\n      '@param n the number to be factored',\n      '@param n the value to be factored'\n    ]\n  },\n  {\n    'tag': '@return the list of prime factors of n',\n    'alternatives': [\n      '@return the prime factors list of n',\n      '@return the list containing the prime factors of n',\n      '@return the list that holds the prime factors of n',\n      '@return the list of prime factors for n',\n      '@return the list including the prime factors of n'\n    ]\n  },\n  {\n    'tag': '@param n number to test: an odd integer &ge; 3',\n    'alternatives': [\n      '@param n number to examine: an odd integer &ge; 3',\n      '@param n number to check: an odd integer &ge; 3',\n      '@param n number to verify: an odd integer &ge; 3',\n      '@param n number to evaluate: an odd integer &ge; 3',\n      '@param n number to inspect: an odd integer &ge; 3'\n    ]\n  },\n  {\n    'tag': '@return true if n is prime. false if n is definitely composite.',\n    'alternatives': [\n      '@return true if n is a prime number. false if n is certainly composite.',\n      '@return true if n is a prime. false if n is definitely not prime.',\n      '@return true if n is a prime. false if n is known to be composite.',\n      '@return true if n is prime. false if n is undoubtedly composite.',\n      '@return true if n is a prime number. false if n is definitely not prime.'\n    ]\n  },\n  {\n    'tag': '@return the list of prime factors of n.',\n    'alternatives': [\n      '@return the prime factors list of n.',\n      '@return the list containing the prime factors of n.',\n      '@return the list that holds the prime factors of n.',\n      '@return the list of prime factors for n.',\n      '@return the list including the prime factors of n.'\n    ]\n  },\n  {\n    'tag': '@param n number to factor, must be semi-prime.',\n    'alternatives': [\n      '@param n number to be factored, must be semi-prime.',\n      '@param n number to factorize, must be semi-prime.',\n      '@param n number to decompose, must be semi-prime.',\n      '@param n number to break down, must be semi-prime.',\n      '@param n number to analyze, must be semi-prime.'\n    ]\n  },\n  {\n    'tag': '@return a prime factor of n.',\n    'alternatives': [\n      '@return a prime factor for n.',\n      '@return a factor that is a prime number for n.',\n      '@return a prime factor from n.',\n      '@return a factor which is prime for n.',\n      '@return a prime factor that divides n.'\n    ]\n  },\n  {\n    'tag': '@return gcd(a,b)',\n    'alternatives': [\n      '@return the greatest common divisor of a and b',\n      '@return the greatest common divisor between a and b',\n      '@return the gcd of a and b',\n      '@return the highest common factor of a and b',\n      '@return the greatest common divisor of a and b.'\n    ]\n  },\n  {\n    'tag': '@param x abscissa of the point',\n    'alternatives': [\n      '@param x x-coordinate of the point',\n      '@param x horizontal position of the point',\n      '@param x the x-axis value of the point',\n      '@param x the horizontal coordinate of the point',\n      '@param x the abscissa value of the point'\n    ]\n  },\n  {\n    'tag': '@param y observed value of the point at x, after fitting we should\\nhave f(x) as close as possible to this value',\n    'alternatives': [\n      '@param y value observed at point x, after fitting we aim to make\\nf(x) as close as possible to this value',\n      '@param y value of the point at x observed, after the fitting process we want\\nf(x) to be as near as feasible to this value',\n      '@param y observed value of the point at x, after adjustment we need\\nf(x) to be as near as possible to this value',\n      '@param y value observed at point x, after fitting we should\\nstrive to make f(x) as close as possible to this value',\n      '@param y observed value of the point at x, after fitting we want\\nf(x) to be as close as possible to this value'\n    ]\n  },\n  {\n    'tag': '@param weight weight of the observed point in the fit',\n    'alternatives': [\n      '@param weight significance of the observed point in the fit',\n      '@param weight importance of the observed point in the fit',\n      '@param weight priority of the observed point in the fit',\n      '@param weight relevance of the observed point in the fit',\n      '@param weight impact of the observed point in the fit'\n    ]\n  },\n  {\n    'tag': '@param x abscissa of the point',\n    'alternatives': [\n      '@param x x-coordinate of the point',\n      '@param x horizontal position of the point',\n      '@param x the x-axis value of the point',\n      '@param x the horizontal coordinate of the point',\n      '@param x the abscissa value of the point'\n    ]\n  },\n  {\n    'tag': '@param y observed value of the point at x, after fitting we should\\nhave f(x) as close as possible to this value',\n    'alternatives': [\n      '@param y value observed at point x, after fitting we aim to make\\nf(x) as close as possible to this value',\n      '@param y value of the point at x observed, after the fitting process we want\\nf(x) to be as near as feasible to this value',\n      '@param y observed value of the point at x, after adjustment we need\\nf(x) to be as near as possible to this value',\n      '@param y value observed at point x, after fitting we should\\nstrive to make f(x) as close as possible to this value',\n      '@param y observed value of the point at x, after fitting we want\\nf(x) to be as close as possible to this value'\n    ]\n  },\n  {\n    'tag': '@param observed observed point to add',\n    'alternatives': [\n      '@param observed point to be added',\n      '@param observed point to include',\n      '@param observed point to append',\n      '@param observed point to insert',\n      '@param observed point to include'\n    ]\n  },\n  {\n    'tag': '@return observed points',\n    'alternatives': [\n      '@return points that were observed',\n      '@return the observed set of points',\n      '@return the points that were observed',\n      '@return the points observed',\n      '@return the observed collection of points'\n    ]\n  },\n  {\n    'tag': '@param f parametric function to fit.',\n    'alternatives': [\n      '@param f function with parameters to be adjusted.',\n      '@param f function with adjustable parameters.',\n      '@param f function for fitting with adjustable parameters.',\n      '@param f function to fit with parameters to be determined.',\n      '@param f function to adjust with parameters.'\n    ]\n  },\n  {\n    'tag': '@param initialGuess first guess of the function parameters.',\n    'alternatives': [\n      '@param initialGuess initial estimation of the function parameters.',\n      '@param initialGuess initial approximation of the function parameters.',\n      '@param initialGuess the first guess for the function parameters.',\n      '@param initialGuess the initial estimation for the function parameters.',\n      '@param initialGuess the initial approximation for the function parameters.'\n    ]\n  },\n  {\n    'tag': '@return the fitted parameters.',\n    'alternatives': [\n      '@return the parameters that have been fitted.',\n      '@return the determined parameters.',\n      '@return the adjusted parameters.',\n      '@return the calculated parameters.',\n      '@return the parameters that were determined.'\n    ]\n  },\n  {\n    'tag': '@throws org.apache.commons.math3.exception.DimensionMismatchException if the start point dimension is wrong.',\n    'alternatives': [\n      '@throws org.apache.commons.math3.exception.DimensionMismatchException if the dimension of the start point is incorrect.',\n      '@throws org.apache.commons.math3.exception.DimensionMismatchException if the start point has an incorrect dimension.',\n      '@throws org.apache.commons.math3.exception.DimensionMismatchException if the start point does not have the correct dimension.',\n      '@throws org.apache.commons.math3.exception.DimensionMismatchException if the start point has an invalid dimension.',\n      '@throws org.apache.commons.math3.exception.DimensionMismatchException if the dimension of the start point is not right.'\n    ]\n  },\n  {\n    'tag': '@param f parametric function to fit.',\n    'alternatives': [\n      '@param f function with parameters to be adjusted.',\n      '@param f function with adjustable parameters.',\n      '@param f function for fitting with adjustable parameters.',\n      '@param f function to fit with parameters to be determined.',\n      '@param f function to adjust with parameters.'\n    ]\n  }\n]"