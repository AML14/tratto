"output = [\n  {\n    'tag': '@param columnDimension the number of columns in the new matrix',\n    'alternatives': [\n      '@param columnDimension the count of columns in the new matrix',\n      '@param columnDimension the quantity of columns in the new matrix',\n      '@param columnDimension the size of the columns in the new matrix',\n      '@param columnDimension the dimension of columns in the new matrix',\n      '@param columnDimension the number of columns in the matrix being created'\n    ]\n  },\n  {\n    'tag': '@return a new matrix of the same type as the instance',\n    'alternatives': [\n      '@return a new matrix with the identical type as the instance',\n      '@return a new matrix that has the same type as the instance',\n      '@return a new matrix that is of the same type as the instance',\n      '@return a new matrix having the same type as the instance',\n      '@return a new matrix characterized by the same type as the instance'\n    ]\n  },\n  {\n    'tag': '@return a copy of this matrix.',\n    'alternatives': [\n      '@return an exact replica of this matrix.',\n      '@return an exact duplicate of this matrix.',\n      '@return a clone of this matrix.',\n      '@return a replicated version of this matrix.',\n      '@return a carbon copy of this matrix.'\n    ]\n  },\n  {\n    'tag': '@param m Matrix to be added.',\n    'alternatives': [\n      '@param m Matrix to add.',\n      '@param m Matrix for addition.',\n      '@param m Matrix to be included.',\n      '@param m Matrix for adding.',\n      '@param m Matrix that will be added.'\n    ]\n  },\n  {\n    'tag': '@return {@code this} + {@code m}.',\n    'alternatives': [\n      '@return sum of {@code this} and {@code m}.',\n      '@return result of adding {@code m} to {@code this}.',\n      '@return the addition of {@code this} and {@code m}.',\n      '@return the sum obtained by adding {@code m} to {@code this}.',\n      '@return the outcome of adding {@code m} to {@code this}.'\n    ]\n  },\n  {\n    'tag': '@throws MatrixDimensionMismatchException if {@code m} is not the same\\nsize as {@code this} matrix.',\n    'alternatives': [\n      '@throws MatrixDimensionMismatchException if size of {@code m} does not match\\nsize of {@code this} matrix.',\n      '@throws MatrixDimensionMismatchException if {@code m} has a different size\\ncompared to {@code this} matrix.',\n      '@throws MatrixDimensionMismatchException if size of {@code m} is not equal to\\nsize of {@code this} matrix.',\n      '@throws MatrixDimensionMismatchException if size of {@code m} does not equal\\nsize of {@code this} matrix.',\n      '@throws MatrixDimensionMismatchException if {@code m} is not the same size as\\n{@code this} matrix.'\n    ]\n  },\n  {\n    'tag': '@param m Matrix to be subtracted.',\n    'alternatives': [\n      '@param m Matrix to subtract.',\n      '@param m Matrix for subtraction.',\n      '@param m Matrix to be deducted.',\n      '@param m Matrix for subtracting.',\n      '@param m Matrix that will be subtracted.'\n    ]\n  },\n  {\n    'tag': '@return {@code this} - {@code m}.',\n    'alternatives': [\n      '@return difference between {@code this} and {@code m}.',\n      '@return result of subtracting {@code m} from {@code this}.',\n      '@return the subtraction of {@code m} from {@code this}.',\n      '@return the difference obtained by subtracting {@code m} from {@code this}.',\n      '@return the outcome of subtracting {@code m} from {@code this}.'\n    ]\n  },\n  {\n    'tag': '@throws MatrixDimensionMismatchException if {@code m} is not the same\\nsize as {@code this} matrix.',\n    'alternatives': [\n      '@throws MatrixDimensionMismatchException if size of {@code m} does not match\\nsize of {@code this} matrix.',\n      '@throws MatrixDimensionMismatchException if {@code m} has a different size\\ncompared to {@code this} matrix.',\n      '@throws MatrixDimensionMismatchException if size of {@code m} is not equal to\\nsize of {@code this} matrix.',\n      '@throws MatrixDimensionMismatchException if size of {@code m} does not equal\\nsize of {@code this} matrix.',\n      '@throws MatrixDimensionMismatchException if {@code m} is not the same size as\\n{@code this} matrix.'\n    ]\n  },\n  {\n    'tag': '@param d Value to be added to each entry.',\n    'alternatives': [\n      '@param d Value to be included in every entry.',\n      '@param d Value to add to each element.',\n      '@param d Value to be added to every item.',\n      '@param d Value to add to all entries.',\n      '@param d Value that will be added to each value.'\n    ]\n  },\n  {\n    'tag': '@return {@code d} + {@code this}.',\n    'alternatives': [\n      '@return sum of {@code d} and {@code this}.',\n      '@return result of adding {@code d} to {@code this}.',\n      '@return the addition of {@code d} and {@code this}.',\n      '@return the sum obtained by adding {@code d} to {@code this}.',\n      '@return the outcome of adding {@code d} to {@code this}.'\n    ]\n  },\n  {\n    'tag': '@param d Value to multiply all entries by.',\n    'alternatives': [\n      '@param d Value to scale all elements by.',\n      '@param d Value to be used for multiplying all items.',\n      '@param d Value to multiply each entry by.',\n      '@param d Value to apply as a scaling factor to all entries.',\n      '@param d Value that will be multiplied with each value.'\n    ]\n  },\n  {\n    'tag': '@return {@code d} * {@code this}.',\n    'alternatives': [\n      '@return product of {@code d} and {@code this}.',\n      '@return result of multiplying {@code d} and {@code this}.',\n      '@return the multiplication of {@code d} and {@code this}.',\n      '@return the product obtained by multiplying {@code d} and {@code this}.',\n      '@return the outcome of multiplying {@code d} and {@code this}.'\n    ]\n  },\n  {\n    'tag': '@param m Matrix to postmultiply by.',\n    'alternatives': [\n      '@param m Matrix to multiply with afterwards.',\n      '@param m Matrix to be applied as a post-multiplication.',\n      '@param m Matrix for subsequent multiplication.',\n      '@param m Matrix used for post-multiplication.',\n      '@param m Matrix that will be post-multiplied.'\n    ]\n  },\n  {\n    'tag': '@return {@code this} * {@code m}.',\n    'alternatives': [\n      '@return product of {@code this} and {@code m}.',\n      '@return result of multiplying {@code this} with {@code m}.',\n      '@return the multiplication of {@code this} and {@code m}.',\n      '@return the product obtained by multiplying {@code this} with {@code m}.',\n      '@return the outcome of multiplying {@code this} with {@code m}.'\n    ]\n  },\n  {\n    'tag': '@throws DimensionMismatchException if the number of columns of\\n{@code this} matrix is not equal to the number of rows of matrix\\n{@code m}.',\n    'alternatives': [\n      '@throws DimensionMismatchException if the number of columns in\\n{@code this} matrix does not match the number of rows in matrix\\n{@code m}.',\n      '@throws DimensionMismatchException if the number of columns of\\n{@code this} matrix differs from the number of rows of matrix\\n{@code m}.',\n      '@throws DimensionMismatchException if the number of columns in\\n{@code this} matrix is not the same as the number of rows in matrix\\n{@code m}.',\n      '@throws DimensionMismatchException if the number of columns of\\n{@code this} matrix is not equivalent to the number of rows of matrix\\n{@code m}.',\n      '@throws DimensionMismatchException if the number of columns in\\n{@code this} matrix does not equal the number of rows in matrix\\n{@code m}.'\n    ]\n  },\n  {\n    'tag': '@param m Matrix to premultiply by.',\n    'alternatives': [\n      '@param m Matrix to multiply with beforehand.',\n      '@param m Matrix to be applied as a pre-multiplication.',\n      '@param m Matrix for preceding multiplication.',\n      '@param m Matrix used for pre-multiplication.',\n      '@param m Matrix that will be pre-multiplied.'\n    ]\n  },\n  {\n    'tag': '@return {@code m} * {@code this}.',\n    'alternatives': [\n      '@return product of {@code m} and {@code this}.',\n      '@return result of multiplying {@code m} with {@code this}.',\n      '@return the multiplication of {@code m} and {@code this}.',\n      '@return the product obtained by multiplying {@code m} with {@code this}.',\n      '@return the outcome of multiplying {@code m} with {@code this}.'\n    ]\n  },\n  {\n    'tag': '@throws DimensionMismatchException if the number of columns of {@code m}\\ndiffers from the number of rows of {@code this} matrix.',\n    'alternatives': [\n      '@throws DimensionMismatchException if the number of columns in {@code m}\\ndoes not match the number of rows in {@code this} matrix.',\n      '@throws DimensionMismatchException if the number of columns of {@code m}\\nis not equal to the number of rows of {@code this} matrix.',\n      '@throws DimensionMismatchException if the number of columns in {@code m}\\ndoes not equal the number of rows in {@code this} matrix.',\n      '@throws DimensionMismatchException if the number of columns in {@code m}\\ndoes not match the number of rows in {@code this} matrix.',\n      '@throws DimensionMismatchException if the number of columns of {@code m}\\nis not the same as the number of rows of {@code this} matrix.'\n    ]\n  },\n  {\n    'tag': '@param p raise this to power p',\n    'alternatives': [\n      '@param p exponent for raising this to power p',\n      '@param p power to raise this to',\n      '@param p number to use as the power',\n      '@param p value to be used as the exponent',\n      '@param p value that will be used as the power'\n    ]\n  },\n  {\n    'tag': '@return this^p',\n    'alternatives': [\n      '@return this raised to the power of p',\n      '@return result of raising this to power p',\n      '@return the exponentiation of this to the power of p',\n      '@return the power of this with an exponent of p',\n      '@return the outcome of raising this to power p'\n    ]\n  },\n  {\n    'tag': '@return a 2-dimensional array of entries.',\n    'alternatives': [\n      '@return a two-dimensional array containing entries.',\n      '@return a 2D array of the matrix entries.',\n      '@return an array of entries in the form of a 2D matrix.',\n      '@return a 2D list of the matrix entries.',\n      '@return a two-dimensional representation of the entries.'\n    ]\n  },\n  {\n    'tag': '@param startRow Initial row index',\n    'alternatives': [\n      '@param startRow Index of the starting row',\n      '@param startRow Row index to begin from',\n      '@param startRow First row position',\n      '@param startRow Row index to initiate',\n      '@param startRow Position of the initial row'\n    ]\n  },\n  {\n    'tag': '@param endRow Final row index (inclusive)',\n    'alternatives': [\n      '@param endRow Index of the ending row (inclusive)',\n      '@param endRow Row index to end at (inclusive)',\n      '@param endRow Last row position (inclusive)',\n      '@param endRow Row index to conclude (inclusive)',\n      '@param endRow Position of the final row (inclusive)'\n    ]\n  },\n  {\n    'tag': '@param startColumn Initial column index',\n    'alternatives': [\n      '@param startColumn Index of the starting column',\n      '@param startColumn Column index to begin from',\n      '@param startColumn First column position',\n      '@param startColumn Column index to initiate',\n      '@param startColumn Position of the initial column'\n    ]\n  }\n]"