"[\n  {\n    'tag': '@param listener the listener to run when the computation is complete',\n    'alternatives': [\n      '@param listener the runnable to execute after the computation is finished',\n      '@param listener the callback to run once the computation is done',\n      '@param listener the function to be executed when the computation finishes',\n      '@param listener the handler to execute when the computation is complete',\n      '@param listener the action to perform after the computation is finished'\n    ]\n  },\n  {\n    'tag': '@param executor the executor to run the listener in',\n    'alternatives': [\n      '@param executor the executor to execute the callback in',\n      '@param executor the executor to use for running the listener',\n      '@param executor the executor responsible for executing the listener',\n      '@param executor the executor in which the listener will be executed',\n      '@param executor the executor that will run the callback'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if the executor or listener was null',\n    'alternatives': [\n      '@throws NullPointerException when the executor or listener is null',\n      '@throws NullPointerException if either the executor or listener is null',\n      '@throws NullPointerException in case the executor or listener is null',\n      '@throws NullPointerException if the executor or listener parameter is null',\n      '@throws NullPointerException when either the executor or the listener is null'\n    ]\n  },\n  {\n    'tag': '@throws RejectedExecutionException if we tried to execute the listener\\n        immediately but the executor rejected it.',\n    'alternatives': [\n      '@throws RejectedExecutionException when the listener is rejected by the executor upon immediate execution',\n      '@throws RejectedExecutionException if the executor rejects the listener when executing it immediately',\n      '@throws RejectedExecutionException if the executor refuses to execute the listener immediately',\n      '@throws RejectedExecutionException in case the executor rejects the listener upon immediate execution',\n      '@throws RejectedExecutionException if the listener is immediately executed but rejected by the executor'\n    ]\n  },\n  {\n    'tag': '@throws InterruptedException if interrupted while waiting',\n    'alternatives': [\n      '@throws InterruptedException when interrupted during the waiting process',\n      '@throws InterruptedException if interrupted while in the waiting state',\n      '@throws InterruptedException if the waiting process is interrupted',\n      '@throws InterruptedException in case of interruption during the wait',\n      '@throws InterruptedException if interrupted while waiting for a condition'\n    ]\n  },\n  {\n    'tag': '@return whether the monitor was entered',\n    'alternatives': [\n      '@return indicates if the monitor was successfully entered',\n      '@return true if the monitor was entered, false otherwise',\n      '@return true if the lock was acquired successfully, false otherwise',\n      '@return if the monitor was entered or not',\n      '@return a boolean indicating whether the monitor was entered or not'\n    ]\n  },\n  {\n    'tag': '@return The rotation angle in degrees.',\n    'alternatives': [\n      '@return The angle of rotation expressed in degrees.',\n      '@return The degree measure of the rotation angle.',\n      '@return The rotation angle measured in degrees.',\n      '@return The angle of rotation, specified in degrees.',\n      '@return The angle of rotation represented in degrees.'\n    ]\n  },\n  {\n    'tag': '@param theta The rotation angle in degrees.',\n    'alternatives': [\n      '@param theta The angle of rotation expressed in degrees.',\n      '@param theta The degree measure of the rotation angle.',\n      '@param theta The rotation angle measured in degrees.',\n      '@param theta The angle of rotation, specified in degrees.',\n      '@param theta The angle of rotation represented in degrees.'\n    ]\n  },\n  {\n    'tag': '@return The graph estimated size in graph units.',\n    'alternatives': [\n      '@return The estimated size of the graph in graph units.',\n      '@return The approximate size of the graph in graph units.',\n      '@return The estimated size of the graph expressed in graph units.',\n      '@return The graph size estimation in graph units.',\n      '@return The approximate size of the graph, measured in graph units.'\n    ]\n  },\n  {\n    'tag': '@param minx The minimum abscissa visible.',\n    'alternatives': [\n      '@param minx The smallest visible abscissa.',\n      '@param minx The minimum visible horizontal coordinate.',\n      '@param minx The minimum visible x-coordinate.',\n      '@param minx The smallest abscissa that is visible.',\n      '@param minx The lowest visible x-coordinate.'\n    ]\n  },\n  {\n    'tag': '@param miny The minimum ordinate visible.',\n    'alternatives': [\n      '@param miny The smallest visible ordinate.',\n      '@param miny The minimum visible vertical coordinate.',\n      '@param miny The minimum visible y-coordinate.',\n      '@param miny The smallest ordinate that is visible.',\n      '@param miny The lowest visible y-coordinate.'\n    ]\n  },\n  {\n    'tag': '@param maxx The maximum abscissa visible.',\n    'alternatives': [\n      '@param maxx The largest visible abscissa.',\n      '@param maxx The maximum visible horizontal coordinate.',\n      '@param maxx The maximum visible x-coordinate.',\n      '@param maxx The largest abscissa that is visible.',\n      '@param maxx The highest visible x-coordinate.'\n    ]\n  },\n  {\n    'tag': '@param maxy The maximum abscissa visible.',\n    'alternatives': [\n      '@param maxy The largest visible ordinate.',\n      '@param maxy The maximum visible vertical coordinate.',\n      '@param maxy The maximum visible y-coordinate.',\n      '@param maxy The largest ordinate that is visible.',\n      '@param maxy The highest visible y-coordinate.'\n    ]\n  },\n  {\n    'tag': '@param minx Lowest abscissa.',\n    'alternatives': [\n      '@param minx Smallest abscissa.',\n      '@param minx Minimum horizontal coordinate.',\n      '@param minx Minimum x-coordinate.',\n      '@param minx The minimum abscissa.',\n      '@param minx The smallest horizontal coordinate.'\n    ]\n  },\n  {\n    'tag': '@param miny Lowest ordinate.',\n    'alternatives': [\n      '@param miny Smallest ordinate.',\n      '@param miny Minimum vertical coordinate.',\n      '@param miny Minimum y-coordinate.',\n      '@param miny The minimum ordinate.',\n      '@param miny The smallest vertical coordinate.'\n    ]\n  },\n  {\n    'tag': '@param minz Lowest depth.',\n    'alternatives': [\n      '@param minz Smallest depth.',\n      '@param minz Minimum depth.',\n      '@param minz The minimum value for the depth.',\n      '@param minz Lowest value for the depth.',\n      '@param minz The smallest value for the depth.'\n    ]\n  }\n]"