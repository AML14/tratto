"output= [\n  {\n    'tag': '@return A formatted BigFraction in proper form.',\n    'alternatives': [\n      '@return A properly formatted BigFraction in the correct form.',\n      '@return A BigFraction formatted correctly and in the proper form.',\n      '@return A BigFraction that is properly formatted in the correct form.',\n      '@return A BigFraction formatted in the proper form according to the formatting rules.',\n      '@return A BigFraction that is properly formatted in the required form.'\n    ]\n  },\n  {\n    'tag': '@return the default complex format.',\n    'alternatives': [\n      '@return the complex format by default.',\n      '@return the default format for complex numbers.',\n      '@return the format that is set as the default for complex numbers.',\n      '@return the format used as the default for complex numbers.',\n      '@return the format that is considered the default for complex numbers.'\n    ]\n  },\n  {\n    'tag': '@param locale the specific locale used by the format.',\n    'alternatives': [\n      '@param locale the format-specific specific locale to be used.',\n      '@param locale the specific locale to be used for the formatting task.',\n      '@param locale the locale that is specific to the format being used.',\n      '@param locale the locale that is used specifically for the formatting.',\n      '@param locale the locale that is specifically used by the format.'\n    ]\n  },\n  {\n    'tag': '@return the complex format specific to the given locale.',\n    'alternatives': [\n      '@return the format for complex numbers that is specific to the provided locale.',\n      '@return the complex format that is tailored to the given locale.',\n      '@return the format that is used specifically for complex numbers in the given locale.',\n      '@return the format for complex numbers that is specifically based on the provided locale.',\n      '@return the format that is specific for complex numbers in the given locale.'\n    ]\n  },\n  {\n    'tag': '@return the default complex format.',\n    'alternatives': [\n      '@return the format for complex numbers that is set as the default.',\n      '@return the format that is considered the default for complex numbers.',\n      '@return the format that is used by default for complex numbers.',\n      '@return the complex format that is the default option.',\n      '@return the format that is set as the default for complex numbers.'\n    ]\n  },\n  {\n    'tag': '@param locale the specific locale used by the format.',\n    'alternatives': [\n      '@param locale the format-specific specific locale to be used.',\n      '@param locale the specific locale to be used for the formatting task.',\n      '@param locale the locale that is specific to the format being used.',\n      '@param locale the locale that is used specifically for the formatting.',\n      '@param locale the locale that is specifically used by the format.'\n    ]\n  },\n  {\n    'tag': '@return the complex format specific to the given locale.',\n    'alternatives': [\n      '@return the format for complex numbers that is specific to the provided locale.',\n      '@return the complex format that is tailored to the given locale.',\n      '@return the format that is used specifically for complex numbers in the given locale.',\n      '@return the format for complex numbers that is specifically based on the provided locale.',\n      '@return the format that is specific for complex numbers in the given locale.'\n    ]\n  },\n  {\n    'tag': '@param BigFraction the object to format.',\n    'alternatives': [\n      '@param BigFraction the object that requires formatting.',\n      '@param BigFraction the object that needs to be formatted.',\n      '@param BigFraction the object that should be formatted.',\n      '@param BigFraction the object which is to be formatted.',\n      '@param BigFraction the object that is to be formatted.'\n    ]\n  },\n  {\n    'tag': '@param toAppendTo where the text is to be appended',\n    'alternatives': [\n      '@param toAppendTo the location where the text will be added',\n      '@param toAppendTo the position where the text should be appended',\n      '@param toAppendTo the place where the text needs to be added',\n      '@param toAppendTo the point where the text will be inserted',\n      '@param toAppendTo the destination where the text is going to be appended'\n    ]\n  },\n  {\n    'tag': '@param pos On input: an alignment field, if desired. On output: the\\n           offsets of the alignment field',\n    'alternatives': [\n      '@param pos On input: an optional alignment field. On output: the offsets of the alignment field',\n      '@param pos On input: an alignment field, if specified. On output: the offsets related to the alignment field',\n      '@param pos On input: a field for alignment, if required. On output: the offsets corresponding to the alignment field',\n      '@param pos On input: an alignment field, if needed. On output: the offsets associated with the alignment field',\n      '@param pos On input: an alignment field, if requested. On output: the offsets representing the alignment field'\n    ]\n  },\n  {\n    'tag': '@return the value passed in as toAppendTo.',\n    'alternatives': [\n      '@return the value that was provided as toAppendTo.',\n      '@return the original value of toAppendTo.',\n      '@return the initial value passed as toAppendTo.',\n      '@return the value that toAppendTo originally held.',\n      '@return the value of toAppendTo that was initially passed in.'\n    ]\n  },\n  {\n    'tag': '@param obj the object to format.',\n    'alternatives': [\n      '@param obj the object that needs formatting.',\n      '@param obj the object requiring formatting.',\n      '@param obj the object to be formatted.',\n      '@param obj the object that should be formatted.',\n      '@param obj the object for which formatting is required.'\n    ]\n  },\n  {\n    'tag': '@param toAppendTo where the text is to be appended',\n    'alternatives': [\n      '@param toAppendTo the location where the text will be added',\n      '@param toAppendTo the position where the text should be appended',\n      '@param toAppendTo the place where the text needs to be added',\n      '@param toAppendTo the point where the text will be inserted',\n      '@param toAppendTo the destination where the text is going to be appended'\n    ]\n  },\n  {\n    'tag': '@param pos On input: an alignment field, if desired. On output: the\\n           offsets of the alignment field',\n    'alternatives': [\n      '@param pos On input: an optional alignment field. On output: the offsets of the alignment field',\n      '@param pos On input: an alignment field, if specified. On output: the offsets related to the alignment field',\n      '@param pos On input: a field for alignment, if required. On output: the offsets corresponding to the alignment field',\n      '@param pos On input: an alignment field, if needed. On output: the offsets associated with the alignment field',\n      '@param pos On input: an alignment field, if requested. On output: the offsets representing the alignment field'\n    ]\n  },\n  {\n    'tag': '@return the value passed in as toAppendTo.',\n    'alternatives': [\n      '@return the value that was provided as toAppendTo.',\n      '@return the original value of toAppendTo.',\n      '@return the initial value passed as toAppendTo.',\n      '@return the value that toAppendTo originally held.',\n      '@return the value of toAppendTo that was initially passed in.'\n    ]\n  },\n  {\n    'tag': '@throws MathIllegalArgumentException if <code>obj</code> is not a valid type.',\n    'alternatives': [\n      '@throws MathIllegalArgumentException if the provided <code>obj</code> is not a valid type.',\n      '@throws MathIllegalArgumentException if the type of <code>obj</code> is not valid.',\n      '@throws MathIllegalArgumentException if the specified <code>obj</code> is of an invalid type.',\n      '@throws MathIllegalArgumentException if <code>obj</code> is of an unsupported type.',\n      '@throws MathIllegalArgumentException if the given <code>obj</code> is not a valid type.'\n    ]\n  },\n  {\n    'tag': '@param source the string to parse',\n    'alternatives': [\n      '@param source the text to be parsed',\n      '@param source the input string for parsing',\n      '@param source the string that needs to be parsed',\n      '@param source the string that should be parsed',\n      '@param source the textual input that requires parsing'\n    ]\n  },\n  {\n    'tag': '@return the parsed {@link BigFraction} object.',\n    'alternatives': [\n      '@return the object of {@link BigFraction} that has been parsed.',\n      '@return the {@link BigFraction} object obtained after parsing.',\n      '@return the object representing the parsed {@link BigFraction}.',\n      '@return the parsed {@link BigFraction} represented as an object.',\n      '@return the result of parsing as a {@link BigFraction} object.'\n    ]\n  },\n  {\n    'tag': '@throws MathParseException if the beginning of the specified string\\n           cannot be parsed.',\n    'alternatives': [\n      '@throws MathParseException if it is not possible to parse the start of the given string.',\n      '@throws MathParseException if the initial part of the provided string cannot be parsed.',\n      '@throws MathParseException if the specified string cannot be parsed from the start.',\n      '@throws MathParseException if the beginning of the string cannot be successfully parsed.',\n      '@throws MathParseException if the start of the specified string is not parsable.'\n    ]\n  },\n  {\n    'tag': '@param source the string to parse',\n    'alternatives': [\n      '@param source the text to be parsed',\n      '@param source the input string for parsing',\n      '@param source the string that needs to be parsed',\n      '@param source the string that should be parsed',\n      '@param source the textual input that requires parsing'\n    ]\n  },\n  {\n    'tag': '@param pos input/output parsing parameter.',\n    'alternatives': [\n      '@param pos parsing parameter for input/output.',\n      '@param pos the parsing parameter used for input/output.',\n      '@param pos the parsing parameter that handles input/output.',\n      '@param pos input/output parameter for parsing.',\n      '@param pos the parameter that handles input/output during parsing.'\n    ]\n  },\n  {\n    'tag': '@return the parsed {@link BigFraction} object.',\n    'alternatives': [\n      '@return the object of {@link BigFraction} that has been parsed.',\n      '@return the {@link BigFraction} object obtained after parsing.',\n      '@return the object representing the parsed {@link BigFraction}.',\n      '@return the parsed {@link BigFraction} represented as an object.',\n      '@return the result of parsing as a {@link BigFraction} object.'\n    ]\n  },\n  {\n    'tag': '@param source the string to parse',\n    'alternatives': [\n      '@param source the text to be parsed',\n      '@param source the input string for parsing',\n      '@param source the string that needs to be parsed',\n      '@param source the string that should be parsed',\n      '@param source the textual input that requires parsing'\n    ]\n  },\n  {\n    'tag': '@param pos input/output parsing parameter.',\n    'alternatives': [\n      '@param pos parsing parameter for input/output.',\n      '@param pos the parsing parameter used for input/output.',\n      '@param pos the parsing parameter that handles input/output.',\n      '@param pos input/output parameter for parsing.',\n      '@param pos the parameter that handles input/output during parsing.'\n    ]\n  },\n  {\n    'tag': '@return a parsed <code>BigInteger</code> or null if string does not\\ncontain a BigInteger at the specified position',\n    'alternatives': [\n      '@return a parsed <code>BigInteger</code> or null if the string does not contain a BigInteger at the provided position',\n      '@return a <code>BigInteger</code> that is parsed from the string, or null if there is no BigInteger at the given position',\n      '@return a parsed <code>BigInteger</code> or null if there is no BigInteger in the string at the specified position',\n      '@return a <code>BigInteger</code> that is extracted from the string, or null if no BigInteger is found at the given position',\n      '@return a parsed <code>BigInteger</code> or null if the string does not have a BigInteger at the specified position'\n    ]\n  }\n]"