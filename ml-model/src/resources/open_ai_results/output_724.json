"output=[\n  {\n    'tag': '@throws NullPointerException if either of the provided iterables is null',\n    'alternatives': [\n      '@throws NullPointerException if either of the given iterables is null',\n      '@throws NullPointerException if either iterable is null',\n      '@throws NullPointerException if any of the provided iterables is null',\n      '@throws NullPointerException if any of the given iterables is null',\n      '@throws NullPointerException if either of the iterables provided is null'\n    ]\n  },\n  {\n    'tag': '@param a the first iterable, may not be null',\n    'alternatives': [\n      '@param a the first iterable, must not be null',\n      '@param a the first iterable, should not be null',\n      '@param a the first iterable, cannot be null',\n      '@param a the first iterable, should never be null',\n      '@param a the first iterable, is not allowed to be null'\n    ]\n  },\n  {\n    'tag': '@param b the second iterable, may not be null',\n    'alternatives': [\n      '@param b the second iterable, must not be null',\n      '@param b the second iterable, should not be null',\n      '@param b the second iterable, cannot be null',\n      '@param b the second iterable, should never be null',\n      '@param b the second iterable, is not allowed to be null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if either iterable or predicate is null',\n    'alternatives': [\n      '@throws NullPointerException if either iterable or predicate is null',\n      '@throws NullPointerException if either iterable or predicate are null',\n      '@throws NullPointerException if either the iterable or the predicate is null',\n      '@throws NullPointerException if null iterable or predicate is provided',\n      '@throws NullPointerException if the iterable or the predicate is null'\n    ]\n  },\n  {\n    'tag': '@param iterable the iterable to filter, may not be null',\n    'alternatives': [\n      '@param iterable the iterable to filter, must not be null',\n      '@param iterable the iterable to filter, should not be null',\n      '@param iterable the iterable to filter, cannot be null',\n      '@param iterable the iterable to filter, should never be null',\n      '@param iterable the iterable to filter, is not allowed to be null'\n    ]\n  },\n  {\n    'tag': '@param predicate the predicate used to filter elements, may not be null',\n    'alternatives': [\n      '@param predicate the predicate used to filter elements, must not be null',\n      '@param predicate the predicate used to filter elements, should not be null',\n      '@param predicate the predicate used to filter elements, cannot be null',\n      '@param predicate the predicate used to filter elements, should never be null',\n      '@param predicate the predicate used to filter elements, is not allowed to be null'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if maxSize is negative',\n    'alternatives': [\n      '@throws IllegalArgumentException if maxSize is less than zero',\n      '@throws IllegalArgumentException if maxSize has a negative value',\n      '@throws IllegalArgumentException if maxSize is negative',\n      '@throws IllegalArgumentException if a negative maxSize is provided',\n      '@throws IllegalArgumentException if the value of maxSize is negative'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if iterable is null',\n    'alternatives': [\n      '@throws NullPointerException if iterable is null',\n      '@throws NullPointerException if iterable is a null object',\n      '@throws NullPointerException if the iterable provided is null',\n      '@throws NullPointerException if the iterable is null',\n      '@throws NullPointerException if a null iterable is used'\n    ]\n  },\n  {\n    'tag': '@param iterable the iterable to limit, may not be null',\n    'alternatives': [\n      '@param iterable the iterable to limit, must not be null',\n      '@param iterable the iterable to limit, should not be null',\n      '@param iterable the iterable to limit, cannot be null',\n      '@param iterable the iterable to limit, should never be null',\n      '@param iterable the iterable to limit, is not allowed to be null'\n    ]\n  },\n  {\n    'tag': '@param maxSize the maximum number of elements, must not be negative',\n    'alternatives': [\n      '@param maxSize the maximum number of elements, should not be negative',\n      '@param maxSize the maximum number of elements, cannot be negative',\n      '@param maxSize the maximum number of elements, must be greater than or equal to zero',\n      '@param maxSize the maximum number of elements, must have a non-negative value',\n      '@param maxSize the maximum number of elements, must be a non-negative number'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if iterable is null',\n    'alternatives': [\n      '@throws NullPointerException if iterable is null',\n      '@throws NullPointerException if iterable is a null object',\n      '@throws NullPointerException if the iterable provided is null',\n      '@throws NullPointerException if the iterable is null',\n      '@throws NullPointerException if a null iterable is passed'\n    ]\n  },\n  {\n    'tag': '@param iterable the iterable to loop, may not be null',\n    'alternatives': [\n      '@param iterable the iterable to loop, must not be null',\n      '@param iterable the iterable to loop, should not be null',\n      '@param iterable the iterable to loop, cannot be null',\n      '@param iterable the iterable to loop, should never be null',\n      '@param iterable the iterable to loop, is not allowed to be null'\n    ]\n  },\n  {\n    'tag': '@param toAppendTo where the text is to be appended',\n    'alternatives': [\n      '@param toAppendTo the place where the text will be added',\n      '@param toAppendTo the location to add the text to',\n      '@param toAppendTo the target of the text appending',\n      '@param toAppendTo the destination for the appended text',\n      '@param toAppendTo the object to which the text will be appended'\n    ]\n  },\n  {\n    'tag': '@param pos On input: an alignment field, if desired. On output: the\\n           offsets of the alignment field',\n    'alternatives': [\n      '@param pos On input: an alignment field, if desired. On output: the\\n           offsets of the alignment field',\n      '@param pos If desired, it can be an alignment field on input and the\\n           offsets of the alignment field on output',\n      '@param pos An alignment field, if specified, on input while the\\n           offsets of the alignment field on output',\n      '@param pos An alignment field, if preferred, on input with the\\n           offsets of the alignment field on output',\n      '@param pos On input: if desired, it can be an alignment field. On output: it\\n           contains the offsets of the alignment field'\n    ]\n  },\n  {\n    'tag': '@return the value passed in as toAppendTo.',\n    'alternatives': [\n      '@return the passed value as toAppendTo.',\n      '@return the value given as toAppendTo.',\n      '@return the original value as toAppendTo.',\n      '@return the toAppendTo value.',\n      '@return the value that was provided as toAppendTo.'\n    ]\n  },\n  {\n    'tag': '@return the whole format.',\n    'alternatives': [\n      '@return the complete format.',\n      '@return the entire format.',\n      '@return the overall format.',\n      '@return the format for the whole.',\n      '@return the format that includes the whole.'\n    ]\n  },\n  {\n    'tag': '@param source the string to parse',\n    'alternatives': [\n      '@param source the string to be parsed',\n      '@param source the string used for the parsing',\n      '@param source the string that will be parsed',\n      '@param source the string intended for parsing',\n      '@param source the string for the parsing'\n    ]\n  },\n  {\n    'tag': '@param pos input/ouput parsing parameter.',\n    'alternatives': [\n      '@param pos parsing parameter for input/output.',\n      '@param pos parsing parameter with input/output.',\n      '@param pos input/output parsing parameter.',\n      '@param pos parsing parameter used for input/output.',\n      '@param pos input/output parameter for parsing.'\n    ]\n  },\n  {\n    'tag': '@return the parsed {@link Fraction} object.',\n    'alternatives': [\n      '@return the object of {@link Fraction} that was parsed.',\n      '@return the object of {@link Fraction} that has been parsed.',\n      '@return the {@link Fraction} object obtained from parsing.',\n      '@return the resultant object of {@link Fraction} from parsing.',\n      '@return the parsed object of {@link Fraction}.'\n    ]\n  },\n  {\n    'tag': '@param format The new whole format value.',\n    'alternatives': [\n      '@param format The new complete format value.',\n      '@param format The new entire format value.',\n      '@param format The new overall format value.',\n      '@param format The new format for the whole.',\n      '@param format The new format that includes the whole.'\n    ]\n  },\n  {\n    'tag': '@param format the custom format for the whole, numerator, and\\n       denominator.',\n    'alternatives': [\n      '@param format the custom format for the whole, numerator, and\\n       denominator.',\n      '@param format the custom format for the whole, numerator, and\\n       denominator.',\n      '@param format the custom format for the whole, numerator, and\\n       denominator.',\n      '@param format the whole, numerator, and denominator custom format.',\n      '@param format the custom format for the whole, numerator, and\\n       denominator.'\n    ]\n  },\n  {\n    'tag': '@param wholeFormat the custom format for the whole.',\n    'alternatives': [\n      '@param wholeFormat the custom format for the whole.',\n      '@param wholeFormat the custom format for the whole.',\n      '@param wholeFormat the custom format for the whole.',\n      '@param wholeFormat the format for the whole.',\n      '@param wholeFormat the custom format to use for the whole.'\n    ]\n  }\n]"