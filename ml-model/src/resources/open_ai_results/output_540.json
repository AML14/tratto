"[\n  {\n    \"tag\": \"@param diagonalOnly Number of initial iterations, where the covariance matrix\\nremains diagonal.\",\n    \"alternatives\": [\n      \"@param diagonalOnly Number of initial loops, maintaining the covariance matrix\\ndiagonal.\",\n      \"@param diagonalOnly Number of starting iterations, with the covariance matrix\\nremaining diagonal.\",\n      \"@param diagonalOnly Number of initial rounds, where the covariance matrix\\nstays diagonal.\"\n    ]\n  },\n  {\n    \"tag\": \"@param checkFeasableCount Determines how often new random objective variables are\\ngenerated in case they are out of bounds.\",\n    \"alternatives\": [\n      \"@param checkFeasableCount Defines the frequency at which new random objective variables are\\ngenerated when they exceed the boundaries.\",\n      \"@param checkFeasableCount Specifies how frequently new random objective variables are\\ncreated when they are out of range.\",\n      \"@param checkFeasableCount Determines the frequency of generating new random objective variables\\nin case they go beyond the limits.\"\n    ]\n  },\n  {\n    \"tag\": \"@param random Random generator.\",\n    \"alternatives\": [\n      \"@param random Random number generator.\",\n      \"@param random Random value generator.\",\n      \"@param random Generator of random values.\"\n    ]\n  },\n  {\n    \"tag\": \"@param generateStatistics Whether statistic data is collected.\",\n    \"alternatives\": [\n      \"@param generateStatistics Determines if statistical data is gathered.\",\n      \"@param generateStatistics Specifies whether to collect statistical data.\",\n      \"@param generateStatistics Controls the collection of statistical data.\"\n    ]\n  },\n  {\n    \"tag\": \"@param checker Convergence checker.\",\n    \"alternatives\": [\n      \"@param checker Convergence validator.\",\n      \"@param checker Convergence evaluator.\",\n      \"@param checker Convergence verifier.\"\n    ]\n  },\n  {\n    \"tag\": \"@param maxIterations Maximal number of iterations.\",\n    \"alternatives\": [\n      \"@param maxIterations Maximum number of iterations.\",\n      \"@param maxIterations Upper limit of iterations.\",\n      \"@param maxIterations The highest number of iterations.\"\n    ]\n  },\n  {\n    \"tag\": \"@param stopFitness Whether to stop if objective function value is smaller than\\n{@code stopFitness}.\",\n    \"alternatives\": [\n      \"@param stopFitness Whether to terminate if the objective function value is less than\\n{@code stopFitness}.\",\n      \"@param stopFitness Determines whether to halt if the objective function value is lower than\\n{@code stopFitness}.\",\n      \"@param stopFitness Controls whether to stop if the objective function value is below\\n{@code stopFitness}.\"\n    ]\n  },\n  {\n    \"tag\": \"@param isActiveCMA Chooses the covariance matrix update method.\",\n    \"alternatives\": [\n      \"@param isActiveCMA Selects the covariance matrix update procedure.\",\n      \"@param isActiveCMA Determines which method to use for covariance matrix update.\",\n      \"@param isActiveCMA Decides on the choice of covariance matrix update algorithm.\"\n    ]\n  },\n  {\n    \"tag\": \"@param checkFeasableCount Determines how often new random objective variables are\\ngenerated in case they are out of bounds.\",\n    \"alternatives\": [\n      \"@param checkFeasableCount Specifies the frequency of generating new random objective variables\\nwhen they exceed the boundaries.\",\n      \"@param checkFeasableCount Defines how frequently new random objective variables are\\ncreated when they go beyond the limits.\",\n      \"@param checkFeasableCount Determines the number of times new random objective variables\\nare generated if they are outside the boundaries.\"\n    ]\n  },\n  {\n    \"tag\": \"@param random Random generator.\",\n    \"alternatives\": [\n      \"@param random Random number generator.\",\n      \"@param random Random value generator.\",\n      \"@param random Random value generator.\"\n    ]\n  },\n  {\n    \"tag\": \"@param generateStatistics Whether statistic data is collected.\",\n    \"alternatives\": [\n      \"@param generateStatistics Determines if statistical data is recorded.\",\n      \"@param generateStatistics Specifies whether to collect statistic information.\",\n      \"@param generateStatistics Controls the gathering of statistical data.\"\n    ]\n  },\n  {\n    \"tag\": \"@param checker Convergence checker.\",\n    \"alternatives\": [\n      \"@param checker Convergence validator.\",\n      \"@param checker Convergence evaluator.\",\n      \"@param checker Convergence verifier.\"\n    ]\n  },\n  {\n    \"tag\": \"@param point unbounded point\",\n    \"alternatives\": [\n      \"@param point point without bounds\",\n      \"@param point point with no restrictions\",\n      \"@param point point that is not bounded\"\n    ]\n  },\n  {\n    \"tag\": \"@return either underlying function value or penalty function value\",\n    \"alternatives\": [\n      \"@return either value of the underlying function or value of the penalty function\",\n      \"@return either the function value underlying or the function value of the penalty\",\n      \"@return either the underlying function value or the penalty function value\"\n    ]\n  },\n  {\n    \"tag\": \"@param bounded bounded function\",\n    \"alternatives\": [\n      \"@param bounded function with constraints\",\n      \"@param bounded function with limitations\",\n      \"@param bounded function with boundaries\"\n    ]\n  },\n  {\n    \"tag\": \"@param lower lower bounds for each element of the input parameters array\\n(some elements may be set to {@code Double.NEGATIVE_INFINITY} for\\nunbounded values)\",\n    \"alternatives\": [\n      \"@param lower lower limits for each element of the input parameters array\\n(some elements may be set to {@code Double.NEGATIVE_INFINITY} for\\nunbounded values)\",\n      \"@param lower lower boundaries for each element of the input parameters array\\n(some elements may be set to {@code Double.NEGATIVE_INFINITY} for\\nunbounded values)\",\n      \"@param lower lower constraints for each element of the input parameters array\\n(some elements may be set to {@code Double.NEGATIVE_INFINITY} for\\nunbounded values)\"\n    ]\n  },\n  {\n    \"tag\": \"@param upper upper bounds for each element of the input parameters array\\n(some elements may be set to {@code Double.POSITIVE_INFINITY} for\\nunbounded values)\",\n    \"alternatives\": [\n      \"@param upper upper limits for each element of the input parameters array\\n(some elements may be set to {@code Double.POSITIVE_INFINITY} for\\nunbounded values)\",\n      \"@param upper upper boundaries for each element of the input parameters array\\n(some elements may be set to {@code Double.POSITIVE_INFINITY} for\\nunbounded values)\",\n      \"@param upper upper constraints for each element of the input parameters array\\n(some elements may be set to {@code Double.POSITIVE_INFINITY} for\\nunbounded values)\"\n    ]\n  },\n  {\n    \"tag\": \"@param offset base offset of the penalty function\",\n    \"alternatives\": [\n      \"@param offset basic shift of the penalty function\",\n      \"@param offset starting adjustment of the penalty function\",\n      \"@param offset main displacement of the penalty function\"\n    ]\n  },\n  {\n    \"tag\": \"@param scale scale of the penalty function\",\n    \"alternatives\": [\n      \"@param scale scaling factor of the penalty function\",\n      \"@param scale adjustment factor of the penalty function\",\n      \"@param scale magnification of the penalty function\"\n    ]\n  },\n  {\n    \"tag\": \"@throws DimensionMismatchException if lower bounds, upper bounds and\\nscales are not consistent, either according to dimension or to bounadary\\nvalues\",\n    \"alternatives\": [\n      \"@throws DimensionMismatchException if the lower bounds, upper bounds, and\\nscales are not coherent, either in terms of dimension or boundary\\nvalues\",\n      \"@throws DimensionMismatchException if the lower bounds, upper bounds, and\\nscales do not align in size or boundary values\",\n      \"@throws DimensionMismatchException if the lower bounds, upper bounds, and\\nscales are not compatible, either in terms of dimension or boundary\\nvalues\"\n    ]\n  },\n  {\n    \"tag\": \"@param point Point at which the objective function must be evaluated.\",\n    \"alternatives\": [\n      \"@param point Point where the evaluation of the objective function should occur.\",\n      \"@param point Point used for computing the objective function.\",\n      \"@param point Point to assess the value of the objective function.\"\n    ]\n  },\n  {\n    \"tag\": \"@return the objective function value at the specified point.\",\n    \"alternatives\": [\n      \"@return the value of the objective function at the given point.\",\n      \"@return the function value of the objective at the provided point.\",\n      \"@return the objective function's value at the specified location.\"\n    ]\n  },\n  {\n    \"tag\": \"@throws TooManyEvaluationsException if the maximal number of\\nevaluations is exceeded.\",\n    \"alternatives\": [\n      \"@throws TooManyEvaluationsException if the maximum number of\\nevaluations is surpassed.\",\n      \"@throws TooManyEvaluationsException if the number of evaluations reaches the limit.\",\n      \"@throws TooManyEvaluationsException if the maximum allowed evaluations is exceeded.\"\n    ]\n  },\n  {\n    \"tag\": \"@param maxEval Allowed number of evaluations of the objective function.\",\n    \"alternatives\": [\n      \"@param maxEval Maximum number of evaluations for the objective function.\",\n      \"@param maxEval Upper limit of evaluations for the objective function.\",\n      \"@param maxEval The highest number of evaluations for the objective function.\"\n    ]\n  }\n]"