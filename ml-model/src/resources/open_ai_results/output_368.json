"output=[\n  {\n    'tag': '@param array an array of {@code char} values, possibly empty',\n    'alternatives': [\n      '@param array an array of {@code char} values, possibly empty',\n      '@param values an array of {@code char} values, which may be empty',\n      '@param charArray an array of {@code char} values, which may be empty'\n    ]\n  },\n  {\n    'tag': '@param target a primitive {@code char} value',\n    'alternatives': [\n      '@param target a primitive {@code char} value',\n      '@param value a primitive {@code char} value',\n      '@param charValue a primitive {@code char} value'\n    ]\n  },\n  {\n    'tag': '@return {@code true} if {@code array[i] == target} for some value of {@code\\n    i}',\n    'alternatives': [\n      '@return {@code true} if {@code array[i] == target} for some value of {@code\\n    i}',\n      '@return {@code true} if there exists an {@code i} such that {@code array[i] == target}',\n      '@return {@code true} if there is a value {@code i} such that {@code array[i] == target}'\n    ]\n  },\n  {\n    'tag': '@param array an array of {@code char} values, possibly empty',\n    'alternatives': [\n      '@param array an array of {@code char} values, possibly empty',\n      '@param values an array of {@code char} values, which may be empty',\n      '@param charArray an array of {@code char} values, which may be empty'\n    ]\n  },\n  {\n    'tag': '@param target a primitive {@code char} value',\n    'alternatives': [\n      '@param target a primitive {@code char} value',\n      '@param value a primitive {@code char} value',\n      '@param charValue a primitive {@code char} value'\n    ]\n  },\n  {\n    'tag': '@return the least index {@code i} for which {@code array[i] == target}, or\\n    {@code -1} if no such index exists.',\n    'alternatives': [\n      '@return the least index {@code i} for which {@code array[i] == target}, or\\n    {@code -1} if no such index exists.',\n      '@return the smallest position {@code i} where {@code array[i] == target}, or\\n    return {@code -1} if such position does not exist',\n      '@return the minimum index value {@code i} where {@code array[i] == target}, or\\n    return {@code -1} if no such index was found'\n    ]\n  },\n  {\n    'tag': '@param array the array to search for the sequence {@code target}',\n    'alternatives': [\n      '@param array the array to search for the sequence {@code target}',\n      '@param array the array where to look for the sequence {@code target}',\n      '@param array the array that contains the sequence {@code target}'\n    ]\n  },\n  {\n    'tag': '@param target the array to search for as a sub-sequence of {@code array}',\n    'alternatives': [\n      '@param target the array to search for as a sub-sequence of {@code array}',\n      '@param target the sub-sequence of {@code array} to search for',\n      '@param target the array to find as a subsequence of {@code array}'\n    ]\n  },\n  {\n    'tag': '@param array an array of {@code char} values, possibly empty',\n    'alternatives': [\n      '@param array an array of {@code char} values, possibly empty',\n      '@param values an array of {@code char} values, which may be empty',\n      '@param charArray an array of {@code char} values, which may be empty'\n    ]\n  },\n  {\n    'tag': '@param target a primitive {@code char} value',\n    'alternatives': [\n      '@param target a primitive {@code char} value',\n      '@param value a primitive {@code char} value',\n      '@param charValue a primitive {@code char} value'\n    ]\n  },\n  {\n    'tag': '@return the greatest index {@code i} for which {@code array[i] == target},\\n    or {@code -1} if no such index exists.',\n    'alternatives': [\n      '@return the greatest index {@code i} for which {@code array[i] == target},\\n    or {@code -1} if no such index exists.',\n      '@return the largest position {@code i} where {@code array[i] == target}, or\\n    return {@code -1} if such position does not exist',\n      '@return the maximum index value {@code i} where {@code array[i] == target}, or\\n    return {@code -1} if no such index has been found'\n    ]\n  },\n  {\n    'tag': '@return the value present in {@code array} that is less than or equal to\\n    every other value in the array',\n    'alternatives': [\n      '@return the value present in {@code array} that is less than or equal to\\n    every other value in the array',\n      '@return the value in {@code array} that is smaller or equal to any other value',\n      '@return the element from {@code array} that is lesser or equal to every other element'\n    ]\n  },\n  {\n    'tag': '@return the value present in {@code array} that is greater than or equal to\\n    every other value in the array',\n    'alternatives': [\n      '@return the value present in {@code array} that is greater than or equal to\\n    every other value in the array',\n      '@return the value in {@code array} that is larger or equal to any other value',\n      '@return the element from {@code array} that is greater or equal to every other element'\n    ]\n  },\n  {\n    'tag': '@param arrays zero or more {@code char} arrays',\n    'alternatives': [\n      '@param arrays zero or more {@code char} arrays',\n      '@param arrays a variable number of {@code char} arrays',\n      '@param arrays one or more {@code char} arrays'\n    ]\n  },\n  {\n    'tag': '@return a single array containing all the values from the source arrays, in\\n    order',\n    'alternatives': [\n      '@return a single array containing all the values from the source arrays, in\\n    order',\n      '@return an array that combines all the values from the source arrays, maintaining the same\\n    order',\n      '@return a unique array that includes all the elements from the source arrays, in the same\\n    order'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if {@code bytes} has fewer than 2\\n    elements',\n    'alternatives': [\n      '@throws IllegalArgumentException if {@code bytes} has fewer than 2\\n    elements',\n      '@throws IllegalArgumentException if the size of {@code bytes} is less than 2',\n      '@throws IllegalArgumentException when the length of {@code bytes} is smaller than 2'\n    ]\n  },\n  {\n    'tag': '@param array the source array',\n    'alternatives': [\n      '@param array the source array',\n      '@param array the original array',\n      '@param array the initial array'\n    ]\n  },\n  {\n    'tag': '@param minLength the minimum length the returned array must guarantee',\n    'alternatives': [\n      '@param minLength the minimum length the returned array must guarantee',\n      '@param minLength the minimum required length for the resulting array',\n      '@param minLength the minimum size that the output array should have'\n    ]\n  },\n  {\n    'tag': '@param padding an extra amount to \"grow\" the array by if growth is\\n    necessary',\n    'alternatives': [\n      '@param padding an extra amount to \"grow\" the array by if growth is\\n    necessary',\n      '@param padding a supplementary quantity to increase the array if needed',\n      '@param padding an additional size to expand the array by, if needed'\n    ]\n  },\n  {\n    'tag': '@return an array containing the values of {@code array}, with guaranteed\\n    minimum length {@code minLength}',\n    'alternatives': [\n      '@return an array containing the values of {@code array}, with guaranteed\\n    minimum length {@code minLength}',\n      '@return an array that includes the elements of {@code array}, ensuring that\\n    the length is at least {@code minLength}',\n      '@return an array that contains the values from {@code array}, with a minimum length\\n    guaranteed to be {@code minLength}'\n    ]\n  },\n  {\n    'tag': '@param separator the text that should appear between consecutive values in\\n    the resulting string (but not at the start or end)',\n    'alternatives': [\n      '@param separator the text that should appear between consecutive values in\\n    the resulting string (but not at the start or end)',\n      '@param separator the string to be inserted between consecutive values in the\\n    resulting string (excluding the first and last position)',\n      '@param separator the sequence that will be present between each value in the resulting\\n    string (excluding the initial and final positions)'\n    ]\n  },\n  {\n    'tag': '@param array an array of {@code char} values, possibly empty',\n    'alternatives': [\n      '@param array an array of {@code char} values, possibly empty',\n      '@param values an array of {@code char} values, which may be empty',\n      '@param charArray an array of {@code char} values, which may be empty'\n    ]\n  },\n  {\n    'tag': '@param collection a collection of {@code Character} objects',\n    'alternatives': [\n      '@param collection a collection of {@code Character} objects',\n      '@param collection a collection of {@code Character} elements',\n      '@param collection a collection of {@code Character} items'\n    ]\n  },\n  {\n    'tag': '@return an array containing the same values as {@code collection}, in the\\n    same order, converted to primitives',\n    'alternatives': [\n      '@return an array containing the same values as {@code collection}, in the\\n    same order, converted to primitives',\n      '@return an array with the equivalent values to {@code collection}, in the same\\n    order, but as primitive types',\n      '@return an array that has the elements from {@code collection}, in the same\\n    order, converted to primitive values'\n    ]\n  },\n  {\n    'tag': '@param backingArray the array to back the list',\n    'alternatives': [\n      '@param backingArray the array to back the list',\n      '@param backingArray the array that supports the list',\n      '@param backingArray the array that serves as the foundation for the list'\n    ]\n  }\n]"