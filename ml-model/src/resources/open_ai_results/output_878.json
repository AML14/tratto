"[\n  {\n    \"tag\": \"@throws NullPointerException if set is null\",\n    \"alternatives\": [\n      \"@throws NullPointerException in case set is null\",\n      \"@throws NullPointerException if set parameter is null\",\n      \"@throws NullPointerException if the parameter set is null\",\n      \"@throws NullPointerException if the provided set is null\",\n      \"@throws NullPointerException if the set is null\"\n    ]\n  },\n  {\n    \"tag\": \"@param set the set to decorate, must not be null\",\n    \"alternatives\": [\n      \"@param set the set to enhance, should not be null\",\n      \"@param set the set to modify, must not be null\",\n      \"@param set the set that will be decorated, cannot be null\",\n      \"@param set the set which needs to be decorated, must not be null\",\n      \"@param set the set to be decorated, must be non-null\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NullPointerException if bag is null\",\n    \"alternatives\": [\n      \"@throws NullPointerException if the provided bag is null\",\n      \"@throws NullPointerException when bag is null\",\n      \"@throws NullPointerException if the bag parameter is null\",\n      \"@throws NullPointerException if the bag is null\",\n      \"@throws NullPointerException in case bag is null\"\n    ]\n  },\n  {\n    \"tag\": \"@param bag the bag to decorate, must not be null\",\n    \"alternatives\": [\n      \"@param bag the bag to enhance, should not be null\",\n      \"@param bag the bag to modify, must not be null\",\n      \"@param bag the bag that will be decorated, cannot be null\",\n      \"@param bag the bag which needs to be decorated, must not be null\",\n      \"@param bag the bag to be decorated, must be non-null\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NullPointerException if comparators array is null or contains a null\",\n    \"alternatives\": [\n      \"@throws NullPointerException if the provided comparators array is null or contains a null\",\n      \"@throws NullPointerException in case comparators array is null or has a null element\",\n      \"@throws NullPointerException if the comparators array contains a null or is null\",\n      \"@throws NullPointerException if the provided array of comparators is null or contains a null\",\n      \"@throws NullPointerException if comparators array is null or contains a null element\"\n    ]\n  },\n  {\n    \"tag\": \"@param comparators the comparators to use, not null or empty or containing nulls\",\n    \"alternatives\": [\n      \"@param comparators the comparators to utilize, must not be null, empty or contain nulls\",\n      \"@param comparators the comparators to apply, should not be null, empty, or have null elements\",\n      \"@param comparators the comparators to be used, cannot be null, empty, or contain nulls\",\n      \"@param comparators the comparators to employ, must not be null, empty or have null elements\",\n      \"@param comparators the comparators to utilize, not null or empty or with nulls\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NullPointerException if comparators collection is null or contains a null\",\n    \"alternatives\": [\n      \"@throws NullPointerException if the provided comparators collection is null or contains a null\",\n      \"@throws NullPointerException in case comparators collection is null or has a null element\",\n      \"@throws NullPointerException if the comparators collection contains a null or is null\",\n      \"@throws NullPointerException if the provided collection of comparators is null or contains a null\",\n      \"@throws NullPointerException if comparators collection is null or contains a null element\"\n    ]\n  },\n  {\n    \"tag\": \"@param comparators the comparators to use, not null or empty or containing nulls\",\n    \"alternatives\": [\n      \"@param comparators the comparators to utilize, must not be null, empty or contain nulls\",\n      \"@param comparators the comparators to apply, should not be null, empty, or have null elements\",\n      \"@param comparators the comparators to be used, cannot be null, empty, or contain nulls\",\n      \"@param comparators the comparators to employ, must not be null, empty or have null elements\",\n      \"@param comparators the comparators to utilize, not null or empty or with nulls\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NullPointerException if the map is null\",\n    \"alternatives\": [\n      \"@throws NullPointerException if the provided map is null\",\n      \"@throws NullPointerException when the map is null\",\n      \"@throws NullPointerException if the map parameter is null\",\n      \"@throws NullPointerException if the map is null\",\n      \"@throws NullPointerException in case the map is null\"\n    ]\n  },\n  {\n    \"tag\": \"@param map the map to decorate, must not be null\",\n    \"alternatives\": [\n      \"@param map the map to enhance, should not be null\",\n      \"@param map the map to modify, must not be null\",\n      \"@param map the map that will be decorated, cannot be null\",\n      \"@param map the map which needs to be decorated, must not be null\",\n      \"@param map the map to be decorated, must be non-null\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NullPointerException if the Bag is null\",\n    \"alternatives\": [\n      \"@throws NullPointerException if the provided Bag is null\",\n      \"@throws NullPointerException when the Bag is null\",\n      \"@throws NullPointerException if the Bag parameter is null\",\n      \"@throws NullPointerException if the Bag is null\",\n      \"@throws NullPointerException in case the Bag is null\"\n    ]\n  },\n  {\n    \"tag\": \"@param bag the bag to synchronize, must not be null\",\n    \"alternatives\": [\n      \"@param bag the bag to harmonize, should not be null\",\n      \"@param bag the bag to adjust, must not be null\",\n      \"@param bag the bag that will be synchronized, cannot be null\",\n      \"@param bag the bag which needs to be synchronized, must not be null\",\n      \"@param bag the bag to be synchronized, must be non-null\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NullPointerException if the Bag is null\",\n    \"alternatives\": [\n      \"@throws NullPointerException if the provided Bag is null\",\n      \"@throws NullPointerException when the Bag is null\",\n      \"@throws NullPointerException if the Bag parameter is null\",\n      \"@throws NullPointerException if the Bag is null\",\n      \"@throws NullPointerException in case the Bag is null\"\n    ]\n  },\n  {\n    \"tag\": \"@param bag the bag whose unmodifiable view is to be returned, must not be null\",\n    \"alternatives\": [\n      \"@param bag the bag from which the unmodifiable view needs to be obtained, must not be null\",\n      \"@param bag the bag that will have an unmodifiable view returned, cannot be null\",\n      \"@param bag the bag which requires an unmodifiable view to be returned, must not be null\",\n      \"@param bag the bag from which the unmodifiable view is requested, must not be null\",\n      \"@param bag the bag whose unmodifiable view is being obtained, must not be null\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NullPointerException if the Bag or Predicate is null\",\n    \"alternatives\": [\n      \"@throws NullPointerException if the provided Bag or Predicate is null\",\n      \"@throws NullPointerException when the Bag or Predicate is null\",\n      \"@throws NullPointerException if the Bag or Predicate parameter is null\",\n      \"@throws NullPointerException if the Bag or Predicate is null\",\n      \"@throws NullPointerException in case the Bag or Predicate is null\"\n    ]\n  },\n  {\n    \"tag\": \"@param bag the bag to predicate, must not be null\",\n    \"alternatives\": [\n      \"@param bag the bag to evaluate, should not be null\",\n      \"@param bag the bag to check, must not be null\",\n      \"@param bag the bag that will be assigned a predicate, cannot be null\",\n      \"@param bag the bag which needs to be used for the predicate, must not be null\",\n      \"@param bag the bag to be used for the predicate, must be non-null\"\n    ]\n  },\n  {\n    \"tag\": \"@param predicate the predicate for the bag, must not be null\",\n    \"alternatives\": [\n      \"@param predicate the condition for the bag, should not be null\",\n      \"@param predicate the rule for the bag, must not be null\",\n      \"@param predicate the check that will be applied to the bag, cannot be null\",\n      \"@param predicate the restriction for the bag, must not be null\",\n      \"@param predicate the predicate to be used for the bag, must be non-null\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NullPointerException if the Bag or Transformer is null\",\n    \"alternatives\": [\n      \"@throws NullPointerException if the provided Bag or Transformer is null\",\n      \"@throws NullPointerException when the Bag or Transformer is null\",\n      \"@throws NullPointerException if the Bag or Transformer parameter is null\",\n      \"@throws NullPointerException if the Bag or Transformer is null\",\n      \"@throws NullPointerException in case the Bag or Transformer is null\"\n    ]\n  },\n  {\n    \"tag\": \"@param bag the bag to predicate, must not be null\",\n    \"alternatives\": [\n      \"@param bag the bag to evaluate, should not be null\",\n      \"@param bag the bag to check, must not be null\",\n      \"@param bag the bag that will be assigned a predicate, cannot be null\",\n      \"@param bag the bag which needs to be used for the predicate, must not be null\",\n      \"@param bag the bag to be used for the predicate, must be non-null\"\n    ]\n  },\n  {\n    \"tag\": \"@param transformer the transformer for the bag, must not be null\",\n    \"alternatives\": [\n      \"@param transformer the converter for the bag, should not be null\",\n      \"@param transformer the function for the bag, must not be null\",\n      \"@param transformer the mapper that will be applied to the bag, cannot be null\",\n      \"@param transformer the alteration for the bag, must not be null\",\n      \"@param transformer the transformer to be used for the bag, must be non-null\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NullPointerException if bag is null\",\n    \"alternatives\": [\n      \"@throws NullPointerException if the provided bag is null\",\n      \"@throws NullPointerException when bag is null\",\n      \"@throws NullPointerException if the bag parameter is null\",\n      \"@throws NullPointerException if the bag is null\",\n      \"@throws NullPointerException in case bag is null\"\n    ]\n  },\n  {\n    \"tag\": \"@param bag the bag to decorate, must not be null\",\n    \"alternatives\": [\n      \"@param bag the bag to enhance, should not be null\",\n      \"@param bag the bag to modify, must not be null\",\n      \"@param bag the bag that will be decorated, cannot be null\",\n      \"@param bag the bag which needs to be decorated, must not be null\",\n      \"@param bag the bag to be decorated, must be non-null\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NullPointerException if the SortedBag is null\",\n    \"alternatives\": [\n      \"@throws NullPointerException if the provided SortedBag is null\",\n      \"@throws NullPointerException when the SortedBag is null\",\n      \"@throws NullPointerException if the SortedBag parameter is null\",\n      \"@throws NullPointerException if the SortedBag is null\",\n      \"@throws NullPointerException in case the SortedBag is null\"\n    ]\n  },\n  {\n    \"tag\": \"@param bag the bag to synchronize, must not be null\",\n    \"alternatives\": [\n      \"@param bag the bag to harmonize, should not be null\",\n      \"@param bag the bag to adjust, must not be null\",\n      \"@param bag the bag that will be synchronized, cannot be null\",\n      \"@param bag the bag which needs to be synchronized, must not be null\",\n      \"@param bag the bag to be synchronized, must be non-null\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NullPointerException if the SortedBag is null\",\n    \"alternatives\": [\n      \"@throws NullPointerException if the provided SortedBag is null\",\n      \"@throws NullPointerException when the SortedBag is null\",\n      \"@throws NullPointerException if the SortedBag parameter is null\",\n      \"@throws NullPointerException if the SortedBag is null\",\n      \"@throws NullPointerException in case the SortedBag is null\"\n    ]\n  }\n]"