"[\n  {\n    \"tag\": \"@param pattern Pattern to use for any thrown exception.\",\n    \"alternatives\": [\n      \"@param pattern Pattern to utilize for any thrown exception.\",\n      \"@param pattern Regular expression to use for any thrown exception.\",\n      \"@param pattern Pattern to apply for any thrown exception.\",\n      \"@param pattern The pattern to be used for any thrown exception.\",\n      \"@param pattern The pattern to be employed for any thrown exception.\"\n    ]\n  },\n  {\n    \"tag\": \"@return the sum {@code a + b}.\",\n    \"alternatives\": [\n      \"@return the result of {@code a + b}.\",\n      \"@return the addition of {@code a} and {@code b}.\",\n      \"@return the outcome of summing {@code a} and {@code b}.\",\n      \"@return the value obtained by adding {@code a} to {@code b}.\",\n      \"@return the sum of the values {@code a} and {@code b}.\"\n    ]\n  },\n  {\n    \"tag\": \"@throws MathArithmeticException if the result cannot be represented\\nas a {@code long}.\",\n    \"alternatives\": [\n      \"@throws MathArithmeticException if the outcome cannot be expressed\\nas a {@code long}.\",\n      \"@throws MathArithmeticException if the result cannot be represented\\nas a data type of {@code long}.\",\n      \"@throws MathArithmeticException if the outcome cannot be represented\\nas a {@code long} integer.\",\n      \"@throws MathArithmeticException if the outcome cannot be represented\\nas a {@code long} value.\",\n      \"@throws MathArithmeticException if it is not possible to represent the result\\nas a {@code long}.\"\n    ]\n  },\n  {\n    \"tag\": \"@param n the number to test\",\n    \"alternatives\": [\n      \"@param n the numerical value to examine\",\n      \"@param n the value that needs to be checked\",\n      \"@param n the number that should be tested\",\n      \"@param n the input number to verify\",\n      \"@param n the integer to evaluate\"\n    ]\n  },\n  {\n    \"tag\": \"@return true if the argument is a power of two\",\n    \"alternatives\": [\n      \"@return true if the parameter is a power of two\",\n      \"@return true if the input is a power of two\",\n      \"@return true if the argument represents a power of two\",\n      \"@return true if the value is a power of two\",\n      \"@return true if the given input is a power of two\"\n    ]\n  },\n  {\n    \"tag\": \"@return The index corresponding to a pivot chosen between the\\nfirst, middle and the last indices of the array slice\",\n    \"alternatives\": [\n      \"@return The index that corresponds to a pivot selected from\\nthe initial, middle, and final indices of the array slice\",\n      \"@return The index associated with a pivot selected among the\\nfirst, middle, and last indices of the array slice\",\n      \"@return The index that relates to a pivot chosen from the\\nfirst, middle, and last indices of the array segment\",\n      \"@return The index obtained from selecting a pivot between the\\nfirst, middle, and last indices of the array slice\",\n      \"@return The index indicating a pivot chosen among the\\nfirst, middle, and final indices of the array slice\"\n    ]\n  },\n  {\n    \"tag\": \"@throws MathIllegalArgumentException when indices exceeds range\",\n    \"alternatives\": [\n      \"@throws MathIllegalArgumentException if the indices go beyond the range\",\n      \"@throws MathIllegalArgumentException in case the indices surpass the range\",\n      \"@throws MathIllegalArgumentException when the indices exceed the range\",\n      \"@throws MathIllegalArgumentException if the indices are outside the range\",\n      \"@throws MathIllegalArgumentException if the indices are beyond the range\"\n    ]\n  },\n  {\n    \"tag\": \"@return available complex format locales.\",\n    \"alternatives\": [\n      \"@return locales with available complex number formatting.\",\n      \"@return the complex format locales that are available.\",\n      \"@return a list of locales with complex number formatting support.\",\n      \"@return the locales that support complex number formatting.\",\n      \"@return the locales where complex number formatting is available.\"\n    ]\n  },\n  {\n    \"tag\": \"@param c Complex object to format.\",\n    \"alternatives\": [\n      \"@param c Complex entity to be formatted.\",\n      \"@param c The complex object that needs to be formatted.\",\n      \"@param c Complex number object for formatting.\",\n      \"@param c Complex instance for formatting purposes.\",\n      \"@param c The complex object that should be formatted.\"\n    ]\n  },\n  {\n    \"tag\": \"@return A formatted number in the form \\\"Re(c) + Im(c)i\\\".\",\n    \"alternatives\": [\n      \"@return A number formatted as \\\"Re(c) + Im(c)i\\\".\",\n      \"@return The formatted number represented as \\\"Re(c) + Im(c)i\\\".\",\n      \"@return The number in the format of \\\"Re(c) + Im(c)i\\\" after formatting.\",\n      \"@return The resultant number formatted as \\\"Re(c) + Im(c)i\\\".\",\n      \"@return The formatted number in the form of \\\"Re(c) + Im(c)i\\\".\"\n    ]\n  },\n  {\n    \"tag\": \"@param c Double object to format.\",\n    \"alternatives\": [\n      \"@param c Double instance to be formatted.\",\n      \"@param c The double object that requires formatting.\",\n      \"@param c Double number object for formatting.\",\n      \"@param c Double entity to be formatted.\",\n      \"@param c The double object that needs to be formatted.\"\n    ]\n  },\n  {\n    \"tag\": \"@return A formatted number.\",\n    \"alternatives\": [\n      \"@return The number in a formatted representation.\",\n      \"@return The formatted value of the number.\",\n      \"@return The number after being formatted.\",\n      \"@return The resultant formatted number.\",\n      \"@return The number represented in a formatted way.\"\n    ]\n  },\n  {\n    \"tag\": \"@param complex the object to format.\",\n    \"alternatives\": [\n      \"@param complex the entity to be formatted.\",\n      \"@param complex the object that requires formatting.\",\n      \"@param complex the instance for formatting purposes.\",\n      \"@param complex the complex object to be formatted.\",\n      \"@param complex the object that needs to be formatted.\"\n    ]\n  },\n  {\n    \"tag\": \"@param toAppendTo where the text is to be appended\",\n    \"alternatives\": [\n      \"@param toAppendTo the target to which the text will be added\",\n      \"@param toAppendTo the destination to append the text\",\n      \"@param toAppendTo the object where the text should be concatenated\",\n      \"@param toAppendTo the location to which the text should be appended\",\n      \"@param toAppendTo the place where the text needs to be appended\"\n    ]\n  },\n  {\n    \"tag\": \"@param pos On input: an alignment field, if desired. On output: the\\n           offsets of the alignment field\",\n    \"alternatives\": [\n      \"@param pos On input: a possible alignment field. On output: the\\n           offsets of the alignment field\",\n      \"@param pos On input: an optional alignment field. On output: the\\n           offsets of the alignment field\",\n      \"@param pos When provided as input: an alignment field. When returned: the\\n           offsets of the alignment field\",\n      \"@param pos On input: an alignment field, if applicable. On output: the\\n           offsets of the alignment field\",\n      \"@param pos If specified as input: an alignment field. If produced as output: the\\n           offsets of the alignment field\"\n    ]\n  },\n  {\n    \"tag\": \"@return the value passed in as toAppendTo.\",\n    \"alternatives\": [\n      \"@return the value that was passed in as toAppendTo.\",\n      \"@return the original value of toAppendTo.\",\n      \"@return the initial value provided for toAppendTo.\",\n      \"@return the passed-in value of toAppendTo.\",\n      \"@return the value supplied for toAppendTo.\"\n    ]\n  },\n  {\n    \"tag\": \"@param absIm Absolute value of the imaginary part of a complex number.\",\n    \"alternatives\": [\n      \"@param absIm Absolute value of the imaginary component of a complex number.\",\n      \"@param absIm The absolute value of the imaginary part of a complex number.\",\n      \"@param absIm Absolute value of the imaginary element of a complex number.\",\n      \"@param absIm The magnitude of the imaginary part of a complex number.\",\n      \"@param absIm The absolute value of the imaginary portion of a complex number.\"\n    ]\n  },\n  {\n    \"tag\": \"@param toAppendTo where the text is to be appended.\",\n    \"alternatives\": [\n      \"@param toAppendTo the target to which the text will be added.\",\n      \"@param toAppendTo the destination to append the text.\",\n      \"@param toAppendTo the object where the text should be concatenated.\",\n      \"@param toAppendTo the location to which the text should be appended.\",\n      \"@param toAppendTo the place where the text needs to be appended.\"\n    ]\n  },\n  {\n    \"tag\": \"@param pos On input: an alignment field, if desired. On output: the\\noffsets of the alignment field.\",\n    \"alternatives\": [\n      \"@param pos On input: an optional alignment field. On output: the\\noffsets of the alignment field.\",\n      \"@param pos When provided as input: an alignment field. When returned: the\\noffsets of the alignment field.\",\n      \"@param pos On input: a possible alignment field. On output: the\\noffsets of the alignment field.\",\n      \"@param pos On input: an alignment field, if applicable. On output: the\\noffsets of the alignment field.\",\n      \"@param pos If specified as input: an alignment field. If produced as output: the\\noffsets of the alignment field.\"\n    ]\n  },\n  {\n    \"tag\": \"@return the value passed in as toAppendTo.\",\n    \"alternatives\": [\n      \"@return the value that was passed in as toAppendTo.\",\n      \"@return the original value of toAppendTo.\",\n      \"@return the initial value provided for toAppendTo.\",\n      \"@return the passed-in value of toAppendTo.\",\n      \"@return the value supplied for toAppendTo.\"\n    ]\n  },\n  {\n    \"tag\": \"@param obj the object to format.\",\n    \"alternatives\": [\n      \"@param obj the entity to be formatted.\",\n      \"@param obj the object that requires formatting.\",\n      \"@param obj the instance for formatting purposes.\",\n      \"@param obj the object to be formatted.\",\n      \"@param obj the object that needs to be formatted.\"\n    ]\n  },\n  {\n    \"tag\": \"@param toAppendTo where the text is to be appended\",\n    \"alternatives\": [\n      \"@param toAppendTo the target to which the text will be added\",\n      \"@param toAppendTo the destination to append the text\",\n      \"@param toAppendTo the object where the text should be concatenated\",\n      \"@param toAppendTo the location to which the text should be appended\",\n      \"@param toAppendTo the place where the text needs to be appended\"\n    ]\n  },\n  {\n    \"tag\": \"@param pos On input: an alignment field, if desired. On output: the\\n           offsets of the alignment field\",\n    \"alternatives\": [\n      \"@param pos On input: a possible alignment field. On output: the\\n           offsets of the alignment field\",\n      \"@param pos On input: an optional alignment field. On output: the\\n           offsets of the alignment field\",\n      \"@param pos When provided as input: an alignment field. When returned: the\\n           offsets of the alignment field\",\n      \"@param pos On input: an alignment field, if applicable. On output: the\\n           offsets of the alignment field\",\n      \"@param pos If specified as input: an alignment field. If produced as output: the\\n           offsets of the alignment field\"\n    ]\n  },\n  {\n    \"tag\": \"@return the value passed in as toAppendTo.\",\n    \"alternatives\": [\n      \"@return the value that was passed in as toAppendTo.\",\n      \"@return the original value of toAppendTo.\",\n      \"@return the initial value provided for toAppendTo.\",\n      \"@return the passed-in value of toAppendTo.\",\n      \"@return the value supplied for toAppendTo.\"\n    ]\n  },\n  {\n    \"tag\": \"@throws MathIllegalArgumentException is {@code obj} is not a valid type.\",\n    \"alternatives\": [\n      \"@throws MathIllegalArgumentException if {@code obj} is an invalid type.\",\n      \"@throws MathIllegalArgumentException if {@code obj} is not a valid data type.\",\n      \"@throws MathIllegalArgumentException if {@code obj} does not have a valid type.\",\n      \"@throws MathIllegalArgumentException if the type of {@code obj} is invalid.\",\n      \"@throws MathIllegalArgumentException if the data type of {@code obj} is not valid.\"\n    ]\n  }\n]"