"output = [\n  {\n    'tag': '@param array the array to iterate over',\n    'alternatives': [\n      '@param array the array to iterate through',\n      '@param array the array to loop over',\n      '@param array the array for iteration',\n      '@param array the array to traverse',\n      '@param array the array to cycle through'\n    ]\n  },\n  {\n    'tag': '@param startIndex the index to start iterating at',\n    'alternatives': [\n      '@param startIndex the index to begin iterating from',\n      '@param startIndex the starting index for iteration',\n      '@param startIndex the index to initiate iteration',\n      '@param startIndex the index where iteration begins',\n      '@param startIndex the initial index for iteration'\n    ]\n  },\n  {\n    'tag': '@param endIndex the index (exclusive) to finish iterating at',\n    'alternatives': [\n      '@param endIndex the index (exclusive) at which iteration stops',\n      '@param endIndex the index to terminate iteration',\n      '@param endIndex the index to conclude iteration',\n      '@param endIndex the exclusive index for stopping iteration',\n      '@param endIndex the index to end iteration (exclusive)'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if <code>array</code> is not an array.',\n    'alternatives': [\n      '@throws IllegalArgumentException if <code>array</code> does not match the array type.',\n      '@throws IllegalArgumentException if <code>array</code> is not of array type.',\n      '@throws IllegalArgumentException if <code>array</code> is not an instance of an array.',\n      '@throws IllegalArgumentException if <code>array</code> is not a valid array object.',\n      '@throws IllegalArgumentException if <code>array</code> is not a proper array.'\n    ]\n  },\n  {\n    'tag': '@throws IndexOutOfBoundsException if the start or end index is out of bounds',\n    'alternatives': [\n      '@throws IndexOutOfBoundsException if the start index or end index is beyond the array bounds',\n      '@throws IndexOutOfBoundsException if the range specified by the start and end indexes is out of array bounds',\n      '@throws IndexOutOfBoundsException if either the start index or end index is outside the valid range',\n      '@throws IndexOutOfBoundsException if the start or end index exceeds the array bounds',\n      '@throws IndexOutOfBoundsException if the start or end index is not within the allowed range'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if end index is before the start',\n    'alternatives': [\n      '@throws IllegalArgumentException if the end index comes before the start index',\n      '@throws IllegalArgumentException if the end index precedes the start index',\n      '@throws IllegalArgumentException if the end index is smaller than the start index',\n      '@throws IllegalArgumentException if the end index is prior to the start index',\n      '@throws IllegalArgumentException if the end index is earlier than the start index'\n    ]\n  },\n  {\n    'tag': '@param count the number of time this method has been called (starts with 1)',\n    'alternatives': [\n      '@param count the counter for the number of times this method has been invoked (starting from 1)',\n      '@param count the count of method calls (initially 1)',\n      '@param count the total number of times this method has been executed (beginning at 1)',\n      '@param count the number of times this method has been called (beginning from 1)',\n      '@param count the tally of method invocations (initially 1)'\n    ]\n  },\n  {\n    'tag': '@return the next iterator, or null if there are no more.',\n    'alternatives': [\n      '@return the subsequent iterator, or null if no more iterations are available.',\n      '@return the following iterator, or null if there are no additional iterations.',\n      '@return the next sequential iterator, or null if no further iterations exist.',\n      '@return the succeeding iterator, or null if there are no more iterations.',\n      '@return the subsequent iterator, or null if there are no further iterations.'\n    ]\n  },\n  {\n    'tag': '@return true if elements remain',\n    'alternatives': [\n      '@return true if there are still elements',\n      '@return true if there are elements left',\n      '@return true if there are remaining elements',\n      '@return true if there are elements yet to be processed',\n      '@return true if there are still unretrieved elements'\n    ]\n  },\n  {\n    'tag': '@return element from the current Iterator',\n    'alternatives': [\n      '@return the element from the present Iterator',\n      '@return the element obtained from the current Iterator',\n      '@return the element fetched from the active Iterator',\n      '@return the element retrieved from the current Iterator',\n      '@return the element returned by the current Iterator'\n    ]\n  },\n  {\n    'tag': '@throws java.util.NoSuchElementException if all the Iterators are exhausted',\n    'alternatives': [\n      '@throws java.util.NoSuchElementException if all the Iterators have no more elements',\n      '@throws java.util.NoSuchElementException if all the Iterators are depleted',\n      '@throws java.util.NoSuchElementException if all the Iterators have been fully utilized',\n      '@throws java.util.NoSuchElementException if all the Iterators are empty',\n      '@throws java.util.NoSuchElementException if all the Iterators have reached the end'\n    ]\n  },\n  {\n    'tag': '@throws UnsupportedOperationException if the remove operator is not\\n  supported by the underlying Iterator',\n    'alternatives': [\n      '@throws UnsupportedOperationException if the underlying Iterator does not support the remove operator',\n      '@throws UnsupportedOperationException if the remove operator is not supported by the underlying Iterator implementation',\n      '@throws UnsupportedOperationException if the remove operation is not implemented by the underlying Iterator',\n      '@throws UnsupportedOperationException if the underlying Iterator does not allow the use of the remove operator',\n      '@throws UnsupportedOperationException if the remove operator is not supported by the Iterator below'\n    ]\n  },\n  {\n    'tag': '@throws IllegalStateException if the next method has not yet been called,\\n  or the remove method has already been called after the last call to the next method.',\n    'alternatives': [\n      '@throws IllegalStateException if the next method has not been invoked yet, or if the remove method has been called after the last invocation of the next method.',\n      '@throws IllegalStateException if the next method has not been called yet, or if the remove method has already been called after the last invocation of the next method.',\n      '@throws IllegalStateException if the next method has not yet been invoked, or if the remove method has been called after the last invocation of the next method.',\n      '@throws IllegalStateException if the next method has not been called yet, or if the remove method has been invoked after the last next method call.',\n      '@throws IllegalStateException if the next method has not yet been invoked, or if the remove method has been called after the last invocation of the next operation.'\n    ]\n  },\n  {\n    'tag': '@return <code>true</code> if there are more elements',\n    'alternatives': [\n      '@return <code>true</code> if there are additional elements',\n      '@return <code>true</code> if more elements exist',\n      '@return <code>true</code> if there are remaining elements',\n      '@return <code>true</code> if there are still elements available',\n      '@return <code>true</code> if there are more elements left'\n    ]\n  },\n  {\n    'tag': '@return the object after the last element returned',\n    'alternatives': [\n      '@return the item following the last returned element',\n      '@return the object that comes after the previously returned element',\n      '@return the next object in the sequence after the last returned element',\n      '@return the element immediately succeeding the last returned object',\n      '@return the object that follows the last object returned'\n    ]\n  },\n  {\n    'tag': '@throws NoSuchElementException if there are no elements in the list',\n    'alternatives': [\n      '@throws NoSuchElementException if the list has no elements',\n      '@throws NoSuchElementException if the list is empty',\n      '@throws NoSuchElementException if there are no items in the list',\n      '@throws NoSuchElementException if the list contains no elements',\n      '@throws NoSuchElementException if the list does not have any elements'\n    ]\n  },\n  {\n    'tag': '@return the index of the element that would be returned if next() were called',\n    'alternatives': [\n      '@return the index of the element that will be returned upon invoking next()',\n      '@return the index of the element that would be obtained by calling next()',\n      '@return the index of the element that will be fetched when next() is called',\n      '@return the index of the element that would be retrieved if next() is invoked',\n      '@return the index of the element that would be returned by a next() call'\n    ]\n  },\n  {\n    'tag': '@return <code>true</code> if there are more elements',\n    'alternatives': [\n      '@return <code>true</code> if there are additional elements',\n      '@return <code>true</code> if more elements exist',\n      '@return <code>true</code> if there are remaining elements',\n      '@return <code>true</code> if there are still elements available',\n      '@return <code>true</code> if there are more elements left'\n    ]\n  },\n  {\n    'tag': '@return the object before the last element returned',\n    'alternatives': [\n      '@return the item preceding the last returned element',\n      '@return the object that comes before the previously returned element',\n      '@return the previous object in the sequence before the last returned element',\n      '@return the element immediately preceding the last returned object',\n      '@return the object that precedes the last object returned'\n    ]\n  },\n  {\n    'tag': '@throws NoSuchElementException if there are no elements in the list',\n    'alternatives': [\n      '@throws NoSuchElementException if the list has no elements',\n      '@throws NoSuchElementException if the list is empty',\n      '@throws NoSuchElementException if there are no items in the list',\n      '@throws NoSuchElementException if the list contains no elements',\n      '@throws NoSuchElementException if the list does not have any elements'\n    ]\n  },\n  {\n    'tag': '@return the index of the element that would be returned if previous() were called',\n    'alternatives': [\n      '@return the index of the element that will be returned upon invoking previous()',\n      '@return the index of the element that would be obtained by calling previous()',\n      '@return the index of the element that will be fetched when previous() is called',\n      '@return the index of the element that would be retrieved if previous() is invoked',\n      '@return the index of the element that would be returned by a previous() call'\n    ]\n  },\n  {\n    'tag': '@throws NoSuchElementException if there are no elements in the list',\n    'alternatives': [\n      '@throws NoSuchElementException if the list has no elements',\n      '@throws NoSuchElementException if the list is empty',\n      '@throws NoSuchElementException if there are no items in the list',\n      '@throws NoSuchElementException if the list contains no elements',\n      '@throws NoSuchElementException if the list does not have any elements'\n    ]\n  },\n  {\n    'tag': '@throws UnsupportedOperationException if the remove method is\\nnot supported by the iterator implementation of the underlying\\nlist',\n    'alternatives': [\n      '@throws UnsupportedOperationException if the iterator implementation of the underlying list does not support the remove method',\n      '@throws UnsupportedOperationException if the remove method is not implemented by the iterator implementation of the underlying list',\n      '@throws UnsupportedOperationException if the underlying list iterator does not provide support for the remove method',\n      '@throws UnsupportedOperationException if the remove operator is not supported by the iterator implementation of the underlying list',\n      '@throws UnsupportedOperationException if the iterator implementation of the underlying list does not allow the use of the remove method'\n    ]\n  },\n  {\n    'tag': '@param obj the element to insert',\n    'alternatives': [\n      '@param obj the object to add',\n      '@param obj the item to place',\n      '@param obj the element to include',\n      '@param obj the value to inject',\n      '@param obj the thing to insert'\n    ]\n  }\n]"