"output = [\r\n  {\r\n    'tag': '@param index Index to check.',\r\n    'alternatives': [\r\n      '@param index the index to verify.',\r\n      '@param index the index to examine.',\r\n      '@param index check this index.',\r\n      '@param index the index to validate.',\r\n      '@param index the index to inspect.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@throws OutOfRangeException if the index is not valid.',\r\n    'alternatives': [\r\n      '@throws OutOfRangeException when the index is invalid.',\r\n      '@throws OutOfRangeException if the index is out of range.',\r\n      '@throws OutOfRangeException in case the index is not valid.',\r\n      '@throws OutOfRangeException if the index is outside the valid range.',\r\n      '@throws OutOfRangeException if the index does not meet the validity criteria.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param start the index of the first entry of the subvector',\r\n    'alternatives': [\r\n      '@param start the index of the initial element of the subvector',\r\n      '@param start the index where the subvector begins',\r\n      '@param start the index representing the first entry of the subvector',\r\n      '@param start the index that denotes the first entry of the subvector',\r\n      '@param start the index indicating the start of the subvector'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param end the index of the last entry of the subvector (inclusive)',\r\n    'alternatives': [\r\n      '@param end the index of the final entry of the subvector (inclusive)',\r\n      '@param end the index denoting the last entry of the subvector (inclusive)',\r\n      '@param end the index representing the end of the subvector (inclusive)',\r\n      '@param end the index that indicates the last entry of the subvector (inclusive)',\r\n      '@param end the index which marks the last entry of the subvector (inclusive)'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@throws OutOfRangeException if {@code start} or {@code end} are not valid',\r\n    'alternatives': [\r\n      '@throws OutOfRangeException when {@code start} or {@code end} are invalid',\r\n      '@throws OutOfRangeException if the given {@code start} or {@code end} are not valid',\r\n      '@throws OutOfRangeException in case of invalid {@code start} or {@code end}',\r\n      '@throws OutOfRangeException if the {@code start} or {@code end} are outside the valid range',\r\n      '@throws OutOfRangeException if {@code start} or {@code end} do not meet the validity criteria'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@throws NumberIsTooSmallException if {@code end < start}',\r\n    'alternatives': [\r\n      '@throws NumberIsTooSmallException when {@code end < start}',\r\n      '@throws NumberIsTooSmallException if the value of {@code end} is less than {@code start}',\r\n      '@throws NumberIsTooSmallException in case {@code end} is smaller than {@code start}',\r\n      '@throws NumberIsTooSmallException if the condition {@code end < start} is not met',\r\n      '@throws NumberIsTooSmallException if the end index is smaller than the start index'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param field field to which the elements belong',\r\n    'alternatives': [\r\n      '@param field the field to which the elements pertain',\r\n      '@param field the field that the elements belong to',\r\n      '@param field the field associated with the elements',\r\n      '@param field the field which the elements are associated with',\r\n      '@param field the field that the elements are related to'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param field Field to which the elements belong.',\r\n    'alternatives': [\r\n      '@param field The field to which the elements belong.',\r\n      '@param field The field that the elements pertain to.',\r\n      '@param field The field associated with the elements.',\r\n      '@param field The field which the elements are associated with.',\r\n      '@param field The field that the elements are related to.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param sig sign of the Dfp to create',\r\n    'alternatives': [\r\n      '@param sig the sign of the Dfp to generate',\r\n      '@param sig the signaling value of the Dfp to construct',\r\n      '@param sig the indication of the Dfp to create',\r\n      '@param sig the symbol of the Dfp to produce',\r\n      '@param sig the representation of the sign for the Dfp being created'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@return a new instance with a non-finite value',\r\n    'alternatives': [\r\n      '@return a fresh instance with a non-finite value',\r\n      '@return a newly created object with a non-finite value',\r\n      '@return a newly instantiated instance with a non-finite value',\r\n      '@return a newly constructed object with a non-finite value',\r\n      '@return an instance that has been created with a non-finite value'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@return {@link org.apache.commons.math3.Field Field} (really a {@link DfpField}) to which the instance belongs',\r\n    'alternatives': [\r\n      '@return {@link org.apache.commons.math3.Field Field} (actually a {@link DfpField}) that the instance belongs to',\r\n      '@return {@link org.apache.commons.math3.Field Field} (in reality a {@link DfpField}) to which the instance pertains',\r\n      '@return {@link org.apache.commons.math3.Field Field} (specifically a {@link DfpField}) that is associated with the instance',\r\n      '@return {@link org.apache.commons.math3.Field Field} (indeed a {@link DfpField}) to which the instance is related',\r\n      '@return {@link org.apache.commons.math3.Field Field} (truly a {@link DfpField}) that the instance is associated with'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@return number of radix digits',\r\n    'alternatives': [\r\n      '@return count of radix digits',\r\n      '@return quantity of radix digits',\r\n      '@return total of radix digits',\r\n      '@return tally of radix digits',\r\n      '@return number of base digits'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@return a Dfp with value zero',\r\n    'alternatives': [\r\n      '@return a Dfp representing zero',\r\n      '@return a Dfp that has the value of zero',\r\n      '@return a Dfp with the numerical value of zero',\r\n      '@return a Dfp having the magnitude of zero',\r\n      '@return a Dfp with a zero value'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@return a Dfp with value one',\r\n    'alternatives': [\r\n      '@return a Dfp representing one',\r\n      '@return a Dfp that has the value of one',\r\n      '@return a Dfp with the numerical value of one',\r\n      '@return a Dfp having the magnitude of one',\r\n      '@return a Dfp with a one value'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@return a Dfp with value two',\r\n    'alternatives': [\r\n      '@return a Dfp representing two',\r\n      '@return a Dfp that has the value of two',\r\n      '@return a Dfp with the numerical value of two',\r\n      '@return a Dfp having the magnitude of two',\r\n      '@return a Dfp with a two value'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param e desired exponent',\r\n    'alternatives': [\r\n      '@param e the desired exponent',\r\n      '@param e the exponent that is desired',\r\n      '@param e the exponent to aim for',\r\n      '@param e the sought-after exponent',\r\n      '@param e the exponent to be achieved'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@return last digit destroyed by shifting right',\r\n    'alternatives': [\r\n      '@return digit that is eliminated by shifting right',\r\n      '@return final digit removed during right shift',\r\n      '@return the digit that gets discarded when shifted to the right',\r\n      '@return the last digit that is dropped when shifting right',\r\n      '@return the digit that is lost when shifted right'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param x number to check instance against',\r\n    'alternatives': [\r\n      '@param x the number to compare against the instance',\r\n      '@param x the number that the instance is compared to',\r\n      '@param x the number for which the instance will be checked against',\r\n      '@param x the number that will be validated against the instance',\r\n      '@param x the number against which the instance is verified'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@return true if instance is less than x and neither are NaN, false otherwise',\r\n    'alternatives': [\r\n      '@return true if the instance is smaller than x and neither are NaN, otherwise false',\r\n      '@return true if the instance is less than x and both are not NaN, otherwise false',\r\n      '@return true if the instance is smaller than x and neither is NaN, otherwise false',\r\n      '@return true if the instance is less than x and neither are NaN, else false',\r\n      '@return true if the instance is smaller than x and neither is NaN, else false'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@return true if instance is greater than x and neither are NaN, false otherwise',\r\n    'alternatives': [\r\n      '@return true if the instance is larger than x and neither are NaN, otherwise false',\r\n      '@return true if the instance is greater than x and both are not NaN, otherwise false',\r\n      '@return true if the instance is larger than x and neither is NaN, otherwise false',\r\n      '@return true if the instance is greater than x and neither are NaN, else false',\r\n      '@return true if the instance is larger than x and neither is NaN, else false'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@return true if instance is not NaN and less than or equal to 0, false otherwise',\r\n    'alternatives': [\r\n      '@return true if the instance is a non-NaN value and less than or equal to 0, otherwise false',\r\n      '@return true if the instance is not NaN and smaller than or equal to 0, otherwise false',\r\n      '@return true if the instance is not NaN and less than or equal to zero, otherwise false',\r\n      '@return true if the instance is not NaN and smaller than or equal to zero, otherwise false',\r\n      '@return true if the instance is not NaN and is less than or equal to zero, else false'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@return true if instance is not NaN and less than or equal to 0, false otherwise',\r\n    'alternatives': [\r\n      '@return true if the instance is a non-NaN value and less than or equal to 0, otherwise false',\r\n      '@return true if the instance is not NaN and smaller than or equal to 0, otherwise false',\r\n      '@return true if the instance is not NaN and less than or equal to zero, otherwise false',\r\n      '@return true if the instance is not NaN and smaller than or equal to zero, otherwise false',\r\n      '@return true if the instance is not NaN and is less than or equal to zero, else false'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@return true if instance is not NaN and greater than or equal to 0, false otherwise',\r\n    'alternatives': [\r\n      '@return true if the instance is a non-NaN value and greater than or equal to 0, otherwise false',\r\n      '@return true if the instance is not NaN and greater than or equal to 0, otherwise false',\r\n      '@return true if the instance is not NaN and larger than or equal to zero, otherwise false',\r\n      '@return true if the instance is not NaN and larger than or equal to zero, else false',\r\n      '@return true if the instance is not NaN and is greater than or equal to zero, otherwise false'\r\n    ]\r\n  }\r\n]"