"[\n  {\n    \"tag\": \"@throws NonSquareOperatorException if {@code a} is not square\",\n    \"alternatives\": [\n      \"@throws NonSquareOperatorException if {@code a} is not a square matrix\",\n      \"@throws NonSquareOperatorException if matrix {@code a} is not square\"\n    ]\n  },\n  {\n    \"tag\": \"@throws DimensionMismatchException if {@code b} has dimensions\\ninconsistent with {@code a}\",\n    \"alternatives\": [\n      \"@throws DimensionMismatchException if the dimensions of {@code b} are not compatible with {@code a}\",\n      \"@throws DimensionMismatchException if the dimensions of {@code b} do not match those of {@code a}\"\n    ]\n  },\n  {\n    \"tag\": \"@throws MaxCountExceededException at exhaustion of the iteration count,\\nunless a custom\\n{@link org.apache.commons.math3.util.Incrementor.MaxCountExceededCallback callback}\\nhas been set at construction of the {@link IterationManager}\",\n    \"alternatives\": [\n      \"@throws MaxCountExceededException when the iteration count exceeds the maximum count, unless a custom callback has been set during the construction of the IterationManager\",\n      \"@throws MaxCountExceededException if the iteration count reaches the maximum limit without finding a solution, unless a custom callback has been specified in the IterationManager constructor\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NonSelfAdjointOperatorException if {@link #getCheck()} is\\n{@code true}, and {@code a} is not self-adjoint\",\n    \"alternatives\": [\n      \"@throws NonSelfAdjointOperatorException if the condition {@link #getCheck()} is true and matrix {@code a} is not self-adjoint\",\n      \"@throws NonSelfAdjointOperatorException if the flag {@link #getCheck()} is set to true and matrix {@code a} is not self-adjoint\"\n    ]\n  },\n  {\n    \"tag\": \"@throws IllConditionedOperatorException if {@code a} is ill-conditioned\",\n    \"alternatives\": [\n      \"@throws IllConditionedOperatorException if matrix {@code a} is considered ill-conditioned\",\n      \"@throws IllConditionedOperatorException if the condition number of matrix {@code a} exceeds a certain threshold indicating ill-conditioning\"\n    ]\n  },\n  {\n    \"tag\": \"@param x not meaningful in this implementation; should not be considered\\nas an initial guess (<a href=\\\"#initguess\\\">more</a>)\",\n    \"alternatives\": [\n      \"@param x not relevant in this implementation and should not be treated as an initial estimate (<a href=\\\"#initguess\\\">more</a>)\",\n      \"@param x not used in this implementation; do not treat it as an initial guess (<a href=\\\"#initguess\\\">more</a>)\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NonSelfAdjointOperatorException if {@link #getCheck()} is\\n{@code true}, and {@code a} is not self-adjoint\",\n    \"alternatives\": [\n      \"@throws NonSelfAdjointOperatorException if the condition {@link #getCheck()} is true and matrix {@code a} is not self-adjoint\",\n      \"@throws NonSelfAdjointOperatorException if the flag {@link #getCheck()} is set to true and matrix {@code a} is not self-adjoint\"\n    ]\n  },\n  {\n    \"tag\": \"@throws IllConditionedOperatorException if {@code a} is ill-conditioned\",\n    \"alternatives\": [\n      \"@throws IllConditionedOperatorException if matrix {@code a} is considered ill-conditioned\",\n      \"@throws IllConditionedOperatorException if the condition number of matrix {@code a} exceeds a certain threshold indicating ill-conditioning\"\n    ]\n  },\n  {\n    \"tag\": \"@param x the vector to be updated with the solution; {@code x} should\\nnot be considered as an initial guess (<a href=\\\"#initguess\\\">more</a>)\",\n    \"alternatives\": [\n      \"@param x the vector to be modified with the solution; it should not be treated as an initial estimate (<a href=\\\"#initguess\\\">more</a>)\",\n      \"@param x the vector to be adjusted with the solution; do not treat it as an initial guess (<a href=\\\"#initguess\\\">more</a>)\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NonSelfAdjointOperatorException if {@link #getCheck()} is\\n{@code true}, and {@code a} or {@code m} is not self-adjoint\",\n    \"alternatives\": [\n      \"@throws NonSelfAdjointOperatorException if the condition {@link #getCheck()} is true and either matrix {@code a} or matrix {@code m} is not self-adjoint\",\n      \"@throws NonSelfAdjointOperatorException if the flag {@link #getCheck()} is set to true and either matrix {@code a} or matrix {@code m} is not self-adjoint\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NonPositiveDefiniteOperatorException if {@code m} is not\\npositive definite\",\n    \"alternatives\": [\n      \"@throws NonPositiveDefiniteOperatorException if matrix {@code m} is not positive definite\",\n      \"@throws NonPositiveDefiniteOperatorException if the eigenvalues of matrix {@code m} are not all positive\"\n    ]\n  },\n  {\n    \"tag\": \"@throws IllConditionedOperatorException if {@code a} is ill-conditioned\",\n    \"alternatives\": [\n      \"@throws IllConditionedOperatorException if matrix {@code a} is considered ill-conditioned\",\n      \"@throws IllConditionedOperatorException if the condition number of matrix {@code a} exceeds a certain threshold indicating ill-conditioning\"\n    ]\n  },\n  {\n    \"tag\": \"@param a the linear operator A of the system\",\n    \"alternatives\": [\n      \"@param a the linear operator representing matrix A of the system\",\n      \"@param a the linear operator defining the matrix A of the system\"\n    ]\n  },\n  {\n    \"tag\": \"@param m the preconditioner, M (can be {@code null})\",\n    \"alternatives\": [\n      \"@param m the preconditioner matrix M (can be {@code null})\",\n      \"@param m the preconditioner used, M (can be {@code null})\"\n    ]\n  },\n  {\n    \"tag\": \"@param b the right-hand side vector\",\n    \"alternatives\": [\n      \"@param b the vector representing the right-hand side\",\n      \"@param b the vector on the right side of the equation\"\n    ]\n  },\n  {\n    \"tag\": \"@param x the vector to be updated with the solution; {@code x} should\\nnot be considered as an initial guess (<a href=\\\"#initguess\\\">more</a>)\",\n    \"alternatives\": [\n      \"@param x the vector to be modified with the solution; it should not be treated as an initial estimate (<a href=\\\"#initguess\\\">more</a>)\",\n      \"@param x the vector to be adjusted with the solution; do not treat it as an initial guess (<a href=\\\"#initguess\\\">more</a>)\"\n    ]\n  },\n  {\n    \"tag\": \"@param goodb usually {@code false}, except if {@code x} is expected to\\ncontain a large multiple of {@code b}\",\n    \"alternatives\": [\n      \"@param goodb usually {@code false}, unless {@code x} is anticipated to include a significant multiple of {@code b}\",\n      \"@param goodb typically {@code false}, except when {@code x} is likely to contain a large scaling of {@code b}\"\n    ]\n  },\n  {\n    \"tag\": \"@param shift the amount to be subtracted to all diagonal elements of A\",\n    \"alternatives\": [\n      \"@param shift the value to be subtracted from all diagonal elements of matrix A\",\n      \"@param shift the scalar to be deducted from each diagonal element of A\"\n    ]\n  },\n  {\n    \"tag\": \"@return a reference to {@code x} (shallow copy).\",\n    \"alternatives\": [\n      \"@return a reference to {@code x} (shallow copy) object.\",\n      \"@return a reference to the object {@code x} (shallow copy).\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NonSquareOperatorException if {@code a} or {@code m} is not square\",\n    \"alternatives\": [\n      \"@throws NonSquareOperatorException if either matrix {@code a} or matrix {@code m} is not square\",\n      \"@throws NonSquareOperatorException if the dimensions of matrix {@code a} or matrix {@code m} are not square\"\n    ]\n  },\n  {\n    \"tag\": \"@throws DimensionMismatchException if {@code m}, {@code b} or {@code x}\\nhave dimensions inconsistent with {@code a}.\",\n    \"alternatives\": [\n      \"@throws DimensionMismatchException if the dimensions of either {@code m}, {@code b}, or {@code x} are incompatible with those of {@code a}\",\n      \"@throws DimensionMismatchException if the dimensions of matrix {@code m}, vector {@code b}, or vector {@code x} do not match those of matrix {@code a}\"\n    ]\n  },\n  {\n    \"tag\": \"@throws MaxCountExceededException at exhaustion of the iteration count,\\nunless a custom\\n{@link org.apache.commons.math3.util.Incrementor.MaxCountExceededCallback callback}\\nhas been set at construction of the {@link IterationManager}\",\n    \"alternatives\": [\n      \"@throws MaxCountExceededException when the iteration count reaches the maximum limit, unless a custom callback has been specified during the construction of the IterationManager\",\n      \"@throws MaxCountExceededException if the iteration count exceeds the maximum count, unless a custom callback has been provided in the constructor of the IterationManager\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NonSelfAdjointOperatorException if {@link #getCheck()} is\\n{@code true}, and {@code a} or {@code m} is not self-adjoint\",\n    \"alternatives\": [\n      \"@throws NonSelfAdjointOperatorException if the condition {@link #getCheck()} is true and either matrix {@code a} or matrix {@code m} is not self-adjoint\",\n      \"@throws NonSelfAdjointOperatorException if the flag {@link #getCheck()} is set to true and either matrix {@code a} or matrix {@code m} is not self-adjoint\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NonPositiveDefiniteOperatorException if {@code m} is not positive\\ndefinite\",\n    \"alternatives\": [\n      \"@throws NonPositiveDefiniteOperatorException if matrix {@code m} is not positive definite\",\n      \"@throws NonPositiveDefiniteOperatorException if the eigenvalues of matrix {@code m} are not all positive\"\n    ]\n  },\n  {\n    \"tag\": \"@throws IllConditionedOperatorException if {@code a} is ill-conditioned\",\n    \"alternatives\": [\n      \"@throws IllConditionedOperatorException if matrix {@code a} is considered ill-conditioned\",\n      \"@throws IllConditionedOperatorException if the condition number of matrix {@code a} exceeds a certain threshold indicating ill-conditioning\"\n    ]\n  }\n]"