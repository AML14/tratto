"[\n  {\n    'tag': '@param alpha2 angle of the second elementary rotation',\n    'alternatives': [\n      '@param alpha2 angle of the second basic rotation',\n      '@param alpha2 angle of the second fundamental rotation',\n      '@param alpha2 angle of the second primary rotation',\n      '@param alpha2 angle of the second elementary rotation'\n    ]\n  },\n  {\n    'tag': '@param alpha3 angle of the third elementary rotation',\n    'alternatives': [\n      '@param alpha3 angle of the third basic rotation',\n      '@param alpha3 angle of the third fundamental rotation',\n      '@param alpha3 angle of the third primary rotation',\n      '@param alpha3 angle of the third elementary rotation'\n    ]\n  },\n  {\n    'tag': '@return the unique instance',\n    'alternatives': [\n      '@return the distinct instance',\n      '@return the sole instance',\n      '@return the exclusive instance',\n      '@return the unique instance'\n    ]\n  },\n  {\n    'tag': '@return the singleton instance',\n    'alternatives': [\n      '@return the single instance',\n      '@return the sole instance',\n      '@return the exclusive instance',\n      '@return the singleton instance'\n    ]\n  },\n  {\n    'tag': '@return list of segments endpoints',\n    'alternatives': [\n      '@return endpoints list of segments',\n      '@return list of endpoints of segments',\n      '@return segments endpoints list',\n      '@return list of segments endpoints'\n    ]\n  },\n  {\n    'tag': '@param subLine other sub-line which may intersect instance',\n    'alternatives': [\n      '@param subLine another sub-line that could intersect with instance',\n      '@param subLine another sub-line that might intersect instance',\n      '@param subLine another sub-line that may intersect the instance',\n      '@param subLine other sub-line which may intersect instance',\n      '@param subLine other sub-line that could intersect with the instance'\n    ]\n  },\n  {\n    'tag': \"@param includeEndPoints if true, endpoints are considered to belong to\\ninstance (i.e. they are closed sets) and may be returned, otherwise endpoints\\nare considered to not belong to instance (i.e. they are open sets) and intersection\\noccurring on endpoints lead to null being returned\",\n    'alternatives': [\n      \"@param includeEndPoints if true, endpoints are considered as part of\\ninstance (i.e. they are closed sets) and can be returned; otherwise, endpoints\\nare not considered as part of instance (i.e. they are open sets) and if an intersection\\noccurs at endpoints, null is returned\",\n      \"@param includeEndPoints if true, endpoints are treated as belonging to\\ninstance (i.e. they are closed sets) and can be returned; if false, endpoints\\nare treated as not belonging to instance (i.e. they are open sets) and if an intersection\\noccurs at endpoints, null is returned\",\n      \"@param includeEndPoints if true, endpoints are regarded as belonging to\\ninstance (i.e. they are closed sets) and may be returned. Otherwise, endpoints\\nare regarded as not belonging to instance (i.e. they are open sets) and if an intersection\\noccurs at endpoints, null is returned\",\n      \"@param includeEndPoints if true, endpoints are considered to be part of\\ninstance (i.e. they are closed sets) and can be returned; if false, endpoints\\nare considered to be not part of instance (i.e. they are open sets) and if an intersection\\noccurs at endpoints, null will be returned\",\n      \"@param includeEndPoints if true, endpoints are considered as belonging to\\ninstance (i.e. they are closed sets) and can be returned. If false, endpoints\\nare not considered as belonging to instance (i.e. they are open sets) and intersection\\noccurring on endpoints lead to null being returned\"\n    ]\n  },\n  {\n    'tag': \"@return the intersection point if there is one, null if the sub-lines don't intersect\",\n    'alternatives': [\n      \"@return the intersection point if it exists, null if the sub-lines don't intersect\",\n      \"@return the point of intersection if any, null if the sub-lines don't intersect\",\n      \"@return the intersecting point if there is one, null if the sub-lines don't intersect\",\n      \"@return the point of intersection if available, null if the sub-lines don't intersect\",\n      \"@return the intersection point if present, null if the sub-lines don't intersect\"\n    ]\n  },\n  {\n    'tag': '@param start start point',\n    'alternatives': [\n      '@param start beginning point',\n      '@param start initial point',\n      '@param start starting point',\n      '@param start start point'\n    ]\n  },\n  {\n    'tag': '@param end end point',\n    'alternatives': [\n      '@param end terminal point',\n      '@param end final point',\n      '@param end concluding point',\n      '@param end end point'\n    ]\n  },\n  {\n    'tag': '@return an interval set',\n    'alternatives': [\n      '@return a set of intervals',\n      '@return an interval collection',\n      '@return a collection of intervals',\n      '@return an interval set',\n      '@return a set of time intervals'\n    ]\n  },\n  {\n    'tag': '@param tolerance tolerance below which points are considered identical',\n    'alternatives': [\n      '@param tolerance tolerance less than which points are regarded as identical',\n      '@param tolerance tolerance lower than which points are considered identical',\n      '@param tolerance tolerance under which points are deemed identical',\n      '@param tolerance tolerance below which points are considered identical',\n      '@param tolerance tolerance that indicates points as identical'\n    ]\n  },\n  {\n    'tag': '@throws MathIllegalArgumentException if the points are equal',\n    'alternatives': [\n      '@throws MathIllegalArgumentException if the points are the same',\n      '@throws MathIllegalArgumentException if the points are indistinguishable',\n      '@throws MathIllegalArgumentException if the points have no difference',\n      '@throws MathIllegalArgumentException if the points are equal',\n      '@throws MathIllegalArgumentException if the points coincide'\n    ]\n  },\n  {\n    'tag': '@param line underlying line',\n    'alternatives': [\n      '@param line base line',\n      '@param line parent line',\n      '@param line fundamental line',\n      '@param line underlying line',\n      '@param line primary line'\n    ]\n  },\n  {\n    'tag': '@param remainingRegion remaining region of the line',\n    'alternatives': [\n      '@param remainingRegion remaining part of the line',\n      '@param remainingRegion leftover region of the line',\n      '@param remainingRegion rest of the line',\n      '@param remainingRegion remaining region of the line',\n      '@param remainingRegion portion of the line still remaining'\n    ]\n  },\n  {\n    'tag': '@param start start point',\n    'alternatives': [\n      '@param start beginning point',\n      '@param start initial point',\n      '@param start starting point',\n      '@param start start point'\n    ]\n  },\n  {\n    'tag': '@param end end point',\n    'alternatives': [\n      '@param end terminal point',\n      '@param end final point',\n      '@param end concluding point',\n      '@param end end point'\n    ]\n  },\n  {\n    'tag': '@param tolerance tolerance below which points are considered identical',\n    'alternatives': [\n      '@param tolerance tolerance less than which points are regarded as identical',\n      '@param tolerance tolerance lower than which points are considered identical',\n      '@param tolerance tolerance under which points are deemed identical',\n      '@param tolerance tolerance below which points are considered identical',\n      '@param tolerance tolerance that indicates points as identical'\n    ]\n  },\n  {\n    'tag': '@param start start point',\n    'alternatives': [\n      '@param start beginning point',\n      '@param start initial point',\n      '@param start starting point',\n      '@param start start point'\n    ]\n  },\n  {\n    'tag': '@param end end point',\n    'alternatives': [\n      '@param end terminal point',\n      '@param end final point',\n      '@param end concluding point',\n      '@param end end point'\n    ]\n  },\n  {\n    'tag': '@param segment single segment forming the sub-line',\n    'alternatives': [\n      '@param segment individual segment forming the sub-line',\n      '@param segment sole segment forming the sub-line',\n      '@param segment single segment creating the sub-line',\n      '@param segment single segment forming the sub-line',\n      '@param segment segment that represents the sub-line'\n    ]\n  },\n  {\n    'tag': '@throws MathIllegalArgumentException if the segment endpoints are equal',\n    'alternatives': [\n      '@throws MathIllegalArgumentException if the segment endpoints are the same',\n      '@throws MathIllegalArgumentException if the segment endpoints are indistinguishable',\n      '@throws MathIllegalArgumentException if the segment endpoints have no difference',\n      '@throws MathIllegalArgumentException if the segment endpoints are equal',\n      '@throws MathIllegalArgumentException if the segment endpoints coincide'\n    ]\n  },\n  {\n    'tag': '@return Cartesian coordinates',\n    'alternatives': [\n      '@return rectangular coordinates',\n      '@return coordinates in a Cartesian system',\n      '@return Cartesian coordinates',\n      '@return coordinates in a rectangular system',\n      '@return coordinates using Cartesian notation'\n    ]\n  },\n  {\n    'tag': '@return radius r',\n    'alternatives': [\n      '@return r radius',\n      '@return radius r',\n      '@return r value of the radius',\n      '@return radial distance r',\n      '@return r radial distance'\n    ]\n  },\n  {\n    'tag': '@return azimuthal angle in x-y plane &theta;',\n    'alternatives': [\n      '@return polar angle in the x-y plane &theta;',\n      '@return angle of rotation in the x-y plane &theta;',\n      '@return azimuthal angle in x-y plane &theta;',\n      '@return &theta; azimuthal angle in the x-y plane',\n      '@return angle &theta; in the x-y plane'\n    ]\n  }\n]"