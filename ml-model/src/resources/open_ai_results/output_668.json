"output = [\n  {\n    'tag': '@return a random value.',\n    'alternatives': [\n      '@return a value chosen randomly.',\n      '@return a value selected at random.',\n      '@return a randomly selected value.',\n      '@return a value that is randomly chosen.',\n      '@return a value that is chosen randomly.'\n    ]\n  },\n  {\n    'tag': '@param sampleSize the number of random values to generate.',\n    'alternatives': [\n      '@param sampleSize the quantity of random values to create.',\n      '@param sampleSize the count of random values to generate.',\n      '@param sampleSize the number of random values to produce.',\n      '@param sampleSize the total of random values to generate.',\n      '@param sampleSize the amount of random values to generate.'\n    ]\n  },\n  {\n    'tag': '@return an array representing the random sample.',\n    'alternatives': [\n      '@return an array that represents the random sample.',\n      '@return an array that depicts the random sample.',\n      '@return an array that shows the random sample.',\n      '@return an array that illustrates the random sample.',\n      '@return an array that represents the sample chosen at random.'\n    ]\n  },\n  {\n    'tag': '@param sampleSize the number of random values to generate.',\n    'alternatives': [\n      '@param sampleSize the count of random values to produce.',\n      '@param sampleSize the quantity of random values to create.',\n      '@param sampleSize the total of random values to generate.',\n      '@param sampleSize the amount of random values to generate.',\n      '@param sampleSize the number of random values to produce.'\n    ]\n  },\n  {\n    'tag': '@param array the array to populate.',\n    'alternatives': [\n      '@param array the array to fill.',\n      '@param array the array to complete.',\n      '@param array the array to populate with values.',\n      '@param array the array to populate with elements.',\n      '@param array the array to populate with data.'\n    ]\n  },\n  {\n    'tag': '@return an array representing the random sample.',\n    'alternatives': [\n      '@return an array that represents the random sample.',\n      '@return an array that depicts the random sample.',\n      '@return an array that shows the random sample.',\n      '@return an array that illustrates the random sample.',\n      '@return an array that represents the sample chosen at random.'\n    ]\n  },\n  {\n    'tag': '@param pmf probability mass function enumerated as a list of <T, probability> pairs.',\n    'alternatives': [\n      '@param pmf probability mass function listed as a collection of <T, probability> pairs.',\n      '@param pmf probability mass function expressed as a list of <T, probability> pairs.',\n      '@param pmf probability mass function presented as a list of <T, probability> entries.',\n      '@param pmf probability mass function represented as a list of <T, probability> elements.',\n      '@param pmf probability mass function given as a list of <T, probability> tuples.'\n    ]\n  },\n  {\n    'tag': '@throws NotPositiveException if any of the probabilities are negative.',\n    'alternatives': [\n      '@throws NotPositiveException when any of the probabilities are negative.',\n      '@throws NotPositiveException in case any of the probabilities are negative.',\n      '@throws NotPositiveException if there are any negative probabilities.',\n      '@throws NotPositiveException if negative probabilities are found.',\n      '@throws NotPositiveException if any of the probabilities are less than zero.'\n    ]\n  },\n  {\n    'tag': '@throws NotFiniteNumberException if any of the probabilities are infinite.',\n    'alternatives': [\n      '@throws NotFiniteNumberException when any of the probabilities are infinite.',\n      '@throws NotFiniteNumberException in case any of the probabilities are infinite.',\n      '@throws NotFiniteNumberException if there are any infinite probabilities.',\n      '@throws NotFiniteNumberException if infinite probabilities are found.',\n      '@throws NotFiniteNumberException if any of the probabilities are infinite numbers.'\n    ]\n  },\n  {\n    'tag': '@throws NotANumberException if any of the probabilities are NaN.',\n    'alternatives': [\n      '@throws NotANumberException when any of the probabilities are NaN.',\n      '@throws NotANumberException in case any of the probabilities are NaN.',\n      '@throws NotANumberException if there are any NaN probabilities.',\n      '@throws NotANumberException if NaN probabilities are found.',\n      '@throws NotANumberException if any of the probabilities are not a number.'\n    ]\n  },\n  {\n    'tag': '@throws MathArithmeticException all of the probabilities are 0.',\n    'alternatives': [\n      '@throws MathArithmeticException when all of the probabilities are 0.',\n      '@throws MathArithmeticException in case all of the probabilities are 0.',\n      '@throws MathArithmeticException if all the probabilities are zero.',\n      '@throws MathArithmeticException if the probabilities are all 0.',\n      '@throws MathArithmeticException if none of the probabilities are non-zero.'\n    ]\n  },\n  {\n    'tag': '@param rng random number generator.',\n    'alternatives': [\n      '@param rng generator of random numbers.',\n      '@param rng random number source.',\n      '@param rng source of random numbers.',\n      '@param rng random number producer.',\n      '@param rng random number creator.'\n    ]\n  },\n  {\n    'tag': '@param pmf probability mass function enumerated as a list of <T, probability> pairs.',\n    'alternatives': [\n      '@param pmf probability mass function listed as a collection of <T, probability> pairs.',\n      '@param pmf probability mass function expressed as a list of <T, probability> pairs.',\n      '@param pmf probability mass function presented as a list of <T, probability> entries.',\n      '@param pmf probability mass function represented as a list of <T, probability> elements.',\n      '@param pmf probability mass function given as a list of <T, probability> tuples.'\n    ]\n  },\n  {\n    'tag': '@throws NotPositiveException if any of the probabilities are negative.',\n    'alternatives': [\n      '@throws NotPositiveException when any of the probabilities are negative.',\n      '@throws NotPositiveException in case any of the probabilities are negative.',\n      '@throws NotPositiveException if there are any negative probabilities.',\n      '@throws NotPositiveException if negative probabilities are found.',\n      '@throws NotPositiveException if any of the probabilities are less than zero.'\n    ]\n  },\n  {\n    'tag': '@throws NotFiniteNumberException if any of the probabilities are infinite.',\n    'alternatives': [\n      '@throws NotFiniteNumberException when any of the probabilities are infinite.',\n      '@throws NotFiniteNumberException in case any of the probabilities are infinite.',\n      '@throws NotFiniteNumberException if there are any infinite probabilities.',\n      '@throws NotFiniteNumberException if infinite probabilities are found.',\n      '@throws NotFiniteNumberException if any of the probabilities are infinite numbers.'\n    ]\n  },\n  {\n    'tag': '@return a shallow clone',\n    'alternatives': [\n      '@return a shallow copy',\n      '@return a shallow duplicate',\n      '@return a clone that is not deep',\n      '@return a replica that is not deep',\n      '@return a duplicate that is not deep'\n    ]\n  },\n  {\n    'tag': '@param obj the object to compare to',\n    'alternatives': [\n      '@param obj the object to compare against',\n      '@param obj the object to compare with',\n      '@param obj the object to compare',\n      '@param obj the object to be compared',\n      '@param obj the object to be compared to'\n    ]\n  },\n  {\n    'tag': '@return true if equal',\n    'alternatives': [\n      '@return true if identical',\n      '@return true if the same',\n      '@return true if equivalent',\n      '@return true if equal to',\n      '@return true if matches'\n    ]\n  },\n  {\n    'tag': '@return the hash code defined in the Map interface',\n    'alternatives': [\n      '@return the hash code specified in the Map interface',\n      '@return the hash code as defined in the Map interface',\n      '@return the hash code that is defined in the Map interface',\n      '@return the hash code taken from the Map interface',\n      '@return the hash code provided in the Map interface'\n    ]\n  },\n  {\n    'tag': '@return a string version of the map',\n    'alternatives': [\n      '@return a textual representation of the map',\n      '@return a string representation of the map',\n      '@return a string form of the map',\n      '@return a string that represents the map',\n      '@return a string containing the map'\n    ]\n  },\n  {\n    'tag': '@param map the map to copy',\n    'alternatives': [\n      '@param map the map to duplicate',\n      '@param map the map to replicate',\n      '@param map the map to clone',\n      '@param map the map to make a copy of',\n      '@param map the map to create a copy from'\n    ]\n  },\n  {\n    'tag': '@param <K> the key type',\n    'alternatives': [\n      '@param <K> the type of the keys',\n      '@param <K> the type associated with the keys',\n      '@param <K> the type that represents the keys',\n      '@param <K> the type used for the keys',\n      '@param <K> the type of the key elements'\n    ]\n  },\n  {\n    'tag': '@param <V> the value type',\n    'alternatives': [\n      '@param <V> the type of the values',\n      '@param <V> the type associated with the values',\n      '@param <V> the type that represents the values',\n      '@param <V> the type used for the values',\n      '@param <V> the type of the value elements'\n    ]\n  },\n  {\n    'tag': '@return a new predicated map',\n    'alternatives': [\n      '@return a new map with predicates',\n      '@return a new map that includes predicates',\n      '@return a new map filtered by predicates',\n      '@return a new map generated based on predicates',\n      '@return a new map created using predicates'\n    ]\n  },\n  {\n    'tag': '@param out the output stream',\n    'alternatives': [\n      '@param out the stream for output',\n      '@param out the output channel',\n      '@param out the output destination',\n      '@param out the output source',\n      '@param out the output stream to use'\n    ]\n  }\n]"