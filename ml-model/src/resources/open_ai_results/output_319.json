"[\n  {\n    'tag': '@throws OutOfRangeException if the index is not valid.',\n    'alternatives': [\n      '@throws OutOfRangeException in case the index is invalid.',\n      '@throws OutOfRangeException if the index is invalid.',\n      '@throws OutOfRangeException if the index does not fall within the valid range.',\n      '@throws OutOfRangeException when the index is not valid.',\n      '@throws OutOfRangeException if the index is out of range.'\n    ]\n  },\n  {\n    'tag': '@param value single value to set for all elements',\n    'alternatives': [\n      '@param value the value to be assigned to all elements',\n      '@param value a single value to be set for all elements',\n      '@param value the value that will be set for all elements',\n      '@param value the value to set for all elements',\n      '@param value the single value that sets all elements'\n    ]\n  },\n  {\n    'tag': '@return array containing a copy of vector elements',\n    'alternatives': [\n      '@return an array that contains a copy of vector elements',\n      '@return a copied array of vector elements',\n      '@return an array that holds a copy of the vector elements',\n      '@return an array with copied vector elements',\n      '@return an array containing vector elements that have been copied'\n    ]\n  },\n  {\n    'tag': '@return true if the matrix is square (rowDimension = columnDimension)',\n    'alternatives': [\n      '@return true if the matrix is square (rowDimension is equal to columnDimension)',\n      '@return true if the matrix has the same number of rows and columns',\n      '@return true if the matrix is a square matrix (rowDimension equals columnDimension)',\n      '@return true if the matrix has equal rowDimension and columnDimension',\n      '@return true if the matrix is a square matrix with equal rowDimension and columnDimension'\n    ]\n  },\n  {\n    'tag': '@return rowDimension',\n    'alternatives': [\n      '@return the number of rows',\n      '@return the dimension of rows',\n      '@return the size of the rows',\n      '@return the number of dimensions in the row',\n      '@return the count of rows'\n    ]\n  },\n  {\n    'tag': '@return columnDimension',\n    'alternatives': [\n      '@return the number of columns',\n      '@return the dimension of columns',\n      '@return the size of the columns',\n      '@return the number of dimensions in the column',\n      '@return the count of columns'\n    ]\n  },\n  {\n    'tag': '@param wrong Row dimension.',\n    'alternatives': [\n      '@param wrong the dimension of the row.',\n      '@param wrong the dimension of the row is incorrect.',\n      '@param wrong the row dimension is invalid.',\n      '@param wrong the incorrect dimension of the row.',\n      '@param wrong the row dimension is wrong.'\n    ]\n  },\n  {\n    'tag': '@param expected Column dimension.',\n    'alternatives': [\n      '@param expected the dimension of the column.',\n      '@param expected the dimension of the column is expected.',\n      '@param expected the expected dimension of the column.',\n      '@param expected the column dimension is expected.',\n      '@param expected the column dimension is as expected.'\n    ]\n  },\n  {\n    'tag': '@return the U matrix',\n    'alternatives': [\n      '@return the matrix U',\n      '@return the U matrix object',\n      '@return the U matrix representation',\n      '@return the matrix representing U',\n      '@return the U matrix structure'\n    ]\n  },\n  {\n    'tag': '@return the U matrix (or null if decomposed matrix is singular)',\n    'alternatives': [\n      '@return the U matrix (null if decomposed matrix is singular)',\n      '@return the U matrix (null when decomposed matrix is singular)',\n      '@return the U matrix (or null if matrix decomposition is singular)',\n      '@return the U matrix (or null in case of singular decomposed matrix)',\n      '@return the U matrix (or null if the matrix decomposition is singular)'\n    ]\n  },\n  {\n    'tag': '@return the &Sigma; matrix',\n    'alternatives': [\n      '@return the matrix &Sigma;',\n      '@return the Sigma matrix',\n      '@return the &Sigma; matrix object',\n      '@return the matrix representing &Sigma;',\n      '@return the &Sigma; matrix structure'\n    ]\n  },\n  {\n    'tag': '@return the diagonal elements of the &Sigma; matrix',\n    'alternatives': [\n      '@return the diagonal elements of the Sigma matrix',\n      '@return the elements on the diagonal of the &Sigma; matrix',\n      '@return the diagonal values of the &Sigma; matrix',\n      '@return the elements that form the diagonal of the &Sigma; matrix',\n      '@return the values located on the diagonal of the &Sigma; matrix'\n    ]\n  },\n  {\n    'tag': '@return the V matrix (or null if decomposed matrix is singular)',\n    'alternatives': [\n      '@return the V matrix (null if decomposed matrix is singular)',\n      '@return the V matrix (null when decomposed matrix is singular)',\n      '@return the V matrix (or null if matrix decomposition is singular)',\n      '@return the V matrix (or null in case of singular decomposed matrix)',\n      '@return the V matrix (or null if the matrix decomposition is singular)'\n    ]\n  },\n  {\n    'tag': '@return the V matrix (or null if decomposed matrix is singular)',\n    'alternatives': [\n      '@return the V matrix (null if decomposed matrix is singular)',\n      '@return the V matrix (null when decomposed matrix is singular)',\n      '@return the V matrix (or null if matrix decomposition is singular)',\n      '@return the V matrix (or null in case of singular decomposed matrix)',\n      '@return the V matrix (or null if the matrix decomposition is singular)'\n    ]\n  },\n  {\n    'tag': '@param minSingularValue value below which singular values are ignored\\n(a 0 or negative value implies all singular value will be used)',\n    'alternatives': [\n      '@param minSingularValue the value that determines the threshold for ignoring singular values\\n(a value 0 or below implies all singular values will be used)',\n      '@param minSingularValue the minimum singular value below which values are ignored\\n(a value of 0 or less indicates that all singular values will be used)',\n      '@param minSingularValue the threshold value below which singular values are not considered\\n(a value of 0 or less implies all singular values are used)',\n      '@param minSingularValue the value below which singular values are disregarded\\n(a value of 0 or less means that all singular values will be used)',\n      '@param minSingularValue the minimum value for singular values to be taken into account\\n(a value of 0 or less means all singular values will be used)'\n    ]\n  },\n  {\n    'tag': '@return covariance matrix',\n    'alternatives': [\n      '@return the matrix representing covariance',\n      '@return the covariance matrix object',\n      '@return the matrix of covariance',\n      '@return the matrix that represents covariance',\n      '@return the covariance matrix structure'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if minSingularValue is larger than\\nthe largest singular value, meaning all singular values are ignored',\n    'alternatives': [\n      '@throws IllegalArgumentException when minSingularValue exceeds the largest singular value, indicating that all singular values are disregarded',\n      '@throws IllegalArgumentException if minSingularValue is greater than the largest singular value, which means all singular values are ignored',\n      '@throws IllegalArgumentException in case minSingularValue is larger than the largest singular value, implying that all singular values are not considered',\n      '@throws IllegalArgumentException if minSingularValue exceeds the largest singular value, resulting in the exclusion of all singular values',\n      '@throws IllegalArgumentException if minSingularValue is bigger than\\nthe largest singular value, meaning all singular values are not considered'\n    ]\n  },\n  {\n    'tag': '@return norm',\n    'alternatives': [\n      '@return the magnitude',\n      '@return the norm value',\n      '@return the norm of the object',\n      '@return the object\\'s norm',\n      '@return the norm measurement'\n    ]\n  },\n  {\n    'tag': '@return condition number of the matrix',\n    'alternatives': [\n      '@return the matrix\\'s condition number',\n      '@return the condition number of the given matrix',\n      '@return the number indicating the matrix condition',\n      '@return a number representing the condition of the matrix',\n      '@return the matrix condition number'\n    ]\n  },\n  {\n    'tag': '@return the inverse of the condition number.',\n    'alternatives': [\n      '@return the reciprocal value of the condition number.',\n      '@return the inverse value of the condition number.',\n      '@return the value that represents the inverse of the condition number.',\n      '@return the number that is the inverse of the condition number.',\n      '@return the value obtained by taking the inverse of the condition number.'\n    ]\n  },\n  {\n    'tag': '@return effective numerical matrix rank',\n    'alternatives': [\n      '@return the numerical rank of the matrix',\n      '@return the computational rank of the matrix',\n      '@return the rank of the matrix in numerical terms',\n      '@return the effective rank of the matrix in computation',\n      '@return the matrix rank determined numerically'\n    ]\n  },\n  {\n    'tag': '@return a solver',\n    'alternatives': [\n      '@return an instance of a solver',\n      '@return a solver object',\n      '@return a solver implementation',\n      '@return a solver mechanism',\n      '@return a solver solution'\n    ]\n  },\n  {\n    'tag': '@param matrix Matrix to decompose.',\n    'alternatives': [\n      '@param matrix the matrix that needs to be decomposed.',\n      '@param matrix the matrix to be decomposed.',\n      '@param matrix the matrix that requires decomposition.',\n      '@param matrix the input matrix for decomposition.',\n      '@param matrix the specified matrix to be decomposed.'\n    ]\n  },\n  {\n    'tag': '@return the V matrix.',\n    'alternatives': [\n      '@return the matrix V.',\n      '@return the V matrix object.',\n      '@return the V matrix representation.',\n      '@return the matrix representing V.',\n      '@return the V matrix structure.'\n    ]\n  },\n  {\n    'tag': '@return the D matrix.',\n    'alternatives': [\n      '@return the matrix D.',\n      '@return the D matrix object.',\n      '@return the D matrix representation.',\n      '@return the matrix representing D.',\n      '@return the D matrix structure.'\n    ]\n  }\n]"