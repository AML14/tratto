"output = [\r\n  {\r\n    'tag': '@param base the base (backing) graph on which the subgraph will be based.',\r\n    'alternatives': [\r\n      '@param base the graph that serves as the foundation for the subgraph.',\r\n      '@param base the underlying graph on which the subgraph is built.',\r\n      '@param base the main (supporting) graph on which the subgraph is established.',\r\n      '@param base the original graph used as the basis for the subgraph.',\r\n      '@param base the fundamental graph on which the subgraph is constructed.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param vertexSubset vertices to include in the subgraph. If <code>\\nnull</code> then all vertices are included.',\r\n    'alternatives': [\r\n      '@param vertexSubset the set of vertices to be incorporated in the subgraph. If <code>\\nnull</code> is passed, then all vertices will be included.',\r\n      '@param vertexSubset the collection of vertices to be added to the subgraph. If <code>\\nnull</code> is provided, then all vertices will be included.',\r\n      '@param vertexSubset the subset of vertices that should be included in the subgraph. If <code>\\nnull</code>, all vertices are to be included.',\r\n      '@param vertexSubset the set of vertices that should be part of the subgraph. If <code>\\nnull</code>, all vertices will be considered.',\r\n      '@param vertexSubset the vertices to be included in the subgraph. If <code>\\nnull</code> is passed, all vertices will be added.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param edgeSubset edges to in include in the subgraph. If <code>\\nnull</code> then all the edges whose vertices found in the graph are\\nincluded.',\r\n    'alternatives': [\r\n      '@param edgeSubset the subset of edges to be included in the subgraph. If <code>\\nnull</code> is provided, all edges whose vertices are present in the graph will be included.',\r\n      '@param edgeSubset the edges to be added to the subgraph. If <code>\\nnull</code>, all the edges whose vertices are found in the graph will be included.',\r\n      '@param edgeSubset the collection of edges that should be part of the subgraph. If <code>\\nnull</code>, all edges connected to vertices in the graph will be included.',\r\n      '@param edgeSubset the set of edges that need to be included in the subgraph. If <code>\\nnull</code> is given, all edges with vertices in the graph will be considered.',\r\n      '@param edgeSubset the edges that are to be incorporated in the subgraph. If <code>\\nnull</code> is passed, all edges connected to vertices present in the graph will be included.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param edgeClass class on which to base factory for edges',\r\n    'alternatives': [\r\n      '@param edgeClass the class used as a foundation for the edge factory.',\r\n      '@param edgeClass the base class to derive the edge factory from.',\r\n      '@param edgeClass the underlying class for creating the edge factory.',\r\n      '@param edgeClass the class serving as the basis for the edge factory creation.',\r\n      '@param edgeClass the class upon which the factory for edges is constructed.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param base the backing graph.',\r\n    'alternatives': [\r\n      '@param base the underlying graph.',\r\n      '@param base the main graph.',\r\n      '@param base the foundation graph.',\r\n      '@param base the support graph.',\r\n      '@param base the original graph.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param g the backing graph over which an unweighted view is to be\\ncreated.',\r\n    'alternatives': [\r\n      '@param g the underlying graph on which an unweighted view is created.',\r\n      '@param g the base graph for creating an unweighted view.',\r\n      '@param g the main graph used to generate an unweighted view.',\r\n      '@param g the support graph over which an unweighted view is generated.',\r\n      '@param g the original graph for which an unweighted view is to be created.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param edgeClass class on which to base factory for edges',\r\n    'alternatives': [\r\n      '@param edgeClass the class used as a foundation for the edge factory.',\r\n      '@param edgeClass the base class to derive the edge factory from.',\r\n      '@param edgeClass the underlying class for creating the edge factory.',\r\n      '@param edgeClass the class serving as the basis for the edge factory creation.',\r\n      '@param edgeClass the class upon which the factory for edges is constructed.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param ef the edge factory of the new graph.',\r\n    'alternatives': [\r\n      '@param ef the edge factory used for the new graph.',\r\n      '@param ef the factory responsible for creating edges of the new graph.',\r\n      '@param ef the factory that generates edges for the new graph.',\r\n      '@param ef the edge factory associated with the new graph.',\r\n      '@param ef the factory for creating edges in the new graph.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param g the backing graph on which an unmodifiable graph is to be\\ncreated.',\r\n    'alternatives': [\r\n      '@param g the underlying graph for which an unmodifiable graph is created.',\r\n      '@param g the base graph that will be transformed into an unmodifiable graph.',\r\n      '@param g the main graph from which an unmodifiable graph is generated.',\r\n      '@param g the support graph on which an unmodifiable graph is built.',\r\n      '@param g the original graph on which an unmodifiable graph is to be created.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param v the vertex to be added.',\r\n    'alternatives': [\r\n      '@param v the new vertex to add.',\r\n      '@param v the vertex that will be inserted.',\r\n      '@param v the vertex that should be included.',\r\n      '@param v the vertex to be included.',\r\n      '@param v the vertex that needs to be added.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@return <code>true</code> if the vertex was added, otherwise <code>\\nfalse</code>.',\r\n    'alternatives': [\r\n      '@return <code>true</code> if the vertex was successfully added, otherwise <code>\\nfalse</code>.',\r\n      '@return <code>true</code> if the vertex is added, otherwise <code>\\nfalse</code>.',\r\n      '@return <code>true</code> if the addition of the vertex is successful, otherwise <code>\\nfalse</code>.',\r\n      '@return <code>true</code> if the vertex was added successfully, otherwise <code>\\nfalse</code>.',\r\n      '@return <code>true</code> if the vertex is successfully added, otherwise <code>\\nfalse</code>.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@throws NullPointerException ',\r\n    'alternatives': [\r\n      '@throws NullPointerException exception.',\r\n      '@throws NullPointerException error.',\r\n      '@throws NullPointerException if necessary.',\r\n      '@throws NullPointerException in case.',\r\n      '@throws NullPointerException when required.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@throws IllegalArgumentException ',\r\n    'alternatives': [\r\n      '@throws IllegalArgumentException exception.',\r\n      '@throws IllegalArgumentException error.',\r\n      '@throws IllegalArgumentException if necessary.',\r\n      '@throws IllegalArgumentException in case.',\r\n      '@throws IllegalArgumentException when required.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param v vertex',\r\n    'alternatives': [\r\n      '@param v the vertex.',\r\n      '@param v the specific vertex.',\r\n      '@param v the given vertex.',\r\n      '@param v the vertex to consider.',\r\n      '@param v the designated vertex.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@return a string representation of this graph.',\r\n    'alternatives': [\r\n      '@return a textual representation of this graph.',\r\n      '@return a string that represents this graph.',\r\n      '@return the string representation of this graph.',\r\n      '@return a string describing this graph.',\r\n      '@return a representation of this graph in string format.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param v vertex',\r\n    'alternatives': [\r\n      '@param v the vertex.',\r\n      '@param v the specific vertex.',\r\n      '@param v the given vertex.',\r\n      '@param v the vertex to consider.',\r\n      '@param v the designated vertex.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@return <code>true</code> if this assertion holds.',\r\n    'alternatives': [\r\n      '@return <code>true</code> if this condition is true.',\r\n      '@return <code>true</code> if this statement is valid.',\r\n      '@return <code>true</code> if this proposition is correct.',\r\n      '@return <code>true</code> if this assertion is satisfied.',\r\n      '@return <code>true</code> if this assertion is true.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@throws IllegalArgumentException if specified vertex does not exist in\\nthis graph.',\r\n    'alternatives': [\r\n      '@throws IllegalArgumentException if the provided vertex does not exist in\\nthis graph.',\r\n      '@throws IllegalArgumentException if the specified vertex is not found in\\nthis graph.',\r\n      '@throws IllegalArgumentException if the given vertex is not present in\\nthis graph.',\r\n      '@throws IllegalArgumentException if the vertex specified does not exist in\\nthis graph.',\r\n      '@throws IllegalArgumentException if the vertex provided is not contained in\\nthis graph.'\r\n    ]\r\n  }\r\n]"