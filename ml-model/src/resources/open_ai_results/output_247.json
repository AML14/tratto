"output = [\n  {\n    'tag': '@param transformers the transformers to chain, copied, no nulls',\n    'alternatives': [\n      '@param transformers copied, no nulls, the transformers to chain',\n      '@param transformers to chain, copied, no nulls (no nulls guarantee)',\n      '@param transformers to chain (no nulls), copied',\n      '@param transformers (no nulls) to chain, copied',\n      '@param transformers, the transformers to chain, copied, no nulls'\n    ]\n  },\n  {\n    'tag': '@param <T> the type that the predicate queries',\n    'alternatives': [\n      '@param <T> the type that the predicate queries',\n      '@param <T> the type queried by the predicate',\n      '@param <T> the type on which the predicate queries',\n      '@param <T> the queried type for the predicate',\n      '@param <T> the type for which the predicate queries'\n    ]\n  },\n  {\n    'tag': '@param object the object to compare to',\n    'alternatives': [\n      '@param object to be compared',\n      '@param object to compare against',\n      '@param object to compare to',\n      '@param object for comparison',\n      '@param object being compared'\n    ]\n  },\n  {\n    'tag': '@param comparator the comparator to use for comparison',\n    'alternatives': [\n      '@param comparator for comparing',\n      '@param comparator for comparison',\n      '@param comparator to be used for comparison',\n      '@param comparator to compare with',\n      '@param comparator used in the comparison'\n    ]\n  },\n  {\n    'tag': '@return the predicate',\n    'alternatives': [\n      '@return the predicate',\n      '@return the created predicate',\n      '@return the generated predicate',\n      '@return the resulting predicate',\n      '@return the predicate object'\n    ]\n  },\n  {\n    'tag': '@param <T> the type that the predicate queries',\n    'alternatives': [\n      '@param <T> the type that the predicate queries',\n      '@param <T> the queried type for the predicate',\n      '@param <T> the type on which the predicate queries',\n      '@param <T> the type for which the predicate queries',\n      '@param <T> the type being queried by the predicate'\n    ]\n  },\n  {\n    'tag': '@param object the object to compare to',\n    'alternatives': [\n      '@param object to be compared',\n      '@param object to compare against',\n      '@param object to compare to',\n      '@param object for comparison',\n      '@param object being compared'\n    ]\n  },\n  {\n    'tag': '@param comparator the comparator to use for comparison',\n    'alternatives': [\n      '@param comparator for comparing',\n      '@param comparator for comparison',\n      '@param comparator to be used for comparison',\n      '@param comparator to compare with',\n      '@param comparator used in the comparison'\n    ]\n  },\n  {\n    'tag': '@param criterion the criterion to use to evaluate comparison',\n    'alternatives': [\n      '@param criterion for evaluating comparison',\n      '@param criterion to evaluate the comparison',\n      '@param criterion used to evaluate the comparison',\n      '@param criterion to be used for evaluating the comparison',\n      '@param criterion for the comparison evaluation'\n    ]\n  },\n  {\n    'tag': '@return the predicate',\n    'alternatives': [\n      '@return the predicate',\n      '@return the created predicate',\n      '@return the generated predicate',\n      '@return the resulting predicate',\n      '@return the predicate object'\n    ]\n  },\n  {\n    'tag': '@param target the target object to compare to',\n    'alternatives': [\n      '@param target to compare against',\n      '@param target object to compare to',\n      '@param object to compare to (target)',\n      '@param object being compared to (target)',\n      '@param target object for comparison'\n    ]\n  },\n  {\n    'tag': '@return {@code true} if the comparison succeeds according to the selected criterion',\n    'alternatives': [\n      '@return {@code true} if the comparison is successful based on the selected criterion',\n      '@return {@code true} if the comparison meets the selected criterion',\n      '@return {@code true} if the comparison satisfies the chosen criterion',\n      '@return {@code true} if the comparison fulfills the given criterion',\n      '@return {@code true} if the comparison holds for the specified criterion'\n    ]\n  },\n  {\n    'tag': '@throws IllegalStateException if the criterion is invalid (really not possible)',\n    'alternatives': [\n      '@throws IllegalStateException if the criterion is invalid (which is highly unlikely)',\n      '@throws IllegalStateException if the criterion is somehow invalid (which should never happen)',\n      '@throws IllegalStateException if the criterion is considered invalid (although highly unlikely)',\n      '@throws IllegalStateException if the criterion is deemed invalid (but this scenario should never occur)',\n      '@throws IllegalStateException if the criterion is found to be invalid (although this is highly unlikely)'\n    ]\n  },\n  {\n    'tag': '@param object the object to compare to',\n    'alternatives': [\n      '@param object to be compared',\n      '@param object to compare against',\n      '@param object to compare to',\n      '@param object for comparison',\n      '@param object being compared'\n    ]\n  },\n  {\n    'tag': '@param comparator the comparator to use for comparison',\n    'alternatives': [\n      '@param comparator for comparing',\n      '@param comparator for comparison',\n      '@param comparator to be used for comparison',\n      '@param comparator to compare with',\n      '@param comparator used in the comparison'\n    ]\n  },\n  {\n    'tag': '@param criterion the criterion to use to evaluate comparison',\n    'alternatives': [\n      '@param criterion for evaluating comparison',\n      '@param criterion to evaluate the comparison',\n      '@param criterion used to evaluate the comparison',\n      '@param criterion to be used for evaluating the comparison',\n      '@param criterion for the comparison evaluation'\n    ]\n  },\n  {\n    'tag': '@param input the input to execute on',\n    'alternatives': [\n      '@param input to perform the execution on',\n      '@param input for the execution',\n      '@param input to be executed upon',\n      '@param input for executing',\n      '@param input on which the execution is performed'\n    ]\n  },\n  {\n    'tag': '@throws FunctorException (runtime) if the closure execution resulted in a\\n            checked exception.',\n    'alternatives': [\n      '@throws FunctorException (runtime) if the closure execution led to a\\n            checked exception.',\n      '@throws FunctorException (runtime) if the closure execution caused a\\n            checked exception.',\n      '@throws FunctorException (runtime) if the closure execution produced a\\n            checked exception.',\n      '@throws FunctorException (runtime) if the closure execution triggered a\\n            checked exception.',\n      '@throws FunctorException (runtime) if the closure execution resulted in a\\n            checked exception occurring.'\n    ]\n  },\n  {\n    'tag': '@param input the input to execute on',\n    'alternatives': [\n      '@param input to perform the execution on',\n      '@param input for the execution',\n      '@param input to be executed upon',\n      '@param input for executing',\n      '@param input on which the execution is performed'\n    ]\n  },\n  {\n    'tag': '@throws Throwable if the closure execution resulted in a checked\\n            exception.',\n    'alternatives': [\n      '@throws Throwable if the closure execution led to a checked\\n            exception.',\n      '@throws Throwable if the closure execution caused a checked\\n            exception.',\n      '@throws Throwable if the closure execution produced a checked\\n            exception.',\n      '@throws Throwable if the closure execution triggered a checked\\n            exception.',\n      '@throws Throwable if the closure execution resulted in a checked\\n            exception occurring.'\n    ]\n  },\n  {\n    'tag': '@param <T> the type that the predicate queries',\n    'alternatives': [\n      '@param <T> the type that the predicate queries',\n      '@param <T> the queried type for the predicate',\n      '@param <T> the type on which the predicate queries',\n      '@param <T> the type for which the predicate queries',\n      '@param <T> the type being queried by the predicate'\n    ]\n  },\n  {\n    'tag': '@return the <code>all</code> predicate',\n    'alternatives': [\n      '@return the predicate that checks for <code>all</code>',\n      '@return the predicate that evaluates <code>all</code>',\n      '@return the predicate representing <code>all</code>',\n      '@return the predicate for <code>all</code>',\n      '@return the <code>all</code> outcome predicate'\n    ]\n  },\n  {\n    'tag': '@param <T> the type that the predicate queries',\n    'alternatives': [\n      '@param <T> the type that the predicate queries',\n      '@param <T> the queried type for the predicate',\n      '@param <T> the type on which the predicate queries',\n      '@param <T> the type for which the predicate queries',\n      '@param <T> the type being queried by the predicate'\n    ]\n  },\n  {\n    'tag': '@return the <code>all</code> predicate',\n    'alternatives': [\n      '@return the predicate that checks for <code>all</code>',\n      '@return the predicate that evaluates <code>all</code>',\n      '@return the predicate representing <code>all</code>',\n      '@return the predicate for <code>all</code>',\n      '@return the <code>all</code> outcome predicate'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if any predicate in the array is null',\n    'alternatives': [\n      '@throws NullPointerException if any predicate in the array is null',\n      '@throws NullPointerException if any predicate within the array is null',\n      '@throws NullPointerException if any element of the array is null',\n      '@throws NullPointerException if any element in the array is null',\n      '@throws NullPointerException if any predicate contained in the array is null'\n    ]\n  }\n]"