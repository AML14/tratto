"output=[\n  {\n    'tag': '@param <O> the output type',\n    'alternatives': [\n      '@param <O> the type of output',\n      '@param <O> the type of result',\n      '@param <O> the type of the output',\n      '@param <O> the result type',\n      '@param <O> the type of the returned output',\n    ]\n  },\n  {\n    'tag': '@param methodName the name of the method',\n    'alternatives': [\n      '@param methodName method name',\n      '@param methodName the method name',\n      '@param methodName name of the method',\n      '@param methodName the name given to the method',\n      '@param methodName the name assigned to the method',\n    ]\n  },\n  {\n    'tag': '@param paramTypes the parameter types',\n    'alternatives': [\n      '@param paramTypes types of the parameters',\n      '@param paramTypes parameter types',\n      '@param paramTypes the types of the parameters',\n      '@param paramTypes types of input parameters',\n      '@param paramTypes types of the input parameters',\n    ]\n  },\n  {\n    'tag': '@param args the arguments',\n    'alternatives': [\n      '@param args input arguments',\n      '@param args the input values',\n      '@param args the arguments provided',\n      '@param args arguments passed',\n      '@param args arguments used',\n    ]\n  },\n  {\n    'tag': '@return the transformer',\n    'alternatives': [\n      '@return the converter',\n      '@return the mapper',\n      '@return the transformer function',\n      '@return the transformation result',\n      '@return the result of the transformation',\n    ]\n  },\n  {\n    'tag': \"@throws IllegalArgumentException if the paramTypes and args don't match\",\n    'alternatives': [\n      \"@throws IllegalArgumentException if the types of paramTypes and args do not match\",\n      \"@throws IllegalArgumentException if the paramTypes and args are not compatible\",\n      \"@throws IllegalArgumentException if there is a mismatch between paramTypes and args\",\n      \"@throws IllegalArgumentException if the types of paramTypes and args do not correspond\",\n      \"@throws IllegalArgumentException if paramTypes and args do not align\",\n    ]\n  },\n  {\n    'tag': '@param <T> the input type',\n    'alternatives': [\n      '@param <T> the type of input',\n      '@param <T> the type of data input',\n      '@param <T> the type of the input data',\n      '@param <T> the input data type',\n      '@param <T> the type of the incoming data',\n    ]\n  },\n  {\n    'tag': '@return the transformer',\n    'alternatives': [\n      '@return the converter',\n      '@return the mapper',\n      '@return the transformer function',\n      '@return the transformation result',\n      '@return the result of the transformation',\n    ]\n  },\n  {\n    'tag': '@param <T> the type that the predicate queries',\n    'alternatives': [\n      '@param <T> the queried type for the predicate',\n      '@param <T> the type that is checked by the predicate',\n      '@param <T> the type that the predicate examines',\n      '@param <T> the type on which the predicate operates',\n      '@param <T> the type to be evaluated by the predicate',\n    ]\n  },\n  {\n    'tag': '@return the predicate',\n    'alternatives': [\n      '@return the condition',\n      '@return the boolean condition',\n      '@return the logical expression',\n      '@return the predicate function',\n      '@return the result of the predicate',\n    ]\n  },\n  {\n    'tag': '@param <T> the type that the predicate queries',\n    'alternatives': [\n      '@param <T> the queried type for the predicate',\n      '@param <T> the type that is checked by the predicate',\n      '@param <T> the type that the predicate examines',\n      '@param <T> the type on which the predicate operates',\n      '@param <T> the type to be evaluated by the predicate',\n    ]\n  },\n  {\n    'tag': '@return the predicate',\n    'alternatives': [\n      '@return the condition',\n      '@return the boolean condition',\n      '@return the logical expression',\n      '@return the predicate function',\n      '@return the result of the predicate',\n    ]\n  },\n  {\n    'tag': '@param <T> the type that the predicate queries',\n    'alternatives': [\n      '@param <T> the queried type for the predicate',\n      '@param <T> the type that is checked by the predicate',\n      '@param <T> the type that the predicate examines',\n      '@param <T> the type on which the predicate operates',\n      '@param <T> the type to be evaluated by the predicate',\n    ]\n  },\n  {\n    'tag': '@return the predicate',\n    'alternatives': [\n      '@return the condition',\n      '@return the boolean condition',\n      '@return the logical expression',\n      '@return the predicate function',\n      '@return the result of the predicate',\n    ]\n  },\n  {\n    'tag': '@param <T> the type that the predicate queries',\n    'alternatives': [\n      '@param <T> the queried type for the predicate',\n      '@param <T> the type that is checked by the predicate',\n      '@param <T> the type that the predicate examines',\n      '@param <T> the type on which the predicate operates',\n      '@param <T> the type to be evaluated by the predicate',\n    ]\n  },\n  {\n    'tag': '@return the predicate',\n    'alternatives': [\n      '@return the condition',\n      '@return the boolean condition',\n      '@return the logical expression',\n      '@return the predicate function',\n      '@return the result of the predicate',\n    ]\n  },\n  {\n    'tag': '@param <T> the type that the predicate queries',\n    'alternatives': [\n      '@param <T> the queried type for the predicate',\n      '@param <T> the type that is checked by the predicate',\n      '@param <T> the type that the predicate examines',\n      '@param <T> the type on which the predicate operates',\n      '@param <T> the type to be evaluated by the predicate',\n    ]\n  },\n  {\n    'tag': '@return the predicate',\n    'alternatives': [\n      '@return the condition',\n      '@return the boolean condition',\n      '@return the logical expression',\n      '@return the predicate function',\n      '@return the result of the predicate',\n    ]\n  },\n  {\n    'tag': '@param <T> the type that the predicate queries',\n    'alternatives': [\n      '@param <T> the queried type for the predicate',\n      '@param <T> the type that is checked by the predicate',\n      '@param <T> the type that the predicate examines',\n      '@param <T> the type on which the predicate operates',\n      '@param <T> the type to be evaluated by the predicate',\n    ]\n  },\n  {\n    'tag': '@param value the value to compare against',\n    'alternatives': [\n      '@param value the compared value',\n      '@param value the value used for comparison',\n      '@param value the reference value for comparison',\n      '@param value the value to be compared',\n      '@param value the value against which to compare',\n    ]\n  },\n  {\n    'tag': '@return the predicate',\n    'alternatives': [\n      '@return the condition',\n      '@return the boolean condition',\n      '@return the logical expression',\n      '@return the predicate function',\n      '@return the result of the predicate',\n    ]\n  },\n  {\n    'tag': '@param <T> the type that the predicate queries',\n    'alternatives': [\n      '@param <T> the queried type for the predicate',\n      '@param <T> the type that is checked by the predicate',\n      '@param <T> the type that the predicate examines',\n      '@param <T> the type on which the predicate operates',\n      '@param <T> the type to be evaluated by the predicate',\n    ]\n  },\n  {\n    'tag': '@param value the value to compare against',\n    'alternatives': [\n      '@param value the compared value',\n      '@param value the value used for comparison',\n      '@param value the reference value for comparison',\n      '@param value the value to be compared',\n      '@param value the value against which to compare',\n    ]\n  },\n  {\n    'tag': '@return the predicate',\n    'alternatives': [\n      '@return the condition',\n      '@return the boolean condition',\n      '@return the logical expression',\n      '@return the predicate function',\n      '@return the result of the predicate',\n    ]\n  },\n  {\n    'tag': '@return the predicate',\n    'alternatives': [\n      '@return the condition',\n      '@return the boolean condition',\n      '@return the logical expression',\n      '@return the predicate function',\n      '@return the result of the predicate',\n    ]\n  }\n]"