"output = [\n  {\n    'tag': '@throws org.apache.commons.math3.exception.NonMonotonicSequenceException if the lower bound is greater than, or equal to the upper bound',\n    'alternatives': [\n      '@throws org.apache.commons.math3.exception.NonMonotonicSequenceException if the upper bound is less than, or equal to the lower bound',\n      '@throws org.apache.commons.math3.exception.NonMonotonicSequenceException if the upper bound is less than, or equal to the lower boundary',\n      '@throws org.apache.commons.math3.exception.NonMonotonicSequenceException if the upper bound is smaller than, or equal to the lower bound',\n      '@throws org.apache.commons.math3.exception.NonMonotonicSequenceException if the upper bound is smaller than, or equal to the lower boundary',\n      '@throws org.apache.commons.math3.exception.NonMonotonicSequenceException if the upper bound is not greater than the lower bound'\n    ]\n  },\n  {\n    'tag': '@throws org.apache.commons.math3.exception.NotStrictlyPositiveException if the number of sample points is negative',\n    'alternatives': [\n      '@throws org.apache.commons.math3.exception.NotStrictlyPositiveException if the sample points number is negative',\n      '@throws org.apache.commons.math3.exception.NotStrictlyPositiveException if the number of points sampled is negative',\n      '@throws org.apache.commons.math3.exception.NotStrictlyPositiveException if the number of sample points is less than or equal to zero',\n      '@throws org.apache.commons.math3.exception.NotStrictlyPositiveException if the number of sample points is less than zero',\n      '@throws org.apache.commons.math3.exception.NotStrictlyPositiveException if the number of sampled points is negative'\n    ]\n  },\n  {\n    'tag': '@throws MathIllegalArgumentException if the number of sample points is not a power of two',\n    'alternatives': [\n      '@throws MathIllegalArgumentException if the sample points number is not a power of two',\n      '@throws MathIllegalArgumentException if the number of points sampled is not a power of two',\n      '@throws MathIllegalArgumentException if the number of sample points is not a power of 2',\n      '@throws MathIllegalArgumentException if the number of sample points is not an exact power of two',\n      '@throws MathIllegalArgumentException if the number of sampled points is not a power of two'\n    ]\n  },\n  {\n    'tag': '@param f the real data array to be transformed',\n    'alternatives': [\n      '@param f the array of actual data to be transformed',\n      '@param f the array of real data to be converted',\n      '@param f the array containing the true data for transformation',\n      '@param f the array of data that will be changed',\n      '@param f the real numbers array to be transformed'\n    ]\n  },\n  {\n    'tag': '@return the real transformed array',\n    'alternatives': [\n      '@return the transformed array with real values',\n      '@return the array after transformation with real numbers',\n      '@return the resulting array after transforming to real values',\n      '@return the array of real values after the transformation',\n      '@return the array with real values after the convertion'\n    ]\n  },\n  {\n    'tag': '@throws MathIllegalArgumentException if the length of the data array is\\n  not a power of two, or the first element of the data array is not zero',\n    'alternatives': [\n      '@throws MathIllegalArgumentException if the length of the data array is not a power of two, or if the first element of the data array is not zero',\n      '@throws MathIllegalArgumentException if the data array size is not a power of two, or the first element of the data array is not zero',\n      '@throws MathIllegalArgumentException if the first value of the data array is not zero, or if the length of the data array is not a power of two',\n      '@throws MathIllegalArgumentException if the data array length is not a power of two, or if the first element of the data array is not zero',\n      '@throws MathIllegalArgumentException if the length of the data array is not a power of two or the first element of the data array is not zero'\n    ]\n  },\n  {\n    'tag': '@param normalization the type of normalization to be applied to the transformed data',\n    'alternatives': [\n      '@param normalization the normalization type to be applied to the transformed data',\n      '@param normalization the type of normalization to be used on the transformed data',\n      '@param normalization the type of normalization to apply to the transformed data',\n      '@param normalization the type of normalization to be performed on the transformed data',\n      '@param normalization the normalization method to be applied to the transformed data'\n    ]\n  },\n  {\n    'tag': '@param a the first array to be shuffled',\n    'alternatives': [\n      '@param a the initial array to be rearranged',\n      '@param a the first array to be reorganized',\n      '@param a the first array to shuffle',\n      '@param a the array to be rearranged',\n      '@param a the array that needs shuffling'\n    ]\n  },\n  {\n    'tag': '@param b the second array to be shuffled',\n    'alternatives': [\n      '@param b the secondary array to be rearranged',\n      '@param b the second array to be reorganized',\n      '@param b the second array to shuffle',\n      '@param b the array to be rearranged',\n      '@param b the array that needs shuffling'\n    ]\n  },\n  {\n    'tag': '@param dataRI the unscaled transformed data',\n    'alternatives': [\n      '@param dataRI the inverse scaled transformed data',\n      '@param dataRI the unnormalized transformed data',\n      '@param dataRI the transformed data that is not scaled',\n      '@param dataRI the nonscaled transformed data',\n      '@param dataRI the transformed data without scaling'\n    ]\n  },\n  {\n    'tag': '@param normalization the normalization to be applied',\n    'alternatives': [\n      '@param normalization the applied normalization',\n      '@param normalization the method of normalization to be applied',\n      '@param normalization the desired normalization',\n      '@param normalization the type of normalization to be used',\n      '@param normalization the used normalization'\n    ]\n  },\n  {\n    'tag': '@param type the type of transform (forward, inverse) which resulted in the specified data',\n    'alternatives': [\n      '@param type the transform type (forward, inverse) that led to the specified data',\n      '@param type the transform (forward, inverse) that resulted in the specified data',\n      '@param type the resulted transform type (forward, inverse) of the specified data',\n      '@param type the type of transformation (forward, inverse) that gave rise to the specified data',\n      '@param type the transformation type (forward, inverse) that produced the specified data'\n    ]\n  },\n  {\n    'tag': '@param dataRI the two dimensional array of real and imaginary parts of the data',\n    'alternatives': [\n      '@param dataRI the two-dimensional array of real and imaginary components of the data',\n      '@param dataRI the real and imaginary parts array of the two-dimensional data',\n      '@param dataRI the array consisting of real and imaginary parts of the data',\n      '@param dataRI the array that contains real and imaginary elements of the data',\n      '@param dataRI the array of real and imaginary values of the data'\n    ]\n  },\n  {\n    'tag': '@param normalization the normalization to be applied to the transformed data',\n    'alternatives': [\n      '@param normalization the applied normalization to the transformed data',\n      '@param normalization the type of normalization to be performed on the transformed data',\n      '@param normalization the normalization method to apply to the transformed data',\n      '@param normalization the desired normalization for the transformed data',\n      '@param normalization the normalization technique to be used on the transformed data'\n    ]\n  },\n  {\n    'tag': '@param type the type of transform (forward, inverse) to be performed',\n    'alternatives': [\n      '@param type the transform type (forward, inverse) to execute',\n      '@param type the transform (forward, inverse) to be carried out',\n      '@param type the performable transform type (forward, inverse)',\n      '@param type the type of transformation (forward, inverse) to be applied',\n      '@param type the transformation type (forward, inverse) to be performed'\n    ]\n  },\n  {\n    'tag': '@throws DimensionMismatchException if the number of rows of the specified\\n  array is not two, or the array is not rectangular',\n    'alternatives': [\n      '@throws DimensionMismatchException if the array does not have two rows, or the array is not a rectangle',\n      '@throws DimensionMismatchException if the specified array does not contain two rows, or the array is not a rectangle',\n      '@throws DimensionMismatchException if the number of rows in the specified array is not two, or the array is not rectangular',\n      '@throws DimensionMismatchException if the array is not a rectangle, or the number of rows is not two',\n      '@throws DimensionMismatchException if the specified array is not rectangular, or the number of rows is not two'\n    ]\n  },\n  {\n    'tag': '@throws MathIllegalArgumentException if the number of data points is not\\n  a power of two',\n    'alternatives': [\n      '@throws MathIllegalArgumentException if the data points number is not a power of two',\n      '@throws MathIllegalArgumentException if the number of points in the data is not a power of two',\n      '@throws MathIllegalArgumentException if the number of data points is not a power of 2',\n      '@throws MathIllegalArgumentException if the number of data points is not an exact power of two',\n      '@throws MathIllegalArgumentException if the number of points in the data is not a power of two'\n    ]\n  },\n  {\n    'tag': '@param f the real data array to be transformed',\n    'alternatives': [\n      '@param f the array of actual data to be transformed',\n      '@param f the array of real data to be converted',\n      '@param f the array containing the true data for transformation',\n      '@param f the array of data that will be changed',\n      '@param f the real numbers array to be transformed'\n    ]\n  },\n  {\n    'tag': '@param type the type of transform (forward, inverse) to be performed',\n    'alternatives': [\n      '@param type the transform type (forward, inverse) to execute',\n      '@param type the transform (forward, inverse) to be carried out',\n      '@param type the performable transform type (forward, inverse)',\n      '@param type the type of transformation (forward, inverse) to be applied',\n      '@param type the transformation type (forward, inverse) to be performed'\n    ]\n  },\n  {\n    'tag': '@return the complex transformed array',\n    'alternatives': [\n      '@return the transformed array with complex numbers',\n      '@return the array after transformation with complex values',\n      '@return the resulting array after transforming to complex numbers',\n      '@return the array of complex values after the transformation',\n      '@return the array with complex values after the convertion'\n    ]\n  },\n  {\n    'tag': '@throws MathIllegalArgumentException if the length of the data array is not a power of two',\n    'alternatives': [\n      '@throws MathIllegalArgumentException if the data array size is not a power of two',\n      '@throws MathIllegalArgumentException if the length of the data array is not an exact power of two',\n      '@throws MathIllegalArgumentException if the length of the data array is not a power of 2',\n      '@throws MathIllegalArgumentException if the length of the data array is not a power of two, or if it is less than or equal to zero',\n      '@throws MathIllegalArgumentException if the length of the data array is not a power of two or if it is less than or equal to zero'\n    ]\n  },\n  {\n    'tag': '@param f the function to be sampled and transformed',\n    'alternatives': [\n      '@param f the function to be sampled and converted',\n      '@param f the sampled and transformed function',\n      '@param f the function that will be sampled and changed',\n      '@param f the function to sample and transform',\n      '@param f the function to be transformed and sampled'\n    ]\n  },\n  {\n    'tag': '@param min the (inclusive) lower bound for the interval',\n    'alternatives': [\n      '@param min the lower boundary (inclusive) for the interval',\n      '@param min the lower bound (inclusive) of the interval',\n      '@param min the inclusive lower bound for the interval',\n      '@param min the boundary included at the lower bound for the interval',\n      '@param min the interval lower boundary (including it)'\n    ]\n  },\n  {\n    'tag': '@param max the (exclusive) upper bound for the interval',\n    'alternatives': [\n      '@param max the upper boundary (exclusive) for the interval',\n      '@param max the upper bound (exclusive) of the interval',\n      '@param max the exclusive upper bound for the interval',\n      '@param max the boundary excluded at the upper bound for the interval',\n      '@param max the interval upper boundary (excluding it)'\n    ]\n  },\n  {\n    'tag': '@param n the number of sample points',\n    'alternatives': [\n      '@param n the count of sample points',\n      '@param n the number of points sampled',\n      '@param n the amount of sample points',\n      '@param n the quantity of sample points',\n      '@param n the total number of sampled points'\n    ]\n  }\n]"