"output = [\r\n  {\r\n    \"tag\": \"@param right the map to treat as the \\\"right\\\" map for purposes of comparison\",\r\n    \"alternatives\": [\r\n      \"@param right the map to consider as the \\\"right\\\" map for comparison purposes\",\r\n      \"@param right the map to be treated as the \\\"right\\\" map when comparing\",\r\n      \"@param right the map to be regarded as the \\\"right\\\" map for comparison\"\r\n    ]\r\n  },\r\n  {\r\n    \"tag\": \"@param valueEquivalence the equivalence relationship to use to compare\\n   values\",\r\n    \"alternatives\": [\r\n      \"@param valueEquivalence the equivalence relation to utilize for comparing values\",\r\n      \"@param valueEquivalence the equality relationship to apply for comparing values\",\r\n      \"@param valueEquivalence the relation of equivalence to be used for comparing values\"\r\n    ]\r\n  },\r\n  {\r\n    \"tag\": \"@return the difference between the two maps\",\r\n    \"alternatives\": [\r\n      \"@return the disparity between the two maps\",\r\n      \"@return the dissimilarity between the two maps\",\r\n      \"@return the variance between the two maps\"\r\n    ]\r\n  },\r\n  {\r\n    \"tag\": \"@param left the map to treat as the \\\"left\\\" map for purposes of comparison\",\r\n    \"alternatives\": [\r\n      \"@param left the map to consider as the \\\"left\\\" map for comparison purposes\",\r\n      \"@param left the map to be treated as the \\\"left\\\" map when comparing\",\r\n      \"@param left the map to be regarded as the \\\"left\\\" map for comparison\"\r\n    ]\r\n  },\r\n  {\r\n    \"tag\": \"@param right the map to treat as the \\\"right\\\" map for purposes of comparison\",\r\n    \"alternatives\": [\r\n      \"@param right the map to consider as the \\\"right\\\" map for comparison purposes\",\r\n      \"@param right the map to be treated as the \\\"right\\\" map when comparing\",\r\n      \"@param right the map to be regarded as the \\\"right\\\" map for comparison\"\r\n    ]\r\n  },\r\n  {\r\n    \"tag\": \"@return the difference between the two maps\",\r\n    \"alternatives\": [\r\n      \"@return the disparity between the two maps\",\r\n      \"@return the dissimilarity between the two maps\",\r\n      \"@return the variance between the two maps\"\r\n    ]\r\n  },\r\n  {\r\n    \"tag\": \"@param values the values to use when constructing the {@code Map}\",\r\n    \"alternatives\": [\r\n      \"@param values the values to utilize during the construction of the {@code Map}\",\r\n      \"@param values the values to be used in the creation of the {@code Map}\",\r\n      \"@param values the values to include while building the {@code Map}\"\r\n    ]\r\n  },\r\n  {\r\n    \"tag\": \"@param keyFunction the function used to produce the key for each value\",\r\n    \"alternatives\": [\r\n      \"@param keyFunction the function responsible for generating the key for each value\",\r\n      \"@param keyFunction the function that generates the key for each value\",\r\n      \"@param keyFunction the function employed to generate the key for each value\"\r\n    ]\r\n  },\r\n  {\r\n    \"tag\": \"@return a map mapping the result of evaluating the function {@code\\n        keyFunction} on each value in the input collection to that value\",\r\n    \"alternatives\": [\r\n      \"@return a map that associates the outcome of evaluating the function {@code\\n        keyFunction} on each value in the input collection with that value\",\r\n      \"@return a map that maps the result of evaluating the function {@code\\n        keyFunction} on each value in the input collection to the respective value\",\r\n      \"@return a map that relates the outcome of evaluating the function {@code\\n        keyFunction} on each value in the input collection to that corresponding value\"\r\n    ]\r\n  },\r\n  {\r\n    \"tag\": \"@throws IllegalArgumentException if {@code keyFunction} produces the same\\n        key for more than one value in the input collection\",\r\n    \"alternatives\": [\r\n      \"@throws IllegalArgumentException when {@code keyFunction} generates the same\\n        key for multiple values in the input collection\",\r\n      \"@throws IllegalArgumentException if {@code keyFunction} generates identical\\n        keys for more than one value in the input collection\",\r\n      \"@throws IllegalArgumentException if {@code keyFunction} produces duplicate\\n        keys for multiple values in the input collection\"\r\n    ]\r\n  },\r\n  {\r\n    \"tag\": \"@param values the values to use when constructing the {@code Map}\",\r\n    \"alternatives\": [\r\n      \"@param values the values to utilize during the construction of the {@code Map}\",\r\n      \"@param values the values to be used in the creation of the {@code Map}\",\r\n      \"@param values the values to include while building the {@code Map}\"\r\n    ]\r\n  },\r\n  {\r\n    \"tag\": \"@param keyFunction the function used to produce the key for each value\",\r\n    \"alternatives\": [\r\n      \"@param keyFunction the function responsible for generating the key for each value\",\r\n      \"@param keyFunction the function that generates the key for each value\",\r\n      \"@param keyFunction the function employed to generate the key for each value\"\r\n    ]\r\n  },\r\n  {\r\n    \"tag\": \"@return a map mapping the result of evaluating the function {@code\\n        keyFunction} on each value in the input collection to that value\",\r\n    \"alternatives\": [\r\n      \"@return a map that associates the outcome of evaluating the function {@code\\n        keyFunction} on each value in the input collection with that value\",\r\n      \"@return a map that maps the result of evaluating the function {@code\\n        keyFunction} on each value in the input collection to the respective value\",\r\n      \"@return a map that relates the outcome of evaluating the function {@code\\n        keyFunction} on each value in the input collection to that corresponding value\"\r\n    ]\r\n  },\r\n  {\r\n    \"tag\": \"@throws IllegalArgumentException if {@code keyFunction} produces the same\\n        key for more than one value in the input collection\",\r\n    \"alternatives\": [\r\n      \"@throws IllegalArgumentException when {@code keyFunction} generates the same\\n        key for multiple values in the input collection\",\r\n      \"@throws IllegalArgumentException if {@code keyFunction} generates identical\\n        keys for more than one value in the input collection\",\r\n      \"@throws IllegalArgumentException if {@code keyFunction} produces duplicate\\n        keys for multiple values in the input collection\"\r\n    ]\r\n  },\r\n  {\r\n    \"tag\": \"@param properties a {@code Properties} object to be converted\",\r\n    \"alternatives\": [\r\n      \"@param properties a {@code Properties} object that needs to be converted\",\r\n      \"@param properties an instance of {@code Properties} that requires conversion\",\r\n      \"@param properties a {@code Properties} object to be transformed\"\r\n    ]\r\n  },\r\n  {\r\n    \"tag\": \"@return an immutable map containing all the entries in {@code properties}\",\r\n    \"alternatives\": [\r\n      \"@return a map that is immutable and contains all the entries in {@code properties}\",\r\n      \"@return an unchangeable map that includes all the entries in {@code properties}\",\r\n      \"@return a map that cannot be altered and contains all the entries in {@code properties}\"\r\n    ]\r\n  },\r\n  {\r\n    \"tag\": \"@throws ClassCastException if any key in {@code Properties} is not a {@code\\n        String}\",\r\n    \"alternatives\": [\r\n      \"@throws ClassCastException when any key in {@code Properties} is not of type {@code\\n        String}\",\r\n      \"@throws ClassCastException if any key in {@code Properties} is not an instance of {@code\\n        String}\",\r\n      \"@throws ClassCastException if any key in {@code Properties} is not in the {@code\\n        String} format\"\r\n    ]\r\n  },\r\n  {\r\n    \"tag\": \"@throws NullPointerException if any key or value in {@code Properties} is\\n        null\",\r\n    \"alternatives\": [\r\n      \"@throws NullPointerException when any key or value in {@code Properties} is\\n        null\",\r\n      \"@throws NullPointerException if any key or value in {@code Properties} is\\n        missing\",\r\n      \"@throws NullPointerException if any key or value in {@code Properties} is\\n        undefined\"\r\n    ]\r\n  },\r\n  {\r\n    \"tag\": \"@param key the key to be associated with the returned entry\",\r\n    \"alternatives\": [\r\n      \"@param key the key that will be linked to the returned entry\",\r\n      \"@param key the key that is going to be associated with the returned entry\",\r\n      \"@param key the key to be connected with the returned entry\"\r\n    ]\r\n  },\r\n  {\r\n    \"tag\": \"@param value the value to be associated with the returned entry\",\r\n    \"alternatives\": [\r\n      \"@param value the value that will be linked to the returned entry\",\r\n      \"@param value the value that is going to be associated with the returned entry\",\r\n      \"@param value the value to be connected with the returned entry\"\r\n    ]\r\n  },\r\n  {\r\n    \"tag\": \"@param entrySet the entries for which to return an unmodifiable view\",\r\n    \"alternatives\": [\r\n      \"@param entrySet the set of entries for which an unmodifiable view should be returned\",\r\n      \"@param entrySet the collection of entries for which to provide an unmodifiable view\",\r\n      \"@param entrySet the entries that will have an unmodifiable view returned for\"\r\n    ]\r\n  },\r\n  {\r\n    \"tag\": \"@return an unmodifiable view of the entries\",\r\n    \"alternatives\": [\r\n      \"@return a view of the entries that cannot be modified\",\r\n      \"@return a read-only view of the entries\",\r\n      \"@return a view of the entries that is not modifiable\"\r\n    ]\r\n  },\r\n  {\r\n    \"tag\": \"@param entry the entry for which to return an unmodifiable view\",\r\n    \"alternatives\": [\r\n      \"@param entry the entry for which an unmodifiable view should be returned\",\r\n      \"@param entry the specific entry for which to provide an unmodifiable view\",\r\n      \"@param entry the entry that will have an unmodifiable view returned for\"\r\n    ]\r\n  },\r\n  {\r\n    \"tag\": \"@return an unmodifiable view of the entry\",\r\n    \"alternatives\": [\r\n      \"@return a view of the entry that cannot be modified\",\r\n      \"@return a read-only view of the entry\",\r\n      \"@return a view of the entry that is not modifiable\"\r\n    ]\r\n  },\r\n  {\r\n    \"tag\": \"@param bimap the bimap to be wrapped in a synchronized view\",\r\n    \"alternatives\": [\r\n      \"@param bimap the bimap to be enclosed in a synchronized view\",\r\n      \"@param bimap the bimap to be encapsulated in a synchronized view\",\r\n      \"@param bimap the bimap to be contained within a synchronized view\"\r\n    ]\r\n  }\r\n]"