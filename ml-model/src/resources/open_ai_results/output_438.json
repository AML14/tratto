"output = [\n  {\n    'tag': '@param in the input stream',\n    'alternatives': [\n      '@param in the input data stream',\n      '@param in the stream of input',\n      '@param in the input source',\n      '@param in the stream of data',\n      '@param in the input reader'\n    ]\n  },\n  {\n    'tag': '@throws IOException',\n    'alternatives': [\n      '@throws IOException exception',\n      '@throws IOException error',\n      '@throws IOException issue',\n      '@throws IOException problem',\n      '@throws IOException trouble'\n    ]\n  },\n  {\n    'tag': '@throws ClassNotFoundException',\n    'alternatives': [\n      '@throws ClassNotFoundException exception',\n      '@throws ClassNotFoundException error',\n      '@throws ClassNotFoundException issue',\n      '@throws ClassNotFoundException problem',\n      '@throws ClassNotFoundException trouble'\n    ]\n  },\n  {\n    'tag': '@param map the map to decorate, must not be null',\n    'alternatives': [\n      '@param map the decorated map, must not be null',\n      '@param map the map to wrap, must not be null',\n      '@param map the decorative map, must not be null',\n      '@param map the mapped map, must not be null',\n      '@param map the decorating map, must not be null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if map is null',\n    'alternatives': [\n      '@throws NullPointerException if the map is null',\n      '@throws NullPointerException in case the map is null',\n      '@throws NullPointerException when the map is null',\n      '@throws NullPointerException if the provided map is null',\n      '@throws NullPointerException if map parameter is null'\n    ]\n  },\n  {\n    'tag': '@return Map.Entry<K, V>',\n    'alternatives': [\n      '@return the entry of type Map.Entry<K, V>',\n      '@return the specified map entry of type Map.Entry<K, V>',\n      '@return the Map.Entry<K, V> object',\n      '@return the entry object of type Map.Entry<K, V>',\n      '@return the map entry of type Map.Entry<K, V>'\n    ]\n  },\n  {\n    'tag': '@param entrySet the entrySet to adapt',\n    'alternatives': [\n      '@param entrySet the adapted entrySet',\n      '@param entrySet the entrySet to modify',\n      '@param entrySet the entrySet to transform',\n      '@param entrySet the entrySet to convert',\n      '@param entrySet the entrySet to adjust'\n    ]\n  },\n  {\n    'tag': '@param <K> the key type',\n    'alternatives': [\n      '@param <K> the type of the key',\n      '@param <K> the key class',\n      '@param <K> the type representing the key',\n      '@param <K> the class of the key',\n      '@param <K> the key data type'\n    ]\n  },\n  {\n    'tag': '@param <V> the value type',\n    'alternatives': [\n      '@param <V> the type of the value',\n      '@param <V> the value class',\n      '@param <V> the type representing the value',\n      '@param <V> the class of the value',\n      '@param <V> the value data type'\n    ]\n  },\n  {\n    'tag': '@return a new list ordered map',\n    'alternatives': [\n      '@return a new map with ordered list',\n      '@return a newly created map ordered as a list',\n      '@return a list-ordered map',\n      '@return a map that is ordered as a list',\n      '@return a map that maintains the order of a list'\n    ]\n  },\n  {\n    'tag': '@param out the output stream',\n    'alternatives': [\n      '@param out the stream to output',\n      '@param out the stream for output',\n      '@param out the output data stream',\n      '@param out the data stream for output',\n      '@param out the output stream to use'\n    ]\n  },\n  {\n    'tag': '@throws IOException',\n    'alternatives': [\n      '@throws IOException exception',\n      '@throws IOException error',\n      '@throws IOException issue',\n      '@throws IOException problem',\n      '@throws IOException trouble'\n    ]\n  },\n  {\n    'tag': '@param in the input stream',\n    'alternatives': [\n      '@param in the input data stream',\n      '@param in the stream of input',\n      '@param in the input source',\n      '@param in the stream of data',\n      '@param in the input reader'\n    ]\n  },\n  {\n    'tag': '@throws IOException',\n    'alternatives': [\n      '@throws IOException exception',\n      '@throws IOException error',\n      '@throws IOException issue',\n      '@throws IOException problem',\n      '@throws IOException trouble'\n    ]\n  },\n  {\n    'tag': '@throws ClassNotFoundException',\n    'alternatives': [\n      '@throws ClassNotFoundException exception',\n      '@throws ClassNotFoundException error',\n      '@throws ClassNotFoundException issue',\n      '@throws ClassNotFoundException problem',\n      '@throws ClassNotFoundException trouble'\n    ]\n  },\n  {\n    'tag': '@return the first key currently in this map',\n    'alternatives': [\n      '@return the currently first key in this map',\n      '@return the key which is currently at the first position in this map',\n      '@return the key that is currently the first in this map',\n      '@return the first key found in this map',\n      '@return the key that currently occupies the first position in this map'\n    ]\n  },\n  {\n    'tag': '@return the last key currently in this map',\n    'alternatives': [\n      '@return the currently last key in this map',\n      '@return the key which is currently at the last position in this map',\n      '@return the key that is currently the last in this map',\n      '@return the last key found in this map',\n      '@return the key that currently occupies the last position in this map'\n    ]\n  },\n  {\n    'tag': '@param key the key to find previous for',\n    'alternatives': [\n      '@param key the key for which to search the previous',\n      '@param key the key to find the previous of',\n      '@param key the key for which to identify the preceding',\n      '@param key the key that needs to have its precursor determined',\n      '@param key the key that requires the discovery of its previous'\n    ]\n  },\n  {\n    'tag': '@return the next key, null if no match or at start',\n    'alternatives': [\n      '@return the next key, or null if there is no match or if at the beginning',\n      '@return the subsequent key, null if no match or at the start',\n      '@return the next key, null if no match or if at the beginning',\n      '@return the following key, null if no match or at the start',\n      '@return the key that follows, null if no match or at the start'\n    ]\n  },\n  {\n    'tag': '@param key the key to find previous for',\n    'alternatives': [\n      '@param key the key for which to search the previous',\n      '@param key the key to find the previous of',\n      '@param key the key for which to identify the preceding',\n      '@param key the key that needs to have its precursor determined',\n      '@param key the key that requires the discovery of its previous'\n    ]\n  },\n  {\n    'tag': '@return the previous key, null if no match or at start',\n    'alternatives': [\n      '@return the previous key, or null if there is no match or if at the beginning',\n      '@return the preceding key, null if no match or at the start',\n      '@return the previous key, null if no match or if at the beginning',\n      '@return the key that comes before, null if no match or at the start',\n      '@return the key that precedes, null if no match or at the start'\n    ]\n  },\n  {\n    'tag': '@param index the index in the Map to start at.',\n    'alternatives': [\n      '@param index the starting index in the Map.',\n      '@param index the index from which to begin in the Map.',\n      '@param index the index to commence from in the Map.',\n      '@param index the point of origin in the Map.',\n      '@param index the position within the Map to initiate from.'\n    ]\n  },\n  {\n    'tag': '@param map the Map containing the entries to be added.',\n    'alternatives': [\n      '@param map the Map with the entries to be included.',\n      '@param map the Map that holds the entries to add.',\n      '@param map the Map which contains the entries that should be appended.',\n      '@param map the Map having the entries to be inserted.',\n      '@param map the Map that includes the entries to be put.'\n    ]\n  },\n  {\n    'tag': '@throws IndexOutOfBoundsException if the index is out of range [0, size]',\n    'alternatives': [\n      '@throws IndexOutOfBoundsException if the index is outside the valid range [0, size]',\n      '@throws IndexOutOfBoundsException if the index exceeds the permissible range [0, size]',\n      '@throws IndexOutOfBoundsException if the index falls out of the proper range [0, size]',\n      '@throws IndexOutOfBoundsException if the index is beyond the allowed range [0, size]',\n      '@throws IndexOutOfBoundsException if the index is not within the accepted range [0, size]'\n    ]\n  },\n  {\n    'tag': '@return the fully modifiable collection view over the keys',\n    'alternatives': [\n      '@return the collection view over the keys which is fully modifiable',\n      '@return the fully alterable collection view over the keys',\n      '@return the view on the keys that can be modified entirely',\n      '@return the modifiable collection view over the keys',\n      '@return the keys view that can be completely modified'\n    ]\n  }\n]"