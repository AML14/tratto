"output=[\n  {\n    'tag': '@param fileThreshold the number of bytes before the stream should\\n    switch to buffering to a file',\n    'alternatives': [\n      '@param fileThreshold the number of bytes prior to the stream should\\n    switch to file buffering',\n      '@param fileThreshold the number of bytes after which the stream should switch\\n    to buffering to a file',\n      '@param fileThreshold the number of bytes at which point the stream should\\n    switch to buffering to a file'\n    ]\n  },\n  {\n    'tag': '@param fileThreshold the number of bytes before the stream should\\n    switch to buffering to a file',\n    'alternatives': [\n      '@param fileThreshold the number of bytes prior to the stream should\\n    switch to file buffering',\n      '@param fileThreshold the number of bytes after which the stream should switch\\n    to buffering to a file',\n      '@param fileThreshold the number of bytes at which point the stream should\\n    switch to buffering to a file'\n    ]\n  },\n  {\n    'tag': '@param resetOnFinalize if true, the {@link #reset} method will\\n    be called when the {@link ByteSource} returned by {@link\\n    #asByteSource} is finalized',\n    'alternatives': [\n      '@param resetOnFinalize if true, the {@link #reset} method will be invoked\\n    when the {@link ByteSource} returned by {@link\\n    #asByteSource} is finalized',\n      '@param resetOnFinalize if set to true, the {@link #reset} method is invoked\\n    upon finalization of the {@link ByteSource} returned by {@link\\n    #asByteSource}',\n      '@param resetOnFinalize if true, calling the {@link #reset} method is triggered\\n    when the {@link ByteSource} returned by {@link\\n    #asByteSource} gets finalized'\n    ]\n  },\n  {\n    'tag': '@return a {@code String} containing the contents of the line, not\\n    including any line-termination characters, or {@code null} if the\\n    end of the stream has been reached.',\n    'alternatives': [\n      '@return a {@code String} that holds the line contents, excluding any\\n    line-termination characters, or {@code null} if the stream has\\n    reached its end.',\n      '@return a {@code String} that contains the line's contents, without any\\n    line-termination characters, or {@code null} if the stream has\\n    been exhausted.',\n      '@return a {@code String} which has the line's contents, excluding any\\n    line-termination characters, or {@code null} if the stream has\\n    reached the end.'\n    ]\n  },\n  {\n    'tag': '@throws IOException if an I/O error occurs',\n    'alternatives': [\n      '@throws IOException in case of an I/O error',\n      '@throws IOException if any I/O error happens',\n      '@throws IOException if an I/O exception occurs'\n    ]\n  },\n  {\n    'tag': '@throws IOException if an I/O error occurs',\n    'alternatives': [\n      '@throws IOException in case of an I/O error',\n      '@throws IOException if any I/O error happens',\n      '@throws IOException if an I/O exception occurs'\n    ]\n  },\n  {\n    'tag': '@throws IOException if an I/O error occurs',\n    'alternatives': [\n      '@throws IOException in case of an I/O error',\n      '@throws IOException if any I/O error happens',\n      '@throws IOException if an I/O exception occurs'\n    ]\n  },\n  {\n    'tag': '@throws IOException if an I/O error occurs',\n    'alternatives': [\n      '@throws IOException in case of an I/O error',\n      '@throws IOException if any I/O error happens',\n      '@throws IOException if an I/O exception occurs'\n    ]\n  },\n  {\n    'tag': '@throws IOException if an I/O error occurs',\n    'alternatives': [\n      '@throws IOException in case of an I/O error',\n      '@throws IOException if any I/O error happens',\n      '@throws IOException if an I/O exception occurs'\n    ]\n  },\n  {\n    'tag': '@throws IOException if an I/O error occurs',\n    'alternatives': [\n      '@throws IOException in case of an I/O error',\n      '@throws IOException if any I/O error happens',\n      '@throws IOException if an I/O exception occurs'\n    ]\n  },\n  {\n    'tag': '@throws IOException if an I/O error occurs',\n    'alternatives': [\n      '@throws IOException in case of an I/O error',\n      '@throws IOException if any I/O error happens',\n      '@throws IOException if an I/O exception occurs'\n    ]\n  },\n  {\n    'tag': '@throws IOException if an I/O error occurs',\n    'alternatives': [\n      '@throws IOException in case of an I/O error',\n      '@throws IOException if any I/O error happens',\n      '@throws IOException if an I/O exception occurs'\n    ]\n  },\n  {\n    'tag': '@throws IOException if an I/O error occurs',\n    'alternatives': [\n      '@throws IOException in case of an I/O error',\n      '@throws IOException if any I/O error happens',\n      '@throws IOException if an I/O exception occurs'\n    ]\n  },\n  {\n    'tag': '@throws IOException if an I/O error occurs',\n    'alternatives': [\n      '@throws IOException in case of an I/O error',\n      '@throws IOException if any I/O error happens',\n      '@throws IOException if an I/O exception occurs'\n    ]\n  },\n  {\n    'tag': '@param out the stream to delegate to',\n    'alternatives': [\n      '@param out the stream to forward to',\n      '@param out the stream to pass the execution to',\n      '@param out the stream to hand off to'\n    ]\n  },\n  {\n    'tag': '@param buf the byte array containing the data to process',\n    'alternatives': [\n      '@param buf the byte array that holds the data to be processed',\n      '@param buf the byte array which contains the data to be processed',\n      '@param buf the byte array that stores the data to process'\n    ]\n  },\n  {\n    'tag': '@param off the initial offset into the array',\n    'alternatives': [\n      '@param off the starting position in the array',\n      '@param off the initial index in the array',\n      '@param off the initial position within the array'\n    ]\n  },\n  {\n    'tag': '@param len the length of data to be processed',\n    'alternatives': [\n      '@param len the size of the data to process',\n      '@param len the length of the data that needs processing',\n      '@param len the amount of data to be processed'\n    ]\n  },\n  {\n    'tag': '@return true to continue processing, false to stop',\n    'alternatives': [\n      '@return true to keep processing, false to halt',\n      '@return true to proceed with processing, false to terminate',\n      '@return true to continue executing, false to cease'\n    ]\n  },\n  {\n    'tag': '@throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code x}\\n        is not a power of two',\n    'alternatives': [\n      '@throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code x}\\n        is not a binary exponent',\n      '@throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code x}\\n        is not a power of 2',\n      '@throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code x}\\n        is not a binary power'\n    ]\n  },\n  {\n    'tag': '@throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code x}\\n        is not a power of ten',\n    'alternatives': [\n      '@throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code x}\\n        is not a decimal power',\n      '@throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code x}\\n        is not a power of 10',\n      '@throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code x}\\n        is not a power of 10'\n    ]\n  },\n  {\n    'tag': '@throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and\\n        {@code sqrt(x)} is not an integer',\n    'alternatives': [\n      '@throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and\\n        the square root of {@code x} is not an integer',\n      '@throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and\\n        the square root of {@code x} is not an integer value',\n      '@throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and\\n        the square root of {@code x} is not an integer number'\n    ]\n  },\n  {\n    'tag': '@throws ArithmeticException if {@code a + b} overflows in signed {@code long} arithmetic',\n    'alternatives': [\n      '@throws ArithmeticException if signed {@code long} arithmetic overflows on the addition of {@code a} and {@code b}',\n      '@throws ArithmeticException if the sum of {@code a} and {@code b} overflows in signed {@code long} arithmetic',\n      '@throws ArithmeticException if the addition of {@code a} and {@code b} causes an overflow in signed {@code long} arithmetic'\n    ]\n  },\n  {\n    'tag': '@throws ArithmeticException if {@code a - b} overflows in signed {@code long} arithmetic',\n    'alternatives': [\n      '@throws ArithmeticException if signed {@code long} arithmetic overflows on the subtraction of {@code b} from {@code a}',\n      '@throws ArithmeticException if the difference of {@code a} and {@code b} overflows in signed {@code long} arithmetic',\n      '@throws ArithmeticException if the subtraction of {@code b} from {@code a} causes an overflow in signed {@code long} arithmetic'\n    ]\n  },\n  {\n    'tag': '@throws ArithmeticException if {@code a * b} overflows in signed {@code long} arithmetic',\n    'alternatives': [\n      '@throws ArithmeticException if signed {@code long} arithmetic overflows when multiplying {@code a} by {@code b}',\n      '@throws ArithmeticException if the product of {@code a} and {@code b} overflows in signed {@code long} arithmetic',\n      '@throws ArithmeticException if the multiplication of {@code a} and {@code b} causes an overflow in signed {@code long} arithmetic'\n    ]\n  },\n  {\n    'tag': '@throws ArithmeticException if {@code b} to the {@code k}th power overflows in signed\\n        {@code long} arithmetic',\n    'alternatives': [\n      '@throws ArithmeticException if raising {@code b} to the power of {@code k} overflows in signed\\n        {@code long} arithmetic',\n      '@throws ArithmeticException if the {@code k}th power of {@code b} overflows in signed\\n        {@code long} arithmetic',\n      '@throws ArithmeticException if the exponentiation of {@code b} to the {@code k} overflows in signed\\n        {@code long} arithmetic'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if {@code n < 0}, {@code k < 0}, or {@code k > n}',\n    'alternatives': [\n      '@throws IllegalArgumentException if {@code n} is less than zero, {@code k} is less than zero, or {@code k} is greater than {@code n}',\n      '@throws IllegalArgumentException if {@code n} is negative, {@code k} is negative, or {@code k} exceeds {@code n}',\n      '@throws IllegalArgumentException if {@code n} is less than zero, {@code k} is less than zero, or {@code k} is not less than or equal to {@code n}'\n    ]\n  }\n]"