"output=[\n  {\n    'tag': '@param array the source array',\n    'alternatives': [\n      '@param array the input array',\n      '@param array the original array',\n      '@param array the source list',\n      '@param array the given array',\n      '@param array the input list'\n    ]\n  },\n  {\n    'tag': '@param minLength the minimum length the returned array must guarantee',\n    'alternatives': [\n      '@param minLength the minimum required array length',\n      '@param minLength the length required for the resulting array',\n      '@param minLength the minimum length of the output array',\n      '@param minLength the length that the array must guarantee',\n      '@param minLength the minimum length expected for the array'\n    ]\n  },\n  {\n    'tag': '@param padding an extra amount to \"grow\" the array by if growth is\\n    necessary',\n    'alternatives': [\n      '@param padding additional size to increase the array in case of growth',\n      '@param padding extra space to expand the array if needed',\n      '@param padding a value to increase the array size when necessary',\n      '@param padding a supplementary value to enlarge the array if required',\n      '@param padding an additional capacity to extend the array when needed'\n    ]\n  },\n  {\n    'tag': '@return an array containing the values of {@code array}, with guaranteed\\n    minimum length {@code minLength}',\n    'alternatives': [\n      '@return an array that includes the elements of {@code array}, with at least\\n    length {@code minLength} guaranteed',\n      '@return an array of the values from {@code array}, ensuring a minimum length\\n    of {@code minLength}',\n      '@return an array that contains the values from {@code array}, with a minimum\\n    length of {@code minLength} ensured',\n      '@return an array composed of the elements from {@code array}, having a minimum\\n    length of {@code minLength} ensured',\n      '@return an array that holds the values of {@code array}, where the minimum\\n    length of {@code minLength} is guaranteed'\n    ]\n  },\n  {\n    'tag': '@param separator the text that should appear between consecutive values in\\n    the resulting string (but not at the start or end)',\n    'alternatives': [\n      '@param separator the string to be inserted between successive values in the\\n    resulting string (excluding the start and end)',\n      '@param separator the text to include between adjacent values in the resulting\\n    string (excluding the beginning and end)',\n      '@param separator the character sequence to appear between consecutive values\\n    in the output string (excluding the start and end)',\n      '@param separator the text that is displayed between consecutive values within\\n    the resulting string (except the initial and final positions)',\n      '@param separator the string that should separate successive values in the\\n    resulting string (excluding the first and last positions)'\n    ]\n  },\n  {\n    'tag': '@param array an array of {@code short} values, possibly empty',\n    'alternatives': [\n      '@param array a possibly empty array of {@code short} values',\n      '@param array a collection of {@code short} values, which may be empty',\n      '@param array a group of {@code short} values, which can be empty',\n      '@param array an array containing {@code short} elements, potentially empty',\n      '@param array a set of {@code short} values, which could be empty'\n    ]\n  },\n  {\n    'tag': '@param collection a collection of {@code Number} instances',\n    'alternatives': [\n      '@param collection a group of {@code Number} objects',\n      '@param collection a set of {@code Number} instances',\n      '@param collection a collection containing {@code Number} elements',\n      '@param collection a list of {@code Number} objects',\n      '@param collection a container that holds {@code Number} instances'\n    ]\n  },\n  {\n    'tag': '@return an array containing the same values as {@code collection}, in the\\n    same order, converted to primitives',\n    'alternatives': [\n      '@return an array that stores the equivalent primitives of the values from\\n    {@code collection}, in the same order',\n      '@return an array that holds the primitive counterparts of the elements in the\\n    {@code collection}, with the original order maintained',\n      '@return an array that contains the converted primitive values from\\n    {@code collection}, preserving the original order',\n      '@return an array with the converted primitive values from {@code collection},\\n    maintaining the same order',\n      '@return an array that comprises the primitive values converted from\\n    {@code collection}, with the original order preserved'\n    ]\n  },\n  {\n    'tag': '@param backingArray the array to back the list',\n    'alternatives': [\n      '@param backingArray the array used as a basis for the list',\n      '@param backingArray the array that supports the list',\n      '@param backingArray the underlying array for the list',\n      '@param backingArray the array that serves as the list\\'s foundation',\n      '@param backingArray the array that forms the backbone of the list'\n    ]\n  },\n  {\n    'tag': '@return a list view of the array',\n    'alternatives': [\n      '@return a view of the array as a list',\n      '@return an array presented as a list',\n      '@return a list representation of the array',\n      '@return an array in the form of a list',\n      '@return a list that exhibits the array elements'\n    ]\n  },\n  {\n    'tag': \"@param highOrder high order scaled derivatives\\n(h<sup>2</sup>/2 y'', ... h<sup>k</sup>/k! y(k))\",\n    'alternatives': [\n      \"@param highOrder higher order scaled derivatives\\n(h<sup>2</sup>/2 y'', ... h<sup>k</sup>/k! y(k))\",\n      \"@param highOrder scaled derivatives of higher order\\n(h<sup>2</sup>/2 y'', ... h<sup>k</sup>/k! y(k))\",\n      \"@param highOrder scaled high-order derivatives\\n(h<sup>2</sup>/2 y'', ... h<sup>k</sup>/k! y(k))\",\n      \"@param highOrder high-order scaled derivatives\\n(h<sup>2</sup>/2 y'', ... h<sup>k</sup>/k! y(k))\",\n      \"@param highOrder scaled derivatives of high order\\n(h<sup>2</sup>/2 y'', ... h<sup>k</sup>/k! y(k))\"\n    ]\n  },\n  {\n    'tag': '@param start first order scaled derivatives at step start',\n    'alternatives': [\n      '@param start scaled first order derivatives at step start',\n      '@param start initial order scaled derivatives at step start',\n      '@param start scaled derivatives of the first order at step start',\n      '@param start first order derivatives scaled for step start',\n      '@param start scaled first order derivatives for the starting point'\n    ]\n  },\n  {\n    'tag': '@param end first order scaled derivatives at step end',\n    'alternatives': [\n      '@param end scaled first order derivatives at step end',\n      '@param end final order scaled derivatives at step end',\n      '@param end scaled derivatives of the first order at step end',\n      '@param end first order derivatives scaled for step end',\n      '@param end scaled first order derivatives for the ending point'\n    ]\n  },\n  {\n    'tag': \"@param highOrder high order scaled derivatives, will be modified\\n(h<sup>2</sup>/2 y'', ... h<sup>k</sup>/k! y(k))\",\n    'alternatives': [\n      \"@param highOrder higher order scaled derivatives, to be changed\\n(h<sup>2</sup>/2 y'', ... h<sup>k</sup>/k! y(k))\",\n      \"@param highOrder scaled derivatives of higher order, that are going to be\\n    modified (h<sup>2</sup>/2 y'', ... h<sup>k</sup>/k! y(k))\",\n      \"@param highOrder scaled high-order derivatives, which will be modified\\n(h<sup>2</sup>/2 y'', ... h<sup>k</sup>/k! y(k))\",\n      \"@param highOrder high-order scaled derivatives, to be edited\\n(h<sup>2</sup>/2 y'', ... h<sup>k</sup>/k! y(k))\",\n      \"@param highOrder scaled derivatives of high order to be altered\\n(h<sup>2</sup>/2 y'', ... h<sup>k</sup>/k! y(k))\"\n    ]\n  },\n  {\n    'tag': '@param n number of steps of the multistep method\\n(excluding the one being computed)',\n    'alternatives': [\n      '@param n number of steps in the multistep procedure\\n(not including the one being calculated)',\n      '@param n number of iterations in the multistep approach\\n(without considering the one being computed)',\n      '@param n number of stages in the multistep algorithm\\n(excluding the step being computed)',\n      '@param n number of iterations for the multistep technique\\n(excluding the step being computed)',\n      '@param n number of steps for the multistep process\\n(not counting the one that is being calculated)'\n    ]\n  },\n  {\n    'tag': '@param field field to which the time and state vector elements belong',\n    'alternatives': [\n      '@param field the field to which the time and state vector elements pertain',\n      '@param field the field to which the time and state vector values belong',\n      '@param field the field that contains the time and state vector elements',\n      '@param field the field for which the time and state vector elements are valid',\n      '@param field the field where the time and state vector elements are located'\n    ]\n  },\n  {\n    'tag': '@param forward integration direction indicator',\n    'alternatives': [\n      '@param forward indication of the integration direction',\n      '@param forward indicator of the integration progress',\n      '@param forward indicator for the integration direction',\n      '@param forward marker of the integration orientation',\n      '@param forward indication of the integration movement'\n    ]\n  },\n  {\n    'tag': '@param yDotK slopes at the intermediate points',\n    'alternatives': [\n      '@param yDotK gradients at the intermediate points',\n      '@param yDotK derivative values at the intermediate points',\n      '@param yDotK rates of change at the intermediate points',\n      '@param yDotK changes per unit at the intermediate points',\n      '@param yDotK increments at the intermediate points'\n    ]\n  },\n  {\n    'tag': '@param globalPreviousState start of the global step',\n    'alternatives': [\n      '@param globalPreviousState beginning of the global step',\n      '@param globalPreviousState initial state of the global step',\n      '@param globalPreviousState start point of the global step',\n      '@param globalPreviousState origin of the global step',\n      '@param globalPreviousState initial condition for the global step'\n    ]\n  },\n  {\n    'tag': '@param globalCurrentState end of the global step',\n    'alternatives': [\n      '@param globalCurrentState conclusion of the global step',\n      '@param globalCurrentState final state of the global step',\n      '@param globalCurrentState termination point of the global step',\n      '@param globalCurrentState finishing point of the global step',\n      '@param globalCurrentState end condition for the global step'\n    ]\n  },\n  {\n    'tag': '@param softPreviousState start of the restricted step',\n    'alternatives': [\n      '@param softPreviousState beginning of the limited step',\n      '@param softPreviousState initial state of the restricted step',\n      '@param softPreviousState start point of the restricted step',\n      '@param softPreviousState origin of the restricted step',\n      '@param softPreviousState initial condition for the restricted step'\n    ]\n  },\n  {\n    'tag': '@param softCurrentState end of the restricted step',\n    'alternatives': [\n      '@param softCurrentState conclusion of the limited step',\n      '@param softCurrentState final state of the restricted step',\n      '@param softCurrentState termination point of the restricted step',\n      '@param softCurrentState finishing point of the restricted step',\n      '@param softCurrentState end condition for the restricted step'\n    ]\n  },\n  {\n    'tag': '@param mapper equations mapper for the all equations',\n    'alternatives': [\n      '@param mapper equations mapper for all the equations',\n      '@param mapper equations mapper for the entire set of equations',\n      '@param mapper mapper of equations for all equations',\n      '@param mapper mapper of equations for all the equations',\n      '@param mapper equations mapper for all equation items'\n    ]\n  },\n  {\n    'tag': '@param step integration step',\n    'alternatives': [\n      '@param step the step of integration',\n      '@param step the integration increment',\n      '@param step the integration timestep',\n      '@param step the integration time interval',\n      '@param step the integration time step'\n    ]\n  },\n  {\n    'tag': '@param rkIntegrator integrator being used',\n    'alternatives': [\n      '@param rkIntegrator the integrator that is currently employed',\n      '@param rkIntegrator the integrator that is in use',\n      '@param rkIntegrator the active integrating method',\n      '@param rkIntegrator the integrator that is being utilized',\n      '@param rkIntegrator the integrator that is applied'\n    ]\n  }\n]"