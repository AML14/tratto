"[\n  {\n    'tag': '@param <O> the type of object the {@link Iterable} contains',\n    'alternatives': [\n      '@param <O> the object type contained in the {@link Iterable}',\n      '@param <O> denotes the type of element contained in the {@link Iterable}',\n      '@param <O> represents the object type present in the {@link Iterable}',\n      '@param <O> refers to the type of elements found in the {@link Iterable}',\n      '@param <O> specifies the object type that the {@link Iterable} holds'\n    ]\n  },\n  {\n    'tag': '@param <R> the type of the output {@link Collection}',\n    'alternatives': [\n      '@param <R> represents the output type of the {@link Collection}',\n      '@param <R> specifies the type of collection that is being returned',\n      '@param <R> denotes the type of the resulting {@link Collection}',\n      '@param <R> refers to the resulting type of the {@link Collection}',\n      '@param <R> represents the type of collection that will be returned'\n    ]\n  },\n  {\n    'tag': '@param inputCollection the collection to get the input from, may be null',\n    'alternatives': [\n      '@param inputCollection is the collection used to obtain the input, it can be null',\n      '@param inputCollection represents the collection from which the input is retrieved, it can be null',\n      '@param inputCollection refers to the collection used to fetch the input, it may be null',\n      '@param inputCollection denotes the collection that supplies the input, it may be null',\n      '@param inputCollection specifies the collection from which the input is obtained, it can be null'\n    ]\n  },\n  {\n    'tag': '@param predicate the predicate to use, may be null',\n    'alternatives': [\n      '@param predicate is the condition to apply, it can be null',\n      '@param predicate represents the rule to be applied, it may be null',\n      '@param predicate refers to the condition that will be used, it may be null',\n      '@param predicate denotes the expression to be evaluated, it can be null',\n      '@param predicate specifies the predicate to be used, it may be null'\n    ]\n  },\n  {\n    'tag': '@param <O> the type of object the {@link Iterable} contains',\n    'alternatives': [\n      '@param <O> the object type contained in the {@link Iterable}',\n      '@param <O> denotes the type of element contained in the {@link Iterable}',\n      '@param <O> represents the object type present in the {@link Iterable}',\n      '@param <O> refers to the type of elements found in the {@link Iterable}',\n      '@param <O> specifies the object type that the {@link Iterable} holds'\n    ]\n  },\n  {\n    'tag': '@param <R> the type of the output {@link Collection}',\n    'alternatives': [\n      '@param <R> represents the output type of the {@link Collection}',\n      '@param <R> specifies the type of collection that is being returned',\n      '@param <R> denotes the type of the resulting {@link Collection}',\n      '@param <R> refers to the resulting type of the {@link Collection}',\n      '@param <R> represents the type of collection that will be returned'\n    ]\n  },\n  {\n    'tag': '@param inputCollection the collection to get the input from, may be null',\n    'alternatives': [\n      '@param inputCollection is the collection used to obtain the input, it can be null',\n      '@param inputCollection represents the collection from which the input is retrieved, it can be null',\n      '@param inputCollection refers to the collection used to fetch the input, it may be null',\n      '@param inputCollection denotes the collection that supplies the input, it may be null',\n      '@param inputCollection specifies the collection from which the input is obtained, it can be null'\n    ]\n  },\n  {\n    'tag': '@param predicate the predicate to use, may be null',\n    'alternatives': [\n      '@param predicate is the condition to apply, it can be null',\n      '@param predicate represents the rule to be applied, it may be null',\n      '@param predicate refers to the condition that will be used, it may be null',\n      '@param predicate denotes the expression to be evaluated, it can be null',\n      '@param predicate specifies the predicate to be used, it may be null'\n    ]\n  },\n  {\n    'tag': '@param <O> the type of object the {@link Iterable} contains',\n    'alternatives': [\n      '@param <O> the object type contained in the {@link Iterable}',\n      '@param <O> denotes the type of element contained in the {@link Iterable}',\n      '@param <O> represents the object type present in the {@link Iterable}',\n      '@param <O> refers to the type of elements found in the {@link Iterable}',\n      '@param <O> specifies the object type that the {@link Iterable} holds'\n    ]\n  },\n  {\n    'tag': '@param predicate the predicate to use, may be null',\n    'alternatives': [\n      '@param predicate is the condition to apply, it can be null',\n      '@param predicate represents the rule to be applied, it may be null',\n      '@param predicate refers to the condition that will be used, it may be null',\n      '@param predicate denotes the expression to be evaluated, it can be null',\n      '@param predicate specifies the predicate to be used, it may be null'\n    ]\n  },\n  {\n    'tag': '@return the elements <b>not</b> matching the predicate (new list)',\n    'alternatives': [\n      '@return a new list containing the elements that <b>do not</b> match the predicate',\n      '@return a newly created list with the elements that <b>do not</b> satisfy the predicate',\n      '@return a fresh list containing the elements that <b>do not</b> meet the predicate',\n      '@return a list that contains the elements which <b>do not</b> conform to the predicate',\n      '@return a list of elements that <b>do not</b> match the given predicate'\n    ]\n  },\n  {\n    'tag': '@param <O> the type of object the {@link Iterable} contains',\n    'alternatives': [\n      '@param <O> the object type contained in the {@link Iterable}',\n      '@param <O> denotes the type of element contained in the {@link Iterable}',\n      '@param <O> represents the object type present in the {@link Iterable}',\n      '@param <O> refers to the type of elements found in the {@link Iterable}',\n      '@param <O> specifies the object type that the {@link Iterable} holds'\n    ]\n  },\n  {\n    'tag': '@param <R> the type of the output {@link Collection}',\n    'alternatives': [\n      '@param <R> represents the output type of the {@link Collection}',\n      '@param <R> specifies the type of collection that is being returned',\n      '@param <R> denotes the type of the resulting {@link Collection}',\n      '@param <R> refers to the resulting type of the {@link Collection}',\n      '@param <R> represents the type of collection that will be returned'\n    ]\n  },\n  {\n    'tag': '@param inputCollection the collection to get the input from, may be null',\n    'alternatives': [\n      '@param inputCollection is the collection used to obtain the input, it can be null',\n      '@param inputCollection represents the collection from which the input is retrieved, it can be null',\n      '@param inputCollection refers to the collection used to fetch the input, it may be null',\n      '@param inputCollection denotes the collection that supplies the input, it may be null',\n      '@param inputCollection specifies the collection from which the input is obtained, it can be null'\n    ]\n  },\n  {\n    'tag': '@param predicate the predicate to use, may be null',\n    'alternatives': [\n      '@param predicate is the condition to apply, it can be null',\n      '@param predicate represents the rule to be applied, it may be null',\n      '@param predicate refers to the condition that will be used, it may be null',\n      '@param predicate denotes the expression to be evaluated, it can be null',\n      '@param predicate specifies the predicate to be used, it may be null'\n    ]\n  },\n  {\n    'tag': '@param <I> the type of object in the input collection',\n    'alternatives': [\n      '@param <I> denotes the type of element in the input collection',\n      '@param <I> refers to the object type found in the input collection',\n      '@param <I> specifies the type of object belonging to the input collection',\n      '@param <I> represents the object type present in the input collection',\n      '@param <I> the object type contained in the input collection'\n    ]\n  },\n  {\n    'tag': '@param <O> the type of object in the output collection',\n    'alternatives': [\n      '@param <O> represents the object type present in the output collection',\n      '@param <O> refers to the type of elements found in the output collection',\n      '@param <O> the object type contained in the output collection',\n      '@param <O> specifies the type of object belonging to the output collection',\n      '@param <O> denotes the type of element in the output collection'\n    ]\n  },\n  {\n    'tag': '@param transformer the transformer to use, may be null',\n    'alternatives': [\n      '@param transformer is the function to apply, it can be null',\n      '@param transformer represents the conversion to be performed, it may be null',\n      '@param transformer refers to the converter that will be used, it may be null',\n      '@param transformer denotes the operation to be executed, it can be null',\n      '@param transformer specifies the transformer to be applied, it may be null'\n    ]\n  },\n  {\n    'tag': '@return the transformed result (new list)',\n    'alternatives': [\n      '@return a new list containing the result of the transformation',\n      '@return a newly created list with the transformed output',\n      '@return a fresh list containing the result of the conversion',\n      '@return a list that contains the transformed outcome',\n      '@return a list of elements resulting from the transformation'\n    ]\n  },\n  {\n    'tag': '@param <I> the type of object in the input collection',\n    'alternatives': [\n      '@param <I> denotes the type of element in the input collection',\n      '@param <I> refers to the object type found in the input collection',\n      '@param <I> specifies the type of object belonging to the input collection',\n      '@param <I> represents the object type present in the input collection',\n      '@param <I> the object type contained in the input collection'\n    ]\n  },\n  {\n    'tag': '@param <O> the type of object in the output collection',\n    'alternatives': [\n      '@param <O> represents the object type present in the output collection',\n      '@param <O> refers to the type of elements found in the output collection',\n      '@param <O> the object type contained in the output collection',\n      '@param <O> specifies the type of object belonging to the output collection',\n      '@param <O> denotes the type of element in the output collection'\n    ]\n  },\n  {\n    'tag': '@param inputIterator the iterator to get the input from, may be null',\n    'alternatives': [\n      '@param inputIterator is the iterator used to obtain the input, it can be null',\n      '@param inputIterator represents the iterator from which the input is retrieved, it can be null',\n      '@param inputIterator refers to the iterator used to fetch the input, it may be null',\n      '@param inputIterator denotes the iterator that supplies the input, it may be null',\n      '@param inputIterator specifies the iterator from which the input is obtained, it can be null'\n    ]\n  },\n  {\n    'tag': '@param transformer the transformer to use, may be null',\n    'alternatives': [\n      '@param transformer is the function to apply, it can be null',\n      '@param transformer represents the conversion to be performed, it may be null',\n      '@param transformer refers to the converter that will be used, it may be null',\n      '@param transformer denotes the operation to be executed, it can be null',\n      '@param transformer specifies the transformer to be applied, it may be null'\n    ]\n  },\n  {\n    'tag': '@return the transformed result (new list)',\n    'alternatives': [\n      '@return a new list containing the result of the transformation',\n      '@return a newly created list with the transformed output',\n      '@return a fresh list containing the result of the conversion',\n      '@return a list that contains the transformed outcome',\n      '@return a list of elements resulting from the transformation'\n    ]\n  },\n  {\n    'tag': '@param <I> the type of object in the input collection',\n    'alternatives': [\n      '@param <I> denotes the type of element in the input collection',\n      '@param <I> refers to the object type found in the input collection',\n      '@param <I> specifies the type of object belonging to the input collection',\n      '@param <I> represents the object type present in the input collection',\n      '@param <I> the object type contained in the input collection'\n    ]\n  }\n]"