"The output is:\n\n[\n  {\n    'tag': '@param errorMessage the exception message to use if the check fails; will be converted to a\\n    string using {@link String#valueOf(Object)}',\n    'alternatives': [\n      '@param errorMessage the message of the exception to use if the check fails;\nit will be transformed to a string using {@link String#valueOf(Object)}',\n      '@param errorMessage the message of the exception to utilize in case the check fails;\nit will be transformed into a string using {@link String#valueOf(Object)}',\n      '@param errorMessage the message of the exception to use if the check fails;\nit will be converted to a string using {@link String#valueOf(Object)}',\n      '@param errorMessage the exception message to use if the check fails;\nit will be changed to a string using {@link String#valueOf(Object)}',\n      '@param errorMessage the exception message to utilize in case the check fails;\nit will be transformed to a string using {@link String#valueOf(Object)}'\n    ]\n  },\n  {\n    'tag': '@return the non-null reference that was validated',\n    'alternatives': [\n      '@return the reference that was validated and is not null',\n      '@return the validated reference that is not null',\n      '@return the reference that was validated and cannot be null',\n      '@return the non-null reference that passed the validation',\n      '@return the reference that was checked and is not null'\n    ]\n  },\n  {\n    'tag': '@param reference an object reference',\n    'alternatives': [\n      '@param reference an object that is being referred to',\n      '@param reference an object being referenced',\n      '@param reference an object that is referenced',\n      '@param reference an object that is being referred',\n      '@param reference a reference to an object'\n    ]\n  },\n  {\n    'tag': '@param errorMessageTemplate a template for the exception message should the check fail. The\\n    message is formed by replacing each {@code %s} placeholder in the template with an\\n    argument. These are matched by position - the first {@code %s} gets {@code\\n    errorMessageArgs[0]}, etc.  Unmatched arguments will be appended to the formatted message\\n    in square braces. Unmatched placeholders will be left as-is.',\n    'alternatives': [\n      '@param errorMessageTemplate a format for the exception message if the check fails. The message\nis created by substituting each {@code %s} placeholder in the format with an argument.\nThe arguments are matched by position - the first {@code %s} corresponds to {@code errorMessageArgs[0]}, etc.\nArguments without a match will be added to the formatted message in square brackets.\nPlaceholders without a match will be left unaltered.',\n      '@param errorMessageTemplate a template used to create the exception message if the check fails.\nThe message is generated by replacing each {@code %s} placeholder in the template with an argument.\nThe arguments are matched by position - the first {@code %s} corresponds to {@code errorMessageArgs[0]}, and so on.\nArguments that have no match will be appended in square brackets to the formatted message.\nPlaceholders that have no match will remain unchanged.',\n      '@param errorMessageTemplate a format for the exception message in case the check fails. The message\nis formed by replacing each {@code %s} placeholder in the format with an argument.\nThe arguments are matched by position - the first {@code %s} obtains {@code errorMessageArgs[0]}, etc.\nArguments not matched will be added to the formatted message in square brackets.\nPlaceholders not matched will be left unchanged.',\n      '@param errorMessageTemplate a format for the exception message if the check fails. The message\nis constructed by replacing each {@code %s} placeholder in the format with an argument.\nThe arguments are matched by position - the first {@code %s} is assigned {@code errorMessageArgs[0]}, and so on.\nArguments that have no match will be appended within square brackets to the formatted message.\nPlaceholders that have no match will be unchanged.',\n      '@param errorMessageTemplate a template for the exception message when the check fails. The\nmessage is produced by replacing each {@code %s} placeholder in the template with an\nargument. These are matched by position - the first {@code %s} receives {@code\nerrorMessageArgs[0]}, etc.  Any unmatched arguments will be added to the formatted message\nwithin square brackets. Any unmatched placeholders will remain as they are.'\n    ]\n  },\n  {\n    'tag': '@param errorMessageArgs the arguments to be substituted into the message template. Arguments\\n    are converted to strings using {@link String#valueOf(Object)}.',\n    'alternatives': [\n      '@param errorMessageArgs the arguments to replace in the message format. The arguments\nwill be transformed into strings using {@link String#valueOf(Object)}.',\n      '@param errorMessageArgs the arguments to be inserted into the message format. The arguments\nwill be converted to strings using {@link String#valueOf(Object)}.',\n      '@param errorMessageArgs the arguments to substitute into the message format. The arguments\nwill be changed to strings using {@link String#valueOf(Object)}.',\n      '@param errorMessageArgs the arguments to be used in the message template. The arguments\nwill be converted to strings using {@link String#valueOf(Object)}.',\n      '@param errorMessageArgs the arguments to be placed into the message template. The arguments\nwill be transformed into strings using {@link String#valueOf(Object)}.'\n    ]\n  },\n  {\n    'tag': '@param index a user-supplied index identifying an element of an array, list or string',\n    'alternatives': [\n      '@param index an index supplied by the user that identifies an element of an array, list, or string',\n      '@param index a user-provided index that specifies an element in an array, list, or string',\n      '@param index an index provided by the user that identifies an element of an array, list, or string',\n      '@param index an index supplied by the user that identifies a member of an array, list, or string',\n      '@param index a user-given index that identifies an element in an array, list, or string'\n    ]\n  },\n  {\n    'tag': '@param size the size of that array, list or string',\n    'alternatives': [\n      '@param size the length of that array, list, or string',\n      '@param size the dimension of that array, list, or string',\n      '@param size the number of elements in that array, list, or string',\n      '@param size the count of items in that array, list, or string',\n      '@param size the quantity of elements in that array, list, or string'\n    ]\n  },\n  {\n    'tag': '@return the value of {@code index}',\n    'alternatives': [\n      '@return the result of {@code index}',\n      '@return the returned value of {@code index}',\n      '@return the value associated with {@code index}',\n      '@return the value that has been obtained from {@code index}',\n      '@return the output of {@code index}'\n    ]\n  },\n  {\n    'tag': '@param desc the text to use to describe this index in an error message',\n    'alternatives': [\n      '@param desc the description to be utilized in an error message to refer to this index',\n      '@param desc the text used to describe this index in an error message',\n      '@param desc the text that explains this index in an error message',\n      '@param desc the description used to identify this index in an error message',\n      '@param desc the explanation to be used in an error message for this index'\n    ]\n  },\n  {\n    'tag': '@param index a user-supplied index identifying a position in an array, list or string',\n    'alternatives': [\n      '@param index an index provided by the user that specifies a position in an array, list, or string',\n      '@param index a user-specified index that identifies a position in an array, list, or string',\n      '@param index an index supplied by the user that identifies a position in an array, list, or string',\n      '@param index an index given by the user that identifies a position in an array, list, or string',\n      '@param index a user-given index that identifies a position in an array, list, or string'\n    ]\n  },\n  {\n    'tag': '@param start a user-supplied index identifying a starting position in an array, list or string',\n    'alternatives': [\n      '@param start an index provided by the user that identifies a starting position in an array, list, or string',\n      '@param start a user-specified index that designates a starting position in an array, list, or string',\n      '@param start an index supplied by the user that specifies a starting position in an array, list, or string',\n      '@param start an index given by the user that identifies a starting position in an array, list, or string',\n      '@param start a user-given index that identifies a starting position in an array, list, or string'\n    ]\n  },\n  {\n    'tag': '@param end a user-supplied index identifying a ending position in an array, list or string',\n    'alternatives': [\n      '@param end an index provided by the user that identifies an ending position in an array, list, or string',\n      '@param end a user-specified index that designates an ending position in an array, list, or string',\n      '@param end an index supplied by the user that specifies an ending position in an array, list, or string',\n      '@param end an index given by the user that identifies an ending position in an array, list, or string',\n      '@param end a user-given index that identifies an ending position in an array, list, or string'\n    ]\n  },\n  {\n    'tag': '@param size the size of that array, list or string',\n    'alternatives': [\n      '@param size the length of that array, list, or string',\n      '@param size the dimension of that array, list, or string',\n      '@param size the number of elements in that array, list, or string',\n      '@param size the count of items in that array, list, or string',\n      '@param size the quantity of elements in that array, list, or string'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if {@code maxLength} is less than the length of\\n    {@code truncationIndicator}',\n    'alternatives': [\n      '@throws IllegalArgumentException if the length of {@code truncationIndicator} exceeds the value of {@code maxLength}',\n      '@throws IllegalArgumentException if the length of {@code truncationIndicator} is greater than {@code maxLength}',\n      '@throws IllegalArgumentException if {@code maxLength} is shorter than the length of\\n    {@code truncationIndicator}',\n      '@throws IllegalArgumentException if {@code truncationIndicator} is longer than the allowed {@code maxLength}',\n      '@throws IllegalArgumentException if {@code truncationIndicator} has a length larger than the maximum allowed {@code maxLength}'\n    ]\n  },\n  {\n    'tag': '@param duration the length of time after a value is created that it\\n    should stop being returned by subsequent {@code get()} calls',\n    'alternatives': [\n      '@param duration the time period after a value is created that it\\n    should no longer be returned by subsequent {@code get()} calls',\n      '@param duration the period of time after a value is created that it\\n    should cease being returned by subsequent {@code get()} calls',\n      '@param duration the duration after a value is created that it\\n    should no more be returned by subsequent {@code get()} calls',\n      '@param duration the time span after a value is created that it\\n    should stop being returned by subsequent {@code get()} calls',\n      '@param duration the amount of time after a value is created that it\\n    should no further be returned by subsequent {@code get()} calls'\n    ]\n  }\n]"