"output=[\n  {\n    'tag': '@throws NumberIsTooSmallException if maximal number of iterations\\nis lesser than or equal to the minimal number of iterations',\n    'alternatives': [\n      '@throws NumberIsTooSmallException if the maximum number of iterations is less than or equal to the minimum number of iterations',\n      '@throws NumberIsTooSmallException if the maximum number of iterations is smaller or equal to the minimum number of iterations',\n      '@throws NumberIsTooSmallException if the maximal number of iterations is below or equal to the minimal number of iterations',\n      '@throws NumberIsTooSmallException if the maximal number of iterations is less than or equal to the minimal number of iterations',\n      '@throws NumberIsTooSmallException if the maximum number of iterations is lower or equal to the minimum number of iterations'\n    ]\n  },\n  {\n    'tag': '@param relativeAccuracy relative accuracy of the result',\n    'alternatives': [\n      '@param relativeAccuracy precision of the result',\n      '@param relativeAccuracy accuracy of the result',\n      '@param relativeAccuracy relative level of accuracy for the result',\n      '@param relativeAccuracy level of relative accuracy for the result',\n      '@param relativeAccuracy degree of relative precision for the result'\n    ]\n  },\n  {\n    'tag': '@param absoluteAccuracy absolute accuracy of the result',\n    'alternatives': [\n      '@param absoluteAccuracy precision of the result',\n      '@param absoluteAccuracy accuracy of the result',\n      '@param absoluteAccuracy absolute level of accuracy for the result',\n      '@param absoluteAccuracy level of absolute accuracy for the result',\n      '@param absoluteAccuracy degree of absolute precision for the result'\n    ]\n  },\n  {\n    'tag': '@param minimalIterationCount minimum number of iterations',\n    'alternatives': [\n      '@param minimalIterationCount minimum iteration count',\n      '@param minimalIterationCount lowest number of iterations',\n      '@param minimalIterationCount smallest iteration count',\n      '@param minimalIterationCount minimum count of iterations',\n      '@param minimalIterationCount least number of iterations'\n    ]\n  },\n  {\n    'tag': '@throws NumberIsTooSmallException if maximal number of iterations\\nis lesser than or equal to the minimal number of iterations',\n    'alternatives': [\n      '@throws NumberIsTooSmallException if the maximum number of iterations is less than or equal to the minimum number of iterations',\n      '@throws NumberIsTooSmallException if the maximum number of iterations is smaller or equal to the minimum number of iterations',\n      '@throws NumberIsTooSmallException if the maximal number of iterations is below or equal to the minimal number of iterations',\n      '@throws NumberIsTooSmallException if the maximal number of iterations is less than or equal to the minimal number of iterations',\n      '@throws NumberIsTooSmallException if the maximum number of iterations is lower or equal to the minimum number of iterations'\n    ]\n  },\n  {\n    'tag': '@param minimalIterationCount minimum number of iterations',\n    'alternatives': [\n      '@param minimalIterationCount minimum iteration count',\n      '@param minimalIterationCount lowest number of iterations',\n      '@param minimalIterationCount smallest iteration count',\n      '@param minimalIterationCount minimum count of iterations',\n      '@param minimalIterationCount least number of iterations'\n    ]\n  },\n  {\n    'tag': '@throws NumberIsTooSmallException if maximal number of iterations\\nis lesser than or equal to the minimal number of iterations',\n    'alternatives': [\n      '@throws NumberIsTooSmallException if the maximum number of iterations is less than or equal to the minimum number of iterations',\n      '@throws NumberIsTooSmallException if the maximum number of iterations is smaller or equal to the minimum number of iterations',\n      '@throws NumberIsTooSmallException if the maximal number of iterations is below or equal to the minimal number of iterations',\n      '@throws NumberIsTooSmallException if the maximal number of iterations is less than or equal to the minimal number of iterations',\n      '@throws NumberIsTooSmallException if the maximum number of iterations is lower or equal to the minimum number of iterations'\n    ]\n  },\n  {\n    'tag': '@param relativeAccuracy relative accuracy of the result',\n    'alternatives': [\n      '@param relativeAccuracy precision of the result',\n      '@param relativeAccuracy accuracy of the result',\n      '@param relativeAccuracy relative level of accuracy for the result',\n      '@param relativeAccuracy level of relative accuracy for the result',\n      '@param relativeAccuracy degree of relative precision for the result'\n    ]\n  },\n  {\n    'tag': '@param absoluteAccuracy absolute accuracy of the result',\n    'alternatives': [\n      '@param absoluteAccuracy precision of the result',\n      '@param absoluteAccuracy accuracy of the result',\n      '@param absoluteAccuracy absolute level of accuracy for the result',\n      '@param absoluteAccuracy level of absolute accuracy for the result',\n      '@param absoluteAccuracy degree of absolute precision for the result'\n    ]\n  },\n  {\n    'tag': '@param minimalIterationCount minimum number of iterations',\n    'alternatives': [\n      '@param minimalIterationCount minimum iteration count',\n      '@param minimalIterationCount lowest number of iterations',\n      '@param minimalIterationCount smallest iteration count',\n      '@param minimalIterationCount minimum count of iterations',\n      '@param minimalIterationCount least number of iterations'\n    ]\n  },\n  {\n    'tag': '@throws NumberIsTooSmallException if maximal number of iterations\\nis lesser than or equal to the minimal number of iterations',\n    'alternatives': [\n      '@throws NumberIsTooSmallException if the maximum number of iterations is less than or equal to the minimum number of iterations',\n      '@throws NumberIsTooSmallException if the maximum number of iterations is smaller or equal to the minimum number of iterations',\n      '@throws NumberIsTooSmallException if the maximal number of iterations is below or equal to the minimal number of iterations',\n      '@throws NumberIsTooSmallException if the maximal number of iterations is less than or equal to the minimal number of iterations',\n      '@throws NumberIsTooSmallException if the maximum number of iterations is lower or equal to the minimum number of iterations'\n    ]\n  },\n  {\n    'tag': '@param numberOfPoints Number of integration points.',\n    'alternatives': [\n      '@param numberOfPoints Total count of integration points.',\n      '@param numberOfPoints Count of integration points.',\n      '@param numberOfPoints Number representing the total integration points.',\n      '@param numberOfPoints Points of integration.',\n      '@param numberOfPoints Total number of integration points.'\n    ]\n  },\n  {\n    'tag': '@return a copy of the integration rule.',\n    'alternatives': [\n      '@return a duplicate of the integration rule.',\n      '@return an identical copy of the integration rule.',\n      '@return a cloned copy of the integration rule.',\n      '@return a replicated version of the integration rule.',\n      '@return a carbon copy of the integration rule.'\n    ]\n  },\n  {\n    'tag': '@throws DimensionMismatchException if the elements of the rule pair do not\\nhave the same length.',\n    'alternatives': [\n      '@throws DimensionMismatchException if the elements of the rule pair have different lengths.',\n      '@throws DimensionMismatchException if the elements of the rule pair possess unequal lengths.',\n      '@throws DimensionMismatchException if the elements of the rule pair are not of equal length.',\n      '@throws DimensionMismatchException if the elements of the rule pair have dissimilar lengths.',\n      '@throws DimensionMismatchException if the elements of the rule pair are not the same size.'\n    ]\n  },\n  {\n    'tag': '@param numberOfPoints Order of the rule to be retrieved.',\n    'alternatives': [\n      '@param numberOfPoints Order of the desired rule.',\n      '@param numberOfPoints Desired order of the rule.',\n      '@param numberOfPoints Order of the rule to obtain.',\n      '@param numberOfPoints Requested order of the rule.',\n      '@param numberOfPoints Target order of the rule.'\n    ]\n  },\n  {\n    'tag': '@return the points and weights corresponding to the given order.',\n    'alternatives': [\n      '@return the points and weights that correspond to the specified order.',\n      '@return the points and weights associated with the given order.',\n      '@return the points and weights that relate to the provided order.',\n      '@return the points and weights linked to the given order.',\n      '@return the points and weights corresponding to the specified order value.'\n    ]\n  },\n  {\n    'tag': '@throws DimensionMismatchException if the elements of the rule pair do not\\nhave the same length.',\n    'alternatives': [\n      '@throws DimensionMismatchException if the elements of the rule pair have different lengths.',\n      '@throws DimensionMismatchException if the elements of the rule pair possess unequal lengths.',\n      '@throws DimensionMismatchException if the elements of the rule pair are not of equal length.',\n      '@throws DimensionMismatchException if the elements of the rule pair have dissimilar lengths.',\n      '@throws DimensionMismatchException if the elements of the rule pair are not the same size.'\n    ]\n  },\n  {\n    'tag': '@param rule Rule to be stored.',\n    'alternatives': [\n      '@param rule Rule to store.',\n      '@param rule Rule to be saved.',\n      '@param rule Rule to be preserved.',\n      '@param rule Rule to keep.',\n      '@param rule Rule to retain.'\n    ]\n  },\n  {\n    'tag': '@throws DimensionMismatchException if the elements of the pair do not\\nhave the same length.',\n    'alternatives': [\n      '@throws DimensionMismatchException if the elements of the pair have different lengths.',\n      '@throws DimensionMismatchException if the elements of the pair possess unequal lengths.',\n      '@throws DimensionMismatchException if the elements of the pair are not of equal length.',\n      '@throws DimensionMismatchException if the elements of the pair have dissimilar lengths.',\n      '@throws DimensionMismatchException if the elements of the pair are not the same size.'\n    ]\n  },\n  {\n    'tag': '@param numberOfPoints Order of the rule to be computed.',\n    'alternatives': [\n      '@param numberOfPoints Order of the rule to calculate.',\n      '@param numberOfPoints Order of the rule to determine.',\n      '@param numberOfPoints Order of the rule to compute.',\n      '@param numberOfPoints Order to be used in computing the rule.',\n      '@param numberOfPoints Desired order of the rule calculation.'\n    ]\n  },\n  {\n    'tag': '@return the computed rule.',\n    'alternatives': [\n      '@return the rule that has been computed.',\n      '@return the resulting rule from the computation.',\n      '@return the rule that has been calculated.',\n      '@return the generated rule from the computation.',\n      '@return the obtained rule after the computation.'\n    ]\n  },\n  {\n    'tag': '@throws DimensionMismatchException if the elements of the pair do not\\nhave the same length.',\n    'alternatives': [\n      '@throws DimensionMismatchException if the elements of the pair have different lengths.',\n      '@throws DimensionMismatchException if the elements of the pair possess unequal lengths.',\n      '@throws DimensionMismatchException if the elements of the pair are not of equal length.',\n      '@throws DimensionMismatchException if the elements of the pair have dissimilar lengths.',\n      '@throws DimensionMismatchException if the elements of the pair are not the same size.'\n    ]\n  },\n  {\n    'tag': '@param <T> Type of the number used to represent the points and\\nweights of the quadrature rules.',\n    'alternatives': [\n      '@param <T> Numeric type used for representing the points and weights of the quadrature rules.',\n      '@param <T> Type of the number used for the points and weights of the quadrature rules.',\n      '@param <T> Numeric representation type for the points and weights of the quadrature rules.',\n      '@param <T> Type of the number utilized for the points and weights of the quadrature rules.',\n      '@param <T> Type of the number employed in representing the points and weights of the quadrature rules.'\n    ]\n  }\n]"