"output=[\n  {\n    'tag': '@param columns Number of columns in the new matrix.',\n    'alternatives': [\n      '@param columns Number of columns in the new matrix.',\n      '@param columns Number of columns in the newly created matrix.',\n      '@param columns Number of columns in the matrix being created.',\n      '@param columns Number of columns in the resulting matrix.',\n      '@param columns Number of columns in the matrix.'\n    ]\n  },\n  {\n    'tag': '@throws NotStrictlyPositiveException if row or column dimension is not\\npositive.',\n    'alternatives': [\n      '@throws NotStrictlyPositiveException if the dimension of the row or column is not positive.',\n      '@throws NotStrictlyPositiveException if either the row or column dimension is not positive.',\n      '@throws NotStrictlyPositiveException if the dimension of the row or column is not greater than zero.',\n      '@throws NotStrictlyPositiveException if the row or column dimension is not strictly positive.',\n      '@throws NotStrictlyPositiveException if the row or column dimension is less than or equal to zero.'\n    ]\n  },\n  {\n    'tag': '@param rawData Data for the new matrix, in raw layout.',\n    'alternatives': [\n      '@param rawData Data in raw layout for the new matrix.',\n      '@param rawData Raw layout data for the new matrix.',\n      '@param rawData Raw format data for the new matrix.',\n      '@param rawData Data arranged in a raw layout for the new matrix.',\n      '@param rawData Data presented in raw layout for the new matrix.'\n    ]\n  },\n  {\n    'tag': '@throws DimensionMismatchException if the {@code blockData} shape is\\ninconsistent with block layout.',\n    'alternatives': [\n      '@throws DimensionMismatchException if the shape of the {@code blockData} is not consistent with the block layout.',\n      '@throws DimensionMismatchException if the shape of the {@code blockData} does not match the block layout.',\n      '@throws DimensionMismatchException if the shape of the {@code blockData} is inconsistent with the block layout.',\n      '@throws DimensionMismatchException if the block layout is not consistent with the shape of the {@code blockData}.',\n      '@throws DimensionMismatchException if the shape of the {@code blockData} does not adhere to the block layout.'\n    ]\n  },\n  {\n    'tag': '@param rows the number of rows in the new matrix',\n    'alternatives': [\n      '@param rows the number of rows in the new matrix',\n      '@param rows the number of rows in the newly created matrix',\n      '@param rows the number of rows in the matrix being created',\n      '@param rows the number of rows in the resulting matrix',\n      '@param rows the number of rows in the matrix'\n    ]\n  },\n  {\n    'tag': '@param columns the number of columns in the new matrix',\n    'alternatives': [\n      '@param columns the number of columns in the new matrix',\n      '@param columns the number of columns in the newly created matrix',\n      '@param columns the number of columns in the matrix being created',\n      '@param columns the number of columns in the resulting matrix',\n      '@param columns the number of columns in the matrix'\n    ]\n  },\n  {\n    'tag': '@param blockData data for new matrix',\n    'alternatives': [\n      '@param blockData data for new matrix',\n      '@param blockData data for the newly created matrix',\n      '@param blockData data for the matrix being created',\n      '@param blockData data for the resulting matrix',\n      '@param blockData data for the matrix'\n    ]\n  },\n  {\n    'tag': '@param copyArray if true, the input array will be copied, otherwise\\nit will be referenced',\n    'alternatives': [\n      '@param copyArray if true, the input array will be copied, otherwise it will be referenced',\n      '@param copyArray if true, the input array will be duplicated, otherwise it will be referenced',\n      '@param copyArray if true, the input array will be cloned, otherwise it will be referenced',\n      '@param copyArray if set to true, the input array will be copied, otherwise it will be referenced',\n      '@param copyArray if set to true, the input array will be duplicated, otherwise it will be referenced'\n    ]\n  },\n  {\n    'tag': '@throws DimensionMismatchException if the {@code blockData} shape is\\ninconsistent with block layout.',\n    'alternatives': [\n      '@throws DimensionMismatchException if the shape of the {@code blockData} is not consistent with the block layout.',\n      '@throws DimensionMismatchException if the shape of the {@code blockData} does not match the block layout.',\n      '@throws DimensionMismatchException if the shape of the {@code blockData} is inconsistent with the block layout.',\n      '@throws DimensionMismatchException if the block layout is not consistent with the shape of the {@code blockData}.',\n      '@throws DimensionMismatchException if the shape of the {@code blockData} does not adhere to the block layout.'\n    ]\n  },\n  {\n    'tag': '@throws NotStrictlyPositiveException if row or column dimension is not\\npositive.',\n    'alternatives': [\n      '@throws NotStrictlyPositiveException if the dimension of the row or column is not positive.',\n      '@throws NotStrictlyPositiveException if either the row or column dimension is not positive.',\n      '@throws NotStrictlyPositiveException if the dimension of the row or column is not greater than zero.',\n      '@throws NotStrictlyPositiveException if the row or column dimension is not strictly positive.',\n      '@throws NotStrictlyPositiveException if the row or column dimension is less than or equal to zero.'\n    ]\n  },\n  {\n    'tag': '@param m Matrix to be added.',\n    'alternatives': [\n      '@param m Matrix to be added.',\n      '@param m Matrix to be included in the addition.',\n      '@param m Matrix to be used in the addition operation.',\n      '@param m Matrix that will be added.',\n      '@param m Matrix to add.'\n    ]\n  },\n  {\n    'tag': '@return {@code this} + m.',\n    'alternatives': [\n      '@return the result of adding {@code this} and m.',\n      '@return the sum of {@code this} and m.',\n      '@return the addition of {@code this} and m.',\n      '@return the result when {@code this} is added to m.',\n      '@return the outcome of the addition between {@code this} and m.'\n    ]\n  },\n  {\n    'tag': '@throws MatrixDimensionMismatchException if {@code m} is not the same\\nsize as this matrix.',\n    'alternatives': [\n      '@throws MatrixDimensionMismatchException if {@code m} does not have the same size as this matrix.',\n      '@throws MatrixDimensionMismatchException if the size of {@code m} differs from this matrix.',\n      '@throws MatrixDimensionMismatchException if the dimensions of {@code m} are not equal to this matrix.',\n      '@throws MatrixDimensionMismatchException if the size of {@code m} is not identical to this matrix.',\n      '@throws MatrixDimensionMismatchException if the dimensions of {@code m} are different from this matrix.'\n    ]\n  },\n  {\n    'tag': '@param m Matrix to be subtracted.',\n    'alternatives': [\n      '@param m Matrix to be subtracted.',\n      '@param m Matrix to be subtracted from this matrix.',\n      '@param m Matrix that will be subtracted.',\n      '@param m Matrix to subtract.',\n      '@param m Matrix to be used in the subtraction operation.'\n    ]\n  },\n  {\n    'tag': '@return {@code this} + m.',\n    'alternatives': [\n      '@return the result of adding {@code this} and m.',\n      '@return the sum of {@code this} and m.',\n      '@return the addition of {@code this} and m.',\n      '@return the result when {@code this} is added to m.',\n      '@return the outcome of the addition between {@code this} and m.'\n    ]\n  },\n  {\n    'tag': '@throws MatrixDimensionMismatchException if {@code m} is not the same\\nsize as this matrix.',\n    'alternatives': [\n      '@throws MatrixDimensionMismatchException if {@code m} does not have the same size as this matrix.',\n      '@throws MatrixDimensionMismatchException if the size of {@code m} differs from this matrix.',\n      '@throws MatrixDimensionMismatchException if the dimensions of {@code m} are not equal to this matrix.',\n      '@throws MatrixDimensionMismatchException if the size of {@code m} is not identical to this matrix.',\n      '@throws MatrixDimensionMismatchException if the dimensions of {@code m} are different from this matrix.'\n    ]\n  },\n  {\n    'tag': '@param m Matrix to postmultiply by.',\n    'alternatives': [\n      '@param m Matrix to postmultiply by.',\n      '@param m Matrix to multiply after this matrix.',\n      '@param m Matrix to be used in the postmultiplication.',\n      '@param m Matrix to perform postmultiplication.',\n      '@param m Matrix to multiply by in the postmultiplication.'\n    ]\n  },\n  {\n    'tag': '@return {@code this} * m.',\n    'alternatives': [\n      '@return the result of multiplying {@code this} and m.',\n      '@return the product of {@code this} and m.',\n      '@return the multiplication of {@code this} and m.',\n      '@return the result when {@code this} is multiplied by m.',\n      '@return the outcome of the multiplication between {@code this} and m.'\n    ]\n  },\n  {\n    'tag': '@throws DimensionMismatchException if the number of columns of this\\nmatrix is not equal to the number of rows of {@code m}.',\n    'alternatives': [\n      '@throws DimensionMismatchException if the count of columns in this matrix is not the same as the count of rows in {@code m}.',\n      '@throws DimensionMismatchException if the number of columns in this matrix does not equal the number of rows in {@code m}.',\n      '@throws DimensionMismatchException if the size of columns in this matrix is not equal to the size of rows in {@code m}.',\n      '@throws DimensionMismatchException if the columns of this matrix are not the same number as the rows of {@code m}.',\n      '@throws DimensionMismatchException if the number of columns in this matrix differs from the number of rows in {@code m}.'\n    ]\n  },\n  {\n    'tag': '@return the 2-dimensional array of entries.',\n    'alternatives': [\n      '@return the two-dimensional array containing the entries.',\n      '@return the entries stored in a 2-dimensional array.',\n      '@return the array of entries in a 2-dimensional representation.',\n      '@return the 2D array that holds the entries.',\n      '@return the 2-dimensional array that contains the entries.'\n    ]\n  },\n  {\n    'tag': '@return a copy of the underlying data array.',\n    'alternatives': [\n      '@return a duplicate of the underlying data array.',\n      '@return a replicated version of the underlying data array.',\n      '@return a cloned copy of the underlying data array.',\n      '@return a copied form of the underlying data array.',\n      '@return a replica of the underlying data array.'\n    ]\n  },\n  {\n    'tag': '@param in Data to copy.',\n    'alternatives': [\n      '@param in Data to duplicate.',\n      '@param in Data to replicate.',\n      '@param in Data to clone.',\n      '@param in Data to be copied.',\n      '@param in Data to be duplicated.'\n    ]\n  },\n  {\n    'tag': '@throws NoDataException if the input array is empty.',\n    'alternatives': [\n      '@throws NoDataException if the input array is devoid of data.',\n      '@throws NoDataException if the input array has no elements.',\n      '@throws NoDataException if the input array is lacking data.',\n      '@throws NoDataException if the input array does not contain any data.',\n      '@throws NoDataException if the input array has no data.'\n    ]\n  },\n  {\n    'tag': '@throws DimensionMismatchException if the input array is not rectangular.',\n    'alternatives': [\n      '@throws DimensionMismatchException if the input array is not of rectangular shape.',\n      '@throws DimensionMismatchException if the input array does not have a rectangular form.',\n      '@throws DimensionMismatchException if the input array is not in a rectangular layout.',\n      '@throws DimensionMismatchException if the input array is not arranged in a rectangular fashion.',\n      '@throws DimensionMismatchException if the input array is not in the form of a rectangle.'\n    ]\n  },\n  {\n    'tag': '@throws NullArgumentException if the input array is {@code null}.',\n    'alternatives': [\n      '@throws NullArgumentException if the input array is absent.',\n      '@throws NullArgumentException if the input array is missing.',\n      '@throws NullArgumentException if the input array is not provided.',\n      '@throws NullArgumentException if the input array is null.',\n      '@throws NullArgumentException if the input array is nonexistent.'\n    ]\n  }\n]"