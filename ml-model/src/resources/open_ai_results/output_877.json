"[\n  {\n    \"tag\": \"@param map the map to decorate, must not be null\",\n    \"alternatives\": [\n      \"@param map the decorated map, must not be null\",\n      \"@param map the map to enhance, must not be null\",\n      \"@param map the map to embellish, must not be null\",\n      \"@param map the modified map, must not be null\",\n      \"@param map the decorated map object, must not be null\"\n    ]\n  },\n  {\n    \"tag\": \"@param factory the factory to use, must not be null\",\n    \"alternatives\": [\n      \"@param factory the utilized factory, must not be null\",\n      \"@param factory the factory to employ, must not be null\",\n      \"@param factory the factory to utilize, must not be null\",\n      \"@param factory the utilized factory object, must not be null\",\n      \"@param factory the factory to be used, must not be null\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NullPointerException if list is null\",\n    \"alternatives\": [\n      \"@throws NullPointerException when list is null\",\n      \"@throws NullPointerException in case of a null list\",\n      \"@throws NullPointerException if the list parameter is null\",\n      \"@throws NullPointerException if a null list is encountered\",\n      \"@throws NullPointerException if the list is found to be null\"\n    ]\n  },\n  {\n    \"tag\": \"@param list the list to decorate, must not be null\",\n    \"alternatives\": [\n      \"@param list the decorated list, must not be null\",\n      \"@param list the enhanced list, must not be null\",\n      \"@param list the embellished list, must not be null\",\n      \"@param list the modified list, must not be null\",\n      \"@param list the decorated list object, must not be null\"\n    ]\n  },\n  {\n    \"tag\": \"@return the transformed result\",\n    \"alternatives\": [\n      \"@return the converted outcome\",\n      \"@return the modified result\",\n      \"@return the transformed output\",\n      \"@return the altered outcome\",\n      \"@return the translated result\"\n    ]\n  },\n  {\n    \"tag\": \"@param root the root object, null will result in an empty iterator\",\n    \"alternatives\": [\n      \"@param root the main object, a null value will lead to an empty iterator\",\n      \"@param root the primary object, if null, an empty iterator will be returned\",\n      \"@param root the initial object, an empty iterator will be produced when null\",\n      \"@param root the primary object, an empty iterator will be generated if null\",\n      \"@param root the main object, an empty iterator will be created if null\"\n    ]\n  },\n  {\n    \"tag\": \"@param transformer the transformer to use, null will use a no effect transformer\",\n    \"alternatives\": [\n      \"@param transformer the utilized transformer, null will utilize a null effect transformer\",\n      \"@param transformer the converter to employ, null will employ a no effect transformer\",\n      \"@param transformer the transformer to utilize, null will utilize a null effect transformer\",\n      \"@param transformer the used transformer, null will use a no effect transformer\",\n      \"@param transformer the transformer to be used, null will use a no effect transformer\"\n    ]\n  },\n  {\n    \"tag\": \"@param rootIterator the root iterator, null will result in an empty iterator\",\n    \"alternatives\": [\n      \"@param rootIterator the main iterator, a null value will lead to an empty iterator\",\n      \"@param rootIterator the primary iterator, if null, an empty iterator will be returned\",\n      \"@param rootIterator the initial iterator, an empty iterator will be produced when null\",\n      \"@param rootIterator the primary iterator, an empty iterator will be generated if null\",\n      \"@param rootIterator the main iterator, an empty iterator will be created if null\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NullPointerException if the iterator is null\",\n    \"alternatives\": [\n      \"@throws NullPointerException when the iterator is null\",\n      \"@throws NullPointerException in case of a null iterator\",\n      \"@throws NullPointerException if the iterator parameter is null\",\n      \"@throws NullPointerException if a null iterator is encountered\",\n      \"@throws NullPointerException if the iterator is found to be null\"\n    ]\n  },\n  {\n    \"tag\": \"@param iterator the iterator to decorate, must not be null\",\n    \"alternatives\": [\n      \"@param iterator the decorated iterator, must not be null\",\n      \"@param iterator the enhanced iterator, must not be null\",\n      \"@param iterator the embellished iterator, must not be null\",\n      \"@param iterator the modified iterator, must not be null\",\n      \"@param iterator the decorated iterator object, must not be null\"\n    ]\n  },\n  {\n    \"tag\": \"@return a transformed object\",\n    \"alternatives\": [\n      \"@return a converted object\",\n      \"@return a modified object\",\n      \"@return a transformed entity\",\n      \"@return an altered object\",\n      \"@return a translated result\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NullPointerException if the class is null\",\n    \"alternatives\": [\n      \"@throws NullPointerException when the class is null\",\n      \"@throws NullPointerException in case of a null class\",\n      \"@throws NullPointerException if the class parameter is null\",\n      \"@throws NullPointerException if a null class is encountered\",\n      \"@throws NullPointerException if the class is found to be null\"\n    ]\n  },\n  {\n    \"tag\": \"@param type the type to check for, may not be null\",\n    \"alternatives\": [\n      \"@param type the checked type, must not be null\",\n      \"@param type the type to verify, must not be null\",\n      \"@param type the type to examine, must not be null\",\n      \"@param type the type to validate, must not be null\",\n      \"@param type the type to be checked, must not be null\"\n    ]\n  },\n  {\n    \"tag\": \"@param predicates the predicates to check, not cloned, not null\",\n    \"alternatives\": [\n      \"@param predicates the checked predicates, not cloned, not null\",\n      \"@param predicates the predicates to verify, not cloned, not null\",\n      \"@param predicates the predicates to examine, not cloned, not null\",\n      \"@param predicates the predicates to validate, not cloned, not null\",\n      \"@param predicates the predicates to be checked, not cloned, not null\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NullPointerException if the predicates array is null\",\n    \"alternatives\": [\n      \"@throws NullPointerException when the predicates array is null\",\n      \"@throws NullPointerException in case of a null predicates array\",\n      \"@throws NullPointerException if the predicates array parameter is null\",\n      \"@throws NullPointerException if a null predicates array is encountered\",\n      \"@throws NullPointerException if the predicates array is found to be null\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NullPointerException if any predicate in the array is null\",\n    \"alternatives\": [\n      \"@throws NullPointerException when any predicate in the array is null\",\n      \"@throws NullPointerException in case of a null predicate in the array\",\n      \"@throws NullPointerException if any predicate in the array parameter is null\",\n      \"@throws NullPointerException if a null predicate in the array is encountered\",\n      \"@throws NullPointerException if any predicate in the array is found to be null\"\n    ]\n  },\n  {\n    \"tag\": \"@param predicates the predicates to check, cloned, not null\",\n    \"alternatives\": [\n      \"@param predicates the checked predicates, cloned, not null\",\n      \"@param predicates the predicates to verify, cloned, not null\",\n      \"@param predicates the predicates to examine, cloned, not null\",\n      \"@param predicates the predicates to validate, cloned, not null\",\n      \"@param predicates the predicates to be checked, cloned, not null\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NullPointerException if the predicates array is null\",\n    \"alternatives\": [\n      \"@throws NullPointerException when the predicates array is null\",\n      \"@throws NullPointerException in case of a null predicates array\",\n      \"@throws NullPointerException if the predicates array parameter is null\",\n      \"@throws NullPointerException if a null predicates array is encountered\",\n      \"@throws NullPointerException if the predicates array is found to be null\"\n    ]\n  },\n  {\n    \"tag\": \"@param predicates the predicates to check, cloned, not null\",\n    \"alternatives\": [\n      \"@param predicates the checked predicates, cloned, not null\",\n      \"@param predicates the predicates to verify, cloned, not null\",\n      \"@param predicates the predicates to examine, cloned, not null\",\n      \"@param predicates the predicates to validate, cloned, not null\",\n      \"@param predicates the predicates to be checked, cloned, not null\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NullPointerException if the transformers array is null\",\n    \"alternatives\": [\n      \"@throws NullPointerException when the transformers array is null\",\n      \"@throws NullPointerException in case of a null transformers array\",\n      \"@throws NullPointerException if the transformers array parameter is null\",\n      \"@throws NullPointerException if a null transformers array is encountered\",\n      \"@throws NullPointerException if the transformers array is found to be null\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NullPointerException if any transformer in the array is null\",\n    \"alternatives\": [\n      \"@throws NullPointerException when any transformer in the array is null\",\n      \"@throws NullPointerException in case of a null transformer in the array\",\n      \"@throws NullPointerException if any transformer in the array parameter is null\",\n      \"@throws NullPointerException if a null transformer in the array is encountered\",\n      \"@throws NullPointerException if any transformer in the array is found to be null\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NullPointerException if the transformers collection is null\",\n    \"alternatives\": [\n      \"@throws NullPointerException when the transformers collection is null\",\n      \"@throws NullPointerException in case of a null transformers collection\",\n      \"@throws NullPointerException if the transformers collection parameter is null\",\n      \"@throws NullPointerException if a null transformers collection is encountered\",\n      \"@throws NullPointerException if the transformers collection is found to be null\"\n    ]\n  },\n  {\n    \"tag\": \"@return the transformed result\",\n    \"alternatives\": [\n      \"@return the converted outcome\",\n      \"@return the modified result\",\n      \"@return the transformed output\",\n      \"@return the altered outcome\",\n      \"@return the translated result\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NullPointerException if map is null\",\n    \"alternatives\": [\n      \"@throws NullPointerException when map is null\",\n      \"@throws NullPointerException in case of a null map\",\n      \"@throws NullPointerException if the map parameter is null\",\n      \"@throws NullPointerException if a null map is encountered\",\n      \"@throws NullPointerException if the map is found to be null\"\n    ]\n  },\n  {\n    \"tag\": \"@param map the map to decorate, must not be null\",\n    \"alternatives\": [\n      \"@param map the decorated map, must not be null\",\n      \"@param map the enhanced map, must not be null\",\n      \"@param map the embellished map, must not be null\",\n      \"@param map the modified map, must not be null\",\n      \"@param map the decorated map object, must not be null\"\n    ]\n  }\n]"