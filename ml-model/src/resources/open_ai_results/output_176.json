"output = [\n  {\n    'tag': '@param original array to copy',\n    'alternatives': [\n      '@param original array to duplicate',\n      '@param array to be copied',\n      '@param input array to replicate',\n      '@param source array to clone',\n      '@param array that needs to be replicated'\n    ]\n  },\n  {\n    'tag': '@return the unique instance',\n    'alternatives': [\n      '@return the only instance',\n      '@return the singular instance',\n      '@return the one and only instance',\n      '@return the exclusive instance',\n      '@return the instance that is unique'\n    ]\n  },\n  {\n    'tag': '@return the singleton instance',\n    'alternatives': [\n      '@return the instance as a singleton',\n      '@return the single instance',\n      '@return the individual instance',\n      '@return the one and only instance',\n      '@return the sole instance'\n    ]\n  },\n  {\n    'tag': '@return the unique instance of this class',\n    'alternatives': [\n      '@return the only instance of this class',\n      '@return the singular instance of this class',\n      '@return the one and only instance of this class',\n      '@return the exclusive instance of this class',\n      '@return the instance that is unique to this class'\n    ]\n  },\n  {\n    'tag': '@return the size of the universe.',\n    'alternatives': [\n      '@return the magnitude of the universe.',\n      '@return the dimension of the universe.',\n      '@return the extent of the universe.',\n      '@return the scale of the universe.',\n      '@return the scope of the universe.'\n    ]\n  },\n  {\n    'tag': '@return the size of the subsets to be enumerated.',\n    'alternatives': [\n      '@return the magnitude of the subsets to be listed.',\n      '@return the dimension of the subsets to be counted.',\n      '@return the extent of the subsets to be enumerated.',\n      '@return the scale of the subsets to be iterated.',\n      '@return the scope of the subsets to be traversed.'\n    ]\n  },\n  {\n    'tag': '@return a lexicographic comparator.',\n    'alternatives': [\n      '@return a comparator based on lexicographic order.',\n      '@return a comparator that follows lexicographic ordering.',\n      '@return a comparator that compares based on lexicographic rules.',\n      '@return a comparator implementing lexicographic comparison.',\n      '@return a comparator that orders elements lexicographically.'\n    ]\n  },\n  {\n    'tag': '@param n Size of the set from which subsets are selected.',\n    'alternatives': [\n      '@param n Set size from which subsets are chosen.',\n      '@param n Size of the set that subsets are picked from.',\n      '@param n Size of the collection to select subsets from.',\n      '@param n Number of elements in the set to generate subsets.',\n      '@param n Size of the set used for subset generation.'\n    ]\n  },\n  {\n    'tag': '@param k Size of the subsets to be enumerated.',\n    'alternatives': [\n      '@param k Size of the subsets to be listed.',\n      '@param k Size of the subsets to be counted.',\n      '@param k Size of the subsets to iterate over.',\n      '@param k Number of elements in each enumerated subset.',\n      '@param k Size of the subsets that will be generated.'\n    ]\n  },\n  {\n    'tag': '@param n Size of the set from which subsets are selected.',\n    'alternatives': [\n      '@param n Set size from which subsets are chosen.',\n      '@param n Size of the set that subsets are picked from.',\n      '@param n Size of the collection to select subsets from.',\n      '@param n Number of elements in the set to generate subsets.',\n      '@param n Size of the set used for subset generation.'\n    ]\n  },\n  {\n    'tag': '@param k Size of the subsets to be enumerated.',\n    'alternatives': [\n      '@param k Size of the subsets to be listed.',\n      '@param k Size of the subsets to be counted.',\n      '@param k Size of the subsets to iterate over.',\n      '@param k Number of elements in each enumerated subset.',\n      '@param k Size of the subsets that will be generated.'\n    ]\n  },\n  {\n    'tag': '@param iterationOrder Specifies the {@link #iterator() iteration order}.',\n    'alternatives': [\n      '@param iterationOrder Determines the {@link #iterator() iteration order}.',\n      '@param iterationOrder Defines the {@link #iterator() iteration order}.',\n      '@param iterationOrder Sets the {@link #iterator() iteration order}.',\n      '@param iterationOrder Specifies the order of {@link #iterator() iteration}.',\n      '@param iterationOrder Determines the order of {@link #iterator() iteration}.'\n    ]\n  },\n  {\n    'tag': '@throws org.apache.commons.math3.exception.NotPositiveException if {@code n < 0}.',\n    'alternatives': [\n      '@throws org.apache.commons.math3.exception.NotPositiveException when {@code n < 0}.',\n      '@throws org.apache.commons.math3.exception.NotPositiveException if the value of {@code n} is negative.',\n      '@throws org.apache.commons.math3.exception.NotPositiveException in case of a negative {@code n}.',\n      '@throws org.apache.commons.math3.exception.NotPositiveException if the input {@code n} is less than zero.',\n      '@throws org.apache.commons.math3.exception.NotPositiveException when the value of {@code n} is less than zero.'\n    ]\n  },\n  {\n    'tag': '@throws org.apache.commons.math3.exception.NumberIsTooLargeException if {@code k > n}.',\n    'alternatives': [\n      '@throws org.apache.commons.math3.exception.NumberIsTooLargeException when {@code k > n}.',\n      '@throws org.apache.commons.math3.exception.NumberIsTooLargeException if the value of {@code k} is greater than {@code n}.',\n      '@throws org.apache.commons.math3.exception.NumberIsTooLargeException in case {@code k} is larger than {@code n}.',\n      '@throws org.apache.commons.math3.exception.NumberIsTooLargeException if the input {@code k} exceeds {@code n}.',\n      '@throws org.apache.commons.math3.exception.NumberIsTooLargeException when the value of {@code k} surpasses {@code n}.'\n    ]\n  },\n  {\n    'tag': '@param value the value to be hashed',\n    'alternatives': [\n      '@param value the value to compute the hash of',\n      '@param value the value to generate a hash for',\n      '@param value the value that needs to be hashed',\n      '@param value the value used for hashing',\n      '@param value the value to compute the hashcode for'\n    ]\n  },\n  {\n    'tag': '@return the hash code',\n    'alternatives': [\n      '@return the hash value',\n      '@return the computed hashcode',\n      '@return the result of the hashing operation',\n      '@return the generated hash code',\n      '@return the calculated hash value'\n    ]\n  },\n  {\n    'tag': '@param x Value',\n    'alternatives': [\n      '@param x Input value',\n      '@param x Numerical value',\n      '@param x Variable value',\n      '@param x Element value',\n      '@param x The value of x'\n    ]\n  },\n  {\n    'tag': '@param y Value',\n    'alternatives': [\n      '@param y Input value',\n      '@param y Numerical value',\n      '@param y Variable value',\n      '@param y Element value',\n      '@param y The value of y'\n    ]\n  },\n  {\n    'tag': '@return {@code new Double(x).equals(new Double(y))}',\n    'alternatives': [\n      '@return true if {@code new Double(x).equals(new Double(y))}',\n      '@return {@code true} if {@code new Double(x).equals(new Double(y))}',\n      '@return determines the equality of {@code new Double(x)} and {@code new Double(y)}',\n      '@return indicates whether {@code new Double(x)} is equal to {@code new Double(y)}',\n      '@return checks if {@code new Double(x)} is equivalent to {@code new Double(y)}'\n    ]\n  },\n  {\n    'tag': '@param value the value to be hashed (may be null)',\n    'alternatives': [\n      '@param value the value to compute the hash of (can be null)',\n      '@param value the value to generate a hash for (possibly null)',\n      '@param value the value that needs to be hashed (null allowed)',\n      '@param value the value used for hashing (nullable)',\n      '@param value the value to compute the hashcode for (can be null)'\n    ]\n  },\n  {\n    'tag': '@return the hash code',\n    'alternatives': [\n      '@return the hash value',\n      '@return the computed hashcode',\n      '@return the result of the hashing operation',\n      '@return the generated hash code',\n      '@return the calculated hash value'\n    ]\n  },\n  {\n    'tag': '@param a angle to normalize',\n    'alternatives': [\n      '@param a angle to be standardized',\n      '@param a angle to bring into a standard form',\n      '@param a angle to convert to a normalized representation',\n      '@param a angle to transform into a standardized format',\n      '@param a angle that needs to be normalized'\n    ]\n  },\n  {\n    'tag': '@param center center of the desired 2&pi; interval for the result',\n    'alternatives': [\n      '@param center midpoint of the intended 2&pi; range for the output',\n      '@param center the central point of the 2&pi; interval to be obtained',\n      '@param center middle point of the desired 2&pi; range for the outcome',\n      '@param center focal point of the target 2&pi; interval of the result',\n      '@param center central element of the 2&pi; span that is aimed for'\n    ]\n  },\n  {\n    'tag': '@param <T> the type of the field elements',\n    'alternatives': [\n      '@param <T> the data type of the field elements',\n      '@param <T> the kind of the field elements',\n      '@param <T> the class of the field elements',\n      '@param <T> the category of the field elements',\n      '@param <T> the type that the field elements belong to'\n    ]\n  },\n  {\n    'tag': '@param e1 first element',\n    'alternatives': [\n      '@param e1 initial element',\n      '@param e1 starting point',\n      '@param e1 primary element',\n      '@param e1 beginning item',\n      '@param e1 element at the start'\n    ]\n  }\n]"