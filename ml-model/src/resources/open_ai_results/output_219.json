"output = [\n  {\n    'tag': '@param multiset the multiset to decorate, may not be null',\n    'alternatives': [\n      '@param collection the collection to enhance, must not be null',\n      '@param set the set to embellish, must not be null',\n      '@param container the container to adorn, may not be null',\n      '@param bag the bag to accessorize, may not be null',\n      '@param list the list to augment, must not be null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if queue or predicate is null',\n    'alternatives': [\n      '@throws NullPointerException if queue or condition is null',\n      '@throws NullPointerException if queue or checker is null',\n      '@throws NullPointerException if queue or evaluator is null',\n      '@throws NullPointerException if queue or validator is null',\n      '@throws NullPointerException if queue or tester is null'\n    ]\n  },\n  {\n    'tag': '@param queue the queue to decorate, must not be null',\n    'alternatives': [\n      '@param queue the queue to enhance, must not be null',\n      '@param queue the queue to modify, must not be null',\n      '@param queue the queue to manipulate, must not be null',\n      '@param queue the queue to adjust, must not be null',\n      '@param queue the queue to transform, must not be null'\n    ]\n  },\n  {\n    'tag': '@param predicate the predicate to use for validation, must not be null',\n    'alternatives': [\n      '@param criterion the criterion to apply for validation, must not be null',\n      '@param condition the condition to utilize for validation, must not be null',\n      '@param checker the checker to employ for validation, must not be null',\n      '@param evaluator the evaluator to utilize for validation, must not be null',\n      '@param validator the validator to use for validation, must not be null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if queue or predicate is null',\n    'alternatives': [\n      '@throws NullPointerException if queue or condition is null',\n      '@throws NullPointerException if queue or checker is null',\n      '@throws NullPointerException if queue or evaluator is null',\n      '@throws NullPointerException if queue or validator is null',\n      '@throws NullPointerException if queue or tester is null'\n    ]\n  },\n  {\n    'tag': '@param Queue the queue to decorate, must not be null',\n    'alternatives': [\n      '@param Stack the stack to enhance, must not be null',\n      '@param ArrayBlockingQueue the blocking queue to decorate, must not be null',\n      '@param PriorityQueue the priority queue to adorn, must not be null',\n      '@param Deque the deque to embellish, must not be null',\n      '@param ConcurrentLinkedDeque the linked deque to accessorize, must not be null'\n    ]\n  },\n  {\n    'tag': '@param predicate the predicate to use for validation, must not be null',\n    'alternatives': [\n      '@param function the function to apply for validation, must not be null',\n      '@param condition the condition to utilize for validation, must not be null',\n      '@param checker the checker to employ for validation, must not be null',\n      '@param evaluator the evaluator to utilize for validation, must not be null',\n      '@param validator the validator to use for validation, must not be null'\n    ]\n  },\n  {\n    'tag': '@throws FunctorException always',\n    'alternatives': [\n      '@throws FunctorException invariably',\n      '@throws FunctorException consistently',\n      '@throws FunctorException perpetually',\n      '@throws FunctorException constantly'\n    ]\n  },\n  {\n    'tag': '@throws ArrayIndexOutOfBoundsException if <code>index</code> is less than\\n        zero.',\n    'alternatives': [\n      '@throws ArrayIndexOutOfBoundsException if the <code>index</code> is negative.',\n      '@throws ArrayIndexOutOfBoundsException if the <code>index</code> is below zero.',\n      '@throws ArrayIndexOutOfBoundsException if the value of <code>index</code> is negative.',\n      '@throws ArrayIndexOutOfBoundsException if the value of <code>index</code> is less than zero.',\n      '@throws ArrayIndexOutOfBoundsException if <code>index</code> is negative.'\n    ]\n  },\n  {\n    'tag': '@param isLast true if the step is the last one',\n    'alternatives': [\n      '@param isLast set to true if it is the final step',\n      '@param isLast specify whether it is the last step',\n      '@param isLast indicates if it is the final step',\n      '@param isLast determines if it is the last step',\n      '@param isLast determine whether it is the last step'\n    ]\n  },\n  {\n    'tag': '@throws NullArgumentException if {@code cb} is {@code null}',\n    'alternatives': [\n      '@throws NullArgumentException if {@code cb} is absent',\n      '@throws NullArgumentException if {@code cb} is missing',\n      '@throws NullArgumentException if {@code cb} is nonexistent',\n      '@throws NullArgumentException if {@code cb} is not provided',\n      '@throws NullArgumentException if {@code cb} is null'\n    ]\n  },\n  {\n    'tag': '@param isPlusChild if true and if parentTree is not null, the\\nresulting tree should be the plus child of its parent, ignored if\\nparentTree is null',\n    'alternatives': [\n      '@param isPlusChild if true and, if parentTree is not null, the\\nresulting tree will be the plus child of its parent, disregarded if\\nparentTree is null',\n      '@param isPlusChild if true and, in the presence of parentTree, the\\nresulting tree must be the plus child of its parent, not considered if\\nparentTree is null',\n      '@param isPlusChild if true and, if parentTree exists, the\\nresulting tree ought to be the plus child of its parent, excluded if\\nparentTree is null',\n      '@param isPlusChild if true and, if parentTree is non-null, the\\nresulting tree should become the plus child of its parent, neglected if\\nparentTree is null',\n      '@param isPlusChild if true and, if parentTree is not null, the\\nresulting tree shall be the plus child of its parent, disallowed if\\nparentTree is null'\n    ]\n  },\n  {\n    'tag': '@param isPlusChild if true and if parentTree is not null, the\\nresulting tree should be the plus child of its parent, ignored if\\nparentTree is null',\n    'alternatives': [\n      '@param isPlusChild if true and, if parentTree is not null, the\\nresulting tree will be the plus child of its parent, disregarded if\\nparentTree is null',\n      '@param isPlusChild if true and, in the presence of parentTree, the\\nresulting tree must be the plus child of its parent, not considered if\\nparentTree is null',\n      '@param isPlusChild if true and, if parentTree exists, the\\nresulting tree ought to be the plus child of its parent, excluded if\\nparentTree is null',\n      '@param isPlusChild if true and, if parentTree is non-null, the\\nresulting tree should become the plus child of its parent, neglected if\\nparentTree is null',\n      '@param isPlusChild if true and, if parentTree is not null, the\\nresulting tree shall be the plus child of its parent, disallowed if\\nparentTree is null'\n    ]\n  },\n  {\n    'tag': '@return the proportion of values equal to v',\n    'alternatives': [\n      '@return the fraction of values identical to v',\n      '@return the ratio of values that are equal to v',\n      '@return the share of values that match v',\n      '@return the percentage of values that are the same as v',\n      '@return the portion of values that correspond to v'\n    ]\n  },\n  {\n    'tag': '@return the proportion of values equal to v',\n    'alternatives': [\n      '@return the fraction of values identical to v',\n      '@return the ratio of values that are equal to v',\n      '@return the share of values that match v',\n      '@return the percentage of values that are the same as v',\n      '@return the portion of values that correspond to v'\n    ]\n  },\n  {\n    'tag': '@return the proportion of values equal to v',\n    'alternatives': [\n      '@return the fraction of values identical to v',\n      '@return the ratio of values that are equal to v',\n      '@return the share of values that match v',\n      '@return the percentage of values that are the same as v',\n      '@return the portion of values that correspond to v'\n    ]\n  },\n  {\n    'tag': '@return the proportion of values equal to v',\n    'alternatives': [\n      '@return the fraction of values identical to v',\n      '@return the ratio of values that are equal to v',\n      '@return the share of values that match v',\n      '@return the percentage of values that are the same as v',\n      '@return the portion of values that correspond to v'\n    ]\n  },\n  {\n    'tag': '@return the proportion of values equal to v',\n    'alternatives': [\n      '@return the fraction of values identical to v',\n      '@return the ratio of values that are equal to v',\n      '@return the share of values that match v',\n      '@return the percentage of values that are the same as v',\n      '@return the portion of values that correspond to v'\n    ]\n  },\n  {\n    'tag': '@return the proportion of values equal to v',\n    'alternatives': [\n      '@return the fraction of values identical to v',\n      '@return the ratio of values that are equal to v',\n      '@return the share of values that match v',\n      '@return the percentage of values that are the same as v',\n      '@return the portion of values that correspond to v'\n    ]\n  },\n  {\n    'tag': '@return the proportion of values less than or equal to v',\n    'alternatives': [\n      '@return the fraction of values that are smaller or equal to v',\n      '@return the ratio of values that are less than or equal to v',\n      '@return the share of values that are lower or equal to v',\n      '@return the percentage of values that are not greater than v',\n      '@return the portion of values that are lesser or equal to v'\n    ]\n  },\n  {\n    'tag': '@return the proportion of values less than or equal to v',\n    'alternatives': [\n      '@return the fraction of values that are smaller or equal to v',\n      '@return the ratio of values that are less than or equal to v',\n      '@return the share of values that are lower or equal to v',\n      '@return the percentage of values that are not greater than v',\n      '@return the portion of values that are lesser or equal to v'\n    ]\n  },\n  {\n    'tag': '@return the proportion of values less than or equal to v',\n    'alternatives': [\n      '@return the fraction of values that are smaller or equal to v',\n      '@return the ratio of values that are less than or equal to v',\n      '@return the share of values that are lower or equal to v',\n      '@return the percentage of values that are not greater than v',\n      '@return the portion of values that are lesser or equal to v'\n    ]\n  },\n  {\n    'tag': '@throws NullArgumentException if {@code other} is null',\n    'alternatives': [\n      '@throws NullArgumentException if {@code other} is missing',\n      '@throws NullArgumentException if {@code other} is nonexistent',\n      '@throws NullArgumentException if {@code other} is not provided',\n      '@throws NullArgumentException if {@code other} is absent',\n      '@throws NullArgumentException if {@code other} is null'\n    ]\n  },\n  {\n    'tag': '@throws NullArgumentException if the collection is null',\n    'alternatives': [\n      '@throws NullArgumentException if the collection is missing',\n      '@throws NullArgumentException if the collection is nonexistent',\n      '@throws NullArgumentException if the collection is not provided',\n      '@throws NullArgumentException if the collection is absent',\n      '@throws NullArgumentException if the collection is null'\n    ]\n  },\n  {\n    'tag': '@throws MathIllegalArgumentException if {@code initialCapacity <= 0}.',\n    'alternatives': [\n      '@throws MathIllegalArgumentException if {@code initialCapacity} is not positive.',\n      '@throws MathIllegalArgumentException if {@code initialCapacity} is zero or negative.',\n      '@throws MathIllegalArgumentException if the value of {@code initialCapacity} is not greater than zero.',\n      '@throws MathIllegalArgumentException if {@code initialCapacity} is below or equal to zero.',\n      '@throws MathIllegalArgumentException if {@code initialCapacity} is not above zero.'\n    ]\n  }\n]"