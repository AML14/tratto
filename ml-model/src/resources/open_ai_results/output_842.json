"output=[\n  {\n    'tag': '@return the eldest key',\n    'alternatives': [\n      '@return the oldest key',\n      '@return the first key',\n      '@return the key that has been present for the longest time',\n      '@return the key that has been stored the earliest',\n      '@return the key with the highest age'\n    ]\n  },\n  {\n    'tag': '@return the most recently inserted key',\n    'alternatives': [\n      '@return the latest inserted key',\n      '@return the key that was inserted most recently',\n      '@return the key that has been stored most recently',\n      '@return the key with the most recent insertion',\n      '@return the key that was added last'\n    ]\n  },\n  {\n    'tag': '@param key the key to get after',\n    'alternatives': [\n      '@param key the key to retrieve after',\n      '@param key the key to get next',\n      '@param key the key to obtain after',\n      '@param key the key to fetch after',\n      '@param key the key to retrieve following'\n    ]\n  },\n  {\n    'tag': '@return the next key',\n    'alternatives': [\n      '@return the subsequent key',\n      '@return the key that follows',\n      '@return the key that comes next',\n      '@return the key after',\n      '@return the key to get next'\n    ]\n  },\n  {\n    'tag': '@param key the key to get before',\n    'alternatives': [\n      '@param key the key to retrieve before',\n      '@param key the key to obtain before',\n      '@param key the key to fetch before',\n      '@param key the key to retrieve prior to',\n      '@param key the key to access before'\n    ]\n  },\n  {\n    'tag': '@return the previous key',\n    'alternatives': [\n      '@return the key that was before',\n      '@return the key that precedes',\n      '@return the key that comes before',\n      '@return the key prior to',\n      '@return the key to get previous'\n    ]\n  },\n  {\n    'tag': '@param index the index to retrieve',\n    'alternatives': [\n      '@param index the index to obtain',\n      '@param index the index to access',\n      '@param index the index to fetch',\n      '@param index the index to get',\n      '@param index the index to retrieve from'\n    ]\n  },\n  {\n    'tag': '@return the key at the specified index',\n    'alternatives': [\n      '@return the key located at the given index',\n      '@return the key found at the specified index',\n      '@return the key obtained from the index',\n      '@return the key retrieved from the index',\n      '@return the key that is at the provided index'\n    ]\n  },\n  {\n    'tag': '@throws IndexOutOfBoundsException if the index is invalid',\n    'alternatives': [\n      '@throws IndexOutOfBoundsException if the index is not valid',\n      '@throws IndexOutOfBoundsException when the index is out of bounds',\n      '@throws IndexOutOfBoundsException if the index is out of range',\n      '@throws IndexOutOfBoundsException if the provided index is invalid',\n      '@throws IndexOutOfBoundsException in case of an invalid index'\n    ]\n  },\n  {\n    'tag': '@param entry the entry to add',\n    'alternatives': [\n      '@param entry the entry to insert',\n      '@param entry the entry to include',\n      '@param entry the entry to put',\n      '@param entry the entry to place',\n      '@param entry the entry to append'\n    ]\n  },\n  {\n    'tag': '@param hashIndex the index into the data array to store at',\n    'alternatives': [\n      '@param hashIndex the index to store at within the data array',\n      '@param hashIndex the index where to store within the data array',\n      '@param hashIndex the index for storing in the data array',\n      '@param hashIndex the index to place in the data array',\n      '@param hashIndex the index used for storage in the data array'\n    ]\n  },\n  {\n    'tag': '@param next the next entry in sequence',\n    'alternatives': [\n      '@param next the entry that follows in the sequence',\n      '@param next the subsequent entry in line',\n      '@param next the entry that comes next in order',\n      '@param next the entry that is next in the sequence',\n      '@param next the entry following in sequence'\n    ]\n  },\n  {\n    'tag': '@param hashCode the hash code to use',\n    'alternatives': [\n      '@param hashCode the hash code to utilize',\n      '@param hashCode the hash code to employ',\n      '@param hashCode the hash code to apply',\n      '@param hashCode the hash code to utilize',\n      '@param hashCode the hash code to make use of'\n    ]\n  },\n  {\n    'tag': '@param key the key to store',\n    'alternatives': [\n      '@param key the key to hold',\n      '@param key the key to save',\n      '@param key the key to maintain',\n      '@param key the key to retain',\n      '@param key the key to keep'\n    ]\n  },\n  {\n    'tag': '@param value the value to store',\n    'alternatives': [\n      '@param value the value to hold',\n      '@param value the value to save',\n      '@param value the value to maintain',\n      '@param value the value to retain',\n      '@param value the value to keep'\n    ]\n  },\n  {\n    'tag': '@return the newly created entry',\n    'alternatives': [\n      '@return the entry that has just been created',\n      '@return the recently generated entry',\n      '@return the entry that was freshly created',\n      '@return the entry that has been newly added',\n      '@return the entry that was just created'\n    ]\n  },\n  {\n    'tag': '@param entry the entry to remove',\n    'alternatives': [\n      '@param entry the entry to delete',\n      '@param entry the entry to eliminate',\n      '@param entry the entry to eradicate',\n      '@param entry the entry to erase',\n      '@param entry the entry to clear'\n    ]\n  },\n  {\n    'tag': '@param hashIndex the index into the data structure',\n    'alternatives': [\n      '@param hashIndex the index within the data structure',\n      '@param hashIndex the index in the data structure',\n      '@param hashIndex the index for the data structure',\n      '@param hashIndex the index to access the data structure',\n      '@param hashIndex the index used for the data structure'\n    ]\n  },\n  {\n    'tag': '@param previous the previous entry in the chain',\n    'alternatives': [\n      '@param previous the entry that comes before in the chain',\n      '@param previous the entry preceding in the chain',\n      '@param previous the entry that was before in the chain',\n      '@param previous the entry that is prior in the chain',\n      '@param previous the entry that precedes in the chain'\n    ]\n  },\n  {\n    'tag': '@param entry the entry to query, must not be null',\n    'alternatives': [\n      '@param entry the entry to inquire, must not be null',\n      '@param entry the entry to examine, must not be null',\n      '@param entry the entry to investigate, must not be null',\n      '@param entry the entry to check, must not be null',\n      '@param entry the entry to inspect, must not be null'\n    ]\n  },\n  {\n    'tag': '@return the <code>before</code> field of the entry',\n    'alternatives': [\n      '@return the <code>before</code> attribute of the entry',\n      '@return the value of the <code>before</code> field in the entry',\n      '@return the content of the <code>before</code> field of the entry',\n      '@return the value stored in the <code>before</code> field of the entry',\n      '@return the <code>before</code> property of the entry'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if the entry is null',\n    'alternatives': [\n      '@throws NullPointerException if the entry is empty',\n      '@throws NullPointerException when the entry is missing',\n      '@throws NullPointerException if the entry is absent',\n      '@throws NullPointerException if the entry does not exist',\n      '@throws NullPointerException in case of a null entry'\n    ]\n  },\n  {\n    'tag': '@param entry the entry to query, must not be null',\n    'alternatives': [\n      '@param entry the entry to inquire, must not be null',\n      '@param entry the entry to examine, must not be null',\n      '@param entry the entry to investigate, must not be null',\n      '@param entry the entry to check, must not be null',\n      '@param entry the entry to inspect, must not be null'\n    ]\n  },\n  {\n    'tag': '@return the <code>after</code> field of the entry',\n    'alternatives': [\n      '@return the <code>after</code> attribute of the entry',\n      '@return the value of the <code>after</code> field in the entry',\n      '@return the content of the <code>after</code> field of the entry',\n      '@return the value stored in the <code>after</code> field of the entry',\n      '@return the <code>after</code> property of the entry'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if the entry is null',\n    'alternatives': [\n      '@throws NullPointerException if the entry is empty',\n      '@throws NullPointerException when the entry is missing',\n      '@throws NullPointerException if the entry is absent',\n      '@throws NullPointerException if the entry does not exist',\n      '@throws NullPointerException in case of a null entry'\n    ]\n  }\n]"