"output=[\n  {\n    'tag': '@param tolerance tolerance below which points are considered identical',\n    'alternatives': [\n      '@param tolerance tolerance considered identical if below a certain value',\n      '@param tolerance below which points are deemed identical',\n      '@param tolerance threshold below which points are treated as identical',\n      '@param tolerance the value below which points are considered equal',\n      '@param tolerance value indicating the threshold for treating points as identical'\n    ]\n  },\n  {\n    'tag': '@throws MathArithmeticException if the normal norm is too small',\n    'alternatives': [\n      '@throws MathArithmeticException if the magnitude of the normal is too small',\n      '@throws MathArithmeticException if the norm of the normal is below a certain threshold',\n      '@throws MathArithmeticException if the normal's norm is considered too small',\n      '@throws MathArithmeticException if the normal's norm falls below a specified limit',\n      '@throws MathArithmeticException if the magnitude of the normal is deemed too small'\n    ]\n  },\n  {\n    'tag': '@param p point belonging to the plane',\n    'alternatives': [\n      '@param p point that belongs to the plane',\n      '@param p point associated with the plane',\n      '@param p point that is part of the plane',\n      '@param p point that is included in the plane',\n      '@param p point which pertains to the plane'\n    ]\n  },\n  {\n    'tag': '@param normal normal direction to the plane',\n    'alternatives': [\n      '@param normal direction of the plane's normal',\n      '@param normal direction vector of the plane',\n      '@param normal vector representing the plane's normal',\n      '@param normal vector that defines the plane's orientation',\n      '@param normal vector perpendicular to the plane'\n    ]\n  },\n  {\n    'tag': '@param tolerance tolerance below which points are considered identical',\n    'alternatives': [\n      '@param tolerance tolerance considered identical if below a certain value',\n      '@param tolerance below which points are deemed identical',\n      '@param tolerance threshold below which points are treated as identical',\n      '@param tolerance the value below which points are considered equal',\n      '@param tolerance value indicating the threshold for treating points as identical'\n    ]\n  },\n  {\n    'tag': '@throws MathArithmeticException if the normal norm is too small',\n    'alternatives': [\n      '@throws MathArithmeticException if the magnitude of the normal is too small',\n      '@throws MathArithmeticException if the norm of the normal is below a certain threshold',\n      '@throws MathArithmeticException if the normal's norm is considered too small',\n      '@throws MathArithmeticException if the normal's norm falls below a specified limit',\n      '@throws MathArithmeticException if the magnitude of the normal is deemed too small'\n    ]\n  },\n  {\n    'tag': '@param p1 first point belonging to the plane',\n    'alternatives': [\n      '@param p1 first point that belongs to the plane',\n      '@param p1 first point associated with the plane',\n      '@param p1 first point that is part of the plane',\n      '@param p1 first point that is included in the plane',\n      '@param p1 first point which pertains to the plane'\n    ]\n  },\n  {\n    'tag': '@param p2 second point belonging to the plane',\n    'alternatives': [\n      '@param p2 second point that belongs to the plane',\n      '@param p2 second point associated with the plane',\n      '@param p2 second point that is part of the plane',\n      '@param p2 second point that is included in the plane',\n      '@param p2 second point which pertains to the plane'\n    ]\n  },\n  {\n    'tag': '@param p3 third point belonging to the plane',\n    'alternatives': [\n      '@param p3 third point that belongs to the plane',\n      '@param p3 third point associated with the plane',\n      '@param p3 third point that is part of the plane',\n      '@param p3 third point that is included in the plane',\n      '@param p3 third point which pertains to the plane'\n    ]\n  },\n  {\n    'tag': '@param tolerance tolerance below which points are considered identical',\n    'alternatives': [\n      '@param tolerance tolerance considered identical if below a certain value',\n      '@param tolerance below which points are deemed identical',\n      '@param tolerance threshold below which points are treated as identical',\n      '@param tolerance the value below which points are considered equal',\n      '@param tolerance value indicating the threshold for treating points as identical'\n    ]\n  },\n  {\n    'tag': '@throws MathArithmeticException if the points do not constitute a plane',\n    'alternatives': [\n      '@throws MathArithmeticException if the points do not form a plane',\n      '@throws MathArithmeticException if the provided points do not represent a plane',\n      '@throws MathArithmeticException if the points do not define a valid plane',\n      '@throws MathArithmeticException if the given points cannot be considered a plane',\n      '@throws MathArithmeticException if the points do not satisfy the conditions for a plane'\n    ]\n  },\n  {\n    'tag': '@param normal normal direction to the plane',\n    'alternatives': [\n      '@param normal direction of the plane's normal',\n      '@param normal direction vector of the plane',\n      '@param normal vector representing the plane's normal',\n      '@param normal vector that defines the plane's orientation',\n      '@param normal vector perpendicular to the plane'\n    ]\n  },\n  {\n    'tag': '@throws MathArithmeticException if the normal norm is too small',\n    'alternatives': [\n      '@throws MathArithmeticException if the magnitude of the normal is too small',\n      '@throws MathArithmeticException if the norm of the normal is below a certain threshold',\n      '@throws MathArithmeticException if the normal's norm is considered too small',\n      '@throws MathArithmeticException if the normal's norm falls below a specified limit',\n      '@throws MathArithmeticException if the magnitude of the normal is deemed too small'\n    ]\n  },\n  {\n    'tag': '@param p point belonging to the plane',\n    'alternatives': [\n      '@param p point that belongs to the plane',\n      '@param p point associated with the plane',\n      '@param p point that is part of the plane',\n      '@param p point that is included in the plane',\n      '@param p point which pertains to the plane'\n    ]\n  },\n  {\n    'tag': '@param normal normal direction to the plane',\n    'alternatives': [\n      '@param normal direction of the plane's normal',\n      '@param normal direction vector of the plane',\n      '@param normal vector representing the plane's normal',\n      '@param normal vector that defines the plane's orientation',\n      '@param normal vector perpendicular to the plane'\n    ]\n  },\n  {\n    'tag': '@throws MathArithmeticException if the normal norm is too small',\n    'alternatives': [\n      '@throws MathArithmeticException if the magnitude of the normal is too small',\n      '@throws MathArithmeticException if the norm of the normal is below a certain threshold',\n      '@throws MathArithmeticException if the normal's norm is considered too small',\n      '@throws MathArithmeticException if the normal's norm falls below a specified limit',\n      '@throws MathArithmeticException if the magnitude of the normal is deemed too small'\n    ]\n  },\n  {\n    'tag': '@param p1 first point belonging to the plane',\n    'alternatives': [\n      '@param p1 first point that belongs to the plane',\n      '@param p1 first point associated with the plane',\n      '@param p1 first point that is part of the plane',\n      '@param p1 first point that is included in the plane',\n      '@param p1 first point which pertains to the plane'\n    ]\n  },\n  {\n    'tag': '@param p2 second point belonging to the plane',\n    'alternatives': [\n      '@param p2 second point that belongs to the plane',\n      '@param p2 second point associated with the plane',\n      '@param p2 second point that is part of the plane',\n      '@param p2 second point that is included in the plane',\n      '@param p2 second point which pertains to the plane'\n    ]\n  },\n  {\n    'tag': '@param p3 third point belonging to the plane',\n    'alternatives': [\n      '@param p3 third point that belongs to the plane',\n      '@param p3 third point associated with the plane',\n      '@param p3 third point that is part of the plane',\n      '@param p3 third point that is included in the plane',\n      '@param p3 third point which pertains to the plane'\n    ]\n  },\n  {\n    'tag': '@throws MathArithmeticException if the points do not constitute a plane',\n    'alternatives': [\n      '@throws MathArithmeticException if the points do not form a plane',\n      '@throws MathArithmeticException if the provided points do not represent a plane',\n      '@throws MathArithmeticException if the points do not define a valid plane',\n      '@throws MathArithmeticException if the given points cannot be considered a plane',\n      '@throws MathArithmeticException if the points do not satisfy the conditions for a plane'\n    ]\n  },\n  {\n    'tag': '@param plane plane to copy',\n    'alternatives': [\n      '@param plane to be copied',\n      '@param plane that will be cloned',\n      '@param copy of the plane',\n      '@param the plane to duplicate',\n      '@param plane object to replicate'\n    ]\n  },\n  {\n    'tag': '@param c1 first column',\n    'alternatives': [\n      '@param c1 initial column',\n      '@param c1 the first column',\n      '@param c1 primary column',\n      '@param c1 column number one',\n      '@param c1 initial data column'\n    ]\n  },\n  {\n    'tag': '@param c2 second column',\n    'alternatives': [\n      '@param c2 next column',\n      '@param c2 the second column',\n      '@param c2 secondary column',\n      '@param c2 column number two',\n      '@param c2 subsequent data column'\n    ]\n  },\n  {\n    'tag': '@param c3 third column',\n    'alternatives': [\n      '@param c3 additional column',\n      '@param c3 the third column',\n      '@param c3 tertiary column',\n      '@param c3 column number three',\n      '@param c3 extra data column'\n    ]\n  },\n  {\n    'tag': '@return value of the minor computed has an exact fraction',\n    'alternatives': [\n      '@return exact fraction value of the computed minor',\n      '@return the minor value computed as an exact fraction',\n      '@return calculated minor value represented as an exact fraction',\n      '@return computed minor value given as an exact fraction',\n      '@return the exact fraction value of the minor that was computed'\n    ]\n  }\n]"