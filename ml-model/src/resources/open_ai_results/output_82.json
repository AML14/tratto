"output = [\n  {\n    'tag': '@return Set of NumberTransformers',\n    'alternatives': [\n      '@return Collection of NumberTransformers',\n      '@return Array of NumberTransformers',\n      '@return Group of NumberTransformers',\n      '@return Assortment of NumberTransformers',\n      '@return Aggregate of NumberTransformers'\n    ]\n  },\n  {\n    'tag': '@param o the Object to be transformed.',\n    'alternatives': [\n      '@param obj the Object to undergo transformation.',\n      '@param input the Object to be converted.',\n      '@param target the Object to be changed.',\n      '@param source the Object to be modified.',\n      '@param entity the Object to be altered.'\n    ]\n  },\n  {\n    'tag': '@return the double value of the Object.',\n    'alternatives': [\n      '@return the floating-point value of the Object.',\n      '@return the decimal value of the Object.',\n      '@return the numeric value of the Object.',\n      '@return the real value of the Object.',\n      '@return the numerical value of the Object.'\n    ]\n  },\n  {\n    'tag': '@throws MathIllegalArgumentException if the Object can not be\\ntransformed into a Double.',\n    'alternatives': [\n      '@throws MathIllegalArgumentException if the Object is not convertible to a Double.',\n      '@throws MathIllegalArgumentException if the Object cannot be converted into a Double.',\n      '@throws MathIllegalArgumentException if the Object fails to transform into a Double.',\n      '@throws MathIllegalArgumentException if the Object does not comply with Double conversion.',\n      '@throws MathIllegalArgumentException if the Object is unsuitable for Double transformation.'\n    ]\n  },\n  {\n    'tag': '@param start First value of the range.',\n    'alternatives': [\n      '@param startValue Initial value of the range.',\n      '@param initial First element of the range.',\n      '@param rangeStart Beginning value of the range.',\n      '@param first First item of the range.',\n      '@param from Starting point of the range.'\n    ]\n  },\n  {\n    'tag': '@param end Last value of the range.',\n    'alternatives': [\n      '@param endValue Final value of the range.',\n      '@param final Last element of the range.',\n      '@param rangeEnd Ending value of the range.',\n      '@param last Last item of the range.',\n      '@param to End point of the range.'\n    ]\n  },\n  {\n    'tag': '@return a range.',\n    'alternatives': [\n      '@return an interval.',\n      '@return a span.',\n      '@return a sequence of values.',\n      '@return a series of numbers.',\n      '@return a collection of continuous elements.'\n    ]\n  },\n  {\n    'tag': '@param start First value of the range.',\n    'alternatives': [\n      '@param initial First element of the range.',\n      '@param rangeStart Beginning value of the range.',\n      '@param first First item of the range.',\n      '@param from Starting point of the range.',\n      '@param outset Initial element of the range.'\n    ]\n  },\n  {\n    'tag': '@param max Last value of the range that satisfies the above\\nconstruction rule.',\n    'alternatives': [\n      '@param maximum Upper limit of the range meeting the aforementioned construction requirement.',\n      '@param upperBound Final value of the range that fulfills the above-mentioned construction rule.',\n      '@param endValue Last element of the range that meets the aforementioned rule of construction.',\n      '@param highest Last value of the range that satisfies the aforementioned condition for construction.',\n      '@param ceiling Last bound of the range that satisfies the above construction rule.'\n    ]\n  },\n  {\n    'tag': '@param step Increment.',\n    'alternatives': [\n      '@param increment Amount of increase.',\n      '@param increase Value added at each step.',\n      '@param stride Displacement value.',\n      '@param interval Change in value.',\n      '@param jump Step size.'\n    ]\n  },\n  {\n    'tag': '@return a range.',\n    'alternatives': [\n      '@return an interval.',\n      '@return a span.',\n      '@return a sequence of values.',\n      '@return a series of numbers.',\n      '@return a collection of continuous elements.'\n    ]\n  },\n  {\n    'tag': '@return a clone of the data array.',\n    'alternatives': [\n      '@return a copy of the data array.',\n      '@return a duplicated data array.',\n      '@return a replicated data array.',\n      '@return an exact replica of the data array.',\n      '@return a replica of the data array.'\n    ]\n  },\n  {\n    'tag': '@return a clone of the data array.',\n    'alternatives': [\n      '@return a copy of the data array.',\n      '@return a duplicated data array.',\n      '@return a replicated data array.',\n      '@return an exact replica of the data array.',\n      '@return a replica of the data array.'\n    ]\n  },\n  {\n    'tag': '@return a clone of the data array.',\n    'alternatives': [\n      '@return a copy of the data array.',\n      '@return a duplicated data array.',\n      '@return a replicated data array.',\n      '@return an exact replica of the data array.',\n      '@return a replica of the data array.'\n    ]\n  },\n  {\n    'tag': '@return a clone of the data array.',\n    'alternatives': [\n      '@return a copy of the data array.',\n      '@return a duplicated data array.',\n      '@return a replicated data array.',\n      '@return an exact replica of the data array.',\n      '@return a replica of the data array.'\n    ]\n  },\n  {\n    'tag': '@return a clone of the data array.',\n    'alternatives': [\n      '@return a copy of the data array.',\n      '@return a duplicated data array.',\n      '@return a replicated data array.',\n      '@return an exact replica of the data array.',\n      '@return a replica of the data array.'\n    ]\n  },\n  {\n    'tag': '@param n the size of the set',\n    'alternatives': [\n      '@param n the cardinality of the set',\n      '@param n the magnitude of the set',\n      '@param n the number of elements in the set',\n      '@param n the quantity of items in the set',\n      '@param n the count of elements in the set'\n    ]\n  },\n  {\n    'tag': '@param k the size of the subsets to be counted',\n    'alternatives': [\n      '@param k the cardinality of the subsets to be enumerated',\n      '@param k the magnitude of the subsets to be tallied',\n      '@param k the number of elements in the subsets to be considered',\n      '@param k the quantity of items in the subsets to be counted',\n      '@param k the count of elements in the subsets to be examined'\n    ]\n  },\n  {\n    'tag': '@return {@code n choose k}',\n    'alternatives': [\n      '@return the combination of n and k',\n      '@return the number of ways to choose k objects from a set of n',\n      '@return the count of possible selections of k elements from a set of n',\n      '@return the total possible arrangements of selecting k items from n',\n      '@return the quantity of combinations of n items taken k at a time'\n    ]\n  },\n  {\n    'tag': '@throws MathArithmeticException if the result is too large to be\\nrepresented by a long integer.',\n    'alternatives': [\n      '@throws MathArithmeticException if the outcome exceeds the capacity of a long integer.',\n      '@throws MathArithmeticException if the output is greater than what can be stored in a long integer.',\n      '@throws MathArithmeticException if the answer cannot be accommodated in a long integer.',\n      '@throws MathArithmeticException if the result is beyond the range of a long integer.',\n      '@throws MathArithmeticException if the solution is too big to fit in a long integer.'\n    ]\n  },\n  {\n    'tag': '@param n the size of the set',\n    'alternatives': [\n      '@param n the cardinality of the set',\n      '@param n the magnitude of the set',\n      '@param n the number of elements in the set',\n      '@param n the quantity of items in the set',\n      '@param n the count of elements in the set'\n    ]\n  },\n  {\n    'tag': '@param k the size of the subsets to be counted',\n    'alternatives': [\n      '@param k the cardinality of the subsets to be enumerated',\n      '@param k the magnitude of the subsets to be tallied',\n      '@param k the number of elements in the subsets to be considered',\n      '@param k the quantity of items in the subsets to be counted',\n      '@param k the count of elements in the subsets to be examined'\n    ]\n  },\n  {\n    'tag': '@return {@code n choose k}',\n    'alternatives': [\n      '@return the combination of n and k',\n      '@return the number of ways to choose k objects from a set of n',\n      '@return the count of possible selections of k elements from a set of n',\n      '@return the total possible arrangements of selecting k items from n',\n      '@return the quantity of combinations of n items taken k at a time'\n    ]\n  },\n  {\n    'tag': '@throws MathArithmeticException if the result is too large to be\\nrepresented by a long integer.',\n    'alternatives': [\n      '@throws MathArithmeticException if the outcome exceeds the capacity of a long integer.',\n      '@throws MathArithmeticException if the output is greater than what can be stored in a long integer.',\n      '@throws MathArithmeticException if the answer cannot be accommodated in a long integer.',\n      '@throws MathArithmeticException if the result is beyond the range of a long integer.',\n      '@throws MathArithmeticException if the solution is too big to fit in a long integer.'\n    ]\n  },\n  {\n    'tag': '@param n the size of the set',\n    'alternatives': [\n      '@param n the cardinality of the set',\n      '@param n the magnitude of the set',\n      '@param n the number of elements in the set',\n      '@param n the quantity of items in the set',\n      '@param n the count of elements in the set'\n    ]\n  }\n]"