"output = [\n  {\n    'tag': '@return the inverse of the mapping defined by indices.',\n    'alternatives': [\n      '@return the mapping defined by indices, but in reverse order.',\n      '@return the mapping that is the opposite of the one defined by indices.',\n      '@return the opposite mapping defined by indices.',\n      '@return the inverse mapping that is defined by indices.',\n      '@return the mapping defined by indices, but with the order reversed.'\n    ]\n  },\n  {\n    'tag': '@param indices Input index array.',\n    'alternatives': [\n      '@param indices The input array of indices.',\n      '@param indices The array containing the input indices.',\n      '@param indices An array of input indices.',\n      '@param indices The array of indices provided as input.',\n      '@param indices The input array containing the indices.'\n    ]\n  },\n  {\n    'tag': '@return the indices in inverse order (last is first).',\n    'alternatives': [\n      '@return the indices in reverse order (with the last being the first).',\n      '@return the indices with their order reversed (where the last one is the first).',\n      '@return the indices arranged in the opposite order (with the last one being the first).',\n      '@return the inverse ordered indices (with the last one being the first).',\n      '@return the indices in the reversed order (with the last one as the first).'\n    ]\n  },\n  {\n    'tag': '@param size Length of random array.',\n    'alternatives': [\n      '@param size The length of the random array.',\n      '@param size The size of the random array.',\n      '@param size The length of the array that is random.',\n      '@param size The size of the array that contains random elements.',\n      '@param size The length of the array which is random.'\n    ]\n  },\n  {\n    'tag': '@return an array of Gaussian random numbers.',\n    'alternatives': [\n      '@return a array of random numbers following a Gaussian distribution.',\n      '@return an array of random numbers generated using the Gaussian distribution.',\n      '@return an array of random numbers that adhere to the Gaussian distribution.',\n      '@return an array of random numbers that are Gaussian-distributed.',\n      '@return an array of random numbers drawn from a Gaussian distribution.'\n    ]\n  },\n  {\n    'tag': '@param size Number of rows.',\n    'alternatives': [\n      '@param size The count of rows.',\n      '@param size The number of rows.',\n      '@param size The quantity of rows.',\n      '@param size The total rows.',\n      '@param size The number of rows present.'\n    ]\n  },\n  {\n    'tag': '@param popSize Population size.',\n    'alternatives': [\n      '@param popSize The size of the population.',\n      '@param popSize The number of individuals in the population.',\n      '@param popSize The count of individuals in the population.',\n      '@param popSize The total population size.',\n      '@param popSize The size of the entire population.'\n    ]\n  },\n  {\n    'tag': '@return a 2-dimensional matrix of Gaussian random numbers.',\n    'alternatives': [\n      '@return a matrix consisting of 2-dimensional Gaussian random numbers.',\n      '@return a matrix where each element is a Gaussian random number in 2-dimensional format.',\n      '@return a 2-dimensional matrix with randomly-generated numbers that follow the Gaussian distribution.',\n      '@return a matrix of random numbers that conform to the Gaussian distribution in 2-dimensional space.',\n      '@return a matrix containing random numbers that are Gaussian-distributed in two dimensions.'\n    ]\n  },\n  {\n    'tag': '@param lambda Population size.',\n    'alternatives': [\n      '@param lambda The size of the population.',\n      '@param lambda The number of individuals in the population.',\n      '@param lambda The count of individuals in the population.',\n      '@param lambda The total population size.',\n      '@param lambda The size of the entire population.'\n    ]\n  },\n  {\n    'tag': '@param inputSigma Initial standard deviations to sample new points\\naround the initial guess.',\n    'alternatives': [\n      '@param inputSigma The initial standard deviations used to generate new points around the initial guess.',\n      '@param inputSigma The initial guess standard deviations for sampling new points.',\n      '@param inputSigma The standard deviations initially used for sampling new points around the guess.',\n      '@param inputSigma The initial standard deviations for sampling new points centered around the initial estimate.',\n      '@param inputSigma The standard deviations used to initially sample new points around the initial guess.'\n    ]\n  },\n  {\n    'tag': '@param maxIterations Maximal number of iterations.',\n    'alternatives': [\n      '@param maxIterations The maximum number of iterations.',\n      '@param maxIterations The maximum count of iterations.',\n      '@param maxIterations The highest number of iterations allowed.',\n      '@param maxIterations The maximum number of times the process can iterate.',\n      '@param maxIterations The total number of iterations that can be executed at most.'\n    ]\n  },\n  {\n    'tag': '@param stopFitness Whether to stop if objective function value is smaller than\\n{@code stopFitness}.',\n    'alternatives': [\n      '@param stopFitness Determines if the process should stop when the objective function value is smaller than\\n{@code stopFitness}.',\n      '@param stopFitness Specifies whether the process should terminate when the objective function value becomes smaller than\\n{@code stopFitness}.',\n      '@param stopFitness Indicates if the process should halt when the objective function value is less than\\n{@code stopFitness}.',\n      '@param stopFitness Whether the process should stop when the objective function value becomes smaller than\\n{@code stopFitness}.',\n      '@param stopFitness Determines if the process should terminate if the objective function value is less than\\n{@code stopFitness}.'\n    ]\n  },\n  {\n    'tag': '@param isActiveCMA Chooses the covariance matrix update method.',\n    'alternatives': [\n      '@param isActiveCMA Specifies the method to use for updating the covariance matrix.',\n      '@param isActiveCMA Determines the technique to be used for updating the covariance matrix.',\n      '@param isActiveCMA Selects the approach for updating the covariance matrix.',\n      '@param isActiveCMA Chooses the method for updating the covariance matrix.',\n      '@param isActiveCMA Indicates the algorithm to use when updating the covariance matrix.'\n    ]\n  },\n  {\n    'tag': '@param diagonalOnly Number of initial iterations, where the covariance matrix\\nremains diagonal.',\n    'alternatives': [\n      '@param diagonalOnly The count of initial iterations in which the covariance matrix remains diagonal.',\n      '@param diagonalOnly The number of initial iterations where the covariance matrix remains diagonal.',\n      '@param diagonalOnly The quantity of starting iterations where the covariance matrix remains diagonal.',\n      '@param diagonalOnly The total number of initial iterations during which the covariance matrix remains diagonal.',\n      '@param diagonalOnly The number of initial iterations, with the covariance matrix remaining diagonal.'\n    ]\n  },\n  {\n    'tag': '@param checkFeasableCount Determines how often new random objective variables are\\ngenerated in case they are out of bounds.',\n    'alternatives': [\n      '@param checkFeasableCount Specifies the frequency at which newly generated random objective variables are created if they fall outside the allowed range.',\n      '@param checkFeasableCount Sets the interval for generating new random objective variables when they are not within the specified bounds.',\n      '@param checkFeasableCount Determines the rate at which new random objective variables are produced in the event that they are outside the boundaries.',\n      '@param checkFeasableCount Controls the occurrence of generating new random objective variables if they are out of bounds.',\n      '@param checkFeasableCount Dictates how often new random objective variables should be generated if they are not within the bounds.'\n    ]\n  },\n  {\n    'tag': '@param random Random generator.',\n    'alternatives': [\n      '@param random A generator for random values.',\n      '@param random A random number generator.',\n      '@param random The source of random numbers.',\n      '@param random A utility for generating random values.',\n      '@param random An object responsible for generating random data.'\n    ]\n  },\n  {\n    'tag': '@param generateStatistics Whether statistic data is collected.',\n    'alternatives': [\n      '@param generateStatistics Indicates if statistical data is collected.',\n      '@param generateStatistics Determines whether statistics data should be collected.',\n      '@param generateStatistics Specifies whether to collect statistical data.',\n      '@param generateStatistics Determines if data for statistics should be collected.',\n      '@param generateStatistics Indicates whether the collection of statistical data is enabled.'\n    ]\n  }\n]"