"output=[\n  {\n    'tag': '@param epsilon When the absolute value of the nth item in the\\nseries is less than epsilon the approximation ceases to calculate\\nfurther elements in the series.',\n    'alternatives': [\n      '@param epsilon When the absolute value of the nth element in the\\nsequence is smaller than epsilon, the calculation stops\\ncomputing additional elements in the series.',\n      '@param epsilon If the absolute value of the nth term in the\\nseries is smaller than epsilon, the calculation stops generating\\nfurther elements in the series.',\n      '@param epsilon When the absolute value of the nth element in the\\nseries becomes smaller than epsilon, the computation will not\\ncalculate more elements in the series.',\n      '@param epsilon When the nth item in the series has an absolute value\\nthat is less than epsilon, the computation stops producing\\nadditional terms in the series.',\n      '@param epsilon If the absolute value of the nth item in the\\nseries falls below epsilon, the calculation will terminate and\\nno further terms will be computed in the series.'\n    ]\n  },\n  {\n    'tag': '@return the regularized beta function I(x, a, b)',\n    'alternatives': [\n      '@return the regularized beta function I(x, a, b)',\n      '@return the regularized beta function I(x, a, b)',\n      '@return I(x, a, b), the regularized beta function',\n      '@return the regularized beta function I(x, a, b)',\n      '@return the regularized beta function I(x, a, b)'\n    ]\n  },\n  {\n    'tag': '@throws org.apache.commons.math3.exception.MaxCountExceededException if the algorithm fails to converge.',\n    'alternatives': [\n      '@throws org.apache.commons.math3.exception.MaxCountExceededException if the algorithm does not converge.',\n      '@throws org.apache.commons.math3.exception.MaxCountExceededException if the convergence of the algorithm fails.',\n      '@throws org.apache.commons.math3.exception.MaxCountExceededException if the algorithm fails to reach convergence.',\n      '@throws org.apache.commons.math3.exception.MaxCountExceededException if the algorithm does not achieve convergence.',\n      '@throws org.apache.commons.math3.exception.MaxCountExceededException if the convergence of the algorithm is not achieved.'\n    ]\n  },\n  {\n    'tag': '@param x the value.',\n    'alternatives': [\n      '@param x the value.',\n      '@param x the input value.',\n      '@param x the argument.',\n      '@param x the numeric value.',\n      '@param x the parameter.'\n    ]\n  },\n  {\n    'tag': '@param a Parameter {@code a}.',\n    'alternatives': [\n      '@param a Parameter {@code a}.',\n      '@param a The parameter {@code a}.',\n      '@param a The value of parameter {@code a}.',\n      '@param a The input parameter {@code a}.',\n      '@param a Parameter {@code a}.'\n    ]\n  },\n  {\n    'tag': '@param b Parameter {@code b}.',\n    'alternatives': [\n      '@param b Parameter {@code b}.',\n      '@param b The parameter {@code b}.',\n      '@param b The value of parameter {@code b}.',\n      '@param b The input parameter {@code b}.',\n      '@param b Parameter {@code b}.'\n    ]\n  },\n  {\n    'tag': '@param maxIterations Maximum number of \"iterations\" to complete.',\n    'alternatives': [\n      '@param maxIterations Maximum number of \"iterations\" to complete.',\n      '@param maxIterations The maximum number of iterations to perform.',\n      '@param maxIterations The limit on the number of iterations to execute.',\n      '@param maxIterations The maximum count of iterations to finish.',\n      '@param maxIterations Maximum number of \"iterations\" to complete.'\n    ]\n  },\n  {\n    'tag': '@return log(B(a, b)).',\n    'alternatives': [\n      '@return log(B(a, b)).',\n      '@return the natural logarithm of B(a, b).',\n      '@return the logarithm of the beta function B(a, b).',\n      '@return the value of the function log(B(a, b)).',\n      '@return log(B(a, b)).'\n    ]\n  },\n  {\n    'tag': '@param a First argument.',\n    'alternatives': [\n      '@param a First argument.',\n      '@param a The first parameter.',\n      '@param a The value of the first argument.',\n      '@param a The input value for the first parameter.',\n      '@param a First argument.'\n    ]\n  },\n  {\n    'tag': '@param b Second argument.',\n    'alternatives': [\n      '@param b Second argument.',\n      '@param b The second parameter.',\n      '@param b The value of the second argument.',\n      '@param b The input value for the second parameter.',\n      '@param b Second argument.'\n    ]\n  },\n  {\n    'tag': '@return the value of {@code log(Gamma(a + b))}.',\n    'alternatives': [\n      '@return the value of {@code log(Gamma(a + b))}.',\n      '@return the result of {@code log(Gamma(a + b))}.',\n      '@return the output of {@code log(Gamma(a + b))}.',\n      '@return the logarithm of the sum of {@code Gamma(a + b)}.',\n      '@return the value of {@code log(Gamma(a + b))}.'\n    ]\n  },\n  {\n    'tag': '@throws OutOfRangeException if {@code a} or {@code b} is lower than\\n{@code 1.0} or greater than {@code 2.0}.',\n    'alternatives': [\n      '@throws OutOfRangeException if {@code a} or {@code b} is less than\\n{@code 1.0} or greater than {@code 2.0}.',\n      '@throws OutOfRangeException if {@code a} or {@code b} is below\\n{@code 1.0} or above {@code 2.0}.',\n      '@throws OutOfRangeException if {@code a} or {@code b} falls below\\n{@code 1.0} or exceeds {@code 2.0}.',\n      '@throws OutOfRangeException if {@code a} or {@code b} is smaller than\\n{@code 1.0} or larger than {@code 2.0}.',\n      '@throws OutOfRangeException if {@code a} or {@code b} is lower than\\n{@code 1.0} or greater than {@code 2.0}.'\n    ]\n  }\n]"