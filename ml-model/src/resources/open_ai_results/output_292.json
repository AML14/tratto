"output = [\n  {'tag': '@param rInner rotation to apply the rotation to',\n   'alternatives': ['@param rInner rotation to apply the rotation to',\n    '@param rInner rotate the rotation to',\n    '@param rInner rotation to be applied',\n    '@param rInner apply the rotation to',\n    '@param rInner rotation for application']\n  },\n  {'tag': '@param <T> the type of the field elements',\n   'alternatives': ['@param <T> the type of the field elements',\n    '@param <T> field elements type',\n    '@param <T> type of field elements',\n    '@param <T> field elements',\n    '@param <T> type of elements in the field']\n  },\n  {'tag': '@return a new rotation which is the composition of r by the inverse\\nof the instance',\n   'alternatives': ['@return a new rotation which is the composition of r by the inverse\\nof the instance',\n    '@return a new rotation resulting from the composition of r with the inverse of the instance',\n    '@return a new rotation obtained by composing r with the inverse of the instance',\n    '@return a new rotation that is the composition of r with the inverse of the instance',\n    '@return a new rotation formed by combining r with the inverse of the instance']\n  },\n  {'tag': '@param m initial matrix (not exactly orthogonal)',\n   'alternatives': ['@param m initial matrix (not exactly orthogonal)',\n    '@param m initial matrix (not precisely orthogonal)',\n    '@param m initial matrix (not perfectly orthogonal)',\n    '@param m initial matrix (not completely orthogonal)',\n    '@param m initial matrix (not entirely orthogonal)']\n  },\n  {'tag': '@param threshold convergence threshold for the iterative\\northogonality correction (convergence is reached when the\\ndifference between two steps of the Frobenius norm of the\\ncorrection is below this threshold)',\n   'alternatives': ['@param threshold convergence threshold for the iterative\\northogonality correction (convergence is reached when the\\ndifference between two steps of the Frobenius norm of the\\ncorrection is below this threshold)',\n    '@param threshold iterative convergence threshold for the orthogonality correction (convergence is achieved when the difference between two steps of the Frobenius norm of the correction is less than this threshold)',\n    '@param threshold convergence threshold for the iterative orthogonality correction (convergence is attained when the difference between two steps of the Frobenius norm of the correction is less than this threshold)',\n    '@param threshold convergence threshold for the iterative correction of orthogonality (convergence occurs when the difference between two steps of the Frobenius norm of the correction is less than this threshold)',\n    '@param threshold convergence threshold for the iterative orthogonality correction (convergence is obtained when the difference between two steps of the Frobenius norm of the correction is below this threshold)']\n  },\n  {'tag': '@return an orthogonal matrix close to m',\n   'alternatives': ['@return an orthogonal matrix close to m',\n    '@return a matrix close to m that is orthogonal',\n    '@return m matrix approximately orthogonal',\n    '@return a matrix that is approximately orthogonal to m',\n    '@return an approximately orthogonal matrix close to m']\n  },\n  {'tag': '@throws NotARotationMatrixException if the matrix cannot be\\northogonalized with the given threshold after 10 iterations',\n   'alternatives': ['@throws NotARotationMatrixException if the matrix cannot be\\northogonalized with the given threshold after 10 iterations',\n    '@throws NotARotationMatrixException if, after 10 iterations, the matrix cannot be orthogonalized with the specified threshold',\n    '@throws NotARotationMatrixException if, after 10 iterations, the matrix fails to be orthogonalized with the given threshold',\n    '@throws NotARotationMatrixException if the matrix cannot be made orthogonal with the given threshold after 10 iterations',\n    '@throws NotARotationMatrixException if, after 10 iterations, it is not possible to orthogonalize the matrix with the specified threshold']\n  },\n  {'tag': '@param r1 first rotation',\n   'alternatives': ['@param r1 first rotation',\n    '@param r1 rotation one',\n    '@param r1 initial rotation',\n    '@param r1 rotation number one',\n    '@param r1 the first rotation']\n  },\n  {'tag': '@param r2 second rotation',\n   'alternatives': ['@param r2 second rotation',\n    '@param r2 rotation two',\n    '@param r2 another rotation',\n    '@param r2 rotation number two',\n    '@param r2 the second rotation']\n  },\n  {'tag': '@param <T> the type of the field elements',\n   'alternatives': ['@param <T> the type of the field elements',\n    '@param <T> field elements type',\n    '@param <T> type of field elements',\n    '@param <T> field elements',\n    '@param <T> type of elements in the field']\n  },\n  {'tag': '@return <i>distance</i> between r1 and r2',\n   'alternatives': ['@return <i>distance</i> between r1 and r2',\n    '@return <i>distance</i> from r1 to r2',\n    '@return <i>distance</i> of r1 and r2',\n    '@return <i>distance</i> between r1 and r2 rotations',\n    '@return <i>distance</i> of the rotations r1 and r2']\n  },\n  {'tag': '@param q0 scalar part of the quaternion',\n   'alternatives': ['@param q0 scalar part of the quaternion',\n    '@param q0 quaternion scalar',\n    '@param q0 quaternion scalar component',\n    '@param q0 scalar component of the quaternion',\n    '@param q0 the scalar part of the quaternion']\n  },\n  {'tag': '@param q1 first coordinate of the vectorial part of the quaternion',\n   'alternatives': ['@param q1 first coordinate of the vectorial part of the quaternion',\n    '@param q1 quaternion vectorial coordinate one',\n    '@param q1 quaternion vectorial first coordinate',\n    '@param q1 first coordinate of the vector part of the quaternion',\n    '@param q1 the first coordinate of the vectorial part of the quaternion']\n  },\n  {'tag': '@param q2 second coordinate of the vectorial part of the quaternion',\n   'alternatives': ['@param q2 second coordinate of the vectorial part of the quaternion',\n    '@param q2 quaternion vectorial coordinate two',\n    '@param q2 quaternion vectorial second coordinate',\n    '@param q2 second coordinate of the vector part of the quaternion',\n    '@param q2 the second coordinate of the vectorial part of the quaternion']\n  },\n  {'tag': '@param q3 third coordinate of the vectorial part of the quaternion',\n   'alternatives': ['@param q3 third coordinate of the vectorial part of the quaternion',\n    '@param q3 quaternion vectorial coordinate three',\n    '@param q3 quaternion vectorial third coordinate',\n    '@param q3 third coordinate of the vector part of the quaternion',\n    '@param q3 the third coordinate of the vectorial part of the quaternion']\n  },\n  {'tag': '@param needsNormalization if true, the coordinates are considered\\nnot to be normalized, a normalization preprocessing step is performed\\nbefore using them',\n   'alternatives': ['@param needsNormalization if true, the coordinates are considered\\nnot to be normalized, a normalization preprocessing step is performed\\nbefore using them',\n    '@param needsNormalization if true, the coordinates are assumed to be non-normalized, a normalization preprocessing step is executed before using them',\n    '@param needsNormalization if true, the coordinates are regarded as not normalized, a normalization preprocessing step is carried out before using them',\n    '@param needsNormalization if true, the coordinates are treated as not normalized, a normalization preprocessing step is undertaken before using them',\n    '@param needsNormalization if true, the coordinates are seen as not normalized, a normalization preprocessing step is implemented before using them']\n  },\n  {'tag': '@param axis axis around which to rotate',\n   'alternatives': ['@param axis axis around which to rotate',\n    '@param axis rotation axis',\n    '@param axis axis for rotation',\n    '@param axis axis to perform rotation',\n    '@param axis the axis of rotation']\n  },\n  {'tag': '@param angle rotation angle.',\n   'alternatives': ['@param angle rotation angle.',\n    '@param angle angle of rotation',\n    '@param angle angle for rotation',\n    '@param angle rotation angle value',\n    '@param angle the angle of rotation']\n  },\n  {'tag': '@throws MathIllegalArgumentException if the axis norm is zero',\n   'alternatives': ['@throws MathIllegalArgumentException if the axis norm is zero',\n    '@throws MathIllegalArgumentException if the norm of the axis is zero',\n    '@throws MathIllegalArgumentException if the axis has a zero norm',\n    '@throws MathIllegalArgumentException if the axis has a norm of zero',\n    '@throws MathIllegalArgumentException if the norm of the axis is equal to zero']\n  },\n  {'tag': '@param axis axis around which to rotate',\n   'alternatives': ['@param axis axis around which to rotate',\n    '@param axis rotation axis',\n    '@param axis axis for rotation',\n    '@param axis axis to perform rotation',\n    '@param axis the axis of rotation']\n  },\n  {'tag': '@param angle rotation angle.',\n   'alternatives': ['@param angle rotation angle.',\n    '@param angle angle of rotation',\n    '@param angle angle for rotation',\n    '@param angle rotation angle value',\n    '@param angle the angle of rotation']\n  },\n  {'tag': '@param convention convention to use for the semantics of the angle',\n   'alternatives': ['@param convention convention to use for the semantics of the angle',\n    '@param convention angle semantics convention',\n    '@param convention convention for angle meaning',\n    '@param convention semantics convention for the angle',\n    '@param convention the convention to use for interpreting the angle']\n  },\n  {'tag': '@throws MathIllegalArgumentException if the axis norm is zero',\n   'alternatives': ['@throws MathIllegalArgumentException if the axis norm is zero',\n    '@throws MathIllegalArgumentException if the norm of the axis is zero',\n    '@throws MathIllegalArgumentException if the axis has a zero norm',\n    '@throws MathIllegalArgumentException if the axis has a norm of zero',\n    '@throws MathIllegalArgumentException if the norm of the axis is equal to zero']\n  },\n  {'tag': '@param m rotation matrix',\n   'alternatives': ['@param m rotation matrix',\n    '@param m matrix for rotation',\n    '@param m matrix to perform rotation',\n    '@param m matrix defining rotation',\n    '@param m the matrix of rotation']\n  },\n  {'tag': '@param threshold convergence threshold for the iterative\\northogonality correction (convergence is reached when the\\ndifference between two steps of the Frobenius norm of the\\ncorrection is below this threshold)',\n   'alternatives': ['@param threshold convergence threshold for the iterative\\northogonality correction (convergence is reached when the\\ndifference between two steps of the Frobenius norm of the\\ncorrection is below this threshold)',\n    '@param threshold iterative convergence threshold for the orthogonality correction (convergence is achieved when the difference between two steps of the Frobenius norm of the correction is less than this threshold)',\n    '@param threshold convergence threshold for the iterative orthogonality correction (convergence is attained when the difference between two steps of the Frobenius norm of the correction is less than this threshold)',\n    '@param threshold convergence threshold for the iterative correction of orthogonality (convergence occurs when the difference between two steps of the Frobenius norm of the correction is less than this threshold)',\n    '@param threshold convergence threshold for the iterative orthogonality correction (convergence is obtained when the difference between two steps of the Frobenius norm of the correction is below this threshold)']\n  }\n]"