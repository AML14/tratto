"output=[\n  {\n    'tag': '@return the imaginaryCharacter.',\n    'alternatives': [\n      '@return the imaginarySymbol.',\n      '@return the imaginaryChar.',\n      '@return the imaginaryValue.',\n      '@return the imaginaryLetter.',\n      '@return the imaginarySymbolicCharacter.'\n    ]\n  },\n  {\n    'tag': '@return the imaginaryFormat.',\n    'alternatives': [\n      '@return the imaginaryPattern.',\n      '@return the imaginaryStyle.',\n      '@return the imaginaryRepresentation.',\n      '@return the imaginaryNotation.',\n      '@return the imaginaryForm.'\n    ]\n  },\n  {\n    'tag': '@return the default complex format.',\n    'alternatives': [\n      '@return the standard complex format.',\n      '@return the default format for complex numbers.',\n      '@return the basic complex format.',\n      '@return the default formatting for complex numbers.',\n      '@return the standard representation of complex numbers.'\n    ]\n  },\n  {\n    'tag': '@param locale the specific locale used by the format.',\n    'alternatives': [\n      '@param locale the format-specific specific locale.',\n      '@param locale the locale specifically used by the format.',\n      '@param locale the locale that is specific to the format.',\n      '@param formatLocale the locale used specifically by the format.',\n      '@param locale the locale used exclusively by the format.'\n    ]\n  },\n  {\n    'tag': '@return the complex format specific to the given locale.',\n    'alternatives': [\n      '@return the format that conforms to the provided locale.',\n      '@return the format specific to the given locale for complex numbers.',\n      '@return the format for complex numbers that is specific to the given locale.',\n      '@return the format for complex numbers that is specific to the provided locale.',\n      '@return the format specific to the given locale for representing complex numbers.'\n    ]\n  },\n  {\n    'tag': '@param locale the specific locale used by the format.',\n    'alternatives': [\n      '@param locale the format-specific specific locale.',\n      '@param locale the locale specifically used by the format.',\n      '@param locale the locale that is specific to the format.',\n      '@param formatLocale the locale used specifically by the format.',\n      '@param locale the locale used exclusively by the format.'\n    ]\n  },\n  {\n    'tag': '@param imaginaryCharacter Imaginary character.',\n    'alternatives': [\n      '@param imaginaryCharacter Symbolic imaginary.',\n      '@param imaginaryCharacter Symbol.',\n      '@param imaginaryCharacter Imaginary char.',\n      '@param imaginaryCharacter Marker for imaginary.',\n      '@param imaginaryCharacter Imaginary letter.'\n    ]\n  },\n  {\n    'tag': '@return the complex format specific to the given locale.',\n    'alternatives': [\n      '@return the format that conforms to the provided locale.',\n      '@return the format specific to the given locale for complex numbers.',\n      '@return the format for complex numbers that is specific to the given locale.',\n      '@return the format for complex numbers that is specific to the provided locale.',\n      '@return the format specific to the given locale for representing complex numbers.'\n    ]\n  },\n  {\n    'tag': '@throws NoDataException if {@code imaginaryCharacter} is an\\nempty string.',\n    'alternatives': [\n      '@throws NoDataException if the string {@code imaginaryCharacter} is empty.',\n      '@throws NoDataException if the parameter {@code imaginaryCharacter} is empty.',\n      '@throws NoDataException if the input {@code imaginaryCharacter} is an empty string.',\n      '@throws NoDataException if the provided {@code imaginaryCharacter} is an empty string.',\n      '@throws NoDataException if the {@code imaginaryCharacter} value is an empty string.'\n    ]\n  },\n  {\n    'tag': '@return the realFormat.',\n    'alternatives': [\n      '@return the format for real numbers.',\n      '@return the formatting of real numbers.',\n      '@return the representation of real numbers.',\n      '@return the format used for real numbers.',\n      '@return the format specific to real numbers.'\n    ]\n  },\n  {\n    'tag': '@param source the string to parse.',\n    'alternatives': [\n      '@param source the input string to parse.',\n      '@param source the string for parsing.',\n      '@param source the string that needs to be parsed.',\n      '@param source the string to be parsed.',\n      '@param source the input string that requires parsing.'\n    ]\n  },\n  {\n    'tag': '@return the parsed {@link Complex} object.',\n    'alternatives': [\n      '@return the object of type {@link Complex} after parsing.',\n      '@return the resulting {@link Complex} object after parsing.',\n      '@return the complex number represented by the parsed {@link Complex} object.',\n      '@return the {@link Complex} object obtained from parsing.',\n      '@return the {@link Complex} object that is parsed.'\n    ]\n  },\n  {\n    'tag': '@throws MathParseException if the beginning of the specified string\\ncannot be parsed.',\n    'alternatives': [\n      '@throws MathParseException if the first part of the string cannot be parsed.',\n      '@throws MathParseException if the initial section of the specified string cannot be parsed.',\n      '@throws MathParseException if the starting portion of the string cannot be parsed.',\n      '@throws MathParseException if the string cannot be parsed from the beginning.',\n      '@throws MathParseException if the specified string cannot be parsed from the start.'\n    ]\n  },\n  {\n    'tag': '@param source the string to parse',\n    'alternatives': [\n      '@param source string for parsing',\n      '@param source string to be parsed',\n      '@param source string - input for parsing',\n      '@param source input string for parsing',\n      '@param source input string to be parsed'\n    ]\n  },\n  {\n    'tag': '@param pos input/ouput parsing parameter.',\n    'alternatives': [\n      '@param pos the parsing parameter for input/output.',\n      '@param pos the parameter for parsing input/output.',\n      '@param pos the parameter for input/output parsing.',\n      '@param pos the parsing parameter for both input and output.',\n      '@param pos the parsing parameter for both input and output operations.'\n    ]\n  },\n  {\n    'tag': '@return the parsed {@link Complex} object.',\n    'alternatives': [\n      '@return the object of type {@link Complex} after parsing.',\n      '@return the resulting {@link Complex} object after parsing.',\n      '@return the complex number represented by the parsed {@link Complex} object.',\n      '@return the {@link Complex} object obtained from parsing.',\n      '@return the {@link Complex} object that is parsed.'\n    ]\n  },\n  {\n    'tag': '@param format the custom format for both real and imaginary parts.',\n    'alternatives': [\n      '@param format the user-defined format for both real and imaginary portions.',\n      '@param format the format given by the user for both real and imaginary parts.',\n      '@param format the custom-defined format for both real and imaginary segments.',\n      '@param format the format provided by the user for both real and imaginary components.',\n      '@param format the format specified by the user for both real and imaginary parts.'\n    ]\n  },\n  {\n    'tag': '@throws NullArgumentException if {@code realFormat} is {@code null}.',\n    'alternatives': [\n      '@throws NullArgumentException if the parameter {@code realFormat} is {@code null}.',\n      '@throws NullArgumentException if the input {@code realFormat} is {@code null}.',\n      '@throws NullArgumentException if the provided {@code realFormat} is {@code null}.',\n      '@throws NullArgumentException if {@code realFormat} is not provided.',\n      '@throws NullArgumentException if {@code realFormat} is missing.'\n    ]\n  },\n  {\n    'tag': '@param realFormat the custom format for the real part.',\n    'alternatives': [\n      '@param realFormat the user-defined format for the real portion.',\n      '@param realFormat the format given by the user for the real part.',\n      '@param realFormat the custom-defined format for the real segment.',\n      '@param realFormat the format provided by the user for the real part.',\n      '@param realFormat the format specified by the user for the real part.'\n    ]\n  },\n  {\n    'tag': '@param imaginaryFormat the custom format for the imaginary part.',\n    'alternatives': [\n      '@param imaginaryFormat the user-defined format for the imaginary portion.',\n      '@param imaginaryFormat the format given by the user for the imaginary part.',\n      '@param imaginaryFormat the custom-defined format for the imaginary segment.',\n      '@param imaginaryFormat the format provided by the user for the imaginary part.',\n      '@param imaginaryFormat the format specified by the user for the imaginary part.'\n    ]\n  },\n  {\n    'tag': '@param imaginaryCharacter The custom imaginary character.',\n    'alternatives': [\n      '@param imaginaryCharacter The user-defined imaginary character.',\n      '@param imaginaryCharacter The character specified by the user for the imaginary part.',\n      '@param imaginaryCharacter The custom-defined imaginary character.',\n      '@param imaginaryCharacter The character provided by the user for the imaginary part.',\n      '@param imaginaryCharacter The imaginary character set by the user.'\n    ]\n  },\n  {\n    'tag': '@throws NoDataException if {@code imaginaryCharacter} is an\\nempty string.',\n    'alternatives': [\n      '@throws NoDataException if the string {@code imaginaryCharacter} is empty.',\n      '@throws NoDataException if the parameter {@code imaginaryCharacter} is empty.',\n      '@throws NoDataException if the input {@code imaginaryCharacter} is an empty string.',\n      '@throws NoDataException if the provided {@code imaginaryCharacter} is an empty string.',\n      '@throws NoDataException if the {@code imaginaryCharacter} value is an empty string.'\n    ]\n  },\n  {\n    'tag': '@param imaginaryCharacter The custom imaginary character.',\n    'alternatives': [\n      '@param imaginaryCharacter The user-defined imaginary character.',\n      '@param imaginaryCharacter The character specified by the user for the imaginary part.',\n      '@param imaginaryCharacter The custom-defined imaginary character.',\n      '@param imaginaryCharacter The character provided by the user for the imaginary part.',\n      '@param imaginaryCharacter The imaginary character set by the user.'\n    ]\n  },\n  {\n    'tag': '@param format the custom format for both real and imaginary parts.',\n    'alternatives': [\n      '@param format the user-defined format for both real and imaginary portions.',\n      '@param format the format given by the user for both real and imaginary parts.',\n      '@param format the custom-defined format for both real and imaginary segments.',\n      '@param format the format provided by the user for both real and imaginary components.',\n      '@param format the format specified by the user for both real and imaginary parts.'\n    ]\n  },\n  {\n    'tag': '@throws NoDataException if {@code imaginaryCharacter} is an\\nempty string.',\n    'alternatives': [\n      '@throws NoDataException if the string {@code imaginaryCharacter} is empty.',\n      '@throws NoDataException if the parameter {@code imaginaryCharacter} is empty.',\n      '@throws NoDataException if the input {@code imaginaryCharacter} is an empty string.',\n      '@throws NoDataException if the provided {@code imaginaryCharacter} is an empty string.',\n      '@throws NoDataException if the {@code imaginaryCharacter} value is an empty string.'\n    ]\n  }\n]"