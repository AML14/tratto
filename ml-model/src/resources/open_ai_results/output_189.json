"[{'tag': '@param b second operand',\n  'alternatives': ['@param b second argument',\n   '@param b operand number two',\n   '@param b second parameter',\n   '@param b the second input',\n   '@param b the second value']},\n {'tag': '@return greatest common divisor of a and b',\n  'alternatives': ['@return the greatest common divisor of a and b',\n   '@return the GCD of a and b',\n   '@return the highest common factor of a and b',\n   '@return the greatest common divisor between a and b',\n   '@return the GCD value for a and b']},\n {'tag': '@param a array of operands',\n  'alternatives': ['@param a operands array',\n   '@param a list of operands',\n   '@param a input array',\n   '@param a array containing the operands',\n   '@param a an array of values']},\n {'tag': '@return greatest common divisor of the elements of a',\n  'alternatives': ['@return the greatest common divisor of the elements in a',\n   '@return the GCD of the elements in a',\n   '@return the highest common factor of the elements in a',\n   '@return the greatest common divisor for the elements in a',\n   '@return the GCD value for the elements in a']},\n {'tag': '@param a array of operands',\n  'alternatives': ['@param a operands array',\n   '@param a list of operands',\n   '@param a input array',\n   '@param a array containing the operands',\n   '@param a an array of values']},\n {'tag': '@return greatest common divisor of the differences between the elements of a',\n  'alternatives': ['@return the greatest common divisor of the differences among the elements in a',\n   '@return the GCD of the differences between the elements in a',\n   '@return the highest common factor of the differences in the elements of a',\n   '@return the greatest common divisor for the differences among the elements in a',\n   '@return the GCD value for the differences between the elements in a']},\n {'tag': '@param a first operand',\n  'alternatives': ['@param a initial operand',\n   '@param a primary operand',\n   '@param a starting value',\n   '@param a the first input',\n   '@param a the initial variable']},\n {'tag': '@param b second operand',\n  'alternatives': ['@param b second argument',\n   '@param b operand number two',\n   '@param b second parameter',\n   '@param b the second input',\n   '@param b the second value']},\n {'tag': '@return greatest common divisor of a and b',\n  'alternatives': ['@return the greatest common divisor of a and b',\n   '@return the GCD of a and b',\n   '@return the highest common factor of a and b',\n   '@return the greatest common divisor between a and b',\n   '@return the GCD value for a and b']},\n {'tag': '@param a array of operands',\n  'alternatives': ['@param a operands array',\n   '@param a list of operands',\n   '@param a input array',\n   '@param a array containing the operands',\n   '@param a an array of values']},\n {'tag': '@return greatest common divisor of the elements of a',\n  'alternatives': ['@return the greatest common divisor of the elements in a',\n   '@return the GCD of the elements in a',\n   '@return the highest common factor of the elements in a',\n   '@return the greatest common divisor for the elements in a',\n   '@return the GCD value for the elements in a']},\n {'tag': '@param a array of operands',\n  'alternatives': ['@param a operands array',\n   '@param a list of operands',\n   '@param a input array',\n   '@param a array containing the operands',\n   '@param a an array of values']},\n {'tag': '@return greatest common divisor of the differences between the elements of a',\n  'alternatives': ['@return the greatest common divisor of the differences among the elements in a',\n   '@return the GCD of the differences between the elements in a',\n   '@return the highest common factor of the differences in the elements of a',\n   '@return the greatest common divisor for the differences among the elements in a',\n   '@return the GCD value for the differences between the elements in a']},\n {'tag': '@param x value to be modded',\n  'alternatives': ['@param x value to be modulated',\n   '@param x number to be subjected to modulo',\n   '@param x variable to apply modulo on',\n   '@param x input value for modulo',\n   '@param x the value to be modified']},\n {'tag': '@param y modulus',\n  'alternatives': ['@param y modulo value',\n   '@param y modulus number',\n   '@param y value for modulo',\n   '@param y the modulus',\n   '@param y the modulo']},\n {'tag': '@param nums array of operands',\n  'alternatives': ['@param nums operands array',\n   '@param nums list of operands',\n   '@param nums input array',\n   '@param nums array containing the operands',\n   '@param nums an array of values']},\n {'tag': '@return an array of two integers (r,m) such that each number in NUMS is equal to r (mod m),\\n  or null if no such exists or the iterator contains fewer than 3 elements',\n  'alternatives': ['@return an array of two integers (r,m) where each number in NUMS equals r (mod m),or return null if such condition is not met or the iterator has less than 3 elements',\n   '@return an array of two integers (r,m) where every number in NUMS is equivalent to r (mod m),\\n  return null if no such situation exists or the iterator has fewer than 3 elements',\n   '@return an array of two integers (r,m) such that each number in NUMS is equal to r modulo m, or null if there are no such numbers or the iterator has less than 3 elements',\n   '@return an array of two integers (r,m) such that every number in NUMS is congruent to r (mod m),\\n  return null if there are no such numbers or the iterator has fewer than 3 elements',\n   '@return an array of two integers (r,m) such that each number in NUMS is congruent to r modulo m,\\n  if there are no such numbers or the iterator has fewer than 3 elements,then return null']},\n {'tag': '@param itor iterator of operands',\n  'alternatives': ['@param itor operands iterator',\n   '@param itor iterator over the operands',\n   '@param itor input iterator',\n   '@param itor iterator containing the operands',\n   '@param itor an iterator of values']},\n {'tag': '@return an array of two integers (r,m) such that each number in itor is equal to r (mod m),\\n  or null if no such exists or the iterator contains fewer than 3 elements',\n  'alternatives': ['@return an array of two integers (r,m) where each number in itor equals r (mod m),or return null if such condition is not met or the iterator has less than 3 elements',\n   '@return an array of two integers (r,m) where every number in itor is equivalent to r (mod m),\\n  return null if no such situation exists or the iterator has fewer than 3 elements',\n   '@return an array of two integers (r,m) such that each number in itor is equal to r modulo m, or null if there are no such numbers or the iterator has less than 3 elements',\n   '@return an array of two integers (r,m) such that every number in itor is congruent to r (mod m),\\n  return null if there are no such numbers or the iterator has fewer than 3 elements',\n   '@return an array of two integers (r,m) such that each number in itor is congruent to r modulo m,\\n  if there are no such numbers or the iterator has fewer than 3 elements,then return null']},\n {'tag': '@param nums array of operands',\n  'alternatives': ['@param nums operands array',\n   '@param nums list of operands',\n   '@param nums input array',\n   '@param nums array containing the operands',\n   '@param nums an array of values']},\n {'tag': '@param nonstrict_ends whether endpoints are NOT subject to the strict density requirement',\n  'alternatives': ['@param nonstrict_ends determine if the endpoints are excluded from the strict density requirement',\n   '@param nonstrict_ends flag to indicate whether the endpoints are exempt from the strict density constraint',\n   '@param nonstrict_ends specify if the endpoints are not included in the strict density requirement',\n   '@param nonstrict_ends indicate whether the endpoints should be excluded from the strict density condition',\n   '@param nonstrict_ends boolean value to determine if the endpoints are exempt from the strict density requirement']},\n {'tag': '@return an array of two integers (r,m) such that each number in NUMS is equal to r (mod m),\\n  or null if no such exists or the array contains fewer than 3 elements',\n  'alternatives': ['@return an array of two integers (r,m) where each number in NUMS equals r (mod m),or return null if such condition is not met or the array has less than 3 elements',\n   '@return an array of two integers (r,m) where every number in NUMS is equivalent to r (mod m),\\n  return null if no such situation exists or the array has fewer than 3 elements',\n   '@return an array of two integers (r,m) such that each number in NUMS is equal to r modulo m, or null if there are no such numbers or the array has less than 3 elements',\n   '@return an array of two integers (r,m) such that every number in NUMS is congruent to r (mod m),\\n  return null if there are no such numbers or the array has fewer than 3 elements',\n   '@return an array of two integers (r,m) such that each number in NUMS is congruent to r modulo m,\\n  if there are no such numbers or the array has fewer than 3 elements,then return null']},\n {'tag': '@param itor iterator of operands',\n  'alternatives': ['@param itor operands iterator',\n   '@param itor iterator over the operands',\n   '@param itor input iterator',\n   '@param itor iterator containing the operands',\n   '@param itor an iterator of values']},\n {'tag': '@param nonstrict_ends whether endpoints are NOT subject to the strict density requirement',\n  'alternatives': ['@param nonstrict_ends determine if the endpoints are excluded from the strict density requirement',\n   '@param nonstrict_ends flag to indicate whether the endpoints are exempt from the strict density constraint',\n   '@param nonstrict_ends specify if the endpoints are not included in the strict density requirement',\n   '@param nonstrict_ends indicate whether the endpoints should be excluded from the strict density condition',\n   '@param nonstrict_ends boolean value to determine if the endpoints are exempt from the strict density requirement']},\n {'tag': '@return an array of two integers (r,m) such that each number in NUMS is equal to r (mod m),\\n  or null if no such exists or the iterator contains fewer than 3 elements',\n  'alternatives': ['@return an array of two integers (r,m) where each number in NUMS equals r (mod m),or return null if such condition is not met or the iterator has less than 3 elements',\n   '@return an array of two integers (r,m) where every number in NUMS is equivalent to r (mod m),\\n  return null if no such situation exists or the iterator has fewer than 3 elements',\n   '@return an array of two integers (r,m) such that each number in NUMS is equal to r modulo m, or null if there are no such numbers or the iterator has less than 3 elements',\n   '@return an array of two integers (r,m) such that every number in NUMS is congruent to r (mod m),\\n  return null if there are no such numbers or the iterator has fewer than 3 elements',\n   '@return an array of two integers (r,m) such that each number in NUMS is congruent to r modulo m,\\n  if there are no such numbers or the iterator has fewer than 3 elements,then return null']}]"