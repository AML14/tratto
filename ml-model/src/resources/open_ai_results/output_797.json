"[\n  {\n    \"tag\": \"@param expectedSize the number of entries you expect to add to the\\n       returned map\",\n    \"alternatives\": [\n      \"@param expectedSize the number of elements you anticipate adding to the\\n       resulting map\",\n      \"@param expectedSize the anticipated number of entries you plan to add to the\\n       map that is returned\",\n      \"@param expectedSize the estimated count of entries you intend to append to the\\n       map that will be returned\"\n    ]\n  },\n  {\n    \"tag\": \"@return a new, empty {@code HashMap} with enough capacity to hold {@code\\n        expectedSize} entries without resizing\",\n    \"alternatives\": [\n      \"@return a fresh, uninitialized {@code HashMap} that has adequate space to accommodate\\n        {@code expectedSize} elements without the need for resizing\",\n      \"@return an unused, newly created {@code HashMap} with adequate capacity to accommodate\\n        {@code expectedSize} entries without resizing\",\n      \"@return a pristine, empty {@code HashMap} that can store {@code expectedSize} elements without\\n        requiring any resizing\"\n    ]\n  },\n  {\n    \"tag\": \"@param map the mappings to be placed in the new map\",\n    \"alternatives\": [\n      \"@param map the associations to be inserted into the new map\",\n      \"@param map the key-value pairs to be added to the newly created map\",\n      \"@param map the entries that should be included in the new map\"\n    ]\n  },\n  {\n    \"tag\": \"@return a new {@code HashMap} initialized with the mappings from {@code\\n        map}\",\n    \"alternatives\": [\n      \"@return a fresh {@code HashMap} that is preloaded with the associations from {@code map}\",\n      \"@return a new {@code HashMap} that has been populated with the mappings from {@code map}\",\n      \"@return an unused {@code HashMap} that has been initialized with the associations from {@code map}\"\n    ]\n  },\n  {\n    \"tag\": \"@return a new, empty {@code LinkedHashMap}\",\n    \"alternatives\": [\n      \"@return a newly created, uninitialized {@code LinkedHashMap}\",\n      \"@return an unused, freshly created {@code LinkedHashMap}\",\n      \"@return a pristine, empty {@code LinkedHashMap}\"\n    ]\n  },\n  {\n    \"tag\": \"@param expectedSize the number of entries you expect to add to the\\n       returned map\",\n    \"alternatives\": [\n      \"@param expectedSize the number of elements you anticipate adding to the\\n       resulting map\",\n      \"@param expectedSize the anticipated number of entries you plan to add to the\\n       map that is returned\",\n      \"@param expectedSize the estimated count of entries you intend to append to the\\n       map that will be returned\"\n    ]\n  },\n  {\n    \"tag\": \"@return a new, empty {@code LinkedHashMap} with enough capacity to hold\\n        {@code expectedSize} entries without resizing\",\n    \"alternatives\": [\n      \"@return a fresh, uninitialized {@code LinkedHashMap} that has sufficient room to store\\n        {@code expectedSize} elements without resizing\",\n      \"@return an unused, newly created {@code LinkedHashMap} with ample capacity to hold\\n        {@code expectedSize} entries without requiring resizing\",\n      \"@return a pristine, empty {@code LinkedHashMap} that can accommodate {@code expectedSize}\\n        entries without the need for resizing\"\n    ]\n  },\n  {\n    \"tag\": \"@param map the mappings to be placed in the new map\",\n    \"alternatives\": [\n      \"@param map the associations to be inserted into the new map\",\n      \"@param map the key-value pairs to be added to the newly created map\",\n      \"@param map the entries that should be included in the new map\"\n    ]\n  },\n  {\n    \"tag\": \"@return a new, {@code LinkedHashMap} initialized with the mappings from\\n        {@code map}\",\n    \"alternatives\": [\n      \"@return a new {@code LinkedHashMap} that has been preloaded with the associations from\\n        {@code map}\",\n      \"@return a fresh {@code LinkedHashMap} that has been populated with the mappings from\\n        {@code map}\",\n      \"@return an unused {@code LinkedHashMap} that has been initialized with the associations from\\n        {@code map}\"\n    ]\n  },\n  {\n    \"tag\": \"@return a new, empty {@code ConcurrentMap}\",\n    \"alternatives\": [\n      \"@return a freshly created, uninitialized {@code ConcurrentMap}\",\n      \"@return an unused, newly instantiated {@code ConcurrentMap}\",\n      \"@return a pristine, empty {@code ConcurrentMap}\"\n    ]\n  },\n  {\n    \"tag\": \"@return a new, empty {@code TreeMap}\",\n    \"alternatives\": [\n      \"@return a newly created, uninitialized {@code TreeMap}\",\n      \"@return an unused, fresh {@code TreeMap}\",\n      \"@return a pristine, empty {@code TreeMap}\"\n    ]\n  },\n  {\n    \"tag\": \"@param map the sorted map whose mappings are to be placed in the new map\\n       and whose comparator is to be used to sort the new map\",\n    \"alternatives\": [\n      \"@param map the ordered map from which the mappings are copied to the new map\\n       and whose comparator is utilized to arrange the new map\",\n      \"@param map the map in sorted order whose mappings are being transferred to the\\n       newly created map and whose comparator dictates the sorting of the new map\",\n      \"@param map the map that is sorted and contains the mappings to be inserted into\\n       the new map, with its comparator determining the ordering\"\n    ]\n  },\n  {\n    \"tag\": \"@return a new {@code TreeMap} initialized with the mappings from {@code\\n        map} and using the comparator of {@code map}\",\n    \"alternatives\": [\n      \"@return a fresh {@code TreeMap} that is preloaded with the mappings from {@code map}\\n        and employs the comparator of {@code map}\",\n      \"@return a new {@code TreeMap} that has been populated with the mappings from {@code map}\\n        and utilizes the comparator of {@code map}\",\n      \"@return an unused {@code TreeMap} that has been initialized with the associations from\\n        {@code map} and makes use of the comparator of {@code map}\"\n    ]\n  },\n  {\n    \"tag\": \"@param comparator the comparator to sort the keys with\",\n    \"alternatives\": [\n      \"@param comparator the comparator employed to arrange the keys\",\n      \"@param comparator the comparator used for ordering the keys\",\n      \"@param comparator the comparator that dictates the sorting of the keys\"\n    ]\n  },\n  {\n    \"tag\": \"@return a new, empty {@code TreeMap}\",\n    \"alternatives\": [\n      \"@return a freshly created, uninitialized {@code TreeMap}\",\n      \"@return an unused, new {@code TreeMap}\",\n      \"@return a pristine, empty {@code TreeMap}\"\n    ]\n  },\n  {\n    \"tag\": \"@param type the key type for this map\",\n    \"alternatives\": [\n      \"@param type the type of keys in this map\",\n      \"@param type the class of the keys in this map\",\n      \"@param type the datatype for the keys in this map\"\n    ]\n  },\n  {\n    \"tag\": \"@return a new, empty {@code EnumMap}\",\n    \"alternatives\": [\n      \"@return a freshly created, uninitialized {@code EnumMap}\",\n      \"@return an unused, new {@code EnumMap}\",\n      \"@return a pristine, empty {@code EnumMap}\"\n    ]\n  },\n  {\n    \"tag\": \"@param map the map from which to initialize this {@code EnumMap}\",\n    \"alternatives\": [\n      \"@param map the map that is used to set up this {@code EnumMap}\",\n      \"@param map the source map for initializing this {@code EnumMap}\",\n      \"@param map the initial map that populates this {@code EnumMap}\"\n    ]\n  },\n  {\n    \"tag\": \"@return a new {@code EnumMap} initialized with the mappings from {@code\\n        map}\",\n    \"alternatives\": [\n      \"@return a fresh {@code EnumMap} that has been populated with the associations from {@code map}\",\n      \"@return a new {@code EnumMap} that is preloaded with the mappings from {@code map}\",\n      \"@return an unused {@code EnumMap} that has been initialized with the associations from {@code map}\"\n    ]\n  },\n  {\n    \"tag\": \"@throws IllegalArgumentException if {@code m} is not an {@code EnumMap}\\n        instance and contains no mappings\",\n    \"alternatives\": [\n      \"@throws IllegalArgumentException if {@code m} is not an instance of {@code EnumMap}\\n        and does not contain any mappings\",\n      \"@throws IllegalArgumentException if {@code m} is not an {@code EnumMap}\\n        object and does not have any mappings\",\n      \"@throws IllegalArgumentException if {@code m} is neither an instance of {@code EnumMap}\\n        nor has any mappings\"\n    ]\n  },\n  {\n    \"tag\": \"@return a new, empty {@code IdentityHashMap}\",\n    \"alternatives\": [\n      \"@return a freshly created, uninitialized {@code IdentityHashMap}\",\n      \"@return an unused, new {@code IdentityHashMap}\",\n      \"@return a pristine, empty {@code IdentityHashMap}\"\n    ]\n  },\n  {\n    \"tag\": \"@param left the map to treat as the \\\"left\\\" map for purposes of comparison\",\n    \"alternatives\": [\n      \"@param left the map that is considered the \\\"left\\\" map for comparison purposes\",\n      \"@param left the map that is designated as the \\\"left\\\" map for comparison\",\n      \"@param left the map to be treated as the \\\"left\\\" map for comparison\"\n    ]\n  },\n  {\n    \"tag\": \"@param right the map to treat as the \\\"right\\\" map for purposes of comparison\",\n    \"alternatives\": [\n      \"@param right the map that is considered the \\\"right\\\" map for comparison purposes\",\n      \"@param right the map that is designated as the \\\"right\\\" map for comparison\",\n      \"@param right the map to be treated as the \\\"right\\\" map for comparison\"\n    ]\n  },\n  {\n    \"tag\": \"@return the difference between the two maps\",\n    \"alternatives\": [\n      \"@return the variance between the two maps\",\n      \"@return the dissimilarity between the two maps\",\n      \"@return the disparity between the two maps\"\n    ]\n  },\n  {\n    \"tag\": \"@param left the map to treat as the \\\"left\\\" map for purposes of comparison\",\n    \"alternatives\": [\n      \"@param left the map that is considered the \\\"left\\\" map for comparison purposes\",\n      \"@param left the map that is designated as the \\\"left\\\" map for comparison\",\n      \"@param left the map to be treated as the \\\"left\\\" map for comparison\"\n    ]\n  }\n]"