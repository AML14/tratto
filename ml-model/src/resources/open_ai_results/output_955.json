"output = [\n  {\n    'tag': '@param <T> the element type',\n    'alternatives': [\n      '@param <T> the type of element',\n      '@param <T> the type of the elements',\n      '@param <T> the type of the item',\n      '@param <T> the generic type of the element',\n      '@param <T> the type of the object'\n    ]\n  },\n  {\n    'tag': '@param collection the collection, possibly <code>null</code>',\n    'alternatives': [\n      '@param collection the collection, potentially <code>null</code>',\n      '@param collection the collection, maybe <code>null</code>',\n      '@param collection the collection, could be <code>null</code>',\n      '@param collection the collection, may be <code>null</code>',\n      '@param collection the collection, might be <code>null</code>'\n    ]\n  },\n  {\n    'tag': '@return an empty collection if the argument is <code>null</code>',\n    'alternatives': [\n      '@return empty collection if the argument is <code>null</code>',\n      '@return empty collection when the argument is <code>null</code>',\n      '@return if the argument is <code>null</code>, return an empty collection',\n      '@return return an empty collection if the argument is <code>null</code>',\n      '@return when the argument is <code>null</code>, an empty collection is returned'\n    ]\n  },\n  {\n    'tag': '@param <O> the generic type that is able to represent the types contained\\n       in both input collections.',\n    'alternatives': [\n      '@param <O> the generic type that can represent types contained\\n       in both input collections.',\n      '@param <O> the generic type that represents the types contained\\n       in both input collections.',\n      '@param <O> the generic type that can handle the types contained\\n       in both input collections.',\n      '@param <O> the generic type capable of representing the types contained\\n       in both input collections.',\n      '@param <O> the generic type able to describe the types contained\\n       in both input collections.'\n    ]\n  },\n  {\n    'tag': '@return the union of the two collections',\n    'alternatives': [\n      '@return the combination of the two collections',\n      '@return the merged collection of the two collections',\n      '@return the joined collection of the two collections',\n      '@return the united collection of the two collections',\n      '@return the amalgamation of the two collections'\n    ]\n  },\n  {\n    'tag': '@return the intersection of the two collections',\n    'alternatives': [\n      '@return the common elements between the two collections',\n      '@return the shared elements of the two collections',\n      '@return the overlapping elements of the two collections',\n      '@return the commonalities of the two collections',\n      '@return the cross-section of the two collections'\n    ]\n  },\n  {\n    'tag': '@return the symmetric difference of the two collections',\n    'alternatives': [\n      '@return the difference between the two collections',\n      '@return the distinct elements of the two collections',\n      '@return the exclusive elements of the two collections',\n      '@return the unique elements of the two collections',\n      '@return the dissimilar elements of the two collections'\n    ]\n  },\n  {\n    'tag': '@return a new collection with the results',\n    'alternatives': [\n      '@return a new collection containing the outcomes',\n      '@return a new collection with the output',\n      '@return a new collection that holds the results',\n      '@return a new collection with the produced values',\n      '@return a new collection containing the generated data'\n    ]\n  },\n  {\n    'tag': '@param p the condition used to determine which elements of <i>b</i> are\\n       subtracted.',\n    'alternatives': [\n      '@param p the criterion used to decide which elements from <i>b</i> are\\n       removed.',\n      '@param p the predicate used to identify which elements of <i>b</i> to\\n       subtract.',\n      '@param p the condition used to determine which elements from <i>b</i> are\\n       deducted.',\n      '@param p the test used to establish which elements of <i>b</i> are\\n       taken away.',\n      '@param p the requirement used to specify which elements of <i>b</i> are\\n       eliminated.'\n    ]\n  },\n  {\n    'tag': '@param <O> the generic type that is able to represent the types contained\\n       in both input collections.',\n    'alternatives': [\n      '@param <O> the generic type that can represent types contained\\n       in both input collections.',\n      '@param <O> the generic type that represents the types contained\\n       in both input collections.',\n      '@param <O> the generic type that can handle the types contained\\n       in both input collections.',\n      '@param <O> the generic type capable of representing the types contained\\n       in both input collections.',\n      '@param <O> the generic type able to describe the types contained\\n       in both input collections.'\n    ]\n  },\n  {\n    'tag': '@return a new collection with the results',\n    'alternatives': [\n      '@return a new collection containing the outcomes',\n      '@return a new collection with the output',\n      '@return a new collection that holds the results',\n      '@return a new collection with the produced values',\n      '@return a new collection containing the generated data'\n    ]\n  },\n  {\n    'tag': '@return <code>true</code> iff the intersection of the collections has the same cardinality\\n  as the set of unique elements from the second collection',\n    'alternatives': [\n      '@return <code>true</code> if the intersection of the collections has the same count\\n  as the set of distinct elements from the second collection',\n      '@return <code>true</code> if the intersection of the collections has an equal number\\n  of unique elements as the second collection',\n      '@return <code>true</code> if the intersection of the collections has the identical count\\n  as the set of one-of-a-kind elements from the second collection',\n      '@return <code>true</code> if the intersection of the collections and the set of unique elements\\n  from the second collection have equal cardinality',\n      '@return <code>true</code> if the intersection of the collections has an equivalent number\\n  of distinct elements as the set of unique elements from the second collection'\n    ]\n  },\n  {\n    'tag': '@return <code>true</code> iff the intersection of the collections is non-empty',\n    'alternatives': [\n      '@return <code>true</code> if the intersection of the collections contains elements',\n      '@return <code>true</code> if the intersection of the collections is not empty',\n      '@return <code>true</code> if the intersection of the collections has elements',\n      '@return <code>true</code> if the intersection of the collections is populated',\n      '@return <code>true</code> if the intersection of the collections holds values'\n    ]\n  },\n  {\n    'tag': '@param <O> the type of object in the returned {@link Map}. This is a super type of <I>.',\n    'alternatives': [\n      '@param <O> the object type in the returned {@link Map}. This is a parent type of <I>.',\n      '@param <O> the type of object in the returned {@link Map}. This is a superclass of <I>.',\n      '@param <O> the class of objects in the returned {@link Map}. This is a base type of <I>.',\n      '@param <O> the object category in the returned {@link Map}. This is a higher-level type of <I>.',\n      '@param <O> the kind of object in the returned {@link Map}. This is a broader type of <I>.'\n    ]\n  },\n  {\n    'tag': '@return the populated cardinality map',\n    'alternatives': [\n      '@return the populated occurrence map',\n      '@return the populated count map',\n      '@return the filled cardinality map',\n      '@return the filled occurrence map',\n      '@return the filled count map'\n    ]\n  },\n  {\n    'tag': '@return <code>true</code> iff <i>a</i> is a sub-collection of <i>b</i>',\n    'alternatives': [\n      '@return <code>true</code> if <i>a</i> is a subset of <i>b</i>',\n      '@return <code>true</code> when <i>a</i> is a part of <i>b</i>',\n      '@return <code>true</code> if <i>a</i> is contained in <i>b</i>',\n      '@return <code>true</code> if <i>a</i> is included in <i>b</i>',\n      '@return <code>true</code> if <i>a</i> is a portion of <i>b</i>'\n    ]\n  },\n  {\n    'tag': '@return <code>true</code> iff the collections contain the same elements with the same cardinalities.',\n    'alternatives': [\n      '@return <code>true</code> if the collections have identical elements and counts.',\n      '@return <code>true</code> if the collections have the same elements and the same counts.',\n      '@return <code>true</code> if the collections possess equivalent elements and cardinalities.',\n      '@return <code>true</code> if the collections hold the same elements and have the same counts.',\n      '@return <code>true</code> if the collections exhibit matching elements and numbers.'\n    ]\n  },\n  {\n    'tag': '@param <E> the element type',\n    'alternatives': [\n      '@param <E> the type of element',\n      '@param <E> the type of the elements',\n      '@param <E> the type of the item',\n      '@param <E> the generic type of the element',\n      '@param <E> the type of the object'\n    ]\n  },\n  {\n    'tag': '@param equator the Equator used for testing equality',\n    'alternatives': [\n      '@param equator the Equator employed to check for equality',\n      '@param equator the Equator utilized for equality testing',\n      '@param equator the Equator applied to test for equality',\n      '@param equator the Equator utilized for equality verification',\n      '@param equator the Equator used for assessing equality'\n    ]\n  },\n  {\n    'tag': '@return <code>true</code> iff the collections contain the same elements with the same cardinalities.',\n    'alternatives': [\n      '@return <code>true</code> if the collections have identical elements and counts.',\n      '@return <code>true</code> if the collections have the same elements and the same counts.',\n      '@return <code>true</code> if the collections possess equivalent elements and cardinalities.',\n      '@return <code>true</code> if the collections hold the same elements and have the same counts.',\n      '@return <code>true</code> if the collections exhibit matching elements and numbers.'\n    ]\n  },\n  {\n    'tag': '@param obj the object to find the cardinality of',\n    'alternatives': [\n      '@param obj the object to determine the count of',\n      '@param obj the object to calculate the cardinality of',\n      '@param obj the object to compute the number of',\n      '@param obj the object to evaluate the cardinality of',\n      '@param obj the object to establish the count of'\n    ]\n  },\n  {\n    'tag': '@param coll the {@link Iterable} to search',\n    'alternatives': [\n      '@param coll the {@link Iterable} to look for',\n      '@param coll the {@link Iterable} to explore',\n      '@param coll the {@link Iterable} to investigate',\n      '@param coll the {@link Iterable} to examine',\n      '@param coll the {@link Iterable} to traverse'\n    ]\n  }\n]"