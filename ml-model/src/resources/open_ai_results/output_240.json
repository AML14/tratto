"[\n  {\n    'tag': '@param targetCallback if {@code false},\\n           {@link AbstractNode#removeEdgeCallback(AbstractEdge)} is not\\n           called for the target node of the edge',\n    'alternatives': [\n      '@param targetCallback if {@code false},\\n           {@link AbstractNode#removeEdgeCallback(AbstractEdge)} is not\\n           invoked for the target node of the edge.',\n      '@param targetCallback if {@code false},\\n           the method {@link AbstractNode#removeEdgeCallback(AbstractEdge)} is not\\n           executed for the target node of the edge.',\n      '@param targetCallback if {@code false},\\n           the target node of the edge does not have\\n           {@link AbstractNode#removeEdgeCallback(AbstractEdge)} called.',\n      '@param targetCallback if {@code false},\\n           the target node of the edge will not receive\\n           {@link AbstractNode#removeEdgeCallback(AbstractEdge)}.',\n      '@param targetCallback if {@code false},\\n           the target node of the edge should not be\\n           invoked with {@link AbstractNode#removeEdgeCallback(AbstractEdge)}'\n    ]\n  },\n  {\n    'tag': '@param id Identifier of the graph',\n    'alternatives': [\n      '@param id ID of the graph',\n      '@param id The identifier of the graph',\n      '@param id Graph identifier',\n      '@param id Identifier for the graph',\n      '@param id Unique identification for the graph'\n    ]\n  },\n  {\n    'tag': '@param id ',\n    'alternatives': [\n      '@param id The identifier',\n      '@param id The ID',\n      '@param id Graph ID',\n      '@param id Unique ID',\n      '@param id Identification'\n    ]\n  },\n  {\n    'tag': '@param strictChecking ',\n    'alternatives': [\n      '@param strictChecking If strict checking',\n      '@param strictChecking The strict checking parameter',\n      '@param strictChecking Specifies strict checking',\n      '@param strictChecking Set strict checking',\n      '@param strictChecking Indicates strict checking'\n    ]\n  },\n  {\n    'tag': '@param autoCreate ',\n    'alternatives': [\n      '@param autoCreate If auto-create',\n      '@param autoCreate The auto-create parameter',\n      '@param autoCreate Specifies auto-create',\n      '@param autoCreate Set auto-create',\n      '@param autoCreate Indicates auto-create'\n    ]\n  },\n  {\n    'tag': '@param id Unique identifier of this edge.',\n    'alternatives': [\n      '@param id Unique ID for this edge.',\n      '@param id The unique identification of this edge.',\n      '@param id The edge\\'s unique identifier.',\n      '@param id ID that uniquely identifies this edge.',\n      '@param id Identification that is unique to this edge.'\n    ]\n  },\n  {\n    'tag': '@param source Source node.',\n    'alternatives': [\n      '@param source The node where the edge originates.',\n      '@param source The node from which the edge starts.',\n      '@param source The origin node of the edge.',\n      '@param source The node that is the source of the edge.',\n      '@param source The starting node of the edge.'\n    ]\n  },\n  {\n    'tag': '@param target Target node.',\n    'alternatives': [\n      '@param target The node where the edge ends.',\n      '@param target The node to which the edge points.',\n      '@param target The destination node of the edge.',\n      '@param target The node that is the target of the edge.',\n      '@param target The ending node of the edge.'\n    ]\n  },\n  {\n    'tag': '@param directed Indicates if the edge is directed.',\n    'alternatives': [\n      '@param directed Specifies whether the edge is directed.',\n      '@param directed If true, the edge is directed.',\n      '@param directed True to indicate that the edge is directed.',\n      '@param directed Set to true if the edge is directed.',\n      '@param directed Indicates the directionality of the edge.'\n    ]\n  },\n  {\n    'tag': '@return A graph instance or null if the graph class was not found.',\n    'alternatives': [\n      '@return An instance of a graph or null if the graph class was not found.',\n      '@return The graph object or null if the graph class was not found.',\n      '@return The graph instance if found, otherwise null.',\n      '@return Either a graph instance or null if the graph class was not found.',\n      '@return Returns a graph instance or null if the graph class was not found.'\n    ]\n  },\n  {\n    'tag': '@return The newly created edge.',\n    'alternatives': [\n      '@return The edge that was just created.',\n      '@return The recently created edge.',\n      '@return The edge that was newly instantiated.',\n      '@return Returns the edge that was created.',\n      '@return Returns the edge that has been newly created.'\n    ]\n  },\n  {\n    'tag': '@return True if the edge is directed.',\n    'alternatives': [\n      '@return Returns true if the edge is directed.',\n      '@return Returns a boolean value indicating whether the edge is directed.',\n      '@return Indicates whether the edge is directed.',\n      '@return If true, the edge is directed.',\n      '@return Returns true if the edge has a direction.'\n    ]\n  },\n  {\n    'tag': '@return True if this edge is a loop.',\n    'alternatives': [\n      '@return Returns true if this edge forms a loop.',\n      '@return Indicates if this edge is a loop.',\n      '@return If true, this edge is a loop.',\n      '@return Returns a boolean value indicating whether this edge is a loop.',\n      '@return Returns true if the edge is a loop.'\n    ]\n  },\n  {\n    'tag': '@return The first node of the edge.',\n    'alternatives': [\n      '@return The initial node of the edge.',\n      '@return The starting node of the edge.',\n      '@return The source node of the edge.',\n      '@return The node that comes first in the edge.',\n      '@return Returns the node that is the first in the edge.'\n    ]\n  },\n  {\n    'tag': '@return The second node of the edge.',\n    'alternatives': [\n      '@return The next node of the edge.',\n      '@return The destination node of the edge.',\n      '@return The target node of the edge.',\n      '@return The node that comes second in the edge.',\n      '@return Returns the node that is the second in the edge.'\n    ]\n  },\n  {\n    'tag': '@return The origin node of the edge.',\n    'alternatives': [\n      '@return The source node of the edge.',\n      '@return The starting node of the edge.',\n      '@return The initial node from which the edge originates.',\n      '@return The node from which the edge is derived.',\n      '@return Returns the node that is the origin of the edge.'\n    ]\n  },\n  {\n    'tag': '@return The destination node of the edge.',\n    'alternatives': [\n      '@return The target node of the edge.',\n      '@return The ending node of the edge.',\n      '@return The node to which the edge is directed.',\n      '@return The node to which the edge is headed.',\n      '@return Returns the node that is the destination of the edge.'\n    ]\n  },\n  {\n    'tag': '@param node The node we search the opposite of.',\n    'alternatives': [\n      '@param node The node for which we find the counterpart.',\n      '@param node The node for which the opposite is searched.',\n      '@param node The node for which the opposite is sought.',\n      '@param node The node for which the opposite is being sought.',\n      '@param node The node of which we are looking for the opposite.'\n    ]\n  },\n  {\n    'tag': '@return the opposite node of the given node.',\n    'alternatives': [\n      '@return the node that is opposite to the given node.',\n      '@return the counterpart node of the given node.',\n      '@return returns the opposite node of the provided node.',\n      '@return provides the node that is the opposite of the given node.',\n      '@return the node that is the inverse of the given node.'\n    ]\n  },\n  {\n    'tag': '@return the root of the path.',\n    'alternatives': [\n      '@return the path\\'s root node.',\n      '@return returns the starting point of the path.',\n      '@return provides the root node of the path.',\n      '@return the node from which the path begins.',\n      '@return the starting node of the path.'\n    ]\n  },\n  {\n    'tag': '@param root The root of the path.',\n    'alternatives': [\n      '@param root The starting point of the path.',\n      '@param root The initial node of the path.',\n      '@param root The node from which the path originates.',\n      '@param root The node that begins the path.',\n      '@param root The node that is the origin of the path.'\n    ]\n  },\n  {\n    'tag': '@param node The node tested for existence in the path.',\n    'alternatives': [\n      '@param node The node that is checked for presence in the path.',\n      '@param node The node being tested for existence in the path.',\n      '@param node The node that is being examined for occurrence in the path.',\n      '@param node The node that is verified for existence in the path.',\n      '@param node The node that is being evaluated for presence in the path.'\n    ]\n  },\n  {\n    'tag': '@return <code>true</code> if the path contains the node.',\n    'alternatives': [\n      '@return <code>true</code> if the node is present in the path.',\n      '@return <code>true</code> if the path includes the node.',\n      '@return <code>true</code> if the node exists in the path.',\n      '@return <code>true</code> if the node is found in the path.',\n      '@return <code>true</code> if the node appears in the path.'\n    ]\n  },\n  {\n    'tag': '@param edge The edge tested for existence in the path.',\n    'alternatives': [\n      '@param edge The edge that is checked for presence in the path.',\n      '@param edge The edge being tested for existence in the path.',\n      '@param edge The edge that is being examined for occurrence in the path.',\n      '@param edge The edge that is verified for existence in the path.',\n      '@param edge The edge that is being evaluated for presence in the path.'\n    ]\n  },\n  {\n    'tag': '@return <code>true</code> if the path contains the edge.',\n    'alternatives': [\n      '@return <code>true</code> if the edge is present in the path.',\n      '@return <code>true</code> if the path includes the edge.',\n      '@return <code>true</code> if the edge exists in the path.',\n      '@return <code>true</code> if the edge is found in the path.',\n      '@return <code>true</code> if the edge appears in the path.'\n    ]\n  }\n]"