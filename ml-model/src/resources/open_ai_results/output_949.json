"[\n{\n'tag': '@throws ClassCastException if any value is not an instance of the type\\n    specified by its key',\n'alternatives': [\n'@throws ClassCastException if any value is not an instance of the class\\n    specified by its key',\n'@throws ClassCastException if any value does not belong to the type\\n    specified by its key',\n'@throws ClassCastException if any value is not of the type\\n    specified by its key'\n]\n},\n{\n'tag': '@param type the type of elements desired\\n\\n<p><b>{@code Stream} equivalent:</b> <pre>   {@code',\n'alternatives': [\n'@param type the desired type of elements\\n\\n<p><b>{@code Stream} equivalent:</b> <pre>   {@code',\n'@param type specifies the type of elements required\\n\\n<p><b>{@code Stream} equivalent:</b> <pre>   {@code',\n'@param type the type of elements required\\n\\n<p><b>{@code Stream} equivalent:</b> <pre>   {@code'\n]\n},\n{\n'tag': '@throws NullPointerException if the first element is null; if this is a possibility, use\\n    {@code iterator().next()} or {@link Iterables#getFirst} instead.',\n'alternatives': [\n'@throws NullPointerException if the first element is null; if this is a potential case, use\\n    {@code iterator().next()} or {@link Iterables#getFirst} instead.',\n'@throws NullPointerException if the first element is null; consider using\\n    {@code iterator().next()} or {@link Iterables#getFirst} instead if this could occur.',\n'@throws NullPointerException if the first element is null; in such cases, use\\n    {@code iterator().next()} or {@link Iterables#getFirst} instead.'\n]\n},\n{\n'tag': '@throws NullPointerException if the last element is null; if this is a possibility, use\\n    {@link Iterables#getLast} instead.',\n'alternatives': [\n'@throws NullPointerException if the last element is null; if this is a potential case, use\\n    {@link Iterables#getLast} instead.',\n'@throws NullPointerException if the last element is null; consider using\\n    {@link Iterables#getLast} instead if this could occur.',\n'@throws NullPointerException if the last element is null; in such cases, use\\n    {@link Iterables#getLast} instead.'\n]\n},\n{\n'tag': '@param maxSize the maximum number of elements in the returned fluent iterable',\n'alternatives': [\n'@param maxSize the maximum number of elements in the resulting\\n    fluent iterable',\n'@param maxSize the maximum number of elements in the resulting iterable',\n'@param maxSize specifies the maximum number of elements in the returned fluent iterable'\n]\n},\n{\n'tag': '@param comparator the function by which to sort list elements',\n'alternatives': [\n'@param comparator the function used for sorting the elements of the list',\n'@param comparator the function used to sort the elements of the list',\n'@param comparator specifies the function by which the list elements are sorted'\n]\n},\n{\n'tag': '@throws NullPointerException if any element is null',\n'alternatives': [\n'@throws NullPointerException if any element is {@code null}',\n'@throws NullPointerException if any element is intentionally left empty',\n'@throws NullPointerException if any element has no value'\n]\n},\n{\n'tag': '@param comparator the function by which to sort set elements',\n'alternatives': [\n'@param comparator the function used to sort the elements of the set',\n'@param comparator specifies the function by which set elements are sorted',\n'@param comparator determines the order in which set elements are sorted'\n]\n},\n{\n'tag': '@throws NullPointerException if any element is null',\n'alternatives': [\n'@throws NullPointerException if any element is {@code null}',\n'@throws NullPointerException if any element is missing',\n'@throws NullPointerException if any element has no value'\n]\n},\n{\n'tag': '@throws NullPointerException if any element of this iterable is {@code null}, or if {@code\\n    valueFunction} produces {@code null} for any key',\n'alternatives': [\n'@throws NullPointerException if any element of this iterable is {@code null}, or if {@code\\n    valueFunction} returns {@code null} for any key',\n'@throws NullPointerException if any element of this iterable is null, or if {@code\\n    valueFunction} produces null for any key',\n'@throws NullPointerException if any element of this iterable is {@code null}, or if {@code\\n    valueFunction} generates {@code null} for any key'\n]\n},\n{\n'tag': '@param keyFunction the function used to produce the key for each value',\n'alternatives': [\n'@param keyFunction the function that generates the key for each value',\n'@param keyFunction specifies the function used to create the key for each value',\n'@param keyFunction determines the key for each value'\n]\n},\n{\n'tag': '@throws NullPointerException if any of the following cases is true:\\n    <ul>\\n      <li>{@code keyFunction} is null\\n      <li>An element in this fluent iterable is null\\n      <li>{@code keyFunction} returns {@code null} for any element of this iterable\\n    </ul>\\n\\n<p><b>{@code Stream} equivalent:</b> {@code stream.collect(Collectors.groupingBy(keyFunction))}\\nbehaves similarly, but returns a mutable {@code Map<K, List<E>>} instead, and may not preserve\\nthe order of entries).',\n'alternatives': [\n'@throws NullPointerException if any of the following conditions are met:\\n    <ul>\\n      <li>{@code keyFunction} is null\\n      <li>An element in this fluent iterable is null\\n      <li>{@code keyFunction} returns null for any element of this iterable\\n    </ul>\\n\\n<p><b>{@code Stream} equivalent:</b> {@code stream.collect(Collectors.groupingBy(keyFunction))}\\nbehaves similarly, but returns a mutable {@code Map<K, List<E>>} instead and may not maintain\\nthe order of entries).',\n'@throws NullPointerException if any of the following situations occur:\\n    <ul>\\n      <li>{@code keyFunction} is null\\n      <li>An element in this fluent iterable is null\\n      <li>{@code keyFunction} produces null for any element of this iterable\\n    </ul>\\n\\n<p><b>{@code Stream} equivalent:</b> {@code stream.collect(Collectors.groupingBy(keyFunction))}\\nhas a similar behavior, but it returns a mutable {@code Map<K, List<E>>} instead and may not keep\\nthe order of entries).',\n'@throws NullPointerException if any of the following cases are true:\\n    <ul>\\n      <li>{@code keyFunction} is null\\n      <li>An element in this fluent iterable is null\\n      <li>{@code keyFunction} returns null for any element of this iterable\\n    </ul>\\n\\n<p><b>{@code Stream} equivalent:</b> {@code stream.collect(Collectors.groupingBy(keyFunction))}\\nworks similarly, but it returns a mutable {@code Map<K, List<E>>} instead and may not retain\\nthe order of entries).'\n]\n},\n{\n'tag': '@param keyFunction the function used to produce the key for each value',\n'alternatives': [\n'@param keyFunction the function that generates the key for each value',\n'@param keyFunction specifies the function used to create the key for each value',\n'@param keyFunction determines the key for each value'\n]\n},\n{\n'tag': '@return a map mapping the result of evaluating the function {@code\\n    keyFunction} on each value in this fluent iterable to that value',\n'alternatives': [\n'@return a map that maps the outcome of evaluating the function {@code\\n    keyFunction} on each value in this fluent iterable to that value',\n'@return a map that maps the result of executing the function {@code\\n    keyFunction} on each value in this fluent iterable to that value',\n'@return a map that associates the result of evaluating the function {@code\\n    keyFunction} on each value in this fluent iterable with that value'\n]\n},\n{\n'tag': '@throws IllegalArgumentException if {@code keyFunction} produces the same\\n    key for more than one value in this fluent iterable',\n'alternatives': [\n'@throws IllegalArgumentException if {@code keyFunction} generates the same\\n    key for multiple values in this fluent iterable',\n'@throws IllegalArgumentException if {@code keyFunction} produces identical\\n    key for multiple values in this fluent iterable',\n'@throws IllegalArgumentException if {@code keyFunction} creates the same\\n    key for multiple values in this fluent iterable'\n]\n},\n{\n'tag': '@throws NullPointerException if any elements of this fluent iterable is null, or\\n    if {@code keyFunction} produces {@code null} for any value',\n'alternatives': [\n'@throws NullPointerException if any elements of this fluent iterable are null, or\\n    if {@code keyFunction} generates {@code null} for any value',\n'@throws NullPointerException if any elements of this fluent iterable are {@code null}, or\\n    if {@code keyFunction} returns {@code null} for any value',\n'@throws NullPointerException if any elements of this fluent iterable are null, or\\n    if {@code keyFunction} creates {@code null} for any value'\n]\n},\n{\n'tag': '@param type the type of the elements',\n'alternatives': [\n'@param type the type of elements',\n'@param type specifies the type of elements',\n'@param type indicates the type of elements'\n]\n},\n{\n'tag': '@return a newly-allocated array into which all the elements of this fluent iterable have\\n    been copied',\n'alternatives': [\n'@return a new array that contains all the elements of this fluent iterable',\n'@return a fresh array into which all the elements of this fluent iterable have\\n    been replicated',\n'@return a new array with copies of all the elements in this fluent iterable'\n]\n},\n{\n'tag': '@param collection the collection to copy elements to',\n'alternatives': [\n'@param collection the target collection to copy elements into',\n'@param collection the destination collection for copying elements',\n'@param collection specifies the collection where elements will be copied to'\n]\n},\n{\n'tag': '@return {@code collection}, for convenience',\n'alternatives': [\n'@return the {@code collection} for convenience',\n'@return the {@code collection} as a matter of convenience',\n'@return the {@code collection} to facilitate usage'\n]\n},\n{\n'tag': '@param element the element to check',\n'alternatives': [\n'@param element the element to verify',\n'@param element specifies the element to examine',\n'@param element determines the element to inspect'\n]\n},\n{\n'tag': '@param list the list to be searched.',\n'alternatives': [\n'@param list the list that needs to be searched.',\n'@param list specifies the list to be searched.',\n'@param list determines the list to search in.'\n]\n},\n{\n'tag': '@param key the value to be searched for.',\n'alternatives': [\n'@param key the value to look for.',\n'@param key specifies the value to search for.',\n'@param key determines the value to be sought.'\n]\n},\n{\n'tag': '@param comparator the comparator by which the list is ordered.',\n'alternatives': [\n'@param comparator the comparator that defines the order of the list.',\n'@param comparator specifies the comparator by which the list is sorted.',\n'@param comparator determines the order of the list using a comparator.'\n]\n},\n{\n'tag': '@param presentBehavior the specification for what to do if at least one element of the list\\n       compares as equal to the key.',\n'alternatives': [\n'@param presentBehavior the definition of the action to perform if there is at least one element in the list\\n       that compares as equal to the key.',\n'@param presentBehavior specifies what to do if there is at least one element in the list\\n       that compares as equal to the key.',\n'@param presentBehavior determines the behavior if there is at least one element in the list\\n       that compares as equal to the key.'\n]\n}\n]"