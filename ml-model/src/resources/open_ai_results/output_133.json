"output = [\n  {\n    'tag': '@param bag the bag to decorate, must not be null',\n    'alternatives': [\n      '@param bag the bag to embellish, must not be null',\n      '@param bag the bag to adorn, must not be null',\n      '@param bag must not be null, is the bag to decorate',\n      '@param bag the bag that needs to be decorated, must not be null',\n      '@param bag the bag that requires decoration, must not be null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if the map is null',\n    'alternatives': [\n      '@throws NullPointerException in case the map is null',\n      '@throws NullPointerException if the map parameter is null',\n      '@throws NullPointerException when the map is null',\n      '@throws NullPointerException if null is passed as the map',\n      '@throws NullPointerException if the map parameter is not provided'\n    ]\n  },\n  {\n    'tag': '@param map the map to decorate, must not be null',\n    'alternatives': [\n      '@param map the map to embellish, must not be null',\n      '@param map the map to adorn, must not be null',\n      '@param map must not be null, is the map to decorate',\n      '@param map the map that needs to be decorated, must not be null',\n      '@param map the map that requires decoration, must not be null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if the list is null',\n    'alternatives': [\n      '@throws NullPointerException in case the list is null',\n      '@throws NullPointerException if the list parameter is null',\n      '@throws NullPointerException when the list is null',\n      '@throws NullPointerException if null is passed as the list',\n      '@throws NullPointerException if the list parameter is not provided'\n    ]\n  },\n  {\n    'tag': '@throws FunctorException always',\n    'alternatives': [\n      '@throws FunctorException in all cases',\n      '@throws FunctorException under any circumstances',\n      '@throws FunctorException without exception',\n      '@throws FunctorException without fail',\n      '@throws FunctorException no matter what'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if classToInstantiate is null',\n    'alternatives': [\n      '@throws NullPointerException in case classToInstantiate is null',\n      '@throws NullPointerException if the classToInstantiate parameter is null',\n      '@throws NullPointerException when the classToInstantiate is null',\n      '@throws NullPointerException if null is passed as the classToInstantiate',\n      '@throws NullPointerException if the classToInstantiate parameter is not provided'\n    ]\n  },\n  {\n    'tag': '@param classToInstantiate the class to instantiate, not null',\n    'alternatives': [\n      '@param classToInstantiate the class to create, not null',\n      '@param classToInstantiate the class to generate, not null',\n      '@param classToInstantiate must not be null, is the class to instantiate',\n      '@param classToInstantiate the class that needs to be instantiated, not null',\n      '@param classToInstantiate the class that requires instantiation, not null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if list or transformer is null',\n    'alternatives': [\n      '@throws NullPointerException in case list or transformer is null',\n      '@throws NullPointerException if the list or transformer parameter is null',\n      '@throws NullPointerException when either list or transformer is null',\n      '@throws NullPointerException if null is passed as either list or transformer',\n      '@throws NullPointerException if the list or transformer parameter is not provided'\n    ]\n  },\n  {\n    'tag': '@param list the list to decorate, must not be null',\n    'alternatives': [\n      '@param list the list to embellish, must not be null',\n      '@param list the list to adorn, must not be null',\n      '@param list must not be null, is the list to decorate',\n      '@param list the list that needs to be decorated, must not be null',\n      '@param list the list that requires decoration, must not be null'\n    ]\n  },\n  {\n    'tag': '@param transformer the transformer to use for conversion, must not be null',\n    'alternatives': [\n      '@param transformer the transformer to utilize for conversion, must not be null',\n      '@param transformer the transformer to employ for conversion, must not be null',\n      '@param transformer must not be null, is the transformer to use for conversion',\n      '@param transformer the transformer that needs to be used for conversion, must not be null',\n      '@param transformer the transformer that requires usage for conversion, must not be null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if list or transformer is null',\n    'alternatives': [\n      '@throws NullPointerException in case list or transformer is null',\n      '@throws NullPointerException if the list or transformer parameter is null',\n      '@throws NullPointerException when either list or transformer is null',\n      '@throws NullPointerException if null is passed as either list or transformer',\n      '@throws NullPointerException if the list or transformer parameter is not provided'\n    ]\n  },\n  {\n    'tag': '@param list the list to decorate, must not be null',\n    'alternatives': [\n      '@param list the list to embellish, must not be null',\n      '@param list the list to adorn, must not be null',\n      '@param list must not be null, is the list to decorate',\n      '@param list the list that needs to be decorated, must not be null',\n      '@param list the list that requires decoration, must not be null'\n    ]\n  },\n  {\n    'tag': '@param transformer the transformer to use for conversion, must not be null',\n    'alternatives': [\n      '@param transformer the transformer to utilize for conversion, must not be null',\n      '@param transformer the transformer to employ for conversion, must not be null',\n      '@param transformer must not be null, is the transformer to use for conversion',\n      '@param transformer the transformer that needs to be used for conversion, must not be null',\n      '@param transformer the transformer that requires usage for conversion, must not be null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if list or transformer is null',\n    'alternatives': [\n      '@throws NullPointerException in case list or transformer is null',\n      '@throws NullPointerException if the list or transformer parameter is null',\n      '@throws NullPointerException when either list or transformer is null',\n      '@throws NullPointerException if null is passed as either list or transformer',\n      '@throws NullPointerException if the list or transformer parameter is not provided'\n    ]\n  },\n  {\n    'tag': '@param list the list to decorate, must not be null',\n    'alternatives': [\n      '@param list the list to embellish, must not be null',\n      '@param list the list to adorn, must not be null',\n      '@param list must not be null, is the list to decorate',\n      '@param list the list that needs to be decorated, must not be null',\n      '@param list the list that requires decoration, must not be null'\n    ]\n  },\n  {\n    'tag': '@param transformer the transformer to use for conversion, must not be null',\n    'alternatives': [\n      '@param transformer the transformer to utilize for conversion, must not be null',\n      '@param transformer the transformer to employ for conversion, must not be null',\n      '@param transformer must not be null, is the transformer to use for conversion',\n      '@param transformer the transformer that needs to be used for conversion, must not be null',\n      '@param transformer the transformer that requires usage for conversion, must not be null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if trie is null',\n    'alternatives': [\n      '@throws NullPointerException in case the trie is null',\n      '@throws NullPointerException if the trie parameter is null',\n      '@throws NullPointerException when the trie is null',\n      '@throws NullPointerException if null is passed as the trie',\n      '@throws NullPointerException if the trie parameter is not provided'\n    ]\n  },\n  {\n    'tag': '@param trie the trie to make unmodifiable, must not be null',\n    'alternatives': [\n      '@param trie the trie to render unmodifiable, must not be null',\n      '@param trie the trie to transform into unmodifiable, must not be null',\n      '@param trie must not be null, is the trie to make unmodifiable',\n      '@param trie the trie that needs to be made unmodifiable, must not be null',\n      '@param trie the trie that requires unmodifiable state, must not be null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if map is null',\n    'alternatives': [\n      '@throws NullPointerException in case the map is null',\n      '@throws NullPointerException if the map parameter is null',\n      '@throws NullPointerException when the map is null',\n      '@throws NullPointerException if null is passed as the map',\n      '@throws NullPointerException if the map parameter is not provided'\n    ]\n  },\n  {\n    'tag': '@param map the map to decorate, must not be null',\n    'alternatives': [\n      '@param map the map to embellish, must not be null',\n      '@param map the map to adorn, must not be null',\n      '@param map must not be null, is the map to decorate',\n      '@param map the map that needs to be decorated, must not be null',\n      '@param map the map that requires decoration, must not be null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if map is null',\n    'alternatives': [\n      '@throws NullPointerException in case the map is null',\n      '@throws NullPointerException if the map parameter is null',\n      '@throws NullPointerException when the map is null',\n      '@throws NullPointerException if null is passed as the map',\n      '@throws NullPointerException if the map parameter is not provided'\n    ]\n  },\n  {\n    'tag': '@param map the map to decorate, must not be null',\n    'alternatives': [\n      '@param map the map to embellish, must not be null',\n      '@param map the map to adorn, must not be null',\n      '@param map must not be null, is the map to decorate',\n      '@param map the map that needs to be decorated, must not be null',\n      '@param map the map that requires decoration, must not be null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if the specified array is null',\n    'alternatives': [\n      '@throws NullPointerException in case the specified array is null',\n      '@throws NullPointerException if the specified array parameter is null',\n      '@throws NullPointerException when the specified array is null',\n      '@throws NullPointerException if null is passed as the specified array',\n      '@throws NullPointerException if the specified array parameter is not provided'\n    ]\n  },\n  {\n    'tag': '@param reverse false = forward sort; true = reverse sort',\n    'alternatives': [\n      '@param reverse false indicates forward sort; true indicates reverse sort',\n      '@param reverse false means sorting in forward order; true means sorting in reverse order',\n      '@param reverse false or true for forward or reverse sort respectively',\n      '@param reverse with false denoting forward sort and true denoting reverse sort',\n      '@param reverse false or true for sorting in forward or reverse order accordingly'\n    ]\n  },\n  {\n    'tag': '@param reverse false = forward sort order; true = reverse sort order',\n    'alternatives': [\n      '@param reverse false indicates forward sort order; true indicates reverse sort order',\n      '@param reverse false means sorting in forward order; true means sorting in reverse order',\n      '@param reverse false or true for forward or reverse sort order respectively',\n      '@param reverse with false denoting forward sort order and true denoting reverse sort order',\n      '@param reverse false or true for sorting in forward or reverse order accordingly'\n    ]\n  }\n]"