"output = [\n  {\n    'tag': '@param field Field to which the elements belong.',\n    'alternatives': [\n      '@param field The field to which the elements belong.',\n      '@param field The field to which the elements pertain.',\n      '@param field Field indicating the ownership of the elements.',\n      '@param field Field representing the ownership of the elements.',\n      '@param field Field specifying the affiliation of the elements.'\n    ]\n  },\n  {\n    'tag': '@param rowDimension Number of rows in the new matrix.',\n    'alternatives': [\n      '@param rowDimension The count of rows in the new matrix.',\n      '@param rowDimension The total rows in the new matrix.',\n      '@param rowDimension Number of rows for the new matrix.',\n      '@param rowDimension The quantity of rows in the new matrix.',\n      '@param rowDimension Number of rows present in the new matrix.'\n    ]\n  },\n  {\n    'tag': '@param columnDimension Number of columns in the new matrix.',\n    'alternatives': [\n      '@param columnDimension The count of columns in the new matrix.',\n      '@param columnDimension The total columns in the new matrix.',\n      '@param columnDimension Number of columns for the new matrix.',\n      '@param columnDimension The quantity of columns in the new matrix.',\n      '@param columnDimension Number of columns present in the new matrix.'\n    ]\n  },\n  {\n    'tag': '@param rowDimension the number of rows in the new matrix',\n    'alternatives': [\n      '@param rowDimension the count of rows in the new matrix',\n      '@param rowDimension the total rows in the new matrix',\n      '@param rowDimension number of rows for the new matrix',\n      '@param rowDimension total number of rows in the new matrix',\n      '@param rowDimension number of rows found in the new matrix'\n    ]\n  },\n  {\n    'tag': '@param columnDimension the number of columns in the new matrix',\n    'alternatives': [\n      '@param columnDimension the count of columns in the new matrix',\n      '@param columnDimension the total columns in the new matrix',\n      '@param columnDimension number of columns for the new matrix',\n      '@param columnDimension total number of columns in the new matrix',\n      '@param columnDimension number of columns found in the new matrix'\n    ]\n  },\n  {\n    'tag': '@return a new matrix of the same type as the instance',\n    'alternatives': [\n      '@return a new matrix with the same type as the instance',\n      '@return a newly created matrix that has the same type as the instance',\n      '@return a fresh matrix that shares the same type as the instance',\n      '@return a brand new matrix that is of the same type as the instance',\n      '@return a recently created matrix with the same type as the instance'\n    ]\n  },\n  {\n    'tag': '@return matrix copy',\n    'alternatives': [\n      '@return copied matrix',\n      '@return cloned matrix',\n      '@return duplicate matrix',\n      '@return replica matrix',\n      '@return replicated matrix'\n    ]\n  },\n  {\n    'tag': '@param m matrix to be added',\n    'alternatives': [\n      '@param m matrix for addition',\n      '@param m matrix that will be added',\n      '@param m matrix to perform addition with',\n      '@param m matrix for the additive operation',\n      '@param m matrix used in the addition'\n    ]\n  },\n  {\n    'tag': '@return {@code this + m}',\n    'alternatives': [\n      '@return sum of {@code this} and {@code m}',\n      '@return the result of adding {@code this} and {@code m}',\n      '@return the outcome after adding {@code this} and {@code m}',\n      '@return the addition of {@code this} and {@code m}',\n      '@return the summation of {@code this} and {@code m}'\n    ]\n  },\n  {\n    'tag': '@throws MatrixDimensionMismatchException if {@code m} is not the same\\nsize as {@code this}.',\n    'alternatives': [\n      '@throws MatrixDimensionMismatchException when {@code m} does not have the same\\nsize as {@code this}.',\n      '@throws MatrixDimensionMismatchException if the size of {@code m} is not equal to {@code this}.',\n      '@throws MatrixDimensionMismatchException when the size of {@code m} differs from {@code this}.',\n      '@throws MatrixDimensionMismatchException if the dimensions of {@code m} are not identical to {@code this}.',\n      '@throws MatrixDimensionMismatchException when the dimensions of {@code m} do not match {@code this}.'\n    ]\n  },\n  {\n    'tag': '@param m matrix to be subtracted',\n    'alternatives': [\n      '@param m matrix for subtraction',\n      '@param m matrix that will be subtracted',\n      '@param m matrix to perform subtraction with',\n      '@param m matrix for the subtractive operation',\n      '@param m matrix used in the subtraction'\n    ]\n  },\n  {\n    'tag': '@return {@code this - m}',\n    'alternatives': [\n      '@return difference between {@code this} and {@code m}',\n      '@return the result of subtracting {@code m} from {@code this}',\n      '@return the outcome after subtracting {@code m} from {@code this}',\n      '@return the subtraction of {@code m} from {@code this}',\n      '@return the difference of {@code this} and {@code m}'\n    ]\n  },\n  {\n    'tag': '@param d value to be added to each entry',\n    'alternatives': [\n      '@param d value for entry addition',\n      '@param d value that will be added to each entry',\n      '@param d value to perform addition on each entry',\n      '@param d value for the additive operation on each entry',\n      '@param d value used in the entry addition'\n    ]\n  },\n  {\n    'tag': '@return {@code d + this}',\n    'alternatives': [\n      '@return the sum of {@code d} and {@code this}',\n      '@return the result of adding {@code d} to {@code this}',\n      '@return the outcome after adding {@code d} to {@code this}',\n      '@return the addition of {@code d} to {@code this}',\n      '@return the summation of {@code d} and {@code this}'\n    ]\n  },\n  {\n    'tag': '@param d value to multiply all entries by',\n    'alternatives': [\n      '@param d value for entry multiplication',\n      '@param d value that will be multiplied to all entries',\n      '@param d value to perform multiplication on each entry',\n      '@param d value for the multiplicative operation on each entry',\n      '@param d value used in the entry multiplication'\n    ]\n  },\n  {\n    'tag': '@return {@code d * this}',\n    'alternatives': [\n      '@return the product of {@code d} and {@code this}',\n      '@return the result of multiplying {@code this} by {@code d}',\n      '@return the outcome after multiplying {@code this} by {@code d}',\n      '@return the multiplication of {@code this} by {@code d}',\n      '@return the product of {@code d} and {@code this}'\n    ]\n  },\n  {\n    'tag': '@param m matrix to postmultiply by',\n    'alternatives': [\n      '@param m matrix for postmultiplication',\n      '@param m matrix that will be postmultiplied',\n      '@param m matrix to perform postmultiplication with',\n      '@param m matrix for the postmultiplicative operation',\n      '@param m matrix used in the postmultiplication'\n    ]\n  },\n  {\n    'tag': '@return {@code this * m}',\n    'alternatives': [\n      '@return the result of multiplying {@code this} by {@code m}',\n      '@return the outcome after postmultiplying {@code this} by {@code m}',\n      '@return the product of {@code this} postmultiplied by {@code m}',\n      '@return the multiplication of {@code this} and {@code m}',\n      '@return the result obtained from postmultiplying {@code this} by {@code m}'\n    ]\n  },\n  {\n    'tag': '@throws DimensionMismatchException if\\n{@code columnDimension(this) != rowDimension(m)}',\n    'alternatives': [\n      '@throws DimensionMismatchException when\\nthe column dimension of {@code this} is not equal to the row dimension of {@code m}',\n      '@throws DimensionMismatchException if\\nthe number of columns in {@code this} does not match the number of rows in {@code m}',\n      '@throws DimensionMismatchException when\\nthe dimension of columns in {@code this} differs from the dimension of rows in {@code m}',\n      '@throws DimensionMismatchException if\\nthe column count of {@code this} is not the same as the row count of {@code m}',\n      '@throws DimensionMismatchException when\\nthe dimensions of columns in {@code this} do not coincide with the dimensions of rows in {@code m}'\n    ]\n  },\n  {\n    'tag': '@param m matrix to premultiply by',\n    'alternatives': [\n      '@param m matrix for premultiplication',\n      '@param m matrix that will be premultiplied',\n      '@param m matrix to perform premultiplication with',\n      '@param m matrix for the premultiplicative operation',\n      '@param m matrix used in the premultiplication'\n    ]\n  },\n  {\n    'tag': '@return {@code m * this}',\n    'alternatives': [\n      '@return the result of multiplying {@code m} by {@code this}',\n      '@return the outcome after premultiplying {@code m} by {@code this}',\n      '@return the product of {@code m} premultiplied by {@code this}',\n      '@return the multiplication of {@code m} and {@code this}',\n      '@return the result obtained from premultiplying {@code m} by {@code this}'\n    ]\n  },\n  {\n    'tag': '@throws DimensionMismatchException if\\n{@code rowDimension(this) != columnDimension(m)}',\n    'alternatives': [\n      '@throws DimensionMismatchException when\\nthe row dimension of {@code this} is not equal to the column dimension of {@code m}',\n      '@throws DimensionMismatchException if\\nthe number of rows in {@code this} does not match the number of columns in {@code m}',\n      '@throws DimensionMismatchException when\\nthe dimension of rows in {@code this} differs from the dimension of columns in {@code m}',\n      '@throws DimensionMismatchException if\\nthe row count of {@code this} is not the same as the column count of {@code m}',\n      '@throws DimensionMismatchException when\\nthe dimensions of rows in {@code this} do not coincide with the dimensions of columns in {@code m}'\n    ]\n  },\n  {\n    'tag': '@param p raise {@code this} to power {@code p}',\n    'alternatives': [\n      '@param p exponent to which {@code this} should be raised',\n      '@param p power to which {@code this} will be raised',\n      '@param p value indicating the power of {@code this}',\n      '@param p exponent for raising {@code this}',\n      '@param p value representing the raised power of {@code this}'\n    ]\n  },\n  {\n    'tag': '@return {@code this^p}',\n    'alternatives': [\n      '@return the result of raising {@code this} to the power {@code p}',\n      '@return the outcome after raising {@code this} to the power {@code p}',\n      '@return the exponentiation of {@code this} by {@code p}',\n      '@return the power of {@code this} to the {@code p}th degree',\n      '@return the result obtained from raising {@code this} to the power {@code p}'\n    ]\n  }\n]"