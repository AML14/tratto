"output = [\n  {\n    'tag': '@param iterator the iterator to decorate',\n    'alternatives': [\n      '@param iterator the decorated iterator',\n      '@param iterator the iterator to enhance',\n      '@param iterator the iterator to modify'\n    ]\n  },\n  {\n    'tag': '@param offset the index of the first element of the decorated iterator to return',\n    'alternatives': [\n      '@param offset the starting index of the decorated iterator to retrieve',\n      '@param offset the position of the first element in the decorated iterator to extract',\n      '@param offset the initial position of the decorated iterator to obtain'\n    ]\n  },\n  {\n    'tag': '@return a {@link BigFraction} instance with the resulting values.',\n    'alternatives': [\n      '@return a {@link BigFraction} object containing the computed values.',\n      '@return a new {@link BigFraction} instance representing the resulting values.',\n      '@return a {@link BigFraction} instance holding the computed values.'\n    ]\n  },\n  {\n    'tag': '@return the negation of this fraction.',\n    'alternatives': [\n      '@return the inverse of this fraction.',\n      '@return the opposite value of this fraction.',\n      '@return the negated form of this fraction.'\n    ]\n  },\n  {\n    'tag': '@return the fraction percentage as a {@code double}.',\n    'alternatives': [\n      '@return the fraction expressed as a percentage (in {@code double} format).',\n      '@return the fraction value represented as a decimal percentage (in {@code double} type).',\n      '@return the fraction ratio converted to a percentage (as a {@code double}).'\n    ]\n  },\n  {\n    'tag': '@param exponent exponent to which this {@code BigFraction} is to be\\n           raised.',\n    'alternatives': [\n      '@param exponent the power to which this {@code BigFraction} should be raised.',\n      '@param exponent the value indicating the exponent for raising this {@code BigFraction}.',\n      '@param exponent the number that specifies the power to which this {@code BigFraction} will be raised.'\n    ]\n  },\n  {\n    'tag': '@return <tt>this<sup>exponent</sup></tt>.',\n    'alternatives': [\n      '@return <tt>this</tt> raised to the power of <tt>exponent</tt>.',\n      '@return the result of raising this to the power of <tt>exponent</tt>.',\n      '@return the value of <tt>this</tt> raised to the exponent value of <tt>exponent</tt>.'\n    ]\n  },\n  {\n    'tag': '@param exponent exponent to which this <code>BigFraction</code> is to be raised.',\n    'alternatives': [\n      '@param exponent the power to which this <code>BigFraction</code> should be raised.',\n      '@param exponent the value representing the exponent for raising this <code>BigFraction</code>.',\n      '@param exponent a number indicating the power to which this <code>BigFraction</code> will be raised.'\n    ]\n  },\n  {\n    'tag': '@return <tt>this<sup>exponent</sup></tt> as a <code>BigFraction</code>.',\n    'alternatives': [\n      '@return <tt>this</tt> raised to the power of <tt>exponent</tt> as a <code>BigFraction</code>.',\n      '@return the result of raising this to the power of <tt>exponent</tt> as a <code>BigFraction</code>.',\n      '@return the value of <tt>this</tt> raised to the exponent value of <tt>exponent</tt> as a <code>BigFraction</code>.'\n    ]\n  },\n  {\n    'tag': '@return the reciprocal fraction.',\n    'alternatives': [\n      '@return the inverse of the fraction.',\n      '@return the fraction flipped.',\n      '@return the fraction with its numerator and denominator swapped.'\n    ]\n  },\n  {\n    'tag': \"@return the reduced <code>BigFraction</code>. It doesn't change anything if\\n        the fraction can be reduced.\",\n    'alternatives': [\n      '@return the simplified <code>BigFraction</code>. No changes are made if\\n        the fraction can be further reduced.',\n      '@return the <code>BigFraction</code> in its reduced form. If the fraction\\n        cannot be reduced, it remains unchanged.',\n      '@return the <code>BigFraction</code> after reduction. If no reduction\\n        is possible, the fraction remains the same.'\n    ]\n  },\n  {\n    'tag': '@param i the {@code integer} to subtract.',\n    'alternatives': [\n      '@param i the number to subtract as an {@code integer}.',\n      '@param i the value to be subtracted, represented as an {@code integer}.',\n      '@param i the integer that will be subtracted.'\n    ]\n  },\n  {\n    'tag': '@return a {@code BigFraction} instance with the resulting values.',\n    'alternatives': [\n      '@return a new {@code BigFraction} object that holds the computed values.',\n      '@return a {@code BigFraction} instance representing the resulting values.',\n      '@return a {@code BigFraction} object with the computed values.'\n    ]\n  },\n  {\n    'tag': '@param l the {@code long} to subtract.',\n    'alternatives': [\n      '@param l the number to subtract as a {@code long}.',\n      '@param l the value to be subtracted, represented as a {@code long}.',\n      '@param l the long integer that will be subtracted.'\n    ]\n  },\n  {\n    'tag': '@return a {@link BigFraction} instance with the resulting values',\n    'alternatives': [\n      '@return a new {@link BigFraction} object containing the computed values',\n      '@return a {@link BigFraction} instance representing the resulting values',\n      '@return a {@link BigFraction} object holding the computed values'\n    ]\n  },\n  {\n    'tag': '@return a string representation of the fraction.',\n    'alternatives': [\n      '@return a textual representation of the fraction.',\n      '@return a string that represents the fraction.',\n      '@return a string representation of the BigFraction.'\n    ]\n  },\n  {\n    'tag': '@param num the numerator.',\n    'alternatives': [\n      '@param num the top number.',\n      '@param num the upper value.',\n      '@param num the number at the top.'\n    ]\n  },\n  {\n    'tag': '@throws ZeroException if the denominator is zero.',\n    'alternatives': [\n      '@throws ZeroException when the denominator is equal to zero.',\n      '@throws ZeroException if the value of the denominator is zero.',\n      '@throws ZeroException in case the denominator equals zero.'\n    ]\n  }\n]"