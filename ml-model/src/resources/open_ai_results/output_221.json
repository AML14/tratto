"output = [\n  {\n    'tag': '@throws NumberIsTooLargeException if {@code numberOfSuccesses > numberOfTrials}.',\n    'alternatives': [\n      '@throws NumberIsTooLargeException if {@code numberOfSuccesses} is greater than {@code numberOfTrials}.',\n      '@throws NumberIsTooLargeException when the value of {@code numberOfSuccesses} exceeds {@code numberOfTrials}.',\n      '@throws NumberIsTooLargeException if the value of {@code numberOfSuccesses} is greater than the value of {@code numberOfTrials}.',\n      '@throws NumberIsTooLargeException if the number of successes is larger than the number of trials.',\n      '@throws NumberIsTooLargeException if the number of successes exceeds the number of trials.'\n    ]\n  },\n  {\n    'tag': '@throws NoDataException if any of the arrays has zero length.',\n    'alternatives': [\n      '@throws NoDataException if any of the arrays is empty.',\n      '@throws NoDataException when any of the arrays has a length of zero.',\n      '@throws NoDataException if any of the arrays has a size of zero.',\n      '@throws NoDataException if any of the arrays contains no data.',\n      '@throws NoDataException if any of the arrays is of length zero.'\n    ]\n  },\n  {\n    'tag': '@throws NotStrictlyPositiveException if {@code sampleSize} is not\\npositive.',\n    'alternatives': [\n      '@throws NotStrictlyPositiveException if the value of {@code sampleSize} is not positive.',\n      '@throws NotStrictlyPositiveException when the {@code sampleSize} is not a positive number.',\n      '@throws NotStrictlyPositiveException if the size of the sample is not positive.',\n      '@throws NotStrictlyPositiveException if the {@code sampleSize} is not greater than zero.',\n      '@throws NotStrictlyPositiveException if the value of {@code sampleSize} is less than or equal to zero.'\n    ]\n  },\n  {\n    'tag': '@throws NotStrictlyPositiveException if {@code sampleSize} is not positive.',\n    'alternatives': [\n      '@throws NotStrictlyPositiveException if the value of {@code sampleSize} is not positive.',\n      '@throws NotStrictlyPositiveException when the {@code sampleSize} is not a positive number.',\n      '@throws NotStrictlyPositiveException if the size of the sample is not positive.',\n      '@throws NotStrictlyPositiveException if the {@code sampleSize} is not greater than zero.',\n      '@throws NotStrictlyPositiveException if the value of {@code sampleSize} is less than or equal to zero.'\n    ]\n  },\n  {\n    'tag': '@throws NullArgumentException if {@code array} is null',\n    'alternatives': [\n      '@throws NullArgumentException if the {@code array} parameter is null.',\n      '@throws NullArgumentException when the value of {@code array} is null.',\n      '@throws NullArgumentException if the input {@code array} is null.',\n      '@throws NullArgumentException if the provided {@code array} is null.',\n      '@throws NullArgumentException if the {@code array} object is null.'\n    ]\n  },\n  {\n    'tag': '@throws NotStrictlyPositiveException if the dimension is\\nnot positive.',\n    'alternatives': [\n      '@throws NotStrictlyPositiveException if the dimension is not positive.',\n      '@throws NotStrictlyPositiveException when the dimension is not a positive number.',\n      '@throws NotStrictlyPositiveException if the size of the dimension is not positive.',\n      '@throws NotStrictlyPositiveException if the dimension is less than or equal to zero.',\n      '@throws NotStrictlyPositiveException if the value of the dimension is not positive.'\n    ]\n  },\n  {\n    'tag': '@throws NullArgumentException if d is null',\n    'alternatives': [\n      '@throws NullArgumentException if the parameter {@code d} is null.',\n      '@throws NullArgumentException when the value of {@code d} is null.',\n      '@throws NullArgumentException if the input {@code d} is null.',\n      '@throws NullArgumentException if the provided {@code d} is null.',\n      '@throws NullArgumentException if the {@code d} object is null.'\n    ]\n  },\n  {\n    'tag': '@throws SingularMatrixException if the matrix is singular',\n    'alternatives': [\n      '@throws SingularMatrixException if the matrix is not invertible.',\n      '@throws SingularMatrixException when the matrix is singular.',\n      '@throws SingularMatrixException if the input matrix does not have an inverse.',\n      '@throws SingularMatrixException if the provided matrix is singular.',\n      '@throws SingularMatrixException if the matrix is non-invertible.'\n    ]\n  },\n  {\n    'tag': '@throws NumberIsTooSmallException if the number of points is less than 2.',\n    'alternatives': [\n      '@throws NumberIsTooSmallException if there are less than 2 points.',\n      '@throws NumberIsTooSmallException when the number of points is smaller than 2.',\n      '@throws NumberIsTooSmallException if the point count is less than 2.',\n      '@throws NumberIsTooSmallException if the number of points is not greater than or equal to 2.',\n      '@throws NumberIsTooSmallException if there are not enough points (less than 2) given.'\n    ]\n  },\n  {\n    'tag': '@throws NumberIsTooSmallException if the size of {@code x} is less\\nthan 2.',\n    'alternatives': [\n      '@throws NumberIsTooSmallException if {@code x} has a size smaller than 2.',\n      '@throws NumberIsTooSmallException when the size of {@code x} is less than 2.',\n      '@throws NumberIsTooSmallException if the length of {@code x} is not greater than or equal to 2.',\n      '@throws NumberIsTooSmallException if the size of the array {@code x} is less than 2.',\n      '@throws NumberIsTooSmallException if the dimension of {@code x} is smaller than 2.'\n    ]\n  },\n  {\n    'tag': '@throws NumberIsTooSmallException if the size of {@code x} is less\\nthan 2.',\n    'alternatives': [\n      '@throws NumberIsTooSmallException if {@code x} has a size smaller than 2.',\n      '@throws NumberIsTooSmallException when the size of {@code x} is less than 2.',\n      '@throws NumberIsTooSmallException if the length of {@code x} is not greater than or equal to 2.',\n      '@throws NumberIsTooSmallException if the size of the array {@code x} is less than 2.',\n      '@throws NumberIsTooSmallException if the dimension of {@code x} is smaller than 2.'\n    ]\n  },\n  {\n    'tag': '@throws NumberIsTooSmallException if the number of points is less than 2.',\n    'alternatives': [\n      '@throws NumberIsTooSmallException if there are less than 2 points.',\n      '@throws NumberIsTooSmallException when the number of points is smaller than 2.',\n      '@throws NumberIsTooSmallException if the point count is less than 2.',\n      '@throws NumberIsTooSmallException if the number of points is not greater than or equal to 2.',\n      '@throws NumberIsTooSmallException if there are not enough points (less than 2) given.'\n    ]\n  },\n  {\n    'tag': '@throws MathIllegalArgumentException if values is null',\n    'alternatives': [\n      '@throws MathIllegalArgumentException if the input {@code values} is null.',\n      '@throws MathIllegalArgumentException when the {@code values} parameter is null.',\n      '@throws MathIllegalArgumentException if the provided {@code values} is null.',\n      '@throws MathIllegalArgumentException if the values array is null.',\n      '@throws MathIllegalArgumentException if the {@code values} object is null.'\n    ]\n  },\n  {\n    'tag': '@throws MathIllegalArgumentException if values is null or the indices are invalid',\n    'alternatives': [\n      '@throws MathIllegalArgumentException if the input {@code values} is null or the indices are invalid.',\n      '@throws MathIllegalArgumentException when either the {@code values} is null or the indices are invalid.',\n      '@throws MathIllegalArgumentException if either the {@code values} is null or the indices are invalid.',\n      '@throws MathIllegalArgumentException if the values array is null or the indices are invalid.',\n      '@throws MathIllegalArgumentException if the {@code values} object is null or the indices are invalid.'\n    ]\n  },\n  {\n    'tag': '@throws MathIllegalArgumentException if window size is less than 1 but\\nnot equal to {@link #INFINITE_WINDOW}',\n    'alternatives': [\n      '@throws MathIllegalArgumentException if the window size is less than 1 but not equal to {@link #INFINITE_WINDOW}.',\n      '@throws MathIllegalArgumentException when the window size is less than 1 but not equal to {@link #INFINITE_WINDOW}.',\n      '@throws MathIllegalArgumentException if the size of the window is less than 1 but not equal to {@link #INFINITE_WINDOW}.',\n      '@throws MathIllegalArgumentException if the window size is less than 1 but not equal to the constant value {@link #INFINITE_WINDOW}.',\n      '@throws MathIllegalArgumentException if the window size is smaller than 1 but not equal to {@link #INFINITE_WINDOW}.'\n    ]\n  },\n  {\n    'tag': '@throws NullArgumentException if original is null',\n    'alternatives': [\n      '@throws NullArgumentException if the {@code original} parameter is null.',\n      '@throws NullArgumentException when the value of {@code original} is null.',\n      '@throws NullArgumentException if the input {@code original} is null.',\n      '@throws NullArgumentException if the provided {@code original} is null.',\n      '@throws NullArgumentException if the {@code original} object is null.'\n    ]\n  },\n  {\n    'tag': '@throws MathIllegalArgumentException if window size is less than 1 but\\nnot equal to {@link #INFINITE_WINDOW}',\n    'alternatives': [\n      '@throws MathIllegalArgumentException if the window size is less than 1 but not equal to {@link #INFINITE_WINDOW}.',\n      '@throws MathIllegalArgumentException when the window size is less than 1 but not equal to {@link #INFINITE_WINDOW}.',\n      '@throws MathIllegalArgumentException if the size of the window is less than 1 but not equal to {@link #INFINITE_WINDOW}.',\n      '@throws MathIllegalArgumentException if the window size is less than 1 but not equal to the constant value {@link #INFINITE_WINDOW}.',\n      '@throws MathIllegalArgumentException if the window size is smaller than 1 but not equal to {@link #INFINITE_WINDOW}.'\n    ]\n  },\n  {\n    'tag': '@throws NullArgumentException if either source or dest is null',\n    'alternatives': [\n      '@throws NullArgumentException if either the {@code source} or {@code dest} is null.',\n      '@throws NullArgumentException when either the value of {@code source} or {@code dest} is null.',\n      '@throws NullArgumentException if the input {@code source} or {@code dest} is null.',\n      '@throws NullArgumentException if either the provided {@code source} or {@code dest} is null.',\n      '@throws NullArgumentException if either the {@code source} or {@code dest} object is null.'\n    ]\n  },\n  {\n    'tag': '@throws NumberIsTooLargeException if lower is greater than upper',\n    'alternatives': [\n      '@throws NumberIsTooLargeException if the value of {@code lower} is greater than the value of {@code upper}.',\n      '@throws NumberIsTooLargeException when the lower boundary exceeds the upper boundary.',\n      '@throws NumberIsTooLargeException if the lower limit is greater than the upper limit.',\n      '@throws NumberIsTooLargeException if the value of {@code lower} is larger than the value of {@code upper}.',\n      '@throws NumberIsTooLargeException if the lower value is greater than the upper value.'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if {@code min > max} or the endpoints\\ndo not satisfy the requirements specified by the optimizer.',\n    'alternatives': [\n      '@throws IllegalArgumentException if {@code min} is greater than {@code max} or the endpoints do not meet the requirements specified by the optimizer.',\n      '@throws IllegalArgumentException when either {@code min} is greater than {@code max} or the endpoints do not satisfy the requirements specified by the optimizer.',\n      '@throws IllegalArgumentException if the value of {@code min} exceeds the value of {@code max} or the endpoints fail to satisfy the requirements specified by the optimizer.',\n      '@throws IllegalArgumentException if the minimum value is greater than the maximum value or the endpoints do not meet the requirements specified by the optimizer.',\n      '@throws IllegalArgumentException if the value of {@code min} is larger than the value of {@code max} or the endpoints do not satisfy the requirements specified by the optimizer.'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if {@code min > max} or the endpoints\\ndo not satisfy the requirements specified by the optimizer.',\n    'alternatives': [\n      '@throws IllegalArgumentException if {@code min} is greater than {@code max} or the endpoints do not meet the requirements specified by the optimizer.',\n      '@throws IllegalArgumentException when either {@code min} is greater than {@code max} or the endpoints do not satisfy the requirements specified by the optimizer.',\n      '@throws IllegalArgumentException if the value of {@code min} exceeds the value of {@code max} or the endpoints fail to satisfy the requirements specified by the optimizer.',\n      '@throws IllegalArgumentException if the minimum value is greater than the maximum"