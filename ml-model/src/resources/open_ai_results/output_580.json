"[\n    {\n        'tag': '@param pool the constant pool',\n        'alternatives': [\n            '@param pool the constant pool',\n            '@param constant_pool the constant pool',\n            '@param pool the pool of constants',\n            '@param constant_pool the pool of constants',\n            '@param pool the pool of constant values'\n        ]\n    },\n    {\n        'tag': '@return true iff the attribute is a local variable type table',\n        'alternatives': [\n            '@return true if the attribute represents a local variable type table',\n            '@return true if the attribute is a table of local variable types',\n            '@return true if the attribute denotes a local variable type table',\n            '@return true if the attribute corresponds to a local variable type table',\n            '@return true if the attribute specifies a local variable type table'\n        ]\n    },\n    {\n        'tag': '@param a the attribute',\n        'alternatives': [\n            '@param a the attribute',\n            '@param attribute the attribute',\n            '@param a the element',\n            '@param element the attribute',\n            '@param a the value'\n        ]\n    },\n    {\n        'tag': '@param pool the constant pool',\n        'alternatives': [\n            '@param pool the constant pool',\n            '@param constant_pool the constant pool',\n            '@param pool the pool of constants',\n            '@param constant_pool the pool of constants',\n            '@param pool the pool of constant values'\n        ]\n    },\n    {\n        'tag': '@return the attribute name for the specified attribute',\n        'alternatives': [\n            '@return the name of the attribute for the specified attribute',\n            '@return the attribute name corresponding to the specified attribute',\n            '@return the name associated with the specified attribute',\n            '@return the name of the attribute that is specified',\n            '@return the attribute name that is given'\n        ]\n    },\n    {\n        'tag': '@param mg the method to check',\n        'alternatives': [\n            '@param mg the method to check',\n            '@param method the method to check',\n            '@param mg the method to verify',\n            '@param method the method to validate',\n            '@param mg the method to inspect'\n        ]\n    },\n    {\n        'tag': '@return true iff the method is a main method',\n        'alternatives': [\n            '@return true if the method is a main method',\n            '@return true if the method represents a main method',\n            '@return true if the method denotes a main method',\n            '@return true if the method corresponds to a main method',\n            '@return true if the method specifies a main method'\n        ]\n    },\n    {\n        'tag': '@param type the type',\n        'alternatives': [\n            '@param type the type',\n            '@param type_identifier the type',\n            '@param type the data type',\n            '@param type_argument the type',\n            '@param type the class type'\n        ]\n    },\n    {\n        'tag': '@return the Java classname that corresponds to type',\n        'alternatives': [\n            '@return the classname in Java that corresponds to type',\n            '@return the classname that is associated with the type',\n            '@return the Java classname that matches the type',\n            '@return the Java classname for the given type',\n            '@return the name of the Java class that corresponds to type'\n        ]\n    },\n    {\n        'tag': '@param type the type',\n        'alternatives': [\n            '@param type the type',\n            '@param type_identifier the type',\n            '@param type the data type',\n            '@param type_argument the type',\n            '@param type the class type'\n        ]\n    },\n    {\n        'tag': '@return the Java class that corresponds to type',\n        'alternatives': [\n            '@return the class in Java that corresponds to type',\n            '@return the class that is associated with the type',\n            '@return the Java class that matches the type',\n            '@return the Java class for the given type',\n            '@return the class of the Java object that corresponds to type'\n        ]\n    },\n    {\n        'tag': '@param types the array to extend',\n        'alternatives': [\n            '@param types the array to extend',\n            '@param array the array to extend',\n            '@param types the list to expand',\n            '@param array the list to augment',\n            '@param types the collection to enlarge'\n        ]\n    },\n    {\n        'tag': '@param new_type the element to add to the end of the types array',\n        'alternatives': [\n            '@param new_type the element to append at the end of the types array',\n            '@param new_type the value to insert at the end of the types array',\n            '@param new_type the item to include at the end of the types array',\n            '@param new_type the object to place at the end of the types array',\n            '@param new_type the entry to append at the end of the types array'\n        ]\n    },\n    {\n        'tag': '@return the array (or a new one), with new_type at the end',\n        'alternatives': [\n            '@return the array (or a new one), with new_type appended at the end',\n            '@return the array (or a new one), with new_type added at the end',\n            '@return the array (or a new one), with new_type placed at the end',\n            '@return the array (or a new one), with new_type inserted at the end',\n            '@return the array (or a new one), with new_type included at the end'\n        ]\n    },\n    {\n        'tag': '@param types the array to extend',\n        'alternatives': [\n            '@param types the array to extend',\n            '@param array the array to extend',\n            '@param types the list to expand',\n            '@param array the list to augment',\n            '@param types the collection to enlarge'\n        ]\n    },\n    {\n        'tag': '@param new_type the element to add to the beginning of the types array',\n        'alternatives': [\n            '@param new_type the element to prepend at the beginning of the types array',\n            '@param new_type the value to insert at the beginning of the types array',\n            '@param new_type the item to include at the beginning of the types array',\n            '@param new_type the object to place at the beginning of the types array',\n            '@param new_type the entry to insert at the beginning of the types array'\n        ]\n    },\n    {\n        'tag': '@return the array (or a new one), with new_type at the beginning',\n        'alternatives': [\n            '@return the array (or a new one), with new_type prepended at the beginning',\n            '@return the array (or a new one), with new_type added at the beginning',\n            '@return the array (or a new one), with new_type placed at the beginning',\n            '@return the array (or a new one), with new_type inserted at the beginning',\n            '@return the array (or a new one), with new_type included at the beginning'\n        ]\n    },\n    {\n        'tag': '@param classname the class to convert to a type',\n        'alternatives': [\n            '@param classname the class to transform into a type',\n            '@param classname the class to change into a type',\n            '@param classname the class to convert into a data type',\n            '@param classname the class to convert to a data type',\n            '@param classname the class to represent as a type'\n        ]\n    },\n    {\n        'tag': '@return the type corresponding to the given class name',\n        'alternatives': [\n            '@return the type that corresponds to the given class name',\n            '@return the type associated with the provided class name',\n            '@return the corresponding type for the given class name',\n            '@return the type that matches the provided class name',\n            '@return the type for the given class name'\n        ]\n    },\n    {\n        'tag': '@param a the first BitSet to intersect',\n        'alternatives': [\n            '@param a the first BitSet for intersection',\n            '@param a the source BitSet to intersect',\n            '@param a the BitSet to intersect with',\n            '@param a the initial BitSet to perform intersection',\n            '@param a the original BitSet for intersection'\n        ]\n    },\n    {\n        'tag': '@param b the second BitSet to intersect',\n        'alternatives': [\n            '@param b the second BitSet for intersection',\n            '@param b the target BitSet to intersect',\n            '@param b the BitSet to intersect with',\n            '@param b the specified BitSet to perform intersection',\n            '@param b the final BitSet for intersection'\n        ]\n    },\n    {\n        'tag': '@param i the cardinality bound',\n        'alternatives': [\n            '@param i the bound on cardinality',\n            '@param i the limit for cardinality',\n            '@param i the threshold of cardinality',\n            '@param i the maximum cardinality value',\n            '@param i the cardinality restriction'\n        ]\n    },\n    {\n        'tag': '@return true iff size(a intersect b) &ge; i',\n        'alternatives': [\n            '@return true if the size of (a intersection b) is greater than or equal to i',\n            '@return true if the number of elements in (a intersection b) is at least i',\n            '@return true if the intersection of a and b has a size greater than or equal to i',\n            '@return true if the cardinality of (a intersection b) is not less than i',\n            '@return true if the count of elements in (a intersection b) is larger than or equal to i'\n        ]\n    },\n    {\n        'tag': '@param a the first BitSet to intersect',\n        'alternatives': [\n            '@param a the first BitSet for intersection',\n            '@param a the source BitSet to intersect',\n            '@param a the BitSet to intersect with',\n            '@param a the initial BitSet to perform intersection',\n            '@param a the original BitSet for intersection'\n        ]\n    },\n    {\n        'tag': '@param b the second BitSet to intersect',\n        'alternatives': [\n            '@param b the second BitSet for intersection',\n            '@param b the target BitSet to intersect',\n            '@param b the BitSet to intersect with',\n            '@param b the specified BitSet to perform intersection',\n            '@param b the final BitSet for intersection'\n        ]\n    }\n]"