"output = [\n  {\n    'tag': '@param message The message to throw.',\n    'alternatives': [\n      '@param message The throw message.',\n      '@param thrownMessage The message to throw.',\n      '@param msg The message to be thrown.',\n      '@param errorMessage The message that will be thrown.',\n      '@param msg The throwing message.'\n    ]\n  },\n  {\n    'tag': '@param sourceId The source of the change.',\n    'alternatives': [\n      '@param sourceId The changing source.',\n      '@param source The identifier of the change source.',\n      '@param id The identifier of the change source.',\n      '@param source The source that is changing.',\n      '@param source The source that has changed.'\n    ]\n  },\n  {\n    'tag': '@param timeId The source time of the change, for synchronization.',\n    'alternatives': [\n      '@param timeId The time source of the change, for synchronization.',\n      '@param syncTimeId The time identifier of the change source for synchronization.',\n      '@param timeStamp The time identifier of the change source for synchronization.',\n      '@param timeId The time of the source change, for synchronization.',\n      '@param syncTimeId The time identifier of the change source, for synchronization.'\n    ]\n  },\n  {\n    'tag': '@param attribute The attribute name that changed.',\n    'alternatives': [\n      '@param attribute The changed attribute name.',\n      '@param attributeName The name of the attribute that has changed.',\n      '@param attributeName The name of the modified attribute.',\n      '@param modifiedAttribute The attribute name that has changed.',\n      '@param attr The name of the changed attribute.'\n    ]\n  },\n  {\n    'tag': '@param event The type of event among ADD, CHANGE and REMOVE.',\n    'alternatives': [\n      '@param event The event type, which can be ADD, CHANGE, or REMOVE.',\n      '@param eventType The type of event, either ADD, CHANGE, or REMOVE.',\n      '@param eventType The type of action, which can be ADD, CHANGE or REMOVE.',\n      '@param actionType The type of event, either ADD, CHANGE, or REMOVE.',\n      '@param action The event type, which can be ADD, CHANGE, or REMOVE.'\n    ]\n  },\n  {\n    'tag': '@param id The unique identifier of this element.',\n    'alternatives': [\n      '@param id The element unique identifier.',\n      '@param identifier The unique identifier of the element.',\n      '@param uniqueId The identifier that uniquely identifies this element.',\n      '@param elementId The unique identifier of this element.',\n      '@param uid The unique identifier of this element.'\n    ]\n  },\n  {\n    'tag': '@param index the new index',\n    'alternatives': [\n      '@param index the updated index',\n      '@param newIndex the new position',\n      '@param idx the updated index',\n      '@param position the new index',\n      '@param newIndex the updated position'\n    ]\n  },\n  {\n    'tag': '@param attribute The attribute name that changed.',\n    'alternatives': [\n      '@param attribute The changed attribute name.',\n      '@param attributeName The name of the attribute that has changed.',\n      '@param attributeName The name of the modified attribute.',\n      '@param modifiedAttribute The attribute name that has changed.',\n      '@param attr The name of the changed attribute.'\n    ]\n  },\n  {\n    'tag': '@param event The type of event among ADD, CHANGE and REMOVE.',\n    'alternatives': [\n      '@param event The event type, which can be ADD, CHANGE, or REMOVE.',\n      '@param eventType The type of event, either ADD, CHANGE, or REMOVE.',\n      '@param eventType The type of action, which can be ADD, CHANGE or REMOVE.',\n      '@param actionType The type of event, either ADD, CHANGE, or REMOVE.',\n      '@param action The event type, which can be ADD, CHANGE, or REMOVE.'\n    ]\n  },\n  {\n    'tag': '@param id The unique identifier of this element.',\n    'alternatives': [\n      '@param id The element unique identifier.',\n      '@param identifier The unique identifier of the element.',\n      '@param uniqueId The identifier that uniquely identifies this element.',\n      '@param elementId The unique identifier of this element.',\n      '@param uid The unique identifier of this element.'\n    ]\n  },\n  {\n    'tag': '@param id Unique identifier of the graph.',\n    'alternatives': [\n      '@param id The graph unique identifier.',\n      '@param graphId Unique identifier of the graph.',\n      '@param identifier The unique identifier of the graph.',\n      '@param graphUniqueId Unique identifier of the graph.',\n      '@param uid The unique identifier of the graph.'\n    ]\n  },\n  {\n    'tag': '@param strictChecking If true any non-fatal error throws an exception.',\n    'alternatives': [\n      '@param strictChecking If enabled, any non-fatal error throws an exception.',\n      '@param strictChecking If set to true, any non-fatal error throws an exception.',\n      '@param strictCheck If true, exceptions are thrown for non-fatal errors.',\n      '@param strict If true, exceptions are thrown for non-fatal errors.',\n      '@param strictChecking If enabled, exceptions are thrown for non-fatal errors.'\n    ]\n  },\n  {\n    'tag': '@param initialNodeCapacity Initial capacity of the node storage data structures. Use this\\n           if you know the approximate maximum number of nodes of the\\n           graph. The graph can grow beyond this limit, but storage\\n           reallocation is expensive operation.',\n    'alternatives': [\n      '@param initialNodeCapacity Initial capacity of the data structures storing nodes. Use this\\n           if you have an estimate of the maximum number of nodes in the\\n           graph. The graph can exceed this limit, but reallocating\\n           storage is a costly operation.',\n      '@param initialNodeCapacity Initial capacity of the node storage data structures. If you have\\n           an approximation of the maximum number of nodes in the graph,\\n           use this. The graph can surpass this limit, but reallocating\\n           storage is expensive.',\n      '@param initialNodeCapacity Initial capacity of the node storage data structures. If you have a\\n           rough estimate of the maximum number of nodes in the graph,\\n           use this. The graph can exceed this limit, but storage\\n           reallocation is an expensive operation.',\n      '@param initialNodeCapacity Initial capacity of the data structures used to store nodes. If you\\n           have an estimate of the maximum number of nodes the graph will\\n           have, use this. The graph can grow beyond this value, but\\n           reallocating storage is costly.',\n      '@param initialNodeCapacity Initial capacity of the storage data structures for nodes. If you can\\n           estimate the maximum number of nodes in the graph, provide it\\n           here. The graph can surpass this capacity, but reallocating\\n           storage is expensive.'\n    ]\n  },\n  {\n    'tag': '@param initialEdgeCapacity Initial capacity of the edge storage data structures. Use this\\n           if you know the approximate maximum number of edges of the\\n           graph. The graph can grow beyond this limit, but storage\\n           reallocation is expensive operation.',\n    'alternatives': [\n      '@param initialEdgeCapacity Initial capacity of the data structures storing edges. Use this\\n           if you have an estimate of the maximum number of edges in the\\n           graph. The graph can exceed this limit, but reallocating\\n           storage is a costly operation.',\n      '@param initialEdgeCapacity Initial capacity of the edge storage data structures. If you have\\n           an approximation of the maximum number of edges in the graph,\\n           use this. The graph can surpass this limit, but reallocating\\n           storage is expensive.',\n      '@param initialEdgeCapacity Initial capacity of the edge storage data structures. If you have a\\n           rough estimate of the maximum number of edges in the graph,\\n           use this. The graph can exceed this limit, but storage\\n           reallocation is an expensive operation.',\n      '@param initialEdgeCapacity Initial capacity of the data structures used to store edges. If you\\n           have an estimate of the maximum number of edges the graph will\\n           have, use this. The graph can grow beyond this value, but\\n           reallocating storage is costly.',\n      '@param initialEdgeCapacity Initial capacity of the storage data structures for edges. If you can\\n           estimate the maximum number of edges in the graph, provide it\\n           here. The graph can surpass this capacity, but reallocating\\n           storage is expensive.'\n    ]\n  },\n  {\n    'tag': '@param id Unique identifier of the graph.',\n    'alternatives': [\n      '@param id The graph unique identifier.',\n      '@param graphId Unique identifier of the graph.',\n      '@param identifier The unique identifier of the graph.',\n      '@param graphUniqueId Unique identifier of the graph.',\n      '@param uid The unique identifier of the graph.'\n    ]\n  },\n  {\n    'tag': '@param strictChecking If true any non-fatal error throws an exception.',\n    'alternatives': [\n      '@param strictChecking If enabled, any non-fatal error throws an exception.',\n      '@param strictChecking If set to true, any non-fatal error throws an exception.',\n      '@param strictCheck If true, exceptions are thrown for non-fatal errors.',\n      '@param strict If true, exceptions are thrown for non-fatal errors.',\n      '@param strictChecking If enabled, exceptions are thrown for non-fatal errors.'\n    ]\n  },\n  {\n    'tag': '@param id Unique identifier of the graph.',\n    'alternatives': [\n      '@param id The graph unique identifier.',\n      '@param graphId Unique identifier of the graph.',\n      '@param identifier The unique identifier of the graph.',\n      '@param graphUniqueId Unique identifier of the graph.',\n      '@param uid The unique identifier of the graph.'\n    ]\n  },\n  {\n    'tag': '@param edge a new edge incident to this node',\n    'alternatives': [\n      '@param edge a newly added edge connecting to this node',\n      '@param edge a newly created edge connected to this node',\n      '@param newEdge a new edge that connects to this node',\n      '@param edge an additional edge incident to this node',\n      '@param edge a fresh edge incident to this node'\n    ]\n  },\n  {\n    'tag': '@param edge an edge incident to this node that will be removed',\n    'alternatives': [\n      '@param edge an edge connected to this node that will be deleted',\n      '@param edge a connected edge to this node that will be eliminated',\n      '@param edge an edge incident to this node that is going to be deleted',\n      '@param edge a connected edge that will be removed from this node',\n      '@param edge an incident edge that will be deleted from this node'\n    ]\n  },\n  {\n    'tag': '@param e an edge',\n    'alternatives': [\n      '@param e a specific edge',\n      '@param e an individual edge',\n      '@param e a particular edge',\n      '@param e a distinct edge',\n      '@param e an isolated edge'\n    ]\n  },\n  {\n    'tag': '@return {@code true} if {@code e} is entering edge for this node.',\n    'alternatives': [\n      '@return {@code true} if {@code e} is an entering edge for this node.',\n      '@return {@code true} if {@code e} represents an entering edge for this node.',\n      '@return {@code true} if {@code e} denotes an entering edge for this node.',\n      '@return {@code true} if {@code e} symbolizes an entering edge for this node.',\n      '@return {@code true} if {@code e} signifies an entering edge for this node.'\n    ]\n  },\n  {\n    'tag': '@param e an edge',\n    'alternatives': [\n      '@param e a specific edge',\n      '@param e an individual edge',\n      '@param e a particular edge',\n      '@param e a distinct edge',\n      '@param e an isolated edge'\n    ]\n  },\n  {\n    'tag': '@return {@code true} if {@code e} is leaving edge for this node.',\n    'alternatives': [\n      '@return {@code true} if {@code e} is an exiting edge for this node.',\n      '@return {@code true} if {@code e} represents a leaving edge for this node.',\n      '@return {@code true} if {@code e} denotes a leaving edge for this node.',\n      '@return {@code true} if {@code e} symbolizes a leaving edge for this node.',\n      '@return {@code true} if {@code e} signifies a leaving edge for this node.'\n    ]\n  },\n  {\n    'tag': '@param e an edge',\n    'alternatives': [\n      '@param e a specific edge',\n      '@param e an individual edge',\n      '@param e a particular edge',\n      '@param e a distinct edge',\n      '@param e an isolated edge'\n    ]\n  },\n  {\n    'tag': '@return {@code true} if {@code e} is incident edge for this node.',\n    'alternatives': [\n      '@return {@code true} if {@code e} is an associated edge for this node.',\n      '@return {@code true} if {@code e} represents an incident edge for this node.',\n      '@return {@code true} if {@code e} denotes an incident edge for this node.',\n      '@return {@code true} if {@code e} symbolizes an incident edge for this node.',\n      '@return {@code true} if {@code e} signifies an incident edge for this node.'\n    ]\n  }\n]"