"[\n  {\n    \"tag\": \"@return a UnicodeEscaper with the same behavior as the given instance\",\n    \"alternatives\": [\n      \"@return a UnicodeEscaper that behaves identically to the provided instance\",\n      \"@return a UnicodeEscaper with the exact same behavior as the given instance\",\n      \"@return a UnicodeEscaper that has the same behavior as the given instance\"\n    ]\n  },\n  {\n    \"tag\": \"@throws IllegalArgumentException if escaper is not a UnicodeEscaper or a\\n        CharEscaper\",\n    \"alternatives\": [\n      \"@throws IllegalArgumentException when the escaper is neither a UnicodeEscaper nor a CharEscaper\",\n      \"@throws IllegalArgumentException if the escaper is not of type UnicodeEscaper or CharEscaper\",\n      \"@throws IllegalArgumentException if the escaper is not an instance of UnicodeEscaper or CharEscaper\"\n    ]\n  },\n  {\n    \"tag\": \"@param c the character to escape if necessary\",\n    \"alternatives\": [\n      \"@param c the character that might need to be escaped\",\n      \"@param c the character to be escaped if needed\",\n      \"@param c the character that requires escaping if necessary\"\n    ]\n  },\n  {\n    \"tag\": \"@return the replacement string, or {@code null} if no escaping was needed\",\n    \"alternatives\": [\n      \"@return the substituted string, or {@code null} if no escaping was necessary\",\n      \"@return the string to replace with, or {@code null} if no escaping was required\",\n      \"@return the new string to use as a replacement, or {@code null} if no escaping was necessary\"\n    ]\n  },\n  {\n    \"tag\": \"@param cp the Unicode code point to escape if necessary\",\n    \"alternatives\": [\n      \"@param cp the Unicode code point that may need escaping\",\n      \"@param cp the Unicode code point to be escaped if needed\",\n      \"@param cp the Unicode code point that requires escaping if necessary\"\n    ]\n  },\n  {\n    \"tag\": \"@param string the literal string to be escaped\",\n    \"alternatives\": [\n      \"@param string the string literal that needs to be escaped\",\n      \"@param string the literal string that should be escaped\",\n      \"@param string the string in its literal form that requires escaping\"\n    ]\n  },\n  {\n    \"tag\": \"@throws IllegalArgumentException if {@code string} contains badly formed UTF-16 or cannot be\\n        escaped for any other reason\",\n    \"alternatives\": [\n      \"@throws IllegalArgumentException when the {@code string} contains malformed UTF-16 or cannot be escaped due to other reasons\",\n      \"@throws IllegalArgumentException if the {@code string} is in an invalid UTF-16 format or cannot be escaped for any other reason\",\n      \"@throws IllegalArgumentException if the {@code string} is not properly encoded in UTF-16 or cannot be escaped due to other reasons\"\n    ]\n  },\n  {\n    \"tag\": \"@return the replacement characters, or {@code null} if no escaping was\\n    needed\",\n    \"alternatives\": [\n      \"@return the substituted characters, or {@code null} if no escaping was required\",\n      \"@return the characters to replace with, or {@code null} if no escaping was necessary\",\n      \"@return the new characters to use as a replacement, or {@code null} if no escaping was needed\"\n    ]\n  },\n  {\n    \"tag\": \"@param csq a sequence of characters\",\n    \"alternatives\": [\n      \"@param csq a sequence of characters\",\n      \"@param csq a character sequence\",\n      \"@param csq a series of characters\"\n    ]\n  },\n  {\n    \"tag\": \"@param start the index of the first character to be scanned\",\n    \"alternatives\": [\n      \"@param start the index representing the first character to be scanned\",\n      \"@param start the index indicating the start of the character scan\",\n      \"@param start the index for the initial character to be scanned\"\n    ]\n  },\n  {\n    \"tag\": \"@param end the index immediately after the last character to be scanned\",\n    \"alternatives\": [\n      \"@param end the index that follows the last character to be scanned\",\n      \"@param end the index indicating the end of the character scan\",\n      \"@param end the index for the character scan boundary\"\n    ]\n  },\n  {\n    \"tag\": \"@throws IllegalArgumentException if the scanned sub-sequence of {@code csq}\\n    contains invalid surrogate pairs\",\n    \"alternatives\": [\n      \"@throws IllegalArgumentException when the substring of {@code csq} being scanned contains invalid surrogate pairs\",\n      \"@throws IllegalArgumentException if the scanned sub-sequence of {@code csq} has invalid surrogate pairs\",\n      \"@throws IllegalArgumentException if the sub-sequence of {@code csq} being scanned contains invalid surrogate pairs\"\n    ]\n  },\n  {\n    \"tag\": \"@throws IllegalArgumentException if invalid surrogate characters are\\n        encountered\",\n    \"alternatives\": [\n      \"@throws IllegalArgumentException when invalid surrogate characters are encountered\",\n      \"@throws IllegalArgumentException if there are any invalid surrogate characters\",\n      \"@throws IllegalArgumentException if encountered with invalid surrogate characters\"\n    ]\n  },\n  {\n    \"tag\": \"@param s the literal string to be escaped\",\n    \"alternatives\": [\n      \"@param s the string literal that needs to be escaped\",\n      \"@param s the literal string that should be escaped\",\n      \"@param s the string in its literal form that requires escaping\"\n    ]\n  },\n  {\n    \"tag\": \"@param index the index to start escaping from\",\n    \"alternatives\": [\n      \"@param index the starting index for the escape operation\",\n      \"@param index the index from which to begin escaping\",\n      \"@param index the index to initiate escaping from\"\n    ]\n  },\n  {\n    \"tag\": \"@param seq the sequence of characters from which to decode the code point\",\n    \"alternatives\": [\n      \"@param seq the character sequence to decode the code point\",\n      \"@param seq the sequence of characters used to determine the code point\",\n      \"@param seq the characters from which the code point is decoded\"\n    ]\n  },\n  {\n    \"tag\": \"@param end the index beyond the last valid character to decode\",\n    \"alternatives\": [\n      \"@param end the index after the last valid character to be decoded\",\n      \"@param end the index indicating the end of the valid characters to decode\",\n      \"@param end the index representing the boundary for valid character decoding\"\n    ]\n  }\n]"