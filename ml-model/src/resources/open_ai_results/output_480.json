"output = [\n  {\n    'tag': '@throws IllegalArgumentException',\n    'alternatives': [\n      '@throws IllegalArgumentException',\n      '@throws IllegalArgumentError',\n      '@throws InvalidParameterException',\n      '@throws InvalidArgException',\n      '@throws InvalidInputException'\n    ]\n  },\n  {\n    'tag': '@param endVertex end vertex.',\n    'alternatives': [\n      '@param endVertex end vertex.',\n      '@param endVertex the vertex at the end.',\n      '@param endVertex - the vertex at the end.',\n      '@param endVertex - denotes the end vertex.',\n      '@param endVertex - the destination vertex.'\n    ]\n  },\n  {\n    'tag': '@return the cost of the shortest path between the start vertex and the\\nend vertex.',\n    'alternatives': [\n      '@return the cost of the shortest path between the start vertex and the\\nend vertex.',\n      '@return the shortest path cost from the start to end vertex.',\n      '@return the cost of the path with the minimum length from start vertex to end vertex.',\n      '@return the cost of the path from the start vertex to the end vertex that is the shortest.',\n      '@return the cost of the most optimal path between the start vertex and the end vertex.'\n    ]\n  },\n  {\n    'tag': '@param endVertex end vertex.',\n    'alternatives': [\n      '@param endVertex end vertex.',\n      '@param endVertex the vertex at the end.',\n      '@param endVertex - the vertex at the end.',\n      '@param endVertex - denotes the end vertex.',\n      '@param endVertex - the destination vertex.'\n    ]\n  },\n  {\n    'tag': '@return list of <code>Edge</code>, or null if no path exists between the\\nstart vertex and the end vertex.',\n    'alternatives': [\n      '@return list of <code>Edge</code>, or null if no path exists between the\\nstart vertex and the end vertex.',\n      '@return a list of <code>Edge</code> objects representing the path, or null if no path is found between the start vertex and the end vertex.',\n      '@return a collection of <code>Edge</code>s, or null if there is no route between the start vertex and the end vertex.',\n      '@return a list of <code>Edge</code> instances, or null if there is no path between the start vertex and the end vertex.',\n      '@return a list containing instances of <code>Edge</code>, or null if there is no path connecting the start vertex and the end vertex.'\n    ]\n  },\n  {\n    'tag': '@param graph the graph to be searched',\n    'alternatives': [\n      '@param graph the graph to be searched',\n      '@param graph - the graph that will be explored',\n      '@param graph - the graph to search',\n      '@param graph - the graph on which to perform the search',\n      '@param graph - the graph that needs to be explored'\n    ]\n  },\n  {\n    'tag': '@param startVertex the vertex at which the path should start',\n    'alternatives': [\n      '@param startVertex the vertex at which the path should start',\n      '@param startVertex - the starting vertex of the path',\n      '@param startVertex - the vertex from where the path begins',\n      '@param startVertex - the vertex where the path commences',\n      '@param startVertex - the initial vertex for the path'\n    ]\n  },\n  {\n    'tag': '@param endVertex the vertex at which the path should end',\n    'alternatives': [\n      '@param endVertex the vertex at which the path should end',\n      '@param endVertex - the vertex where the path ends',\n      '@param endVertex - the destination vertex for the path',\n      '@param endVertex - the terminating vertex of the path',\n      '@param endVertex - the final vertex of the path'\n    ]\n  },\n  {\n    'tag': '@return List of Edges, or null if no path exists',\n    'alternatives': [\n      '@return List of Edges, or null if no path exists',\n      '@return a List of Edges or null if there is no path',\n      '@return a List containing Edge objects or null if there is no path',\n      '@return a List which contains the edges forming the path or null if no path exists',\n      '@return a List of Edge instances or null if there is no route'\n    ]\n  },\n  {\n    'tag': '@param graph ',\n    'alternatives': [\n      '@param graph ',\n      '@param graph -',\n      '@param graph -',\n      '@param graph -',\n      '@param graph -'\n    ]\n  },\n  {\n    'tag': '@param startVertex ',\n    'alternatives': [\n      '@param startVertex ',\n      '@param startVertex -',\n      '@param startVertex -',\n      '@param startVertex -',\n      '@param startVertex -'\n    ]\n  },\n  {\n    'tag': '@param graph ',\n    'alternatives': [\n      '@param graph ',\n      '@param graph -',\n      '@param graph -',\n      '@param graph -',\n      '@param graph -'\n    ]\n  },\n  {\n    'tag': '@param startVertex ',\n    'alternatives': [\n      '@param startVertex ',\n      '@param startVertex -',\n      '@param startVertex -',\n      '@param startVertex -',\n      '@param startVertex -'\n    ]\n  },\n  {\n    'tag': '@param nMaxHops maximum number of edges of the calculated paths.',\n    'alternatives': [\n      '@param nMaxHops maximum number of edges of the calculated paths.',\n      '@param nMaxHops - the maximum number of edges considered in the path calculations.',\n      '@param nMaxHops - the maximum number of edges to be taken into account when calculating the paths.',\n      '@param nMaxHops - the upper limit for the number of edges that are used in the path calculations.',\n      '@param nMaxHops - the maximum number of edges to be used in the path calculations.'\n    ]\n  },\n  {\n    'tag': '@param graph ',\n    'alternatives': [\n      '@param graph ',\n      '@param graph -',\n      '@param graph -',\n      '@param graph -',\n      '@param graph -'\n    ]\n  },\n  {\n    'tag': '@param startVertex ',\n    'alternatives': [\n      '@param startVertex ',\n      '@param startVertex -',\n      '@param startVertex -',\n      '@param startVertex -',\n      '@param startVertex -'\n    ]\n  },\n  {\n    'tag': '@param nMaxHops maximum number of edges of the calculated paths.',\n    'alternatives': [\n      '@param nMaxHops maximum number of edges of the calculated paths.',\n      '@param nMaxHops - the maximum number of edges considered in the path calculations.',\n      '@param nMaxHops - the maximum number of edges to be taken into account when calculating the paths.',\n      '@param nMaxHops - the upper limit for the number of edges that are used in the path calculations.',\n      '@param nMaxHops - the maximum number of edges to be used in the path calculations.'\n    ]\n  },\n  {\n    'tag': '@param epsilon tolerance factor.',\n    'alternatives': [\n      '@param epsilon tolerance factor.',\n      '@param epsilon - the factor used for tolerance.',\n      '@param epsilon - the value to define the tolerance.',\n      '@param epsilon - the precision factor.',\n      '@param epsilon - the measure of tolerance.'\n    ]\n  },\n  {\n    'tag': '@return List of Edges, or null if no path exists',\n    'alternatives': [\n      '@return List of Edges, or null if no path exists',\n      '@return a List of Edges or null if there is no path',\n      '@return a List containing Edge objects or null if there is no path',\n      '@return a List which contains the edges forming the path or null if no path exists',\n      '@return a List of Edge instances or null if there is no route'\n    ]\n  },\n  {\n    'tag': '@return path representation, or null if no path exists',\n    'alternatives': [\n      '@return path representation, or null if no path exists',\n      '@return the string representation of the path, or null if there is no path',\n      '@return the path represented as a string or null if there is no path',\n      '@return a string representing the path or null if no path exists',\n      '@return the path as a string or null if there is no path'\n    ]\n  },\n  {\n    'tag': '@return path length, or Double.POSITIVE_INFINITY if no path exists',\n    'alternatives': [\n      '@return path length, or Double.POSITIVE_INFINITY if no path exists',\n      '@return the length of the path or Double.POSITIVE_INFINITY if there is no path',\n      '@return the distance of the path or Double.POSITIVE_INFINITY if there is no path',\n      '@return the path length as a floating point value or Double.POSITIVE_INFINITY if there is no path',\n      '@return the length of the path, or Double.POSITIVE_INFINITY if there is no path'\n    ]\n  },\n  {\n    'tag': '@param graph the graph to be searched',\n    'alternatives': [\n      '@param graph the graph to be searched',\n      '@param graph - the graph that will be explored',\n      '@param graph - the graph to search',\n      '@param graph - the graph on which to perform the search',\n      '@param graph - the graph that needs to be explored'\n    ]\n  },\n  {\n    'tag': '@param startVertex the vertex at which the path should start',\n    'alternatives': [\n      '@param startVertex the vertex at which the path should start',\n      '@param startVertex - the starting vertex of the path',\n      '@param startVertex - the vertex from where the path begins',\n      '@param startVertex - the vertex where the path commences',\n      '@param startVertex - the initial vertex for the path'\n    ]\n  },\n  {\n    'tag': '@param endVertex the vertex at which the path should end',\n    'alternatives': [\n      '@param endVertex the vertex at which the path should end',\n      '@param endVertex - the vertex where the path ends',\n      '@param endVertex - the destination vertex for the path',\n      '@param endVertex - the terminating vertex of the path',\n      '@param endVertex - the final vertex of the path'\n    ]\n  },\n  {\n    'tag': '@return List of Edges, or null if no path exists',\n    'alternatives': [\n      '@return List of Edges, or null if no path exists',\n      '@return a List of Edges or null if there is no path',\n      '@return a List containing Edge objects or null if there is no path',\n      '@return a List which contains the edges forming the path or null if no path exists',\n      '@return a List of Edge instances or null if there is no route'\n    ]\n  }\n]"