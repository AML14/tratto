"output = [\n  {\n    'tag': '@throws NullPointerException if the given element is null',\n    'alternatives': [\n      '@throws NullPointerException if the element provided is null',\n      '@throws NullPointerException when the given element is null',\n      '@throws NullPointerException if an element is null',\n      '@throws NullPointerException if null is passed as the element',\n      '@throws NullPointerException if the element is found to be null'\n    ]\n  },\n  {\n    'tag': '@return true, always',\n    'alternatives': [\n      '@return always true',\n      '@return true in all cases',\n      '@return true, without exception',\n      '@return true without any conditions',\n      '@return always returns true'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if collection or predicate is null',\n    'alternatives': [\n      '@throws NullPointerException if either the collection or predicate is null',\n      '@throws NullPointerException when the collection or predicate is null',\n      '@throws NullPointerException if null is provided as the collection or predicate',\n      '@throws NullPointerException if the collection or the predicate equals null',\n      '@throws NullPointerException if collection or predicate are found to be null'\n    ]\n  },\n  {\n    'tag': '@param coll the collection to decorate, must not be null',\n    'alternatives': [\n      '@param coll the collection to decorate, should not be null',\n      '@param coll the collection to be decorated, cannot be null',\n      '@param coll the collection that needs to be decorated, must not be null',\n      '@param coll the collection which is to be decorated, cannot be null',\n      '@param coll the collection that requires decoration, must not be null'\n    ]\n  },\n  {\n    'tag': '@param predicate the predicate to use for validation, must not be null',\n    'alternatives': [\n      '@param predicate the predicate for validation, should not be null',\n      '@param predicate the predicate used for validation, cannot be null',\n      '@param predicate the predicate that is used to validate, must not be null',\n      '@param predicate the validating predicate, must not be null',\n      '@param predicate the predicate to validate, cannot be null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if collection or predicate is null',\n    'alternatives': [\n      '@throws NullPointerException if either the collection or predicate is null',\n      '@throws NullPointerException when the collection or predicate is null',\n      '@throws NullPointerException if null is provided as the collection or predicate',\n      '@throws NullPointerException if the collection or the predicate equals null',\n      '@throws NullPointerException if collection or predicate are found to be null'\n    ]\n  },\n  {\n    'tag': '@param coll the collection to decorate, must not be null',\n    'alternatives': [\n      '@param coll the collection to decorate, should not be null',\n      '@param coll the collection to be decorated, cannot be null',\n      '@param coll the collection that needs to be decorated, must not be null',\n      '@param coll the collection which is to be decorated, cannot be null',\n      '@param coll the collection that requires decoration, must not be null'\n    ]\n  },\n  {\n    'tag': '@param predicate the predicate to use for validation, must not be null',\n    'alternatives': [\n      '@param predicate the predicate for validation, should not be null',\n      '@param predicate the predicate used for validation, cannot be null',\n      '@param predicate the predicate that is used to validate, must not be null',\n      '@param predicate the validating predicate, must not be null',\n      '@param predicate the predicate to validate, cannot be null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if the iterator is null',\n    'alternatives': [\n      '@throws NullPointerException if the iterator is found to be null',\n      '@throws NullPointerException when the iterator is null',\n      '@throws NullPointerException if null is passed as the iterator',\n      '@throws NullPointerException if the iterator is nullified',\n      '@throws NullPointerException in case the iterator is null'\n    ]\n  },\n  {\n    'tag': '@throws UnsupportedOperationException always',\n    'alternatives': [\n      '@throws UnsupportedOperationException under any circumstance',\n      '@throws UnsupportedOperationException at all times',\n      '@throws UnsupportedOperationException without exception',\n      '@throws UnsupportedOperationException in every case',\n      '@throws UnsupportedOperationException consistently'\n    ]\n  },\n  {\n    'tag': '@return true if the map is empty or null',\n    'alternatives': [\n      '@return true in case the map is empty or null',\n      '@return true if the map is either empty or null',\n      '@return returns true when the map is empty or null',\n      '@return true if the map happens to be empty or null',\n      '@return true when the map is found to be empty or null'\n    ]\n  },\n  {\n    'tag': '@return the Collection in the {@link MultiValuedMap}, or null if input map is null',\n    'alternatives': [\n      '@return the Collection contained within the {@link MultiValuedMap}, or null if the input map is null',\n      '@return the Collection that can be found within the {@link MultiValuedMap}, or null if the input map is null',\n      '@return the Collection from the {@link MultiValuedMap}, or null if the input map is null',\n      '@return the Collection found in the {@link MultiValuedMap}, or null if the input map is null',\n      '@return the Collection inside the {@link MultiValuedMap}, or null if the input map is null'\n    ]\n  },\n  {\n    'tag': '@return the Collection in the {@link MultiValuedMap} as List, or null if input map is null',\n    'alternatives': [\n      '@return the List Collection from the {@link MultiValuedMap}, or null if the input map is null',\n      '@return the Collection as List within the {@link MultiValuedMap}, or null if the input map is null',\n      '@return the List Collection contained in the {@link MultiValuedMap}, or null if the input map is null',\n      '@return the Collection in the form of List from the {@link MultiValuedMap}, or null if the input map is null',\n      '@return the List Collection that belongs to the {@link MultiValuedMap}, or null if the input map is null'\n    ]\n  },\n  {\n    'tag': '@return the Collection in the {@link MultiValuedMap} as Set, or null if input map is null',\n    'alternatives': [\n      '@return the Set Collection contained in the {@link MultiValuedMap}, or null if the input map is null',\n      '@return the Collection in the form of Set from the {@link MultiValuedMap}, or null if the input map is null',\n      '@return the Collection that takes the form of a Set within the {@link MultiValuedMap}, or null if the input map is null',\n      '@return the Set Collection from the {@link MultiValuedMap}, or null if the input map is null',\n      '@return the Set Collection belonging to the {@link MultiValuedMap}, or null if the input map is null'\n    ]\n  },\n  {\n    'tag': '@return the Collection in the {@link MultiValuedMap} as Bag, or null if input map is null',\n    'alternatives': [\n      '@return the Bag Collection contained within the {@link MultiValuedMap}, or null if the input map is null',\n      '@return the Collection that takes the form of a Bag within the {@link MultiValuedMap}, or null if the input map is null',\n      '@return the Bag Collection from the {@link MultiValuedMap}, or null if the input map is null',\n      '@return the Collection in the form of Bag from the {@link MultiValuedMap}, or null if the input map is null',\n      '@return the Bag-type Collection in the {@link MultiValuedMap}, or null if the input map is null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if map is null',\n    'alternatives': [\n      '@throws NullPointerException if the map is found to be null',\n      '@throws NullPointerException when the map is null',\n      '@throws NullPointerException if null is passed as the map',\n      '@throws NullPointerException if the map is nullified',\n      '@throws NullPointerException in case the map is null'\n    ]\n  },\n  {\n    'tag': '@param map the {@link MultiValuedMap} to decorate, must not be null',\n    'alternatives': [\n      '@param map the {@link MultiValuedMap} that will be decorated, should not be null',\n      '@param map the {@link MultiValuedMap} to be decorated, cannot be null',\n      '@param map the {@link MultiValuedMap} that needs decoration, must not be null',\n      '@param map the {@link MultiValuedMap} which is to be decorated, cannot be null',\n      '@param map the {@link MultiValuedMap} that requires decoration, must not be null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if map is null',\n    'alternatives': [\n      '@throws NullPointerException if the map is found to be null',\n      '@throws NullPointerException when the map is null',\n      '@throws NullPointerException if null is passed as the map',\n      '@throws NullPointerException if the map is nullified',\n      '@throws NullPointerException in case the map is null'\n    ]\n  },\n  {\n    'tag': '@param map the {@link MultiValuedMap} to transform, must not be null, typically empty',\n    'alternatives': [\n      '@param map the {@link MultiValuedMap} that will undergo transformation, should not be null, generally empty',\n      '@param map the {@link MultiValuedMap} to be transformed, cannot be null, typically empty',\n      '@param map the {@link MultiValuedMap} that needs transforming, must not be null, usually empty',\n      '@param map the {@link MultiValuedMap} which is to be transformed, cannot be null, often empty',\n      '@param map the {@link MultiValuedMap} that requires transformation, must not be null, mostly empty'\n    ]\n  },\n  {\n    'tag': '@param keyTransformer the transformer for the map keys, null means no transformation',\n    'alternatives': [\n      '@param keyTransformer the transformer used for the map keys, null indicates no transformation',\n      '@param keyTransformer the transformer that will be applied to the map keys, null indicates no transformation',\n      '@param keyTransformer the transformer for the map keys, null implies no transformation',\n      '@param keyTransformer the transformer for the map keys, if null then no transformation is applied',\n      '@param keyTransformer the transformer for the map keys, null means that no transformation is performed'\n    ]\n  },\n  {\n    'tag': '@param valueTransformer the transformer for the map values, null means no transformation',\n    'alternatives': [\n      '@param valueTransformer the transformer used for the map values, null indicates no transformation',\n      '@param valueTransformer the transformer that will be applied to the map values, null indicates no transformation',\n      '@param valueTransformer the transformer for the map values, null implies no transformation',\n      '@param valueTransformer the transformer for the map values, if null then no transformation is applied',\n      '@param valueTransformer the transformer for the map values, null means that no transformation is performed'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if map is null',\n    'alternatives': [\n      '@throws NullPointerException if the map is found to be null',\n      '@throws NullPointerException when the map is null',\n      '@throws NullPointerException if null is passed as the map',\n      '@throws NullPointerException if the map is nullified',\n      '@throws NullPointerException in case the map is null'\n    ]\n  },\n  {\n    'tag': '@param map the map to decorate, must not be null',\n    'alternatives': [\n      '@param map the map that will be decorated, should not be null',\n      '@param map the map to be decorated, cannot be null',\n      '@param map the map that needs decoration, must not be null',\n      '@param map the map which is to be decorated, cannot be null',\n      '@param map the map that requires decoration, must not be null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if the iterator is null',\n    'alternatives': [\n      '@throws NullPointerException if the iterator is found to be null',\n      '@throws NullPointerException when the iterator is null',\n      '@throws NullPointerException if null is passed as the iterator',\n      '@throws NullPointerException if the iterator is nullified',\n      '@throws NullPointerException in case the iterator is null'\n    ]\n  },\n  {\n    'tag': '@param iterator the first child iterator in the IteratorChain, not null',\n    'alternatives': [\n      '@param iterator the initial child iterator in the IteratorChain, not null',\n      '@param iterator the first iterator in the IteratorChain, must not be null',\n      '@param iterator the primary child iterator in the IteratorChain, not null',\n      '@param iterator the initial iterator in the IteratorChain, cannot be null',\n      '@param iterator the first child iterator in the IteratorChain, should not be null'\n    ]\n  }\n]"