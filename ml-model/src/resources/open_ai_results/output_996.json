"[\n  {\n    'tag': '@param visitor visitor used to process all matrix entries',\n    'alternatives': [\n      '@param visitor visitor utilized to process all matrix entries',\n      '@param visitor used to handle all matrix entries',\n      '@param visitor used for processing all matrix entries',\n      '@param visitor used in processing all matrix entries',\n      '@param visitor used for traversing all matrix entries'\n    ]\n  },\n  {\n    'tag': '@return the value returned by {@link FieldMatrixPreservingVisitor#end()} at the end\\nof the walk',\n    'alternatives': [\n      '@return the value obtained from {@link FieldMatrixPreservingVisitor#end()} at the conclusion\\nof the traversal',\n      '@return the value obtained by calling {@link FieldMatrixPreservingVisitor#end()} at the end\\nof the iteration',\n      '@return the value returned by {@link FieldMatrixPreservingVisitor#end()} after walking through the matrix',\n      '@return the value obtained from invoking {@link FieldMatrixPreservingVisitor#end()} at the end\\nof the walk',\n      '@return the value that {@link FieldMatrixPreservingVisitor#end()} returns at the end\\nof the traversal'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if map is null',\n    'alternatives': [\n      '@throws NullPointerException when map is null',\n      '@throws NullPointerException if the map is null',\n      '@throws NullPointerException in case of a null map',\n      '@throws NullPointerException if the provided map is null',\n      '@throws NullPointerException if the map parameter is null'\n    ]\n  },\n  {\n    'tag': '@param map the map to decorate, must not be null',\n    'alternatives': [\n      '@param map the map to enhance, should not be null',\n      '@param map the map to modify, cannot be null',\n      '@param map the map to adorn, must not be null',\n      '@param map the map to augment, must be non-null',\n      '@param map the map to improve, should never be null'\n    ]\n  },\n  {\n    'tag': '@throws NoSuchElementException if this map is empty',\n    'alternatives': [\n      '@throws NoSuchElementException if the map is empty',\n      '@throws NoSuchElementException when the map is empty',\n      '@throws NoSuchElementException if this map contains no elements',\n      '@throws NoSuchElementException in case the map is empty',\n      '@throws NoSuchElementException if the current map is empty'\n    ]\n  },\n  {\n    'tag': '@throws NoSuchElementException if this map is empty',\n    'alternatives': [\n      '@throws NoSuchElementException if the map is empty',\n      '@throws NoSuchElementException when the map is empty',\n      '@throws NoSuchElementException if this map contains no elements',\n      '@throws NoSuchElementException in case the map is empty',\n      '@throws NoSuchElementException if the current map is empty'\n    ]\n  },\n  {\n    'tag': '@return the value previously mapped to the key',\n    'alternatives': [\n      '@return the value previously associated with the key',\n      '@return the previously assigned value for the key',\n      '@return the previously mapped value for the given key',\n      '@return the value that was mapped to the key before',\n      '@return the value that was earlier mapped to the key'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if the closure is null',\n    'alternatives': [\n      '@throws NullPointerException when the closure is null',\n      '@throws NullPointerException if the closure parameter is null',\n      '@throws NullPointerException in case of a null closure',\n      '@throws NullPointerException if the provided closure is null',\n      '@throws NullPointerException if the closure is not specified'\n    ]\n  },\n  {\n    'tag': '@param closure the closure to run each time in the transformer, not null',\n    'alternatives': [\n      '@param closure the closure to execute in the transformer on each occurrence, not null',\n      '@param closure the closure to be executed for each item in the transformer, cannot be null',\n      '@param closure the closure that will be invoked in the transformer for every instance, not null',\n      '@param closure the closure to run on each element in the transformer, must not be null',\n      '@param closure the closure to be applied to each item in the transformer, non-null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if the predicate is null',\n    'alternatives': [\n      '@throws NullPointerException when the predicate is null',\n      '@throws NullPointerException if the predicate parameter is null',\n      '@throws NullPointerException in case of a null predicate',\n      '@throws NullPointerException if the provided predicate is null',\n      '@throws NullPointerException if the predicate is not specified'\n    ]\n  },\n  {\n    'tag': '@param predicate the predicate to run each time in the transformer, not null',\n    'alternatives': [\n      '@param predicate the predicate to apply in the transformer on each occurrence, not null',\n      '@param predicate the predicate to be executed for each item in the transformer, cannot be null',\n      '@param predicate the predicate that will be invoked in the transformer for every instance, not null',\n      '@param predicate the predicate to run on each element in the transformer, must not be null',\n      '@param predicate the predicate to be used for each item in the transformer, non-null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if the factory is null',\n    'alternatives': [\n      '@throws NullPointerException when the factory is null',\n      '@throws NullPointerException if the factory parameter is null',\n      '@throws NullPointerException in case of a null factory',\n      '@throws NullPointerException if the provided factory is null',\n      '@throws NullPointerException if the factory is not specified'\n    ]\n  },\n  {\n    'tag': '@param factory the factory to run each time in the transformer, not null',\n    'alternatives': [\n      '@param factory the factory to execute in the transformer on each occurrence, not null',\n      '@param factory the factory to be executed for each item in the transformer, cannot be null',\n      '@param factory the factory that will be invoked in the transformer for every instance, not null',\n      '@param factory the factory to run on each element in the transformer, must not be null',\n      '@param factory the factory to be used for each item in the transformer, non-null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if the transformers array or any of the transformers is null',\n    'alternatives': [\n      '@throws NullPointerException when the transformers array or any of the transformers is null',\n      '@throws NullPointerException if the transformers array or any of its elements is null',\n      '@throws NullPointerException in case of a null transformers array or any null transformers',\n      '@throws NullPointerException if the provided transformers array or any of the transformers is null',\n      '@throws NullPointerException if the transformers array or any of the transformers are not specified'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if the transformers collection or any of the transformers is null',\n    'alternatives': [\n      '@throws NullPointerException when the transformers collection or any of the transformers is null',\n      '@throws NullPointerException if the transformers collection or any of its elements is null',\n      '@throws NullPointerException in case of a null transformers collection or any null transformers',\n      '@throws NullPointerException if the provided transformers collection or any of the transformers is null',\n      '@throws NullPointerException if the transformers collection or any of the transformers are not specified'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if either the predicate or transformer is null',\n    'alternatives': [\n      '@throws NullPointerException when either the predicate or transformer is null',\n      '@throws NullPointerException if either the predicate or transformer parameter is null',\n      '@throws NullPointerException in case of a null predicate or transformer',\n      '@throws NullPointerException if the provided predicate or transformer is null',\n      '@throws NullPointerException if either the predicate or transformer is not specified'\n    ]\n  },\n  {\n    'tag': '@return the transformer',\n    'alternatives': [\n      '@return the converter',\n      '@return the converter object',\n      '@return the resulting transformer',\n      '@return the transformed object',\n      '@return the object that was transformed'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if either the predicate or transformer is null',\n    'alternatives': [\n      '@throws NullPointerException when either the predicate or transformer is null',\n      '@throws NullPointerException if either the predicate or transformer parameter is null',\n      '@throws NullPointerException in case of a null predicate or transformer',\n      '@throws NullPointerException if the provided predicate or transformer is null',\n      '@throws NullPointerException if either the predicate or transformer is not specified'\n    ]\n  },\n  {\n    'tag': '@return the transformer',\n    'alternatives': [\n      '@return the converter',\n      '@return the converter object',\n      '@return the resulting transformer',\n      '@return the transformed object',\n      '@return the object that was transformed'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if either the predicate or transformer is null',\n    'alternatives': [\n      '@throws NullPointerException when either the predicate or transformer is null',\n      '@throws NullPointerException if either the predicate or transformer parameter is null',\n      '@throws NullPointerException in case of a null predicate or transformer',\n      '@throws NullPointerException if the provided predicate or transformer is null',\n      '@throws NullPointerException if either the predicate or transformer is not specified'\n    ]\n  },\n  {\n    'tag': '@return the transformer',\n    'alternatives': [\n      '@return the converter',\n      '@return the converter object',\n      '@return the resulting transformer',\n      '@return the transformed object',\n      '@return the object that was transformed'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if any element in the arrays is null',\n    'alternatives': [\n      '@throws NullPointerException when there is a null element in the arrays',\n      '@throws NullPointerException if any element in the arrays parameter is null',\n      '@throws NullPointerException in case any element in the arrays array is null',\n      '@throws NullPointerException if the provided arrays contain any null element',\n      '@throws NullPointerException if any element in the arrays is not specified'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if any element in the arrays is null',\n    'alternatives': [\n      '@throws NullPointerException when there is a null element in the arrays',\n      '@throws NullPointerException if any element in the arrays parameter is null',\n      '@throws NullPointerException in case any element in the arrays array is null',\n      '@throws NullPointerException if the provided arrays contain any null element',\n      '@throws NullPointerException if any element in the arrays is not specified'\n    ]\n  },\n  {\n    'tag': '@param defaultTransformer the default to call if no predicate matches, null means return null',\n    'alternatives': [\n      '@param defaultTransformer the default transformer to invoke if there is no match for the predicate, null indicates that null should be returned',\n      '@param defaultTransformer the fallback transformer to execute when no predicate matches, null results in null being returned',\n      '@param defaultTransformer the transformer to use as a default when no predicate matches, null will lead to null being returned',\n      '@param defaultTransformer the default conversion to apply if no predicate matches, null will cause null to be returned',\n      '@param defaultTransformer the default converter to call if no predicate matches, null implies returning null'\n    ]\n  },\n  {\n    'tag': '@return the transformer',\n    'alternatives': [\n      '@return the converter',\n      '@return the converter object',\n      '@return the resulting transformer',\n      '@return the transformed object',\n      '@return the object that was transformed'\n    ]\n  }\n]"