"[\n  {\n    'tag': '@param coefficients Coefficients for the linear equation being optimized.',\n    'alternatives': [\n      '@param coefficients Coefficients for the linear equation being maximized.',\n      '@param coefficients Coefficients for the linear equation being improved.',\n      '@param coefficients Coefficients for the optimized linear equation.',\n      '@param coefficients Coefficients for the linear equation undergoing optimization.',\n      '@param coefficients Coefficients for the linear equation being optimized for better performance.'\n    ]\n  },\n  {\n    'tag': '@param constantTerm Constant term of the linear equation.',\n    'alternatives': [\n      '@param constantTerm Constant term of the equation.',\n      '@param constantTerm Constant term of the linear equation being solved.',\n      '@param constantTerm Constant term of the linear equation to be solved.',\n      '@param constantTerm Constant term of the linear equation being evaluated.',\n      '@param constantTerm Constant term of the equation under consideration.'\n    ]\n  },\n  {\n    'tag': '@param coefficients Coefficients for the linear equation being optimized.',\n    'alternatives': [\n      '@param coefficients Coefficients for the linear equation being maximized.',\n      '@param coefficients Coefficients for the linear equation being improved.',\n      '@param coefficients Coefficients for the optimized linear equation.',\n      '@param coefficients Coefficients for the linear equation undergoing optimization.',\n      '@param coefficients Coefficients for the linear equation being optimized for better performance.'\n    ]\n  },\n  {\n    'tag': '@param constantTerm Constant term of the linear equation.',\n    'alternatives': [\n      '@param constantTerm Constant term of the equation.',\n      '@param constantTerm Constant term of the linear equation being solved.',\n      '@param constantTerm Constant term of the linear equation to be solved.',\n      '@param constantTerm Constant term of the linear equation being evaluated.',\n      '@param constantTerm Constant term of the equation under consideration.'\n    ]\n  },\n  {\n    'tag': '@return {@code true} if all the variables must be positive.',\n    'alternatives': [\n      '@return {@code true} if every variable should have a positive value.',\n      '@return {@code true} if all the variables need to be positive.',\n      '@return {@code true} if each variable must be positive.',\n      '@return {@code true} if all the variables are required to be positive.',\n      '@return {@code true} if positive values are necessary for all the variables.'\n    ]\n  },\n  {\n    'tag': '@param restricted If {@code true}, all the variables must be positive.',\n    'alternatives': [\n      '@param restricted If {@code true}, each variable must be positive.',\n      '@param restricted If {@code true}, positive values are required for all the variables.',\n      '@param restricted If {@code true}, every variable should have a positive value.',\n      '@param restricted If {@code true}, all the variables are needed to be positive.',\n      '@param restricted If {@code true}, each variable needs to be positive.'\n    ]\n  },\n  {\n    'tag': '@return the opposite relationship.',\n    'alternatives': [\n      '@return the inverted relationship.',\n      '@return the reverse relationship.',\n      '@return the opposite relation.',\n      '@return the relationship in the opposite direction.',\n      '@return the relationship in reverse.'\n    ]\n  },\n  {\n    'tag': '@param stringValue Display string for the relationship.',\n    'alternatives': [\n      '@param stringValue String representation for the relationship.',\n      '@param stringValue Textual representation for the relationship.',\n      '@param stringValue Display string for the relation.',\n      '@param stringValue String that represents the relationship.',\n      '@param stringValue Displayed string for the relationship.'\n    ]\n  },\n  {\n    'tag': '@param maxEvaluations the number of allowed model function evaluations.',\n    'alternatives': [\n      '@param maxEvaluations maximum number of evaluations for the model function.',\n      '@param maxEvaluations maximum count of model function evaluations allowed.',\n      '@param maxEvaluations number of evaluations of the model function permitted.',\n      '@param maxEvaluations maximum number of evaluations for the model function to be performed.',\n      '@param maxEvaluations maximum limit of model function evaluations.'\n    ]\n  },\n  {\n    'tag': '@param maxIterations the number of allowed iterations.',\n    'alternatives': [\n      '@param maxIterations the maximum number of iterations allowed.',\n      '@param maxIterations maximum count of iterations permitted.',\n      '@param maxIterations number of iterations allowed.',\n      '@param maxIterations the maximum limit of iterations.',\n      '@param maxIterations maximum number of allowed iterations.'\n    ]\n  },\n  {\n    'tag': '@param checker the convergence checker.',\n    'alternatives': [\n      '@param checker the convergence evaluator.',\n      '@param checker the checker for convergence.',\n      '@param checker the convergence validator.',\n      '@param checker the convergence inspector.',\n      '@param checker the convergence assessor.'\n    ]\n  },\n  {\n    'tag': '@return the lower bounds.',\n    'alternatives': [\n      '@return the minimum limits.',\n      '@return the boundaries at the lower end.',\n      '@return the minimum values.',\n      '@return the limits on the lower side.',\n      '@return the lower extremes.'\n    ]\n  },\n  {\n    'tag': '@return the upper bounds.',\n    'alternatives': [\n      '@return the maximum limits.',\n      '@return the boundaries at the upper end.',\n      '@return the maximum values.',\n      '@return the limits on the upper side.',\n      '@return the upper extremes.'\n    ]\n  },\n  {\n    'tag': '@param dim Number of parameters.',\n    'alternatives': [\n      '@param dim Number of variables.',\n      '@param dim Number of dimensions.',\n      '@param dim Count of parameters.',\n      '@param dim Number of factors.',\n      '@param dim Size of the parameter space.'\n    ]\n  },\n  {\n    'tag': '@return a new instance suitable for passing to an optimizer that\\nrequires bounds specification.',\n    'alternatives': [\n      '@return a new instance appropriate for passing to an optimizer that\\nneeds specification of bounds.',\n      '@return a new instance that can be passed to an optimizer which\\nrequires bounds specification.',\n      '@return a new instance that is suitable for passing to an optimizer which\\nneeds bounds specification.',\n      '@return a new instance that can be used for passing to an optimizer which\\nrequires specification of bounds.',\n      '@return a new instance that is appropriate for passing to an optimizer which\\nneeds specification of bounds.'\n    ]\n  },\n  {\n    'tag': '@param lB Lower bounds.',\n    'alternatives': [\n      '@param lB Minimum limits.',\n      '@param lB Boundaries at the lower end.',\n      '@param lB Lower constraints.',\n      '@param lB Boundaries on the lower side.',\n      '@param lB Lower extents.'\n    ]\n  },\n  {\n    'tag': '@return the tolerance below which points are considered identical',\n    'alternatives': [\n      '@return the precision at which points are deemed identical.',\n      '@return the threshold below which points are treated as equivalent.',\n      '@return the acceptable threshold for points to be considered the same.',\n      '@return the margin by which points are determined as identical.',\n      '@return the level of accuracy for identifying identical points.'\n    ]\n  },\n  {\n    'tag': '@return {@code true} if collinear points are added as hull vertices, or {@code false}\\nif only extreme points are present.',\n    'alternatives': [\n      '@return {@code true} if collinear points are included as hull vertices, or {@code false}\\nif only extreme points are present.',\n      '@return {@code true} if collinear points are appended as hull vertices, or {@code false}\\nif only extreme points are present.',\n      '@return {@code true} if collinear points are incorporated as hull vertices, or {@code false}\\nif only extreme points are present.',\n      '@return {@code true} if collinear points are added as vertices of the hull, or {@code false}\\nif only extreme points are present.',\n      '@return {@code true} if collinear points are put as hull vertices, or {@code false}\\nif only extreme points are present.'\n    ]\n  },\n  {\n    'tag': '@param points the set of input points',\n    'alternatives': [\n      '@param points the collection of input points',\n      '@param points the list of input points',\n      '@param points the array of input points',\n      '@param points the group of input points',\n      '@param points the sequence of input points'\n    ]\n  },\n  {\n    'tag': '@return the convex hull vertices in CCW winding',\n    'alternatives': [\n      '@return the vertices of the convex hull in counter-clockwise winding',\n      '@return the vertices of the convex hull with counter-clockwise winding',\n      '@return the vertices of the convex hull in anticlockwise winding',\n      '@return the vertices of the convex hull with anticlockwise winding',\n      '@return the vertices of the convex hull in counterclockwise winding'\n    ]\n  },\n  {\n    'tag': '@param includeCollinearPoints indicates if collinear points on the hull shall be\\nadded as hull vertices',\n    'alternatives': [\n      '@param includeCollinearPoints specifies whether or not collinear points on the hull should be\\nincluded as hull vertices',\n      '@param includeCollinearPoints indicates whether or not collinear points on the hull are to be\\nadded as hull vertices',\n      '@param includeCollinearPoints specifies if collinear points on the hull are to be\\nappended as hull vertices',\n      '@param includeCollinearPoints indicates if collinear points on the hull should be\\nincorporated as hull vertices',\n      '@param includeCollinearPoints specifies whether or not collinear points on the hull are to be\\nput as hull vertices'\n    ]\n  },\n  {\n    'tag': '@param includeCollinearPoints indicates if collinear points on the hull shall be\\nadded as hull vertices',\n    'alternatives': [\n      '@param includeCollinearPoints specifies whether or not collinear points on the hull should be\\nincluded as hull vertices',\n      '@param includeCollinearPoints indicates whether or not collinear points on the hull are to be\\nadded as hull vertices',\n      '@param includeCollinearPoints specifies if collinear points on the hull are to be\\nappended as hull vertices',\n      '@param includeCollinearPoints indicates if collinear points on the hull should be\\nincorporated as hull vertices',\n      '@param includeCollinearPoints specifies whether or not collinear points on the hull are to be\\nput as hull vertices'\n    ]\n  },\n  {\n    'tag': '@param tolerance tolerance below which points are considered identical',\n    'alternatives': [\n      '@param tolerance threshold under which points are deemed identical',\n      '@param tolerance precision below which points are treated as equivalent',\n      '@param tolerance acceptable threshold for points to be considered the same',\n      '@param tolerance margin by which points are determined as identical',\n      '@param tolerance level of accuracy for identifying identical points'\n    ]\n  },\n  {\n    'tag': '@param points the original point set',\n    'alternatives': [\n      '@param points the initial set of points',\n      '@param points the source point set',\n      '@param points the starting point collection',\n      '@param points the primary point set',\n      '@param points the given point sequence'\n    ]\n  },\n  {\n    'tag': '@return a reduced point set, useful as input for convex hull algorithms',\n    'alternatives': [\n      '@return a minimized set of points, convenient for use in convex hull algorithms',\n      '@return a compact point set, suitable for feeding into convex hull algorithms',\n      '@return a smaller point set, valuable as input for convex hull algorithms',\n      '@return a compressed set of points, handy for use in convex hull algorithms',\n      '@return a simplified point set, valuable as input for convex hull algorithms'\n    ]\n  }\n]"