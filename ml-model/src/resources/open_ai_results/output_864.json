"output = [\n  {\n    'tag': '@return <code>true</code> if this call changed the collection',\n    'alternatives': [\n      '@return <code>true</code> if this operation modified the collection',\n      '@return <code>true</code> if this method altered the collection',\n      '@return <code>true</code> if the collection was modified by this call'\n    ]\n  },\n  {\n    'tag': '@param object the object to remove',\n    'alternatives': [\n      '@param object the element to eliminate',\n      '@param object the item to delete',\n      '@param object the object that will be removed'\n    ]\n  },\n  {\n    'tag': '@throws FileNotFoundException if the {@code file} does not exist',\n    'alternatives': [\n      '@throws FileNotFoundException when the {@code file} is not present',\n      '@throws FileNotFoundException if the {@code file} is not found',\n      '@throws FileNotFoundException if the {@code file} does not exist'\n    ]\n  },\n  {\n    'tag': '@throws FileNotFoundException if the {@code file} does not exist',\n    'alternatives': [\n      '@throws FileNotFoundException when the {@code file} is not present',\n      '@throws FileNotFoundException if the {@code file} is not found',\n      '@throws FileNotFoundException if the {@code file} does not exist'\n    ]\n  },\n  {\n    'tag': '@param c the number of compression rounds (must be positive)',\n    'alternatives': [\n      '@param c the count of compression rounds (must be greater than zero)',\n      '@param c the quantity of compression rounds (must be positive)',\n      '@param c the number of compression iterations (must be a positive number)'\n    ]\n  },\n  {\n    'tag': '@param d the number of finalization rounds (must be positive)',\n    'alternatives': [\n      '@param d the count of finalization rounds (must be greater than zero)',\n      '@param d the quantity of finalization rounds (must be positive)',\n      '@param d the number of finalization iterations (must be a positive number)'\n    ]\n  },\n  {\n    'tag': '@throws IOException if {@code swallowIOException} is false and\\n    {@link Flushable#flush} throws an {@code IOException}.',\n    'alternatives': [\n      '@throws IOException when {@code swallowIOException} is false and\\n    {@link Flushable#flush} produces an {@code IOException}.',\n      '@throws IOException if {@code swallowIOException} is set to false and\\n    {@link Flushable#flush} throws an {@code IOException}.',\n      '@throws IOException if {@code swallowIOException} is not true and\\n    an {@code IOException} is thrown by {@link Flushable#flush}.'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if {@code size} is nonpositive',\n    'alternatives': [\n      '@throws IllegalArgumentException when {@code size} is not positive',\n      '@throws IllegalArgumentException if {@code size} is less than or equal to zero',\n      '@throws IllegalArgumentException if the value of {@code size} is nonpositive'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if {@code size} is nonpositive',\n    'alternatives': [\n      '@throws IllegalArgumentException when {@code size} is not positive',\n      '@throws IllegalArgumentException if {@code size} is less than or equal to zero',\n      '@throws IllegalArgumentException if the value of {@code size} is nonpositive'\n    ]\n  },\n  {\n    'tag': '@throws IndexOutOfBoundsException if {@code position} is negative or\\n    greater than or equal to the size of {@code iterable}',\n    'alternatives': [\n      '@throws IndexOutOfBoundsException when {@code position} is negative or\\n    exceeds the size of {@code iterable}',\n      '@throws IndexOutOfBoundsException if {@code position} is less than zero or\\n    greater than or equal to the size of {@code iterable}',\n      '@throws IndexOutOfBoundsException if the value of {@code position} is negative or\\n    greater than or equal to the size of {@code iterable}'\n    ]\n  },\n  {\n    'tag': '@throws IndexOutOfBoundsException if {@code position} is negative',\n    'alternatives': [\n      '@throws IndexOutOfBoundsException when {@code position} is less than zero',\n      '@throws IndexOutOfBoundsException if {@code position} is negative',\n      '@throws IndexOutOfBoundsException if the value of {@code position} is negative'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if {@code limitSize} is negative',\n    'alternatives': [\n      '@throws IllegalArgumentException when {@code limitSize} is less than zero',\n      '@throws IllegalArgumentException if {@code limitSize} is negative',\n      '@throws IllegalArgumentException if the value of {@code limitSize} is negative'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if {@code size} is nonpositive',\n    'alternatives': [\n      '@throws IllegalArgumentException when {@code size} is not positive',\n      '@throws IllegalArgumentException if {@code size} is less than or equal to zero',\n      '@throws IllegalArgumentException if the value of {@code size} is nonpositive'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if {@code size} is nonpositive',\n    'alternatives': [\n      '@throws IllegalArgumentException when {@code size} is not positive',\n      '@throws IllegalArgumentException if {@code size} is less than or equal to zero',\n      '@throws IllegalArgumentException if the value of {@code size} is nonpositive'\n    ]\n  },\n  {\n    'tag': '@throws IndexOutOfBoundsException if {@code position} is negative or\\n    greater than or equal to the number of elements remaining in\\n    {@code iterator}',\n    'alternatives': [\n      '@throws IndexOutOfBoundsException when {@code position} is negative or\\n    exceeds the remaining elements in {@code iterator}',\n      '@throws IndexOutOfBoundsException if {@code position} is less than zero or\\n    greater than or equal to the number of elements remaining in\\n    {@code iterator}',\n      '@throws IndexOutOfBoundsException if the value of {@code position} is negative or\\n    greater than or equal to the number of elements remaining in\\n    {@code iterator}'\n    ]\n  },\n  {\n    'tag': '@throws IndexOutOfBoundsException if {@code position} is negative',\n    'alternatives': [\n      '@throws IndexOutOfBoundsException when {@code position} is less than zero',\n      '@throws IndexOutOfBoundsException if {@code position} is negative',\n      '@throws IndexOutOfBoundsException if the value of {@code position} is negative'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if {@code limitSize} is negative',\n    'alternatives': [\n      '@throws IllegalArgumentException when {@code limitSize} is less than zero',\n      '@throws IllegalArgumentException if {@code limitSize} is negative',\n      '@throws IllegalArgumentException if the value of {@code limitSize} is negative'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if {@code offset} or {@code length} is negative',\n    'alternatives': [\n      '@throws IllegalArgumentException when {@code offset} or {@code length} is less than zero',\n      '@throws IllegalArgumentException if either {@code offset} or {@code length} is negative',\n      '@throws IllegalArgumentException if the value of {@code offset} or {@code length} is negative'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if any of {@code sources} is {@code null}',\n    'alternatives': [\n      '@throws NullPointerException if any of {@code sources} is equal to {@code null}',\n      '@throws NullPointerException if any of the {@code sources} is null',\n      '@throws NullPointerException if any element of {@code sources} is null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if any of {@code sources} is {@code null}',\n    'alternatives': [\n      '@throws NullPointerException if any of {@code sources} is equal to {@code null}',\n      '@throws NullPointerException if any of the {@code sources} is null',\n      '@throws NullPointerException if any element of {@code sources} is null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if {@code element} is null',\n    'alternatives': [\n      '@throws NullPointerException if the {@code element} is null',\n      '@throws NullPointerException if {@code element} is equal to null',\n      '@throws NullPointerException if the given {@code element} is null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if any of {@code elements} is null',\n    'alternatives': [\n      '@throws NullPointerException if any of {@code elements} is equal to null',\n      '@throws NullPointerException if any of the {@code elements} is null',\n      '@throws NullPointerException if any element in {@code elements} is null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if any of {@code elements} is null',\n    'alternatives': [\n      '@throws NullPointerException if any of {@code elements} is equal to null',\n      '@throws NullPointerException if any of the {@code elements} is null',\n      '@throws NullPointerException if any element in {@code elements} is null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if any of {@code elements} is null',\n    'alternatives': [\n      '@throws NullPointerException if any of {@code elements} is equal to null',\n      '@throws NullPointerException if any of the {@code elements} is null',\n      '@throws NullPointerException if any element in {@code elements} is null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if any of {@code elements} is null',\n    'alternatives': [\n      '@throws NullPointerException if any of {@code elements} is equal to null',\n      '@throws NullPointerException if any of the {@code elements} is null',\n      '@throws NullPointerException if any element in {@code elements} is null'\n    ]\n  }\n]"