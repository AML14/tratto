"[\n  {\n    'tag': '@param sprite The sprite.',\n    'alternatives': [\n      '@param sprite The image.',\n      '@param sprite The graphical element.',\n      '@param sprite The visual representation.',\n      '@param sprite The graphical object.',\n      '@param sprite The picture.'\n    ]\n  },\n  {\n    'tag': '@param pos Where to stored the computed position, if null, the position\\n           is created.',\n    'alternatives': [\n      '@param pos The location to store the calculated position. If null, a new position will be created.',\n      '@param pos Where the computed position will be stored. If null, a new position will be created.',\n      '@param pos The location to store the calculated position. If null, create a new position.',\n      '@param pos Where to store the calculated position. If null, create a new position.',\n      '@param pos The position to be stored after computation, if null, create a new position.'\n    ]\n  },\n  {\n    'tag': '@param units The units the computed position must be given into.',\n    'alternatives': [\n      '@param units The measurement units for the calculated position.',\n      '@param units The units to use for the computed position.',\n      '@param units The scale of the calculated position.',\n      '@param units The measurement system for the computed position.',\n      '@param units The measurement scale for the calculated position.'\n    ]\n  },\n  {\n    'tag': '@return The same instance as pos, or a new one if pos was null.',\n    'alternatives': [\n      '@return The identical instance as pos, or a new one if pos was null.',\n      '@return Return the pos instance itself, or create a new one if it is null.',\n      '@return Return either the pos instance or create a new one if pos was null.',\n      '@return Return the same instance as pos, or generate a new one if pos was null.',\n      '@return Return the pos instance as is, or generate a new one if it is null.'\n    ]\n  },\n  {\n    'tag': '@param exceptionHandler Handler for subscriber exceptions.',\n    'alternatives': [\n      '@param exceptionHandler Exception handler for subscriber errors.',\n      '@param exceptionHandler Handler for handling subscriber exceptions.',\n      '@param exceptionHandler Subscriber exception handler.',\n      '@param exceptionHandler Exception handler for subscribers.',\n      '@param exceptionHandler Handler for managing subscriber exceptions.'\n    ]\n  },\n  {\n    'tag': '@return the source of this event.',\n    'alternatives': [\n      '@return the origin of this event.',\n      '@return the event source.',\n      '@return the event sender.',\n      '@return the event producer.',\n      '@return the event emitter.'\n    ]\n  },\n  {\n    'tag': \"@return the 'dead' event that could not be delivered.\",\n    'alternatives': [\n      '@return the undeliverable \"dead\" event.',\n      '@return the unreceived \"dead\" event.',\n      '@return the undelivered \"dead\" event.',\n      '@return the event that failed to be delivered.',\n      '@return the event that cannot be transmitted.'\n    ]\n  },\n  {\n    'tag': '@param source object broadcasting the DeadEvent (generally the\\n               {@link EventBus}).',\n    'alternatives': [\n      '@param source Object that broadcasts the DeadEvent (usually the\\n               {@link EventBus}).',\n      '@param source Object that emits the DeadEvent (typically the\\n               {@link EventBus}).',\n      '@param source Object responsible for broadcasting the DeadEvent (usually the\\n               {@link EventBus}).',\n      '@param source Object that sends out the DeadEvent (usually the\\n               {@link EventBus}).',\n      '@param source Object that propagates the DeadEvent (normally the\\n               {@link EventBus}).'\n    ]\n  },\n  {\n    'tag': '@param event the event that could not be delivered.',\n    'alternatives': [\n      '@param event the undeliverable event.',\n      '@param event the unreceived event.',\n      '@param event the undelivered event.',\n      '@param event the event that failed to be delivered.',\n      '@param event the event that cannot be transmitted.'\n    ]\n  },\n  {\n    'tag': '@param identifier short name for the bus, for logging purposes.',\n    'alternatives': [\n      '@param identifier brief name for the bus, for logging purposes.',\n      '@param identifier concise name for the bus, for logging purposes.',\n      '@param identifier abbreviation for the bus, used for logging purposes.',\n      '@param identifier short designation for the bus, used for logging purposes.',\n      '@param identifier compact name for the bus, for logging purposes.'\n    ]\n  },\n  {\n    'tag': \"@param executor Executor to use to dispatch events. It is the caller's\\n       responsibility to shut down the executor after the last event has\\n       been posted to this event bus.\",\n    'alternatives': [\n      \"@param executor Executor for event dispatch. The caller is responsible\\n       for shutting down the executor after the last posted event has\\n       been processed on this event bus.\",\n      \"@param executor Executor for event dispatching. The caller must\\n       handle the shutdown of the executor after processing the last\\n       posted event on this event bus.\",\n      \"@param executor Executor used for event dispatch. It is the responsibility\\n       of the caller to properly shut down the executor after the last\\n       event has been posted to this event bus.\",\n      \"@param executor Executor used to dispatch events. The caller must ensure\\n       that the executor is shut down after the last posted event has\\n       been processed on this event bus.\",\n      \"@param executor Executor to execute event dispatch. It is the caller's\\n       duty to shut down the executor after all events have been\\n       posted to this event bus.\"\n    ]\n  },\n  {\n    'tag': '@param subscriberExceptionHandler Handler used to handle exceptions thrown from subscribers.\\n   See {@link SubscriberExceptionHandler} for more information.',\n    'alternatives': [\n      '@param subscriberExceptionHandler Handler for managing exceptions thrown by subscribers.\\n   Refer to {@link SubscriberExceptionHandler} for further details.',\n      '@param subscriberExceptionHandler Handler for dealing with exceptions thrown by subscribers.\\n   Check {@link SubscriberExceptionHandler} for additional information.',\n      '@param subscriberExceptionHandler Exception handler for handling subscriber exceptions.\\n   Refer to {@link SubscriberExceptionHandler} for more details.',\n      '@param subscriberExceptionHandler Handler for processing exceptions thrown by subscribers.\\n   See {@link SubscriberExceptionHandler} for additional information.',\n      '@param subscriberExceptionHandler Handler for controlling exceptions thrown by subscribers.\\n   Please see {@link SubscriberExceptionHandler} for more details.'\n    ]\n  },\n  {\n    'tag': '@return The {@link EventBus} that handled the event and the subscriber.\\n    Useful for broadcasting a a new event based on the error.',\n    'alternatives': [\n      '@return The {@link EventBus} responsible for handling the event and the subscriber.\\n    Helpful for broadcasting a new event based on the error.',\n      '@return The {@link EventBus} that managed the event and the subscriber.\\n    Useful for broadcasting a new event based on the error.',\n      '@return The {@link EventBus} that processed the event and the subscriber.\\n    Handy for broadcasting a new event based on the error.',\n      '@return The {@link EventBus} that dealt with the event and the subscriber.\\n    Valuable for broadcasting a new event based on the error.',\n      '@return The {@link EventBus} that controlled the event and the subscriber.\\n    Beneficial for broadcasting a new event based on the error.'\n    ]\n  },\n  {\n    'tag': '@return The event object that caused the subscriber to throw.',\n    'alternatives': [\n      '@return The event object that triggered the subscriber to throw.',\n      '@return The event instance that resulted in the subscriber throwing an exception.',\n      '@return The event object that caused the subscriber to raise an error.',\n      '@return The event that led to the throwing of the subscriber.',\n      '@return The event object that caused the subscriber to generate an exception.'\n    ]\n  },\n  {\n    'tag': '@return The object context that the subscriber was called on.',\n    'alternatives': [\n      '@return The object context in which the subscriber was invoked.',\n      '@return The contextual object on which the subscriber was called.',\n      '@return The object context in which the subscriber function was executed.',\n      '@return The execution context in which the subscriber was triggered.',\n      '@return The object context on which the subscriber was invoked.'\n    ]\n  },\n  {\n    'tag': '@return The subscribed method that threw the exception.',\n    'alternatives': [\n      '@return The method that was subscribed and threw the exception.',\n      '@return The subscribed method that raised the exception.',\n      '@return The method to which the subscriber is subscribed and that threw the exception.',\n      '@return The method that the subscriber subscribed to and generated an exception.',\n      '@return The subscribed method that triggered the exception.'\n    ]\n  },\n  {\n    'tag': '@param eventBus The {@link EventBus} that handled the event and the\\n    subscriber. Useful for broadcasting a a new event based on the error.',\n    'alternatives': [\n      '@param eventBus The {@link EventBus} responsible for handling the event and the\\n    subscriber. Helpful for broadcasting a new event based on the error.',\n      '@param eventBus The {@link EventBus} that managed the event and the\\n    subscriber. Useful for broadcasting a new event based on the error.',\n      '@param eventBus The {@link EventBus} that processed the event and the\\n    subscriber. Handy for broadcasting a new event based on the error.',\n      '@param eventBus The {@link EventBus} that dealt with the event and the\\n    subscriber. Valuable for broadcasting a new event based on the error.',\n      '@param eventBus The {@link EventBus} that controlled the event and the\\n    subscriber. Beneficial for broadcasting a new event based on the error.'\n    ]\n  },\n  {\n    'tag': '@param event The event object that caused the subscriber to throw.',\n    'alternatives': [\n      '@param event The event object that triggered the subscriber to throw.',\n      '@param event The event instance that resulted in the subscriber throwing an exception.',\n      '@param event The event object that caused the subscriber to raise an error.',\n      '@param event The event that led to the throwing of the subscriber.',\n      '@param event The event object that caused the subscriber to generate an exception.'\n    ]\n  },\n  {\n    'tag': '@param subscriber The source subscriber context.',\n    'alternatives': [\n      '@param subscriber The origin of the subscriber context.',\n      '@param subscriber The source of the subscriber context.',\n      '@param subscriber The subscriber context provider.',\n      '@param subscriber The subscriber context generator.',\n      '@param subscriber The subscriber context creator.'\n    ]\n  }\n]"