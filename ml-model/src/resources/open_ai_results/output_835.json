"output = [\r\n  {\r\n    'tag': '@return true if both decorated predicates return true',\r\n    'alternatives': [\r\n      '@return true if both adorned conditions evaluate to true',\r\n      '@return true if both wrapped conditions return true',\r\n      '@return true if both decorated predicates evaluate to true',\r\n      '@return true if both modified conditions yield true',\r\n      '@return true if both predicates, after being decorated, result in true'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param <T> the type the factory creates',\r\n    'alternatives': [\r\n      '@param <T> the type generated by the factory',\r\n      '@param <T> the type that the factory produces',\r\n      '@param <T> the type created by the factory',\r\n      '@param <T> the type for which the factory is responsible',\r\n      '@param <T> the type defined by the factory'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param prototype the object to clone each time in the factory',\r\n    'alternatives': [\r\n      '@param prototype the object to duplicate for each instance in the factory',\r\n      '@param prototype the object to replicate for every creation in the factory',\r\n      '@param prototype the object to copy for each occurrence in the factory',\r\n      '@param prototype the object to duplicate for every creation in the factory',\r\n      '@param prototype the object to clone for each instance in the factory'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@return the <code>prototype</code> factory, or a {@link ConstantFactory#NULL_INSTANCE} if\\nthe {@code prototype} is {@code null}',\r\n    'alternatives': [\r\n      '@return the <code>prototype</code> factory, or a {@link ConstantFactory#NULL_INSTANCE} if the {@code prototype} is null',\r\n      '@return the factory of the <code>prototype</code>, or a {@link ConstantFactory#NULL_INSTANCE} if\\nthe {@code prototype} is {@code null}',\r\n      '@return the factory for the <code>prototype</code>, or a {@link ConstantFactory#NULL_INSTANCE} if\\nthe {@code prototype} is {@code null}',\r\n      '@return the factory associated with the <code>prototype</code>, or a {@link ConstantFactory#NULL_INSTANCE} if the {@code prototype} is {@code null}',\r\n      '@return the factory that uses the <code>prototype</code>, or a {@link ConstantFactory#NULL_INSTANCE} if\\nthe {@code prototype} is {@code null}'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@throws IllegalArgumentException if the prototype cannot be cloned',\r\n    'alternatives': [\r\n      '@throws IllegalArgumentException if the clone of the prototype is not possible',\r\n      '@throws IllegalArgumentException if it is impossible to clone the prototype',\r\n      '@throws IllegalArgumentException if the cloning of the prototype is not supported',\r\n      '@throws IllegalArgumentException if it is not feasible to clone the prototype',\r\n      '@throws IllegalArgumentException if cloning the prototype is not valid'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param <T> the object type',\r\n    'alternatives': [\r\n      '@param <T> the type of the object',\r\n      '@param <T> the type that the object represents',\r\n      '@param <T> the type assigned to the object',\r\n      '@param <T> the class of the object',\r\n      '@param <T> the data type of the object'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@return the singleton instance',\r\n    'alternatives': [\r\n      '@return the instance that is a singleton',\r\n      '@return the unique instance',\r\n      '@return the single occurrence',\r\n      '@return the sole instance',\r\n      '@return the only object created'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param object the input object',\r\n    'alternatives': [\r\n      '@param object the object being input',\r\n      '@param object the object passed as input',\r\n      '@param object the input parameter',\r\n      '@param object the provided object',\r\n      '@param object the object for input'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@return never',\r\n    'alternatives': [\r\n      '@return always false',\r\n      '@return always null',\r\n      '@return always empty',\r\n      '@return always zero',\r\n      '@return always void'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@return a copy of the predicates',\r\n    'alternatives': [\r\n      '@return a replica of the predicates',\r\n      '@return a duplicate of the predicates',\r\n      '@return a cloned version of the predicates',\r\n      '@return a mirrored set of the predicates',\r\n      '@return a reproduction of the predicates'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@return the predicate',\r\n    'alternatives': [\r\n      '@return the condition',\r\n      '@return the rule',\r\n      '@return the statement',\r\n      '@return the expression',\r\n      '@return the operation'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param object the input object',\r\n    'alternatives': [\r\n      '@param object the object being input',\r\n      '@param object the object passed as input',\r\n      '@param object the input parameter',\r\n      '@param object the provided object',\r\n      '@param object the object for input'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@return true if input is of stored type',\r\n    'alternatives': [\r\n      '@return true if the input is of the stored type',\r\n      '@return true if the input corresponds to the stored type',\r\n      '@return true if the input has the stored type',\r\n      '@return true if the input fits the stored type',\r\n      '@return true if the input matches the stored type'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@return the type',\r\n    'alternatives': [\r\n      '@return the kind',\r\n      '@return the category',\r\n      '@return the form',\r\n      '@return the nature',\r\n      '@return the class'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param type the type to check for',\r\n    'alternatives': [\r\n      '@param type the type to verify',\r\n      '@param type the type to validate',\r\n      '@param type the type to examine',\r\n      '@param type the type to test against',\r\n      '@param type the type to inspect'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param <I> the input type',\r\n    'alternatives': [\r\n      '@param <I> the type of the input',\r\n      '@param <I> the type representing the input',\r\n      '@param <I> the input data type',\r\n      '@param <I> the class of the input',\r\n      '@param <I> the category of the input'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param <O> the output type',\r\n    'alternatives': [\r\n      '@param <O> the type of the output',\r\n      '@param <O> the type representing the output',\r\n      '@param <O> the output data type',\r\n      '@param <O> the class of the output',\r\n      '@param <O> the category of the output'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param methodName the method name to call',\r\n    'alternatives': [\r\n      '@param methodName the name of the method to invoke',\r\n      '@param methodName the method to execute by calling its name',\r\n      '@param methodName the name of the method to be invoked',\r\n      '@param methodName the method to be called identified by its name',\r\n      '@param methodName the name of the method that needs to be called'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@return an invoker transformer',\r\n    'alternatives': [\r\n      '@return a transformer that acts as an invoker',\r\n      '@return a transformer to invoke operations',\r\n      '@return a transformer that performs invocation',\r\n      '@return a transformer for executing invocations',\r\n      '@return a transformer that carries out invocations'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param <I> the input type',\r\n    'alternatives': [\r\n      '@param <I> the type of the input',\r\n      '@param <I> the type representing the input',\r\n      '@param <I> the input data type',\r\n      '@param <I> the class of the input',\r\n      '@param <I> the category of the input'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param <O> the output type',\r\n    'alternatives': [\r\n      '@param <O> the type of the output',\r\n      '@param <O> the type representing the output',\r\n      '@param <O> the output data type',\r\n      '@param <O> the class of the output',\r\n      '@param <O> the category of the output'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param methodName the method name to call',\r\n    'alternatives': [\r\n      '@param methodName the name of the method to invoke',\r\n      '@param methodName the method to execute by calling its name',\r\n      '@param methodName the name of the method to be invoked',\r\n      '@param methodName the method to be called identified by its name',\r\n      '@param methodName the name of the method that needs to be called'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param paramTypes the parameter types of the method',\r\n    'alternatives': [\r\n      '@param paramTypes the types of the method parameters',\r\n      '@param paramTypes the method parameter data types',\r\n      '@param paramTypes the types of the method arguments',\r\n      '@param paramTypes the data types of the method parameters',\r\n      '@param paramTypes the argument types of the method'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param args the arguments to pass to the method',\r\n    'alternatives': [\r\n      '@param args the parameters to provide for the method',\r\n      '@param args the arguments to be passed for the method',\r\n      '@param args the inputs to be used in the method',\r\n      '@param args the parameters for the method',\r\n      '@param args the values to be sent to the method'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@return an invoker transformer',\r\n    'alternatives': [\r\n      '@return a transformer that acts as an invoker',\r\n      '@return a transformer to invoke operations',\r\n      '@return a transformer that performs invocation',\r\n      '@return a transformer for executing invocations',\r\n      '@return a transformer that carries out invocations'\r\n    ]\r\n  }\r\n]"