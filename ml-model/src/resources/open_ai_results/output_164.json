"output = [\n  {\n    'tag': '@param edge the edge that was added.',\n    'alternatives': [\n      '@param addedEdge represents the edge that was added.',\n      '@param edge represents the edge that got added.',\n      '@param edge that was newly added.',\n      '@param edge added to the graph.',\n      '@param the added edge.'\n    ]\n  },\n  {\n    'tag': '@param edge the edge that was removed.',\n    'alternatives': [\n      '@param removedEdge represents the edge that was removed.',\n      '@param edge represents the edge that got removed.',\n      '@param edge that was deleted.',\n      '@param edge removed from the graph.',\n      '@param the removed edge.'\n    ]\n  },\n  {\n    'tag': '@param vertex the vertex that was added.',\n    'alternatives': [\n      '@param addedVertex represents the vertex that was added.',\n      '@param vertex represents the vertex that got added.',\n      '@param vertex that was newly added.',\n      '@param vertex added to the graph.',\n      '@param the added vertex.'\n    ]\n  },\n  {\n    'tag': '@param vertex the vertex that was removed.',\n    'alternatives': [\n      '@param removedVertex represents the vertex that was removed.',\n      '@param vertex represents the vertex that got removed.',\n      '@param vertex that was deleted.',\n      '@param vertex removed from the graph.',\n      '@param the removed vertex.'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if the specified size is negative.',\n    'alternatives': [\n      '@throws IllegalArgumentException when the given size is negative.',\n      '@throws IllegalArgumentException if the provided size is negative.',\n      '@throws IllegalArgumentException in case of a negative specified size.',\n      '@throws IllegalArgumentException if the size provided is negative.',\n      '@throws IllegalArgumentException for a negative specified size.'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if the specified vertex is <code>\\nnull</code>.',\n    'alternatives': [\n      '@throws NullPointerException when the given vertex is null.',\n      '@throws NullPointerException if the vertex provided is null.',\n      '@throws NullPointerException in case the specified vertex is null.',\n      '@throws NullPointerException if the vertex parameter is null.',\n      '@throws NullPointerException for a null specified vertex.'\n    ]\n  },\n  {\n    'tag': '@return <tt>true</tt> if this graph did not already contain the specified\\nedge.',\n    'alternatives': [\n      '@return <tt>true</tt> if the graph does not already contain the specified edge.',\n      '@return <tt>true</tt> if the specified edge is not already present in this graph.',\n      '@return <tt>true</tt> if the graph does not have the specified edge already.',\n      '@return <tt>true</tt> if the specified edge is not already in the graph.',\n      '@return <tt>true</tt> if the graph does not contain the specified edge.'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if the specified vertex is <code>\\nnull</code>.',\n    'alternatives': [\n      '@throws NullPointerException when the given vertex is null.',\n      '@throws NullPointerException if the vertex provided is null.',\n      '@throws NullPointerException in case the specified vertex is null.',\n      '@throws NullPointerException if the vertex parameter is null.',\n      '@throws NullPointerException for a null specified vertex.'\n    ]\n  },\n  {\n    'tag': '@return <tt>true</tt> if this graph did not already contain the specified\\nvertex.',\n    'alternatives': [\n      '@return <tt>true</tt> if the graph does not already contain the specified vertex.',\n      '@return <tt>true</tt> if the specified vertex is not already in this graph.',\n      '@return <tt>true</tt> if the graph does not have the specified vertex already.',\n      '@return <tt>true</tt> if the specified vertex is not already present in the graph.',\n      '@return <tt>true</tt> if the graph does not contain the specified vertex.'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if vertex is not found in the graph.',\n    'alternatives': [\n      '@throws IllegalArgumentException if the vertex is not found in the graph.',\n      '@throws IllegalArgumentException in case the vertex is not present in the graph.',\n      '@throws IllegalArgumentException if the graph does not contain the vertex.',\n      '@throws IllegalArgumentException if the vertex is missing from the graph.',\n      '@throws IllegalArgumentException for a vertex that is not in the graph.'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if vertex is <code>null</code>.',\n    'alternatives': [\n      '@throws NullPointerException if the vertex is null.',\n      '@throws NullPointerException in case the vertex is <code>null</code>.',\n      '@throws NullPointerException when the vertex parameter is <code>null</code>.',\n      '@throws NullPointerException if the vertex provided is <code>null</code>.',\n      '@throws NullPointerException for a <code>null</code> vertex.'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if the specified edge collection is <tt>\\nnull</tt>.',\n    'alternatives': [\n      '@throws NullPointerException when the given edge collection is <tt>null</tt>.',\n      '@throws NullPointerException if the edge collection provided is <tt>null</tt>.',\n      '@throws NullPointerException in case the specified edge collection is <tt>null</tt>.',\n      '@throws NullPointerException if the edge parameter collection is <tt>null</tt>.',\n      '@throws NullPointerException for a <tt>null</tt> specified edge collection.'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if the specified vertex collection is <tt>\\nnull</tt>.',\n    'alternatives': [\n      '@throws NullPointerException when the given vertex collection is <tt>null</tt>.',\n      '@throws NullPointerException if the vertex collection provided is <tt>null</tt>.',\n      '@throws NullPointerException in case the specified vertex collection is <tt>null</tt>.',\n      '@throws NullPointerException if the vertex parameter collection is <tt>null</tt>.',\n      '@throws NullPointerException for a <tt>null</tt> specified vertex collection.'\n    ]\n  },\n  {\n    'tag': '@return <code>true</code> if and only if the graph contained the\\nspecified edge.',\n    'alternatives': [\n      '@return <code>true</code> only if the graph contains the specified edge.',\n      '@return <code>true</code> if the specified edge is present in the graph.',\n      '@return <code>true</code> if the graph has the specified edge.',\n      '@return <code>true</code> if the edge is contained in the graph.',\n      '@return <code>true</code> if and only if the graph has the specified edge.'\n    ]\n  },\n  {\n    'tag': '@return <code>true</code> if the graph contained the specified vertex;\\n<code>false</code> otherwise.',\n    'alternatives': [\n      '@return <code>true</code> if the graph has the specified vertex; otherwise <code>false</code>.',\n      '@return <code>true</code> if the specified vertex is present in the graph; otherwise <code>false</code>.',\n      '@return <code>true</code> if the graph contains the specified vertex; otherwise <code>false</code>.',\n      '@return <code>true</code> if the vertex is in the graph; otherwise <code>false</code>.',\n      '@return <code>true</code> if and only if the graph has the specified vertex.'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if the graph argument is <code>\\nnull</code>.',\n    'alternatives': [\n      '@throws IllegalArgumentException when the graph argument is <code>null</code>.',\n      '@throws IllegalArgumentException if the provided graph argument is <code>null</code>.',\n      '@throws IllegalArgumentException in case the graph argument is <code>null</code>.',\n      '@throws IllegalArgumentException if the graph parameter is <code>null</code>.',\n      '@throws IllegalArgumentException for a <code>null</code> graph argument.'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if specified vertex is <code>null</code>.',\n    'alternatives': [\n      '@throws NullPointerException if the specified vertex is <code>null</code>.',\n      '@throws NullPointerException in case the specified vertex is <code>null</code>.',\n      '@throws NullPointerException when the vertex parameter is <code>null</code>.',\n      '@throws NullPointerException if the vertex provided is <code>null</code>.',\n      '@throws NullPointerException for a <code>null</code> specified vertex.'\n    ]\n  },\n  {\n    'tag': '@param directed true to use parens for each edge (representing directed);\\nfalse to use curly braces (representing undirected)',\n    'alternatives': [\n      '@param directed set to true to represent directed edges with parens; set to false to represent undirected edges with curly braces.',\n      '@param directed determine whether to use parens for directed edges (true); or curly braces for undirected edges (false).',\n      '@param directed specifies whether to use parens to represent directed edges or curly braces to represent undirected edges.',\n      '@param directed, if true, denotes directed edges using parens, else denote undirected edges using curly braces.',\n      '@param directed indicates if parens should be used for directed edges (true) or if curly braces should be used for undirected edges (false).'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if the graph argument is <code>\\nnull</code>.',\n    'alternatives': [\n      '@throws IllegalArgumentException when the graph argument is <code>null</code>.',\n      '@throws IllegalArgumentException if the provided graph argument is <code>null</code>.',\n      '@throws IllegalArgumentException in case the graph argument is <code>null</code>.',\n      '@throws IllegalArgumentException if the graph parameter is <code>null</code>.',\n      '@throws IllegalArgumentException for a <code>null</code> graph argument.'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if the specified size is negative.',\n    'alternatives': [\n      '@throws IllegalArgumentException when the given size is negative.',\n      '@throws IllegalArgumentException if the provided size is negative.',\n      '@throws IllegalArgumentException in case of a negative specified size.',\n      '@throws IllegalArgumentException if the size provided is negative.',\n      '@throws IllegalArgumentException for a negative specified size.'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if the graph argument is <code>\\nnull</code>.',\n    'alternatives': [\n      '@throws IllegalArgumentException when the graph argument is <code>null</code>.',\n      '@throws IllegalArgumentException if the provided graph argument is <code>null</code>.',\n      '@throws IllegalArgumentException in case the graph argument is <code>null</code>.',\n      '@throws IllegalArgumentException if the graph parameter is <code>null</code>.',\n      '@throws IllegalArgumentException for a <code>null</code> graph argument.'\n    ]\n  },\n  {\n    'tag': '@return this builder object',\n    'alternatives': [\n      '@return the builder object itself',\n      '@return the current builder instance',\n      '@return this instance of the builder',\n      '@return the instance of this builder',\n      '@return the reference to this builder object'\n    ]\n  },\n  {\n    'tag': '@return this builder object',\n    'alternatives': [\n      '@return the builder object itself',\n      '@return the current builder instance',\n      '@return this instance of the builder',\n      '@return the instance of this builder',\n      '@return the reference to this builder object'\n    ]\n  },\n  {\n    'tag': '@return this builder object',\n    'alternatives': [\n      '@return the builder object itself',\n      '@return the current builder instance',\n      '@return this instance of the builder',\n      '@return the instance of this builder',\n      '@return the reference to this builder object'\n    ]\n  },\n  {\n    'tag': '@return this builder object',\n    'alternatives': [\n      '@return the builder object itself',\n      '@return the current builder instance',\n      '@return this instance of the builder',\n      '@return the instance of this builder',\n      '@return the reference to this builder object'\n    ]\n  }\n]"