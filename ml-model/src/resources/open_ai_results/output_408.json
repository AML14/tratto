"output=[\n  {\n    'tag': '@return number of artificial variables',\n    'alternatives': [\n      '@return count of artificial variables',\n      '@return total amount of artificial variables',\n      '@return the number of artificial variables',\n      '@return quantity of artificial variables',\n      '@return total number of artificial variables'\n    ]\n  },\n  {\n    'tag': '@return tableau data',\n    'alternatives': [\n      '@return data of the tableau',\n      '@return information contained in the tableau',\n      '@return table information',\n      '@return contents of the tableau',\n      '@return the data in the tableau'\n    ]\n  },\n  {\n    'tag': '@param oos stream where object should be written',\n    'alternatives': [\n      '@param oos output stream to write the object',\n      '@param oos destination stream of the object',\n      '@param oos stream to write the object to',\n      '@param oos stream to save the object',\n      '@param oos stream for object writing'\n    ]\n  },\n  {\n    'tag': '@throws IOException if object cannot be written to stream',\n    'alternatives': [\n      '@throws IOException in case of failure to write the object to the stream',\n      '@throws IOException when unable to write the object to the stream',\n      '@throws IOException if the object cannot be saved to the stream',\n      '@throws IOException in case of failure during object writing to the stream',\n      '@throws IOException if it is not possible to write the object to the stream'\n    ]\n  },\n  {\n    'tag': '@param ois stream from which the object should be read',\n    'alternatives': [\n      '@param ois input stream to read the object from',\n      '@param ois source stream of the object',\n      '@param ois stream from which to fetch the object',\n      '@param ois stream to load the object from',\n      '@param ois stream for object reading'\n    ]\n  },\n  {\n    'tag': '@throws ClassNotFoundException if a class in the stream cannot be found',\n    'alternatives': [\n      '@throws ClassNotFoundException when a class in the stream is not found',\n      '@throws ClassNotFoundException if a class cannot be located in the stream',\n      '@throws ClassNotFoundException in case of failure to find a class in the stream',\n      '@throws ClassNotFoundException if it is not possible to locate a class in the stream',\n      '@throws ClassNotFoundException if a class is missing in the stream'\n    ]\n  },\n  {\n    'tag': '@throws IOException if object cannot be read from the stream',\n    'alternatives': [\n      '@throws IOException in case of failure to read the object from the stream',\n      '@throws IOException when unable to read the object from the stream',\n      '@throws IOException if the object cannot be loaded from the stream',\n      '@throws IOException in case of failure during object reading from the stream',\n      '@throws IOException if it is not possible to read the object from the stream'\n    ]\n  },\n  {\n    'tag': '@param f linear objective function',\n    'alternatives': [\n      '@param f function representing the linear objective',\n      '@param f function that describes the linear objective',\n      '@param f linear function to be used as the objective',\n      '@param f function specifying the linear optimization goal',\n      '@param f function defining the linear optimization objective'\n    ]\n  },\n  {\n    'tag': '@param constraints linear constraints',\n    'alternatives': [\n      '@param constraints conditions that define the linear problem',\n      '@param constraints requirements of the linear problem',\n      '@param constraints restrictions affecting the linear problem',\n      '@param constraints limitations for the linear problem',\n      '@param constraints constraints for the linear problem'\n    ]\n  },\n  {\n    'tag': '@param goalType type of optimization goal: either {@link GoalType#MAXIMIZE} or {@link GoalType#MINIMIZE}',\n    'alternatives': [\n      '@param goalType optimization goal type: either {@link GoalType#MAXIMIZE} or {@link GoalType#MINIMIZE}',\n      '@param goalType type of optimization goal: either maximizing {@link GoalType#MAXIMIZE} or minimizing {@link GoalType#MINIMIZE}',\n      '@param goalType objective type: either {@link GoalType#MAXIMIZE} or {@link GoalType#MINIMIZE}',\n      '@param goalType optimization goal: either to maximize {@link GoalType#MAXIMIZE} or minimize {@link GoalType#MINIMIZE}',\n      '@param goalType optimization goal type: either maximize {@link GoalType#MAXIMIZE} or minimize {@link GoalType#MINIMIZE}'\n    ]\n  },\n  {\n    'tag': '@param restrictToNonNegative whether to restrict the variables to non-negative values',\n    'alternatives': [\n      '@param restrictToNonNegative indicate whether the variables should be limited to non-negative values',\n      '@param restrictToNonNegative determine if the variables should be constrained to non-negative values',\n      '@param restrictToNonNegative specify if the variables should only have non-negative values',\n      '@param restrictToNonNegative flag indicating if the variables must be non-negative',\n      '@param restrictToNonNegative boolean flag to determine whether variables are restricted to non-negative values'\n    ]\n  },\n  {\n    'tag': '@param epsilon amount of error to accept when checking for optimality',\n    'alternatives': [\n      '@param epsilon tolerance level to consider when assessing optimality',\n      '@param epsilon threshold for determining optimality',\n      '@param epsilon margin of error allowed during optimality checks',\n      '@param epsilon precision required for optimality verification',\n      '@param epsilon maximum admissible error when evaluating optimality'\n    ]\n  },\n  {\n    'tag': '@param f linear objective function',\n    'alternatives': [\n      '@param f function representing the linear objective',\n      '@param f function that describes the linear objective',\n      '@param f linear function to be used as the objective',\n      '@param f function specifying the linear optimization goal',\n      '@param f function defining the linear optimization objective'\n    ]\n  },\n  {\n    'tag': '@param constraints linear constraints',\n    'alternatives': [\n      '@param constraints conditions that define the linear problem',\n      '@param constraints requirements of the linear problem',\n      '@param constraints restrictions affecting the linear problem',\n      '@param constraints limitations for the linear problem',\n      '@param constraints constraints for the linear problem'\n    ]\n  },\n  {\n    'tag': '@param goalType type of optimization goal: either {@link GoalType#MAXIMIZE} or {@link GoalType#MINIMIZE}',\n    'alternatives': [\n      '@param goalType optimization goal type: either {@link GoalType#MAXIMIZE} or {@link GoalType#MINIMIZE}',\n      '@param goalType type of optimization goal: either maximizing {@link GoalType#MAXIMIZE} or minimizing {@link GoalType#MINIMIZE}',\n      '@param goalType objective type: either {@link GoalType#MAXIMIZE} or {@link GoalType#MINIMIZE}',\n      '@param goalType optimization goal: either to maximize {@link GoalType#MAXIMIZE} or minimize {@link GoalType#MINIMIZE}',\n      '@param goalType optimization goal type: either maximize {@link GoalType#MAXIMIZE} or minimize {@link GoalType#MINIMIZE}'\n    ]\n  },\n  {\n    'tag': '@param restrictToNonNegative whether to restrict the variables to non-negative values',\n    'alternatives': [\n      '@param restrictToNonNegative indicate whether the variables should be limited to non-negative values',\n      '@param restrictToNonNegative determine if the variables should be constrained to non-negative values',\n      '@param restrictToNonNegative specify if the variables should only have non-negative values',\n      '@param restrictToNonNegative flag indicating if the variables must be non-negative',\n      '@param restrictToNonNegative boolean flag to determine whether variables are restricted to non-negative values'\n    ]\n  },\n  {\n    'tag': '@param epsilon amount of error to accept when checking for optimality',\n    'alternatives': [\n      '@param epsilon tolerance level to consider when assessing optimality',\n      '@param epsilon threshold for determining optimality',\n      '@param epsilon margin of error allowed during optimality checks',\n      '@param epsilon precision required for optimality verification',\n      '@param epsilon maximum admissible error when evaluating optimality'\n    ]\n  },\n  {\n    'tag': '@param maxUlps amount of error to accept in floating point comparisons',\n    'alternatives': [\n      '@param maxUlps maximum discrepancy allowed in floating point comparisons',\n      '@param maxUlps margin of error for floating point comparisons',\n      '@param maxUlps precision required for floating point comparisons',\n      '@param maxUlps maximum error tolerated in floating point comparisons',\n      '@param maxUlps allowed difference in floating point comparisons'\n    ]\n  },\n  {\n    'tag': '@return coefficients of the linear equation being optimized',\n    'alternatives': [\n      '@return coefficients of the optimized linear equation',\n      '@return coefficients of the linear equation in the optimization',\n      '@return coefficients of the linear equation under optimization',\n      '@return coefficients of the linear equation that is being optimized',\n      '@return coefficients of the linear equation for the optimization'\n    ]\n  },\n  {\n    'tag': '@return constant of the linear equation being optimized',\n    'alternatives': [\n      '@return constant of the optimized linear equation',\n      '@return constant of the linear equation in the optimization',\n      '@return constant of the linear equation under optimization',\n      '@return constant of the linear equation that is being optimized',\n      '@return constant of the linear equation for the optimization'\n    ]\n  },\n  {\n    'tag': '@param point point at which linear equation must be evaluated',\n    'alternatives': [\n      '@param point position where the linear equation should be assessed',\n      '@param point location for evaluating the linear equation',\n      '@param point the point where the linear equation is to be calculated',\n      '@param point the coordinate at which the linear equation needs to be computed',\n      '@param point the position at which the linear equation must be computed'\n    ]\n  },\n  {\n    'tag': '@return value of the linear equation at the current point',\n    'alternatives': [\n      '@return result of the linear equation at the current point',\n      '@return output of the linear equation at the current point',\n      '@return computed value of the linear equation at the current point',\n      '@return value obtained from evaluating the linear equation at the current point',\n      '@return the calculated value of the linear equation at the current point'\n    ]\n  },\n  {\n    'tag': '@param point point at which linear equation must be evaluated',\n    'alternatives': [\n      '@param point position where the linear equation should be assessed',\n      '@param point location for evaluating the linear equation',\n      '@param point the point where the linear equation is to be calculated',\n      '@param point the coordinate at which the linear equation needs to be computed',\n      '@param point the position at which the linear equation must be computed'\n    ]\n  },\n  {\n    'tag': '@return value of the linear equation at the current point',\n    'alternatives': [\n      '@return result of the linear equation at the current point',\n      '@return output of the linear equation at the current point',\n      '@return computed value of the linear equation at the current point',\n      '@return value obtained from evaluating the linear equation at the current point',\n      '@return the calculated value of the linear equation at the current point'\n    ]\n  },\n  {\n    'tag': '@param oos stream where object should be written',\n    'alternatives': [\n      '@param oos output stream to write the object',\n      '@param oos destination stream of the object',\n      '@param oos stream to write the object to',\n      '@param oos stream to save the object',\n      '@param oos stream for object writing'\n    ]\n  }\n]"