"output=[\n  {\n    'tag': '@param mode the mode to use when mapping {@code file}',\n    'alternatives': [\n      '@param mode the mode to utilize when mapping {@code file}',\n      '@param mode the mode to be used when mapping {@code file}',\n      '@param mode the mode to apply when mapping {@code file}',\n      '@param mode the mode to employ when mapping {@code file}',\n      '@param mode the mode to utilize while mapping {@code file}'\n    ]\n  },\n  {\n    'tag': '@return a buffer reflecting {@code file}',\n    'alternatives': [\n      '@return a buffer representing {@code file}',\n      '@return a buffer that reflects {@code file}',\n      '@return a buffer which mirrors {@code file}',\n      '@return a buffer that represents {@code file}',\n      '@return a buffer reflecting the contents of {@code file}'\n    ]\n  },\n  {\n    'tag': '@throws IOException if an I/O error occurs',\n    'alternatives': [\n      '@throws IOException in case of an I/O error',\n      '@throws IOException if any I/O error occurs',\n      '@throws IOException when an I/O error happens',\n      '@throws IOException if an error in I/O operation occurs',\n      '@throws IOException if there is an I/O error'\n    ]\n  },\n  {\n    'tag': '@param file The name of the file to trim the extension from. This can be either a fully\\n    qualified file name (including a path) or just a file name.',\n    'alternatives': [\n      '@param file The name of the file from which to remove the extension. This can either\\n    be a fully qualified file name (including a path) or just a file name.',\n      '@param file The name of the file from which the extension should be removed. This can be\\n    either a fully qualified file name (including a path) or just a file name.',\n      '@param file The name of the file to remove the extension from. This can either\\n    be a fully qualified file name (including a path) or just a file name.',\n      '@param file The name of the file to strip the extension from. This can either\\n    be a fully qualified file name (including a path) or just a file name.',\n      '@param file The name of the file from which the extension is to be removed. This can be\\n    either a fully qualified file name (including a path) or just a file name.'\n    ]\n  },\n  {\n    'tag': '@return The file name without its path or extension.',\n    'alternatives': [\n      '@return The name of the file without its path or extension.',\n      '@return The file name with no path or extension.',\n      '@return The name of the file without the path or extension.',\n      '@return The file name stripped of its path or extension.',\n      '@return The name of the file with the path and extension removed.'\n    ]\n  },\n  {\n    'tag': '@param from the object to read from',\n    'alternatives': [\n      '@param from the object to read data from',\n      '@param from the object from which to read',\n      '@param from the source object to read from',\n      '@param from the object from where to read',\n      '@param from the object to retrieve data from'\n    ]\n  },\n  {\n    'tag': '@param to the object to write to',\n    'alternatives': [\n      '@param to the object to write data to',\n      '@param to the object where the data will be written',\n      '@param to the destination object to write to',\n      '@param to the object where to write',\n      '@param to the object to which to write data'\n    ]\n  },\n  {\n    'tag': '@return the number of characters copied',\n    'alternatives': [\n      '@return the count of characters copied',\n      '@return the quantity of copied characters',\n      '@return the number of characters that were copied',\n      '@return the total characters copied',\n      '@return the amount of characters that have been copied'\n    ]\n  },\n  {\n    'tag': '@throws IOException if an I/O error occurs',\n    'alternatives': [\n      '@throws IOException when an I/O error occurs',\n      '@throws IOException in the event of an I/O error',\n      '@throws IOException if any I/O error happens',\n      '@throws IOException if an error in I/O operation occurs',\n      '@throws IOException if there is an I/O error'\n    ]\n  },\n  {\n    'tag': '@param r the object to read from',\n    'alternatives': [\n      '@param r the object from which to read',\n      '@param r the source object to read from',\n      '@param r the object to retrieve data from',\n      '@param r the object from where to read',\n      '@param r the object to obtain data from'\n    ]\n  },\n  {\n    'tag': '@return a string containing all the characters',\n    'alternatives': [\n      '@return a string that contains all the characters',\n      '@return a string with all the characters',\n      '@return a string that includes all the characters',\n      '@return a string comprising all the characters',\n      '@return a string that holds all the characters'\n    ]\n  },\n  {\n    'tag': '@throws IOException if an I/O error occurs',\n    'alternatives': [\n      '@throws IOException if there is an I/O error',\n      '@throws IOException if any I/O error occurs',\n      '@throws IOException in the event of an I/O error',\n      '@throws IOException when an error in I/O operation occurs',\n      '@throws IOException if any error in I/O happens'\n    ]\n  },\n  {\n    'tag': '@param r the object to read from',\n    'alternatives': [\n      '@param r the object from which to read',\n      '@param r the source object to read from',\n      '@param r the object to retrieve data from',\n      '@param r the object from where to read',\n      '@param r the object to obtain data from'\n    ]\n  },\n  {\n    'tag': '@return a {@link StringBuilder} containing all the characters',\n    'alternatives': [\n      '@return a {@link StringBuilder} that contains all the characters',\n      '@return a {@link StringBuilder} with all the characters',\n      '@return a {@link StringBuilder} that includes all the characters',\n      '@return a {@link StringBuilder} comprising all the characters',\n      '@return a {@link StringBuilder} that holds all the characters'\n    ]\n  },\n  {\n    'tag': '@throws IOException if an I/O error occurs',\n    'alternatives': [\n      '@throws IOException if there is an I/O error',\n      '@throws IOException if any I/O error occurs',\n      '@throws IOException in the event of an I/O error',\n      '@throws IOException when an error in I/O operation occurs',\n      '@throws IOException if any error in I/O happens'\n    ]\n  },\n  {\n    'tag': '@param r the object to read from',\n    'alternatives': [\n      '@param r the object from which to read',\n      '@param r the source object to read from',\n      '@param r the object to retrieve data from',\n      '@param r the object from where to read',\n      '@param r the object to obtain data from'\n    ]\n  },\n  {\n    'tag': '@return a mutable {@link List} containing all the lines',\n    'alternatives': [\n      '@return a mutable {@link List} that contains all the lines',\n      '@return a mutable {@link List} with all the lines',\n      '@return a mutable {@link List} that includes all the lines',\n      '@return a mutable {@link List} comprising all the lines',\n      '@return a mutable {@link List} that holds all the lines'\n    ]\n  },\n  {\n    'tag': '@throws IOException if an I/O error occurs',\n    'alternatives': [\n      '@throws IOException if there is an I/O error',\n      '@throws IOException if any I/O error occurs',\n      '@throws IOException in the event of an I/O error',\n      '@throws IOException when an error in I/O operation occurs',\n      '@throws IOException if any error in I/O happens'\n    ]\n  },\n  {\n    'tag': '@throws IOException if an I/O error occurs',\n    'alternatives': [\n      '@throws IOException when an I/O error occurs',\n      '@throws IOException if any I/O error happens',\n      '@throws IOException in case of an I/O error',\n      '@throws IOException if an error in I/O operation occurs',\n      '@throws IOException if there is an I/O error'\n    ]\n  },\n  {\n    'tag': '@param reader the reader to read from',\n    'alternatives': [\n      '@param reader the reader from which to read',\n      '@param reader the source reader to read from',\n      '@param reader the reader to retrieve data from',\n      '@param reader the reader from where to read',\n      '@param reader the reader to obtain data from'\n    ]\n  },\n  {\n    'tag': '@param n the number of characters to skip',\n    'alternatives': [\n      '@param n the number of characters to ignore',\n      '@param n the count of characters to skip',\n      '@param n the quantity of characters to skip',\n      '@param n the amount of characters to skip',\n      '@param n the number of characters to pass over'\n    ]\n  },\n  {\n    'tag': '@throws EOFException if this stream reaches the end before skipping all\\n    the characters',\n    'alternatives': [\n      '@throws EOFException if this stream reaches the end prior to skipping all\\n    the characters',\n      '@throws EOFException if this stream encounters the end prior to skipping all\\n    the characters',\n      '@throws EOFException if this stream gets to the end before skipping all\\n    the characters',\n      '@throws EOFException if this stream reaches the end before skipping all\\n    the provided characters',\n      '@throws EOFException if this stream encounters the end before skipping all\\n    the provided characters'\n    ]\n  },\n  {\n    'tag': '@throws IOException if an I/O error occurs',\n    'alternatives': [\n      '@throws IOException when an I/O error occurs',\n      '@throws IOException if any I/O error happens',\n      '@throws IOException in case of an I/O error',\n      '@throws IOException if an error in I/O operation occurs',\n      '@throws IOException if there is an I/O error'\n    ]\n  },\n  {\n    'tag': '@param target the object to which output will be sent',\n    'alternatives': [\n      '@param target the object to which the output will be sent',\n      '@param target the destination object for the output',\n      '@param target the object where the output will be directed',\n      '@param target the object to receive the output',\n      '@param target the object where the output should be sent'\n    ]\n  },\n  {\n    'tag': '@return a new Writer object, unless target is a Writer, in which case the\\n    target is returned',\n    'alternatives': [\n      '@return a new Writer object, unless target is already a Writer, in which case the\\n    target is returned',\n      '@return a new Writer object, except if target is already a Writer, in which case the\\n    target is returned',\n      '@return a new Writer object, unless target is an existing Writer, in which case the\\n    target is returned',\n      '@return a new Writer object, except when target is a Writer, in which case the\\n    target is returned',\n      '@return a new Writer object, unless target is a Writer already, in which case the\\n    target is returned'\n    ]\n  }\n]"