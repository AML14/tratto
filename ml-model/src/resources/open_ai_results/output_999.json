"output = [\n  {\n    'tag': '@throws NullPointerException if set or transformer is null',\n    'alternatives': [\n      '@throws NullPointerException if either set or transformer is null',\n      '@throws NullPointerException if either set or transformer is null',\n      '@throws NullPointerException if set or transformer equals null',\n      '@throws NullPointerException if either set or transformer is null',\n      '@throws NullPointerException if set or transformer is null'\n    ]\n  },\n  {\n    'tag': '@param set the set to decorate, must not be null',\n    'alternatives': [\n      '@param set the set to enhance, it must not be null',\n      '@param set the set to adorn, must not be null',\n      '@param set the set that needs decoration, must not be null',\n      '@param set the set that requires decoration, must not be null',\n      '@param set the set which should be decorated, must not be null'\n    ]\n  },\n  {\n    'tag': '@param transformer the transformer to use for conversion, must not be null',\n    'alternatives': [\n      '@param transformer the transformer to utilize for conversion, must not be null',\n      '@param transformer the converter to use for transformation, must not be null',\n      '@param transformer the converter to employ for conversion, must not be null',\n      '@param transformer the transformer to apply for conversion, must not be null',\n      '@param transformer the transformer to utilize for converting, must not be null'\n    ]\n  },\n  {\n    'tag': '@param comp the comparator to use to sort; must not be null,\\n  unless you\\'ll be invoking {@link #setComparator(Comparator)} later on.',\n    'alternatives': [\n      '@param comp the comparator to sort with; must not be null,\\n  unless you plan to call {@link #setComparator(Comparator)} later on.',\n      '@param comp the comparator used for sorting; must not be null,\\n  unless you intend to invoke {@link #setComparator(Comparator)} later on.',\n      '@param comp the comparator for sorting; must not be null,\\n  unless you will call {@link #setComparator(Comparator)} later on.',\n      '@param comp the comparator for sorting; must not be null,\\n  unless you are going to invoke {@link #setComparator(Comparator)} later on.',\n      '@param comp the comparator to be used for sorting; must not be null,\\n  unless you will call {@link #setComparator(Comparator)} later on.'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if either iterator is null',\n    'alternatives': [\n      '@throws NullPointerException if the iterator is null',\n      '@throws NullPointerException if the iterator turns out to be null',\n      '@throws NullPointerException if the iterator comes out to be null',\n      '@throws NullPointerException if the iterator proves to be null',\n      '@throws NullPointerException if the iterator ends up being null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if iterators array is or contains null',\n    'alternatives': [\n      '@throws NullPointerException if the array of iterators is or contains null',\n      '@throws NullPointerException if the array of iterators equals null',\n      '@throws NullPointerException if the array of iterators is null or contains null',\n      '@throws NullPointerException if the array of iterators is null or contains null',\n      '@throws NullPointerException if the array of iterators is null or includes null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if the iterators collection is or contains null',\n    'alternatives': [\n      '@throws NullPointerException if the collection of iterators is or contains null',\n      '@throws NullPointerException if the collection of iterators equals null',\n      '@throws NullPointerException if the collection of iterators is null or contains null',\n      '@throws NullPointerException if the collection of iterators is null or contains null',\n      '@throws NullPointerException if the collection of iterators is null or includes null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if the iterator is null',\n    'alternatives': [\n      '@throws NullPointerException if iterator is null',\n      '@throws NullPointerException if iterator equals null',\n      '@throws NullPointerException if the iterator is equals null',\n      '@throws NullPointerException if the iterator is null',\n      '@throws NullPointerException if iterator is null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if bag is null',\n    'alternatives': [\n      '@throws NullPointerException if the bag is null',\n      '@throws NullPointerException if bag equals null',\n      '@throws NullPointerException if the bag is equals null',\n      '@throws NullPointerException if the bag is null',\n      '@throws NullPointerException if the bag is null'\n    ]\n  },\n  {\n    'tag': '@param bag the bag to decorate, must not be null',\n    'alternatives': [\n      '@param bag the bag to enhance, must not be null',\n      '@param bag the bag to adorn, must not be null',\n      '@param bag the bag that needs decoration, must not be null',\n      '@param bag the bag that requires decoration, must not be null',\n      '@param bag the bag which should be decorated, must not be null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if the collection is null',\n    'alternatives': [\n      '@throws NullPointerException if collection is null',\n      '@throws NullPointerException if collection equals null',\n      '@throws NullPointerException if the collection is equals null',\n      '@throws NullPointerException if the collection is null',\n      '@throws NullPointerException if collection is null'\n    ]\n  },\n  {\n    'tag': '@param coll the collection to decorate, must not be null',\n    'alternatives': [\n      '@param coll the collection to enhance, must not be null',\n      '@param coll the collection to adorn, must not be null',\n      '@param coll the collection that needs decoration, must not be null',\n      '@param coll the collection that requires decoration, must not be null',\n      '@param coll the collection which should be decorated, must not be null'\n    ]\n  },\n  {\n    'tag': '@throws java.util.NoSuchElementException if this map is empty',\n    'alternatives': [\n      '@throws java.util.NoSuchElementException if the map is empty',\n      '@throws java.util.NoSuchElementException if this map is equals empty',\n      '@throws java.util.NoSuchElementException if the map is equals empty',\n      '@throws java.util.NoSuchElementException if the map is empty',\n      '@throws java.util.NoSuchElementException if the map is empty'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if the map is null',\n    'alternatives': [\n      '@throws NullPointerException if map is null',\n      '@throws NullPointerException if map equals null',\n      '@throws NullPointerException if the map is equals null',\n      '@throws NullPointerException if the map is null',\n      '@throws NullPointerException if map is null'\n    ]\n  },\n  {\n    'tag': '@param map the map to decorate, must not be null',\n    'alternatives': [\n      '@param map the map to enhance, must not be null',\n      '@param map the map to adorn, must not be null',\n      '@param map the map that needs decoration, must not be null',\n      '@param map the map that requires decoration, must not be null',\n      '@param map the map which should be decorated, must not be null'\n    ]\n  }\n]"