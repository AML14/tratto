"output=[\n  {\n    \"tag\": \"@param object the input object\",\n    \"alternatives\": [\n      \"@param object the provided input object\",\n      \"@param the object that serves as input\",\n      \"@param the object being passed as input\",\n      \"@param object the input parameter\",\n      \"@param object the object to be used as input\"\n    ]\n  },\n  {\n    \"tag\": \"@return true if decorated transformer returns Boolean.TRUE\",\n    \"alternatives\": [\n      \"@return true if the transformed decorator returns Boolean.TRUE\",\n      \"@return true if the decorator transformer returns Boolean.TRUE\",\n      \"@return true if the transformer that was decorated returns Boolean.TRUE\",\n      \"@return true if the decorated transformer gives Boolean.TRUE as output\",\n      \"@return true if the transformed transformer returns Boolean.TRUE\"\n    ]\n  },\n  {\n    \"tag\": \"@throws FunctorException if the transformer returns an invalid type\",\n    \"alternatives\": [\n      \"@throws FunctorException in case the transformer produces an invalid type\",\n      \"@throws FunctorException if the transformer provides an incorrect type\",\n      \"@throws FunctorException if the transformer outputs an invalid type\",\n      \"@throws FunctorException when the transformer yields an invalid type\",\n      \"@throws FunctorException if the transformer generates an invalid type\"\n    ]\n  },\n  {\n    \"tag\": \"@return the transformer\",\n    \"alternatives\": [\n      \"@return the provided transformer\",\n      \"@return the transformer object\",\n      \"@return the allocated transformer\",\n      \"@return the instance of the transformer\",\n      \"@return the transformer itself\"\n    ]\n  },\n  {\n    \"tag\": \"@param transformer the transformer to decorate\",\n    \"alternatives\": [\n      \"@param transformer the decorator to be applied to the input\",\n      \"@param transformer the transformer that will be decorated\",\n      \"@param transformer the decorator to wrap around the existing transformer\",\n      \"@param transformer the object used to decorate the function\",\n      \"@param transformer the transformation to be applied\"\n    ]\n  },\n  {\n    \"tag\": \"@param <T> the type that the predicate queries\",\n    \"alternatives\": [\n      \"@param <T> the type on which the predicate makes queries\",\n      \"@param <T> the type for which the predicate performs queries\",\n      \"@param <T> the type which the predicate operates on\",\n      \"@param <T> the type subjected to queries by the predicate\",\n      \"@param <T> the type that is queried by the predicate\"\n    ]\n  },\n  {\n    \"tag\": \"@return the singleton instance\",\n    \"alternatives\": [\n      \"@return the instance that is unique\",\n      \"@return the unique object instance\",\n      \"@return the singular instance\",\n      \"@return the instance that is alone\",\n      \"@return the only instance\"\n    ]\n  },\n  {\n    \"tag\": \"@param object the input object\",\n    \"alternatives\": [\n      \"@param object the provided input object\",\n      \"@param the object that serves as input\",\n      \"@param the object being passed as input\",\n      \"@param object the input parameter\",\n      \"@param object the object to be used as input\"\n    ]\n  },\n  {\n    \"tag\": \"@param <I> the input type\",\n    \"alternatives\": [\n      \"@param <I> the type of the input\",\n      \"@param <I> the type for the input\",\n      \"@param <I> the type expected for the input\",\n      \"@param <I> the type used for the input\",\n      \"@param <I> the expected type of the input\"\n    ]\n  },\n  {\n    \"tag\": \"@param <O> the output type\",\n    \"alternatives\": [\n      \"@param <O> the type of the output\",\n      \"@param <O> the type for the output\",\n      \"@param <O> the type expected for the output\",\n      \"@param <O> the type used for the output\",\n      \"@param <O> the expected type of the output\"\n    ]\n  },\n  {\n    \"tag\": \"@return Transformer<I, O> that always returns null.\",\n    \"alternatives\": [\n      \"@return Transformer<I, O> that consistently gives null.\",\n      \"@return Transformer<I, O> that invariably produces null.\",\n      \"@return Transformer<I, O> that constantly yields null.\",\n      \"@return Transformer<I, O> that perpetually outputs null.\",\n      \"@return Transformer<I, O> that always provides null.\"\n    ]\n  },\n  {\n    \"tag\": \"@param <I> the input type\",\n    \"alternatives\": [\n      \"@param <I> the type of the input\",\n      \"@param <I> the type for the input\",\n      \"@param <I> the type expected for the input\",\n      \"@param <I> the type used for the input\",\n      \"@param <I> the expected type of the input\"\n    ]\n  },\n  {\n    \"tag\": \"@param <O> the output type\",\n    \"alternatives\": [\n      \"@param <O> the type of the output\",\n      \"@param <O> the type for the output\",\n      \"@param <O> the type expected for the output\",\n      \"@param <O> the type used for the output\",\n      \"@param <O> the expected type of the output\"\n    ]\n  },\n  {\n    \"tag\": \"@param constantToReturn the constant object to return each time in the factory\",\n    \"alternatives\": [\n      \"@param constantToReturn the object which represents the constant returned by the factory\",\n      \"@param constantToReturn the constant to be returned by the factory on each call\",\n      \"@param constantToReturn the object that will be returned consistently by the factory\",\n      \"@param constantToReturn the constant object that the factory should return on each invocation\",\n      \"@param constantToReturn the object that serves as the constant value returned by the factory\"\n    ]\n  },\n  {\n    \"tag\": \"@return the <code>constant</code> factory.\",\n    \"alternatives\": [\n      \"@return the factory that produces the <code>constant</code>.\",\n      \"@return the factory responsible for generating the <code>constant</code>.\",\n      \"@return the factory used to create the <code>constant</code>.\",\n      \"@return the factory that constructs the <code>constant</code>.\",\n      \"@return the factory that builds the <code>constant</code>.\"\n    ]\n  },\n  {\n    \"tag\": \"@param input the input object which is ignored\",\n    \"alternatives\": [\n      \"@param input the object that is disregarded\",\n      \"@param input the object that is not taken into account\",\n      \"@param input the object that is not considered\",\n      \"@param input the object that does not affect the outcome\",\n      \"@param input the object that is not relevant\"\n    ]\n  },\n  {\n    \"tag\": \"@return the stored constant\",\n    \"alternatives\": [\n      \"@return the constant that has been stored\",\n      \"@return the persistent constant\",\n      \"@return the constant value that is retained\",\n      \"@return the constant that is kept\",\n      \"@return the constant that remains\"\n    ]\n  },\n  {\n    \"tag\": \"@return the constant\",\n    \"alternatives\": [\n      \"@return the unchanging value\",\n      \"@return the fixed result\",\n      \"@return the static outcome\",\n      \"@return the unchanged output\",\n      \"@return the steady outcome\"\n    ]\n  },\n  {\n    \"tag\": \"@param constantToReturn the constant to return each time\",\n    \"alternatives\": [\n      \"@param constantToReturn the constant to output on each invocation\",\n      \"@param constantToReturn the constant that should be returned every time\",\n      \"@param constantToReturn the constant value that is returned for each call\",\n      \"@param constantToReturn the constant object to be returned consistently\",\n      \"@param constantToReturn the object that represents the constant returned on each call\"\n    ]\n  },\n  {\n    \"tag\": \"@param <T> the input type\",\n    \"alternatives\": [\n      \"@param <T> the type of the input\",\n      \"@param <T> the type for the input\",\n      \"@param <T> the type expected for the input\",\n      \"@param <T> the type used for the input\",\n      \"@param <T> the expected type of the input\"\n    ]\n  },\n  {\n    \"tag\": \"@return the <code>predicate</code> transformer\",\n    \"alternatives\": [\n      \"@return the transformer that implements the <code>predicate</code>\",\n      \"@return the transformer that acts as the <code>predicate</code>\",\n      \"@return the transformer that handles the <code>predicate</code>\",\n      \"@return the transformer that fulfills the <code>predicate</code>\",\n      \"@return the transformer that satisfies the <code>predicate</code>\"\n    ]\n  },\n  {\n    \"tag\": \"@param input the input object to transform\",\n    \"alternatives\": [\n      \"@param input the object that needs to be transformed\",\n      \"@param input the object to be converted\",\n      \"@param input the object that requires transformation\",\n      \"@param input the object that undergoes a transformation\",\n      \"@param input the object that is subject to transformation\"\n    ]\n  },\n  {\n    \"tag\": \"@return the transformed result\",\n    \"alternatives\": [\n      \"@return the outcome of the transformation\",\n      \"@return the result obtained from the transformation\",\n      \"@return the output after the transformation\",\n      \"@return the value that arises from the transformation\",\n      \"@return the produced result after the transformation\"\n    ]\n  },\n  {\n    \"tag\": \"@return the predicate\",\n    \"alternatives\": [\n      \"@return the condition\",\n      \"@return the qualifier\",\n      \"@return the test\",\n      \"@return the statement\",\n      \"@return the verification\"\n    ]\n  },\n  {\n    \"tag\": \"@param <E> the type that the closure acts on\",\n    \"alternatives\": [\n      \"@param <E> the type that is operated on by the closure\",\n      \"@param <E> the type for which the closure performs actions\",\n      \"@param <E> the type on which the closure operates\",\n      \"@param <E> the type subjected to actions by the closure\",\n      \"@param <E> the type that is affected by the closure\"\n    ]\n  }\n]"