"output = [\n  {\n    'tag': '@param sigma Shrinkage coefficient.',\n    'alternatives': [\n      '@param sigma Reduction coefficient.',\n      '@param sigma Shrinking factor.',\n      '@param sigma Compression coefficient.',\n      '@param sigma Scale factor.',\n      '@param sigma Coefficient for shrinking.'\n    ]\n  },\n  {\n    'tag': '@throws org.apache.commons.math3.exception.NotStrictlyPositiveException if the reference simplex does not contain at least one point.',\n    'alternatives': [\n      '@throws org.apache.commons.math3.exception.NotStrictlyPositiveException when there is no point in the reference simplex.',\n      '@throws org.apache.commons.math3.exception.NotStrictlyPositiveException if the reference simplex does not have any point.',\n      '@throws org.apache.commons.math3.exception.NotStrictlyPositiveException in case the reference simplex has no point.',\n      '@throws org.apache.commons.math3.exception.NotStrictlyPositiveException if there is no point in the reference simplex.',\n      '@throws org.apache.commons.math3.exception.NotStrictlyPositiveException when the reference simplex does not contain any point.'\n    ]\n  },\n  {\n    'tag': '@throws org.apache.commons.math3.exception.DimensionMismatchException if there is a dimension mismatch in the reference simplex.',\n    'alternatives': [\n      '@throws org.apache.commons.math3.exception.DimensionMismatchException when the reference simplex has a dimension mismatch.',\n      '@throws org.apache.commons.math3.exception.DimensionMismatchException if the reference simplex has inconsistent dimension.',\n      '@throws org.apache.commons.math3.exception.DimensionMismatchException in case of a dimension mismatch in the reference simplex.',\n      '@throws org.apache.commons.math3.exception.DimensionMismatchException when there is a mismatch in the dimension of the reference simplex.',\n      '@throws org.apache.commons.math3.exception.DimensionMismatchException if the reference simplex has a dimension inconsistency.'\n    ]\n  },\n  {\n    'tag': '@param point unbounded value',\n    'alternatives': [\n      '@param point unlimited value',\n      '@param point unrestricted value',\n      '@param point value with no bounds',\n      '@param point value without limitations',\n      '@param point value not bounded'\n    ]\n  },\n  {\n    'tag': '@return bounded value',\n    'alternatives': [\n      '@return limited value',\n      '@return restricted value',\n      '@return value with bounds',\n      '@return value that is within limits',\n      '@return value bounded'\n    ]\n  },\n  {\n    'tag': '@param point bounded value',\n    'alternatives': [\n      '@param point limited value',\n      '@param point restricted value',\n      '@param point value with bounds',\n      '@param point value that is within limits',\n      '@param point value bounded'\n    ]\n  },\n  {\n    'tag': '@return unbounded value',\n    'alternatives': [\n      '@return unlimited value',\n      '@return unrestricted value',\n      '@return value with no bounds',\n      '@return value without limitations',\n      '@return value not bounded'\n    ]\n  },\n  {\n    'tag': '@param point unbounded value',\n    'alternatives': [\n      '@param point unlimited value',\n      '@param point unrestricted value',\n      '@param point value with no bounds',\n      '@param point value without limitations',\n      '@param point value not bounded'\n    ]\n  },\n  {\n    'tag': '@return underlying function value',\n    'alternatives': [\n      '@return value of the underlying function',\n      '@return function value below',\n      '@return value of the function underneath',\n      '@return value from the underlying function',\n      '@return function value underneath'\n    ]\n  },\n  {\n    'tag': '@param bounded bounded function',\n    'alternatives': [\n      '@param limited limited function',\n      '@param restricted restricted function',\n      '@param function with bounds',\n      '@param function that is within limits',\n      '@param bounded function'\n    ]\n  },\n  {\n    'tag': '@param lower lower bounds for each element of the input parameters array\\n(some elements may be set to {@code Double.NEGATIVE_INFINITY} for\\nunbounded values)',\n    'alternatives': [\n      '@param lower lower limits for each element of the input parameters array\\n(some elements may be set to {@code Double.NEGATIVE_INFINITY} for\\nunbounded values)',\n      '@param lower lower boundaries for each element of the input parameters array\\n(some elements may be set to {@code Double.NEGATIVE_INFINITY} for\\nunbounded values)',\n      '@param lower minimal values for each element of the input parameters array\\n(some elements may be set to {@code Double.NEGATIVE_INFINITY} for\\nunbounded values)',\n      '@param lower smallest values for each element of the input parameters array\\n(some elements may be set to {@code Double.NEGATIVE_INFINITY} for\\nunbounded values)',\n      '@param lower lower limits of the input parameters array\\n(some elements may be set to {@code Double.NEGATIVE_INFINITY} for\\nunbounded values)'\n    ]\n  },\n  {\n    'tag': '@param upper upper bounds for each element of the input parameters array\\n(some elements may be set to {@code Double.POSITIVE_INFINITY} for\\nunbounded values)',\n    'alternatives': [\n      '@param upper upper limits for each element of the input parameters array\\n(some elements may be set to {@code Double.POSITIVE_INFINITY} for\\nunbounded values)',\n      '@param upper upper boundaries for each element of the input parameters array\\n(some elements may be set to {@code Double.POSITIVE_INFINITY} for\\nunbounded values)',\n      '@param upper maximal values for each element of the input parameters array\\n(some elements may be set to {@code Double.POSITIVE_INFINITY} for\\nunbounded values)',\n      '@param upper highest values for each element of the input parameters array\\n(some elements may be set to {@code Double.POSITIVE_INFINITY} for\\nunbounded values)',\n      '@param upper upper limits of the input parameters array\\n(some elements may be set to {@code Double.POSITIVE_INFINITY} for\\nunbounded values)'\n    ]\n  },\n  {\n    'tag': '@throws DimensionMismatchException if lower and upper bounds are not\\nconsistent, either according to dimension or to values',\n    'alternatives': [\n      '@throws DimensionMismatchException when lower and upper bounds are inconsistent, either in dimension or values',\n      '@throws DimensionMismatchException if lower and upper bounds have a lack of consistency, either in dimension or values',\n      '@throws DimensionMismatchException in case of a lack of consistency between lower and upper bounds, either in dimension or values',\n      '@throws DimensionMismatchException when lower and upper bounds are not in agreement, either in dimension or values',\n      '@throws DimensionMismatchException if lower and upper bounds exhibit inconsistencies, either in dimension or values'\n    ]\n  },\n  {\n    'tag': '@param checker Convergence checker.',\n    'alternatives': [\n      '@param checker Checker for convergence.',\n      '@param checker Convergence verification.',\n      '@param checker Verifier for convergence.',\n      '@param checker Check for convergence.',\n      '@param checker Convergence condition.'\n    ]\n  },\n  {\n    'tag': '@param point Point at which the objective function must be evaluated.',\n    'alternatives': [\n      '@param point Location where the objective function needs to be evaluated.',\n      '@param point Position for the evaluation of the objective function.',\n      '@param point Point for the evaluation of the objective function.',\n      '@param point Spot where the objective function should be evaluated.',\n      '@param point Coordinate at which the objective function is to be evaluated.'\n    ]\n  },\n  {\n    'tag': '@return the objective function value at the specified point.',\n    'alternatives': [\n      '@return value of the objective function at the specified point.',\n      '@return objective function value for the given point.',\n      '@return result obtained from the objective function at the specified point.',\n      '@return objective function value corresponding to the specified point.',\n      '@return value produced by the objective function at the specified point.'\n    ]\n  },\n  {\n    'tag': '@throws TooManyEvaluationsException if the maximal number of evaluations is\\nexceeded.',\n    'alternatives': [\n      '@throws TooManyEvaluationsException when the maximum number of evaluations is surpassed.',\n      '@throws TooManyEvaluationsException if the maximum number of evaluations has been exceeded.',\n      '@throws TooManyEvaluationsException when the number of evaluations exceeds the maximum limit.',\n      '@throws TooManyEvaluationsException if the number of evaluations has gone beyond the maximum allowed.',\n      '@throws TooManyEvaluationsException in case the number of evaluations surpasses the maximum limit.'\n    ]\n  },\n  {\n    'tag': '@param maxEval Allowed number of evaluations of the objective function.',\n    'alternatives': [\n      '@param maxEval Maximum number of objective function evaluations allowed.',\n      '@param maxEval Number of objective function evaluations permitted.',\n      '@param maxEval Limit on the number of objective function evaluations.',\n      '@param maxEval Maximum limit for the number of objective function evaluations.',\n      '@param maxEval Maximum count of evaluations for the objective function.'\n    ]\n  },\n  {\n    'tag': '@param f Objective function.',\n    'alternatives': [\n      '@param f Function to be optimized.',\n      '@param f Optimization objective.',\n      '@param f Function for optimization.',\n      '@param f Function to optimize.',\n      '@param f Function being optimized.'\n    ]\n  },\n  {\n    'tag': '@param optData Optimization data. The following data will be looked for:\\n<ul>\\n <li>{@link Target}</li>\\n <li>{@link Weight}</li>\\n <li>{@link InitialGuess}</li>\\n</ul>',\n    'alternatives': [\n      '@param optData Data for optimization. The following data will be searched for:\\n<ul>\\n <li>{@link Target}</li>\\n <li>{@link Weight}</li>\\n <li>{@link InitialGuess}</li>\\n</ul>',\n      '@param optData Optimization-related data. The following data will be checked for:\\n<ul>\\n <li>{@link Target}</li>\\n <li>{@link Weight}</li>\\n <li>{@link InitialGuess}</li>\\n</ul>',\n      '@param optData Data used for optimization. The following data will be sought after:\\n<ul>\\n <li>{@link Target}</li>\\n <li>{@link Weight}</li>\\n <li>{@link InitialGuess}</li>\\n</ul>',\n      '@param optData Information for optimization. The following data will be inspected for:\\n<ul>\\n <li>{@link Target}</li>\\n <li>{@link Weight}</li>\\n <li>{@link InitialGuess}</li>\\n</ul>',\n      '@param optData Data concerning optimization. The following data will be examined for:\\n<ul>\\n <li>{@link Target}</li>\\n <li>{@link Weight}</li>\\n <li>{@link InitialGuess}</li>\\n</ul>'\n    ]\n  },\n  {\n    'tag': '@return the point/value pair giving the optimal value of the objective\\nfunction.',\n    'alternatives': [\n      '@return pair of point/value that provides the optimum value for the objective function.',\n      '@return pair consisting of point and value that achieves the optimal objective function value.',\n      '@return optimal point/value pair for the objective function.',\n      '@return point/value combination that obtains the optimum value of the objective function.',\n      '@return point and value pair that yields the optimal value for the objective function.'\n    ]\n  },\n  {\n    'tag': '@throws TooManyEvaluationsException if the maximal number of\\nevaluations is exceeded.',\n    'alternatives': [\n      '@throws TooManyEvaluationsException when the maximum number of evaluations is surpassed.',\n      '@throws TooManyEvaluationsException if the maximum number of evaluations has been exceeded.',\n      '@throws TooManyEvaluationsException when the number of evaluations exceeds the maximum limit.',\n      '@throws TooManyEvaluationsException if the number of evaluations has gone beyond the maximum allowed.',\n      '@throws TooManyEvaluationsException in case the number of evaluations surpasses the maximum limit.'\n    ]\n  },\n  {\n    'tag': '@throws DimensionMismatchException if the initial guess, target, and weight\\narguments have inconsistent dimensions.',\n    'alternatives': [\n      '@throws DimensionMismatchException when the initial guess, target, and weight\\narguments do not have matching dimensions.',\n      '@throws DimensionMismatchException if the initial guess, target, and weight\\narguments exhibit discrepancies in their dimensions.',\n      '@throws DimensionMismatchException in case of a dimension mismatch between the initial guess, target, and weight\\narguments.',\n      '@throws DimensionMismatchException when the dimensions of the initial guess, target, and weight\\narguments do not align.',\n      '@throws DimensionMismatchException if the dimensions of the initial guess, target, and weight\\narguments are not consistent.'\n    ]\n  },\n  {\n    'tag': '@param f Objective function.',\n    'alternatives': [\n      '@param f Function to be optimized.',\n      '@param f Optimization objective.',\n      '@param f Function for optimization.',\n      '@param f Function to optimize.',\n      '@param f Function being optimized.'\n    ]\n  },\n  {\n    'tag': '@param t Target value for the objective functions at optimum.',\n    'alternatives': [\n      '@param t Target value for the optimal objective function results.',\n      '@param t Desired value for the objective function at its optimum.',\n      '@param t Expected value for the objective function at its optimum.',\n      '@param t Objective function target value at its optimum.',\n      '@param t Value that the objective function should attain at its optimum.'\n    ]\n  }\n]"