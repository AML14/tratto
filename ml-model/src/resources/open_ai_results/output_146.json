"output=[\n  {\n    'tag': '@return 2-dimensional array of entries.',\n    'alternatives': [\n      '@return array of entries in a two-dimensional format.',\n      '@return array containing entries arranged in a two-dimensional structure.',\n      '@return entries represented as a two-dimensional array.',\n      '@return array consisting of entries structured in two dimensions.',\n      '@return an array with entries organized in two dimensions.'\n    ]\n  },\n  {\n    'tag': '@return a copy of the underlying data array.',\n    'alternatives': [\n      '@return a duplicate of the data array that is below.',\n      '@return a replicated version of the data array below.',\n      '@return a cloned copy of the data array underneath.',\n      '@return an identical replica of the data array that is underneath.',\n      '@return an exact copy of the data array below.'\n    ]\n  },\n  {\n    'tag': '@param in Data to copy.',\n    'alternatives': [\n      '@param in Data to duplicate.',\n      '@param in The data that needs to be copied.',\n      '@param in The data that should be replicated.',\n      '@param in Data that is going to be cloned.',\n      '@param in The data array to make a copy of.'\n    ]\n  },\n  {\n    'tag': '@throws NoDataException if the input array is empty.',\n    'alternatives': [\n      '@throws NoDataException when the input array is devoid of elements.',\n      '@throws NoDataException in case the input array has no data.',\n      '@throws NoDataException if the input array does not contain any data.',\n      '@throws NoDataException when the input array has no elements.',\n      '@throws NoDataException if the input array is lacking any data.'\n    ]\n  },\n  {\n    'tag': '@throws DimensionMismatchException if the input array is not rectangular.',\n    'alternatives': [\n      '@throws DimensionMismatchException if the input array is not a rectangle.',\n      '@throws DimensionMismatchException when the input array does not have a rectangular shape.',\n      '@throws DimensionMismatchException in case the input array is not in a rectangular form.',\n      '@throws DimensionMismatchException if the input array is not in rectangle format.',\n      '@throws DimensionMismatchException if the input array is not in the shape of a rectangle.'\n    ]\n  },\n  {\n    'tag': '@throws NullArgumentException if the input array is {@code null}.',\n    'alternatives': [\n      '@throws NullArgumentException if the input array is null.',\n      '@throws NullArgumentException when the input array is equal to {@code null}.',\n      '@throws NullArgumentException if the input array is considered as null.',\n      '@throws NullArgumentException in case the input array is {@code null}.',\n      '@throws NullArgumentException if the input array is evaluated as null.'\n    ]\n  },\n  {\n    'tag': '@param rowDimension Number of rows in the new matrix.',\n    'alternatives': [\n      '@param rowDimension The count of rows in the new matrix.',\n      '@param rowDimension Count of rows for the new matrix.',\n      '@param rowDimension Total number of rows in the new matrix.',\n      '@param rowDimension Number of rows that the new matrix will have.',\n      '@param rowDimension The quantity of rows to be included in the new matrix.'\n    ]\n  },\n  {\n    'tag': '@param columnDimension Number of columns in the new matrix.',\n    'alternatives': [\n      '@param columnDimension The count of columns in the new matrix.',\n      '@param columnDimension Count of columns for the new matrix.',\n      '@param columnDimension Total number of columns in the new matrix.',\n      '@param columnDimension Number of columns that the new matrix will have.',\n      '@param columnDimension The quantity of columns to be included in the new matrix.'\n    ]\n  },\n  {\n    'tag': '@param d Data for the new matrix.',\n    'alternatives': [\n      '@param d Information to be used for creating the new matrix.',\n      '@param d Data that will be employed in constructing the new matrix.',\n      '@param d Information to build the new matrix.',\n      '@param d Data to be used for the new matrix.',\n      '@param d Information that will be used to form the new matrix.'\n    ]\n  },\n  {\n    'tag': '@throws DimensionMismatchException if {@code d} is not rectangular.',\n    'alternatives': [\n      '@throws DimensionMismatchException when {@code d} does not have a rectangular shape.',\n      '@throws DimensionMismatchException in case {@code d} is not in a rectangular form.',\n      '@throws DimensionMismatchException if {@code d} is not in rectangle format.',\n      '@throws DimensionMismatchException if {@code d} is not a rectangle.',\n      '@throws DimensionMismatchException if {@code d} is not in the shape of a rectangle.'\n    ]\n  },\n  {\n    'tag': '@param d Data for new matrix.',\n    'alternatives': [\n      '@param d Information for creating the new matrix.',\n      '@param d Data to be used in constructing the new matrix.',\n      '@param d Information to build the new matrix.',\n      '@param d Data that will be employed to generate the new matrix.',\n      '@param d Information that will be used to form the new matrix.'\n    ]\n  },\n  {\n    'tag': '@param copyArray if {@code true}, the input array will be copied,\\notherwise it will be referenced.',\n    'alternatives': [\n      '@param copyArray if {@code true}, the input array will be duplicated,\\nif {@code false}, it will be referenced.',\n      '@param copyArray when {@code true}, the input array will be replicated,\\nif {@code false}, it will be pointed to.',\n      '@param copyArray if {@code true}, the input array will be cloned,\\notherwise it will be referenced.',\n      '@param copyArray if {@code true}, the input array will be recreated,\\nif {@code false}, it will be referred to.',\n      '@param copyArray if {@code true}, the input array will be recreated,\\notherwise it will be referred to.'\n    ]\n  },\n  {\n    'tag': '@throws DimensionMismatchException if {@code d} is not rectangular.',\n    'alternatives': [\n      '@throws DimensionMismatchException when {@code d} does not have a rectangular shape.',\n      '@throws DimensionMismatchException in case {@code d} is not in a rectangular form.',\n      '@throws DimensionMismatchException if {@code d} is not in rectangle format.',\n      '@throws DimensionMismatchException if {@code d} is not a rectangle.',\n      '@throws DimensionMismatchException if {@code d} is not in the shape of a rectangle.'\n    ]\n  },\n  {\n    'tag': '@param v Column vector holding data for new matrix.',\n    'alternatives': [\n      '@param v Column vector containing data for the new matrix.',\n      '@param v Column vector that holds data for the new matrix.',\n      '@param v Column vector with data for the new matrix.',\n      '@param v Column vector storing data for the new matrix.',\n      '@param v Column vector which contains data for the new matrix.'\n    ]\n  },\n  {\n    'tag': '@param <T> Type of the field elements.',\n    'alternatives': [\n      '@param <T> The type of the field elements.',\n      '@param <T> The element type of the field.',\n      '@param <T> The type of the elements in the field.',\n      '@param <T> Type of elements in the field.',\n      '@param <T> The field element type.'\n    ]\n  },\n  {\n    'tag': '@param rawData Data array in raw layout.',\n    'alternatives': [\n      '@param rawData Array of data in raw layout.',\n      '@param rawData Data that is in raw layout.',\n      '@param rawData Array containing data in raw layout.',\n      '@param rawData Data array with a raw layout.',\n      '@param rawData Data stored in raw layout.'\n    ]\n  },\n  {\n    'tag': '@return a new data array containing the same entries but in blocks layout',\n    'alternatives': [\n      '@return a new data array with the same entries but arranged in blocks layout',\n      '@return a new data array that has the same entries but organized in blocks layout',\n      '@return a new data array consisting of the same entries but in blocks layout',\n      '@return a new data array containing the identical entries but in blocks layout',\n      '@return a new data array with the identical entries but arranged in blocks layout'\n    ]\n  },\n  {\n    'tag': '@throws DimensionMismatchException if {@code rawData} is not rectangular\\n (not all rows have the same length).',\n    'alternatives': [\n      '@throws DimensionMismatchException when {@code rawData} does not have a rectangular shape (rows have different lengths).',\n      '@throws DimensionMismatchException if {@code rawData} is not in a rectangular form (rows have varying lengths).',\n      '@throws DimensionMismatchException in case {@code rawData} is not rectangular (rows have different lengths).',\n      '@throws DimensionMismatchException if {@code rawData} is not in rectangle format (rows have varying lengths).',\n      '@throws DimensionMismatchException if {@code rawData} is not a rectangle (rows have different lengths).'\n    ]\n  },\n  {\n    'tag': '@param <T> Type of the field elements.',\n    'alternatives': [\n      '@param <T> The type of the field elements.',\n      '@param <T> The element type of the field.',\n      '@param <T> The type of the elements in the field.',\n      '@param <T> Type of elements in the field.',\n      '@param <T> The field element type.'\n    ]\n  },\n  {\n    'tag': '@param field Field to which the elements belong.',\n    'alternatives': [\n      '@param field Field that the elements belong to.',\n      '@param field Field in which the elements are included.',\n      '@param field Field where the elements are located.',\n      '@param field Field which contains the elements.',\n      '@param field Field that includes the elements.'\n    ]\n  },\n  {\n    'tag': '@param rows Number of rows in the new matrix.',\n    'alternatives': [\n      '@param rows The count of rows in the new matrix.',\n      '@param rows Count of rows for the new matrix.',\n      '@param rows Total number of rows in the new matrix.',\n      '@param rows Number of rows that the new matrix will have.',\n      '@param rows The quantity of rows to be included in the new matrix.'\n    ]\n  },\n  {\n    'tag': '@param columns Number of columns in the new matrix.',\n    'alternatives': [\n      '@param columns The count of columns in the new matrix.',\n      '@param columns Count of columns for the new matrix.',\n      '@param columns Total number of columns in the new matrix.',\n      '@param columns Number of columns that the new matrix will have.',\n      '@param columns The quantity of columns to be included in the new matrix.'\n    ]\n  },\n  {\n    'tag': '@return a new data array in blocks layout.',\n    'alternatives': [\n      '@return a new data array with blocks layout.',\n      '@return a new data array organized in blocks layout.',\n      '@return a new data array containing blocks layout.',\n      '@return a new data array in the form of blocks layout.',\n      '@return a new data array with layout in blocks.'\n    ]\n  },\n  {\n    'tag': '@param m matrix to be added',\n    'alternatives': [\n      '@param m matrix that will be added',\n      '@param m matrix to add',\n      '@param m matrix for addition',\n      '@param m matrix to be included',\n      '@param m matrix that needs to be added'\n    ]\n  },\n  {\n    'tag': '@return {@code this + m}',\n    'alternatives': [\n      '@return the result of adding {@code this} with {@code m}',\n      '@return the sum of {@code this} and {@code m}',\n      '@return the addition of {@code this} and {@code m}',\n      '@return the outcome of combining {@code this} and {@code m}',\n      '@return the result obtained from the addition of {@code this} and {@code m}'\n    ]\n  }\n]\n\n"