"output=[\n    {\n        'tag': '@param first Whether the first point should be passed to the\\nunderlying fixed step size step handler.',\n        'alternatives': [\n            '@param first Whether the initial point should be provided to the\\nunderlying step handler of fixed step size.',\n            '@param first Determines whether the first point should be forwarded to the\\nunderlying step handler with a fixed step size.',\n            '@param first Indicates whether to pass the first point to the\\nunderlying fixed step size step handler.'\n        ]\n    },\n    {\n        'tag': '@param last Whether the last point should be passed to the\\nunderlying fixed step size step handler.',\n        'alternatives': [\n            '@param last Whether the final point should be transmitted to the\\nstep handler with a fixed step size.',\n            '@param last Determines whether the last point should be forwarded to the\\nunderlying step handler with a fixed step size.',\n            '@param last Indicates whether to pass the last point to the\\nunderlying fixed step size step handler.'\n        ]\n    },\n    {\n        'tag': '@param y reference to the integrator array holding the state at\\nthe end of the step',\n        'alternatives': [\n            '@param y reference to the integrator array storing the state at\\nthe end of the step.',\n            '@param y reference to the integrator array that contains the state at\\nthe end of the step.',\n            '@param y reference to the integrator array which holds the state at\\nthe end of the step.'\n        ]\n    },\n    {\n        'tag': '@param forward integration direction indicator',\n        'alternatives': [\n            '@param forward indicates the direction of integration.',\n            '@param forward indicates the integration direction.',\n            '@param forward indicates the orientation of the integration.'\n        ]\n    },\n    {\n        'tag': '@param primaryMapper equations mapper for the primary equations set',\n        'alternatives': [\n            '@param primaryMapper equations mapper for the main set of equations.',\n            '@param primaryMapper equations mapper for the primary equations system.',\n            '@param primaryMapper equations mapper for the primary set of equations.'\n        ]\n    },\n    {\n        'tag': '@param secondaryMappers equations mappers for the secondary equations sets',\n        'alternatives': [\n            '@param secondaryMappers equations mappers for the additional equations sets.',\n            '@param secondaryMappers equations mappers for the secondary equations systems.',\n            '@param secondaryMappers equations mappers for the secondary sets of equations.'\n        ]\n    },\n    {\n        'tag': '@param time time at which all arrays are defined',\n        'alternatives': [\n            '@param time specifies the time at which all arrays are defined.',\n            '@param time denotes the time at which all arrays are defined.',\n            '@param time indicates the time when all arrays are defined.'\n        ]\n    },\n    {\n        'tag': '@param stepSize step size used in the scaled and Nordsieck arrays',\n        'alternatives': [\n            '@param stepSize the size of the step used in the scaled and Nordsieck arrays.',\n            '@param stepSize the step size employed in the scaled and Nordsieck arrays.',\n            '@param stepSize the size of the step applied in the scaled and Nordsieck arrays.'\n        ]\n    },\n    {\n        'tag': '@param scaledDerivative reference to the integrator array holding the first\\nscaled derivative',\n        'alternatives': [\n            '@param scaledDerivative reference to the integrator array containing the initial\\nscaled derivative.',\n            '@param scaledDerivative reference to the integrator array that stores the first\\nscaled derivative.',\n            '@param scaledDerivative reference to the integrator array which holds the initial\\nscaled derivative.'\n        ]\n    },\n    {\n        'tag': '@param nordsieckVector reference to the integrator matrix holding the\\nNordsieck vector',\n        'alternatives': [\n            '@param nordsieckVector reference to the integrator matrix that contains the\\nNordsieck vector.',\n            '@param nordsieckVector reference to the integrator matrix storing the\\nNordsieck vector.',\n            '@param nordsieckVector reference to the integrator matrix which holds the\\nNordsieck vector.'\n        ]\n    },\n    {\n        'tag': '@param stepSize new step size to use in the scaled and Nordsieck arrays',\n        'alternatives': [\n            '@param stepSize updated step size to apply in the scaled and Nordsieck arrays.',\n            '@param stepSize modified step size used in the scaled and Nordsieck arrays.',\n            '@param stepSize revised step size employed in the scaled and Nordsieck arrays.'\n        ]\n    },\n    {\n        'tag': '@return state vector at time {@link #getInterpolatedTime}',\n        'alternatives': [\n            '@return state vector at time {@link #getInterpolatedTime}',\n            '@return the state vector at the time {@link #getInterpolatedTime}',\n            '@return the state vector corresponding to the time {@link #getInterpolatedTime}'\n        ]\n    },\n    {\n        'tag': '@throws MaxCountExceededException if the number of functions evaluations is exceeded',\n        'alternatives': [\n            '@throws MaxCountExceededException if the maximum number of function evaluations is surpassed.',\n            '@throws MaxCountExceededException if the number of function evaluations exceeds the limit.',\n            '@throws MaxCountExceededException if the count of function evaluations exceeds the permitted value.'\n        ]\n    },\n    {\n        'tag': '@param interpolator interpolator to copy from. The copy is a deep\\ncopy: its arrays are separated from the original arrays of the\\ninstance',\n        'alternatives': [\n            '@param interpolator interpolator to be copied from. The copied version is a deep\\ncopy: its arrays are distinct from the arrays of the\\noriginal instance.',\n            '@param interpolator interpolator from which to perform a copy. The copy is a deep\\ncopy: its arrays are isolated from the original arrays within the\\ninstance.',\n            '@param interpolator interpolator to duplicate from. The duplication is a deep\\ncopy: its arrays are separate from the original arrays of the\\ninstance.'\n        ]\n    },\n    {\n        'tag': '@param interpolator interpolator for the last accepted step. For\\nefficiency purposes, the various integrators reuse the same\\nobject on each call, so if the instance wants to keep it across\\nall calls (for example to provide at the end of the integration a\\ncontinuous model valid throughout the integration range), it\\nshould build a local copy using the clone method and store this\\ncopy.',\n        'alternatives': [\n            '@param interpolator interpolator for the most recent accepted step. To\\noptimize the process, the various integrators reuse a single\\nobject for each invocation, hence if the instance requires\\ncontinued use (e.g., to provide a continuous model that remains\\nvalid across the integration interval), it must construct a local\\ncopy through the clone method and save this duplicate.',\n            '@param interpolator interpolator for the last accepted step. For\\nperformance reasons, the different integrators reuse the same\\nobject for each call, so if the instance wants to retain it across\\nall calls (e.g., to provide a continuous model that is valid\\nthroughout the integration domain), it should construct a separate\\ncopy using the clone method and store that copy.',\n            '@param interpolator interpolator for the most recently accepted step. To\\nachieve better performance, the different integrators reuse the\\nsame object on every invocation, so if the instance needs to keep\\nit across all invocations (for example, to provide a continuous\\nmodel that remains valid throughout the integration range), it\\ndeserves to create a local duplicate using the clone method and\\nkeep it there.'\n        ]\n    },\n    {\n        'tag': '@throws MaxCountExceededException if the interpolator throws one because\\nthe number of functions evaluations is exceeded',\n        'alternatives': [\n            '@throws MaxCountExceededException if the interpolator throws an exception when\\nthe number of function evaluations surpasses the limit.',\n            '@throws MaxCountExceededException if an exception is thrown by the interpolator due\\nto the exceeding number of function evaluations.',\n            '@throws MaxCountExceededException if the interpolator throws an exception due\\nto exceeding the number of function evaluations.'\n        ]\n    },\n    {\n        'tag': '@param nextTime the next normalized time',\n        'alternatives': [\n            '@param nextTime the upcoming normalized time',\n            '@param nextTime the succeeding normalized time',\n            '@param nextTime the following normalized time'\n        ]\n    },\n    {\n        'tag': '@param interpolator interpolator for the last accepted step, to use to\\nget the end time of the current step',\n        'alternatives': [\n            '@param interpolator interpolator for the most recent accepted step, used to\\nobtain the final time of the current step',\n            '@param interpolator interpolator for the last accepted step, employed to\\nretrieve the end time of the current step',\n            '@param interpolator interpolator for the most recent accepted step, which is used to\\nacquire the end time of the current step'\n        ]\n    },\n    {\n        'tag': '@return value indicating whether the next normalized time is in the\\ncurrent step',\n        'alternatives': [\n            '@return value that indicates whether the next normalized time falls within the\\ncurrent step',\n            '@return value indicating whether the next normalized time is within the\\ncurrent step',\n            '@return value that signifies whether the next normalized time is inside the\\ncurrent step'\n        ]\n    },\n    {\n        'tag': '@param isLast true if the step is the last one',\n        'alternatives': [\n            '@param isLast true if this is the final step',\n            '@param isLast true if this is the last step',\n            '@param isLast true if this is the concluding step'\n        ]\n    },\n    {\n        'tag': '@param h fixed time step (sign is not used)',\n        'alternatives': [\n            '@param h fixed time step (sign is irrelevant)',\n            '@param h fixed time step (sign has no impact)',\n            '@param h fixed time step (sign does not matter)'\n        ]\n    },\n    {\n        'tag': '@param handler fixed time step handler to wrap',\n        'alternatives': [\n            '@param handler fixed time step handler to enclose',\n            '@param handler fixed time step handler to encapsulate',\n            '@param handler fixed time step handler to surround'\n        ]\n    },\n    {\n        'tag': '@param h fixed time step (sign is not used)',\n        'alternatives': [\n            '@param h fixed time step (sign is irrelevant)',\n            '@param h fixed time step (sign has no impact)',\n            '@param h fixed time step (sign does not matter)'\n        ]\n    },\n    {\n        'tag': '@param handler fixed time step handler to wrap',\n        'alternatives': [\n            '@param handler fixed time step handler to enclose',\n            '@param handler fixed time step handler to encapsulate',\n            '@param handler fixed time step handler to surround'\n        ]\n    },\n    {\n        'tag': '@param mode step normalizer mode to use',\n        'alternatives': [\n            '@param mode mode of the step normalizer to utilize',\n            '@param mode step normalizer mode to employ',\n            '@param mode mode of the step normalizer to apply'\n        ]\n    }\n]"