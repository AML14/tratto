"output = [\n  {\n    'tag': '@param weights the weights array',\n    'alternatives': [\n      '@param weights the array of weights',\n      '@param weights the array of values representing weights',\n      '@param weights the weights vector',\n      '@param weights the array containing the weights',\n      '@param weights an array of weights'\n    ]\n  },\n  {\n    'tag': '@param begin index of the first array element to include',\n    'alternatives': [\n      '@param begin the starting index of the array elements to be considered',\n      '@param begin the index specifying the first element in the array to include',\n      '@param begin the index of the initial array element to be included',\n      '@param begin the index of the first element in the array that should be taken into account',\n      '@param begin the position of the first element of the array to be considered'\n    ]\n  },\n  {\n    'tag': '@param length the number of elements to include',\n    'alternatives': [\n      '@param length the count of elements to be included',\n      '@param length the total number of elements to be considered',\n      '@param length the size of the subset of elements to be taken into account',\n      '@param length the number of items to be included',\n      '@param length the quantity representing the number of elements to be included'\n    ]\n  },\n  {\n    'tag': '@return the weighted variance of the values or Double.NaN if length = 0',\n    'alternatives': [\n      '@return the variance of the values weighted by their weights, or Double.NaN if the length is zero',\n      '@return the variance of the provided values, taking into account their respective weights, or Double.NaN if the length equals zero',\n      '@return the variance of the values considering their weights, or Double.NaN if the length is zero',\n      '@return the variance of the values, weighted according to the specified weights, or Double.NaN if the length is zero',\n      '@return the weighted variance of the values, or Double.NaN if the length is zero'\n    ]\n  },\n  {\n    'tag': '@throws MathIllegalArgumentException if the parameters are not valid',\n    'alternatives': [\n      '@throws MathIllegalArgumentException when the provided parameters are invalid',\n      '@throws MathIllegalArgumentException if the input parameters are not valid',\n      '@throws MathIllegalArgumentException in case the given parameters are not valid',\n      '@throws MathIllegalArgumentException if the provided arguments are not valid',\n      '@throws MathIllegalArgumentException when the parameters supplied are invalid'\n    ]\n  },\n  {\n    'tag': '@param values the input array',\n    'alternatives': [\n      '@param values the array from which to get the input',\n      '@param values the array containing the input values',\n      '@param values the provided array',\n      '@param values an array representing the input values',\n      '@param values the array of input values'\n    ]\n  },\n  {\n    'tag': '@param mean the precomputed mean value',\n    'alternatives': [\n      '@param mean the mean value that has been precalculated',\n      '@param mean the precalculated average value',\n      '@param mean the previously computed mean value',\n      '@param mean the precalculated mean',\n      '@param mean the mean value that was computed beforehand'\n    ]\n  },\n  {\n    'tag': '@return the variance of the values or Double.NaN if length = 0',\n    'alternatives': [\n      '@return the variance of the values, or Double.NaN if the length is zero',\n      '@return the variance of the provided values, or Double.NaN if the length equals zero',\n      '@return the variance of the values, or Double.NaN if the length is zero',\n      '@return the computed variance of the values, or Double.NaN if the length is zero',\n      '@return the variance of the values, or Double.NaN if the length is zero'\n    ]\n  },\n  {\n    'tag': '@return the variance of the values or Double.NaN if the array is empty',\n    'alternatives': [\n      '@return the variance of the values, or Double.NaN if the array is empty',\n      '@return the variance of the values, or Double.NaN if the array is devoid of elements',\n      '@return the computed variance of the values, or Double.NaN if the array is empty',\n      '@return the variance of the values, or Double.NaN if the array contains no elements',\n      '@return the variance of the values, or Double.NaN if the array is empty'\n    ]\n  },\n  {\n    'tag': '@param weights the weights array',\n    'alternatives': [\n      '@param weights the array of weights',\n      '@param weights the array of values representing weights',\n      '@param weights the weights vector',\n      '@param weights the array containing the weights',\n      '@param weights an array of weights'\n    ]\n  },\n  {\n    'tag': '@param values the input array',\n    'alternatives': [\n      '@param values the array from which to get the input',\n      '@param values the array containing the input values',\n      '@param values the provided array',\n      '@param values an array representing the input values',\n      '@param values the array of input values'\n    ]\n  },\n  {\n    'tag': '@param mean the precomputed mean value',\n    'alternatives': [\n      '@param mean the mean value that has been precalculated',\n      '@param mean the precalculated average value',\n      '@param mean the previously computed mean value',\n      '@param mean the precalculated mean',\n      '@param mean the mean value that was computed beforehand'\n    ]\n  },\n  {\n    'tag': '@param begin index of the first array element to include',\n    'alternatives': [\n      '@param begin the starting index of the array elements to be considered',\n      '@param begin the index specifying the first element in the array to include',\n      '@param begin the index of the initial array element to be included',\n      '@param begin the index of the first element in the array that should be taken into account',\n      '@param begin the position of the first element of the array to be considered'\n    ]\n  },\n  {\n    'tag': '@param length the number of elements to include',\n    'alternatives': [\n      '@param length the count of elements to be included',\n      '@param length the total number of elements to be considered',\n      '@param length the size of the subset of elements to be taken into account',\n      '@param length the number of items to be included',\n      '@param length the quantity representing the number of elements to be included'\n    ]\n  },\n  {\n    'tag': '@return the variance of the values or Double.NaN if length = 0',\n    'alternatives': [\n      '@return the variance of the values, or Double.NaN if the length is zero',\n      '@return the variance of the provided values, or Double.NaN if the length equals zero',\n      '@return the variance of the values, or Double.NaN if the length is zero',\n      '@return the computed variance of the values, or Double.NaN if the length is zero',\n      '@return the variance of the values, or Double.NaN if the length is zero'\n    ]\n  },\n  {\n    'tag': '@throws MathIllegalArgumentException if the parameters are not valid',\n    'alternatives': [\n      '@throws MathIllegalArgumentException when the provided parameters are invalid',\n      '@throws MathIllegalArgumentException if the input parameters are not valid',\n      '@throws MathIllegalArgumentException in case the given parameters are not valid',\n      '@throws MathIllegalArgumentException if the provided arguments are not valid',\n      '@throws MathIllegalArgumentException when the parameters supplied are invalid'\n    ]\n  },\n  {\n    'tag': '@param values the input array',\n    'alternatives': [\n      '@param values the array from which to get the input',\n      '@param values the array containing the input values',\n      '@param values the provided array',\n      '@param values an array representing the input values',\n      '@param values the array of input values'\n    ]\n  }\n]"