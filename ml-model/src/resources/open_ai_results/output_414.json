"output=[\n  {\n    \"tag\": \"@param array an array of {@code double} values, possibly empty\",\n    \"alternatives\": [\n      \"@param array an array of {@code double} values, possibly empty\",\n      \"@param array a sequence of {@code double} values, potentially empty\",\n      \"@param array a collection of {@code double} values, potentially empty\"\n    ]\n  },\n  {\n    \"tag\": \"@param target a primitive {@code double} value\",\n    \"alternatives\": [\n      \"@param target a primitive {@code double} value\",\n      \"@param target a basic {@code double} value\",\n      \"@param target an elemental {@code double} value\"\n    ]\n  },\n  {\n    \"tag\": \"@return the greatest index {@code i} for which {@code array[i] == target},\\n    or {@code -1} if no such index exists.\",\n    \"alternatives\": [\n      \"@return the maximum index {@code i} where {@code array[i] == target},\\n    or {@code -1} if there is no such index.\",\n      \"@return the highest index {@code i} that satisfies {@code array[i] == target},\\n    or {@code -1} if such an index does not exist.\",\n      \"@return the largest index {@code i} where {@code array[i] == target},\\n    or {@code -1} if no such index exists.\",\n    ]\n  },\n  {\n    \"tag\": \"@return the value present in {@code array} that is less than or equal to\\n    every other value in the array\",\n    \"alternatives\": [\n      \"@return the value in {@code array} that is smaller or equal to\\n    every other value in the array\",\n      \"@return the value contained in {@code array} that is less than or equal to\\n    every other value in the array\",\n      \"@return the value existing in {@code array} that is less than or equal to\\n    every other value in the array\",\n    ]\n  },\n  {\n    \"tag\": \"@return the value present in {@code array} that is greater than or equal to\\n    every other value in the array\",\n    \"alternatives\": [\n      \"@return the value in {@code array} that is larger or equal to\\n    every other value in the array\",\n      \"@return the value contained in {@code array} that is greater than or equal to\\n    every other value in the array\",\n      \"@return the value existing in {@code array} that is greater than or equal to\\n    every other value in the array\",\n    ]\n  },\n  {\n    \"tag\": \"@param arrays zero or more {@code double} arrays\",\n    \"alternatives\": [\n      \"@param arrays zero or more {@code double} arrays\",\n      \"@param arrays one or more {@code double} arrays\",\n      \"@param arrays any number of {@code double} arrays\"\n    ]\n  },\n  {\n    \"tag\": \"@return a single array containing all the values from the source arrays, in\\n    order\",\n    \"alternatives\": [\n      \"@return an array containing all the values from the source arrays, arranged\\n    in a specific order\",\n      \"@return a solitary array containing all the values from the source arrays, sequentially\",\n      \"@return a lone array that includes all the values from the source arrays, following\\n    a specific order\",\n      \n    ]\n  },\n  {\n    \"tag\": \"@param array the source array\",\n    \"alternatives\": [\n      \"@param array the initial array\",\n      \"@param array the starting array\",\n      \"@param array the base array\"\n    ]\n  },\n  {\n    \"tag\": \"@param minLength the minimum length the returned array must guarantee\",\n    \"alternatives\": [\n      \"@param minLength the minimum size that the resulting array must ensure\",\n      \"@param minLength the least length that the resulting array should provide\",\n      \"@param minLength the minimum number of elements that the resulting array must have\",\n    ]\n  },\n  {\n    \"tag\": \"@param padding an extra amount to \\\"grow\\\" the array by if growth is\\n    necessary\",\n    \"alternatives\": [\n      \"@param padding additional value to increase the array size if it is\\n    required\",\n      \"@param padding an extra quantity to expand the array if needed\",\n      \"@param padding a surplus amount to enlarge the array if necessary\",\n    ]\n  },\n  {\n    \"tag\": \"@return an array containing the values of {@code array}, with guaranteed\\n    minimum length {@code minLength}\",\n    \"alternatives\": [\n      \"@return an array that includes the values of {@code array}, ensuring\\n    a minimum length of {@code minLength}\",\n      \"@return an array that contains the values of {@code array}, with the condition\\n    of having a minimum length of {@code minLength}\",\n      \"@return an array that holds the values of {@code array}, with the provision\\n    of a minimum length of {@code minLength}\",\n    ]\n  },\n  {\n    \"tag\": \"@param separator the text that should appear between consecutive values in\\n    the resulting string (but not at the start or end)\",\n    \"alternatives\": [\n      \"@param separator the text that is placed between successive values in\\n    the resultant string (excluding the beginning or end)\",\n      \"@param separator the text between adjacent values in\\n    the resulting string (excluding the initial or final part)\",\n      \"@param separator the string that separates consecutive values in\\n    the resulting string (excluding the beginning or end)\",\n    ]\n  },\n  {\n    \"tag\": \"@param array an array of {@code double} values, possibly empty\",\n    \"alternatives\": [\n      \"@param array an array of {@code double} values, possibly empty\",\n      \"@param array a sequence of {@code double} values, potentially empty\",\n      \"@param array a collection of {@code double} values, potentially empty\"\n    ]\n  },\n  {\n    \"tag\": \"@param collection a collection of {@code Number} instances\",\n    \"alternatives\": [\n      \"@param collection a collection of {@code Number} objects\",\n      \"@param collection a collection of {@code Number} elements\",\n      \"@param collection a collection of {@code Number} entities\"\n    ]\n  },\n  {\n    \"tag\": \"@return an array containing the same values as {@code collection}, in the\\n    same order, converted to primitives\",\n    \"alternatives\": [\n      \"@return an array that includes the equivalent values as {@code collection}, in the\\n    identical sequence, transformed to primitive types\",\n      \"@return an array that contains the corresponding values as {@code collection}, in the\\n    exact order, converted to primitive forms\",\n      \"@return an array that holds the matching values as {@code collection}, in the\\n    order they appear, changed to primitive types\",\n    ]\n  },\n  {\n    \"tag\": \"@param backingArray the array to back the list\",\n    \"alternatives\": [\n      \"@param backingArray the array that supports the list\",\n      \"@param backingArray the array used as the backbone of the list\",\n      \"@param backingArray the array that serves as the foundation of the list\",\n    ]\n  },\n  {\n    \"tag\": \"@return a list view of the array\",\n    \"alternatives\": [\n      \"@return a view of the list based on the array\",\n      \"@return a representation of the array as a list\",\n      \"@return a perspective of the array in the form of a list\",\n    ]\n  },\n  {\n    \"tag\": \"@param string the string representation of a {@code double} value\",\n    \"alternatives\": [\n      \"@param string the string portrayal of a {@code double} value\",\n      \"@param string the string version of a {@code double} value\",\n      \"@param string the string expression of a {@code double} value\"\n    ]\n  },\n  {\n    \"tag\": \"@return the floating point value represented by {@code string}, or\\n    {@code null} if {@code string} has a length of zero or cannot be\\n    parsed as a {@code double} value\",\n    \"alternatives\": [\n      \"@return the decimal value indicated by {@code string}, or\\n    {@code null} if the length of {@code string} is zero or if it cannot be\\n    interpreted as a {@code double} value\",\n      \"@return the decimal value represented by {@code string}, or\\n    {@code null} if the length of {@code string} is zero or if it cannot be\\n    parsed as a {@code double} number\",\n      \"@return the floating point number denoted by {@code string}, or\\n    {@code null} if the length of {@code string} is zero or if it cannot be\\n    converted to a {@code double} value\",\n    ]\n  },\n  {\n    \"tag\": \"@param value a primitive {@code byte} value\",\n    \"alternatives\": [\n      \"@param value a basic {@code byte} value\",\n      \"@param value an elemental {@code byte} value\",\n      \"@param value a fundamental {@code byte} value\"\n    ]\n  },\n  {\n    \"tag\": \"@return a hash code for the value\",\n    \"alternatives\": [\n      \"@return a hash code for the data\",\n      \"@return a hash code for the element\",\n      \"@return a hash code for the item\"\n    ]\n  },\n  {\n    \"tag\": \"@param array an array of {@code byte} values, possibly empty\",\n    \"alternatives\": [\n      \"@param array an array of {@code byte} values, possibly empty\",\n      \"@param array a sequence of {@code byte} values, potentially empty\",\n      \"@param array a collection of {@code byte} values, potentially empty\"\n    ]\n  },\n  {\n    \"tag\": \"@param target a primitive {@code byte} value\",\n    \"alternatives\": [\n      \"@param target a basic {@code byte} value\",\n      \"@param target an elemental {@code byte} value\",\n      \"@param target a fundamental {@code byte} value\"\n    ]\n  },\n  {\n    \"tag\": \"@return {@code true} if {@code array[i] == target} for some value of {@code\\n    i}\",\n    \"alternatives\": [\n      \"@return {@code true} if there is some value of {@code i} where {@code array[i] == target}\",\n      \"@return {@code true} if there exists a value of {@code i} such that {@code array[i] == target}\",\n      \"@return {@code true} if there is a value of {@code i} that satisfies {@code array[i] == target}\",\n    ]\n  },\n  {\n    \"tag\": \"@param array an array of {@code byte} values, possibly empty\",\n    \"alternatives\": [\n      \"@param array an array of {@code byte} values, possibly empty\",\n      \"@param array a sequence of {@code byte} values, potentially empty\",\n      \"@param array a collection of {@code byte} values, potentially empty\"\n    ]\n  }\n]"