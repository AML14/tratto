"[\n  {\n    'tag': '@return remaining region of the hyperplane',\n    'alternatives': [\n      '@return remaining portion of the hyperplane',\n      '@return the part of the hyperplane that is left',\n      '@return the region that remains in the hyperplane',\n      '@return the remaining section of the hyperplane',\n      '@return the area of the hyperplane that is still present'\n    ]\n  },\n  {\n    'tag': '@param transform D-dimension transform to apply',\n    'alternatives': [\n      '@param transform D-dimension conversion to perform',\n      '@param transform D-dimension mapping to utilize',\n      '@param transform transformation to be used with D-dimensions',\n      '@param transform D-dimension alteration to employ',\n      '@param transform D-dimension modification to execute'\n    ]\n  },\n  {\n    'tag': '@return the transformed instance',\n    'alternatives': [\n      '@return the instance after transformation',\n      '@return the instance that has been modified',\n      '@return the instance after applying the transformation',\n      '@return the instance that underwent the transformation',\n      '@return the instance that has gone through the transformation'\n    ]\n  },\n  {\n    'tag': '@param node current BSP tree node',\n    'alternatives': [\n      '@param node current node of the BSP tree',\n      '@param node node that is currently being processed in the BSP tree',\n      '@param node the current node within the BSP tree',\n      '@param node node currently being evaluated in the BSP tree',\n      '@param node the node that is currently under consideration in the BSP tree'\n    ]\n  },\n  {\n    'tag': '@param transformed image of the instance hyperplane by the transform',\n    'alternatives': [\n      '@param transformed representation of the instance hyperplane after the transform',\n      '@param transformed version of the instance hyperplane using the transform',\n      '@param transformed image of the instance hyperplane using the applied transform',\n      '@param transformed mapping of the instance hyperplane by the transform',\n      '@param transformed depiction of the instance hyperplane through the transform'\n    ]\n  },\n  {\n    'tag': '@param transform transform to apply',\n    'alternatives': [\n      '@param transform alteration to utilize',\n      '@param transform modification to execute',\n      '@param transform conversion to perform',\n      '@param transform mapping to apply',\n      '@param transform adjustment to employ'\n    ]\n  },\n  {\n    'tag': '@param map transformed nodes map',\n    'alternatives': [\n      '@param map map of transformed nodes',\n      '@param map mapping of the transformed nodes',\n      '@param map transformed nodes represented in a map',\n      '@param map map containing the transformed nodes',\n      '@param map collection of transformed nodes in a map'\n    ]\n  },\n  {\n    'tag': '@return a new tree',\n    'alternatives': [\n      '@return newly created tree',\n      '@return a freshly generated tree',\n      '@return a newly constructed tree',\n      '@return a newly formed tree',\n      '@return a brand new tree'\n    ]\n  },\n  {\n    'tag': '@param hyperplane underlying hyperplane',\n    'alternatives': [\n      '@param hyperplane original hyperplane',\n      '@param hyperplane base hyperplane',\n      '@param hyperplane fundamental hyperplane',\n      '@param hyperplane primary hyperplane',\n      '@param hyperplane source hyperplane'\n    ]\n  },\n  {\n    'tag': '@param remainingRegion remaining region of the hyperplane',\n    'alternatives': [\n      '@param remainingRegion section left in the hyperplane',\n      '@param remainingRegion part that remains in the hyperplane',\n      '@param remainingRegion segment that is still present in the hyperplane',\n      '@param remainingRegion portion of the hyperplane that is left',\n      '@param remainingRegion area that remains in the hyperplane'\n    ]\n  },\n  {\n    'tag': '@param hyperplane hyperplane to insert, it will be chopped in\\norder to fit in the cell defined by the parent nodes of the\\ninstance',\n    'alternatives': [\n      '@param hyperplane hyperplane to be inserted, but will be cut to fit inside the cell defined by the parent nodes of the instance',\n      '@param hyperplane hyperplane to be added, but will be trimmed to fit within the cell defined by the parent nodes of the instance',\n      '@param hyperplane hyperplane to insert, but will be sliced to fit into the cell defined by the parent nodes of the instance',\n      '@param hyperplane hyperplane to be included, but will be divided to fit into the cell defined by the parent nodes of the instance',\n      '@param hyperplane hyperplane to be placed, but will be divided to accommodate the cell defined by the parent nodes of the instance'\n    ]\n  },\n  {\n    'tag': '@return true if a cut sub-hyperplane has been inserted (i.e. if\\nthe cell now has two leaf child nodes)',\n    'alternatives': [\n      '@return true if a sliced sub-hyperplane has been inserted (i.e. if the cell now contains two leaf child nodes)',\n      '@return true if a chopped sub-hyperplane has been inserted (i.e. if the cell now possesses two leaf child nodes)',\n      '@return true if a split sub-hyperplane has been inserted (i.e. if the cell now holds two leaf child nodes)',\n      '@return true if a divided sub-hyperplane has been inserted (i.e. if the cell now encompasses two leaf child nodes)',\n      '@return true if a trimmed sub-hyperplane has been inserted (i.e. if the cell now features two leaf child nodes)'\n    ]\n  },\n  {\n    'tag': '@return a new tree, copy of the instance',\n    'alternatives': [\n      '@return a duplicate of the instance as a new tree',\n      '@return a newly created tree that is an exact copy of the given instance',\n      '@return a freshly generated copy of the instance as a new tree',\n      '@return a newly constructed tree which is a replica of the provided instance',\n      '@return a brand new tree that is an identical copy of the original instance'\n    ]\n  },\n  {\n    'tag': '@return cut sub-hyperplane, null if this is a leaf tree',\n    'alternatives': [\n      '@return sliced sub-hyperplane, null if this is a leaf tree',\n      '@return chopped sub-hyperplane, null if this is a leaf tree',\n      '@return trimmed sub-hyperplane, null if this is a leaf tree',\n      '@return divided sub-hyperplane, null if this is a leaf tree',\n      '@return sectioned sub-hyperplane, null if this is a leaf tree'\n    ]\n  },\n  {\n    'tag': '@return tree on the plus side of the cut hyperplane, null if this\\nis a leaf tree',\n    'alternatives': [\n      '@return tree on the positive side of the sliced hyperplane, null if this is a leaf tree',\n      '@return tree on the positive side of the chopped hyperplane, null if this is a leaf tree',\n      '@return tree on the positive side of the trimmed hyperplane, null if this is a leaf tree',\n      '@return tree on the positive side of the divided hyperplane, null if this is a leaf tree',\n      '@return tree on the positive side of the sectioned hyperplane, null if this is a leaf tree'\n    ]\n  },\n  {\n    'tag': '@return tree on the minus side of the cut hyperplane, null if this\\nis a leaf tree',\n    'alternatives': [\n      '@return tree on the negative side of the sliced hyperplane, null if this is a leaf tree',\n      '@return tree on the negative side of the chopped hyperplane, null if this is a leaf tree',\n      '@return tree on the negative side of the trimmed hyperplane, null if this is a leaf tree',\n      '@return tree on the negative side of the divided hyperplane, null if this is a leaf tree',\n      '@return tree on the negative side of the sectioned hyperplane, null if this is a leaf tree'\n    ]\n  },\n  {\n    'tag': '@return parent node, null if the node has no parents',\n    'alternatives': [\n      '@return the parent node, null if the node does not have any parents',\n      '@return the node's ancestor if it exists, or null if the node has no parents',\n      '@return the node's predecessor, or null if there are no parents for the node',\n      '@return the parent node, or null if there are no parents for the node',\n      '@return the previous node, or null if the node does not have any parents'\n    ]\n  },\n  {\n    'tag': '@param attribute attribute to associate with the node',\n    'alternatives': [\n      '@param attribute characteristic to link with the node',\n      '@param attribute property to connect with the node',\n      '@param attribute feature to attach to the node',\n      '@param attribute trait to relate to the node',\n      '@param attribute quality to associate with the node'\n    ]\n  },\n  {\n    'tag': '@return attribute associated with the node or null if no\\nattribute has been explicitly set using the {@link #setAttribute\\nsetAttribute} method',\n    'alternatives': [\n      '@return attribute connected to the node, or null if no attribute has been explicitly established using the {@link #setAttribute setAttribute} method',\n      '@return attribute linked with the node, or null if no attribute has been explicitly defined using the {@link #setAttribute setAttribute} method',\n      '@return attribute associated with the node, or null if no attribute has been explicitly designated using the {@link #setAttribute setAttribute} method',\n      '@return attribute related to the node, or null if no attribute has been explicitly specified using the {@link #setAttribute setAttribute} method',\n      '@return attribute assigned to the node, or null if no attribute has been explicitly determined using the {@link #setAttribute setAttribute} method'\n    ]\n  },\n  {\n    'tag': '@param visitor object visiting the tree nodes',\n    'alternatives': [\n      '@param visitor object that goes through the tree nodes',\n      '@param visitor object traversing the tree nodes',\n      '@param visitor object exploring the tree nodes',\n      '@param visitor object that visits the tree nodes',\n      '@param visitor object inspecting the tree nodes'\n    ]\n  },\n  {\n    'tag': '@param sub sub-hyperplane to fit',\n    'alternatives': [\n      '@param sub sub-hyperplane to accommodate',\n      '@param sub sub-hyperplane to match',\n      '@param sub sub-hyperplane to align',\n      '@param sub sub-hyperplane to adjust',\n      '@param sub sub-hyperplane to conform'\n    ]\n  },\n  {\n    'tag': '@return a new sub-hyperplane, guaranteed to have no part outside\\nof the instance cell',\n    'alternatives': [\n      '@return a new sub-hyperplane, ensuring that no part lies outside of the instance cell',\n      '@return a new sub-hyperplane that is always within the instance cell',\n      '@return a new sub-hyperplane that is guaranteed to be completely inside the instance cell',\n      '@return a new sub-hyperplane, with the assurance that it does not extend beyond the instance cell',\n      '@return a new sub-hyperplane that is certain to be entirely contained within the instance cell'\n    ]\n  },\n  {\n    'tag': '@param point point to check',\n    'alternatives': [\n      '@param point point to verify',\n      '@param point point to test',\n      '@param point point to examine',\n      '@param point point to inspect',\n      '@param point point to assess'\n    ]\n  },\n  {\n    'tag': '@return the tree cell to which the point belongs',\n    'alternatives': [\n      '@return the tree cell that the point is part of',\n      '@return the tree cell where the point is situated',\n      '@return the tree cell that contains the point',\n      '@return the tree cell that the point belongs to',\n      '@return the tree cell in which the point is located'\n    ]\n  },\n  {\n    'tag': '@param point point to check',\n    'alternatives': [\n      '@param point point to verify',\n      '@param point point to test',\n      '@param point point to examine',\n      '@param point point to inspect',\n      '@param point point to assess'\n    ]\n  }\n]"