"output = [\n  {\n    'tag': '@param autoCreate If true (and strict checking is false), nodes are\\n           automatically created when referenced when creating a edge,\\n           even if not yet inserted in the graph.',\n    'alternatives': [\n      '@param autoCreate If true (and not strict checking), nodes are\\n           created automatically when referenced during edge creation,\\n           even if not yet inserted in the graph.',\n      '@param autoCreate If true (and strict checking is disabled), nodes are\\n           created automatically when referenced during edge creation,\\n           even if they have not been inserted in the graph yet.',\n      '@param autoCreate If set to true (and strict checking is turned off), nodes are\\n           automatically created when referenced during edge creation,\\n           even if they have not yet been inserted in the graph.',\n      '@param autoCreate When set to true (and strict checking is disabled), nodes are\\n           automatically generated upon being referenced during edge creation,\\n           even if not yet inserted in the graph.',\n      '@param autoCreate If true (and not strict checking), nodes are\\n           automatically created when referenced during edge creation,\\n           even if they are not yet inserted in the graph.'\n    ]\n  },\n  {\n    'tag': '@param on If true the environment is locked.',\n    'alternatives': [\n      '@param on If set to true, the environment will be locked.',\n      '@param on If set to true, the environment gets locked.',\n      '@param on If true, the environment will be in a locked state.',\n      '@param on Specifies whether the environment should be locked (true) or not (false).',\n      '@param on Specifies if the environment should be locked (true) or not (false).'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if source array is null',\n    'alternatives': [\n      '@throws NullPointerException when the source array is null',\n      '@throws NullPointerException if the source array is null',\n      '@throws NullPointerException if the provided source array is null',\n      '@throws NullPointerException in case the source array is null',\n      '@throws NullPointerException if the array passed as source is null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if source array is null',\n    'alternatives': [\n      '@throws NullPointerException when the source array is null',\n      '@throws NullPointerException if the source array is null',\n      '@throws NullPointerException if the provided source array is null',\n      '@throws NullPointerException in case the source array is null',\n      '@throws NullPointerException if the array passed as source is null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if source array is null',\n    'alternatives': [\n      '@throws NullPointerException when the source array is null',\n      '@throws NullPointerException if the source array is null',\n      '@throws NullPointerException if the provided source array is null',\n      '@throws NullPointerException in case the source array is null',\n      '@throws NullPointerException if the array passed as source is null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if source array is null',\n    'alternatives': [\n      '@throws NullPointerException when the source array is null',\n      '@throws NullPointerException if the source array is null',\n      '@throws NullPointerException if the provided source array is null',\n      '@throws NullPointerException in case the source array is null',\n      '@throws NullPointerException if the array passed as source is null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if source array is null',\n    'alternatives': [\n      '@throws NullPointerException when the source array is null',\n      '@throws NullPointerException if the source array is null',\n      '@throws NullPointerException if the provided source array is null',\n      '@throws NullPointerException in case the source array is null',\n      '@throws NullPointerException if the array passed as source is null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if <tt>s</tt> is null',\n    'alternatives': [\n      '@throws NullPointerException if <tt>s</tt> equals null',\n      '@throws NullPointerException if value of <tt>s</tt> is null',\n      '@throws NullPointerException if <tt>s</tt> is null',\n      '@throws NullPointerException in case <tt>s</tt> is null',\n      '@throws NullPointerException if <tt>s</tt> is set to null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if encodedObject is null',\n    'alternatives': [\n      '@throws NullPointerException when the encodedObject is null',\n      '@throws NullPointerException if the encodedObject is null',\n      '@throws NullPointerException if the provided encodedObject is null',\n      '@throws NullPointerException in case the encodedObject is null',\n      '@throws NullPointerException if the object encodedObject is null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if encodedObject is null',\n    'alternatives': [\n      '@throws NullPointerException when the encodedObject is null',\n      '@throws NullPointerException if the encodedObject is null',\n      '@throws NullPointerException if the provided encodedObject is null',\n      '@throws NullPointerException in case the encodedObject is null',\n      '@throws NullPointerException if the object encodedObject is null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if dataToEncode is null',\n    'alternatives': [\n      '@throws NullPointerException when the dataToEncode is null',\n      '@throws NullPointerException if the dataToEncode is null',\n      '@throws NullPointerException if the provided dataToEncode is null',\n      '@throws NullPointerException in case the dataToEncode is null',\n      '@throws NullPointerException if the object dataToEncode is null'\n    ]\n  },\n  {\n    'tag': '@return A value.',\n    'alternatives': [\n      '@return An arbitrary value.',\n      '@return Some value.',\n      '@return The result.',\n      '@return An output.',\n      '@return The returned value.'\n    ]\n  },\n  {\n    'tag': '@param oldValue The old value of the attribute, null if the attribute was\\n           added.',\n    'alternatives': [\n      '@param oldValue The previous value of the attribute, null if the attribute was\\n           added.',\n      '@param oldValue The attribute\\'s previous value, null if the attribute was\\n           added.',\n      '@param oldValue The attribute\\'s value prior to addition, null if the\\n           attribute was added.',\n      '@param oldValue The value of the attribute before it was added, null if the\\n           attribute was added.',\n      '@param oldValue The initial value of the attribute, null if the attribute was\\n           added.'\n    ]\n  },\n  {\n    'tag': '@param newValue The new value of the attribute, null if the attribute is about\\n           to be removed.',\n    'alternatives': [\n      '@param newValue The updated value of the attribute, null if the attribute is about\\n           to be removed.',\n      '@param newValue The attribute\\'s new value, null if the attribute is about\\n           to be removed.',\n      '@param newValue The attribute\\'s value after removal, null if the attribute is\\n           about to be removed.',\n      '@param newValue The value of the attribute after it has been updated, null if the\\n           attribute is about to be removed.',\n      '@param newValue The revised value of the attribute, null if the attribute is about\\n           to be removed.'\n    ]\n  },\n  {\n    'tag': '@return The diagonal.',\n    'alternatives': [\n      '@return The value representing the diagonal.',\n      '@return The diagonal value.',\n      '@return The value of the diagonal.',\n      '@return The diagonal measurement.',\n      '@return The diagonal length.'\n    ]\n  },\n  {\n    'tag': '@return The size.',\n    'alternatives': [\n      '@return The dimension.',\n      '@return The extent.',\n      '@return The scale.',\n      '@return The measurement.',\n      '@return The value indicating the size.'\n    ]\n  },\n  {\n    'tag': '@return The value converted to GU.',\n    'alternatives': [\n      '@return The value transformed into GU.',\n      '@return The value in GU.',\n      '@return The value converted to graph unit(GU).',\n      '@return The value expressed in GU.',\n      '@return The value after conversion to GU.'\n    ]\n  },\n  {\n    'tag': '@param autoCreate If true (and strict checking is false), nodes are\\n           automatically created when referenced when creating a edge,\\n           even if not yet inserted in the graph.',\n    'alternatives': [\n      '@param autoCreate If true (and not strict checking), nodes are\\n           created automatically when referenced during edge creation,\\n           even if not yet inserted in the graph.',\n      '@param autoCreate If true (and strict checking is disabled), nodes are\\n           created automatically when referenced during edge creation,\\n           even if they have not been inserted in the graph yet.',\n      '@param autoCreate If set to true (and strict checking is turned off), nodes are\\n           automatically created when referenced during edge creation,\\n           even if they have not yet been inserted in the graph.',\n      '@param autoCreate When set to true (and strict checking is disabled), nodes are\\n           automatically generated upon being referenced during edge creation,\\n           even if not yet inserted in the graph.',\n      '@param autoCreate If true (and not strict checking), nodes are\\n           automatically created when referenced during edge creation,\\n           even if they are not yet inserted in the graph.'\n    ]\n  },\n  {\n    'tag': '@param autoCreate If true (and strict checking is false), nodes are\\n           automatically created when referenced when creating a edge,\\n           even if not yet inserted in the graph.',\n    'alternatives': [\n      '@param autoCreate If true (and not strict checking), nodes are\\n           created automatically when referenced during edge creation,\\n           even if not yet inserted in the graph.',\n      '@param autoCreate If true (and strict checking is disabled), nodes are\\n           created automatically when referenced during edge creation,\\n           even if they have not been inserted in the graph yet.',\n      '@param autoCreate If set to true (and strict checking is turned off), nodes are\\n           automatically created when referenced during edge creation,\\n           even if they have not yet been inserted in the graph.',\n      '@param autoCreate When set to true (and strict checking is disabled), nodes are\\n           automatically generated upon being referenced during edge creation,\\n           even if not yet inserted in the graph.',\n      '@param autoCreate If true (and not strict checking), nodes are\\n           automatically created when referenced during edge creation,\\n           even if they are not yet inserted in the graph.'\n    ]\n  },\n  {\n    'tag': '@return Always true.',\n    'alternatives': [\n      '@return True in all cases.',\n      '@return Always returns true.',\n      '@return The boolean value true.',\n      '@return The value true.',\n      '@return The constant value true.'\n    ]\n  },\n  {\n    'tag': '@param element The element to test.',\n    'alternatives': [\n      '@param element The tested element.',\n      '@param element The element being tested.',\n      '@param element The element for testing.',\n      '@param element The element that is being tested.',\n      '@param element The element to be tested.'\n    ]\n  },\n  {\n    'tag': '@return True if the element is visible and therefore must be rendered.',\n    'alternatives': [\n      '@return Returns true if the element is visible and needs to be rendered.',\n      '@return Returns true if the element is visible and should be rendered.',\n      '@return Returns true if the element is visible and requires rendering.',\n      '@return Indicates whether the element is visible and needs rendering (true) or not (false).',\n      '@return The value true if the element is visible and needs to be rendered.'\n    ]\n  },\n  {\n    'tag': '@param graph The graph to search for.',\n    'alternatives': [\n      '@param graph The graph being searched.',\n      '@param graph The graph to be searched.',\n      '@param graph The graph that is being searched.',\n      '@param graph The graph for which the search is performed.',\n      '@param graph The graph to search within.'\n    ]\n  },\n  {\n    'tag': '@param x The point abscissa.',\n    'alternatives': [\n      '@param x The abscissa of the point.',\n      '@param x The abscissa value of the point.',\n      '@param x The x-coordinate of the point.',\n      '@param x The abscissa component of the point.',\n      '@param x The horizontal position of the point.'\n    ]\n  }\n]"