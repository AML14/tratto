"[\n  {\n    'tag': '@param sample2 the second array',\n    'alternatives': [\n      '@param sample2 the second array',\n      '@param array2 the second sample',\n      '@param sample2 the second set of data',\n      '@param secondArray the second array',\n      '@param sample2 the second collection'\n    ]\n  },\n  {\n    'tag': '@return mean of paired differences',\n    'alternatives': [\n      '@return mean of differences between pairs',\n      '@return average of differences between corresponding values',\n      '@return average difference between pairs',\n      '@return mean difference between paired elements',\n      '@return average of the differences between paired values'\n    ]\n  },\n  {\n    'tag': '@throws DimensionMismatchException if the arrays do not have the same\\n(positive) length.',\n    'alternatives': [\n      '@throws DimensionMismatchException if the arrays have different\\n(positive) lengths.',\n      '@throws DimensionMismatchException when the arrays have unequal\\n(positive) lengths.',\n      '@throws DimensionMismatchException if the lengths of the arrays are not the same\\nand positive.',\n      '@throws DimensionMismatchException if the lengths of the arrays differ\\nand are positive.',\n      '@throws DimensionMismatchException if the arrays have dissimilar\\n(positive) lengths.'\n    ]\n  },\n  {\n    'tag': '@throws NoDataException if the sample arrays are empty.',\n    'alternatives': [\n      '@throws NoDataException when either of the sample arrays is empty.',\n      '@throws NoDataException if either of the sample arrays has no data.',\n      '@throws NoDataException if there is no data in the sample arrays.',\n      '@throws NoDataException when no data is present in the sample arrays.',\n      '@throws NoDataException if the sample arrays do not contain any data.'\n    ]\n  },\n  {\n    'tag': '@param sample1 the first array',\n    'alternatives': [\n      '@param sample1 the first array',\n      '@param array1 the first sample',\n      '@param sample1 the initial array',\n      '@param firstArray the first array',\n      '@param sample1 the primary collection'\n    ]\n  },\n  {\n    'tag': '@param sample2 the second array',\n    'alternatives': [\n      '@param sample2 the second array',\n      '@param array2 the second sample',\n      '@param sample2 the second set of data',\n      '@param secondArray the second array',\n      '@param sample2 the second collection'\n    ]\n  },\n  {\n    'tag': '@param meanDifference the mean difference between corresponding entries',\n    'alternatives': [\n      '@param meanDifference the average difference between corresponding entries',\n      '@param meanDifference the mean change between corresponding elements',\n      '@param meanDifference the average difference of corresponding values',\n      '@param meanDifference the average variation between corresponding entries',\n      '@param meanDifference the mean difference of corresponding values'\n    ]\n  },\n  {\n    'tag': '@return variance of paired differences',\n    'alternatives': [\n      '@return variance of differences between pairs',\n      '@return variation of differences between corresponding values',\n      '@return variation of difference between pairs',\n      '@return variance of difference between paired elements',\n      '@return variance of the differences between paired values'\n    ]\n  },\n  {\n    'tag': '@throws DimensionMismatchException if the arrays do not have the same\\nlength.',\n    'alternatives': [\n      '@throws DimensionMismatchException if the arrays have different lengths.',\n      '@throws DimensionMismatchException when the arrays have unequal lengths.',\n      '@throws DimensionMismatchException if the lengths of the arrays are not the same.',\n      '@throws DimensionMismatchException if the lengths of the arrays differ.',\n      '@throws DimensionMismatchException if the arrays have dissimilar lengths.'\n    ]\n  },\n  {\n    'tag': '@param sample Sample to normalize.',\n    'alternatives': [\n      '@param sample Sample to standardize.',\n      '@param sample Sample to scale.',\n      '@param sample Input sample for normalization.',\n      '@param sample Data set to normalize.',\n      '@param sample Input data for normalization.'\n    ]\n  },\n  {\n    'tag': '@return normalized (standardized) sample.',\n    'alternatives': [\n      '@return sample after normalization (standardization).',\n      '@return normalized sample data.',\n      '@return sample with standardized values.',\n      '@return standardization result of the sample.',\n      '@return sample data after normalization (standardization).'\n    ]\n  },\n  {\n    'tag': '@param sample input data',\n    'alternatives': [\n      '@param sample input data',\n      '@param data input sample',\n      '@param sample data',\n      '@param inputData input sample set',\n      '@param sample input set'\n    ]\n  },\n  {\n    'tag': '@return array of array of the most frequently occurring element(s) sorted in ascending order.',\n    'alternatives': [\n      '@return nested array containing the most frequently occurring element(s) sorted in ascending order.',\n      '@return array of arrays with the most commonly appearing element(s) sorted in ascending order.',\n      '@return array of element arrays sorted in ascending order by frequency of occurrence.',\n      '@return 2D array of most frequently occurring element(s) sorted in ascending order.',\n      '@return array of array of element(s) with the highest frequency, sorted in ascending order.'\n    ]\n  },\n  {\n    'tag': '@throws MathIllegalArgumentException if the indices are invalid or the array is null',\n    'alternatives': [\n      '@throws MathIllegalArgumentException if the indices are not valid or the array is null',\n      '@throws MathIllegalArgumentException when the indices are invalid or the array is null',\n      '@throws MathIllegalArgumentException if the indices are invalid or if the array is null',\n      '@throws MathIllegalArgumentException if the array is null or the indices are invalid',\n      '@throws MathIllegalArgumentException when the array is null or the indices are invalid'\n    ]\n  },\n  {\n    'tag': '@param sample input data',\n    'alternatives': [\n      '@param sample input data',\n      '@param data input sample',\n      '@param sample data',\n      '@param inputData input sample set',\n      '@param sample input set'\n    ]\n  },\n  {\n    'tag': '@param begin index (0-based) of the first array element to include',\n    'alternatives': [\n      '@param begin index (0-based) of the initial array element to include',\n      '@param begin starting index (0-based) of the elements to include',\n      '@param begin index (0-based) of the first element to include in the array',\n      '@param begin index (0-based) of the initial element to include in the array',\n      '@param begin position (0-based index) of the first element to include in the array'\n    ]\n  },\n  {\n    'tag': '@param length the number of elements to include',\n    'alternatives': [\n      '@param length the number of elements to incorporate',\n      '@param length the count of elements to include',\n      '@param length the number of elements to add',\n      '@param length the quantity of elements to include',\n      '@param length the number of elements to include in the set'\n    ]\n  },\n  {\n    'tag': '@return array of array of the most frequently occurring element(s) sorted in ascending order.',\n    'alternatives': [\n      '@return nested array containing the most frequently occurring element(s) sorted in ascending order.',\n      '@return array of arrays with the most commonly appearing element(s) sorted in ascending order.',\n      '@return array of element arrays sorted in ascending order by frequency of occurrence.',\n      '@return 2D array of most frequently occurring element(s) sorted in ascending order.',\n      '@return array of array of element(s) with the highest frequency, sorted in ascending order.'\n    ]\n  },\n  {\n    'tag': '@throws MathIllegalArgumentException if the indices are invalid or the array is null',\n    'alternatives': [\n      '@throws MathIllegalArgumentException if the indices are not valid or the array is null',\n      '@throws MathIllegalArgumentException when the indices are invalid or the array is null',\n      '@throws MathIllegalArgumentException if the indices are invalid or if the array is null',\n      '@throws MathIllegalArgumentException if the array is null or the indices are invalid',\n      '@throws MathIllegalArgumentException when the array is null or the indices are invalid'\n    ]\n  },\n  {\n    'tag': '@param values input data',\n    'alternatives': [\n      '@param values input data',\n      '@param inputValues input array',\n      '@param values input set',\n      '@param inputData input collection',\n      '@param data input values'\n    ]\n  },\n  {\n    'tag': '@param begin index (0-based) of the first array element to include',\n    'alternatives': [\n      '@param begin index (0-based) of the initial array element to include',\n      '@param begin starting index (0-based) of the elements to include',\n      '@param begin index (0-based) of the first element to include in the array',\n      '@param begin index (0-based) of the initial element to include in the array',\n      '@param begin position (0-based index) of the first element to include in the array'\n    ]\n  },\n  {\n    'tag': '@param length the number of elements to include',\n    'alternatives': [\n      '@param length the number of elements to incorporate',\n      '@param length the count of elements to include',\n      '@param length the number of elements to add',\n      '@param length the quantity of elements to include',\n      '@param length the number of elements to include in the set'\n    ]\n  },\n  {\n    'tag': '@return array of array of the most frequently occurring element(s) sorted in ascending order.',\n    'alternatives': [\n      '@return nested array containing the most frequently occurring element(s) sorted in ascending order.',\n      '@return array of arrays with the most commonly appearing element(s) sorted in ascending order.',\n      '@return array of element arrays sorted in ascending order by frequency of occurrence.',\n      '@return 2D array of most frequently occurring element(s) sorted in ascending order.',\n      '@return array of array of element(s) with the highest frequency, sorted in ascending order.'\n    ]\n  },\n  {\n    'tag': '@param numberOfTrials number of trials',\n    'alternatives': [\n      '@param numberOfTrials number of experiments',\n      '@param numberOfTrials total trials count',\n      '@param numberOfTrials number of attempts',\n      '@param numberOfTrials quantity of trials',\n      '@param numberOfTrials number of test runs'\n    ]\n  },\n  {\n    'tag': '@param numberOfSuccesses number of successes',\n    'alternatives': [\n      '@param numberOfSuccesses total successes count',\n      '@param numberOfSuccesses number of positive outcomes',\n      '@param numberOfSuccesses total positive results',\n      '@param numberOfSuccesses quantity of successful events',\n      '@param numberOfSuccesses number of achieved goals'\n    ]\n  }\n]"