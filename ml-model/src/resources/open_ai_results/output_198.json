"output = [\r\n  {\r\n    'tag': '@throws NullArgumentException if any of the input matrices is {@code null}',\r\n    'alternatives': [\r\n      '@throws NullArgumentException if any of the input matrices is {@code null}.',\r\n      '@throws NullArgumentException in case any of the input matrices is {@code null}.',\r\n      '@throws NullArgumentException if any of the input matrices equals {@code null}.',\r\n      '@throws NullArgumentException if any of the input matrices is null.',\r\n      '@throws NullArgumentException if any of the input matrices is absent.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@throws NoDataException if any row / column dimension of the input matrices is zero',\r\n    'alternatives': [\r\n      '@throws NoDataException if zero is the row / column dimension of any input matrices.',\r\n      '@throws NoDataException in case any row / column dimension of the input matrices is zero.',\r\n      '@throws NoDataException if the input matrices have zero row / column dimension.',\r\n      '@throws NoDataException if any input matrix has zero row / column dimension.',\r\n      '@throws NoDataException if any dimension of the input matrices equals zero.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@throws DimensionMismatchException if any of the input matrices is non-rectangular',\r\n    'alternatives': [\r\n      '@throws DimensionMismatchException if any of the input matrices is not rectangular.',\r\n      '@throws DimensionMismatchException if any of the input matrices is not in a rectangular form.',\r\n      '@throws DimensionMismatchException if any of the input matrices has a non-rectangular shape.',\r\n      '@throws DimensionMismatchException in case any of the input matrices is not rectangular.',\r\n      '@throws DimensionMismatchException if any of the input matrices does not have a rectangular form.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param measMatrix the measurement matrix',\r\n    'alternatives': [\r\n      '@param measMatrix the matrix used for measurements.',\r\n      '@param measMatrix the matrix from which measurements are taken.',\r\n      '@param measMatrix represents the matrix of measurements.',\r\n      '@param measMatrix is the matrix that contains the measurements.',\r\n      '@param measMatrix is the matrix that holds the measurement data.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param measNoise the measurement noise matrix',\r\n    'alternatives': [\r\n      '@param measNoise the matrix representing the noise in the measurements.',\r\n      '@param measNoise the noise matrix of the measurements.',\r\n      '@param measNoise represents the matrix of measurement noise.',\r\n      '@param measNoise is the matrix that contains the noise of the measurements.',\r\n      '@param measNoise is the matrix that holds the measurement noise.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@return a random scalar with null mean and unit standard deviation',\r\n    'alternatives': [\r\n      '@return a random scalar with zero average and a standard deviation of one.',\r\n      '@return a scalar with no mean and a standard deviation of one, selected randomly.',\r\n      '@return a scalar randomly chosen with a mean of zero and a standard deviation of one.',\r\n      '@return a scalar that is randomly selected with an average of zero and a standard deviation of one.',\r\n      '@return a randomly chosen scalar with a mean of zero and a standard deviation of one.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param generator underlying random generator to use',\r\n    'alternatives': [\r\n      '@param generator the underlying random generator to utilize.',\r\n      '@param generator is the base random generator to be used.',\r\n      '@param generator is the random generator that will be used.',\r\n      '@param generator represents the original random generator to be employed.',\r\n      '@param generator indicates the random generator underneath to apply.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param seed the seed value',\r\n    'alternatives': [\r\n      '@param seed the initial value for the seed.',\r\n      '@param seed represents the starting value for the seed.',\r\n      '@param seed is the value that will be used as the seed.',\r\n      '@param seed indicates the value to be used as the seed.',\r\n      '@param seed is the value that initializes the seed.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@return the next pseudorandom, uniformly distributed <code>int</code>\\n value from this random number generator\\'s sequence',\r\n    'alternatives': [\r\n      '@return the next integer value from this random number generator\\'s sequence, uniformly distributed.',\r\n      '@return the next <code>int</code> value in the sequence of this random number generator, distributed uniformly.',\r\n      '@return the next <code>int</code> value from this random number generator\\'s sequence, distributed uniformly.',\r\n      '@return the next <code>int</code> value from the sequence of this random number generator, distributed uniformly.',\r\n      '@return the next integer value, distributed uniformly, from this random number generator\\'s sequence.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@return a pseudorandom, uniformly distributed {@code int}\\nvalue between 0 (inclusive) and n (exclusive).',\r\n    'alternatives': [\r\n      '@return an {@code int} value between 0 (inclusive) and n (exclusive) that is randomly selected and uniformly distributed.',\r\n      '@return a uniformly distributed {@code int} value between 0 (inclusive) and n (exclusive) that is randomly chosen.',\r\n      '@return an {@code int} value between 0 (inclusive) and n (exclusive), randomly selected with a uniform distribution.',\r\n      '@return a {@code int} value between 0 (inclusive) and n (exclusive) that is randomly generated with a uniform distribution.',\r\n      '@return a random {@code int} value between 0 (inclusive) and n (exclusive) that follows a uniform distribution.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@return the next pseudorandom, uniformly distributed <code>long</code>\\nvalue from this random number generator\\'s sequence',\r\n    'alternatives': [\r\n      '@return the next long value in the sequence of this random number generator, distributed uniformly.',\r\n      '@return the next <code>long</code> value from this random number generator\\'s sequence, distributed uniformly.',\r\n      '@return the next <code>long</code> value from the sequence of this random number generator, distributed uniformly.',\r\n      '@return the next long value from this random number generator\\'s sequence, uniformly distributed.',\r\n      '@return the next long value, distributed uniformly, from this random number generator\\'s sequence.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@return the next pseudorandom, uniformly distributed\\n<code>boolean</code> value from this random number generator\\'s\\nsequence',\r\n    'alternatives': [\r\n      '@return the next boolean value, uniformly distributed, from this random number generator\\'s sequence.',\r\n      '@return the next <code>boolean</code> value from this random number generator\\'s sequence, distributed uniformly.',\r\n      '@return the next <code>boolean</code> value in the sequence of this random number generator, distributed uniformly.',\r\n      '@return the next boolean value from this random number generator\\'s sequence, distributed uniformly.',\r\n      '@return the next boolean value from the sequence of this random number generator, distributed uniformly.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@return the next pseudorandom, uniformly distributed <code>float</code>\\nvalue between <code>0.0</code> and <code>1.0</code> from this\\nrandom number generator\\'s sequence',\r\n    'alternatives': [\r\n      '@return the next float value between 0.0 and 1.0, both inclusive, from this random number generator\\'s sequence, distributed uniformly.',\r\n      '@return the next <code>float</code> value from this random number generator\\'s sequence, which is distributed uniformly between 0.0 and 1.0.',\r\n      '@return the next <code>float</code> value between <code>0.0</code> and <code>1.0</code>, inclusive, from this random number generator\\'s sequence, distributed uniformly.',\r\n      '@return the next float value from this random number generator\\'s sequence, distributed uniformly between 0.0 and 1.0, inclusive.',\r\n      '@return the next float value, inclusively distributed between 0.0 and 1.0, from this random number generator\\'s sequence.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@return the next pseudorandom, uniformly distributed\\n <code>double</code> value between <code>0.0</code> and\\n <code>1.0</code> from this random number generator\\'s sequence',\r\n    'alternatives': [\r\n      '@return a randomly chosen <code>double</code> value from this random number generator\\'s sequence that falls between <code>0.0</code> and <code>1.0</code>, both inclusive, with a uniform distribution.',\r\n      '@return the next <code>double</code> value from this random number generator\\'s sequence, which is distributed uniformly between <code>0.0</code> and <code>1.0</code>.',\r\n      '@return the next <code>double</code> value between <code>0.0</code> and <code>1.0</code>, inclusive, from this random number generator\\'s sequence, distributed uniformly.',\r\n      '@return the next double value from this random number generator\\'s sequence, distributed uniformly between 0.0 and 1.0, inclusive.',\r\n      '@return the next double value, distributed uniformly between 0.0 and 1.0, from this random number generator\\'s sequence.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@return the next pseudorandom, Gaussian (\"normally\") distributed\\n<code>double</code> value with mean <code>0.0</code> and\\nstandard deviation <code>1.0</code> from this random number\\n generator\\'s sequence',\r\n    'alternatives': [\r\n      '@return the next <code>double</code> value from this random number generator\\'s sequence, distributed according to a Gaussian (normal) distribution with a mean of <code>0.0</code> and a standard deviation of <code>1.0</code>.',\r\n      '@return the next <code>double</code> value that follows a Gaussian (normally) distributed sequence from this random number generator, with a mean of <code>0.0</code> and a standard deviation of <code>1.0</code>.',\r\n      '@return the next <code>double</code> value that is distributed according to the Gaussian (normal) distribution with mean <code>0.0</code> and standard deviation <code>1.0</code>, from this random number generator\\'s sequence.',\r\n      '@return the next <code>double</code> value from this random number generator\\'s sequence, which is distributed with a Gaussian (normal) distribution having a mean of <code>0.0</code> and a standard deviation of <code>1.0</code>.',\r\n      '@return the next <code>double</code> value from this random number generator\\'s sequence, which is normally distributed with a mean of <code>0.0</code> and a standard deviation of <code>1.0</code>.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param start First index into {@link #mem} array.',\r\n    'alternatives': [\r\n      '@param start Indicates the initial index into the {@link #mem} array.',\r\n      '@param start refers to the initial index in the {@link #mem} array.',\r\n      '@param start is the first index in the {@link #mem} array.',\r\n      '@param start represents the starting position in the {@link #mem} array.',\r\n      '@param start denotes the beginning index in the {@link #mem} array.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param seed Initial seed.',\r\n    'alternatives': [\r\n      '@param seed The initial seed value.',\r\n      '@param seed is the initial value for the seed.',\r\n      '@param seed represents the seed value at the start.',\r\n      '@param seed indicates the seed value to be used initially.',\r\n      '@param seed is the seed value that is specified initially.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param seed Initial seed. If {@code null}, the seed will be related\\nto the current time.',\r\n    'alternatives': [\r\n      '@param seed The initial seed value. If it is set as {@code null}, the seed will depend on the current time.',\r\n      '@param seed is the initial value for the seed. If it equals {@code null}, the seed will be based on the current time.',\r\n      '@param seed represents the starting seed. If it is specified as {@code null}, the seed will be determined by the current time.',\r\n      '@param seed indicates the seed value to be used initially. If {@code null} is supplied, the seed will rely on the current time.',\r\n      '@param seed is the seed value that is specified initially. If it is {@code null}, the seed will be relative to the current time.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@return underlying uncorrelated components generator',\r\n    'alternatives':"