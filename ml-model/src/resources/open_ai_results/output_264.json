"output = [\n  {\n    'tag': '@param loop segments loop to filter (will be modified in-place)',\n    'alternatives': [\n      '@param loop segments loop to sort (will be modified in-place)',\n      '@param loop segments loop to process (will be modified in-place)',\n      '@param loop segments loop to modify (will be modified in-place)',\n      '@param loop segments loop to update (will be modified in-place)',\n      '@param loop segments loop to manipulate (will be modified in-place)'\n    ]\n  },\n  {\n    'tag': '@param tolerance tolerance below which points are considered identical',\n    'alternatives': [\n      '@param tolerance value below which points are considered identical',\n      '@param threshold tolerance below which points are deemed identical',\n      '@param precision tolerance below which points are treated as identical',\n      '@param epsilon tolerance below which points are seen as identical',\n      '@param margin tolerance below which points are regarded as identical'\n    ]\n  },\n  {\n    'tag': '@param tree inside/outside BSP tree representing the region',\n    'alternatives': [\n      '@param tree BSP tree representing the region inside/outside',\n      '@param tree region BSP tree representing the inside/outside',\n      '@param tree BSP tree representing the inside/outside region',\n      '@param tree region inside/outside BSP tree representing the',\n      '@param tree inside/outside representing the region BSP tree'\n    ]\n  },\n  {\n    'tag': '@param boundary collection of boundary elements, as a\\ncollection of {@link SubHyperplane SubHyperplane} objects',\n    'alternatives': [\n      '@param boundary collection of elements forming the boundary, as a\\ncollection of {@link SubHyperplane SubHyperplane} objects',\n      '@param boundary collection of boundary elements, represented by a\\ncollection of {@link SubHyperplane SubHyperplane} objects',\n      '@param boundary collection of elements comprising the boundary, as a\\ncollection of {@link SubHyperplane SubHyperplane} objects',\n      '@param boundary collection of boundary elements, given as a\\ncollection of {@link SubHyperplane SubHyperplane} objects',\n      '@param boundary collection of elements forming the boundary, given as a\\ncollection of {@link SubHyperplane SubHyperplane} objects'\n    ]\n  },\n  {\n    'tag': '@param tolerance tolerance below which points are considered identical',\n    'alternatives': [\n      '@param tolerance value below which points are considered identical',\n      '@param threshold tolerance below which points are deemed identical',\n      '@param precision tolerance below which points are treated as identical',\n      '@param epsilon tolerance below which points are seen as identical',\n      '@param margin tolerance below which points are regarded as identical'\n    ]\n  },\n  {\n    'tag': '@param xMin low bound along the x direction',\n    'alternatives': [\n      '@param xMin minimum limit along the x direction',\n      '@param xMin lower boundary along the x direction',\n      '@param xMin smallest value allowed along the x direction',\n      '@param xMin minimum constraint along the x direction',\n      '@param xMin smallest value permitted along the x direction'\n    ]\n  },\n  {\n    'tag': '@param xMax high bound along the x direction',\n    'alternatives': [\n      '@param xMax maximum limit along the x direction',\n      '@param xMax upper boundary along the x direction',\n      '@param xMax largest value allowed along the x direction',\n      '@param xMax maximum constraint along the x direction',\n      '@param xMax largest value permitted along the x direction'\n    ]\n  },\n  {\n    'tag': '@param yMin low bound along the y direction',\n    'alternatives': [\n      '@param yMin minimum limit along the y direction',\n      '@param yMin lower boundary along the y direction',\n      '@param yMin smallest value allowed along the y direction',\n      '@param yMin minimum constraint along the y direction',\n      '@param yMin smallest value permitted along the y direction'\n    ]\n  },\n  {\n    'tag': '@param yMax high bound along the y direction',\n    'alternatives': [\n      '@param yMax maximum limit along the y direction',\n      '@param yMax upper boundary along the y direction',\n      '@param yMax largest value allowed along the y direction',\n      '@param yMax maximum constraint along the y direction',\n      '@param yMax largest value permitted along the y direction'\n    ]\n  },\n  {\n    'tag': '@param tolerance tolerance below which points are considered identical',\n    'alternatives': [\n      '@param tolerance value below which points are considered identical',\n      '@param threshold tolerance below which points are deemed identical',\n      '@param precision tolerance below which points are treated as identical',\n      '@param epsilon tolerance below which points are seen as identical',\n      '@param margin tolerance below which points are regarded as identical'\n    ]\n  },\n  {\n    'tag': '@param hyperplaneThickness tolerance below which points are considered to\\nbelong to the hyperplane (which is therefore more a slab)',\n    'alternatives': [\n      '@param hyperplaneThickness threshold below which points are considered to\\nbelong to the hyperplane (which is a slab)',\n      '@param hyperplaneThickness precision below which points are considered to\\nbelong to the hyperplane (which is a slab)',\n      '@param hyperplaneThickness tolerance below which points are deemed to\\nbelong to the hyperplane (which is more like a slab)',\n      '@param hyperplaneThickness epsilon below which points are considered to\\nbelong to the hyperplane (which is a slab)',\n      '@param hyperplaneThickness margin below which points are considered to\\nbelong to the hyperplane (which is more like a slab)'\n    ]\n  },\n  {\n    'tag': '@param vertices vertices of the simple loop boundary',\n    'alternatives': [\n      '@param vertices corner points of the simple loop boundary',\n      '@param vertices vertex points of the simple loop boundary',\n      '@param vertices points defining the simple loop boundary',\n      '@param vertices points that form the simple loop boundary',\n      '@param vertices points representing the simple loop boundary'\n    ]\n  },\n  {\n    'tag': '@param tree inside/outside BSP tree representing the region',\n    'alternatives': [\n      '@param tree BSP tree representing the region inside/outside',\n      '@param tree region BSP tree representing the inside/outside',\n      '@param tree BSP tree representing the inside/outside region',\n      '@param tree region inside/outside BSP tree representing the',\n      '@param tree inside/outside representing the region BSP tree'\n    ]\n  },\n  {\n    'tag': '@param boundary collection of boundary elements, as a\\ncollection of {@link SubHyperplane SubHyperplane} objects',\n    'alternatives': [\n      '@param boundary collection of elements forming the boundary, as a\\ncollection of {@link SubHyperplane SubHyperplane} objects',\n      '@param boundary collection of boundary elements, represented by a\\ncollection of {@link SubHyperplane SubHyperplane} objects',\n      '@param boundary collection of elements comprising the boundary, as a\\ncollection of {@link SubHyperplane SubHyperplane} objects',\n      '@param boundary collection of boundary elements, given as a\\ncollection of {@link SubHyperplane SubHyperplane} objects',\n      '@param boundary collection of elements forming the boundary, given as a\\ncollection of {@link SubHyperplane SubHyperplane} objects'\n    ]\n  },\n  {\n    'tag': '@param xMin low bound along the x direction',\n    'alternatives': [\n      '@param xMin minimum limit along the x direction',\n      '@param xMin lower boundary along the x direction',\n      '@param xMin smallest value allowed along the x direction',\n      '@param xMin minimum constraint along the x direction',\n      '@param xMin smallest value permitted along the x direction'\n    ]\n  },\n  {\n    'tag': '@param xMax high bound along the x direction',\n    'alternatives': [\n      '@param xMax maximum limit along the x direction',\n      '@param xMax upper boundary along the x direction',\n      '@param xMax largest value allowed along the x direction',\n      '@param xMax maximum constraint along the x direction',\n      '@param xMax largest value permitted along the x direction'\n    ]\n  },\n  {\n    'tag': '@param yMin low bound along the y direction',\n    'alternatives': [\n      '@param yMin minimum limit along the y direction',\n      '@param yMin lower boundary along the y direction',\n      '@param yMin smallest value allowed along the y direction',\n      '@param yMin minimum constraint along the y direction',\n      '@param yMin smallest value permitted along the y direction'\n    ]\n  },\n  {\n    'tag': '@param yMax high bound along the y direction',\n    'alternatives': [\n      '@param yMax maximum limit along the y direction',\n      '@param yMax upper boundary along the y direction',\n      '@param yMax largest value allowed along the y direction',\n      '@param yMax maximum constraint along the y direction',\n      '@param yMax largest value permitted along the y direction'\n    ]\n  },\n  {\n    'tag': '@return list of segments endpoints',\n    'alternatives': [\n      '@return array of endpoints of the segments',\n      '@return list of endpoints of the line segments',\n      '@return array containing endpoints of the segments',\n      '@return list of endpoints for each segment',\n      '@return array of endpoints for the line segments'\n    ]\n  },\n  {\n    'tag': '@param subLine other sub-line which may intersect instance',\n    'alternatives': [\n      '@param subLine another sub-line which may intersect instance',\n      '@param subLine additional sub-line which may intersect instance',\n      '@param subLine second sub-line that may intersect instance',\n      '@param subLine different sub-line that may intersect instance',\n      '@param subLine alternative sub-line which may intersect instance'\n    ]\n  },\n  {\n    'tag': '@param includeEndPoints if true, endpoints are considered to belong to\\ninstance (i.e. they are closed sets) and may be returned, otherwise endpoints\\nare considered to not belong to instance (i.e. they are open sets) and intersection\\noccurring on endpoints lead to null being returned',\n    'alternatives': [\n      '@param includeEndPoints if true, endpoints are treated as part of\\ninstance (i.e. they are closed sets) and may be returned, otherwise endpoints\\nare considered to not belong to instance (i.e. they are open sets) and intersection\\noccurring on endpoints lead to null being returned',\n      '@param includeEndPoints if true, endpoints are considered to be part of\\ninstance (i.e. they are closed sets) and may be returned, otherwise endpoints\\nare regarded as not belonging to instance (i.e. they are open sets) and intersection\\noccurring on endpoints lead to null being returned',\n      '@param includeEndPoints if true, endpoints are seen as part of\\ninstance (i.e. they are closed sets) and may be returned, otherwise endpoints\\nare perceived as not belonging to instance (i.e. they are open sets) and intersection\\noccurring on endpoints lead to null being returned',\n      '@param includeEndPoints if true, endpoints are considered as part of\\ninstance (i.e. they are closed sets) and may be returned, otherwise endpoints\\nare viewed as not belonging to instance (i.e. they are open sets) and intersection\\noccurring on endpoints lead to null being returned',\n      '@param includeEndPoints if true, endpoints are regarded as part of\\ninstance (i.e. they are closed sets) and may be returned, otherwise endpoints\\nare considered not to belong to instance (i.e. they are open sets) and intersection\\noccurring on endpoints lead to null being returned'\n    ]\n  },\n  {\n    'tag': \"@return the intersection point if there is one, null if the sub-lines don't intersect\",\n    'alternatives': [\n      \"@return the point of intersection if one exists, null if the sub-lines don't intersect\",\n      \"@return the intersecting point if there is one, null if the sub-lines don't intersect\",\n      \"@return the point where the lines intersect, null if the sub-lines don't intersect\",\n      \"@return the intersection point if there is any, null if the sub-lines don't intersect\",\n      \"@return the point of intersection if there is a match, null if the sub-lines don't intersect\"\n    ]\n  },\n  {\n    'tag': '@param start start point',\n    'alternatives': [\n      '@param start beginning point',\n      '@param start initial point',\n      '@param start commencing point',\n      '@param start origin point',\n      '@param start starting location'\n    ]\n  },\n  {\n    'tag': '@param end end point',\n    'alternatives': [\n      '@param end terminal point',\n      '@param end final point',\n      '@param end concluding point',\n      '@param end destination point',\n      '@param end ending location'\n    ]\n  }\n]"