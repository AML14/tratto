"output = [\n  {\n    'tag': '@param separatorMatcher a {@link CharMatcher} that determines whether a\\n    character is a separator',\n    'alternatives': [\n      '@param separatorMatcher a {@link CharMatcher} that checks if a character is a separator',\n      '@param separatorMatcher a {@link CharMatcher} to determine if a character is a separator',\n      '@param separatorMatcher a {@link CharMatcher} used to determine if a character is a separator',\n      '@param separatorMatcher a {@link CharMatcher} that identifies if a character is a separator',\n      '@param separatorMatcher a {@link CharMatcher} for determining whether a character is a separator'\n    ]\n  },\n  {\n    'tag': '@return a splitter, with default settings, that uses this matcher',\n    'alternatives': [\n      '@return a splitter that utilizes this matcher and has default settings',\n      '@return a splitter that employs this matcher and has default configurations',\n      '@return a splitter that utilizes this matcher with default settings',\n      '@return a splitter that uses this matcher with the default settings',\n      '@return a splitter that makes use of this matcher and has the default settings'\n    ]\n  },\n  {\n    'tag': '@param separator the literal, nonempty string to recognize as a separator',\n    'alternatives': [\n      '@param separator the nonempty string literal identified as a separator',\n      '@param separator the nonempty string recognized as a separator',\n      '@param separator the nonempty string that is considered a separator',\n      '@param separator the string literal, which cannot be empty, recognized as a separator',\n      '@param separator the nonempty string that is acknowledged as a separator'\n    ]\n  },\n  {\n    'tag': '@return a splitter, with default settings, that recognizes that separator',\n    'alternatives': [\n      '@return a splitter that identifies that separator and has default settings',\n      '@return a splitter that recognizes that separator and has default configurations',\n      '@return a splitter that acknowledges that separator with default settings',\n      '@return a splitter that detects that separator with the default settings',\n      '@return a splitter that identifies the specified separator with the default settings'\n    ]\n  },\n  {\n    'tag': '@param separatorPattern the pattern that determines whether a subsequence\\n    is a separator. This pattern may not match the empty string.',\n    'alternatives': [\n      '@param separatorPattern the pattern used to determine if a subsequence is a separator. This pattern should not match the empty string.',\n      '@param separatorPattern the pattern that decides whether a subsequence is a separator. This pattern must not match the empty string.',\n      '@param separatorPattern the pattern that defines whether a subsequence is a separator. This pattern should not match the empty string.',\n      '@param separatorPattern the pattern that ascertains if a subsequence is a separator. This pattern may not match the empty string.',\n      '@param separatorPattern the pattern that establishes whether a subsequence is a separator. This pattern must not match the empty string.'\n    ]\n  },\n  {\n    'tag': '@return a splitter, with default settings, that uses this pattern',\n    'alternatives': [\n      '@return a splitter that utilizes this pattern and has default settings',\n      '@return a splitter that employs this pattern and has default configurations',\n      '@return a splitter that uses this pattern with default settings',\n      '@return a splitter that makes use of this pattern with the default settings',\n      '@return a splitter that harnesses this pattern and has the default settings'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if {@code separatorPattern} matches the\\n    empty string',\n    'alternatives': [\n      '@throws IllegalArgumentException when the {@code separatorPattern} matches the empty string',\n      '@throws IllegalArgumentException if the {@code separatorPattern} is an empty string',\n      '@throws IllegalArgumentException if the {@code separatorPattern} matches the empty string',\n      '@throws IllegalArgumentException if the {@code separatorPattern} is an empty sequence',\n      '@throws IllegalArgumentException when the {@code separatorPattern} is an empty string'\n    ]\n  },\n  {\n    'tag': '@param separatorPattern the pattern that determines whether a subsequence\\n    is a separator. This pattern may not match the empty string.',\n    'alternatives': [\n      '@param separatorPattern the pattern used to determine if a subsequence is a separator. This pattern should not match the empty string.',\n      '@param separatorPattern the pattern that decides whether a subsequence is a separator. This pattern must not match the empty string.',\n      '@param separatorPattern the pattern that defines whether a subsequence is a separator. This pattern should not match the empty string.',\n      '@param separatorPattern the pattern that ascertains if a subsequence is a separator. This pattern may not match the empty string.',\n      '@param separatorPattern the pattern that establishes whether a subsequence is a separator. This pattern must not match the empty string.'\n    ]\n  },\n  {\n    'tag': '@return a splitter, with default settings, that uses this pattern',\n    'alternatives': [\n      '@return a splitter that utilizes this pattern and has default settings',\n      '@return a splitter that employs this pattern and has default configurations',\n      '@return a splitter that uses this pattern with default settings',\n      '@return a splitter that makes use of this pattern with the default settings',\n      '@return a splitter that harnesses this pattern and has the default settings'\n    ]\n  },\n  {\n    'tag': '@throws java.util.regex.PatternSyntaxException if {@code separatorPattern}\\n    is a malformed expression',\n    'alternatives': [\n      '@throws java.util.regex.PatternSyntaxException when {@code separatorPattern} is an invalid expression',\n      '@throws java.util.regex.PatternSyntaxException if {@code separatorPattern} is an incorrectly formed expression',\n      '@throws java.util.regex.PatternSyntaxException when {@code separatorPattern} is a malformed expression',\n      '@throws java.util.regex.PatternSyntaxException if {@code separatorPattern} is a badly formed expression',\n      '@throws java.util.regex.PatternSyntaxException when {@code separatorPattern} is an invalid pattern'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if {@code separatorPattern} matches the\\n    empty string',\n    'alternatives': [\n      '@throws IllegalArgumentException when the {@code separatorPattern} matches the empty string',\n      '@throws IllegalArgumentException if the {@code separatorPattern} is an empty string',\n      '@throws IllegalArgumentException if the {@code separatorPattern} matches the empty string',\n      '@throws IllegalArgumentException if the {@code separatorPattern} is an empty sequence',\n      '@throws IllegalArgumentException when the {@code separatorPattern} is an empty string'\n    ]\n  },\n  {\n    'tag': '@param length the desired length of pieces after splitting, a positive\\n    integer',\n    'alternatives': [\n      '@param length the positive integer that represents the desired length of pieces after splitting',\n      '@param length a positive integer indicating the desired length of pieces after splitting',\n      '@param length a positive integer representing the desired length of pieces after splitting',\n      '@param length the length after splitting that is desired, which must be a positive integer',\n      '@param length a positive integer that defines the desired length of pieces after splitting'\n    ]\n  },\n  {\n    'tag': '@return a splitter, with default settings, that can split into fixed sized\\n    pieces',\n    'alternatives': [\n      '@return a splitter that can divide into fixed-sized pieces and has default settings',\n      '@return a splitter that can split into fixed-sized pieces with default configurations',\n      '@return a splitter that can separate into fixed sized pieces using default settings',\n      '@return a splitter that has the ability to split into fixed-sized pieces and has the default settings',\n      '@return a splitter that supports splitting into fixed-sized pieces with the default settings'\n    ]\n  },\n  {\n    'tag': '@return a splitter with the desired configuration',\n    'alternatives': [\n      '@return a splitter that has the requested configuration',\n      '@return a splitter with the specified configuration',\n      '@return a splitter with the desired settings',\n      '@return a splitter with the requested setup',\n      '@return a splitter that is configured accordingly'\n    ]\n  },\n  {\n    'tag': '@param limit the maximum number of items returned',\n    'alternatives': [\n      '@param limit the highest number of items to be returned',\n      '@param limit the maximum number of items that can be returned',\n      '@param limit the upper limit for the number of items returned',\n      '@param limit the maximum number of items that will be returned',\n      '@param limit the largest allowed number of items to be returned'\n    ]\n  },\n  {\n    'tag': '@return a splitter with the desired configuration',\n    'alternatives': [\n      '@return a splitter that has the requested configuration',\n      '@return a splitter with the specified configuration',\n      '@return a splitter with the desired settings',\n      '@return a splitter with the requested setup',\n      '@return a splitter that is configured accordingly'\n    ]\n  },\n  {\n    'tag': '@return a splitter with the desired configuration',\n    'alternatives': [\n      '@return a splitter that has the requested configuration',\n      '@return a splitter with the specified configuration',\n      '@return a splitter with the desired settings',\n      '@return a splitter with the requested setup',\n      '@return a splitter that is configured accordingly'\n    ]\n  },\n  {\n    'tag': '@param sequence the sequence of characters to split',\n    'alternatives': [\n      '@param sequence the character sequence to be divided',\n      '@param sequence the character sequence for splitting',\n      '@param sequence the character sequence that will be split',\n      '@param sequence the sequence of characters to be separated',\n      '@param sequence the character sequence to undergo splitting'\n    ]\n  },\n  {\n    'tag': '@return an iteration over the segments split from the parameter.',\n    'alternatives': [\n      '@return an iteration over the segments divided from the parameter.',\n      '@return an iteration that traverses the segments split from the parameter.',\n      '@return an iteration that loops through the segments separated from the parameter.',\n      '@return an iteration over the segments extracted from the parameter.',\n      '@return an iteration that iterates over the segments split from the parameter.'\n    ]\n  },\n  {\n    'tag': '@param sequence the sequence of characters to split',\n    'alternatives': [\n      '@param sequence the character sequence to be divided',\n      '@param sequence the character sequence for splitting',\n      '@param sequence the character sequence that will be split',\n      '@param sequence the sequence of characters to be separated',\n      '@param sequence the character sequence to undergo splitting'\n    ]\n  },\n  {\n    'tag': '@return an immutable list of the segments split from the parameter',\n    'alternatives': [\n      '@return an unmodifiable list of the segments divided from the parameter',\n      '@return an immutable list containing the segments obtained from the parameter',\n      '@return an immutable list that holds the segments split from the parameter',\n      '@return a list of segments that is unchangeable, derived from the parameter',\n      '@return a list of segments that cannot be modified, separated from the parameter'\n    ]\n  },\n  {\n    'tag': '@param sequence the character sequence to examine, possibly empty',\n    'alternatives': [\n      '@param sequence the possibly empty character sequence to analyze',\n      '@param sequence the character sequence (which may be empty) to inspect',\n      '@param sequence the character sequence to investigate, which may be empty',\n      '@param sequence the character sequence that needs to be examined, possibly empty',\n      '@param sequence the character sequence that may or may not be empty, to be examined'\n    ]\n  },\n  {\n    'tag': '@return {@code true} if this matcher matches at least one character in the sequence',\n    'alternatives': [\n      '@return {@code true} if this matcher detects at least one character in the sequence',\n      '@return {@code true} if this matcher identifies at least one character in the sequence',\n      '@return {@code true} if this matcher finds at least one character in the sequence',\n      '@return {@code true} if this matcher recognizes at least one character in the sequence'\n    ]\n  },\n  {\n    'tag': '@param sequence the character sequence to examine, possibly empty',\n    'alternatives': [\n      '@param sequence the possibly empty character sequence to analyze',\n      '@param sequence the character sequence (which may be empty) to inspect',\n      '@param sequence the character sequence to investigate, which may be empty',\n      '@param sequence the character sequence that needs to be examined, possibly empty',\n      '@param sequence the character sequence that may or may not be empty, to be examined'\n    ]\n  },\n  {\n    'tag': '@return {@code true} if this matcher matches every character in the sequence, including when\\n        the sequence is empty',\n    'alternatives': [\n      '@return {@code true} if this matcher matches all characters in the sequence, even when the sequence is empty',\n      '@return {@code true} if this matcher matches each character in the sequence, including when the sequence is empty',\n      '@return {@code true} if this matcher matches every single character in the sequence, even when the sequence is empty',\n      '@return {@code true} if this matcher matches all the characters in the sequence, even when the sequence is empty',\n      '@return {@code true} if this matcher matches every character in the sequence, even if the sequence is empty'\n    ]\n  }\n]"