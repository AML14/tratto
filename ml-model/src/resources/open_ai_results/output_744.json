"output = [{'tag': '@throws SecurityException If a security manager exists and its\\n SecurityManager.checkWrite(java.lang.String) method does not allow a\\n file to be created',\n  'alternatives': ['@throws SecurityException If a security manager is present and its\\n SecurityManager.checkWrite(java.lang.String) method disallows the\\n creation of a file',\n   '@throws SecurityException If a security manager exists and its\\n SecurityManager.checkWrite(java.lang.String) method prohibits\\n file creation',\n   '@throws SecurityException If a security manager is present and its\\n SecurityManager.checkWrite(java.lang.String) method does not permit\\n the creation of a file',\n   '@throws SecurityException If there is a security manager and its\\n SecurityManager.checkWrite(java.lang.String) method does not allow the creation of a\\n file',\n   '@throws SecurityException If there exists a security manager and its\\n SecurityManager.checkWrite(java.lang.String) method does not authorize\\n creating a file']},\n {'tag': '@param dirName the directory to delete',\n  'alternatives': ['@param dirName the directory to remove',\n   '@param dirName the directory to eliminate',\n   '@param dirName the directory to erase',\n   '@param dirName the directory to erase',\n   '@param dirName the directory to remove']},\n {'tag': '@return true if and only if the file or directory is successfully deleted; false otherwise',\n  'alternatives': ['@return true only if the file or directory is successfully removed; otherwise, return false',\n   '@return true if the file or directory is deleted successfully; otherwise, return false',\n   '@return true if the file or directory is deleted without any errors; otherwise, return false',\n   '@return true if the deletion of the file or directory was successful; otherwise, return false',\n   '@return true if the file or directory is successfully removed; otherwise, return false']},\n {'tag': '@param dir the directory to delete',\n  'alternatives': ['@param dir the directory to remove',\n   '@param dir the directory to eliminate',\n   '@param dir the directory to erase',\n   '@param dir the directory to erase',\n   '@param dir the directory to remove']},\n {'tag': '@return true if and only if the file or directory is successfully deleted; false otherwise',\n  'alternatives': ['@return true only if the file or directory is successfully removed; otherwise, return false',\n   '@return true if the file or directory is deleted successfully; otherwise, return false',\n   '@return true if the file or directory is deleted without any errors; otherwise, return false',\n   '@return true if the deletion of the file or directory was successful; otherwise, return false',\n   '@return true if the file or directory is successfully removed; otherwise, return false']},\n {'tag': '@param name file whose name to expand',\n  'alternatives': ['@param name file to expand its name',\n   '@param name file name to be expanded',\n   '@param name file to have its name expanded',\n   '@param name file to expand its name',\n   '@param name file whose name should be expanded']},\n {'tag': '@return file with expanded file',\n  'alternatives': ['@return file having its file expanded',\n   '@return file with expanded file',\n   '@return file after expanding the file',\n   '@return file with an expanded file',\n   '@return file that is expanded']},\n {'tag': '@param name filename to expand',\n  'alternatives': ['@param name name of the file to expand',\n   '@param name file name to be expanded',\n   '@param name name of the file to be expanded',\n   '@param name file name to be expanded',\n   '@param name file name that should be expanded']},\n {'tag': '@return expanded filename',\n  'alternatives': ['@return filename after expanding',\n   '@return expanded filename',\n   '@return filename that is expanded',\n   '@return filename after expansion',\n   '@return expanded filename']},\n {'tag': '@param name file to quote',\n  'alternatives': ['@param name file to be quoted',\n   '@param name file to be marked with quotation',\n   '@param name file to put quotation marks around',\n   '@param name file to quote',\n   '@param name file to be enclosed in quotation marks']},\n {'tag': '@return a string version of the name that can be used in Java source',\n  'alternatives': ['@return a string representation of the name that can be used in Java code',\n   '@return a string format of the name that is suitable for Java source',\n   '@return a string representation of the name which can be utilized in Java source code',\n   '@return a string form of the name that can be employed in Java source',\n   '@return a string representation of the name that is valid in Java source code']},\n {'tag': '@param o the object to write',\n  'alternatives': ['@param o the object to be written',\n   '@param o the object that needs to be written',\n   '@param o object to be written',\n   '@param o the object to write',\n   '@param o the object that should be written']},\n {'tag': '@param file the file to which to write the object',\n  'alternatives': ['@param file the file to write the object to',\n   '@param file the file to which the object should be written',\n   '@param file the file where the object should be written',\n   '@param file the file to which the object will be written',\n   '@param file the file to write the object to']},\n {'tag': '@throws IOException if there is trouble writing the file',\n  'alternatives': ['@throws IOException if an error occurs during file writing',\n   '@throws IOException if there are any issues with writing the file',\n   '@throws IOException if there are any problems while writing the file',\n   '@throws IOException if there is any trouble writing the file',\n   '@throws IOException if any error occurs while writing the file']},\n {'tag': '@param file the file from which to read',\n  'alternatives': ['@param file the file to read from',\n   '@param file the file from which data should be read',\n   '@param file the file to read data from',\n   '@param file the file from where data is read',\n   '@param file the file to read from']},\n {'tag': '@param <K> the key type',\n  'alternatives': ['@param <K> type of the key',\n   '@param <K> type of the identifier',\n   '@param <K> type of the key',\n   '@param <K> the type of the key',\n   '@param <K> the type of the identifier']},\n {'tag': '@param <V> the value type',\n  'alternatives': ['@param <V> type of the value',\n   '@param <V> type of the data',\n   '@param <V> type of the value',\n   '@param <V> the type of the value',\n   '@param <V> the type of the data']},\n {'tag': '@return a new multi key map',\n  'alternatives': ['@return a new map with multiple keys',\n   '@return a new map supporting multiple keys',\n   '@return a new map that can handle multiple keys',\n   '@return a new map with support for multiple keys',\n   '@return a new map allowing multiple keys']},\n {'tag': '@param key1 the first key',\n  'alternatives': ['@param key1 the initial key',\n   '@param key1 the first identifier',\n   '@param key1 the primary key',\n   '@param key1 the first key',\n   '@param key1 the key to start']},\n {'tag': '@param key2 the second key',\n  'alternatives': ['@param key2 the next key',\n   '@param key2 the second identifier',\n   '@param key2 the secondary key',\n   '@param key2 the second key',\n   '@param key2 the key to continue']},\n {'tag': '@return the mapped value, null if no match',\n  'alternatives': ['@return the corresponding value, null if no match',\n   '@return the value associated with the key, null if no match',\n   '@return the value that is mapped, null if there is no match',\n   '@return the value stored for the key, null if no match',\n   '@return the value mapped to the key, null if no match']},\n {'tag': '@param key1 the first key',\n  'alternatives': ['@param key1 the initial key',\n   '@param key1 the first identifier',\n   '@param key1 the primary key',\n   '@param key1 the first key',\n   '@param key1 the key to start']},\n {'tag': '@param key2 the second key',\n  'alternatives': ['@param key2 the next key',\n   '@param key2 the second identifier',\n   '@param key2 the secondary key',\n   '@param key2 the second key',\n   '@param key2 the key to continue']},\n {'tag': '@return true if the map contains the key',\n  'alternatives': ['@return true if the key is present in the map',\n   '@return true if the map includes the key',\n   '@return true if the key exists in the map',\n   '@return true if the map contains the specified key',\n   '@return true if the key is found in the map']},\n {'tag': '@param key1 the first key',\n  'alternatives': ['@param key1 the initial key',\n   '@param key1 the first identifier',\n   '@param key1 the primary key',\n   '@param key1 the first key',\n   '@param key1 the key to start']}]"