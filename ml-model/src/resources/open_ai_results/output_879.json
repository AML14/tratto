"output=[\n  {\n    'tag': '@param bag the bag whose unmodifiable view is to be returned, must not be null',\n    'alternatives': [\n      '@param bag the bag for which an unmodifiable view is returned, must not be null',\n      '@param bag the bag that requires an unmodifiable view, must not be null',\n      '@param bag the bag from which an unmodifiable view is obtained, must not be null',\n      '@param bag the bag that needs an unmodifiable view, must not be null',\n      '@param bag the bag that should have an unmodifiable view, must not be null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if the SortedBag or Predicate is null',\n    'alternatives': [\n      '@throws NullPointerException if the SortedBag or Predicate parameter is null',\n      '@throws NullPointerException if either the SortedBag or Predicate is null',\n      '@throws NullPointerException if either the SortedBag or Predicate reference is null',\n      '@throws NullPointerException when the SortedBag or Predicate is null',\n      '@throws NullPointerException if the SortedBag or Predicate object is null'\n    ]\n  },\n  {\n    'tag': '@param bag the sorted bag to predicate, must not be null',\n    'alternatives': [\n      '@param bag the bag to check with a predicate, must not be null',\n      '@param bag the sorted bag to test with a predicate, must not be null',\n      '@param bag the sorted bag to be evaluated with a predicate, must not be null',\n      '@param bag the sorted bag to subject to a predicate, must not be null',\n      '@param bag the sorted bag on which to apply a predicate, must not be null'\n    ]\n  },\n  {\n    'tag': '@param predicate the predicate for the bag, must not be null',\n    'alternatives': [\n      '@param predicate the condition for the bag, must not be null',\n      '@param predicate the filtering criterion for the bag, must not be null',\n      '@param predicate the rule to determine the bag, must not be null',\n      '@param predicate the specification for the bag, must not be null',\n      '@param predicate the qualifier for the bag, must not be null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if the Bag or Transformer is null',\n    'alternatives': [\n      '@throws NullPointerException if the Bag or Transformer parameter is null',\n      '@throws NullPointerException if either the Bag or Transformer is null',\n      '@throws NullPointerException if either the Bag or Transformer reference is null',\n      '@throws NullPointerException when the Bag or Transformer is null',\n      '@throws NullPointerException if the Bag or Transformer object is null'\n    ]\n  },\n  {\n    'tag': '@param bag the bag to predicate, must not be null',\n    'alternatives': [\n      '@param bag the bag to check with a predicate, must not be null',\n      '@param bag the bag to evaluate with a predicate, must not be null',\n      '@param bag the bag to be subjected to a predicate, must not be null',\n      '@param bag the bag on which to apply a predicate, must not be null',\n      '@param bag the bag to test using a predicate, must not be null'\n    ]\n  },\n  {\n    'tag': '@param transformer the transformer for the bag, must not be null',\n    'alternatives': [\n      '@param transformer the converter for the bag, must not be null',\n      '@param transformer the mapping function for the bag, must not be null',\n      '@param transformer the function to transform the bag, must not be null',\n      '@param transformer the modifier for the bag, must not be null',\n      '@param transformer the tool to change the bag, must not be null'\n    ]\n  },\n  {\n    'tag': '@return an empty Bag',\n    'alternatives': [\n      '@return a Bag that is empty',\n      '@return a Bag with no elements',\n      '@return a Bag containing zero elements',\n      '@return an empty collection',\n      '@return a Bag that has no items'\n    ]\n  },\n  {\n    'tag': '@return an empty sorted Bag',\n    'alternatives': [\n      '@return a sorted Bag that is empty',\n      '@return a sorted Bag with no elements',\n      '@return a sorted Bag containing zero elements',\n      '@return an empty sorted collection',\n      '@return a sorted Bag that has no items'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if map is null',\n    'alternatives': [\n      '@throws NullPointerException if the map is null',\n      '@throws NullPointerException when the map parameter is null',\n      '@throws NullPointerException if the reference to the map is null',\n      '@throws NullPointerException if the map object is null',\n      '@throws NullPointerException if the map parameter has a null value'\n    ]\n  },\n  {\n    'tag': '@param map the map to decorate, must not be null',\n    'alternatives': [\n      '@param map the map to wrap, must not be null',\n      '@param map the map to make it decorated, must not be null',\n      '@param map the map on which to apply decoration, must not be null',\n      '@param map the map to add decoration, must not be null',\n      '@param map the map to modify with decoration, must not be null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if map is null',\n    'alternatives': [\n      '@throws NullPointerException if the map is null',\n      '@throws NullPointerException when the map parameter is null',\n      '@throws NullPointerException if the reference to the map is null',\n      '@throws NullPointerException if the map object is null',\n      '@throws NullPointerException if the map parameter has a null value'\n    ]\n  },\n  {\n    'tag': '@param map the map to decorate, must not be null',\n    'alternatives': [\n      '@param map the map to wrap, must not be null',\n      '@param map the map to make it decorated, must not be null',\n      '@param map the map on which to apply decoration, must not be null',\n      '@param map the map to add decoration, must not be null',\n      '@param map the map to modify with decoration, must not be null'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if the initial capacity is negative',\n    'alternatives': [\n      '@throws IllegalArgumentException if the negative initial capacity is provided',\n      '@throws IllegalArgumentException if a negative initial capacity is given',\n      '@throws IllegalArgumentException if the initial capacity is less than zero',\n      '@throws IllegalArgumentException if the provided initial capacity is negative',\n      '@throws IllegalArgumentException if the initial capacity has a negative value'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if the initial capacity is negative',\n    'alternatives': [\n      '@throws IllegalArgumentException if the negative initial capacity is provided',\n      '@throws IllegalArgumentException if a negative initial capacity is given',\n      '@throws IllegalArgumentException if the initial capacity is less than zero',\n      '@throws IllegalArgumentException if the provided initial capacity is negative',\n      '@throws IllegalArgumentException if the initial capacity has a negative value'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if the load factor is less than zero',\n    'alternatives': [\n      '@throws IllegalArgumentException if the negative load factor is provided',\n      '@throws IllegalArgumentException if a negative load factor is given',\n      '@throws IllegalArgumentException if the load factor is negative',\n      '@throws IllegalArgumentException if the provided load factor is less than zero',\n      '@throws IllegalArgumentException if the load factor has a negative value'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if the map is null',\n    'alternatives': [\n      '@throws NullPointerException if the map parameter is null',\n      '@throws NullPointerException if the reference to the map is null',\n      '@throws NullPointerException if the map object is null',\n      '@throws NullPointerException if the map parameter has a null value',\n      '@throws NullPointerException when the map is null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if methodName is null',\n    'alternatives': [\n      '@throws NullPointerException if the methodName is null',\n      '@throws NullPointerException when the methodName parameter is null',\n      '@throws NullPointerException if the reference to the methodName is null',\n      '@throws NullPointerException if the methodName object is null',\n      '@throws NullPointerException if the methodName parameter has a null value'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if methodName is null',\n    'alternatives': [\n      '@throws NullPointerException if the methodName is null',\n      '@throws NullPointerException when the methodName parameter is null',\n      '@throws NullPointerException if the reference to the methodName is null',\n      '@throws NullPointerException if the methodName object is null',\n      '@throws NullPointerException if the methodName parameter has a null value'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if the collection is null',\n    'alternatives': [\n      '@throws NullPointerException if the collection parameter is null',\n      '@throws NullPointerException if the reference to the collection is null',\n      '@throws NullPointerException if the collection object is null',\n      '@throws NullPointerException if the collection parameter has a null value',\n      '@throws NullPointerException when the collection is null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if comparator is null',\n    'alternatives': [\n      '@throws NullPointerException if the comparator is null',\n      '@throws NullPointerException when the comparator parameter is null',\n      '@throws NullPointerException if the reference to the comparator is null',\n      '@throws NullPointerException if the comparator object is null',\n      '@throws NullPointerException if the comparator parameter has a null value'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if comparator or criterion is null',\n    'alternatives': [\n      '@throws NullPointerException if either the comparator or criterion is null',\n      '@throws NullPointerException if the comparator or criterion reference is null',\n      '@throws NullPointerException if the comparator or criterion parameter is null',\n      '@throws NullPointerException when the comparator or criterion is null',\n      '@throws NullPointerException if the comparator or criterion object is null'\n    ]\n  },\n  {\n    'tag': '@param pair the pair to copy, must not be null',\n    'alternatives': [\n      '@param pair the pair that should be copied, must not be null',\n      '@param pair the pair for duplication, must not be null',\n      '@param pair the pair from which to create a copy, must not be null',\n      '@param pair the pair to be duplicated, must not be null',\n      '@param pair the pair requiring copying, must not be null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if the entry is null',\n    'alternatives': [\n      '@throws NullPointerException if the entry parameter is null',\n      '@throws NullPointerException if the reference to the entry is null',\n      '@throws NullPointerException if the entry object is null',\n      '@throws NullPointerException if the entry parameter has a null value',\n      '@throws NullPointerException when the entry is null'\n    ]\n  },\n  {\n    'tag': '@param entry the entry to copy, must not be null',\n    'alternatives': [\n      '@param entry the entry that should be copied, must not be null',\n      '@param entry the entry for duplication, must not be null',\n      '@param entry the entry from which to create a copy, must not be null',\n      '@param entry the entry to be duplicated, must not be null',\n      '@param entry the entry requiring copying, must not be null'\n    ]\n  }\n]"