"[\n  {\n    \"tag\": \"@return the singleton instance\",\n    \"alternatives\": [\n      \"@return the instance which is the only one\",\n      \"@return the only instance\",\n      \"@return instance object that is unique\",\n      \"@return the instance that is singular\",\n      \"@return the one and only instance\"\n    ]\n  },\n  {\n    \"tag\": \"@param fraction the object to format.\",\n    \"alternatives\": [\n      \"@param fraction the object to format\",\n      \"@param the object to format representing a fraction\",\n      \"@param the object to format, which is a fraction\",\n      \"@param the object to format that represents a fraction\",\n      \"@param fraction to be formatted\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NullPointerException if iterator parameter is null\",\n    \"alternatives\": [\n      \"@throws NullPointerException if the iterator parameter is null\",\n      \"@throws NullPointerException if the parameter 'iterator' is null\",\n      \"@throws NullPointerException in case the iterator parameter is null\",\n      \"@throws NullPointerException when the iterator parameter is null\",\n      \"@throws NullPointerException if the iterator is null\"\n    ]\n  },\n  {\n    \"tag\": \"@param iterator the iterator to use, not null\",\n    \"alternatives\": [\n      \"@param iterator not null, the iterator to be used\",\n      \"@param iterator used iterator that should not be null\",\n      \"@param iterator to be used and should not be null\",\n      \"@param iterator which will be utilized, cannot be null\",\n      \"@param iterator that is required to be non-null\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NullPointerException if iterator parameter is null\",\n    \"alternatives\": [\n      \"@throws NullPointerException if the iterator parameter is null\",\n      \"@throws NullPointerException if the parameter 'iterator' is null\",\n      \"@throws NullPointerException in case the iterator parameter is null\",\n      \"@throws NullPointerException when the iterator parameter is null\",\n      \"@throws NullPointerException if the iterator is null\"\n    ]\n  },\n  {\n    \"tag\": \"@throws IllegalArgumentException if the size is less than 1\",\n    \"alternatives\": [\n      \"@throws IllegalArgumentException if the size is smaller than 1\",\n      \"@throws IllegalArgumentException if the size is less than one\",\n      \"@throws IllegalArgumentException if the size is not at least 1\",\n      \"@throws IllegalArgumentException if the size is below 1\",\n      \"@throws IllegalArgumentException if the size is not greater than or equal to 1\"\n    ]\n  },\n  {\n    \"tag\": \"@param iterator the iterator to use, not null\",\n    \"alternatives\": [\n      \"@param iterator not null, the iterator to be used\",\n      \"@param iterator used iterator that should not be null\",\n      \"@param iterator to be used and should not be null\",\n      \"@param iterator which will be utilized, cannot be null\",\n      \"@param iterator that is required to be non-null\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NullPointerException if closure is null\",\n    \"alternatives\": [\n      \"@throws NullPointerException if the closure is null\",\n      \"@throws NullPointerException if the parameter 'closure' is null\",\n      \"@throws NullPointerException in case the closure is null\",\n      \"@throws NullPointerException when the closure is null\",\n      \"@throws NullPointerException if the closure object is null\"\n    ]\n  },\n  {\n    \"tag\": \"@param closure the closure to apply to each element, may not be null\",\n    \"alternatives\": [\n      \"@param closure not null, the closure to apply to each element\",\n      \"@param closure to be applied to each element, should not be null\",\n      \"@param closure to be used on each element, must not be null\",\n      \"@param closure that will be applied to each element, cannot be null\",\n      \"@param closure which should not be null, will be executed on each element\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NullPointerException if closure is null\",\n    \"alternatives\": [\n      \"@throws NullPointerException if the closure is null\",\n      \"@throws NullPointerException if the parameter 'closure' is null\",\n      \"@throws NullPointerException in case the closure is null\",\n      \"@throws NullPointerException when the closure is null\",\n      \"@throws NullPointerException if the closure object is null\"\n    ]\n  },\n  {\n    \"tag\": \"@param closure the closure to perform, may not be null\",\n    \"alternatives\": [\n      \"@param closure not null, the closure to execute\",\n      \"@param closure to be performed, should not be null\",\n      \"@param closure that will be executed, must not be null\",\n      \"@param closure which should not be null, will be performed\",\n      \"@param closure that needs to be not null, will be executed\"\n    ]\n  },\n  {\n    \"tag\": \"@return the last element in the iterator, or null if iterator is null or empty\",\n    \"alternatives\": [\n      \"@return the final element in the iterator, or null if the iterator is empty or null\",\n      \"@return the last item in the iterator, or null if the iterator is empty or null\",\n      \"@return the ultimate element in the iterator, or null if the iterator is empty or null\",\n      \"@return the end element in the iterator, or null if the iterator is empty or null\",\n      \"@return the terminal element in the iterator, or null if the iterator is empty or null\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NullPointerException if predicate is null\",\n    \"alternatives\": [\n      \"@throws NullPointerException if the predicate is null\",\n      \"@throws NullPointerException if the parameter 'predicate' is null\",\n      \"@throws NullPointerException in case the predicate is null\",\n      \"@throws NullPointerException when the predicate is null\",\n      \"@throws NullPointerException if the predicate object is null\"\n    ]\n  },\n  {\n    \"tag\": \"@param predicate the predicate to use, may not be null\",\n    \"alternatives\": [\n      \"@param predicate not null, the predicate to utilize\",\n      \"@param predicate to be used, should not be null\",\n      \"@param predicate that will be used, must not be null\",\n      \"@param predicate which should not be null, will be applied\",\n      \"@param predicate that cannot be null, will be used\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NullPointerException if predicate is null\",\n    \"alternatives\": [\n      \"@throws NullPointerException if the predicate is null\",\n      \"@throws NullPointerException if the parameter 'predicate' is null\",\n      \"@throws NullPointerException in case the predicate is null\",\n      \"@throws NullPointerException when the predicate is null\",\n      \"@throws NullPointerException if the predicate object is null\"\n    ]\n  },\n  {\n    \"tag\": \"@param predicate the predicate to use, may not be null\",\n    \"alternatives\": [\n      \"@param predicate not null, the predicate to utilize\",\n      \"@param predicate to be used, should not be null\",\n      \"@param predicate that will be used, must not be null\",\n      \"@param predicate which should not be null, will be applied\",\n      \"@param predicate that cannot be null, will be used\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NullPointerException if predicate is null\",\n    \"alternatives\": [\n      \"@throws NullPointerException if the predicate is null\",\n      \"@throws NullPointerException if the parameter 'predicate' is null\",\n      \"@throws NullPointerException in case the predicate is null\",\n      \"@throws NullPointerException when the predicate is null\",\n      \"@throws NullPointerException if the predicate object is null\"\n    ]\n  },\n  {\n    \"tag\": \"@param predicate the predicate to use, may not be null\",\n    \"alternatives\": [\n      \"@param predicate not null, the predicate to utilize\",\n      \"@param predicate to be used, should not be null\",\n      \"@param predicate that will be used, must not be null\",\n      \"@param predicate which should not be null, will be applied\",\n      \"@param predicate that cannot be null, will be used\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NullPointerException if predicate is null\",\n    \"alternatives\": [\n      \"@throws NullPointerException if the predicate is null\",\n      \"@throws NullPointerException if the parameter 'predicate' is null\",\n      \"@throws NullPointerException in case the predicate is null\",\n      \"@throws NullPointerException when the predicate is null\",\n      \"@throws NullPointerException if the predicate object is null\"\n    ]\n  },\n  {\n    \"tag\": \"@param predicate the predicate to use, may not be null\",\n    \"alternatives\": [\n      \"@param predicate not null, the predicate to utilize\",\n      \"@param predicate to be used, should not be null\",\n      \"@param predicate that will be used, must not be null\",\n      \"@param predicate which should not be null, will be applied\",\n      \"@param predicate that cannot be null, will be used\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NullPointerException if {@code transformer} is null\",\n    \"alternatives\": [\n      \"@throws NullPointerException if the transformer object is null\",\n      \"@throws NullPointerException if the parameter 'transformer' is null\",\n      \"@throws NullPointerException in case the transformer is null\",\n      \"@throws NullPointerException when the transformer is null\",\n      \"@throws NullPointerException if the object transformer is null\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NullPointerException if either transformer, delimiter, prefix or suffix is null\",\n    \"alternatives\": [\n      \"@throws NullPointerException if any of the transformer, delimiter, prefix, or suffix is null\",\n      \"@throws NullPointerException if transformer, delimiter, prefix, or suffix is null\",\n      \"@throws NullPointerException in case any of transformer, delimiter, prefix, or suffix is null\",\n      \"@throws NullPointerException when transformer, delimiter, prefix, or suffix is null\",\n      \"@throws NullPointerException if any of the objects transformer, delimiter, prefix, or suffix is null\"\n    ]\n  },\n  {\n    \"tag\": \"@param loadFactor the load factor, must be &gt; 0.0f and generally &lt; 1.0f\",\n    \"alternatives\": [\n      \"@param loadFactor the load factor, should be greater than 0.0f and usually less than 1.0f\",\n      \"@param loadFactor the load factor which needs to be above 0.0f and typically below 1.0f\",\n      \"@param loadFactor being the load factor, it must be larger than 0.0f and generally smaller than 1.0f\",\n      \"@param loadFactor the load factor, should be more than 0.0f and usually smaller than 1.0f\",\n      \"@param loadFactor the load factor, must have a value greater than 0.0f and usually less than 1.0f\"\n    ]\n  },\n  {\n    \"tag\": \"@throws IllegalArgumentException if the initial capacity is negative\",\n    \"alternatives\": [\n      \"@throws IllegalArgumentException if the initial capacity is less than 0\",\n      \"@throws IllegalArgumentException if the initial capacity is negative\",\n      \"@throws IllegalArgumentException if the initial capacity is below 0\",\n      \"@throws IllegalArgumentException if the initial capacity has a negative value\",\n      \"@throws IllegalArgumentException if the initial capacity is not positive\"\n    ]\n  },\n  {\n    \"tag\": \"@throws IllegalArgumentException if the initial capacity is negative\",\n    \"alternatives\": [\n      \"@throws IllegalArgumentException if the initial capacity is less than 0\",\n      \"@throws IllegalArgumentException if the initial capacity is negative\",\n      \"@throws IllegalArgumentException if the initial capacity is below 0\",\n      \"@throws IllegalArgumentException if the initial capacity has a negative value\",\n      \"@throws IllegalArgumentException if the initial capacity is not positive\"\n    ]\n  }\n]"