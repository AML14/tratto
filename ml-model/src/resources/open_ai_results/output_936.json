"output = [\n  {\n    'tag': '@param node root node of the sub-tree (<em>must</em> have {@link\\nRegion Region} tree semantics, i.e. the leaf nodes must have\\n{@code Boolean} attributes representing an inside/outside\\nproperty)',\n    'alternatives': [\n      '@param node root node of the subtree (must have tree semantics {@link\\nRegion Region}, i.e., leaf nodes must have {@code Boolean} attributes representing inside/outside property)',\n      '@param node the root node of the subtree (it must have tree semantics {@link\\nRegion Region}, this means that leaf nodes must possess {@code Boolean} attributes that represent an inside/outside property)',\n      '@param node the starting node of the subtree (must have tree semantics {@link\\nRegion Region}, where the leaf nodes need to have {@code Boolean} attributes representing an inside/outside property)',\n      '@param node the root node of the substructure (must have tree semantics {@link\\nRegion Region}, specifically, the leaf nodes should have {@code Boolean} attributes representing inside/outside property)',\n      '@param node the root node of the sub-tree (it must satisfy tree semantics {@link\\nRegion Region}, i.e., the leaf nodes must have {@code Boolean} attributes that represent an inside/outside property)'\n    ]\n  },\n  {\n    'tag': '@return true if the sub-tree starting at the given node covers the full space',\n    'alternatives': [\n      '@return true if the subtree starting from the specified node covers the entire space',\n      '@return true if the substructure starting from the given node covers the complete space',\n      '@return true if the subtree that begins with the specified node covers the entire space',\n      '@return true if the sub-tree from the starting node covers the entire space',\n      '@return true if the sub-tree that starts at the given node covers the entire space'\n    ]\n  },\n  {\n    'tag': '@return dimension of the secondary state parameters',\n    'alternatives': [\n      '@return size of the secondary state parameters',\n      '@return dimension of the auxiliary state parameters',\n      '@return number of secondary state parameters',\n      '@return dimensionality of the secondary state parameters',\n      '@return size of the additional state parameters'\n    ]\n  },\n  {\n    'tag': '@param complete complete state or derivative array from which\\nequation data should be retrieved',\n    'alternatives': [\n      '@param complete complete state or derivative array used to access equation data',\n      '@param complete full state or derivative array from which to obtain equation data',\n      '@param complete complete state or derivative array for retrieving equation data',\n      '@param complete complete state or derivative array to retrieve equation data from',\n      '@param complete complete state or derivative array for obtaining equation data'\n    ]\n  },\n  {\n    'tag': '@param equationData placeholder where to put equation data',\n    'alternatives': [\n      '@param equationData placeholder for storing equation data',\n      '@param equationData location to store equation data',\n      '@param equationData container to store equation data',\n      '@param equationData placeholder to hold equation data',\n      '@param equationData location to place equation data'\n    ]\n  },\n  {\n    'tag': '@throws DimensionMismatchException if the dimension of the equation data does not\\nmatch the mapper dimension',\n    'alternatives': [\n      '@throws DimensionMismatchException if the equation data dimension does not match the mapper dimension',\n      '@throws DimensionMismatchException if the dimension of the equation data mismatches the mapper dimension',\n      '@throws DimensionMismatchException if the equation data has a dimension that does not match the mapper dimension',\n      '@throws DimensionMismatchException if the mapper dimension does not match the equation data dimension',\n      '@throws DimensionMismatchException if the equation data dimension does not correspond to the mapper dimension'\n    ]\n  },\n  {\n    'tag': '@param equationData equation data to be inserted into the complete array',\n    'alternatives': [\n      '@param equationData equation data to be added to the complete array',\n      '@param equationData equation data to be included in the complete array',\n      '@param equationData equation data to be placed in the complete array',\n      '@param equationData equation data to be put into the complete array',\n      '@param equationData equation data to be appended to the complete array'\n    ]\n  },\n  {\n    'tag': '@param complete placeholder where to put equation data (only the\\npart corresponding to the equation will be overwritten)',\n    'alternatives': [\n      '@param complete placeholder to store equation data (only the\\nportion corresponding to the equation will be replaced)',\n      '@param complete location to put equation data (only the\\npart that corresponds to the equation will be replaced)',\n      '@param complete container to hold equation data (only the\\nsection corresponding to the equation will be overwritten)',\n      '@param complete placeholder to store equation data (only the\\npart corresponding to the equation will be overwritten)',\n      '@param complete location to put equation data (only the\\npart corresponding to the equation will be overwritten)'\n    ]\n  },\n  {\n    'tag': '@throws DimensionMismatchException if the dimension of the equation data does not\\nmatch the mapper dimension',\n    'alternatives': [\n      '@throws DimensionMismatchException if the equation data dimension does not match the mapper dimension',\n      '@throws DimensionMismatchException if the dimension of the equation data mismatches the mapper dimension',\n      '@throws DimensionMismatchException if the equation data has a dimension that does not match the mapper dimension',\n      '@throws DimensionMismatchException if the mapper dimension does not match the equation data dimension',\n      '@throws DimensionMismatchException if the equation data dimension does not correspond to the mapper dimension'\n    ]\n  },\n  {\n    'tag': '@param firstIndex index of the first equation element in complete state arrays',\n    'alternatives': [\n      '@param firstIndex starting index of the first equation element in complete state arrays',\n      '@param firstIndex index of the initial equation element in the complete state arrays',\n      '@param firstIndex index indicating the first equation element in the complete state arrays',\n      '@param firstIndex index of the initial equation element in the complete state arrays',\n      '@param firstIndex index that points to the first equation element in the complete state arrays'\n    ]\n  },\n  {\n    'tag': '@param dimension dimension of the secondary state parameters',\n    'alternatives': [\n      '@param dimension size of the secondary state parameters',\n      '@param dimension dimension of the auxiliary state parameters',\n      '@param dimension number of secondary state parameters',\n      '@param dimension dimensionality of the secondary state parameters',\n      '@param dimension size of the additional state parameters'\n    ]\n  },\n  {\n    'tag': '@param g raw value of function g',\n    'alternatives': [\n      '@param g unprocessed value of function g',\n      '@param g untreated value of function g',\n      '@param g input value of function g',\n      '@param g pure value of function g',\n      '@param g original value of function g'\n    ]\n  },\n  {\n    'tag': '@return transformed value of function g',\n    'alternatives': [\n      '@return the modified value of function g',\n      '@return the altered value of function g',\n      '@return the converted value of function g',\n      '@return the changed value of function g',\n      '@return the transformed output of function g'\n    ]\n  },\n  {\n    'tag': '@return underlying event handler',\n    'alternatives': [\n      '@return event handler below',\n      '@return event handler that is underlaid',\n      '@return event handler beneath',\n      '@return underlying handler of the event',\n      '@return the event handler underneath'\n    ]\n  },\n  {\n    'tag': '@return maximal time interval between events handler checks',\n    'alternatives': [\n      '@return maximum duration between event handler checks',\n      '@return maximum time interval during which the handler checks for events',\n      '@return maximum time interval for event handler checks',\n      '@return the largest time interval between event handler checks',\n      '@return the greatest time interval that the handler inspects for events'\n    ]\n  },\n  {\n    'tag': '@return convergence threshold for event localization',\n    'alternatives': [\n      '@return threshold for convergence in event localization',\n      '@return threshold to achieve convergence in event localization',\n      '@return threshold value for event localization convergence',\n      '@return the threshold for reaching convergence in event localization',\n      '@return the threshold that leads to convergence in event localization'\n    ]\n  },\n  {\n    'tag': '@return upper limit in the iteration count for event localization',\n    'alternatives': [\n      '@return maximum count limit in the iteration for event localization',\n      '@return highest limit on the iteration count for event localization',\n      '@return maximum iteration count limit for event localization',\n      '@return the upper bound on the iteration count for event localization',\n      '@return the maximum limit in the iteration count for event localization'\n    ]\n  },\n  {\n    'tag': '@param interpolator valid for the current step',\n    'alternatives': [\n      '@param interpolator applicable for the current step',\n      '@param interpolator valid during the current step',\n      '@param interpolator suitable for the current step',\n      '@param interpolator that is valid for the current step',\n      '@param interpolator that can be used for the current step'\n    ]\n  },\n  {\n    'tag': '@throws MaxCountExceededException if the interpolator throws one because\\nthe number of functions evaluations is exceeded',\n    'alternatives': [\n      '@throws MaxCountExceededException if the number of function evaluations exceeds the limit thrown by the interpolator',\n      '@throws MaxCountExceededException if the interpolator exceeds the number of function evaluations',\n      '@throws MaxCountExceededException if the number of function evaluations surpasses the threshold thrown by the interpolator',\n      '@throws MaxCountExceededException if the interpolator throws an exception because the number of function evaluations is surpassed',\n      '@throws MaxCountExceededException if the number of function evaluations goes beyond the maximum limit thrown by the interpolator'\n    ]\n  },\n  {\n    'tag': '@param interpolator step interpolator for the proposed step',\n    'alternatives': [\n      '@param interpolator step interpolator used for the suggested step',\n      '@param interpolator that steps during the proposed step',\n      '@param interpolator for stepping in the proposed step',\n      '@param interpolator that performs steps in the proposed step',\n      '@param interpolator step interpolator to be used in the proposed step'\n    ]\n  },\n  {\n    'tag': '@return true if the event handler triggers an event before\\nthe end of the proposed step',\n    'alternatives': [\n      '@return true if the event handler activates an event prior to\\nthe completion of the suggested step',\n      '@return true if the event handler initiates an event before\\nthe conclusion of the proposed step',\n      '@return true if the event handler fires an event prior to\\nthe end of the suggested step',\n      '@return true if the event handler generates an event before\\nthe completion of the proposed step',\n      '@return true if the event handler starts an event before\\nthe conclusion of the proposed step'\n    ]\n  },\n  {\n    'tag': '@throws MaxCountExceededException if the interpolator throws one because\\nthe number of functions evaluations is exceeded',\n    'alternatives': [\n      '@throws MaxCountExceededException if the number of function evaluations exceeds the limit thrown by the interpolator',\n      '@throws MaxCountExceededException if the interpolator exceeds the number of function evaluations',\n      '@throws MaxCountExceededException if the number of function evaluations surpasses the threshold thrown by the interpolator',\n      '@throws MaxCountExceededException if the interpolator throws an exception because the number of function evaluations is surpassed',\n      '@throws MaxCountExceededException if the number of function evaluations goes beyond the maximum limit thrown by the interpolator'\n    ]\n  },\n  {\n    'tag': '@throws NoBracketingException if the event cannot be bracketed',\n    'alternatives': [\n      '@throws NoBracketingException if the event cannot be enclosed',\n      '@throws NoBracketingException if the event cannot be surrounded',\n      '@throws NoBracketingException if the event cannot be trapped',\n      '@throws NoBracketingException if the event cannot be bracketed',\n      '@throws NoBracketingException if the event cannot be contained'\n    ]\n  },\n  {\n    'tag': '@return occurrence time of the event triggered in the current\\nstep or infinity if no events are triggered',\n    'alternatives': [\n      '@return time of the event that occurs during the current\\nstep or infinity if no events are triggered',\n      '@return the time at which the event is triggered in the current\\nstep or infinity if no events are triggered',\n      '@return time of the event triggered during the current\\nstep or infinity if no events are triggered',\n      '@return the occurrence time of the event triggered in the current\\nstep or infinity if no events are triggered',\n      '@return the time when the event is triggered in the current\\nstep or infinity if no events are triggered'\n    ]\n  },\n  {\n    'tag': '@param state state at the end of the step',\n    'alternatives': [\n      '@param state the state at the conclusion of the step',\n      '@param state the state after the step',\n      '@param state the final state after the step',\n      '@param state state at the end of the execution',\n      '@param state the state at the end of the process'\n    ]\n  }\n]"