"output = [\n  {\n    'tag': '@param l the traversal listener to be removed.',\n    'alternatives': [\n      '@param l the listener for traversal to be removed.',\n      '@param l the listener for traversal that needs to be removed.',\n      '@param l the listener for traversal that should be removed.',\n      '@param l the traversal listener that is to be removed.',\n      '@param l the listener responsible for traversal removal.'\n    ]\n  },\n  {\n    'tag': '@param e the connected component finished event.',\n    'alternatives': [\n      '@param e the event marking the completion of a connected component.',\n      '@param e the event indicating the end of a connected component.',\n      '@param e the event that represents the completion of a connected component.',\n      '@param e the finished event of the connected component.',\n      '@param e the event that signals the end of a connected component.'\n    ]\n  },\n  {\n    'tag': '@param e the connected component started event.',\n    'alternatives': [\n      '@param e the event marking the start of a connected component.',\n      '@param e the event indicating the beginning of a connected component.',\n      '@param e the event that represents the start of a connected component.',\n      '@param e the starting event of the connected component.',\n      '@param e the event that signals the beginning of a connected component.'\n    ]\n  },\n  {\n    'tag': '@param e the edge traversal event.',\n    'alternatives': [\n      '@param e the event that signifies the traversal of an edge.',\n      '@param e the event indicating the traversal of an edge.',\n      '@param e the event representing the traversal of an edge.',\n      '@param e the event of an edge traversal.',\n      '@param e the event signaling the traversal of an edge.'\n    ]\n  },\n  {\n    'tag': '@param e the vertex traversal event.',\n    'alternatives': [\n      '@param e the event that represents the traversal of a vertex.',\n      '@param e the event indicating the traversal of a vertex.',\n      '@param e the event signifying the traversal of a vertex.',\n      '@param e the event of a vertex traversal.',\n      '@param e the event signaling the traversal of a vertex.'\n    ]\n  },\n  {\n    'tag': '@param e the vertex traversal event.',\n    'alternatives': [\n      '@param e the event that represents the traversal of a vertex.',\n      '@param e the event indicating the traversal of a vertex.',\n      '@param e the event signifying the traversal of a vertex.',\n      '@param e the event of a vertex traversal.',\n      '@param e the event signaling the traversal of a vertex.'\n    ]\n  },\n  {\n    'tag': '@param vertex vertex being sought from start vertex',\n    'alternatives': [\n      '@param vertex the vertex to find from the start vertex.',\n      '@param vertex the vertex being searched from the start vertex.',\n      '@param vertex the vertex that is being sought from the start vertex.',\n      '@param vertex the vertex to be found from the start vertex.',\n      '@param vertex the vertex being sought starting from the start vertex.'\n    ]\n  },\n  {\n    'tag': '@return weighted length of shortest path known, or\\nDouble.POSITIVE_INFINITY if no path found yet',\n    'alternatives': [\n      '@return weighted distance of the most short route known, otherwise Double.POSITIVE_INFINITY if no route discovered until now',\n      '@return Double.POSITIVE_INFINITY if no path found yet, or weighted length of shortest path known.',\n      '@return either return the weighted length of the shortest path known, or return Double.POSITIVE_INFINITY if no path was found yet',\n      '@return weighted length shortest path known or Double.POSITIVE_INFINITY if no path found',\n      '@return the weighted length of the shortest path that is known. Otherwise return Double.POSITIVE_INFINITY if no path has been found yet.'\n    ]\n  },\n  {\n    'tag': '@param vertex the spanned vertex.',\n    'alternatives': [\n      '@param vertex the vertex that has been spanned.',\n      '@param vertex the vertex which has been crossed.',\n      '@param vertex the vertex that is covered.',\n      '@param vertex the vertex that is traversed.',\n      '@param vertex the vertex that is swept over.'\n    ]\n  },\n  {\n    'tag': '@return the spanning tree edge, or null if the vertex either has not been\\nseen yet or is the start vertex.',\n    'alternatives': [\n      '@return the edge of the spanning tree, or null if the vertex has not been encountered yet or is the start vertex.',\n      '@return the edge that belongs to the spanning tree, or null if the vertex has either not been seen yet or is the start vertex.',\n      '@return the edge in the spanning tree, or null if the vertex has not been observed yet or is the start vertex.',\n      '@return the edge that forms part of the spanning tree, or null if the vertex has not been seen yet or is the start vertex.',\n      '@return the edge that is part of the spanning tree, or null if the vertex has either not been encountered yet or is the start vertex.'\n    ]\n  },\n  {\n    'tag': '@param vertex the vertex re-encountered',\n    'alternatives': [\n      '@param vertex the vertex that has been encountered again.',\n      '@param vertex the vertex that has been revisited.',\n      '@param vertex the vertex that is encountered again.',\n      '@param vertex the vertex that is met once more.',\n      '@param vertex the vertex that is come across again.'\n    ]\n  },\n  {\n    'tag': '@param edge the edge via which the vertex was re-encountered',\n    'alternatives': [\n      '@param edge the edge through which the vertex was encountered again.',\n      '@param edge the edge via which the vertex has been traversed again.',\n      '@param edge the edge that leads to the revisited vertex.',\n      '@param edge the edge by which the vertex was met once more.',\n      '@param edge the edge that is used to encounter the vertex again.'\n    ]\n  },\n  {\n    'tag': '@param vertex the vertex for which to calculate the path length.',\n    'alternatives': [\n      '@param vertex the vertex for which the path length needs to be calculated.',\n      '@param vertex the vertex for which to determine the path length.',\n      '@param vertex the vertex for which the length of the path is to be calculated.',\n      '@param vertex the vertex for which the path length should be calculated.',\n      '@param vertex the vertex for which the length of the path needs to be determined.'\n    ]\n  },\n  {\n    'tag': '@param edge the edge via which the path is being extended.',\n    'alternatives': [\n      '@param edge the edge through which the path is extended.',\n      '@param edge the edge by which the path is expanded.',\n      '@param edge the edge that helps to extend the path.',\n      '@param edge the edge that is used to prolong the path.',\n      '@param edge the edge via which the path is being elongated.'\n    ]\n  },\n  {\n    'tag': '@return calculated path length.',\n    'alternatives': [\n      '@return computed length of the path.',\n      '@return the length of the path that has been calculated.',\n      '@return the length of the path that is determined.',\n      '@return the path length that is calculated.',\n      '@return calculated length of the path.'\n    ]\n  },\n  {\n    'tag': '@param vertex a vertex which has just been encountered.',\n    'alternatives': [\n      '@param vertex a recently encountered vertex.',\n      '@param vertex a vertex that has been encountered recently.',\n      '@param vertex a vertex that has been newly encountered.',\n      '@param vertex a vertex that is just encountered.',\n      '@param vertex a vertex that is recently met.'\n    ]\n  },\n  {\n    'tag': '@param edge the edge via which the vertex was encountered.',\n    'alternatives': [\n      '@param edge the edge through which the vertex was traversed.',\n      '@param edge the edge that leads to the encountered vertex.',\n      '@param edge the edge by which the vertex was met.',\n      '@param edge the edge that is used to encounter the vertex.',\n      '@param edge the edge via which the vertex is encountered.'\n    ]\n  },\n  {\n    'tag': '@return the new heap node.',\n    'alternatives': [\n      '@return the newly created heap node.',\n      '@return the new node for the heap.',\n      '@return the newly generated heap node.',\n      '@return the node that is a new addition to the heap.',\n      '@return the heap node that has just been created.'\n    ]\n  },\n  {\n    'tag': '@param g the graph to be iterated.',\n    'alternatives': [\n      '@param g the graph that will be iterated.',\n      '@param g the graph to be traversed.',\n      '@param g the graph that needs to be iterated.',\n      '@param g the graph for which iteration is required.',\n      '@param g the graph that should be iterated.'\n    ]\n  },\n  {\n    'tag': '@param g the graph to be iterated.',\n    'alternatives': [\n      '@param g the graph that will be iterated.',\n      '@param g the graph to be traversed.',\n      '@param g the graph that needs to be iterated.',\n      '@param g the graph for which iteration is required.',\n      '@param g the graph that should be iterated.'\n    ]\n  },\n  {\n    'tag': '@param startVertex the vertex iteration to be started.',\n    'alternatives': [\n      '@param startVertex the vertex to start the iteration from.',\n      '@param startVertex the starting vertex for the iteration.',\n      '@param startVertex the vertex from which the iteration begins.',\n      '@param startVertex the vertex that marks the start of iteration.',\n      '@param startVertex the vertex from where the iteration is initiated.'\n    ]\n  },\n  {\n    'tag': '@param g the graph to be iterated.',\n    'alternatives': [\n      '@param g the graph that will be iterated.',\n      '@param g the graph to be traversed.',\n      '@param g the graph that needs to be iterated.',\n      '@param g the graph for which iteration is required.',\n      '@param g the graph that should be iterated.'\n    ]\n  },\n  {\n    'tag': '@param startVertex the vertex iteration to be started.',\n    'alternatives': [\n      '@param startVertex the vertex to start the iteration from.',\n      '@param startVertex the starting vertex for the iteration.',\n      '@param startVertex the vertex from which the iteration begins.',\n      '@param startVertex the vertex that marks the start of iteration.',\n      '@param startVertex the vertex from where the iteration is initiated.'\n    ]\n  },\n  {\n    'tag': '@param radius limit on weighted path length, or Double.POSITIVE_INFINITY\\nfor unbounded search.',\n    'alternatives': [\n      '@param radius the maximum length of the weighted path, or Double.POSITIVE_INFINITY for an unbounded search.',\n      '@param radius the threshold for weighted path length, or Double.POSITIVE_INFINITY for an unrestricted search.',\n      '@param radius the limit for weighted path length, or Double.POSITIVE_INFINITY for an infinite search.',\n      '@param radius the maximum weighted path length allowed, or Double.POSITIVE_INFINITY for an unlimited search.',\n      '@param radius the upper bound on the weighted path length, or Double.POSITIVE_INFINITY for an unbounded search.'\n    ]\n  },\n  {\n    'tag': '@param g the graph to be iterated.',\n    'alternatives': [\n      '@param g the graph that will be iterated.',\n      '@param g the graph to be traversed.',\n      '@param g the graph that needs to be iterated.',\n      '@param g the graph for which iteration is required.',\n      '@param g the graph that should be iterated.'\n    ]\n  }\n]"