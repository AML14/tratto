"[\n    {\n        \"tag\": \"@param state state to map\",\n        \"alternatives\": [\n            \"@param state state to convert\",\n            \"@param state input state to map\",\n            \"@param state variable to be mapped\",\n            \"@param state the state to be mapped\",\n            \"@param state the state to transform\"\n        ]\n    },\n    {\n        \"tag\": \"@return flat array containing the mapped state, including primary and secondary components\",\n        \"alternatives\": [\n            \"@return flattened array with mapped state, including primary and secondary components\",\n            \"@return array that contains the mapped state along with primary and secondary components in a flattened form\",\n            \"@return flat array that represents the mapped state, including primary and secondary components\",\n            \"@return mapped state in a flat array form, including primary and secondary components\",\n            \"@return array with flat representation of the mapped state, containing primary and secondary components\"\n        ]\n    },\n    {\n        \"tag\": \"@param t time\",\n        \"alternatives\": [\n            \"@param t the time value\",\n            \"@param t the time parameter\",\n            \"@param t the time variable\",\n            \"@param t the time in seconds\",\n            \"@param t the time input\"\n        ]\n    },\n    {\n        \"tag\": \"@param y state array to map, including primary and secondary components\",\n        \"alternatives\": [\n            \"@param y input array with state to be mapped, including primary and secondary components\",\n            \"@param y the state array to be mapped, including primary and secondary components\",\n            \"@param y array of state to map, including primary and secondary components\",\n            \"@param y state vector with primary and secondary components to be mapped\",\n            \"@param y state array with primary and secondary components that needs to be mapped\"\n        ]\n    },\n    {\n        \"tag\": \"@param yDot state derivative array to map, including primary and secondary components\",\n        \"alternatives\": [\n            \"@param yDot input array with state derivative to be mapped, including primary and secondary components\",\n            \"@param yDot the state derivative array to be mapped, including primary and secondary components\",\n            \"@param yDot array of state derivatives to map, including primary and secondary components\",\n            \"@param yDot state derivative vector with primary and secondary components to be mapped\",\n            \"@param yDot state derivative array with primary and secondary components that needs to be mapped\"\n        ]\n    },\n    {\n        \"tag\": \"@throws DimensionMismatchException if an array does not match total dimension\",\n        \"alternatives\": [\n            \"@throws DimensionMismatchException if the array size does not match the total dimension\",\n            \"@throws DimensionMismatchException if the total dimension is not compatible with the array size\",\n            \"@throws DimensionMismatchException if the total dimension and the array size are not equal\",\n            \"@throws DimensionMismatchException if the array does not have the expected total dimension\",\n            \"@throws DimensionMismatchException if the array size is not consistent with the total dimension\"\n        ]\n    },\n    {\n        \"tag\": \"@param index index of the equation, must be between 0 included and\\n{@link #getNumberOfEquations()} (excluded)\",\n        \"alternatives\": [\n            \"@param index the index of the equation, ranging from 0 (inclusive) to {@link #getNumberOfEquations()} (exclusive)\",\n            \"@param index the equation index, should be between 0 (inclusive) and\\n{@link #getNumberOfEquations()} (exclusive)\",\n            \"@param index the position of the equation, should be between 0 (inclusive) and\\n{@link #getNumberOfEquations()} (exclusive)\",\n            \"@param index equation index that should be in range 0 (inclusive) and\\n{@link #getNumberOfEquations()} (exclusive)\",\n            \"@param index the equation's position in the range 0 (inclusive) to\\n{@link #getNumberOfEquations()} (exclusive)\"\n        ]\n    },\n    {\n        \"tag\": \"@param complete complete state or derivative array from which\\nequation data should be retrieved\",\n        \"alternatives\": [\n            \"@param complete array containing the complete state or derivative from which equation data is retrieved\",\n            \"@param complete array that holds the complete state or derivative and is used to retrieve equation data\",\n            \"@param complete full state or derivative array used to obtain equation data\",\n            \"@param complete array with complete state or derivative, used for retrieving equation data\",\n            \"@param complete input array storing complete state or derivative data, from which equation data will be retrieved\"\n        ]\n    },\n    {\n        \"tag\": \"@return equation data\",\n        \"alternatives\": [\n            \"@return data related to the equation\",\n            \"@return data representing the equation\",\n            \"@return equation-related data\",\n            \"@return data of the equation\",\n            \"@return information about the equation\"\n        ]\n    },\n    {\n        \"tag\": \"@throws MathIllegalArgumentException if index is out of range\",\n        \"alternatives\": [\n            \"@throws MathIllegalArgumentException if the index is outside the valid range\",\n            \"@throws MathIllegalArgumentException if the index is beyond the acceptable limits\",\n            \"@throws MathIllegalArgumentException if the index is not within the allowable range\",\n            \"@throws MathIllegalArgumentException if the index exceeds the valid range\",\n            \"@throws MathIllegalArgumentException if the index is invalid\"\n        ]\n    },\n    {\n        \"tag\": \"@throws DimensionMismatchException if complete state has not enough elements\",\n        \"alternatives\": [\n            \"@throws DimensionMismatchException if the complete state does not have the required number of elements\",\n            \"@throws DimensionMismatchException if the complete state has insufficient elements\",\n            \"@throws DimensionMismatchException if the complete state is not of the expected size\",\n            \"@throws DimensionMismatchException if the complete state has too few elements\",\n            \"@throws DimensionMismatchException if the complete state does not meet the element count criteria\"\n        ]\n    },\n    {\n        \"tag\": \"@param index index of the equation, must be between 0 included and\\n{@link #getNumberOfEquations()} (excluded)\",\n        \"alternatives\": [\n            \"@param index the equation index, it has to be between 0 (inclusive) and\\n{@link #getNumberOfEquations()} (exclusive)\",\n            \"@param index the index of the equation, ranging from 0 (inclusive) to {@link #getNumberOfEquations()} (exclusive)\",\n            \"@param index equation index that should range from 0 (inclusive) to\\n{@link #getNumberOfEquations()} (exclusive)\",\n            \"@param index equation index which has to be between 0 (inclusive) and\\n{@link #getNumberOfEquations()} (exclusive)\",\n            \"@param index equation index, it must be between 0 (inclusive) and\\n{@link #getNumberOfEquations()} (exclusive)\"\n        ]\n    },\n    {\n        \"tag\": \"@return a new limit angle, with orientation opposite to the instance orientation\",\n        \"alternatives\": [\n            \"@return an opposite-oriented new limit angle, with respect to the instance orientation\",\n            \"@return a newly computed limit angle, with orientation opposite to the current instance orientation\",\n            \"@return a fresh limit angle, with orientation opposite to what the instance orientation denotes\",\n            \"@return a limit angle that has an orientation opposite to the instance orientation\",\n            \"@return a different limit angle, but with opposite orientation compared to the instance orientation\"\n        ]\n    },\n    {\n        \"tag\": \"@return a dummy sub hyperplane\",\n        \"alternatives\": [\n            \"@return a fictitious sub hyperplane\",\n            \"@return a placeholder sub hyperplane\",\n            \"@return a mock sub hyperplane\",\n            \"@return a simulated sub hyperplane\",\n            \"@return a substitute sub hyperplane\"\n        ]\n    },\n    {\n        \"tag\": \"@return a region containing the instance (really an {@link\\nArcsSet IntervalsSet} instance)\",\n        \"alternatives\": [\n            \"@return a region that contains the instance (actually an {@link\\nArcsSet IntervalsSet} instance)\",\n            \"@return a representation of a region that encompasses the instance (effectively an {@link\\nArcsSet IntervalsSet} instance)\",\n            \"@return an area that encompasses the instance (essentially an {@link ArcsSet IntervalsSet} instance)\",\n            \"@return a set of intervals or arcs that includes the instance (in fact, an {@link ArcsSet IntervalsSet} instance)\",\n            \"@return a domain that covers the instance (in reality, an {@link ArcsSet IntervalsSet} instance)\"\n        ]\n    },\n    {\n        \"tag\": \"@return the hyperplane location\",\n        \"alternatives\": [\n            \"@return the position of the hyperplane\",\n            \"@return the location of the hyperplane\",\n            \"@return the coordinates of the hyperplane\",\n            \"@return the point where the hyperplane is located\",\n            \"@return the place where the hyperplane is situated\"\n        ]\n    },\n    {\n        \"tag\": \"@param location location of the hyperplane\",\n        \"alternatives\": [\n            \"@param location hyperplane's position\",\n            \"@param location hyperplane's coordinate\",\n            \"@param location where the hyperplane is\",\n            \"@param location the point where the hyperplane is situated\",\n            \"@param location the place of the hyperplane\"\n        ]\n    },\n    {\n        \"tag\": \"@param direct if true, the plus side of the hyperplane is towards\\nangles greater than {@code location}\",\n        \"alternatives\": [\n            \"@param direct if true, the hyperplane's plus side faces angles greater than {@code location}\",\n            \"@param direct if true, the positive side of the hyperplane points to angles greater than {@code location}\",\n            \"@param direct if true, the hyperplane's positive side is directed towards angles greater than {@code location}\",\n            \"@param direct if set to true, the hyperplane's plus side is oriented towards angles greater than {@code location}\",\n            \"@param direct if true, the hyperplane's plus side is opposite to angles less than {@code location}\"\n        ]\n    },\n    {\n        \"tag\": \"@param tolerance tolerance below which angles are considered identical\",\n        \"alternatives\": [\n            \"@param tolerance the tolerance level for identifying identical angles\",\n            \"@param tolerance the acceptable margin for angles being treated as identical\",\n            \"@param tolerance the threshold below which angles are considered as the same\",\n            \"@param tolerance the maximum deviation allowed between angles to be considered equal\",\n            \"@param tolerance the value that defines when angles are considered to be indistinguishable\"\n        ]\n    },\n    {\n        \"tag\": \"@param hyperplane underlying hyperplane\",\n        \"alternatives\": [\n            \"@param hyperplane the hyperplane that underlies the current hyperplane\",\n            \"@param hyperplane the base hyperplane\",\n            \"@param hyperplane the underlying plane\",\n            \"@param hyperplane the fundamental hyperplane\",\n            \"@param hyperplane the main plane\"\n        ]\n    },\n    {\n        \"tag\": \"@param remainingRegion remaining region of the hyperplane\",\n        \"alternatives\": [\n            \"@param remainingRegion the remaining part of the hyperplane's region\",\n            \"@param remainingRegion the part of the hyperplane's region that remains\",\n            \"@param remainingRegion the portion of the hyperplane's region that is left\",\n            \"@param remainingRegion the part of the hyperplane's region that still exists\",\n            \"@param remainingRegion the section of the hyperplane's region that remains\"\n        ]\n    },\n    {\n        \"tag\": \"@return the unique instance\",\n        \"alternatives\": [\n            \"@return the singular instance\",\n            \"@return the only instance\",\n            \"@return the one and only instance\",\n            \"@return the solitary instance\",\n            \"@return the exclusive instance\"\n        ]\n    }\n]"