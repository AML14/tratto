"[\n  {\n    'tag': '@param forward forward integration indicator',\n    'alternatives': [\n      '@param forward indicator for forward integration',\n      '@param forward flag indicating forward integration',\n      '@param forward indicator for performing forward integration',\n      '@param forward indicator specifying forward integration',\n      '@param forward indicator indicating forward integration'\n    ]\n  },\n  {\n    'tag': '@param acceptSmall if true, steps smaller than the minimal value\\nare silently increased up to this value, if false such small\\nsteps generate an exception',\n    'alternatives': [\n      '@param acceptSmall if true, steps smaller than the minimum value\\nare silently raised to this value, if false such small\\nsteps trigger an exception',\n      '@param acceptSmall if true, steps smaller than the minimum value\\nare quietly increased up to this value, if false such small\\nsteps produce an exception',\n      '@param acceptSmall if true, steps smaller than the minimum value\\nare increased silently up to this value, if false such small\\nsteps cause an exception',\n      '@param acceptSmall if true, steps smaller than the minimum value\\nare silently adjusted to this value, if false such small\\nsteps result in an exception',\n      '@param acceptSmall if true, steps smaller than the minimum value\\nare silently modified to this value, if false such small\\nsteps yield an exception'\n    ]\n  },\n  {\n    'tag': '@return a bounded integration step (h if no bound is reach, or a bounded value)',\n    'alternatives': [\n      '@return a bounded integration step (h if no limit is reached, or a bounded value)',\n      '@return a bounded integration step (h if no boundary is reached, or a bounded value)',\n      '@return a bounded integration step (h if no threshold is attained, or a bounded value)',\n      '@return a bounded integration step (h if no cap is hit, or a bounded value)',\n      '@return a bounded integration step (h if no constraint is met, or a bounded value)'\n    ]\n  },\n  {\n    'tag': '@throws NumberIsTooSmallException if the step is too small and acceptSmall is false',\n    'alternatives': [\n      '@throws NumberIsTooSmallException if the step is excessively small and acceptSmall is false',\n      '@throws NumberIsTooSmallException if the step is extremely small and acceptSmall is false',\n      '@throws NumberIsTooSmallException if the step is very small and acceptSmall is false',\n      '@throws NumberIsTooSmallException if the step is too tiny and acceptSmall is false',\n      '@throws NumberIsTooSmallException if the step is insufficiently small and acceptSmall is false'\n    ]\n  },\n  {\n    'tag': '@return minimal step',\n    'alternatives': [\n      '@return smallest step',\n      '@return minimum step',\n      '@return minimum value of the step',\n      '@return step with the smallest magnitude',\n      '@return step of the smallest size'\n    ]\n  },\n  {\n    'tag': '@return maximal step',\n    'alternatives': [\n      '@return largest step',\n      '@return maximum step',\n      '@return maximum value of the step',\n      '@return step with the largest magnitude',\n      '@return step of the largest size'\n    ]\n  },\n  {\n    'tag': '@param field field to which the time and state vector elements belong',\n    'alternatives': [\n      '@param field field that contains the time and state vector elements',\n      '@param field field associated with the time and state vector elements',\n      '@param field field where the time and state vector elements reside',\n      '@param field field holding the time and state vector elements',\n      '@param field field in which the time and state vector elements are located'\n    ]\n  },\n  {\n    'tag': '@param name name of the method',\n    'alternatives': [\n      '@param name method name',\n      '@param name method identifier',\n      '@param name method designation',\n      '@param name method label',\n      '@param name method title'\n    ]\n  },\n  {\n    'tag': '@param minStep minimal step (sign is irrelevant, regardless of\\nintegration direction, forward or backward), the last step can\\nbe smaller than this',\n    'alternatives': [\n      '@param minStep smallest step (sign is irrelevant, regardless of\\nintegration direction, forward or backward), the last step can\\nbe smaller than this',\n      '@param minStep minimum step (sign is irrelevant, regardless of\\nintegration direction, forward or backward), the last step can\\nbe smaller than this',\n      '@param minStep minimum value of the step (sign is irrelevant, regardless of\\nintegration direction, forward or backward), the last step can\\nbe smaller than this',\n      '@param minStep step with the smallest magnitude (sign is irrelevant, regardless of\\nintegration direction, forward or backward), the last step can\\nbe smaller than this',\n      '@param minStep step of the smallest size (sign is irrelevant, regardless of\\nintegration direction, forward or backward), the last step can\\nbe smaller than this'\n    ]\n  },\n  {\n    'tag': '@param maxStep maximal step (sign is irrelevant, regardless of\\nintegration direction, forward or backward), the last step can\\nbe smaller than this',\n    'alternatives': [\n      '@param maxStep largest step (sign is irrelevant, regardless of\\nintegration direction, forward or backward), the last step can\\nbe smaller than this',\n      '@param maxStep maximum step (sign is irrelevant, regardless of\\nintegration direction, forward or backward), the last step can\\nbe smaller than this',\n      '@param maxStep maximum value of the step (sign is irrelevant, regardless of\\nintegration direction, forward or backward), the last step can\\nbe smaller than this',\n      '@param maxStep step with the largest magnitude (sign is irrelevant, regardless of\\nintegration direction, forward or backward), the last step can\\nbe smaller than this',\n      '@param maxStep step of the largest size (sign is irrelevant, regardless of\\nintegration direction, forward or backward), the last step can\\nbe smaller than this'\n    ]\n  },\n  {\n    'tag': '@param scalAbsoluteTolerance allowed absolute error',\n    'alternatives': [\n      '@param scalAbsoluteTolerance permitted absolute error',\n      '@param scalAbsoluteTolerance acceptable absolute error',\n      '@param scalAbsoluteTolerance authorized absolute error',\n      '@param scalAbsoluteTolerance granted absolute error',\n      '@param scalAbsoluteTolerance tolerated absolute error'\n    ]\n  },\n  {\n    'tag': '@param scalRelativeTolerance allowed relative error',\n    'alternatives': [\n      '@param scalRelativeTolerance permitted relative error',\n      '@param scalRelativeTolerance acceptable relative error',\n      '@param scalRelativeTolerance authorized relative error',\n      '@param scalRelativeTolerance granted relative error',\n      '@param scalRelativeTolerance tolerated relative error'\n    ]\n  },\n  {\n    'tag': '@return the object read from the file',\n    'alternatives': [\n      '@return the object retrieved from the file',\n      '@return the object obtained from the file',\n      '@return the object extracted from the file',\n      '@return the object obtained by reading the file',\n      '@return the object parsed from the file'\n    ]\n  },\n  {\n    'tag': '@throws IOException if there is trouble reading the file',\n    'alternatives': [\n      '@throws IOException if there are difficulties reading the file',\n      '@throws IOException if there are issues reading the file',\n      '@throws IOException if there are problems reading the file',\n      '@throws IOException if there are obstacles reading the file',\n      '@throws IOException if there are complications reading the file'\n    ]\n  },\n  {\n    'tag': \"@throws ClassNotFoundException if the object's class cannot be found\",\n    'alternatives': [\n      \"@throws ClassNotFoundException if the class of the object cannot be found\",\n      \"@throws ClassNotFoundException if the object's class is not found\",\n      \"@throws ClassNotFoundException if the object's class is not located\",\n      \"@throws ClassNotFoundException if the type of the object cannot be found\",\n      \"@throws ClassNotFoundException if the class of the object is not found\"\n    ]\n  },\n  {\n    'tag': '@param r the Reader to read',\n    'alternatives': [\n      '@param r the Reader for reading',\n      '@param r the Reader used to read',\n      '@param r the Reader that reads',\n      '@param r the Reader performing the reading',\n      '@param r the Reader responsible for reading'\n    ]\n  },\n  {\n    'tag': '@return the entire contents of the reader, as a string',\n    'alternatives': [\n      '@return the complete contents of the reader, as a string',\n      '@return the whole contents of the reader, as a string',\n      '@return the full contents of the reader, as a string',\n      '@return the total contents of the reader, as a string',\n      '@return the entirety of the contents of the reader, as a string'\n    ]\n  },\n  {\n    'tag': '@param file the file to read',\n    'alternatives': [\n      '@param file the file for reading',\n      '@param file the file used to read',\n      '@param file the file that reads',\n      '@param file the file performing the reading',\n      '@param file the file responsible for reading'\n    ]\n  },\n  {\n    'tag': '@param file the file to write to',\n    'alternatives': [\n      '@param file the file for writing',\n      '@param file the file used for writing',\n      '@param file the file that writes to',\n      '@param file the file performing the writing',\n      '@param file the file responsible for writing'\n    ]\n  },\n  {\n    'tag': '@param contents the text to put in the file',\n    'alternatives': [\n      '@param contents the text to insert into the file',\n      '@param contents the text to place in the file',\n      '@param contents the text to place into the file',\n      '@param contents the text to place within the file',\n      '@param contents the text to position in the file'\n    ]\n  }\n]"