"output = [\n  {\n    'tag': '@param shape the shape parameter of the Weibull distribution',\n    'alternatives': [\n      '@param shape the parameter that represents the shape of the Weibull distribution',\n      '@param shape the Weibull distribution parameter that defines its shape',\n      '@param shape the parameter that determines the shape of the Weibull distribution',\n      '@param shape the shape parameter of the distribution known as Weibull',\n      '@param shape the parameter representing the shape of the Weibull distribution'\n    ]\n  },\n  {\n    'tag': '@param scale the scale parameter of the Weibull distribution',\n    'alternatives': [\n      '@param scale the parameter that represents the scale of the Weibull distribution',\n      '@param scale the Weibull distribution parameter that defines its scale',\n      '@param scale the parameter that determines the scale of the Weibull distribution',\n      '@param scale the scale parameter of the distribution known as Weibull',\n      '@param scale the parameter representing the scale of the Weibull distribution'\n    ]\n  },\n  {\n    'tag': '@return random value sampled from the Weibull(shape, size) distribution',\n    'alternatives': [\n      '@return a randomly sampled value from the distribution Weibull(shape, size)',\n      '@return a random number obtained from the distribution Weibull(shape, size)',\n      '@return a value randomly selected from the Weibull(shape, size) distribution',\n      '@return a randomly generated value from the Weibull(shape, size) distribution',\n      '@return a value sampled at random from the distribution Weibull(shape, size)'\n    ]\n  },\n  {\n    'tag': '@param numberOfElements the number of elements of the ZipfDistribution',\n    'alternatives': [\n      '@param numberOfElements the count of elements for the ZipfDistribution',\n      '@param numberOfElements the total number of elements in the ZipfDistribution',\n      '@param numberOfElements the quantity that represents the number of elements in the ZipfDistribution',\n      '@param numberOfElements the number of elements involved in the ZipfDistribution',\n      '@param numberOfElements the total count of elements in the ZipfDistribution'\n    ]\n  },\n  {\n    'tag': '@param exponent the exponent of the ZipfDistribution',\n    'alternatives': [\n      '@param exponent the power value for the ZipfDistribution',\n      '@param exponent the value representing the exponent of the ZipfDistribution',\n      '@param exponent the quantity that defines the exponent of the ZipfDistribution',\n      '@param exponent the exponent parameter of the ZipfDistribution',\n      '@param exponent the numerical value that denotes the exponent of the ZipfDistribution'\n    ]\n  },\n  {\n    'tag': '@return random value sampled from the Zipf(numberOfElements, exponent) distribution',\n    'alternatives': [\n      '@return a random value obtained from the Zipf(numberOfElements, exponent) distribution',\n      '@return a randomly selected value from the Zipf(numberOfElements, exponent) distribution',\n      '@return a value generated randomly following the Zipf(numberOfElements, exponent) distribution',\n      '@return a random number sampled from the Zipf(numberOfElements, exponent) distribution',\n      '@return a value that is randomly chosen from the Zipf(numberOfElements, exponent) distribution'\n    ]\n  },\n  {\n    'tag': '@param alpha first distribution shape parameter',\n    'alternatives': [\n      '@param alpha the first parameter that determines the shape of the distribution',\n      '@param alpha the shape parameter for the first distribution',\n      '@param alpha the shape parameter representing the first distribution',\n      '@param alpha the parameter that defines the shape of the first distribution',\n      '@param alpha the value that indicates the shape of the first distribution'\n    ]\n  },\n  {\n    'tag': '@param beta second distribution shape parameter',\n    'alternatives': [\n      '@param beta the second parameter that determines the shape of the distribution',\n      '@param beta the shape parameter for the second distribution',\n      '@param beta the shape parameter representing the second distribution',\n      '@param beta the parameter that defines the shape of the second distribution',\n      '@param beta the value that indicates the shape of the second distribution'\n    ]\n  },\n  {\n    'tag': '@return random value sampled from the beta(alpha, beta) distribution',\n    'alternatives': [\n      '@return a randomly sampled value from the distribution beta(alpha, beta)',\n      '@return a random number obtained from the distribution beta(alpha, beta)',\n      '@return a value randomly selected from the beta(alpha, beta) distribution',\n      '@return a randomly generated value from the beta(alpha, beta) distribution',\n      '@return a value sampled at random from the distribution beta(alpha, beta)'\n    ]\n  },\n  {\n    'tag': '@param numberOfTrials number of trials of the Binomial distribution',\n    'alternatives': [\n      '@param numberOfTrials the count of trials for the Binomial distribution',\n      '@param numberOfTrials the total number of trials in the Binomial distribution',\n      '@param numberOfTrials the quantity that represents the number of trials in the Binomial distribution',\n      '@param numberOfTrials the number of attempts involved in the Binomial distribution',\n      '@param numberOfTrials the total count of trials in the Binomial distribution'\n    ]\n  },\n  {\n    'tag': '@param probabilityOfSuccess probability of success of the Binomial distribution',\n    'alternatives': [\n      '@param probabilityOfSuccess the likelihood of success in the Binomial distribution',\n      '@param probabilityOfSuccess the chance of success in the Binomial distribution',\n      '@param probabilityOfSuccess the probability representing the success rate in the Binomial distribution',\n      '@param probabilityOfSuccess the rate of success in the Binomial distribution',\n      '@param probabilityOfSuccess the probability that indicates the success likelihood in the Binomial distribution'\n    ]\n  },\n  {\n    'tag': '@return random value sampled from the Binomial(numberOfTrials, probabilityOfSuccess) distribution',\n    'alternatives': [\n      '@return a random value obtained from the Binomial(numberOfTrials, probabilityOfSuccess) distribution',\n      '@return a randomly selected value from the Binomial(numberOfTrials, probabilityOfSuccess) distribution',\n      '@return a value generated randomly following the Binomial(numberOfTrials, probabilityOfSuccess) distribution',\n      '@return a random number sampled from the Binomial(numberOfTrials, probabilityOfSuccess) distribution',\n      '@return a value that is randomly chosen from the Binomial(numberOfTrials, probabilityOfSuccess) distribution'\n    ]\n  },\n  {\n    'tag': '@param median the median of the Cauchy distribution',\n    'alternatives': [\n      '@param median the central value of the Cauchy distribution',\n      '@param median the midpoint of the Cauchy distribution',\n      '@param median the value at the center of the Cauchy distribution',\n      '@param median the middle point representing the median of the Cauchy distribution',\n      '@param median the value that divides the Cauchy distribution into two equal parts'\n    ]\n  },\n  {\n    'tag': '@param scale the scale parameter of the Cauchy distribution',\n    'alternatives': [\n      '@param scale the parameter that represents the scale in the Cauchy distribution',\n      '@param scale the Cauchy distribution parameter that defines its scale',\n      '@param scale the parameter that determines the scale of the Cauchy distribution',\n      '@param scale the scale parameter of the distribution known as Cauchy',\n      '@param scale the parameter representing the scale of the Cauchy distribution'\n    ]\n  },\n  {\n    'tag': '@return random value sampled from the Cauchy(median, scale) distribution',\n    'alternatives': [\n      '@return a randomly sampled value from the distribution Cauchy(median, scale)',\n      '@return a random number obtained from the distribution Cauchy(median, scale)',\n      '@return a value randomly selected from the Cauchy(median, scale) distribution',\n      '@return a randomly generated value from the Cauchy(median, scale) distribution',\n      '@return a value sampled at random from the distribution Cauchy(median, scale)'\n    ]\n  },\n  {\n    'tag': '@param df the degrees of freedom of the ChiSquare distribution',\n    'alternatives': [\n      '@param df the number of degrees of freedom for the ChiSquare distribution',\n      '@param df the total count of degrees of freedom in the ChiSquare distribution',\n      '@param df the quantity representing the number of degrees of freedom in the ChiSquare distribution',\n      '@param df the degrees of freedom involved in the ChiSquare distribution',\n      '@param df the total number of degrees of freedom in the ChiSquare distribution'\n    ]\n  },\n  {\n    'tag': '@return random value sampled from the ChiSquare(df) distribution',\n    'alternatives': [\n      '@return a random value obtained from the ChiSquare(df) distribution',\n      '@return a randomly selected value from the ChiSquare(df) distribution',\n      '@return a value generated randomly following the ChiSquare(df) distribution',\n      '@return a random number sampled from the ChiSquare(df) distribution',\n      '@return a value that is randomly chosen from the ChiSquare(df) distribution'\n    ]\n  },\n  {\n    'tag': '@param numeratorDf the numerator degrees of freedom of the F distribution',\n    'alternatives': [\n      '@param numeratorDf the degrees of freedom for the numerator in the F distribution',\n      '@param numeratorDf the total count of degrees of freedom for the numerator in the F distribution',\n      '@param numeratorDf the quantity representing the degrees of freedom for the numerator in the F distribution',\n      '@param numeratorDf the degrees of freedom involved for the numerator in the F distribution',\n      '@param numeratorDf the total number of degrees of freedom for the numerator in the F distribution'\n    ]\n  },\n  {\n    'tag': '@param denominatorDf the denominator degrees of freedom of the F distribution',\n    'alternatives': [\n      '@param denominatorDf the degrees of freedom for the denominator in the F distribution',\n      '@param denominatorDf the total count of degrees of freedom for the denominator in the F distribution',\n      '@param denominatorDf the quantity representing the degrees of freedom for the denominator in the F distribution',\n      '@param denominatorDf the degrees of freedom involved for the denominator in the F distribution',\n      '@param denominatorDf the total number of degrees of freedom for the denominator in the F distribution'\n    ]\n  },\n  {\n    'tag': '@return random value sampled from the F(numeratorDf, denominatorDf) distribution',\n    'alternatives': [\n      '@return a random value obtained from the F(numeratorDf, denominatorDf) distribution',\n      '@return a randomly selected value from the F(numeratorDf, denominatorDf) distribution',\n      '@return a value generated randomly following the F(numeratorDf, denominatorDf) distribution',\n      '@return a random number sampled from the F(numeratorDf, denominatorDf) distribution',\n      '@return a value that is randomly chosen from the F(numeratorDf, denominatorDf) distribution'\n    ]\n  },\n  {\n    'tag': '@throws NotFiniteNumberException if one of the bounds is infinite',\n    'alternatives': [\n      '@throws NotFiniteNumberException if any of the boundaries is infinite',\n      '@throws NotFiniteNumberException if any of the bounds is an infinite value',\n      '@throws NotFiniteNumberException if one of the limits is infinity',\n      '@throws NotFiniteNumberException if one of the boundaries is not a finite number',\n      '@throws NotFiniteNumberException if any of the bounds is not a finite value'\n    ]\n  },\n  {\n    'tag': '@throws NotANumberException if one of the bounds is NaN',\n    'alternatives': [\n      '@throws NotANumberException if any of the boundaries is NaN',\n      '@throws NotANumberException if any of the bounds is not a number',\n      '@throws NotANumberException if one of the limits is not a number',\n      '@throws NotANumberException if one of the boundaries is NaN',\n      '@throws NotANumberException if any of the bounds is not a valid number'\n    ]\n  },\n  {\n    'tag': '@throws NotFiniteNumberException if one of the bounds is infinite',\n    'alternatives': [\n      '@throws NotFiniteNumberException if any of the boundaries is infinite',\n      '@throws NotFiniteNumberException if any of the bounds is an infinite value',\n      '@throws NotFiniteNumberException if one of the limits is infinity',\n      '@throws NotFiniteNumberException if one of the boundaries is not a finite number',\n      '@throws NotFiniteNumberException if any of the bounds is not a finite value'\n    ]\n  },\n  {\n    'tag': '@throws NotANumberException if one of the bounds is NaN',\n    'alternatives': [\n      '@throws NotANumberException if any of the boundaries is NaN',\n      '@throws NotANumberException if any of the bounds is not a number',\n      '@throws NotANumberException if one of the limits is not a number',\n      '@throws NotANumberException if one of the boundaries is NaN',\n      '@throws NotANumberException if any of the bounds is not a valid number'\n    ]\n  },\n  {\n    'tag': '@param seed the seed value to use',\n    'alternatives': [\n      '@param seed the value to be used as the seed',\n      '@param seed the value that will serve as the seed',\n      '@param seed the value to use as the initial seed',\n      '@param seed the initial value to use as the seed',\n      '@param seed the value that will be used as the seed'\n    ]\n  }\n]"