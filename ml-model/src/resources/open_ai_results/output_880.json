"output = [\n  {\n    'tag': '@throws UnsupportedOperationException always',\n    'alternatives': [\n      '@throws UnsupportedOperationException always',\n      '@throws UnsupportedOperationException constantly',\n      '@throws UnsupportedOperationException at all times',\n      '@throws UnsupportedOperationException every time',\n      '@throws UnsupportedOperationException unfailingly'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if queue is null',\n    'alternatives': [\n      '@throws NullPointerException if queue is null',\n      '@throws NullPointerException in case of null queue',\n      '@throws NullPointerException when queue is null',\n      '@throws NullPointerException if the queue parameter is null',\n      '@throws NullPointerException if the queue is null'\n    ]\n  },\n  {\n    'tag': '@param fromIndexInclusive the index to start from',\n    'alternatives': [\n      '@param fromIndexInclusive the index to start from',\n      '@param the starting index is fromIndexInclusive',\n      '@param the start position is fromIndexInclusive',\n      '@param fromIndexInclusive is the index to begin from',\n      '@param fromIndexInclusive indicates the starting index'\n    ]\n  },\n  {\n    'tag': '@param toIndexExclusive the index to end at',\n    'alternatives': [\n      '@param toIndexExclusive the index to end at',\n      '@param the ending index is toIndexExclusive',\n      '@param the end position is toIndexExclusive',\n      '@param toIndexExclusive is the index to terminate at',\n      '@param toIndexExclusive indicates the ending index'\n    ]\n  },\n  {\n    'tag': '@return the new sublist',\n    'alternatives': [\n      '@return the new sublist',\n      '@return the newly created sub-list',\n      '@return the recently generated sublist',\n      '@return the fresh sub-list',\n      '@return the brand new sublist'\n    ]\n  },\n  {\n    'tag': '@return true if equal',\n    'alternatives': [\n      '@return true if equal',\n      '@return true in case of equality',\n      '@return true if they are equal',\n      '@return true when they are equal',\n      '@return true if they are the same'\n    ]\n  },\n  {\n    'tag': '@param node node to update',\n    'alternatives': [\n      '@param node node to update',\n      '@param node the node to update',\n      '@param node that needs updating',\n      '@param the node to be updated',\n      '@param node that requires updating'\n    ]\n  },\n  {\n    'tag': '@param value new value of the node',\n    'alternatives': [\n      '@param value new value of the node',\n      '@param value the node\\'s new value',\n      '@param value of the updated node',\n      '@param the updated node\\'s value',\n      '@param value for the updated node'\n    ]\n  },\n  {\n    'tag': '@return newly created node',\n    'alternatives': [\n      '@return newly created node',\n      '@return newly generated node',\n      '@return recently created node',\n      '@return freshly created node',\n      '@return newly instantiated node'\n    ]\n  },\n  {\n    'tag': '@param value value of the new node',\n    'alternatives': [\n      '@param value value of the new node',\n      '@param value the value of the fresh node',\n      '@param value for the newly created node',\n      '@param value that the new node holds',\n      '@param value of the recently created node'\n    ]\n  },\n  {\n    'tag': '@return a new node containing the value',\n    'alternatives': [\n      '@return a new node containing the value',\n      '@return a fresh node holding the value',\n      '@return a newly created node with the value',\n      '@return a brand new node that contains the value',\n      '@return a recently generated node that holds the value'\n    ]\n  },\n  {\n    'tag': '@param node node to insert before',\n    'alternatives': [\n      '@param node node to insert before',\n      '@param node to be inserted before',\n      '@param node that is inserted before',\n      '@param node before which to insert',\n      '@param node that comes before the insertion'\n    ]\n  },\n  {\n    'tag': '@param value value of the newly added node',\n    'alternatives': [\n      '@param value value of the newly added node',\n      '@param value the value of the newly inserted node',\n      '@param value for the recently added node',\n      '@param value that is assigned to the new node',\n      '@param value of the node that was just added'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if <code>node</code> is null',\n    'alternatives': [\n      '@throws NullPointerException if <code>node</code> is null',\n      '@throws NullPointerException in case of a null <code>node</code>',\n      '@throws NullPointerException if <code>node</code> parameter is null',\n      '@throws NullPointerException if <code>node</code> is null reference',\n      '@throws NullPointerException if <code>node</code> is null object'\n    ]\n  },\n  {\n    'tag': '@param node node to insert after',\n    'alternatives': [\n      '@param node node to insert after',\n      '@param node to be inserted after',\n      '@param node that is inserted after',\n      '@param node after which to insert',\n      '@param node that comes after the insertion'\n    ]\n  },\n  {\n    'tag': '@param value value of the newly added node',\n    'alternatives': [\n      '@param value value of the newly added node',\n      '@param value the value of the newly inserted node',\n      '@param value for the recently added node',\n      '@param value that is assigned to the new node',\n      '@param value of the node that was just added'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if <code>node</code> is null',\n    'alternatives': [\n      '@throws NullPointerException if <code>node</code> is null',\n      '@throws NullPointerException in case of a null <code>node</code>',\n      '@throws NullPointerException if <code>node</code> parameter is null',\n      '@throws NullPointerException if <code>node</code> is null reference',\n      '@throws NullPointerException if <code>node</code> is null object'\n    ]\n  },\n  {\n    'tag': '@param nodeToInsert new node to insert',\n    'alternatives': [\n      '@param nodeToInsert new node to insert',\n      '@param nodeToInsert the node to be inserted',\n      '@param nodeToInsert that should be added',\n      '@param nodeToInsert to insert as new node',\n      '@param nodeToInsert for the insertion as new node'\n    ]\n  },\n  {\n    'tag': '@param insertBeforeNode node to insert before',\n    'alternatives': [\n      '@param insertBeforeNode node to insert before',\n      '@param insertBeforeNode the node to be inserted before',\n      '@param insertBeforeNode that is inserted before',\n      '@param insertBeforeNode before which to insert',\n      '@param insertBeforeNode that comes before the insertion'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if either node is null',\n    'alternatives': [\n      '@throws NullPointerException if either node is null',\n      '@throws NullPointerException in case any node is null',\n      '@throws NullPointerException if any node is null',\n      '@throws NullPointerException if one of the nodes is null',\n      '@throws NullPointerException if any of the nodes are null'\n    ]\n  },\n  {\n    'tag': '@param node the node to remove',\n    'alternatives': [\n      '@param node the node to remove',\n      '@param node that needs removal',\n      '@param the node that should be removed',\n      '@param node to be eliminated',\n      '@param node for removal'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if <code>node</code> is null',\n    'alternatives': [\n      '@throws NullPointerException if <code>node</code> is null',\n      '@throws NullPointerException in case of a null <code>node</code>',\n      '@throws NullPointerException if <code>node</code> parameter is null',\n      '@throws NullPointerException if <code>node</code> is null reference',\n      '@throws NullPointerException if <code>node</code> is null object'\n    ]\n  },\n  {\n    'tag': '@param index the index, starting from 0',\n    'alternatives': [\n      '@param index the index, starting from 0',\n      '@param index that starts from 0',\n      '@param index beginning from 0',\n      '@param index with a starting value of 0',\n      '@param index that originates from 0'\n    ]\n  },\n  {\n    'tag': \"@param endMarkerAllowed whether or not the end marker can be returned if\\nstartIndex is set to the list's size\",\n    'alternatives': [\n      \"@param endMarkerAllowed whether or not the end marker can be returned if\\nstartIndex is set to the list's size\",\n      \"@param endMarkerAllowed indicates if the end marker can be returned when\\neither the startIndex is set at the list's size\",\n      \"@param endMarkerAllowed specifies if the end marker is permitted to be returned\\nif the startIndex is set to the size of the list\",\n      \"@param endMarkerAllowed tells whether the end marker can be returned in case the\\nstartIndex is at the list's size\",\n      \"@param endMarkerAllowed states whether the end marker is allowed to be returned\\nif the startIndex is set to the list's size\"\n    ]\n  },\n  {\n    'tag': '@return the node at the given index',\n    'alternatives': [\n      '@return the node at the given index',\n      '@return the node found at the specified index',\n      '@return the node retrieved from the provided index',\n      '@return the node located at the supplied index',\n      '@return the node obtained at the given index'\n    ]\n  }\n]"