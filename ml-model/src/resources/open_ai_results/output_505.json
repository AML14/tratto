"output = [\n  {\n    'tag': '@param d2FdYdZ Values of the cross partial derivative of function on every grid point.',\n    'alternatives': [\n      '@param d2FdYdZ Values of the cross partial differentiation of the function on each grid point.',\n      '@param d2FdYdZ Values of the cross partial derivative of the function at each grid point.',\n      '@param d2FdYdZ Values of the cross partial derivative of the function on all grid points.',\n      '@param d2FdYdZ Values of the cross partial derivative of function at each point on the grid.',\n      '@param d2FdYdZ Values of the cross partial derivative of the function evaluated at each grid point.'\n    ]\n  },\n  {\n    'tag': '@param d3FdXdYdZ Values of the cross partial derivative of function on every grid point.',\n    'alternatives': [\n      '@param d3FdXdYdZ Values of the cross partial derivative of the function at each grid point.',\n      '@param d3FdXdYdZ Values of the cross partial derivative of the function on all grid points.',\n      '@param d3FdXdYdZ Values of the cross partial differentiation of the function on each grid point.',\n      '@param d3FdXdYdZ Values of the cross partial derivative of the function evaluated at each grid point.',\n      '@param d3FdXdYdZ Values of the cross partial derivative of function at each point on the grid.'\n    ]\n  },\n  {\n    'tag': '@throws NoDataException if any of the arrays has zero length.',\n    'alternatives': [\n      '@throws NoDataException when any of the arrays has a length of zero.',\n      '@throws NoDataException if any of the arrays is empty.',\n      '@throws NoDataException if any of the arrays contains no elements.',\n      '@throws NoDataException in case any of the arrays has a size of zero.',\n      '@throws NoDataException if any of the arrays is devoid of data.'\n    ]\n  },\n  {\n    'tag': '@throws DimensionMismatchException if the various arrays do not contain the expected number of elements.',\n    'alternatives': [\n      '@throws DimensionMismatchException when the different arrays do not have the intended number of elements.',\n      '@throws DimensionMismatchException if the expected number of elements is not found in the various arrays.',\n      '@throws DimensionMismatchException if the arrays have different sizes than expected.',\n      '@throws DimensionMismatchException if the arrays do not have the correct number of elements.',\n      '@throws DimensionMismatchException in case the arrays do not match the expected number of elements.'\n    ]\n  },\n  {\n    'tag': '@throws NonMonotonicSequenceException if {@code x}, {@code y} or {@code z} are not strictly increasing.',\n    'alternatives': [\n      '@throws NonMonotonicSequenceException if {@code x}, {@code y} or {@code z} do not follow a strictly increasing order.',\n      '@throws NonMonotonicSequenceException when the values of {@code x}, {@code y} or {@code z} are not steadily increasing.',\n      '@throws NonMonotonicSequenceException if the values of {@code x}, {@code y} or {@code z} are not strictly ascending.',\n      '@throws NonMonotonicSequenceException in case {@code x}, {@code y} or {@code z} are not in a strictly increasing sequence.',\n      '@throws NonMonotonicSequenceException if the sequence of {@code x}, {@code y} or {@code z} is not strictly ascending.'\n    ]\n  },\n  {\n    'tag': '@param x x-coordinate of the interpolation point.',\n    'alternatives': [\n      '@param x x-coordinate of the point to perform the interpolation on.',\n      '@param x the x-coordinate of the point for which the interpolation is required.',\n      '@param x the x-coordinate of the point being interpolated.',\n      '@param x the x-coordinate of the interpolation location.',\n      '@param x the x-coordinate of the point to apply the interpolation to.'\n    ]\n  },\n  {\n    'tag': '@param y y-coordinate of the interpolation point.',\n    'alternatives': [\n      '@param y y-coordinate of the point to perform the interpolation on.',\n      '@param y the y-coordinate of the point for which the interpolation is required.',\n      '@param y the y-coordinate of the point being interpolated.',\n      '@param y the y-coordinate of the interpolation location.',\n      '@param y the y-coordinate of the point to apply the interpolation to.'\n    ]\n  },\n  {\n    'tag': '@param z z-coordinate of the interpolation point.',\n    'alternatives': [\n      '@param z z-coordinate of the point to perform the interpolation on.',\n      '@param z the z-coordinate of the point for which the interpolation is required.',\n      '@param z the z-coordinate of the point being interpolated.',\n      '@param z the z-coordinate of the interpolation location.',\n      '@param z the z-coordinate of the point to apply the interpolation to.'\n    ]\n  },\n  {\n    'tag': '@return the interpolated value.',\n    'alternatives': [\n      '@return the value obtained from the interpolation.',\n      '@return the resulting value after the interpolation.',\n      '@return the value obtained through the process of interpolation.',\n      '@return the value that is interpolated.',\n      '@return the final value obtained after the interpolation.'\n    ]\n  },\n  {\n    'tag': '@throws OutOfRangeException if {@code x}, {@code y} or\\n{@code z} are not in the interval {@code [0, 1]}.',\n    'alternatives': [\n      '@throws OutOfRangeException when {@code x}, {@code y} or\\n{@code z} are outside the range of {@code [0, 1]}.',\n      '@throws OutOfRangeException if {@code x}, {@code y} or\\n{@code z} fall outside the interval {@code [0, 1]}.',\n      '@throws OutOfRangeException if {@code x}, {@code y} or\\n{@code z} exceed the range of {@code [0, 1]}.',\n      '@throws OutOfRangeException in case {@code x}, {@code y} or\\n{@code z} do not lie within the interval {@code [0, 1]}.',\n      '@throws OutOfRangeException if {@code x}, {@code y} or\\n{@code z} are not within the range {@code [0, 1]}.'\n    ]\n  },\n  {\n    'tag': '@param value value to concatenate to the previous value of the property',\n    'alternatives': [\n      '@param value value to append to the existing value of the property',\n      '@param value the value that will be added to the previous value of the property',\n      '@param value the value to be concatenated with the current value of the property',\n      '@param value the value that will be merged with the current value of the property',\n      '@param value the new value that will be combined with the existing value of the property'\n    ]\n  },\n  {\n    'tag': '@return the previous value of the property',\n    'alternatives': [\n      '@return the value of the property before the change',\n      '@return the value that was previously assigned to the property',\n      '@return the value that was set for the property before the modification',\n      '@return the value that existed before the property was altered',\n      '@return the value that was in place for the property prior to the modification'\n    ]\n  },\n  {\n    'tag': '@param p a Properties object in which to look up the property',\n    'alternatives': [\n      '@param p a Properties object used to search for the property',\n      '@param p a Properties object to be used for retrieving the property',\n      '@param p a Properties object used to retrieve the desired property',\n      '@param p a Properties object where the property will be searched for',\n      '@param p a Properties object that contains the property to be retrieved'\n    ]\n  },\n  {\n    'tag': '@param key name of the property to look up',\n    'alternatives': [\n      '@param key the name of the property to search for',\n      '@param key the identifier of the property to be retrieved',\n      '@param key the name of the property that will be searched for',\n      '@param key the key used to identify the property to retrieve',\n      '@param key the name of the property that needs to be looked up'\n    ]\n  },\n  {\n    'tag': '@param value value to set the property to, if it is not already set',\n    'alternatives': [\n      '@param value value to assign to the property if it is not currently set',\n      '@param value the value to assign as the property if it is not already set',\n      '@param value the value that will be used to set the property if it is not currently set',\n      '@param value the value to be applied as the property if it is not yet set',\n      '@param value the value that will be used to define the property if it is not set yet'\n    ]\n  },\n  {\n    'tag': '@return the previous value of the property',\n    'alternatives': [\n      '@return the value of the property before the change',\n      '@return the value that was previously assigned to the property',\n      '@return the value that was set for the property before the modification',\n      '@return the value that existed before the property was altered',\n      '@return the value that was in place for the property prior to the modification'\n    ]\n  },\n  {\n    'tag': '@param o object in which to set the field',\n    'alternatives': [\n      '@param o object to hold the value of the field',\n      '@param o the object that will contain the field value',\n      '@param o object where the field will be assigned',\n      '@param o object to store the value for the field',\n      '@param o the object that will maintain the field'\n    ]\n  },\n  {\n    'tag': '@param fieldName name of field to set',\n    'alternatives': [\n      '@param fieldName the name of the field to assign',\n      '@param fieldName the identifier of the field to be assigned',\n      '@param fieldName the field name that will be set',\n      '@param fieldName the name of the field that needs to be assigned',\n      '@param fieldName the field name that will be assigned'\n    ]\n  },\n  {\n    'tag': '@param value new value of field',\n    'alternatives': [\n      '@param value the value to assign to the field',\n      '@param value the new value to be set for the field',\n      '@param value the value that will be applied to the field',\n      '@param value the value that will be assigned to the field',\n      '@param value the value that will replace the existing field value'\n    ]\n  },\n  {\n    'tag': '@throws NoSuchFieldException if the field does not exist in the object',\n    'alternatives': [\n      '@throws NoSuchFieldException when the field is not found in the object',\n      '@throws NoSuchFieldException if the object does not have the specified field',\n      '@throws NoSuchFieldException if the field is not present in the object',\n      '@throws NoSuchFieldException in case the field is not available in the object',\n      '@throws NoSuchFieldException if the object does not contain the field'\n    ]\n  },\n  {\n    'tag': '@param o object in which to set the field',\n    'alternatives': [\n      '@param o object to hold the value of the field',\n      '@param o the object that will contain the field value',\n      '@param o object where the field will be assigned',\n      '@param o object to store the value for the field',\n      '@param o the object that will maintain the field'\n    ]\n  },\n  {\n    'tag': '@param fieldName name of field to set',\n    'alternatives': [\n      '@param fieldName the name of the field to assign',\n      '@param fieldName the identifier of the field to be assigned',\n      '@param fieldName the field name that will be set',\n      '@param fieldName the name of the field that needs to be assigned',\n      '@param fieldName the field name that will be assigned'\n    ]\n  },\n  {\n    'tag': '@return new value of field',\n    'alternatives': [\n      '@return the value that will replace the existing field value',\n      '@return the newly assigned value of the field',\n      '@return the value that will be set for the field',\n      '@return the updated value of the field',\n      '@return the value replacing the previous field value'\n    ]\n  },\n  {\n    'tag': '@throws NoSuchFieldException if the field does not exist in the object',\n    'alternatives': [\n      '@throws NoSuchFieldException when the field is not found in the object',\n      '@throws NoSuchFieldException if the object does not have the specified field',\n      '@throws NoSuchFieldException if the field is not present in the object',\n      '@throws NoSuchFieldException in case the field is not available in the object',\n      '@throws NoSuchFieldException if the object does not contain the field'\n    ]\n  },\n  {\n    'tag': '@param set a set in which to look up the value',\n    'alternatives': [\n      '@param set a set to search for the value',\n      '@param set a set used to find the value',\n      '@param set a set in which to find the desired value',\n      '@param set a set to be searched for the value',\n      '@param set a set where the value will be looked up'\n    ]\n  }\n]"