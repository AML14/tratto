"output = [\n  {\n    'tag': '@return intersection point of the instance and the other line\\nor null if there are no intersection points',\n    'alternatives': [\n      '@return intersection point of the object and the other line\\nor null if there are no intersection points',\n      '@return point of intersection between the instance and the other line\\nor null if there are no intersection points',\n      '@return the point where the instance and the other line intersect\\nor null if there are no intersection points'\n    ]\n  },\n  {\n    'tag': '@return a region containing the instance (really a {@link\\nPolygonsSet PolygonsSet} instance)',\n    'alternatives': [\n      '@return a region that includes the object (in fact a {@link PolygonsSet PolygonsSet} instance)',\n      '@return a region that encompasses the instance (specifically a {@link PolygonsSet PolygonsSet} instance)',\n      '@return a region that contains the object (specifically a {@link PolygonsSet PolygonsSet} instance)'\n    ]\n  },\n  {\n    'tag': '@param line line to check',\n    'alternatives': [\n      '@param line the line to be checked',\n      '@param line the line that needs to be checked',\n      '@param line the line that should be checked'\n    ]\n  },\n  {\n    'tag': '@return offset of the line',\n    'alternatives': [\n      '@return line offset',\n      '@return the offset of the line',\n      '@return the line's offset'\n    ]\n  },\n  {\n    'tag': '@param vector vector to check',\n    'alternatives': [\n      '@param vector the vector to be checked',\n      '@param vector the vector that needs to be checked',\n      '@param vector the vector that should be checked'\n    ]\n  },\n  {\n    'tag': '@return offset of the vector',\n    'alternatives': [\n      '@return vector offset',\n      '@return the offset of the vector',\n      '@return the vector's offset'\n    ]\n  },\n  {\n    'tag': '@param abscissa desired abscissa for the point',\n    'alternatives': [\n      '@param abscissa the desired abscissa for the point',\n      '@param abscissa the abscissa value that is desired for the point',\n      '@param abscissa the abscissa value desired for the point'\n    ]\n  },\n  {\n    'tag': '@param offset desired offset for the point',\n    'alternatives': [\n      '@param offset the desired offset for the point',\n      '@param offset the offset value that is desired for the point',\n      '@param offset the offset value desired for the point'\n    ]\n  },\n  {\n    'tag': '@return one point in the plane, with given abscissa and offset\\nrelative to the line',\n    'alternatives': [\n      '@return a point in the plane, with the abscissa and offset given\\nrelative to the line',\n      '@return a point in the plane that has the specified abscissa and offset\\nrelative to the line',\n      '@return a point in the plane, having a given abscissa and offset\\nrelative to the line'\n    ]\n  },\n  {\n    'tag': '@param p point to check',\n    'alternatives': [\n      '@param p the point to be checked',\n      '@param p the point that needs to be checked',\n      '@param p the point that should be checked'\n    ]\n  },\n  {\n    'tag': '@return true if p belongs to the line',\n    'alternatives': [\n      '@return true if the point belongs to the line',\n      '@return true if the line contains the point',\n      '@return true if the line includes the point'\n    ]\n  },\n  {\n    'tag': '@param p to check',\n    'alternatives': [\n      '@param p the point to be checked',\n      '@param p the point that needs to be checked',\n      '@param p the point that should be checked'\n    ]\n  },\n  {\n    'tag': '@return distance between the instance and the point',\n    'alternatives': [\n      '@return distance between the object and the point',\n      '@return the distance between the instance and the specified point',\n      '@return the distance between the object and the point'\n    ]\n  },\n  {\n    'tag': '@param line other line to check',\n    'alternatives': [\n      '@param line the other line to be checked',\n      '@param line the other line that needs to be checked',\n      '@param line the other line that should be checked'\n    ]\n  },\n  {\n    'tag': '@return true if the instance is parallel to the other line\\n(they can have either the same or opposite orientations)',\n    'alternatives': [\n      '@return true if the object is parallel to the other line\\n(they can have either the same or opposite orientations)',\n      '@return true if the instance and the other line are parallel\\n(they can have either the same or opposite orientations)',\n      '@return true if the object and the other line are parallel\\n(they can have either the same or opposite orientations)'\n    ]\n  },\n  {\n    'tag': '@param p point by which the line should pass',\n    'alternatives': [\n      '@param p the point through which the line should pass',\n      '@param p the point that the line should pass through',\n      '@param p the point that should be traversed by the line'\n    ]\n  },\n  {\n    'tag': '@return the angle of the line with respect to the abscissa axis',\n    'alternatives': [\n      '@return the angle between the line and the abscissa axis',\n      '@return the angle formed by the line with respect to the abscissa axis',\n      '@return the angle that the line makes with the abscissa axis'\n    ]\n  },\n  {\n    'tag': '@param angle new angle of the line with respect to the abscissa axis',\n    'alternatives': [\n      '@param angle the new angle of the line relative to the abscissa axis',\n      '@param angle the angle that should be assigned to the line\\nwith respect to the abscissa axis',\n      '@param angle the updated angle of the line with respect to the abscissa axis'\n    ]\n  },\n  {\n    'tag': '@return the offset of the origin',\n    'alternatives': [\n      '@return origin offset',\n      '@return the offset of the origin point',\n      '@return the offset of the reference point'\n    ]\n  },\n  {\n    'tag': '@param offset offset of the origin',\n    'alternatives': [\n      '@param offset the offset of the origin point',\n      '@param offset the offset of the reference point',\n      '@param offset the offset that should be applied to the origin'\n    ]\n  },\n  {\n    'tag': '@param transform affine transform to embed (must be inversible\\notherwise the {@link\\norg.apache.commons.math3.geometry.partitioning.Transform#apply(Hyperplane)\\napply(Hyperplane)} method would work only for some lines, and\\nfail for other ones)',\n    'alternatives': [\n      '@param transform the affine transform to incorporate (should be invertible\\notherwise the {@link\\norg.apache.commons.math3.geometry.partitioning.Transform#apply(Hyperplane)\\napply(Hyperplane)} method will only work for a subset of lines and\\nfail for others)',\n      '@param transform the affine transform that needs to be embedded (needs to be invertible\\notherwise the {@link\\norg.apache.commons.math3.geometry.partitioning.Transform#apply(Hyperplane)\\napply(Hyperplane)} method will work for only certain lines and\\nfail for others)',\n      '@param transform the affine transform that should be used to embed (must be invertible\\notherwise the {@link\\norg.apache.commons.math3.geometry.partitioning.Transform#apply(Hyperplane)\\napply(Hyperplane)} method will be functional for only some lines and\\nfail for others)'\n    ]\n  },\n  {\n    'tag': '@return a new transform that can be applied to either {@link\\nVector2D Vector2D}, {@link Line Line} or {@link\\norg.apache.commons.math3.geometry.partitioning.SubHyperplane\\nSubHyperplane} instances',\n    'alternatives': [\n      '@return a new transform applicable to either {@link\\nVector2D Vector2D}, {@link Line Line} or\\n{@link org.apache.commons.math3.geometry.partitioning.SubHyperplane\\nSubHyperplane} instances',\n      '@return a new transform that can be used on {@link\\nVector2D Vector2D}, {@link Line Line} or\\n{@link org.apache.commons.math3.geometry.partitioning.SubHyperplane\\nSubHyperplane} instances',\n      '@return a new transform that is able to operate on either {@link\\nVector2D Vector2D}, {@link Line Line} or\\n{@link org.apache.commons.math3.geometry.partitioning.SubHyperplane\\nSubHyperplane} instances'\n    ]\n  },\n  {\n    'tag': '@throws MathIllegalArgumentException if the transform is non invertible',\n    'alternatives': [\n      '@throws MathIllegalArgumentException if the transform is not invertible',\n      '@throws MathIllegalArgumentException if the transform cannot be inverted',\n      '@throws MathIllegalArgumentException if the transform is not reversible'\n    ]\n  },\n  {\n    'tag': '@param cXX transform factor between input abscissa and output abscissa',\n    'alternatives': [\n      '@param cXX transform coefficient for input abscissa to output abscissa',\n      '@param cXX transform scalar between input abscissa and output abscissa',\n      '@param cXX transform value from input abscissa to output abscissa'\n    ]\n  },\n  {\n    'tag': '@param cYX transform factor between input abscissa and output ordinate',\n    'alternatives': [\n      '@param cYX transform coefficient for input abscissa to output ordinate',\n      '@param cYX transform scalar between input abscissa and output ordinate',\n      '@param cYX transform value from input abscissa to output ordinate'\n    ]\n  }\n]"