"output = [\n  {\n    'tag': '@param callback The callback to invoke when {@code future} is completed.',\n    'alternatives': [\n      '@param callback The function to call when {@code future} is done.',\n      '@param callback The method to execute when {@code future} is finished.',\n      '@param callback The action to perform when {@code future} completes.'\n    ]\n  },\n  {\n    'tag': '@param executor The executor to run {@code callback} when the future\\n   completes.',\n    'alternatives': [\n      '@param executor The executor to execute {@code callback} once the future completes.',\n      '@param executor The executor to run {@code callback} after the future is done.',\n      '@param executor The executor to use for running {@code callback} when the future finishes.'\n    ]\n  },\n  {\n    'tag': '@throws X if {@code get} throws any checked exception except for an {@code\\n        ExecutionException} whose cause is not itself a checked exception',\n    'alternatives': [\n      '@throws X if {@code get} raises any checked exception, except for an {@code ExecutionException} whose cause is not a checked exception itself.',\n      '@throws X if {@code get} throws any checked exception, except for an {@code ExecutionException} that does not have a checked exception as its cause.',\n      '@throws X if {@code get} results in any checked exception, except for an {@code ExecutionException} where the cause is not a checked exception itself.'\n    ]\n  },\n  {\n    'tag': '@throws UncheckedExecutionException if {@code get} throws an {@code\\n        ExecutionException} with a {@code RuntimeException} as its cause',\n    'alternatives': [\n      '@throws UncheckedExecutionException if {@code get} throws an {@code ExecutionException} and the cause of that exception is a {@code RuntimeException}.',\n      '@throws UncheckedExecutionException if {@code get} raises an {@code ExecutionException} where the cause is a {@code RuntimeException}.',\n      '@throws UncheckedExecutionException if {@code get} results in an {@code ExecutionException} whose cause is a {@code RuntimeException}.'\n    ]\n  },\n  {\n    'tag': '@throws ExecutionError if {@code get} throws an {@code ExecutionException}\\n        with an {@code Error} as its cause',\n    'alternatives': [\n      '@throws ExecutionError if {@code get} raises an {@code ExecutionException} and the cause is an {@code Error}.',\n      '@throws ExecutionError if {@code get} results in an {@code ExecutionException} with an {@code Error} as the underlying cause.',\n      '@throws ExecutionError if {@code get} throws an {@code ExecutionException} and the cause is an {@code Error} object.'\n    ]\n  },\n  {\n    'tag': '@throws CancellationException if {@code get} throws a {@code\\n        CancellationException}',\n    'alternatives': [\n      '@throws CancellationException if {@code get} raises a {@code CancellationException}.',\n      '@throws CancellationException if calling {@code get} results in a {@code CancellationException}.',\n      '@throws CancellationException if {@code get} throws a {@code CancellationException} object.'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if {@code exceptionClass} extends {@code\\n        RuntimeException} or does not have a suitable constructor',\n    'alternatives': [\n      '@throws IllegalArgumentException if {@code exceptionClass} is a subclass of {@code RuntimeException} or does not possess a suitable constructor.',\n      '@throws IllegalArgumentException if {@code exceptionClass} is derived from {@code RuntimeException} or does not have an appropriate constructor.',\n      '@throws IllegalArgumentException if {@code exceptionClass} extends {@code RuntimeException} or lacks a valid constructor.'\n    ]\n  },\n  {\n    'tag': '@throws UncheckedExecutionException if {@code get} throws an {@code\\n        ExecutionException} with an {@code Exception} as its cause',\n    'alternatives': [\n      '@throws UncheckedExecutionException if {@code get} raises an {@code ExecutionException} that has an {@code Exception} as its cause.',\n      '@throws UncheckedExecutionException if {@code get} throws an {@code ExecutionException} and the underlying cause is an {@code Exception}.',\n      '@throws UncheckedExecutionException if {@code get} results in an {@code ExecutionException} and the cause is an {@code Exception}.'\n    ]\n  },\n  {\n    'tag': '@throws ExecutionError if {@code get} throws an {@code ExecutionException}\\n        with an {@code Error} as its cause',\n    'alternatives': [\n      '@throws ExecutionError if {@code get} raises an {@code ExecutionException} with an {@code Error} as the cause.',\n      '@throws ExecutionError if {@code get} throws an {@code ExecutionException} and the cause is an {@code Error} object.',\n      '@throws ExecutionError if {@code get} results in an {@code ExecutionException} with an underlying {@code Error}.'\n    ]\n  },\n  {\n    'tag': '@throws CancellationException if {@code get} throws a {@code\\n        CancellationException}',\n    'alternatives': [\n      '@throws CancellationException if {@code get} raises a {@code CancellationException}.',\n      '@throws CancellationException if calling {@code get} results in a {@code CancellationException}.',\n      '@throws CancellationException if {@code get} throws a {@code CancellationException} object.'\n    ]\n  }\n]\n\n"