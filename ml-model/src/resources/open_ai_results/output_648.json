"output=[\n  {\n    'tag': '@throws NullPointerException if the entry is null',\n    'alternatives': [\n      '@throws NullPointerException if the entry is null',\n      '@throws NullPointerException in case of null entry',\n      '@throws NullPointerException when the entry is null',\n      '@throws NullPointerException if null entry is provided',\n      '@throws NullPointerException if entry is null'\n    ]\n  },\n  {\n    'tag': '@param entry the entry to query, must not be null',\n    'alternatives': [\n      '@param entry the entry to query, must not be null',\n      '@param entry parameter to query, should not be null',\n      '@param entry to query, must be non-null',\n      '@param entry the entry to be queried, should not be null',\n      '@param entry the queried entry, must not be null'\n    ]\n  },\n  {\n    'tag':'@return the <code>key</code> field of the entry',\n    'alternatives': [\n      '@return the <code>key</code> field of the entry',\n      '@return the field <code>key</code> of the entry',\n      '@return the entry\\'s <code>key</code> field',\n      '@return the entry\\'s field <code>key</code>',\n      '@return the <code>key</code> field of the entry object'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if the entry is null',\n    'alternatives': [\n      '@throws NullPointerException if the entry is null',\n      '@throws NullPointerException in case of null entry',\n      '@throws NullPointerException when the entry is null',\n      '@throws NullPointerException if null entry is provided',\n      '@throws NullPointerException if entry is null'\n    ]\n  },\n  {\n    'tag': '@param entry the entry to query, must not be null',\n    'alternatives': [\n      '@param entry the entry to query, must not be null',\n      '@param entry parameter to query, should not be null',\n      '@param entry to query, must be non-null',\n      '@param entry the entry to be queried, should not be null',\n      '@param entry the queried entry, must not be null'\n    ]\n  },\n  {\n    'tag':'@return the <code>value</code> field of the entry',\n    'alternatives': [\n      '@return the <code>value</code> field of the entry',\n      '@return the field <code>value</code> of the entry',\n      '@return the entry\\'s <code>value</code> field',\n      '@return the entry\\'s field <code>value</code>',\n      '@return the <code>value</code> field of the entry object'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if the entry is null',\n    'alternatives': [\n      '@throws NullPointerException if the entry is null',\n      '@throws NullPointerException in case of null entry',\n      '@throws NullPointerException when the entry is null',\n      '@throws NullPointerException if null entry is provided',\n      '@throws NullPointerException if entry is null'\n    ]\n  },\n  {\n    'tag':'@return the map iterator',\n    'alternatives': [\n      '@return the map iterator',\n      '@return iterator of the map',\n      '@return iterator for the map',\n      '@return map traversal iterator',\n      '@return iterator over the map'\n    ]\n  },\n  {\n    'tag':'@return the entrySet view',\n    'alternatives': [\n      '@return the entrySet view',\n      '@return view of the entrySet',\n      '@return entrySet representation',\n      '@return entrySet of the map',\n      '@return view of the entrySet of the map'\n    ]\n  },\n  {\n    'tag':'@return the entrySet iterator',\n    'alternatives': [\n      '@return the entrySet iterator',\n      '@return iterator of the entrySet',\n      '@return entrySet traversal iterator',\n      '@return iterator over the entrySet',\n      '@return iterator for the entrySet'\n    ]\n  },\n  {\n    'tag':'@return the keySet view',\n    'alternatives': [\n      '@return the keySet view',\n      '@return view of the keySet',\n      '@return keySet representation',\n      '@return keySet of the map',\n      '@return view of the keySet of the map'\n    ]\n  },\n  {\n    'tag':'@return the keySet iterator',\n    'alternatives': [\n      '@return the keySet iterator',\n      '@return iterator of the keySet',\n      '@return keySet traversal iterator',\n      '@return iterator over the keySet',\n      '@return iterator for the keySet'\n    ]\n  },\n  {\n    'tag':'@return the values view',\n    'alternatives': [\n      '@return the values view',\n      '@return view of the values',\n      '@return values representation',\n      '@return values of the map',\n      '@return view of the values of the map'\n    ]\n  },\n  {\n    'tag':'@return the values iterator',\n    'alternatives': [\n      '@return the values iterator',\n      '@return iterator of the values',\n      '@return values traversal iterator',\n      '@return iterator over the values',\n      '@return iterator for the values'\n    ]\n  },\n  {\n    'tag':'@param out the output stream',\n    'alternatives': [\n      '@param out the output stream',\n      '@param out the stream to write to',\n      '@param out output stream parameter',\n      '@param out stream to use for output',\n      '@param out the target output stream'\n    ]\n  },\n  {\n    'tag':'@param y Sample values of the y-coordinate, in increasing order.',\n    'alternatives': [\n      '@param y Sample values of the y-coordinate, in increasing order.',\n      '@param y values that are samples of the y-coordinate, ordered in an increasing manner',\n      '@param y values representing the y-coordinate, arranged in ascending order',\n      '@param y values of the y-coordinate, ordered increasingly',\n      '@param y values that are samples of the y-axis, sorted in ascending order'\n    ]\n  },\n  {\n    'tag':'@param f Values of the function on every grid point.',\n    'alternatives': [\n      '@param f Values of the function on every grid point.',\n      '@param f function values for each grid point',\n      '@param f values of the function at each grid point',\n      '@param f function values at all grid points',\n      '@param f values of the function on each grid point'\n    ]\n  },\n  {\n    'tag':'@param dFdX Values of the partial derivative of function with respect to x on every grid point.',\n    'alternatives': [\n      '@param dFdX Values of the partial derivative of function with respect to x on every grid point.',\n      '@param dFdX values of the partial derivative of the function with respect to x at each grid point',\n      '@param dFdX partial derivative of the function with respect to x values at each grid point',\n      '@param dFdX values of the derivative of the function with respect to x for each grid point',\n      '@param dFdX derivative of the function with respect to x values for each grid point'\n    ]\n  },\n  {\n    'tag':'@param dFdY Values of the partial derivative of function with respect to y on every grid point.',\n    'alternatives': [\n      '@param dFdY Values of the partial derivative of function with respect to y on every grid point.',\n      '@param dFdY values of the partial derivative of the function with respect to y at each grid point',\n      '@param dFdY partial derivative of the function with respect to y values at each grid point',\n      '@param dFdY values of the derivative of the function with respect to y for each grid point',\n      '@param dFdY derivative of the function with respect to y values for each grid point'\n    ]\n  },\n  {\n    'tag':'@param d2FdXdY Values of the cross partial derivative of function on every grid point.',\n    'alternatives': [\n      '@param d2FdXdY Values of the cross partial derivative of function on every grid point.',\n      '@param d2FdXdY values of the cross partial derivative of the function at each grid point',\n      '@param d2FdXdY cross partial derivative of the function values at every grid point',\n      '@param d2FdXdY values of the function\\'s cross partial derivative for each grid point',\n      '@param d2FdXdY function\\'s cross partial derivative values for each grid point'\n    ]\n  },\n  {\n    'tag':'@throws DimensionMismatchException if the various arrays do not contain the expected number of elements.',\n    'alternatives': [\n      '@throws DimensionMismatchException if the various arrays do not contain the expected number of elements.',\n      '@throws DimensionMismatchException when the arrays have a different size than expected',\n      '@throws DimensionMismatchException if the arrays have an unexpected number of elements',\n      '@throws DimensionMismatchException if the size of the arrays is different than required',\n      '@throws DimensionMismatchException if the number of elements in the arrays is not as expected'\n    ]\n  },\n  {\n    'tag':'@throws NonMonotonicSequenceException if {@code x} or {@code y} are not strictly increasing.',\n    'alternatives': [\n      '@throws NonMonotonicSequenceException if {@code x} or {@code y} are not strictly increasing.',\n      '@throws NonMonotonicSequenceException when either {@code x} or {@code y} are not strictly ascending',\n      '@throws NonMonotonicSequenceException if {@code x} or {@code y} do not follow a strictly increasing pattern',\n      '@throws NonMonotonicSequenceException if either {@code x} or {@code y} are not in strictly ascending order',\n      '@throws NonMonotonicSequenceException if either {@code x} or {@code y} lack a strictly increasing trend'\n    ]\n  },\n  {\n    'tag':'@param x Sample values of the x-coordinate, in increasing order.',\n    'alternatives': [\n      '@param x Sample values of the x-coordinate, in increasing order.',\n      '@param x values that are samples of the x-coordinate, ordered in an increasing manner',\n      '@param x values representing the x-coordinate, arranged in ascending order',\n      '@param x values of the x-coordinate, ordered increasingly',\n      '@param x values that are samples of the x-axis, sorted in ascending order'\n    ]\n  },\n  {\n    'tag':'@param y Sample values of the y-coordinate, in increasing order.',\n    'alternatives': [\n      '@param y Sample values of the y-coordinate, in increasing order.',\n      '@param y values that are samples of the y-coordinate, ordered in an increasing manner',\n      '@param y values representing the y-coordinate, arranged in ascending order',\n      '@param y values of the y-coordinate, ordered increasingly',\n      '@param y values that are samples of the y-axis, sorted in ascending order'\n    ]\n  },\n  {\n    'tag':'@param f Values of the function on every grid point.',\n    'alternatives': [\n      '@param f Values of the function on every grid point.',\n      '@param f function values for each grid point',\n      '@param f values of the function at each grid point',\n      '@param f function values at all grid points',\n      '@param f values of the function on each grid point'\n    ]\n  }\n]\n\n"