"output=[\n{\n  'tag': '@param divisor the divisor (denominator)',\n  'alternatives': [\n    '@param divisor the divisor (denominator)',\n    '@param denominator the divisor',\n    '@param dividend the dividend (numerator)'\n  ]\n},\n{\n  'tag': '@param dividend the dividend (numerator)',\n  'alternatives': [\n    '@param dividend the dividend (numerator)',\n    '@param numerator the dividend',\n    '@param dividend the numerator'\n  ]\n},\n{\n  'tag': '@param divisor the divisor (denominator)',\n  'alternatives': [\n    '@param divisor the divisor (denominator)',\n    '@param denominator the divisor',\n    '@param dividend the dividend (numerator)'\n  ]\n},\n{\n  'tag': '@throws NumberFormatException if the string does not contain a valid unsigned {@code int} value',\n  'alternatives': [\n    '@throws NumberFormatException if the string does not contain a valid unsigned {@code int} value',\n    '@throws NumberFormatException if the string lacks a valid unsigned {@code int} value',\n    '@throws NumberFormatException if the string is not a valid unsigned {@code int}'\n  ]\n},\n{\n  'tag': '@throws NumberFormatException if the string does not contain a valid unsigned {@code int} value',\n  'alternatives': [\n    '@throws NumberFormatException if the string does not contain a valid unsigned {@code int} value',\n    '@throws NumberFormatException if the string lacks a valid unsigned {@code int} value',\n    '@throws NumberFormatException if the string is not a valid unsigned {@code int}'\n  ]\n},\n{\n  'tag': '@param string the string containing the unsigned integer representation to be parsed.',\n  'alternatives': [\n    '@param string the string containing the unsigned integer representation to be parsed.',\n    '@param s the string containing the unsigned integer to be parsed.',\n    '@param str the string that holds the unsigned integer representation to be parsed.'\n  ]\n},\n{\n  'tag': '@param radix the radix to use while parsing {@code s}; must be between\\n       {@link Character#MIN_RADIX} and {@link Character#MAX_RADIX}.',\n  'alternatives': [\n    '@param radix the radix to use while parsing {@code s}; must be between\\n       {@link Character#MIN_RADIX} and {@link Character#MAX_RADIX}.',\n    '@param radix the base to use for parsing {@code s}; must be in the range\\n       {@link Character#MIN_RADIX} to {@link Character#MAX_RADIX}.',\n    '@param radix the numerical base for parsing {@code s}; must be between\\n       {@link Character#MIN_RADIX} and {@link Character#MAX_RADIX}.'\n  ]\n},\n{\n  'tag': '@throws NumberFormatException if the string does not contain a valid unsigned {@code int}, or\\n        if supplied radix is invalid.',\n  'alternatives': [\n    '@throws NumberFormatException if the string does not contain a valid unsigned {@code int}, or\\n        if supplied radix is invalid.',\n    '@throws NumberFormatException if the string is not a valid unsigned {@code int}, or\\n        the given radix is invalid.',\n    '@throws NumberFormatException if the string lacks a valid unsigned {@code int}, or\\n        if the supplied radix is invalid.'\n  ]\n},\n{\n  'tag': '@throws NullPointerException if {@code s} is null\\n        (in contrast to {@link Integer#parseInt(String)})',\n  'alternatives': [\n    '@throws NullPointerException if {@code s} is null\\n        (in contrast to {@link Integer#parseInt(String)})',\n    '@throws NullPointerException if the string {@code s} is null\\n        (unlike {@link Integer#parseInt(String)})',\n    '@throws NullPointerException if the argument {@code s} is null\\n        (contrary to {@link Integer#parseInt(String)})'\n  ]\n},\n{\n  'tag': '@param x the value to convert to a string.',\n  'alternatives': [\n    '@param x the value to convert to a string.',\n    '@param value the value that will be converted to a string.',\n    '@param val the value which will be converted into a string.'\n  ]\n},\n{\n  'tag': '@param radix the radix to use while working with {@code x}',\n  'alternatives': [\n    '@param radix the radix to use while working with {@code x}',\n    '@param base the radix to be employed while operating on {@code x}',\n    '@param scale the numerical base for manipulating {@code x}'\n  ]\n},\n{\n  'tag': '@throws IllegalArgumentException if {@code radix} is not between {@link Character#MIN_RADIX}\\n        and {@link Character#MAX_RADIX}.',\n  'alternatives': [\n    '@throws IllegalArgumentException if {@code radix} is not between {@link Character#MIN_RADIX}\\n        and {@link Character#MAX_RADIX}.',\n    '@throws IllegalArgumentException if the radix is not between\\n        {@link Character#MIN_RADIX} and {@link Character#MAX_RADIX}.',\n    '@throws IllegalArgumentException if the numerical base is not within\\n        the range of {@link Character#MIN_RADIX} to {@link Character#MAX_RADIX}.'\n  ]\n},\n{\n  'tag': '@throws IllegalArgumentException if {@code value} is negative or {@code value >= 2^64}',\n  'alternatives': [\n    '@throws IllegalArgumentException if {@code value} is negative or {@code value >= 2^64}',\n    '@throws IllegalArgumentException if {@code value} is either negative\\n        or greater than or equal to 2^64',\n    '@throws IllegalArgumentException if the specified value {@code value} is less\\n        than zero or equal to or greater than 2^64'\n  ]\n},\n{\n  'tag': '@throws NumberFormatException if the string does not contain a parsable unsigned {@code long}\\n    value',\n  'alternatives': [\n    '@throws NumberFormatException if the string does not contain a parsable unsigned {@code long}\\n    value',\n    '@throws NumberFormatException if the string is not parseable as an unsigned {@code long}\\n    value',\n    '@throws NumberFormatException if the string lacks a parsable unsigned {@code long}\\n    value'\n  ]\n},\n{\n  'tag': '@throws NumberFormatException if the string does not contain a parsable unsigned {@code long}\\n    value, or {@code radix} is not between {@link Character#MIN_RADIX} and\\n    {@link Character#MAX_RADIX}',\n  'alternatives': [\n    '@throws NumberFormatException if the string does not contain a parsable unsigned {@code long}\\n    value, or {@code radix} is not between {@link Character#MIN_RADIX} and\\n    {@link Character#MAX_RADIX}',\n    '@throws NumberFormatException if the string is not parseable as an unsigned {@code long}\\n    value, or if the supplied radix is not between\\n    {@link Character#MIN_RADIX} and {@link Character#MAX_RADIX}',\n    '@throws NumberFormatException if the string lacks a parsable unsigned {@code long}\\n    value, or if the provided radix is not within\\n    {@link Character#MIN_RADIX} and {@link Character#MAX_RADIX}'\n  ]\n},\n{\n  'tag': '@param value a primitive {@code int} value',\n  'alternatives': [\n    '@param value a primitive {@code int} value',\n    '@param val a primitive integer value',\n    '@param x a primitive value of type {@code int}'\n  ]\n},\n{\n  'tag': '@return a hash code for the value',\n  'alternatives': [\n    '@return a hash code for the value',\n    '@return an integer hash code for the given value',\n    '@return a hash value that represents the given object'\n  ]\n},\n{\n  'tag': '@param value any value in the range of the {@code int} type',\n  'alternatives': [\n    '@param value any value in the range of the {@code int} type',\n    '@param val any value within the range of the {@code int} type',\n    '@param x a value that falls within the range of the {@code int} type'\n  ]\n},\n{\n  'tag': '@return the {@code int} value that equals {@code value}',\n  'alternatives': [\n    '@return the {@code int} value that equals {@code value}',\n    '@return the {@code int} value which is equal to {@code value}',\n    '@return the {@code int} value that is equivalent to {@code value}'\n  ]\n},\n{\n  'tag': '@throws IllegalArgumentException if {@code value} is greater than {@link\\n    Integer#MAX_VALUE} or less than {@link Integer#MIN_VALUE}',\n  'alternatives': [\n    '@throws IllegalArgumentException if {@code value} is greater than {@link\\n    Integer#MAX_VALUE} or less than {@link Integer#MIN_VALUE}',\n    '@throws IllegalArgumentException if {@code value} exceeds {@link Integer#MAX_VALUE}\\n    or is less than {@link Integer#MIN_VALUE}',\n    '@throws IllegalArgumentException if {@code value} is above {@link Integer#MAX_VALUE}\\n    or below {@link Integer#MIN_VALUE}'\n  ]\n},\n{\n  'tag': '@param value any {@code long} value',\n  'alternatives': [\n    '@param value any {@code long} value',\n    '@param val any value of type {@code long}',\n    '@param x any value represented as a {@code long}'\n  ]\n},\n{\n  'tag': '@return the same value cast to {@code int} if it is in the range of the\\n    {@code int} type, {@link Integer#MAX_VALUE} if it is too large,\\n    or {@link Integer#MIN_VALUE} if it is too small',\n  'alternatives': [\n    '@return the same value cast to {@code int} if it is in the range of the\\n    {@code int} type, {@link Integer#MAX_VALUE} if it is too large,\\n    or {@link Integer#MIN_VALUE} if it is too small',\n    '@return if the value is within the range of the {@code int} type, it will be\\n    cast to {@code int}; if it is larger than the range,\\n    {@link Integer#MAX_VALUE} will be returned; if it is smaller than\\n    the range, {@link Integer#MIN_VALUE} will be returned',\n    '@return the value, cast to {@code int}, if it falls within the range\\n    of the {@code int} type; if the value is too large,\\n    {@link Integer#MAX_VALUE} will be returned; if the value is too\\n    small, {@link Integer#MIN_VALUE} will be returned'\n  ]\n},\n{\n  'tag': '@param a the first {@code int} to compare',\n  'alternatives': [\n    '@param a the first {@code int} to compare',\n    '@param x the first {@code int} value for comparison',\n    '@param arg1 the first integer value to compare'\n  ]\n},\n{\n  'tag': '@param b the second {@code int} to compare',\n  'alternatives': [\n    '@param b the second {@code int} to compare',\n    '@param y the second {@code int} value for comparison',\n    '@param arg2 the second integer value to compare'\n  ]\n},\n{\n  'tag': '@return a negative value if {@code a} is less than {@code b}; a positive\\n    value if {@code a} is greater than {@code b}; or zero if they are equal',\n  'alternatives': [\n    '@return a negative value if {@code a} is less than {@code b}; a positive\\n    value if {@code a} is greater than {@code b}; or zero if they are equal',\n    '@return a negative integer if {@code a} is less than {@code b}; a positive\\n    integer if {@code a} is greater than {@code b}; or zero if they are equal',\n    '@return a negative integer value if {@code a} is less than {@code b};\\n    a positive integer value if {@code a} is greater than {@code b};\\n    or zero if they are equal'\n  ]\n}\n]"