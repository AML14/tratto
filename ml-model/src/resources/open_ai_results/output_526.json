"output = [\n  {\n    'tag': '@return data transfer object that will be serialized',\n    'alternatives': [\n      '@return serialized data transfer object',\n      '@return serialized DTO',\n      '@return object that will be serialized as data transfer',\n      '@return serialized data object',\n      '@return DTO that will be serialized'\n    ]\n  },\n  {\n    'tag': '@param point Point coordinates. This instance will store\\na copy of the array, not the array passed as argument.',\n    'alternatives': [\n      '@param point Coordinates of the point. This instance will store\\na clone of the array, not the array passed as argument.',\n      '@param coordinates Point coordinates. This instance will keep\\na copy of the array, not the array passed as argument.',\n      '@param point Point coordinates. This instance will retain\\na duplicate of the array, not the array passed as argument.',\n      '@param point Point coordinates. This instance will hold\\na replicated version of the array, not the array passed as argument.',\n      '@param point Point coordinates. This instance will maintain\\na copied array, not the array passed as argument.'\n    ]\n  },\n  {\n    'tag': '@param value Value of the objective function at the point.',\n    'alternatives': [\n      '@param value Objective function value at the point.',\n      '@param value Value of the function to optimize at the point.',\n      '@param value Value of the objective function at this point.',\n      '@param value Objective function value for the given point.',\n      '@param value Value of the objective function evaluated at the point.'\n    ]\n  },\n  {\n    'tag': '@param point Point coordinates.',\n    'alternatives': [\n      '@param point Coordinates of the point.',\n      '@param point Point location.',\n      '@param point Point position.',\n      '@param point Point in space.',\n      '@param point Point object.'\n    ]\n  },\n  {\n    'tag': '@param value Value of the objective function at the point.',\n    'alternatives': [\n      '@param value Objective function value at the point.',\n      '@param value Value of the function to optimize at the point.',\n      '@param value Value of the objective function at this point.',\n      '@param value Objective function value for the given point.',\n      '@param value Value of the objective function evaluated at the point.'\n    ]\n  },\n  {\n    'tag': '@param copyArray if {@code true}, the input arrays will be copied,\\notherwise they will be referenced.',\n    'alternatives': [\n      '@param copyArray if {@code true}, duplicate the input arrays,\\notherwise reference them.',\n      '@param copyArray if {@code true}, create copies of the input arrays,\\notherwise use references.',\n      '@param copyArray if {@code true}, clone the input arrays,\\notherwise use references.',\n      '@param copyArray if {@code true}, make duplicates of the input arrays,\\notherwise refer them.',\n      '@param copyArray if {@code true}, replicate the input arrays,\\notherwise point to them.'\n    ]\n  },\n  {\n    'tag': '@param optimizer Single-start optimizer to wrap.',\n    'alternatives': [\n      '@param optimizer Optimizer to wrap for single-start.',\n      '@param optimizer Single-start wrapper for the optimizer.',\n      '@param optimizer Single-start optimization wrapper.',\n      '@param optimizer Optimizer to encapsulate for single-start.',\n      '@param optimizer Wrapper for the single-start optimizer.'\n    ]\n  },\n  {\n    'tag': '@param starts Number of starts to perform (including the\\nfirst one), multi-start is disabled if value is less than or\\nequal to 1.',\n    'alternatives': [\n      '@param starts Number of starts to execute (including the\\nfirst one), multi-start is disabled when value is less than or\\nequal to 1.',\n      '@param starts Number of iterations to run (including the\\nfirst one), multi-start is turned off if value is less than or\\nequal to 1.',\n      '@param starts Number of attempts to perform (including the\\nfirst one), multi-start is deactivated if value is less than or\\nequal to 1.',\n      '@param starts Number of starts to conduct (including the\\nfirst one), multi-start is not enabled if value is less than or\\nequal to 1.',\n      '@param starts Number of trials to run (including the\\nfirst one), multi-start is not allowed if value is less than or\\nequal to 1.'\n    ]\n  },\n  {\n    'tag': '@param generator Random vector generator to use for restarts.',\n    'alternatives': [\n      '@param generator Random vector generator for restarts.',\n      '@param generator Random vector generator used for restarts.',\n      '@param generator Generator of random vectors for restarts.',\n      '@param generator Random vector generator to be used for restarts.',\n      '@param generator Random vector generator for performing restarts.'\n    ]\n  },\n  {\n    'tag': '@param optimizer Single-start optimizer to wrap.',\n    'alternatives': [\n      '@param optimizer Optimizer to wrap for single-start.',\n      '@param optimizer Single-start wrapper for the optimizer.',\n      '@param optimizer Single-start optimization wrapper.',\n      '@param optimizer Optimizer to encapsulate for single-start.',\n      '@param optimizer Wrapper for the single-start optimizer.'\n    ]\n  },\n  {\n    'tag': '@param starts Number of starts to perform (including the\\nfirst one), multi-start is disabled if value is less than or\\nequal to 1.',\n    'alternatives': [\n      '@param starts Number of starts to execute (including the\\nfirst one), multi-start is disabled when value is less than or\\nequal to 1.',\n      '@param starts Number of iterations to run (including the\\nfirst one), multi-start is turned off if value is less than or\\nequal to 1.',\n      '@param starts Number of attempts to perform (including the\\nfirst one), multi-start is deactivated if value is less than or\\nequal to 1.',\n      '@param starts Number of starts to conduct (including the\\nfirst one), multi-start is not enabled if value is less than or\\nequal to 1.',\n      '@param starts Number of trials to run (including the\\nfirst one), multi-start is not allowed if value is less than or\\nequal to 1.'\n    ]\n  },\n  {\n    'tag': '@param generator Random vector generator to use for restarts.',\n    'alternatives': [\n      '@param generator Random vector generator for restarts.',\n      '@param generator Random vector generator used for restarts.',\n      '@param generator Generator of random vectors for restarts.',\n      '@param generator Random vector generator to be used for restarts.',\n      '@param generator Random vector generator for performing restarts.'\n    ]\n  },\n  {\n    'tag': '@param iteration Index of current iteration',\n    'alternatives': [\n      '@param iteration Current iteration index',\n      '@param iteration Index of the iteration in progress',\n      '@param iteration Index of the current iteration step',\n      '@param iteration Index of the ongoing iteration',\n      '@param iteration Index representing the current iteration'\n    ]\n  },\n  {\n    'tag': '@param previous Best point in the previous iteration.',\n    'alternatives': [\n      '@param previous The best point from the previous iteration.',\n      '@param previous Best solution in the preceding iteration.',\n      '@param previous The optimal point in the previous iteration.',\n      '@param previous The point with the highest score in the previous iteration.',\n      '@param previous The best outcome from the previous iteration.'\n    ]\n  },\n  {\n    'tag': '@param current Best point in the current iteration.',\n    'alternatives': [\n      '@param current The best point in the current iteration.',\n      '@param current The optimal point in the current iteration.',\n      '@param current Best solution in the ongoing iteration.',\n      '@param current The point with the highest score in the current iteration.',\n      '@param current The best outcome in the current iteration.'\n    ]\n  },\n  {\n    'tag': '@return {@code true} if the arguments satify the convergence criterion.',\n    'alternatives': [\n      '@return {@code true} if the criteria for convergence are satisfied by the arguments.',\n      '@return {@code true} if the convergence criterion is met by the given arguments.',\n      '@return {@code true} if the provided arguments meet the convergence criterion.',\n      '@return {@code true} if the convergence condition is satisfied based on the input arguments.',\n      '@return {@code true} if the convergence criteria are fulfilled by the arguments.'\n    ]\n  },\n  {\n    'tag': '@param relativeThreshold relative tolerance threshold',\n    'alternatives': [\n      '@param relativeThreshold threshold for relative tolerance',\n      '@param relativeThreshold threshold value for relative tolerance',\n      '@param relativeThreshold tolerance threshold for relative values',\n      '@param relativeThreshold relative tolerance limit',\n      '@param relativeThreshold threshold for relative tolerances'\n    ]\n  },\n  {\n    'tag': '@param absoluteThreshold absolute tolerance threshold',\n    'alternatives': [\n      '@param absoluteThreshold threshold for absolute tolerance',\n      '@param absoluteThreshold threshold value for absolute tolerance',\n      '@param absoluteThreshold tolerance threshold for absolute values',\n      '@param absoluteThreshold absolute tolerance limit',\n      '@param absoluteThreshold threshold for absolute tolerances'\n    ]\n  },\n  {\n    'tag': '@param relativeThreshold Relative tolerance threshold.',\n    'alternatives': [\n      '@param relativeThreshold Threshold for relative tolerance.',\n      '@param relativeThreshold Value to determine relative tolerance.',\n      '@param relativeThreshold Limit for relative tolerances.',\n      '@param relativeThreshold Relative tolerance limit.',\n      '@param relativeThreshold Threshold for relative tolerances.'\n    ]\n  },\n  {\n    'tag': '@param absoluteThreshold Absolute tolerance threshold.',\n    'alternatives': [\n      '@param absoluteThreshold Threshold for absolute tolerance.',\n      '@param absoluteThreshold Value to determine absolute tolerance.',\n      '@param absoluteThreshold Limit for absolute tolerances.',\n      '@param absoluteThreshold Absolute tolerance limit.',\n      '@param absoluteThreshold Threshold for absolute tolerances.'\n    ]\n  },\n  {\n    'tag': '@param maxIter Maximum iteration count.',\n    'alternatives': [\n      '@param maxIter Maximum number of iterations.',\n      '@param maxIter Maximum count of iterations.',\n      '@param maxIter Maximum iteration limit.',\n      '@param maxIter Maximum number of times to iterate.',\n      '@param maxIter Maximum number of iterations allowed.'\n    ]\n  },\n  {\n    'tag': '@param iteration Index of current iteration',\n    'alternatives': [\n      '@param iteration Current iteration index',\n      '@param iteration Index of the iteration in progress',\n      '@param iteration Index of the current iteration step',\n      '@param iteration Index of the ongoing iteration',\n      '@param iteration Index representing the current iteration'\n    ]\n  },\n  {\n    'tag': '@param previous Best point in the previous iteration.',\n    'alternatives': [\n      '@param previous The best point from the previous iteration.',\n      '@param previous Best solution in the preceding iteration.',\n      '@param previous The optimal point in the previous iteration.',\n      '@param previous The point with the highest score in the previous iteration.',\n      '@param previous The best outcome from the previous iteration.'\n    ]\n  },\n  {\n    'tag': '@param current Best point in the current iteration.',\n    'alternatives': [\n      '@param current The best point in the current iteration.',\n      '@param current The optimal point in the current iteration.',\n      '@param current Best solution in the ongoing iteration.',\n      '@param current The point with the highest score in the current iteration.',\n      '@param current The best outcome in the current iteration.'\n    ]\n  },\n  {\n    'tag': '@return {@code true} if the arguments satify the convergence criterion.',\n    'alternatives': [\n      '@return {@code true} if the criteria for convergence are satisfied by the arguments.',\n      '@return {@code true} if the convergence criterion is met by the given arguments.',\n      '@return {@code true} if the provided arguments meet the convergence criterion.',\n      '@return {@code true} if the convergence condition is satisfied based on the input arguments.',\n      '@return {@code true} if the convergence criteria are fulfilled by the arguments.'\n    ]\n  }\n]"