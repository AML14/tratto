"output = [\n  {\n    'tag': '@throws java.util.NoSuchElementException if all the Iterators are\\nexhausted',\n    'alternatives': [\n      '@throws java.util.NoSuchElementException if all the Iterators become\\nexhausted',\n      '@throws java.util.NoSuchElementException if all the Iterators are\\nempty',\n      '@throws java.util.NoSuchElementException if all the Iterators get\\nexhausted',\n      '@throws java.util.NoSuchElementException if all the Iterators are\\ndepleted',\n      '@throws java.util.NoSuchElementException if all the Iterators reach\\nthe end'\n    ]\n  },\n  {\n    'tag': '@throws UnsupportedOperationException if the remove operator is not\\nsupported by the underlying Iterator',\n    'alternatives': [\n      '@throws UnsupportedOperationException if the underlying Iterator does not\\nsupport the remove operator',\n      '@throws UnsupportedOperationException if the remove operator is not\\nsupported by the Iterator underneath',\n      '@throws UnsupportedOperationException if the remove operator is not\\nallowed by the underlying Iterator',\n      '@throws UnsupportedOperationException if the underlying Iterator does not\\nprovide support for the remove operator',\n      '@throws UnsupportedOperationException if the Iterable beneath does not\\nsupport the remove operator'\n    ]\n  },\n  {\n    'tag': '@throws IllegalStateException if the next method has not yet been called,\\nor the remove method has already been called after the last call to the\\nnext method.',\n    'alternatives': [\n      '@throws IllegalStateException if the remove method has already been called\\nafter the last call to the next method or if the next method has not yet\\nbeen invoked',\n      '@throws IllegalStateException if the remove method has been called after\\nthe last invocation to the next method, or if the next method has not yet\\nbeen invoked',\n      '@throws IllegalStateException if the remove method is called after the\\nlast invocation of the next method, or if the next method has not been\\nused yet',\n      '@throws IllegalStateException if the remove method has already been called\\nafter the last call to the next method, or if the next method has not\\nbeen called yet',\n      '@throws IllegalStateException if the remove method has been called after\\nthe last call to the next method, or if the next method has not been\\ncalled yet'\n    ]\n  },\n  {\n    'tag': \"@throws ClassCastException if iterators collection doesn't contain an\\niterator\",\n    'alternatives': [\n      \"@throws ClassCastException if the collection of iterators does not\\ncontain an iterator\",\n      \"@throws ClassCastException if the iterator collection does not include\\nan iterator\",\n      \"@throws ClassCastException if the collection of iterators does not\\nhold any iterator\",\n      \"@throws ClassCastException if there is no iterator in the iterators\\ncollection\",\n      \"@throws ClassCastException if there is no iterator present in the\\niterators collection\"\n    ]\n  },\n  {\n    'tag': '@param <E> the element type',\n    'alternatives': [\n      '@param <E> the type of the elements',\n      '@param <E> the generic type of the elements',\n      '@param <E> the type of elements in the collection',\n      '@param <E> the type of objects contained in the collection',\n      '@param <E> the element datatype'\n    ]\n  },\n  {\n    'tag': '@return {@link ResettableListIterator}<E>',\n    'alternatives': [\n      '@return the {@link ResettableListIterator} object of type <E>',\n      '@return the object of type <E> representing the {@link ResettableListIterator}',\n      '@return the {@link ResettableListIterator} object with elements of type <E>',\n      '@return the {@link ResettableListIterator} representing objects of type <E>',\n      '@return the {@link ResettableListIterator} with elements of type <E>'\n    ]\n  },\n  {\n    'tag': '@param <E> the element type',\n    'alternatives': [\n      '@param <E> the element datatype',\n      '@param <E> the type of the elements',\n      '@param <E> the generic type of the elements',\n      '@param <E> the type of objects contained in the collection',\n      '@param <E> the datatype of the elements'\n    ]\n  },\n  {\n    'tag': '@return {@link ListIterator}<E>',\n    'alternatives': [\n      '@return the {@link ListIterator} object of type <E>',\n      '@return the object of type <E> representing the {@link ListIterator}',\n      '@return the {@link ListIterator} object with elements of type <E>',\n      '@return the {@link ListIterator} representing objects of type <E>',\n      '@return the {@link ListIterator} with elements of type <E>'\n    ]\n  },\n  {\n    'tag': '@param <K> the key type',\n    'alternatives': [\n      '@param <K> the type of the key',\n      '@param <K> the datatype of the key',\n      '@param <K> the generic type of the key',\n      '@param <K> the key datatype',\n      '@param <K> the type of the keys'\n    ]\n  },\n  {\n    'tag': '@param <V> the value type',\n    'alternatives': [\n      '@param <V> the type of the value',\n      '@param <V> the datatype of the value',\n      '@param <V> the generic type of the value',\n      '@param <V> the value datatype',\n      '@param <V> the type of the values'\n    ]\n  },\n  {\n    'tag': '@param iterator the iterator to decorate',\n    'alternatives': [\n      '@param iterator the iterator that needs to be decorated',\n      '@param iterator the iterator for which decoration is required',\n      '@param iterator the iterator that should be decorated',\n      '@param iterator the iterator requiring decoration',\n      '@param iterator the iterator that needs decoration'\n    ]\n  },\n  {\n    'tag': '@return a new unmodifiable ordered map iterator',\n    'alternatives': [\n      '@return a freshly created iterator for an unmodifiable ordered map',\n      '@return a newly constructed iterator for an unmodifiable ordered map',\n      '@return a brand new iterator that iterates over an unmodifiable ordered\\nmap',\n      '@return a newly created iterator that is unmodifiable and iterates\\nover an ordered map',\n      '@return a newly instantiated iterator that is unmodifiable and\\niterates over an ordered map'\n    ]\n  },\n  {\n    'tag': '@param iterator the iterator to decorate',\n    'alternatives': [\n      '@param iterator the iterator that needs to be decorated',\n      '@param iterator the iterator for which decoration is required',\n      '@param iterator the iterator that should be decorated',\n      '@param iterator the iterator requiring decoration',\n      '@param iterator the iterator that needs decoration'\n    ]\n  },\n  {\n    'tag': '@return the decorated iterator',\n    'alternatives': [\n      '@return the iterator after being decorated',\n      '@return the iterator that has been decorated',\n      '@return the iterator with decoration',\n      '@return the iterator once it is decorated',\n      '@return the iterator having undergone decoration'\n    ]\n  },\n  {\n    'tag': '@return true if this iterator has remaining elements',\n    'alternatives': [\n      '@return true if there are still elements in this iterator',\n      '@return true if there are more elements in this iterator',\n      '@return true if there are elements left in this iterator',\n      '@return true if this iterator still contains elements',\n      '@return true if there are elements remaining in this iterator'\n    ]\n  },\n  {\n    'tag': '@return the next interleaved element',\n    'alternatives': [\n      '@return the next element that is interleaved',\n      '@return the element that comes next in the interleaved sequence',\n      '@return the subsequent element in the interleaved order',\n      '@return the following element in the interleaved series',\n      '@return the element that is coming next in the interleaved pattern'\n    ]\n  },\n  {\n    'tag': '@throws NoSuchElementException if no child iterator has any more elements',\n    'alternatives': [\n      '@throws NoSuchElementException if none of the child iterators contain\\nany additional elements',\n      '@throws NoSuchElementException if none of the child iterators have more\\nelements',\n      '@throws NoSuchElementException if all child iterators have been\\nexhausted',\n      '@throws NoSuchElementException if there are no more elements in any of\\nthe child iterators',\n      '@throws NoSuchElementException if there are no additional elements in\\nany of the child iterators'\n    ]\n  },\n  {\n    'tag': '@throws IllegalStateException if there is no last returned element, or if\\n  the last returned element has already been removed',\n    'alternatives': [\n      '@throws IllegalStateException if the last returned element has already\\nbeen removed or if there is no last returned element',\n      '@throws IllegalStateException if the last returned element has been\\nremoved already or if there is no last returned element',\n      '@throws IllegalStateException if there is no last returned element or if\\nthe last returned element has already been removed',\n      '@throws IllegalStateException if there is no last returned element or if\\nthe last returned element has been removed already',\n      '@throws IllegalStateException if there is no last returned element or if\\nthe last returned element is already removed'\n    ]\n  },\n  {\n    'tag': '@param a the first child iterator',\n    'alternatives': [\n      '@param a the initial child iterator',\n      '@param a the first iterator among the children',\n      '@param a the child iterator in the beginning',\n      '@param a the initial iterator in the children sequence',\n      '@param a the first iterator of the child iterators'\n    ]\n  },\n  {\n    'tag': '@param b the second child iterator',\n    'alternatives': [\n      '@param b the second iterator among the children',\n      '@param b the next child iterator',\n      '@param b the child iterator that follows',\n      '@param b the subsequent iterator of the children',\n      '@param b the second iterator of the child iterators'\n    ]\n  },\n  {\n    'tag': '@param a the first child iterator',\n    'alternatives': [\n      '@param a the initial child iterator',\n      '@param a the first iterator among the children',\n      '@param a the child iterator in the beginning',\n      '@param a the initial iterator in the children sequence',\n      '@param a the first iterator of the child iterators'\n    ]\n  },\n  {\n    'tag': '@param b the second child iterator',\n    'alternatives': [\n      '@param b the second iterator among the children',\n      '@param b the next child iterator',\n      '@param b the child iterator that follows',\n      '@param b the subsequent iterator of the children',\n      '@param b the second iterator of the child iterators'\n    ]\n  },\n  {\n    'tag': '@param c the third child iterator',\n    'alternatives': [\n      '@param c the third iterator among the children',\n      '@param c the child iterator that comes next',\n      '@param c the child iterator after the second iterator',\n      '@param c the subsequent iterator in the children sequence',\n      '@param c the third iterator of the child iterators'\n    ]\n  },\n  {\n    'tag': '@param iterators the array of iterators',\n    'alternatives': [\n      '@param iterators the array containing the iterators',\n      '@param iterators the array that holds the iterators',\n      '@param iterators the array consisting of iterators',\n      '@param iterators the array with the collection of iterators',\n      '@param iterators the array of iterators being used'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if any iterator is null',\n    'alternatives': [\n      '@throws NullPointerException if any of the iterators is null',\n      '@throws NullPointerException if any iterator in the collection is null',\n      '@throws NullPointerException if there is a null iterator in the set',\n      '@throws NullPointerException if any of the iterators are null',\n      '@throws NullPointerException if any iterator happens to be null'\n    ]\n  }\n]"