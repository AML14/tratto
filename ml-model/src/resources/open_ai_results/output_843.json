"output=[\n  {\n    'tag': '@return the entrySet iterator',\n    'alternatives': [\n      '@return the iterator of entrySet',\n      '@return the iterator for entrySet',\n      '@return the iterator that contains entrySet',\n      '@return iterator for entrySet',\n      '@return iterator of entrySet'\n    ]\n  },\n  {\n    'tag': '@return the keySet iterator',\n    'alternatives': [\n      '@return the iterator of keySet',\n      '@return the iterator for keySet',\n      '@return the iterator that contains keySet',\n      '@return iterator for keySet',\n      '@return iterator of keySet'\n    ]\n  },\n  {\n    'tag': '@return the values iterator',\n    'alternatives': [\n      '@return the iterator of values',\n      '@return the iterator for values',\n      '@return the iterator that contains values',\n      '@return iterator for values',\n      '@return iterator of values'\n    ]\n  },\n  {\n    'tag': '@param initialCapacity the initial capacity, must be a power of two',\n    'alternatives': [\n      '@param initialCapacity the starting size, must be a power of two',\n      '@param initialCapacity the initial size, must be a power of two',\n      '@param initialCapacity the size at the beginning, must be a power of two',\n      '@param initialCapacity the capacity initially, must be a power of two',\n      '@param initialCapacity the capacity when starting, must be a power of two'\n    ]\n  },\n  {\n    'tag': '@param threshold the threshold, must be sensible',\n    'alternatives': [\n      '@param threshold the limit, must be reasonable',\n      '@param threshold the maximum, must be practical',\n      '@param threshold the threshold value, must be reasonable',\n      '@param threshold the restriction, must be sensible',\n      '@param threshold the boundary, must be practical'\n    ]\n  },\n  {\n    'tag': '@param initialCapacity the initial capacity',\n    'alternatives': [\n      '@param initialCapacity the starting size',\n      '@param initialCapacity the initial size',\n      '@param initialCapacity the size at the beginning',\n      '@param initialCapacity the capacity initially',\n      '@param initialCapacity the capacity when starting'\n    ]\n  },\n  {\n    'tag': '@param initialCapacity the initial capacity',\n    'alternatives': [\n      '@param initialCapacity the starting size',\n      '@param initialCapacity the initial size',\n      '@param initialCapacity the size at the beginning',\n      '@param initialCapacity the capacity initially',\n      '@param initialCapacity the capacity when starting'\n    ]\n  },\n  {\n    'tag': '@param loadFactor the load factor',\n    'alternatives': [\n      '@param loadFactor the growth factor',\n      '@param loadFactor the scale factor',\n      '@param loadFactor the expansion factor',\n      '@param loadFactor the factor of increase',\n      '@param loadFactor the factor of growth'\n    ]\n  },\n  {\n    'tag': '@param map the map to copy',\n    'alternatives': [\n      '@param map the map that needs to be copied',\n      '@param map the map to be duplicated',\n      '@param map the map that requires copying',\n      '@param map the map to be cloned',\n      '@param map the map that should be replicated'\n    ]\n  },\n  {\n    'tag': '@param key the key',\n    'alternatives': [\n      '@param key the identifier',\n      '@param key the search term',\n      '@param key the lookup key',\n      '@param key the reference',\n      '@param key the input key'\n    ]\n  },\n  {\n    'tag': '@return the mapped value, null if no match',\n    'alternatives': [\n      '@return the associated value, null if no match',\n      '@return the value with the matching key, null if not found',\n      '@return the corresponding value, null if no match',\n      '@return the value that corresponds to the key, null if no match',\n      '@return the value mapped to the key, null if no match'\n    ]\n  },\n  {\n    'tag': '@return the size',\n    'alternatives': [\n      '@return the number of elements',\n      '@return the count',\n      '@return the total size',\n      '@return the quantity',\n      '@return the length'\n    ]\n  },\n  {\n    'tag': '@return true if the map is currently size zero',\n    'alternatives': [\n      '@return true if the map is empty',\n      '@return true if the map has no elements',\n      '@return true if the map has size zero',\n      '@return true if the map is of zero size',\n      '@return true if the map contains no elements'\n    ]\n  },\n  {\n    'tag': '@param key the key to search for',\n    'alternatives': [\n      '@param key the key to find',\n      '@param key the key to look for',\n      '@param key the key to locate',\n      '@param key the key to search',\n      '@param key the key to seek'\n    ]\n  },\n  {\n    'tag': '@return true if the map contains the key',\n    'alternatives': [\n      '@return true if the map has the key',\n      '@return true if the map includes the key',\n      '@return true if the map holds the key',\n      '@return true if the map possesses the key',\n      '@return true if the map stores the key'\n    ]\n  },\n  {\n    'tag': '@param value the value to search for',\n    'alternatives': [\n      '@param value the value to find',\n      '@param value the value to look for',\n      '@param value the value to locate',\n      '@param value the value to search',\n      '@param value the value to seek'\n    ]\n  },\n  {\n    'tag': '@param key the key to add',\n    'alternatives': [\n      '@param key the key to insert',\n      '@param key the key to put',\n      '@param key the key to include',\n      '@param key the key to append',\n      '@param key the key to place'\n    ]\n  },\n  {\n    'tag': '@param value the value to add',\n    'alternatives': [\n      '@param value the value to insert',\n      '@param value the value to put',\n      '@param value the value to include',\n      '@param value the value to append',\n      '@param value the value to place'\n    ]\n  },\n  {\n    'tag': '@return the value previously mapped to this key, null if none',\n    'alternatives': [\n      '@return the previously associated value, null if none',\n      '@return the earlier mapped value, null if none',\n      '@return the value that was previously mapped, null if none',\n      '@return the value that was stored before, null if none',\n      '@return the value that was assigned previously, null if none'\n    ]\n  },\n  {\n    'tag': '@param map the map to add',\n    'alternatives': [\n      '@param map the map to include',\n      '@param map the map to insert',\n      '@param map the map to put',\n      '@param map the map to append',\n      '@param map the map to place'\n    ]\n  },\n  {\n    'tag': '@return a new AbstractHashedMap or subclass',\n    'alternatives': [\n      '@return a newly created AbstractHashedMap or subclass',\n      '@return a freshly generated AbstractHashedMap or subclass',\n      '@return a brand new AbstractHashedMap or subclass',\n      '@return a newly instantiated AbstractHashedMap or subclass',\n      '@return a newly formed AbstractHashedMap or subclass'\n    ]\n  },\n  {\n    'tag': '@param key the mapping to remove',\n    'alternatives': [\n      '@param key the key to eliminate',\n      '@param key the key to delete',\n      '@param key the key to erase',\n      '@param key the key to exclude',\n      '@param key the key to eradicate'\n    ]\n  },\n  {\n    'tag': '@return the value mapped to the removed key, null if key not in map',\n    'alternatives': [\n      '@return the value associated with the removed key, null if key not in map',\n      '@return the value linked to the removed key, null if key not in map',\n      '@return the value connected to the removed key, null if key not in map',\n      '@return the value that was assigned to the removed key, null if key not in map',\n      '@return the value that was mapped to the removed key, null if key not in map'\n    ]\n  },\n  {\n    'tag': '@return the map iterator',\n    'alternatives': [\n      '@return the iterator of the map',\n      '@return the iterator for the map',\n      '@return the iterator that contains the map',\n      '@return iterator for the map',\n      '@return iterator of the map'\n    ]\n  },\n  {\n    'tag': '@return the entrySet view',\n    'alternatives': [\n      '@return the view of entrySet',\n      '@return the view for entrySet',\n      '@return the view that contains entrySet',\n      '@return view for entrySet',\n      '@return view of entrySet'\n    ]\n  }\n]"