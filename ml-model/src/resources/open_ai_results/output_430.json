"output = [\n  {\n    'tag': '@return a map iterator',\n    'alternatives': [\n      '@return an iterator for a map',\n      '@return an iterator that iterates over a map',\n      '@return an iterator specifically designed for maps',\n      '@return an iterator that can be used with maps',\n      '@return an iterator that traverses a map'\n    ]\n  },\n  {\n    'tag': '@param <T> the element type',\n    'alternatives': [\n      '@param <T> the type of the elements',\n      '@param <T> the type of the objects',\n      '@param <T> the type of the items',\n      '@param <T> the type of the elements in the list',\n      '@param <T> the data type for the elements'\n    ]\n  },\n  {\n    'tag': '@param list the list, possibly <code>null</code>',\n    'alternatives': [\n      '@param list the list, which may be <code>null</code>',\n      '@param list the list, potentially <code>null</code>',\n      '@param list the list, may be <code>null</code>',\n      '@param list the list, optionally <code>null</code>',\n      '@param list the list that could be <code>null</code>'\n    ]\n  },\n  {\n    'tag': '@return an empty list if the argument is <code>null</code>',\n    'alternatives': [\n      '@return an empty list if the parameter is <code>null</code>',\n      '@return an empty list if the input is <code>null</code>',\n      '@return an empty list if the argument is null',\n      '@return an empty list in case the argument is <code>null</code>',\n      '@return an empty list when the argument is <code>null</code>'\n    ]\n  },\n  {\n    'tag': '@param <E> the element type',\n    'alternatives': [\n      '@param <E> the type of the elements',\n      '@param <E> the type of the objects',\n      '@param <E> the type of the items',\n      '@param <E> the type of the elements in the list',\n      '@param <E> the data type for the elements'\n    ]\n  },\n  {\n    'tag': '@param list1 the first list',\n    'alternatives': [\n      '@param list1 the initial list',\n      '@param list1 the source list',\n      '@param list1 the primary list',\n      '@param list1 the first input list',\n      '@param list1 the starting list'\n    ]\n  },\n  {\n    'tag': '@param list2 the second list',\n    'alternatives': [\n      '@param list2 the additional list',\n      '@param list2 the other list',\n      '@param list2 the secondary list',\n      '@param list2 the second input list',\n      '@param list2 the second parameter list'\n    ]\n  },\n  {\n    'tag': '@return the intersection of those two lists',\n    'alternatives': [\n      '@return the common elements between the two lists',\n      '@return the overlap of the two lists',\n      '@return the shared elements of the given lists',\n      '@return the items that appear in both lists',\n      '@return the intersection between the two provided lists'\n    ]\n  },\n  {\n    'tag': '@param <E> the element type',\n    'alternatives': [\n      '@param <E> the type of the elements',\n      '@param <E> the type of the objects',\n      '@param <E> the type of the items',\n      '@param <E> the type of the elements in the list',\n      '@param <E> the data type for the elements'\n    ]\n  },\n  {\n    'tag': '@param list1 the list to subtract from',\n    'alternatives': [\n      '@param list1 the list to remove items from',\n      '@param list1 the source list for subtraction',\n      '@param list1 the initial list to perform subtraction',\n      '@param list1 the list from which to subtract',\n      '@param list1 the primary list to subtract from'\n    ]\n  },\n  {\n    'tag': '@param list2 the list to subtract',\n    'alternatives': [\n      '@param list2 the list to remove',\n      '@param list2 the list to subtract items',\n      '@param list2 the list to take away',\n      '@param list2 the secondary list for subtraction',\n      '@param list2 the subtracting list'\n    ]\n  },\n  {\n    'tag': '@return a new list containing the results',\n    'alternatives': [\n      '@return a new list with the outcome',\n      '@return a fresh list that holds the results',\n      '@return a newly created list that contains the output',\n      '@return a list with the produced results',\n      '@return a brand new list containing the computed values'\n    ]\n  },\n  {\n    'tag': '@param <E> the element type',\n    'alternatives': [\n      '@param <E> the type of the elements',\n      '@param <E> the type of the objects',\n      '@param <E> the type of the items',\n      '@param <E> the type of the elements in the list',\n      '@param <E> the data type for the elements'\n    ]\n  },\n  {\n    'tag': '@param list1 the first list',\n    'alternatives': [\n      '@param list1 the initial list',\n      '@param list1 the source list',\n      '@param list1 the primary list',\n      '@param list1 the first input list',\n      '@param list1 the starting list'\n    ]\n  },\n  {\n    'tag': '@param list2 the second list',\n    'alternatives': [\n      '@param list2 the additional list',\n      '@param list2 the other list',\n      '@param list2 the secondary list',\n      '@param list2 the second input list',\n      '@param list2 the second parameter list'\n    ]\n  },\n  {\n    'tag': '@return a new list containing the sum of those lists',\n    'alternatives': [\n      '@return a new list with the combined contents of those lists',\n      '@return a fresh list that holds the sum of the provided lists',\n      '@return a newly created list that contains the aggregate of the given lists',\n      '@return a list with the total values from the provided lists',\n      '@return a brand new list containing the sum of the given lists'\n    ]\n  },\n  {\n    'tag': '@param <E> the element type',\n    'alternatives': [\n      '@param <E> the type of the elements',\n      '@param <E> the type of the objects',\n      '@param <E> the type of the items',\n      '@param <E> the type of the elements in the list',\n      '@param <E> the data type for the elements'\n    ]\n  },\n  {\n    'tag': '@param list1 the first list',\n    'alternatives': [\n      '@param list1 the initial list',\n      '@param list1 the source list',\n      '@param list1 the primary list',\n      '@param list1 the first input list',\n      '@param list1 the starting list'\n    ]\n  },\n  {\n    'tag': '@param list2 the second list',\n    'alternatives': [\n      '@param list2 the additional list',\n      '@param list2 the other list',\n      '@param list2 the secondary list',\n      '@param list2 the second input list',\n      '@param list2 the second parameter list'\n    ]\n  },\n  {\n    'tag': '@return a new list containing the union of those lists',\n    'alternatives': [\n      '@return a new list with the combined contents of those lists',\n      '@return a fresh list that holds the union of the given lists',\n      '@return a newly created list that contains the union of the provided lists',\n      '@return a list with all elements from the provided lists',\n      '@return a brand new list containing the union of the given lists'\n    ]\n  },\n  {\n    'tag': '@param <E> the element type',\n    'alternatives': [\n      '@param <E> the type of the elements',\n      '@param <E> the type of the objects',\n      '@param <E> the type of the items',\n      '@param <E> the type of the elements in the list',\n      '@param <E> the data type for the elements'\n    ]\n  },\n  {\n    'tag': '@param predicate the predicate to use, may be null',\n    'alternatives': [\n      '@param predicate the condition to apply, can be null',\n      '@param predicate the filtering rule, could be null',\n      '@param predicate the function to evaluate, nullable',\n      '@param predicate the criteria for the operation, possibly null',\n      '@param predicate the rule to determine, can be null'\n    ]\n  }\n]"