"[\n  {\n    'tag': \"@param map The map to print, may be <code>null</code>.\\n If <code>null</code> , the text 'null' is output.\",\n    'alternatives': [\n      \"@param map The map to be printed, can be <code>null</code>.\\n If <code>null</code>, the text 'null' is displayed.\",\n      \"@param map The map to output, might be <code>null</code>.\\n If <code>null</code>, the text 'null' is printed.\",\n      \"@param map The map to be printed, possibly <code>null</code>.\\n If <code>null</code>, the text 'null' will be shown.\"\n    ]\n  },\n  {\n    'tag': \"@throws NullPointerException if the stream is <code>null</code>\",\n    'alternatives': [\n      \"@throws NullPointerException when the stream is <code>null</code>.\",\n      \"@throws NullPointerException in case the stream is <code>null</code>.\",\n      \"@throws NullPointerException if the stream parameter is <code>null</code>.\"\n    ]\n  },\n  {\n    'tag': \"@param label The label to be used, may be <code>null</code>.\\n  If <code>null</code>, the label is not output.\\n  It typically represents the name of the property in a bean or similar.\",\n    'alternatives': [\n      \"@param label The label to utilize, can be <code>null</code>.\\n  If <code>null</code>, the label will not be displayed.\\n  Usually represents the name of the property in a bean or similar.\",\n      \"@param label The label to employ, may be <code>null</code>.\\n  If <code>null</code>, the label will not be output.\\n  Normally represents the name of the property in a bean or similar.\",\n      \"@param label The label to use, possibly <code>null</code>.\\n  If <code>null</code>, the label won't be shown.\\n  Commonly represents the name of the property in a bean or similar.\"\n    ]\n  },\n  {\n    'tag': \"@param map The map to print, may be <code>null</code>.\\n  If <code>null</code>, the text 'null' is output.\",\n    'alternatives': [\n      \"@param map The map to be printed, can be <code>null</code>.\\n  If <code>null</code>, the text 'null' will be shown.\",\n      \"@param map The map to display, might be <code>null</code>.\\n  If <code>null</code>, the text 'null' is shown.\",\n      \"@param map The map to output, possibly <code>null</code>.\\n  If <code>null</code>, the text 'null' will be printed.\"\n    ]\n  },\n  {\n    'tag': \"@throws NullPointerException if the stream is <code>null</code>\",\n    'alternatives': [\n      \"@throws NullPointerException when the stream is <code>null</code>.\",\n      \"@throws NullPointerException if the stream parameter is <code>null</code>.\",\n      \"@throws NullPointerException in case the stream is <code>null</code>.\"\n    ]\n  },\n  {\n    'tag': \"@param out the stream to print to\",\n    'alternatives': [\n      \"@param out the stream to be printed to\",\n      \"@param out the stream to output to\",\n      \"@param out the stream to use for printing\"\n    ]\n  },\n  {\n    'tag': \"@param label the label to be used, may be <code>null</code>.\\n  If <code>null</code>, the label is not output.\\n  It typically represents the name of the property in a bean or similar.\",\n    'alternatives': [\n      \"@param label the label to utilize, might be <code>null</code>.\\n  If <code>null</code>, the label will not be displayed.\\n  Usually represents the name of the property in a bean or similar.\",\n      \"@param label the label to employ, may be <code>null</code>.\\n  If <code>null</code>, the label will not be shown.\\n  Normally represents the name of the property in a bean or similar.\",\n      \"@param label the label to use, possibly <code>null</code>.\\n  If <code>null</code>, the label won't be output.\\n  Commonly represents the name of the property in a bean or similar.\"\n    ]\n  },\n  {\n    'tag': \"@param map the map to print, may be <code>null</code>.\\n  If <code>null</code>, the text 'null' is output\",\n    'alternatives': [\n      \"@param map the map to be printed, can be <code>null</code>.\\n  If <code>null</code>, the text 'null' is displayed\",\n      \"@param map the map to output, might be <code>null</code>.\\n  If <code>null</code>, the text 'null' is printed\",\n      \"@param map the map to be printed, possibly <code>null</code>.\\n  If <code>null</code>, the text 'null' will be shown\"\n    ]\n  },\n  {\n    'tag': \"@param lineage a stack consisting of any maps in which the previous\\n  argument is contained. This is checked to avoid infinite recursion when\\n  printing the output\",\n    'alternatives': [\n      \"@param lineage a stack that contains any maps in which the previous\\n  argument is included. It is verified to prevent infinite recursion while\\n  printing the output\",\n      \"@param lineage a stack that holds maps containing the previous\\n  argument. This is inspected to prevent infinite recursion during\\n  output printing\",\n      \"@param lineage a stack holding any maps in which the previous\\n  argument is found. It is examined to avoid infinite recursion while\\n  printing the output\"\n    ]\n  },\n  {\n    'tag': \"@param debug flag indicating whether type names should be output.\",\n    'alternatives': [\n      \"@param debug boolean flag indicating if type names should be displayed.\",\n      \"@param debug flag indicating if type names should be printed.\",\n      \"@param debug boolean flag to determine if type names should be output.\"\n    ]\n  },\n  {\n    'tag': \"@throws NullPointerException if the stream is <code>null</code>\",\n    'alternatives': [\n      \"@throws NullPointerException when the stream is <code>null</code>.\",\n      \"@throws NullPointerException if the stream parameter is <code>null</code>.\",\n      \"@throws NullPointerException in case the stream is <code>null</code>.\"\n    ]\n  },\n  {\n    'tag': \"@param out the stream to indent\",\n    'alternatives': [\n      \"@param out the stream to apply indentation to\",\n      \"@param out the stream to be indented\",\n      \"@param out the stream to receive the indentation\"\n    ]\n  },\n  {\n    'tag': \"@param <K> the key type\",\n    'alternatives': [\n      \"@param <K> the type of the key\",\n      \"@param <K> the type for the key\",\n      \"@param <K> the data type for the key\"\n    ]\n  },\n  {\n    'tag': \"@param <V> the value type\",\n    'alternatives': [\n      \"@param <V> the type of the value\",\n      \"@param <V> the data type for the value\",\n      \"@param <V> the type for the value\"\n    ]\n  },\n  {\n    'tag': \"@return a new HashMap containing the inverted data\",\n    'alternatives': [\n      \"@return a new HashMap that holds the inverted data\",\n      \"@return a new HashMap with the data inverted\",\n      \"@return a new HashMap containing the data in inverted form\"\n    ]\n  },\n  {\n    'tag': \"@param <K> the key type\",\n    'alternatives': [\n      \"@param <K> the type of the key\",\n      \"@param <K> the type for the key\",\n      \"@param <K> the data type for the key\"\n    ]\n  },\n  {\n    'tag': \"@param key the key\",\n    'alternatives': [\n      \"@param key the specific key\",\n      \"@param key the identifier\",\n      \"@param key the unique key\"\n    ]\n  },\n  {\n    'tag': \"@param <K> the key type\",\n    'alternatives': [\n      \"@param <K> the type of the key\",\n      \"@param <K> the type for the key\",\n      \"@param <K> the data type for the key\"\n    ]\n  },\n  {\n    'tag': \"@param <V> the value type\",\n    'alternatives': [\n      \"@param <V> the type of the value\",\n      \"@param <V> the data type for the value\",\n      \"@param <V> the type for the value\"\n    ]\n  },\n  {\n    'tag': \"@return the input map\",\n    'alternatives': [\n      \"@return the map as it is\",\n      \"@return the original map\",\n      \"@return the provided map\"\n    ]\n  },\n  {\n    'tag': \"@throws IllegalArgumentException if sub-array or entry matching used and an entry is invalid\",\n    'alternatives': [\n      \"@throws IllegalArgumentException when sub-array or entry matching is used and an entry is invalid\",\n      \"@throws IllegalArgumentException if an entry is invalid when using sub-array or entry matching\",\n      \"@throws IllegalArgumentException in case of an invalid entry when using sub-array or entry matching\"\n    ]\n  },\n  {\n    'tag': \"@throws ClassCastException if the array contents is mixed\",\n    'alternatives': [\n      \"@throws ClassCastException when the array contains mixed contents\",\n      \"@throws ClassCastException if there are mixed contents in the array\",\n      \"@throws ClassCastException in case of mixed contents in the array\"\n    ]\n  },\n  {\n    'tag': \"@param <K> the key type\",\n    'alternatives': [\n      \"@param <K> the type of the key\",\n      \"@param <K> the type for the key\",\n      \"@param <K> the data type for the key\"\n    ]\n  },\n  {\n    'tag': \"@param <V> the value type\",\n    'alternatives': [\n      \"@param <V> the type of the value\",\n      \"@param <V> the data type for the value\",\n      \"@param <V> the type for the value\"\n    ]\n  },\n  {\n    'tag': \"@param map the map, possibly <code>null</code>\",\n    'alternatives': [\n      \"@param map the map, maybe <code>null</code>\",\n      \"@param map the map, could be <code>null</code>\",\n      \"@param map the map, potentially <code>null</code>\"\n    ]\n  }\n]"