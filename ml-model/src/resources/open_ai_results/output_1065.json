"output = [\n  {\n    'tag': '@throws MathArithmeticException if the resulting numerator or denominator exceeds\\n {@code Integer.MAX_VALUE}',\n    'alternatives': [\n      '@throws MathArithmeticException if the numerator or denominator resulting goes beyond\\n {@code Integer.MAX_VALUE}',\n      '@throws MathArithmeticException if the numerator or denominator resulting exceeds\\n {@code Integer.MAX_VALUE}',\n      '@throws MathArithmeticException if the numerator or denominator resulting surpasses\\n {@code Integer.MAX_VALUE}',\n      '@throws MathArithmeticException if the resulting numerator or denominator goes over\\n {@code Integer.MAX_VALUE}',\n      '@throws MathArithmeticException if the numerator or denominator resulting exceeds the limit\\n {@code Integer.MAX_VALUE}'\n    ]\n  },\n  {\n    'tag': '@param i the {@code integer} to multiply by.',\n    'alternatives': [\n      '@param i the {@code whole number} to multiply with.',\n      '@param i the {@code integer} that will be multiplied.',\n      '@param i the {@code integer} that multiplies the current value.',\n      '@param i the {@code integer} that acts as the multiplier.',\n      '@param i the {@code integer} which will serve as the multiplicand.'\n    ]\n  },\n  {\n    'tag': '@return this * i',\n    'alternatives': [\n      '@return the result of multiplying this fraction by i.',\n      '@return the product of this fraction and i.',\n      '@return the multiplication of this and i.',\n      '@return the value obtained by multiplying this with i.',\n      '@return the outcome of the multiplication between this and i.'\n    ]\n  },\n  {\n    'tag': '@return a {@code Fraction} instance with the resulting values',\n    'alternatives': [\n      '@return a {@code Fraction} object containing the calculated values.',\n      '@return an instance of {@code Fraction} with the resulting values.',\n      '@return a new {@code Fraction} instance created with the calculated values.',\n      '@return a {@code Fraction} object that holds the resulting values.',\n      '@return a fresh {@code Fraction} instance containing the calculated values.'\n    ]\n  },\n  {\n    'tag': '@throws MathArithmeticException if the fraction to divide by is zero',\n    'alternatives': [\n      '@throws MathArithmeticException if the divisor fraction is zero',\n      '@throws MathArithmeticException if the fraction used for division is zero',\n      '@throws MathArithmeticException if the dividing fraction is zero',\n      '@throws MathArithmeticException if the fraction being divided by is zero',\n      '@throws MathArithmeticException if the fraction used as the divisor is zero'\n    ]\n  },\n  {\n    'tag': '@throws MathArithmeticException if the resulting numerator or denominator exceeds\\n {@code Integer.MAX_VALUE}',\n    'alternatives': [\n      '@throws MathArithmeticException if the numerator or denominator resulting goes beyond\\n {@code Integer.MAX_VALUE}',\n      '@throws MathArithmeticException if the numerator or denominator resulting exceeds\\n {@code Integer.MAX_VALUE}',\n      '@throws MathArithmeticException if the numerator or denominator resulting surpasses\\n {@code Integer.MAX_VALUE}',\n      '@throws MathArithmeticException if the resulting numerator or denominator goes over\\n {@code Integer.MAX_VALUE}',\n      '@throws MathArithmeticException if the numerator or denominator resulting exceeds the limit\\n {@code Integer.MAX_VALUE}'\n    ]\n  },\n  {\n    'tag': '@param i the {@code integer} to divide by.',\n    'alternatives': [\n      '@param i the {@code whole number} to divide by.',\n      '@param i the {@code integer} that will be used for division.',\n      '@param i the {@code integer} that acts as the divisor.',\n      '@param i the {@code integer} which will serve as the dividend.',\n      '@param i the {@code integer} by which to perform division.']\n  },\n  {\n    'tag': '@return this * i',\n    'alternatives': [\n      '@return the result of multiplying this fraction by i.',\n      '@return the product of this fraction and i.',\n      '@return the multiplication of this and i.',\n      '@return the value obtained by multiplying this with i.',\n      '@return the outcome of the multiplication between this and i.'\n    ]\n  },\n  {\n    'tag': '@return the fraction percentage as a {@code double}.',\n    'alternatives': [\n      '@return the fraction expressed as a {@code double} percentage.',\n      '@return the percentage representation of the fraction as a {@code double}.',\n      '@return the value of the fraction as a {@code double} percentage.',\n      '@return the decimal equivalent of the fraction as a {@code double} percentage.',\n      '@return the {@code double} value of the fraction as a percentage.'\n    ]\n  },\n  {\n    'tag': \"@param numerator the numerator, for example the three in 'three sevenths'\",\n    'alternatives': [\n      \"@param numerator the numerator, for instance the three in 'three sevenths'\",\n      \"@param numerator the numerator, like the three in 'three sevenths'\",\n      \"@param numerator the numerator, such as the three in 'three sevenths'\",\n      \"@param numerator the numerator, just like the three in 'three sevenths'\",\n      \"@param numerator the numerator, identical to the three in 'three sevenths'\"\n    ]\n  },\n  {\n    'tag': \"@param denominator the denominator, for example the seven in 'three sevenths'\",\n    'alternatives': [\n      \"@param denominator the denominator, for instance the seven in 'three sevenths'\",\n      \"@param denominator the denominator, like the seven in 'three sevenths'\",\n      \"@param denominator the denominator, such as the seven in 'three sevenths'\",\n      \"@param denominator the denominator, just like the seven in 'three sevenths'\",\n      \"@param denominator the denominator, identical to the seven in 'three sevenths'\"\n    ]\n  },\n  {\n    'tag': '@return a new fraction instance, with the numerator and denominator reduced',\n    'alternatives': [\n      '@return a newly created fraction object, with the simplified numerator and denominator.',\n      '@return a fresh fraction instance, with the reduced numerator and denominator.',\n      '@return a newly instantiated fraction, with the simplified numerator and denominator.',\n      '@return a new fraction object, where the numerator and denominator have been reduced.',\n      '@return a fraction instance that has been created anew, with the reduced numerator and denominator.'\n    ]\n  },\n  {\n    'tag': '@return a string representation of the fraction.',\n    'alternatives': [\n      '@return a string that represents the fraction.',\n      '@return a textual description of the fraction.',\n      '@return a string that depicts the fraction.',\n      '@return a textual representation of the fraction.',\n      '@return a string that shows the fraction.'\n    ]\n  },\n  {\n    'tag': '@param value the double value to convert to a fraction.',\n    'alternatives': [\n      '@param value the value of type double to convert into a fraction.',\n      '@param value the double precision value to be transformed into a fraction.',\n      '@param value the double number to be converted into a fraction.',\n      '@param value the decimal value to be converted to a fraction.',\n      '@param value the numeric value of type double to be converted to a fraction.'\n    ]\n  },\n  {\n    'tag': '@throws FractionConversionException if the continued fraction failed to\\n        converge.',\n    'alternatives': [\n      '@throws FractionConversionException if the continued fraction does not converge.',\n      '@throws FractionConversionException if the continued fraction does not reach convergence.',\n      '@throws FractionConversionException if the continued fraction fails to converge.',\n      '@throws FractionConversionException if the continued fraction does not achieve convergence.',\n      '@throws FractionConversionException if the continued fraction does not attain convergence.'\n    ]\n  },\n  {\n    'tag': '@param value the double value to convert to a fraction.',\n    'alternatives': [\n      '@param value the value of type double to convert into a fraction.',\n      '@param value the double precision value to be transformed into a fraction.',\n      '@param value the double number to be converted into a fraction.',\n      '@param value the decimal value to be converted to a fraction.',\n      '@param value the numeric value of type double to be converted to a fraction.'\n    ]\n  },\n  {\n    'tag': '@param epsilon maximum error allowed.  The resulting fraction is within\\n       {@code epsilon} of {@code value}, in absolute terms.',\n    'alternatives': [\n      '@param epsilon the maximum allowable error. The resulting fraction is within\\n       {@code epsilon} of {@code value}, in absolute terms.',\n      '@param epsilon the highest acceptable error. The resulting fraction is within\\n       {@code epsilon} of {@code value}, in absolute terms.',\n      '@param epsilon the maximum tolerated error. The resulting fraction is within\\n       {@code epsilon} of {@code value}, in absolute terms.',\n      '@param epsilon the greatest permissible error. The resulting fraction is within\\n       {@code epsilon} of {@code value}, in absolute terms.',\n      '@param epsilon the most significant admissible error. The resulting fraction is within\\n       {@code epsilon} of {@code value}, in absolute terms.'\n    ]\n  },\n  {\n    'tag': '@param maxIterations maximum number of convergents',\n    'alternatives': [\n      '@param maxIterations the maximum count of convergents',\n      '@param maxIterations the highest number of convergents allowed',\n      '@param maxIterations the greatest number of convergents to consider',\n      '@param maxIterations the maximum amount of convergents that can exist',\n      '@param maxIterations the highest value of convergents that is allowed'\n    ]\n  },\n  {\n    'tag': '@throws FractionConversionException if the continued fraction failed to\\n        converge.',\n    'alternatives': [\n      '@throws FractionConversionException if the continued fraction does not converge.',\n      '@throws FractionConversionException if the continued fraction does not reach convergence.',\n      '@throws FractionConversionException if the continued fraction fails to converge.',\n      '@throws FractionConversionException if the continued fraction does not achieve convergence.',\n      '@throws FractionConversionException if the continued fraction does not attain convergence.'\n    ]\n  },\n  {\n    'tag': '@param value the double value to convert to a fraction.',\n    'alternatives': [\n      '@param value the value of type double to convert into a fraction.',\n      '@param value the double precision value to be transformed into a fraction.',\n      '@param value the double number to be converted into a fraction.',\n      '@param value the decimal value to be converted to a fraction.',\n      '@param value the numeric value of type double to be converted to a fraction.'\n    ]\n  },\n  {\n    'tag': '@param maxDenominator The maximum allowed value for denominator',\n    'alternatives': [\n      '@param maxDenominator The highest permissible value for the denominator',\n      '@param maxDenominator The greatest allowable value for the denominator',\n      '@param maxDenominator The maximum value allowed for the denominator',\n      '@param maxDenominator The upper limit for the denominator',\n      '@param maxDenominator The largest acceptable value for the denominator'\n    ]\n  },\n  {\n    'tag': '@throws FractionConversionException if the continued fraction failed to\\n        converge',\n    'alternatives': [\n      '@throws FractionConversionException if the continued fraction does not converge',\n      '@throws FractionConversionException if the continued fraction does not reach convergence',\n      '@throws FractionConversionException if the continued fraction fails to converge',\n      '@throws FractionConversionException if the continued fraction does not achieve convergence',\n      '@throws FractionConversionException if the continued fraction does not attain convergence'\n    ]\n  },\n  {\n    'tag': '@param value the double value to convert to a fraction.',\n    'alternatives': [\n      '@param value the value of type double to convert into a fraction.',\n      '@param value the double precision value to be transformed into a fraction.',\n      '@param value the double number to be converted into a fraction.',\n      '@param value the decimal value to be converted to a fraction.',\n      '@param value the numeric value of type double to be converted to a fraction.'\n    ]\n  },\n  {\n    'tag': '@param epsilon maximum error allowed.  The resulting fraction is within\\n       {@code epsilon} of {@code value}, in absolute terms.',\n    'alternatives': [\n      '@param epsilon the maximum allowable error. The resulting fraction is within\\n       {@code epsilon} of {@code value}, in absolute terms.',\n      '@param epsilon the highest acceptable error. The resulting fraction is within\\n       {@code epsilon} of {@code value}, in absolute terms.',\n      '@param epsilon the maximum tolerated error. The resulting fraction is within\\n       {@code epsilon} of {@code value}, in absolute terms.',\n      '@param epsilon the greatest permissible error. The resulting fraction is within\\n       {@code epsilon} of {@code value}, in absolute terms.',\n      '@param epsilon the most significant admissible error. The resulting fraction is within\\n       {@code epsilon} of {@code value}, in absolute terms.'\n    ]\n  },\n  {\n    'tag': '@param maxDenominator maximum denominator value allowed.',\n    'alternatives': [\n      '@param maxDenominator maximum value for the denominator.',\n      '@param maxDenominator greatest permissible denominator value.',\n      '@param maxDenominator highest allowed value for the denominator.',\n      '@param maxDenominator upper limit of the denominator.',\n      '@param maxDenominator largest value that the denominator can have.'\n    ]\n  }\n]"