"output = [\n  {\n    'tag': '@param d statistic',\n    'alternatives': [\n      '@param d metric',\n      '@param d measure',\n      '@param d value',\n      '@param d quantity',\n      '@param d parameter'\n    ]\n  },\n  {\n    'tag': '@return the two-sided probability of {@code P(D_n < d)}',\n    'alternatives': [\n      '@return the probability of {@code P(D_n < d)} from both sides',\n      '@return the probability of {@code P(D_n < d)} in a two-sided test',\n      '@return the two-sided probability that {@code P(D_n < d)}',\n      '@return the probability of {@code P(D_n < d)} considering both sides',\n      '@return the two-sided probability associated with {@code P(D_n < d)}'\n    ]\n  },\n  {\n    'tag': '@throws MathArithmeticException if algorithm fails to convert {@code h}\\nto a {@link org.apache.commons.math3.fraction.BigFraction} in expressing\\n{@code d} as {@code (k - h) / m} for integer {@code k, m} and\\n{@code 0 <= h < 1}.',\n    'alternatives': [\n      '@throws MathArithmeticException if the conversion of {@code h} to a {@link org.apache.commons.math3.fraction.BigFraction} fails when expressing {@code d} as {@code (k - h) / m} for integer {@code k, m} and {@code 0 <= h < 1}.',\n      '@throws MathArithmeticException if the conversion of {@code h} to a {@link org.apache.commons.math3.fraction.BigFraction} fails while trying to express {@code d} as {@code (k - h) / m} for integer {@code k, m} and {@code 0 <= h < 1}.',\n      '@throws MathArithmeticException if the algorithm is unable to convert {@code h} into a {@link org.apache.commons.math3.fraction.BigFraction} when expressing {@code d} as {@code (k - h) / m} for integer {@code k, m} and {@code 0 <= h < 1}.',\n      '@throws MathArithmeticException if the conversion of {@code h} to a {@link org.apache.commons.math3.fraction.BigFraction} in expressing {@code d} as {@code (k - h) / m} for integer {@code k, m} and {@code 0 <= h < 1} fails.',\n      '@throws MathArithmeticException if the conversion of {@code h} to a {@link org.apache.commons.math3.fraction.BigFraction} fails when trying to express {@code d} as {@code (k - h) / m} for integer {@code k, m} and {@code 0 <= h < 1}.'\n    ]\n  },\n  {\n    'tag': '@param d statistic',\n    'alternatives': [\n      '@param d metric',\n      '@param d measure',\n      '@param d value',\n      '@param d quantity',\n      '@param d parameter'\n    ]\n  },\n  {\n    'tag': '@return H matrix',\n    'alternatives': [\n      '@return matrix H',\n      '@return matrix representing H',\n      '@return the matrix H',\n      '@return matrix that corresponds to H',\n      '@return the H matrix'\n    ]\n  },\n  {\n    'tag': '@throws NumberIsTooLargeException if fractional part is greater than 1',\n    'alternatives': [\n      '@throws NumberIsTooLargeException if the fractional part exceeds 1',\n      '@throws NumberIsTooLargeException if the fractional part is larger than 1',\n      '@throws NumberIsTooLargeException if the fraction part surpasses 1',\n      '@throws NumberIsTooLargeException if the fraction part is greater than 1',\n      '@throws NumberIsTooLargeException if the fractional part is above 1'\n    ]\n  },\n  {\n    'tag': '@throws FractionConversionException if algorithm fails to convert\\n{@code h} to a {@link org.apache.commons.math3.fraction.BigFraction} in\\nexpressing {@code d} as {@code (k - h) / m} for integer {@code k, m} and\\n{@code 0 <= h < 1}.',\n    'alternatives': [\n      '@throws FractionConversionException if the conversion of {@code h} to a {@link org.apache.commons.math3.fraction.BigFraction} fails when expressing {@code d} as {@code (k - h) / m} for integer {@code k, m} and {@code 0 <= h < 1}.',\n      '@throws FractionConversionException if the conversion of {@code h} to a {@link org.apache.commons.math3.fraction.BigFraction} fails while trying to express {@code d} as {@code (k - h) / m} for integer {@code k, m} and {@code 0 <= h < 1}.',\n      '@throws FractionConversionException if the algorithm is unable to convert {@code h} into a {@link org.apache.commons.math3.fraction.BigFraction} when expressing {@code d} as {@code (k - h) / m} for integer {@code k, m} and {@code 0 <= h < 1}.',\n      '@throws FractionConversionException if the conversion of {@code h} to a {@link org.apache.commons.math3.fraction.BigFraction} in expressing {@code d} as {@code (k - h) / m} for integer {@code k, m} and {@code 0 <= h < 1} fails.',\n      '@throws FractionConversionException if the conversion of {@code h} to a {@link org.apache.commons.math3.fraction.BigFraction} fails when trying to express {@code d} as {@code (k - h) / m} for integer {@code k, m} and {@code 0 <= h < 1}.'\n    ]\n  },\n  {\n    'tag': '@param n Number of observations',\n    'alternatives': [\n      '@param n Count of observations',\n      '@param n Size of the sample',\n      '@param n Number of instances',\n      '@param n Quantity of observations',\n      '@param n Total number of data points'\n    ]\n  },\n  {\n    'tag': '@return the component distributions and associated weights.',\n    'alternatives': [\n      '@return distributions of the components and their respective weights.',\n      '@return associated weights and component distributions.',\n      '@return the weights and distributions of the components.',\n      '@return the weights and associated component distributions.',\n      '@return the component distributions together with their associated weights.'\n    ]\n  },\n  {\n    'tag': '@param components List of (weight, distribution) pairs from which to sample.',\n    'alternatives': [\n      '@param components List of pairs (weight, distribution) from which to sample.',\n      '@param components List of (weight, distribution) pairs to sample from.',\n      '@param components List of (weight, distribution) pairs for sampling purposes.',\n      '@param components List of (weight, distribution) pairs used for sampling.',\n      '@param components List of pairs (weight, distribution) to be sampled from.'\n    ]\n  },\n  {\n    'tag': '@param rng Random number generator.',\n    'alternatives': [\n      '@param rng Random number generator object.',\n      '@param rng Random number generator instance.',\n      '@param rng Random number generator implementation.',\n      '@param rng Random number generator source.',\n      '@param rng Random number generator entity.'\n    ]\n  },\n  {\n    'tag': '@param components Distributions from which to sample.',\n    'alternatives': [\n      '@param distributions Distributions to sample from.',\n      '@param distributions Distributions for sampling.',\n      '@param distributions Distributions used for sampling.',\n      '@param distributions Distributions to select from.',\n      '@param distributions Distributions to choose from.'\n    ]\n  },\n  {\n    'tag': '@throws NotPositiveException if any of the weights is negative.',\n    'alternatives': [\n      '@throws NotPositiveException if any weight is negative.',\n      '@throws NotPositiveException if a weight is negative.',\n      '@throws NotPositiveException if any of the weights are negative.',\n      '@throws NotPositiveException if a negative weight is encountered.',\n      '@throws NotPositiveException if any weight value is negative.'\n    ]\n  },\n  {\n    'tag': '@throws DimensionMismatchException if not all components have the same\\nnumber of variables.',\n    'alternatives': [\n      '@throws DimensionMismatchException if the components do not share equal number of variables.',\n      '@throws DimensionMismatchException if the number of variables differs among components.',\n      '@throws DimensionMismatchException if the number of variables is inconsistent across components.',\n      '@throws DimensionMismatchException if the components have unequal number of variables.',\n      '@throws DimensionMismatchException if the variables do not match for all components.'\n    ]\n  },\n  {\n    'tag': '@return the shape parameter',\n    'alternatives': [\n      '@return the parameter indicating the shape',\n      '@return the value representing the shape',\n      '@return the parameter that determines the shape',\n      '@return the shape-related parameter',\n      '@return the parameter specifying the shape'\n    ]\n  },\n  {\n    'tag': '@return the shape parameter',\n    'alternatives': [\n      '@return the parameter indicating the shape',\n      '@return the value representing the shape',\n      '@return the parameter that determines the shape',\n      '@return the shape-related parameter',\n      '@return the parameter specifying the shape'\n    ]\n  },\n  {\n    'tag': '@return the scale parameter',\n    'alternatives': [\n      '@return the parameter representing the scale',\n      '@return the value indicating the scale',\n      '@return the parameter that determines the scale',\n      '@return the scale-related parameter',\n      '@return the parameter specifying the scale'\n    ]\n  },\n  {\n    'tag': '@return the scale parameter',\n    'alternatives': [\n      '@return the parameter representing the scale',\n      '@return the value indicating the scale',\n      '@return the parameter that determines the scale',\n      '@return the scale-related parameter',\n      '@return the parameter specifying the scale'\n    ]\n  },\n  {\n    'tag': '@return {@inheritDoc}',\n    'alternatives': [\n      '@return the inherited documentation',\n      '@return the documentation from the superclass',\n      '@return the documentation inherited from the parent',\n      '@return the inherited method documentation',\n      '@return the documentation provided in the parent class'\n    ]\n  },\n  {\n    'tag': '@return lower bound of the support (always 0)',\n    'alternatives': [\n      '@return minimum possible value (always 0)',\n      '@return the smallest value allowed (always 0)',\n      '@return the lowermost supported value (always 0)',\n      '@return the minimum supported value (always 0)',\n      '@return the smallest allowed value (always 0)'\n    ]\n  },\n  {\n    'tag': '@return upper bound of the support (always Double.POSITIVE_INFINITY)',\n    'alternatives': [\n      '@return maximum possible value (always Double.POSITIVE_INFINITY)',\n      '@return the biggest value allowed (always Double.POSITIVE_INFINITY)',\n      '@return the uppermost supported value (always Double.POSITIVE_INFINITY)',\n      '@return the largest supported value (always Double.POSITIVE_INFINITY)',\n      '@return the largest allowed value (always Double.POSITIVE_INFINITY)'\n    ]\n  },\n  {\n    'tag': '@return random value sampled from the Gamma(shape, scale) distribution',\n    'alternatives': [\n      '@return randomly sampled value from the Gamma(shape, scale) distribution',\n      '@return value obtained by randomly sampling the Gamma(shape, scale) distribution',\n      '@return a random value drawn from the Gamma(shape, scale) distribution',\n      '@return random value generated from the Gamma(shape, scale) distribution',\n      '@return a randomly generated value from the Gamma(shape, scale) distribution'\n    ]\n  },\n  {\n    'tag': '@param shape the shape parameter',\n    'alternatives': [\n      '@param shape the parameter representing the shape',\n      '@param shape the value indicating the shape',\n      '@param shape the parameter that determines the shape',\n      '@param shape the shape-related parameter',\n      '@param shape the parameter specifying the shape'\n    ]\n  },\n  {\n    'tag': '@param scale the scale parameter',\n    'alternatives': [\n      '@param scale the parameter representing the scale',\n      '@param scale the value indicating the scale',\n      '@param scale the parameter that determines the scale',\n      '@param scale the scale-related parameter',\n      '@param scale the parameter specifying the scale'\n    ]\n  },\n  {\n    'tag': '@param shape the shape parameter',\n    'alternatives': [\n      '@param shape the parameter representing the shape',\n      '@param shape the value indicating the shape',\n      '@param shape the parameter that determines the shape',\n      '@param shape the shape-related parameter',\n      '@param shape the parameter specifying the shape'\n    ]\n  }\n]"