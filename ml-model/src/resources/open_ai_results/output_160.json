"output = [\n  {\n    'tag': '@param start the initial guess.',\n    'alternatives': [\n      '@param start the initial estimation.',\n      '@param start the initial hypothesis.',\n      '@param start the initial assumption.',\n      '@param start the initial approximation.',\n      '@param start the initial prediction.'\n    ]\n  },\n  {\n    'tag': '@param weight the weight matrix',\n    'alternatives': [\n      '@param weight the matrix of weights.',\n      '@param weight the matrix containing the weights.',\n      '@param weight the matrix representing the weights.',\n      '@param weight the weight array.',\n      '@param weight the array of weights.'\n    ]\n  },\n  {\n    'tag': '@param checker convergence checker',\n    'alternatives': [\n      '@param checker the convergence detector.',\n      '@param checker the convergence validator.',\n      '@param checker the convergence tester.',\n      '@param checker the convergence inspector.',\n      '@param checker the convergence assessor.'\n    ]\n  },\n  {\n    'tag': '@param maxEvaluations the maximum number of times to evaluate the model',\n    'alternatives': [\n      '@param maxEvaluations the maximum number of model evaluations.',\n      '@param maxEvaluations the maximum number of model function evaluations.',\n      '@param maxEvaluations the maximum count of model evaluations.',\n      '@param maxEvaluations the maximum limit of model evaluations.',\n      '@param maxEvaluations the maximum threshold of model evaluations.'\n    ]\n  },\n  {\n    'tag': '@param maxIterations the maximum number to times to iterate in the algorithm',\n    'alternatives': [\n      '@param maxIterations the maximum number of algorithm iterations.',\n      '@param maxIterations the maximum number of iterations in the algorithm.',\n      '@param maxIterations the maximum count of algorithm iterations.',\n      '@param maxIterations the maximum loop limit in the algorithm.',\n      '@param maxIterations the algorithm maximum iteration count.'\n    ]\n  },\n  {\n    'tag': '@return the specified General Least Squares problem.',\n    'alternatives': [\n      '@return the requested General Least Squares problem.',\n      '@return the indicated General Least Squares problem.',\n      '@return the provided General Least Squares problem.',\n      '@return the selected General Least Squares problem.',\n      '@return the desired General Least Squares problem.'\n    ]\n  },\n  {\n    'tag': '@param model the model function. Produces the computed values.',\n    'alternatives': [\n      '@param model the function that generates the computed values.',\n      '@param model the function that produces the calculated values.',\n      '@param model the function that yields the computed values.',\n      '@param model the function that creates the generated values.',\n      '@param model the function that generates the produced values.'\n    ]\n  },\n  {\n    'tag': '@param jacobian the jacobian of the model with respect to the parameters',\n    'alternatives': [\n      '@param jacobian the model's Jacobian matrix in relation to the parameters.',\n      '@param jacobian the model's parameter-dependent Jacobian matrix.',\n      '@param jacobian the Jacobian matrix of the model with respect to the parameters.',\n      '@param jacobian the model's parameter-related Jacobian matrix.',\n      '@param jacobian the Jacobian matrix of the model in relation to the parameters.'\n    ]\n  },\n  {\n    'tag': '@param observed the observed (target) values',\n    'alternatives': [\n      '@param observed the target (observed) values.',\n      '@param observed the values being observed (target).',\n      '@param observed the targeted observed values.',\n      '@param observed the observed (desired) measurements.',\n      '@param observed the values that are observed (target).'\n    ]\n  },\n  {\n    'tag': '@param start the initial guess.',\n    'alternatives': [\n      '@param start the initial estimation.',\n      '@param start the initial hypothesis.',\n      '@param start the initial assumption.',\n      '@param start the initial approximation.',\n      '@param start the initial prediction.'\n    ]\n  },\n  {\n    'tag': '@param weight the weight matrix',\n    'alternatives': [\n      '@param weight the matrix of weights.',\n      '@param weight the matrix containing the weights.',\n      '@param weight the matrix representing the weights.',\n      '@param weight the weight array.',\n      '@param weight the array of weights.'\n    ]\n  },\n  {\n    'tag': '@param checker convergence checker',\n    'alternatives': [\n      '@param checker the convergence detector.',\n      '@param checker the convergence validator.',\n      '@param checker the convergence tester.',\n      '@param checker the convergence inspector.',\n      '@param checker the convergence assessor.'\n    ]\n  },\n  {\n    'tag': '@param maxEvaluations the maximum number of times to evaluate the model',\n    'alternatives': [\n      '@param maxEvaluations the maximum number of model evaluations.',\n      '@param maxEvaluations the maximum number of model function evaluations.',\n      '@param maxEvaluations the maximum count of model evaluations.',\n      '@param maxEvaluations the maximum limit of model evaluations.',\n      '@param maxEvaluations the maximum threshold of model evaluations.'\n    ]\n  },\n  {\n    'tag': '@param maxIterations the maximum number to times to iterate in the algorithm',\n    'alternatives': [\n      '@param maxIterations the maximum number of algorithm iterations.',\n      '@param maxIterations the maximum number of iterations in the algorithm.',\n      '@param maxIterations the maximum count of algorithm iterations.',\n      '@param maxIterations the maximum loop limit in the algorithm.',\n      '@param maxIterations the algorithm maximum iteration count.'\n    ]\n  },\n  {\n    'tag': '@return the specified General Least Squares problem.',\n    'alternatives': [\n      '@return the requested General Least Squares problem.',\n      '@return the indicated General Least Squares problem.',\n      '@return the provided General Least Squares problem.',\n      '@return the selected General Least Squares problem.',\n      '@return the desired General Least Squares problem.'\n    ]\n  },\n  {\n    'tag': '@param problem the unweighted problem',\n    'alternatives': [\n      '@param problem the problem without any weights.',\n      '@param problem the problem with no weight.',\n      '@param problem the problem that is unweighted.',\n      '@param problem the problem having no weights.',\n      '@param problem the problem lacking weights.'\n    ]\n  },\n  {\n    'tag': '@param weights the matrix of weights',\n    'alternatives': [\n      '@param weights the weight matrix.',\n      '@param weights the matrix containing the weights.',\n      '@param weights the matrix representing the weights.',\n      '@param weights the weight array.',\n      '@param weights the array of weights.'\n    ]\n  },\n  {\n    'tag': '@return a new {@link LeastSquaresProblem} with the weights applied. The original\\n        {@code problem} is not modified.',\n    'alternatives': [\n      '@return a fresh {@link LeastSquaresProblem} with the weights added. The original\\n        {@code problem} remains unchanged.',\n      '@return a new {@link LeastSquaresProblem} with the weights incorporated. The original\\n        {@code problem} is not altered.',\n      '@return a new {@link LeastSquaresProblem} with the weights included. The original\\n        {@code problem} is not changed.',\n      '@return a new {@link LeastSquaresProblem} with the weights used. The original\\n        {@code problem} is not affected.',\n      '@return a new {@link LeastSquaresProblem} with the weights implemented. The original\\n        {@code problem} stays the same.'\n    ]\n  },\n  {\n    'tag': '@param problem the unweighted problem',\n    'alternatives': [\n      '@param problem the problem without any weights.',\n      '@param problem the problem with no weight.',\n      '@param problem the problem that is unweighted.',\n      '@param problem the problem having no weights.',\n      '@param problem the problem lacking weights.'\n    ]\n  },\n  {\n    'tag': '@param weights the diagonal of the weight matrix',\n    'alternatives': [\n      '@param weights the diagonal elements of the weight matrix.',\n      '@param weights the diagonal entries of the weight matrix.',\n      '@param weights the weight diagonal of the matrix.',\n      '@param weights the diagonal values of the weight matrix.',\n      '@param weights the diagonal coefficients of the weight matrix.'\n    ]\n  },\n  {\n    'tag': '@return a new {@link LeastSquaresProblem} with the weights applied. The original\\n        {@code problem} is not modified.',\n    'alternatives': [\n      '@return a fresh {@link LeastSquaresProblem} with the weights added. The original\\n        {@code problem} remains unchanged.',\n      '@return a new {@link LeastSquaresProblem} with the weights incorporated. The original\\n        {@code problem} is not altered.',\n      '@return a new {@link LeastSquaresProblem} with the weights included. The original\\n        {@code problem} is not changed.',\n      '@return a new {@link LeastSquaresProblem} with the weights used. The original\\n        {@code problem} is not affected.',\n      '@return a new {@link LeastSquaresProblem} with the weights implemented. The original\\n        {@code problem} stays the same.'\n    ]\n  },\n  {\n    'tag': '@param problem the problem to track.',\n    'alternatives': [\n      '@param problem the target problem to monitor.',\n      '@param problem the problem being tracked.',\n      '@param problem the problem under observation.',\n      '@param problem the tracked problem.',\n      '@param problem the problem to be monitored.'\n    ]\n  },\n  {\n    'tag': '@param counter the counter to increment.',\n    'alternatives': [\n      '@param counter the increment counter.',\n      '@param counter the counter to increase.',\n      '@param counter the counter to raise.',\n      '@param counter the counter to grow.',\n      '@param counter the counter to augment.'\n    ]\n  },\n  {\n    'tag': '@return a least squares problem that tracks evaluations',\n    'alternatives': [\n      '@return a problem of least squares that monitors evaluations.',\n      '@return a problem in least squares that keeps track of evaluations.',\n      '@return a least squares problem that records evaluations.',\n      '@return a least squares problem with evaluation tracking.',\n      '@return a problem of least squares that traces evaluations.'\n    ]\n  },\n  {\n    'tag': '@param checker the convergence checker to adapt.',\n    'alternatives': [\n      '@param checker the adaptable convergence checker.',\n      '@param checker the convergence checker to modify.',\n      '@param checker the convergence checker to adjust.',\n      '@param checker the convergent checker to modify.',\n      '@param checker the checker for adaptation of convergence.'\n    ]\n  }\n]"