"output=[\n  {\n    'tag': '@throws IllegalStateException if <code>hasNext()</code> has already\\n been called.',\n    'alternatives': [\n      '@throws IllegalStateException when <code>hasNext()</code> has already been called.',\n      '@throws IllegalStateException if the method <code>hasNext()</code> has been called before.',\n      '@throws IllegalStateException in case <code>hasNext()</code> has already been invoked.'\n    ]\n  },\n  {\n    'tag': '@return the iterator',\n    'alternatives': [\n      '@return the iterable',\n      '@return the underlying iterator',\n      '@return the instance of iterator'\n    ]\n  },\n  {\n    'tag': '@param iterator the iterator to use',\n    'alternatives': [\n      '@param iterator the provided iterator',\n      '@param iterator the supplied iterator',\n      '@param iterator to be utilized'\n    ]\n  },\n  {\n    'tag': '@return the predicate',\n    'alternatives': [\n      '@return the condition',\n      '@return the specified predicate',\n      '@return the expression'\n    ]\n  },\n  {\n    'tag': '@param predicate the predicate to use',\n    'alternatives': [\n      '@param predicate the provided predicate',\n      '@param predicate the supplied condition',\n      '@param predicate to be utilized'\n    ]\n  },\n  {\n    'tag': '@param iterator the iterator to use',\n    'alternatives': [\n      '@param iterator the provided iterator',\n      '@param iterator the supplied iterator',\n      '@param iterator to be utilized'\n    ]\n  },\n  {\n    'tag': '@param iterator the iterator to use',\n    'alternatives': [\n      '@param iterator the provided iterator',\n      '@param iterator the supplied iterator',\n      '@param iterator to be utilized'\n    ]\n  },\n  {\n    'tag': '@param predicate the predicate to use',\n    'alternatives': [\n      '@param predicate the provided predicate',\n      '@param predicate the supplied condition',\n      '@param predicate to be utilized'\n    ]\n  },\n  {\n    'tag': '@return the decorated iterator',\n    'alternatives': [\n      '@return the iterator with decorations',\n      '@return the iterator after applying decorations',\n      '@return the iterator that is decorated'\n    ]\n  },\n  {\n    'tag': '@param iterator the iterator to decorate',\n    'alternatives': [\n      '@param iterator the provided iterator for decoration',\n      '@param iterator the supplied iterator to be decorated',\n      '@param iterator to be decorated'\n    ]\n  },\n  {\n    'tag': '@return the decorated iterator',\n    'alternatives': [\n      '@return the iterator with decorations',\n      '@return the iterator after applying decorations',\n      '@return the iterator that is decorated'\n    ]\n  },\n  {\n    'tag': '@return the iterator.',\n    'alternatives': [\n      '@return the instance of iterator.',\n      '@return the returned iterator.',\n      '@return an iterator instance.'\n    ]\n  },\n  {\n    'tag': '@param iterator the iterator to use',\n    'alternatives': [\n      '@param iterator to be utilized',\n      '@param provided iterator to utilize',\n      '@param supplied iterator to use'\n    ]\n  },\n  {\n    'tag': '@return the predicate.',\n    'alternatives': [\n      '@return the expression.',\n      '@return the specified predicate.',\n      '@return the condition.'\n    ]\n  },\n  {\n    'tag': '@param predicate the transformer to use',\n    'alternatives': [\n      '@param predicate the provided transformer',\n      '@param predicate the supplied converter',\n      '@param predicate to be utilized'\n    ]\n  },\n  {\n    'tag': '@param iterator the iterator to use',\n    'alternatives': [\n      '@param iterator the provided iterator',\n      '@param iterator the supplied iterator',\n      '@param iterator to be utilized'\n    ]\n  },\n  {\n    'tag': '@param iterator the iterator to use',\n    'alternatives': [\n      '@param iterator the provided iterator',\n      '@param iterator the supplied iterator',\n      '@param iterator to be utilized'\n    ]\n  },\n  {\n    'tag': '@param predicate the predicate to use',\n    'alternatives': [\n      '@param predicate the provided predicate',\n      '@param predicate the supplied condition',\n      '@param predicate to be utilized'\n    ]\n  },\n  {\n    'tag': '@param predicate the predicate to use.',\n    'alternatives': [\n      '@param predicate the provided predicate.',\n      '@param predicate the supplied condition.',\n      '@param predicate to be utilized.'\n    ]\n  },\n  {\n    'tag': '@param <K> the key type',\n    'alternatives': [\n      '@param <K> the key category',\n      '@param <K> the kind of key',\n      '@param <K> the key class'\n    ]\n  },\n  {\n    'tag': '@param <V> the value type',\n    'alternatives': [\n      '@param <V> the value category',\n      '@param <V> the kind of value',\n      '@param <V> the value class'\n    ]\n  },\n  {\n    'tag': '@return {@link IterableMap}',\n    'alternatives': [\n      '@return an instance of {@link IterableMap}',\n      '@return a {@link IterableMap} object',\n      '@return the implementation of {@link IterableMap}'\n    ]\n  },\n  {\n    'tag': '@param <K> the key type',\n    'alternatives': [\n      '@param <K> the key category',\n      '@param <K> the kind of key',\n      '@param <K> the key class'\n    ]\n  },\n  {\n    'tag': '@param <V> the element type',\n    'alternatives': [\n      '@param <V> the element category',\n      '@param <V> the kind of element',\n      '@param <V> the element class'\n    ]\n  },\n  {\n    'tag': '@return {@link Map}',\n    'alternatives': [\n      '@return an instance of {@link Map}',\n      '@return a {@link Map} object',\n      '@return the implementation of {@link Map}'\n    ]\n  }\n]"