"output = [\n  {\n    'tag': '@throws MathIllegalArgumentException if the parameters are not valid',\n    'alternatives': [\n      '@throws MathIllegalArgumentException in case the provided parameters are not valid',\n      '@throws MathIllegalArgumentException if the given parameters are invalid',\n      '@throws MathIllegalArgumentException if the parameters passed are not valid',\n      '@throws MathIllegalArgumentException if the provided parameters are invalid',\n      '@throws MathIllegalArgumentException when the parameters are not valid'\n    ]\n  },\n  {\n    'tag': '@return the value of biasCorrected.',\n    'alternatives': [\n      '@return the biasCorrected value.',\n      '@return the value of the biasCorrected property.',\n      '@return the value representing whether bias is corrected.',\n      '@return the value that indicates if bias is corrected.',\n      '@return the value indicating whether bias is corrected.'\n    ]\n  },\n  {\n    'tag': '@param biasCorrected new biasCorrected property value',\n    'alternatives': [\n      '@param biasCorrected the new value for the biasCorrected property',\n      '@param biasCorrected the updated biasCorrected property value',\n      '@param biasCorrected the new value to set for the biasCorrected property',\n      '@param biasCorrected the value to assign to the biasCorrected property',\n      '@param biasCorrected the value representing the updated biasCorrected property'\n    ]\n  },\n  {\n    'tag': '@return the varianceDirection',\n    'alternatives': [\n      '@return the direction of variance',\n      '@return the value indicating the variance direction',\n      '@return the variance direction',\n      '@return the direction of the variance',\n      '@return the value representing the variance direction'\n    ]\n  },\n  {\n    'tag': '@param varianceDirection the direction of the semivariance',\n    'alternatives': [\n      '@param varianceDirection the direction of the semivariance',\n      '@param varianceDirection the semivariance direction',\n      '@param varianceDirection indicating the direction of semivariance',\n      '@param varianceDirection representing the direction of semivariance',\n      '@param varianceDirection that represents the direction of the semivariance'\n    ]\n  },\n  {\n    'tag': '@param biasCorrected setting for bias correction - true means\\nbias will be corrected and is equivalent to using the argumentless\\nconstructor',\n    'alternatives': [\n      '@param biasCorrected the setting for bias correction. If true, bias will be corrected, which is equivalent to using the argumentless constructor.',\n      '@param biasCorrected the value indicating whether to correct bias. When set to true, bias will be corrected, which is the same as using the argumentless constructor.',\n      '@param biasCorrected the value to determine if bias should be corrected. If set to true, bias will be corrected and is equivalent to using the constructor without arguments.',\n      '@param biasCorrected indicating whether to correct bias. If set to true, bias will be corrected, which is equivalent to using the argumentless constructor.',\n      '@param biasCorrected setting for bias correction. If set to true, bias will be corrected and is equivalent to using the argumentless constructor.'\n    ]\n  },\n  {\n    'tag': '@param direction setting for the direction of the SemiVariance\\nto calculate',\n    'alternatives': [\n      '@param direction the setting for determining the direction of calculation for the SemiVariance.',\n      '@param direction the setting indicating the direction to calculate the SemiVariance.',\n      '@param direction the value to specify the direction used for calculating the SemiVariance.',\n      '@param direction specifying the calculation direction for the SemiVariance.',\n      '@param direction the value representing the calculation direction for the SemiVariance.'\n    ]\n  },\n  {\n    'tag': '@param corrected setting for bias correction - true means\\nbias will be corrected and is equivalent to using the argumentless\\nconstructor',\n    'alternatives': [\n      '@param corrected the setting for bias correction. If true, bias will be corrected, which is equivalent to using the argumentless constructor.',\n      '@param corrected the value indicating whether to correct bias. When set to true, bias will be corrected, which is the same as using the argumentless constructor.',\n      '@param corrected the value to determine if bias should be corrected. If set to true, bias will be corrected and is equivalent to using the constructor without arguments.',\n      '@param corrected indicating whether to correct bias. If set to true, bias will be corrected, which is equivalent to using the argumentless constructor.',\n      '@param corrected setting for bias correction. If set to true, bias will be corrected and is equivalent to using the argumentless constructor.'\n    ]\n  },\n  {\n    'tag': '@param direction setting for the direction of the SemiVariance\\nto calculate',\n    'alternatives': [\n      '@param direction the setting for determining the direction of calculation for the SemiVariance.',\n      '@param direction the setting indicating the direction to calculate the SemiVariance.',\n      '@param direction the value to specify the direction used for calculating the SemiVariance.',\n      '@param direction specifying the calculation direction for the SemiVariance.',\n      '@param direction the value representing the calculation direction for the SemiVariance.'\n    ]\n  },\n  {\n    'tag': '@param original the {@code SemiVariance} instance to copy',\n    'alternatives': [\n      '@param original the instance of {@code SemiVariance} to copy',\n      '@param original the {@code SemiVariance} instance that will be copied',\n      '@param original the object of type {@code SemiVariance} to be copied',\n      '@param original the instance of {@code SemiVariance} to be duplicated',\n      '@param original the {@code SemiVariance} object to be copied'\n    ]\n  },\n  {\n    'tag': '@param source FirstMoment to copy',\n    'alternatives': [\n      '@param source the FirstMoment instance to duplicate',\n      '@param source the FirstMoment object to be copied',\n      '@param source the instance to be copied from FirstMoment',\n      '@param source the object of type FirstMoment to be copied',\n      '@param source the FirstMoment to be cloned'\n    ]\n  },\n  {\n    'tag': '@param dest FirstMoment to copy to',\n    'alternatives': [\n      '@param dest the FirstMoment instance to copy to',\n      '@param dest the FirstMoment object to copy to',\n      '@param dest the destination for copying the FirstMoment',\n      '@param dest the object where FirstMoment will be copied to',\n      '@param dest the FirstMoment target for the copy operation'\n    ]\n  },\n  {\n    'tag': '@param original the {@code FirstMoment} instance to copy',\n    'alternatives': [\n      '@param original the instance of {@code FirstMoment} to copy',\n      '@param original the {@code FirstMoment} instance that will be copied',\n      '@param original the object of type {@code FirstMoment} to be copied',\n      '@param original the instance of {@code FirstMoment} to be duplicated',\n      '@param original the {@code FirstMoment} object to be copied'\n    ]\n  },\n  {\n    'tag': '@return the skewness of the available values.',\n    'alternatives': [\n      '@return the calculated skewness of the available values.',\n      '@return the skewness value based on the available data.',\n      '@return the computed value representing the skewness of the available values.',\n      '@return the value indicating the skewness of the given data points.',\n      '@return the skewness of the provided values.'\n    ]\n  },\n  {\n    'tag': '@param values the input array',\n    'alternatives': [\n      '@param values the array of input values',\n      '@param values the given input array',\n      '@param values the provided array of input values',\n      '@param values the array that contains the input data',\n      '@param values the input array of values'\n    ]\n  },\n  {\n    'tag': '@param begin the index of the first array element to include',\n    'alternatives': [\n      '@param begin the index to start including elements from the array',\n      '@param begin the starting index for including array elements',\n      '@param begin the index indicating where to start including elements from the array',\n      '@param begin the value representing the first array element to include',\n      '@param begin the index of the initial element to be considered'\n    ]\n  },\n  {\n    'tag': '@param length the number of elements to include',\n    'alternatives': [\n      '@param length the count of elements to be included',\n      '@param length the number of elements that should be considered',\n      '@param length the total count of elements to include',\n      '@param length the total number of elements to be included',\n      '@param length the length of the range of elements to include'\n    ]\n  },\n  {\n    'tag': '@return the skewness of the values or Double.NaN if length is less than\\n3',\n    'alternatives': [\n      '@return the computed skewness of the values. If the length is less than 3, Double.NaN will be returned.',\n      '@return the skewness value calculated from the provided values. If the length is less than 3, Double.NaN will be returned.',\n      '@return the skewness of the given values. If the length is less than 3, Double.NaN will be returned.',\n      '@return the skewness based on the values. If the length is less than 3, Double.NaN will be returned.',\n      '@return the skewness of the provided values. If the length is less than 3, Double.NaN will be returned.'\n    ]\n  },\n  {\n    'tag': '@param source Skewness to copy',\n    'alternatives': [\n      '@param source the Skewness instance to duplicate',\n      '@param source the Skewness object to be copied',\n      '@param source the instance to be copied from Skewness',\n      '@param source the object of type Skewness to be copied',\n      '@param source the Skewness to be cloned'\n    ]\n  },\n  {\n    'tag': '@param dest Skewness to copy to',\n    'alternatives': [\n      '@param dest the Skewness instance to copy to',\n      '@param dest the Skewness object to copy to',\n      '@param dest the destination for copying the Skewness',\n      '@param dest the object where Skewness will be copied to',\n      '@param dest the Skewness target for the copy operation'\n    ]\n  },\n  {\n    'tag': '@param m3 external moment',\n    'alternatives': [\n      '@param m3 the external moment to include',\n      '@param m3 the external moment value',\n      '@param m3 the moment provided externally',\n      '@param m3 the moment that comes from an external source',\n      '@param m3 the moment obtained externally'\n    ]\n  },\n  {\n    'tag': '@param original the {@code Skewness} instance to copy',\n    'alternatives': [\n      '@param original the instance of {@code Skewness} to copy',\n      '@param original the {@code Skewness} instance that will be copied',\n      '@param original the object of type {@code Skewness} to be copied',\n      '@param original the instance of {@code Skewness} to be duplicated',\n      '@param original the {@code Skewness} object to be copied'\n    ]\n  },\n  {\n    'tag': '@param v vector to add',\n    'alternatives': [\n      '@param v the vector to add',\n      '@param v the vector that will be included in the calculation',\n      '@param v the input vector to be added',\n      '@param v the vector that needs to be added',\n      '@param v the vector used for the addition operation'\n    ]\n  },\n  {\n    'tag': '@throws DimensionMismatchException if the vector does not have the right dimension',\n    'alternatives': [\n      '@throws DimensionMismatchException when the vector does not have the correct dimension',\n      '@throws DimensionMismatchException if the vector dimension does not match the expected size',\n      '@throws DimensionMismatchException in case the dimension of the vector is incorrect',\n      '@throws DimensionMismatchException if the vector has an incompatible dimension',\n      '@throws DimensionMismatchException when the vector size is not as expected'\n    ]\n  },\n  {\n    'tag': '@return mean vector',\n    'alternatives': [\n      '@return the mean vector',\n      '@return the vector representing the mean',\n      '@return the calculated vector of means',\n      '@return the vector denoting the average value',\n      '@return the mean value represented as a vector'\n    ]\n  }\n]"