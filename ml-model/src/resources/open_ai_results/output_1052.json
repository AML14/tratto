"[\n  {\n    'tag': '@param weights the weights array',\n    'alternatives': [\n      '@param weights the array of weights',\n      '@param weights the array containing the weights',\n      '@param weights the array that stores the weights',\n      '@param weights the weight array',\n      '@param weights an array holding the weights'\n    ]\n  },\n  {\n    'tag': '@param begin index of the first array element to include',\n    'alternatives': [\n      '@param begin the starting index in the array to include',\n      '@param begin the index from which to start including array elements',\n      '@param begin the index of the first element in the array to be included',\n      '@param begin the initial index to include from in the array',\n      '@param begin the starting position in the array to consider'\n    ]\n  },\n  {\n    'tag': '@param keyTransformer the transformer to use for key conversion, null means no conversion',\n    'alternatives': [\n      '@param keyTransformer the transformer used for converting keys, null indicating no conversion',\n      '@param keyTransformer the converter that transforms keys, null indicating no conversion',\n      '@param keyTransformer the transformer employed for key conversion, null if no conversion is performed',\n      '@param keyTransformer the transformer responsible for key conversion, null if no conversion is applied',\n      '@param keyTransformer the converter used to transform keys, null implying no conversion'\n    ]\n  },\n  {\n    'tag': '@param valueTransformer the transformer to use for value conversion, null means no conversion',\n    'alternatives': [\n      '@param valueTransformer the converter for transforming values, null indicating no conversion',\n      '@param valueTransformer the transformer used for converting values, null meaning no conversion',\n      '@param valueTransformer the transformer employed for value conversion, null if no conversion is performed',\n      '@param valueTransformer the transformer responsible for value conversion, null if no conversion is applied',\n      '@param valueTransformer the converter responsible for transforming values, null implying no conversion'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if the key is null and null keys are invalid',\n    'alternatives': [\n      '@throws NullPointerException if the key is null and null keys are not allowed',\n      '@throws NullPointerException if the key is null and null keys are considered invalid',\n      '@throws NullPointerException if the key is null and null keys are regarded as invalid',\n      '@throws NullPointerException if the key is null and null keys are treated as invalid',\n      '@throws NullPointerException if the key is null and null keys are considered invalid'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if the iterator is null',\n    'alternatives': [\n      '@throws NullPointerException if the iterator is null',\n      '@throws NullPointerException if the iterator is null',\n      '@throws NullPointerException if the iterator is null',\n      '@throws NullPointerException if the iterator is null',\n      '@throws NullPointerException if the iterator is null'\n    ]\n  },\n  {\n    'tag': '@return the {@code Set} of values removed, implementations should\\n  return null for no mapping found, but may return an empty collection',\n    'alternatives': [\n      '@return the {@code Set} of removed values, should\\n  return null if no mapping is found, but can return an empty collection',\n      '@return the removed values as a {@code Set}, return\\n  null when no mapping is found but can return an empty collection',\n      '@return the set of values that have been removed, implementations can\\n  return null if no mapping is found, but can return an empty collection',\n      '@return a {@code Set} containing the removed values, implementations may\\n  return null if no mapping is found, but can return an empty collection',\n      '@return a {@code Set} of removed values, implementation should\\n  return null if there is no mapping, but can return an empty collection'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if the iterator is null',\n    'alternatives': [\n      '@throws NullPointerException if the iterator is null',\n      '@throws NullPointerException if the iterator is null',\n      '@throws NullPointerException if the iterator is null',\n      '@throws NullPointerException if the iterator is null',\n      '@throws NullPointerException if the iterator is null'\n    ]\n  },\n  {\n    'tag': '@throws UnsupportedOperationException always',\n    'alternatives': [\n      '@throws UnsupportedOperationException in all cases',\n      '@throws UnsupportedOperationException for every situation',\n      '@throws UnsupportedOperationException under any circumstance',\n      '@throws UnsupportedOperationException under any condition',\n      '@throws UnsupportedOperationException under all circumstances'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if the initial capacity is negative',\n    'alternatives': [\n      '@throws IllegalArgumentException if the initial capacity is less than zero',\n      '@throws IllegalArgumentException if the initial capacity is negative',\n      '@throws IllegalArgumentException if the initial capacity is negative',\n      '@throws IllegalArgumentException if the initial capacity is negative',\n      '@throws IllegalArgumentException if the initial capacity is negative'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if the initial capacity is negative',\n    'alternatives': [\n      '@throws IllegalArgumentException if the initial capacity is less than zero',\n      '@throws IllegalArgumentException if the initial capacity is negative',\n      '@throws IllegalArgumentException if the initial capacity is negative',\n      '@throws IllegalArgumentException if the initial capacity is negative',\n      '@throws IllegalArgumentException if the initial capacity is negative'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if the load factor is less than zero',\n    'alternatives': [\n      '@throws IllegalArgumentException if the load factor is negative',\n      '@throws IllegalArgumentException if the load factor is less than zero',\n      '@throws IllegalArgumentException if the load factor is less than zero',\n      '@throws IllegalArgumentException if the load factor is less than zero',\n      '@throws IllegalArgumentException if the load factor is less than zero'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if the map is null',\n    'alternatives': [\n      '@throws NullPointerException if the map is null',\n      '@throws NullPointerException if the map is null',\n      '@throws NullPointerException if the map is null',\n      '@throws NullPointerException if the map is null',\n      '@throws NullPointerException if the map is null'\n    ]\n  },\n  {\n    'tag': '@param predicates the predicates to check, not cloned, not null',\n    'alternatives': [\n      '@param predicates the predicates to validate, not cloned, not null',\n      '@param predicates the predicates to verify, not cloned, not null',\n      '@param predicates the predicates to examine, not cloned, not null',\n      '@param predicates the predicates for verification, not cloned, not null',\n      '@param predicates the predicates to evaluate, not cloned, not null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if the predicates array is null',\n    'alternatives': [\n      '@throws NullPointerException if the array of predicates is null',\n      '@throws NullPointerException if the predicates array is null',\n      '@throws NullPointerException if the predicates array is null',\n      '@throws NullPointerException if the array of predicates is null',\n      '@throws NullPointerException if the predicates array is null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if any predicate in the array is null',\n    'alternatives': [\n      '@throws NullPointerException if any predicate in the array is null',\n      '@throws NullPointerException if any predicate in the array is null',\n      '@throws NullPointerException if any predicate in the array is null',\n      '@throws NullPointerException if any predicate in the array is null',\n      '@throws NullPointerException if any predicate in the array is null'\n    ]\n  },\n  {\n    'tag': '@param predicates the predicates to check, cloned, not null',\n    'alternatives': [\n      '@param predicates the predicates to examine, cloned, not null',\n      '@param predicates the cloned predicates to verify, not null',\n      '@param predicates the cloned predicates to check, not null',\n      '@param predicates the predicates to validate, cloned, not null',\n      '@param predicates the cloned predicates to evaluate, not null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if the predicates array is null',\n    'alternatives': [\n      '@throws NullPointerException if the array of predicates is null',\n      '@throws NullPointerException if the predicates array is null',\n      '@throws NullPointerException if the predicates array is null',\n      '@throws NullPointerException if the array of predicates is null',\n      '@throws NullPointerException if the predicates array is null'\n    ]\n  },\n  {\n    'tag': '@param predicates the predicates to check, cloned, not null',\n    'alternatives': [\n      '@param predicates the predicates to examine, cloned, not null',\n      '@param predicates the cloned predicates to verify, not null',\n      '@param predicates the cloned predicates to check, not null',\n      '@param predicates the predicates to validate, cloned, not null',\n      '@param predicates the cloned predicates to evaluate, not null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if iterator is null',\n    'alternatives': [\n      '@throws NullPointerException if the iterator is null',\n      '@throws NullPointerException if the iterator is null',\n      '@throws NullPointerException if the iterator is null',\n      '@throws NullPointerException if the iterator is null',\n      '@throws NullPointerException if the iterator is null'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if either offset or max is negative',\n    'alternatives': [\n      '@throws IllegalArgumentException if offset or max is less than zero',\n      '@throws IllegalArgumentException if either offset or max is negative',\n      '@throws IllegalArgumentException if either offset or max is negative',\n      '@throws IllegalArgumentException if either offset or max is negative',\n      '@throws IllegalArgumentException if either offset or max is negative'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if array is null',\n    'alternatives': [\n      '@throws NullPointerException if the array is null',\n      '@throws NullPointerException if the array is null',\n      '@throws NullPointerException if the array is null',\n      '@throws NullPointerException if the array is null',\n      '@throws NullPointerException if the array is null'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if array is null',\n    'alternatives': [\n      '@throws NullPointerException if the array is null',\n      '@throws NullPointerException if the array is null',\n      '@throws NullPointerException if the array is null',\n      '@throws NullPointerException if the array is null',\n      '@throws NullPointerException if the array is null'\n    ]\n  },\n  {\n    'tag': '@throws IndexOutOfBoundsException if start is less than zero or greater\\n  than the length of the array',\n    'alternatives': [\n      '@throws IndexOutOfBoundsException if start is negative or greater\\n  than the array length',\n      '@throws IndexOutOfBoundsException if start is less than zero or greater\\n  than the array size',\n      '@throws IndexOutOfBoundsException if start is less than zero or greater\\n  than the length of the array',\n      '@throws IndexOutOfBoundsException if start is less than zero or exceeds\\n  the length of the array',\n      '@throws IndexOutOfBoundsException if start is less than zero or is more\\n  than the length of the array'\n    ]\n  }\n]"