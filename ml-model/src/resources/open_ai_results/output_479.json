"output=[{'tag': '@return is there a corresponding vertex to v in the subgraph', 'alternatives': ['@return is there a corresponding node to v in the subgraph', '@return does v have a corresponding vertex in the subgraph', '@return does the subgraph contain a vertex corresponding to v', '@return is v present as a vertex in the subgraph', '@return is there a vertex in the subgraph that corresponds to v']}, {'tag': '@return is there a corresponding edge to e in the subgraph', 'alternatives': ['@return is there a matching edge to e in the subgraph', '@return does e have a corresponding edge in the subgraph', '@return does the subgraph contain an edge corresponding to e', '@return is e present as an edge in the subgraph', '@return is there an edge in the subgraph that corresponds to e']}, {'tag': '@param rel the corresponding mapping', 'alternatives': ['@param rel the mapping that corresponds', '@param rel the mapping that is related', '@param rel the mapping associated with', '@param rel the mapping that matches', '@param rel the mapping corresponding to']}, {'tag': '@return do both relations map to the same vertices', 'alternatives': [\"@return do both relations have mappings to the same vertices\", \"@return do both relations map to identical vertices\", \"@return do both relations correspond to the same vertices\", \"@return do both relations have mappings that point to the same vertices\", \"@return do both relations map to the exact same vertices\"]}, {'tag': '@param g1 the first graph', 'alternatives': ['@param g1 the initial graph', '@param g1 the source graph', '@param g1 the first input graph', '@param g1 the primary graph', '@param g1 the starting graph']}, {'tag': '@param g2 the second graph which is a possible subgraph of g1', 'alternatives': ['@param g2 the potential subgraph of g1', '@param g2 the subgraph that may exist within g1', '@param g2 the candidate subgraph of g1', '@param g2 the graph that could be a subgraph of g1', '@param g2 the second graph that can be a subgraph of g1']}, {'tag': '@param core1 the mapping as array (forwards)', 'alternatives': ['@param core1 the mapping represented as an array (forwards)', '@param core1 the mapping in array format (forwards)', '@param core1 the mapping expressed as an array (forwards)', '@param core1 the array representation of the mapping (forwards)', '@param core1 the mapping stored as an array (forwards)']}, {'tag': '@param core2 the mapping as array (backwards)', 'alternatives': ['@param core2 the mapping represented as an array (backwards)', '@param core2 the mapping in array format (backwards)', '@param core2 the mapping expressed as an array (backwards)', '@param core2 the array representation of the mapping (backwards)', '@param core2 the mapping stored as an array (backwards)']}, {'tag': '@param graph1 the first graph', 'alternatives': ['@param graph1 the initial graph', '@param graph1 the source graph', '@param graph1 the first input graph', '@param graph1 the primary graph', '@param graph1 the starting graph']}, {'tag': '@param graph2 the second graph', 'alternatives': ['@param graph2 the other graph', '@param graph2 the next graph', '@param graph2 the second input graph', '@param graph2 the secondary graph', '@param graph2 the subgraph']}, {'tag': '@param vertexComparator comparator for semantic equivalence of vertices', 'alternatives': ['@param vertexComparator comparator to determine if vertices are semantically equivalent', '@param vertexComparator comparator used to check semantic equivalence of vertices', '@param vertexComparator comparator that evaluates the semantic equivalence of vertices', '@param vertexComparator comparator for comparing the semantic equivalence of vertices', '@param vertexComparator comparator for checking if vertices are semantically the same']}, {'tag': '@param edgeComparator comparator for semantic equivalence of edges', 'alternatives': ['@param edgeComparator comparator to determine if edges are semantically equivalent', '@param edgeComparator comparator used to check semantic equivalence of edges', '@param edgeComparator comparator that evaluates the semantic equivalence of edges', '@param edgeComparator comparator for comparing the semantic equivalence of edges', '@param edgeComparator comparator for checking if edges are semantically the same']}, {'tag': '@param cacheEdges if true, edges get cached for faster access', 'alternatives': ['@param cacheEdges when set to true, edges are stored in a cache for faster access', '@param cacheEdges if enabled, edges are cached to improve access performance', '@param cacheEdges when true, edges are saved in a cache to speed up access', '@param cacheEdges if set to true, edges are stored in a cache to enhance access speed', '@param cacheEdges if enabled, edges are stored in a cache to optimize access']}, {'tag': '@return null or one matching between graph1 and graph2', 'alternatives': ['@return either null or a single matching between graph1 and graph2', '@return either null or a match between graph1 and graph2', '@return null or a mapping between graph1 and graph2', '@return either null or one correspondence between graph1 and graph2', '@return either null or a single association between graph1 and graph2']}, {'tag': '@return Collection of cliques (each of which is represented as a Set of\\nvertices)', 'alternatives': ['@return Set of cliques (each represented as a Set of\\nvertices)', '@return Collection of groups (each consisting of a Set of vertices)', '@return Set of clusters (each composed of a Set of\\nvertices)', '@return Collection of clusters (each with a Set of\\nvertices)', '@return Set of groups (each containing a Set of vertices)']}, {'tag': '@param graph the graph in which cliques are to be found; graph must be\\nsimple', 'alternatives': ['@param graph the graph to search for cliques; the graph must be\\nsimple', '@param graph the graph to check for cliques; the graph must be\\nsimple', '@param graph the graph where cliques are to be located; the graph must be\\nsimple', '@param graph the graph to find cliques in; the graph must be\\nsimple', '@param graph the graph to scan for cliques; the graph must be\\nsimple']}, {'tag': '@param g an undirected graph to find the chromatic number of', 'alternatives': ['@param g an undirected graph for determining the chromatic number', '@param g an undirected graph used to calculate the chromatic number', '@param g an undirected graph for computing the chromatic number', '@param g an undirected graph that is analyzed to find the chromatic number', '@param g an undirected graph to derive the chromatic number from']}, {'tag': '@return integer the approximate chromatic number from the greedy\\nalgorithm', 'alternatives': ['@return integer the estimated chromatic number obtained from the greedy\\nalgorithm', '@return integer the approximated chromatic number based on the greedy\\nalgorithm', '@return integer the rough chromatic number derived from the greedy\\nalgorithm', '@return integer the approximate chromatic number calculated using the greedy\\nalgorithm', '@return integer the rough chromatic number approximated through the greedy\\nalgorithm']}, {'tag': '@param g an undirected graph for which to find the coloring', 'alternatives': ['@param g an undirected graph to determine the coloring for', '@param g an undirected graph used to find the appropriate coloring', '@param g an undirected graph for which the coloring is sought', '@param g an undirected graph that is analyzed to find the coloring', '@param g an undirected graph to identify the coloring for']}, {'tag': '@return the graph inspected by this StrongConnectivityAlgorithm', 'alternatives': ['@return the graph examined by this StrongConnectivityAlgorithm', '@return the graph analyzed by this StrongConnectivityAlgorithm', '@return the graph checked by this StrongConnectivityAlgorithm', '@return the graph observed by this StrongConnectivityAlgorithm', '@return the graph reviewed by this StrongConnectivityAlgorithm']}, {'tag': '@return true if the graph is strongly connected, false otherwise', 'alternatives': ['@return true if the graph exhibits strong connectivity, otherwise false', '@return true if the graph shows strong connectivity, otherwise false', '@return true if the graph demonstrates strong connectivity, otherwise false', '@return true if the graph has strong connectivity, otherwise false', '@return true if the graph possesses strong connectivity, otherwise false']}, {'tag': '@return <code>List</code> of <code>Set</code> s containing the strongly\\nconnected components', 'alternatives': ['@return <code>List</code> of <code>Set</code> s that hold the strongly\\nconnected components', '@return <code>List</code> of <code>Set</code> s representing the strongly\\nconnected components', '@return <code>List</code> of <code>Set</code> s with the strongly\\nconnected components', '@return <code>List</code> of <code>Set</code> s containing the components that are strongly\\nconnected', '@return <code>List</code> of <code>Set</code> s that include the strongly\\nconnected components']}, {'tag': '@return a list of subgraphs representing the strongly connected\\ncomponents', 'alternatives': ['@return a list of subgraphs that represent the strongly connected\\ncomponents', '@return a list of subgraphs that denote the strongly connected\\ncomponents', '@return a list of subgraphs that show the strongly connected\\ncomponents', '@return a list of subgraphs that illustrate the strongly connected\\ncomponents', '@return a list of subgraphs that manifest the strongly connected\\ncomponents']}, {'tag': '@param directedGraph the graph to inspect', 'alternatives': ['@param directedGraph the graph to examine', '@param directedGraph the graph to evaluate', '@param directedGraph the graph to analyze', '@param directedGraph the graph to check', '@param directedGraph the graph to review']}]"