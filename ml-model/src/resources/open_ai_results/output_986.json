"output = [\n  {\n    'tag': '@throws NullArgumentException if {@code o} is {@code null}.',\n    'alternatives': [\n      '@throws NullArgumentException when {@code o} is {@code null}.',\n      '@throws NullArgumentException if the value of {@code o} is {@code null}.',\n      '@throws NullArgumentException in case {@code o} is {@code null}.'\n    ]\n  },\n  {\n    'tag': '@throws NotStrictlyPositiveException if row or column dimension is not\\npositive.',\n    'alternatives': [\n      '@throws NotStrictlyPositiveException when row or column dimension is not positive.',\n      '@throws NotStrictlyPositiveException if either row or column dimension is not positive.',\n      '@throws NotStrictlyPositiveException when either row or column dimension is not positive.'\n    ]\n  },\n  {\n    'tag': '@throws NotPositiveException if {@code p < 0}',\n    'alternatives': [\n      '@throws NotPositiveException when {@code p} is less than 0.',\n      '@throws NotPositiveException if the value of {@code p} is less than 0.',\n      '@throws NotPositiveException in case {@code p} is less than 0.'\n    ]\n  },\n  {\n    'tag': '@throws NonSquareMatrixException if the matrix is not square',\n    'alternatives': [\n      '@throws NonSquareMatrixException when the matrix is not square.',\n      '@throws NonSquareMatrixException if the matrix does not have a square shape.',\n      '@throws NonSquareMatrixException when the shape of the matrix is not square.'\n    ]\n  },\n  {\n    'tag': '@throws NumberIsTooSmallException if {@code endRow < startRow} or\\n{@code endColumn < startColumn}.',\n    'alternatives': [\n      '@throws NumberIsTooSmallException when either {@code endRow} is less than {@code startRow} or {@code endColumn} is less than {@code startColumn}.',\n      '@throws NumberIsTooSmallException if both {@code endRow} is smaller than {@code startRow} and {@code endColumn} is smaller than {@code startColumn}.',\n      '@throws NumberIsTooSmallException in case {@code endRow} is smaller than {@code startRow} or {@code endColumn} is smaller than {@code startColumn}.'\n    ]\n  },\n  {\n    'tag': '@throws NoDataException if {@code subMatrix} is empty.',\n    'alternatives': [\n      '@throws NoDataException when {@code subMatrix} is empty.',\n      '@throws NoDataException if there is no data in {@code subMatrix}.',\n      '@throws NoDataException in case {@code subMatrix} does not contain any data.'\n    ]\n  },\n  {\n    'tag': '@throws NullArgumentException if {@code subMatrix} is {@code null}.',\n    'alternatives': [\n      '@throws NullArgumentException when {@code subMatrix} is {@code null}.',\n      '@throws NullArgumentException if the value of {@code subMatrix} is {@code null}.',\n      '@throws NullArgumentException in case {@code subMatrix} is {@code null}.'\n    ]\n  },\n  {\n    'tag': '@throws NotStrictlyPositiveException if {@code shape <= 0}.',\n    'alternatives': [\n      '@throws NotStrictlyPositiveException when {@code shape} is less than or equal to 0.',\n      '@throws NotStrictlyPositiveException if the value of {@code shape} is less than or equal to 0.',\n      '@throws NotStrictlyPositiveException in case {@code shape} is less than or equal to 0.'\n    ]\n  },\n  {\n    'tag': '@return {@code true}',\n    'alternatives': [\n      '@return the value {@code true}.',\n      '@return the boolean value {@code true}.',\n      '@return {@code true} as the outcome.'\n    ]\n  },\n  {\n    'tag': '@throws NotStrictlyPositiveException if {@code binCount <= 0}.',\n    'alternatives': [\n      '@throws NotStrictlyPositiveException when {@code binCount} is less than or equal to 0.',\n      '@throws NotStrictlyPositiveException if the value of {@code binCount} is less than or equal to 0.',\n      '@throws NotStrictlyPositiveException in case {@code binCount} is less than or equal to 0.'\n    ]\n  },\n  {\n    'tag': '@param binCount number of bins. Must be strictly positive.',\n    'alternatives': [\n      '@param binCount the number of bins. It must be strictly positive.',\n      '@param binCount is the count of bins. It should be strictly positive.',\n      '@param binCount denotes the number of bins. It must be strictly positive.'\n    ]\n  },\n  {\n    'tag': '@throws NullArgumentException if in is null',\n    'alternatives': [\n      '@throws NullArgumentException when {@code in} is null.',\n      '@throws NullArgumentException if the value of {@code in} is null.',\n      '@throws NullArgumentException in case {@code in} is null.'\n    ]\n  }\n]"