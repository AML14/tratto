"Output:\r\n[\r\n  {\n    \"tag\": \"@throws IOException \",\n    \"alternatives\": [\n      \"@throws IOException \",\n      \"@throws IOException \",\n      \"@throws IOException \",\n      \"@throws IOException \",\n      \"@throws IOException \"\n    ]\n  },\n  {\n    \"tag\": \"@param in the input stream\",\n    \"alternatives\": [\n      \"@param in the input stream\",\n      \"@param in the input stream\",\n      \"@param in the input stream\",\n      \"@param in the input stream\",\n      \"@param in the input stream\"\n    ]\n  },\n  {\n    \"tag\": \"@throws ClassNotFoundException \",\n    \"alternatives\": [\n      \"@throws ClassNotFoundException \",\n      \"@throws ClassNotFoundException \",\n      \"@throws ClassNotFoundException \",\n      \"@throws ClassNotFoundException \",\n      \"@throws ClassNotFoundException \"\n    ]\n  },\n  {\n    \"tag\": \"@param key the key to validate\",\n    \"alternatives\": [\n      \"@param key the key to validate\",\n      \"@param key to validate the key\",\n      \"@param key - the key to be validated\",\n      \"@param the key to validate\",\n      \"@param the key to validate\"\n    ]\n  },\n  {\n    \"tag\": \"@param value the value to validate\",\n    \"alternatives\": [\n      \"@param value the value to validate\",\n      \"@param value to validate the value\",\n      \"@param value - the value to be validated\",\n      \"@param the value to validate\",\n      \"@param the value to validate\"\n    ]\n  },\n  {\n    \"tag\": \"@throws IllegalArgumentException if invalid\",\n    \"alternatives\": [\n      \"@throws IllegalArgumentException if invalid\",\n      \"@throws IllegalArgumentException if it is invalid\",\n      \"@throws IllegalArgumentException if the value is invalid\",\n      \"@throws IllegalArgumentException when invalid\",\n      \"@throws IllegalArgumentException if the input is invalid\"\n    ]\n  },\n  {\n    \"tag\": \"@return true if a value predicate is in use\",\n    \"alternatives\": [\n      \"@return true if a value predicate is in use\",\n      \"@return true if there is a value predicate in use\",\n      \"@return true if the value predicate is being used\",\n      \"@return true if a value predicate has been applied\",\n      \"@return true if a value predicate has been set\"\n    ]\n  },\n  {\n    \"tag\": \"@param <K> the key type\",\n    \"alternatives\": [\n      \"@param <K> the key type\",\n      \"@param <K> the type of the key\",\n      \"@param <K> key type\",\n      \"@param <K> type of the key\",\n      \"@param <K> the type for the key\"\n    ]\n  },\n  {\n    \"tag\": \"@param <V> the value type\",\n    \"alternatives\": [\n      \"@param <V> the value type\",\n      \"@param <V> the type of the value\",\n      \"@param <V> value type\",\n      \"@param <V> type of the value\",\n      \"@param <V> the type for the value\"\n    ]\n  },\n  {\n    \"tag\": \"@return a new fixed size sorted map\",\n    \"alternatives\": [\n      \"@return a new fixed size sorted map\",\n      \"@return a new sorted map with a fixed size\",\n      \"@return a sorted map of fixed size\",\n      \"@return a fixed size sorted map\",\n      \"@return a sorted map with a fixed size\"\n    ]\n  },\n  {\n    \"tag\": \"@return the decorated map\",\n    \"alternatives\": [\n      \"@return the decorated map\",\n      \"@return the map that has been decorated\",\n      \"@return the map after decoration\",\n      \"@return the map with decoration applied\",\n      \"@return the map that has been modified\"\n    ]\n  },\n  {\n    \"tag\": \"@return a new unmodifiable sorted map\",\n    \"alternatives\": [\n      \"@return a new unmodifiable sorted map\",\n      \"@return a new sorted map that cannot be modified\",\n      \"@return an unmodifiable sorted map\",\n      \"@return a sorted map that is unmodifiable\",\n      \"@return a sorted map that cannot be modified\"\n    ]\n  },\n  {\n    \"tag\": \"@param out the output stream\",\n    \"alternatives\": [\n      \"@param out the output stream\",\n      \"@param out - the output stream\",\n      \"@param the output stream\",\n      \"@param the provided output stream\",\n      \"@param the stream for output\"\n    ]\n  },\n  {\n    \"tag\": \"@param map the map to decorate, must not be null\",\n    \"alternatives\": [\n      \"@param map the map to decorate, must not be null\",\n      \"@param map - the map to be decorated, must not be null\",\n      \"@param the map to be decorated, must not be null\",\n      \"@param the provided map to decorate, must not be null\",\n      \"@param the map that should be decorated, must not be null\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NullPointerException if map is null\",\n    \"alternatives\": [\n      \"@throws NullPointerException if map is null\",\n      \"@throws NullPointerException if the map is null\",\n      \"@throws NullPointerException when the map is null\",\n      \"@throws NullPointerException if the provided map is null\",\n      \"@throws NullPointerException in case the map is null\"\n    ]\n  },\n  {\n    \"tag\": \"@param <K> the key type\",\n    \"alternatives\": [\n      \"@param <K> the key type\",\n      \"@param <K> the type of the key\",\n      \"@param <K> key type\",\n      \"@param <K> type of the key\",\n      \"@param <K> the type for the key\"\n    ]\n  }\n]"