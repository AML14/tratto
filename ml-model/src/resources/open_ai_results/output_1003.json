"output=[\n  {\n    'tag': '@param <I> the input type',\n    'alternatives': [\n      '@param <I> the input kind',\n      '@param <I> the type of input',\n      '@param <I> the type of the input',\n      '@param <I> the input data type',\n      '@param <I> the required input type'\n    ]\n  },\n  {\n    'tag': '@param <O> the output type',\n    'alternatives': [\n      '@param <O> the result type',\n      '@param <O> the type of output',\n      '@param <O> the output data type',\n      '@param <O> the expected output type',\n      '@param <O> the required output type'\n    ]\n  },\n  {\n    'tag': '@param constantToReturn the constant object to return each time in the transformer',\n    'alternatives': [\n      '@param constantToReturn the fixed object to be returned in each transformation',\n      '@param constantToReturn the object that will always be returned in the transformer',\n      '@param constantToReturn the object that will be returned in every transformation',\n      '@param constantToReturn the constant that should be returned for each transformation',\n      '@param constantToReturn the static object to be returned in every transformation'\n    ]\n  },\n  {\n    'tag': '@return the transformer.',\n    'alternatives': [\n      '@return the resulting transformer.',\n      '@return the transformed object.',\n      '@return the modified transformer.',\n      '@return the updated transformer.',\n      '@return the changed transformer.'\n    ]\n  },\n  {\n    'tag': '@param <T> the input/output type',\n    'alternatives': [\n      '@param <T> the processed type',\n      '@param <T> the type of input/output',\n      '@param <T> the input and output type',\n      '@param <T> the type for input/output',\n      '@param <T> the required input/output type'\n    ]\n  },\n  {\n    'tag': '@return the transformer',\n    'alternatives': [\n      '@return the resulting transformer',\n      '@return the transformed object',\n      '@return the modified transformer',\n      '@return the updated transformer',\n      '@return the changed transformer'\n    ]\n  },\n  {\n    'tag': '@param <T> the input type',\n    'alternatives': [\n      '@param <T> the input kind',\n      '@param <T> the type of input',\n      '@param <T> the type of the input',\n      '@param <T> the input data type',\n      '@param <T> the required input type'\n    ]\n  },\n  {\n    'tag': '@return the transformer',\n    'alternatives': [\n      '@return the resulting transformer',\n      '@return the transformed object',\n      '@return the modified transformer',\n      '@return the updated transformer',\n      '@return the changed transformer'\n    ]\n  },\n  {\n    'tag': '@param <I> the input type',\n    'alternatives': [\n      '@param <I> the input kind',\n      '@param <I> the type of input',\n      '@param <I> the type of the input',\n      '@param <I> the input data type',\n      '@param <I> the required input type'\n    ]\n  },\n  {\n    'tag': '@param <O> the output type',\n    'alternatives': [\n      '@param <O> the result type',\n      '@param <O> the type of output',\n      '@param <O> the output data type',\n      '@param <O> the expected output type',\n      '@param <O> the required output type'\n    ]\n  },\n  {\n    'tag': '@return the transformer',\n    'alternatives': [\n      '@return the resulting transformer',\n      '@return the transformed object',\n      '@return the modified transformer',\n      '@return the updated transformer',\n      '@return the changed transformer'\n    ]\n  },\n  {\n    'tag': '@param <T> the input/output type',\n    'alternatives': [\n      '@param <T> the processed type',\n      '@param <T> the type of input/output',\n      '@param <T> the input and output type',\n      '@param <T> the type for input/output',\n      '@param <T> the required input/output type'\n    ]\n  },\n  {\n    'tag': '@param transformers an array of transformers to chain',\n    'alternatives': [\n      '@param transformers a collection of linked transformers',\n      '@param transformers an ordered set of transformers to join',\n      '@param transformers an array of linked transformers',\n      '@param transformers a series of transformers to combine',\n      '@param transformers a sequence of transformers to connect'\n    ]\n  },\n  {\n    'tag': '@return the transformer',\n    'alternatives': [\n      '@return the resulting transformer',\n      '@return the transformed object',\n      '@return the modified transformer',\n      '@return the updated transformer',\n      '@return the changed transformer'\n    ]\n  },\n  {\n    'tag': '@param <T> the input/output type',\n    'alternatives': [\n      '@param <T> the processed type',\n      '@param <T> the type of input/output',\n      '@param <T> the input and output type',\n      '@param <T> the type for input/output',\n      '@param <T> the required input/output type'\n    ]\n  },\n  {\n    'tag': '@param transformers a collection of transformers to chain',\n    'alternatives': [\n      '@param transformers a set of linked transformers',\n      '@param transformers an ordered list of transformers to join',\n      '@param transformers a collection of linked transformers',\n      '@param transformers a sequence of transformers to combine',\n      '@param transformers a series of transformers to connect'\n    ]\n  },\n  {\n    'tag': '@return the transformer',\n    'alternatives': [\n      '@return the resulting transformer',\n      '@return the transformed object',\n      '@return the modified transformer',\n      '@return the updated transformer',\n      '@return the changed transformer'\n    ]\n  },\n  {\n    'tag': '@param <T> the input / output type',\n    'alternatives': [\n      '@param <T> the processed type',\n      '@param <T> the type of input / output',\n      '@param <T> the input and output type',\n      '@param <T> the type for input / output',\n      '@param <T> the required input / output type'\n    ]\n  },\n  {\n    'tag': '@param predicate the predicate to switch on',\n    'alternatives': [\n      '@param predicate the condition to toggle on',\n      '@param predicate the expression to switch based on',\n      '@param predicate the logical statement to switch on',\n      '@param predicate the boolean condition for switching',\n      '@param predicate the test to enable or disable'\n    ]\n  },\n  {\n    'tag': '@param trueTransformer the transformer called if the predicate is true',\n    'alternatives': [\n      '@param trueTransformer the transformer invoked when the predicate is true',\n      '@param trueTransformer the transformer executed if the predicate is true',\n      '@param trueTransformer the transformer applied when the predicate is true',\n      '@param trueTransformer the transformer used in case the predicate is true',\n      '@param trueTransformer the transformer triggered by the true condition'\n    ]\n  },\n  {\n    'tag': '@param <I> the input type',\n    'alternatives': [\n      '@param <I> the input kind',\n      '@param <I> the type of input',\n      '@param <I> the type of the input',\n      '@param <I> the input data type',\n      '@param <I> the required input type'\n    ]\n  },\n  {\n    'tag': '@param <O> the output type',\n    'alternatives': [\n      '@param <O> the result type',\n      '@param <O> the type of output',\n      '@param <O> the output data type',\n      '@param <O> the expected output type',\n      '@param <O> the required output type'\n    ]\n  },\n  {\n    'tag': '@param predicate the predicate to switch on',\n    'alternatives': [\n      '@param predicate the condition to toggle on',\n      '@param predicate the expression to switch based on',\n      '@param predicate the logical statement to switch on',\n      '@param predicate the boolean condition for switching',\n      '@param predicate the test to enable or disable'\n    ]\n  },\n  {\n    'tag': '@param trueTransformer the transformer called if the predicate is true',\n    'alternatives': [\n      '@param trueTransformer the transformer invoked when the predicate is true',\n      '@param trueTransformer the transformer executed if the predicate is true',\n      '@param trueTransformer the transformer applied when the predicate is true',\n      '@param trueTransformer the transformer used in case the predicate is true',\n      '@param trueTransformer the transformer triggered by the true condition'\n    ]\n  },\n  {\n    'tag': '@param falseTransformer the transformer called if the predicate is false',\n    'alternatives': [\n      '@param falseTransformer the transformer invoked when the predicate is false',\n      '@param falseTransformer the transformer executed if the predicate is false',\n      '@param falseTransformer the transformer applied when the predicate is false',\n      '@param falseTransformer the transformer used in case the predicate is false',\n      '@param falseTransformer the transformer triggered by the false condition'\n    ]\n  }\n]"