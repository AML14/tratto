"output = [\r\n  {\r\n    'tag': '@param vertex ',\r\n    'alternatives': [\r\n      '@param vertex ',\r\n      '@param point ',\r\n      '@param node ',\r\n      '@param element ',\r\n      '@param object '\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@return set of all biconnected vertex-components containing the vertex.',\r\n    'alternatives': [\r\n      '@return set of all vertex-components biconnected that contain the vertex.',\r\n      '@return set of vertex-components containing the vertex that are biconnected.',\r\n      '@return set of all biconnected components of vertices that include the vertex.',\r\n      '@return set containing all vertex-components that are biconnected and contain the vertex.',\r\n      '@return set of biconnected vertex-components that include the vertex.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@return <code>true</code> if and only if inspected graph is connected.',\r\n    'alternatives': [\r\n      '@return <code>true</code> only if the inspected graph is connected.',\r\n      '@return <code>true</code> if the graph being inspected is connected.',\r\n      '@return <code>true</code> if the graph being examined is connected.',\r\n      '@return <code>true</code> if the inspected graph is indeed connected.',\r\n      '@return <code>true</code> if the graph under inspection is connected.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param vertex the vertex for which the connected set to be returned.',\r\n    'alternatives': [\r\n      '@param vertex the vertex for which the connected set is to be returned.',\r\n      '@param vertex the vertex from which the connected set should be returned.',\r\n      '@param vertex the vertex whose connected set needs to be returned.',\r\n      '@param vertex the vertex that the connected set will be returned for.',\r\n      '@param vertex the vertex to retrieve the connected set for.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@return a set of all vertices that are in the maximally connected\\ncomponent together with the specified vertex.',\r\n    'alternatives': [\r\n      '@return a set of all vertices in the maximum connected component along with the specified vertex.',\r\n      '@return a set of vertices that are part of the maximally connected component, along with the specified vertex.',\r\n      '@return a set containing all vertices that are in the maximally connected component along with the given vertex.',\r\n      '@return a set that includes the specified vertex along with all vertices in the maximum connected component.',\r\n      '@return a set of all vertices that, together with the specified vertex, form the maximally connected component.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@return Returns a list of <code>Set</code> s, where each set contains all\\nvertices that are in the same maximally connected component.',\r\n    'alternatives': [\r\n      '@return Returns a list of <code>Set</code> s, where each set contains all\\nvertices belonging to the same maximally connected component.',\r\n      '@return Returns a list of <code>Set</code> s. Each set contains all the vertices that are part of the same maximally connected component.',\r\n      '@return Returns a list of <code>Set</code> s. Each set contains all vertices that are in the same maximally connected component.',\r\n      '@return Returns a list of <code>Set</code> s, with each set containing all the\\nvertices within the same maximally connected component.',\r\n      '@return Returns a list of <code>Set</code> s. Each set contains all the vertices that belong to the same maximally connected component.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param sourceVertex one end of the path.',\r\n    'alternatives': [\r\n      '@param sourceVertex one end of the path.',\r\n      '@param sourceVertex starting point of the path.',\r\n      '@param sourceVertex the path starting point.',\r\n      '@param sourceVertex origin of the path.',\r\n      '@param sourceVertex initial vertex of the path.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param targetVertex another end of the path.',\r\n    'alternatives': [\r\n      '@param targetVertex another end of the path.',\r\n      '@param targetVertex ending point of the path.',\r\n      '@param targetVertex the path ending point.',\r\n      '@param targetVertex destination of the path.',\r\n      '@param targetVertex final vertex of the path.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@return <code>true</code> if and only if there is a path from the source\\nvertex to the target vertex.',\r\n    'alternatives': [\r\n      '@return <code>true</code> if there exists a path from the source vertex to the target vertex.',\r\n      '@return <code>true</code> only if there is a path from the source vertex to the target vertex.',\r\n      '@return <code>true</code> if there is a path connecting the source vertex to the target vertex.',\r\n      '@return <code>true</code> if a path exists from the source vertex to the target vertex.',\r\n      '@return <code>true</code> if there is a route between the source vertex and the target vertex.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param g the graph for which a connectivity inspector to be created.',\r\n    'alternatives': [\r\n      '@param g the graph for which a connectivity inspector is to be created.',\r\n      '@param g the graph from which to create a connectivity inspector.',\r\n      '@param g the graph that requires a connectivity inspector to be created.',\r\n      '@param g the graph that needs a connectivity inspector to be generated.',\r\n      '@param g the graph for which we want to create a connectivity inspector.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param g the graph for which a connectivity inspector to be created.',\r\n    'alternatives': [\r\n      '@param g the graph for which a connectivity inspector is to be created.',\r\n      '@param g the graph from which to create a connectivity inspector.',\r\n      '@param g the graph that requires a connectivity inspector to be created.',\r\n      '@param g the graph that needs a connectivity inspector to be generated.',\r\n      '@param g the graph for which we want to create a connectivity inspector.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param source ',\r\n    'alternatives': [\r\n      '@param source ',\r\n      '@param start ',\r\n      '@param origin ',\r\n      '@param beginning ',\r\n      '@param initialValue '\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param sink ',\r\n    'alternatives': [\r\n      '@param sink ',\r\n      '@param destination ',\r\n      '@param target ',\r\n      '@param endpoint ',\r\n      '@param finalValue '\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@return Returns the min cut partition containing the source, or null if\\nthere was no call to computeMinCut(V source, V sink)',\r\n    'alternatives': [\r\n      '@return Returns the min cut partition that includes the source, or null if\\nno call to computeMinCut(V source, V sink) was made.',\r\n      '@return Returns the min cut partition containing the source vertex, or null if\\ncomputeMinCut(V source, V sink) was not called.',\r\n      '@return Returns the min cut partition that contains the source vertex, or null if\\nthere was no call to computeMinCut(V source, V sink).',\r\n      '@return Returns the min cut partition that includes the source vertex, or null if\\nthe method computeMinCut(V source, V sink) was not invoked.',\r\n      '@return Returns the min cut partition containing the source, or null if\\nthe computeMinCut(V source, V sink) method was not called.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@return returns the min cut partition containing the sink',\r\n    'alternatives': [\r\n      '@return returns the min cut partition that includes the sink.',\r\n      '@return returns the min cut partition containing the destination.',\r\n      '@return returns the min cut partition that contains the target.',\r\n      '@return returns the min cut partition containing the endpoint.',\r\n      '@return returns the min cut partition that includes the finalValue.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@return cut weight',\r\n    'alternatives': [\r\n      '@return weight of the cut',\r\n      '@return weight of the partition',\r\n      '@return weight of the division',\r\n      '@return weight of the separated parts',\r\n      '@return weight of the disconnection'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@return a new instance.',\r\n    'alternatives': [\r\n      '@return a fresh instance.',\r\n      '@return a newly created instance.',\r\n      '@return a brand-new instance.',\r\n      '@return a new object.',\r\n      '@return a newly instantiated object.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param initialGuess Initial guess. If set to {@code null}, the initial guess\\nwill be estimated using the {@link ParameterGuesser}.',\r\n    'alternatives': [\r\n      '@param initialGuess Initial estimation. If set to {@code null}, the initial guess\\nwill be calculated using the {@link ParameterGuesser}.',\r\n      '@param initialGuess Initial approximation. If set to {@code null}, the initial guess\\nwill be determined using the {@link ParameterGuesser}.',\r\n      '@param initialGuess Initial value. If set to {@code null}, the initial guess\\nwill be computed using the {@link ParameterGuesser}.',\r\n      '@param initialGuess Initial assumption. If set to {@code null}, the initial guess\\nwill be derived using the {@link ParameterGuesser}.',\r\n      '@param initialGuess Initial hypothesis. If set to {@code null}, the initial guess\\nwill be generated using the {@link ParameterGuesser}.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param maxIter Maximum number of iterations of the optimization algorithm.',\r\n    'alternatives': [\r\n      '@param maxIter Maximum number of iterations for the optimization algorithm.',\r\n      '@param maxIter Maximum iteration count of the optimization algorithm.',\r\n      '@param maxIter Maximum number of iterations allowed for the optimization algorithm.',\r\n      '@param maxIter Maximum number of optimization algorithm iterations.',\r\n      '@param maxIter Maximum count of iterations for the optimization algorithm.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param f Function to fit.',\r\n    'alternatives': [\r\n      '@param f Function to be fitted.',\r\n      '@param f Function for fitting.',\r\n      '@param f Function to be adjusted.',\r\n      '@param f Function for adaptation.',\r\n      '@param f Function for modeling.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@return a curve fitter.',\r\n    'alternatives': [\r\n      '@return a curve fitting tool.',\r\n      '@return a tool for fitting curves.',\r\n      '@return a curve fitting utility.',\r\n      '@return a curve fitting helper.',\r\n      '@return a curve fitting assistant.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param newStart new start point (initial guess)',\r\n    'alternatives': [\r\n      '@param newStart new initial estimate point (start point)',\r\n      '@param newStart new starting position (first guess)',\r\n      '@param newStart new beginning point (initial approximation)',\r\n      '@param newStart new initial point (guess)',\r\n      '@param newStart new origin point (initial estimation)'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@return a new instance.',\r\n    'alternatives': [\r\n      '@return a new instance.',\r\n      '@return a fresh instance.',\r\n      '@return a newly created instance.',\r\n      '@return a brand-new instance.',\r\n      '@return a new object.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param newMaxIter maximum number of iterations',\r\n    'alternatives': [\r\n      '@param newMaxIter maximum iteration count',\r\n      '@param newMaxIter maximum number of iterations',\r\n      '@param newMaxIter maximum iteration limit',\r\n      '@param newMaxIter maximum count of iterations',\r\n      '@param newMaxIter maximum iteration number'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@return a new instance.',\r\n    'alternatives': [\r\n      '@return a new instance.',\r\n      '@return a fresh instance.',\r\n      '@return a newly created instance.',\r\n      '@return a brand-new instance.',\r\n      '@return a new object.'\r\n    ]\r\n  }\r\n]"