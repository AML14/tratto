"[\n  {\n    'tag': '@throws UnsupportedOperationException always',\n    'alternatives': [\n      '@throws UnsupportedOperationException always',\n      '@throws UnsupportedOperationException in all cases',\n      '@throws UnsupportedOperationException every time',\n      '@throws UnsupportedOperationException without exception', \n      '@throws UnsupportedOperationException for all conditions'\n    ]\n  },\n  {\n    'tag': '@param a the instance to convert; will never be null',\n    'alternatives': [\n      '@param a the instance to transform; should never be null',\n      '@param a the object to convert; guaranteed not to be null',\n      '@param a the object to be converted; always non-null',\n      '@param a the instance to convert; never null',\n      '@param a the object to be transformed; will not be null'\n    ]\n  },\n  {\n    'tag': '@return the converted instance; <b>must not</b> be null',\n    'alternatives': [\n      '@return the converted object; <b>should be</b> non-null',\n      '@return the instance after conversion; <b>not allowed</b> to be null',\n      '@return the transformed instance; <b>cannot be</b> null',\n      '@return the converted object; <b>must not be</b> null',\n      '@return the instance after conversion; <b>should never be</b> null'\n    ]\n  },\n  {\n    'tag': '@param b the instance to convert; will never be null',\n    'alternatives': [\n      '@param b the instance to transform; should never be null',\n      '@param b the object to convert; guaranteed not to be null',\n      '@param b the object to be converted; always non-null',\n      '@param b the instance to convert; never null',\n      '@param b the object to be transformed; will not be null'\n    ]\n  },\n  {\n    'tag': '@return the converted instance; <b>must not</b> be null',\n    'alternatives': [\n      '@return the converted object; <b>should be</b> non-null',\n      '@return the instance after conversion; <b>not allowed</b> to be null',\n      '@return the transformed instance; <b>cannot be</b> null',\n      '@return the converted object; <b>must not be</b> null',\n      '@return the instance after conversion; <b>should never be</b> null'\n    ]\n  },\n  {\n    'tag': '@return the converted value; is null <i>if and only if</i> {@code a} is null',\n    'alternatives': [\n      '@return the converted value; is null <i>only when</i> {@code a} is null',\n      '@return the converted value; will be null <i>if and only if</i> {@code a} is null',\n      '@return the value after conversion; null <i>only if</i> {@code a} is null',\n      '@return the transformed value; null <i>if and only if</i> {@code a} is null',\n      '@return the value that has been converted. If {@code a} is null, it will be null as well'\n    ]\n  },\n  {\n    'tag': '@throws UnsupportedOperationException always',\n    'alternatives': [\n      '@throws UnsupportedOperationException always',\n      '@throws UnsupportedOperationException in all cases',\n      '@throws UnsupportedOperationException every time',\n      '@throws UnsupportedOperationException without exception', \n      '@throws UnsupportedOperationException for all conditions'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if any of the provided values is null',\n    'alternatives': [\n      '@throws NullPointerException when any of the given values is null',\n      '@throws NullPointerException if any of the provided values is null',\n      '@throws NullPointerException in case any of the supplied values is null',\n      '@throws NullPointerException if any value from the arguments is null',\n      '@throws NullPointerException when a null value is found among the provided values'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if {@code k} is negative',\n    'alternatives': [\n      '@throws IllegalArgumentException when {@code k} is less than zero',\n      '@throws IllegalArgumentException if {@code k} is negative',\n      '@throws IllegalArgumentException when a negative value is passed as {@code k}',\n      '@throws IllegalArgumentException if the value of {@code k} is negative',\n      '@throws IllegalArgumentException in case of a negative {@code k} value'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if {@code k} is negative',\n    'alternatives': [\n      '@throws IllegalArgumentException when {@code k} is less than zero',\n      '@throws IllegalArgumentException if {@code k} is negative',\n      '@throws IllegalArgumentException when a negative value is passed as {@code k}',\n      '@throws IllegalArgumentException if the value of {@code k} is negative',\n      '@throws IllegalArgumentException in case of a negative {@code k} value'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if {@code k} is negative',\n    'alternatives': [\n      '@throws IllegalArgumentException when {@code k} is less than zero',\n      '@throws IllegalArgumentException if {@code k} is negative',\n      '@throws IllegalArgumentException when a negative value is passed as {@code k}',\n      '@throws IllegalArgumentException if the value of {@code k} is negative',\n      '@throws IllegalArgumentException in case of a negative {@code k} value'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if {@code k} is negative',\n    'alternatives': [\n      '@throws IllegalArgumentException when {@code k} is less than zero',\n      '@throws IllegalArgumentException if {@code k} is negative',\n      '@throws IllegalArgumentException when a negative value is passed as {@code k}',\n      '@throws IllegalArgumentException if the value of {@code k} is negative',\n      '@throws IllegalArgumentException in case of a negative {@code k} value'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if {@code expectedKeys < 0}',\n    'alternatives': [\n      '@throws IllegalArgumentException when {@code expectedKeys} is less than zero',\n      '@throws IllegalArgumentException if {@code expectedKeys} is negative',\n      '@throws IllegalArgumentException when a negative value is passed as {@code expectedKeys}',\n      '@throws IllegalArgumentException if the value of {@code expectedKeys} is negative',\n      '@throws IllegalArgumentException in case of {@code expectedKeys} being less than zero'\n    ]\n  },\n  {\n    'tag': '@throws IndexOutOfBoundsException if {@code off < 0} or {@code off + len > bytes.length} or\\n  {@code len < 0}',\n    'alternatives': [\n      '@throws IndexOutOfBoundsException when {@code off} is less than zero, or {@code off + len} exceeds the size of bytes, or\\n  {@code len} is negative',\n      '@throws IndexOutOfBoundsException if {@code off} is negative, or if the range {@code off + len} goes beyond the byte array length, or\\n  {@code len} is less than zero',\n      '@throws IndexOutOfBoundsException when either {@code off} is negative, or the range {@code off + len} exceeds the byte array size, or\\n  {@code len} is negative',\n      '@throws IndexOutOfBoundsException if {@code off} is less than zero, or the range {@code off + len} exceeds the size of bytes, or\\n  {@code len} is negative',\n      '@throws IndexOutOfBoundsException when {@code off} is negative, or if the range {@code off + len} goes beyond the byte array length, or\\n  {@code len} is less than zero'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if {@code x <= 0}',\n    'alternatives': [\n      '@throws IllegalArgumentException when {@code x} is less than or equal to zero',\n      '@throws IllegalArgumentException if {@code x} is zero or negative',\n      '@throws IllegalArgumentException when a non-positive value is passed as {@code x}',\n      '@throws IllegalArgumentException if the value of {@code x} is not positive',\n      '@throws IllegalArgumentException in case of a non-positive {@code x} value'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if {@code x <= 0}',\n    'alternatives': [\n      '@throws IllegalArgumentException when {@code x} is less than or equal to zero',\n      '@throws IllegalArgumentException if {@code x} is zero or negative',\n      '@throws IllegalArgumentException when a non-positive value is passed as {@code x}',\n      '@throws IllegalArgumentException if the value of {@code x} is not positive',\n      '@throws IllegalArgumentException in case of a non-positive {@code x} value'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if {@code k < 0}',\n    'alternatives': [\n      '@throws IllegalArgumentException when {@code k} is negative',\n      '@throws IllegalArgumentException if {@code k} is less than zero',\n      '@throws IllegalArgumentException when a negative value is passed as {@code k}',\n      '@throws IllegalArgumentException if the value of {@code k} is negative',\n      '@throws IllegalArgumentException in case of a negative {@code k}'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if {@code x < 0}',\n    'alternatives': [\n      '@throws IllegalArgumentException when {@code x} is negative',\n      '@throws IllegalArgumentException if {@code x} is less than zero',\n      '@throws IllegalArgumentException when a negative value is passed as {@code x}',\n      '@throws IllegalArgumentException if the value of {@code x} is negative',\n      '@throws IllegalArgumentException in case of a negative {@code x}'\n    ]\n  },\n  {\n    'tag': '@throws ArithmeticException if {@code q == 0}, or if {@code mode == UNNECESSARY} and {@code a}\\n        is not an integer multiple of {@code b}',\n    'alternatives': [\n      '@throws ArithmeticException when {@code q} equals to zero, or if {@code mode == UNNECESSARY} and {@code a}\\n        is not an integer multiple of {@code b}',\n      '@throws ArithmeticException if {@code q} is zero, or if {@code mode == UNNECESSARY} and {@code a}\\n        is not an integer multiple of {@code b}',\n      '@throws ArithmeticException when {@code q} equals zero, or if {@code mode == UNNECESSARY} and {@code a}\\n        is not an integer multiple of {@code b}',\n      '@throws ArithmeticException if {@code q} is zero, or if {@code mode == UNNECESSARY} and {@code a}\\n        is not an integer multiple of {@code b}',\n      '@throws ArithmeticException when {@code q} is zero, or if {@code mode == UNNECESSARY} and {@code a}\\n        is not an integer multiple of {@code b}'\n    ]\n  },\n  {\n    'tag': '@throws ArithmeticException if {@code m <= 0}',\n    'alternatives': [\n      '@throws ArithmeticException if {@code m} is less than or equal to zero',\n      '@throws ArithmeticException when {@code m} is less than or equal to zero',\n      '@throws ArithmeticException if the value of {@code m} is zero or negative',\n      '@throws ArithmeticException when {@code m} is zero or negative',\n      '@throws ArithmeticException if {@code m} is less than or equal to zero'\n    ]\n  },\n  {\n    'tag': '@throws ArithmeticException if {@code m <= 0}',\n    'alternatives': [\n      '@throws ArithmeticException if {@code m} is less than or equal to zero',\n      '@throws ArithmeticException when {@code m} is less than or equal to zero',\n      '@throws ArithmeticException if the value of {@code m} is zero or negative',\n      '@throws ArithmeticException when {@code m} is zero or negative',\n      '@throws ArithmeticException if {@code m} is less than or equal to zero'\n    ]\n  }\n]"