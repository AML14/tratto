"output = [\n  {\n    'tag': '@param outfile Output file',\n    'alternatives': [\n      '@param outfile Output file',\n      '@param outfile Result file',\n      '@param outfile Destination file',\n      '@param outfile File to write',\n      '@param outfile Target file'\n    ]\n  },\n  {\n    'tag': '@throws java.io.IOException if there is an error',\n    'alternatives': [\n      '@throws java.io.IOException if there is an error',\n      '@throws java.io.IOException in case of an error',\n      '@throws java.io.IOException if any error occurs',\n      '@throws java.io.IOException if an error happens',\n      '@throws java.io.IOException if there is an issue'\n    ]\n  },\n  {\n    'tag': '@param infile Input file',\n    'alternatives': [\n      '@param infile Input file',\n      '@param infile Source file',\n      '@param infile File to read',\n      '@param infile Input source',\n      '@param infile Input document'\n    ]\n  },\n  {\n    'tag': '@param outfile Output file',\n    'alternatives': [\n      '@param outfile Output file',\n      '@param outfile Result file',\n      '@param outfile Destination file',\n      '@param outfile File to write',\n      '@param outfile Target file'\n    ]\n  },\n  {\n    'tag': '@throws java.io.IOException if there is an error',\n    'alternatives': [\n      '@throws java.io.IOException if there is an error',\n      '@throws java.io.IOException in case of an error',\n      '@throws java.io.IOException if any error occurs',\n      '@throws java.io.IOException if an error happens',\n      '@throws java.io.IOException if there is an issue'\n    ]\n  },\n  {\n    'tag': '@return ',\n    'alternatives': [\n      '@return ',\n      '@return Result',\n      '@return Output',\n      '@return Return value',\n      '@return Value'\n    ]\n  },\n  {\n    'tag': '@param buffer The buffer to unpack/decode',\n    'alternatives': [\n      '@param buffer The buffer to unpack/decode',\n      '@param buffer The buffer for unpacking/decoding',\n      '@param buffer The decoding/unpacking buffer',\n      '@param buffer The buffer used for unpacking/decoding',\n      '@param buffer The unpacking/decoding buffer'\n    ]\n  },\n  {\n    'tag': '@param startIndex the index at which the decoding starts in the buffer',\n    'alternatives': [\n      '@param startIndex the index at which the decoding starts in the buffer',\n      '@param startIndex starting index for decoding in the buffer',\n      '@param startIndex initial index for decoding in the buffer',\n      '@param startIndex index where decoding starts in the buffer',\n      '@param startIndex decoding starting index in the buffer'\n    ]\n  },\n  {\n    'tag': '@param endIndex the index at which the decoding stops',\n    'alternatives': [\n      '@param endIndex the index at which the decoding stops',\n      '@param endIndex ending index for decoding',\n      '@param endIndex final index for decoding',\n      '@param endIndex index where decoding stops',\n      '@param endIndex decoding stopping index'\n    ]\n  },\n  {\n    'tag': '@return a ByteBuffer that is the unpacked version of the input one. It may not have the same size.',\n    'alternatives': [\n      '@return a ByteBuffer that is the unpacked version of the input one. It may not have the same size.',\n      '@return a ByteBuffer containing the unpacked representation of the input. Its size may vary.',\n      '@return a ByteBuffer with the unpacked version of the input. The size may differ.',\n      '@return a ByteBuffer that represents the unpacked form of the input. The size might not be the same.',\n      '@return a ByteBuffer which is the unpacked version of the input one. The size may differ.'\n    ]\n  },\n  {\n    'tag': '@param buffer The buffer to unpack/decode',\n    'alternatives': [\n      '@param buffer The buffer to unpack/decode',\n      '@param buffer The buffer for unpacking/decoding',\n      '@param buffer The decoding/unpacking buffer',\n      '@param buffer The buffer used for unpacking/decoding',\n      '@param buffer The unpacking/decoding buffer'\n    ]\n  },\n  {\n    'tag': '@return a ByteBuffer that is the unpacked version of the input one. It may not have the same size.',\n    'alternatives': [\n      '@return a ByteBuffer that is the unpacked version of the input one. It may not have the same size.',\n      '@return a ByteBuffer containing the unpacked representation of the input. Its size may vary.',\n      '@return a ByteBuffer with the unpacked version of the input. The size may differ.',\n      '@return a ByteBuffer that represents the unpacked form of the input. The size might not be the same.',\n      '@return a ByteBuffer which is the unpacked version of the input one. The size may differ.'\n    ]\n  },\n  {\n    'tag': \"@param buffer The byteBuffer who's content has the encoded value of the needed  size integer.\",\n    'alternatives': [\n      \"@param buffer The byteBuffer who's content has the encoded value of the needed  size integer.\",\n      \"@param buffer The byteBuffer containing the encoded value of the required size integer.\",\n      \"@param buffer The byteBuffer with the encoded value of the desired size integer.\",\n      \"@param buffer The byteBuffer that holds the encoded value of the necessary size integer.\",\n      \"@param buffer The byteBuffer having the encoded value of the requested size integer.\"\n    ]\n  },\n  {\n    'tag': '@return ',\n    'alternatives': [\n      '@return ',\n      '@return Result',\n      '@return Output',\n      '@return Return value',\n      '@return Value'\n    ]\n  },\n  {\n    'tag': '@param buffer The buffer to pack/encode',\n    'alternatives': [\n      '@param buffer The buffer to pack/encode',\n      '@param buffer The encoding/packing buffer',\n      '@param buffer The buffer used for packing/encoding',\n      '@param buffer The buffer for packing/encoding',\n      '@param buffer The packing/encoding buffer'\n    ]\n  },\n  {\n    'tag': '@return true is the node has a parent end is after it in ascending order',\n    'alternatives': [\n      '@return true is the node has a parent end is after it in ascending order',\n      '@return true if the node has a parent that comes after it in ascending order',\n      '@return true if the node has a parent and it follows the node in ascending order',\n      '@return true if the node has a parent and it is positioned after the node in ascending order',\n      '@return true if the node has a parent and the parent is in ascending order after the node'\n    ]\n  },\n  {\n    'tag': '@param node internal node at which the sub-tree starts',\n    'alternatives': [\n      '@param node internal node at which the sub-tree starts',\n      '@param node internal node indicating the start of the sub-tree',\n      '@param node internal node marking the beginning of the sub-tree',\n      '@param node internal node from where the sub-tree starts',\n      '@param node internal node that represents the starting point of the sub-tree'\n    ]\n  },\n  {\n    'tag': '@return child node just before the internal node',\n    'alternatives': [\n      '@return child node just before the internal node',\n      '@return child node immediately preceding the internal node',\n      '@return child node right before the internal node',\n      '@return child node that comes right before the internal node',\n      '@return child node situated directly before the internal node'\n    ]\n  },\n  {\n    'tag': '@param node internal node at which the sub-tree starts',\n    'alternatives': [\n      '@param node internal node at which the sub-tree starts',\n      '@param node internal node indicating the start of the sub-tree',\n      '@param node internal node marking the beginning of the sub-tree',\n      '@param node internal node from where the sub-tree starts',\n      '@param node internal node that represents the starting point of the sub-tree'\n    ]\n  },\n  {\n    'tag': '@return child node just after the internal node',\n    'alternatives': [\n      '@return child node just after the internal node',\n      '@return child node immediately following the internal node',\n      '@return child node right after the internal node',\n      '@return child node that comes right after the internal node',\n      '@return child node situated directly after the internal node'\n    ]\n  },\n  {\n    'tag': '@param node internal node to check',\n    'alternatives': [\n      '@param node internal node to check',\n      '@param node node to be checked internally',\n      '@param node node for internal checking',\n      '@param node node to internally validate',\n      '@param node internal node that needs to be examined'\n    ]\n  },\n  {\n    'tag': '@return true if the oriented point is direct',\n    'alternatives': [\n      '@return true if the oriented point is direct',\n      '@return true if the directed point is straight',\n      '@return true if the oriented point is in a straight line',\n      '@return true if the directed point is linear',\n      '@return true if the oriented point represents a straight line'\n    ]\n  },\n  {\n    'tag': '@param node internal node to check',\n    'alternatives': [\n      '@param node internal node to check',\n      '@param node node to be checked internally',\n      '@param node node for internal checking',\n      '@param node node to internally validate',\n      '@param node internal node that needs to be examined'\n    ]\n  },\n  {\n    'tag': '@return abscissa',\n    'alternatives': [\n      '@return abscissa',\n      '@return x-coordinate',\n      '@return horizontal position',\n      '@return x-value',\n      '@return horizontal coordinate'\n    ]\n  },\n  {\n    'tag': '@param tolerance tolerance below which points are considered identical.',\n    'alternatives': [\n      '@param tolerance tolerance below which points are considered identical.',\n      '@param tolerance threshold for points to be treated as identical.',\n      '@param tolerance value used to determine identical points.',\n      '@param tolerance minimum difference for points to be considered identical.',\n      '@param tolerance allowed deviation for points to be treated as identical.'\n    ]\n  }\n]"