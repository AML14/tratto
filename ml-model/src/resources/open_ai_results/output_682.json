"output = [\n  {\n    'tag': '@param sourceId Identifier of the graph where the change occurred.',\n    'alternatives': [\n      '@param sourceId Identifier of the graph where the modification happened.',\n      '@param sourceId Graph identifier where the change occurred.',\n      '@param sourceId Identifier of the graph where the alteration took place.',\n      '@param sourceId Identifier of the graph where the modification took place.',\n      '@param sourceId Graph identifier where the change was made.'\n    ]\n  },\n  {\n    'tag': '@param edgeId Identifier of the edge whose attribute changed.',\n    'alternatives': [\n      '@param edgeId Identifier of the edge with the modified attribute.',\n      '@param edgeId Identifier of the edge where the attribute was modified.',\n      '@param edgeId Identifier of the edge whose attribute was altered.',\n      '@param edgeId Identifier of the edge with the changed attribute.',\n      '@param edgeId Identifier of the edge where the attribute change occurred.'\n    ]\n  },\n  {\n    'tag': '@param attribute The attribute name.',\n    'alternatives': [\n      '@param attribute The name of the attribute.',\n      '@param attribute The attribute identifier.',\n      '@param attribute The name of the property.',\n      '@param attribute The attribute label.',\n      '@param attribute The name of the characteristic.'\n    ]\n  },\n  {\n    'tag': '@param oldValue The attribute old value.',\n    'alternatives': [\n      '@param oldValue The previous value of the attribute.',\n      '@param oldValue The attribute's former value.',\n      '@param oldValue The value that the attribute had before.',\n      '@param oldValue The old value of the attribute.',\n      '@param oldValue The attribute's value before the change.'\n    ]\n  },\n  {\n    'tag': '@param newValue The attribute new value.',\n    'alternatives': [\n      '@param newValue The new value of the attribute.',\n      '@param newValue The attribute's updated value.',\n      '@param newValue The value that the attribute has now.',\n      '@param newValue The updated value of the attribute.',\n      '@param newValue The attribute's value after the change.'\n    ]\n  },\n  {\n    'tag': '@param sourceId Identifier of the graph where the attribute was removed.',\n    'alternatives': [\n      '@param sourceId Identifier of the graph where the attribute was deleted.',\n      '@param sourceId Graph identifier where the attribute was removed.',\n      '@param sourceId Identifier of the graph where the attribute got removed.',\n      '@param sourceId Identifier of the graph where the attribute was eliminated.',\n      '@param sourceId Graph identifier where the attribute was erased.'\n    ]\n  },\n  {\n    'tag': '@param edgeId Identifier of the edge whose attribute was removed.',\n    'alternatives': [\n      '@param edgeId Identifier of the edge with the removed attribute.',\n      '@param edgeId Identifier of the edge where the attribute was removed.',\n      '@param edgeId Identifier of the edge whose attribute got removed.',\n      '@param edgeId Identifier of the edge with the deleted attribute.',\n      '@param edgeId Identifier of the edge where the attribute removal occurred.'\n    ]\n  },\n  {\n    'tag': '@param attribute The removed attribute name.',\n    'alternatives': [\n      '@param attribute The name of the removed attribute.',\n      '@param attribute The attribute name that was removed.',\n      '@param attribute The name of the attribute that got removed.',\n      '@param attribute The deleted attribute name.',\n      '@param attribute The attribute name that was eliminated.'\n    ]\n  },\n  {\n    'tag': '@param filename The file name where the graph will be written.',\n    'alternatives': [\n      '@param filename The name of the file where the graph will be saved.',\n      '@param filename The name of the file to write the graph.',\n      '@param filename The file name to store the graph.',\n      '@param filename The name of the file where the graph will be outputted.',\n      '@param filename The file name to write the graph data.'\n    ]\n  },\n  {\n    'tag': '@return A file sink or null.',\n    'alternatives': [\n      '@return A file sink or null value.',\n      '@return A file container or null.',\n      '@return A null value if no file is available.',\n      '@return Either a file sink or null.',\n      '@return A file storing object or null.'\n    ]\n  },\n  {\n    'tag': '@param edgesAreDirected If true (default=false) edges are considered directed.',\n    'alternatives': [\n      '@param edgesAreDirected If set to true (default=false) edges are treated as directed.',\n      '@param edgesAreDirected If the value is true (default=false) edges are seen as directed.',\n      '@param edgesAreDirected When true (default=false) edges are considered to be directed.',\n      '@param edgesAreDirected If the condition is true (default=false) edges are considered directed.',\n      '@param edgesAreDirected If edges are directed set to true (default=false).'\n    ]\n  },\n  {\n    'tag': '@param edgesAreDirected If true (default=false) edges are considered directed.',\n    'alternatives': [\n      '@param edgesAreDirected If set to true (default=false) edges are treated as directed.',\n      '@param edgesAreDirected If the value is true (default=false) edges are seen as directed.',\n      '@param edgesAreDirected When true (default=false) edges are considered to be directed.',\n      '@param edgesAreDirected If the condition is true (default=false) edges are considered directed.',\n      '@param edgesAreDirected If edges are directed set to true (default=false).'\n    ]\n  },\n  {\n    'tag': '@param declareNodes If true (default=true) this reader outputs nodeAdded events.',\n    'alternatives': [\n      '@param declareNodes When true (default=true) this reader generates nodeAdded events.',\n      '@param declareNodes If set to true (default=true) this reader emits nodeAdded events.',\n      '@param declareNodes If true (default=true) this reader produces nodeAdded events.',\n      '@param declareNodes If the value is true (default=true) this reader generates nodeAdded events.',\n      '@param declareNodes If declareNodes is true (default=true) this reader outputs nodeAdded events.'\n    ]\n  },\n  {\n    'tag': '@param graph The graph to export.',\n    'alternatives': [\n      '@param graph The graph object to export.',\n      '@param graph The graph structure to be exported.',\n      '@param graph The graph that needs to be exported.',\n      '@param graph The graph to be exported.',\n      '@param graph The graph data structure to export.'\n    ]\n  },\n  {\n    'tag': '@throws IOException If any I/O error occurs.',\n    'alternatives': [\n      '@throws IOException If there are any input/output errors.',\n      '@throws IOException In case of any I/O related exception.',\n      '@throws IOException If an I/O error happens.',\n      '@throws IOException If there is an input/output issue.',\n      '@throws IOException In the event of an I/O error.'\n    ]\n  },\n  {\n    'tag': '@throws IOException If any I/O error occurs.',\n    'alternatives': [\n      '@throws IOException If there are any input/output errors.',\n      '@throws IOException In case of any I/O related exception.',\n      '@throws IOException If an I/O error happens.',\n      '@throws IOException If there is an input/output issue.',\n      '@throws IOException In the event of an I/O error.'\n    ]\n  },\n  {\n    'tag': '@param fileName Name of the file to output to.',\n    'alternatives': [\n      '@param fileName The name of the file to write the data.',\n      '@param fileName The output file name.',\n      '@param fileName The name of the destination file.',\n      '@param fileName Name of the file to write the output to.',\n      '@param fileName The name of the file to receive the output.'\n    ]\n  },\n  {\n    'tag': '@return A new writer.',\n    'alternatives': [\n      '@return A fresh writer.',\n      '@return A writer instance.',\n      '@return A newly created writer.',\n      '@return A brand new writer.',\n      '@return A writer object.'\n    ]\n  },\n  {\n    'tag': '@throws IOException If any I/O error occurs.',\n    'alternatives': [\n      '@throws IOException If there are any input/output errors.',\n      '@throws IOException In case of any I/O related exception.',\n      '@throws IOException If an I/O error happens.',\n      '@throws IOException If there is an input/output issue.',\n      '@throws IOException In the event of an I/O error.'\n    ]\n  },\n  {\n    'tag': '@param stream An already existing output stream.',\n    'alternatives': [\n      '@param stream An existing output stream.',\n      '@param stream This should be an output stream that already exists.',\n      '@param stream A pre-existing output stream.',\n      '@param stream An output stream that already exists.',\n      '@param stream An output stream that is already present.'\n    ]\n  },\n  {\n    'tag': '@return A new writer.',\n    'alternatives': [\n      '@return A fresh writer.',\n      '@return A writer instance.',\n      '@return A newly created writer.',\n      '@return A brand new writer.',\n      '@return A writer object.'\n    ]\n  },\n  {\n    'tag': '@throws IOException If any I/O error occurs.',\n    'alternatives': [\n      '@throws IOException If there are any input/output errors.',\n      '@throws IOException In case of any I/O related exception.',\n      '@throws IOException If an I/O error happens.',\n      '@throws IOException If there is an input/output issue.',\n      '@throws IOException In the event of an I/O error.'\n    ]\n  },\n  {\n    'tag': '@param writer An already existing writer.',\n    'alternatives': [\n      '@param writer An existing writer.',\n      '@param writer This should be a writer that already exists.',\n      '@param writer A pre-existing writer.',\n      '@param writer A writer that already exists.',\n      '@param writer A writer that is already present.'\n    ]\n  },\n  {\n    'tag': '@return A new writer.',\n    'alternatives': [\n      '@return A fresh writer.',\n      '@return A writer instance.',\n      '@return A newly created writer.',\n      '@return A brand new writer.',\n      '@return A writer object.'\n    ]\n  },\n  {\n    'tag': '@throws IOException If any I/O error occurs.',\n    'alternatives': [\n      '@throws IOException If there are any input/output errors.',\n      '@throws IOException In case of any I/O related exception.',\n      '@throws IOException If an I/O error happens.',\n      '@throws IOException If there is an input/output issue.',\n      '@throws IOException In the event of an I/O error.'\n    ]\n  }\n]"