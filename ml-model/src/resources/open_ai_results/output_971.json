"output = [\r\n  {\r\n    'tag': '@param edges edges to be removed from this graph.',\r\n    'alternatives': [\r\n      '@param edges edges to be deleted from this graph.',\r\n      '@param edges edges to remove from this graph.',\r\n      '@param edges edges that should be eliminated from this graph.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@return <tt>true</tt> if this graph changed as a result of the call.',\r\n    'alternatives': [\r\n      '@return <tt>true</tt> if this graph was modified after the call.',\r\n      '@return <tt>true</tt> if this graph has been modified by the call.',\r\n      '@return <tt>true</tt> if this graph was altered by the call.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param vertexSet the vertex set V to be printed',\r\n    'alternatives': [\r\n      '@param vertexSet the set of vertices V to print',\r\n      '@param vertexSet the vertices set V to be displayed',\r\n      '@param vertexSet the set of vertices V that will be printed'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param edgeSet the edge set E to be printed',\r\n    'alternatives': [\r\n      '@param edgeSet the set of edges E to print',\r\n      '@param edgeSet the edges set E to be displayed',\r\n      '@param edgeSet the set of edges E that will be printed'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@return a string representation of (V,E)',\r\n    'alternatives': [\r\n      '@return a string containing the representation of (V,E)',\r\n      '@return a string that represents (V,E)',\r\n      '@return a string that displays (V,E)'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@return the hash code value this graph',\r\n    'alternatives': [\r\n      '@return the hash code value of this graph',\r\n      '@return the hash code value for this graph',\r\n      '@return the hash code value that corresponds to this graph'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param obj object to be compared for equality with this graph',\r\n    'alternatives': [\r\n      '@param obj object to compare for equality with this graph',\r\n      '@param obj object that will be compared for equality with this graph',\r\n      '@param obj object that should be compared for equality with this graph'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@return <code>true</code> if the specified object is equal to this graph',\r\n    'alternatives': [\r\n      '@return <code>true</code> if the specified object is equivalent to this graph',\r\n      '@return <code>true</code> if the specified object is identical to this graph',\r\n      '@return <code>true</code> if the specified object is the same as this graph'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param base the base (backing) graph on which the subgraph will be based.',\r\n    'alternatives': [\r\n      '@param base the underlying (backing) graph on which the subgraph will be built.',\r\n      '@param base the original (backing) graph from which the subgraph will be derived.',\r\n      '@param base the primary (backing) graph on which the subgraph will be constructed.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param mask vertices and edges to exclude in the subgraph. If a\\nvertex/edge is masked, it is as if it is not in the subgraph.',\r\n    'alternatives': [\r\n      '@param mask vertices and edges to be excluded from the subgraph. If a\\nvertex/edge is masked, it is as if it doesn't belong to the subgraph.',\r\n      '@param mask vertices and edges that should not be included in the subgraph. If a\\nvertex/edge is masked, it is treated as if it is not part of the subgraph.',\r\n      '@param mask vertices and edges to remove from the subgraph. If a\\nvertex/edge is masked, it is as if it is not present in the subgraph.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param ef the edge factory of the new graph.',\r\n    'alternatives': [\r\n      '@param ef the edge factory for the new graph.',\r\n      '@param ef the factory of edges for the new graph.',\r\n      '@param ef the edge creation factory for the new graph.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param edgeClass class on which to base factory for edges',\r\n    'alternatives': [\r\n      '@param edgeClass class used as a basis for the edge factory',\r\n      '@param edgeClass class that serves as the foundation for the edge factory',\r\n      '@param edgeClass class from which the edge factory is derived'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param g the backing graph over which a weighted view is to be created.',\r\n    'alternatives': [\r\n      '@param g the original graph on which to create a weighted view.',\r\n      '@param g the underlying graph for creating a weighted view.',\r\n      '@param g the base graph for generating a weighted view.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param weightMap A mapping of edges to weights. If an edge is not present\\nin the weight map, the edge weight for the underlying graph is returned.\\nNote that a live reference to this map is retained, so if the caller\\nchanges the map after construction, the changes will affect the',\r\n    'alternatives': [\r\n      '@param weightMap A map that assigns weights to edges. If an edge is not present\\nin the weight map, the edge weight of the original graph is used.\\nNote that a live reference to this map is stored, so if the caller\\nmodifies the map after creating, the changes will impact the',\r\n      '@param weightMap A map that links edges to weights. If an edge is not present\\nin the weight map, the edge weight from the underlying graph is utilized.\\nNote that a reference to this map will be maintained, so if the caller\\nupdates the map after creation, the changes will apply to the',\r\n      '@param weightMap A map that maps edges to weights. If an edge is not present\\nin the weight map, the edge weight of the base graph is used.\\nNote that a live reference to this map is kept, so if the caller\\nmodifies the map after creating, the changes will affect the'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param ef the edge factory of the new graph.',\r\n    'alternatives': [\r\n      '@param ef the edge factory for the new graph.',\r\n      '@param ef the factory of edges for the new graph.',\r\n      '@param ef the edge creation factory for the new graph.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param edgeClass class on which to base factory for edges',\r\n    'alternatives': [\r\n      '@param edgeClass class used as a basis for the edge factory',\r\n      '@param edgeClass class that serves as the foundation for the edge factory',\r\n      '@param edgeClass class from which the edge factory is derived'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param g the backing graph on which an unmodifiable graph is to be\\ncreated.',\r\n    'alternatives': [\r\n      '@param g the underlying graph on which to create an unmodifiable graph.',\r\n      '@param g the base graph for creating an unmodifiable graph.',\r\n      '@param g the original graph used for generating an unmodifiable graph.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param base the base (backing) graph on which the subgraph will be based.',\r\n    'alternatives': [\r\n      '@param base the underlying (backing) graph on which the subgraph will be built.',\r\n      '@param base the original (backing) graph from which the subgraph will be derived.',\r\n      '@param base the primary (backing) graph on which the subgraph will be constructed.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param vertexSubset vertices to include in the subgraph. If <code>\\nnull</code> then all vertices are included.',\r\n    'alternatives': [\r\n      '@param vertexSubset vertices to be added to the subgraph. If <code>\\nnull</code> then all vertices are added.',\r\n      '@param vertexSubset vertices that should be included in the subgraph. If <code>\\nnull</code> then all vertices will be included.',\r\n      '@param vertexSubset vertices to be included in the subgraph. If <code>\\nnull</code> then all vertices will be included.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param edgeSubset edges to in include in the subgraph. If <code>\\nnull</code> then all the edges whose vertices found in the graph are\\nincluded.',\r\n    'alternatives': [\r\n      '@param edgeSubset edges to add to the subgraph. If <code>\\nnull</code> then all the edges whose vertices found in the graph are\\nadded.',\r\n      '@param edgeSubset edges that should be included in the subgraph. If <code>\\nnull</code> then all the edges whose vertices found in the graph will be included.',\r\n      '@param edgeSubset edges to be included in the subgraph. If <code>\\nnull</code> then all the edges whose vertices found in the graph will be included.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param ef the edge factory of the new graph.',\r\n    'alternatives': [\r\n      '@param ef the edge factory for the new graph.',\r\n      '@param ef the factory of edges for the new graph.',\r\n      '@param ef the edge creation factory for the new graph.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param edgeClass class on which to base factory for edges',\r\n    'alternatives': [\r\n      '@param edgeClass class used as a basis for the edge factory',\r\n      '@param edgeClass class that serves as the foundation for the edge factory',\r\n      '@param edgeClass class from which the edge factory is derived'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param g the base (backing) graph on which the edge-reversed view will be\\nbased.',\r\n    'alternatives': [\r\n      '@param g the underlying (backing) graph on which the edge-reversed view will be\\nbuilt.',\r\n      '@param g the original (backing) graph from which the edge-reversed view will be\\nconstructed.',\r\n      '@param g the primary (backing) graph on which the edge-reversed view will be\\nderived.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param g the backing graph over which a weighted view is to be created.',\r\n    'alternatives': [\r\n      '@param g the original graph on which to create a weighted view.',\r\n      '@param g the underlying graph for creating a weighted view.',\r\n      '@param g the base graph for generating a weighted view.'\r\n    ]\r\n  },\r\n  {\r\n    'tag': '@param weightMap A mapping of edges to weights. If an edge is not present\\nin the weight map, the edge weight for the underlying graph is returned.\\nNote that a live reference to this map is retained, so if the caller\\nchanges the map after construction, the changes will affect the\\nAsWeightedGraph instance as well.',\r\n    'alternatives': [\r\n      '@param weightMap A map that assigns weights to edges. If an edge is not present\\nin the weight map, the edge weight of the base graph is used.\\nNote that a live reference to this map is stored, so if the caller\\nmodifies the map after creating, the changes will affect the\\nAsWeightedGraph instance as well.',\r\n      '@param weightMap A map that links edges to weights. If an edge is not present\\nin the weight map, the edge weight from the original graph is utilized.\\nNote that a reference to this map will be maintained, so if the caller\\nupdates the map after creation, the changes will apply to the\\nAsWeightedGraph instance as well.',\r\n      '@param weightMap A map that maps edges to weights. If an edge is not present\\nin the weight map, the edge weight for the underlying graph is returned.\\nNote that a live reference to this map is retained, so if the caller\\nchanges the map after construction, the changes will affect the\\nAsWeightedGraph implementation too.'\r\n    ]\r\n  }\r\n]"