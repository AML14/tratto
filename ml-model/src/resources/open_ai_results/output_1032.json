"output = [\n  {\n    'tag': '@param hi Higher bound of the function domain.',\n    'alternatives': [\n      '@param hi Upper limit of the function domain.',\n      '@param hi Maximum value allowed in the function domain.',\n      '@param hi Top limit of the function domain.',\n      '@param hi Highest value in the function domain.',\n      '@param hi Maximum boundary of the function domain.'\n    ]\n  },\n  {\n    'tag': '@param p Power.',\n    'alternatives': [\n      '@param p Exponent.',\n      '@param p Degree.',\n      '@param p Raised value.',\n      '@param p Exponential factor.',\n      '@param p Magnitude.'\n    ]\n  },\n  {\n    'tag': '@param <T> input and output type for the transformer',\n    'alternatives': [\n      '@param <T> Type of the transformer input and output.',\n      '@param <T> Type used for input and output in the transformer.',\n      '@param <T> Type parameter for the transformer, representing both input and output.',\n      '@param <T> Input and output data type for the transformer.',\n      '@param <T> Generic type for the transformer input and output.'\n    ]\n  },\n  {\n    'tag': '@param predicate predicate to switch on',\n    'alternatives': [\n      '@param predicate Predicate condition to toggle.',\n      '@param predicate Predicate used for switching.',\n      '@param predicate Condition to trigger the switch.',\n      '@param predicate Boolean expression to control the switch.',\n      '@param predicate Predicate to enable the switch.'\n    ]\n  },\n  {\n    'tag': '@param trueTransformer transformer used if true',\n    'alternatives': [\n      '@param trueTransformer Transformer applied when true.',\n      '@param trueTransformer Transformer used for true cases.',\n      '@param trueTransformer Transformer to be used if condition is true.',\n      '@param trueTransformer Transformer for the true condition.',\n      '@param trueTransformer Transformer executed when the condition is true.'\n    ]\n  },\n  {\n    'tag': '@return the <code>if</code> transformer',\n    'alternatives': [\n      '@return the transformer for the <code>if</code> statement.',\n      '@return the transformer used in the <code>if</code> condition.',\n      '@return the transformer evaluated in the <code>if</code> statement.',\n      '@return the transformer associated with the <code>if</code> condition.',\n      '@return the transformer used for the <code>if</code> statement.'\n    ]\n  },\n  {\n    'tag': '@param input the input object to transform',\n    'alternatives': [\n      '@param input Object to be transformed.',\n      '@param input Input object for the transformation.',\n      '@param input Object to apply the transformation to.',\n      '@param input Object that needs to undergo transformation.',\n      '@param input Input object that requires transformation.'\n    ]\n  },\n  {\n    'tag': '@return the predicate',\n    'alternatives': [\n      '@return the condition',\n      '@return the boolean expression',\n      '@return the logical predicate',\n      '@return the evaluation result',\n      '@return the true/false statement'\n    ]\n  },\n  {\n    'tag': '@return the transformer',\n    'alternatives': [\n      '@return the converter',\n      '@return the converter function',\n      '@return the conversion function',\n      '@return the mapping function',\n      '@return the function that performs transformation'\n    ]\n  },\n  {\n    'tag': '@return the transformer',\n    'alternatives': [\n      '@return the converter',\n      '@return the converter function',\n      '@return the conversion function',\n      '@return the mapping function',\n      '@return the function that performs transformation'\n    ]\n  },\n  {\n    'tag': '@param <T> the type that the predicate queries',\n    'alternatives': [\n      '@param <T> type for querying the predicate',\n      '@param <T> type used to evaluate the predicate',\n      '@param <T> type that the condition checks',\n      '@param <T> type for the predicate evaluation',\n      '@param <T> type that the condition queries'\n    ]\n  },\n  {\n    'tag': '@param object the object to compare to',\n    'alternatives': [\n      '@param object the object to compare against',\n      '@param object the reference object for comparison',\n      '@param object the object being compared',\n      '@param object the object for comparison',\n      '@param object the object to be compared with'\n    ]\n  },\n  {\n    'tag': '@return the predicate',\n    'alternatives': [\n      '@return the condition',\n      '@return the boolean expression',\n      '@return the logical predicate',\n      '@return the evaluation result',\n      '@return the true/false statement'\n    ]\n  },\n  {\n    'tag': '@param object the input object',\n    'alternatives': [\n      '@param object the provided object',\n      '@param object the object being passed',\n      '@param object the passed-in object',\n      '@param object the received object',\n      '@param object the object to be used as input'\n    ]\n  },\n  {\n    'tag': '@return true if input is the same object as the stored value',\n    'alternatives': [\n      '@return true if input matches the stored value',\n      '@return true if input equals the stored value',\n      '@return true if input is equal to the stored value',\n      '@return true if input is identical to the stored value',\n      '@return true if input is equivalent to the stored value'\n    ]\n  },\n  {\n    'tag': '@return the value',\n    'alternatives': [\n      '@return the result',\n      '@return the output',\n      '@return the returned value',\n      '@return the computed result',\n      '@return the generated value'\n    ]\n  },\n  {\n    'tag': '@param object the object to compare to',\n    'alternatives': [\n      '@param object the object to compare against',\n      '@param object the reference object for comparison',\n      '@param object the object being compared',\n      '@param object the object for comparison',\n      '@param object the object to be compared with'\n    ]\n  },\n  {\n    'tag': '@param <E> the type that the closure acts on',\n    'alternatives': [\n      '@param <E> type for the closure operations',\n      '@param <E> type operated by the closure',\n      '@param <E> type on which the closure works',\n      '@param <E> type that the closure applies to',\n      '@param <E> type that the closure operates on'\n    ]\n  },\n  {\n    'tag': '@return the singleton instance',\n    'alternatives': [\n      '@return the instance object',\n      '@return the object instance',\n      '@return the single instance',\n      '@return the unique instance',\n      '@return the one and only instance'\n    ]\n  },\n  {\n    'tag': '@param input the input object',\n    'alternatives': [\n      '@param input the provided object',\n      '@param input the object being passed',\n      '@param input the passed-in object',\n      '@param input the received object',\n      '@param input the object to be used as input'\n    ]\n  },\n  {\n    'tag': '@param <E> the type that the closure acts on',\n    'alternatives': [\n      '@param <E> type for the closure operations',\n      '@param <E> type operated by the closure',\n      '@param <E> type on which the closure works',\n      '@param <E> type that the closure applies to',\n      '@param <E> type that the closure operates on'\n    ]\n  },\n  {\n    'tag': '@return the singleton instance',\n    'alternatives': [\n      '@return the instance object',\n      '@return the object instance',\n      '@return the single instance',\n      '@return the unique instance',\n      '@return the one and only instance'\n    ]\n  },\n  {\n    'tag': '@param input the input object',\n    'alternatives': [\n      '@param input the provided object',\n      '@param input the object being passed',\n      '@param input the passed-in object',\n      '@param input the received object',\n      '@param input the object to be used as input'\n    ]\n  },\n  {\n    'tag': '@param <T> the type of the object to transform',\n    'alternatives': [\n      '@param <T> type of the object to be transformed',\n      '@param <T> type of the object being transformed',\n      '@param <T> type of the object undergoing transformation',\n      '@param <T> type of the object that is transformed',\n      '@param <T> type of the object subjected to transformation'\n    ]\n  },\n  {\n    'tag': '@return the <code>closure</code> transformer',\n    'alternatives': [\n      '@return the transformer for the <code>closure</code> operation.',\n      '@return the transformer used in the <code>closure</code> process.',\n      '@return the transformer applied by the <code>closure</code> operation.',\n      '@return the transformer associated with the <code>closure</code> operation.',\n      '@return the transformer used for the <code>closure</code> process.'\n    ]\n  }\n]"