"[\n  {\n    'tag': '@return the number of attributes.',\n    'alternatives': [\n      '@return the count of attributes.',\n      '@return the quantity of attributes.',\n      '@return the total number of attributes.',\n      '@return the number of properties.',\n      '@return the amount of attributes.'\n    ]\n  },\n  {\n    'tag': '@return The graph containing this node or null if unknown.',\n    'alternatives': [\n      '@return The graph that includes this node or null if not known.',\n      '@return The graph that holds this node or null if its existence is uncertain.',\n      '@return The graph which this node belongs to or null if its ownership is ambiguous.',\n      '@return The graph in which this node is present or null if its presence is not determined.',\n      '@return The graph that encompasses this node or null if its affiliation is unclear.'\n    ]\n  },\n  {\n    'tag': '@return The number of edges/relations/links.',\n    'alternatives': [\n      '@return The count of edges/relations/links.',\n      '@return The quantity of edges/relations/links.',\n      '@return The total number of edges/relations/links.',\n      '@return The amount of edges/relations/links.',\n      '@return The tally of edges/relations/links.'\n    ]\n  },\n  {\n    'tag': \"@return the count of edges that only leave this node plus all undirected\\n        edges.\",\n    'alternatives': [\n      \"@return the number of edges that solely depart from this node plus all undirected\\n        edges.\",\n      \"@return the quantity of edges that exclusively exit from this node plus all undirected\\n        edges.\",\n      \"@return the total count of edges that only go out from this node plus all undirected\\n        edges.\",\n      \"@return the amount of edges that solely leave this node plus all undirected\\n        edges.\",\n      \"@return the tally of edges that exclusively depart from this node plus all undirected\\n        edges.\"\n    ]\n  },\n  {\n    'tag': \"@return the count of edges that only enter this node plus all undirected\\n        edges.\",\n    'alternatives': [\n      \"@return the number of edges that solely enter this node plus all undirected\\n        edges.\",\n      \"@return the quantity of edges that exclusively arrive at this node plus all undirected\\n        edges.\",\n      \"@return the total count of edges that only come into this node plus all undirected\\n        edges.\",\n      \"@return the amount of edges that solely enter this node plus all undirected\\n        edges.\",\n      \"@return the tally of edges that exclusively arrive at this node plus all undirected\\n        edges.\"\n    ]\n  },\n  {\n    'tag': '@param id Identifier of the target node.',\n    'alternatives': [\n      '@param id ID of the destination node.',\n      '@param id Identifier of the desired node.',\n      '@param id Unique identifier of the end node.',\n      '@param id ID of the intended node.',\n      '@param id Identifier of the node to be targeted.'\n    ]\n  },\n  {\n    'tag': \"@return True if a directed edge goes from this node to 'id' or if an\\n        undirected edge exists.\",\n    'alternatives': [\n      \"@return True if there is a directed edge from this node to 'id' or if an\\n        undirected edge is present.\",\n      \"@return True if there exists a directed edge going from this node to 'id' or if an\\n        undirected edge is available.\",\n      \"@return True if a directed edge originates from this node towards 'id' or if an\\n        undirected edge is found.\",\n      \"@return True if there is a directed edge that starts from this node and terminates at 'id', or if an\\n        undirected edge is detected.\",\n      \"@return True if there exists a directed edge originating from this node and going to 'id', or if an\\n        undirected edge is observed.\"\n    ]\n  },\n  {\n    'tag': '@param id Identifier of the source node.',\n    'alternatives': [\n      '@param id ID of the origin node.',\n      '@param id Identifier of the starting node.',\n      '@param id Unique identifier of the source node.',\n      '@param id ID of the node providing the edge.',\n      \"@param id Identifier of the node where the edge starts.\"\n    ]\n  },\n  {\n    'tag': \"@return True if a directed edge goes from this node to 'id' or if an\\n        undirected edge exists.\",\n    'alternatives': [\n      \"@return True if there is a directed edge going from this node to 'id' or if an\\n        undirected edge can be found.\",\n      \"@return True if there exists a directed edge that goes from this node to 'id' or if an\\n        undirected edge is present.\",\n      \"@return True if a directed edge travels from this node towards 'id' or if an\\n        undirected edge exists.\",\n      \"@return True if there is a directed edge traveling from this node to 'id' or if an\\n        undirected edge is available.\",\n      \"@return True if there exists a directed edge that emanates from this node and lands at 'id', or if an\\n        undirected edge is detected.\"\n    ]\n  },\n  {\n    'tag': '@param id Identifier of another node.',\n    'alternatives': [\n      '@param id ID of a different node.',\n      '@param id Identifier of some other node.',\n      '@param id Unique identifier of an alternative node.',\n      '@param id ID of a separate node.',\n      \"@param id Identifier of an additional node.\"\n    ]\n  },\n  {\n    'tag': \"@return True if a edge exists between this node and node 'id'.\",\n    'alternatives': [\n      \"@return True if an edge is present between this node and node 'id'.\",\n      \"@return True if there exists an edge connecting this node and node 'id'.\",\n      \"@return True if a connection exists between this node and node 'id'.\",\n      \"@return True if there is an edge linking this node and node 'id'.\",\n      \"@return True if there is a relationship between this node and node 'id'.\"\n    ]\n  },\n  {\n    'tag': '@param id Identifier of the target node.',\n    'alternatives': [\n      '@param id ID of the destination node.',\n      '@param id Identifier of the desired node.',\n      '@param id Unique identifier of the end node.',\n      '@param id ID of the intended node.',\n      '@param id Identifier of the node to be targeted.'\n    ]\n  },\n  {\n    'tag': \"@return Directed edge going from this node to 'id', or undirected edge if\\n        it exists, else null.\",\n    'alternatives': [\n      \"@return Directed edge that starts from this node and ends at 'id', or undirected edge if\\n        it is available, otherwise null.\",\n      \"@return Directed edge originating from this node and terminating at 'id', or undirected edge if\\n        it is present, else null.\",\n      \"@return Directed edge that goes from this node towards 'id', or undirected edge if\\n        it exists, otherwise null.\",\n      \"@return Directed edge that travels from this node to 'id', or undirected edge if\\n        it is found, else null.\",\n      \"@return Directed edge emanating from this node and landing at 'id', or undirected edge if\\n        it is detected, otherwise null.\"\n    ]\n  },\n  {\n    'tag': '@param id Identifier of the source node.',\n    'alternatives': [\n      '@param id ID of the origin node.',\n      '@param id Identifier of the starting node.',\n      '@param id Unique identifier of the source node.',\n      '@param id ID of the node providing the edge.',\n      \"@param id Identifier of the node where the edge starts.\"\n    ]\n  },\n  {\n    'tag': \"@return Directed edge going from node 'id' to this node, or undirected\\n        edge if it exists, else null.\",\n    'alternatives': [\n      \"@return Directed edge that starts from node 'id' and terminates at this node, or undirected edge if\\n        it is available, otherwise null.\",\n      \"@return Directed edge originating from node 'id' and terminating at this node, or undirected edge if\\n        it is present, else null.\",\n      \"@return Directed edge that goes from node 'id' towards this node, or undirected edge if\\n        it exists, otherwise null.\",\n      \"@return Directed edge that travels from node 'id' to this node, or undirected edge if\\n        it is found, else null.\",\n      \"@return Directed edge emanating from node 'id' and landing at this node, or undirected edge if\\n        it is detected, otherwise null.\"\n    ]\n  },\n  {\n    'tag': '@param id Identifier of the opposite node.',\n    'alternatives': [\n      '@param id ID of the complementary node.',\n      '@param id Identifier of the reverse node.',\n      '@param id Unique identifier of the other node.',\n      '@param id ID of the node that is different.',\n      \"@param id Identifier of the node on the other side.\"\n    ]\n  },\n  {\n    'tag': \"@return Edge between node 'id' and this node if it exists, else null.\",\n    'alternatives': [\n      \"@return Edge connecting node 'id' and this node if it is present, otherwise null.\",\n      \"@return Edge that joins node 'id' and this node if it exists, otherwise null.\",\n      \"@return Edge linking node 'id' and this node if it is found, else null.\",\n      \"@return Edge connecting node 'id' and this node if it is available, otherwise null.\",\n      \"@return Edge that connects node 'id' and this node if it is detected, else null.\"\n    ]\n  },\n  {\n    'tag': '@return The iterator, edges are iterated in arbitrary order.',\n    'alternatives': [\n      '@return The iterator, edges are traversed in a random order.',\n      '@return The iterator, edges are explored in a non-deterministic order.',\n      '@return The iterator, edges are looped through in an unpredictable order.',\n      '@return The iterator, edges are visited in a random sequence.',\n      '@return The iterator, edges are processed in a haphazard manner.'\n    ]\n  },\n  {\n    'tag': '@return The iterator, edges are iterated in arbitrary order.',\n    'alternatives': [\n      '@return The iterator, edges are traversed in a random order.',\n      '@return The iterator, edges are explored in a non-deterministic order.',\n      '@return The iterator, edges are looped through in an unpredictable order.',\n      '@return The iterator, edges are visited in a random sequence.',\n      '@return The iterator, edges are processed in a haphazard manner.'\n    ]\n  },\n  {\n    'tag': '@return The iterator, edges are iterated in arbitrary order.',\n    'alternatives': [\n      '@return The iterator, edges are traversed in a random order.',\n      '@return The iterator, edges are explored in a non-deterministic order.',\n      '@return The iterator, edges are looped through in an unpredictable order.',\n      '@return The iterator, edges are visited in a random sequence.',\n      '@return The iterator, edges are processed in a haphazard manner.'\n    ]\n  },\n  {\n    'tag': '@return The iterator, neighbors are iterated in arbitrary order.',\n    'alternatives': [\n      '@return The iterator, neighbors are traversed in a random order.',\n      '@return The iterator, neighbors are explored in a non-deterministic order.',\n      '@return The iterator, neighbors are looped through in an unpredictable order.',\n      '@return The iterator, neighbors are visited in a random sequence.',\n      '@return The iterator, neighbors are processed in a haphazard manner.'\n    ]\n  },\n  {\n    'tag': '@param i Index of the edge.',\n    'alternatives': [\n      '@param i Position of the edge.',\n      '@param i Offset of the edge.',\n      '@param i Location of the edge.',\n      '@param i Index of the specific edge.',\n      '@param i Order of the edge.'\n    ]\n  },\n  {\n    'tag': '@return The i-th edge.',\n    'alternatives': [\n      '@return The edge at index i.',\n      '@return The edge that corresponds to the i-th position.',\n      '@return The edge identified by the i-th index.',\n      '@return The edge located at the i-th position.',\n      '@return The edge with the index i.'\n    ]\n  },\n  {\n    'tag': '@throws IndexOutOfBoundException if <code>i</code> is negative or greater than or equal to the\\n            degree',\n    'alternatives': [\n      '@throws IndexOutOfBoundException if <code>i</code> is smaller than zero or larger than or equal to the\\n            degree',\n      '@throws IndexOutOfBoundException if <code>i</code> is less than zero or greater than or equal to the\\n            degree',\n      '@throws IndexOutOfBoundException if <code>i</code> is negative or equal to or greater than the\\n            degree',\n      '@throws IndexOutOfBoundException if <code>i</code> is below zero or above or equal to the\\n            degree',\n      '@throws IndexOutOfBoundException if <code>i</code> is negative or greater than or equal to the\\n            degree'\n    ]\n  },\n  {\n    'tag': '@param i Index of the edge.',\n    'alternatives': [\n      '@param i Position of the edge.',\n      '@param i Offset of the edge.',\n      '@param i Location of the edge.',\n      '@param i Index of the specific edge.',\n      '@param i Order of the edge.'\n    ]\n  }\n]"