"output=[\n  {\n    'tag': '@param locale the specific locale used by the format.',\n    'alternatives': [\n      '@param locale the particular locale utilized by the format.',\n      '@param locale the precise locale utilized by the format.',\n      '@param locale the specific locale employed by the format.',\n      '@param locale the specific locale utilized by the formatting.',\n      '@param locale the specific locality utilized by the format.'\n    ]\n  },\n  {\n    'tag': '@return the default number format specific to the given locale.',\n    'alternatives': [\n      '@return the default numeric format specific to the given locale.',\n      '@return the default format for numbers specific to the given locale.',\n      '@return the default formatting for numbers specific to the given locale.',\n      '@return the default number styling specific to the given locale.',\n      '@return the default numerical format specific to the given locale.'\n    ]\n  },\n  {\n    'tag': '@param source the string to parse',\n    'alternatives': [\n      '@param source the string to analyze',\n      '@param source the string to interpret',\n      '@param source the string to decipher',\n      '@param source the string to process',\n      '@param source the string to evaluate'\n    ]\n  },\n  {\n    'tag': '@param pos input/output parsing parameter.  On output, <code>pos</code>\\n       holds the index of the next non-whitespace character.',\n    'alternatives': [\n      '@param pos parsing parameter for input/output. On output, <code>pos</code>\\n       stores the index of the next non-whitespace character.',\n      '@param pos parsing parameter for input/output. After execution, <code>pos</code>\\n       contains the index of the following non-whitespace character.',\n      '@param pos input/output parameter for parsing. The index of the next non-whitespace character is saved into <code>pos</code> after this operation.',\n      '@param pos input/output parameter for parsing. <code>pos</code>\\n       updates to hold the index of the next non-whitespace character.',\n      '@param pos input/output parsing parameter. The index of the next non-whitespace character is stored in <code>pos</code> after this operation.'\n    ]\n  },\n  {\n    'tag': '@param source the string to parse',\n    'alternatives': [\n      '@param source the string to analyze',\n      '@param source the string to interpret',\n      '@param source the string to decipher',\n      '@param source the string to process',\n      '@param source the string to evaluate'\n    ]\n  },\n  {\n    'tag': '@param pos input/output parsing parameter.',\n    'alternatives': [\n      '@param pos parsing parameter for input/output.',\n      '@param pos input/output parameter for parsing.',\n      '@param pos parsing parameter for input/output operations.',\n      '@param pos input/output parameter.',\n      '@param pos input/output parsing parameter.'\n    ]\n  },\n  {\n    'tag': '@return the first non-whitespace character.',\n    'alternatives': [\n      '@return the initial non-blank character.',\n      '@return the starting non-whitespace character.',\n      '@return the first character that is not whitespace.',\n      '@return the initial non-space character.',\n      '@return the first non-blank character.'\n    ]\n  },\n  {\n    'tag': '@param source the string to parse',\n    'alternatives': [\n      '@param source the string to analyze',\n      '@param source the string to interpret',\n      '@param source the string to decipher',\n      '@param source the string to process',\n      '@param source the string to evaluate'\n    ]\n  },\n  {\n    'tag': '@param value the special value to parse.',\n    'alternatives': [\n      '@param value the specific value to parse.',\n      '@param value the unique value to parse.',\n      '@param value the particular value to parse.',\n      '@param value the custom value to parse.',\n      '@param value the distinct value to parse.'\n    ]\n  },\n  {\n    'tag': '@param pos input/output parsing parameter.',\n    'alternatives': [\n      '@param pos parsing parameter for input/output.',\n      '@param pos input/output parameter for parsing.',\n      '@param pos parsing parameter for input/output operations.',\n      '@param pos input/output parameter.',\n      '@param pos input/output parsing parameter.'\n    ]\n  },\n  {\n    'tag': '@return the special number.',\n    'alternatives': [\n      '@return the unique number.',\n      '@return the particular number.',\n      '@return the distinct number.',\n      '@return the special numeric value.',\n      '@return the custom number.'\n    ]\n  },\n  {\n    'tag': '@param source the string to parse',\n    'alternatives': [\n      '@param source the string to analyze',\n      '@param source the string to interpret',\n      '@param source the string to decipher',\n      '@param source the string to process',\n      '@param source the string to evaluate'\n    ]\n  },\n  {\n    'tag': '@param format the number format used to parse normal, numeric values.',\n    'alternatives': [\n      '@param format the numeric format utilized for parsing regular, numeric values.',\n      '@param format the format for numbers used to parse normal, numeric values.',\n      '@param format the number styling utilized for parsing normal, numeric values.',\n      '@param format the number format employed for parsing regular, numeric values.',\n      '@param format the formatting for numbers used to parse normal, numeric values.'\n    ]\n  },\n  {\n    'tag': '@param pos input/output parsing parameter.',\n    'alternatives': [\n      '@param pos parsing parameter for input/output.',\n      '@param pos input/output parameter for parsing.',\n      '@param pos parsing parameter for input/output operations.',\n      '@param pos input/output parameter.',\n      '@param pos input/output parsing parameter.'\n    ]\n  },\n  {\n    'tag': '@return the parsed number.',\n    'alternatives': [\n      '@return the number that was parsed.',\n      '@return the parsed numeric value.',\n      '@return the number obtained through parsing.',\n      '@return the result of parsing as a number.',\n      '@return the value after parsing as a number.'\n    ]\n  },\n  {\n    'tag': '@param source the string to parse',\n    'alternatives': [\n      '@param source the string to analyze',\n      '@param source the string to interpret',\n      '@param source the string to decipher',\n      '@param source the string to process',\n      '@param source the string to evaluate'\n    ]\n  },\n  {\n    'tag': '@param expected expected string',\n    'alternatives': [\n      '@param expected anticipated string',\n      '@param expected desired string',\n      '@param expected predicted string',\n      '@param expected specified string',\n      '@param expected provided string'\n    ]\n  },\n  {\n    'tag': '@param pos input/output parsing parameter.',\n    'alternatives': [\n      '@param pos parsing parameter for input/output.',\n      '@param pos input/output parameter for parsing.',\n      '@param pos parsing parameter for input/output operations.',\n      '@param pos input/output parameter.',\n      '@param pos input/output parsing parameter.'\n    ]\n  },\n  {\n    'tag': '@return true if the expected string was there',\n    'alternatives': [\n      '@return true if the anticipated string was present',\n      '@return true if the desired string was found',\n      '@return true if the predicted string was there',\n      '@return true if the specified string was present',\n      '@return true if the provided string was found'\n    ]\n  },\n  {\n    'tag': '@param value the double to format.',\n    'alternatives': [\n      '@param value the double to style.',\n      '@param value the double to display.',\n      '@param value the double to present.',\n      '@param value the double to render.',\n      '@param value the double to arrange.'\n    ]\n  },\n  {\n    'tag': '@param format the format used.',\n    'alternatives': [\n      '@param format the styling employed.',\n      '@param format the format utilized.',\n      '@param format the styling used.',\n      '@param format the formatting employed.',\n      '@param format the format employed.'\n    ]\n  },\n  {\n    'tag': '@param toAppendTo where the text is to be appended',\n    'alternatives': [\n      '@param toAppendTo where the text should be added',\n      '@param toAppendTo the location to add the text',\n      '@param toAppendTo the destination to append the text',\n      '@param toAppendTo the place to append the text',\n      '@param toAppendTo the position to insert the text'\n    ]\n  },\n  {\n    'tag': '@param pos On input: an alignment field, if desired. On output: the\\n           offsets of the alignment field',\n    'alternatives': [\n      '@param pos On input: an optional alignment field. On output: the\\n           offsets of the alignment field',\n      '@param pos On input: an alignment field, if specified. On output: the\\n           offsets of the alignment field',\n      '@param pos On input: a potential alignment field. On output: the\\n           offsets of the alignment field',\n      '@param pos An alignment field, if desired on input. The\\n           offsets of the alignment field are provided on output.',\n      '@param pos An alignment field, if needed on input. The\\n           offsets of the alignment field are given on output.'\n    ]\n  },\n  {\n    'tag': '@return the value passed in as toAppendTo.',\n    'alternatives': [\n      '@return the value that toAppendTo holds.',\n      '@return the value supplied as toAppendTo.',\n      '@return the value given as toAppendTo.',\n      '@return the original value of toAppendTo.',\n      '@return the initial value of toAppendTo.'\n    ]\n  },\n  {\n    'tag': '@return pivoting strategy',\n    'alternatives': [\n      '@return the strategy for pivoting',\n      '@return the way of pivoting',\n      '@return the method of pivoting',\n      '@return the approach for pivoting',\n      '@return the manner of pivoting'\n    ]\n  }\n]"