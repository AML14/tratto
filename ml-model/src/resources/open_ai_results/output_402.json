"[\n  {\n    \"tag\": \"@param second the second element\",\n    \"alternatives\": [\n      \"@param second the second item\",\n      \"@param second the next element\",\n      \"@param second the subsequent element\",\n      \"@param second the second object\",\n      \"@param second the following item\"\n    ]\n  },\n  {\n    \"tag\": \"@param rest an array of additional elements, possibly empty\",\n    \"alternatives\": [\n      \"@param rest a collection of extra elements, potentially empty\",\n      \"@param rest a list of additional items, maybe empty\",\n      \"@param rest a sequence of extra elements, optionally empty\",\n      \"@param rest a set of additional objects, possibly empty\",\n      \"@param rest an array containing additional elements, possibly empty\"\n    ]\n  },\n  {\n    \"tag\": \"@return an unmodifiable list containing the specified elements\",\n    \"alternatives\": [\n      \"@return an immutable list containing the given elements\",\n      \"@return a read-only list containing the specified elements\",\n      \"@return a list that cannot be modified, containing the specified elements\",\n      \"@return a list of the specified elements, which cannot be changed\",\n      \"@return a list containing the provided elements that is not mutable\"\n    ]\n  },\n  {\n    \"tag\": \"@param lists the lists to choose elements from, in the order that\\n    the elements chosen from those lists should appear in the resulting\\n    lists\",\n    \"alternatives\": [\n      \"@param lists the lists from which elements are selected, ordered\\n    according to the appearance of elements in the resulting lists\",\n      \"@param lists the lists to select elements from, following\\n    the desired order in the resulting lists\",\n      \"@param lists the lists to obtain elements from, with the elements\\n    extracted in the specified order in the resulting lists\",\n      \"@param lists the lists to pick elements from, arranged in\\n    the order of element placement in the final lists\",\n      \"@param lists the lists to get elements from, in the order\\n    of element appearance in the resultant lists\"\n    ]\n  },\n  {\n    \"tag\": \"@param <B> any common base class shared by all axes (often just {@link\\n    Object})\",\n    \"alternatives\": [\n      \"@param <B> a common base class that all axes share (typically just {@link\\n    Object})\",\n      \"@param <B> common base class for all axes (often just {@link\\n    Object})\",\n      \"@param <B> the common parent class for all axes (usually just {@link\\n    Object})\",\n      \"@param <B> any shared base class among all axes (frequently just {@link\\n    Object})\",\n      \"@param <B> a base class that all axes have in common (typically just {@link\\n    Object})\"\n    ]\n  },\n  {\n    \"tag\": \"@return the Cartesian product, as an immutable list containing immutable\\n    lists\",\n    \"alternatives\": [\n      \"@return the Cartesian product represented as an immutable list\\n    containing unmodifiable lists\",\n      \"@return the Cartesian product in the form of an immutable list\\n    consisting of immutable lists\",\n      \"@return an immutable list of immutable lists that represents\\n    the Cartesian product\",\n      \"@return an unmodifiable list containing immutable sublists that\\n    form the Cartesian product\",\n      \"@return an immutable list that contains immutable lists representing\\n    the Cartesian product\"\n    ]\n  },\n  {\n    \"tag\": \"@throws IllegalArgumentException if the size of the cartesian product would\\n    be greater than {@link Integer#MAX_VALUE}\",\n    \"alternatives\": [\n      \"@throws IllegalArgumentException if the size of the Cartesian product\\n    exceeds the value of {@link Integer#MAX_VALUE}\",\n      \"@throws IllegalArgumentException if the Cartesian product's size\\n    would be larger than {@link Integer#MAX_VALUE}\",\n      \"@throws IllegalArgumentException if the Cartesian product would have\\n    a size greater than {@link Integer#MAX_VALUE}\",\n      \"@throws IllegalArgumentException if the size of the Cartesian product\\n    goes beyond {@link Integer#MAX_VALUE}\",\n      \"@throws IllegalArgumentException if the Cartesian product's size\\n    surpasses {@link Integer#MAX_VALUE}\"\n    ]\n  },\n  {\n    \"tag\": \"@param list the list to return consecutive sublists of\",\n    \"alternatives\": [\n      \"@param list the list to obtain consecutive partitions from\",\n      \"@param list the list from which successive sublists are derived\",\n      \"@param list the list to generate consecutive sublists from\",\n      \"@param list the list to extract consecutive sublists from\",\n      \"@param list the list to produce consecutive partitions of\"\n    ]\n  },\n  {\n    \"tag\": \"@param size the desired size of each sublist (the last may be\\n    smaller)\",\n    \"alternatives\": [\n      \"@param size the intended length of each sublist (the last one might\\n    be shorter)\",\n      \"@param size the target size for each sublist (the last one can\\n    potentially be smaller)\",\n      \"@param size the requested size for every sublist (the last one could\\n    be smaller)\",\n      \"@param size the preferred length of each sublist (the final one may\\n    be shorter)\",\n      \"@param size the expected size of each sublist (the last one could\\n    be smaller)\"\n    ]\n  },\n  {\n    \"tag\": \"@return a list of consecutive sublists\",\n    \"alternatives\": [\n      \"@return a list containing sequential sublists\",\n      \"@return a list that consists of consecutive sublists\",\n      \"@return a list comprising successive sublists\",\n      \"@return a list of sequential partitions\",\n      \"@return a list of successive sublists\"\n    ]\n  },\n  {\n    \"tag\": \"@throws IllegalArgumentException if {@code partitionSize} is nonpositive\",\n    \"alternatives\": [\n      \"@throws IllegalArgumentException if the value of {@code partitionSize}\\n    is less than or equal to zero\",\n      \"@throws IllegalArgumentException if the size of {@code partitionSize}\\n    is not positive\",\n      \"@throws IllegalArgumentException if the {@code partitionSize} is not\\n    a positive number\",\n      \"@throws IllegalArgumentException if the value of {@code partitionSize}\\n    is zero or negative\",\n      \"@throws IllegalArgumentException if the size of {@code partitionSize}\\n    is zero or less than zero\"\n    ]\n  },\n  {\n    \"tag\": \"@param sequence the character sequence to view as a {@code List} of\\n       characters\",\n    \"alternatives\": [\n      \"@param sequence the character sequence to consider as a {@code List}\\n       of characters\",\n      \"@param sequence the character sequence to treat as a {@code List}\\n       of individual characters\",\n      \"@param sequence the character sequence to interpret as a {@code List}\\n       comprised of characters\",\n      \"@param sequence the character sequence to perceive as a {@code List}\\n       containing characters\",\n      \"@param sequence the character sequence to regard as a {@code List}\\n       consisting of characters\"\n    ]\n  },\n  {\n    \"tag\": \"@return an {@code List<Character>} view of the character sequence\",\n    \"alternatives\": [\n      \"@return a view of the character sequence as an {@code List<Character>}\",\n      \"@return an {@code List<Character>} representation of the character sequence\",\n      \"@return a {@code List<Character>} that provides a view of the character sequence\",\n      \"@return an {@code List<Character>} that acts as a display of the character sequence\",\n      \"@return a {@code List<Character>} that presents a perspective of the character sequence\"\n    ]\n  },\n  {\n    \"tag\": \"@param rowComparator the comparator that orders the row keys\",\n    \"alternatives\": [\n      \"@param rowComparator the comparator that sorts the row keys\",\n      \"@param rowComparator the comparator that arranges the row keys\",\n      \"@param rowComparator the comparator that organizes the row keys\",\n      \"@param rowComparator the comparator that sequences the row keys\",\n      \"@param rowComparator the comparator that ranks the row keys\"\n    ]\n  },\n  {\n    \"tag\": \"@param columnComparator the comparator that orders the column keys\",\n    \"alternatives\": [\n      \"@param columnComparator the comparator that sorts the column keys\",\n      \"@param columnComparator the comparator that arranges the column keys\",\n      \"@param columnComparator the comparator that organizes the column keys\",\n      \"@param columnComparator the comparator that sequences the column keys\",\n      \"@param columnComparator the comparator that ranks the column keys\"\n    ]\n  },\n  {\n    \"tag\": \"@param h hash code\",\n    \"alternatives\": [\n      \"@param h hash value\",\n      \"@param h hashing code\",\n      \"@param h hexadecimal code\",\n      \"@param h hash number\",\n      \"@param h hash ID\"\n    ]\n  },\n  {\n    \"tag\": \"@param hash the hash code for the key\",\n    \"alternatives\": [\n      \"@param hash the hashing code for the key\",\n      \"@param hash the hash value associated with the key\",\n      \"@param hash the hash number of the key\",\n      \"@param hash the hexadecimal code for the key\",\n      \"@param hash the hash ID of the key\"\n    ]\n  },\n  {\n    \"tag\": \"@return the segment\",\n    \"alternatives\": [\n      \"@return the portion\",\n      \"@return the fragment\",\n      \"@return the section\",\n      \"@return the subset\",\n      \"@return the component\"\n    ]\n  },\n  {\n    \"tag\": \"@param expectedSize the expected number of entries\",\n    \"alternatives\": [\n      \"@param expectedSize the anticipated count of elements\",\n      \"@param expectedSize the estimated number of items\",\n      \"@param expectedSize the projected size of entries\",\n      \"@param expectedSize the predicted quantity of entries\",\n      \"@param expectedSize the expected amount of elements\"\n    ]\n  },\n  {\n    \"tag\": \"@param multiset the multiset for which an unmodifiable view is to be\\n    generated\",\n    \"alternatives\": [\n      \"@param multiset the multiset to create an unmodifiable view of\",\n      \"@param multiset the multiset that requires an unmodifiable view\",\n      \"@param multiset the multiset from which an unmodifiable perspective is\\n    to be created\",\n      \"@param multiset the multiset that needs to be converted into an\\n    unmodifiable view\",\n      \"@param multiset the multiset for which an unmodifiable representation\\n    is being generated\"\n    ]\n  },\n  {\n    \"tag\": \"@return an unmodifiable view of the multiset\",\n    \"alternatives\": [\n      \"@return a read-only representation of the multiset\",\n      \"@return a view of the multiset that cannot be modified\",\n      \"@return an immutable view of the multiset\",\n      \"@return a fixed view of the multiset\",\n      \"@return a non-modifiable perspective of the multiset\"\n    ]\n  }\n]\n"