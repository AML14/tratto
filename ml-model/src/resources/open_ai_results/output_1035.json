"output=[\n  {\n    'tag': '@return the <code>while</code> closure',\n    'alternatives': [\n      '@return the <code>while</code> loop closure',\n      '@return the closure for the <code>while</code> statement',\n      '@return the closure that represents the <code>while</code> loop',\n      '@return the closure associated with the <code>while</code> construct',\n      '@return the closure for the <code>while</code> block'\n    ]\n  },\n  {\n    'tag': '@param input the input object',\n    'alternatives': [\n      '@param input the object used as input',\n      '@param input the object to be processed',\n      '@param input the data to operate on',\n      '@param input the value to be used as input',\n      '@param input the parameter containing the input object'\n    ]\n  },\n  {\n    'tag': '@return the predicate',\n    'alternatives': [\n      '@return the condition',\n      '@return the boolean expression',\n      '@return the function representing the predicate',\n      '@return the statement that defines the predicate',\n      '@return the logical expression'\n    ]\n  },\n  {\n    'tag': '@return the closure',\n    'alternatives': [\n      '@return the function',\n      '@return the method',\n      '@return the anonymous function',\n      '@return the block of code',\n      '@return the executable code'\n    ]\n  },\n  {\n    'tag': '@return true is do-while, false if while',\n    'alternatives': [\n      '@return true if the loop is a do-while loop, false if it is a while loop',\n      '@return true if the loop is a do-while loop, false for a while loop',\n      '@return true for a do-while loop, false for a while loop',\n      '@return true if the loop is a do-while loop, false otherwise',\n      '@return true if the loop is a do-while loop, false in case of a while loop'\n    ]\n  },\n  {\n    'tag': '@param <E> the type that the closure acts on',\n    'alternatives': [\n      '@param <E> the type which the closure operates on',\n      '@param <E> the type of object that the closure acts upon',\n      '@param <E> the type on which the closure is applied',\n      '@param <E> the type that the closure operates with',\n      '@param <E> the type that the closure functions on'\n    ]\n  },\n  {\n    'tag': '@param count the number of times to execute the closure',\n    'alternatives': [\n      '@param count the number of iterations for executing the closure',\n      '@param count the number of times the closure will be executed',\n      '@param count the total executions for the closure',\n      '@param count the number of executions to perform the closure',\n      '@param count the times to run the closure'\n    ]\n  },\n  {\n    'tag': '@return the <code>for</code> closure',\n    'alternatives': [\n      '@return the <code>for</code> loop closure',\n      '@return the closure for the <code>for</code> statement',\n      '@return the closure associated with the <code>for</code> construct',\n      '@return the closure representing the <code>for</code> loop',\n      '@return the closure used in the <code>for</code> construct'\n    ]\n  },\n  {\n    'tag': '@param object the input object',\n    'alternatives': [\n      '@param object the object to be processed',\n      '@param object the input parameter',\n      '@param object the value to be operated on',\n      '@param object the parameter containing the input object',\n      '@param object the data to be operated with'\n    ]\n  },\n  {\n    'tag': '@return true if decorated predicate returns true or input is null',\n    'alternatives': [\n      '@return true if the decorated predicate evaluates to true or if the input is null',\n      '@return true if the predicate decorated returns true or the input is null',\n      '@return true if the decorated predicate gives a true result or the input is null',\n      '@return true if the predicate, after decoration, returns true or the input is null',\n      '@return true if the decorated predicate is true or input is null'\n    ]\n  },\n  {\n    'tag': '@return the predicate as the only element in an array',\n    'alternatives': [\n      '@return the predicate enclosed in an array as the sole element',\n      '@return the single-element array containing only the predicate',\n      '@return an array with the predicate as its sole element',\n      '@return an array containing only the predicate as the singular element',\n      '@return the predicate wrapped in an array as the single item'\n    ]\n  },\n  {\n    'tag': '@param predicate the predicate to call after the null check',\n    'alternatives': [\n      '@param predicate the predicate to invoke following the null check',\n      '@param predicate the predicate that will be called after checking for null',\n      '@param predicate the function to be invoked after the null verification',\n      '@param predicate the predicate to execute after confirming non-null',\n      '@param predicate the predicate that gets called after the null test'\n    ]\n  },\n  {\n    'tag': '@param <T> the type that the predicate queries',\n    'alternatives': [\n      '@param <T> the type on which the predicate performs queries',\n      '@param <T> the type over which the predicate operates',\n      '@param <T> the type that the predicate examines',\n      '@param <T> the type that the predicate checks against',\n      '@param <T> the type for which the predicate performs inquiries'\n    ]\n  },\n  {\n    'tag': '@param transformer the transformer to call',\n    'alternatives': [\n      '@param transformer the function to invoke as a transformer',\n      '@param transformer the function that will be called as a transformer',\n      '@param transformer the function used for transformation',\n      '@param transformer the method to use as a transformer',\n      '@param transformer the function that acts as a transformer'\n    ]\n  },\n  {\n    'tag': '@param predicate the predicate to call with the result of the transform',\n    'alternatives': [\n      '@param predicate the predicate to invoke using the transformed result',\n      '@param predicate the predicate that will be called with the transformed output',\n      '@param predicate the function to execute with the transformation result',\n      '@param predicate the predicate to use with the transformed outcome',\n      '@param predicate the predicate that receives the transformed output'\n    ]\n  },\n  {\n    'tag': '@param object the input object which will be transformed',\n    'alternatives': [\n      '@param object the object that will undergo transformation',\n      '@param object the input object that will be changed',\n      '@param object the parameter to be transformed',\n      '@param object the value that is going to be converted',\n      '@param object the object to be modified through transformation'\n    ]\n  },\n  {\n    'tag': '@return true if decorated predicate returns true',\n    'alternatives': [\n      '@return true if the decorated predicate evaluates as true',\n      '@return true if the predicate decorated returns true',\n      '@return true if the decorated predicate gives a true result',\n      '@return true if the predicate, after decoration, returns true',\n      '@return true if the decorated predicate is true'\n    ]\n  },\n  {\n    'tag': '@return the predicate as the only element in an array',\n    'alternatives': [\n      '@return the predicate enclosed in an array as the sole element',\n      '@return the single-element array containing only the predicate',\n      '@return an array with the predicate as its sole element',\n      '@return an array containing only the predicate as the singular element',\n      '@return the predicate wrapped in an array as the single item'\n    ]\n  }\n]"