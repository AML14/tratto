"[\n  {\n    'tag': '@param absentBehavior the specification for what to do if no elements of the list compare as\\n       equal to the key.',\n    'alternatives': [\n      '@param absentBehavior the rule for what action to take if there are no elements in the list that are equal to the key.',\n      '@param absentBehavior the instruction for what to do if there are no elements in the list that match the key.',\n      '@param absentBehavior describes what action should be taken if no elements in the list match the key.'\n    ]\n  },\n  {\n    'tag': '@return the index determined by the {@code KeyPresentBehavior}, if the key is in the list;\\n        otherwise the index determined by the {@code KeyAbsentBehavior}.',\n    'alternatives': [\n      '@return the index calculated based on the {@code KeyPresentBehavior}, if the key exists in the list;\\n        otherwise the index calculated based on the {@code KeyAbsentBehavior}.',\n      '@return the index obtained by using the {@code KeyPresentBehavior}, if the list contains the key;\\n        otherwise the index obtained by using the {@code KeyAbsentBehavior}.',\n      '@return the index determined by the {@code KeyPresentBehavior} if the key is found in the list;\\n        otherwise, the index determined by the {@code KeyAbsentBehavior}.'\n    ]\n  },\n  {\n    'tag': '@return the next element if there was one. If {@code endOfData} was called\\n    during execution, the return value will be ignored.',\n    'alternatives': [\n      '@return the following element if there was any. If {@code endOfData} was invoked\\n    during the execution, the return value will not be considered.',\n      '@return the next item if it exists. If the {@code endOfData} method was called\\n    during execution, the return value will be disregarded.',\n      '@return the subsequent element if available. If the {@code endOfData} method was called\\n    during execution, the return value will not be taken into account.'\n    ]\n  },\n  {\n    'tag': '@throws RuntimeException if any unrecoverable error happens. This exception\\n    will propagate outward to the {@code hasNext()}, {@code next()}, or\\n    {@code peek()} invocation that invoked this method. Any further\\n    attempts to use the iterator will result in an\\n    {@link IllegalStateException}.',\n    'alternatives': [\n      '@throws RuntimeException if an irreparable error occurs. This exception\\n    will be passed on to the {@code hasNext()}, {@code next()}, or\\n    {@code peek()} call that invoked this method. Any subsequent\\n    attempts to use the iterator will lead to an\\n    {@link IllegalStateException}.',\n      '@throws RuntimeException if an unrecoverable error occurs. This exception\\n    will be propagated to the {@code hasNext()}, {@code next()}, or\\n    {@code peek()} method that called this function. Any further\\n    attempts to use the iterator will result in an\\n    {@link IllegalStateException}.',\n      '@throws RuntimeException if any non-recoverable error occurs. This exception\\n    will be thrown to the {@code hasNext()}, {@code next()}, or\\n    {@code peek()} invocation that called this method. Any subsequent\\n    attempts to use the iterator will cause an\\n    {@link IllegalStateException}.'\n    ]\n  },\n  {\n    'tag': '@return {@code null}; a convenience so your {@code computeNext}\\n    implementation can use the simple statement {@code return endOfData();}',\n    'alternatives': [\n      '@return {@code null}; a convenience for your {@code computeNext}\\n    implementation to use the straightforward statement {@code return endOfData();}',\n      '@return {@code null}; a shortcut for your {@code computeNext}\\n    implementation to utilize the concise statement {@code return endOfData();}',\n      '@return {@code null}; a convenient way for your {@code computeNext}\\n    implementation to use the simple statement {@code return endOfData();}'\n    ]\n  },\n  {\n    'tag': '@param key key to store in the multimap',\n    'alternatives': [\n      '@param key the key to be stored in the multimap',\n      '@param key the key that will be stored in the multimap',\n      '@param key the key to be placed in the multimap'\n    ]\n  },\n  {\n    'tag': '@param value value to store in the multimap',\n    'alternatives': [\n      '@param value the value to be stored in the multimap',\n      '@param value the value that will be stored in the multimap',\n      '@param value the value to be placed in the multimap'\n    ]\n  },\n  {\n    'tag': '@param map place to store the mapping from each key to its corresponding\\n    values',\n    'alternatives': [\n      '@param map the location to store the mapping from each key to its corresponding\\n    values',\n      '@param map the destination to store the mapping from each key to its corresponding\\n    values',\n      '@param map where to store the mapping from each key to its corresponding\\n    values'\n    ]\n  },\n  {\n    'tag': '@param comparator the comparator that defines the order',\n    'alternatives': [\n      '@param comparator the comparator that specifies the order',\n      '@param comparator the comparator that determines the order',\n      '@param comparator the comparator that establishes the order'\n    ]\n  },\n  {\n    'tag': '@return comparator itself if it is already an {@code Ordering}; otherwise\\n    an ordering that wraps that comparator',\n    'alternatives': [\n      '@return the comparator itself if it is already an {@code Ordering}; otherwise,\\n    an ordering that encapsulates that comparator',\n      '@return the comparator itself if it is already an {@code Ordering}; otherwise\\n    an ordering that wraps the comparator',\n      '@return the comparator itself if it is already an {@code Ordering}; otherwise,\\n    an ordering that encompasses that comparator'\n    ]\n  },\n  {\n    'tag': '@param valuesInOrder the values that the returned comparator will be able\\n    to compare, in the order the comparator should induce',\n    'alternatives': [\n      '@param valuesInOrder the values that the resulting comparator will be capable\\n    of comparing, in the order the comparator should generate',\n      '@param valuesInOrder the values that the generated comparator will be able\\n    to compare, in the order the comparator should induce',\n      '@param valuesInOrder the values that the resulting comparator should be able\\n    to compare, in the order specified by the comparator'\n    ]\n  },\n  {\n    'tag': '@return the comparator described above',\n    'alternatives': [\n      '@return the aforementioned comparator',\n      '@return the comparator mentioned before',\n      '@return the previously described comparator'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if {@code valuesInOrder} contains any\\n    duplicate values (according to {@link Object#equals})',\n    'alternatives': [\n      '@throws IllegalArgumentException if {@code valuesInOrder} includes any\\n    duplicate values (as per {@link Object#equals})',\n      '@throws IllegalArgumentException if {@code valuesInOrder} has any\\n    duplicate values (based on {@link Object#equals})',\n      '@throws IllegalArgumentException if {@code valuesInOrder} contains duplicates\\n    (as determined by {@link Object#equals})'\n    ]\n  },\n  {\n    'tag': '@param leastValue the value which the returned comparator should consider\\n    the \"least\" of all values',\n    'alternatives': [\n      '@param leastValue the value that the resulting comparator should consider\\n    as the \"least\" among all values',\n      '@param leastValue the value that the generated comparator should treat\\n    as the \"least\" among all values',\n      '@param leastValue the value that the returned comparator should regard\\n    as the \"least\" among all values'\n    ]\n  },\n  {\n    'tag': '@param remainingValuesInOrder the rest of the values that the returned\\n    comparator will be able to compare, in the order the comparator should\\n    follow',\n    'alternatives': [\n      '@param remainingValuesInOrder the remaining values that the resulting\\n    comparator will be capable of comparing, in the order the comparator should\\n    adhere to',\n      '@param remainingValuesInOrder the remaining values that the generated\\n    comparator will be able to compare, in the order the comparator should\\n    follow',\n      '@param remainingValuesInOrder the rest of the values that the returned\\n    comparator should be able to compare, in the order specified by the comparator'\n    ]\n  },\n  {\n    'tag': '@return the comparator described above',\n    'alternatives': [\n      '@return the aforementioned comparator',\n      '@return the comparator mentioned before',\n      '@return the previously described comparator'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if any duplicate values (according to\\n    {@link Object#equals(Object)}) are present among the method arguments',\n    'alternatives': [\n      '@throws IllegalArgumentException if there are any duplicate values (as determined by\\n    {@link Object#equals(Object)}) among the method arguments',\n      '@throws IllegalArgumentException if any of the method arguments contain duplicate values\\n    (according to {@link Object#equals(Object)})',\n      '@throws IllegalArgumentException if the method arguments contain any\\n    duplicate values (based on {@link Object#equals(Object)})'\n    ]\n  },\n  {\n    'tag': '@param comparators the comparators to try in order',\n    'alternatives': [\n      '@param comparators the comparators to attempt sequentially',\n      '@param comparators the comparators to test in sequence',\n      '@param comparators the comparators to evaluate one by one'\n    ]\n  },\n  {\n    'tag': '@param iterator the iterator whose minimum element is to be determined',\n    'alternatives': [\n      '@param iterator the iterator from which to find the minimum element',\n      '@param iterator the iterator that will be used to find the minimum element',\n      '@param iterator the iterator for determining the minimum element'\n    ]\n  },\n  {\n    'tag': '@throws NoSuchElementException if {@code iterator} is empty',\n    'alternatives': [\n      '@throws NoSuchElementException if the {@code iterator} is empty',\n      '@throws NoSuchElementException if there are no elements in the {@code iterator}',\n      '@throws NoSuchElementException if the {@code iterator} does not contain any elements'\n    ]\n  },\n  {\n    'tag': '@throws ClassCastException if the parameters are not <i>mutually\\n    comparable</i> under this ordering.',\n    'alternatives': [\n      '@throws ClassCastException if the arguments are not <i>mutually\\n    comparable</i> using this ordering.',\n      '@throws ClassCastException if the parameters cannot be <i>mutually\\n    compared</i> based on this ordering.',\n      '@throws ClassCastException if the parameters are not <i>mutually\\n    comparable</i> according to this ordering.'\n    ]\n  },\n  {\n    'tag': '@param iterable the iterable whose minimum element is to be determined',\n    'alternatives': [\n      '@param iterable the iterable from which to find the minimum element',\n      '@param iterable the iterable that will be used to find the minimum element',\n      '@param iterable the iterable for determining the minimum element'\n    ]\n  },\n  {\n    'tag': '@throws NoSuchElementException if {@code iterable} is empty',\n    'alternatives': [\n      '@throws NoSuchElementException if the {@code iterable} is empty',\n      '@throws NoSuchElementException if there are no elements in the {@code iterable}',\n      '@throws NoSuchElementException if the {@code iterable} does not contain any elements'\n    ]\n  },\n  {\n    'tag': '@throws ClassCastException if the parameters are not <i>mutually\\n    comparable</i> under this ordering.',\n    'alternatives': [\n      '@throws ClassCastException if the arguments are not <i>mutually\\n    comparable</i> using this ordering.',\n      '@throws ClassCastException if the parameters cannot be <i>mutually\\n    compared</i> based on this ordering.',\n      '@throws ClassCastException if the parameters are not <i>mutually\\n    comparable</i> according to this ordering.'\n    ]\n  },\n  {\n    'tag': '@param a value to compare, returned if less than or equal to b.',\n    'alternatives': [\n      '@param a value to be compared, returned if it is less than or equal to b.',\n      '@param a value to compare, returned if it is less than or equal to b.',\n      '@param a value for comparison, returned if it is less than or equal to b.'\n    ]\n  }\n]"