"output = [\n  {\n    'tag': '@param point ',\n    'alternatives': [\n      '@param point ',\n      '@param position ',\n      '@param coordinate '\n    ]\n  },\n  {\n    'tag': '@param problem the delegate',\n    'alternatives': [\n      '@param problem the delegate',\n      '@param task the delegate',\n      '@param operation the delegate'\n    ]\n  },\n  {\n    'tag': '@param unweighted the evalutation before weights are applied',\n    'alternatives': [\n      '@param unweighted the evalutation before weights are applied',\n      '@param unevaluated the evalutation before applying weights',\n      '@param preweighted the evalutation before the application of weights'\n    ]\n  },\n  {\n    'tag': '@param weightSqrt the matrix square root of the weight matrix',\n    'alternatives': [\n      '@param weightSqrt the matrix square root of the weight matrix',\n      '@param weightRoot the square root matrix of the weight matrix',\n      '@param sqrtWeight the square root of the weight matrix'\n    ]\n  },\n  {\n    'tag': '@param leastSquaresProblem the problem definition, including model function and\\n                           convergence criteria.',\n    'alternatives': [\n      '@param leastSquaresProblem the problem definition, including model function and\\n                           convergence criteria.',\n      '@param problem the definition of the least squares problem, including the model function and convergence criteria.',\n      '@param lsProblem the problem definition comprising the model function and convergence criteria.'\n    ]\n  },\n  {\n    'tag': '@return The optimum.',\n    'alternatives': [\n      '@return The optimum.',\n      '@return The best solution.',\n      '@return The optimal value.'\n    ]\n  },\n  {\n    'tag': '@param observationSize the number of observation. Needed for {@link\\n                       #getRMS()}.',\n    'alternatives': [\n      '@param observationSize the number of observation. Needed for {@link\\n                       #getRMS()}.',\n      '@param numObservations the count of observations. Required for {@link\\n                       #getRMS()}.',\n      '@param obsSize the size of the observation. Required for {@link\\n                       #getRMS()}.'\n    ]\n  },\n  {\n    'tag': '@return the matrix {@link Decomposition} algoritm.',\n    'alternatives': [\n      '@return the matrix {@link Decomposition} algoritm.',\n      '@return the algorithm for matrix {@link Decomposition}.',\n      '@return the {@link Decomposition} algorithm for matrices.'\n    ]\n  },\n  {\n    'tag': '@param newDecomposition the {@link Decomposition} algorithm to use.',\n    'alternatives': [\n      '@param newDecomposition the {@link Decomposition} algorithm to use.',\n      '@param algorithm the {@link Decomposition} to use.',\n      '@param decomposition the algorithm of {@link Decomposition} to be used.'\n    ]\n  },\n  {\n    'tag': '@return a new instance.',\n    'alternatives': [\n      '@return a new instance.',\n      '@return a fresh instance.',\n      '@return a newly created object.'\n    ]\n  },\n  {\n    'tag': '@param jacobian the m by n jacobian matrix, J. Input.',\n    'alternatives': [\n      '@param jacobian the m by n jacobian matrix, J. Input.',\n      '@param jacobianMatrix the m by n derivative matrix, J. Input.',\n      '@param jacobianInput the input for the m by n Jacobian matrix, J.'\n    ]\n  },\n  {\n    'tag': '@param residuals the m by 1 residual vector, r. Input.',\n    'alternatives': [\n      '@param residuals the m by 1 residual vector, r. Input.',\n      '@param residualVector the m by 1 vector representing residuals, r. Input.',\n      '@param rInput the input for the m by 1 residual vector, r.'\n    ]\n  },\n  {\n    'tag': '@return the n by n normal matrix and  the n by 1 J<sup>Tr vector.',\n    'alternatives': [\n      '@return the n by n normal matrix and  the n by 1 J<sup>Tr vector.',\n      '@return the n by n matrix representing the normal equation and the n by 1 J<sup>Tr vector.',\n      '@return the normal matrix of size n by n and the J<sup>Tr vector with size n by 1.'\n    ]\n  },\n  {\n    'tag': '@param decomposition the {@link Decomposition} algorithm.',\n    'alternatives': [\n      '@param decomposition the {@link Decomposition} algorithm.',\n      '@param algorithm the {@link Decomposition} to be used.',\n      '@param decomp the algorithm for {@link Decomposition}.'\n    ]\n  },\n  {\n    'tag': '@param model the model function. Produces the computed values.',\n    'alternatives': [\n      '@param model the model function. Produces the computed values.',\n      '@param function the model function. Produces the calculated values.',\n      '@param predictor the function that models and produces the computed values.'\n    ]\n  },\n  {\n    'tag': '@param observed the observed (target) values',\n    'alternatives': [\n      '@param observed the observed (target) values',\n      '@param target the observed values',\n      '@param data the values that are observed (target)'\n    ]\n  },\n  {\n    'tag': '@return the value where the function is zero.',\n    'alternatives': [\n      '@return the value where the function is zero.',\n      '@return the value at which the function equals zero.',\n      '@return the point where the function has a zero value.'\n    ]\n  },\n  {\n    'tag': '@throws NonSquareMatrixException if the matrix is not square.',\n    'alternatives': [\n      '@throws NonSquareMatrixException if the matrix is not square.',\n      '@throws MatrixNotSquareException if the matrix does not have equal dimensions.',\n      '@throws SquareMatrixException if the matrix is not a square matrix.'\n    ]\n  },\n  {\n    'tag': '@throws NotStrictlyPositiveException if {@code maxIter <= 0}.',\n    'alternatives': [\n      '@throws NotStrictlyPositiveException if {@code maxIter <= 0}.',\n      '@throws NonPositiveArgumentException if {@code maxIter <= 0}.',\n      '@throws InvalidParameterException if {@code maxIter <= 0}.'\n    ]\n  },\n  {\n    'tag': '@throws MathIllegalArgumentException iff one of the chromosomes is\\n  not an instance of {@link AbstractListChromosome}',\n    'alternatives': [\n      '@throws MathIllegalArgumentException iff one of the chromosomes is\\n  not an instance of {@link AbstractListChromosome}',\n      '@throws InvalidChromosomeException if any of the chromosomes is not an instance of {@link AbstractListChromosome}',\n      '@throws IllegalArgumentException if one of the chromosomes is not an instance of {@link AbstractListChromosome}'\n    ]\n  },\n  {\n    'tag': '@throws NotStrictlyPositiveException if the number of sample points is negative',\n    'alternatives': [\n      '@throws NotStrictlyPositiveException if the number of sample points is negative',\n      '@throws NegativeSampleSizeException if the count of sample points is negative',\n      '@throws InvalidSampleSizeException if the number of sample points is negative'\n    ]\n  },\n  {\n    'tag': '@param minStep minimal step (must be positive even for backward\\nintegration), the last step can be smaller than this',\n    'alternatives': [\n      '@param minStep minimal step (must be positive even for backward\\nintegration), the last step can be smaller than this',\n      '@param minimumStep the minimum step size (must be positive even for backward integration), last step can be smaller',\n      '@param smallestStep minimal step size (including backward integration), last step possibly smaller'\n    ]\n  },\n  {\n    'tag': '@param maxStep maximal step (must be positive even for backward\\nintegration)',\n    'alternatives': [\n      '@param maxStep maximal step (must be positive even for backward\\nintegration)',\n      '@param maximumStep the maximum step size (must be positive even for backward integration)',\n      '@param largestStep maximal step size (including backward integration)'\n    ]\n  },\n  {\n    'tag': '@throws NullArgumentException if Object <code>o</code> is {@code null}.',\n    'alternatives': [\n      '@throws NullArgumentException if Object <code>o</code> is {@code null}.',\n      '@throws IllegalArgumentException if the Object <code>o</code> is null.',\n      '@throws InvalidObjectException if Object <code>o</code> is null.'\n    ]\n  },\n  {\n    'tag': '@throws MathIllegalArgumentException iff one of the chromosomes is\\n  not an instance of {@link AbstractListChromosome}',\n    'alternatives': [\n      '@throws MathIllegalArgumentException iff one of the chromosomes is\\n  not an instance of {@link AbstractListChromosome}',\n      '@throws InvalidChromosomeException if any of the chromosomes is not an instance of {@link AbstractListChromosome}',\n      '@throws IllegalArgumentException if one of the chromosomes is not an instance of {@link AbstractListChromosome}'\n    ]\n  }\n]"