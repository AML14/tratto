"output = [\n  {\n    'tag': '@param addend Value to be added to this {@code Complex}.',\n    'alternatives': [\n      '@param summand Value to be added to this {@code Complex}.',\n      '@param value Value to add to this {@code Complex}.',\n      '@param num Value to add to this {@code Complex}.'\n    ]\n  },\n  {\n    'tag': '@return {@code this + addend}.',\n    'alternatives': [\n      '@return the result of adding {@code addend} to this {@code Complex}.',\n      '@return the sum of {@code this} and {@code addend}.',\n      '@return the addition of {@code this} and {@code addend}.'\n    ]\n  },\n  {\n    'tag': '@return the conjugate of this Complex object.',\n    'alternatives': [\n      '@return the complex conjugate of this object.',\n      '@return the conjugate of this Complex instance.',\n      '@return the complex conjugate of this Complex object.'\n    ]\n  },\n  {\n    'tag': '@param divisor Value by which this {@code Complex} is to be divided.',\n    'alternatives': [\n      '@param quotient Value by which this {@code Complex} is divided.',\n      '@param factor Value to divide this {@code Complex} by.',\n      '@param divider Value that divides this {@code Complex}.'\n    ]\n  },\n  {\n    'tag': '@return {@code this / divisor}.',\n    'alternatives': [\n      '@return the result of dividing {@code this} by {@code divisor}.',\n      '@return the quotient of {@code this} divided by {@code divisor}.',\n      '@return the division of {@code this} by {@code divisor}.'\n    ]\n  },\n  {\n    'tag': '@param other Object to test for equality with this instance.',\n    'alternatives': [\n      '@param obj Object to compare for equality with this instance.',\n      '@param object Object to check for equality with this instance.',\n      '@param another Object to test if it is equal to this instance.'\n    ]\n  },\n  {\n    'tag': '@return {@code true} if the objects are equal, {@code false} if object\\nis {@code null}, not an instance of {@code Complex}, or not equal to\\nthis instance.',\n    'alternatives': [\n      '@return {@code true} if the objects are equal, {@code false} otherwise.',\n      '@return {@code true} if the objects are equal, otherwise {@code false}.',\n      '@return {@code true} if the objects are equal, or {@code false} otherwise.'\n    ]\n  },\n  {\n    'tag': '@param maxUlps {@code (maxUlps - 1)} is the number of floating point\\nvalues between the real (resp. imaginary) parts of {@code x} and\\n{@code y}.',\n    'alternatives': [\n      '@param maxUlps The number of floating point values between {@code x} and {@code y}.',\n      '@param maxUlps The number of floating point values separating {@code x} and {@code y}.',\n      '@param maxUlps The count of floating point values between {@code x} and {@code y}.'\n    ]\n  },\n  {\n    'tag': '@return {@code true} if there are fewer than {@code maxUlps} floating\\npoint values between the real (resp. imaginary) parts of {@code x}\\nand {@code y}.',\n    'alternatives': [\n      '@return {@code true} if the real (resp. imaginary) parts of {@code x} and {@code y} are within a distance of {@code maxUlps}.',\n      '@return {@code true} if the real (resp. imaginary) parts of {@code x} and {@code y} have a difference of at most {@code maxUlps} floating point values.',\n      '@return {@code true} if the difference between the real (resp. imaginary) parts of {@code x} and {@code y} is less than {@code maxUlps} floating point values.'\n    ]\n  },\n  {\n    'tag': '@return {@code true} if the values are equal.',\n    'alternatives': [\n      '@return {@code true} if the values are the same.',\n      '@return {@code true} if the values are identical.',\n      '@return {@code true} if the values are equivalent.'\n    ]\n  },\n  {\n    'tag': '@param eps Amount of allowed absolute error.',\n    'alternatives': [\n      '@param tolerance Amount of acceptable absolute error.',\n      '@param precision Amount of permitted absolute error.',\n      '@param threshold The absolute error that is allowed.'\n    ]\n  },\n  {\n    'tag': '@return {@code true} if the values are two adjacent floating point\\nnumbers or they are within range of each other.',\n    'alternatives': [\n      '@return {@code true} if the values are adjacent floating point numbers or they are close to each other.',\n      '@return {@code true} if the values are consecutive floating point numbers or they fall within range of each other.',\n      '@return {@code true} if the values are neighboring floating point numbers or they are within the same range.'\n    ]\n  },\n  {\n    'tag': '@param eps Amount of allowed relative error.',\n    'alternatives': [\n      '@param tolerance Amount of acceptable relative error.',\n      '@param precision Amount of permitted relative error.',\n      '@param threshold The relative error that is allowed.'\n    ]\n  },\n  {\n    'tag': '@return {@code true} if the values are two adjacent floating point\\nnumbers or they are within range of each other.',\n    'alternatives': [\n      '@return {@code true} if the values are adjacent floating point numbers or they are close to each other.',\n      '@return {@code true} if the values are consecutive floating point numbers or they fall within range of each other.',\n      '@return {@code true} if the values are neighboring floating point numbers or they are within the same range.'\n    ]\n  },\n  {\n    'tag': '@return a hash code value for this object.',\n    'alternatives': [\n      '@return the hash code of this object.',\n      '@return the computed hash code for this object.',\n      '@return the generated hash code of this object.'\n    ]\n  },\n  {\n    'tag': '@return the imaginary part.',\n    'alternatives': [\n      '@return the imaginary component.',\n      '@return the imaginary section.',\n      '@return the imaginary segment.'\n    ]\n  },\n  {\n    'tag': '@return the real part.',\n    'alternatives': [\n      '@return the real component.',\n      '@return the real section.',\n      '@return the real segment.'\n    ]\n  },\n  {\n    'tag': '@return true if either or both parts of this complex number is\\n{@code NaN}; false otherwise.',\n    'alternatives': [\n      '@return true if any or both components of this complex number is {@code NaN}; otherwise false.',\n      '@return true if any or both segments of this complex number is {@code NaN}; otherwise false.',\n      '@return true if any or both sections of this complex number is {@code NaN}; otherwise false.'\n    ]\n  },\n  {\n    'tag': '@return true if one or both parts of this complex number are infinite\\nand neither part is {@code NaN}.',\n    'alternatives': [\n      '@return true if any or both components of this complex number are infinite and none of them is {@code NaN}.',\n      '@return true if any or both segments of this complex number are infinite and none of them is {@code NaN}.',\n      '@return true if any or both sections of this complex number are infinite and none of them is {@code NaN}.'\n    ]\n  },\n  {\n    'tag': '@param factor value to be multiplied by this {@code Complex}.',\n    'alternatives': [\n      '@param multiplier value to be multiplied with this {@code Complex}.',\n      '@param value value to multiply this {@code Complex} by.',\n      '@param num number to multiply this {@code Complex} with.'\n    ]\n  },\n  {\n    'tag': '@return {@code this * factor}.',\n    'alternatives': [\n      '@return the result of multiplying {@code this} by {@code factor}.',\n      '@return the product of {@code this} and {@code factor}.',\n      '@return the multiplication of {@code this} and {@code factor}.'\n    ]\n  },\n  {\n    'tag': '@param factor value to be multiplied by this {@code Complex}.',\n    'alternatives': [\n      '@param multiplier value to be multiplied with this {@code Complex}.',\n      '@param value value to multiply this {@code Complex} by.',\n      '@param num number to multiply this {@code Complex} with.'\n    ]\n  },\n  {\n    'tag': '@return {@code this * factor}.',\n    'alternatives': [\n      '@return the result of multiplying {@code this} by {@code factor}.',\n      '@return the product of {@code this} and {@code factor}.',\n      '@return the multiplication of {@code this} and {@code factor}.'\n    ]\n  }\n]"