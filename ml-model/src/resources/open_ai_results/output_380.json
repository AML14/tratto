"output=[\n  {\n    'tag': '@throws IllegalArgumentException if map is not an {@code EnumBiMap} instance and contains no mappings',\n    'alternatives': [\n      '@throws IllegalArgumentException if map is not an {@code EnumBiMap} instance and has no mappings',\n      '@throws IllegalArgumentException if map is not an {@code EnumBiMap} instance and does not have any mappings',\n      '@throws IllegalArgumentException if map is not an {@code EnumBiMap} instance and does not contain any mappings'\n    ]\n  },\n  {\n    'tag': '@param type the component type',\n    'alternatives': [\n      '@param type the type of component',\n      '@param type the type of elements',\n      '@param type the type of data'\n    ]\n  },\n  {\n    'tag': '@param length the length of the new array',\n    'alternatives': [\n      '@param length the size of the new array',\n      '@param length the number of elements in the new array',\n      '@param length the amount of elements in the new array'\n    ]\n  },\n  {\n    'tag': '@param reference any array of the desired type',\n    'alternatives': [\n      '@param reference an array of the specified type',\n      '@param reference an array with the desired type',\n      '@param reference an array that matches the desired type'\n    ]\n  },\n  {\n    'tag': '@param first the first array of elements to concatenate',\n    'alternatives': [\n      '@param first the initial array to merge',\n      '@param first the starting array for concatenation',\n      '@param first the first list of elements to join'\n    ]\n  },\n  {\n    'tag': '@param second the second array of elements to concatenate',\n    'alternatives': [\n      '@param second the final array to merge',\n      '@param second the ending array for concatenation',\n      '@param second the second list of elements to join'\n    ]\n  },\n  {\n    'tag': '@param type the component type of the returned array',\n    'alternatives': [\n      '@param type the type of components in the resulting array',\n      '@param type the type of elements in the array to be returned',\n      '@param type the data type of the array that will be returned'\n    ]\n  },\n  {\n    'tag': '@param element the element to prepend to the front of {@code array}',\n    'alternatives': [\n      '@param element the element to add at the beginning of {@code array}',\n      '@param element the element to insert at the start of {@code array}',\n      '@param element the element to place at the front of {@code array}'\n    ]\n  },\n  {\n    'tag': '@param array the array of elements to append',\n    'alternatives': [\n      '@param array the array of elements to add at the end',\n      '@param array the array of elements to concatenate',\n      '@param array the array of elements to attach'\n    ]\n  },\n  {\n    'tag': '@return an array whose size is one larger than {@code array}, with\\n    {@code element} occupying the first position, and the\\n    elements of {@code array} occupying the remaining elements.',\n    'alternatives': [\n      '@return an array that has a size larger than {@code array} by one, with\\n    {@code element} being in the first position, and the\\n    rest of {@code array} elements occupying the remaining positions.',\n      '@return an array with a size greater than {@code array} by one, having\\n    {@code element} in the first position, and the\\n    elements from {@code array} filling the remaining positions.',\n      '@return an array that is one element larger than {@code array}, with\\n    {@code element} at the beginning, and the rest of the\\n    elements from {@code array} following it.'\n    ]\n  },\n  {\n    'tag': '@param array the array of elements to prepend',\n    'alternatives': [\n      '@param array the array of elements to add at the beginning',\n      '@param array the array of elements to insert at the front',\n      '@param array the array of elements to place at the start'\n    ]\n  },\n  {\n    'tag': '@param element the element to append to the end',\n    'alternatives': [\n      '@param element the element to add at the end',\n      '@param element the element to attach to the last position',\n      '@param element the element to insert at the last index'\n    ]\n  },\n  {\n    'tag': '@return an array whose size is one larger than {@code array}, with\\n    the same contents as {@code array}, plus {@code element} occupying the\\n    last position.',\n    'alternatives': [\n      '@return an array that has a size larger than {@code array} by one, with\\n    identical contents to {@code array} but with {@code element} in the\\n    last position.',\n      '@return an array that is one element larger than {@code array}, consisting\\n    of the same elements as {@code array}, with {@code element} taking\\n    the last position.',\n      '@return an array with a size greater than {@code array} by one, containing\\n    the exact same elements as {@code array}, and having {@code element}\\n    in the last position.'\n    ]\n  },\n  {\n    'tag': '@param c the collection for which to return an array of elements',\n    'alternatives': [\n      '@param c the collection from which an array of elements will be returned',\n      '@param c the collection to generate an array of elements from',\n      '@param c the collection to convert into an array of elements'\n    ]\n  },\n  {\n    'tag': '@param array the array in which to place the collection elements',\n    'alternatives': [\n      '@param array the array where the collection elements will be stored',\n      '@param array the array to hold the elements from the collection',\n      '@param array the array to contain the elements of the collection'\n    ]\n  },\n  {\n    'tag': '@throws ArrayStoreException if the runtime type of the specified array is\\n    not a supertype of the runtime type of every element in the specified\\n    collection',\n    'alternatives': [\n      '@throws ArrayStoreException if the runtime type of the specified array is\\n    not a superclass of the runtime type of each element in the specified\\n    collection',\n      '@throws ArrayStoreException if the runtime type of the specified array is\\n    not a parent class of the runtime type of all elements in the specified\\n    collection',\n      '@throws ArrayStoreException if the runtime type of the specified array does not\\n    extend the runtime type of every element in the specified collection'\n    ]\n  },\n  {\n    'tag': '@param rowIndex position of the row key in {@link #rowKeyList()}',\n    'alternatives': [\n      '@param rowIndex index of the row key in the list obtained from {@link #rowKeyList()}',\n      '@param rowIndex index indicating the position of the row key in {@link #rowKeyList()}',\n      '@param rowIndex index that specifies the location of the row key in {@link #rowKeyList()}'\n    ]\n  },\n  {\n    'tag': '@param columnIndex position of the row key in {@link #columnKeyList()}',\n    'alternatives': [\n      '@param columnIndex index of the column key in the list obtained from {@link #columnKeyList()}',\n      '@param columnIndex position indicating the location of the column key in {@link #columnKeyList()}',\n      '@param columnIndex index that specifies the column key position in {@link #columnKeyList()}'\n    ]\n  }\n]"