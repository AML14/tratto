"[\n   {'tag': '@param in Array to be tested', 'alternatives': ['@param in Array to be checked', '@param in Array to be examined', '@param in Array to be validated', '@param in Array to be inspected', '@param in Array to be verified']},\n   {'tag': '@throws NotStrictlyPositiveException if any entries of the array are not\\nstrictly positive.', 'alternatives': ['@throws NotStrictlyPositiveException if any elements of the array are not\\nstrictly positive.', '@throws NotStrictlyPositiveException if there are any non-strictly positive entries in the array.', '@throws NotStrictlyPositiveException if any values in the array are not\\nstrictly positive.', '@throws NotStrictlyPositiveException if any numbers in the array are not\\nstrictly positive.', '@throws NotStrictlyPositiveException if any elements in the array are not\\nstrictly positive.']},\n   {'tag': '@param in Array to be tested.', 'alternatives': ['@param in Tested array.', '@param in Array to test.', '@param in Array under test.', '@param in Array to be checked.']},\n   {'tag': '@throws NotANumberException if an entry is {@code NaN}.', 'alternatives': ['@throws NotANumberException if an element is {@code NaN}.', '@throws NotANumberException if a value is {@code NaN}.', '@throws NotANumberException if a number is {@code NaN}.', '@throws NotANumberException if an element is not a number.', '@throws NotANumberException if a value is not a number.']},\n   {'tag': '@param v Vector of doubles.', 'alternatives': ['@param v Double vector.', '@param v Vector of floating point numbers.', '@param v Array of doubles.', '@param v Array of floating point numbers.', '@param v Double array.']},\n   {'tag': '@param x Array to be sorted and used as a pattern for permutation\\nof the other arrays.', 'alternatives': ['@param x Array for sorting and acting as a pattern for permuting\\nthe other arrays.', '@param x Array to arrange and serve as a template for permuting\\nthe other arrays.', '@param x Array to sort and apply as a model for permuting\\nthe other arrays.', '@param x Array to organize and utilize as a template for permuting\\nthe other arrays.', '@param x Array to order and utilize as a reference for permuting\\nthe other arrays.']},\n   {'tag': '@param yList Set of arrays whose permutations of entries will follow\\nthose performed on {@code x}.', 'alternatives': ['@param yList Collection of arrays that will have their entries permuted\\nequivalent to the ones performed on {@code x}.', '@param yList Set of arrays that will be permutated with entries following\\nthe ones performed on {@code x}.', '@param yList Set of arrays whose entry permutations will mirror those performed\\non {@code x}.', '@param yList Set of arrays that will be rearranged according to the entry\\npermutations applied to {@code x}.', '@param yList Set of arrays that will have their entries reorganized based on\\nthe permutations applied to {@code x}.']},\n   {'tag': '@throws DimensionMismatchException if any {@code y} is not the same\\nsize as {@code x}.', 'alternatives': ['@throws DimensionMismatchException if any {@code y} has a different\\nsize than {@code x}.', '@throws DimensionMismatchException if any {@code y} has a size\\ninconsistent with {@code x}.', '@throws DimensionMismatchException if any {@code y} does not have the same\\nsize as {@code x}.', '@throws DimensionMismatchException if any {@code y} is not of the same\\nsize as {@code x}.', '@throws DimensionMismatchException if any {@code y} does not match the size\\nof {@code x}.']},\n   {'tag': '@param source Array to be copied.', 'alternatives': ['@param source Source array to be duplicated.', '@param source Array to replicate.', '@param source Original array to be cloned.', '@param source Array to be replicated.', '@param source Array to be reproduced.']},\n   {'tag': '@return the copied array.', 'alternatives': ['@return the duplicated array.', '@return the replicated array.', '@return the cloned array.', '@return the reproduced array.', '@return the copied array object.']},\n   {'tag': '@param len Number of entries to copy. If smaller then the source\\nlength, the copy will be truncated, if larger it will padded with\\nzeroes.', 'alternatives': ['@param len Number of elements to duplicate. If less than the source array\\'s\\nlength, the duplicated array will be truncated, if greater, it will be\\ncopied with zeros.', '@param len Number of items to replicate. If smaller than the source array\\'s\\nlength, the replicated array will be trimmed, if larger, it will be\\nextended with zeroes.', '@param len Number of values to clone. If less than the length of the\\noriginal array, the cloned array will be shortened, if more, it will be\\nexpanded with zeros.', '@param len Number of elements to reproduce. If smaller than the source\\narray\\'s length, the reproduced array will be sliced, if larger, it will be\\nfilled with zeros.', '@param len The count of entries to be copied. If it is lesser than the size\\nof the source array, the copy will be truncated. If it is greater, it will\\nbe padded with zeros.']},\n   {'tag': '@return the copied array.', 'alternatives': ['@return the duplicated array.', '@return the replicated array.', '@return the cloned array.', '@return the reproduced array.', '@return the copied array object.']}\n]"