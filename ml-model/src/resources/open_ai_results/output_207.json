"output = [\n   {\n     'tag': '@throws MathIllegalStateException if the distribution has not been loaded',\n     'alternatives': [\n       '@throws MathIllegalStateException if the distribution has not been initialized',\n       '@throws MathIllegalStateException if the distribution has not been loaded yet',\n       '@throws MathIllegalStateException if the distribution has not been populated',\n       '@throws MathIllegalStateException if the distribution has not been set up',\n       '@throws MathIllegalStateException if the distribution has not been initialized properly'\n     ]\n   },\n   {\n     'tag': '@return the sample statistics',\n     'alternatives': [\n       '@return the statistics related to the sample',\n       '@return statistics calculated from the sample',\n       '@return the statistical information of the sample',\n       '@return the statistics of the provided sample',\n       '@return the sample's statistical properties'\n     ]\n   },\n   {\n     'tag': '@throws IllegalStateException if the distribution has not been loaded',\n     'alternatives': [\n       '@throws IllegalStateException if the distribution has not been initialized',\n       '@throws IllegalStateException if the distribution has not been loaded yet',\n       '@throws IllegalStateException if the distribution has not been populated',\n       '@throws IllegalStateException if the distribution has not been set up',\n       '@throws IllegalStateException if the distribution has not been initialized properly'\n     ]\n   },\n   {\n     'tag': '@return the number of bins.',\n     'alternatives': [\n       '@return the count of bins.',\n       '@return the quantity of bins.',\n       '@return the total number of bins.',\n       '@return the number of divisions.',\n       '@return the amount of bins.'\n     ]\n   },\n   {\n     'tag': '@return List of bin statistics.',\n     'alternatives': [\n       '@return a list containing the statistics of each bin.',\n       '@return the statistical information for each bin in a list.',\n       '@return a list with the statistics pertaining to each bin.',\n       '@return a list of statistical data for each bin.',\n       '@return a list containing the statistics related to the bins.'\n     ]\n   },\n   {\n     'tag': '@return array of bin upper bounds',\n     'alternatives': [\n       '@return an array holding the upper bounds of each bin',\n       '@return an array that contains the upper limits of every bin',\n       '@return an array of upper boundaries for each bin',\n       '@return an array consisting of the upper limits of the bins',\n       '@return an array containing the highest values for each bin'\n     ]\n   },\n   {\n     'tag': '@return array of upper bounds of subintervals used in data generation',\n     'alternatives': [\n       '@return an array that holds the upper limits of the subintervals used in data generation',\n       '@return an array containing the upper boundaries of the subintervals used in data generation',\n       '@return an array of upper bounds for the subintervals used in data generation',\n       '@return an array consisting of the highest values for the subintervals used in data generation',\n       '@return an array of upper limits for the subintervals used in data generation'\n     ]\n   },\n   {\n     'tag': '@throws NullPointerException unless a {@code load} method has been\\ncalled beforehand.',\n     'alternatives': [\n       '@throws NullPointerException if the {@code load} method has not been called before.',\n       '@throws NullPointerException if the {@code load} method has not been invoked previously.',\n       '@throws NullPointerException if the {@code load} method has not been utilized beforehand.',\n       '@throws NullPointerException in case the {@code load} method has not been called prior.',\n       '@throws NullPointerException unless the {@code load} method has been executed beforehand.'\n     ]\n   },\n   {\n     'tag': '@param d Array of {@code Double}s.',\n     'alternatives': [\n       '@param d Array composed of {@code Double} elements.',\n       '@param d An array containing only {@code Double} values.',\n       '@param d Array consisting exclusively of {@code Double}s.',\n       '@param d Array with elements of type {@code Double}.',\n       '@param d Array of objects of the {@code Double} class.'\n     ]\n   },\n   {\n     'tag': '@param d Array.',\n     'alternatives': [\n       '@param d An array.',\n       '@param d A collection of elements.',\n       '@param d A sequence of values.',\n       '@param d A set of items.',\n       '@param d Any array-like structure.'\n     ]\n   },\n   {\n     'tag': '@param pos Position of first entry.',\n     'alternatives': [\n       '@param pos The index of the initial element.',\n       '@param pos The position of the first item.',\n       '@param pos The starting position of the entry.',\n       '@param pos The offset of the first entry.',\n       '@param pos The location of the initial element.'\n     ]\n   },\n   {\n     'tag': '@param size Number of entries to copy.',\n     'alternatives': [\n       '@param size The amount of entries to duplicate.',\n       '@param size The count of elements to replicate.',\n       '@param size The quantity of items to clone.',\n       '@param size The number of entries to replicate.',\n       '@param size The total number of elements to copy.'\n     ]\n   },\n   {\n     'tag': '@throws NumberIsTooLargeException if the size of {@code d} is less\\nthan {@code pos + size}.',\n     'alternatives': [\n       '@throws NumberIsTooLargeException if the size of {@code d} is smaller than {@code pos + size}.',\n       '@throws NumberIsTooLargeException if the length of {@code d} is less than {@code pos + size}.',\n       '@throws NumberIsTooLargeException if the dimension of {@code d} is smaller than {@code pos + size}.',\n       '@throws NumberIsTooLargeException if the size of {@code d} is inadequate for {@code pos + size}.',\n       '@throws NumberIsTooLargeException if the length of {@code d} is insufficient for {@code pos + size}.'\n     ]\n   },\n   {\n     'tag': '@param v vector to copy.',\n     'alternatives': [\n       '@param v vector to duplicate.',\n       '@param v vector to replicate.',\n       '@param v vector to clone.',\n       '@param v vector to make a copy of.',\n       '@param v vector to be copied.'\n     ]\n   },\n   {\n     'tag': '@param v Vector to copy.',\n     'alternatives': [\n       '@param v Vector to duplicate.',\n       '@param v Vector to replicate.',\n       '@param v Vector to clone.',\n       '@param v Vector to make a copy of.',\n       '@param v Vector to be copied.'\n     ]\n   },\n   {\n     'tag': '@param v Vector to copy.',\n     'alternatives': [\n       '@param v Vector to duplicate.',\n       '@param v Vector to replicate.',\n       '@param v Vector to clone.',\n       '@param v Vector to make a copy of.',\n       '@param v Vector to be copied.'\n     ]\n   },\n   {\n     'tag': '@param deep If {@code true} perform a deep copy, otherwise perform a\\nshallow copy.',\n     'alternatives': [\n       '@param deep If set to {@code true}, execute a deep copy; otherwise, perform a shallow copy.',\n       '@param deep Indicate whether to execute a deep copy or a shallow copy.',\n       '@param deep Specify whether a deep copy or a shallow copy should be performed.',\n       '@param deep Determine if a deep copy or a shallow copy should be performed.',\n       '@param deep Choose between a deep copy or a shallow copy.'\n     ]\n   },\n   {\n     'tag': '@param v1 First vector (will be put in front of the new vector).',\n     'alternatives': [\n       '@param v1 First vector (will be placed at the beginning of the new vector).',\n       '@param v1 First vector (to be positioned in front of the new vector).',\n       '@param v1 First vector (to be added at the start of the new vector).',\n       '@param v1 First vector (to be inserted before the new vector).',\n       '@param v1 First vector (to be placed ahead of the new vector).'\n     ]\n   },\n   {\n     'tag': '@param v2 Second vector (will be put at back of the new vector).',\n     'alternatives': [\n       '@param v2 Second vector (will be placed at the end of the new vector).',\n       '@param v2 Second vector (to be positioned at the rear of the new vector).',\n       '@param v2 Second vector (to be added at the end of the new vector).',\n       '@param v2 Second vector (to be inserted after the new vector).',\n       '@param v2 Second vector (to be placed behind the new vector).'\n     ]\n   },\n   {\n     'tag': '@param v1 First vector (will be put in front of the new vector).',\n     'alternatives': [\n       '@param v1 First vector (will be placed at the beginning of the new vector).',\n       '@param v1 First vector (to be positioned in front of the new vector).',\n       '@param v1 First vector (to be added at the start of the new vector).',\n       '@param v1 First vector (to be inserted before the new vector).',\n       '@param v1 First vector (to be placed ahead of the new vector).'\n     ]\n   },\n   {\n     'tag': '@param v2 Second vector (will be put at back of the new vector).',\n     'alternatives': [\n       '@param v2 Second vector (will be placed at the end of the new vector).',\n       '@param v2 Second vector (to be positioned at the rear of the new vector).',\n       '@param v2 Second vector (to be added at the end of the new vector).',\n       '@param v2 Second vector (to be inserted after the new vector).',\n       '@param v2 Second vector (to be placed behind the new vector).'\n     ]\n   },\n   {\n     'tag': '@param v1 First vector (will be put in front of the new vector).',\n     'alternatives': [\n       '@param v1 First vector (will be placed at the beginning of the new vector).',\n       '@param v1 First vector (to be positioned in front of the new vector).',\n       '@param v1 First vector (to be added at the start of the new vector).',\n       '@param v1 First vector (to be inserted before the new vector).',\n       '@param v1 First vector (to be placed ahead of the new vector).'\n     ]\n   },\n   {\n     'tag': '@param v2 Second vector (will be put at back of the new vector).',\n     'alternatives': [\n       '@param v2 Second vector (will be placed at the end of the new vector).',\n       '@param v2 Second vector (to be positioned at the rear of the new vector).',\n       '@param v2 Second vector (to be added at the end of the new vector).',\n       '@param v2 Second vector (to be inserted after the new vector).',\n       '@param v2 Second vector (to be placed behind the new vector).'\n     ]\n   },\n   {\n     'tag': '@param v1 First vector (will be put in front of the new vector).',\n     'alternatives': [\n       '@param v1 First vector (will be placed at the beginning of the new vector).',\n       '@param v1 First vector (to be positioned in front of the new vector).',\n       '@param v1 First vector (to be added at the start of the new vector).',\n       '@param v1 First vector (to be inserted before the new vector).',\n       '@param v1 First vector (to be placed ahead of the new vector).'\n     ]\n   },\n   {\n     'tag': '@param v2 Second vector (will be put at back of the new vector).',\n     'alternatives': [\n       '@param v2 Second vector (will be placed at the end of the new vector).',\n       '@param v2 Second vector (to be positioned at the rear of the new vector).',\n       '@param v2 Second vector (to be added at the end of the new vector).',\n       '@param v2 Second vector (to be inserted after the new vector).',\n       '@param v2 Second vector (to be placed behind the new vector).'\n     ]\n   }\n ]\n\n"