"output = [\n  {\n    'tag': '@throws MathArithmeticException if the fraction to divide by is zero',\n    'alternatives': [\n      '@throws MathArithmeticException if the fraction to divide by equals zero',\n      '@throws MathArithmeticException if the divisor fraction is zero',\n      '@throws MathArithmeticException if the fraction to be divided by equals zero',\n      '@throws MathArithmeticException when the fraction to divide has a value of zero',\n      '@throws MathArithmeticException if the fraction to be divided by is zero'\n    ]\n  },\n  {\n    'tag': '@param i the {@code int} to divide by',\n    'alternatives': [\n      '@param i divides the {@code int}',\n      '@param i: the integer to be divided',\n      '@param i: the numerator to divide by',\n      '@param i: the divisor integer',\n      '@param i specifies the integer to divide by'\n    ]\n  },\n  {\n    'tag': '@return a {@link BigFraction} instance with the resulting values',\n    'alternatives': [\n      '@return a {@link BigFraction} instance containing the resulting values',\n      '@return an instance of {@link BigFraction} with the resulting values',\n      '@return a new {@link BigFraction} object with the calculated values',\n      '@return a {@link BigFraction} instance that holds the resulting values',\n      '@return a {@link BigFraction} object that contains the resulting values'\n    ]\n  },\n  {\n    'tag': '@return the fraction as a {@code double}',\n    'alternatives': [\n      '@return the fraction represented as a {@code double}',\n      '@return the value of the fraction as a {@code double}',\n      '@return the fraction expressed as a {@code double}',\n      '@return the fraction in the form of a {@code double}',\n      '@return the fraction as a decimal value of type {@code double}'\n    ]\n  },\n  {\n    'tag': '@param l the {@code long} to divide by',\n    'alternatives': [\n      '@param l is the {@code long} divided by',\n      '@param l: the long integer to be divided',\n      '@param l: the numerator to divide by',\n      '@param l: the divisor long',\n      '@param l represents the long value to use for division'\n    ]\n  },\n  {\n    'tag': '@return a {@link BigFraction} instance with the resulting values.',\n    'alternatives': [\n      '@return an instance of {@link BigFraction} with the resulting values.',\n      '@return a new {@link BigFraction} object with the calculated values.',\n      '@return a {@link BigFraction} instance that holds the resulting values.',\n      '@return a {@link BigFraction} object that contains the resulting values.',\n      '@return a {@link BigFraction} instance containing the resulting values.'\n    ]\n  },\n  {\n    'tag': '@param other fraction to test for equality to this fraction, can be\\n           <code>null</code>.',\n    'alternatives': [\n      '@param other the fraction to compare with this fraction, can be\\n           <code>null</code>.',\n      '@param other: fraction to check for equality with this fraction, may be\\n           <code>null</code>.',\n      '@param other: fraction to compare with this fraction, can be\\n           <code>null</code>.',\n      '@param other - the fraction to compare to this fraction, can be\\n           <code>null</code>.',\n      '@param other is the fraction being compared to this fraction, and it can be\\n           <code>null</code>.'\n    ]\n  },\n  {\n    'tag': '@return true if two fractions are equal, false if object is\\n        <code>null</code>, not an instance of {@link BigFraction}, or not\\n        equal to this fraction instance.',\n    'alternatives': [\n      '@return true if two fractions are equal, otherwise return false. The object\\n        must not be null, must be an instance of {@link BigFraction}, and must\\n        be equal to this fraction instance.',\n      '@return true if two fractions are equal and the object is not null, is\\n        an instance of {@link BigFraction}, and is equal to this fraction.',\n      '@return true if two fractions are equal, otherwise return false. The object\\n        must not be null, it should be an instance of {@link BigFraction}, and it\\n        should be equal to this fraction instance.',\n      '@return true if two fractions are equal, false if the object is null, not\\n        an instance of {@link BigFraction}, or not equal to this fraction.',\n      '@return true if two fractions are equal, otherwise return false. The object\\n        cannot be null, must be an instance of {@link BigFraction}, and must\\n        be equal to this fraction instance.'\n    ]\n  },\n  {\n    'tag': '@return the fraction as a {@code float}.',\n    'alternatives': [\n      '@return the fraction represented as a {@code float}.',\n      '@return the value of the fraction as a {@code float}.',\n      '@return the fraction expressed as a {@code float}.',\n      '@return the fraction in the form of a {@code float}.',\n      '@return the fraction as a decimal value of type {@code float}.'\n    ]\n  },\n  {\n    'tag': '@return the denominator as a <code>BigInteger</code>.',\n    'alternatives': [\n      '@return the denominator represented as a <code>BigInteger</code>.',\n      '@return the value of the denominator as a <code>BigInteger</code>.',\n      '@return the denominator expressed as a <code>BigInteger</code>.',\n      '@return the denominator in the form of a <code>BigInteger</code>.',\n      '@return the denominator as a big integer value.'\n    ]\n  },\n  {\n    'tag': '@return the denominator as a {@code int}.',\n    'alternatives': [\n      '@return the denominator represented as an {@code int}.',\n      '@return the value of the denominator as an {@code int}.',\n      '@return the denominator expressed as an {@code int}.',\n      '@return the denominator in the form of an {@code int}.',\n      '@return the denominator as an integer value.'\n    ]\n  },\n  {\n    'tag': '@return the denominator as a {@code long}.',\n    'alternatives': [\n      '@return the denominator represented as a {@code long}.',\n      '@return the value of the denominator as a {@code long}.',\n      '@return the denominator expressed as a {@code long}.',\n      '@return the denominator in the form of a {@code long}.',\n      '@return the denominator as a long integer value.'\n    ]\n  },\n  {\n    'tag': '@return the numerator as a <code>BigInteger</code>.',\n    'alternatives': [\n      '@return the numerator represented as a <code>BigInteger</code>.',\n      '@return the value of the numerator as a <code>BigInteger</code>.',\n      '@return the numerator expressed as a <code>BigInteger</code>.',\n      '@return the numerator in the form of a <code>BigInteger</code>.',\n      '@return the numerator as a big integer value.'\n    ]\n  },\n  {\n    'tag': '@return the numerator as a {@code int}.',\n    'alternatives': [\n      '@return the numerator represented as an {@code int}.',\n      '@return the value of the numerator as an {@code int}.',\n      '@return the numerator expressed as an {@code int}.',\n      '@return the numerator in the form of an {@code int}.',\n      '@return the numerator as an integer value.'\n    ]\n  },\n  {\n    'tag': '@return the numerator as a {@code long}.',\n    'alternatives': [\n      '@return the numerator represented as a {@code long}.',\n      '@return the value of the numerator as a {@code long}.',\n      '@return the numerator expressed as a {@code long}.',\n      '@return the numerator in the form of a {@code long}.',\n      '@return the numerator as a long integer value.'\n    ]\n  },\n  {\n    'tag': '@return a hash code value for this object.',\n    'alternatives': [\n      '@return the hash code value for this object.',\n      '@return the calculated hash code for this object.',\n      '@return the hash value of this object.',\n      '@return the hash code for this object.',\n      '@return the generated hash code for this object.'\n    ]\n  },\n  {\n    'tag': '@return the whole number fraction part.',\n    'alternatives': [\n      '@return the fraction part represented as a whole number.',\n      '@return the integer part of the fraction.',\n      '@return the whole number part of the fraction.',\n      '@return the fraction part as a whole number.',\n      '@return the integer fraction component.'\n    ]\n  },\n  {\n    'tag': '@param bg the {@code BigInteger} to multiply by.',\n    'alternatives': [\n      '@param bg multiplies the {@code BigInteger} with.',\n      '@param bg: the big integer to be multiplied',\n      '@param bg: the factor big integer',\n      '@param bg: the big integer multiplier',\n      '@param bg specifies the big integer to multiply by.'\n    ]\n  },\n  {\n    'tag': '@return a {@code BigFraction} instance with the resulting values.',\n    'alternatives': [\n      '@return an instance of {@code BigFraction} with the resulting values.',\n      '@return a new {@code BigFraction} object with the calculated values.',\n      '@return a {@code BigFraction} instance that holds the resulting values.',\n      '@return a {@code BigFraction} object that contains the resulting values.',\n      '@return a {@code BigFraction} instance containing the resulting values.'\n    ]\n  },\n  {\n    'tag': '@param i the {@code int} to multiply by.',\n    'alternatives': [\n      '@param i multiplies the {@code int} with.',\n      '@param i: the integer to be multiplied',\n      '@param i: the factor integer',\n      '@param i: the integer multiplier',\n      '@param i specifies the integer to multiply by.'\n    ]\n  }\n]"