"output = [\n  {\n    'tag': '@throws DimensionMismatchException if arrays dimensions do not match equations settings',\n    'alternatives': [\n      '@throws DimensionMismatchException if the size of the arrays does not correspond to the equations settings',\n      '@throws DimensionMismatchException if the dimensions of the arrays do not align with the equations settings',\n      '@throws DimensionMismatchException if the dimensions of the arrays do not match the equations settings',\n      '@throws DimensionMismatchException if the arrays sizes do not match the equations settings',\n      '@throws DimensionMismatchException if the dimensions of the arrays are not compatible with the equations settings'\n    ]\n  },\n  {\n    'tag': '@param secondary secondary equations set',\n    'alternatives': [\n      '@param secondary set of secondary equations',\n      '@param secondary set of equations',\n      '@param secondary equations group',\n      '@param secondary system of equations',\n      '@param secondary equations collection'\n    ]\n  },\n  {\n    'tag': '@return index of the secondary equation in the expanded state',\n    'alternatives': [\n      '@return index of the expanded state corresponding to the secondary equation',\n      '@return index of the secondary equation within the expanded state',\n      '@return expanded state index for the secondary equation',\n      '@return expanded state position of the secondary equation',\n      '@return index of the secondary equation within the state expansion'\n    ]\n  },\n  {\n    'tag': '@return mapper for the primary set',\n    'alternatives': [\n      '@return mapping function for the primary set',\n      '@return primary set mapper',\n      '@return primary set mapping',\n      '@return mapper for the primary collection',\n      '@return primary set function mapper'\n    ]\n  },\n  {\n    'tag': '@return equations mappers for the secondary equations sets',\n    'alternatives': [\n      '@return mappers for the secondary equations group',\n      '@return mapping functions for the secondary equations sets',\n      '@return secondary equations sets mappers',\n      '@return mappers for the secondary equations collections',\n      '@return mapping functions for the secondary equations systems'\n    ]\n  },\n  {\n    'tag': '@param time current time',\n    'alternatives': [\n      '@param time the present time',\n      '@param time representing the current moment',\n      '@param time at the current point',\n      '@param time value for the current instant',\n      '@param current time value'\n    ]\n  },\n  {\n    'tag': '@return current time',\n    'alternatives': [\n      '@return the current time',\n      '@return the present time',\n      '@return time at the present moment',\n      '@return time for the current instant',\n      '@return time value at the current point'\n    ]\n  },\n  {\n    'tag': '@param primaryState primary part of the current state',\n    'alternatives': [\n      '@param primaryState main component of the current state',\n      '@param primaryState primary portion of the current state',\n      '@param primaryState representing the main part of the state',\n      '@param primaryState primary state component',\n      '@param primaryState corresponding to the primary state part'\n    ]\n  },\n  {\n    'tag': '@throws DimensionMismatchException if the dimension of the array does not\\nmatch the primary set',\n    'alternatives': [\n      '@throws DimensionMismatchException if the size of the array does not match the primary set',\n      '@throws DimensionMismatchException if the dimensions of the array do not correspond to the primary set',\n      '@throws DimensionMismatchException if the array dimension is incompatible with the primary set',\n      '@throws DimensionMismatchException if the array size does not align with the primary set',\n      '@throws DimensionMismatchException if the array's dimension does not match the primary set'\n    ]\n  },\n  {\n    'tag': '@return primary part of the current state',\n    'alternatives': [\n      '@return the primary component of the current state',\n      '@return main section of the current state',\n      '@return the primary part of the state',\n      '@return the primary state portion',\n      '@return the primary part in the current state'\n    ]\n  },\n  {\n    'tag': '@return primary part of the current state derivative',\n    'alternatives': [\n      '@return derivative of the primary part of the current state',\n      '@return derivative of the primary component of the state',\n      '@return rate of change for the primary portion of the state',\n      '@return derivative of the main section of the current state',\n      '@return primary state part derivative'\n    ]\n  },\n  {\n    'tag': '@param index index of the part to set as returned by {@link\\n#addSecondaryEquations(SecondaryEquations)}',\n    'alternatives': [\n      '@param index the position of the part to set as obtained from the {@link\\n#addSecondaryEquations(SecondaryEquations)}',\n      '@param index of the part that will be set based on {@link\\n#addSecondaryEquations(SecondaryEquations)}',\n      '@param index of the part to be assigned as returned by {@link\\n#addSecondaryEquations(SecondaryEquations)}',\n      '@param index indicating the part to set as per {@link\\n#addSecondaryEquations(SecondaryEquations)}',\n      '@param index of the part that should be set using {@link\\n#addSecondaryEquations(SecondaryEquations)}'\n    ]\n  },\n  {\n    'tag': '@param secondaryState secondary part of the current state',\n    'alternatives': [\n      '@param secondaryState additional component in the current state',\n      '@param secondaryState subsection of the current state',\n      '@param secondaryState representing the secondary part of the state',\n      '@param secondaryState representing the supplementary state part',\n      '@param secondaryState portion within the current state'\n    ]\n  },\n  {\n    'tag': '@throws DimensionMismatchException if the dimension of the partial state does not\\nmatch the selected equations set dimension',\n    'alternatives': [\n      '@throws DimensionMismatchException if the dimension of the partial state does not correspond to the dimension of the selected equations set',\n      '@throws DimensionMismatchException if the dimensions of the partial state do not align with the dimension of the selected equations set',\n      '@throws DimensionMismatchException if the dimension of the partial state is not compatible with the dimension of the selected equations set',\n      '@throws DimensionMismatchException if the dimension of the partial state does not match the dimension of the selected equations set',\n      '@throws DimensionMismatchException if the dimensions of the partial state are not in agreement with the dimension of the selected equations set'\n    ]\n  },\n  {\n    'tag': '@return secondary part of the current state',\n    'alternatives': [\n      '@return supplementary component of the current state',\n      '@return additional section of the current state',\n      '@return the secondary section of the state',\n      '@return the auxiliary part of the current state',\n      '@return the secondary part within the current state'\n    ]\n  },\n  {\n    'tag': '@param index index of the part to set as returned by {@link\\n#addSecondaryEquations(SecondaryEquations)}',\n    'alternatives': [\n      '@param index the position of the part to set as obtained from the {@link\\n#addSecondaryEquations(SecondaryEquations)}',\n      '@param index of the part that will be set based on {@link\\n#addSecondaryEquations(SecondaryEquations)}',\n      '@param index of the part to be assigned as returned by {@link\\n#addSecondaryEquations(SecondaryEquations)}',\n      '@param index indicating the part to set as per {@link\\n#addSecondaryEquations(SecondaryEquations)}',\n      '@param index of the part that should be set using {@link\\n#addSecondaryEquations(SecondaryEquations)}'\n    ]\n  },\n  {\n    'tag': '@return secondary part of the current state derivative',\n    'alternatives': [\n      '@return derivative of the secondary part of the current state',\n      '@return derivative of the auxiliary component of the state',\n      '@return rate of change for the supplementary portion of the state',\n      '@return derivative of the additional section of the current state',\n      '@return derivative of the secondary state part'\n    ]\n  },\n  {\n    'tag': '@param completeState complete current state to copy data from',\n    'alternatives': [\n      '@param completeState the entire current state for data copying',\n      '@param completeState the full snapshot of the current state to duplicate from',\n      '@param completeState representing the comprehensive current state to clone from',\n      '@param completeState full representation of the current state for data replication',\n      '@param completeState encompassing the complete current state for data mirroring'\n    ]\n  },\n  {\n    'tag': '@throws DimensionMismatchException if the dimension of the complete state does not\\nmatch the complete equations sets dimension',\n    'alternatives': [\n      '@throws DimensionMismatchException if the dimension of the complete state is not aligned with the dimension of the complete equations sets',\n      '@throws DimensionMismatchException if the dimensions of the complete state do not correspond to the dimension of the complete equations sets',\n      '@throws DimensionMismatchException if the dimension of the complete state is not compatible with the dimension of the complete equations sets',\n      '@throws DimensionMismatchException if the dimension of the complete state does not match the dimension of the complete equations sets',\n      '@throws DimensionMismatchException if the dimensions of the complete state are not in agreement with the dimension of the complete equations sets'\n    ]\n  },\n  {\n    'tag': '@return complete current state',\n    'alternatives': [\n      '@return the full current state',\n      '@return the entire present state',\n      '@return the complete state at the moment',\n      '@return the total current state',\n      '@return the state in its entirety'\n    ]\n  },\n  {\n    'tag': '@throws DimensionMismatchException if the dimension of the complete state does not\\nmatch the complete equations sets dimension',\n    'alternatives': [\n      '@throws DimensionMismatchException if the dimension of the complete state is not aligned with the dimension of the complete equations sets',\n      '@throws DimensionMismatchException if the dimensions of the complete state do not correspond to the dimension of the complete equations sets',\n      '@throws DimensionMismatchException if the dimension of the complete state is not compatible with the dimension of the complete equations sets',\n      '@throws DimensionMismatchException if the dimension of the complete state does not match the dimension of the complete equations sets',\n      '@throws DimensionMismatchException if the dimensions of the complete state are not in agreement with the dimension of the complete equations sets'\n    ]\n  },\n  {\n    'tag': '@param primary the primary set of differential equations to be integrated.',\n    'alternatives': [\n      '@param primary the main set of differential equations to be integrated.',\n      '@param primary the principal differential equations set to be integrated.',\n      '@param primary the leading set of differential equations to be integrated.',\n      '@param primary the primary set of differential equations for integration.',\n      '@param primary the initial set of differential equations to be integrated.'\n    ]\n  },\n  {\n    'tag': '@return starter integrator',\n    'alternatives': [\n      '@return the initial integrator',\n      '@return the starting integrator',\n      '@return integrator for the beginning',\n      '@return integrator used for starting',\n      '@return integrator to start with'\n    ]\n  },\n  {\n    'tag': '@param starterIntegrator starter integrator',\n    'alternatives': [\n      '@param starterIntegrator initial integrator',\n      '@param starterIntegrator starting integrator',\n      '@param starterIntegrator for the beginning',\n      '@param starterIntegrator used for starting',\n      '@param starterIntegrator to start with'\n    ]\n  }\n]"