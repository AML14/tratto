"output = [\n  {\n    'tag': '@param work data array',\n    'alternatives': [\n      '@param work array of data',\n      '@param data array to work with',\n      '@param array of data to work on',\n      '@param work data structure',\n      '@param array containing the data'\n    ]\n  },\n  {\n    'tag': '@param begin index of the first element of the slice',\n    'alternatives': [\n      '@param begin index of the slice starting element',\n      '@param index of the slice initial element',\n      '@param starting index of the slice',\n      '@param index of the first element included in the slice',\n      '@param index indicating the beginning of the slice'\n    ]\n  },\n  {\n    'tag': '@param end index after the last element of the slice',\n    'alternatives': [\n      '@param end index of the slice ending element',\n      '@param index of the slice final element',\n      '@param index of the last element included in the slice',\n      '@param index indicating the end of the slice',\n      '@param index one element after the last included in the slice'\n    ]\n  },\n  {\n    'tag': '@return the index of the median element chosen between the\\nfirst, the middle and the last element of the array slice',\n    'alternatives': [\n      '@return the index of the median element selected among the first, middle, and last elements of the array slice',\n      '@return index of median element picked from the first, middle, and last elements in the array slice',\n      '@return index of the median element found by choosing from the first, middle, and last elements of the array slice',\n      '@return index of the median element determined by selecting from the first, middle, and last elements of the array slice',\n      '@return index of the median element obtained from the first, middle, and last elements of the array slice'\n    ]\n  },\n  {\n    'tag': '@return quantile set while construction or {@link #setQuantile(double)}',\n    'alternatives': [\n      '@return quantile set during construction or {@link #setQuantile(double)}',\n      '@return quantile set while building or {@link #setQuantile(double)}',\n      '@return quantile set during creation or {@link #setQuantile(double)}',\n      '@return quantile set generated during construction or {@link #setQuantile(double)}',\n      '@return quantile set obtained while constructing or {@link #setQuantile(double)}'\n    ]\n  },\n  {\n    'tag': '@param p a value between 0 < p <= 100',\n    'alternatives': [\n      '@param p a value where 0 < p <= 100',\n      '@param p a value in the range 0 < p <= 100',\n      '@param p a value ranging from 0 < p <= 100',\n      '@param p a value within 0 < p <= 100',\n      '@param p a value that satisfies 0 < p <= 100'\n    ]\n  },\n  {\n    'tag': '@param source Percentile to copy',\n    'alternatives': [\n      '@param source Percentile object to duplicate',\n      '@param source Percentile instance to replicate',\n      '@param source Percentile object to be copied',\n      '@param source Percentile instance for copying',\n      '@param source Percentile to be cloned'\n    ]\n  },\n  {\n    'tag': '@param dest Percentile to copy to',\n    'alternatives': [\n      '@param dest Percentile object to copy to',\n      '@param dest Percentile instance to duplicate to',\n      '@param dest Percentile to copy into',\n      '@param dest Percentile instance for copying to',\n      '@param dest Percentile to be filled with copy'\n    ]\n  },\n  {\n    'tag': '@throws MathUnsupportedOperationException always thrown since 3.4',\n    'alternatives': [\n      '@throws MathUnsupportedOperationException always raised since 3.4',\n      '@throws MathUnsupportedOperationException always generated since 3.4',\n      '@throws MathUnsupportedOperationException always triggered since 3.4',\n      '@throws MathUnsupportedOperationException always occurred since 3.4',\n      '@throws MathUnsupportedOperationException always happens since 3.4'\n    ]\n  },\n  {\n    'tag': '@param values the array of numbers',\n    'alternatives': [\n      '@param values the number array',\n      '@param values array containing numbers',\n      '@param values array of numeric values',\n      '@param values numeric array',\n      '@param values array holding numeric data'\n    ]\n  },\n  {\n    'tag': '@param begin index to start reading the array',\n    'alternatives': [\n      '@param begin index from which to start reading the array',\n      '@param begin index indicating where to start reading the array',\n      '@param begin index of the array where reading starts',\n      '@param begin index for reading the array',\n      '@param begin index used to begin reading the array'\n    ]\n  },\n  {\n    'tag': '@param length the length of array to be read from the begin index',\n    'alternatives': [\n      '@param length the size of the array to read from the begin index',\n      '@param length the number of elements to read from the array starting at the begin index',\n      '@param length the amount of elements to extract from the array starting at the begin index',\n      '@param length the count of elements to be read from the array beginning at the begin index',\n      '@param length the quantity of elements to be read from the array starting at the begin index'\n    ]\n  },\n  {\n    'tag': '@return work array sliced from values in the range [begin,begin+length)',\n    'alternatives': [\n      '@return portion of work array obtained by slicing values in the range [begin,begin+length)',\n      '@return slice of work array generated from values within the range [begin,begin+length)',\n      '@return a subsection of work array derived by slicing values within the range [begin,begin+length)',\n      '@return work array segment obtained by slicing values in the range [begin,begin+length)',\n      '@return a part of work array obtained from values within the range [begin,begin+length)'\n    ]\n  },\n  {\n    'tag': '@throws MathIllegalArgumentException if values or indices are invalid',\n    'alternatives': [\n      '@throws MathIllegalArgumentException if invalid values or indices are provided',\n      '@throws MathIllegalArgumentException if the values or indices given are invalid',\n      '@throws MathIllegalArgumentException if the provided values or indices are not valid',\n      '@throws MathIllegalArgumentException if the values or indices are considered invalid',\n      '@throws MathIllegalArgumentException if the given values or indices are deemed invalid'\n    ]\n  },\n  {\n    'tag': '@param values the input array',\n    'alternatives': [\n      '@param values the array input',\n      '@param values input array',\n      '@param input array values',\n      '@param values array as input',\n      '@param values provided array'\n    ]\n  },\n  {\n    'tag': '@param begin start index of the array to include',\n    'alternatives': [\n      '@param begin starting index of the array to incorporate',\n      '@param begin initial index of the array to include',\n      '@param begin index where the array inclusion starts',\n      '@param begin index from which to include the array',\n      '@param begin index used to start including the array'\n    ]\n  },\n  {\n    'tag': '@param length number of elements to include from begin',\n    'alternatives': [\n      '@param length count of elements to be included from begin',\n      '@param length quantity of elements to be included from the begin index',\n      '@param length the amount of elements to include starting from begin index',\n      '@param length the number of elements to incorporate from the begin index',\n      '@param length the size of the section to include from the begin index'\n    ]\n  },\n  {\n    'tag': '@return copy of a slice of the original array',\n    'alternatives': [\n      '@return duplicate of a portion of the original array',\n      '@return replica of a section of the original array',\n      '@return clone of a fragment of the original array',\n      '@return exact copy of a subset of the original array',\n      '@return reproduction of a segment of the original array'\n    ]\n  },\n  {\n    'tag': '@param values the input array',\n    'alternatives': [\n      '@param values the array input',\n      '@param values input array',\n      '@param array input values',\n      '@param values array as input',\n      '@param values provided array'\n    ]\n  },\n  {\n    'tag': '@param begin start index of the array to include',\n    'alternatives': [\n      '@param begin starting index of the array to incorporate',\n      '@param begin initial index of the array to include',\n      '@param begin index where the array inclusion starts',\n      '@param begin index from which to include the array',\n      '@param begin index used to start including the array'\n    ]\n  },\n  {\n    'tag': '@param length number of elements to include from begin',\n    'alternatives': [\n      '@param length count of elements to be included from begin',\n      '@param length quantity of elements to be included from the begin index',\n      '@param length the amount of elements to include starting from begin index',\n      '@param length the number of elements to incorporate from the begin index',\n      '@param length the size of the section to include from the begin index'\n    ]\n  },\n  {\n    'tag': '@param original the value to be replaced with',\n    'alternatives': [\n      '@param original the value to be substituted by',\n      '@param original the value to be exchanged with',\n      '@param original the value to replace',\n      '@param original the value to be swapped with',\n      '@param original the value to be changed to'\n    ]\n  },\n  {\n    'tag': '@param replacement the value to be used for replacement',\n    'alternatives': [\n      '@param replacement the value to replace with',\n      '@param replacement the value to substitute with',\n      '@param replacement the value to be put in place',\n      '@param replacement the value to be inserted instead',\n      '@param replacement the value to be used in exchange'\n    ]\n  },\n  {\n    'tag': '@return the copy of sliced array with replaced values',\n    'alternatives': [\n      '@return copied array slice with replaced values',\n      '@return array slice copy with substituted values',\n      '@return slice of array with replaced values, duplicated',\n      '@return array subset with replaced values, cloned',\n      '@return a copy of array slice with substituted values'\n    ]\n  },\n  {\n    'tag': '@param values the input array',\n    'alternatives': [\n      '@param values the array input',\n      '@param values input array',\n      '@param input array values',\n      '@param values array as input',\n      '@param values provided array'\n    ]\n  }\n]"