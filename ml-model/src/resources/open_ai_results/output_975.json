"output=[\n  {\n    \"tag\": \"@param mContext Precision setting for computing the quadrature rules.\",\n    \"alternatives\": [\n      \"@param mContext Precision setting used to calculate the quadrature rules.\",\n      \"@param mContext Precision level for calculating the quadrature rules.\",\n      \"@param mContext The precision value used in the computation of the quadrature rules.\",\n      \"@param mContext The precision required for computing the quadrature rules.\",\n      \"@param mContext The level of precision utilized for the computation of the quadrature rules.\"\n    ]\n  },\n  {\n    \"tag\": \"@param points Integration points.\",\n    \"alternatives\": [\n      \"@param points Points used for integration.\",\n      \"@param points Points for integrating.\",\n      \"@param points Points used in the integration process.\",\n      \"@param points Points to be integrated.\",\n      \"@param points Points of integration.\"\n    ]\n  },\n  {\n    \"tag\": \"@param weights Weights of the corresponding integration nodes.\",\n    \"alternatives\": [\n      \"@param weights Corresponding weights for the integration nodes.\",\n      \"@param weights Weights assigned to the integration nodes.\",\n      \"@param weights Weights for the integration nodes.\",\n      \"@param weights Weights associated with the integration nodes.\",\n      \"@param weights The weights that correspond to the integration nodes.\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NonMonotonicSequenceException if the {@code points} are not\\nsorted in increasing order.\",\n    \"alternatives\": [\n      \"@throws NonMonotonicSequenceException if the order of the {@code points} is not\\nincreasingly sorted.\",\n      \"@throws NonMonotonicSequenceException if the {@code points} are not arranged\\nin ascending order.\",\n      \"@throws NonMonotonicSequenceException if the {@code points} are not sorted\\nin increasing order.\",\n      \"@throws NonMonotonicSequenceException if the {@code points} do not follow\\nan increasing order.\",\n      \"@throws NonMonotonicSequenceException if the {@code points} are not ordered\\nin increasing manner.\"\n    ]\n  },\n  {\n    \"tag\": \"@throws DimensionMismatchException if points and weights don't have the same length\",\n    \"alternatives\": [\n      \"@throws DimensionMismatchException if the length of points does not match\\nthe length of weights.\",\n      \"@throws DimensionMismatchException if the sizes of points and weights differ.\",\n      \"@throws DimensionMismatchException if the number of elements in points does\\nnot equal the number of elements in weights.\",\n      \"@throws DimensionMismatchException if the lengths of points and weights\\nare not equal.\",\n      \"@throws DimensionMismatchException if the point and weight arrays have\\ndifferent lengths.\"\n    ]\n  },\n  {\n    \"tag\": \"@param pointsAndWeights Integration points and corresponding weights.\",\n    \"alternatives\": [\n      \"@param pointsAndWeights Pairs of integration points and their corresponding weights.\",\n      \"@param pointsAndWeights Points and weights used for integration.\",\n      \"@param pointsAndWeights Points and corresponding weights for integration.\",\n      \"@param pointsAndWeights Integration points combined with their associated weights.\",\n      \"@param pointsAndWeights Tuple of integration points and corresponding weights.\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NonMonotonicSequenceException if the {@code points} are not\\nsorted in increasing order.\",\n    \"alternatives\": [\n      \"@throws NonMonotonicSequenceException if the order of the {@code points} is not\\nincreasingly sorted.\",\n      \"@throws NonMonotonicSequenceException if the {@code points} are not arranged\\nin ascending order.\",\n      \"@throws NonMonotonicSequenceException if the {@code points} are not sorted\\nin increasing order.\",\n      \"@throws NonMonotonicSequenceException if the {@code points} do not follow\\nan increasing order.\",\n      \"@throws NonMonotonicSequenceException if the {@code points} are not ordered\\nin increasing manner.\"\n    ]\n  },\n  {\n    \"tag\": \"@param f Function to integrate.\",\n    \"alternatives\": [\n      \"@param f Function for integration.\",\n      \"@param f The function to be integrated.\",\n      \"@param f The function that needs to be integrated.\",\n      \"@param f The integration function.\",\n      \"@param f The function that requires integration.\"\n    ]\n  },\n  {\n    \"tag\": \"@return the integral of the weighted function.\",\n    \"alternatives\": [\n      \"@return the integration result of the weighted function.\",\n      \"@return the result of integrating the weighted function.\",\n      \"@return the outcome of the integration process for the weighted function.\",\n      \"@return the value obtained by integrating the weighted function.\",\n      \"@return the output generated by the integration of the weighted function.\"\n    ]\n  },\n  {\n    \"tag\": \"@return the order of the integration rule (the number of integration\\npoints).\",\n    \"alternatives\": [\n      \"@return the integration rule order (i.e., the number of integration\\npoints).\",\n      \"@return the number of integration points involved in the integration\\nrule.\",\n      \"@return the count of integration points forming the integration rule.\",\n      \"@return the total number of integration points for this integration\\nrule.\",\n      \"@return the quantity representing the number of integration points used\\nin the integration rule.\"\n    ]\n  },\n  {\n    \"tag\": \"@param index index of the integration point\",\n    \"alternatives\": [\n      \"@param index The index of the point to be integrated.\",\n      \"@param index The index representing the integration point.\",\n      \"@param index The position of the integration point.\",\n      \"@param index The numerical identifier of the integration point.\",\n      \"@param index The unique number of the integration point.\"\n    ]\n  },\n  {\n    \"tag\": \"@return the integration point.\",\n    \"alternatives\": [\n      \"@return the point of integration.\",\n      \"@return the point at which integration occurs.\",\n      \"@return the specific point used for integration.\",\n      \"@return the value denoting the integration point.\",\n      \"@return the result indicating the integration point.\"\n    ]\n  },\n  {\n    \"tag\": \"@param index index of the integration point\",\n    \"alternatives\": [\n      \"@param index The index of the point to be integrated.\",\n      \"@param index The index representing the integration point.\",\n      \"@param index The position of the integration point.\",\n      \"@param index The numerical identifier of the integration point.\",\n      \"@param index The unique number of the integration point.\"\n    ]\n  },\n  {\n    \"tag\": \"@return the weight.\",\n    \"alternatives\": [\n      \"@return the integration weight.\",\n      \"@return the weight assigned during integration.\",\n      \"@return the specific weight used in the integration.\",\n      \"@return the value denoting the weight of integration.\",\n      \"@return the result indicating the weight used for integration.\"\n    ]\n  },\n  {\n    \"tag\": \"@param points Integration points.\",\n    \"alternatives\": [\n      \"@param points Points used for integration.\",\n      \"@param points Points for integrating.\",\n      \"@param points Points used in the integration process.\",\n      \"@param points Points to be integrated.\",\n      \"@param points Points of integration.\"\n    ]\n  },\n  {\n    \"tag\": \"@param weights Weights of the corresponding integration nodes.\",\n    \"alternatives\": [\n      \"@param weights Corresponding weights for the integration nodes.\",\n      \"@param weights Weights assigned to the integration nodes.\",\n      \"@param weights Weights for the integration nodes.\",\n      \"@param weights Weights associated with the integration nodes.\",\n      \"@param weights The weights that correspond to the integration nodes.\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NonMonotonicSequenceException if the {@code points} are not\\nsorted in increasing order.\",\n    \"alternatives\": [\n      \"@throws NonMonotonicSequenceException if the order of the {@code points} is not\\nincreasingly sorted.\",\n      \"@throws NonMonotonicSequenceException if the {@code points} are not arranged\\nin ascending order.\",\n      \"@throws NonMonotonicSequenceException if the {@code points} are not sorted\\nin increasing order.\",\n      \"@throws NonMonotonicSequenceException if the {@code points} do not follow\\nan increasing order.\",\n      \"@throws NonMonotonicSequenceException if the {@code points} are not ordered\\nin increasing manner.\"\n    ]\n  },\n  {\n    \"tag\": \"@throws MaxCountExceededException if the number of iterations\\nexceeds the allowed maximum number\",\n    \"alternatives\": [\n      \"@throws MaxCountExceededException if the maximum allowed number of\\niterations is surpassed.\",\n      \"@throws MaxCountExceededException if the iteration count exceeds the\\npermissible maximum.\",\n      \"@throws MaxCountExceededException if the number of iterations exceeds\\nthe maximum limit.\",\n      \"@throws MaxCountExceededException if the iteration count surpasses the\\nallowed maximum.\",\n      \"@throws MaxCountExceededException if the number of iterations goes\\nbeyond the permissible limit.\"\n    ]\n  },\n  {\n    \"tag\": \"@return the lower bound.\",\n    \"alternatives\": [\n      \"@return the smallest value.\",\n      \"@return the minimum result.\",\n      \"@return the value indicating the lower limit.\",\n      \"@return the outcome giving the minimum bound.\",\n      \"@return the result denoting the smallest possible value.\"\n    ]\n  },\n  {\n    \"tag\": \"@return the upper bound.\",\n    \"alternatives\": [\n      \"@return the largest value.\",\n      \"@return the maximum result.\",\n      \"@return the value indicating the upper limit.\",\n      \"@return the outcome giving the maximum bound.\",\n      \"@return the result denoting the largest possible value.\"\n    ]\n  },\n  {\n    \"tag\": \"@param point Point at which the objective function must be evaluated.\",\n    \"alternatives\": [\n      \"@param point The point at which the objective function needs to be\\ncomputed.\",\n      \"@param point The location where the objective function is to be evaluated.\",\n      \"@param point The specific point for evaluating the objective function.\",\n      \"@param point The position at which the objective function should be\\nevaluated.\",\n      \"@param point The coordinate for which the objective function is\\nassessed.\"\n    ]\n  },\n  {\n    \"tag\": \"@return the objective function value at specified point.\",\n    \"alternatives\": [\n      \"@return the value of the objective function at the given point.\",\n      \"@return the outcome of evaluating the objective function at the\\nspecified point.\",\n      \"@return the result obtained by computing the objective function at the\\ngiven point.\",\n      \"@return the output indicating the objective function value at the\\ndefined point.\",\n      \"@return the numerical value representing the objective function\\ncomputed at the indicated point.\"\n    ]\n  }\n]"