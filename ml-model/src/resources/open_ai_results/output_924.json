"output = [\n  {\n    'tag': '@param event event to post.',\n    'alternatives': [\n      '@param event the event to post.',\n      '@param event the event that should be posted.',\n      '@param event the event that will be posted.',\n      '@param event the event to be posted.',\n      '@param event the event that needs to be posted.'\n    ]\n  },\n  {\n    'tag': '@param identifier a brief name for this bus, for logging purposes.  Should\\n                   be a valid Java identifier.',\n    'alternatives': [\n      '@param identifier a short name for this bus, which will be used for logging. It\\n                   must be a valid Java identifier.',\n      '@param identifier a concise name for this bus, used for logging. It should be\\n                   a valid Java identifier.',\n      '@param identifier a brief name for this bus, intended for logging purposes. The\\n                   name must be a valid Java identifier.',\n      '@param identifier a short name for this bus, used for logging purposes. It must\\n                   be a valid Java identifier.',\n      '@param identifier a concise name for this bus, for logging purposes. It should\\n                   be a valid Java identifier.'\n    ]\n  },\n  {\n    'tag': '@return bytes in the string, or null',\n    'alternatives': [\n      '@return the number of bytes in the string, or null',\n      '@return the count of bytes in the string, or null',\n      '@return the size of the string in bytes, or null',\n      '@return the length of the string in bytes, or null',\n      '@return the byte count of the string, or null'\n    ]\n  },\n  {\n    'tag': '@param s the String for which to count bytes',\n    'alternatives': [\n      '@param s the String to calculate the byte count for',\n      '@param s the String to count the number of bytes',\n      '@param s the String for which to determine the byte count',\n      '@param s the String for calculating the byte count',\n      '@param s the String to be used in byte count calculation'\n    ]\n  },\n  {\n    'tag': '@param c a character',\n    'alternatives': [\n      '@param c an individual character',\n      '@param c a single character',\n      '@param c one character',\n      '@param c a specific character',\n      '@param c a char'\n    ]\n  },\n  {\n    'tag': '@return number of bytes used to represent c',\n    'alternatives': [\n      '@return the byte count of c',\n      '@return the number of bytes needed for representation of c',\n      '@return the count of bytes used to represent c',\n      '@return the size of c in bytes',\n      '@return the number of bytes required to represent c'\n    ]\n  },\n  {\n    'tag': '@return number of bytes printed so far',\n    'alternatives': [\n      '@return the total number of bytes printed up to now',\n      '@return the count of bytes that have been printed until now',\n      '@return the number of bytes that have already been printed',\n      '@return the sum of bytes printed up to this point',\n      '@return the byte count that has been printed so far'\n    ]\n  },\n  {\n    'tag': '@return number of bytes written so far',\n    'alternatives': [\n      '@return the total number of bytes written up to now',\n      '@return the count of bytes that have been written until now',\n      '@return the number of bytes that have already been written',\n      '@return the sum of bytes written up to this point',\n      '@return the byte count that has been written so far'\n    ]\n  },\n  {\n    'tag': '@return number of characters printed so far',\n    'alternatives': [\n      '@return the total number of characters printed up to now',\n      '@return the count of characters that have been printed until now',\n      '@return the number of characters that have already been printed',\n      '@return the sum of characters printed up to this point',\n      '@return the character count that has been printed so far'\n    ]\n  },\n  {\n    'tag': '@param s the string to be printed, or null',\n    'alternatives': [\n      '@param s the string that should be printed, or null',\n      '@param s the string that will be printed, or null',\n      '@param s the string to print, or null',\n      '@param s the string to be outputted, or null',\n      '@param s the string to be displayed, or null'\n    ]\n  },\n  {\n    'tag': '@param b the boolean to be printed',\n    'alternatives': [\n      '@param b the boolean that should be printed',\n      '@param b the boolean that will be printed',\n      '@param b the boolean to print',\n      '@param b the boolean value to be outputted',\n      '@param b the boolean to be displayed'\n    ]\n  },\n  {\n    'tag': '@param c the char to be printed',\n    'alternatives': [\n      '@param c the char that should be printed',\n      '@param c the char that will be printed',\n      '@param c the char to print',\n      '@param c the character to be outputted',\n      '@param c the character to be displayed'\n    ]\n  },\n  {\n    'tag': '@param s the char[] to be printed',\n    'alternatives': [\n      '@param s the char[] that should be printed',\n      '@param s the char[] that will be printed',\n      '@param s the char[] to print',\n      '@param s the character array to be outputted',\n      '@param s the character array to be displayed'\n    ]\n  },\n  {\n    'tag': '@param d the double to be printed',\n    'alternatives': [\n      '@param d the double that should be printed',\n      '@param d the double that will be printed',\n      '@param d the double to print',\n      '@param d the value of double to be outputted',\n      '@param d the double to be displayed'\n    ]\n  },\n  {\n    'tag': '@param f the float to be printed',\n    'alternatives': [\n      '@param f the float that should be printed',\n      '@param f the float that will be printed',\n      '@param f the float to print',\n      '@param f the value of float to be outputted',\n      '@param f the float to be displayed'\n    ]\n  },\n  {\n    'tag': '@param i the int to be printed',\n    'alternatives': [\n      '@param i the int that should be printed',\n      '@param i the int that will be printed',\n      '@param i the int to print',\n      '@param i the value of int to be outputted',\n      '@param i the int to be displayed'\n    ]\n  },\n  {\n    'tag': '@param l the long to be printed',\n    'alternatives': [\n      '@param l the long that should be printed',\n      '@param l the long that will be printed',\n      '@param l the long to print',\n      '@param l the value of long to be outputted',\n      '@param l the long to be displayed'\n    ]\n  },\n  {\n    'tag': '@param obj the object to be printed',\n    'alternatives': [\n      '@param obj the object that should be printed',\n      '@param obj the object that will be printed',\n      '@param obj the object to print',\n      '@param obj the object to be outputted',\n      '@param obj the object to be displayed'\n    ]\n  },\n  {\n    'tag': '@param s the string to be printed',\n    'alternatives': [\n      '@param s the string that should be printed',\n      '@param s the string that will be printed',\n      '@param s the string to print',\n      '@param s the string to be outputted',\n      '@param s the string to be displayed'\n    ]\n  },\n  {\n    'tag': '@param buf the char[] to be printed',\n    'alternatives': [\n      '@param buf the char[] that should be printed',\n      '@param buf the char[] that will be printed',\n      '@param buf the char[] to print',\n      '@param buf the character array to be outputted',\n      '@param buf the character array to be displayed'\n    ]\n  },\n  {\n    'tag': '@param buf character array',\n    'alternatives': [\n      '@param buf an array of characters',\n      '@param buf a character array',\n      '@param buf an array of chars',\n      '@param buf a char array',\n      '@param buf an array containing characters'\n    ]\n  },\n  {\n    'tag': '@param off offset from which to start writing characters',\n    'alternatives': [\n      '@param off the starting point for writing characters',\n      '@param off the position from where characters should be written',\n      '@param off the index to begin writing characters',\n      '@param off the offset where character writing should start',\n      '@param off the position to start character writing'\n    ]\n  },\n  {\n    'tag': '@param len number of characters to write',\n    'alternatives': [\n      '@param len the count of characters to write',\n      '@param len the length of characters to be written',\n      '@param len the number of characters that should be written',\n      '@param len the size of characters to write',\n      '@param len the quantity of characters to be written'\n    ]\n  },\n  {\n    'tag': '@param s the string to be printed',\n    'alternatives': [\n      '@param s the string that should be printed',\n      '@param s the string that will be printed',\n      '@param s the string to print',\n      '@param s the string to be outputted',\n      '@param s the string to be displayed'\n    ]\n  },\n  {\n    'tag': '@param s string to be printed',\n    'alternatives': [\n      '@param s string that should be printed',\n      '@param s string that will be printed',\n      '@param s string to print',\n      '@param s string to be outputted',\n      '@param s string to be displayed'\n    ]\n  }\n]"