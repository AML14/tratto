"output=[\n{\n  'tag': '@return the String representation of the current values of array',\n  'alternatives': [\n    '@return the String form of the current values of array',\n    '@return the String representation of the array\\'s current values',\n    '@return a String that represents the current values of the array',\n    '@return the String version of the array\\'s current values',\n    '@return a String that depicts the current values of the array'\n  ]\n},\n{\n  'tag': '@param length the length of the array',\n  'alternatives': [\n    '@param length the size of the array',\n    '@param length the number of elements in the array',\n    '@param length the count of elements in the array',\n    '@param length the total number of objects in the array',\n    '@param length the quantity of items in the array'\n  ]\n},\n{\n  'tag': '@param array the array to copy elements from',\n  'alternatives': [\n    '@param array the source array to duplicate elements',\n    '@param array the original array to replicate elements',\n    '@param array the array to duplicate items from',\n    '@param array the array to clone elements from',\n    '@param array the array to create a duplicate of elements'\n  ]\n},\n{\n  'tag': '@param executor the ExecutorService that will execute the method calls on\\n    the target objects; for example, a {@link\\n    Executors#newCachedThreadPool()}.',\n  'alternatives': [\n    '@param executor the ExecutorService that will perform the method calls on\\n    the target objects; for instance, a {@link\\n    Executors#newCachedThreadPool()}.',\n    '@param executor the ExecutorService responsible for executing the method calls on\\n    the target objects; e.g., a {@link\\n    Executors#newCachedThreadPool()}.',\n    '@param executor the ExecutorService that will run the method calls on\\n    the target objects; for example, a {@link\\n    Executors#newCachedThreadPool()}.',\n    '@param executor the ExecutorService that will carry out the method calls on\\n    the target objects; for instance, a {@link\\n    Executors#newCachedThreadPool()}.',\n    '@param executor the ExecutorService that will handle the method calls on\\n    the target objects; e.g., a {@link\\n    Executors#newCachedThreadPool()}.'\n  ]\n},\n{\n  'tag': '@param executor the executor to modify to make sure it exits when the\\n       application is finished',\n  'alternatives': [\n    '@param executor the executor to alter in order to ensure it terminates when the\\n       application is completed',\n    '@param executor the executor to change to ensure it stops when the\\n       application is done',\n    '@param executor the executor to adjust to guarantee it exits when the\\n       application is finished',\n    '@param executor the executor to update to ensure it shuts down when the\\n       application is completed',\n    '@param executor the executor to modify to ensure it terminates when the\\n       application is done'\n  ]\n},\n{\n  'tag': '@param terminationTimeout how long to wait for the executor to\\n       finish before terminating the JVM',\n  'alternatives': [\n    '@param terminationTimeout the duration to wait for the executor to\\n       complete before terminating the JVM',\n    '@param terminationTimeout the period of time to wait for the executor to\\n       finish before terminating the JVM',\n    '@param terminationTimeout the length of time to wait for the executor to\\n       complete before terminating the JVM',\n    '@param terminationTimeout the time interval to wait for the executor to\\n       finish before terminating the JVM',\n    '@param terminationTimeout the amount of time to wait for the executor to\\n       complete before terminating the JVM'\n  ]\n},\n{\n  'tag': '@param timeUnit unit of time for the time parameter',\n  'alternatives': [\n    '@param timeUnit the unit of time for the time parameter',\n    '@param timeUnit the time measurement unit for the time parameter',\n    '@param timeUnit the time scale for the time parameter',\n    '@param timeUnit the temporal unit for the time parameter',\n    '@param timeUnit the time dimension for the time parameter'\n  ]\n},\n{\n  'tag': '@return an unmodifiable version of the input which will not hang the JVM',\n  'alternatives': [\n    '@return an unchangeable version of the input that will not cause the JVM to hang',\n    '@return an immutable variant of the input that will not result in the JVM hanging',\n    '@return an unalterable version of the input that will not freeze the JVM',\n    '@return an invariable variant of the input that will not cause the JVM to hang',\n    '@return an unchanged version of the input that will not lead to the JVM freezing'\n  ]\n},\n{\n  'tag': '@param executor the executor to modify to make sure it exits when the\\n       application is finished',\n  'alternatives': [\n    '@param executor the executor to alter to ensure it terminates when the\\n       application is completed',\n    '@param executor the executor to change to ensure it stops when the\\n       application is done',\n    '@param executor the executor to adjust to guarantee it exits when the\\n       application is finished',\n    '@param executor the executor to update to ensure it shuts down when the\\n       application is completed',\n    '@param executor the executor to modify to ensure it terminates when the\\n       application is done'\n  ]\n},\n{\n  'tag': '@param terminationTimeout how long to wait for the executor to\\n       finish before terminating the JVM',\n  'alternatives': [\n    '@param terminationTimeout the duration to wait for the executor to\\n       complete before terminating the JVM',\n    '@param terminationTimeout the period of time to wait for the executor to\\n       finish before terminating the JVM',\n    '@param terminationTimeout the length of time to wait for the executor to\\n       complete before terminating the JVM',\n    '@param terminationTimeout the time interval to wait for the executor to\\n       finish before terminating the JVM',\n    '@param terminationTimeout the amount of time to wait for the executor to\\n       complete before terminating the JVM'\n  ]\n},\n{\n  'tag': '@param timeUnit unit of time for the time parameter',\n  'alternatives': [\n    '@param timeUnit the unit of time for the time parameter',\n    '@param timeUnit the time measurement unit for the time parameter',\n    '@param timeUnit the time scale for the time parameter',\n    '@param timeUnit the temporal unit for the time parameter',\n    '@param timeUnit the time dimension for the time parameter'\n  ]\n},\n{\n  'tag': '@return an unmodifiable version of the input which will not hang the JVM',\n  'alternatives': [\n    '@return an unchangeable version of the input that will not cause the JVM to hang',\n    '@return an immutable variant of the input that will not result in the JVM hanging',\n    '@return an unalterable version of the input that will not freeze the JVM',\n    '@return an invariable variant of the input that will not cause the JVM to hang',\n    '@return an unchanged version of the input that will not lead to the JVM freezing'\n  ]\n},\n{\n  'tag': '@param service ExecutorService which uses daemon threads',\n  'alternatives': [\n    '@param service ExecutorService that utilizes daemon threads',\n    '@param service ExecutorService that employs daemon threads',\n    '@param service ExecutorService utilizing daemon threads',\n    '@param service ExecutorService with daemon threads',\n    '@param service ExecutorService that runs on daemon threads'\n  ]\n},\n{\n  'tag': '@param terminationTimeout how long to wait for the executor to finish\\n       before terminating the JVM',\n  'alternatives': [\n    '@param terminationTimeout the duration to wait for the executor to finish\\n       before terminating the JVM',\n    '@param terminationTimeout the period of time to wait for the executor to finish\\n       before terminating the JVM',\n    '@param terminationTimeout the length of time to wait for the executor to finish\\n       before terminating the JVM',\n    '@param terminationTimeout the time interval to wait for the executor to finish\\n       before terminating the JVM',\n    '@param terminationTimeout the amount of time to wait for the executor to finish\\n       before terminating the JVM'\n  ]\n},\n{\n  'tag': '@param timeUnit unit of time for the time parameter',\n  'alternatives': [\n    '@param timeUnit the unit of time for the time parameter',\n    '@param timeUnit the time measurement unit for the time parameter',\n    '@param timeUnit the time scale for the time parameter',\n    '@param timeUnit the temporal unit for the time parameter',\n    '@param timeUnit the time dimension for the time parameter'\n  ]\n},\n{\n  'tag': '@param executor the executor to modify to make sure it exits when the\\n       application is finished',\n  'alternatives': [\n    '@param executor the executor to alter to ensure it terminates when the\\n       application is completed',\n    '@param executor the executor to change to ensure it stops when the\\n       application is done',\n    '@param executor the executor to adjust to guarantee it exits when the\\n       application is finished',\n    '@param executor the executor to update to ensure it shuts down when the\\n       application is completed',\n    '@param executor the executor to modify to ensure it terminates when the\\n       application is done'\n  ]\n},\n{\n  'tag': '@return an unmodifiable version of the input which will not hang the JVM',\n  'alternatives': [\n    '@return an unchangeable version of the input that will not cause the JVM to hang',\n    '@return an immutable variant of the input that will not result in the JVM hanging',\n    '@return an unalterable version of the input that will not freeze the JVM',\n    '@return an invariable variant of the input that will not cause the JVM to hang',\n    '@return an unchanged version of the input that will not lead to the JVM freezing'\n  ]\n},\n{\n  'tag': '@param executor the executor to modify to make sure it exits when the\\n       application is finished',\n  'alternatives': [\n    '@param executor the executor to alter to ensure it terminates when the\\n       application is completed',\n    '@param executor the executor to change to ensure it stops when the\\n       application is done',\n    '@param executor the executor to adjust to guarantee it exits when the\\n       application is finished',\n    '@param executor the executor to update to ensure it shuts down when the\\n       application is completed',\n    '@param executor the executor to modify to ensure it terminates when the\\n       application is done'\n  ]\n},\n{\n  'tag': '@return an unmodifiable version of the input which will not hang the JVM',\n  'alternatives': [\n    '@return an unchangeable version of the input that will not cause the JVM to hang',\n    '@return an immutable variant of the input that will not result in the JVM hanging',\n    '@return an unalterable version of the input that will not freeze the JVM',\n    '@return an invariable variant of the input that will not cause the JVM to hang',\n    '@return an unchanged version of the input that will not lead to the JVM freezing'\n  ]\n},\n{\n  'tag': '@param executor The executor to decorate',\n  'alternatives': [\n    '@param executor The decorated executor',\n    '@param executor The executor to enhance',\n    '@param executor The modified executor',\n    '@param executor The executor to add decoration',\n    '@param executor The executor to apply decoration'\n  ]\n},\n{\n  'tag': '@param nameSupplier The source of names for each task',\n  'alternatives': [\n    '@param nameSupplier The provider of task names',\n    '@param nameSupplier The supplier of task names',\n    '@param nameSupplier The generator of task names',\n    '@param nameSupplier The origin of task names',\n    '@param nameSupplier The source of task names'\n  ]\n},\n{\n  'tag': '@param service The executor to decorate',\n  'alternatives': [\n    '@param service The decorated executor',\n    '@param service The executor to enhance',\n    '@param service The modified executor',\n    '@param service The executor to add decoration',\n    '@param service The executor to apply decoration'\n  ]\n},\n{\n  'tag': '@param nameSupplier The source of names for each task',\n  'alternatives': [\n    '@param nameSupplier The provider of task names',\n    '@param nameSupplier The supplier of task names',\n    '@param nameSupplier The generator of task names',\n    '@param nameSupplier The origin of task names',\n    '@param nameSupplier The source of task names'\n  ]\n},\n{\n  'tag': '@param service The executor to decorate',\n  'alternatives': [\n    '@param service The decorated executor',\n    '@param service The executor to enhance',\n    '@param service The modified executor',\n    '@param service The executor to add decoration',\n    '@param service The executor to apply decoration'\n  ]\n},\n{\n  'tag': '@param nameSupplier The source of names for each task',\n  'alternatives': [\n    '@param nameSupplier The provider of task names',\n    '@param nameSupplier The supplier of task names',\n    '@param nameSupplier The generator of task names',\n    '@param nameSupplier The origin of task names',\n    '@param nameSupplier The source of task names'\n  ]\n}\n]"