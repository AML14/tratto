"[\n  {\n    \"tag\": \"@param x Argument.\",\n    \"alternatives\": [\n      \"@param x Parameter.\",\n      \"@param x Input.\",\n      \"@param x Variable.\"\n    ]\n  },\n  {\n    \"tag\": \"@return <code>(1 - |x|<sup>3</sup>)<sup>3</sup></code> for |x| &lt; 1, 0 otherwise.\",\n    \"alternatives\": [\n      \"@return <code>(1 - |x|<sup>3</sup>)<sup>3</sup></code> when |x| &lt; 1, otherwise return 0.\",\n      \"@return <code>(1 - |x|<sup>3</sup>)<sup>3</sup></code> if |x| is less than 1, otherwise 0.\",\n      \"@return <code>(1 - |x|<sup>3</sup>)<sup>3</sup></code> where |x| is less than 1, otherwise return 0.\",\n      \"@return <code>(1 - |x|<sup>3</sup>)<sup>3</sup></code> when |x| is less than 1, if not return 0.\",\n      \"@return the value of <code>(1 - |x|<sup>3</sup>)<sup>3</sup></code> if |x| is less than 1, otherwise return 0.\"\n    ]\n  },\n  {\n    \"tag\": \"@param values Values array.\",\n    \"alternatives\": [\n      \"@param values Array of values.\",\n      \"@param values Array holding the values.\",\n      \"@param values Array containing the values.\"\n    ]\n  },\n  {\n    \"tag\": \"@throws org.apache.commons.math3.exception.NotFiniteNumberException if one of the values is not a finite real number.\",\n    \"alternatives\": [\n      \"@throws org.apache.commons.math3.exception.NotFiniteNumberException if any of the values is not a finite real number.\",\n      \"@throws org.apache.commons.math3.exception.NotFiniteNumberException when one of the values is not a finite real number.\",\n      \"@throws org.apache.commons.math3.exception.NotFiniteNumberException if any value is not a finite real number.\",\n      \"@throws org.apache.commons.math3.exception.NotFiniteNumberException when any of the values is not a finite real number.\",\n      \"@throws org.apache.commons.math3.exception.NotFiniteNumberException if a value is not a finite real number.\"\n    ]\n  },\n  {\n    \"tag\": \"@param accuracy If the median residual at a certain robustness iteration\\nis less than this amount, no more iterations are done.\",\n    \"alternatives\": [\n      \"@param accuracy If the median residual is less than this amount at a certain robustness iteration, no more iterations are performed.\",\n      \"@param accuracy If the median residual at a certain robustness iteration is below this threshold, no further iterations are carried out.\",\n      \"@param accuracy If the median residual becomes smaller than this value during a certain robustness iteration, stop further iterations.\",\n      \"@param accuracy If the median residual drops below this value at a certain robustness iteration, cease performing additional iterations.\",\n      \"@param accuracy If the median residual reaches a value smaller than this amount during a specific robustness iteration, do not continue with more iterations.\"\n    ]\n  },\n  {\n    \"tag\": \"@param x Interpolating points array.\",\n    \"alternatives\": [\n      \"@param x Array of interpolation points.\",\n      \"@param x Array holding the interpolating points.\",\n      \"@param x Array containing the points for interpolation.\"\n    ]\n  },\n  {\n    \"tag\": \"@param y Interpolating values array.\",\n    \"alternatives\": [\n      \"@param y Array of interpolating values.\",\n      \"@param y Array holding the interpolating values.\",\n      \"@param y Array containing the values for the interpolation.\"\n    ]\n  },\n  {\n    \"tag\": \"@return a function which interpolates the dataset.\",\n    \"alternatives\": [\n      \"@return a function that performs the interpolation on the dataset.\",\n      \"@return a function that carries out the interpolation of the dataset.\",\n      \"@return a function that interpolates the given dataset.\",\n      \"@return a function that generates an interpolation of the dataset.\",\n      \"@return a function that computes the interpolation of the dataset.\"\n    ]\n  },\n  {\n    \"tag\": \"@throws DimensionMismatchException if the array lengths are different.\",\n    \"alternatives\": [\n      \"@throws DimensionMismatchException when the lengths of the arrays are not the same.\",\n      \"@throws DimensionMismatchException if the lengths of the arrays do not match.\",\n      \"@throws DimensionMismatchException if the sizes of the arrays are different.\",\n      \"@throws DimensionMismatchException when the sizes of the arrays differ.\",\n      \"@throws DimensionMismatchException if the array lengths do not correspond.\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NonMonotonicSequenceException if {@code x} is not sorted in\\nstrictly increasing order.\",\n    \"alternatives\": [\n      \"@throws NonMonotonicSequenceException when {@code x} is not arranged in a strictly ascending order.\",\n      \"@throws NonMonotonicSequenceException if {@code x} is not in strictly increasing order.\",\n      \"@throws NonMonotonicSequenceException if {@code x} is not sorted in ascending order.\",\n      \"@throws NonMonotonicSequenceException when {@code x} is not in a strictly increasing order.\",\n      \"@throws NonMonotonicSequenceException if {@code x} is not arranged in strictly ascending order.\"\n    ]\n  },\n  {\n    \"tag\": \"@param x abscissa of the sample point\",\n    \"alternatives\": [\n      \"@param x The abscissa of the sample point.\",\n      \"@param x The abscissa value of the sample point.\",\n      \"@param x The abscissa coordinate of the sample point.\"\n    ]\n  },\n  {\n    \"tag\": \"@param value value and derivatives of the sample point\\n(if only one row is passed, it is the value, if two rows are\\npassed the first one is the value and the second the derivative\\nand so on)\",\n    \"alternatives\": [\n      \"@param value The value and derivatives of the sample point. If only one row is provided, it represents the value. If two rows are provided, the first row represents the value and the second row represents the derivative. The pattern continues for more rows.\",\n      \"@param value The value and its derivatives of the sample point. When passing a single row, the row represents the value. When passing two rows, the first row represents the value and the second row represents the derivative. This pattern continues for additional rows.\",\n      \"@param value The value and its derivatives of the sample point. If only a single row is supplied, the row represents the value. If two or more rows are provided, the first row corresponds to the value and the subsequent rows correspond to the derivatives, one per row.\",\n      \"@param value The value and its derivatives of the sample point. If only one row is given, it represents the value. If two rows are given, the first row represents the value and the second row represents the derivative. This pattern continues for additional rows.\",\n      \"@param value The value and derivatives for the sample point. If only one row is passed, it represents the value. If two rows are passed, the first row represents the value and the second row represents the derivative. This pattern continues for more rows.\"\n    ]\n  },\n  {\n    \"tag\": \"@throws ZeroException if the abscissa difference between added point\\nand a previous point is zero (i.e. the two points are at same abscissa)\",\n    \"alternatives\": [\n      \"@throws ZeroException if the difference in abscissa between the added point and a previous point is zero (indicating that the two points have the same abscissa).\",\n      \"@throws ZeroException if the abscissa difference between the added point and a previous point is zero (implying that the two points have the same abscissa).\",\n      \"@throws ZeroException if the added point and a previous point have a zero abscissa difference (indicating that the two points are located at the same abscissa).\",\n      \"@throws ZeroException if the added point and a previous point have an abscissa difference of zero (which means that the two points have the same abscissa).\",\n      \"@throws ZeroException if the abscissa difference between the point being added and a previous point is zero (meaning that the two points have the same abscissa).\"\n    ]\n  },\n  {\n    \"tag\": \"@throws MathArithmeticException if the number of derivatives is larger\\nthan 20, which prevents computation of a factorial\",\n    \"alternatives\": [\n      \"@throws MathArithmeticException if the number of derivatives exceeds 20, making it impossible to compute a factorial.\",\n      \"@throws MathArithmeticException if the number of derivatives is greater than 20, leading to the inability to calculate a factorial.\",\n      \"@throws MathArithmeticException if the number of derivatives is beyond 20, thereby hindering the computation of a factorial.\",\n      \"@throws MathArithmeticException if the number of derivatives is higher than 20, preventing the computation of a factorial.\",\n      \"@throws MathArithmeticException if the number of derivatives is larger than 20, making it impossible to calculate a factorial.\"\n    ]\n  },\n  {\n    \"tag\": \"@return interpolation polynomials array\",\n    \"alternatives\": [\n      \"@return array of interpolation polynomials\",\n      \"@return an array containing the interpolation polynomials\",\n      \"@return an array of polynomials used for interpolation\",\n      \"@return an array that holds the interpolation polynomials\",\n      \"@return an array consisting of the interpolation polynomials\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NoDataException if sample is empty\",\n    \"alternatives\": [\n      \"@throws NoDataException when the sample is empty\",\n      \"@throws NoDataException if the sample is devoid of data\",\n      \"@throws NoDataException if the sample does not contain any data\",\n      \"@throws NoDataException if the sample is lacking data\",\n      \"@throws NoDataException if there is no data in the sample\"\n    ]\n  },\n  {\n    \"tag\": \"@param x interpolation abscissa\",\n    \"alternatives\": [\n      \"@param x Abscissa for interpolation\",\n      \"@param x Interpolation point abscissa\",\n      \"@param x Abscissa value for the interpolation\",\n      \"@param x The abscissa used for the interpolation\",\n      \"@param x The abscissa coordinate for the interpolation\"\n    ]\n  },\n  {\n    \"tag\": \"@return interpolated value\",\n    \"alternatives\": [\n      \"@return the computed interpolation value\",\n      \"@return the value obtained through interpolation\",\n      \"@return the resulting interpolated value\",\n      \"@return the value produced by the interpolation\",\n      \"@return the interpolated value obtained\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NoDataException if sample is empty\",\n    \"alternatives\": [\n      \"@throws NoDataException when the sample is empty\",\n      \"@throws NoDataException if the sample is devoid of data\",\n      \"@throws NoDataException if the sample does not contain any data\",\n      \"@throws NoDataException if the sample is lacking data\",\n      \"@throws NoDataException if there is no data in the sample\"\n    ]\n  },\n  {\n    \"tag\": \"@param x interpolation abscissa\",\n    \"alternatives\": [\n      \"@param x Abscissa for interpolation\",\n      \"@param x Interpolation point abscissa\",\n      \"@param x Abscissa value for the interpolation\",\n      \"@param x The abscissa used for interpolation\",\n      \"@param x The abscissa coordinate for interpolation\"\n    ]\n  }\n]"