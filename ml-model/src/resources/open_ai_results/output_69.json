"output=[\n    {\n        'tag': '@param biasCorrected if true, returned value will be bias-corrected',\n        'alternatives': [\n            '@param biasCorrected if true, the returned value will be adjusted for bias',\n            '@param biasCorrected, true will result in the returned value being bias-corrected',\n            '@param biasCorrected, if set to true the returned value will be bias-corrected'\n        ]\n    },\n    {\n        'tag': '@return returns the covariance for the two arrays',\n        'alternatives': [\n            '@return calculates and returns the covariance for the given arrays',\n            '@return the covariance value computed for the two arrays',\n            '@return the computed covariance between the two arrays'\n        ]\n    },\n    {\n        'tag': '@throws MathIllegalArgumentException if the arrays lengths do not match or\\nthere is insufficient data',\n        'alternatives': [\n            '@throws MathIllegalArgumentException when the lengths of the arrays are mismatched or\\ninsufficient data exists',\n            '@throws MathIllegalArgumentException if the array lengths do not match or\\nif there is not enough data',\n            '@throws MathIllegalArgumentException when there is insufficient data or the lengths of the arrays are not compatible'\n        ]\n    },\n    {\n        'tag': '@param xArray first data array',\n        'alternatives': []\n    },\n    {\n        'tag': '@param yArray second data array',\n        'alternatives': []\n    },\n    {\n        'tag': '@return returns the covariance for the two arrays',\n        'alternatives': [\n            '@return calculates and returns the covariance for the given arrays',\n            '@return the covariance value computed for the two arrays',\n            '@return the computed covariance between the two arrays'\n        ]\n    },\n    {\n        'tag': '@throws MathIllegalArgumentException if the arrays lengths do not match or\\nthere is insufficient data',\n        'alternatives': [\n            '@throws MathIllegalArgumentException when the lengths of the arrays are mismatched or\\ninsufficient data exists',\n            '@throws MathIllegalArgumentException if the array lengths do not match or\\nif there is not enough data',\n            '@throws MathIllegalArgumentException when there is insufficient data or the lengths of the arrays are not compatible'\n        ]\n    },\n    {\n        'tag': '@param matrix matrix to check',\n        'alternatives': []\n    },\n    {\n        'tag': '@throws MathIllegalArgumentException if the matrix does not contain sufficient data\\nto compute covariance',\n        'alternatives': [\n            '@throws MathIllegalArgumentException if the matrix does not have enough information\\nto calculate the covariance',\n            '@throws MathIllegalArgumentException when there is insufficient data in the matrix\\nto compute the covariance',\n            '@throws MathIllegalArgumentException if the provided matrix lacks the necessary data\\nto compute the covariance'\n        ]\n    },\n    {\n        'tag': '@param data rectangular array with columns representing covariates',\n        'alternatives': []\n    },\n    {\n        'tag': '@throws MathIllegalArgumentException if the input data array is not\\nrectangular with at least two rows and one column.',\n        'alternatives': [\n            '@throws MathIllegalArgumentException when the input data array is not rectangular with\\nat least two rows and one column.',\n            '@throws MathIllegalArgumentException if the input data array does not have\\nat least two rows and one column and is not rectangular.',\n            '@throws MathIllegalArgumentException if the input data array is not in a rectangular shape with\\nat least two rows and one column.'\n        ]\n    },\n    {\n        'tag': '@throws NotStrictlyPositiveException if the input data array is not\\nrectangular with at least one row and one column.',\n        'alternatives': [\n            '@throws NotStrictlyPositiveException when the input data array lacks at\\nleast one row and one column and is not rectangular.',\n            '@throws NotStrictlyPositiveException if the input data array does not meet the requirement of being rectangular and\\nhaving at least one row and one column.',\n            '@throws NotStrictlyPositiveException if the input data array does not have\\nat least one row and one column and is not in a rectangular form.'\n        ]\n    },\n    {\n        'tag': '@param data rectangular array with columns representing covariates',\n        'alternatives': []\n    },\n    {\n        'tag': '@throws MathIllegalArgumentException if the input data array is not\\nrectangular with at least two rows and one column.',\n        'alternatives': [\n            '@throws MathIllegalArgumentException when the input data array is not rectangular with\\nat least two rows and one column.',\n            '@throws MathIllegalArgumentException if the input data array does not have\\nat least two rows and one column and is not rectangular.',\n            '@throws MathIllegalArgumentException if the input data array is not in a rectangular shape with\\nat least two rows and one column.'\n        ]\n    },\n    {\n        'tag': '@throws NotStrictlyPositiveException if the input data array is not\\nrectangular with at least one row and one column.',\n        'alternatives': [\n            '@throws NotStrictlyPositiveException when the input data array lacks at\\nleast one row and one column and is not rectangular.',\n            '@throws NotStrictlyPositiveException if the input data array does not meet the requirement of being rectangular and\\nhaving at least one row and one column.',\n            '@throws NotStrictlyPositiveException if the input data array does not have\\nat least one row and one column and is not in a rectangular form.'\n        ]\n    },\n    {\n        'tag': '@param matrix matrix with columns representing covariates',\n        'alternatives': []\n    },\n    {\n        'tag': '@throws MathIllegalArgumentException if the input matrix does not have\\nat least two rows and one column',\n        'alternatives': [\n            '@throws MathIllegalArgumentException when the input matrix lacks adequate dimensions\\nof at least two rows and one column',\n            '@throws MathIllegalArgumentException if the input matrix fails to meet the requirement of\\nhaving at least two rows and one column',\n            '@throws MathIllegalArgumentException if the input matrix does not possess the minimum\\nrequired dimensions of two rows and one column'\n        ]\n    },\n    {\n        'tag': '@param matrix matrix with columns representing covariates',\n        'alternatives': []\n    },\n    {\n        'tag': '@throws MathIllegalArgumentException if the input matrix does not have\\nat least two rows and one column',\n        'alternatives': [\n            '@throws MathIllegalArgumentException when the input matrix lacks adequate dimensions\\nof at least two rows and one column',\n            '@throws MathIllegalArgumentException if the input matrix fails to meet the requirement of\\nhaving at least two rows and one column',\n            '@throws MathIllegalArgumentException if the input matrix does not possess the minimum\\nrequired dimensions of two rows and one column'\n        ]\n    },\n    {\n        'tag': '@return correlation matrix',\n        'alternatives': [\n            '@return matrix containing the correlation coefficients',\n            '@return the matrix representing the correlations',\n            '@return matrix of correlation values'\n        ]\n    },\n    {\n        'tag': '@return matrix of correlation standard errors',\n        'alternatives': [\n            '@return matrix of standard errors of correlation',\n            '@return the matrix with the standard error values of correlation',\n            '@return matrix containing the standard errors of the correlation coefficients'\n        ]\n    },\n    {\n        'tag': '@throws NullPointerException if this instance was created with no data',\n        'alternatives': [\n            '@throws NullPointerException if the instance was initialized without any data',\n            '@throws NullPointerException if the object was created without any data',\n            '@throws NullPointerException if there is no data provided for this instance'\n        ]\n    },\n    {\n        'tag': '@return matrix of p-values',\n        'alternatives': [\n            '@return matrix containing the p-values',\n            '@return the matrix representing the p-values',\n            '@return matrix of computed p-values'\n        ]\n    },\n    {\n        'tag': '@throws org.apache.commons.math3.exception.MaxCountExceededException if an error occurs estimating probabilities',\n        'alternatives': [\n            '@throws org.apache.commons.math3.exception.MaxCountExceededException when an error is encountered in probability estimation',\n            '@throws org.apache.commons.math3.exception.MaxCountExceededException in case of any error while estimating probabilities',\n            '@throws org.apache.commons.math3.exception.MaxCountExceededException when there is an issue in estimating probabilities'\n        ]\n    },\n    {\n        'tag': '@throws NullPointerException if this instance was created with no data',\n        'alternatives': [\n            '@throws NullPointerException if the instance was initialized without any data',\n            '@throws NullPointerException if the object was created without any data',\n            '@throws NullPointerException if there is no data provided for this instance'\n        ]\n    }\n]"