"output = [\n  {\n    'tag': '@throws OutOfRangeException if the indices are not valid.',\n    'alternatives': [\n      '@throws OutOfRangeException if the indexes are invalid.',\n      '@throws OutOfRangeException if the indices provided are not valid.',\n      '@throws OutOfRangeException if the given indices are out of range.'\n    ]\n  },\n  {\n    'tag': '@throws MatrixDimensionMismatchException if the destination array is too\\nsmall.',\n    'alternatives': [\n      '@throws MatrixDimensionMismatchException if the destination array is not large enough.',\n      '@throws MatrixDimensionMismatchException if the destination array is smaller than needed.',\n      '@throws MatrixDimensionMismatchException if the destination array is too small for the operation.'\n    ]\n  },\n  {\n    'tag': '@param selectedRows Array of row indices.',\n    'alternatives': [\n      '@param selectedRows An array containing the indices of the rows.',\n      '@param selectedRows Array consisting of row indices.',\n      '@param selectedRows A list of indices representing rows.'\n    ]\n  },\n  {\n    'tag': '@param selectedColumns Array of column indices.',\n    'alternatives': [\n      '@param selectedColumns An array containing the indices of the columns.',\n      '@param selectedColumns Array consisting of column indices.',\n      '@param selectedColumns A list of indices representing columns.'\n    ]\n  },\n  {\n    'tag': '@param destination The arrays where the submatrix data should be copied\\n(if larger than rows/columns counts, only the upper-left part will be\\nused)',\n    'alternatives': [\n      '@param destination The arrays to store the copied submatrix data\\n(if larger than the number of rows/columns, only the upper-left section will be used).',\n      '@param destination The arrays in which the submatrix data should be placed\\n(if the size is larger than the number of rows/columns, only the upper-left part will be used).',\n      '@param destination The arrays where the submatrix data is to be placed\\n(if the size is bigger than rows/columns counts, only the upper-left portion is used).'\n    ]\n  },\n  {\n    'tag': '@throws NullArgumentException if the row or column selections are\\n{@code null}',\n    'alternatives': [\n      '@throws NullArgumentException if either the row or column selections are null.',\n      '@throws NullArgumentException if the row or column selections are equal to null.',\n      '@throws NullArgumentException if the row or column selections are null values.'\n    ]\n  },\n  {\n    'tag': '@throws NoDataException if the row or column selections are empty (zero\\nlength).',\n    'alternatives': [\n      '@throws NoDataException if the row or column selections have zero length.',\n      '@throws NoDataException if the row or column selections are empty (length = 0).',\n      '@throws NoDataException if the row or column selections contain no data (length = 0).'\n    ]\n  },\n  {\n    'tag': '@throws OutOfRangeException if the indices are not valid.',\n    'alternatives': [\n      '@throws OutOfRangeException if the indexes are invalid.',\n      '@throws OutOfRangeException if the indices provided are not valid.',\n      '@throws OutOfRangeException if the given indices are out of range.'\n    ]\n  },\n  {\n    'tag': '@throws MatrixDimensionMismatchException if the destination array is too\\nsmall.',\n    'alternatives': [\n      '@throws MatrixDimensionMismatchException if the destination array is not large enough.',\n      '@throws MatrixDimensionMismatchException if the destination array is smaller than needed.',\n      '@throws MatrixDimensionMismatchException if the destination array is too small for the operation.'\n    ]\n  },\n  {\n    'tag': '@param subMatrix array containing the submatrix replacement data',\n    'alternatives': [\n      '@param subMatrix an array that holds the replacement data for the submatrix.',\n      '@param subMatrix array that contains the replacement data for the submatrix.',\n      '@param subMatrix array which includes the replacement data for the submatrix.'\n    ]\n  },\n  {\n    'tag': '@param row row coordinate of the top, left element to be replaced',\n    'alternatives': [\n      '@param row the row coordinate of the top-left element to be substituted.',\n      '@param row the row position of the top-left element to replace.',\n      '@param row the row index of the top-left element to be replaced.'\n    ]\n  },\n  {\n    'tag': '@param column column coordinate of the top, left element to be replaced',\n    'alternatives': [\n      '@param column the column coordinate of the top-left element to be substituted.',\n      '@param column the column position of the top-left element to replace.',\n      '@param column the column index of the top-left element to be replaced.'\n    ]\n  },\n  {\n    'tag': '@throws OutOfRangeException if {@code subMatrix} does not fit into\\nthis matrix from element in {@code (row, column)}.',\n    'alternatives': [\n      '@throws OutOfRangeException if {@code subMatrix} is unable to fit into this matrix starting from the element at {@code (row, column)}.',\n      '@throws OutOfRangeException if {@code subMatrix} cannot be accommodated in this matrix starting from the element at {@code (row, column)}.',\n      '@throws OutOfRangeException if {@code subMatrix} is too big to fit into this matrix starting from the element at {@code (row, column)}.'\n    ]\n  },\n  {\n    'tag': '@throws DimensionMismatchException if {@code subMatrix} is not rectangular\\n(not all rows have the same length) or empty.',\n    'alternatives': [\n      '@throws DimensionMismatchException if {@code subMatrix} is not a rectangle (rows have unequal lengths) or if it is empty.',\n      '@throws DimensionMismatchException if {@code subMatrix} is not rectangular (rows have varying lengths) or if it is empty.',\n      '@throws DimensionMismatchException if {@code subMatrix} is non-rectangular (rows have different lengths) or empty.'\n    ]\n  },\n  {\n    'tag': '@param row Row to be fetched.',\n    'alternatives': [\n      '@param row The row to retrieve.',\n      '@param row The row that needs to be obtained.',\n      '@param row The row that should be fetched.'\n    ]\n  },\n  {\n    'tag': '@return row Matrix.',\n    'alternatives': [\n      '@return row A matrix containing the requested row.',\n      '@return row The matrix that contains the specified row.',\n      '@return row A matrix representing the desired row.'\n    ]\n  },\n  {\n    'tag': '@throws OutOfRangeException if the specified row index is invalid.',\n    'alternatives': [\n      '@throws OutOfRangeException if the given row index is not valid.',\n      '@throws OutOfRangeException if the specified row index is out of range.',\n      '@throws OutOfRangeException if the row index provided is invalid.'\n    ]\n  },\n  {\n    'tag': '@param row Row to be set.',\n    'alternatives': [\n      '@param row The row to be assigned.',\n      '@param row The row that needs to be updated.',\n      '@param row The row that should be modified.'\n    ]\n  },\n  {\n    'tag': '@param matrix Row matrix to be copied (must have one row and the same\\nnumber of columns as the instance).',\n    'alternatives': [\n      '@param matrix The row matrix that will be duplicated (should have one row and the same number of columns as the instance).',\n      '@param matrix The row matrix that needs to be copied (must have one row and the same number of columns as the instance).',\n      '@param matrix The row matrix that should be replicated (must have one row and the same number of columns as the instance).'\n    ]\n  },\n  {\n    'tag': '@throws OutOfRangeException if the specified row index is invalid.',\n    'alternatives': [\n      '@throws OutOfRangeException if the given row index is not valid.',\n      '@throws OutOfRangeException if the specified row index is out of range.',\n      '@throws OutOfRangeException if the row index provided is invalid.'\n    ]\n  },\n  {\n    'tag': '@throws MatrixDimensionMismatchException if the row dimension of the\\n{@code matrix} is not {@code 1}, or the column dimensions of {@code this}\\nand {@code matrix} do not match.',\n    'alternatives': [\n      '@throws MatrixDimensionMismatchException if the row size of the given {@code matrix} is not equal to {@code 1}, or if the column sizes of both {@code this} matrix and {@code matrix} do not match.',\n      '@throws MatrixDimensionMismatchException if the row dimension of the {@code matrix} is not {@code 1}, or if the column dimensions of both {@code this} and {@code matrix} are not the same.',\n      '@throws MatrixDimensionMismatchException if the row dimension of the {@code matrix} does not match {@code 1}, or if the column sizes of the {@code this} matrix and {@code matrix} do not agree.'\n    ]\n  },\n  {\n    'tag': '@param column Column to be fetched.',\n    'alternatives': [\n      '@param column The desired column.',\n      '@param column The column that needs to be obtained.',\n      '@param column The column that should be retrieved.'\n    ]\n  },\n  {\n    'tag': '@return column Matrix.',\n    'alternatives': [\n      '@return column A matrix containing the requested column.',\n      '@return column The matrix that contains the specified column.',\n      '@return column A matrix representing the desired column.'\n    ]\n  },\n  {\n    'tag': '@throws OutOfRangeException if the specified column index is invalid.',\n    'alternatives': [\n      '@throws OutOfRangeException if the given column index is not valid.',\n      '@throws OutOfRangeException if the specified column index is out of range.',\n      '@throws OutOfRangeException if the column index provided is invalid.'\n    ]\n  },\n  {\n    'tag': '@param column Column to be set.',\n    'alternatives': [\n      '@param column The column to be assigned.',\n      '@param column The column that needs to be updated.',\n      '@param column The column that should be modified.'\n    ]\n  }\n]"