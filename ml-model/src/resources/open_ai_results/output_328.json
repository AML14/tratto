"[\n{'tag': '@return the Unicode code point for the given index or the negated value of\\n        the trailing high surrogate character at the end of the sequence', \n 'alternatives': [\n   '@return the Unicode code point for the specified index, or the negated value of the trailing high surrogate character at the end of the sequence',\n   '@return the negated value of the trailing high surrogate character at the end of the sequence, or the Unicode code point for the given index',\n   '@return the Unicode code point for the given index or the negated value of the trailing high surrogate character at the end of the sequence'\n ]},\n\n{'tag': '@param replacementMap a map of characters to their escaped representations', \n 'alternatives': [\n   '@param replacementMap a map that contains characters and their corresponding escaped representations',\n   '@param replacementMap a map mapping characters to their escaped representations',\n   '@param replacementMap a map that stores characters and their escaped representations'\n ]},\n\n{'tag': '@param safeMin the lowest character value in the safe range', \n 'alternatives': [\n   '@param safeMin the minimum character value within the safe range',\n   '@param safeMin the lowest value for characters in the safe range',\n   '@param safeMin the minimum value that characters can have within the safe range'\n ]},\n\n{'tag': '@param safeMax the highest character value in the safe range', \n 'alternatives': [\n   '@param safeMax the maximum character value within the safe range',\n   '@param safeMax the highest value for characters in the safe range',\n   '@param safeMax the maximum value that characters can have within the safe range'\n ]},\n\n{'tag': '@param escaperMap the mapping of characters to be escaped', \n 'alternatives': [\n   '@param escaperMap the map that specifies the characters to be escaped',\n   '@param escaperMap the mapping that defines the characters to be escaped',\n   '@param escaperMap the map of characters that are to be escaped'\n ]},\n\n{'tag': '@param value any value of type {@code C}', \n 'alternatives': [\n   '@param value any value of type {@code C}',\n   '@param value a value of type {@code C}',\n   '@param value a value with the type {@code C}'\n ]},\n\n{'tag': '@return the least value greater than {@code value}, or {@code null} if\\n    {@code value} is {@code maxValue()}', \n 'alternatives': [\n   '@return the smallest value larger than {@code value}, or {@code null} if\\n    {@code value} equals {@code maxValue()}',\n   '@return the minimum value that is greater than {@code value}, or {@code null} if\\n    {@code value} is equal to {@code maxValue()}',\n   '@return the minimum value greater than {@code value}, or {@code null} if\\n    {@code value} is {@code maxValue()}'\n ]},\n\n{'tag': '@return the greatest value less than {@code value}, or {@code null} if\\n    {@code value} is {@code minValue()}', \n 'alternatives': [\n   '@return the largest value smaller than {@code value}, or {@code null} if\\n    {@code value} equals {@code minValue()}',\n   '@return the maximum value that is less than {@code value}, or {@code null} if\\n    {@code value} is equal to {@code minValue()}',\n   '@return the maximum value less than {@code value}, or {@code null} if\\n    {@code value} is {@code minValue()}'\n ]},\n\n{'tag': '@return the distance as described above, or {@link Long#MIN_VALUE} or\\n    {@link Long#MAX_VALUE} if the distance is too small or too large,\\n    respectively.', \n 'alternatives': [\n   '@return the computed distance, or {@link Long#MIN_VALUE} or\\n    {@link Long#MAX_VALUE} if the distance is too small or too large,\\n    respectively.',\n   '@return the calculated distance, or {@link Long#MIN_VALUE} or\\n    {@link Long#MAX_VALUE} if the distance is deemed too small or too large,\\n    respectively.',\n   '@return the distance as described above, or {@link Long#MIN_VALUE} or\\n    {@link Long#MAX_VALUE} if the distance is considered too small or too large,\\n    respectively.'\n ]},\n\n{'tag': '@return the minimum value of type {@code C}; never null', \n 'alternatives': [\n   '@return the smallest value of type {@code C}; always non-null',\n   '@return the minimum value for type {@code C}; never null',\n   '@return the minimum value of type {@code C}, which is always non-null'\n ]},\n\n{'tag': '@throws NoSuchElementException if the type has no (practical) minimum\\n    value; for example, {@link java.math.BigInteger}', \n 'alternatives': [\n   '@throws NoSuchElementException if the type does not have a practical minimum\\n    value; for instance, {@link java.math.BigInteger}',\n   '@throws NoSuchElementException if the type lacks a practical minimum\\n    value; e.g. {@link java.math.BigInteger}',\n   '@throws NoSuchElementException if the type does not possess a (practical) minimum\\n    value; such as {@link java.math.BigInteger}'\n ]},\n\n{'tag': '@return the maximum value of type {@code C}; never null', \n 'alternatives': [\n   '@return the largest value of type {@code C}; always non-null',\n   '@return the maximum value for type {@code C}; never null',\n   '@return the maximum value of type {@code C}, which is always non-null'\n ]},\n\n{'tag': '@throws NoSuchElementException if the type has no (practical) maximum\\n    value; for example, {@link java.math.BigInteger}', \n 'alternatives': [\n   '@throws NoSuchElementException if the type does not have a practical maximum\\n    value; for instance, {@link java.math.BigInteger}',\n   '@throws NoSuchElementException if the type lacks a practical maximum\\n    value; e.g. {@link java.math.BigInteger}',\n   '@throws NoSuchElementException if the type does not possess a (practical) maximum\\n    value; such as {@link java.math.BigInteger}'\n ]},\n\n{'tag': '@throws IllegalArgumentException if the two keys are equal according to\\n    their natural ordering', \n 'alternatives': [\n   '@throws IllegalArgumentException if the two keys are considered equal based on\\n    their natural ordering',\n   '@throws IllegalArgumentException if the two keys are equal as per their natural\\n    ordering',\n   '@throws IllegalArgumentException if the two keys are equal according to the\\n    natural ordering'\n ]},\n\n{'tag': '@throws IllegalArgumentException if any two keys are equal according to\\n    their natural ordering', \n 'alternatives': [\n   '@throws IllegalArgumentException if any two keys are deemed equal based on\\n    their natural ordering',\n   '@throws IllegalArgumentException if any two keys are equal as per their natural\\n    ordering',\n   '@throws IllegalArgumentException if any two keys are equal according to the\\n    natural ordering'\n ]},\n\n{'tag': '@throws IllegalArgumentException if any two keys are equal according to\\n    their natural ordering', \n 'alternatives': [\n   '@throws IllegalArgumentException if any two keys are considered equal based on\\n    their natural ordering',\n   '@throws IllegalArgumentException if any two keys are equal as per their natural\\n    ordering',\n   '@throws IllegalArgumentException if any two keys are equal according to the\\n    natural ordering'\n ]},\n\n{'tag': '@throws IllegalArgumentException if any two keys are equal according to\\n    their natural ordering', \n 'alternatives': [\n   '@throws IllegalArgumentException if any two keys are deemed equal based on\\n    their natural ordering',\n   '@throws IllegalArgumentException if any two keys are equal as per their natural\\n    ordering',\n   '@throws IllegalArgumentException if any two keys are equal according to the\\n    natural ordering'\n ]},\n\n{'tag': '@throws ClassCastException if the keys in {@code map} are not mutually\\n        comparable', \n 'alternatives': [\n   '@throws ClassCastException if the keys in {@code map} cannot be compared to each\\n        other',\n   '@throws ClassCastException if the keys in {@code map} are not mutually\\n        comparable to one another',\n   '@throws ClassCastException if the keys in {@code map} cannot be ordered relative to\\n        each other'\n ]},\n\n{'tag': '@throws NullPointerException if any key or value in {@code map} is null', \n 'alternatives': [\n   '@throws NullPointerException if any key or value within {@code map} is null',\n   '@throws NullPointerException if any key or value contained in {@code map} is null',\n   '@throws NullPointerException if any key or value in {@code map} equals null'\n ]},\n\n{'tag': '@throws IllegalArgumentException if any two keys are equal according to\\n        their natural ordering', \n 'alternatives': [\n   '@throws IllegalArgumentException if any two keys are considered equal based on\\n        their natural ordering',\n   '@throws IllegalArgumentException if any two keys are equal as per their natural\\n        ordering',\n   '@throws IllegalArgumentException if any two keys are equal according to the\\n        natural ordering'\n ]},\n\n{'tag': '@throws NullPointerException if any key or value in {@code map} is null', \n 'alternatives': [\n   '@throws NullPointerException if any key or value within {@code map} is null',\n   '@throws NullPointerException if any key or value contained in {@code map} is null',\n   '@throws NullPointerException if any key or value in {@code map} equals null'\n ]},\n\n{'tag': '@throws IllegalArgumentException if any two keys are equal according to the\\n        comparator', \n 'alternatives': [\n   '@throws IllegalArgumentException if any two keys are deemed equal based on the\\n        comparator',\n   '@throws IllegalArgumentException if any two keys are equal as per the\\n        comparator',\n   '@throws IllegalArgumentException if any two keys are equal according to the\\n        provided comparator'\n ]}\n]"