"[\n  {\n    'tag': '@param array the array to iterate over',\n    'alternatives': [\n      '@param collection the collection to iterate through',\n      '@param array the array to traverse',\n      '@param arr the array to cycle through',\n      '@param list the list to go through',\n      '@param items the items to iterate over'\n    ]\n  },\n  {\n    'tag': '@param start the index to start iterating at',\n    'alternatives': [\n      '@param begin the starting index for iteration',\n      '@param initial the initial index for iterating',\n      '@param from the index where iteration begins',\n      '@param st the start point for iteration',\n      '@param beginIndex the starting position for iteration'\n    ]\n  },\n  {\n    'tag': '@throws IndexOutOfBoundsException if the start index is out of bounds',\n    'alternatives': [\n      '@throws IndexOutOfBoundsException when the starting index is beyond the bounds',\n      '@throws IndexOutOfBoundsException if the initial index is outside the allowed range',\n      '@throws IndexOutOfBoundsException if the start index exceeds the array length',\n      '@throws IndexOutOfBoundsException if the starting position is not within the array bounds',\n      '@throws IndexOutOfBoundsException if the index to start from is invalid'\n    ]\n  },\n  {\n    'tag': '@param array the array to iterate over',\n    'alternatives': [\n      '@param collection the collection to iterate through',\n      '@param array the array to traverse',\n      '@param arr the array to cycle through',\n      '@param list the list to go through',\n      '@param items the items to iterate over'\n    ]\n  },\n  {\n    'tag': '@param start the index to start iterating at',\n    'alternatives': [\n      '@param begin the starting index for iteration',\n      '@param initial the initial index for iterating',\n      '@param from the index where iteration begins',\n      '@param st the start point for iteration',\n      '@param beginIndex the starting position for iteration'\n    ]\n  },\n  {\n    'tag': '@param end the index (exclusive) to finish iterating at',\n    'alternatives': [\n      '@param stop the ending index (exclusive) for iteration',\n      '@param finish the index (exclusive) where iteration stops',\n      '@param to the exclusive index at which iteration finishes',\n      '@param endIndex the index (exclusive) that marks the end of iteration',\n      '@param limit the index (exclusive) to which iteration goes'\n    ]\n  },\n  {\n    'tag': '@throws IndexOutOfBoundsException if the start or end index is out of bounds',\n    'alternatives': [\n      '@throws IndexOutOfBoundsException if the beginning or ending index is beyond the bounds',\n      '@throws IndexOutOfBoundsException if the initial or final index is outside the allowed range',\n      '@throws IndexOutOfBoundsException if the start or end index exceeds the array length',\n      '@throws IndexOutOfBoundsException if the starting or ending position is not within the array bounds',\n      '@throws IndexOutOfBoundsException if the index to start from or end at is invalid'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if end index is before the start',\n    'alternatives': [\n      '@throws IllegalArgumentException if the ending index precedes the start',\n      '@throws IllegalArgumentException if the final index comes before the beginning',\n      '@throws IllegalArgumentException if the end index is earlier than the start',\n      '@throws IllegalArgumentException if the end index is prior to the start',\n      '@throws IllegalArgumentException if the final index is before the initial'\n    ]\n  },\n  {\n    'tag': '@param <E> the element type',\n    'alternatives': [\n      '@param <E> the type of elements',\n      '@param <T> the type of items',\n      '@param <E> the class of elements',\n      '@param <E> the data type of elements',\n      '@param <E> the category of elements'\n    ]\n  },\n  {\n    'tag': '@param iterator the iterator to decorate',\n    'alternatives': [\n      '@param it the iterator to enhance',\n      '@param iter the iterator to augment',\n      '@param source the iterator to modify',\n      '@param original the iterator to embellish',\n      '@param input the iterator to wrap'\n    ]\n  },\n  {\n    'tag': '@return a new unmodifiable list iterator',\n    'alternatives': [\n      '@return a newly created list iterator that cannot be modified',\n      '@return a fresh list iterator that is read-only',\n      '@return a newly constructed list iterator that is unmodifiable',\n      '@return a brand new list iterator that cannot be changed',\n      '@return a newly instantiated list iterator that is immutable'\n    ]\n  },\n  {\n    'tag': '@param iterator the iterator to decorate',\n    'alternatives': [\n      '@param it the iterator to enhance',\n      '@param iter the iterator to augment',\n      '@param source the iterator to modify',\n      '@param original the iterator to embellish',\n      '@param input the iterator to wrap'\n    ]\n  },\n  {\n    'tag': '@param <K> the key type',\n    'alternatives': [\n      '@param <K> the type of keys',\n      '@param <K> the class of keys',\n      '@param <K> the data type of keys',\n      '@param <K> the category of keys',\n      '@param <K> the identifier type'\n    ]\n  },\n  {\n    'tag': '@param <V> the value type',\n    'alternatives': [\n      '@param <V> the type of values',\n      '@param <V> the class of values',\n      '@param <V> the data type of values',\n      '@param <V> the category of values',\n      '@param <V> the object type'\n    ]\n  },\n  {\n    'tag': '@return {@link OrderedMapIterator}<K, V>',\n    'alternatives': [\n      '@return an instance of {@link OrderedMapIterator} with key and value type K, V',\n      '@return a {@link OrderedMapIterator} of type K, V',\n      '@return a {@link OrderedMapIterator} with key type K and value type V',\n      '@return a {@link OrderedMapIterator} where K and V are the key and value types',\n      '@return an implementation of {@link OrderedMapIterator} for types K and V'\n    ]\n  },\n  {\n    'tag': '@param <K> the key type',\n    'alternatives': [\n      '@param <K> the type of keys',\n      '@param <K> the class of keys',\n      '@param <K> the data type of keys',\n      '@param <K> the category of keys',\n      '@param <K> the identifier type'\n    ]\n  },\n  {\n    'tag': '@param <V> the value type',\n    'alternatives': [\n      '@param <V> the type of values',\n      '@param <V> the class of values',\n      '@param <V> the data type of values',\n      '@param <V> the category of values',\n      '@param <V> the object type'\n    ]\n  },\n  {\n    'tag': '@param iterator the iterator to decorate',\n    'alternatives': [\n      '@param it the iterator to enhance',\n      '@param iter the iterator to augment',\n      '@param source the iterator to modify',\n      '@param original the iterator to embellish',\n      '@param input the iterator to wrap'\n    ]\n  },\n  {\n    'tag': '@return a new unmodifiable map iterator',\n    'alternatives': [\n      '@return a newly created map iterator that is unchangeable',\n      '@return a fresh map iterator that cannot be modified',\n      '@return a brand new map iterator that is read-only',\n      '@return a newly constructed map iterator that is unmodifiable',\n      '@return a recently instantiated map iterator that cannot be altered'\n    ]\n  },\n  {\n    'tag': '@param iterator the iterator to decorate',\n    'alternatives': [\n      '@param it the iterator to enhance',\n      '@param iter the iterator to augment',\n      '@param source the iterator to modify',\n      '@param original the iterator to embellish',\n      '@param input the iterator to wrap'\n    ]\n  },\n  {\n    'tag': '@param <E> the element type',\n    'alternatives': [\n      '@param <E> the type of elements',\n      '@param <T> the type of items',\n      '@param <E> the class of elements',\n      '@param <E> the data type of elements',\n      '@param <E> the category of elements'\n    ]\n  },\n  {\n    'tag': '@return ResettableIterator<E>',\n    'alternatives': [\n      '@return a ResettableIterator of type E',\n      '@return an instance of ResettableIterator with element type E',\n      '@return a ResettableIterator that operates on elements of type E',\n      '@return a ResettableIterator with the element type set to E',\n      '@return a ResettableIterator that supports element type E'\n    ]\n  },\n  {\n    'tag': '@param <E> the element type',\n    'alternatives': [\n      '@param <E> the type of elements',\n      '@param <T> the type of items',\n      '@param <E> the class of elements',\n      '@param <E> the data type of elements',\n      '@param <E> the category of elements'\n    ]\n  },\n  {\n    'tag': '@return Iterator<E>',\n    'alternatives': [\n      '@return an Iterator of type E',\n      '@return an instance of Iterator with element type E',\n      '@return an Iterator that operates on elements of type E',\n      '@return an Iterator with the element type set to E',\n      '@return an Iterator that supports element type E'\n    ]\n  }\n]"