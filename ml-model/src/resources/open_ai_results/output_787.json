"[\n  {\n    'tag': '@return a random long integer greater than or equal to {@code lower} and\\nless than or equal to {@code upper}',\n    'alternatives': [\n      '@return a random long number that is higher or equal to the value of {@code lower} and lower or equal to the value of {@code upper}',\n      '@return a random long integer between {@code lower} and {@code upper}'\n    ]\n  },\n  {\n    'tag': '@throws NotStrictlyPositiveException if {@code len <= 0}',\n    'alternatives': [\n      '@throws NotStrictlyPositiveException when the value of {@code len} is less than or equal to 0',\n      '@throws NotStrictlyPositiveException if the length {@code len} is not strictly positive'\n    ]\n  },\n  {\n    'tag': '@throws NumberIsTooLargeException if {@code lower >= upper}.',\n    'alternatives': [\n      '@throws NumberIsTooLargeException if the value of {@code lower} is greater than or equal to the value of {@code upper}',\n      '@throws NumberIsTooLargeException when {@code lower} is not less than {@code upper}'\n    ]\n  },\n  {\n    'tag': '@return a random integer greater than or equal to {@code lower} and less\\nthan or equal to {@code upper}.',\n    'alternatives': [\n      '@return a random integer between {@code lower} and {@code upper}',\n      '@return a random integer that is higher or equal to the value of {@code lower} and lower or equal to the value of {@code upper}'\n    ]\n  },\n  {\n    'tag': '@throws NumberIsTooLargeException if {@code lower >= upper}.',\n    'alternatives': [\n      '@throws NumberIsTooLargeException if the value of {@code lower} is greater than or equal to the value of {@code upper}',\n      '@throws NumberIsTooLargeException when {@code lower} is not less than {@code upper}'\n    ]\n  },\n  {\n    'tag': '@return a random long integer greater than or equal to {@code lower} and\\nless than or equal to {@code upper}.',\n    'alternatives': [\n      '@return a random long number that is higher or equal to the value of {@code lower} and lower or equal to the value of {@code upper}',\n      '@return a random long integer between {@code lower} and {@code upper}'\n    ]\n  },\n  {\n    'tag': '@throws NotStrictlyPositiveException if {@code mean <= 0}.',\n    'alternatives': [\n      '@throws NotStrictlyPositiveException when the value of {@code mean} is less than or equal to 0',\n      '@throws NotStrictlyPositiveException if the mean value {@code mean} is not strictly positive'\n    ]\n  },\n  {\n    'tag': '@throws NotStrictlyPositiveException if {@code sigma <= 0}.',\n    'alternatives': [\n      '@throws NotStrictlyPositiveException when the value of {@code sigma} is less than or equal to 0',\n      '@throws NotStrictlyPositiveException if the sigma value {@code sigma} is not strictly positive'\n    ]\n  },\n  {\n    'tag': '@throws NotStrictlyPositiveException if {@code mean <= 0}.',\n    'alternatives': [\n      '@throws NotStrictlyPositiveException when the value of {@code mean} is less than or equal to 0',\n      '@throws NotStrictlyPositiveException if the mean value {@code mean} is not strictly positive'\n    ]\n  },\n  {\n    'tag': '@throws NumberIsTooLargeException if {@code lower >= upper}',\n    'alternatives': [\n      '@throws NumberIsTooLargeException if the value of {@code lower} is greater than or equal to the value of {@code upper}',\n      '@throws NumberIsTooLargeException when {@code lower} is not less than {@code upper}'\n    ]\n  },\n  {\n    'tag': '@throws NumberIsTooLargeException if {@code lower >= upper}',\n    'alternatives': [\n      '@throws NumberIsTooLargeException if the value of {@code lower} is greater than or equal to the value of {@code upper}',\n      '@throws NumberIsTooLargeException when {@code lower} is not less than {@code upper}'\n    ]\n  },\n  {\n    'tag': '@throws NumberIsTooLargeException if {@code k > n}.',\n    'alternatives': [\n      '@throws NumberIsTooLargeException if the value of {@code k} is greater than {@code n}',\n      '@throws NumberIsTooLargeException when {@code k} is not less or equal to {@code n}'\n    ]\n  },\n  {\n    'tag': '@throws NotStrictlyPositiveException if {@code k <= 0}.',\n    'alternatives': [\n      '@throws NotStrictlyPositiveException when the value of {@code k} is less than or equal to 0',\n      '@throws NotStrictlyPositiveException if the value of {@code k} is not strictly positive'\n    ]\n  },\n  {\n    'tag': '@throws NumberIsTooLargeException if {@code k > c.size()}.',\n    'alternatives': [\n      '@throws NumberIsTooLargeException if the value of {@code k} is greater than the size of {@code c}',\n      '@throws NumberIsTooLargeException when {@code k} is not less or equal to the size of {@code c}'\n    ]\n  },\n  {\n    'tag': '@throws NotStrictlyPositiveException if {@code k <= 0}.',\n    'alternatives': [\n      '@throws NotStrictlyPositiveException when the value of {@code k} is less than or equal to 0',\n      '@throws NotStrictlyPositiveException if the value of {@code k} is not strictly positive'\n    ]\n  },\n  {\n    'tag': '@throws NotStrictlyPositiveException if row or column dimension is not\\npositive.',\n    'alternatives': [\n      '@throws NotStrictlyPositiveException if the row or column dimension is not positive',\n      '@throws NotStrictlyPositiveException when the dimensions of row or column are not positive'\n    ]\n  },\n  {\n    'tag': '@param s scale parameter (must be positive)',\n    'alternatives': [\n      '@param s scale parameter (should be a positive value)',\n      '@param s scale parameter (needs to be positive)'\n    ]\n  },\n  {\n    'tag': '@param s scale parameter (must be positive)',\n    'alternatives': [\n      '@param s scale parameter (should be a positive value)',\n      '@param s scale parameter (needs to be positive)'\n    ]\n  },\n  {\n    'tag': '@param bandwidth when computing the loess fit at\\na particular point, this fraction of source points closest\\nto the current point is taken into account for computing\\na least-squares regression.\\nA sensible value is usually 0.25 to 0.5, the default value is\\n{@link #DEFAULT_BANDWIDTH}.',\n    'alternatives': [\n      '@param bandwidth when calculating the loess fit at a given point, this percentage of the source points that are closest to the current point is considered for the calculation of the least-squares regression.\\nA reasonable value is typically between 0.25 and 0.5, with a default value of {@link #DEFAULT_BANDWIDTH}.',\n      '@param bandwidth used for the computation of the loess fit at a specific point, this fraction of the source points that are nearest to the current point is taken into consideration for the computation of a least-squares regression.\\nUsually, a sensible value falls between 0.25 and 0.5, and if not specified, the default value is {@link #DEFAULT_BANDWIDTH}.'\n    ]\n  },\n  {\n    'tag': '@param robustnessIters This many robustness iterations are done.\\nA sensible value is usually 0 (just the initial fit without any\\nrobustness iterations) to 4, the default value is\\n{@link #DEFAULT_ROBUSTNESS_ITERS}.',\n    'alternatives': [\n      '@param robustnessIters The number of robustness iterations to be performed.\\nTypically, a recommended range is from 0 (referring to only the initial fit without any robustness iterations) to 4.\\nThe default value is {@link #DEFAULT_ROBUSTNESS_ITERS}.',\n      '@param robustnessIters The number of robustness iterations that will be carried out.\\nUsually, a sensible value falls between 0 (representing the initial fit without any robustness iterations) and 4.\\nBy default, the value is set to {@link #DEFAULT_ROBUSTNESS_ITERS}.'\n    ]\n  },\n  {\n    'tag': '@throws OutOfRangeException if bandwidth does not lie in the interval [0,1].',\n    'alternatives': [\n      '@throws OutOfRangeException if the bandwidth is not within the range [0, 1].',\n      '@throws OutOfRangeException when the bandwidth value is outside the valid interval [0, 1].'\n    ]\n  },\n  {\n    'tag': '@throws NotPositiveException if {@code robustnessIters} is negative.',\n    'alternatives': [\n      '@throws NotPositiveException if the value of {@code robustnessIters} is negative.',\n      '@throws NotPositiveException when {@code robustnessIters} has a negative value.'\n    ]\n  },\n  {\n    'tag': '@param bandwidth when computing the loess fit at\\na particular point, this fraction of source points closest\\nto the current point is taken into account for computing\\na least-squares regression.\\nA sensible value is usually 0.25 to 0.5, the default value is\\n{@link #DEFAULT_BANDWIDTH}.',\n    'alternatives': [\n      '@param bandwidth when calculating the loess fit at a given point, this percentage of the source points that are closest to the current point is considered for the calculation of the least-squares regression.\\nA reasonable value is typically between 0.25 and 0.5, with a default value of {@link #DEFAULT_BANDWIDTH}.',\n      '@param bandwidth used for the computation of the loess fit at a specific point, this fraction of the source points that are nearest to the current point is taken into consideration for the computation of a least-squares regression.\\nUsually, a sensible value falls between 0.25 and 0.5, and if not specified, the default value is {@link #DEFAULT_BANDWIDTH}.'\n    ]\n  },\n  {\n    'tag': '@param robustnessIters This many robustness iterations are done.\\nA sensible value is usually 0 (just the initial fit without any\\nrobustness iterations) to 4, the default value is\\n{@link #DEFAULT_ROBUSTNESS_ITERS}.',\n    'alternatives': [\n      '@param robustnessIters The number of robustness iterations to be performed.\\nTypically, a recommended range is from 0 (referring to only the initial fit without any robustness iterations) to 4.\\nThe default value is {@link #DEFAULT_ROBUSTNESS_ITERS}.',\n      '@param robustnessIters The number of robustness iterations that will be carried out.\\nUsually, a sensible value falls between 0 (representing the initial fit without any robustness iterations) and 4.\\nBy default, the value is set to {@link #DEFAULT_ROBUSTNESS_ITERS}.'\n    ]\n  },\n  {\n    'tag': '@throws NotStrictlyPositiveException if {@code starts < 1}.',\n    'alternatives': [\n      '@throws NotStrictlyPositiveException when the value of {@code starts} is less than 1',\n      '@throws NotStrictlyPositiveException if the value of {@code starts} is not strictly positive'\n    ]\n  }\n]"