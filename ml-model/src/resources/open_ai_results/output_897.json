"output=[\n  {\n    'tag': '@param max the upper bound for the interval',\n    'alternatives': [\n      '@param max the upper limit for the interval',\n      '@param max the highest value for the interval',\n      '@param max the maximum value for the interval',\n      '@param max the top bound for the interval',\n      '@param max the upper boundary for the interval'\n    ]\n  },\n  {\n    'tag': '@return the value of integral',\n    'alternatives': [\n      '@return the integral value',\n      '@return the result of the integration',\n      '@return the calculated integral',\n      '@return the integral's value',\n      '@return the value obtained from the integration'\n    ]\n  },\n  {\n    'tag': '@throws TooManyEvaluationsException if the maximum number of function\\nevaluations is exceeded',\n    'alternatives': [\n      '@throws TooManyEvaluationsException when the maximum amount of function\\nassessments is surpassed',\n      '@throws TooManyEvaluationsException if the number of function evaluations\\nexceeds the maximum',\n      '@throws TooManyEvaluationsException if the limit on function evaluations is surpassed',\n      '@throws TooManyEvaluationsException if the maximum number of function\\nevaluations is crossed',\n      '@throws TooManyEvaluationsException in case the count of function assessments\\nreaches the maximum allowed value'\n    ]\n  },\n  {\n    'tag': '@throws MaxCountExceededException if the maximum iteration count is exceeded\\nor the integrator detects convergence problems otherwise',\n    'alternatives': [\n      '@throws MaxCountExceededException if the maximum iteration count is surpassed\\nor if the integrator detects problems of convergence in any other case',\n      '@throws MaxCountExceededException in case the maximum iteration count is surpassed\\nor the integrator detects convergence issues otherwise',\n      '@throws MaxCountExceededException if the iteration count surpasses the maximum\\nor if convergence issues are detected by the integrator',\n      '@throws MaxCountExceededException if the maximum iteration count is exceeded\\nor if the integrator encounters convergence problems otherwise',\n      '@throws MaxCountExceededException when the maximum iteration count is surpassed\\nor if the integrator detects convergence issues in any other situation'\n    ]\n  },\n  {\n    'tag': '@return number of function evaluations',\n    'alternatives': [\n      '@return count of function evaluations',\n      '@return the number of assessments of the function',\n      '@return the total amount of function evaluations',\n      '@return the count of function assessments',\n      '@return the quantity of function evaluations'\n    ]\n  },\n  {\n    'tag': '@return number of iterations',\n    'alternatives': [\n      '@return count of iterations',\n      '@return the number of iterations performed',\n      '@return the total amount of iterations',\n      '@return the count of iterations',\n      '@return the quantity of iterations'\n    ]\n  },\n  {\n    'tag': '@param baseIntegrator integrator holding integration parameters',\n    'alternatives': [\n      '@param baseIntegrator integrator that contains integration parameters',\n      '@param baseIntegrator integrator with integration parameters',\n      '@param baseIntegrator integrator that holds integration parameters',\n      '@param baseIntegrator integrator containing integration parameters',\n      '@param baseIntegrator integrator which stores integration parameters'\n    ]\n  },\n  {\n    'tag': '@param n the stage of 1/2 refinement, n = 0 is no refinement',\n    'alternatives': [\n      '@param n the step of 1/2 refinement, n = 0 means no refinement',\n      '@param n the refinement stage of 1/2, n = 0 implies no refinement',\n      '@param n the 1/2 refinement stage, where n = 0 indicates no refinement',\n      '@param n the 1/2 refinement level, n = 0 denotes no refinement',\n      '@param n the 1/2 refinement step, with n = 0 signifying no refinement'\n    ]\n  },\n  {\n    'tag': '@return the value of n-th stage integral',\n    'alternatives': [\n      '@return the integral value of the n-th step',\n      '@return the result of the n-th stage integration',\n      '@return the calculated integral value of stage n',\n      '@return the integral value at the n-th refinement stage',\n      '@return the value obtained from the integral at the n-th stage'\n    ]\n  },\n  {\n    'tag': '@throws TooManyEvaluationsException if the maximal number of evaluations\\nis exceeded.',\n    'alternatives': [\n      '@throws TooManyEvaluationsException when the maximum number of assessments\\nis surpassed.',\n      '@throws TooManyEvaluationsException if the limit on evaluations is surpassed.',\n      '@throws TooManyEvaluationsException if the number of evaluations exceeds\\nthe maximum.',\n      '@throws TooManyEvaluationsException if the maximal number of evaluations\\nis crossed.',\n      '@throws TooManyEvaluationsException in case the count of assessments\\nreaches the maximum allowed value.'\n    ]\n  },\n  {\n    'tag': '@param relativeAccuracy relative accuracy of the result',\n    'alternatives': [\n      '@param relativeAccuracy accuracy relative to the result',\n      '@param relativeAccuracy accuracy as a ratio of the result',\n      '@param relativeAccuracy accuracy in relation to the result',\n      '@param relativeAccuracy accuracy represented as a fraction of the result',\n      '@param relativeAccuracy accuracy defined with respect to the result'\n    ]\n  },\n  {\n    'tag': '@param absoluteAccuracy absolute accuracy of the result',\n    'alternatives': [\n      '@param absoluteAccuracy accuracy absolute to the result',\n      '@param absoluteAccuracy accuracy as an absolute value of the result',\n      '@param absoluteAccuracy accuracy in an absolute sense to the result',\n      '@param absoluteAccuracy accuracy defined as an absolute amount with respect to the result',\n      '@param absoluteAccuracy accuracy described with respect to the result'\n    ]\n  },\n  {\n    'tag': '@param minimalIterationCount minimum number of iterations',\n    'alternatives': [\n      '@param minimalIterationCount least amount of iterations',\n      '@param minimalIterationCount minimum count of iterations',\n      '@param minimalIterationCount smallest number of iterations',\n      '@param minimalIterationCount lowest iteration count',\n      '@param minimalIterationCount minimum iteration quantity'\n    ]\n  },\n  {\n    'tag': '@throws NumberIsTooSmallException if maximal number of iterations\\nis lesser than or equal to the minimal number of iterations',\n    'alternatives': [\n      '@throws NumberIsTooSmallException when the maximum number of iterations\\nis smaller or equal to the minimum number of iterations',\n      '@throws NumberIsTooSmallException if the maximum iteration count is less\\nthan or equal to the minimum count of iterations',\n      '@throws NumberIsTooSmallException if the maximum iteration value is smaller\\nthan or equal to the minimal iteration value',\n      '@throws NumberIsTooSmallException if the maximal iteration count is lesser\\nthan or equal to the minimal iteration count',\n      '@throws NumberIsTooSmallException in case the maximum number of iterations\\nis lesser or equal to the minimum number of iterations'\n    ]\n  },\n  {\n    'tag': '@param minimalIterationCount minimum number of iterations',\n    'alternatives': [\n      '@param minimalIterationCount least amount of iterations',\n      '@param minimalIterationCount minimum count of iterations',\n      '@param minimalIterationCount smallest number of iterations',\n      '@param minimalIterationCount lowest iteration count',\n      '@param minimalIterationCount minimum iteration quantity'\n    ]\n  },\n  {\n    'tag': '@throws NumberIsTooSmallException if maximal number of iterations\\nis lesser than or equal to the minimal number of iterations',\n    'alternatives': [\n      '@throws NumberIsTooSmallException when the maximum number of iterations\\nis smaller or equal to the minimum number of iterations',\n      '@throws NumberIsTooSmallException if the maximum iteration count is less\\nthan or equal to the minimum count of iterations',\n      '@throws NumberIsTooSmallException if the maximum iteration value is smaller\\nthan or equal to the minimal iteration value',\n      '@throws NumberIsTooSmallException if the maximal iteration count is lesser\\nthan or equal to the minimal iteration count',\n      '@throws NumberIsTooSmallException in case the maximum number of iterations\\nis lesser or equal to the minimum number of iterations'\n    ]\n  },\n  {\n    'tag': '@param x Abscissa for which the function value should be computed.',\n    'alternatives': [\n      '@param x Abscissa at which the function value should be calculated.',\n      '@param x Abscissa to compute the function value.',\n      '@param x Abscissa used to determine the function value.',\n      '@param x Abscissa used in the calculation of the function value.',\n      '@param x Abscissa that is used to find the value of the function.'\n    ]\n  },\n  {\n    'tag': '@param y Ordinate for which the function value should be computed.',\n    'alternatives': [\n      '@param y Ordinate at which the function value should be calculated.',\n      '@param y Ordinate to compute the function value.',\n      '@param y Ordinate used to determine the function value.',\n      '@param y Ordinate used in the calculation of the function value.',\n      '@param y Ordinate that is used to find the value of the function.'\n    ]\n  },\n  {\n    'tag': '@return the value.',\n    'alternatives': [\n      '@return the result.',\n      '@return the computed value.',\n      '@return the determined value.',\n      '@return the obtained value.',\n      '@return the value obtained.'\n    ]\n  },\n  {\n    'tag': '@return the derivative function',\n    'alternatives': [\n      '@return the function derivative',\n      '@return the result of differentiating the function',\n      '@return the calculated derivative of the function',\n      '@return the function's derivative',\n      '@return the value obtained by differentiating the function'\n    ]\n  },\n  {\n    'tag': '@return the derivative function',\n    'alternatives': [\n      '@return the function derivative',\n      '@return the result of differentiating the function',\n      '@return the calculated derivative of the function',\n      '@return the function's derivative',\n      '@return the value obtained by differentiating the function'\n    ]\n  },\n  {\n    'tag': '@param x the point for which the function value should be computed',\n    'alternatives': [\n      '@param x the point at which the function value should be calculated',\n      '@param x the point to compute the function value',\n      '@param x the point used to determine the function value',\n      '@param x the point used in the calculation of the function value',\n      '@param x the point that is used to find the value of the function'\n    ]\n  },\n  {\n    'tag': '@return the value',\n    'alternatives': [\n      '@return the result',\n      '@return the computed value',\n      '@return the determined value',\n      '@return the obtained value',\n      '@return the value obtained'\n    ]\n  },\n  {\n    'tag': '@param point Point at which the objective function must be evaluated.',\n    'alternatives': [\n      '@param point Point to evaluate the objective function.',\n      '@param point Point used to compute the objective function.',\n      '@param point Point used for determining the objective function.',\n      '@param point Point used in the calculation of the objective function.',\n      '@param point Point at which the objective function value should be obtained.'\n    ]\n  },\n  {\n    'tag': '@return the objective function value at specified point.',\n    'alternatives': [\n      '@return the value of the objective function at the specified point.',\n      '@return the result obtained from evaluating the objective function at the point.',\n      '@return the value calculated from the objective function at the specified point.',\n      '@return the determined objective function value at the indicated point.',\n      '@return the objective function value obtained at the specified point.'\n    ]\n  }\n]"