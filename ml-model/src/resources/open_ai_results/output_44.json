"output = [\n  {\n    'tag': '@return the value returned by {@link FieldMatrixPreservingVisitor#end()} at the end\\nof the walk',\n    'alternatives': [\n      '@return the result obtained by {@link FieldMatrixPreservingVisitor#end()} at the conclusion\\nof the traversal',\n      '@return the value that is returned by {@link FieldMatrixPreservingVisitor#end()} when the walk is finished',\n      '@return the returned value from {@link FieldMatrixPreservingVisitor#end()} at the end\\nof the traversal',\n      '@return the value returned by {@link FieldMatrixPreservingVisitor#end()} after completing the walk',\n      '@return the outcome retrieved from {@link FieldMatrixPreservingVisitor#end()} at the end\\nof the traversal'\n    ]\n  },\n  {\n    'tag': '@param visitor visitor used to process all matrix entries',\n    'alternatives': [\n      '@param visitor the visitor that is utilized to handle each entry in the matrix',\n      '@param visitor the visitor that is employed to process all entries of the matrix',\n      '@param visitor the visitor that is used to operate on every matrix entry',\n      '@param visitor the visitor used for processing all entries in the matrix',\n      '@param visitor the visitor that handles the processing of all matrix entries'\n    ]\n  },\n  {\n    'tag': '@param startRow Initial row index',\n    'alternatives': [\n      '@param startRow the starting row index',\n      '@param startRow the index of the first row',\n      '@param startRow the row index from which to start',\n      '@param startRow the initial row position',\n      '@param startRow the row index that begins the operation'\n    ]\n  },\n  {\n    'tag': '@param endRow Final row index (inclusive)',\n    'alternatives': [\n      '@param endRow the final row index (inclusive)',\n      '@param endRow the last row index (inclusive)',\n      '@param endRow the row index that marks the end (inclusive)',\n      '@param endRow the concluding row index (inclusive)',\n      '@param endRow the uppermost row index (inclusive)'\n    ]\n  },\n  {\n    'tag': '@param startColumn Initial column index',\n    'alternatives': [\n      '@param startColumn the starting column index',\n      '@param startColumn the index of the first column',\n      '@param startColumn the column index from which to start',\n      '@param startColumn the initial column position',\n      '@param startColumn the column index that begins the operation'\n    ]\n  },\n  {\n    'tag': '@param endColumn Final column index',\n    'alternatives': [\n      '@param endColumn the final column index',\n      '@param endColumn the last column index',\n      '@param endColumn the column index that marks the end',\n      '@param endColumn the concluding column index',\n      '@param endColumn the rightmost column index'\n    ]\n  },\n  {\n    'tag': '@throws OutOfRangeException if the indices are not valid.',\n    'alternatives': [\n      '@throws OutOfRangeException if the indices provided are invalid.',\n      '@throws OutOfRangeException when the indices are out of range.',\n      '@throws OutOfRangeException if the indices are not within the acceptable limits.',\n      '@throws OutOfRangeException if the indices fall outside the valid range.',\n      '@throws OutOfRangeException if the indices do not meet the required criteria.'\n    ]\n  },\n  {\n    'tag': '@return the value returned by {@link FieldMatrixChangingVisitor#end()} at the end\\nof the walk',\n    'alternatives': [\n      '@return the result obtained by {@link FieldMatrixChangingVisitor#end()} at the conclusion\\nof the traversal',\n      '@return the value that is returned by {@link FieldMatrixChangingVisitor#end()} when the walk is finished',\n      '@return the returned value from {@link FieldMatrixChangingVisitor#end()} at the end\\nof the traversal',\n      '@return the value returned by {@link FieldMatrixChangingVisitor#end()} after completing the walk',\n      '@return the outcome retrieved from {@link FieldMatrixChangingVisitor#end()} at the end\\nof the traversal'\n    ]\n  },\n  {\n    'tag': '@param visitor visitor used to process all matrix entries',\n    'alternatives': [\n      '@param visitor the visitor that is utilized to handle each entry in the matrix',\n      '@param visitor the visitor that is employed to process all entries of the matrix',\n      '@param visitor the visitor that is used to operate on every matrix entry',\n      '@param visitor the visitor used for processing all entries in the matrix',\n      '@param visitor the visitor that handles the processing of all matrix entries'\n    ]\n  },\n  {\n    'tag': '@param startRow Initial row index',\n    'alternatives': [\n      '@param startRow the starting row index',\n      '@param startRow the index of the first row',\n      '@param startRow the row index from which to start',\n      '@param startRow the initial row position',\n      '@param startRow the row index that begins the operation'\n    ]\n  },\n  {\n    'tag': '@param endRow Final row index (inclusive)',\n    'alternatives': [\n      '@param endRow the final row index (inclusive)',\n      '@param endRow the last row index (inclusive)',\n      '@param endRow the row index that marks the end (inclusive)',\n      '@param endRow the concluding row index (inclusive)',\n      '@param endRow the uppermost row index (inclusive)'\n    ]\n  },\n  {\n    'tag': '@param startColumn Initial column index',\n    'alternatives': [\n      '@param startColumn the starting column index',\n      '@param startColumn the index of the first column',\n      '@param startColumn the column index from which to start',\n      '@param startColumn the initial column position',\n      '@param startColumn the column index that begins the operation'\n    ]\n  },\n  {\n    'tag': '@param endColumn Final column index (inclusive)',\n    'alternatives': [\n      '@param endColumn the final column index (inclusive)',\n      '@param endColumn the last column index (inclusive)',\n      '@param endColumn the column index that marks the end (inclusive)',\n      '@param endColumn the concluding column index (inclusive)',\n      '@param endColumn the rightmost column index (inclusive)'\n    ]\n  },\n  {\n    'tag': '@throws OutOfRangeException if the indices are not valid.',\n    'alternatives': [\n      '@throws OutOfRangeException if the indices provided are invalid.',\n      '@throws OutOfRangeException when the indices are out of range.',\n      '@throws OutOfRangeException if the indices are not within the acceptable limits.',\n      '@throws OutOfRangeException if the indices fall outside the valid range.',\n      '@throws OutOfRangeException if the indices do not meet the required criteria.'\n    ]\n  }\n]"