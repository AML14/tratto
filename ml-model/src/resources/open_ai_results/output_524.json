"output=[\n  {\n    'tag': '@return an unmodifiable iterator containing all elements of the original\\n    iterator that were of the requested type',\n    'alternatives': [\n      '@return a read-only iterator containing all elements of the original iterator\\nthat matched the requested type',\n      '@return an iterator that is not modifiable and contains all the elements of the\\noriginal iterator that are of the requested type',\n      '@return an iterator that cannot be modified and includes all elements of the\\noriginal iterator that were of the specified type'\n    ]\n  },\n  {\n    'tag': '@throws NoSuchElementException if no element in {@code iterator} matches\\n    the given predicate',\n    'alternatives': [\n      '@throws NoSuchElementException if there are no elements in the {@code iterator}\\nthat satisfy the given condition',\n      '@throws NoSuchElementException when no element in {@code iterator} meets the\\nspecified predicate',\n      '@throws NoSuchElementException if the given predicate is not satisfied by any\\nelement in the {@code iterator}',\n    ]\n  },\n  {\n    'tag': '@param position position of the element to return',\n    'alternatives': [\n      '@param position the index of the element to be retrieved',\n      '@param position the position from which to obtain the element',\n      '@param position indicates the position of the desired element'\n    ]\n  },\n  {\n    'tag': '@return the element at the specified position in {@code iterator}',\n    'alternatives': [\n      '@return the element located at the given position in the {@code iterator}',\n      '@return the element found at the specified index in the {@code iterator}',\n      '@return the element at the position specified in the {@code iterator}'\n    ]\n  },\n  {\n    'tag': '@param defaultValue the default value to return if the iterator is empty\\n    or if {@code position} is greater than the number of elements\\n    remaining in {@code iterator}',\n    'alternatives': [\n      '@param defaultValue the value to return if the iterator is empty or if the\\nposition is greater than the remaining number of elements',\n      '@param defaultValue the value to be returned in case the iterator is empty\\nor if the {@code position} is beyond the number of remaining elements',\n      '@param defaultValue the default value to return if the iterator is empty or if\\nthe {@code position} exceeds the remaining elements count',\n    ]\n  },\n  {\n    'tag': '@return the element at the specified position in {@code iterator} or\\n    {@code defaultValue} if {@code iterator} produces fewer than\\n    {@code position + 1} elements.',\n    'alternatives': [\n      '@return the element found at the given position in the {@code iterator}, or\\nthe {@code defaultValue} if the {@code iterator} provides less than\\n{@code position + 1} elements.',\n      '@return the element at the specified position in the {@code iterator}, or\\nthe {@code defaultValue} if the {@code iterator} yields less than\\n{@code position + 1} elements.',\n      '@return the element located at the given position in the {@code iterator}. If\\nthe {@code iterator} produces fewer than {@code position + 1} elements,\\nthe {@code defaultValue} is returned.'\n    ]\n  },\n  {\n    'tag': '@param defaultValue the default value to return if the iterator is empty',\n    'alternatives': [\n      '@param defaultValue the value to return if the iterator is empty',\n      '@param defaultValue the value to be returned in case the iterator is empty',\n      '@param defaultValue the default value that is returned if the iterator is empty'\n    ]\n  },\n  {\n    'tag': '@return the next element of {@code iterator} or the default value',\n    'alternatives': [\n      '@return the following element of the {@code iterator} or the default value',\n      '@return the subsequent element of the {@code iterator} or the default value',\n      '@return the element that comes after in the {@code iterator}, or the default value'\n    ]\n  },\n  {\n    'tag': '@return the last element of {@code iterator}',\n    'alternatives': [\n      '@return the final element of the {@code iterator}',\n      '@return the ultimate element of the {@code iterator}',\n      '@return the last element in the {@code iterator}'\n    ]\n  },\n  {\n    'tag': '@throws NoSuchElementException if the iterator is empty',\n    'alternatives': [\n      '@throws NoSuchElementException when the iterator has no elements',\n      '@throws NoSuchElementException if there are no elements in the iterator',\n      '@throws NoSuchElementException if the iterator does not contain any elements'\n    ]\n  },\n  {\n    'tag': '@return the last element of {@code iterator}',\n    'alternatives': [\n      '@return the last element in the {@code iterator}',\n      '@return the ultimate element of the {@code iterator}',\n      '@return the final element of the {@code iterator}'\n    ]\n  },\n  {\n    'tag': '@return the number of elements the iterator was advanced',\n    'alternatives': [\n      '@return the count of elements the iterator has been moved forward',\n      '@return the number of elements the iterator has been progressed',\n      '@return the total elements count the iterator has been advanced'\n    ]\n  },\n  {\n    'tag': '@param iterator the iterator to limit',\n    'alternatives': [\n      '@param iterator the iterator to restrict',\n      '@param iterator the iterator that requires limitation',\n      '@param iterator the iterator that needs to be constrained'\n    ]\n  },\n  {\n    'tag': '@param limitSize the maximum number of elements in the returned iterator',\n    'alternatives': [\n      '@param limitSize the maximum elements count in the resulting iterator',\n      '@param limitSize the highest number of elements in the iterator to be returned',\n      '@param limitSize the upper limit on the number of elements in the returned iterator'\n    ]\n  },\n  {\n    'tag': '@param iterator the iterator to remove and return elements from',\n    'alternatives': [\n      '@param iterator the iterator from which elements are removed and returned',\n      '@param iterator the iterator that provides elements to remove and return',\n      '@param iterator the iterator that is the source of elements to be removed and returned'\n    ]\n  },\n  {\n    'tag': '@return an iterator that removes and returns elements from the\\n    supplied iterator',\n    'alternatives': [\n      '@return an iterator that eliminates and retrieves elements from the\\nsupplied iterator',\n      '@return an iterator that deletes and retrieves elements from the\\nprovided iterator',\n      '@return an iterator that erases and returns elements from the\\ninput iterator'\n    ]\n  },\n  {\n    'tag': '@param iterator the backing iterator. The {@link PeekingIterator} assumes\\n    ownership of this iterator, so users should cease making direct calls\\n    to it after calling this method.',\n    'alternatives': [\n      '@param iterator the original iterator. The {@link PeekingIterator} takes\\ncontrol of this iterator, so users must stop using it directly\\nafter invoking this method.',\n      '@param iterator the underlying iterator. The {@link PeekingIterator} takes\\npossession of this iterator and hence users should avoid direct\\ninvocation of it after using this method.',\n      '@param iterator the main iterator. The {@link PeekingIterator} acquires\\npossession of this iterator, so users must not make direct\\ninvocations to it after calling this method.'\n    ]\n  },\n  {\n    'tag': '@return a peeking iterator backed by that iterator. Apart from the\\n    additional {@link PeekingIterator#peek()} method, this iterator behaves\\n    exactly the same as {@code iterator}.',\n    'alternatives': [\n      '@return a peekable iterator supported by the given iterator. Besides the\\nextra {@link PeekingIterator#peek()} method, this iterator acts in\\nthe same way as {@code iterator}.',\n      '@return a look-ahead iterator based on the provided iterator. Other than\\nthe additional {@link PeekingIterator#peek()} operation, this\\niterator operates identically to {@code iterator}.',\n      '@return an iterator with look-ahead functionality, backed by the supplied\\niterator. Except for the extra {@link PeekingIterator#peek()}\\nmethod, this iterator has the same behavior as {@code iterator}.'\n    ]\n  },\n  {\n    'tag': '@param collection the collection to constrain',\n    'alternatives': [\n      '@param collection the collection to restrict',\n      '@param collection the collection that requires constraint',\n      '@param collection the collection that needs to be limited'\n    ]\n  },\n  {\n    'tag': '@param constraint the constraint that validates added elements',\n    'alternatives': [\n      '@param constraint the condition that verifies the added elements',\n      '@param constraint the restriction that checks the added elements',\n      '@param constraint the rule that validates the elements being added'\n    ]\n  },\n  {\n    'tag': '@return a constrained view of the collection',\n    'alternatives': [\n      '@return a limited perspective of the collection',\n      '@return a restricted representation of the collection',\n      '@return a controlled view of the collection'\n    ]\n  },\n  {\n    'tag': '@param set the set to constrain',\n    'alternatives': [\n      '@param set the set to restrict',\n      '@param set the set that requires constraint',\n      '@param set the set that needs to be limited'\n    ]\n  },\n  {\n    'tag': '@param constraint the constraint that validates added elements',\n    'alternatives': [\n      '@param constraint the condition that verifies the added elements',\n      '@param constraint the restriction that checks the added elements',\n      '@param constraint the rule that validates the elements being added'\n    ]\n  }\n]"