"output=[\n  {\n    'tag': '@return absolute value of instance',\n    'alternatives': [\n      '@return absolute magnitude of instance',\n      '@return absolute valency of instance',\n      '@return instance\\'s absolute value',\n      '@return instance value, always positive',\n      '@return value of instance, regardless of sign'\n    ]\n  },\n  {\n    'tag': '@return true if instance is infinite',\n    'alternatives': [\n      '@return true if instance is unbounded',\n      '@return true if instance has no limit',\n      '@return true if instance goes on forever',\n      '@return true if instance is limitless',\n      '@return true if instance has infinite value'\n    ]\n  },\n  {\n    'tag': '@return true if instance is not a number',\n    'alternatives': [\n      '@return true if instance is NaN',\n      '@return true if instance is undefined',\n      '@return true if instance is not numeric',\n      '@return true if instance is not a numeral',\n      '@return true if instance is not a value'\n    ]\n  },\n  {\n    'tag': '@return true if instance is equal to zero',\n    'alternatives': [\n      '@return true if instance is zero',\n      '@return true if instance is null',\n      '@return true if instance is nothing',\n      '@return true if instance is naught',\n      '@return true if instance is nil'\n    ]\n  },\n  {\n    'tag': '@param other object to check instance against',\n    'alternatives': [\n      '@param another object to compare instance with',\n      '@param object to validate instance against',\n      '@param object to test instance against',\n      '@param object to match instance against',\n      '@param object to inspect instance with'\n    ]\n  },\n  {\n    'tag': '@return true if instance is equal to x and neither are NaN, false otherwise',\n    'alternatives': [\n      '@return true if instance and x are numerically equal, false otherwise',\n      '@return true if instance and x have the same value, false otherwise',\n      '@return true if instance is identical to x, false otherwise',\n      '@return true if instance and x are equivalent, false otherwise',\n      '@return true if instance has the same numerical value as x, false otherwise'\n    ]\n  },\n  {\n    'tag': '@return a hash code value for this object',\n    'alternatives': [\n      '@return hash value for this object',\n      '@return object\\'s hash code',\n      '@return object\\'s hashing value',\n      '@return object\\'s unique identifier',\n      '@return object\\'s hash key'\n    ]\n  },\n  {\n    'tag': '@param x number to check instance against',\n    'alternatives': [\n      '@param x number to compare instance with',\n      '@param x number to validate instance against',\n      '@param x number to test instance against',\n      '@param x number to match instance against',\n      '@param x number to inspect instance with'\n    ]\n  },\n  {\n    'tag': '@return true if instance is not equal to x and neither are NaN, false otherwise',\n    'alternatives': [\n      '@return true if instance and x are numerically unequal, false otherwise',\n      '@return true if instance and x have different values, false otherwise',\n      '@return true if instance is not identical to x, false otherwise',\n      '@return true if instance and x are not equivalent, false otherwise',\n      '@return true if instance has a different numerical value than x, false otherwise'\n    ]\n  },\n  {\n    'tag': '@param a first instance in comparison',\n    'alternatives': [\n      '@param a first value to compare',\n      '@param a initial value for comparison',\n      '@param a starting point for comparison',\n      '@param a value to be compared first',\n      '@param a primary object for comparison'\n    ]\n  },\n  {\n    'tag': '@param b second instance in comparison',\n    'alternatives': [\n      '@param b second value to compare',\n      '@param b final value for comparison',\n      '@param b endpoint for comparison',\n      '@param b value to be compared second',\n      '@param b secondary object for comparison'\n    ]\n  },\n  {\n    'tag': '@return -1 if a<b, 1 if a>b and 0 if a==b\\n Note this method does not properly handle NaNs or numbers with different precision.',\n    'alternatives': [\n      '@return -1 if a is less than b, 1 if a is greater than b, and 0 if a equals b\\n This method does not handle NaNs or numbers with different precision correctly.',\n      '@return -1 if a is smaller than b, 1 if a is larger than b, and 0 if a is equal to b\\n Note that this method does not handle NaNs or numbers with different precision properly.',\n      '@return -1 if a is lesser than b, 1 if a is greater than b, and 0 if a is equivalent to b\\n Please note that this method does not accurately handle NaNs or numbers with different precision.',\n      '@return -1 if a is lower than b, 1 if a is higher than b, and 0 if a is equal to b\\n This method does not handle NaNs or numbers with different precision correctly.',\n      '@return -1 if a is beneath b, 1 if a is above b, and 0 if a is same as b\\n Note that this method does not properly handle NaNs or numbers with different precision.'\n    ]\n  },\n  {\n    'tag': '@return rounded value',\n    'alternatives': [\n      '@return approximate value',\n      '@return value rounded to nearest',\n      '@return value after rounding',\n      '@return value with rounding',\n      '@return rounded-off value'\n    ]\n  },\n  {\n    'tag': '@param d divisor',\n    'alternatives': [\n      '@param d factor',\n      '@param d dividend',\n      '@param d quotient',\n      '@param d split',\n      '@param d partition'\n    ]\n  },\n  {\n    'tag': '@return this less n &times; d, where n is the integer closest to this/d',\n    'alternatives': [\n      '@return this minus n times d, where n is the integer nearest to this/d',\n      '@return this subtracted by n multiplied by d, where n is the closest integer to this/d',\n      '@return difference between this and n times d, where n is the integer closest to this/d',\n      '@return this decreased by n times d, where n is the integer closest to this/d',\n      '@return this minus n multiplied by d, where n is the closest integer to this/d'\n    ]\n  },\n  {\n    'tag': '@param rmode rounding mode to use',\n    'alternatives': [\n      '@param rmode mode of rounding to utilize',\n      '@param rmode method of rounding to apply',\n      '@param rmode type of rounding to employ',\n      '@param rmode manner of rounding to use',\n      '@param rmode way of rounding to implement'\n    ]\n  },\n  {\n    'tag': '@return truncated value',\n    'alternatives': [\n      '@return simplified value',\n      '@return value after truncation',\n      '@return roughly estimated value',\n      '@return integer part of value',\n      '@return rounded-down value'\n    ]\n  },\n  {\n    'tag': '@return converted number',\n    'alternatives': [\n      '@return transformed value',\n      '@return number after conversion',\n      '@return value in different form',\n      '@return modified numeric value',\n      '@return alternate numerical representation'\n    ]\n  },\n  {\n    'tag': '@return integer base 10000 logarithm',\n    'alternatives': [\n      '@return log value in base 10000',\n      '@return base 10000 logarithm result',\n      '@return logarithmic value with base 10000',\n      '@return exponent of 10000 in integer form',\n      '@return power to which 10000 is raised to get the value'\n    ]\n  },\n  {\n    'tag': '@param e desired power',\n    'alternatives': [\n      '@param e required exponent',\n      '@param e wanted potency',\n      '@param e expected power',\n      '@param e preferred degree',\n      '@param e specified index'\n    ]\n  },\n  {\n    'tag': '@return 10000<sup>e</sup>',\n    'alternatives': [\n      '@return 10000 raised to the power of e',\n      '@return 10000 to the exponent e',\n      '@return result of 10000 raised to e',\n      '@return value obtained from 10000 to the power of e',\n      '@return 10000 to the e-th power'\n    ]\n  },\n  {\n    'tag': '@return integer base 10 logarithm',\n    'alternatives': [\n      '@return log value in base 10',\n      '@return base 10 logarithm result',\n      '@return logarithmic value with base 10',\n      '@return exponent of 10 in integer form',\n      '@return power to which 10 is raised to get the value'\n    ]\n  },\n  {\n    'tag': '@param e desired power',\n    'alternatives': [\n      '@param e required exponent',\n      '@param e wanted potency',\n      '@param e expected power',\n      '@param e preferred degree',\n      '@param e specified index'\n    ]\n  }\n]"