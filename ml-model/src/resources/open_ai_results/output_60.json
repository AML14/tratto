"output=[\n  {\n    'tag': '@param startPoint First point of the simplex.',\n    'alternatives': [\n      '@param startPoint The initial point of the simplex.',\n      '@param startPoint The starting point of the simplex.',\n      '@param startPoint The first point in the simplex.',\n      '@param startPoint The point at the beginning of the simplex.',\n      '@param startPoint The origin point of the simplex.'\n    ]\n  },\n  {\n    'tag': '@throws DimensionMismatchException if the start point does not match\\nsimplex dimension.',\n    'alternatives': [\n      '@throws DimensionMismatchException when the start point does not have the same\\nsimplex dimension.',\n      '@throws DimensionMismatchException if the dimension of the start point does not match the\\nsimplex.',\n      '@throws DimensionMismatchException if the dimension of the start point is not compatible\\nwith the simplex.',\n      '@throws DimensionMismatchException if the start point has a different dimension than\\nthe simplex.',\n      '@throws DimensionMismatchException if the start point's dimension does not match the\\nsimplex.'\n    ]\n  },\n  {\n    'tag': '@param evaluationFunction Evaluation function.',\n    'alternatives': [\n      '@param evaluationFunction A function used for evaluation.',\n      '@param evaluationFunction The function to be evaluated.',\n      '@param evaluationFunction The function for evaluating.',\n      '@param evaluationFunction The function used to evaluate.',\n      '@param evaluationFunction The function that performs the evaluation.'\n    ]\n  },\n  {\n    'tag': '@param comparator Comparator to use to sort simplex vertices from best to worst.',\n    'alternatives': [\n      '@param comparator The comparator used to order simplex vertices from best to worst.',\n      '@param comparator The comparator for sorting simplex vertices from best to worst.',\n      '@param comparator The comparator that sorts simplex vertices from best to worst.',\n      '@param comparator The comparator to arrange simplex vertices from best to worst.',\n      '@param comparator The comparator responsible for sorting simplex vertices from best to worst.'\n    ]\n  },\n  {\n    'tag': '@throws org.apache.commons.math3.exception.TooManyEvaluationsException if the maximal number of evaluations is exceeded.',\n    'alternatives': [\n      '@throws org.apache.commons.math3.exception.TooManyEvaluationsException when the maximum number of evaluations is\\nreached/exceeded.',\n      '@throws org.apache.commons.math3.exception.TooManyEvaluationsException if the number of evaluations exceeds\\nthe limit.',\n      '@throws org.apache.commons.math3.exception.TooManyEvaluationsException if the maximum number of evaluations\\nis surpassed.',\n      '@throws org.apache.commons.math3.exception.TooManyEvaluationsException if the number of evaluations goes\\nbeyond the limit.',\n      '@throws org.apache.commons.math3.exception.TooManyEvaluationsException when the evaluation count surpasses the\\nmaximum.'\n    ]\n  },\n  {\n    'tag': '@param pointValuePair Point to insert.',\n    'alternatives': [\n      '@param pointValuePair The point to be inserted.',\n      '@param pointValuePair The point that will be added.',\n      '@param pointValuePair The point to insert.',\n      '@param pointValuePair The point to include.',\n      '@param pointValuePair The pair of point to be inserted.'\n    ]\n  },\n  {\n    'tag': '@param comparator Comparator to use for sorting the simplex vertices\\nfrom best to worst.',\n    'alternatives': [\n      '@param comparator The comparator for sorting the simplex vertices from best to worst.',\n      '@param comparator The comparator used to sort the simplex vertices from best to worst.',\n      '@param comparator The comparator responsible for arranging the simplex vertices from best to worst.',\n      '@param comparator The comparator to sort the simplex vertices from best to worst.',\n      '@param comparator The comparator that orders the simplex vertices from best to worst.'\n    ]\n  },\n  {\n    'tag': '@return all the simplex points.',\n    'alternatives': [\n      '@return the set of all simplex points.',\n      '@return the collection of all simplex points.',\n      '@return all the points in the simplex.',\n      '@return the complete set of simplex points.',\n      '@return the entirety of simplex points.'\n    ]\n  },\n  {\n    'tag': '@param index Location.',\n    'alternatives': [\n      '@param index The position.',\n      '@param index The index of the location.',\n      '@param index The specific position.',\n      '@param index The place.',\n      '@param index The spot.'\n    ]\n  },\n  {\n    'tag': '@return the point at location {@code index}.',\n    'alternatives': [\n      '@return the point located at index {@code index}.',\n      '@return the point associated with the position {@code index}.',\n      '@return the point corresponding to the location specified by {@code index}.',\n      '@return the point identified by the index {@code index}.',\n      '@return the point found at location {@code index}.'\n    ]\n  },\n  {\n    'tag': '@param index Location.',\n    'alternatives': [\n      '@param index The position.',\n      '@param index The index of the location.',\n      '@param index The specific position.',\n      '@param index The place.',\n      '@param index The spot.'\n    ]\n  },\n  {\n    'tag': '@param point New value.',\n    'alternatives': [\n      '@param point The updated value.',\n      '@param point The revised value.',\n      '@param point The value to be changed.',\n      '@param point The new data.',\n      '@param point The modified value.'\n    ]\n  },\n  {\n    'tag': '@param points New Points.',\n    'alternatives': [\n      '@param points The updated points.',\n      '@param points The revised points.',\n      '@param points The points to be changed.',\n      '@param points The new set of points.',\n      '@param points The modified points.'\n    ]\n  },\n  {\n    'tag': '@param n Dimension of the hypercube.',\n    'alternatives': [\n      '@param n The hypercube dimension.',\n      '@param n The dimensionality of the hypercube.',\n      '@param n The size of the hypercube.',\n      '@param n The number of dimensions in the hypercube.',\n      '@param n The spatial dimension of the hypercube.'\n    ]\n  },\n  {\n    'tag': '@param sideLength Length of the sides of the hypercube.',\n    'alternatives': [\n      '@param sideLength The hypercube side length.',\n      '@param sideLength The size of the hypercube sides.',\n      '@param sideLength The dimensions of the hypercube sides.',\n      '@param sideLength The length of each side in the hypercube.',\n      '@param sideLength The measurement of the hypercube sides.'\n    ]\n  },\n  {\n    'tag': '@return the steps.',\n    'alternatives': [\n      '@return the list of steps.',\n      '@return the sequence of steps.',\n      '@return the collection of steps.',\n      '@return the steps taken.',\n      '@return the array of steps.'\n    ]\n  },\n  {\n    'tag': '@param n Dimension of the simplex.',\n    'alternatives': [\n      '@param n The simplex dimension.',\n      '@param n The simplex size.',\n      '@param n The number of dimensions in the simplex.',\n      '@param n The spatial dimension of the simplex.',\n      '@param n The dimensionality of the simplex.'\n    ]\n  },\n  {\n    'tag': '@param n Dimension of the simplex.',\n    'alternatives': [\n      '@param n The simplex dimension.',\n      '@param n The simplex size.',\n      '@param n The number of dimensions in the simplex.',\n      '@param n The spatial dimension of the simplex.',\n      '@param n The dimensionality of the simplex.'\n    ]\n  },\n  {\n    'tag': '@param sideLength Length of the sides of the hypercube.',\n    'alternatives': [\n      '@param sideLength The hypercube side length.',\n      '@param sideLength The size of the hypercube sides.',\n      '@param sideLength The dimensions of the hypercube sides.',\n      '@param sideLength The length of each side in the hypercube.',\n      '@param sideLength The measurement of the hypercube sides.'\n    ]\n  },\n  {\n    'tag': '@param steps Steps along the canonical axes representing box edges. They\\nmay be negative but not zero.',\n    'alternatives': [\n      '@param steps The values along the canonical axes representing the box\\nedges. They may be negative but not zero.',\n      '@param steps The steps taken along the canonical axes representing\\nthe boundaries of the box. They can be negative but not zero.',\n      '@param steps The increments in each canonical axis that represent the\\nedges of the box. They may be negative but not zero.',\n      '@param steps The values corresponding to the edges of the box along the\\ncanonical axes. They can be negative but not zero.',\n      '@param steps The changes in each of the canonical axes that represent\\nthe box edges. They may be negative but not zero.'\n    ]\n  },\n  {\n    'tag': '@param referenceSimplex Reference simplex.',\n    'alternatives': [\n      '@param referenceSimplex The simplex serving as a reference.',\n      '@param referenceSimplex The simplex used as a reference.',\n      '@param referenceSimplex The simplex that acts as a reference.',\n      '@param referenceSimplex The reference used for the simplex.',\n      '@param referenceSimplex The simplex taken as a reference.'\n    ]\n  },\n  {\n    'tag': '@throws NotStrictlyPositiveException if the reference simplex does not\\ncontain at least one point.',\n    'alternatives': [\n      \"@throws NotStrictlyPositiveException when the reference simplex doesn't\\nhave at least one point.\",\n      \"@throws NotStrictlyPositiveException if the reference simplex is missing\\nat least one point.\",\n      \"@throws NotStrictlyPositiveException if the reference simplex does not\\ninclude at least one point.\",\n      \"@throws NotStrictlyPositiveException if the reference simplex does not\\ncontain at least one valid point.\",\n      \"@throws NotStrictlyPositiveException when the reference simplex hasn't\\nincluded at least one point.\"\n    ]\n  },\n  {\n    'tag': '@throws DimensionMismatchException if there is a dimension mismatch\\nin the reference simplex.',\n    'alternatives': [\n      '@throws DimensionMismatchException when the reference simplex\\nencounters a dimension mismatch.',\n      '@throws DimensionMismatchException if the reference simplex has a\\nmismatch in dimensions.',\n      '@throws DimensionMismatchException if the reference simplex\\nexperiences a dimension mismatch.',\n      '@throws DimensionMismatchException if there is a mismatch in\\nthe dimensions of the reference simplex.',\n      '@throws DimensionMismatchException when the reference simplex does not\\nhave matching dimensions.'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if one of its vertices is duplicated.',\n    'alternatives': [\n      '@throws IllegalArgumentException when one of its vertices is a duplicate.',\n      '@throws IllegalArgumentException if there is a duplicate vertex in the simplex.',\n      '@throws IllegalArgumentException if one of the vertices is repeated.',\n      '@throws IllegalArgumentException if there is a duplication of vertices in the simplex.',\n      '@throws IllegalArgumentException when one of the vertices in the simplex is duplicated.'\n    ]\n  },\n  {\n    'tag': '@param optData Optimization data. In addition to those documented in\\n{@link MultivariateOptimizer#parseOptimizationData(OptimizationData[])\\nMultivariateOptimizer}, this method will register the following data:\\n<ul>\\n <li>{@link AbstractSimplex}</li>\\n</ul>',\n    'alternatives': [\n      '@param optData Optimization data. In addition to the ones explained in\\n{@link MultivariateOptimizer#parseOptimizationData(OptimizationData[])\\nMultivariateOptimizer}, this method will also handle the following data:\\n<ul>\\n <li>{@link AbstractSimplex}</li>\\n</ul>',\n      '@param optData Optimization data. Besides the documented elements in\\n{@link MultivariateOptimizer#parseOptimizationData(OptimizationData[])\\nMultivariateOptimizer}, this method will also add the following information:\\n<ul>\\n <li>{@link AbstractSimplex}</li>\\n</ul>',\n      '@param optData Optimization data. In addition to the ones specified in\\n{@link MultivariateOptimizer#parseOptimizationData(OptimizationData[])\\nMultivariateOptimizer}, this method will associate the following data:\\n<ul>\\n <li>{@link AbstractSimplex}</li>\\n</ul>',\n      '@param optData Optimization data. In addition to what is mentioned in\\n{@link MultivariateOptimizer#parseOptimizationData(OptimizationData[])\\nMultivariateOptimizer}, this method will include the following data:\\n<ul>\\n <li>{@link AbstractSimplex}</li>\\n</ul>',\n      '@param optData Optimization data. Besides the ones documented in\\n{@link MultivariateOptimizer#parseOptimizationData(OptimizationData[])\\nMultivariateOptimizer}, this method will also handle the following data:\\n<ul>\\n <li>{@link AbstractSimplex}</li>\\n</ul>'\n    ]\n  }\n]"