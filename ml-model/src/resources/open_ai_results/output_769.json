"output = [\n  {\n    'tag': '@throws NullArgumentException if the sample statistics are <code>null</code>',\n    'alternatives': [\n      '@throws NullArgumentException if the sample statistics are <code>null</code>',\n      '@throws NullArgumentException if the statistics of the sample are <code>null</code>',\n      '@throws NullArgumentException if the sample statistics are equal to <code>null</code>',\n      '@throws NullArgumentException if the sample's statistics are <code>null</code>',\n      '@throws NullArgumentException if the sample statistics is <code>null</code>'\n    ]\n  },\n  {\n    'tag': '@throws MathIllegalArgumentException if n is not greater than 1',\n    'alternatives': [\n      '@throws MathIllegalArgumentException if n is not greater than 1',\n      '@throws MathIllegalArgumentException if n is less than or equal to 1',\n      '@throws MathIllegalArgumentException if n is smaller than 2',\n      '@throws MathIllegalArgumentException if n is not larger than 1',\n      '@throws MathIllegalArgumentException if n is not greater than or equal to 2'\n    ]\n  },\n  {\n    'tag': '@throws NumberIsTooSmallException if maximal order is lower than 2',\n    'alternatives': [\n      '@throws NumberIsTooSmallException if maximal order is lower than 2',\n      '@throws NumberIsTooSmallException if maximal order is less than 2',\n      '@throws NumberIsTooSmallException if maximal order is smaller than 2',\n      '@throws NumberIsTooSmallException if the maximal order is less than 2',\n      '@throws NumberIsTooSmallException if the maximal order is lower than 2'\n    ]\n  },\n  {\n    'tag': '@throws NumberIsTooSmallException if the size of {@code xvals} is smaller\\n        than 5.',\n    'alternatives': [\n      '@throws NumberIsTooSmallException if the size of {@code xvals} is smaller\\n        than 5.',\n      '@throws NumberIsTooSmallException if the length of {@code xvals} is less than 5.',\n      '@throws NumberIsTooSmallException if the size of {@code xvals} is less than 5.',\n      '@throws NumberIsTooSmallException if the length of {@code xvals} is smaller than 5.',\n      '@throws NumberIsTooSmallException if the size of array {@code xvals} is smaller than 5.'\n    ]\n  },\n  {\n    'tag': '@throws NullArgumentException if either of the arguments is null',\n    'alternatives': [\n      '@throws NullArgumentException if either of the arguments is null',\n      '@throws NullArgumentException if any of the arguments is null',\n      '@throws NullArgumentException if one of the arguments is null',\n      '@throws NullArgumentException if any argument is null',\n      '@throws NullArgumentException if any of the provided arguments is null'\n    ]\n  },\n  {\n    'tag': '@param num the numerator, must not be {@code null}.',\n    'alternatives': [\n      '@param num the numerator, must not be {@code null}.',\n      '@param num the top part, should not be {@code null}.',\n      '@param num the dividend, should not be {@code null}.',\n      '@param num the upper half, cannot be {@code null}.',\n      '@param num the value on top, must not be {@code null}.'\n    ]\n  },\n  {\n    'tag': '@param den the denominator, must not be {@code null}.',\n    'alternatives': [\n      '@param den the denominator, must not be {@code null}.',\n      '@param den the bottom part, should not be {@code null}.',\n      '@param den the divisor, should not be {@code null}.',\n      '@param den the lower half, cannot be {@code null}.',\n      '@param den the value at the bottom, must not be {@code null}.'\n    ]\n  },\n  {\n    'tag': '@throws ArithmeticException if the denominator is <code>zero</code>.',\n    'alternatives': [\n      '@throws ArithmeticException if the denominator is <code>zero</code>.',\n      '@throws ArithmeticException if the bottom value is <code>zero</code>.',\n      '@throws ArithmeticException if the divisor is <code>zero</code>.',\n      '@throws ArithmeticException if the value at the bottom is <code>zero</code>.',\n      '@throws ArithmeticException if the denominator is equal to <code>zero</code>.'\n    ]\n  },\n  {\n    'tag': '@throws NullArgumentException if the {@link BigInteger} is <code>null</code>.',\n    'alternatives': [\n      '@throws NullArgumentException if the {@link BigInteger} is <code>null</code>.',\n      '@throws NullArgumentException if the {@link BigInteger} is equal to <code>null</code>.',\n      \"@throws NullArgumentException if the {@link BigInteger} is 'null'.\",\n      '@throws NullArgumentException if the provided {@link BigInteger} is <code>null</code>.',\n      '@throws NullArgumentException if the parameter {@link BigInteger} is <code>null</code>.'\n    ]\n  },\n  {\n    'tag': \"@param bg the {@link BigInteger} to add, must'nt be <code>null</code>.\",\n    'alternatives': [\n      \"@param bg the {@link BigInteger} to add, must'nt be <code>null</code>.\",\n      \"@param bg the {@link BigInteger} to include, must not be <code>null</code>.\",\n      \"@param bg the {@link BigInteger} to combine, should not be <code>null</code>.\",\n      \"@param bg the {@link BigInteger} to incorporate, cannot be <code>null</code>.\",\n      \"@param bg the {@link BigInteger} to integrate, must'nt be <code>null</code>.\"\n    ]\n  },\n  {\n    'tag': '@throws NullArgumentException if the {@link BigFraction} is {@code null}.',\n    'alternatives': [\n      '@throws NullArgumentException if the {@link BigFraction} is {@code null}.',\n      '@throws NullArgumentException if the {@link BigFraction} is equal to {@code null}.',\n      \"@throws NullArgumentException if the {@link BigFraction} is 'null'.\",\n      '@throws NullArgumentException if the provided {@link BigFraction} is {@code null}.',\n      '@throws NullArgumentException if the parameter {@link BigFraction} is {@code null}.'\n    ]\n  },\n  {\n    'tag': '@param fraction the {@link BigFraction} to add, must not be <code>null</code>.',\n    'alternatives': [\n      '@param fraction the {@link BigFraction} to add, must not be <code>null</code>.',\n      '@param fraction the {@link BigFraction} to include, must not be <code>null</code>.',\n      '@param fraction the {@link BigFraction} to combine, should not be <code>null</code>.',\n      '@param fraction the {@link BigFraction} to incorporate, cannot be <code>null</code>.',\n      '@param fraction the {@link BigFraction} to integrate, must not be <code>null</code>.'\n    ]\n  },\n  {\n    'tag': '@param object the object to compare to, must not be <code>null</code>.',\n    'alternatives': [\n      '@param object the object to compare to, must not be <code>null</code>.',\n      '@param object the object to compare with, must not be <code>null</code>.',\n      '@param object the object to compare against, should not be <code>null</code>.',\n      '@param object the object to compare, cannot be <code>null</code>.',\n      '@param object the object to compare, must not be <code>null</code>.'\n    ]\n  },\n  {\n    'tag': '@throws NullArgumentException if the {@code BigInteger} is {@code null}',\n    'alternatives': [\n      '@throws NullArgumentException if the {@code BigInteger} is {@code null}',\n      '@throws NullArgumentException if the {@code BigInteger} is equal to {@code null}',\n      \"@throws NullArgumentException if the {@code BigInteger} is 'null'\",\n      '@throws NullArgumentException if the provided {@code BigInteger} is {@code null}',\n      '@throws NullArgumentException if the parameter {@code BigInteger} is {@code null}'\n    ]\n  },\n  {\n    'tag': '@param bg the {@code BigInteger} to divide by, must not be {@code null}',\n    'alternatives': [\n      '@param bg the {@code BigInteger} to divide by, must not be {@code null}',\n      '@param bg the {@code BigInteger} to use as divisor, must not be {@code null}',\n      '@param bg the {@code BigInteger} to be divided by, should not be {@code null}',\n      '@param bg the divisor {@code BigInteger}, cannot be {@code null}',\n      '@param bg the {@code BigInteger} to divide, must not be {@code null}'\n    ]\n  },\n  {\n    'tag': '@throws NullArgumentException if the {@code fraction} is {@code null}.',\n    'alternatives': [\n      '@throws NullArgumentException if the {@code fraction} is {@code null}.',\n      '@throws NullArgumentException if the {@code fraction} is equal to {@code null}.',\n      \"@throws NullArgumentException if the {@code fraction} is 'null'.\",\n      '@throws NullArgumentException if the provided {@code fraction} is {@code null}.',\n      '@throws NullArgumentException if the parameter {@code fraction} is {@code null}.'\n    ]\n  },\n  {\n    'tag': '@param fraction Fraction to divide by, must not be {@code null}.',\n    'alternatives': [\n      '@param fraction Fraction to divide by, must not be {@code null}.',\n      '@param fraction Fraction to use as divisor, must not be {@code null}.',\n      '@param fraction Fraction to be divided by, should not be {@code null}.',\n      '@param fraction Divisor fraction, cannot be {@code null}.',\n      '@param fraction Fraction to divide, must not be {@code null}.'\n    ]\n  },\n  {\n    'tag': '@throws NullArgumentException if {@code bg} is {@code null}.',\n    'alternatives': [\n      '@throws NullArgumentException if {@code bg} is {@code null}.',\n      '@throws NullArgumentException if {@code bg} is equal to {@code null}.',\n      \"@throws NullArgumentException if {@code bg} is 'null'.\",\n      '@throws NullArgumentException if provided {@code bg} is {@code null}.',\n      '@throws NullArgumentException if parameter {@code bg} is {@code null}.'\n    ]\n  },\n  {\n    'tag': '@throws NullArgumentException if {@code fraction} is {@code null}.',\n    'alternatives': [\n      '@throws NullArgumentException if {@code fraction} is {@code null}.',\n      '@throws NullArgumentException if {@code fraction} is equal to {@code null}.',\n      \"@throws NullArgumentException if {@code fraction} is 'null'.\",\n      '@throws NullArgumentException if provided {@code fraction} is {@code null}.',\n      '@throws NullArgumentException if parameter {@code fraction} is {@code null}.'\n    ]\n  },\n  {\n    'tag': '@param fraction Fraction to multiply by, must not be {@code null}.',\n    'alternatives': [\n      '@param fraction Fraction to multiply by, must not be {@code null}.',\n      '@param fraction Fraction to use as multiplier, must not be {@code null}.',\n      '@param fraction Fraction to be multiplied by, should not be {@code null}.',\n      '@param fraction Multiplier fraction, cannot be {@code null}.',\n      '@param fraction Fraction to multiply, must not be {@code null}.'\n    ]\n  },\n  {\n    'tag': '@throws NullArgumentException if the {@link BigInteger} is {@code null}.',\n    'alternatives': [\n      '@throws NullArgumentException if the {@link BigInteger} is {@code null}.',\n      '@throws NullArgumentException if the {@link BigInteger} is equal to {@code null}.',\n      \"@throws NullArgumentException if the {@link BigInteger} is 'null'.\",\n      '@throws NullArgumentException if the provided {@link BigInteger} is {@code null}.',\n      '@throws NullArgumentException if the parameter {@link BigInteger} is {@code null}.'\n    ]\n  },\n  {\n    'tag': '@param bg the {@link BigInteger} to subtract, cannot be {@code null}.',\n    'alternatives': [\n      '@param bg the {@link BigInteger} to subtract, cannot be {@code null}.',\n      '@param bg the {@link BigInteger} to subtract, must not be {@code null}.',\n      '@param bg the {@link BigInteger} to perform subtraction with, should not be {@code null}.',\n      '@param bg the {@link BigInteger} to subtract, cannot equal {@code null}.',\n      '@param bg the {@link BigInteger} to subtract, must not equal {@code null}.'\n    ]\n  },\n  {\n    'tag': '@throws NullArgumentException if the {@code fraction} is {@code null}.',\n    'alternatives': [\n      '@throws NullArgumentException if the {@code fraction} is {@code null}.',\n      '@throws NullArgumentException if the {@code fraction} is equal to {@code null}.',\n      \"@throws NullArgumentException if the {@code fraction} is 'null'.\",\n      '@throws NullArgumentException if the provided {@code fraction} is {@code null}.',\n      '@throws NullArgumentException if the parameter {@code fraction} is {@code null}.'\n    ]\n  }\n]"