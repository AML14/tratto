"output = [\n  {\n    'tag': '@param now the time in milliseconds used to compare against the\\n       expiration time.',\n    'alternatives': [\n      '@param now the time in milliseconds used to compare against the\\n       expiration time.',\n      '@param currentTime the time in milliseconds to compare against the\\n       expiration time.',\n      '@param timestamp the time in milliseconds for comparison with the\\n       expiration time.'\n    ]\n  },\n  {\n    'tag': '@param expirationTimeObject the expiration time value retrieved from\\n       {@link #expirationMap}, can be null.',\n    'alternatives': [\n      '@param expirationTimeObject the expiration time value retrieved from\\n       {@link #expirationMap}, can be null.',\n      '@param expiredTime the time value obtained from\\n       {@link #expirationMap}, may be null.',\n      '@param expiryObject the value of expiration time obtained from\\n       {@link #expirationMap}, may be null.'\n    ]\n  },\n  {\n    'tag': '@return <code>true</code> if <code>expirationTimeObject</code> is &ge; 0\\n        and <code>expirationTimeObject</code> &lt; <code>now</code>.\\n        <code>false</code> otherwise.',\n    'alternatives': [\n      '@return <code>true</code> if <code>expirationTimeObject</code> is &ge; 0\\n        and <code>expirationTimeObject</code> &lt; <code>now</code>.\\n        <code>false</code> otherwise.',\n      '@return <code>true</code> if <code>expirationTimeObject</code> is greater than or equal to 0\\n        and less than <code>now</code>.\\n        <code>false</code> otherwise.',\n      '@return <code>true</code> if <code>expirationTimeObject</code> is not negative and\\n        less than <code>now</code>.\\n<code>false</code> otherwise.'\n    ]\n  },\n  {\n    'tag': '@param in the input stream',\n    'alternatives': [\n      '@param in the input stream',\n      '@param inputStream the input stream'\n    ]\n  },\n  {\n    'tag': '@throws IOException ',\n    'alternatives': [\n      '@throws IOException ',\n      '@throws IOException if an I/O exception occurs.',\n      '@throws IOException in case of an I/O error.'\n    ]\n  },\n  {\n    'tag': '@throws ClassNotFoundException ',\n    'alternatives': [\n      '@throws ClassNotFoundException ',\n      '@throws ClassNotFoundException if the class is not found.',\n      '@throws ClassNotFoundException when the specified class cannot be found.'\n    ]\n  },\n  {\n    'tag': '@param out the output stream',\n    'alternatives': [\n      '@param out the output stream',\n      '@param outputStream the output stream'\n    ]\n  },\n  {\n    'tag': '@param expiringPolicy the policy used to determine expiration times of\\n       entries as they are added.',\n    'alternatives': [\n      '@param expiringPolicy the policy used to determine expiration times of\\n       entries as they are added.',\n      '@param expirationPolicy the policy for determining expiration times of\\n       entries as they are added.',\n      '@param timePolicy the policy employed to establish expiration times of\\n       entries as they are added.'\n    ]\n  },\n  {\n    'tag': '@param timeToLiveMillis the constant amount of time (in milliseconds) an\\n       entry is available before it expires. A negative value results in\\n       entries that NEVER expire. A zero value results in entries that\\n       ALWAYS expire.',\n    'alternatives': [\n      '@param timeToLiveMillis the constant amount of time (in milliseconds) an\\n       entry is available before it expires. A negative value results in\\n       entries that NEVER expire. A zero value results in entries that\\n       ALWAYS expire.',\n      '@param durationMillis the fixed duration (in milliseconds) for which\\n       an entry remains valid before expiring. A negative value indicates\\n       that entries NEVER expire. A zero value indicates that entries\\n       ALWAYS expire.',\n      '@param validityMillis the constant duration (in milliseconds) during\\n       which an entry is valid before expiration. A negative value means\\n       entries NEVER expire. A zero value results in entries that ALWAYS\\n       expire.'\n    ]\n  },\n  {\n    'tag': '@param timeToLive the constant amount of time an entry is available\\n       before it expires. A negative value results in entries that NEVER\\n       expire. A zero value results in entries that ALWAYS expire.',\n    'alternatives': [\n      '@param timeToLive the constant amount of time an entry is available\\n       before it expires. A negative value results in entries that NEVER\\n       expire. A zero value results in entries that ALWAYS expire.',\n      '@param duration the fixed duration for which an entry remains valid\\n       before expiring. A negative value indicates entries that NEVER\\n       expire. A zero value indicates entries that ALWAYS expire.',\n      '@param validity the constant duration during which an entry is valid\\n       before expiration. A negative value means entries NEVER expire.\\n       A zero value results in entries that ALWAYS expire.'\n    ]\n  },\n  {\n    'tag': '@param <K> the key type',\n    'alternatives': [\n      '@param <K> the key type',\n      '@param <K> the type of the key',\n      '@param <K> the datatype for the key'\n    ]\n  },\n  {\n    'tag': '@param <V> the value type',\n    'alternatives': [\n      '@param <V> the value type',\n      '@param <V> the type of the value',\n      '@param <V> the datatype for the value'\n    ]\n  },\n  {\n    'tag': '@param map the map to wrap',\n    'alternatives': [\n      '@param map the map to wrap',\n      '@param originalMap the map to be wrapped',\n      '@param underlyingMap the map that needs to be wrapped'\n    ]\n  },\n  {\n    'tag': '@return a new multi-value map',\n    'alternatives': [\n      '@return a new multi-value map',\n      '@return a newly created multi-value map',\n      '@return a fresh multi-value map'\n    ]\n  },\n  {\n    'tag': '@param <K> the key type',\n    'alternatives': [\n      '@param <K> the key type',\n      '@param <K> the type of the key',\n      '@param <K> the datatype for the key'\n    ]\n  },\n  {\n    'tag': '@param <V> the value type',\n    'alternatives': [\n      '@param <V> the value type',\n      '@param <V> the type of the value',\n      '@param <V> the datatype for the value'\n    ]\n  },\n  {\n    'tag': '@param <C> the collection class type',\n    'alternatives': [\n      '@param <C> the collection class type',\n      '@param <C> the type of the collection class',\n      '@param <C> the datatype for the collection class'\n    ]\n  },\n  {\n    'tag': '@param map the map to wrap',\n    'alternatives': [\n      '@param map the map to wrap',\n      '@param originalMap the map to be wrapped',\n      '@param underlyingMap the map that needs wrapping'\n    ]\n  },\n  {\n    'tag': '@param collectionClass the type of the collection class',\n    'alternatives': [\n      '@param collectionClass the type of the collection class',\n      '@param classOfCollection the type of the collection class',\n      '@param collectionType the datatype of the collection class'\n    ]\n  },\n  {\n    'tag': '@return a new multi-value map',\n    'alternatives': [\n      '@return a new multi-value map',\n      '@return a newly created multi-value map',\n      '@return a fresh multi-value map'\n    ]\n  },\n  {\n    'tag': '@param <K> the key type',\n    'alternatives': [\n      '@param <K> the key type',\n      '@param <K> the type of the key',\n      '@param <K> the datatype for the key'\n    ]\n  }\n]"