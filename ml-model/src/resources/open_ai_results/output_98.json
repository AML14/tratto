"output = [\n  {\n    'tag': '@return <tt>true</tt> if this graph contains the specified vertex.',\n    'alternatives': [\n      '@return <tt>true</tt> if this graph includes the given vertex.',\n      '@return <tt>true</tt> if the specified vertex is present in this graph.',\n      '@return <tt>true</tt> if the graph contains the specified vertex.',\n      '@return <tt>true</tt> if the vertex is contained in this graph.',\n      '@return <tt>true</tt> if this graph has the specified vertex.'\n    ]\n  },\n  {\n    'tag': '@return a set of the edges contained in this graph.',\n    'alternatives': [\n      '@return a set containing the edges present in this graph.',\n      '@return a set of edges that are included in this graph.',\n      '@return a set of the edges that belong to this graph.',\n      '@return a set containing all the edges in this graph.',\n      '@return a set of edges that are part of this graph.'\n    ]\n  },\n  {\n    'tag': '@param vertex the vertex for which a set of touching edges is to be\\nreturned.',\n    'alternatives': [\n      '@param vertex the vertex to retrieve the set of adjacent edges for.',\n      '@param vertex the vertex being queried for its set of touching edges.',\n      '@param vertex the vertex for which the set of adjacent edges should be returned.',\n      '@param vertex the vertex from which we want to obtain a set of touching edges.',\n      '@param vertex the vertex for which the set of connected edges needs to be obtained.'\n    ]\n  },\n  {\n    'tag': '@return a set of all edges touching the specified vertex.',\n    'alternatives': [\n      '@return a set of edges that are connected to the specified vertex.',\n      '@return a set of edges that touch the given vertex.',\n      '@return a set containing all the edges that are adjacent to the vertex.',\n      '@return a set of edges that are connected to the specified vertex.',\n      '@return a set of edges that are linked to the specified vertex.'\n    ]\n  },\n  {\n    'tag': '@param edges edges to be removed from this graph.',\n    'alternatives': [\n      '@param edges the edges that should be deleted from this graph.',\n      '@param edges the edges to be eliminated from this graph.',\n      '@param edges the edges that need to be removed from this graph.',\n      '@param edges the edges that should be taken out from this graph.',\n      '@param edges the edges that are going to be removed from this graph.'\n    ]\n  },\n  {\n    'tag': '@return <tt>true</tt> if this graph changed as a result of the call',\n    'alternatives': [\n      '@return <tt>true</tt> if the graph was modified by the operation.',\n      '@return <tt>true</tt> if the call caused a change in the graph.',\n      '@return <tt>true</tt> if the graph was altered after the call.',\n      '@return <tt>true</tt> if the operation caused a change in the graph.',\n      '@return <tt>true</tt> if the call led to a modification in the graph.'\n    ]\n  },\n  {\n    'tag': '@param sourceVertex source vertex of the edge.',\n    'alternatives': [\n      '@param sourceVertex the vertex from which the edge starts.',\n      '@param sourceVertex the vertex that is the beginning of the edge.',\n      '@param sourceVertex the vertex that forms the origin of the edge.',\n      '@param sourceVertex the vertex that serves as the edge starting point.',\n      '@param sourceVertex the vertex that acts as the source of the edge.'\n    ]\n  },\n  {\n    'tag': '@param targetVertex target vertex of the edge.',\n    'alternatives': [\n      '@param targetVertex the vertex to which the edge points.',\n      '@param targetVertex the vertex that is the destination of the edge.',\n      '@param targetVertex the vertex that represents the edge endpoint.',\n      '@param targetVertex the vertex that serves as the edge endpoint.',\n      '@param targetVertex the vertex that acts as the target of the edge.'\n    ]\n  },\n  {\n    'tag': '@return the removed edges, or <code>null</code> if either vertex is not\\npart of graph',\n    'alternatives': [\n      '@return the edges that were removed, or <code>null</code> if either vertex is not part of the graph.',\n      '@return the edges that were deleted, or <code>null</code> if either vertex is not part of the graph.',\n      '@return the edges that were eliminated, or <code>null</code> if either vertex is not part of the graph.',\n      '@return the edges that were taken out, or <code>null</code> if either vertex is not part of the graph.',\n      '@return the edges that were removed from the graph, or <code>null</code> if either vertex is not part of the graph.'\n    ]\n  },\n  {\n    'tag': '@param vertices vertices to be removed from this graph.',\n    'alternatives': [\n      '@param vertices the vertices that should be deleted from this graph.',\n      '@param vertices the vertices to be eliminated from this graph.',\n      '@param vertices the vertices that need to be removed from this graph.',\n      '@param vertices the vertices that should be taken out from this graph.',\n      '@param vertices the vertices that are going to be removed from this graph.'\n    ]\n  },\n  {\n    'tag': '@param e edge to be removed from this graph, if present.',\n    'alternatives': [\n      '@param e the edge that should be removed from this graph, if it exists.',\n      '@param e the edge to be eliminated from this graph, if it is present.',\n      '@param e the edge that needs to be removed from this graph, if it is present.',\n      '@param e the edge that should be taken out from this graph, if it is present.',\n      '@param e the edge that is going to be removed from this graph, if it exists.'\n    ]\n  },\n  {\n    'tag': '@param v vertex to be removed from this graph, if present.',\n    'alternatives': [\n      '@param v the vertex that should be removed from this graph, if it exists.',\n      '@param v the vertex to be eliminated from this graph, if it is present.',\n      '@param v the vertex that needs to be removed from this graph, if it is present.',\n      '@param v the vertex that should be taken out from this graph, if it is present.',\n      '@param v the vertex that is going to be removed from this graph, if it exists.'\n    ]\n  },\n  {\n    'tag': '@return a set view of the vertices contained in this graph.',\n    'alternatives': [\n      '@return a set that provides a view of the vertices present in this graph.',\n      '@return a set representing the vertices that are part of this graph.',\n      '@return a set containing the vertices that belong to this graph.',\n      '@return a set that shows the vertices contained in this graph.',\n      '@return a set of the vertices that are included in this graph.'\n    ]\n  },\n  {\n    'tag': '@param e edge of interest',\n    'alternatives': [\n      '@param e the edge that is of interest.',\n      '@param e the edge that is being queried.',\n      '@param e the edge that is the subject of the operation.',\n      '@param e the edge that is being considered.',\n      '@param e the edge that is the focus of attention.'\n    ]\n  },\n  {\n    'tag': '@return source vertex',\n    'alternatives': [\n      '@return the vertex from which the edge originates.',\n      '@return the vertex that is the starting point of the edge.',\n      '@return the vertex that serves as the edge source.',\n      '@return the vertex that acts as the source of the edge.',\n      '@return the vertex that forms the origin of the edge.'\n    ]\n  },\n  {\n    'tag': '@return target vertex',\n    'alternatives': [\n      '@return the vertex to which the edge points.',\n      '@return the vertex that is the destination of the edge.',\n      '@return the vertex that represents the edge endpoint.',\n      '@return the vertex that serves as the edge endpoint.',\n      '@return the vertex that acts as the target of the edge.'\n    ]\n  },\n  {\n    'tag': '@return edge weight',\n    'alternatives': [\n      '@return the weight of the edge.',\n      '@return the weight associated with the edge.',\n      '@return the weight assigned to the edge.',\n      '@return the weight value of the edge.',\n      '@return the weight that applies to the edge.'\n    ]\n  },\n  {\n    'tag': '@return the containing graph',\n    'alternatives': [\n      '@return the graph that contains this element.',\n      '@return the graph to which this element belongs.',\n      '@return the graph that holds this element.',\n      '@return the graph that includes this element.',\n      '@return the graph in which this element is present.'\n    ]\n  },\n  {\n    'tag': '@return the start vertex',\n    'alternatives': [\n      '@return the vertex from which the traversal starts.',\n      '@return the vertex that is the initial point of the traversal.',\n      '@return the vertex from which the path exploration begins.',\n      '@return the vertex that serves as the starting point of the traversal.',\n      '@return the vertex that acts as the starting vertex of the traversal.'\n    ]\n  }\n]"