"output=[\n  {\n    'tag': '@param y Second coordinate.',\n    'alternatives': [\n      '@param y Second value.',\n      '@param y Value for the second coordinate.',\n      '@param y The value of the second coordinate.',\n      '@param y Value representing the second coordinate.'\n    ]\n  },\n  {\n    'tag': '@return {@code true} if (x, y) is a valid point.',\n    'alternatives': [\n      '@return {@code true} if the point (x, y) is valid.',\n      '@return {@code true} if (x, y) represents a valid point.',\n      '@return {@code true} if the point with coordinates (x, y) is considered valid.',\n      '@return {@code true} if the point at (x, y) is a valid one.'\n    ]\n  },\n  {\n    'tag': '@param x x-coordinate.',\n    'alternatives': [\n      '@param x Value for the x-coordinate.',\n      '@param x First coordinate.',\n      '@param x The value of the x-coordinate.',\n      '@param x The x-coordinate value.'\n    ]\n  },\n  {\n    'tag': '@param y y-coordinate.',\n    'alternatives': [\n      '@param y Value for the y-coordinate.',\n      '@param y Second coordinate.',\n      '@param y The value of the y-coordinate.',\n      '@param y The y-coordinate value.'\n    ]\n  },\n  {\n    'tag': '@return the value at point (x, y) of the first partial derivative with\\nrespect to x.',\n    'alternatives': [\n      '@return the first partial derivative value with respect to x, at point (x, y).',\n      '@return the value of the first partial derivative with respect to x at the point (x, y).',\n      '@return the derivative value of the first partial derivative with respect to x, at the point (x, y).',\n      '@return the value of the first partial derivative with respect to x at the specified point (x, y).'\n    ]\n  },\n  {\n    'tag': '@throws OutOfRangeException if {@code x} (resp. {@code y}) is outside\\nthe range defined by the boundary values of {@code xval} (resp.\\n{@code yval}).',\n    'alternatives': [\n      '@throws OutOfRangeException if the value of {@code x} (or {@code y}) is beyond the range specified by the lower and upper limits of {@code xval} (or {@code yval}).',\n      '@throws OutOfRangeException if the value of {@code x} (or {@code y}) is not within the valid range defined by the lower and upper boundary values of {@code xval} (or {@code yval}).',\n      '@throws OutOfRangeException if the value of {@code x} (or {@code y}) is outside the allowable range defined by the lower and upper values of {@code xval} (or {@code yval}).',\n      '@throws OutOfRangeException if {@code x} (or {@code y}) is outside the defined range specified by the lower and upper boundaries of {@code xval} (or {@code yval}).'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if the internal data were not initialized\\n(cf. {@link #BicubicSplineInterpolatingFunction(double[],double[],double[][],\\n            double[][],double[][],double[][],boolean) constructor}).',\n    'alternatives': [\n      '@throws NullPointerException if the internal data is null, indicating that it was not properly initialized\\n(referencing the {@link #BicubicSplineInterpolatingFunction(double[],double[],double[][],\\n            double[][],double[][],double[][],boolean) constructor}).',\n      '@throws NullPointerException if the internal data is uninitialized, as indicated by a null value\\n(see {@link #BicubicSplineInterpolatingFunction(double[],double[],double[][],\\n            double[][],double[][],double[][],boolean) constructor}).',\n      '@throws NullPointerException if the internal data has not been initialized, resulting in a null value\\n(see {@link #BicubicSplineInterpolatingFunction(double[],double[],double[][],\\n            double[][],double[][],double[][],boolean) constructor}).',\n      '@throws NullPointerException if the internal data is not initialized, represented by a null value\\n(reference the {@link #BicubicSplineInterpolatingFunction(double[],double[],double[][],\\n            double[][],double[][],double[][],boolean) constructor}).'\n    ]\n  },\n  {\n    'tag': '@return the value at point (x, y) of the first partial derivative with\\nrespect to y.',\n    'alternatives': [\n      '@return the first partial derivative value with respect to y, at point (x, y).',\n      '@return the value of the first partial derivative with respect to y at the point (x, y).',\n      '@return the derivative value of the first partial derivative with respect to y, at the point (x, y).',\n      '@return the value of the first partial derivative with respect to y at the specified point (x, y).'\n    ]\n  },\n  {\n    'tag': '@throws OutOfRangeException if {@code x} (resp. {@code y}) is outside\\nthe range defined by the boundary values of {@code xval} (resp.\\n{@code yval}).',\n    'alternatives': [\n      '@throws OutOfRangeException if the value of {@code x} (or {@code y}) is beyond the range specified by the lower and upper limits of {@code xval} (or {@code yval}).',\n      '@throws OutOfRangeException if the value of {@code x} (or {@code y}) is not within the valid range defined by the lower and upper boundary values of {@code xval} (or {@code yval}).',\n      '@throws OutOfRangeException if the value of {@code x} (or {@code y}) is outside the allowable range defined by the lower and upper values of {@code xval} (or {@code yval}).',\n      '@throws OutOfRangeException if {@code x} (or {@code y}) is outside the defined range specified by the lower and upper boundaries of {@code xval} (or {@code yval}).'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if the internal data were not initialized\\n(cf. {@link #BicubicSplineInterpolatingFunction(double[],double[],double[][],\\n            double[][],double[][],double[][],boolean) constructor}).',\n    'alternatives': [\n      '@throws NullPointerException if the internal data is null, indicating that it was not properly initialized\\n(referencing the {@link #BicubicSplineInterpolatingFunction(double[],double[],double[][],\\n            double[][],double[][],double[][],boolean) constructor}).',\n      '@throws NullPointerException if the internal data is uninitialized, as indicated by a null value\\n(see {@link #BicubicSplineInterpolatingFunction(double[],double[],double[][],\\n            double[][],double[][],double[][],boolean) constructor}).',\n      '@throws NullPointerException if the internal data has not been initialized, resulting in a null value\\n(see {@link #BicubicSplineInterpolatingFunction(double[],double[],double[][],\\n            double[][],double[][],double[][],boolean) constructor}).',\n      '@throws NullPointerException if the internal data is not initialized, represented by a null value\\n(reference the {@link #BicubicSplineInterpolatingFunction(double[],double[],double[][],\\n            double[][],double[][],double[][],boolean) constructor}).'\n    ]\n  },\n  {\n    'tag': '@param x x-coordinate.',\n    'alternatives': [\n      '@param x Value for the x-coordinate.',\n      '@param x First coordinate.',\n      '@param x The value of the x-coordinate.',\n      '@param x The x-coordinate value.'\n    ]\n  },\n  {\n    'tag': '@param y y-coordinate.',\n    'alternatives': [\n      '@param y Value for the y-coordinate.',\n      '@param y Second coordinate.',\n      '@param y The value of the y-coordinate.',\n      '@param y The y-coordinate value.'\n    ]\n  },\n  {\n    'tag': '@return the value at point (x, y) of the second partial derivative with\\nrespect to x.',\n    'alternatives': [\n      '@return the second partial derivative value with respect to x, at point (x, y).',\n      '@return the value of the second partial derivative with respect to x at the point (x, y).',\n      '@return the derivative value of the second partial derivative with respect to x, at the point (x, y).',\n      '@return the value of the second partial derivative with respect to x at the specified point (x, y).'\n    ]\n  },\n  {\n    'tag': '@throws OutOfRangeException if {@code x} (resp. {@code y}) is outside\\nthe range defined by the boundary values of {@code xval} (resp.\\n{@code yval}).',\n    'alternatives': [\n      '@throws OutOfRangeException if the value of {@code x} (or {@code y}) is beyond the range specified by the lower and upper limits of {@code xval} (or {@code yval}).',\n      '@throws OutOfRangeException if the value of {@code x} (or {@code y}) is not within the valid range defined by the lower and upper boundary values of {@code xval} (or {@code yval}).',\n      '@throws OutOfRangeException if the value of {@code x} (or {@code y}) is outside the allowable range defined by the lower and upper values of {@code xval} (or {@code yval}).',\n      '@throws OutOfRangeException if {@code x} (or {@code y}) is outside the defined range specified by the lower and upper boundaries of {@code xval} (or {@code yval}).'\n    ]\n  },\n  {\n    'tag': '@throws NullPointerException if the internal data were not initialized\\n(cf. {@link #BicubicSplineInterpolatingFunction(double[],double[],double[][],\\n            double[][],double[][],double[][],boolean) constructor}).',\n    'alternatives': [\n      '@throws NullPointerException if the internal data is null, indicating that it was not properly initialized\\n(referencing the {@link #BicubicSplineInterpolatingFunction(double[],double[],double[][],\\n            double[][],double[][],double[][],boolean) constructor}).',\n      '@throws NullPointerException if the internal data is uninitialized, as indicated by a null value\\n(see {@link #BicubicSplineInterpolatingFunction(double[],double[],double[][],\\n            double[][],double[][],double[][],boolean) constructor}).',\n      '@throws NullPointerException if the internal data has not been initialized, resulting in a null value\\n(see {@link #BicubicSplineInterpolatingFunction(double[],double[],double[][],\\n            double[][],double[][],double[][],boolean) constructor}).',\n      '@throws NullPointerException if the internal data is not initialized, represented by a null value\\n(reference the {@link #BicubicSplineInterpolatingFunction(double[],double[],double[][],\\n            double[][],double[][],double[][],boolean) constructor}).'\n    ]\n  },\n  {\n    'tag': '@param x x-coordinate.',\n    'alternatives': [\n      '@param x Value for the x-coordinate.',\n      '@param x First coordinate.',\n      '@param x The value of the x-coordinate.',\n      '@param x The x-coordinate value.'\n    ]\n  },\n  {\n    'tag': '@param y y-coordinate.',\n    'alternatives': [\n      '@param y Value for the y-coordinate.',\n      '@param y Second coordinate.',\n      '@param y The value of the y-coordinate.',\n      '@param y The y-coordinate value.'\n    ]\n  },\n  {\n    'tag': '@return the value at point (x, y) of the second partial derivative with\\nrespect to y.',\n    'alternatives': [\n      '@return the second partial derivative value with respect to y, at point (x, y).',\n      '@return the value of the second partial derivative with respect to y at the point (x, y).',\n      '@return the derivative value of the second partial derivative with respect to y, at the point (x, y).',\n      '@return the value of the second partial derivative with respect to y at the specified point (x, y).'\n    ]\n  },\n  {\n    'tag': '@throws OutOfRangeException if {@code x} (resp. {@code"