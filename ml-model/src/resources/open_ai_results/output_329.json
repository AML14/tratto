"output = [\n{\n  'tag': '@throws NullPointerException if any key or value in {@code map} is null',\n  'alternatives': [\n    '@throws NullPointerException if any key or value in {@code map} is null',\n    '@throws NullPointerException if any key or value in the {@code map} is set to null',\n    '@throws NullPointerException if null values are found for any key or value in the {@code map}',\n    '@throws NullPointerException if the {@code map} contains null values for any key or value',\n    '@throws NullPointerException if there are any null values for keys or values in the {@code map}'\n  ]\n},\n{\n  'tag': '@throws IllegalArgumentException if any two keys are equal according to the\\n        comparator',\n  'alternatives': [\n    '@throws IllegalArgumentException if any two keys, as determined by the\\n        comparator, are found to be equal',\n    '@throws IllegalArgumentException if the comparator determines that any two keys are equal',\n    '@throws IllegalArgumentException if the comparator considers any two keys to be equal',\n    '@throws IllegalArgumentException if the comparator detects that there are two equal keys',\n    '@throws IllegalArgumentException if there exist two keys that are equal according to the\\n        comparator'\n  ]\n},\n{\n  'tag': '@param element the element to count occurrences of',\n  'alternatives': [\n    '@param element the element for which occurrences are counted',\n    '@param element the element used for counting occurrences',\n    '@param element the element to determine the count of occurrences for',\n    '@param element the element that is checked for its number of occurrences',\n    '@param element the element being counted for its occurrences'\n  ]\n},\n{\n  'tag': '@return the number of occurrences of the element in this multiset; possibly\\n    zero but never negative',\n  'alternatives': [\n    '@return the count of the element in this multiset, which may be zero but not negative',\n    '@return the number of times the element appears in this multiset; it can be zero but not negative',\n    '@return the occurrence count of the element in this multiset, possibly zero but never negative',\n    '@return the number of occurrences of the element in this multiset, possibly zero but not negative',\n    '@return the count of occurrences of the element in this multiset, which can be zero or a positive number'\n  ]\n},\n{\n  'tag': '@param element the element to add occurrences of; may be null only if\\n    explicitly allowed by the implementation',\n  'alternatives': [\n    '@param element the element to increase occurrences of; null is accepted if\\n    explicitly allowed by the implementation',\n    '@param element the element for which occurrences will be added; it can be null only if\\n    explicitly permitted by the implementation',\n    '@param element the element to add occurrences to; null is allowed only if\\n    explicitly authorized by the implementation',\n    '@param element the element where additional occurrences are added; null is permissible only if\\n    explicitly sanctioned by the implementation',\n    '@param element the element to increase the count of; null is valid only if\\n    explicitly specified as allowed by the implementation'\n  ]\n},\n{\n  'tag': '@param count the desired count of the element in this multiset',\n  'alternatives': [\n    '@param count the intended number of the element in this multiset',\n    '@param count the expected occurrence count of the element in this multiset',\n    '@param count the specified count for the element in this multiset',\n    '@param count the requested number of occurrences of the element in this multiset',\n    '@param count the target count of the element in this multiset'\n  ]\n},\n{\n  'tag': '@param element the element to conditionally set the count of; may be null\\n    only if explicitly allowed by the implementation',\n  'alternatives': [\n    '@param element the element to dynamically define the count of; null can be used\\n    only if expressly permitted by the implementation',\n    '@param element the element to potentially modify the count of; it can be null\\n    only if explicitly allowed by the implementation',\n    '@param element the element where the occurrence count can be optionally changed; null is acceptable\\n    only if explicitly authorized by the implementation',\n    '@param element the element for which the occurrence count can be selectively set; null is only allowed\\n    if specifically permitted by the implementation',\n    '@param element the element whose count can be conditionally set; null is allowed\\n    only if explicitly stated as allowed by the implementation'\n  ]\n},\n{\n  'tag': '@param oldCount the expected present count of the element in this multiset',\n  'alternatives': [\n    '@param oldCount the anticipated current count of the element in this multiset',\n    '@param oldCount the expected current occurrence count of the element in this multiset',\n    '@param oldCount the presumable existing count of the element in this multiset',\n    '@param oldCount the predicted number of occurrences of the element in this multiset',\n    '@param oldCount the current count of the element in this multiset'\n  ]\n},\n{\n  'tag': '@param newCount the desired count of the element in this multiset',\n  'alternatives': [\n    '@param newCount the intended number of the element in this multiset',\n    '@param newCount the expected occurrence count of the element in this multiset',\n    '@param newCount the specified count for the element in this multiset',\n    '@param newCount the requested number of occurrences of the element in this multiset',\n    '@param newCount the target count of the element in this multiset'\n  ]\n},\n{\n  'tag': '@param normalMap the normal direction map',\n  'alternatives': [\n    '@param normalMap the map for the normal direction',\n    '@param normalMap the map representing the regular direction',\n    '@param normalMap the map that contains entries for the standard direction',\n    '@param normalMap the map used to define the normal direction',\n    '@param normalMap the map which holds the mappings for the normal direction'\n  ]\n},\n{\n  'tag': '@param reverseMap the reverse direction map',\n  'alternatives': [\n    '@param reverseMap the map for the reverse direction',\n    '@param reverseMap the map representing the opposite direction',\n    '@param reverseMap the map that contains entries for the backward direction',\n    '@param reverseMap the map used to define the reverse direction',\n    '@param reverseMap the map which holds the mappings for the reverse direction'\n  ]\n},\n{\n  'tag': '@param inverseBidiMap the inverse BidiMap',\n  'alternatives': [\n    '@param inverseBidiMap the bidirectional map that represents the inverse',\n    '@param inverseBidiMap the BidiMap that holds the inverse mapping',\n    '@param inverseBidiMap the BidiMap used to store the inverse mapping',\n    '@param inverseBidiMap the BidiMap where the inverse mappings are stored',\n    '@param inverseBidiMap the bidirectional map that contains the inverse mapping'\n  ]\n},\n{\n  'tag': '@return new bidi map',\n  'alternatives': [\n    '@return the newly created bidirectional map',\n    '@return a freshly created BidiMap instance',\n    '@return the newly constructed bidirectional map',\n    '@return a newly instantiated BidiMap object',\n    '@return the newly generated bidirectional map'\n  ]\n},\n{\n  'tag': '@param map the map whose mappings are to be placed in this map',\n  'alternatives': [\n    '@param map the map from which mappings will be transferred to this map',\n    '@param map the map that contains the mappings to be added to this map',\n    '@param map the map used to provide the mappings for this map',\n    '@param map the map that supplies the mappings for insertion into this map',\n    '@param map the map that is the source of the mappings to be added to this map'\n  ]\n},\n{\n  'tag': '@param <K> the key type',\n  'alternatives': [\n    '@param <K> the type of keys',\n    '@param <K> the type of the keys used',\n    '@param <K> the type parameter for keys',\n    '@param <K> the generic type of keys',\n    '@param <K> the type of objects used as keys'\n  ]\n}\n]"