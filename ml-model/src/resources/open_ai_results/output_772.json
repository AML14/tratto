"output=[\n{\n    'tag': '@throws MathIllegalArgumentException iff one of the chromosomes is\\n  not an instance of {@link AbstractListChromosome}',\n    'alternatives': [\n      '@throws MathIllegalArgumentException if any of the chromosomes is not\\n  an instance of {@link AbstractListChromosome}',\n      '@throws MathIllegalArgumentException when one of the chromosomes is not\\n  an instance of {@link AbstractListChromosome}',\n      '@throws MathIllegalArgumentException if any chromosome is\\n  not an instance of {@link AbstractListChromosome}',\n      '@throws MathIllegalArgumentException if any chromosome does not\\n  belong to {@link AbstractListChromosome}',\n      '@throws MathIllegalArgumentException when at least one of the chromosomes\\n  is not an instance of {@link AbstractListChromosome}'\n    ]\n  },\n  {\n    'tag': '@throws NotStrictlyPositiveException if {@code scale <= 0} or {@code shape <= 0}.',\n    'alternatives': [\n      '@throws NotStrictlyPositiveException when {@code scale <= 0} or {@code shape <= 0}.',\n      '@throws NotStrictlyPositiveException if either {@code scale <= 0} or {@code shape <= 0}.',\n      '@throws NotStrictlyPositiveException if the values of {@code scale <= 0} or {@code shape <= 0}.',\n      '@throws NotStrictlyPositiveException if the {@code scale <= 0} or {@code shape <= 0} condition is met.',\n      '@throws NotStrictlyPositiveException when the parameters {@code scale <= 0} or {@code shape <= 0} are not fulfilled.'\n    ]\n  },\n  {\n    'tag': '@throws NotStrictlyPositiveException if {@code scale <= 0} or {@code shape <= 0}.',\n    'alternatives': [\n      '@throws NotStrictlyPositiveException when {@code scale <= 0} or {@code shape <= 0}.',\n      '@throws NotStrictlyPositiveException if either {@code scale <= 0} or {@code shape <= 0}.',\n      '@throws NotStrictlyPositiveException if the values of {@code scale <= 0} or {@code shape <= 0}.',\n      '@throws NotStrictlyPositiveException if the {@code scale <= 0} or {@code shape <= 0} condition is met.',\n      '@throws NotStrictlyPositiveException when the parameters {@code scale <= 0} or {@code shape <= 0} are not fulfilled.'\n    ]\n  },\n  {\n    'tag': '@throws NotStrictlyPositiveException if {@code scale <= 0} or {@code shape <= 0}.',\n    'alternatives': [\n      '@throws NotStrictlyPositiveException when {@code scale <= 0} or {@code shape <= 0}.',\n      '@throws NotStrictlyPositiveException if either {@code scale <= 0} or {@code shape <= 0}.',\n      '@throws NotStrictlyPositiveException if the values of {@code scale <= 0} or {@code shape <= 0}.',\n      '@throws NotStrictlyPositiveException if the {@code scale <= 0} or {@code shape <= 0} condition is met.',\n      '@throws NotStrictlyPositiveException when the parameters {@code scale <= 0} or {@code shape <= 0} are not fulfilled.'\n    ]\n  },\n  {\n    'tag': '@throws NotStrictlyPositiveException if {@code scale <= 0} or {@code shape <= 0}.',\n    'alternatives': [\n      '@throws NotStrictlyPositiveException when {@code scale <= 0} or {@code shape <= 0}.',\n      '@throws NotStrictlyPositiveException if either {@code scale <= 0} or {@code shape <= 0}.',\n      '@throws NotStrictlyPositiveException if the values of {@code scale <= 0} or {@code shape <= 0}.',\n      '@throws NotStrictlyPositiveException if the {@code scale <= 0} or {@code shape <= 0} condition is met.',\n      '@throws NotStrictlyPositiveException when the parameters {@code scale <= 0} or {@code shape <= 0} are not fulfilled.'\n    ]\n  },\n  {\n    'tag': '@return {@code true}',\n    'alternatives': [\n      '@return {@code true} value',\n      '@return a {@code true} result',\n      '@return the value {@code true}',\n      '@return return the {@code true} value',\n      '@return {@code true} as the result'\n    ]\n  },\n  {\n    'tag': '@throws NullArgumentException if <code>categoryData</code> is <code>null</code>',\n    'alternatives': [\n      '@throws NullArgumentException when <code>categoryData</code> is <code>null</code>',\n      '@throws NullArgumentException if <code>categoryData</code> is not provided',\n      '@throws NullArgumentException when the <code>categoryData</code> parameter is <code>null</code>',\n      '@throws NullArgumentException if the <code>categoryData</code> argument is <code>null</code>',\n      '@throws NullArgumentException if the <code>categoryData</code> parameter is set to <code>null</code>'\n    ]\n  },\n  {\n    'tag': '@throws NullArgumentException if <code>categoryData</code> is <code>null</code>',\n    'alternatives': [\n      '@throws NullArgumentException when <code>categoryData</code> is <code>null</code>',\n      '@throws NullArgumentException if <code>categoryData</code> is not provided',\n      '@throws NullArgumentException when the <code>categoryData</code> parameter is <code>null</code>',\n      '@throws NullArgumentException if the <code>categoryData</code> argument is <code>null</code>',\n      '@throws NullArgumentException if the <code>categoryData</code> parameter is set to <code>null</code>'\n    ]\n  },\n  {\n    'tag': '@throws NullArgumentException if <code>categoryData</code> is <code>null</code>',\n    'alternatives': [\n      '@throws NullArgumentException when <code>categoryData</code> is <code>null</code>',\n      '@throws NullArgumentException if <code>categoryData</code> is not provided',\n      '@throws NullArgumentException when the <code>categoryData</code> parameter is <code>null</code>',\n      '@throws NullArgumentException if the <code>categoryData</code> argument is <code>null</code>',\n      '@throws NullArgumentException if the <code>categoryData</code> parameter is set to <code>null</code>'\n    ]\n  },\n  {\n    'tag': '@throws NullArgumentException if <code>categoryData</code> is <code>null</code>',\n    'alternatives': [\n      '@throws NullArgumentException when <code>categoryData</code> is <code>null</code>',\n      '@throws NullArgumentException if <code>categoryData</code> is not provided',\n      '@throws NullArgumentException when the <code>categoryData</code> parameter is <code>null</code>',\n      '@throws NullArgumentException if the <code>categoryData</code> argument is <code>null</code>',\n      '@throws NullArgumentException if the <code>categoryData</code> parameter is set to <code>null</code>'\n    ]\n  },\n  {\n    'tag': '@param isLast true if the step is the last one',\n    'alternatives': [\n      '@param isLast indicate whether the step is the last one',\n      '@param isLast specifies if the step is the last one',\n      '@param isLast set to true if it is the last step',\n      '@param isLast if the step is the last one',\n      '@param isLast a boolean indicating if it is the last step'\n    ]\n  },\n  {\n    'tag': '@param minimalStep minimal step (must be positive even for backward\\nintegration), the last step can be smaller than this',\n    'alternatives': [\n      '@param minimalStep minimum step size (positive even for backward\\nintegration), the last step can be smaller than this',\n      '@param minimalStep the smallest allowed step size (must be positive even for backward\\nintegration), the last step can be smaller than this',\n      '@param minimalStep smallest step value (must be positive even for backward\\nintegration), the last step can be smaller than this',\n      '@param minimalStep smallest change in step size (must be positive even for backward\\nintegration), the last step can be smaller than this',\n      '@param minimalStep minimum allowed step (must be positive even for backward\\nintegration), the last step can be smaller than this'\n    ]\n  },\n  {\n    'tag': '@param maximalStep maximal step (must be positive even for backward\\nintegration)',\n    'alternatives': [\n      '@param maximalStep maximum step size (must be positive even for backward\\nintegration)',\n      '@param maximalStep the largest allowed step size (must be positive even for backward\\nintegration)',\n      '@param maximalStep maximum step value (must be positive even for backward\\nintegration)',\n      '@param maximalStep maximum change in step size (must be positive even for backward\\nintegration)',\n      '@param maximalStep maximum allowed step (must be positive even for backward\\nintegration)'\n    ]\n  },\n  {\n    'tag': '@param minimalStep minimal step (must be positive even for backward\\nintegration), the last step can be smaller than this',\n    'alternatives': [\n      '@param minimalStep minimum step size (positive even for backward\\nintegration), the last step can be smaller than this',\n      '@param minimalStep the smallest allowed step size (must be positive even for backward\\nintegration), the last step can be smaller than this',\n      '@param minimalStep smallest step value (must be positive even for backward\\nintegration), the last step can be smaller than this',\n      '@param minimalStep smallest change in step size (must be positive even for backward\\nintegration), the last step can be smaller than this',\n      '@param minimalStep minimum allowed step (must be positive even for backward\\nintegration), the last step can be smaller than this'\n    ]\n  },\n  {\n    'tag': '@param maximalStep maximal step (must be positive even for backward\\nintegration)',\n    'alternatives': [\n      '@param maximalStep maximum step size (must be positive even for backward\\nintegration)',\n      '@param maximalStep the largest allowed step size (must be positive even for backward\\nintegration)',\n      '@param maximalStep maximum step value (must be positive even for backward\\nintegration)',\n      '@param maximalStep maximum change in step size (must be positive even for backward\\nintegration)',\n      '@param maximalStep maximum allowed step (must be positive even for backward\\nintegration)'\n    ]\n  },\n  {\n    'tag': '@return quantile estimated by {@link #getResult()}',\n    'alternatives': [\n      '@return quantile approximation obtained from {@link #getResult()}',\n      '@return the estimated quantile given by {@link #getResult()}',\n      '@return the estimated quantile computed using {@link #getResult()}',\n      '@return the quantile value estimated by {@link #getResult()}',\n      '@return the quantile that is estimated by {@link #getResult()}'\n    ]\n  },\n  {\n    'tag': '@return maximum in the data set added to this statistic',\n    'alternatives': [\n      '@return the largest value in the data set added to this statistic',\n      '@return the maximum value within the data set added to this statistic',\n      '@return the greatest number in the data set added to this statistic',\n      '@return the maximum element found in the data set added to this statistic',\n      '@return the highest value that was added to this statistic from the data set'\n    ]\n  },\n  {\n    'tag': '@return minimum in the data set added to this statistic',\n    'alternatives': [\n      '@return the smallest value in the data set added to this statistic',\n      '@return the minimum value within the data set added to this statistic',\n      '@return the least number in the data set added to this statistic',\n      '@return the minimum element found in the data set added to this statistic',\n      '@return the lowest value that was added to this statistic from the data set'\n    ]\n  },\n  {\n    'tag': '@param initialFive list of initial five elements',\n    'alternatives': [\n      '@param initialFive a list containing the first five elements',\n      '@param initialFive list containing the initial five elements',\n      '@param initialFive list that holds the initial five elements',\n      '@param initialFive list with the first five elements',\n      '@param initialFive a list of the first five elements'\n    ]\n  },\n  {\n    'tag': '@param p the quantile desired',\n    'alternatives': [\n      '@param p the target quantile',\n      '@param p the desired quantile',\n      '@param p the requested quantile',\n      '@param p the quantile value needed',\n      '@param p the specified quantile'\n    ]\n  },\n  {\n    'tag': '@return an instance of PSquareMarkers',\n    'alternatives': [\n      '@return a PSquareMarkers object',\n      '@return a PSquareMarkers instance',\n      '@return an instance of the PSquareMarkers class',\n      '@return a PSquareMarkers implementation',\n      '@return an object belonging to the PSquareMarkers class'\n    ]\n  },\n  {\n    'tag': '@param p the percentile',\n    'alternatives': [\n      '@param p the percentage',\n      '@param p the quantile',\n      '@param p the part',\n      '@param p the proportion',\n      '@param p the fraction'\n    ]\n  },\n  {\n    'tag': '@param values the input array',\n"