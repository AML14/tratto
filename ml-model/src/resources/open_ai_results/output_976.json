"output = [\n  {\n    'tag': '@throws TooManyEvaluationsException if the maximal number of function\\nevaluations is exceeded.',\n    'alternatives': [\n      '@throws TooManyEvaluationsException if the maximum number of function evaluations is surpassed.',\n      '@throws TooManyEvaluationsException if the limit of function evaluations is surpassed.',\n      '@throws TooManyEvaluationsException when the number of function evaluations exceeds its maximum.',\n      '@throws TooManyEvaluationsException if the number of function evaluations reaches its upper bound.',\n      '@throws TooManyEvaluationsException if the maximum allowed function evaluations is surpassed.'\n    ]\n  },\n  {\n    'tag': '@param maxEval Maximum number of evaluations.',\n    'alternatives': [\n      '@param maxEval The maximum number of evaluations.',\n      '@param maxEval The upper limit for the number of evaluations.',\n      '@param maxEval The maximum count of evaluations.',\n      '@param maxEval The highest number of evaluations permitted.',\n      '@param maxEval The maximum allowable evaluations.'\n    ]\n  },\n  {\n    'tag': '@param p Number.',\n    'alternatives': [\n      '@param p Numeric value.',\n      '@param p The numerical parameter.',\n      '@param p The input number.',\n      '@param p Value of type number.',\n      '@param p The numeric argument.'\n    ]\n  },\n  {\n    'tag': '@param q Number.',\n    'alternatives': [\n      '@param q Numeric value.',\n      '@param q The numerical parameter.',\n      '@param q The input number.',\n      '@param q Value of type number.',\n      '@param q The numeric argument.'\n    ]\n  },\n  {\n    'tag': '@return the greatest common divisor, never negative.',\n    'alternatives': [\n      '@return the highest common factor, always non-negative.',\n      '@return the largest common divisor, never negative.',\n      '@return the greatest common factor, always non-negative.',\n      '@return the highest common divider, never negative.',\n      '@return the maximum common divisor, never negative.'\n    ]\n  },\n  {\n    'tag': '@throws MathArithmeticException if the result cannot be represented as\\na non-negative {@code long} value.',\n    'alternatives': [\n      '@throws MathArithmeticException if the outcome cannot be expressed as a non-negative {@code long} value.',\n      '@throws MathArithmeticException if the result cannot be represented as a non-negative {@code long} number.',\n      '@throws MathArithmeticException if the answer cannot be represented by a non-negative {@code long} value.',\n      '@throws MathArithmeticException if the result cannot be expressed as a non-negative {@code long} integer.',\n      '@throws MathArithmeticException if the solution cannot be represented as a non-negative {@code long}.'\n    ]\n  },\n  {\n    'tag': '@param a Number.',\n    'alternatives': [\n      '@param a Numeric value.',\n      '@param a The numerical parameter.',\n      '@param a The input number.',\n      '@param a Value of type number.',\n      '@param a The numeric argument.'\n    ]\n  },\n  {\n    'tag': '@param b Number.',\n    'alternatives': [\n      '@param b Numeric value.',\n      '@param b The numerical parameter.',\n      '@param b The input number.',\n      '@param b Value of type number.',\n      '@param b The numeric argument.'\n    ]\n  },\n  {\n    'tag': '@return the least common multiple, never negative.',\n    'alternatives': [\n      '@return the smallest common multiple, always non-negative.',\n      '@return the lowest common divisor, never negative.',\n      '@return the least common factor, always non-negative.',\n      '@return the smallest common factor, never negative.',\n      '@return the minimum common multiple, never negative.'\n    ]\n  },\n  {\n    'tag': '@throws MathArithmeticException if the result cannot be represented as\\na non-negative {@code int} value.',\n    'alternatives': [\n      '@throws MathArithmeticException if the outcome cannot be expressed as a non-negative {@code int} value.',\n      '@throws MathArithmeticException if the result cannot be represented as a non-negative {@code int} number.',\n      '@throws MathArithmeticException if the answer cannot be represented by a non-negative {@code int} value.',\n      '@throws MathArithmeticException if the result cannot be expressed as a non-negative {@code int} integer.',\n      '@throws MathArithmeticException if the solution cannot be represented as a non-negative {@code int}.'\n    ]\n  },\n  {\n    'tag': '@param a Number.',\n    'alternatives': [\n      '@param a Numeric value.',\n      '@param a The numerical parameter.',\n      '@param a The input number.',\n      '@param a Value of type number.',\n      '@param a The numeric argument.'\n    ]\n  },\n  {\n    'tag': '@param b Number.',\n    'alternatives': [\n      '@param b Numeric value.',\n      '@param b The numerical parameter.',\n      '@param b The input number.',\n      '@param b Value of type number.',\n      '@param b The numeric argument.'\n    ]\n  },\n  {\n    'tag': '@return the least common multiple, never negative.',\n    'alternatives': [\n      '@return the smallest common multiple, always non-negative.',\n      '@return the lowest common divisor, never negative.',\n      '@return the least common factor, always non-negative.',\n      '@return the smallest common factor, never negative.',\n      '@return the minimum common multiple, never negative.'\n    ]\n  },\n  {\n    'tag': '@throws MathArithmeticException if the result cannot be represented\\nas a non-negative {@code long} value.',\n    'alternatives': [\n      '@throws MathArithmeticException if the outcome cannot be expressed as a non-negative {@code long} value.',\n      '@throws MathArithmeticException if the result cannot be represented as a non-negative {@code long} number.',\n      '@throws MathArithmeticException if the answer cannot be represented by a non-negative {@code long} value.',\n      '@throws MathArithmeticException if the result cannot be expressed as a non-negative {@code long} integer.',\n      '@throws MathArithmeticException if the solution cannot be represented as a non-negative {@code long}.'\n    ]\n  },\n  {\n    'tag': '@param x Factor.',\n    'alternatives': [\n      '@param x Dividend.',\n      '@param x Input value.',\n      '@param x The factor.',\n      '@param x Value to be factored.',\n      '@param x Multiplication operand.'\n    ]\n  },\n  {\n    'tag': '@param y Factor.',\n    'alternatives': [\n      '@param y Divisor.',\n      '@param y Input value.',\n      '@param y The factor.',\n      '@param y Value to be factored.',\n      '@param y Multiplication operand.'\n    ]\n  },\n  {\n    'tag': '@throws MathArithmeticException if the result can not be\\nrepresented as an {@code int}.',\n    'alternatives': [\n      '@throws MathArithmeticException if the output cannot be expressed as an {@code int}.',\n      '@throws MathArithmeticException if the result cannot be represented as an {@code int} value.',\n      '@throws MathArithmeticException if the answer cannot be represented by an {@code int}.',\n      '@throws MathArithmeticException if the result cannot be expressed as an {@code int} number.',\n      '@throws MathArithmeticException if the solution cannot be represented as an {@code int}.'\n    ]\n  },\n  {\n    'tag': '@param a Factor.',\n    'alternatives': [\n      '@param a Dividend.',\n      '@param a Input value.',\n      '@param a The factor.',\n      '@param a Value to be factored.',\n      '@param a Multiplication operand.'\n    ]\n  },\n  {\n    'tag': '@param b Factor.',\n    'alternatives': [\n      '@param b Divisor.',\n      '@param b Input value.',\n      '@param b The factor.',\n      '@param b Value to be factored.',\n      '@param b Multiplication operand.'\n    ]\n  },\n  {\n    'tag': '@throws MathArithmeticException if the result can not be represented\\nas a {@code long}.',\n    'alternatives': [\n      '@throws MathArithmeticException if the result cannot be expressed as a {@code long}.',\n      '@throws MathArithmeticException if the outcome cannot be represented by a {@code long}.',\n      '@throws MathArithmeticException if the answer cannot be represented as a {@code long} value.',\n      '@throws MathArithmeticException if the result cannot be expressed as a {@code long} number.',\n      '@throws MathArithmeticException if the solution cannot be represented as a {@code long}.'\n    ]\n  },\n  {\n    'tag': '@param x Minuend.',\n    'alternatives': [\n      '@param x First number.',\n      '@param x Number to be subtracted.',\n      '@param x The input value.',\n      '@param x Value from which to subtract.',\n      '@param x The number being subtracted.'\n    ]\n  },\n  {\n    'tag': '@param y Subtrahend.',\n    'alternatives': [\n      '@param y Second number.',\n      '@param y Number to be subtracted by.',\n      '@param y The input value.',\n      '@param y Value that is subtracted.',\n      '@param y The number being subtracted by.'\n    ]\n  },\n  {\n    'tag': '@throws MathArithmeticException if the result can not be represented\\nas an {@code int}.',\n    'alternatives': [\n      '@throws MathArithmeticException if the output cannot be expressed as an {@code int}.',\n      '@throws MathArithmeticException if the result cannot be represented as an {@code int} value.',\n      '@throws MathArithmeticException if the answer cannot be represented by an {@code int}.',\n      '@throws MathArithmeticException if the result cannot be expressed as an {@code int} number.',\n      '@throws MathArithmeticException if the solution cannot be represented as an {@code int}.'\n    ]\n  },\n  {\n    'tag': '@param a Value.',\n    'alternatives': [\n      '@param a Input.',\n      '@param a The value.',\n      '@param a The given number.',\n      '@param a The provided value.',\n      '@param a The argument.'\n    ]\n  },\n  {\n    'tag': '@param b Value.',\n    'alternatives': [\n      '@param b Input.',\n      '@param b The value.',\n      '@param b The given number.',\n      '@param b The provided value.',\n      '@param b The argument.'\n    ]\n  }\n]"