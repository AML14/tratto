"output = [\n  {\n    'tag': '@param value value to store in the multimap',\n    'alternatives': [\n      '@param value the value to store in the multimap',\n      '@param value the value that should be stored in the multimap',\n      '@param value the value to be stored in the multimap',\n      '@param value the value that needs to be stored in the multimap',\n      '@param value the value which will be stored in the multimap'\n    ]\n  },\n  {\n    'tag': '@return {@code true} if the method increased the size of the multimap, or\\n    {@code false} if the multimap already contained the key-value pair',\n    'alternatives': [\n      '@return {@code true} if the size of the multimap was increased by the method, or\\n    {@code false} if the key-value pair already existed in the multimap',\n      '@return {@code true} in case the size of the multimap was successfully increased, otherwise\\n    {@code false} if the key-value pair was already present in the multimap',\n      '@return {@code true} if the method caused the size of the multimap to increase, otherwise\\n    {@code false} if the key-value pair was already in the multimap',\n      '@return {@code true} if the multimap's size was increased by the method, or\\n    {@code false} if the key-value pair was already present in the multimap',\n      '@return {@code true} if the method resulted in an increase in the multimap's size, or\\n    {@code false} if the multimap already had the key-value pair'\n    ]\n  },\n  {\n    'tag': '@param map place to store the mapping from each key to its corresponding\\n    values',\n    'alternatives': [\n      '@param map the location to store the mapping from each key to its corresponding\\n    values',\n      '@param map the container for storing the mapping from each key to its corresponding\\n    values',\n      '@param map the destination to hold the mapping from each key to its corresponding\\n    values',\n      '@param map the target to store the mapping from each key to its corresponding\\n    values',\n      '@param map the place where the mapping from each key to its corresponding\\n    values will be stored'\n    ]\n  },\n  {\n    'tag': '@param expectedSize the number of elements you expect to add to the\\n       returned set',\n    'alternatives': [\n      '@param expectedSize the expected number of elements to add to the\\n       returned set',\n      '@param expectedSize the anticipated count of elements to add to the\\n       returned set',\n      '@param expectedSize the number of elements you anticipate adding to the\\n       returned set',\n      '@param expectedSize the expected size of the set after adding the\\n       specified number of elements',\n      '@param expectedSize the size that you expect the set to reach after\\n       adding the given number of elements'\n    ]\n  },\n  {\n    'tag': '@return a new, empty {@code HashSet} with enough capacity to hold {@code\\n        expectedSize} elements without resizing',\n    'alternatives': [\n      '@return a new, empty {@code HashSet} with sufficient capacity to accommodate the specified\\n        number of elements without resizing',\n      '@return a new, empty {@code HashSet} that can hold {@code\\n        expectedSize} elements without requiring resizing',\n      '@return a new, empty {@code HashSet} with capacity to store {@code\\n        expectedSize} elements without the need for resizing',\n      '@return a new, empty {@code HashSet} that has the capacity to hold {@code\\n        expectedSize} elements without resizing',\n      '@return a new, empty {@code HashSet} with enough room to store {@code\\n        expectedSize} elements without having to resize'\n    ]\n  },\n  {\n    'tag': '@return a new, empty thread-safe {@code Set}',\n    'alternatives': [\n      '@return a new, empty {@code Set} that ensures thread-safety',\n      '@return a new, empty synchronized {@code Set}',\n      '@return a new, empty concurrent {@code Set}',\n      '@return a new, empty {@code Set} that is safe for multi-threaded use',\n      '@return a new, empty {@code Set} with thread-safe behavior'\n    ]\n  },\n  {\n    'tag': '@param elements the elements that the set should contain',\n    'alternatives': [\n      '@param elements the elements to be included in the set',\n      '@param elements the elements that should be present in the set',\n      '@param elements the elements to populate the set',\n      '@param elements the elements that need to be added to the set',\n      '@param elements the elements that must be contained in the set'\n    ]\n  },\n  {\n    'tag': '@return a new thread-safe set containing those elements (minus duplicates)',\n    'alternatives': [\n      '@return a new synchronized set that includes the specified elements (excluding duplicates)',\n      '@return a new concurrent set that holds the given elements (without duplicates)',\n      '@return a new set that is thread-safe and contains the provided elements (excluding duplicates)',\n      '@return a new set that is safe for multi-threaded use and contains the specified\\n    elements (excluding duplicates)',\n      '@return a new set that includes the provided elements (excluding duplicates) and ensures\\n    thread-safety'\n    ]\n  },\n  {\n    'tag': '@return a new, empty {@code LinkedHashSet}',\n    'alternatives': [\n      '@return a new, empty {@code LinkedHashSet} object',\n      '@return a new, empty instance of {@code LinkedHashSet}',\n      '@return a new, empty {@code LinkedHashSet} with no elements',\n      '@return a new, empty linked hash set',\n      '@return a newly created, empty {@code LinkedHashSet} instance'\n    ]\n  },\n  {\n    'tag': '@param expectedSize the number of elements you expect to add to the\\n       returned set',\n    'alternatives': [\n      '@param expectedSize the anticipated number of elements to add to the\\n       returned set',\n      '@param expectedSize the expected count of elements to add to the\\n       returned set',\n      '@param expectedSize the number of elements you anticipate adding to the\\n       returned set',\n      '@param expectedSize the expected size of the set after adding the\\n       specified number of elements',\n      '@param expectedSize the size that you expect the set to reach after\\n       adding the given number of elements'\n    ]\n  },\n  {\n    'tag': '@return a new, empty {@code LinkedHashSet} with enough capacity to hold\\n        {@code expectedSize} elements without resizing',\n    'alternatives': [\n      '@return a new, empty {@code LinkedHashSet} with adequate capacity to accommodate the specified\\n        number of elements without resizing',\n      '@return a new, empty {@code LinkedHashSet} that can hold {@code\\n        expectedSize} elements without resizing',\n      '@return a new, empty {@code LinkedHashSet} with sufficient room to store {@code\\n        expectedSize} elements without the need for resizing',\n      '@return a new, empty {@code LinkedHashSet} that has the capacity to hold {@code\\n        expectedSize} elements without resizing',\n      '@return a new, empty {@code LinkedHashSet} with enough space to store {@code\\n        expectedSize} elements without having to resize'\n    ]\n  },\n  {\n    'tag': '@param elements the elements that the set should contain, in order',\n    'alternatives': [\n      '@param elements the elements to be included in the set, in the specified order',\n      '@param elements the elements that should be present in the set, in the given order',\n      '@param elements the ordered elements to populate the set',\n      '@param elements the elements that need to be added to the set, following the provided order',\n      '@param elements the elements that must be contained in the set, maintaining the specified order'\n    ]\n  },\n  {\n    'tag': '@return a new {@code LinkedHashSet} containing those elements (minus\\n    duplicates)',\n    'alternatives': [\n      '@return a new {@code LinkedHashSet} that includes the provided elements (excluding duplicates)',\n      '@return a new {@code LinkedHashSet} object holding the specified elements (without duplicates)',\n      '@return a new linked hash set that contains the given elements (excluding duplicates)',\n      '@return a new {@code LinkedHashSet} that is created with the provided elements (excluding duplicates)',\n      '@return a new {@code LinkedHashSet} that holds the given elements (minus any duplicates)'\n    ]\n  },\n  {\n    'tag': '@return a new, empty {@code TreeSet}',\n    'alternatives': [\n      '@return a new, empty {@code TreeSet} object',\n      '@return a new, empty instance of {@code TreeSet}',\n      '@return a new, empty {@code TreeSet} with no elements',\n      '@return a new, empty tree set',\n      '@return a newly created, empty {@code TreeSet} instance'\n    ]\n  },\n  {\n    'tag': '@param elements the elements that the set should contain',\n    'alternatives': [\n      '@param elements the elements to be included in the set',\n      '@param elements the elements that should be present in the set',\n      '@param elements the elements to populate the set',\n      '@param elements the elements that need to be added to the set',\n      '@param elements the elements that must be contained in the set'\n    ]\n  },\n  {\n    'tag': '@return a new {@code TreeSet} containing those elements (minus duplicates)',\n    'alternatives': [\n      '@return a new {@code TreeSet} that includes the provided elements (excluding duplicates)',\n      '@return a new {@code TreeSet} object holding the specified elements (without duplicates)',\n      '@return a new tree set that contains the given elements (excluding duplicates)',\n      '@return a new {@code TreeSet} that is created with the provided elements (excluding duplicates)',\n      '@return a new {@code TreeSet} that holds the given elements (minus any duplicates)'\n    ]\n  },\n  {\n    'tag': '@param comparator the comparator to use to sort the set',\n    'alternatives': [\n      '@param comparator the comparator used for sorting the set',\n      '@param comparator the comparator that will be utilized for sorting the set',\n      '@param comparator the sorting comparator to be applied to the set',\n      '@param comparator the comparator responsible for the set's ordering',\n      '@param comparator the comparator that determines the set's sorting order'\n    ]\n  },\n  {\n    'tag': '@return a new, empty {@code TreeSet}',\n    'alternatives': [\n      '@return a new, empty {@code TreeSet} object',\n      '@return a new, empty instance of {@code TreeSet}',\n      '@return a new, empty {@code TreeSet} with no elements',\n      '@return a new, empty tree set',\n      '@return a newly created, empty {@code TreeSet} instance'\n    ]\n  },\n  {\n    'tag': '@return a new, empty {@code CopyOnWriteArraySet}',\n    'alternatives': [\n      '@return a new, empty {@code CopyOnWriteArraySet} object',\n      '@return a new, empty instance of {@code CopyOnWriteArraySet}',\n      '@return a new, empty {@code CopyOnWriteArraySet} with no elements',\n      '@return a new, empty copy-on-write array set',\n      '@return a newly created, empty {@code CopyOnWriteArraySet} instance'\n    ]\n  },\n  {\n    'tag': '@param elements the elements that the set should contain, in order',\n    'alternatives': [\n      '@param elements the elements to be included in the set, in the specified order',\n      '@param elements the elements that should be present in the set, in the given order',\n      '@param elements the ordered elements to populate the set',\n      '@param elements the elements that need to be added to the set, following the provided order',\n      '@param elements the elements that must be contained in the set, maintaining the specified order'\n    ]\n  },\n  {\n    'tag': '@return a new {@code CopyOnWriteArraySet} containing those elements',\n    'alternatives': [\n      '@return a new {@code CopyOnWriteArraySet} that includes the provided elements',\n      '@return a new {@code CopyOnWriteArraySet} object holding the specified elements',\n      '@return a new copy-on-write array set that contains the given elements',\n      '@return a new {@code CopyOnWriteArraySet} that is created with the provided elements',\n      '@return a new {@code CopyOnWriteArraySet} that holds the given elements'\n    ]\n  },\n  {\n    'tag': '@param collection the collection whose complement should be stored in the\\n    enum set',\n    'alternatives': [\n      '@param collection the collection from which the complement should be stored in the\\n    enum set',\n      '@param collection the collection that will provide the complement for the\\n    enum set',\n      '@param collection the collection to extract the complement from and place it in the\\n    enum set',\n      '@param collection the collection that should be used to generate the complement in the\\n    enum set',\n      '@param collection the collection containing the elements that need to be complemented in the\\n    enum set'\n    ]\n  },\n  {\n    'tag': \"@return a new, modifiable {@code EnumSet} containing all values of the enum\\n    that aren't present in the given collection\",\n    'alternatives': [\n"