"output = [\n  {\n    'tag': '@return true if there are more permutations, otherwise false',\n    'alternatives': [\n      '@return true if there are additional permutations, otherwise false',\n      '@return true if there exist more permutations, otherwise false',\n      '@return true if there are further permutations, otherwise false',\n      '@return true if there are extra permutations, otherwise false',\n      '@return true if there are additional possibilities for permutation, otherwise false'\n    ]\n  },\n  {\n    'tag': \"@return a list of the permutator's elements representing a permutation\",\n    'alternatives': [\n      \"@return a list that represents a permutation of the permutator's elements\",\n      \"@return a list containing the elements of the permutator in a permutation\",\n      \"@return a list that depicts a permutation of the elements from the permutator\",\n      \"@return a list comprising the permutator's elements arranged in a permutation\",\n      \"@return a list that shows a permutation of the elements in the permutator\"\n    ]\n  },\n  {\n    'tag': '@throws NoSuchElementException if there are no more permutations',\n    'alternatives': [\n      '@throws NoSuchElementException when there are no additional permutations',\n      '@throws NoSuchElementException if there are no further permutations',\n      '@throws NoSuchElementException if there are no more possible permutations',\n      '@throws NoSuchElementException if there are no more available permutations',\n      '@throws NoSuchElementException if there are no extra permutations'\n    ]\n  },\n  {\n    'tag': '@param coll the collection to generate permutations for',\n    'alternatives': [\n      '@param coll the collection for which permutations are to be generated',\n      '@param coll the collection used to generate permutations',\n      '@param coll the collection that is used for generating permutations',\n      '@param coll the collection from which permutations are generated',\n      '@param coll the collection used for the generation of permutations'\n    ]\n  },\n  {\n    'tag': \"@return true if the single object hasn't been returned yet\",\n    'alternatives': [\n      \"@return true if the individual object has not been returned yet\",\n      \"@return true if the lone object has not yet been returned\",\n      \"@return true if the object that is unique hasn't been returned yet\",\n      \"@return true if the single object has not been returned as of now\",\n      \"@return true if the sole object has not been returned up to this point\"\n    ]\n  },\n  {\n    'tag': '@return true if the single object has been returned',\n    'alternatives': [\n      '@return true if the individual object has already been returned',\n      '@return true if the lone object has been returned',\n      '@return true if the object that is unique has already been returned',\n      '@return true if the single object has been returned already',\n      '@return true if the sole object has been returned'\n    ]\n  },\n  {\n    'tag': '@return 0 or 1 depending on current state.',\n    'alternatives': [\n      '@return either 0 or 1 based on the current state',\n      '@return 0 or 1, depending on the current condition',\n      '@return 0 or 1, determined by the current state',\n      '@return 0 or 1, contingent on the present state',\n      '@return 0 or 1, varying according to the current state'\n    ]\n  },\n  {\n    'tag': '@return 0 or -1 depending on current state.',\n    'alternatives': [\n      '@return either 0 or -1 based on the current state',\n      '@return 0 or -1, depending on the current condition',\n      '@return 0 or -1, determined by the current state',\n      '@return 0 or -1, contingent on the present state',\n      '@return 0 or -1, varying according to the current state'\n    ]\n  },\n  {\n    'tag': '@return the single object',\n    'alternatives': [\n      '@return the individual object',\n      '@return the lone object',\n      '@return the unique object',\n      '@return the object that is single',\n      '@return the sole object'\n    ]\n  },\n  {\n    'tag': '@throws NoSuchElementException if the single object has already\\n   been returned',\n    'alternatives': [\n      '@throws NoSuchElementException when the single object has already\\n   been returned',\n      '@throws NoSuchElementException if the individual object has already\\n   been returned',\n      '@throws NoSuchElementException if the lone object has already\\n   been returned',\n      '@throws NoSuchElementException if the object that is unique has already\\n   been returned',\n      '@throws NoSuchElementException if the sole object has already\\n   been returned'\n    ]\n  },\n  {\n    'tag': '@return the single object',\n    'alternatives': [\n      '@return the individual object',\n      '@return the lone object',\n      '@return the unique object',\n      '@return the object that is single',\n      '@return the sole object'\n    ]\n  },\n  {\n    'tag': '@throws NoSuchElementException if the single object has not already\\n   been returned',\n    'alternatives': [\n      '@throws NoSuchElementException when the single object has not already\\n   been returned',\n      '@throws NoSuchElementException if the individual object has not already\\n   been returned',\n      '@throws NoSuchElementException if the lone object has not already\\n   been returned',\n      '@throws NoSuchElementException if the object that is unique has not already\\n   been returned',\n      '@throws NoSuchElementException if the sole object has not already\\n   been returned'\n    ]\n  },\n  {\n    'tag': '@throws IllegalStateException if the {@code next} or {@code previous}\\n       method has not yet been called, or the {@code remove} method\\n       has already been called after the last call to {@code next}\\n       or {@code previous}.',\n    'alternatives': [\n      '@throws IllegalStateException when the {@code next} or {@code previous}\\n       method has not yet been invoked, or the {@code remove} method\\n       has already been called after the previous call to {@code next}\\n       or {@code previous}.',\n      '@throws IllegalStateException if the {@code next} or {@code previous}\\n       method has not been called yet, or the {@code remove} method\\n       has already been invoked after the last {@code next}\\n       or {@code previous} invocation.',\n      '@throws IllegalStateException if the {@code remove} method has already\\n       been called after the last invocation of {@code next}\\n       or {@code previous}, or if the {@code next} or {@code previous}\\n       method has not yet been called.',\n      '@throws IllegalStateException if the {@code next} or {@code previous}\\n       method has not been called, or the {@code remove} method\\n       has already been called after the previous {@code next}\\n       or {@code previous} method call.',\n      '@throws IllegalStateException if the {@code remove} method has already\\n       been invoked after the last {@code next}\\n       or {@code previous} invocation, or if the {@code next} or {@code previous}\\n       method has not yet been called.'\n    ]\n  },\n  {\n    'tag': '@param obj the object to add',\n    'alternatives': [\n      '@param obj the object for addition',\n      '@param obj the item to include',\n      '@param obj the element to append',\n      '@param obj the item to add',\n      '@param obj the value to insert'\n    ]\n  },\n  {\n    'tag': '@param obj the object to set',\n    'alternatives': [\n      '@param obj the object for setting',\n      '@param obj the item to assign',\n      '@param obj the element to update',\n      '@param obj the item to configure',\n      '@param obj the value to modify'\n    ]\n  },\n  {\n    'tag': '@throws IllegalStateException if {@code next} has not been called\\n         or the object has been removed',\n    'alternatives': [\n      '@throws IllegalStateException when {@code next} has not been invoked\\n         or the object has been removed',\n      '@throws IllegalStateException if the {@code next} method has not been called\\n         or the object has been eliminated',\n      '@throws IllegalStateException if {@code next} has not been called yet\\n         or the object has been deleted',\n      '@throws IllegalStateException if the {@code next} method has not been invoked\\n         or the object has been eradicated',\n      '@throws IllegalStateException if {@code next} has not yet been called\\n         or the object has been erased'\n    ]\n  },\n  {\n    'tag': '@param object the single object to return from the iterator',\n    'alternatives': [\n      '@param object the individual object to return from the iterator',\n      '@param object the lone object to be returned from the iterator',\n      '@param object the unique object to be returned from the iterator',\n      '@param object the object that is single to return from the iterator',\n      '@param object the sole object to return from the iterator'\n    ]\n  },\n  {\n    'tag': '@param <K> the key type',\n    'alternatives': [\n      '@param <K> the type of the key',\n      '@param <K> the key datatype',\n      '@param <K> the key kind',\n      '@param <K> the key class',\n      '@param <K> the type representing the key'\n    ]\n  },\n  {\n    'tag': '@param <V> the value type',\n    'alternatives': [\n      '@param <V> the type of the value',\n      '@param <V> the value datatype',\n      '@param <V> the value kind',\n      '@param <V> the value class',\n      '@param <V> the type representing the value'\n    ]\n  },\n  {\n    'tag': '@return {@link MapIterator}<K, V>',\n    'alternatives': [\n      '@return an instance of {@link MapIterator}<K, V>',\n      '@return a {@link MapIterator}<K, V> object',\n      '@return a {@link MapIterator}<K, V> instance',\n      '@return a {@link MapIterator}<K, V> implementation',\n      '@return a {@link MapIterator}<K, V> implementation object'\n    ]\n  },\n  {\n    'tag': '@return true if there is a next element to return',\n    'alternatives': [\n      '@return true if there is an additional element to return',\n      '@return true if there is a further element to return',\n      '@return true if there is another element to return',\n      '@return true if there is an extra element to return',\n      '@return true if there is an additional item to return'\n    ]\n  },\n  {\n    'tag': '@return the next element in the array',\n    'alternatives': [\n      '@return the subsequent element in the array',\n      '@return the following element in the array',\n      '@return the element that comes after in the array',\n      '@return the succeeding element in the array',\n      '@return the element following in the array'\n    ]\n  },\n  {\n    'tag': '@throws NoSuchElementException if all the elements in the array\\n   have already been returned',\n    'alternatives': [\n      '@throws NoSuchElementException when all the elements in the array\\n   have already been returned',\n      '@throws NoSuchElementException if all the elements in the array\\n   have been already returned',\n      '@throws NoSuchElementException if all the elements in the array\\n   have been returned previously',\n      '@throws NoSuchElementException if all the elements in the array\\n   have already been returned earlier',\n      '@throws NoSuchElementException when all the elements in the array\\n   have been returned previously'\n    ]\n  },\n  {\n    'tag': '@return the array this iterator iterates over',\n    'alternatives': [\n      '@return the array that this iterator iterates over',\n      '@return the array over which this iterator iterates',\n      '@return the array being traversed by this iterator',\n      '@return the array that is being iterated over by this iterator',\n      '@return the array upon which this iterator performs iteration'\n    ]\n  },\n  {\n    'tag': '@return the start index',\n    'alternatives': [\n      '@return the beginning index',\n      '@return the initial index',\n      '@return the index from which it starts',\n      '@return the index where it begins',\n      '@return the index denoting the starting point'\n    ]\n  }\n]"