"output=[\n  {\n    'tag': '@param <O> the type of object in the output collection',\n    'alternatives': [\n      '@param <O> the object type in the output collection',\n      '@param <O> the object type of the output collection',\n      '@param <O> the type of object in the collection that will be returned',\n      '@param <O> the type of object in the resulting collection',\n      '@param <O> the type of the object in the collection returned'\n    ]\n  },\n  {\n    'tag': '@param <R> the type of the output collection',\n    'alternatives': [\n      '@param <R> the object type of the resulting collection',\n      '@param <R> the object type in the output collection',\n      '@param <R> the type of object in the returned collection',\n      '@param <R> the type of object in the resulting collection',\n      '@param <R> the type of the object in the collection returned'\n    ]\n  },\n  {\n    'tag': '@param inputCollection the collection to get the input from, may be null',\n    'alternatives': [\n      '@param inputCollection the collection from which to retrieve the input, null is acceptable',\n      '@param inputCollection the collection to obtain the input from, it can be null',\n      '@param inputCollection the collection for retrieving the input, can be null',\n      '@param inputCollection the collection that will provide the input, it can be null',\n      '@param inputCollection the collection to get the input from; it may be null'\n    ]\n  },\n  {\n    'tag': '@param transformer the transformer to use, may be null',\n    'alternatives': [\n      '@param transformer the transformer to utilize, null is allowed',\n      '@param transformer the transformer to apply, it can be null',\n      '@param transformer the transformer that will be used, it may be null',\n      '@param transformer the transformer to use, it is permissible to be null',\n      '@param transformer the transformer that will be used, null is acceptable. '\n    ]\n  },\n  {\n    'tag': '@return the output collection with the transformed input added',\n    'alternatives': [\n      '@return the collection with the added transformed input',\n      '@return the resulting collection with the transformed input included',\n      '@return the output collection after adding the transformed input',\n      '@return the collection with the transformed input added into it',\n      '@return the collection that has been modified by adding the transformed input'\n    ]\n  },\n  {\n    'tag': '@param <I> the type of object in the input collection',\n    'alternatives': [\n      '@param <I> the object type in the input collection',\n      '@param <I> the object type of the input collection',\n      '@param <I> the type of object in the collection that contains the input',\n      '@param <I> the type of object in the source collection',\n      '@param <I> the type of the object in the collection given as input'\n    ]\n  },\n  {\n    'tag': '@param <T> the type of object the {@link Collection} contains',\n    'alternatives': [\n      '@param <T> the type of object contained in the {@link Collection}',\n      '@param <T> the object type within the {@link Collection}',\n      '@param <T> the type of object in the {@link Collection}',\n      '@param <T> the type of object that the {@link Collection} holds',\n      '@param <T> the type of the object present in the {@link Collection}'\n    ]\n  },\n  {\n    'tag': '@param object the object to add, if null it will not be added',\n    'alternatives': [\n      '@param object the item to append, if it is null it will not be appended',\n      '@param object the object to include, it will not be included if null',\n      '@param object the item to add, null will prevent its addition',\n      '@param object the object to insert, it will be skipped if null',\n      '@param object the element to put in, if null it will not be put'\n    ]\n  },\n  {\n    'tag': '@return true if the collection changed',\n    'alternatives': [\n      '@return true if there was a modification in the collection',\n      '@return true if the collection has been altered',\n      '@return true if there was a change in the collection',\n      '@return true if the collection was modified',\n      '@return true if any changes occurred in the collection'\n    ]\n  },\n  {\n    'tag': '@return a boolean indicating whether the collection has changed or not.',\n    'alternatives': [\n      '@return a boolean indicating if the collection has been modified or not',\n      '@return a boolean value that indicates whether the collection was altered or not',\n      '@return a boolean indicating if there were any changes in the collection or not',\n      '@return a boolean indicating if the collection has been updated or not',\n      '@return a boolean indicating whether the collection has been modified or not'\n    ]\n  },\n  {\n    'tag': '@return {@code true} if the collections was changed, {@code false} otherwise',\n    'alternatives': [\n      '@return {@code true} if there was a change in the collections, {@code false} otherwise',\n      '@return {@code true} if the collections have been modified, {@code false} otherwise',\n      '@return {@code true} if there have been any modifications in the collections, {@code false} otherwise',\n      '@return {@code true} if changes were made to the collections, {@code false} otherwise',\n      '@return {@code true} if the collections were altered, {@code false} otherwise'\n    ]\n  },\n  {\n    'tag': '@param iterator the iterator to get a value from',\n    'alternatives': [\n      '@param iterator the iterator for obtaining a value',\n      '@param iterator the iterator used to retrieve a value',\n      '@param iterator the iterator that provides a value',\n      '@param iterator the iterator to retrieve a value from',\n      '@param iterator the iterator to obtain a value from'\n    ]\n  },\n  {\n    'tag': '@param index the index to get',\n    'alternatives': [\n      '@param index the index to retrieve',\n      '@param index the position to obtain',\n      '@param index the index from which to get',\n      '@param index the index to fetch',\n      '@param index the location to obtain'\n    ]\n  },\n  {\n    'tag': '@param <T> the type of object in the {@link Iterator}',\n    'alternatives': [\n      '@param <T> the object type in the {@link Iterator}',\n      '@param <T> the object type of the {@link Iterator}',\n      '@param <T> the type of object in the iterator',\n      '@param <T> the type of object in the provided iterator',\n      '@param <T> the type of the object in the iterator given'\n    ]\n  }\n]"