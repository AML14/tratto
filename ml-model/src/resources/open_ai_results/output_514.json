"output=[\n  {\n    'tag': '@param yDotK slopes at the intermediate points',\n    'alternatives': [\n      '@param yDotK slopes at the intermediate positions',\n      '@param yDotK derivative values at the intermediate points',\n      '@param yDotK gradients at the intermediate points',\n      '@param yDotK rates of change at the intermediate points',\n      '@param yDotK values of the slope at the intermediate points'\n    ]\n  },\n  {\n    'tag': '@param globalPreviousState start of the global step',\n    'alternatives': [\n      '@param globalPreviousState starting point of the global step',\n      '@param globalPreviousState initial state for the global step',\n      '@param globalPreviousState initial condition for the global step',\n      '@param globalPreviousState origin of the global step',\n      '@param globalPreviousState initial value for the global step'\n    ]\n  },\n  {\n    'tag': '@param globalCurrentState end of the global step',\n    'alternatives': [\n      '@param globalCurrentState final point of the global step',\n      '@param globalCurrentState end state for the global step',\n      '@param globalCurrentState final condition for the global step',\n      '@param globalCurrentState destination of the global step',\n      '@param globalCurrentState output of the global step'\n    ]\n  },\n  {\n    'tag': '@param softPreviousState start of the restricted step',\n    'alternatives': [\n      '@param softPreviousState starting point of the restricted step',\n      '@param softPreviousState initial state for the restricted step',\n      '@param softPreviousState initial condition for the restricted step',\n      '@param softPreviousState origin of the restricted step',\n      '@param softPreviousState initial value for the restricted step'\n    ]\n  },\n  {\n    'tag': '@param softCurrentState end of the restricted step',\n    'alternatives': [\n      '@param softCurrentState final point of the restricted step',\n      '@param softCurrentState end state for the restricted step',\n      '@param softCurrentState final condition for the restricted step',\n      '@param softCurrentState destination of the restricted step',\n      '@param softCurrentState output of the restricted step'\n    ]\n  },\n  {\n    'tag': '@param mapper equations mapper for the all equations',\n    'alternatives': [\n      '@param mapper equations mapper for all the equations',\n      '@param mapper equations mapper for every equation',\n      '@param mapper equations mapper for each equation',\n      '@param mapper equations mapper for the entire set of equations',\n      '@param mapper equations mapper for all equations present'\n    ]\n  },\n  {\n    'tag': '@return time steps from Butcher array (without the first zero)',\n    'alternatives': [\n      '@return time intervals from Butcher array (excluding the initial zero)',\n      '@return time increments from Butcher array (ignoring the first zero)',\n      '@return time steps derived from Butcher array (excluding the initial zero)',\n      '@return time intervals calculated from Butcher array (excluding the first zero)',\n      '@return time increments obtained from Butcher array (ignoring the first zero)'\n    ]\n  },\n  {\n    'tag': '@return internal weights from Butcher array (without the first empty row)',\n    'alternatives': [\n      '@return internal coefficients from Butcher array (excluding the initial empty row)',\n      '@return internal factors from Butcher array (ignoring the first empty row)',\n      '@return internal values derived from Butcher array (excluding the initial empty row)',\n      '@return internal weighting factors calculated from Butcher array (excluding the first empty row)',\n      '@return internal parameters obtained from Butcher array (ignoring the first empty row)'\n    ]\n  },\n  {\n    'tag': '@return external weights for the high order method from Butcher array',\n    'alternatives': [\n      '@return additional weights for the high order method from Butcher array',\n      '@return extra weights for the high order method from Butcher array',\n      '@return supplementary weights for the high order method from Butcher array',\n      '@return external coefficients for the high order method from Butcher array',\n      '@return outside weights for the high order method from Butcher array'\n    ]\n  },\n  {\n    'tag': '@param nSteps number of steps of the method excluding the one being computed',\n    'alternatives': [\n      '@param nSteps number of iterations of the method excluding the current one',\n      '@param nSteps number of calculations of the method excluding the current one',\n      '@param nSteps number of approximations of the method excluding the current one',\n      '@param nSteps number of operations of the method excluding the current one',\n      '@param nSteps number of iterations of the method excluding the one being computed'\n    ]\n  },\n  {\n    'tag': '@param minStep minimal step (sign is irrelevant, regardless of\\nintegration direction, forward or backward), the last step can\\nbe smaller than this',\n    'alternatives': [\n      '@param minStep minimum step size (sign is not important, irrespective of\\nintegration direction, forward or backward), the final step can\\nbe lesser than this',\n      '@param minStep smallest step (sign does not matter, regardless of\\nintegration direction, forward or backward), the final step can\\nbe tinier than this',\n      '@param minStep least step value (sign is unimportant, regardless of\\nintegration direction, forward or backward), the last step can\\nbe smaller than this',\n      '@param minStep lower bound for step size (sign is irrelevant, regardless of\\nintegration direction, forward or backward), the last step can\\nbe smaller than this',\n      '@param minStep minimum increment (sign does not matter, regardless of\\nintegration direction, forward or backward), the last increment can\\nbe smaller than this'\n    ]\n  },\n  {\n    'tag': '@param maxStep maximal step (sign is irrelevant, regardless of\\nintegration direction, forward or backward), the last step can\\nbe smaller than this',\n    'alternatives': [\n      '@param maxStep maximum step size (sign is not important, irrespective of\\nintegration direction, forward or backward), the final step can\\nbe lesser than this',\n      '@param maxStep largest step (sign does not matter, regardless of\\nintegration direction, forward or backward), the final step can\\nbe bigger than this',\n      '@param maxStep upper bound for step size (sign is irrelevant, regardless of\\nintegration direction, forward or backward), the last step can\\nbe smaller than this',\n      '@param maxStep highest allowed increment (sign does not matter, regardless of\\nintegration direction, forward or backward), the last increment can\\nbe smaller than this',\n      '@param maxStep greatest permissible step (sign is unimportant, regardless of\\nintegration direction, forward or backward), the last step can\\nbe tinier than this'\n    ]\n  },\n  {\n    'tag': '@param scalAbsoluteTolerance allowed absolute error',\n    'alternatives': [\n      '@param scalAbsoluteTolerance acceptable absolute deviation',\n      '@param scalAbsoluteTolerance allowable absolute discrepancy',\n      '@param scalAbsoluteTolerance permitted absolute difference',\n      '@param scalAbsoluteTolerance admissible absolute deviation',\n      '@param scalAbsoluteTolerance authorized absolute error'\n    ]\n  },\n  {\n    'tag': '@param scalRelativeTolerance allowed relative error',\n    'alternatives': [\n      '@param scalRelativeTolerance acceptable relative deviation',\n      '@param scalRelativeTolerance allowable relative discrepancy',\n      '@param scalRelativeTolerance permitted relative difference',\n      '@param scalRelativeTolerance admissible relative deviation',\n      '@param scalRelativeTolerance authorized relative error'\n    ]\n  },\n  {\n    'tag': '@throws NumberIsTooSmallException if order is 1 or less',\n    'alternatives': [\n      '@throws NumberIsTooSmallException when the order is 1 or lower',\n      '@throws NumberIsTooSmallException if the order is less than or equal to 1',\n      '@throws NumberIsTooSmallException when the order is less than or equal to 1',\n      '@throws NumberIsTooSmallException if the order is 1 or below',\n      '@throws NumberIsTooSmallException when the order is below or equal to 1'\n    ]\n  },\n  {\n    'tag': '@param nSteps number of steps of the method excluding the one being computed',\n    'alternatives': [\n      '@param nSteps number of iterations of the method excluding the current one',\n      '@param nSteps number of calculations of the method excluding the current one',\n      '@param nSteps number of approximations of the method excluding the current one',\n      '@param nSteps number of operations of the method excluding the current one',\n      '@param nSteps number of iterations of the method excluding the one being computed'\n    ]\n  },\n  {\n    'tag': '@param minStep minimal step (sign is irrelevant, regardless of\\nintegration direction, forward or backward), the last step can\\nbe smaller than this',\n    'alternatives': [\n      '@param minStep minimum step size (sign is not important, irrespective of\\nintegration direction, forward or backward), the final step can\\nbe lesser than this',\n      '@param minStep smallest step (sign does not matter, regardless of\\nintegration direction, forward or backward), the final step can\\nbe tinier than this',\n      '@param minStep least step value (sign is unimportant, regardless of\\nintegration direction, forward or backward), the last step can\\nbe smaller than this',\n      '@param minStep lower bound for step size (sign is irrelevant, regardless of\\nintegration direction, forward or backward), the last step can\\nbe smaller than this',\n      '@param minStep minimum increment (sign does not matter, regardless of\\nintegration direction, forward or backward), the last increment can\\nbe smaller than this'\n    ]\n  },\n  {\n    'tag': '@param maxStep maximal step (sign is irrelevant, regardless of\\nintegration direction, forward or backward), the last step can\\nbe smaller than this',\n    'alternatives': [\n      '@param maxStep maximum step size (sign is not important, irrespective of\\nintegration direction, forward or backward), the final step can\\nbe lesser than this',\n      '@param maxStep largest step (sign does not matter, regardless of\\nintegration direction, forward or backward), the final step can\\nbe bigger than this',\n      '@param maxStep upper bound for step size (sign is irrelevant, regardless of\\nintegration direction, forward or backward), the last step can\\nbe smaller than this',\n      '@param maxStep highest allowed increment (sign does not matter, regardless of\\nintegration direction, forward or backward), the last increment can\\nbe smaller than this',\n      '@param maxStep greatest permissible step (sign is unimportant, regardless of\\nintegration direction, forward or backward), the last step can\\nbe tinier than this'\n    ]\n  },\n  {\n    'tag': '@param vecAbsoluteTolerance allowed absolute error',\n    'alternatives': [\n      '@param vecAbsoluteTolerance acceptable absolute deviation',\n      '@param vecAbsoluteTolerance allowable absolute discrepancy',\n      '@param vecAbsoluteTolerance permitted absolute difference',\n      '@param vecAbsoluteTolerance admissible absolute deviation',\n      '@param vecAbsoluteTolerance authorized absolute error'\n    ]\n  },\n  {\n    'tag': '@param vecRelativeTolerance allowed relative error',\n    'alternatives': [\n      '@param vecRelativeTolerance acceptable relative deviation',\n      '@param vecRelativeTolerance allowable relative discrepancy',\n      '@param vecRelativeTolerance permitted relative difference',\n      '@param vecRelativeTolerance admissible relative deviation',\n      '@param vecRelativeTolerance authorized relative error'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if order is 1 or less',\n    'alternatives': [\n      '@throws IllegalArgumentException when the order is 1 or lower',\n      '@throws IllegalArgumentException if the order is less than or equal to 1',\n      '@throws IllegalArgumentException when the order is less than or equal to 1',\n      '@throws IllegalArgumentException if the order is 1 or below',\n      '@throws IllegalArgumentException when the order is below or equal to 1'\n    ]\n  },\n  {\n    'tag': '@param p numerator',\n    'alternatives': [\n      '@param p dividend',\n      '@param p top value',\n      '@param p upper value',\n      '@param p fraction numerator',\n      '@param p first value'\n    ]\n  },\n  {\n    'tag': '@param q denominator',\n    'alternatives': [\n      '@param q divisor',\n      '@param q bottom value',\n      '@param q lower value',\n      '@param q fraction denominator',\n      '@param q second value'\n    ]\n  },\n  {\n    'tag': '@return p/q computed in the instance field',\n    'alternatives': [\n      '@return computed value of p/q in the instance field',\n      '@return result of p/q computation in the instance field',\n      '@return value obtained by computing p/q in the instance field',\n      '@return p/q calculated in the instance field',\n      '@return outcome of the operation p/q in the instance field'\n    ]\n  },\n  {\n    'tag': '@param forward integration direction indicator',\n    'alternatives': [\n      '@param forward indicator for integration direction',\n      '@param forward integration direction flag',\n      '@param forward integration direction marker',\n      '@param forward sign for integration direction',\n      '@param forward integration direction parameter'\n    ]\n  }\n]"