"[\n  {\n    'tag': '@param matrix Column matrix to be copied (must have one column and the\\nsame number of rows as the instance).',\n    'alternatives': [\n      '@param matrix Column matrix to be replicated (must have one column and the\\nexact number of rows as the instance).',\n      '@param matrix The column matrix to be duplicated (must have a single column and the\\nsame number of rows as the instance).',\n      '@param matrix The column matrix to be cloned (requires one column and\\nthe same number of rows as the instance).'\n    ]\n  },\n  {\n    'tag': '@throws OutOfRangeException if the specified column index is invalid.',\n    'alternatives': [\n      '@throws OutOfRangeException when the provided column index is out of range.',\n      '@throws OutOfRangeException if the given column index is not within the valid range.',\n      '@throws OutOfRangeException in case of an invalid column index.'\n    ]\n  },\n  {\n    'tag': '@throws MatrixDimensionMismatchException if the column dimension of the\\n{@code matrix} is not {@code 1}, or the row dimensions of {@code this}\\nand {@code matrix} do not match.',\n    'alternatives': [\n      '@throws MatrixDimensionMismatchException if the number of columns in the\\n{@code matrix} is not equal to {@code 1}, or if the number of rows in\\n{@code this} and {@code matrix} is different.',\n      '@throws MatrixDimensionMismatchException when the column dimension of\\n{@code matrix} is not {@code 1}, or the row dimensions of {@code this}\\nand {@code matrix} do not agree.',\n      '@throws MatrixDimensionMismatchException if the {@code matrix} has\\na column dimension other than {@code 1}, or if the number of rows\\nin {@code this} and {@code matrix} is not identical.'\n    ]\n  },\n  {\n    'tag': '@param row Row to be fetched.',\n    'alternatives': [\n      '@param row The index of the row to retrieve.',\n      '@param row The target row to obtain.',\n      '@param row The desired row to be obtained.'\n    ]\n  },\n  {\n    'tag': '@return a row vector.',\n    'alternatives': [\n      '@return a vector representing a single row.',\n      '@return a vector containing the elements of a row.',\n      '@return a vector that represents a specific row.'\n    ]\n  },\n  {\n    'tag': '@throws OutOfRangeException if the specified row index is invalid.',\n    'alternatives': [\n      '@throws OutOfRangeException when the provided row index is out of range.',\n      '@throws OutOfRangeException if the given row index is not within the valid range.',\n      '@throws OutOfRangeException in case of an invalid row index.'\n    ]\n  },\n  {\n    'tag': '@param row Row to be set.',\n    'alternatives': [\n      '@param row The index of the row to modify.',\n      '@param row The target row to update.',\n      '@param row The desired row to be modified.'\n    ]\n  },\n  {\n    'tag': '@param vector row vector to be copied (must have the same number of\\ncolumn as the instance).',\n    'alternatives': [\n      '@param vector The row vector to be replicated (must have the same number of\\ncolumns as the instance).',\n      '@param vector The row vector to be duplicated (requires the same number of\\ncolumns as the instance).',\n      '@param vector The row vector to be cloned (must have a number of\\ncolumns equal to the instance).'\n    ]\n  },\n  {\n    'tag': '@throws OutOfRangeException if the specified row index is invalid.',\n    'alternatives': [\n      '@throws OutOfRangeException when the provided row index is out of range.',\n      '@throws OutOfRangeException if the given row index is not within the valid range.',\n      '@throws OutOfRangeException in case of an invalid row index.'\n    ]\n  },\n  {\n    'tag': '@throws MatrixDimensionMismatchException if the {@code vector} dimension\\ndoes not match the column dimension of {@code this} matrix.',\n    'alternatives': [\n      '@throws MatrixDimensionMismatchException if the dimension of the {@code vector}\\ndoes not equal the number of columns in {@code this} matrix.',\n      '@throws MatrixDimensionMismatchException when the dimension of {@code vector}\\ndoes not match the column dimension of {@code this} matrix.',\n      '@throws MatrixDimensionMismatchException if the size of the {@code vector}\\ndoes not correspond to the number of columns in {@code this} matrix.'\n    ]\n  },\n  {\n    'tag': '@param column Column to be fetched.',\n    'alternatives': [\n      '@param column The index of the column to retrieve.',\n      '@param column The desired column to be obtained.',\n      '@param column The target column to obtain.'\n    ]\n  },\n  {\n    'tag': '@return a column vector.',\n    'alternatives': [\n      '@return a vector representing a single column.',\n      '@return a vector containing the elements of a column.',\n      '@return a vector that represents a specific column.'\n    ]\n  },\n  {\n    'tag': '@throws OutOfRangeException if the specified column index is invalid',\n    'alternatives': [\n      '@throws OutOfRangeException when the provided column index is out of range.',\n      '@throws OutOfRangeException if the given column index is not within the valid range.',\n      '@throws OutOfRangeException in case of an invalid column index.'\n    ]\n  },\n  {\n    'tag': '@param column Column to be set.',\n    'alternatives': [\n      '@param column The index of the column to modify.',\n      '@param column The target column to update.',\n      '@param column The desired column to be modified.'\n    ]\n  },\n  {\n    'tag': '@param vector column vector to be copied (must have the same number of\\nrows as the instance).',\n    'alternatives': [\n      '@param vector The column vector to be replicated (must have the same number of\\nrows as the instance).',\n      '@param vector The column vector to be duplicated (requires the same number of\\nrows as the instance).',\n      '@param vector The column vector to be cloned (must have a number of\\nrows equal to the instance).'\n    ]\n  },\n  {\n    'tag': '@throws OutOfRangeException if the specified column index is invalid.',\n    'alternatives': [\n      '@throws OutOfRangeException when the provided column index is out of range.',\n      '@throws OutOfRangeException if the given column index is not within the valid range.',\n      '@throws OutOfRangeException in case of an invalid column index.'\n    ]\n  },\n  {\n    'tag': '@throws MatrixDimensionMismatchException if the {@code vector} dimension\\ndoes not match the row dimension of {@code this} matrix.',\n    'alternatives': [\n      '@throws MatrixDimensionMismatchException if the dimension of the {@code vector}\\ndoes not equal the number of rows in {@code this} matrix.',\n      '@throws MatrixDimensionMismatchException when the dimension of {@code vector}\\ndoes not match the row dimension of {@code this} matrix.',\n      '@throws MatrixDimensionMismatchException if the size of the {@code vector}\\ndoes not correspond to the number of rows in {@code this} matrix.'\n    ]\n  },\n  {\n    'tag': '@param row Row to be fetched.',\n    'alternatives': [\n      '@param row The index of the row to retrieve.',\n      '@param row The target row to obtain.',\n      '@param row The desired row to be obtained.'\n    ]\n  },\n  {\n    'tag': '@return the array of entries in the row.',\n    'alternatives': [\n      '@return an array containing the elements in the specified row.',\n      '@return an array that includes all the entries in the given row.',\n      '@return an array holding the values of the row.'\n    ]\n  },\n  {\n    'tag': '@throws OutOfRangeException if the specified row index is not valid.',\n    'alternatives': [\n      '@throws OutOfRangeException when the provided row index is out of range.',\n      '@throws OutOfRangeException if the given row index is not within the valid range.',\n      '@throws OutOfRangeException in case of an invalid row index.'\n    ]\n  },\n  {\n    'tag': '@param row Row to be set.',\n    'alternatives': [\n      '@param row The index of the row to modify.',\n      '@param row The target row to update.',\n      '@param row The desired row to be modified.'\n    ]\n  },\n  {\n    'tag': '@param array Row matrix to be copied (must have the same number of\\ncolumns as the instance)',\n    'alternatives': [\n      '@param array The row matrix to be replicated (must have the same number of\\ncolumns as the instance).',\n      '@param array The row matrix to be duplicated (requires the same number of\\ncolumns as the instance).',\n      '@param array The row matrix to be cloned (must have a number of\\ncolumns equal to the instance).'\n    ]\n  },\n  {\n    'tag': '@throws OutOfRangeException if the specified row index is invalid.',\n    'alternatives': [\n      '@throws OutOfRangeException when the provided row index is out of range.',\n      '@throws OutOfRangeException if the given row index is not within the valid range.',\n      '@throws OutOfRangeException in case of an invalid row index.'\n    ]\n  },\n  {\n    'tag': '@throws MatrixDimensionMismatchException if the {@code array} length does\\nnot match the column dimension of {@code this} matrix.',\n    'alternatives': [\n      '@throws MatrixDimensionMismatchException if the length of the {@code array}\\ndoes not equal the number of columns in {@code this} matrix.',\n      '@throws MatrixDimensionMismatchException when the length of {@code array}\\ndoes not match the column dimension of {@code this} matrix.',\n      '@throws MatrixDimensionMismatchException if the size of the {@code array}\\ndoes not correspond to the number of columns in {@code this} matrix.'\n    ]\n  },\n  {\n    'tag': '@param column Column to be fetched.',\n    'alternatives': [\n      '@param column The index of the column to retrieve.',\n      '@param column The desired column to be obtained.',\n      '@param column The target column to obtain.'\n    ]\n  }\n]"