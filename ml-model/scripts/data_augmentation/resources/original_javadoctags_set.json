[
    [
        "@param map The map to print, may be <code>null</code>.\n  If <code>null</code>, the text 'null' is output.",
        "@param label the label to be used, may be <code>null</code>.\n  If <code>null</code>, the label is not output.\n  It typically represents the name of the property in a bean or similar.",
        "@param map the map to print, may be <code>null</code>.\n  If <code>null</code>, the text 'null' is output",
        "@param keyType the type of reference to use for keys;\n  must be {@link ReferenceStrength#HARD HARD},\n  {@link ReferenceStrength#SOFT SOFT},\n  {@link ReferenceStrength#WEAK WEAK}",
        "@param valueType the type of reference to use for values;\n  must be {@link ReferenceStrength#HARD},\n  {@link ReferenceStrength#SOFT SOFT},\n  {@link ReferenceStrength#WEAK WEAK}",
        "@throws IllegalStateException if there is no last returned element, or if\n  the last returned element has already been removed",
        "@param nonNullComparator the comparator to use when comparing two\n non-<code>null</code> objects.  This argument cannot be\n <code>null</code>",
        "@throws ConvergenceException if the p-value can not be computed due to a\nconvergence error"
    ],
    [
        "@throws MaxCountExceededException if the maximum number of iterations\nis exceeded",
        "@throws ConvergenceException if the p-value can not be computed due to\na convergence error",
        "@param categoryData <code>Collection</code> of <code>double[]</code> arrays each\n           containing data for one category",
        "@throws DimensionMismatchException if the length of the <code>categoryData</code> array is less\n            than 2 or a contained <code>double[]</code> array does not\n            contain at least two values",
        "@return test statistic \\(n m D_{n,m}\\) used to evaluate the null hypothesis that {@code x} and\n        {@code y} represent samples from the same underlying distribution",
        "@throws MathArithmeticException if the algorithm fails to convert {@code h} to a\n        {@link org.apache.commons.math3.fraction.BigFraction} in expressing {@code d} as \\((k\n        - h) / m\\) for integer {@code k, m} and \\(0 \\le h < 1\\)",
        "@throws MathArithmeticException if algorithm fails to convert {@code h} to a\n        {@link org.apache.commons.math3.fraction.BigFraction} in expressing {@code d} as \\((k\n        - h) / m\\) for integer {@code k, m} and \\(0 \\le h < 1\\)."
    ],
    [
        "@param hi Upper bound.",
        "@param optData Optimization data. In addition to those documented in\n{@link BaseOptimizer#parseOptimizationData(OptimizationData[])\nBaseOptimizer}, this method will register the following data:\n<ul>\n <li>{@link GoalType}</li>\n <li>{@link SearchInterval}</li>\n <li>{@link UnivariateObjectiveFunction}</li>\n</ul>",
        "@param optData Optimization data.\nThe following data will be looked for:\n<ul>\n <li>{@link GoalType}</li>\n <li>{@link SearchInterval}</li>\n <li>{@link UnivariateObjectiveFunction}</li>\n</ul>",
        "@param x Point at which the objective function must be evaluated.",
        "@param optData Optimization data. In addition to those documented in\n{@link BaseOptimizer#parseOptimizationData(OptimizationData[]) BaseOptimizer},\nthis method will register the following data:\n<ul>\n <li>{@link InitialGuess}</li>\n <li>{@link SimpleBounds}</li>\n</ul>",
        "@return the lower bounds, or {@code null} if not set.",
        "@return the upper bounds, or {@code null} if not set."
    ],
    [
        "@throws MathUnsupportedOperationException if bounds were passed to the\n{@link #optimize(OptimizationData[]) optimize} method.",
        "@param updateFormula formula to use for updating the &beta; parameter,\nmust be one of {@link Formula#FLETCHER_REEVES} or\n{@link Formula#POLAK_RIBIERE}.",
        "@throws NonSquareMatrixException if the matrix {@code rm} is not\nsquare",
        "@return the value of {@code Delta(p) + Delta(q) - Delta(p + q)}.",
        "@throws NumberIsTooSmallException if {@code p < 10.0} or {@code q < 10.0}.",
        "@return the value of {@code log(Beta(p, q))}, {@code NaN} if\n{@code p <= 0} or {@code q <= 0}.",
        "@param field field to which elements belong",
        "@param original original array (may be null)"
    ],
    [
        "@throws ArithmeticException if {@code a - b} overflows in signed {@code int} arithmetic",
        "@throws ArithmeticException if {@code a * b} overflows in signed {@code int} arithmetic",
        "@throws ArithmeticException if {@code b} to the {@code k}th power overflows in signed\n        {@code int} arithmetic",
        "@throws IllegalArgumentException if {@code n < 0}, {@code k < 0} or {@code k > n}",
        "@throws ArithmeticException if\n        <ul>\n        <li>{@code x} is infinite or NaN\n        <li>{@code x}, after being rounded to a mathematical integer using the specified\n        rounding mode, is either less than {@code Integer.MIN_VALUE} or greater than {@code\n        Integer.MAX_VALUE}\n        <li>{@code x} is not a mathematical integer and {@code mode} is\n        {@link RoundingMode#UNNECESSARY}\n        </ul>",
        "@throws ArithmeticException if\n        <ul>\n        <li>{@code x} is infinite or NaN\n        <li>{@code x}, after being rounded to a mathematical integer using the specified\n        rounding mode, is either less than {@code Long.MIN_VALUE} or greater than {@code\n        Long.MAX_VALUE}\n        <li>{@code x} is not a mathematical integer and {@code mode} is\n        {@link RoundingMode#UNNECESSARY}\n        </ul>",
        "@throws ArithmeticException if\n        <ul>\n        <li>{@code x} is infinite or NaN\n        <li>{@code x} is not a mathematical integer and {@code mode} is\n        {@link RoundingMode#UNNECESSARY}\n        </ul>",
        "@throws IllegalArgumentException if {@code x <= 0.0}, {@code x} is NaN, or {@code x} is\n        infinite"
    ],
    [
        "@param values a nonempty series of values, which will be converted to {@code double} values\n    (this may cause loss of precision for longs of magnitude over 2^53 (slightly over 9e15))",
        "@param replacement the characters to append to the result string in place of each matching\n       character in {@code sequence}",
        "@param replacement the character to append to the result string in place of each group of\n       matching characters in {@code sequence}",
        "@param target the collection that may contain the function input",
        "@param errorMessageArgs the arguments to be substituted into the message\n    template. Arguments are converted to strings using\n    {@link String#valueOf(Object)}.",
        "@param referent to weakly reference",
        "@param referent to phantom reference"
    ]
]