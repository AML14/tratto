[
    [
        "@return the value in the map, or defaultValue if the original value\n  is null or the map is null",
        "@return the value in the map as a string, or defaultValue if the\n  original value is null, the map is null or the string conversion fails",
        "@param defaultValue what to return if the value is null or if the\n  conversion fails",
        "@return the value in the map as a number, or defaultValue if the\n  original value is null, the map is null or the number conversion fails",
        "@return the value in the map as a number, or defaultValue if the\n  original value is null, the map is null or the map conversion fails",
        "@return the value in the Map as a Boolean, <code>false</code> if null map input",
        "@return the value in the Map as a byte, <code>0</code> if null map input",
        "@return the value in the Map as an int, <code>0</code> if null map input",
        "@return the value in the Map as a long, <code>0L</code> if null map input",
        "@return the value in the Map as a float, <code>0.0F</code> if null map input",
        "@return the value in the Map as a double, <code>0.0</code> if null map input",
        "@param defaultValue return if the value is null or if the conversion fails",
        "@return the value in the Map as a Boolean, <code>defaultValue</code> if null map input",
        "@return the value in the Map as a byte, <code>defaultValue</code> if null map input",
        "@param label The label to be used, may be <code>null</code>.\n  If <code>null</code>, the label is not output.\n  It typically represents the name of the property in a bean or similar."
    ],
    [
        "@param map The map to print, may be <code>null</code>.\n  If <code>null</code>, the text 'null' is output.",
        "@param label the label to be used, may be <code>null</code>.\n  If <code>null</code>, the label is not output.\n  It typically represents the name of the property in a bean or similar.",
        "@param map the map to print, may be <code>null</code>.\n  If <code>null</code>, the text 'null' is output",
        "@param keyType the type of reference to use for keys;\n  must be {@link ReferenceStrength#HARD HARD},\n  {@link ReferenceStrength#SOFT SOFT},\n  {@link ReferenceStrength#WEAK WEAK}",
        "@param valueType the type of reference to use for values;\n  must be {@link ReferenceStrength#HARD},\n  {@link ReferenceStrength#SOFT SOFT},\n  {@link ReferenceStrength#WEAK WEAK}",
        "@throws IllegalStateException if there is no last returned element, or if\n  the last returned element has already been removed",
        "@param nonNullComparator the comparator to use when comparing two\n non-<code>null</code> objects.  This argument cannot be\n <code>null</code>",
        "@throws ConvergenceException if the p-value can not be computed due to a\nconvergence error",
        "@throws MaxCountExceededException if the maximum number of iterations\nis exceeded",
        "@throws ConvergenceException if the p-value can not be computed due to\na convergence error",
        "@param categoryData <code>Collection</code> of <code>double[]</code> arrays each\n           containing data for one category",
        "@throws DimensionMismatchException if the length of the <code>categoryData</code> array is less\n            than 2 or a contained <code>double[]</code> array does not\n            contain at least two values",
        "@return test statistic \\(n m D_{n,m}\\) used to evaluate the null hypothesis that {@code x} and\n        {@code y} represent samples from the same underlying distribution",
        "@throws MathArithmeticException if the algorithm fails to convert {@code h} to a\n        {@link org.apache.commons.math3.fraction.BigFraction} in expressing {@code d} as \\((k\n        - h) / m\\) for integer {@code k, m} and \\(0 \\le h < 1\\)",
        "@throws MathArithmeticException if algorithm fails to convert {@code h} to a\n        {@link org.apache.commons.math3.fraction.BigFraction} in expressing {@code d} as \\((k\n        - h) / m\\) for integer {@code k, m} and \\(0 \\le h < 1\\)."
    ],
    [
        "@return the two-sided probability of \\(P(D_n < d)\\)",
        "@return \\(P(D_n < d)\\)",
        "@param d value of d-statistic (x in [2])",
        "@param j second path paramter",
        "@return half-width of 95% confidence interval for the slope estimate",
        "@throws OutOfRangeException if the confidence interval can not be computed.",
        "@param alpha the desired significance level",
        "@return significance level for slope/correlation",
        "@throws org.apache.commons.math3.exception.MaxCountExceededException if the significance level can not be computed.",
        "@param slope current slope",
        "@return the intercept of the regression line",
        "@param slope regression slope estimate",
        "@return RegressionResults acts as a container of regression output",
        "@throws ModelSpecificationException if the model is not correctly specified",
        "@throws NoDataException if there is not sufficient data in the model to\nestimate the regression parameters"
    ],
    [
        "@param variablesToInclude an array of indices of regressors to include",
        "@throws OutOfRangeException if a requested variable is not present in model",
        "@param includeIntercept whether or not to include an intercept term in\nthe regression model",
        "@return true if constant exists, false otherwise",
        "@return Number of observations",
        "@return the X sample data.",
        "@return the Y sample data.",
        "@return true if the model has no intercept term; false otherwise",
        "@param data input data array",
        "@param nobs number of observations (rows)",
        "@param nvars number of independent variables (columns, not counting y)",
        "@throws DimensionMismatchException if the length of the data array is not equal\nto <code>nobs * (nvars + 1)</code>",
        "@param y the array representing the y sample",
        "@param x the rectangular array representing the x sample",
        "@param individualDistances If {@code true}, the 8 individual\ninter-units distances will be {@link #computeImage(NeuronSquareMesh2D)\ncomputed}.  They will be stored in additional pixels around each of\nthe original units of the 2D-map.  The additional pixels that lie\nalong a \"diagonal\" are shared by <em>two</em> pairs of units: their\nvalue will be set to the average distance between the units belonging\nto each of the pairs.  The value zero will be stored in the pixel\ncorresponding to the location of a unit of the 2D-map.\n<br>\nIf {@code false}, only the average distance between a unit and all its\nneighbours will be computed (and stored in the pixel corresponding to\nthat unit of the 2D-map).  In that case, the number of neighbours taken\ninto account depends on the network's\n{@link org.apache.commons.math3.ml.neuralnet.SquareNeighbourhood\nneighbourhood type}."
    ],
    [
        "@return the (row, column) coordinates of {@code n}, or {@code null}\nif no such neuron belongs to the {@link #LocationFinder(NeuronSquareMesh2D)\nmap used to build this instance}.",
        "@throws MathIllegalStateException if the network contains non-unique\nidentifiers.  This indicates an inconsistent state due to a bug in\nthe construction code of the underlying\n{@link org.apache.commons.math3.ml.neuralnet.Network network}.",
        "@param normalizeCount Whether to compute relative bin counts.\nIf {@code true}, the data count in each bin will be divided by the total\nnumber of samples.",
        "@param relativeCount Whether to compute relative bin counts.\nIf {@code true}, the data count in each bin will be divided by the total\nnumber of samples mapped to the neuron represented by that bin.",
        "@param small Diagonal elements threshold under which  column are\nconsidered to be dependent on previous ones and are discarded.",
        "@param generator Underlying generator for uncorrelated normalized\ncomponents.",
        "@param randomData Random data generator.",
        "@throws NotStrictlyPositiveException if {@code binCount <= 0}.",
        "@param exponent exponent to which this {@code BigFraction} is to be\n           raised.",
        "@param pattern Message pattern providing the specific context of\nthe error.",
        "@throws org.apache.commons.math3.exception.TooManyEvaluationsException if the maximum number of evaluations is exceeded",
        "@throws NotStrictlyPositiveException if\n{@code numeratorDegreesOfFreedom <= 0} or\n{@code denominatorDegreesOfFreedom <= 0}.",
        "@param expansionFactor the array will be expanded based on this\n                       parameter",
        "@throws MathArithmeticException if the result cannot be represented\nas a non-negative {@code long} value.",
        "@throws MathArithmeticException if the result can not be represented as a\n{@code long}."
    ],
    [
        "@throws MathIllegalStateException if no roots of unity have been\ncomputed yet",
        "@param point Point coordinates.",
        "@param comparator Comparator to use to sort simplex vertices from best\nto worst.",
        "@param sideLength Length of the sides of the default (hypercube)\nsimplex. See {@link AbstractSimplex#AbstractSimplex(int,double)}.",
        "@param n Dimension of the simplex. See\n{@link AbstractSimplex#AbstractSimplex(int,double)}.",
        "@throws TooManyEvaluationsException if the maximal number of\nevaluations is exceeded.",
        "@throws org.apache.commons.math3.exception.ConvergenceException if the\noptimizer detects a convergence problem.",
        "@throws NonPositiveDefiniteOperatorException if {@code m} is not positive\ndefinite",
        "@param inverseCumAccuracy the maximum absolute error in inverse\ncumulative probability estimates (defaults to\n{@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY}).",
        "@throws NotStrictlyPositiveException if numComponents is less than one or\n            threshold is less than Double.MIN_VALUE",
        "@param exact whether the probability should be calculated exact using\n{@link org.apache.commons.math3.fraction.BigFraction} everywhere at the\nexpense of very slow execution time, or if {@code double} should be used\nconvenient places to gain speed. Almost never choose {@code true} in real\napplications unless you are very sure; {@code true} is almost solely for\nverification purposes.",
        "@return location parameter of the distribution",
        "@param rng random generator to be used for sampling",
        "@param mu location",
        "@return the allowed number of evaluations."
    ],
    [
        "@return a new instance suitable for allowing {@link Integer#MAX_VALUE}\nevaluations.",
        "@param max Allowed number of iterations.",
        "@param constraints Constraints.",
        "@return the coefficients of the constraint (left hand side).",
        "@return the relationship between left and right hand sides.",
        "@param optData Optimization data.\nIn addition to those documented in\n{@link LinearOptimizer#parseOptimizationData(OptimizationData[])\nLinearOptimizer}, this method will register the following data:\n<ul>\n <li>{@link SolutionCallback}</li>\n <li>{@link PivotSelectionRule}</li>\n</ul>",
        "@param tableau Simple tableau for the problem.",
        "@return the column with the most negative coefficient.",
        "@param tableau simplex tableau for the problem",
        "@return {@code true} if the pivot column is valid, {@code false} otherwise",
        "@param tableau Simplex tableau for the problem.",
        "@param col Column to test the ratio of (see {@link #getPivotColumn(SimplexTableau)}).",
        "@return the row with the minimum ratio.",
        "@param optData Optimization data.\nThe following data will be looked for:\n<ul>\n <li>{@link MaxEval}</li>\n <li>{@link MaxIter}</li>\n</ul>",
        "@param maxIter Maximum number of algorithm iterations."
    ],
    [
        "@param hi Upper bound.",
        "@param optData Optimization data. In addition to those documented in\n{@link BaseOptimizer#parseOptimizationData(OptimizationData[])\nBaseOptimizer}, this method will register the following data:\n<ul>\n <li>{@link GoalType}</li>\n <li>{@link SearchInterval}</li>\n <li>{@link UnivariateObjectiveFunction}</li>\n</ul>",
        "@param optData Optimization data.\nThe following data will be looked for:\n<ul>\n <li>{@link GoalType}</li>\n <li>{@link SearchInterval}</li>\n <li>{@link UnivariateObjectiveFunction}</li>\n</ul>",
        "@param x Point at which the objective function must be evaluated.",
        "@param optData Optimization data. In addition to those documented in\n{@link BaseOptimizer#parseOptimizationData(OptimizationData[]) BaseOptimizer},\nthis method will register the following data:\n<ul>\n <li>{@link InitialGuess}</li>\n <li>{@link SimpleBounds}</li>\n</ul>",
        "@return the lower bounds, or {@code null} if not set.",
        "@return the upper bounds, or {@code null} if not set.",
        "@throws MathUnsupportedOperationException if bounds were passed to the\n{@link #optimize(OptimizationData[]) optimize} method.",
        "@param updateFormula formula to use for updating the &beta; parameter,\nmust be one of {@link Formula#FLETCHER_REEVES} or\n{@link Formula#POLAK_RIBIERE}.",
        "@throws NonSquareMatrixException if the matrix {@code rm} is not\nsquare",
        "@return the value of {@code Delta(p) + Delta(q) - Delta(p + q)}.",
        "@throws NumberIsTooSmallException if {@code p < 10.0} or {@code q < 10.0}.",
        "@return the value of {@code log(Beta(p, q))}, {@code NaN} if\n{@code p <= 0} or {@code q <= 0}.",
        "@param field field to which elements belong",
        "@param original original array (may be null)"
    ],
    [
        "@return copied array or null if original array was null",
        "@return time",
        "@return main state dimension",
        "@return main state at time",
        "@return number of secondary states.",
        "@param index index of the secondary set as returned\nby {@link FieldExpandableODE#addSecondaryEquations(FieldSecondaryEquations)}\n(beware index 0 corresponds to main state, additional states start at 1)",
        "@return secondary state dimension",
        "@return secondary state at time",
        "@param time time",
        "@param state state at time",
        "@param secondaryState state at time (may be null)",
        "@return derivative of the main state at time",
        "@return derivative of the secondary state at time",
        "@return dimension of the problem",
        "@param t0 value of the independent <I>time</I> variable at integration start"
    ],
    [
        "@param y0 array containing the value of the state vector at integration start",
        "@param finalTime target time for the integration",
        "@throws NullArgumentException if {@code x} or any {@code y} is null",
        "@throws ArrayIndexOutOfBoundsException if <code>index</code> is less than\n        zero or is greater than <code>getNumElements() - 1</code>.",
        "@throws NotStrictlyPositiveException if {@code alpha <= 0} or\n{@code beta <= 0}.",
        "@throws NotStrictlyPositiveException if {@code sampleSize} is not\npositive.",
        "@throws MathIllegalArgumentException if points are null or the number of\n  data points is not compatible with this clusterer",
        "@throws NumberIsTooLargeException if maximal number of iterations\nis greater than {@link #TRAPEZOID_MAX_ITERATIONS_COUNT}",
        "@throws NumberIsTooSmallException if the number of generations is &lt; 1",
        "@param acceptSmall if true, steps smaller than the minimal value\nare silently increased up to this value, if false such small\nsteps generate an exception",
        "@throws NumberIsTooSmallException if the step is too small and acceptSmall is false",
        "@param t time",
        "@param y state array to map, including primary and secondary components",
        "@param yDot state derivative array to map, including primary and secondary components",
        "@param mapper former mapper, with one equation less (null for first equation)"
    ],
    [
        "@param dimension dimension of the equation state vector",
        "@return index of the secondary equation in the expanded state, to be used\nas the parameter to {@link FieldODEState#getSecondaryState(int)} and\n{@link FieldODEStateAndDerivative#getSecondaryDerivative(int)} (beware index\n0 corresponds to main state, additional states start at 1)",
        "@return dimension of the underlying FODE",
        "@param ode original first order differential equations",
        "@throws NullPointerException if the ODE equations have not been set (i.e. if this method\nis called outside of a call to {@link #integrate(ExpandableStatefulODE, double)} or {@link\n#integrate(FirstOrderDifferentialEquations, double, double[], double, double[])})",
        "@param equations set of differential equations",
        "@param yDDot placeholder array where to put the second time derivative\nof the state vector",
        "@param names names of the supported parameters",
        "@return the name of the unknown parameter.",
        "@param secondaryStateIndex index of the secondary set, as returned by {@link\norg.apache.commons.math3.ode.ExpandableStatefulODE#addSecondaryEquations(\norg.apache.commons.math3.ode.SecondaryEquations)\nExpandableStatefulODE.addSecondaryEquations(SecondaryEquations)}",
        "@param equationData placeholder where to put equation data",
        "@param firstIndex index of the first equation element in complete state arrays",
        "@throws MathIllegalArgumentException if the data array does not contain sufficient\ndata",
        "@throws ClassNotFoundException if the decoded object is of a \n        class that cannot be found by the JVM",
        "@throws IndexOutOfBoundException if <code>i</code> is negative or greater than or equal to the\n            in-degree"
    ],
    [
        "@throws IndexOutOfBoundException if <code>i</code> is negative or greater than or equal to the\n            out-degree",
        "@throws IndexOutOfBoundsException if {@code off < 0} or {@code off + len > bytes.length}\n  or {@code len < 0}",
        "@param type the type of elements desired\n\n<p><b>{@code Stream} equivalent:</b> <pre>   {@code",
        "@param a value to compare, returned if greater than or equal to the rest.",
        "@return {@code true} if the multimap changed",
        "@return the collection of replaced values, or an empty collection if no\n    values were previously associated with the key. The collection\n    <i>may</i> be modifiable, but updating it will have no effect on the\n    multimap.",
        "@throws IllegalStateException if an initial capacity was already set",
        "@param size the maximum size of the map",
        "@throws IllegalStateException if a maximum size was already set",
        "@throws IllegalStateException if a concurrency level was already set",
        "@throws IllegalStateException if the key strength was already set",
        "@throws IllegalStateException if the value strength was already set",
        "@param duration the length of time after an entry is created that it should be automatically\n    removed",
        "@param unit the unit that {@code duration} is expressed in",
        "@throws IllegalStateException if the time to live or time to idle was already set"
    ],
    [
        "@param duration the length of time after an entry is last accessed that it should be\n    automatically removed",
        "@throws IllegalStateException if the time to idle or time to live was already set",
        "@param terminationTimeout how long to wait for the executor to finish\n       before terminating the JVM",
        "@param executor the executor that runs {@code fallback} if {@code input}\n    fails",
        "@param scheduledExecutor The executor service to enforce the timeout.",
        "@param function A function to transform the result of the input future\n    to the result of the output future",
        "@return A future that holds result of the function (if the input succeeded)\n    or the original input's failure (if not)",
        "@return A future that holds result of the function (if the input succeeded) or the original\n    input's failure (if not)",
        "@param function A Function to transform the results of the provided future\n    to the results of the returned future.",
        "@return a future that provides a list of the results of the component\n        futures",
        "@param future The future attach the callback to.",
        "@param callback The callback to invoke when {@code future} is completed.",
        "@param executor The executor to run {@code callback} when the future\n   completes.",
        "@throws X if {@code get} throws any checked exception except for an {@code\n        ExecutionException} whose cause is not itself a checked exception",
        "@throws UncheckedExecutionException if {@code get} throws an {@code\n        ExecutionException} with a {@code RuntimeException} as its cause"
    ],
    [
        "@throws ExecutionError if {@code get} throws an {@code ExecutionException}\n        with an {@code Error} as its cause",
        "@throws IllegalArgumentException if {@code exceptionClass} extends {@code\n        RuntimeException} or does not have a suitable constructor",
        "@throws X if {@code get} throws any checked exception except for an {@code\n    ExecutionException} whose cause is not itself a checked exception",
        "@throws UncheckedExecutionException if {@code get} throws an {@code\n    ExecutionException} with a {@code RuntimeException} as its cause",
        "@throws NullPointerException if {@code comparator} or any of {@code\n        elements} is null",
        "@throws NullPointerException if {@code lists}, any one of the\n    {@code lists}, or any element of a provided list is null",
        "@throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code x}\n        is not a power of two",
        "@throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code x}\n        is not a power of ten",
        "@throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and\n        {@code sqrt(x)} is not an integer",
        "@throws ArithmeticException if {@code a + b} overflows in signed {@code long} arithmetic",
        "@throws ArithmeticException if {@code a - b} overflows in signed {@code long} arithmetic",
        "@throws ArithmeticException if {@code a * b} overflows in signed {@code long} arithmetic",
        "@throws ArithmeticException if {@code b} to the {@code k}th power overflows in signed\n        {@code long} arithmetic",
        "@throws IllegalArgumentException if {@code n < 0}, {@code k < 0}, or {@code k > n}",
        "@throws ArithmeticException if {@code a + b} overflows in signed {@code int} arithmetic"
    ],
    [
        "@throws ArithmeticException if {@code a - b} overflows in signed {@code int} arithmetic",
        "@throws ArithmeticException if {@code a * b} overflows in signed {@code int} arithmetic",
        "@throws ArithmeticException if {@code b} to the {@code k}th power overflows in signed\n        {@code int} arithmetic",
        "@throws IllegalArgumentException if {@code n < 0}, {@code k < 0} or {@code k > n}",
        "@throws ArithmeticException if\n        <ul>\n        <li>{@code x} is infinite or NaN\n        <li>{@code x}, after being rounded to a mathematical integer using the specified\n        rounding mode, is either less than {@code Integer.MIN_VALUE} or greater than {@code\n        Integer.MAX_VALUE}\n        <li>{@code x} is not a mathematical integer and {@code mode} is\n        {@link RoundingMode#UNNECESSARY}\n        </ul>",
        "@throws ArithmeticException if\n        <ul>\n        <li>{@code x} is infinite or NaN\n        <li>{@code x}, after being rounded to a mathematical integer using the specified\n        rounding mode, is either less than {@code Long.MIN_VALUE} or greater than {@code\n        Long.MAX_VALUE}\n        <li>{@code x} is not a mathematical integer and {@code mode} is\n        {@link RoundingMode#UNNECESSARY}\n        </ul>",
        "@throws ArithmeticException if\n        <ul>\n        <li>{@code x} is infinite or NaN\n        <li>{@code x} is not a mathematical integer and {@code mode} is\n        {@link RoundingMode#UNNECESSARY}\n        </ul>",
        "@throws IllegalArgumentException if {@code x <= 0.0}, {@code x} is NaN, or {@code x} is\n        infinite",
        "@param values a nonempty series of values, which will be converted to {@code double} values\n    (this may cause loss of precision for longs of magnitude over 2^53 (slightly over 9e15))",
        "@param replacement the characters to append to the result string in place of each matching\n       character in {@code sequence}",
        "@param replacement the character to append to the result string in place of each group of\n       matching characters in {@code sequence}",
        "@param target the collection that may contain the function input",
        "@param errorMessageArgs the arguments to be substituted into the message\n    template. Arguments are converted to strings using\n    {@link String#valueOf(Object)}.",
        "@param referent to weakly reference",
        "@param referent to phantom reference"
    ],
    [
        "@param stack The prefixes that preceed the characters represented by this\n    node. Each entry of the stack is in reverse order.",
        "@param encoded The serialized trie.",
        "@param builder A map builder to which all entries will be added.",
        "@return The number of characters consumed from {@code encoded}.",
        "@throws IllegalArgumentException if {@code tolerance} is {@code < 0} or NaN",
        "@param values a nonempty series of values",
        "@throws IllegalArgumentException if {@code values} is empty",
        "@return {@code dest}",
        "@throws IllegalArgumentException if any two keys are equal according to\n        their natural ordering",
        "@return {@code true} if {@code multisetToModify} was changed as a result of\n        this operation",
        "@param host the host name",
        "@throws IllegalArgumentException If the initial capacity is less than\n                                  zero, or if the load factor is\n                                  nonpositive",
        "@param initialCapacity the initial capacity of the\n                         <code>WeakHashMap</code>"
    ]
]