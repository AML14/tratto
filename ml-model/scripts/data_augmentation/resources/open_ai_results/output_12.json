"output=[\n  {\n    'tag': '@return the previous value mapped to this key',\n    'alternatives': [\n      '@return the previous value associated with this key',\n      '@return the value that was previously mapped to this key',\n      '@return the value that was previously associated with this key',\n      '@return the value that was mapped to this key before',\n      '@return the value that was previously assigned to this key'\n    ]\n  },\n  {\n    'tag': '@throws UnsupportedOperationException if the <code>put</code> method is not supported',\n    'alternatives': [\n      '@throws UnsupportedOperationException if the support for the <code>put</code> method is missing',\n      '@throws UnsupportedOperationException if the <code>put</code> operation is not supported',\n      '@throws UnsupportedOperationException when the <code>put</code> method is not implemented',\n      '@throws UnsupportedOperationException if the <code>put</code> method is not available',\n      '@throws UnsupportedOperationException if the <code>put</code> method is not permitted'\n    ]\n  },\n  {\n    'tag': '@throws ClassCastException (optional) if the map limits the type of the\\n value and the specified value is inappropriate',\n    'alternatives': [\n      '@throws ClassCastException (optional) if the map restricts the type of the\\n value and the provided value is unsuitable',\n      '@throws ClassCastException (optional) when the map restricts the type of the\\n value and the given value is not appropriate',\n      '@throws ClassCastException (optional) if the specified value is not appropriate for the\\n map constrained by the type of the value',\n      '@throws ClassCastException (optional) when the value specified does not comply with the type restriction\\n imposed by the map',\n      '@throws ClassCastException (optional) if the value provided is inappropriate for the\\n map which limits the type of the value'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException (optional) if the map limits the values\\n in some way and the value was invalid',\n    'alternatives': [\n      '@throws IllegalArgumentException (optional) if the map restricts the values\\n in some manner and the provided value is invalid',\n      '@throws IllegalArgumentException (optional) when the map restricts the values\\n in any way and the given value is not valid',\n      '@throws IllegalArgumentException (optional) if the specified value is invalid for the\\n map which limits the values in some way',\n      '@throws IllegalArgumentException (optional) when the value provided is not valid for the\\n map which imposes some restrictions on the values',\n      '@throws IllegalArgumentException (optional) if the value specified is not valid for the\\n map which imposes limitations on the values'\n    ]\n  },\n  {\n    'tag': '@param value the value to find the key for',\n    'alternatives': [\n      '@param value the value for which to search the key',\n      '@param value the value to look for the corresponding key',\n      '@param value the value used to retrieve the matching key',\n      '@param value the value for which the key needs to be found',\n      '@param value the value that needs to be matched with the key'\n    ]\n  },\n  {\n    'tag': '@return the mapped key, or <code>null</code> if not found',\n    'alternatives': [\n      '@return the associated key, or <code>null</code> if not present',\n      '@return the key that is mapped, or <code>null</code> if not found',\n      '@return the key that is associated, or <code>null</code> if not available',\n      '@return the key that is assigned, or <code>null</code> if not present',\n      '@return the key that is linked, or <code>null</code> if not found'\n    ]\n  },\n  {\n    'tag': '@param value the value to find the key-value pair for',\n    'alternatives': [\n      '@param value the value for which to search the key-value pair',\n      '@param value the value to look for the corresponding key-value mapping',\n      '@param value the value used to retrieve the matching key-value pair',\n      '@param value the value for which the key-value pair needs to be found',\n      '@param value the value that needs to be matched with the key-value pair'\n    ]\n  },\n  {\n    'tag': '@return the key that was removed, <code>null</code> if nothing removed',\n    'alternatives': [\n      '@return the key that is deleted, <code>null</code> if nothing was removed',\n      '@return the key that is eliminated, <code>null</code> if there was no removal',\n      '@return the key that is taken out, <code>null</code> if nothing was removed',\n      '@return the key that is extracted, <code>null</code> if no removal occurred',\n      '@return the key that is excluded, <code>null</code> if nothing was removed'\n    ]\n  },\n  {\n    'tag': '@throws UnsupportedOperationException if this method is not supported\\n by the implementation',\n    'alternatives': [\n      '@throws UnsupportedOperationException if the implementation does not support this method',\n      '@throws UnsupportedOperationException if this method is not implemented by the implementation',\n      '@throws UnsupportedOperationException when the implementation does not provide support for this method',\n      '@throws UnsupportedOperationException if the implementation does not allow this method',\n      '@throws UnsupportedOperationException if this method is not available in the implementation'\n    ]\n  },\n  {\n    'tag': '@return an inverted bidirectional map',\n    'alternatives': [\n      '@return a bidirectional map that is inverted',\n      '@return a bidirectional map with the keys and values swapped',\n      '@return a map that is bidirectional and inverted',\n      '@return a bidirectional map that is reversed',\n      '@return a map with the keys and values interchanged'\n    ]\n  },\n  {\n    'tag': '@return a set view of the values contained in this map',\n    'alternatives': [\n      '@return a set that provides a view of the values in this map',\n      '@return a set that presents a perspective of the values in this map',\n      '@return a set that shows the values held in this map',\n      '@return a set that displays the values contained in this map',\n      '@return a set that exhibits the values stored in this map'\n    ]\n  },\n  {\n    'tag': '@param o1 the first object to be equated.',\n    'alternatives': [\n      '@param o1 the first object to be compared for equality',\n      '@param o1 the initial object to be equated',\n      '@param o1 the object which is the first to be equated',\n      '@param o1 the object to be equated as the left operand',\n      '@param o1 the first object involved in the equality comparison'\n    ]\n  },\n  {\n    'tag': '@param o2 the second object to be equated.',\n    'alternatives': [\n      '@param o2 the second object to be compared for equality',\n      '@param o2 the subsequent object to be equated',\n      '@param o2 the object which is the second to be equated',\n      '@param o2 the object to be equated as the right operand',\n      '@param o2 the second object involved in the equality comparison'\n    ]\n  },\n  {\n    'tag': '@param o the object to calculate the hash for.',\n    'alternatives': [\n      '@param o the object for which to compute the hash',\n      '@param o the object for which the hash needs to be calculated',\n      '@param o the object used to generate the hash',\n      '@param o the object that will be hashed',\n      '@param o the object that is used as input for the hash calculation'\n    ]\n  },\n  {\n    'tag': '@return the hash of the object.',\n    'alternatives': [\n      '@return the computed hash value of the object',\n      '@return the resulting hash for the object',\n      '@return the calculated hash code of the object',\n      '@return the hash value generated for the object',\n      '@return the hashcode of the given object'\n    ]\n  },\n  {\n    'tag': '@param object the object to search for',\n    'alternatives': [\n      '@param object the object to look for',\n      '@param object the item to search for',\n      '@param object the element to find',\n      '@param object the target object to be searched',\n      '@param object the object that needs to be found'\n    ]\n  },\n  {\n    'tag': '@return the number of occurrences of the object, zero if not found',\n    'alternatives': [\n      '@return the count of how many times the object occurs, zero if it is not found',\n      '@return the occurrence count of the object, zero if it is not present',\n      '@return the number of times the object appears, zero if it is not found',\n      '@return the quantity of occurrences of the object, zero if it is not located',\n      '@return the total number of instances of the object, zero if it is not present'\n    ]\n  },\n  {\n    'tag': '@param object the object to update',\n    'alternatives': [\n      '@param object the object to modify',\n      '@param object the item to update',\n      '@param object the element to change',\n      '@param object the object to be updated',\n      '@param object the object that requires updating'\n    ]\n  },\n  {\n    'tag': '@param count the number of occurrences of the object',\n    'alternatives': [\n      '@param count the count of how many times the object occurs',\n      '@param count the number of times the object appears',\n      '@param count the occurrence count of the object',\n      '@param count the number of instances of the object',\n      '@param count the total count of occurrences of the object'\n    ]\n  },\n  {\n    'tag': '@return the number of occurrences of the object before this operation, zero\\n  if the object was not contained in the multiset',\n    'alternatives': [\n      '@return the count of occurrences of the object prior to this operation, zero\\n  if the object was not present in the multiset',\n      '@return the number of times the object occurred before this operation, zero\\n  if the object was not included in the multiset',\n      '@return the occurrence count of the object before this operation, zero\\n  if the object was not part of the multiset',\n      '@return the quantity of occurrences of the object preceding this operation, zero\\n  if the object was not found in the multiset',\n      '@return the total count of instances of the object prior to this operation, zero\\n  if the object was not in the multiset'\n    ]\n  },\n  {\n    'tag': '@param object the object to add',\n    'alternatives': [\n      '@param object the object to insert',\n      '@param object the item to include',\n      '@param object the element to append',\n      '@param object the object to append',\n      '@param object the object to be added'\n    ]\n  },\n  {\n    'tag': '@return <code>true</code> always, as the size of the MultiSet is increased\\n  in any case',\n    'alternatives': [\n      '@return <code>true</code> always, since the MultiSet size is increased\\n  regardless of any condition',\n      '@return <code>true</code> always, regardless of any condition, as the size of the MultiSet is increased',\n      '@return <code>true</code> always, no matter what, as the MultiSet size is increased',\n      '@return <code>true</code> always, regardless of any situation, as the MultiSet size is increased',\n      '@return <code>true</code> always, without exception, as the size of the MultiSet is increased'\n    ]\n  },\n  {\n    'tag': '@param occurrences the number of occurrences to add, may be zero,\\n  in which case no change is made to the multiset',\n    'alternatives': [\n      '@param occurrences the number of times to add the object, can be zero,\\n  in which case the multiset remains unchanged',\n      '@param occurrences the count of occurrences to append, can be zero,\\n  in which case the multiset stays unaltered',\n      '@param occurrences the quantity of instances to include, can be zero,\\n  in which case the multiset remains the same',\n      '@param occurrences the occurrence count to add, can be zero,\\n  in which case the multiset is not modified',\n      '@param occurrences the total count of occurrences to add, can be zero,\\n  in which case no change is made to the multiset'\n    ]\n  },\n  {\n    'tag': '@return the number of occurrences of the object in the multiset before\\n  this operation; possibly zero',\n    'alternatives': [\n      '@return the count of occurrences of the object in the multiset prior to\\n  this operation; possibly zero',\n      '@return the occurrence count of the object in the multiset before\\n  this operation; possibly zero',\n      '@return the number of times the object occurred in the multiset before\\n  this operation; possibly zero',\n      '@return the quantity of occurrences of the object in the multiset before\\n  this operation; possibly zero',\n      '@return the total count of instances of the object in the multiset prior to\\n  this operation; possibly zero'\n    ]\n  },\n  {\n    'tag': '@param object the object to remove',\n    'alternatives': [\n      '@param object the object to delete',\n      '@param object the item to eliminate',\n      '@param object the element to take out',\n      '@param object the object to extract',\n      '@param object the object to be removed'\n    ]\n  }\n]"