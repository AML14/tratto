"[\n  {\n    \"tag\": \"@throws NullPointerException if any iterator is null\",\n    \"alternatives\": [\n      \"@throws NullPointerException if any iterator is void\",\n      \"@throws NullPointerException when any iterator is null\",\n      \"@throws NullPointerException if null is passed as any iterator\",\n      \"@throws NullPointerException if any iterator is equal to null\",\n      \"@throws NullPointerException if null is provided as any iterator\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NullPointerException if the iterator is null\",\n    \"alternatives\": [\n      \"@throws NullPointerException if null is passed as the iterator\",\n      \"@throws NullPointerException if the iterator is void\",\n      \"@throws NullPointerException when the iterator is null\",\n      \"@throws NullPointerException if the iterator is equal to null\",\n      \"@throws NullPointerException if null is provided as the iterator\"\n    ]\n  },\n  {\n    \"tag\": \"@param iterator the iterator to decorate, must not be null\",\n    \"alternatives\": [\n      \"@param iterator the iterator to enhance, should not be null\",\n      \"@param iterator the iterator to modify, should not be null\",\n      \"@param iterator the iterator to augment, should not be null\",\n      \"@param iterator the iterator to manipulate, should not be null\",\n      \"@param iterator the iterator to customize, should not be null\"\n    ]\n  },\n  {\n    \"tag\": \"@param keyPredicate the predicate to validate the keys, null means no check\",\n    \"alternatives\": [\n      \"@param keyPredicate the predicate to validate the keys, null implies no verification\",\n      \"@param keyPredicate the predicate to verify the keys, null indicates no validation\",\n      \"@param keyPredicate the predicate to check the keys, null implies no evaluation\",\n      \"@param keyPredicate the predicate to ensure the keys, null means no validation\",\n      \"@param keyPredicate the predicate to authenticate the keys, null indicates no examination\"\n    ]\n  },\n  {\n    \"tag\": \"@param valuePredicate the predicate to validate to values, null means no check\",\n    \"alternatives\": [\n      \"@param valuePredicate the predicate to validate the values, null implies no verification\",\n      \"@param valuePredicate the predicate to verify the values, null indicates no validation\",\n      \"@param valuePredicate the predicate to check the values, null implies no evaluation\",\n      \"@param valuePredicate the predicate to ensure the values, null means no validation\",\n      \"@param valuePredicate the predicate to authenticate the values, null indicates no examination\"\n    ]\n  },\n  {\n    \"tag\": \"@return the value itself\",\n    \"alternatives\": [\n      \"@return the actual value\",\n      \"@return the value as it is\",\n      \"@return the value unchanged\",\n      \"@return the original value\",\n      \"@return the value without modification\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NullPointerException if the specified array is null\",\n    \"alternatives\": [\n      \"@throws NullPointerException if the provided array is null\",\n      \"@throws NullPointerException when the array passed is null\",\n      \"@throws NullPointerException if null is provided as the array\",\n      \"@throws NullPointerException if the specified array equals null\",\n      \"@throws NullPointerException if null is passed as the specified array\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NullPointerException if bag or lock is null\",\n    \"alternatives\": [\n      \"@throws NullPointerException when bag or lock is null\",\n      \"@throws NullPointerException if null is passed as bag or lock\",\n      \"@throws NullPointerException if bag or lock equals null\",\n      \"@throws NullPointerException if null is provided for bag or lock\",\n      \"@throws NullPointerException if bag or lock is void\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NullPointerException if collection is null\",\n    \"alternatives\": [\n      \"@throws NullPointerException when collection is null\",\n      \"@throws NullPointerException if null is passed as collection\",\n      \"@throws NullPointerException if collection equals null\",\n      \"@throws NullPointerException if null is provided for collection\",\n      \"@throws NullPointerException if collection is void\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NullPointerException if the transformer or the predicate is null\",\n    \"alternatives\": [\n      \"@throws NullPointerException if null is passed as the transformer or the predicate\",\n      \"@throws NullPointerException when the transformer or the predicate is null\",\n      \"@throws NullPointerException if the transformer or the predicate equals null\",\n      \"@throws NullPointerException if the transformer or the predicate is void\",\n      \"@throws NullPointerException if the transformer or the predicate is provided as null\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NullPointerException if the class is null\",\n    \"alternatives\": [\n      \"@throws NullPointerException when the class is null\",\n      \"@throws NullPointerException if null is passed as the class\",\n      \"@throws NullPointerException if the class equals null\",\n      \"@throws NullPointerException if null is provided for the class\",\n      \"@throws NullPointerException if the class is void\"\n    ]\n  },\n  {\n    \"tag\": \"@param type the type to check for, may not be null\",\n    \"alternatives\": [\n      \"@param type the type to verify, must not be null\",\n      \"@param type the type to examine, should not be null\",\n      \"@param type the type to ensure, may not be null\",\n      \"@param type the type to validate, must not be null\",\n      \"@param type the type to test for, should not be null\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NullPointerException if the methodName is null.\",\n    \"alternatives\": [\n      \"@throws NullPointerException when the methodName is null\",\n      \"@throws NullPointerException if null is passed as the methodName\",\n      \"@throws NullPointerException if the methodName equals null\",\n      \"@throws NullPointerException if null is provided for the methodName\",\n      \"@throws NullPointerException if the methodName is void\"\n    ]\n  },\n  {\n    \"tag\": \"@param methodName the method name to call on the input object, may not be null\",\n    \"alternatives\": [\n      \"@param methodName the method name to invoke on the input object, must not be null\",\n      \"@param methodName the method name to execute on the input object, should not be null\",\n      \"@param methodName the method name to perform on the input object, may not be null\",\n      \"@param methodName the method name to invoke on the input object, should not be null\",\n      \"@param methodName the method name to execute on the input object, must not be null\"\n    ]\n  },\n  {\n    \"tag\": \"@param predicate1 the first predicate, may not be null\",\n    \"alternatives\": [\n      \"@param predicate1 the initial predicate, must not be null\",\n      \"@param predicate1 the first condition, should not be null\",\n      \"@param predicate1 the primary predicate, may not be null\",\n      \"@param predicate1 the initial check, must not be null\",\n      \"@param predicate1 the first validation, should not be null\"\n    ]\n  },\n  {\n    \"tag\": \"@param predicate2 the second predicate, may not be null\",\n    \"alternatives\": [\n      \"@param predicate2 the subsequent predicate, must not be null\",\n      \"@param predicate2 the second condition, should not be null\",\n      \"@param predicate2 the secondary predicate, may not be null\",\n      \"@param predicate2 the subsequent check, must not be null\",\n      \"@param predicate2 the second validation, should not be null\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NullPointerException if the predicates array is null\",\n    \"alternatives\": [\n      \"@throws NullPointerException when the predicates array is null\",\n      \"@throws NullPointerException if null is passed as the predicates array\",\n      \"@throws NullPointerException if the predicates array equals null\",\n      \"@throws NullPointerException if null is provided for the predicates array\",\n      \"@throws NullPointerException if the predicates array is void\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NullPointerException if any predicate in the array is null\",\n    \"alternatives\": [\n      \"@throws NullPointerException if any predicate in the array equals null\",\n      \"@throws NullPointerException when any predicate in the array is null\",\n      \"@throws NullPointerException if null is provided as any predicate in the array\",\n      \"@throws NullPointerException if any predicate in the array is void\",\n      \"@throws NullPointerException if null is passed as any predicate in the array\"\n    ]\n  },\n  {\n    \"tag\": \"@param predicates an array of predicates to check, may not be null\",\n    \"alternatives\": [\n      \"@param predicates an array of predicates to verify, must not be null\",\n      \"@param predicates an array of predicates to examine, should not be null\",\n      \"@param predicates an array of predicates to ensure, may not be null\",\n      \"@param predicates an array of predicates to validate, must not be null\",\n      \"@param predicates an array of predicates to test for, should not be null\"\n    ]\n  },\n  {\n    \"tag\": \"@param predicate the predicate for the bag, must not be null\",\n    \"alternatives\": [\n      \"@param predicate the predicate to use for the bag, must not be null\",\n      \"@param predicate the predicate applied to the bag, should not be null\",\n      \"@param predicate the predicate that acts on the bag, may not be null\",\n      \"@param predicate the predicate used to validate the bag, must not be null\",\n      \"@param predicate the predicate to check against the bag, should not be null\"\n    ]\n  },\n  {\n    \"tag\": \"@throws NullPointerException if the Bag or Transformer is null\",\n    \"alternatives\": [\n      \"@throws NullPointerException when the Bag or Transformer is null\",\n      \"@throws NullPointerException if null is passed for the Bag or Transformer\",\n      \"@throws NullPointerException if the Bag or Transformer equals null\",\n      \"@throws NullPointerException if null is provided as the Bag or Transformer\",\n      \"@throws NullPointerException if the Bag or Transformer is void\"\n    ]\n  },\n  {\n    \"tag\": \"@param bag the bag to predicate, must not be null\",\n    \"alternatives\": [\n      \"@param bag the bag to apply the predicate to, must not be null\",\n      \"@param bag the bag to subject to the predicate, should not be null\",\n      \"@param bag the bag to evaluate with the predicate, may not be null\",\n      \"@param bag the bag to validate using the predicate, must not be null\",\n      \"@param bag the bag to check against using the predicate, should not be null\"\n    ]\n  },\n  {\n    \"tag\": \"@param transformer the transformer for the bag, must not be null\",\n    \"alternatives\": [\n      \"@param transformer the transformer to apply to the bag, must not be null\",\n      \"@param transformer the transformer used for the bag, should not be null\",\n      \"@param transformer the transformer that acts on the bag, may not be null\",\n      \"@param transformer the transformer to use with the bag, must not be null\",\n      \"@param transformer the transformer to modify the bag, should not be null\"\n    ]\n  },\n  {\n    \"tag\": \"@return an empty Bag\",\n    \"alternatives\": [\n      \"@return a Bag that is empty\",\n      \"@return a Bag with no elements\",\n      \"@return an empty container\",\n      \"@return a Bag containing nothing\",\n      \"@return a Bag that does not contain any element\"\n    ]\n  },\n  {\n    \"tag\": \"@return an empty sorted Bag\",\n    \"alternatives\": [\n      \"@return a sorted Bag that is empty\",\n      \"@return a sorted Bag with no elements\",\n      \"@return an empty container that is sorted\",\n      \"@return a sorted Bag containing nothing\",\n      \"@return a sorted Bag that does not contain any element\"\n    ]\n  }\n]"