"output = [\n  {\n    'tag': '@return <code>true</code> if this call changed the collection',\n    'alternatives': [\n      '@return <code>true</code> if this operation modified the collection',\n      '@return <code>true</code> if the collection was changed by this call',\n      '@return <code>true</code> if the collection was modified by this method',\n      '@return <code>true</code> if this method caused a change in the collection',\n      '@return <code>true</code> if the collection has been modified'\n    ]\n  },\n  {\n    'tag': '@param occurrences the number of occurrences to remove, may be zero,\\n  in which case no change is made to the multiset',\n    'alternatives': [\n      '@param occurrences the count of instances to be removed, which can be zero,\n   in that case, no modifications will be applied to the multiset',\n      '@param occurrences the number of times the element should be removed, can be zero,\n   if it is zero, the multiset will remain unaltered',\n      '@param occurrences the quantity of occurrences to eliminate, it can be zero,\n   meaning that no modifications will be made to the multiset',\n      '@param occurrences the number of instances to delete, inclusive of zero,\n   if zero, the multiset will not be modified',\n      '@param occurrences the total amount of occurrences to be eliminated, which can be zero,\n   in case it is zero, no changes will be made to the multiset'\n    ]\n  },\n  {\n    'tag': '@return the number of occurrences of the object in the multiset\\n  before the operation; possibly zero',\n    'alternatives': [\n      '@return the count of occurrences of the object in the multiset\n   before executing the operation; it may be zero',\n      '@return the number of times the object is present in the multiset\n   prior to the operation; it could be zero',\n      '@return the total occurrence count of the object in the multiset\n   before the operation, which may be zero',\n      '@return the quantity of times the object appears in the multiset\n   before performing the operation; it may be zero',\n      '@return the total number of instances of the object in the multiset\n   prior to the operation; it can be zero'\n    ]\n  },\n  {\n    'tag': '@return the Set of unique MultiSet elements',\n    'alternatives': [\n      '@return the Set containing only distinct elements from the MultiSet',\n      '@return the Set that contains unique elements from the MultiSet',\n      '@return the Set consisting of distinct elements from the MultiSet',\n      '@return the Set of individual elements found in the MultiSet',\n      '@return the Set containing only non-duplicated elements from the MultiSet'\n    ]\n  },\n  {\n    'tag': '@return the Set of MultiSet entries',\n    'alternatives': [\n      '@return the Set containing entries from the MultiSet',\n      '@return the Set of elements found in the MultiSet',\n      '@return the Set that includes elements from the MultiSet',\n      '@return the Set consisting of items from the MultiSet',\n      '@return the Set containing all entries of the MultiSet'\n    ]\n  },\n  {\n    'tag': '@return iterator over all elements in the MultiSet',\n    'alternatives': [\n      '@return an iterator that traverses all the elements in the MultiSet',\n      '@return an iterator that iterates through all the elements in the MultiSet',\n      '@return an iterator that goes through all elements in the MultiSet',\n      '@return an iterator that visits all the elements in the MultiSet',\n      '@return an iterator that loops over all the elements in the MultiSet'\n    ]\n  },\n  {\n    'tag': '@return the total size of the multiset',\n    'alternatives': [\n      '@return the overall size of the multiset',\n      '@return the total count of elements in the multiset',\n      '@return the combined size of all elements in the multiset',\n      '@return the sum of the sizes of all elements in the multiset',\n      '@return the aggregate size of the multiset'\n    ]\n  },\n  {\n    'tag': '@param coll the collection to check against',\n    'alternatives': [\n      '@param coll the collection to compare with',\n      '@param coll the collection used for comparison',\n      '@param coll the collection to be compared against',\n      '@param coll the collection to be checked for similarity',\n      '@param coll the collection to be validated against'\n    ]\n  },\n  {\n    'tag': '@return <code>true</code> if the MultiSet contains all the collection',\n    'alternatives': [\n      '@return <code>true</code> if the MultiSet includes all the elements in the collection',\n      '@return <code>true</code> if the MultiSet holds all the objects from the collection',\n      '@return <code>true</code> if the MultiSet contains every item in the collection',\n      '@return <code>true</code> if the MultiSet has all elements from the collection',\n      '@return <code>true</code> if the MultiSet possesses every object in the collection'\n    ]\n  },\n  {\n    'tag': '@param coll the collection of elements to remove',\n    'alternatives': [\n      '@param coll the collection of items to delete',\n      '@param coll the collection of objects to be eliminated',\n      '@param coll the collection containing elements to be removed',\n      '@param coll the collection that holds items to be deleted',\n      '@param coll the collection from which elements will be extracted'\n    ]\n  },\n  {\n    'tag': '@return <code>true</code> if this call changed the multiset',\n    'alternatives': [\n      '@return <code>true</code> if this operation modified the multiset',\n      '@return <code>true</code> if the multiset was changed by this call',\n      '@return <code>true</code> if the multiset was modified by this method',\n      '@return <code>true</code> if this method caused a change in the multiset',\n      '@return <code>true</code> if the multiset has been modified'\n    ]\n  },\n  {\n    'tag': '@param coll the collection of elements to retain',\n    'alternatives': [\n      '@param coll the collection of items to keep',\n      '@param coll the collection of objects to preserve',\n      '@param coll the collection containing elements to be retained',\n      '@param coll the collection that holds items to be preserved',\n      '@param coll the collection from which elements will be selected'\n    ]\n  },\n  {\n    'tag': '@param obj the object to compare to',\n    'alternatives': [\n      '@param obj the object to be compared',\n      '@param obj the object used for comparison',\n      '@param obj the object to be compared with',\n      '@param obj the reference object for comparison',\n      '@param obj the object to be used for evaluating similarity'\n    ]\n  },\n  {\n    'tag': '@return true if equal',\n    'alternatives': [\n      '@return true if the objects are equal',\n      '@return true if the objects have the same values',\n      '@return true if the objects are identical',\n      '@return true if the objects are equivalent',\n      '@return true if the objects exhibit equality'\n    ]\n  },\n  {\n    'tag': '@return the hash code of the MultiSet',\n    'alternatives': [\n      '@return the MultiSet\\'s hash code',\n      '@return the hash code of the MultiSet object',\n      '@return the MultiSet\\'s unique identifier',\n      '@return the MultiSet\\'s hashed value',\n      '@return the cryptographic hash code of the MultiSet'\n    ]\n  },\n  {\n    'tag': '@param <E> the element type',\n    'alternatives': [\n      '@param <E> the type of element',\n      '@param <E> the type of objects',\n      '@param <E> the object\\'s data type',\n      '@param <E> the category of elements',\n      '@param <E> the class of the elements'\n    ]\n  },\n  {\n    'tag': '@return an iterator over nothing',\n    'alternatives': [\n      '@return an empty iterator',\n      '@return an iterator with no elements',\n      '@return an iterator that does not iterate',\n      '@return an iterator without any items',\n      '@return an iterator that traverses nothing'\n    ]\n  },\n  {\n    'tag': '@return a list iterator over nothing',\n    'alternatives': [\n      '@return an empty list iterator',\n      '@return a list iterator with no elements',\n      '@return a list iterator that does not iterate',\n      '@return a list iterator without any items',\n      '@return a list iterator that traverses nothing'\n    ]\n  },\n  {\n    'tag': '@return an ordered iterator over nothing',\n    'alternatives': [\n      '@return an empty ordered iterator',\n      '@return an ordered iterator with no elements',\n      '@return an ordered iterator that does not iterate',\n      '@return an ordered iterator without any items',\n      '@return an ordered iterator that traverses nothing'\n    ]\n  },\n  {\n    'tag': '@param <K> the key type',\n    'alternatives': [\n      '@param <K> the type of key',\n      '@param <K> the type of keys',\n      '@param <K> the key\\'s data type',\n      '@param <K> the category of keys',\n      '@param <K> the class of the keys'\n    ]\n  },\n  {\n    'tag': '@param <V> the value type',\n    'alternatives': [\n      '@param <V> the type of value',\n      '@param <V> the type of values',\n      '@param <V> the value\\'s data type',\n      '@param <V> the category of values',\n      '@param <V> the class of the values'\n    ]\n  },\n  {\n    'tag': '@return a map iterator over nothing',\n    'alternatives': [\n      '@return an empty map iterator',\n      '@return a map iterator with no elements',\n      '@return a map iterator that does not iterate',\n      '@return a map iterator without any entries',\n      '@return a map iterator that traverses nothing'\n    ]\n  },\n  {\n    'tag': '@param object the single object over which to iterate',\n    'alternatives': [\n      '@param object the individual object to be iterated',\n      '@param object the sole item for iteration',\n      '@param object the only element to iterate',\n      '@param object the unique object for traversal',\n      '@param object the specific item to iterate over'\n    ]\n  },\n  {\n    'tag': '@return a singleton iterator over the object',\n    'alternatives': [\n      '@return an iterator that contains only the object',\n      '@return an iterator with a single element: the object',\n      '@return an iterator that iterates over the single object',\n      '@return an iterator that holds only the specified object',\n      '@return an iterator that includes solely the object'\n    ]\n  },\n  {\n    'tag': '@return a singleton list iterator over the object',\n    'alternatives': [\n      '@return a list iterator that contains only the object',\n      '@return a list iterator with a single element: the object',\n      '@return a list iterator that iterates over the single object',\n      '@return a list iterator that holds only the specified object',\n      '@return a list iterator that includes solely the object'\n    ]\n  }\n]\n"