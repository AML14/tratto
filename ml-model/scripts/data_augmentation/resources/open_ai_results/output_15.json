"output=[\n  {\n    'tag': '@return a new filtered iterator',\n    'alternatives': [\n      '@return a fresh iterator that has been filtered',\n      '@return a brand new iterator that is filtered',\n      '@return a newly-created iterator after applying the filter',\n      '@return an iterator that has been newly filtered',\n      '@return a newly generated iterator that is filtered'\n    ]\n  },\n  {\n    'tag': '@return a new looping iterator',\n    'alternatives': [\n      '@return a fresh iterator that loops',\n      '@return a brand new iterator for looping',\n      '@return a newly-created iterator that loops',\n      '@return an iterator that loops and is newly created',\n      '@return a new iterator built specifically for looping'\n    ]\n  },\n  {\n    'tag': '@return a new, single use {@link Iterator}',\n    'alternatives': [\n      '@return a fresh iterator that can be used only once {@link Iterator}',\n      '@return a brand new, single use {@link Iterator}',\n      '@return a newly-created {@link Iterator} that can only be used once',\n      '@return an iterator that is newly created and designed for single use only {@link Iterator}',\n      '@return a special iterator that is newly generated and meant to be used only once {@link Iterator}'\n    ]\n  },\n  {\n    'tag': '@return a peeking iterator',\n    'alternatives': [\n      '@return an iterator with peeking functionality',\n      '@return an iterator that allows peeking',\n      '@return an iterator that supports peeking',\n      '@return an iterator that permits peeking',\n      '@return an iterator that has the ability to peek'\n    ]\n  },\n  {\n    'tag': '@return a pushback iterator',\n    'alternatives': [\n      '@return an iterator with pushback capability',\n      '@return an iterator that can pushback',\n      '@return an iterator that has pushback capability',\n      '@return an iterator that supports pushback',\n      '@return an iterator that allows pushback'\n    ]\n  },\n  {\n    'tag': '@param offset the first number of elements to skip',\n    'alternatives': [\n      '@param offset the initial count of elements to ignore',\n      '@param offset the starting number of elements to skip',\n      '@param offset the initial quantity of elements to omit',\n      '@param offset the number of elements to bypass initially',\n      '@param offset the count of elements to discard initially'\n    ]\n  },\n  {\n    'tag': '@return a new skipping iterator',\n    'alternatives': [\n      '@return a fresh iterator that skips elements',\n      '@return a brand new iterator for skipping',\n      '@return a newly-created iterator that skips',\n      '@return an iterator that skips and is newly created',\n      '@return a new iterator designed specifically for skipping'\n    ]\n  },\n  {\n    'tag': '@param a the first iterator to interleave',\n    'alternatives': [\n      '@param a the initial iterator to intermix',\n      '@param a the beginning iterator to combine',\n      '@param a the first iterator to interpose',\n      '@param a the starting iterator to merge',\n      '@param a the primary iterator to intertwine'\n    ]\n  },\n  {\n    'tag': '@param b the second iterator to interleave',\n    'alternatives': [\n      '@param b the subsequent iterator to intermix',\n      '@param b the next iterator to combine',\n      '@param b the second iterator to interpose',\n      '@param b the succeeding iterator to merge',\n      '@param b the secondary iterator to intertwine'\n    ]\n  },\n  {\n    'tag': '@param c the third iterator to interleave',\n    'alternatives': [\n      '@param c the third iterator to intermix',\n      '@param c the third iterator to combine',\n      '@param c the iterator to interpose among others',\n      '@param c the third iterator to merge',\n      '@param c the last iterator to intertwine'\n    ]\n  },\n  {\n    'tag': '@param iterators the array of iterators to interleave',\n    'alternatives': [\n      '@param iterators the set of iterators to intermix',\n      '@param iterators the collection of iterators to combine',\n      '@param iterators the array of iterators to interpose',\n      '@param iterators the sequence of iterators to merge',\n      '@param iterators the list of iterators to intertwine'\n    ]\n  },\n  {\n    'tag': '@return an iterator, interleaving the decorated iterators',\n    'alternatives': [\n      '@return a decorated iterator that interleaves the elements',\n      '@return an iterator that combines the decorators',\n      '@return an iterator with interleaved decorators',\n      '@return an iterator that decorates and interleaves',\n      '@return an iterator implementing interleaved decorators'\n    ]\n  },\n  {\n    'tag': '@return a new iterator',\n    'alternatives': [\n      '@return a fresh iterator',\n      '@return a brand new iterator',\n      '@return a newly-created iterator',\n      '@return an iterator that is newly generated',\n      '@return a newly instantiated iterator'\n    ]\n  },\n  {\n    'tag': '@return a new enumeration',\n    'alternatives': [\n      '@return a fresh enumeration',\n      '@return a brand new enumeration',\n      '@return a newly-created enumeration',\n      '@return an enumeration that is newly generated',\n      '@return a newly instantiated enumeration'\n    ]\n  },\n  {\n    'tag': '@return a new, single use {@link Iterable}',\n    'alternatives': [\n      '@return a fresh {@link Iterable} that can only be used once',\n      '@return a brand new, single use {@link Iterable}',\n      '@return a newly-created {@link Iterable} that is single use',\n      '@return an {@link Iterable} that is newly created and meant to be used only once',\n      '@return a special {@link Iterable} that is newly generated and can be used once only'\n    ]\n  },\n  {\n    'tag': '@return a new, multiple use iterable',\n    'alternatives': [\n      '@return a fresh iterable that can be used multiple times',\n      '@return a brand new, multiple use iterable',\n      '@return a newly-created iterable that can be reused',\n      '@return an iterable that is newly created and designed for multiple use',\n      '@return a special iterable that is newly generated and can be used multiple times'\n    ]\n  },\n  {\n    'tag': '@return an array of the iterator contents',\n    'alternatives': [\n      '@return an array containing the elements of the iterator',\n      '@return an array that holds the contents of the iterator',\n      '@return an array that stores the elements of the iterator',\n      '@return an array populated with the contents of the iterator',\n      '@return an array formed from the elements of the iterator'\n    ]\n  },\n  {\n    'tag': '@param arrayClass the class of array to create',\n    'alternatives': [\n      '@param arrayClass the class of array for creation',\n      '@param arrayClass the class used to instantiate the array',\n      '@param arrayClass the class that defines the array type to create',\n      '@param arrayClass the class representing the array to be created',\n      '@param arrayClass the class which is used to create the array'\n    ]\n  },\n  {\n    'tag': '@throws ArrayStoreException if the arrayClass is invalid',\n    'alternatives': [\n      '@throws ArrayStoreException when the arrayClass is not valid',\n      '@throws ArrayStoreException if the provided arrayClass is not acceptable',\n      '@throws ArrayStoreException in case the arrayClass is considered invalid',\n      '@throws ArrayStoreException if the arrayClass is deemed invalid',\n      '@throws ArrayStoreException if the arrayClass is determined to be invalid'\n    ]\n  },\n  {\n    'tag': '@return a list of the iterator contents',\n    'alternatives': [\n      '@return a list containing the elements of the iterator',\n      '@return a list that holds the contents of the iterator',\n      '@return a list that stores the elements of the iterator',\n      '@return a list populated with the contents of the iterator',\n      '@return a list formed from the elements of the iterator'\n    ]\n  },\n  {\n    'tag': '@param estimatedSize the initial size of the ArrayList',\n    'alternatives': [\n      '@param estimatedSize the starting size of the ArrayList',\n      '@param estimatedSize the initial capacity of the ArrayList',\n      '@param estimatedSize the initial length of the ArrayList',\n      '@param estimatedSize the estimated size for the ArrayList',\n      '@param estimatedSize the expected size of the ArrayList'\n    ]\n  },\n  {\n    'tag': '@param obj the object to convert to an iterator',\n    'alternatives': [\n      '@param obj the object that will be converted to an iterator',\n      '@param obj the object from which an iterator will be created',\n      '@param obj the object that needs to be converted to an iterator',\n      '@param obj the object that should be transformed into an iterator',\n      '@param obj the object that will be changed into an iterator'\n    ]\n  },\n  {\n    'tag': '@return a suitable iterator, never null',\n    'alternatives': [\n      '@return an appropriate iterator, always not null',\n      '@return a fitting iterator, guaranteed not null',\n      '@return an iterator that is appropriate, never null',\n      '@return a suitable iterator that is always not null',\n      '@return an iterator that is deemed suitable and never null'\n    ]\n  },\n  {\n    'tag': '@param iterator the iterator to use, may be null',\n    'alternatives': [\n      '@param iterator the iterator that can be used, possibly null',\n      '@param iterator the iterator to utilize, can be null',\n      '@param iterator the iterator to be used, may be null',\n      '@param iterator the iterator that may be null to be used',\n      '@param iterator the iterator that can optionally be used, possibly null'\n    ]\n  },\n  {\n    'tag': '@param <E> the type of object the {@link Iterator} contains',\n    'alternatives': [\n      '@param <E> the object type that the {@link Iterator} holds',\n      '@param <E> the object type that the {@link Iterator} contains',\n      '@param <E> the type of element that the {@link Iterator} stores',\n      '@param <E> the type of object that the {@link Iterator} carries',\n      '@param <E> the object type that the {@link Iterator} encompasses'\n    ]\n  }\n]"