"output=[\n{\n  'tag': '@param set the set to synchronize, must not be null',\n  'alternatives': [\n    '@param set the set to synchronize, must not be null',\n    '@param set the set to harmonize, must not be null',\n    '@param set the set to coordinate, must not be null',\n    '@param set the set to unify, must not be null',\n    '@param set the set to align, must not be null'\n  ]\n},\n{\n  'tag': '@param set the set to make unmodifiable, must not be null',\n  'alternatives': [\n    '@param set the set to make unmodifiable, must not be null',\n    '@param set the set to render unmodifiable, must not be null',\n    '@param set the set to convert to unmodifiable, must not be null',\n    '@param set the set to transform into unmodifiable, must not be null',\n    '@param set the set to modify as unmodifiable, must not be null'\n  ]\n},\n{\n  'tag': '@throws NullPointerException if the set or predicate is null',\n  'alternatives': [\n    '@throws NullPointerException if the set or predicate is null',\n    '@throws NullPointerException if the set or condition is null',\n    '@throws NullPointerException if the set or statement is null',\n    '@throws NullPointerException if the set or requirement is null',\n    '@throws NullPointerException if the set or assumption is null'\n  ]\n},\n{\n  'tag': '@param set the set to predicate, must not be null',\n  'alternatives': [\n    '@param set the set to predicate, must not be null',\n    '@param set the set to assess, must not be null',\n    '@param set the set to evaluate, must not be null',\n    '@param set the set to validate, must not be null',\n    '@param set the set to check, must not be null'\n  ]\n},\n{\n  'tag': '@param predicate the predicate for the set, must not be null',\n  'alternatives': [\n    '@param predicate the predicate for the set, must not be null',\n    '@param condition the condition for the set, must not be null',\n    '@param statement the statement for the set, must not be null',\n    '@param requirement the requirement for the set, must not be null',\n    '@param assumption the assumption for the set, must not be null'\n  ]\n},\n{\n  'tag': '@throws NullPointerException if the set or transformer is null',\n  'alternatives': [\n    '@throws NullPointerException if the set or transformer is null',\n    '@throws NullPointerException if the set or converter is null',\n    '@throws NullPointerException if the set or changer is null',\n    '@throws NullPointerException if the set or modifier is null',\n    '@throws NullPointerException if the set or adapter is null'\n  ]\n},\n{\n  'tag': '@param set the set to transform, must not be null',\n  'alternatives': [\n    '@param set the set to transform, must not be null',\n    '@param set the set to convert, must not be null',\n    '@param set the set to modify, must not be null',\n    '@param set the set to change, must not be null',\n    '@param set the set to alter, must not be null'\n  ]\n},\n{\n  'tag': '@param transformer the transformer for the set, must not be null',\n  'alternatives': [\n    '@param transformer the transformer for the set, must not be null',\n    '@param converter the converter for the set, must not be null',\n    '@param changer the changer for the set, must not be null',\n    '@param modifier the modifier for the set, must not be null',\n    '@param adapter the adapter for the set, must not be null'\n  ]\n},\n{\n  'tag': '@param set the set to order, must not be null',\n  'alternatives': [\n    '@param set the set to order, must not be null',\n    '@param set the set to sort, must not be null',\n    '@param set the set to classify, must not be null',\n    '@param set the set to arrange, must not be null',\n    '@param set the set to organize, must not be null'\n  ]\n},\n{\n  'tag': '@param set the sorted set to synchronize, must not be null',\n  'alternatives': [\n    '@param set the sorted set to synchronize, must not be null',\n    '@param set the sorted set to harmonize, must not be null',\n    '@param set the sorted set to coordinate, must not be null',\n    '@param set the sorted set to unify, must not be null',\n    '@param set the sorted set to align, must not be null'\n  ]\n},\n{\n  'tag': '@param set the sorted set to make unmodifiable, must not be null',\n  'alternatives': [\n    '@param set the sorted set to make unmodifiable, must not be null',\n    '@param set the sorted set to render unmodifiable, must not be null',\n    '@param set the sorted set to convert to unmodifiable, must not be null',\n    '@param set the sorted set to transform into unmodifiable, must not be null',\n    '@param set the sorted set to modify as unmodifiable, must not be null'\n  ]\n},\n{\n  'tag': '@param set the sorted set to predicate, must not be null',\n  'alternatives': [\n    '@param set the sorted set to predicate, must not be null',\n    '@param set the sorted set to assess, must not be null',\n    '@param set the sorted set to evaluate, must not be null',\n    '@param set the sorted set to validate, must not be null',\n    '@param set the sorted set to check, must not be null'\n  ]\n},\n{\n  'tag': '@param predicate the predicate for the sorted set, must not be null',\n  'alternatives': [\n    '@param predicate the predicate for the sorted set, must not be null',\n    '@param condition the condition for the sorted set, must not be null',\n    '@param statement the statement for the sorted set, must not be null',\n    '@param requirement the requirement for the sorted set, must not be null',\n    '@param assumption the assumption for the sorted set, must not be null'\n  ]\n},\n{\n  'tag': '@param set the navigable set to make unmodifiable, must not be null',\n  'alternatives': [\n    '@param set the navigable set to make unmodifiable, must not be null',\n    '@param set the navigable set to render unmodifiable, must not be null',\n    '@param set the navigable set to convert to unmodifiable, must not be null',\n    '@param set the navigable set to transform into unmodifiable, must not be null',\n    '@param set the navigable set to modify as unmodifiable, must not be null'\n  ]\n},\n{\n  'tag': '@param set the navigable set to predicate, must not be null',\n  'alternatives': [\n    '@param set the navigable set to predicate, must not be null',\n    '@param set the navigable set to assess, must not be null',\n    '@param set the navigable set to evaluate, must not be null',\n    '@param set the navigable set to validate, must not be null',\n    '@param set the navigable set to check, must not be null'\n  ]\n},\n{\n  'tag': '@param predicate the predicate for the navigable set, must not be null',\n  'alternatives': [\n    '@param predicate the predicate for the navigable set, must not be null',\n    '@param condition the condition for the navigable set, must not be null',\n    '@param statement the statement for the navigable set, must not be null',\n    '@param requirement the requirement for the navigable set, must not be null',\n    '@param assumption the assumption for the navigable set, must not be null'\n  ]\n},\n{\n  'tag': '@param set the navigable set to transform, must not be null',\n  'alternatives': [\n    '@param set the navigable set to transform, must not be null',\n    '@param set the navigable set to convert, must not be null',\n    '@param set the navigable set to modify, must not be null',\n    '@param set the navigable set to change, must not be null',\n    '@param set the navigable set to alter, must not be null'\n  ]\n},\n{\n  'tag': '@throws NullPointerException if either input set is null',\n  'alternatives': [\n    '@throws NullPointerException if either input set is null',\n    '@throws NullPointerException if any of the input sets is null',\n    '@throws NullPointerException if one of the input sets is null',\n    '@throws NullPointerException if both input sets are null',\n    '@throws NullPointerException if any input set is null'\n  ]\n},\n{\n  'tag': '@param a the first set, must not be null',\n  'alternatives': [\n    '@param a the first set, must not be null',\n    '@param a the initial set, must not be null',\n    '@param a the primary set, must not be null',\n    '@param a the starting set, must not be null',\n    '@param a the original set, must not be null'\n  ]\n},\n{\n  'tag': '@param b the second set, must not be null',\n  'alternatives': [\n    '@param b the second set, must not be null',\n    '@param b the other set, must not be null',\n    '@param b the additional set, must not be null',\n    '@param b the next set, must not be null',\n    '@param b the complementary set, must not be null'\n  ]\n},\n{\n  'tag': '@param a the set to subtract from, must not be null',\n  'alternatives': [\n    '@param a the set to subtract from, must not be null',\n    '@param a the set to remove from, must not be null',\n    '@param a the set to exclude from, must not be null',\n    '@param a the set to delete from, must not be null',\n    '@param a the set to eliminate from, must not be null'\n  ]\n},\n{\n  'tag': '@param b the set to subtract, must not be null',\n  'alternatives': [\n    '@param b the set to subtract, must not be null',\n    '@param b the set to remove, must not be null',\n    '@param b the set to exclude, must not be null',\n    '@param b the set to delete, must not be null',\n    '@param b the set to eliminate, must not be null'\n  ]\n},\n{\n  'tag': '@return whether the two objects are equal.',\n  'alternatives': [\n    '@return whether the two objects are equal.',\n    '@return if the two objects are equal or not.',\n    '@return true if the two objects are equal.',\n    '@return a boolean indicating the equality of the two objects.',\n    '@return returns a value indicating whether the two objects are equal or not.'\n  ]\n},\n{\n  'tag': '@param key the key to store',\n  'alternatives': [\n    '@param key the key to store',\n    '@param key the key to save',\n    '@param key the key to record',\n    '@param key the key to place',\n    '@param key the key to put'\n  ]\n},\n{\n  'tag': '@param value the value to store',\n  'alternatives': [\n    '@param value the value to store',\n    '@param value the value to save',\n    '@param value the value to record',\n    '@param value the value to place',\n    '@param value the value to put'\n  ]\n}\n]"