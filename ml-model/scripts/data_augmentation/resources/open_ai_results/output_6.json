"output = [\n  {'tag': '@throws NullPointerException if classToInstantiate is null', 'alternatives': ['@throws NullPointerException if classToInstantiate is null']},\n  {'tag': '@param classToInstantiate the class to instantiate, not null', 'alternatives': ['@param classToInstantiate the class to instantiate, not null']},\n  {'tag': '@throws NullPointerException if list or transformer is null', 'alternatives': ['@throws NullPointerException if list or transformer is null']},\n  {'tag': '@throws NullPointerException if trie is null', 'alternatives': ['@throws NullPointerException if trie is null']},\n  {'tag': '@param trie the trie to make unmodifiable, must not be null', 'alternatives': ['@param trie the trie to make unmodifiable, must not be null']},\n  {'tag': '@param reverse false = forward sort; true = reverse sort', 'alternatives': ['@param reverse false = forward sort; true = reverse sort']},\n  {'tag': '@param reverse false = forward sort order; true = reverse sort order', 'alternatives': ['@param reverse false = forward sort order; true = reverse sort order']},\n  {'tag': '@return immutable empty collection', 'alternatives': ['@return immutable empty collection']},\n  {'tag': '@return an empty collection if the argument is <code>null</code>', 'alternatives': ['@return an empty collection if the argument is <code>null</code>']},\n  {'tag': '@param a the first collection, must not be null', 'alternatives': ['@param a the first collection, must not be null']},\n  {'tag': '@param b the second collection, must not be null', 'alternatives': ['@param b the second collection, must not be null']},\n  {'tag': '@param a the collection to subtract from, must not be null', 'alternatives': ['@param a the collection to subtract from, must not be null']},\n  {'tag': '@param b the collection to subtract, must not be null', 'alternatives': ['@param b the collection to subtract, must not be null']},\n  {'tag': '@param coll1 the first collection, must not be null', 'alternatives': ['@param coll1 the first collection, must not be null']},\n  {'tag': '@param coll2 the second collection, must not be null', 'alternatives': ['@param coll2 the second collection, must not be null']},\n  {'tag': '@param coll the collection to get the cardinality map for, must not be null', 'alternatives': ['@param coll the collection to get the cardinality map for, must not be null']},\n  {'tag': '@param a the first (sub?) collection, must not be null', 'alternatives': ['@param a the first (sub?) collection, must not be null']},\n  {'tag': '@param b the second (super?) collection, must not be null', 'alternatives': ['@param b the second (super?) collection, must not be null']},\n  {'tag': '@return <code>true</code> iff <i>a</i> is a <i>proper</i> sub-collection of <i>b</i>', 'alternatives': ['@return <code>true</code> iff <i>a</i> is a <i>proper</i> sub-collection of <i>b</i>']},\n  {'tag': '@throws NullPointerException if the equator is null', 'alternatives': ['@throws NullPointerException if the equator is null']},\n  {'tag': '@return closure', 'alternatives': ['@return closure']},\n  {'tag': '@return the last element in the collection, or null if either collection or closure is null', 'alternatives': ['@return the last element in the collection, or null if either collection or closure is null']},\n  {'tag': '@return the last element in the collection, or null if either iterator or closure is null', 'alternatives': ['@return the last element in the collection, or null if either iterator or closure is null']},\n  {'tag': '@throws NullPointerException if the input collection is null', 'alternatives': ['@throws NullPointerException if the input collection is null']},\n  {'tag': '@param inputCollection the collection to get the input from, may not be null', 'alternatives': ['@param inputCollection the collection to get the input from, may not be null']}\n]"