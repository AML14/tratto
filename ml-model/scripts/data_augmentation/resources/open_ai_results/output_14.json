"output = [\n  {\n    'tag': '@param array the array over which to iterate',\n    'alternatives': [\n      '@param array the array to iterate over',\n      '@param array the collection to iterate through',\n      '@param array the array for iteration',\n      '@param array the iterable array',\n      '@param array the array to loop through'\n    ]\n  },\n  {\n    'tag': '@return an iterator over the array',\n    'alternatives': [\n      '@return an array iterator',\n      '@return an iterator for the array',\n      '@return an iterator that iterates over the array',\n      '@return an array traversal iterator',\n      '@return an iterator that traverses the array'\n    ]\n  },\n  {\n    'tag': '@throws IllegalArgumentException if the array is not an array',\n    'alternatives': [\n      '@throws IllegalArgumentException if the array is not of array type',\n      '@throws IllegalArgumentException if the input is not an array',\n      '@throws IllegalArgumentException if the object is not an array',\n      '@throws IllegalArgumentException if the array type is invalid',\n      '@throws IllegalArgumentException if the provided input is not a valid array'\n    ]\n  },\n  {\n    'tag': '@param start the index to start iterating at',\n    'alternatives': [\n      '@param start the starting index for iteration',\n      '@param start the initial iteration index',\n      '@param start the index to begin iteration',\n      '@param start the starting position of iteration',\n      '@param start the index from which iteration begins'\n    ]\n  },\n  {\n    'tag': '@return an iterator over part of the array',\n    'alternatives': [\n      '@return an iterator for a subset of the array',\n      '@return an iterator that iterates over a portion of the array',\n      '@return an iterator limited to a section of the array',\n      '@return an iterator that traverses a segment of the array',\n      '@return an iterator restricted to a subset of the array'\n    ]\n  },\n  {\n    'tag': '@param end the index to finish iterating at',\n    'alternatives': [\n      '@param end the ending index for iteration',\n      '@param end the index where iteration stops',\n      '@param end the index to conclude iteration',\n      '@param end the position at which iteration ends',\n      '@param end the index until which to iterate'\n    ]\n  },\n  {\n    'tag': '@throws IndexOutOfBoundsException if array bounds are invalid',\n    'alternatives': [\n      '@throws IndexOutOfBoundsException if the array has invalid boundaries',\n      '@throws IndexOutOfBoundsException if the array bounds are not valid',\n      '@throws IndexOutOfBoundsException if the array has invalid limits',\n      '@throws IndexOutOfBoundsException if the array boundaries are invalid',\n      '@throws IndexOutOfBoundsException if the array has out-of-bounds limits'\n    ]\n  },\n  {\n    'tag': '@return a list iterator over the array',\n    'alternatives': [\n      '@return a list iterator for the array',\n      '@return a list iterator that iterates over the array',\n      '@return a list iterator traversing the array',\n      '@return a list iterator that goes through the array',\n      '@return a list iterator associated with the array'\n    ]\n  },\n  {\n    'tag': '@return a list iterator over part of the array',\n    'alternatives': [\n      '@return a list iterator for a subset of the array',\n      '@return a list iterator that iterates over a portion of the array',\n      '@return a list iterator limited to a section of the array',\n      '@return a list iterator that traverses a segment of the array',\n      '@return a list iterator restricted to a subset of the array'\n    ]\n  },\n  {\n    'tag': '@param iterator the iterator to decorate',\n    'alternatives': [\n      '@param iterator the iterator to enhance',\n      '@param iterator the iterator for decoration',\n      '@param iterator the iterator to modify',\n      '@param iterator the iterator to embellish',\n      '@param iterator the iterator for decorating'\n    ]\n  },\n  {\n    'tag': '@param max the maximum number of elements returned by this iterator',\n    'alternatives': [\n      '@param max the upper limit of elements returned by this iterator',\n      '@param max the maximum elements that can be returned by this iterator',\n      '@param max the highest number of elements that this iterator can return',\n      '@param max the maximum count of elements that this iterator yields',\n      '@param max the maximum quantity of elements produced by this iterator'\n    ]\n  },\n  {\n    'tag': '@return a new bounded iterator',\n    'alternatives': [\n      '@return a bounded iterator instance',\n      '@return a fresh bounded iterator',\n      '@return a newly created bounded iterator',\n      '@return a bounded iterator object',\n      '@return a brand new bounded iterator'\n    ]\n  },\n  {\n    'tag': '@param offset the index of the first element of the decorated iterator to return',\n    'alternatives': [\n      '@param offset the starting index of the decorated iterator to retrieve',\n      '@param offset the initial element index of the decorated iterator to yield',\n      '@param offset the index where the decorated iterator begins returning elements',\n      '@param offset the position of the first element that the decorated iterator provides',\n      '@param offset the index of the decorated iterator's initial element to output'\n    ]\n  },\n  {\n    'tag': '@param iterator the iterator to make immutable',\n    'alternatives': [\n      '@param iterator the iterator to convert into an immutable version',\n      '@param iterator the iterator to transform into an immutable variant',\n      '@param iterator the iterator to make unmodifiable',\n      '@param iterator the iterator to change to an unchangeable state',\n      '@param iterator the iterator to render as immutable'\n    ]\n  },\n  {\n    'tag': '@return an immutable version of the iterator',\n    'alternatives': [\n      '@return a version of the iterator that cannot be modified',\n      '@return an unmodifiable iterator',\n      '@return a read-only version of the iterator',\n      '@return an iterator that is not changeable',\n      '@return an iterator rendered as immutable'\n    ]\n  },\n  {\n    'tag': '@param listIterator the iterator to make immutable',\n    'alternatives': [\n      '@param listIterator the iterator to convert into an immutable version',\n      '@param listIterator the iterator to transform into an immutable variant',\n      '@param listIterator the iterator to make unmodifiable',\n      '@param listIterator the iterator to change to an unchangeable state',\n      '@param listIterator the iterator to render as immutable'\n    ]\n  },\n  {\n    'tag': '@param mapIterator the iterator to make immutable',\n    'alternatives': [\n      '@param mapIterator the iterator to convert into an immutable version',\n      '@param mapIterator the iterator to transform into an immutable variant',\n      '@param mapIterator the iterator to make unmodifiable',\n      '@param mapIterator the iterator to change to an unchangeable state',\n      '@param mapIterator the iterator to render as immutable'\n    ]\n  },\n  {\n    'tag': '@return a combination iterator over the iterators',\n    'alternatives': [\n      '@return an iterator that combines the given iterators',\n      '@return an iterator that merges multiple iterators into one',\n      '@return an iterator that concatenates the provided iterators',\n      '@return an iterator that joins together the given iterators',\n      '@return an iterator that combines and iterates over the given iterators'\n    ]\n  },\n  {\n    'tag': '@throws ClassCastException if the iterators collection contains the wrong object type',\n    'alternatives': [\n      '@throws ClassCastException if the iterators collection has an incorrect object type',\n      '@throws ClassCastException if the object type in the iterators collection is invalid',\n      '@throws ClassCastException if the iterators collection has an incompatible object type',\n      '@throws ClassCastException if the wrong object type is found in the iterators collection',\n      '@throws ClassCastException if the iterators collection contains an object of the wrong type'\n    ]\n  },\n  {\n    'tag': '@param comparator the comparator to use, may be null for natural order',\n    'alternatives': [\n      '@param comparator the comparator to utilize, null for natural order',\n      '@param comparator the comparator for comparison, null for natural order',\n      '@param comparator the comparator that is used, null for natural order',\n      '@param comparator the comparator to apply, null for natural order',\n      '@param comparator the comparator to employ, null for natural order'\n    ]\n  },\n  {\n    'tag': '@param root the root object to start iterating from, null results in an empty iterator',\n    'alternatives': [\n      '@param root the starting point object for iteration, null produces an empty iterator',\n      '@param root the object from which iteration begins, null yields an empty iterator',\n      '@param root the initial object to iterate from, null leads to an empty iterator',\n      '@param root the origin object for iteration, null gives an empty iterator',\n      '@param root the object to initiate iteration from, null gives an empty iterator'\n    ]\n  },\n  {\n    'tag': '@return a new object graph iterator',\n    'alternatives': [\n      '@return a new iterator for traversing the object graph',\n      '@return a fresh iterator that goes through the object graph',\n      '@return a newly created iterator for the object graph',\n      '@return an iterator specifically designed for the object graph',\n      '@return a brand new iterator that navigates the object graph'\n    ]\n  },\n  {\n    'tag': '@param <I> the input type',\n    'alternatives': [\n      '@param <I> the type of input',\n      '@param <I> the type of the input',\n      '@param <I> the data type for input',\n      '@param <I> the input data type',\n      '@param <I> the type of the incoming data'\n    ]\n  },\n  {\n    'tag': '@param <O> the output type',\n    'alternatives': [\n      '@param <O> the type of output',\n      '@param <O> the type of the output',\n      '@param <O> the data type for output',\n      '@param <O> the output data type',\n      '@param <O> the type of the resulting data'\n    ]\n  },\n  {\n    'tag': '@return a new transforming iterator',\n    'alternatives': [\n      '@return a new iterator that transforms elements',\n      '@return a fresh iterator for converting elements',\n      '@return a newly created iterator for element transformation',\n      '@return an iterator that performs element conversion',\n      '@return a brand new iterator that applies element transformation'\n    ]\n  }\n]"