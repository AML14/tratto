"[\n    {\n        'tag': '@param outputCollection the collection to output into, may not be null if the inputCollection\\n  and predicate or not null',\n        'alternatives': [\n            '@param outputCollection the collection to output into, may not be null if the inputCollection\\n  and predicate are not null',\n            '@param outputCollection the collection to output into, if the inputCollection\\n  and predicate are not null, it must not be null',\n            '@param outputCollection the collection to store the output, should not be null when there is inputCollection\\n  and predicate',\n            '@param outputCollection the destination collection for the output, cannot be null when the inputCollection\\n  and predicate exist',\n            '@param outputCollection the target collection for output, must not be null when there is inputCollection\\n  and predicate'\n        ]\n    },\n    {\n        'tag': '@param outputCollection the collection to output selected elements into, may not be null if the\\n  inputCollection and predicate are not null',\n        'alternatives': [\n            '@param outputCollection the collection to output selected elements into, if the\\n  inputCollection and predicate are not null, it must not be null',\n            '@param outputCollection the collection to store selected elements, should not be null when there is\\n  inputCollection and predicate',\n            '@param outputCollection the destination collection for the selected elements, cannot be null when the\\n  inputCollection and predicate exist',\n            '@param outputCollection the target collection for storing selected elements, must not be null when\\n  there is inputCollection and predicate',\n            '@param outputCollection the output collection for the selected elements, must not be null when there\\n  is inputCollection and predicate'\n        ]\n    },\n    {\n        'tag': '@param rejectedCollection the collection to output rejected elements into, may not be null if the\\n  inputCollection or predicate are not null',\n        'alternatives': [\n            '@param rejectedCollection the collection to output rejected elements into, if the\\n  inputCollection or predicate are not null, it must not be null',\n            '@param rejectedCollection the collection to store rejected elements, should not be null when there is\\n  inputCollection or predicate',\n            '@param rejectedCollection the destination collection for the rejected elements, cannot be null when\\n  the inputCollection or predicate exist',\n            '@param rejectedCollection the target collection for storing rejected elements, must not be null\\n  when there is inputCollection or predicate',\n            '@param rejectedCollection the output collection for the rejected elements, must not be null when there\\n  is inputCollection or predicate'\n        ]\n    },\n    {\n        'tag': '@return the outputCollection',\n        'alternatives': [\n            '@return the outputCollection',\n            '@return the collection that contains the output',\n            '@return the result collection',\n            '@return the collection obtained as output',\n            '@return the returned outputCollection'\n        ]\n    },\n    {\n        'tag': '@throws NullPointerException if the outputCollection is null and both, inputCollection and\\n  transformer are not null',\n        'alternatives': [\n            '@throws NullPointerException if the outputCollection is null and both, inputCollection and\\n  transformer are not null',\n            '@throws NullPointerException if the outputCollection is null and both inputCollection and\\n  transformer are not null',\n            '@throws NullPointerException if the outputCollection is null when both inputCollection and\\n  transformer are not null',\n            '@throws NullPointerException if the outputCollection is null while both inputCollection and\\n  transformer are not null',\n            '@throws NullPointerException if the outputCollection is null, with both inputCollection and\\n  transformer not null'\n        ]\n    },\n    {\n        'tag': '@param outputCollection the collection to output into, may not be null if inputCollection\\n  and transformer are not null',\n        'alternatives': [\n            '@param outputCollection the collection to output into, may not be null if inputCollection\\n  and transformer are not null',\n            '@param outputCollection the collection to store the output, should not be null when there is inputCollection\\n  and transformer',\n            '@param outputCollection the destination collection for the output, cannot be null when the inputCollection\\n  and transformer exist',\n            '@param outputCollection the target collection for output, must not be null when there is inputCollection\\n  and transformer',\n            '@param outputCollection the output collection, must not be null when there is inputCollection\\n  and transformer'\n        ]\n    },\n    {\n        'tag': '@throws NullPointerException if the output collection is null and both, inputIterator and\\n  transformer are not null',\n        'alternatives': [\n            '@throws NullPointerException if the output collection is null and both, inputIterator and\\n  transformer are not null',\n            '@throws NullPointerException if the output collection is null and both inputIterator and\\n  transformer are not null',\n            '@throws NullPointerException if the output collection is null when both inputIterator and\\n  transformer are not null',\n            '@throws NullPointerException if the output collection is null while both inputIterator and\\n  transformer are not null',\n            '@throws NullPointerException if the output collection is null, with both inputIterator and\\n  transformer not null'\n        ]\n    },\n    {\n        'tag': '@param outputCollection the collection to output into, may not be null if inputIterator\\n  and transformer are not null',\n        'alternatives': [\n            '@param outputCollection the collection to output into, may not be null if inputIterator\\n  and transformer are not null',\n            '@param outputCollection the collection to store the output, should not be null when there is inputIterator\\n  and transformer',\n            '@param outputCollection the destination collection for the output, cannot be null when the inputIterator\\n  and transformer exist',\n            '@param outputCollection the target collection for output, must not be null when there is inputIterator\\n  and transformer',\n            '@param outputCollection the output collection, must not be null when there is inputIterator\\n  and transformer'\n        ]\n    },\n    {\n        'tag': '@param collection the collection to add to, must not be null',\n        'alternatives': [\n            '@param collection the collection to add to, must not be null',\n            '@param collection the collection to append to, it should not be null',\n            '@param collection the collection to insert into, cannot be null',\n            '@param collection the target collection to add to, should not be null',\n            '@param collection the collection where the elements will be added, must not be null'\n        ]\n    },\n    {\n        'tag': '@throws NullPointerException if the collection or iterator is null',\n        'alternatives': [\n            '@throws NullPointerException if the collection or iterator is null',\n            '@throws NullPointerException when the collection or iterator is null',\n            '@throws NullPointerException if either the collection or iterator is null',\n            '@throws NullPointerException in case the collection or iterator is null',\n            '@throws NullPointerException if either collection or iterator is null'\n        ]\n    },\n    {\n        'tag': '@param iterable the iterable of elements to add, must not be null',\n        'alternatives': [\n            '@param iterable the iterable of elements to add, must not be null',\n            '@param iterable the iterable containing elements to add, should not be null',\n            '@param iterable the iterable that provides the elements to be added, cannot be null',\n            '@param iterable the iterable from which to add elements, must not be null',\n            '@param iterable the iterable that supplies elements for addition, must not be null'\n        ]\n    },\n    {\n        'tag': '@param iterator the iterator of elements to add, must not be null',\n        'alternatives': [\n            '@param iterator the iterator of elements to add, must not be null',\n            '@param iterator the iterator that provides elements to add, should not be null',\n            '@param iterator the iterator that supplies the elements to be added, cannot be null',\n            '@param iterator the iterator from which to add elements, must not be null',\n            '@param iterator the iterator that produces elements for addition, must not be null'\n        ]\n    },\n    {\n        'tag': '@throws NullPointerException if the collection or enumeration is null',\n        'alternatives': [\n            '@throws NullPointerException if the collection or enumeration is null',\n            '@throws NullPointerException when the collection or enumeration is null',\n            '@throws NullPointerException if either the collection or enumeration is null',\n            '@throws NullPointerException in case the collection or enumeration is null',\n            '@throws NullPointerException if either collection or enumeration is null'\n        ]\n    },\n    {\n        'tag': '@param enumeration the enumeration of elements to add, must not be null',\n        'alternatives': [\n            '@param enumeration the enumeration of elements to add, must not be null',\n            '@param enumeration the enumeration containing elements to add, should not be null',\n            '@param enumeration the enumeration that provides the elements to be added, cannot be null',\n            '@param enumeration the enumeration from which to add elements, must not be null',\n            '@param enumeration the enumeration that supplies elements for addition, must not be null'\n        ]\n    },\n    {\n        'tag': '@throws NullPointerException if the collection or array is null',\n        'alternatives': [\n            '@throws NullPointerException if the collection or array is null',\n            '@throws NullPointerException when the collection or array is null',\n            '@throws NullPointerException if either the collection or array is null',\n            '@throws NullPointerException in case the collection or array is null',\n            '@throws NullPointerException if either collection or array is null'\n        ]\n    },\n    {\n        'tag': '@param elements the array of elements to add, must not be null',\n        'alternatives': [\n            '@param elements the array of elements to add, must not be null',\n            '@param elements the array containing elements to add, should not be null',\n            '@param elements the array that provides the elements to be added, cannot be null',\n            '@param elements the array from which to add elements, must not be null',\n            '@param elements the array that supplies elements for addition, must not be null'\n        ]\n    },\n    {\n        'tag': '@throws IndexOutOfBoundsException if the index is invalid',\n        'alternatives': [\n            '@throws IndexOutOfBoundsException if the index is invalid',\n            '@throws IndexOutOfBoundsException when the index is not valid',\n            '@throws IndexOutOfBoundsException if the index is out of bounds',\n            '@throws IndexOutOfBoundsException in case of an invalid index',\n            '@throws IndexOutOfBoundsException if the index is outside the allowable range'\n        ]\n    },\n    {\n        'tag': '@return the size of the specified collection or 0 if the object was null',\n        'alternatives': [\n            '@return the size of the specified collection or 0 if the object was null',\n            '@return the number of elements in the given collection or 0 if the object was null',\n            '@return the count of elements in the specified collection or 0 if the object was null',\n            '@return the length of the specified collection or 0 if the object was null',\n            '@return the total elements in the specified collection or 0 if the object was null'\n        ]\n    },\n    {\n        'tag': '@return true if empty or null',\n        'alternatives': [\n            '@return true if empty or null',\n            '@return true if there is no content or null',\n            '@return true if there are no elements or null',\n            '@return true if there is no data or null',\n            '@return true if there is no value or null'\n        ]\n    },\n    {\n        'tag': '@return true if non-null and non-empty',\n        'alternatives': [\n            '@return true if non-null and non-empty',\n            '@return true if neither null nor empty',\n            '@return true if not null and not empty',\n            '@return true if has content and not null',\n            '@return true if it is not null and not empty'\n        ]\n    },\n    {\n        'tag': '@throws IndexOutOfBoundsException if the index is negative.',\n        'alternatives': [\n            '@throws IndexOutOfBoundsException if the index is negative.',\n            '@throws IndexOutOfBoundsException when the index is less than 0.',\n            '@throws IndexOutOfBoundsException if the index is less than 0.',\n            '@throws IndexOutOfBoundsException in case of a negative index.',\n            '@throws IndexOutOfBoundsException if the index is below zero.'\n        ]\n    },\n    {\n        'tag': '@throws NullPointerException if either collection is null',\n        'alternatives': [\n            '@throws NullPointerException if either collection is null',\n            '@throws NullPointerException when either collection is null',\n            '@throws NullPointerException if any of the collections is null',\n            '@throws NullPointerException in case either collection is null',\n            '@throws NullPointerException if any collection is null'\n        ]\n    },\n    {\n        'tag': '@throws NullPointerException if either collection or the comparator is null',\n        'alternatives': [\n            '@throws NullPointerException if either collection or the comparator is null',\n            '@throws NullPointerException when either collection or the comparator is null',\n            '@throws NullPointerException if any of the collections or the comparator is null',\n            '@throws NullPointerException in case either collection or the comparator is null',\n            '@throws NullPointerException if any collection or the comparator is null'\n        ]\n    },\n    {\n        'tag': '@param collection the collection to create permutations for, may not be null',\n        'alternatives': [\n            '@param collection the collection to create permutations for, may not be null',\n            '@param collection the collection for which permutations should be created, should not be null',\n            '@param collection the collection to generate permutations for, cannot be null',\n            '@param collection the target collection to create permutations for, must not be null',\n            '@param collection the collection that will be used for generating permutations, must not be null'\n        ]\n    },\n    {\n        'tag': '@throws NullPointerException if either parameter is null',\n        'alternatives': [\n            '@throws NullPointerException if either parameter is null',\n            '@throws NullPointerException when either parameter is null"