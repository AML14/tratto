id,oracleId,label,projectName,packageName,className,javadocTag,methodJavadoc,methodSourceCode,classJavadoc,oracleSoFar,token,tokenClass,tokenInfo,notes
,1,TRUE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",,(,OpeningParenthesis,,
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",,;,SemiColon,,Token that should be generated if no oracle should be generated
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",,TRUE,TRUE,,"If the postcondition should always hold, ""true"" would be the first token, and the only token present in the guard"
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",,Arrays,ArraysClass,,
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",,this,This,[Equator; org.apache.commons.collections4],"Class and package of this. BTW, notice that we do consider ""this"" as possible token in this position, but we do NOT consider ""methodResultID"", because such token cannot mentioned in the guard of a normal postcondition"
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",,o1,MethodArgument,[Object; java.lang],
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",,o2,MethodArgument,[Object; java.lang],
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",,AbstractBagDecorator,Class,[AbstractBagDecorator; org.apache.commons.collections4.bag],
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",,...,...,...,"All classes of the project, except those which do not have static methods (which would be the subsequent tokens)"
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",,Unmodifiable,Class,[Unmodifiable; org.apache.commons.collections4],
,1,TRUE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",(,(,OpeningParenthesis,,
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",(,TRUE,TRUE,,
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",(,Arrays,ArraysClass,,
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",(,this,This,[Equator; org.apache.commons.collections4],
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",(,methodResultID,MethodResultID,[boolean;],
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",(,o1,MethodArgument,[Object; java.lang],
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",(,o2,MethodArgument,[Object; java.lang],
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",(,AbstractBagDecorator,Class,[AbstractBagDecorator; org.apache.commons.collections4.bag],
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",(,...,...,...,
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",(,Unmodifiable,Class,[Unmodifiable; org.apache.commons.collections4],
,1,TRUE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((,o1,MethodArgument,[Object; java.lang],
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((,(,OpeningParenthesis,,
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((,TRUE,TRUE,,
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((,Arrays,ArraysClass,,
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((,this,This,[Equator; org.apache.commons.collections4],
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((,methodResultID,MethodResultID,[boolean;],
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((,o2,MethodArgument,[Object; java.lang],
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((,AbstractBagDecorator,Class,[AbstractBagDecorator; org.apache.commons.collections4.bag],
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((,...,...,...,
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((,Unmodifiable,Class,[Unmodifiable; org.apache.commons.collections4],
,1,TRUE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1,#ERROR!,EqIneqOperator,,
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1,.,Period,,
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1,!=,EqIneqOperator,,We don't consider NonEqIneqOperators because o1 is not of type number
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1,instanceof,InstanceOfOperator,,
,1,TRUE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==,null,NULL,,"This is actually the only possible token. According to the Xtext grammar, other tokens could go next, but according to the context they can't. These tokens (and the reason why they are invalid) are: boolean (o1 is not of type boolean), bitwiseNegateOperator, int, double (o1 is not of type number), varOrClassWithModifiers (objects are not compared with the == operator UNLESS they are of type number or boolean, but o1 is not)."
,1,TRUE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null,),ClosingParenthesis,,
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null,&&,LogicalOperator,,
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null,||,LogicalOperator,,
,1,TRUE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null),#ERROR!,EqOperator,,
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null),),ClosingParenthesis,,
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null),&&,LogicalOperator,,
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null),||,LogicalOperator,,
,1,TRUE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null)==,FALSE,FALSE,,
,1,TRUE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null)==false,),ClosingParenthesis,,
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null)==false,&&,LogicalOperator,,
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null)==false,||,LogicalOperator,,
,1,TRUE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null)==false),&&,LogicalOperator,,"Notice that "";"" is not a possible token yet, because we are generating a normal postcondition, so first we need to use the tokens ""?"" and "":"", and also we need to make sure that either ""methodResultID"" or ""this"" are mentioned in the true and/or the false property of the postcondition"
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null)==false),#ERROR!,EqOperator,,
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null)==false),||,LogicalOperator,,
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null)==false),?,QuestionMark,,
,1,TRUE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null)==false) &&,(,OpeningParenthesis,,
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null)==false) &&,Arrays,ArraysClass,,
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null)==false) &&,this,This,[Equator; org.apache.commons.collections4],
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null)==false) &&,o1,MethodArgument,[Object; java.lang],
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null)==false) &&,o2,MethodArgument,[Object; java.lang],
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null)==false) &&,AbstractBagDecorator,Class,[AbstractBagDecorator; org.apache.commons.collections4.bag],
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null)==false) &&,...,...,...,
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null)==false) &&,Unmodifiable,Class,[Unmodifiable; org.apache.commons.collections4],
,1,TRUE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null)==false) && (,o1,MethodArgument,[Object; java.lang],
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null)==false) && (,(,OpeningParenthesis,,
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null)==false) && (,Arrays,ArraysClass,,
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null)==false) && (,this,This,[Equator; org.apache.commons.collections4],
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null)==false) && (,o2,MethodArgument,[Object; java.lang],
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null)==false) && (,AbstractBagDecorator,Class,[AbstractBagDecorator; org.apache.commons.collections4.bag],
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null)==false) && (,...,...,...,
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null)==false) && (,Unmodifiable,Class,[Unmodifiable; org.apache.commons.collections4],
,1,TRUE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null)==false) && (o1,.,Period,,
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null)==false) && (o1,#ERROR!,EqIneqOperator,,
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null)==false) && (o1,!=,EqIneqOperator,,
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null)==false) && (o1,instanceof,InstanceOfOperator,,
,1,TRUE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null)==false) && (o1.,equals,MethodName,[Object; java.lang; public boolean equals(Object obj)],"Several notes:
1. At this point, the possible tokens are all non-private non-static non-void methods and non-private non-static attributes of the class whose type is the same as o1, i.e., Object. We can obtain these tokens by filtering to only those that comply with these resctrictions from the first dataset.
2. In the tokenInfo field, we need to save additional information, not only the class name and the package. I suggest saving the whole method signature or field declaration, like in the first dataset. This may help the ML model learn better."
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null)==false) && (o1.,getClass,MethodName,[Object; java.lang; public final native Class<?> getClass()],
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null)==false) && (o1.,toString,MethodName,[Object; java.lang; public String toString()],
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null)==false) && (o1.,hashCode,MethodName,[Object; java.lang; public native int hashCode()],
,1,TRUE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null)==false) && (o1.equals,(,OpeningParenthesis,,"According to the grammar, more tokens are possible, e.g., a period, a relational operator, etc., but since we know that ""equals"" is the name of a method, the next token must necessarily be an opening parenthesis"
,1,TRUE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null)==false) && (o1.equals(,o2,MethodArgument,,"According to the Xtext grammar, method arguments can be not only VarOrClassWithModifiers, but also literal values (e.g., strings and integers) or classes followed by the "".class"" suffix. However, in this case, these are not allowed because the ""equals"" method must take as input an object of type Object"
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null)==false) && (o1.equals(,this,This,[Equator; org.apache.commons.collections4],"Even though ""this"" is not of type Object, it could be followed by field accesses or method calls that do return an Object"
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null)==false) && (o1.equals(,o1,MethodArgument,[Object; java.lang],
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null)==false) && (o1.equals(,AbstractBagDecorator,Class,[AbstractBagDecorator; org.apache.commons.collections4.bag],
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null)==false) && (o1.equals(,...,...,...,
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null)==false) && (o1.equals(,Unmodifiable,Class,[Unmodifiable; org.apache.commons.collections4],
,1,TRUE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null)==false) && (o1.equals(o2,),ClosingParenthesis,,"According to the grammar, a comma could go next. However, the ""equals"" method only accepts one argument"
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null)==false) && (o1.equals(o2,.,Period,,
,1,TRUE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null)==false) && (o1.equals(o2),),ClosingParenthesis,,"According to the grammar, a period could go next. However, the ""equals"" method returns a boolean, which obviously doesn't have any public attributes nor methods"
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null)==false) && (o1.equals(o2),#ERROR!,EqOperator,,
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null)==false) && (o1.equals(o2),&&,LogicalOperator,,
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null)==false) && (o1.equals(o2),||,LogicalOperator,,
,1,TRUE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null)==false) && (o1.equals(o2)),?,QuestionMark,,
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null)==false) && (o1.equals(o2)),&&,LogicalOperator,,
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null)==false) && (o1.equals(o2)),#ERROR!,EqOperator,,
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null)==false) && (o1.equals(o2)),||,LogicalOperator,,
,1,TRUE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null)==false) && (o1.equals(o2)) ?,methodResultID,MethodResultID,,"According to the grammar, ""true"" is a valid Predicate. However, according to the position in the oracle, ""true"" is not valid as the true property of a normal postcondition"
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null)==false) && (o1.equals(o2)) ?,(,OpeningParenthesis,,
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null)==false) && (o1.equals(o2)) ?,Arrays,ArraysClass,,
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null)==false) && (o1.equals(o2)) ?,this,This,[Equator; org.apache.commons.collections4],
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null)==false) && (o1.equals(o2)) ?,o1,MethodArgument,[Object; java.lang],
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null)==false) && (o1.equals(o2)) ?,o2,MethodArgument,[Object; java.lang],
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null)==false) && (o1.equals(o2)) ?,AbstractBagDecorator,Class,[AbstractBagDecorator; org.apache.commons.collections4.bag],
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null)==false) && (o1.equals(o2)) ?,...,...,...,
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null)==false) && (o1.equals(o2)) ?,Unmodifiable,Class,[Unmodifiable; org.apache.commons.collections4],
,1,TRUE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null)==false) && (o1.equals(o2)) ? methodResultID,#ERROR!,EqIneqOperator,,"According to the grammar, ""instanceof"" could be the next token, but based on the context, it cannot, since the previous token is a primitive boolean"
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null)==false) && (o1.equals(o2)) ? methodResultID,.,Period,,
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null)==false) && (o1.equals(o2)) ? methodResultID,!=,EqIneqOperator,,
,1,TRUE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null)==false) && (o1.equals(o2)) ? methodResultID==,TRUE,BOOLEAN,,"According to the grammar, ""null"", integers and doubles could be next tokens. But ""methodResultID"" is of type primitive boolean, so these tokens are not allowed."
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null)==false) && (o1.equals(o2)) ? methodResultID==,FALSE,BOOLEAN,,
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null)==false) && (o1.equals(o2)) ? methodResultID==,o1,MethodArgument,[Object; java.lang],"Even though ""o1"" is not of type ""boolean"", it may be followed by field accesses of method calls that return a boolean"
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null)==false) && (o1.equals(o2)) ? methodResultID==,o2,MethodArgument,[Object; java.lang],
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null)==false) && (o1.equals(o2)) ? methodResultID==,methodResultID,MethodResultID,[boolean;],
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null)==false) && (o1.equals(o2)) ? methodResultID==,this,This,[Equator; org.apache.commons.collections4],
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null)==false) && (o1.equals(o2)) ? methodResultID==,AbstractBagDecorator,Class,[AbstractBagDecorator; org.apache.commons.collections4.bag],
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null)==false) && (o1.equals(o2)) ? methodResultID==,...,...,...,"In this case, we consider only the classes which have static methods or static attributes"
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null)==false) && (o1.equals(o2)) ? methodResultID==,Unmodifiable,Class,[Unmodifiable; org.apache.commons.collections4],
,1,TRUE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null)==false) && (o1.equals(o2)) ? methodResultID==true,:,Colon,,
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null)==false) && (o1.equals(o2)) ? methodResultID==true,&&,LogicalOperator,,
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null)==false) && (o1.equals(o2)) ? methodResultID==true,||,LogicalOperator,,
,1,TRUE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null)==false) && (o1.equals(o2)) ? methodResultID==true :,TRUE,TRUE,,
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null)==false) && (o1.equals(o2)) ? methodResultID==true :,methodResultID,MethodResultID,,
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null)==false) && (o1.equals(o2)) ? methodResultID==true :,(,OpeningParenthesis,,
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null)==false) && (o1.equals(o2)) ? methodResultID==true :,Arrays,ArraysClass,,
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null)==false) && (o1.equals(o2)) ? methodResultID==true :,this,This,[Equator; org.apache.commons.collections4],
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null)==false) && (o1.equals(o2)) ? methodResultID==true :,o1,MethodArgument,[Object; java.lang],
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null)==false) && (o1.equals(o2)) ? methodResultID==true :,o2,MethodArgument,[Object; java.lang],
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null)==false) && (o1.equals(o2)) ? methodResultID==true :,AbstractBagDecorator,Class,[AbstractBagDecorator; org.apache.commons.collections4.bag],
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null)==false) && (o1.equals(o2)) ? methodResultID==true :,...,...,...,
,1,FALSE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null)==false) && (o1.equals(o2)) ? methodResultID==true :,Unmodifiable,Class,[Unmodifiable; org.apache.commons.collections4],
,1,TRUE,commons-collections4-4.1,org.apache.commons.collections4,Equator,@return whether the two objects are equal.,"/**
     * Evaluates the two arguments for their equality.
     * For the sake of illustration: This is a ""stringValue""
     * and this is a number: 42.
     *
     * @param o1 the first object to be equated.
     * @param o2 the second object to be equated.
     * @return whether the two objects are equal.
     */","boolean equate(T o1, T o2);","/**
 * An equation function, which determines equality between objects of type T.
 * <p>
 * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to
 * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.
 * </p>
 *
 * @param <T> the types of object this {@link Equator} can evaluate.
 * @since 4.0
 */",((o1==null)==false) && (o1.equals(o2)) ? methodResultID==true : true,;,SemiColon,,"There are no possible next tokens when a Predicate is simply ""true"""
,2,TRUE,commons-math3-3.6.1,org.apache.commons.math3.analysis.polynomials,PolynomialFunction,@throws NoDataException if {@code coefficients} is empty.,"/** {@inheritDoc}
     * @since 3.1
     * @throws NoDataException if {@code coefficients} is empty.
     * @throws NullArgumentException if {@code coefficients} is {@code null}.
     */","public DerivativeStructure value(final DerivativeStructure t)
        throws NullArgumentException, NoDataException {
        MathUtils.checkNotNull(coefficients);
        int n = coefficients.length;
        if (n == 0) {
            throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);
        }
        DerivativeStructure result =
                new DerivativeStructure(t.getFreeParameters(), t.getOrder(), coefficients[n - 1]);
        for (int j = n - 2; j >= 0; j--) {
            result = result.multiply(t).add(coefficients[j]);
        }
        return result;
    }","/**
 * Immutable representation of a real polynomial function with real coefficients.
 * <p>
 * <a href=""http://mathworld.wolfram.com/HornersMethod.html"">Horner's Method</a>
 * is used to evaluate the function.</p>
 *
 */",,this,This,[PolynomialFunction; org.apache.commons.math3.analysis.polynomials],
,2,FALSE,commons-math3-3.6.1,org.apache.commons.math3.analysis.polynomials,PolynomialFunction,@throws NoDataException if {@code coefficients} is empty.,"/** {@inheritDoc}
     * @since 3.1
     * @throws NoDataException if {@code coefficients} is empty.
     * @throws NullArgumentException if {@code coefficients} is {@code null}.
     */","public DerivativeStructure value(final DerivativeStructure t)
        throws NullArgumentException, NoDataException {
        MathUtils.checkNotNull(coefficients);
        int n = coefficients.length;
        if (n == 0) {
            throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);
        }
        DerivativeStructure result =
                new DerivativeStructure(t.getFreeParameters(), t.getOrder(), coefficients[n - 1]);
        for (int j = n - 2; j >= 0; j--) {
            result = result.multiply(t).add(coefficients[j]);
        }
        return result;
    }","/**
 * Immutable representation of a real polynomial function with real coefficients.
 * <p>
 * <a href=""http://mathworld.wolfram.com/HornersMethod.html"">Horner's Method</a>
 * is used to evaluate the function.</p>
 *
 */",,(,OpeningParenthesis,,
,2,FALSE,commons-math3-3.6.1,org.apache.commons.math3.analysis.polynomials,PolynomialFunction,@throws NoDataException if {@code coefficients} is empty.,"/** {@inheritDoc}
     * @since 3.1
     * @throws NoDataException if {@code coefficients} is empty.
     * @throws NullArgumentException if {@code coefficients} is {@code null}.
     */","public DerivativeStructure value(final DerivativeStructure t)
        throws NullArgumentException, NoDataException {
        MathUtils.checkNotNull(coefficients);
        int n = coefficients.length;
        if (n == 0) {
            throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);
        }
        DerivativeStructure result =
                new DerivativeStructure(t.getFreeParameters(), t.getOrder(), coefficients[n - 1]);
        for (int j = n - 2; j >= 0; j--) {
            result = result.multiply(t).add(coefficients[j]);
        }
        return result;
    }","/**
 * Immutable representation of a real polynomial function with real coefficients.
 * <p>
 * <a href=""http://mathworld.wolfram.com/HornersMethod.html"">Horner's Method</a>
 * is used to evaluate the function.</p>
 *
 */",,;,SemiColon,,
,2,FALSE,commons-math3-3.6.1,org.apache.commons.math3.analysis.polynomials,PolynomialFunction,@throws NoDataException if {@code coefficients} is empty.,"/** {@inheritDoc}
     * @since 3.1
     * @throws NoDataException if {@code coefficients} is empty.
     * @throws NullArgumentException if {@code coefficients} is {@code null}.
     */","public DerivativeStructure value(final DerivativeStructure t)
        throws NullArgumentException, NoDataException {
        MathUtils.checkNotNull(coefficients);
        int n = coefficients.length;
        if (n == 0) {
            throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);
        }
        DerivativeStructure result =
                new DerivativeStructure(t.getFreeParameters(), t.getOrder(), coefficients[n - 1]);
        for (int j = n - 2; j >= 0; j--) {
            result = result.multiply(t).add(coefficients[j]);
        }
        return result;
    }","/**
 * Immutable representation of a real polynomial function with real coefficients.
 * <p>
 * <a href=""http://mathworld.wolfram.com/HornersMethod.html"">Horner's Method</a>
 * is used to evaluate the function.</p>
 *
 */",,TRUE,TRUE,,
,2,FALSE,commons-math3-3.6.1,org.apache.commons.math3.analysis.polynomials,PolynomialFunction,@throws NoDataException if {@code coefficients} is empty.,"/** {@inheritDoc}
     * @since 3.1
     * @throws NoDataException if {@code coefficients} is empty.
     * @throws NullArgumentException if {@code coefficients} is {@code null}.
     */","public DerivativeStructure value(final DerivativeStructure t)
        throws NullArgumentException, NoDataException {
        MathUtils.checkNotNull(coefficients);
        int n = coefficients.length;
        if (n == 0) {
            throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);
        }
        DerivativeStructure result =
                new DerivativeStructure(t.getFreeParameters(), t.getOrder(), coefficients[n - 1]);
        for (int j = n - 2; j >= 0; j--) {
            result = result.multiply(t).add(coefficients[j]);
        }
        return result;
    }","/**
 * Immutable representation of a real polynomial function with real coefficients.
 * <p>
 * <a href=""http://mathworld.wolfram.com/HornersMethod.html"">Horner's Method</a>
 * is used to evaluate the function.</p>
 *
 */",,Arrays,ArraysClass,,
,2,FALSE,commons-math3-3.6.1,org.apache.commons.math3.analysis.polynomials,PolynomialFunction,@throws NoDataException if {@code coefficients} is empty.,"/** {@inheritDoc}
     * @since 3.1
     * @throws NoDataException if {@code coefficients} is empty.
     * @throws NullArgumentException if {@code coefficients} is {@code null}.
     */","public DerivativeStructure value(final DerivativeStructure t)
        throws NullArgumentException, NoDataException {
        MathUtils.checkNotNull(coefficients);
        int n = coefficients.length;
        if (n == 0) {
            throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);
        }
        DerivativeStructure result =
                new DerivativeStructure(t.getFreeParameters(), t.getOrder(), coefficients[n - 1]);
        for (int j = n - 2; j >= 0; j--) {
            result = result.multiply(t).add(coefficients[j]);
        }
        return result;
    }","/**
 * Immutable representation of a real polynomial function with real coefficients.
 * <p>
 * <a href=""http://mathworld.wolfram.com/HornersMethod.html"">Horner's Method</a>
 * is used to evaluate the function.</p>
 *
 */",,t,MethodArgument,[Object; java.lang],
,2,FALSE,commons-math3-3.6.1,org.apache.commons.math3.analysis.polynomials,PolynomialFunction,@throws NoDataException if {@code coefficients} is empty.,"/** {@inheritDoc}
     * @since 3.1
     * @throws NoDataException if {@code coefficients} is empty.
     * @throws NullArgumentException if {@code coefficients} is {@code null}.
     */","public DerivativeStructure value(final DerivativeStructure t)
        throws NullArgumentException, NoDataException {
        MathUtils.checkNotNull(coefficients);
        int n = coefficients.length;
        if (n == 0) {
            throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);
        }
        DerivativeStructure result =
                new DerivativeStructure(t.getFreeParameters(), t.getOrder(), coefficients[n - 1]);
        for (int j = n - 2; j >= 0; j--) {
            result = result.multiply(t).add(coefficients[j]);
        }
        return result;
    }","/**
 * Immutable representation of a real polynomial function with real coefficients.
 * <p>
 * <a href=""http://mathworld.wolfram.com/HornersMethod.html"">Horner's Method</a>
 * is used to evaluate the function.</p>
 *
 */",,DSCompiler,Class,[DSCompiler; org.apache.commons.math3.analysis.differentiation],
,2,FALSE,commons-math3-3.6.1,org.apache.commons.math3.analysis.polynomials,PolynomialFunction,@throws NoDataException if {@code coefficients} is empty.,"/** {@inheritDoc}
     * @since 3.1
     * @throws NoDataException if {@code coefficients} is empty.
     * @throws NullArgumentException if {@code coefficients} is {@code null}.
     */","public DerivativeStructure value(final DerivativeStructure t)
        throws NullArgumentException, NoDataException {
        MathUtils.checkNotNull(coefficients);
        int n = coefficients.length;
        if (n == 0) {
            throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);
        }
        DerivativeStructure result =
                new DerivativeStructure(t.getFreeParameters(), t.getOrder(), coefficients[n - 1]);
        for (int j = n - 2; j >= 0; j--) {
            result = result.multiply(t).add(coefficients[j]);
        }
        return result;
    }","/**
 * Immutable representation of a real polynomial function with real coefficients.
 * <p>
 * <a href=""http://mathworld.wolfram.com/HornersMethod.html"">Horner's Method</a>
 * is used to evaluate the function.</p>
 *
 */",,...,...,...,
,2,FALSE,commons-math3-3.6.1,org.apache.commons.math3.analysis.polynomials,PolynomialFunction,@throws NoDataException if {@code coefficients} is empty.,"/** {@inheritDoc}
     * @since 3.1
     * @throws NoDataException if {@code coefficients} is empty.
     * @throws NullArgumentException if {@code coefficients} is {@code null}.
     */","public DerivativeStructure value(final DerivativeStructure t)
        throws NullArgumentException, NoDataException {
        MathUtils.checkNotNull(coefficients);
        int n = coefficients.length;
        if (n == 0) {
            throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);
        }
        DerivativeStructure result =
                new DerivativeStructure(t.getFreeParameters(), t.getOrder(), coefficients[n - 1]);
        for (int j = n - 2; j >= 0; j--) {
            result = result.multiply(t).add(coefficients[j]);
        }
        return result;
    }","/**
 * Immutable representation of a real polynomial function with real coefficients.
 * <p>
 * <a href=""http://mathworld.wolfram.com/HornersMethod.html"">Horner's Method</a>
 * is used to evaluate the function.</p>
 *
 */",,RealFieldElement,Class,[RealFieldElement; org.apache.commons.math3],
,2,TRUE,commons-math3-3.6.1,org.apache.commons.math3.analysis.polynomials,PolynomialFunction,@throws NoDataException if {@code coefficients} is empty.,"/** {@inheritDoc}
     * @since 3.1
     * @throws NoDataException if {@code coefficients} is empty.
     * @throws NullArgumentException if {@code coefficients} is {@code null}.
     */","public DerivativeStructure value(final DerivativeStructure t)
        throws NullArgumentException, NoDataException {
        MathUtils.checkNotNull(coefficients);
        int n = coefficients.length;
        if (n == 0) {
            throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);
        }
        DerivativeStructure result =
                new DerivativeStructure(t.getFreeParameters(), t.getOrder(), coefficients[n - 1]);
        for (int j = n - 2; j >= 0; j--) {
            result = result.multiply(t).add(coefficients[j]);
        }
        return result;
    }","/**
 * Immutable representation of a real polynomial function with real coefficients.
 * <p>
 * <a href=""http://mathworld.wolfram.com/HornersMethod.html"">Horner's Method</a>
 * is used to evaluate the function.</p>
 *
 */",this,.,Period,,
,2,FALSE,commons-math3-3.6.1,org.apache.commons.math3.analysis.polynomials,PolynomialFunction,@throws NoDataException if {@code coefficients} is empty.,"/** {@inheritDoc}
     * @since 3.1
     * @throws NoDataException if {@code coefficients} is empty.
     * @throws NullArgumentException if {@code coefficients} is {@code null}.
     */","public DerivativeStructure value(final DerivativeStructure t)
        throws NullArgumentException, NoDataException {
        MathUtils.checkNotNull(coefficients);
        int n = coefficients.length;
        if (n == 0) {
            throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);
        }
        DerivativeStructure result =
                new DerivativeStructure(t.getFreeParameters(), t.getOrder(), coefficients[n - 1]);
        for (int j = n - 2; j >= 0; j--) {
            result = result.multiply(t).add(coefficients[j]);
        }
        return result;
    }","/**
 * Immutable representation of a real polynomial function with real coefficients.
 * <p>
 * <a href=""http://mathworld.wolfram.com/HornersMethod.html"">Horner's Method</a>
 * is used to evaluate the function.</p>
 *
 */",this,#ERROR!,EqIneqOperator,,
,2,FALSE,commons-math3-3.6.1,org.apache.commons.math3.analysis.polynomials,PolynomialFunction,@throws NoDataException if {@code coefficients} is empty.,"/** {@inheritDoc}
     * @since 3.1
     * @throws NoDataException if {@code coefficients} is empty.
     * @throws NullArgumentException if {@code coefficients} is {@code null}.
     */","public DerivativeStructure value(final DerivativeStructure t)
        throws NullArgumentException, NoDataException {
        MathUtils.checkNotNull(coefficients);
        int n = coefficients.length;
        if (n == 0) {
            throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);
        }
        DerivativeStructure result =
                new DerivativeStructure(t.getFreeParameters(), t.getOrder(), coefficients[n - 1]);
        for (int j = n - 2; j >= 0; j--) {
            result = result.multiply(t).add(coefficients[j]);
        }
        return result;
    }","/**
 * Immutable representation of a real polynomial function with real coefficients.
 * <p>
 * <a href=""http://mathworld.wolfram.com/HornersMethod.html"">Horner's Method</a>
 * is used to evaluate the function.</p>
 *
 */",this,!=,EqIneqOperator,,
,2,FALSE,commons-math3-3.6.1,org.apache.commons.math3.analysis.polynomials,PolynomialFunction,@throws NoDataException if {@code coefficients} is empty.,"/** {@inheritDoc}
     * @since 3.1
     * @throws NoDataException if {@code coefficients} is empty.
     * @throws NullArgumentException if {@code coefficients} is {@code null}.
     */","public DerivativeStructure value(final DerivativeStructure t)
        throws NullArgumentException, NoDataException {
        MathUtils.checkNotNull(coefficients);
        int n = coefficients.length;
        if (n == 0) {
            throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);
        }
        DerivativeStructure result =
                new DerivativeStructure(t.getFreeParameters(), t.getOrder(), coefficients[n - 1]);
        for (int j = n - 2; j >= 0; j--) {
            result = result.multiply(t).add(coefficients[j]);
        }
        return result;
    }","/**
 * Immutable representation of a real polynomial function with real coefficients.
 * <p>
 * <a href=""http://mathworld.wolfram.com/HornersMethod.html"">Horner's Method</a>
 * is used to evaluate the function.</p>
 *
 */",this,instanceof,InstanceOfOperator,,
,2,TRUE,commons-math3-3.6.1,org.apache.commons.math3.analysis.polynomials,PolynomialFunction,@throws NoDataException if {@code coefficients} is empty.,"/** {@inheritDoc}
     * @since 3.1
     * @throws NoDataException if {@code coefficients} is empty.
     * @throws NullArgumentException if {@code coefficients} is {@code null}.
     */","public DerivativeStructure value(final DerivativeStructure t)
        throws NullArgumentException, NoDataException {
        MathUtils.checkNotNull(coefficients);
        int n = coefficients.length;
        if (n == 0) {
            throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);
        }
        DerivativeStructure result =
                new DerivativeStructure(t.getFreeParameters(), t.getOrder(), coefficients[n - 1]);
        for (int j = n - 2; j >= 0; j--) {
            result = result.multiply(t).add(coefficients[j]);
        }
        return result;
    }","/**
 * Immutable representation of a real polynomial function with real coefficients.
 * <p>
 * <a href=""http://mathworld.wolfram.com/HornersMethod.html"">Horner's Method</a>
 * is used to evaluate the function.</p>
 *
 */",this.,getCoefficients,MethodName,[PolynomialFunction; org.apache.commons.math3.analysis.polynomials; public double\[\] getCoefficients()],
,2,FALSE,commons-math3-3.6.1,org.apache.commons.math3.analysis.polynomials,PolynomialFunction,@throws NoDataException if {@code coefficients} is empty.,"/** {@inheritDoc}
     * @since 3.1
     * @throws NoDataException if {@code coefficients} is empty.
     * @throws NullArgumentException if {@code coefficients} is {@code null}.
     */","public DerivativeStructure value(final DerivativeStructure t)
        throws NullArgumentException, NoDataException {
        MathUtils.checkNotNull(coefficients);
        int n = coefficients.length;
        if (n == 0) {
            throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);
        }
        DerivativeStructure result =
                new DerivativeStructure(t.getFreeParameters(), t.getOrder(), coefficients[n - 1]);
        for (int j = n - 2; j >= 0; j--) {
            result = result.multiply(t).add(coefficients[j]);
        }
        return result;
    }","/**
 * Immutable representation of a real polynomial function with real coefficients.
 * <p>
 * <a href=""http://mathworld.wolfram.com/HornersMethod.html"">Horner's Method</a>
 * is used to evaluate the function.</p>
 *
 */",this.,value,MethodName,[PolynomialFunction; org.apache.commons.math3.analysis.polynomials; public double value(double x)],
,2,FALSE,commons-math3-3.6.1,org.apache.commons.math3.analysis.polynomials,PolynomialFunction,@throws NoDataException if {@code coefficients} is empty.,"/** {@inheritDoc}
     * @since 3.1
     * @throws NoDataException if {@code coefficients} is empty.
     * @throws NullArgumentException if {@code coefficients} is {@code null}.
     */","public DerivativeStructure value(final DerivativeStructure t)
        throws NullArgumentException, NoDataException {
        MathUtils.checkNotNull(coefficients);
        int n = coefficients.length;
        if (n == 0) {
            throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);
        }
        DerivativeStructure result =
                new DerivativeStructure(t.getFreeParameters(), t.getOrder(), coefficients[n - 1]);
        for (int j = n - 2; j >= 0; j--) {
            result = result.multiply(t).add(coefficients[j]);
        }
        return result;
    }","/**
 * Immutable representation of a real polynomial function with real coefficients.
 * <p>
 * <a href=""http://mathworld.wolfram.com/HornersMethod.html"">Horner's Method</a>
 * is used to evaluate the function.</p>
 *
 */",this.,degree,MethodName,[PolynomialFunction; org.apache.commons.math3.analysis.polynomials; public int degree()],
,2,FALSE,commons-math3-3.6.1,org.apache.commons.math3.analysis.polynomials,PolynomialFunction,@throws NoDataException if {@code coefficients} is empty.,"/** {@inheritDoc}
     * @since 3.1
     * @throws NoDataException if {@code coefficients} is empty.
     * @throws NullArgumentException if {@code coefficients} is {@code null}.
     */","public DerivativeStructure value(final DerivativeStructure t)
        throws NullArgumentException, NoDataException {
        MathUtils.checkNotNull(coefficients);
        int n = coefficients.length;
        if (n == 0) {
            throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);
        }
        DerivativeStructure result =
                new DerivativeStructure(t.getFreeParameters(), t.getOrder(), coefficients[n - 1]);
        for (int j = n - 2; j >= 0; j--) {
            result = result.multiply(t).add(coefficients[j]);
        }
        return result;
    }","/**
 * Immutable representation of a real polynomial function with real coefficients.
 * <p>
 * <a href=""http://mathworld.wolfram.com/HornersMethod.html"">Horner's Method</a>
 * is used to evaluate the function.</p>
 *
 */",this.,add,MethodName,[PolynomialFunction; org.apache.commons.math3.analysis.polynomials; public PolynomialFunction add(final PolynomialFunction p)],
,2,FALSE,commons-math3-3.6.1,org.apache.commons.math3.analysis.polynomials,PolynomialFunction,@throws NoDataException if {@code coefficients} is empty.,"/** {@inheritDoc}
     * @since 3.1
     * @throws NoDataException if {@code coefficients} is empty.
     * @throws NullArgumentException if {@code coefficients} is {@code null}.
     */","public DerivativeStructure value(final DerivativeStructure t)
        throws NullArgumentException, NoDataException {
        MathUtils.checkNotNull(coefficients);
        int n = coefficients.length;
        if (n == 0) {
            throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);
        }
        DerivativeStructure result =
                new DerivativeStructure(t.getFreeParameters(), t.getOrder(), coefficients[n - 1]);
        for (int j = n - 2; j >= 0; j--) {
            result = result.multiply(t).add(coefficients[j]);
        }
        return result;
    }","/**
 * Immutable representation of a real polynomial function with real coefficients.
 * <p>
 * <a href=""http://mathworld.wolfram.com/HornersMethod.html"">Horner's Method</a>
 * is used to evaluate the function.</p>
 *
 */",this.,subtract,MethodName,[PolynomialFunction; org.apache.commons.math3.analysis.polynomials; public PolynomialFunction subtract(final PolynomialFunction p)],
,2,FALSE,commons-math3-3.6.1,org.apache.commons.math3.analysis.polynomials,PolynomialFunction,@throws NoDataException if {@code coefficients} is empty.,"/** {@inheritDoc}
     * @since 3.1
     * @throws NoDataException if {@code coefficients} is empty.
     * @throws NullArgumentException if {@code coefficients} is {@code null}.
     */","public DerivativeStructure value(final DerivativeStructure t)
        throws NullArgumentException, NoDataException {
        MathUtils.checkNotNull(coefficients);
        int n = coefficients.length;
        if (n == 0) {
            throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);
        }
        DerivativeStructure result =
                new DerivativeStructure(t.getFreeParameters(), t.getOrder(), coefficients[n - 1]);
        for (int j = n - 2; j >= 0; j--) {
            result = result.multiply(t).add(coefficients[j]);
        }
        return result;
    }","/**
 * Immutable representation of a real polynomial function with real coefficients.
 * <p>
 * <a href=""http://mathworld.wolfram.com/HornersMethod.html"">Horner's Method</a>
 * is used to evaluate the function.</p>
 *
 */",this.,negate,MethodName,[PolynomialFunction; org.apache.commons.math3.analysis.polynomials; public PolynomialFunction negate()],
,2,FALSE,commons-math3-3.6.1,org.apache.commons.math3.analysis.polynomials,PolynomialFunction,@throws NoDataException if {@code coefficients} is empty.,"/** {@inheritDoc}
     * @since 3.1
     * @throws NoDataException if {@code coefficients} is empty.
     * @throws NullArgumentException if {@code coefficients} is {@code null}.
     */","public DerivativeStructure value(final DerivativeStructure t)
        throws NullArgumentException, NoDataException {
        MathUtils.checkNotNull(coefficients);
        int n = coefficients.length;
        if (n == 0) {
            throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);
        }
        DerivativeStructure result =
                new DerivativeStructure(t.getFreeParameters(), t.getOrder(), coefficients[n - 1]);
        for (int j = n - 2; j >= 0; j--) {
            result = result.multiply(t).add(coefficients[j]);
        }
        return result;
    }","/**
 * Immutable representation of a real polynomial function with real coefficients.
 * <p>
 * <a href=""http://mathworld.wolfram.com/HornersMethod.html"">Horner's Method</a>
 * is used to evaluate the function.</p>
 *
 */",this.,multiply,MethodName,[PolynomialFunction; org.apache.commons.math3.analysis.polynomials; public PolynomialFunction multiply(final PolynomialFunction p)],
,2,FALSE,commons-math3-3.6.1,org.apache.commons.math3.analysis.polynomials,PolynomialFunction,@throws NoDataException if {@code coefficients} is empty.,"/** {@inheritDoc}
     * @since 3.1
     * @throws NoDataException if {@code coefficients} is empty.
     * @throws NullArgumentException if {@code coefficients} is {@code null}.
     */","public DerivativeStructure value(final DerivativeStructure t)
        throws NullArgumentException, NoDataException {
        MathUtils.checkNotNull(coefficients);
        int n = coefficients.length;
        if (n == 0) {
            throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);
        }
        DerivativeStructure result =
                new DerivativeStructure(t.getFreeParameters(), t.getOrder(), coefficients[n - 1]);
        for (int j = n - 2; j >= 0; j--) {
            result = result.multiply(t).add(coefficients[j]);
        }
        return result;
    }","/**
 * Immutable representation of a real polynomial function with real coefficients.
 * <p>
 * <a href=""http://mathworld.wolfram.com/HornersMethod.html"">Horner's Method</a>
 * is used to evaluate the function.</p>
 *
 */",this.,polynomialDerivative,MethodName,[PolynomialFunction; org.apache.commons.math3.analysis.polynomials; public PolynomialFunction polynomialDerivative()],
,2,FALSE,commons-math3-3.6.1,org.apache.commons.math3.analysis.polynomials,PolynomialFunction,@throws NoDataException if {@code coefficients} is empty.,"/** {@inheritDoc}
     * @since 3.1
     * @throws NoDataException if {@code coefficients} is empty.
     * @throws NullArgumentException if {@code coefficients} is {@code null}.
     */","public DerivativeStructure value(final DerivativeStructure t)
        throws NullArgumentException, NoDataException {
        MathUtils.checkNotNull(coefficients);
        int n = coefficients.length;
        if (n == 0) {
            throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);
        }
        DerivativeStructure result =
                new DerivativeStructure(t.getFreeParameters(), t.getOrder(), coefficients[n - 1]);
        for (int j = n - 2; j >= 0; j--) {
            result = result.multiply(t).add(coefficients[j]);
        }
        return result;
    }","/**
 * Immutable representation of a real polynomial function with real coefficients.
 * <p>
 * <a href=""http://mathworld.wolfram.com/HornersMethod.html"">Horner's Method</a>
 * is used to evaluate the function.</p>
 *
 */",this.,derivative,MethodName,[PolynomialFunction; org.apache.commons.math3.analysis.polynomials; public UnivariateFunction derivative()],
,2,FALSE,commons-math3-3.6.1,org.apache.commons.math3.analysis.polynomials,PolynomialFunction,@throws NoDataException if {@code coefficients} is empty.,"/** {@inheritDoc}
     * @since 3.1
     * @throws NoDataException if {@code coefficients} is empty.
     * @throws NullArgumentException if {@code coefficients} is {@code null}.
     */","public DerivativeStructure value(final DerivativeStructure t)
        throws NullArgumentException, NoDataException {
        MathUtils.checkNotNull(coefficients);
        int n = coefficients.length;
        if (n == 0) {
            throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);
        }
        DerivativeStructure result =
                new DerivativeStructure(t.getFreeParameters(), t.getOrder(), coefficients[n - 1]);
        for (int j = n - 2; j >= 0; j--) {
            result = result.multiply(t).add(coefficients[j]);
        }
        return result;
    }","/**
 * Immutable representation of a real polynomial function with real coefficients.
 * <p>
 * <a href=""http://mathworld.wolfram.com/HornersMethod.html"">Horner's Method</a>
 * is used to evaluate the function.</p>
 *
 */",this.,equals,MethodName,[Object; java.lang; public boolean equals(Object obj)],
,2,FALSE,commons-math3-3.6.1,org.apache.commons.math3.analysis.polynomials,PolynomialFunction,@throws NoDataException if {@code coefficients} is empty.,"/** {@inheritDoc}
     * @since 3.1
     * @throws NoDataException if {@code coefficients} is empty.
     * @throws NullArgumentException if {@code coefficients} is {@code null}.
     */","public DerivativeStructure value(final DerivativeStructure t)
        throws NullArgumentException, NoDataException {
        MathUtils.checkNotNull(coefficients);
        int n = coefficients.length;
        if (n == 0) {
            throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);
        }
        DerivativeStructure result =
                new DerivativeStructure(t.getFreeParameters(), t.getOrder(), coefficients[n - 1]);
        for (int j = n - 2; j >= 0; j--) {
            result = result.multiply(t).add(coefficients[j]);
        }
        return result;
    }","/**
 * Immutable representation of a real polynomial function with real coefficients.
 * <p>
 * <a href=""http://mathworld.wolfram.com/HornersMethod.html"">Horner's Method</a>
 * is used to evaluate the function.</p>
 *
 */",this.,getClass,MethodName,[Object; java.lang; public final native Class<?> getClass()],
,2,FALSE,commons-math3-3.6.1,org.apache.commons.math3.analysis.polynomials,PolynomialFunction,@throws NoDataException if {@code coefficients} is empty.,"/** {@inheritDoc}
     * @since 3.1
     * @throws NoDataException if {@code coefficients} is empty.
     * @throws NullArgumentException if {@code coefficients} is {@code null}.
     */","public DerivativeStructure value(final DerivativeStructure t)
        throws NullArgumentException, NoDataException {
        MathUtils.checkNotNull(coefficients);
        int n = coefficients.length;
        if (n == 0) {
            throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);
        }
        DerivativeStructure result =
                new DerivativeStructure(t.getFreeParameters(), t.getOrder(), coefficients[n - 1]);
        for (int j = n - 2; j >= 0; j--) {
            result = result.multiply(t).add(coefficients[j]);
        }
        return result;
    }","/**
 * Immutable representation of a real polynomial function with real coefficients.
 * <p>
 * <a href=""http://mathworld.wolfram.com/HornersMethod.html"">Horner's Method</a>
 * is used to evaluate the function.</p>
 *
 */",this.,toString,MethodName,[Object; java.lang; public String toString()],
,2,FALSE,commons-math3-3.6.1,org.apache.commons.math3.analysis.polynomials,PolynomialFunction,@throws NoDataException if {@code coefficients} is empty.,"/** {@inheritDoc}
     * @since 3.1
     * @throws NoDataException if {@code coefficients} is empty.
     * @throws NullArgumentException if {@code coefficients} is {@code null}.
     */","public DerivativeStructure value(final DerivativeStructure t)
        throws NullArgumentException, NoDataException {
        MathUtils.checkNotNull(coefficients);
        int n = coefficients.length;
        if (n == 0) {
            throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);
        }
        DerivativeStructure result =
                new DerivativeStructure(t.getFreeParameters(), t.getOrder(), coefficients[n - 1]);
        for (int j = n - 2; j >= 0; j--) {
            result = result.multiply(t).add(coefficients[j]);
        }
        return result;
    }","/**
 * Immutable representation of a real polynomial function with real coefficients.
 * <p>
 * <a href=""http://mathworld.wolfram.com/HornersMethod.html"">Horner's Method</a>
 * is used to evaluate the function.</p>
 *
 */",this.,hashCode,MethodName,[Object; java.lang; public native int hashCode()],
,2,TRUE,commons-math3-3.6.1,org.apache.commons.math3.analysis.polynomials,PolynomialFunction,@throws NoDataException if {@code coefficients} is empty.,"/** {@inheritDoc}
     * @since 3.1
     * @throws NoDataException if {@code coefficients} is empty.
     * @throws NullArgumentException if {@code coefficients} is {@code null}.
     */","public DerivativeStructure value(final DerivativeStructure t)
        throws NullArgumentException, NoDataException {
        MathUtils.checkNotNull(coefficients);
        int n = coefficients.length;
        if (n == 0) {
            throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);
        }
        DerivativeStructure result =
                new DerivativeStructure(t.getFreeParameters(), t.getOrder(), coefficients[n - 1]);
        for (int j = n - 2; j >= 0; j--) {
            result = result.multiply(t).add(coefficients[j]);
        }
        return result;
    }","/**
 * Immutable representation of a real polynomial function with real coefficients.
 * <p>
 * <a href=""http://mathworld.wolfram.com/HornersMethod.html"">Horner's Method</a>
 * is used to evaluate the function.</p>
 *
 */",this.getCoefficients,(,OpeningParenthesis,,
,2,TRUE,commons-math3-3.6.1,org.apache.commons.math3.analysis.polynomials,PolynomialFunction,@throws NoDataException if {@code coefficients} is empty.,"/** {@inheritDoc}
     * @since 3.1
     * @throws NoDataException if {@code coefficients} is empty.
     * @throws NullArgumentException if {@code coefficients} is {@code null}.
     */","public DerivativeStructure value(final DerivativeStructure t)
        throws NullArgumentException, NoDataException {
        MathUtils.checkNotNull(coefficients);
        int n = coefficients.length;
        if (n == 0) {
            throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);
        }
        DerivativeStructure result =
                new DerivativeStructure(t.getFreeParameters(), t.getOrder(), coefficients[n - 1]);
        for (int j = n - 2; j >= 0; j--) {
            result = result.multiply(t).add(coefficients[j]);
        }
        return result;
    }","/**
 * Immutable representation of a real polynomial function with real coefficients.
 * <p>
 * <a href=""http://mathworld.wolfram.com/HornersMethod.html"">Horner's Method</a>
 * is used to evaluate the function.</p>
 *
 */",this.getCoefficients(,),ClosingParenthesis,,"This method has no arguments, so the only possible token after the OpeningParenthesis is the ClosingParenthesis"
,2,TRUE,commons-math3-3.6.1,org.apache.commons.math3.analysis.polynomials,PolynomialFunction,@throws NoDataException if {@code coefficients} is empty.,"/** {@inheritDoc}
     * @since 3.1
     * @throws NoDataException if {@code coefficients} is empty.
     * @throws NullArgumentException if {@code coefficients} is {@code null}.
     */","public DerivativeStructure value(final DerivativeStructure t)
        throws NullArgumentException, NoDataException {
        MathUtils.checkNotNull(coefficients);
        int n = coefficients.length;
        if (n == 0) {
            throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);
        }
        DerivativeStructure result =
                new DerivativeStructure(t.getFreeParameters(), t.getOrder(), coefficients[n - 1]);
        for (int j = n - 2; j >= 0; j--) {
            result = result.multiply(t).add(coefficients[j]);
        }
        return result;
    }","/**
 * Immutable representation of a real polynomial function with real coefficients.
 * <p>
 * <a href=""http://mathworld.wolfram.com/HornersMethod.html"">Horner's Method</a>
 * is used to evaluate the function.</p>
 *
 */",this.getCoefficients(),.,Period,,"According to grammar, ""instanceof"" could go next, but actually it can't, because this method returns an array of doubles. Also according to grammar, the oracle could end here, or be followed by a LogicalOperator, but it can't, because this clause does not evaluate to true/false"
,2,FALSE,commons-math3-3.6.1,org.apache.commons.math3.analysis.polynomials,PolynomialFunction,@throws NoDataException if {@code coefficients} is empty.,"/** {@inheritDoc}
     * @since 3.1
     * @throws NoDataException if {@code coefficients} is empty.
     * @throws NullArgumentException if {@code coefficients} is {@code null}.
     */","public DerivativeStructure value(final DerivativeStructure t)
        throws NullArgumentException, NoDataException {
        MathUtils.checkNotNull(coefficients);
        int n = coefficients.length;
        if (n == 0) {
            throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);
        }
        DerivativeStructure result =
                new DerivativeStructure(t.getFreeParameters(), t.getOrder(), coefficients[n - 1]);
        for (int j = n - 2; j >= 0; j--) {
            result = result.multiply(t).add(coefficients[j]);
        }
        return result;
    }","/**
 * Immutable representation of a real polynomial function with real coefficients.
 * <p>
 * <a href=""http://mathworld.wolfram.com/HornersMethod.html"">Horner's Method</a>
 * is used to evaluate the function.</p>
 *
 */",this.getCoefficients(),#ERROR!,EqIneqOperator,,
,2,FALSE,commons-math3-3.6.1,org.apache.commons.math3.analysis.polynomials,PolynomialFunction,@throws NoDataException if {@code coefficients} is empty.,"/** {@inheritDoc}
     * @since 3.1
     * @throws NoDataException if {@code coefficients} is empty.
     * @throws NullArgumentException if {@code coefficients} is {@code null}.
     */","public DerivativeStructure value(final DerivativeStructure t)
        throws NullArgumentException, NoDataException {
        MathUtils.checkNotNull(coefficients);
        int n = coefficients.length;
        if (n == 0) {
            throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);
        }
        DerivativeStructure result =
                new DerivativeStructure(t.getFreeParameters(), t.getOrder(), coefficients[n - 1]);
        for (int j = n - 2; j >= 0; j--) {
            result = result.multiply(t).add(coefficients[j]);
        }
        return result;
    }","/**
 * Immutable representation of a real polynomial function with real coefficients.
 * <p>
 * <a href=""http://mathworld.wolfram.com/HornersMethod.html"">Horner's Method</a>
 * is used to evaluate the function.</p>
 *
 */",this.getCoefficients(),!=,EqIneqOperator,,
,2,TRUE,commons-math3-3.6.1,org.apache.commons.math3.analysis.polynomials,PolynomialFunction,@throws NoDataException if {@code coefficients} is empty.,"/** {@inheritDoc}
     * @since 3.1
     * @throws NoDataException if {@code coefficients} is empty.
     * @throws NullArgumentException if {@code coefficients} is {@code null}.
     */","public DerivativeStructure value(final DerivativeStructure t)
        throws NullArgumentException, NoDataException {
        MathUtils.checkNotNull(coefficients);
        int n = coefficients.length;
        if (n == 0) {
            throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);
        }
        DerivativeStructure result =
                new DerivativeStructure(t.getFreeParameters(), t.getOrder(), coefficients[n - 1]);
        for (int j = n - 2; j >= 0; j--) {
            result = result.multiply(t).add(coefficients[j]);
        }
        return result;
    }","/**
 * Immutable representation of a real polynomial function with real coefficients.
 * <p>
 * <a href=""http://mathworld.wolfram.com/HornersMethod.html"">Horner's Method</a>
 * is used to evaluate the function.</p>
 *
 */",this.getCoefficients().,length,ClassField,[double\[\];;],
,2,FALSE,commons-math3-3.6.1,org.apache.commons.math3.analysis.polynomials,PolynomialFunction,@throws NoDataException if {@code coefficients} is empty.,"/** {@inheritDoc}
     * @since 3.1
     * @throws NoDataException if {@code coefficients} is empty.
     * @throws NullArgumentException if {@code coefficients} is {@code null}.
     */","public DerivativeStructure value(final DerivativeStructure t)
        throws NullArgumentException, NoDataException {
        MathUtils.checkNotNull(coefficients);
        int n = coefficients.length;
        if (n == 0) {
            throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);
        }
        DerivativeStructure result =
                new DerivativeStructure(t.getFreeParameters(), t.getOrder(), coefficients[n - 1]);
        for (int j = n - 2; j >= 0; j--) {
            result = result.multiply(t).add(coefficients[j]);
        }
        return result;
    }","/**
 * Immutable representation of a real polynomial function with real coefficients.
 * <p>
 * <a href=""http://mathworld.wolfram.com/HornersMethod.html"">Horner's Method</a>
 * is used to evaluate the function.</p>
 *
 */",this.getCoefficients().,clone,MethodName,[Object; java.lang; protected native Object clone() throws CloneNotSupportedException],
,2,FALSE,commons-math3-3.6.1,org.apache.commons.math3.analysis.polynomials,PolynomialFunction,@throws NoDataException if {@code coefficients} is empty.,"/** {@inheritDoc}
     * @since 3.1
     * @throws NoDataException if {@code coefficients} is empty.
     * @throws NullArgumentException if {@code coefficients} is {@code null}.
     */","public DerivativeStructure value(final DerivativeStructure t)
        throws NullArgumentException, NoDataException {
        MathUtils.checkNotNull(coefficients);
        int n = coefficients.length;
        if (n == 0) {
            throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);
        }
        DerivativeStructure result =
                new DerivativeStructure(t.getFreeParameters(), t.getOrder(), coefficients[n - 1]);
        for (int j = n - 2; j >= 0; j--) {
            result = result.multiply(t).add(coefficients[j]);
        }
        return result;
    }","/**
 * Immutable representation of a real polynomial function with real coefficients.
 * <p>
 * <a href=""http://mathworld.wolfram.com/HornersMethod.html"">Horner's Method</a>
 * is used to evaluate the function.</p>
 *
 */",this.getCoefficients().,equals,MethodName,[Object; java.lang; public boolean equals(Object obj)],
,2,FALSE,commons-math3-3.6.1,org.apache.commons.math3.analysis.polynomials,PolynomialFunction,@throws NoDataException if {@code coefficients} is empty.,"/** {@inheritDoc}
     * @since 3.1
     * @throws NoDataException if {@code coefficients} is empty.
     * @throws NullArgumentException if {@code coefficients} is {@code null}.
     */","public DerivativeStructure value(final DerivativeStructure t)
        throws NullArgumentException, NoDataException {
        MathUtils.checkNotNull(coefficients);
        int n = coefficients.length;
        if (n == 0) {
            throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);
        }
        DerivativeStructure result =
                new DerivativeStructure(t.getFreeParameters(), t.getOrder(), coefficients[n - 1]);
        for (int j = n - 2; j >= 0; j--) {
            result = result.multiply(t).add(coefficients[j]);
        }
        return result;
    }","/**
 * Immutable representation of a real polynomial function with real coefficients.
 * <p>
 * <a href=""http://mathworld.wolfram.com/HornersMethod.html"">Horner's Method</a>
 * is used to evaluate the function.</p>
 *
 */",this.getCoefficients().,getClass,MethodName,[Object; java.lang; public final native Class<?> getClass()],
,2,FALSE,commons-math3-3.6.1,org.apache.commons.math3.analysis.polynomials,PolynomialFunction,@throws NoDataException if {@code coefficients} is empty.,"/** {@inheritDoc}
     * @since 3.1
     * @throws NoDataException if {@code coefficients} is empty.
     * @throws NullArgumentException if {@code coefficients} is {@code null}.
     */","public DerivativeStructure value(final DerivativeStructure t)
        throws NullArgumentException, NoDataException {
        MathUtils.checkNotNull(coefficients);
        int n = coefficients.length;
        if (n == 0) {
            throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);
        }
        DerivativeStructure result =
                new DerivativeStructure(t.getFreeParameters(), t.getOrder(), coefficients[n - 1]);
        for (int j = n - 2; j >= 0; j--) {
            result = result.multiply(t).add(coefficients[j]);
        }
        return result;
    }","/**
 * Immutable representation of a real polynomial function with real coefficients.
 * <p>
 * <a href=""http://mathworld.wolfram.com/HornersMethod.html"">Horner's Method</a>
 * is used to evaluate the function.</p>
 *
 */",this.getCoefficients().,toString,MethodName,[Object; java.lang; public String toString()],
,2,FALSE,commons-math3-3.6.1,org.apache.commons.math3.analysis.polynomials,PolynomialFunction,@throws NoDataException if {@code coefficients} is empty.,"/** {@inheritDoc}
     * @since 3.1
     * @throws NoDataException if {@code coefficients} is empty.
     * @throws NullArgumentException if {@code coefficients} is {@code null}.
     */","public DerivativeStructure value(final DerivativeStructure t)
        throws NullArgumentException, NoDataException {
        MathUtils.checkNotNull(coefficients);
        int n = coefficients.length;
        if (n == 0) {
            throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);
        }
        DerivativeStructure result =
                new DerivativeStructure(t.getFreeParameters(), t.getOrder(), coefficients[n - 1]);
        for (int j = n - 2; j >= 0; j--) {
            result = result.multiply(t).add(coefficients[j]);
        }
        return result;
    }","/**
 * Immutable representation of a real polynomial function with real coefficients.
 * <p>
 * <a href=""http://mathworld.wolfram.com/HornersMethod.html"">Horner's Method</a>
 * is used to evaluate the function.</p>
 *
 */",this.getCoefficients().,hashCode,MethodName,[Object; java.lang; public native int hashCode()],
,2,TRUE,commons-math3-3.6.1,org.apache.commons.math3.analysis.polynomials,PolynomialFunction,@throws NoDataException if {@code coefficients} is empty.,"/** {@inheritDoc}
     * @since 3.1
     * @throws NoDataException if {@code coefficients} is empty.
     * @throws NullArgumentException if {@code coefficients} is {@code null}.
     */","public DerivativeStructure value(final DerivativeStructure t)
        throws NullArgumentException, NoDataException {
        MathUtils.checkNotNull(coefficients);
        int n = coefficients.length;
        if (n == 0) {
            throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);
        }
        DerivativeStructure result =
                new DerivativeStructure(t.getFreeParameters(), t.getOrder(), coefficients[n - 1]);
        for (int j = n - 2; j >= 0; j--) {
            result = result.multiply(t).add(coefficients[j]);
        }
        return result;
    }","/**
 * Immutable representation of a real polynomial function with real coefficients.
 * <p>
 * <a href=""http://mathworld.wolfram.com/HornersMethod.html"">Horner's Method</a>
 * is used to evaluate the function.</p>
 *
 */",this.getCoefficients().length,#ERROR!,EqIneqOperator,,"The period is not a possible token after an int (which is what ""length"" returns)"
,2,FALSE,commons-math3-3.6.1,org.apache.commons.math3.analysis.polynomials,PolynomialFunction,@throws NoDataException if {@code coefficients} is empty.,"/** {@inheritDoc}
     * @since 3.1
     * @throws NoDataException if {@code coefficients} is empty.
     * @throws NullArgumentException if {@code coefficients} is {@code null}.
     */","public DerivativeStructure value(final DerivativeStructure t)
        throws NullArgumentException, NoDataException {
        MathUtils.checkNotNull(coefficients);
        int n = coefficients.length;
        if (n == 0) {
            throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);
        }
        DerivativeStructure result =
                new DerivativeStructure(t.getFreeParameters(), t.getOrder(), coefficients[n - 1]);
        for (int j = n - 2; j >= 0; j--) {
            result = result.multiply(t).add(coefficients[j]);
        }
        return result;
    }","/**
 * Immutable representation of a real polynomial function with real coefficients.
 * <p>
 * <a href=""http://mathworld.wolfram.com/HornersMethod.html"">Horner's Method</a>
 * is used to evaluate the function.</p>
 *
 */",this.getCoefficients().length,!=,EqIneqOperator,,
,2,FALSE,commons-math3-3.6.1,org.apache.commons.math3.analysis.polynomials,PolynomialFunction,@throws NoDataException if {@code coefficients} is empty.,"/** {@inheritDoc}
     * @since 3.1
     * @throws NoDataException if {@code coefficients} is empty.
     * @throws NullArgumentException if {@code coefficients} is {@code null}.
     */","public DerivativeStructure value(final DerivativeStructure t)
        throws NullArgumentException, NoDataException {
        MathUtils.checkNotNull(coefficients);
        int n = coefficients.length;
        if (n == 0) {
            throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);
        }
        DerivativeStructure result =
                new DerivativeStructure(t.getFreeParameters(), t.getOrder(), coefficients[n - 1]);
        for (int j = n - 2; j >= 0; j--) {
            result = result.multiply(t).add(coefficients[j]);
        }
        return result;
    }","/**
 * Immutable representation of a real polynomial function with real coefficients.
 * <p>
 * <a href=""http://mathworld.wolfram.com/HornersMethod.html"">Horner's Method</a>
 * is used to evaluate the function.</p>
 *
 */",this.getCoefficients().length,<,NonEqIneqOperator,,
,2,FALSE,commons-math3-3.6.1,org.apache.commons.math3.analysis.polynomials,PolynomialFunction,@throws NoDataException if {@code coefficients} is empty.,"/** {@inheritDoc}
     * @since 3.1
     * @throws NoDataException if {@code coefficients} is empty.
     * @throws NullArgumentException if {@code coefficients} is {@code null}.
     */","public DerivativeStructure value(final DerivativeStructure t)
        throws NullArgumentException, NoDataException {
        MathUtils.checkNotNull(coefficients);
        int n = coefficients.length;
        if (n == 0) {
            throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);
        }
        DerivativeStructure result =
                new DerivativeStructure(t.getFreeParameters(), t.getOrder(), coefficients[n - 1]);
        for (int j = n - 2; j >= 0; j--) {
            result = result.multiply(t).add(coefficients[j]);
        }
        return result;
    }","/**
 * Immutable representation of a real polynomial function with real coefficients.
 * <p>
 * <a href=""http://mathworld.wolfram.com/HornersMethod.html"">Horner's Method</a>
 * is used to evaluate the function.</p>
 *
 */",this.getCoefficients().length,>,NonEqIneqOperator,,
,2,FALSE,commons-math3-3.6.1,org.apache.commons.math3.analysis.polynomials,PolynomialFunction,@throws NoDataException if {@code coefficients} is empty.,"/** {@inheritDoc}
     * @since 3.1
     * @throws NoDataException if {@code coefficients} is empty.
     * @throws NullArgumentException if {@code coefficients} is {@code null}.
     */","public DerivativeStructure value(final DerivativeStructure t)
        throws NullArgumentException, NoDataException {
        MathUtils.checkNotNull(coefficients);
        int n = coefficients.length;
        if (n == 0) {
            throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);
        }
        DerivativeStructure result =
                new DerivativeStructure(t.getFreeParameters(), t.getOrder(), coefficients[n - 1]);
        for (int j = n - 2; j >= 0; j--) {
            result = result.multiply(t).add(coefficients[j]);
        }
        return result;
    }","/**
 * Immutable representation of a real polynomial function with real coefficients.
 * <p>
 * <a href=""http://mathworld.wolfram.com/HornersMethod.html"">Horner's Method</a>
 * is used to evaluate the function.</p>
 *
 */",this.getCoefficients().length,<=,NonEqIneqOperator,,
,2,FALSE,commons-math3-3.6.1,org.apache.commons.math3.analysis.polynomials,PolynomialFunction,@throws NoDataException if {@code coefficients} is empty.,"/** {@inheritDoc}
     * @since 3.1
     * @throws NoDataException if {@code coefficients} is empty.
     * @throws NullArgumentException if {@code coefficients} is {@code null}.
     */","public DerivativeStructure value(final DerivativeStructure t)
        throws NullArgumentException, NoDataException {
        MathUtils.checkNotNull(coefficients);
        int n = coefficients.length;
        if (n == 0) {
            throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);
        }
        DerivativeStructure result =
                new DerivativeStructure(t.getFreeParameters(), t.getOrder(), coefficients[n - 1]);
        for (int j = n - 2; j >= 0; j--) {
            result = result.multiply(t).add(coefficients[j]);
        }
        return result;
    }","/**
 * Immutable representation of a real polynomial function with real coefficients.
 * <p>
 * <a href=""http://mathworld.wolfram.com/HornersMethod.html"">Horner's Method</a>
 * is used to evaluate the function.</p>
 *
 */",this.getCoefficients().length,>=,NonEqIneqOperator,,
,2,TRUE,commons-math3-3.6.1,org.apache.commons.math3.analysis.polynomials,PolynomialFunction,@throws NoDataException if {@code coefficients} is empty.,"/** {@inheritDoc}
     * @since 3.1
     * @throws NoDataException if {@code coefficients} is empty.
     * @throws NullArgumentException if {@code coefficients} is {@code null}.
     */","public DerivativeStructure value(final DerivativeStructure t)
        throws NullArgumentException, NoDataException {
        MathUtils.checkNotNull(coefficients);
        int n = coefficients.length;
        if (n == 0) {
            throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);
        }
        DerivativeStructure result =
                new DerivativeStructure(t.getFreeParameters(), t.getOrder(), coefficients[n - 1]);
        for (int j = n - 2; j >= 0; j--) {
            result = result.multiply(t).add(coefficients[j]);
        }
        return result;
    }","/**
 * Immutable representation of a real polynomial function with real coefficients.
 * <p>
 * <a href=""http://mathworld.wolfram.com/HornersMethod.html"">Horner's Method</a>
 * is used to evaluate the function.</p>
 *
 */",this.getCoefficients().length==,0,S_INT,,
,2,FALSE,commons-math3-3.6.1,org.apache.commons.math3.analysis.polynomials,PolynomialFunction,@throws NoDataException if {@code coefficients} is empty.,"/** {@inheritDoc}
     * @since 3.1
     * @throws NoDataException if {@code coefficients} is empty.
     * @throws NullArgumentException if {@code coefficients} is {@code null}.
     */","public DerivativeStructure value(final DerivativeStructure t)
        throws NullArgumentException, NoDataException {
        MathUtils.checkNotNull(coefficients);
        int n = coefficients.length;
        if (n == 0) {
            throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);
        }
        DerivativeStructure result =
                new DerivativeStructure(t.getFreeParameters(), t.getOrder(), coefficients[n - 1]);
        for (int j = n - 2; j >= 0; j--) {
            result = result.multiply(t).add(coefficients[j]);
        }
        return result;
    }","/**
 * Immutable representation of a real polynomial function with real coefficients.
 * <p>
 * <a href=""http://mathworld.wolfram.com/HornersMethod.html"">Horner's Method</a>
 * is used to evaluate the function.</p>
 *
 */",this.getCoefficients().length==,1,S_INT,,This value comes from the global dictionary
,2,FALSE,commons-math3-3.6.1,org.apache.commons.math3.analysis.polynomials,PolynomialFunction,@throws NoDataException if {@code coefficients} is empty.,"/** {@inheritDoc}
     * @since 3.1
     * @throws NoDataException if {@code coefficients} is empty.
     * @throws NullArgumentException if {@code coefficients} is {@code null}.
     */","public DerivativeStructure value(final DerivativeStructure t)
        throws NullArgumentException, NoDataException {
        MathUtils.checkNotNull(coefficients);
        int n = coefficients.length;
        if (n == 0) {
            throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);
        }
        DerivativeStructure result =
                new DerivativeStructure(t.getFreeParameters(), t.getOrder(), coefficients[n - 1]);
        for (int j = n - 2; j >= 0; j--) {
            result = result.multiply(t).add(coefficients[j]);
        }
        return result;
    }","/**
 * Immutable representation of a real polynomial function with real coefficients.
 * <p>
 * <a href=""http://mathworld.wolfram.com/HornersMethod.html"">Horner's Method</a>
 * is used to evaluate the function.</p>
 *
 */",this.getCoefficients().length==,this,This,[PolynomialFunction; org.apache.commons.math3.analysis.polynomials],
,2,FALSE,commons-math3-3.6.1,org.apache.commons.math3.analysis.polynomials,PolynomialFunction,@throws NoDataException if {@code coefficients} is empty.,"/** {@inheritDoc}
     * @since 3.1
     * @throws NoDataException if {@code coefficients} is empty.
     * @throws NullArgumentException if {@code coefficients} is {@code null}.
     */","public DerivativeStructure value(final DerivativeStructure t)
        throws NullArgumentException, NoDataException {
        MathUtils.checkNotNull(coefficients);
        int n = coefficients.length;
        if (n == 0) {
            throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);
        }
        DerivativeStructure result =
                new DerivativeStructure(t.getFreeParameters(), t.getOrder(), coefficients[n - 1]);
        for (int j = n - 2; j >= 0; j--) {
            result = result.multiply(t).add(coefficients[j]);
        }
        return result;
    }","/**
 * Immutable representation of a real polynomial function with real coefficients.
 * <p>
 * <a href=""http://mathworld.wolfram.com/HornersMethod.html"">Horner's Method</a>
 * is used to evaluate the function.</p>
 *
 */",this.getCoefficients().length==,t,MethodArgument,[Object; java.lang],
,2,FALSE,commons-math3-3.6.1,org.apache.commons.math3.analysis.polynomials,PolynomialFunction,@throws NoDataException if {@code coefficients} is empty.,"/** {@inheritDoc}
     * @since 3.1
     * @throws NoDataException if {@code coefficients} is empty.
     * @throws NullArgumentException if {@code coefficients} is {@code null}.
     */","public DerivativeStructure value(final DerivativeStructure t)
        throws NullArgumentException, NoDataException {
        MathUtils.checkNotNull(coefficients);
        int n = coefficients.length;
        if (n == 0) {
            throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);
        }
        DerivativeStructure result =
                new DerivativeStructure(t.getFreeParameters(), t.getOrder(), coefficients[n - 1]);
        for (int j = n - 2; j >= 0; j--) {
            result = result.multiply(t).add(coefficients[j]);
        }
        return result;
    }","/**
 * Immutable representation of a real polynomial function with real coefficients.
 * <p>
 * <a href=""http://mathworld.wolfram.com/HornersMethod.html"">Horner's Method</a>
 * is used to evaluate the function.</p>
 *
 */",this.getCoefficients().length==,DSCompiler,Class,[DSCompiler; org.apache.commons.math3.analysis.differentiation],
,2,FALSE,commons-math3-3.6.1,org.apache.commons.math3.analysis.polynomials,PolynomialFunction,@throws NoDataException if {@code coefficients} is empty.,"/** {@inheritDoc}
     * @since 3.1
     * @throws NoDataException if {@code coefficients} is empty.
     * @throws NullArgumentException if {@code coefficients} is {@code null}.
     */","public DerivativeStructure value(final DerivativeStructure t)
        throws NullArgumentException, NoDataException {
        MathUtils.checkNotNull(coefficients);
        int n = coefficients.length;
        if (n == 0) {
            throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);
        }
        DerivativeStructure result =
                new DerivativeStructure(t.getFreeParameters(), t.getOrder(), coefficients[n - 1]);
        for (int j = n - 2; j >= 0; j--) {
            result = result.multiply(t).add(coefficients[j]);
        }
        return result;
    }","/**
 * Immutable representation of a real polynomial function with real coefficients.
 * <p>
 * <a href=""http://mathworld.wolfram.com/HornersMethod.html"">Horner's Method</a>
 * is used to evaluate the function.</p>
 *
 */",this.getCoefficients().length==,...,...,...,
,2,FALSE,commons-math3-3.6.1,org.apache.commons.math3.analysis.polynomials,PolynomialFunction,@throws NoDataException if {@code coefficients} is empty.,"/** {@inheritDoc}
     * @since 3.1
     * @throws NoDataException if {@code coefficients} is empty.
     * @throws NullArgumentException if {@code coefficients} is {@code null}.
     */","public DerivativeStructure value(final DerivativeStructure t)
        throws NullArgumentException, NoDataException {
        MathUtils.checkNotNull(coefficients);
        int n = coefficients.length;
        if (n == 0) {
            throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);
        }
        DerivativeStructure result =
                new DerivativeStructure(t.getFreeParameters(), t.getOrder(), coefficients[n - 1]);
        for (int j = n - 2; j >= 0; j--) {
            result = result.multiply(t).add(coefficients[j]);
        }
        return result;
    }","/**
 * Immutable representation of a real polynomial function with real coefficients.
 * <p>
 * <a href=""http://mathworld.wolfram.com/HornersMethod.html"">Horner's Method</a>
 * is used to evaluate the function.</p>
 *
 */",this.getCoefficients().length==,RealFieldElement,Class,[RealFieldElement; org.apache.commons.math3],
,2,TRUE,commons-math3-3.6.1,org.apache.commons.math3.analysis.polynomials,PolynomialFunction,@throws NoDataException if {@code coefficients} is empty.,"/** {@inheritDoc}
     * @since 3.1
     * @throws NoDataException if {@code coefficients} is empty.
     * @throws NullArgumentException if {@code coefficients} is {@code null}.
     */","public DerivativeStructure value(final DerivativeStructure t)
        throws NullArgumentException, NoDataException {
        MathUtils.checkNotNull(coefficients);
        int n = coefficients.length;
        if (n == 0) {
            throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);
        }
        DerivativeStructure result =
                new DerivativeStructure(t.getFreeParameters(), t.getOrder(), coefficients[n - 1]);
        for (int j = n - 2; j >= 0; j--) {
            result = result.multiply(t).add(coefficients[j]);
        }
        return result;
    }","/**
 * Immutable representation of a real polynomial function with real coefficients.
 * <p>
 * <a href=""http://mathworld.wolfram.com/HornersMethod.html"">Horner's Method</a>
 * is used to evaluate the function.</p>
 *
 */",this.getCoefficients().length==0,;,SemiColon,,"If instead of a 0, it was a variable, then an arithmetical operator could follow, but in this case it makes no sense to put something like ""=0+1"". The grammar needs to be changed to take this into account"
,2,FALSE,commons-math3-3.6.1,org.apache.commons.math3.analysis.polynomials,PolynomialFunction,@throws NoDataException if {@code coefficients} is empty.,"/** {@inheritDoc}
     * @since 3.1
     * @throws NoDataException if {@code coefficients} is empty.
     * @throws NullArgumentException if {@code coefficients} is {@code null}.
     */","public DerivativeStructure value(final DerivativeStructure t)
        throws NullArgumentException, NoDataException {
        MathUtils.checkNotNull(coefficients);
        int n = coefficients.length;
        if (n == 0) {
            throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);
        }
        DerivativeStructure result =
                new DerivativeStructure(t.getFreeParameters(), t.getOrder(), coefficients[n - 1]);
        for (int j = n - 2; j >= 0; j--) {
            result = result.multiply(t).add(coefficients[j]);
        }
        return result;
    }","/**
 * Immutable representation of a real polynomial function with real coefficients.
 * <p>
 * <a href=""http://mathworld.wolfram.com/HornersMethod.html"">Horner's Method</a>
 * is used to evaluate the function.</p>
 *
 */",this.getCoefficients().length==0,&&,LogicalOperator,,
,2,FALSE,commons-math3-3.6.1,org.apache.commons.math3.analysis.polynomials,PolynomialFunction,@throws NoDataException if {@code coefficients} is empty.,"/** {@inheritDoc}
     * @since 3.1
     * @throws NoDataException if {@code coefficients} is empty.
     * @throws NullArgumentException if {@code coefficients} is {@code null}.
     */","public DerivativeStructure value(final DerivativeStructure t)
        throws NullArgumentException, NoDataException {
        MathUtils.checkNotNull(coefficients);
        int n = coefficients.length;
        if (n == 0) {
            throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);
        }
        DerivativeStructure result =
                new DerivativeStructure(t.getFreeParameters(), t.getOrder(), coefficients[n - 1]);
        for (int j = n - 2; j >= 0; j--) {
            result = result.multiply(t).add(coefficients[j]);
        }
        return result;
    }","/**
 * Immutable representation of a real polynomial function with real coefficients.
 * <p>
 * <a href=""http://mathworld.wolfram.com/HornersMethod.html"">Horner's Method</a>
 * is used to evaluate the function.</p>
 *
 */",this.getCoefficients().length==0,||,LogicalOperator,,