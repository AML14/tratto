#!/bin/bash
# This script generates a test suite for a class using Evosuite.
# Then, for every supported TOG, it creates a variant of teh test suite that uses the TOG's oracle.
# An invocation follows the format,
#     "bash experiment.sh [target-class] [src-dir] [bin-dir] [jar]"
# This script adds the following sub-directories to the output directory, `experiment/output/`:
#     - "evosuite-tests": a test suite generated by EvoSuite
#     - "evosuite-simple-tests": EvoSuite tests split with one assertion per
#                                test
#     - "evosuite-prefixes": EvoSuite simple tests with all assertions removed
#     - "[tog]/input": preprocessed TOG input (if necessary)
#     - "[tog]/oracle": OracleOutputs generated by TOG
#     - "tog-tests/[tog]": a test suite made by inserting TOG oracles into the
#                          EvoSuite prefixes

# Get current directory
# shellcheck disable=SC2128
current_dir=$(realpath "$(dirname "${BASH_SOURCE}")")
# Setup global variables
source "${current_dir}/generator/utils/global_variables.sh"

# Define local variables
tog=${1}
target_class=${2}
src_dir=${3}
bin_dir=${4}
classpath_or_jar=${5}
evosuite_flag=$( [[ "$6" == "true" ]] && echo true || echo false )
project_id=${7-"none"}
bug_id=${8-"none"}
qualifiers="${target_class%.*}"
tog_oracles_output_dir="${ROOT_DIR}/output/${tog}-oracles/${qualifiers//.//}"
evosuite_output_dir="${ROOT_DIR}/output/evosuite-tests/${qualifiers//.//}"
evosuite_prefix_path="${OUTPUT_DIR}/evosuite-prefixes"


# Check given arguments
if [ "$tog" != "baseline" ] && [ ! -d "${src_dir}" ]; then
  echo -e "The project source directory \"${src_dir}\" does not exist."
  exit 1
elif [ "$tog" != "baseline" ] && [ ! -d "${bin_dir}" ]; then
  echo -e "The system binaries path \"${bin_dir}\" does not exist."
  exit 1
elif [ "$tog" == "tratto" ] && [ ! -e "${classpath_or_jar}" ]; then
  echo -e "The project jar file \"${classpath_or_jar}\" does not exist."
  exit 1
fi
# Check if given TOG is supported
found=0
valid_tog=("jdoctor" "toga" "tratto" "baseline")
for option in "${valid_tog[@]}"; do
  if [ "${option}" = "${tog}" ]; then
    found=1
    break
  fi
done
if [ ! $found -eq 1 ]; then
  echo -e "The given TOG \"${1}\" is not supported. Must be one of: \"jdoctor\", \"toga\", \"tratto\", or \"baseline\"."
  exit 1
fi

# setup sdkman
source "${UTILS_DIR}/init_sdkman.sh" "${SDKMAN_DIR}"

# switch to Java 17
sdk use java "${JAVA17}"

# Setup experiments
bash "${UTILS_DIR}/experiment_setup.sh"

if [ evosuite_flag == true ]; then
  # Generate EvoSuite tests
  echo "[1] Generate EvoSuite tests for class ${target_class}"
  #{
  bash ./generator/evosuite.sh "${target_class}" "${bin_dir}"
  #} > /dev/null 2>&1
  # Switch to Java 17
  sdk use java "$JAVA17"
  # Generate EvoSuite prefixes
  java -jar "${EXPERIMENT_JAR}" "remove_oracles" "${target_class}"
else
  echo "[1] Generation of EvoSuite tests skipped for class ${target_class} (supposed has already been generated)."
fi
# Generate oracles using TOG
if [ "${tog}" == "jdoctor" ]; then
  bash ./generator/jdoctor.sh "${target_class}" "${src_dir}" "${classpath_or_jar}"
elif [ "${tog}" == "toga" ]; then
  bash ./generator/toga.sh "${target_class}" "${src_dir}" "${classpath_or_jar}" "${project_id}" "${bug_id}"
elif [ "${tog}" == "tratto" ]; then
  bash ./generator/tratto.sh "${target_class}" "${src_dir}" "${classpath_or_jar}"
fi
#cp "${oracle_output}" "${ROOT_DIR}/output/${tog}-oracles.json" #!!!
# insert oracles into EvoSuite prefixes
if [ "$tog" != "baseline" ]; then
  echo "[7] Insert oracles in test prefixes"
  tog_oracles_path="${OUTPUT_DIR}/${tog}-oracles"
  java -jar "${EXPERIMENT_JAR}" "insert_oracles" "${evosuite_prefix_path}" "${tog_oracles_path}" "${classpath_or_jar}"
else
  echo "[7] Skipping oracle insertion in test prefixes for baseline"
  baseline_tests_path="${OUTPUT_DIR}/${tog}-tests"
  output_test_suite_path="${OUTPUT_DIR}/${tog}-test-suite"
  mkdir -p "$baseline_tests_path"
  mkdir -p "$output_test_suite_path"
  cp -r "${evosuite_prefix_path}/"* "${baseline_tests_path}"
fi
# Run tests and generate output
if [ "$project_id" != "none" ]; then
  echo "[8] Running tests and generating test output"
  bash ./runner_d4j.sh "$tog" "$project_id" "$bug_id" "${OUTPUT_DIR}/${tog}-test-suite"
  if [ ! -d "${OUTPUT_DIR}/${tog}-tests/${project_id}/${bug_id}" ]; then
    mkdir -p "${OUTPUT_DIR}/${tog}-tests/${project_id}/${bug_id}"
  fi
  mv "${OUTPUT_DIR}/${tog}-tests/"* "${OUTPUT_DIR}/${tog}-tests/${project_id}/${bug_id}"
  java -jar "$EXPERIMENT_JAR" generate_defects4j_output "$tog" "${OUTPUT_DIR}/${tog}-tests" "${OUTPUT_DIR}/${tog}-test-suite"
else
  echo "[8] Running tests not yet implemented for non-defects4j projects."
fi
echo "[9] Experiment complete!"