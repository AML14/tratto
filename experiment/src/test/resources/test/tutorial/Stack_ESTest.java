/*
 * This file was automatically generated by EvoSuite
 * Wed Sep 20 22:47:25 GMT 2023
 */

package tutorial;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.EmptyStackException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import tutorial.Stack;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class Stack_ESTest extends Stack_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0()  throws Throwable  {
        Stack<String> stack0 = new Stack<String>();
        assertTrue(stack0.isEmpty());

        stack0.push("x$P bOeg1/`gL<|");
        stack0.push("fI3?H~2wGr~\"[9VZ");
        String string0 = stack0.pop();
        assertEquals("fI3?H~2wGr~\"[9VZ", string0);
    }

    @Test(timeout = 4000)
    public void test1()  throws Throwable  {
        Stack<String> stack0 = new Stack<String>();
        stack0.push("i.%");
        stack0.pop();
        boolean boolean0 = stack0.isEmpty();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2()  throws Throwable  {
        Stack<Object> stack0 = new Stack<Object>();
        // Undeclared exception!
        try {
            stack0.push((Object) null);
            fail("Expecting exception: IllegalArgumentException");

        } catch(IllegalArgumentException e) {
            //
            // The given object is null!
            //
            verifyException("tutorial.Stack", e);
        }
    }

    @Test(timeout = 4000)
    public void test3()  throws Throwable  {
        Stack<String> stack0 = new Stack<String>();
        stack0.push("x$P bOeg1/`gL<|");
        stack0.push("fI3?H~2wGr~\"[9VZ");
        stack0.push("x$P bOeg1/`gL<|");
        stack0.push("x$P bOeg1/`gL<|");
        stack0.push("");
        stack0.push("x$P bOeg1/`gL<|");
        stack0.push("");
        stack0.push("");
        stack0.push("");
        stack0.push("");
        // Undeclared exception!
        try {
            stack0.push("");
            fail("Expecting exception: RuntimeException");

        } catch(RuntimeException e) {
            //
            // Stack exceeded capacity!
            //
            verifyException("tutorial.Stack", e);
        }
    }
}
