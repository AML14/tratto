/*
 * This file was automatically generated by EvoSuite
 * Wed Sep 20 22:47:25 GMT 2023
 */
package tutorial;

import org.junit.Test;
import static org.junit.Assert.*;

import java.lang.reflect.Method;
import java.util.EmptyStackException;

import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.runner.RunWith;
import tutorial.Stack;

public class StackTest {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        Stack<String> stack0 = new Stack<String>();
        stack0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test01() throws Throwable {
        Stack<String> stack0 = new Stack<String>();
        stack0.push("x$P bOeg1/`gL<|");
        stack0.push("fI3?H~2wGr~\"[9VZ");
        String string0 = stack0.pop();
    }

    @Test(timeout = 4000)
    public void test12() throws Throwable {
        Stack<String> stack0 = new Stack<String>();
        stack0.push("i.%");
        stack0.pop();
        boolean boolean0 = stack0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test23() throws Throwable {
        Stack<Object> stack0 = new Stack<Object>();
        stack0.push((Object) null);
    }

    @Test(timeout = 4000)
    public void test34() throws Throwable {
        Stack<String> stack0 = new Stack<String>();
        stack0.push("x$P bOeg1/`gL<|");
        stack0.push("fI3?H~2wGr~\"[9VZ");
        stack0.push("x$P bOeg1/`gL<|");
        stack0.push("x$P bOeg1/`gL<|");
        stack0.push("");
        stack0.push("x$P bOeg1/`gL<|");
        stack0.push("");
        stack0.push("");
        stack0.push("");
        stack0.push("");
        stack0.push("");
    }

    @Test
    @Disabled
    public void assertionTest() throws Throwable {
        int primitiveInt = 5;
        Integer objectInt = Integer.valueOf(primitiveInt);
    }

    @Test
    @Disabled
    public void assertionNonStaticTest() throws Throwable {
        Integer objectInt = 5;
        objectInt.intValue();
    }

    @Test
    @Disabled
    public void exceptionalTest() throws Throwable {
        String integerToParse = null;
        int correspondingInteger = Integer.parseInt(integerToParse);
    }

    @Test
    @Disabled
    public void everythingTest() throws Throwable {
        Class<?> clazz = Integer.class;
        Class<?>[] parameters = { int.class, int.class };
        Method method = clazz.getMethod("compare", parameters);
    }

    @Test
    @Disabled
    public void assertionVoidTest() throws Throwable {
        String input = "input";
        char[] dst = new char[5];
        input.getChars(0, 2, dst, 0);
    }

    @Test
    @Disabled
    public void assertionPreInitializedTest() throws Throwable {
        String input = "input";
        input = input.substring(0, 2);
    }

    @Test
    @DIsabled
    public void assertionTypeParameterTest() throws Throwable {
        List<String> words = new ArrayList<>();
        words.add("hello");
        words.add("uh oh");
        words.get(2);
    }
}
