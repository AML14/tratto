import com.github.javaparser.ast.CompilationUnit;
import com.github.javaparser.ast.body.MethodDeclaration;
import com.github.javaparser.ast.stmt.Statement;
import com.github.javaparser.ast.type.Type;
import data.OracleOutput;
import data.OracleType;
import data.TogType;

import java.nio.file.Path;
import java.util.ArrayList;
import java.util.List;

/**
 * This class provides the functionality for inserting oracles into test
 * prefixes.
 */
public class OracleInserter {
    /** A ClassLoader used to load external dependencies. */
    private static ClassLoader classLoader;
    /** A unique id for placeholder variable names when inserting oracles. */
    private static int variableID = 0;
    /** All primitive fully qualified type names.  */
    private static final List<String> primitiveTypes = List.of(
            "boolean",
            "byte",
            "char",
            "short",
            "int",
            "long",
            "float",
            "double"
    );
    /** A list of all supported axiomatic test oracle generators. */
    private static final List<TogType> axiomaticTogs = List.of(TogType.JDOCTOR, TogType.TRATTO);

    /** Private constructor to avoid creating an instance of this class. */
    private OracleInserter() {
        throw new UnsupportedOperationException("This class cannot be instantiated.");
    }

    /**
     * Gets the package name of a given JavaParser Type. This method assumes
     * that all types (including types from the same package) have
     * corresponding import statements in the compilation unit. This is TRUE
     * for all compilation units generated by EvoSuite. If no matching import
     * statement is found, then the type is assumed to be in the "java.lang"
     * package. EvoSuite also requires each class to have a package, which
     * avoids the default package.
     *
     * @param cu the Java file that imports {@code type}
     * @param type a type
     * @return the package of {@code type}. Returns an empty string for
     * primitive types.
     */
    private static String getPackageName(CompilationUnit cu, Type type) {
        return "";
    }

    /**
     * Gets the fully qualified name of a given type.
     *
     * @param cu a Java file that imports {@code type}
     * @param type a type
     * @return the fully qualified name of {@code type}
     * @see OracleInserter#getPackageName(CompilationUnit, Type)
     */
    private static String getFullyQualifiedName(CompilationUnit cu, Type type) {
        return "";
    }

    /**
     * Gets all oracles applicable to a Java statement. An oracle is
     * applicable to a statement if and only if it corresponds to the method
     * call in the given statement.
     *
     * @param cu the parent Java file of {@code body}
     * @param body the parent method of {@code stmt}
     * @param stmt a Java statement
     * @param allOracles all possible oracles
     * @return all oracles corresponding to the method call in the given
     * statement
     */
    private static List<OracleOutput> getRelatedOracles(
            CompilationUnit cu,
            List<Statement> body,
            Statement stmt,
            List<OracleOutput> allOracles
    ) {
        return new ArrayList<>();
    }

    /**
     * Adds axiomatic oracles to test prefixes in a given Java file. This
     * method iterates through each line in each test case, and adds all
     * related oracles.
     *
     * @param testFile a Java test file
     * @param oracles a list of test oracles made by an axiomatic tog
     */
    private static void insertAxiomaticOracles(CompilationUnit testFile, List<OracleOutput> oracles) {
    }

    /**
     * Adds axiomatic oracles to a given collection of test prefixes.
     * Axiomatic oracles are not specific to a given test prefix. The oracles
     * are inserted wherever they may be applicable in source code. For
     * example, if an axiomatic oracle involves a method "foo", then the
     * oracle is added after every call to "bar" in the test prefix. The
     * approach for inserting an axiomatic oracle differs on the
     * {@link OracleType} (e.g. PRE, NORMAL_POST, EXCEPT_POST). See the
     * corresponding test file for examples.
     *
     * @param dir a directory with Java test prefixes
     * @param oracles a list of test oracles made by an axiomatic tog
     */
    private static void insertAxiomaticOracles(Path dir, List<OracleOutput> oracles) {
    }

    /**
     * Adds an assertion to the end of a given test prefix.
     *
     * @param testCase a test case
     * @param assertion the assertion to add
     */
    private static void insertNonAxiomaticAssertion(MethodDeclaration testCase, String assertion) {
    }

    /**
     * Wraps a test prefix with a try/catch block, where the catch block
     * expects a given exception type.
     *
     * @param testCase a test case
     * @param exception the exception to catch
     */
    private static void insertNonAxiomaticException(MethodDeclaration testCase, String exception) {
    }

    /**
     * Adds non-axiomatic oracles to test prefixes in a given test file. Each
     * oracle is matched to its corresponding test prefix using the
     * {@link OracleOutput#testName()} field.
     *
     * @param testFile a Java file of test prefixes
     * @param oracles a list of test oracles made by a non-axiomatic tog
     */
    private static void insertNonAxiomaticOracles(CompilationUnit testFile, List<OracleOutput> oracles) {
    }

    /**
     * Adds non-axiomatic oracles to a given collection of test prefixes. Each
     * oracle is matched to its corresponding test prefix using the
     * {@link OracleOutput#testName()} field.
     *
     * @param dir a directory with Java test prefixes
     * @param oracles a list of test oracles made by a non-axiomatic tog
     */
    private static void insertNonAxiomaticOracles(Path dir, List<OracleOutput> oracles) {
    }

    /**
     * Checks if a given TOG is axiomatic.
     *
     * @param tog a test oracle generator
     * @return true iff the given tog generates axiomatic test oracles (known
     * a priori)
     * @see OracleInserter#axiomaticTogs
     */
    private static boolean isAxiomatic(TogType tog) {
        return false;
    }

    /**
     * Gets a ClassLoader that corresponds to a given JAR file.
     *
     * @param jarPath a path to a JAR file
     * @return a ClassLoader object
     */
    private static ClassLoader getClassLoader(Path jarPath) {
        return null;
    }

    /**
     * Adds oracles to the test prefixes generated by EvoSuite. The approach
     * for adding oracles varies based on whether the oracles are axiomatic or
     * non-axiomatic. Saves the new test suites to "output/tog-tests/[tog]",
     * where [tog] is the given test oracle generator. This method does NOT
     * override the original test prefixes.
     *
     * @param tog a test oracle generator
     * @param fullyQualifiedName the fully qualified name of the class under
     *                           test
     * @param oracles all test oracles generated by {@code tog}
     * @param jarPath a JAR file of the project under test
     * @see OracleInserter#insertAxiomaticOracles(Path, List)
     * @see OracleInserter#insertNonAxiomaticOracles(Path, List)
     */
    public static void insertOracles(
            TogType tog,
            String fullyQualifiedName,
            List<OracleOutput> oracles,
            Path jarPath
    ) {
    }
}
