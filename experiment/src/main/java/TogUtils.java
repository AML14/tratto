import com.github.javaparser.JavaParser;
import com.github.javaparser.ast.CompilationUnit;
import com.github.javaparser.ast.body.BodyDeclaration;
import com.github.javaparser.ast.body.CallableDeclaration;
import com.github.javaparser.ast.body.MethodDeclaration;
import data.JDoctorOutput;
import data.JDoctorOutput.ParamTag;
import data.JDoctorOutput.ReturnTag;
import data.JDoctorOutput.ThrowsTag;
import data.OracleOutput;
import data.TestCase;
import data.TestOutput;
import data.TogType;

import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Pattern;

/**
 * This class provides static methods for pre-processing inputs for a given
 * TOG and converting its output into other {@link data} outputs.
 */
public class TogUtils {
    /** The path of the output directory. */
    private static final Path output = Paths.get("output");
    /** The path of the EvoSuite prefixes directory. */
    private static final Path evosuitePrefixPath = output.resolve("evosuite-prefix");
    /** The path of the EvoSuite simple tests directory (tests with one assertion).  */
    private static final Path evosuiteTestsSimplePath = output.resolve("evosuite-tests-simple");
    /** A regex pattern to extract a text prefix (removes comments and decorators). */
    private static final Pattern testPrefixPattern = Pattern.compile("(public|protected|private)(.| )*");
    /** A JavaParser used to pre-process source code to be converted into TOGA input. */
    private static JavaParser javaParser;

    /** Private constructor to avoid creating an instance of this class. */
    private TogUtils() {
        throw new UnsupportedOperationException("This class cannot be instantiated.");
    }

    /**
     * Creates a JavaParser object capable of resolving symbols from a given
     * source directory.
     *
     * @param srcDirPath a project source directory
     * @return the corresponding JavaParser
     */
    public static JavaParser getJavaParser(Path srcDirPath) {
        return null;
    }

    /**
     * Generates the input file for the TOGA tog. As required by TOGA, the input is a .csv file
     * composed of three columns:
     * <ol>
     *     <li>the focal method (i.e. the signature of the method for which TOGA have to generate
     *     the exceptional and assertion oracles).</li>
     *     <li>the test prefix of the method under test.</li>
     *     <li>the docstring of the method under test</li>
     * </ol>
     * Extracts each method under test from the test prefixes and generate triples of
     * (focalMethod, testPrefix, docstring).
     * Saves the output file in output/toga/input.
     *
     * @param srcDirPath the path to the source code of the project under test
     * @param fullyQualifiedClassName the fully qualified name of the class under test
     *
     */
    public static void generateTOGAInput(Path srcDirPath, String fullyQualifiedClassName) {
    }

    /**
     * Gets the Javadoc comment of a given function.
     *
     * @param jpCallable a JavaParser function
     * @return the method/constructor Javadoc comment
     */
    public static String getCallableJavadoc(
            CallableDeclaration<?> jpCallable
    ) {
        return "";
    }

    /**
     * Gets the Javadoc comment of a body declaration using regex patterns.
     * Use ONLY IF Javadoc comment is not recoverable using JavaParser API.
     *
     * @param jpBody a member in a Java class
     * @return the matched Javadoc comment (empty string if not found)
     */
    private static String getJavadocByPattern(BodyDeclaration<?> jpBody) {
        return "";
    }

    /**
     * Returns the signature of a JavaParser method declaration.
     *
     * @param methodDeclaration a JavaParser method declaration
     * @return a string representation of the signature. Signature follows the
     * format:
     *  "[modifiers] [type] [methodName]([parameters]) throws [exceptions]"
     */
    public static String getMethodSignature(MethodDeclaration methodDeclaration) {
        return "";
    }

    /**
     * Transforms the output from the TOGA script (a .csv file where each row contains the
     * assertion for a given focal method and test prefix) into a json file containing a
     * corresponding list of {@code OracleOutput} objects.
     * Saves the output file in output/toga/oracle.
     * @see OracleOutput
     * @param srcDirPath the path to the source code of the project under test
     */
    public static void togaToOracleOutput(Path srcDirPath) {
    }

    /**
     * Replaces all instances of {@code args[i]} in an oracle with the
     * corresponding parameter names from the method signature.
     *
     * @param jDoctorOutput the parent JDoctor condition of {@code oracle}
     * @param oracle an oracle generated by JDoctor
     * @return the same oracle with parameter names from the method signature
     */
    private static String contextualizeOracle(JDoctorOutput jDoctorOutput, String oracle) {
        return "";
    }

    /**
     * Converts a JDoctor ParamTag to an OracleOutput record.
     *
     * @param jDoctorOutput the parent JDoctor condition of {@code paramTag}
     * @param paramTag a JDoctor precondition
     * @return the corresponding OracleOutput of {@code paramTag}. Returns
     * null if the oracle is an empty string.
     */
    private static OracleOutput paramTagToOracleOutput(JDoctorOutput jDoctorOutput, ParamTag paramTag) {
        return null;
    }

    /**
     * Converts a JDoctor ReturnTag to an OracleOutput record.
     *
     * @param jDoctorOutput the parent JDoctor condition of {@code returnTag}
     * @param returnTag a JDoctor normal post-condition
     * @return the corresponding OracleOutput of {@code returnTag}. Returns
     * null if {@code returnTag} is null or the oracle is an empty string.
     */
    private static OracleOutput returnTagToOracleOutput(JDoctorOutput jDoctorOutput, ReturnTag returnTag) {
        return null;
    }

    /**
     * Converts a JDoctor ThrowsTag to an OracleOutput record.
     *
     * @param jDoctorOutput the parent JDoctor condition of {@code throwsTag}
     * @param throwsTag a JDoctor exceptional post-condition
     * @return the corresponding OracleOutput of {@code throwsTag}. Returns
     * null if the oracle is an empty string.
     */
    private static OracleOutput throwsTagToOracleOutput(JDoctorOutput jDoctorOutput, ThrowsTag throwsTag) {
        return null;
    }

    /**
     * Converts a JDoctorOutput record to a list of OracleOutput records. A
     * single JDoctorOutput record may contain multiple preconditions, throws
     * conditions, and post-conditions, each necessitating an individual
     * OracleOutput record.
     *
     * @param jDoctorOutput a JDoctor JSON condition
     * @return the corresponding OracleOutputs from the condition
     */
    private static List<OracleOutput> conditionToOracleOutput(JDoctorOutput jDoctorOutput) {
        return new ArrayList<>();
    }

    /**
     * Converts the JSON output generated by JDoctor into a list of
     * {@link OracleOutput} records and saves the output to
     * "output/jdoctor/oracle_outputs.json".
     *
     * @param jDoctorPath path to the JDoctor JSON output
     * @throws IllegalArgumentException if jDoctorPath does not exist
     */
    public static void jDoctorToOracleOutput(Path jDoctorPath) {
    }

    /**
     * Transforms the output from the Tratto script into a json file containing a
     * corresponding list of {@code OracleOutput} objects.
     * Saves the output file in output/tratto/experiment.
     * @see OracleOutput
     * @param srcDirPath the path to the source code of the project under test
     */
    public static void trattoToOracleOutput(Path srcDirPath) {
    }

    /**
     * Gets the names of all failing tests from an EvoSuite JUnit output. This
     * method assumes that the {@code runner.sh} script has already been run
     * and generated a corresponding {@code test_fails.txt} file.
     *
     * @param failPath the path to all fail lines in the EvoSuite JUnit output
     * @return a list of all failing test names
     * @throws IllegalArgumentException if unable to find the TOG's failing
     * tests, generated by {@code runner.sh}
     */
    private static List<String> getTestFails(
            Path failPath
    ) {
        return new ArrayList<>();
    }

    private static List<TestCase> getTestCases(
            CompilationUnit cu,
            List<String> testFails
    ) {
        return new ArrayList<>();
    }

    private static List<TestCase> getTestCases(
            Path testPath,
            List<String> testFails
    ) {
        return new ArrayList<>();
    }

    /**
     * Writes a {@link TestOutput} object to a given path. The output contains
     * information about the TOG which generated the test, the fully qualified
     * name of the class under test, the project source directory, the project
     * binaries directory, the number of passing test, the number of failing
     * tests, and a list of each test generated by the tog (with a label
     * corresponding to whether the test passes or fails).
     *
     * @param relativeRoot the relative path to the project root directory
     * @param togType the tog which generated the tests
     * @param className the fully qualified name of the class under test
     * @param srcDir the path to the project source directory
     * @param binDir the path to the project system binaries
     */
    public static void writeTestOutput(
            Path relativeRoot,
            TogType togType,
            String className,
            Path srcDir,
            Path binDir
    ) {
    }
}
