import data.OperationType;
import data.OracleOutput;
import data.TogType;

import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;

/**
 * This class is the main file used in the build {@code experiment.jar}, with
 * all necessary operations for the experiment pipeline, including:
 * <ul>
 *     <li>Removing oracles</li>
 *     <li>Inserting oracles</li>
 *     <li>Preprocessing TOG input</li>
 *     <li>Postprocessing TOG output</li>
 *     <li>Summarizing test suite results</li>
 *     <li>Summarizing Defects4J results</li>
 *     <li>Combining Defects4J results into a complete summary</li>
 * </ul>
 * The various operations require different arguments, following the format:
 * <ul>
 *     <li>{@code java -jar experiment.jar remove_oracles
 *     [fullyQualifiedName]}</li>
 *     <li>{@code java -jar experiment.jar insert_oracles
 *     [togType] [jarPath]}</li>
 *     <li>{@code java -jar experiment.jar generate_tog_input
 *     [togType] [fullyQualifiedName] [srcDir]}</li>
 *     <li>{@code java -jar experiment.jar generate_oracle_output
 *     [togType] [srcDir]}</li>
 *     <li>{@code java -jar experiment.jar generate_test_output
 *     [togType] [fullyQualifiedName] [srcDir] [binDir] [fileSuffix]}</li>
 *     <li>{@code java -jar experiment.jar generate_defects4j_output
 *     [togType] [projectName] [bugID] [fullyQualifiedName]}</li>
 *     <li>{@code java -jar experiment.jar combine_defects4j_output
 *     [togType]}</li>
 * </ul>
 */
public class Tog {
    /**
     * Inserts the OracleOutput records generated by a TOG into the prefixes
     * generated by EvoSuite.
     *
     * @param togType a TOG
     * @param oraclesPath the path to the OracleOutput JSON file
     */
    private static void insertOraclesOperation(TogType togType, Path binDir, Path oraclesPath) {
        List<OracleOutput> oracleOutputs = FileUtils.readJSONList(oraclesPath, OracleOutput.class);
        OracleInserter.insertOracles(togType, oracleOutputs, binDir);
    }

    /**
     * Preprocesses the given input to be valid for the specified TOG.
     *
     * @param togType a TOG
     * @param srcDir the directory to the project source code
     * @param fullyQualifiedName the fully qualified name of the class under
     *                           test
     */
    private static void generateTogInputOperation(TogType togType, Path srcDir, String fullyQualifiedName) {
        if (togType == TogType.TOGA) {
            TogUtils.generateTOGAInput(srcDir, fullyQualifiedName);
        }
    }

    /**
     * Converts the output of a given TOG to a list of OracleOutput records.
     *
     * @param togType a TOG
     * @param dir the directory for mapping outputs
     */
    private static void generateOracleOutputOperation(TogType togType, Path dir) {
        if (togType == TogType.TOGA) {
            TogUtils.togaToOracleOutput(dir);
        } else if (togType == TogType.JDOCTOR) {
            TogUtils.jDoctorToOracleOutput(dir);
        } else if (togType == TogType.TRATTO) {
            TogUtils.trattoToOracleOutput(dir);
        }
    }

    /**
     * Generates a TestOutput record to summarize a test suite generated by a
     * TOG.
     *
     * @param tog a TOG
     * @param fullyQualifiedName the fully qualified name of the class under
     *                           test
     * @param srcDir the source directory of the project under test
     * @param binDir the binaries directory of the project under test
     */
    private static void generateTestOutputOperation(
            TogType tog,
            String fullyQualifiedName,
            Path srcDir,
            Path binDir
    ) {
        TogUtils.writeTestOutput(
                tog,
                fullyQualifiedName,
                srcDir,
                binDir
        );
    }

    /**
     * The main method handles all invocations of the JAR file.
     *
     * @param args arguments passed for each JAR invocation
     */
    public static void main(String[] args) {
        TogType togType = TogType.valueOf(args[0].toUpperCase());
        OperationType operationType = OperationType.valueOf(args[1].toUpperCase());
        switch (operationType) {
            case REMOVE_ORACLES -> OracleRemover.removeOracles(
                    args[2]
            );
            case INSERT_ORACLES -> insertOraclesOperation(
                    togType,
                    Paths.get(args[2]),
                    Paths.get(args[3])
            );
            case GENERATE_TOG_INPUT -> generateTogInputOperation(
                    togType,
                    Paths.get(args[2]),
                    args[3]
            );
            case GENERATE_ORACLE_OUTPUT -> generateOracleOutputOperation(
                    togType,
                    Paths.get(args[2])
            );
            case GENERATE_TEST_OUTPUT -> generateTestOutputOperation(
                    togType,
                    args[2],
                    Paths.get(args[3]),
                    Paths.get(args[4])
            );
            default -> throw new IllegalArgumentException("Unknown operation " + operationType);
        }
    }
}
