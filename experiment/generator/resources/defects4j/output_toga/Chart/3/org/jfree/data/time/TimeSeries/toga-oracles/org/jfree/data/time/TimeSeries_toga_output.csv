project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test0000,"public void test0000() throws Throwable {
    Week week0 = new Week((-1), (-1));
    RegularTimePeriod regularTimePeriod0 = week0.previous();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    timeSeries0.add(regularTimePeriod0, (double) (-9999), true);
    timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 1);
    assertEquals(2, timeSeries0.getItemCount());
}",0,"assertEquals(0, timeSeries0.getItemCount())"
project,0,test0011,"public void test0011() throws Throwable {
    Minute minute0 = new Minute();
    Day day0 = minute0.getDay();
    TimeSeries timeSeries0 = new TimeSeries(day0, ""?*hGzK"", ""?*hGzK"");
    timeSeries0.hashCode();
    assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
}",0,
project,0,test0012,"public void test0012() throws Throwable {
    Minute minute0 = new Minute();
    Day day0 = minute0.getDay();
    TimeSeries timeSeries0 = new TimeSeries(day0, ""?*hGzK"", ""?*hGzK"");
    timeSeries0.hashCode();
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries0.getMaximumItemCount())"
project,0,test0013,"public void test0013() throws Throwable {
    Minute minute0 = new Minute();
    Day day0 = minute0.getDay();
    TimeSeries timeSeries0 = new TimeSeries(day0, ""?*hGzK"", ""?*hGzK"");
    timeSeries0.hashCode();
    assertEquals(""?*hGzK"", timeSeries0.getRangeDescription());
}",0,assertNotNull(timeSeries0.getRangeDescription())
project,0,test0014,"public void test0014() throws Throwable {
    Minute minute0 = new Minute();
    Day day0 = minute0.getDay();
    TimeSeries timeSeries0 = new TimeSeries(day0, ""?*hGzK"", ""?*hGzK"");
    timeSeries0.hashCode();
    assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
}",0,
project,0,test0015,"public void test0015() throws Throwable {
    Minute minute0 = new Minute();
    Day day0 = minute0.getDay();
    TimeSeries timeSeries0 = new TimeSeries(day0, ""?*hGzK"", ""?*hGzK"");
    timeSeries0.hashCode();
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries0.getMaximumItemAge())"
project,0,test0016,"public void test0016() throws Throwable {
    Minute minute0 = new Minute();
    Day day0 = minute0.getDay();
    TimeSeries timeSeries0 = new TimeSeries(day0, ""?*hGzK"", ""?*hGzK"");
    timeSeries0.hashCode();
    assertEquals(""?*hGzK"", timeSeries0.getDomainDescription());
}",0,assertNotNull(timeSeries0.getDomainDescription())
project,0,test0027,"public void test0027() throws Throwable {
    TimeSeries timeSeries0 = new TimeSeries("""", ""Null 'end' argument."", ""Uba"");
    Year year0 = new Year((-3032));
    RegularTimePeriod regularTimePeriod0 = year0.previous();
    TimeSeries timeSeries1 = timeSeries0.createCopy(regularTimePeriod0, (RegularTimePeriod) year0);
    assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
}",0,
project,0,test0028,"public void test0028() throws Throwable {
    TimeSeries timeSeries0 = new TimeSeries("""", ""Null 'end' argument."", ""Uba"");
    Year year0 = new Year((-3032));
    RegularTimePeriod regularTimePeriod0 = year0.previous();
    TimeSeries timeSeries1 = timeSeries0.createCopy(regularTimePeriod0, (RegularTimePeriod) year0);
    assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
}",0,
project,0,test0029,"public void test0029() throws Throwable {
    TimeSeries timeSeries0 = new TimeSeries("""", ""Null 'end' argument."", ""Uba"");
    Year year0 = new Year((-3032));
    RegularTimePeriod regularTimePeriod0 = year0.previous();
    TimeSeries timeSeries1 = timeSeries0.createCopy(regularTimePeriod0, (RegularTimePeriod) year0);
    assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries1.getMaximumItemAge())"
project,0,test00210,"public void test00210() throws Throwable {
    TimeSeries timeSeries0 = new TimeSeries("""", ""Null 'end' argument."", ""Uba"");
    Year year0 = new Year((-3032));
    RegularTimePeriod regularTimePeriod0 = year0.previous();
    TimeSeries timeSeries1 = timeSeries0.createCopy(regularTimePeriod0, (RegularTimePeriod) year0);
    assertEquals(""Uba"", timeSeries1.getRangeDescription());
}",0,assertNotNull(timeSeries1.getRangeDescription())
project,0,test00211,"public void test00211() throws Throwable {
    TimeSeries timeSeries0 = new TimeSeries("""", ""Null 'end' argument."", ""Uba"");
    Year year0 = new Year((-3032));
    RegularTimePeriod regularTimePeriod0 = year0.previous();
    TimeSeries timeSeries1 = timeSeries0.createCopy(regularTimePeriod0, (RegularTimePeriod) year0);
    assertEquals(""Null 'end' argument."", timeSeries1.getDomainDescription());
}",0,assertNotNull(timeSeries1.getDomainDescription())
project,0,test00212,"public void test00212() throws Throwable {
    TimeSeries timeSeries0 = new TimeSeries("""", ""Null 'end' argument."", ""Uba"");
    Year year0 = new Year((-3032));
    RegularTimePeriod regularTimePeriod0 = year0.previous();
    TimeSeries timeSeries1 = timeSeries0.createCopy(regularTimePeriod0, (RegularTimePeriod) year0);
    assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries1.getMaximumItemCount())"
project,0,test00313,"public void test00313() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    timeSeries0.add((RegularTimePeriod) week0, (-481.5), false);
    // Undeclared exception!
    try {
        timeSeries0.createCopy(0, 23);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 1, Size: 1
        //
        verifyException(""java.util.ArrayList"", e);
    }
}",1,
project,0,test00414,"public void test00414() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    timeSeries0.add((RegularTimePeriod) week0, (Number) 1, true);
    timeSeries0.setMaximumItemAge(1);
    RegularTimePeriod regularTimePeriod0 = week0.next();
    timeSeries0.add(regularTimePeriod0, (Number) 1, true);
    assertEquals(2, timeSeries0.getItemCount());
}",0,"assertEquals(1, timeSeries0.getItemCount())"
project,0,test00515,"public void test00515() throws Throwable {
    Year year0 = new Year();
    TimeSeries timeSeries0 = new TimeSeries(year0);
    timeSeries0.add((RegularTimePeriod) year0, (Number) (-9999), true);
    timeSeries0.delete(0, 0);
    assertEquals(0, timeSeries0.getItemCount());
}",0,"assertEquals(1, timeSeries0.getItemCount())"
project,0,test00616,"public void test00616() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0);
    timeSeries0.add((RegularTimePeriod) hour0, (double) 23);
    Year year0 = new Year();
    timeSeries0.getValue((RegularTimePeriod) year0);
    assertEquals(23.0, timeSeries0.getMinY(), 0.01);
}",0,
project,0,test00717,"public void test00717() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0);
    Year year0 = new Year();
    timeSeries0.add((RegularTimePeriod) hour0, (Number) year0.MINIMUM_YEAR, false);
    timeSeries0.getValue((RegularTimePeriod) year0);
    assertEquals((-9999.0), timeSeries0.getMinY(), 0.01);
}",0,
project,0,test00818,"public void test00818() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0);
    timeSeries0.add((RegularTimePeriod) hour0, (double) 23);
    timeSeries0.getValue(0);
    assertEquals(23.0, timeSeries0.getMaxY(), 0.01);
}",0,
project,0,test00919,"public void test00919() throws Throwable {
    Minute minute0 = new Minute();
    TimeSeries timeSeries0 = new TimeSeries(minute0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 59);
    timeSeries0.add(timeSeriesDataItem0);
    timeSeries0.getTimePeriodClass();
    assertEquals(59.0, timeSeries0.getMinY(), 0.01);
}",0,
project,0,test01020,"public void test01020() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0);
    timeSeries0.add((RegularTimePeriod) hour0, (double) 23);
    timeSeries0.getTimePeriod(0);
    assertEquals(23.0, timeSeries0.getMaxY(), 0.01);
}",0,
project,0,test01121,"public void test01121() throws Throwable {
    Year year0 = new Year();
    TimeSeries timeSeries0 = new TimeSeries(year0);
    timeSeries0.add((RegularTimePeriod) year0, (Number) (-9999), true);
    timeSeries0.getRawDataItem(0);
    assertEquals((-9999.0), timeSeries0.getMinY(), 0.01);
}",0,
project,0,test01222,"public void test01222() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0, """", """");
    String string0 = timeSeries0.getRangeDescription();
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,
project,0,test01223,"public void test01223() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0, """", """");
    String string0 = timeSeries0.getRangeDescription();
    assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
}",0,
project,0,test01224,"public void test01224() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0, """", """");
    String string0 = timeSeries0.getRangeDescription();
    assertEquals("""", string0);
}",0,
project,0,test01225,"public void test01225() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0, """", """");
    String string0 = timeSeries0.getRangeDescription();
    assertEquals("""", timeSeries0.getDomainDescription());
}",0,
project,0,test01226,"public void test01226() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0, """", """");
    String string0 = timeSeries0.getRangeDescription();
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries0.getMaximumItemAge())"
project,0,test01227,"public void test01227() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0, """", """");
    String string0 = timeSeries0.getRangeDescription();
    assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
}",0,
project,0,test01328,"public void test01328() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0);
    Year year0 = new Year();
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, (Number) 23);
    timeSeries0.add(timeSeriesDataItem0, true);
    timeSeries0.getNextTimePeriod();
    assertEquals(23.0, timeSeries0.getMaxY(), 0.01);
}",0,
project,0,test01429,"public void test01429() throws Throwable {
    Year year0 = new Year();
    TimeSeries timeSeries0 = new TimeSeries(year0);
    timeSeries0.add((RegularTimePeriod) year0, (Number) (-9999), true);
    double double0 = timeSeries0.getMinY();
    assertEquals((-9999.0), double0, 0.01);
}",0,
project,0,test01530,"public void test01530() throws Throwable {
    Month month0 = new Month();
    Year year0 = month0.getYear();
    TimeSeries timeSeries0 = new TimeSeries(month0);
    timeSeries0.add((RegularTimePeriod) year0, (Number) 9999);
    double double0 = timeSeries0.getMaxY();
    assertEquals(9999.0, timeSeries0.getMinY(), 0.01);
}",0,
project,0,test01531,"public void test01531() throws Throwable {
    Month month0 = new Month();
    Year year0 = month0.getYear();
    TimeSeries timeSeries0 = new TimeSeries(month0);
    timeSeries0.add((RegularTimePeriod) year0, (Number) 9999);
    double double0 = timeSeries0.getMaxY();
    assertEquals(9999.0, double0, 0.01);
}",0,
project,0,test01632,"public void test01632() throws Throwable {
    MockDate mockDate0 = new MockDate((-1864), (-1864), (-1864), 1624, 1438);
    Year year0 = new Year(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(year0);
    timeSeries0.add((RegularTimePeriod) year0, (Number) (-9999), true);
    double double0 = timeSeries0.getMaxY();
    assertEquals((-9999.0), double0, 0.01);
}",0,
project,0,test01733,"public void test01733() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0);
    timeSeries0.add((RegularTimePeriod) hour0, (double) 23);
    timeSeries0.getItemCount();
    assertEquals(23.0, timeSeries0.getMaxY(), 0.01);
}",0,
project,0,test01834,"public void test01834() throws Throwable {
    Month month0 = new Month();
    Year year0 = month0.getYear();
    TimeSeries timeSeries0 = new TimeSeries(month0);
    timeSeries0.add((RegularTimePeriod) year0, (Number) 9999);
    timeSeries0.getIndex(year0);
    assertEquals(9999.0, timeSeries0.getMaxY(), 0.01);
}",0,
project,0,test01935,"public void test01935() throws Throwable {
    Quarter quarter0 = new Quarter();
    TimeSeries timeSeries0 = new TimeSeries(quarter0, """", ""ivRI\""ZU=bKWicOn"");
    String string0 = timeSeries0.getDomainDescription();
    assertEquals(""ivRI\""ZU=bKWicOn"", timeSeries0.getRangeDescription());
}",0,assertNotNull(timeSeries0.getRangeDescription())
project,0,test01936,"public void test01936() throws Throwable {
    Quarter quarter0 = new Quarter();
    TimeSeries timeSeries0 = new TimeSeries(quarter0, """", ""ivRI\""ZU=bKWicOn"");
    String string0 = timeSeries0.getDomainDescription();
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries0.getMaximumItemAge())"
project,0,test01937,"public void test01937() throws Throwable {
    Quarter quarter0 = new Quarter();
    TimeSeries timeSeries0 = new TimeSeries(quarter0, """", ""ivRI\""ZU=bKWicOn"");
    String string0 = timeSeries0.getDomainDescription();
    assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
}",0,
project,0,test01938,"public void test01938() throws Throwable {
    Quarter quarter0 = new Quarter();
    TimeSeries timeSeries0 = new TimeSeries(quarter0, """", ""ivRI\""ZU=bKWicOn"");
    String string0 = timeSeries0.getDomainDescription();
    assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
}",0,
project,0,test01939,"public void test01939() throws Throwable {
    Quarter quarter0 = new Quarter();
    TimeSeries timeSeries0 = new TimeSeries(quarter0, """", ""ivRI\""ZU=bKWicOn"");
    String string0 = timeSeries0.getDomainDescription();
    assertEquals("""", string0);
}",0,assertNotNull(string0)
project,0,test01940,"public void test01940() throws Throwable {
    Quarter quarter0 = new Quarter();
    TimeSeries timeSeries0 = new TimeSeries(quarter0, """", ""ivRI\""ZU=bKWicOn"");
    String string0 = timeSeries0.getDomainDescription();
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries0.getMaximumItemCount())"
project,0,test02041,"public void test02041() throws Throwable {
    Year year0 = new Year();
    TimeSeries timeSeries0 = new TimeSeries(year0);
    timeSeries0.add((RegularTimePeriod) year0, (Number) (-9999), true);
    timeSeries0.getDataItem(0);
    assertEquals((-9999.0), timeSeries0.getMinY(), 0.01);
}",0,
project,0,test02142,"public void test02142() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0, """", """");
    timeSeries0.setNotify(false);
    TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) day0, (RegularTimePeriod) day0);
    assertEquals("""", timeSeries1.getRangeDescription());
}",0,assertNotNull(timeSeries1.getRangeDescription())
project,0,test02143,"public void test02143() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0, """", """");
    timeSeries0.setNotify(false);
    TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) day0, (RegularTimePeriod) day0);
    assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
}",0,
project,0,test02144,"public void test02144() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0, """", """");
    timeSeries0.setNotify(false);
    TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) day0, (RegularTimePeriod) day0);
    assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
}",0,
project,0,test02145,"public void test02145() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0, """", """");
    timeSeries0.setNotify(false);
    TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) day0, (RegularTimePeriod) day0);
    assertEquals("""", timeSeries1.getDomainDescription());
}",0,assertNotNull(timeSeries1.getDomainDescription())
project,0,test02146,"public void test02146() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0, """", """");
    timeSeries0.setNotify(false);
    TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) day0, (RegularTimePeriod) day0);
    assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
}",0,
project,0,test02147,"public void test02147() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0, """", """");
    timeSeries0.setNotify(false);
    TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) day0, (RegularTimePeriod) day0);
    assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
}",0,
project,0,test02248,"public void test02248() throws Throwable {
    Quarter quarter0 = new Quarter();
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."");
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries0.getMaximumItemAge())"
project,0,test02249,"public void test02249() throws Throwable {
    Quarter quarter0 = new Quarter();
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."");
    timeSeries0.setMaximumItemAge(0L);
    timeSeries0.createCopy((RegularTimePeriod) quarter0, (RegularTimePeriod) quarter0);
    assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
}",0,
project,0,test02350,"public void test02350() throws Throwable {
    Quarter quarter0 = new Quarter();
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."");
    timeSeries0.setNotify(false);
    TimeSeries timeSeries1 = timeSeries0.createCopy(1, Integer.MAX_VALUE);
    assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries1.getMaximumItemCount())"
project,0,test02351,"public void test02351() throws Throwable {
    Quarter quarter0 = new Quarter();
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."");
    timeSeries0.setNotify(false);
    TimeSeries timeSeries1 = timeSeries0.createCopy(1, Integer.MAX_VALUE);
    assertNotSame(timeSeries1, timeSeries0);
}",1,
project,0,test02352,"public void test02352() throws Throwable {
    Quarter quarter0 = new Quarter();
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."");
    timeSeries0.setNotify(false);
    TimeSeries timeSeries1 = timeSeries0.createCopy(1, Integer.MAX_VALUE);
    assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
}",0,
project,0,test02353,"public void test02353() throws Throwable {
    Quarter quarter0 = new Quarter();
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."");
    timeSeries0.setNotify(false);
    TimeSeries timeSeries1 = timeSeries0.createCopy(1, Integer.MAX_VALUE);
    assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries1.getMaximumItemAge())"
project,0,test02354,"public void test02354() throws Throwable {
    Quarter quarter0 = new Quarter();
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."");
    timeSeries0.setNotify(false);
    TimeSeries timeSeries1 = timeSeries0.createCopy(1, Integer.MAX_VALUE);
    assertEquals(""Null 'seriesKeys' argument."", timeSeries1.getDomainDescription());
}",0,assertNotNull(timeSeries1.getDomainDescription())
project,0,test02355,"public void test02355() throws Throwable {
    Quarter quarter0 = new Quarter();
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."");
    timeSeries0.setNotify(false);
    TimeSeries timeSeries1 = timeSeries0.createCopy(1, Integer.MAX_VALUE);
    assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
}",0,
project,0,test02356,"public void test02356() throws Throwable {
    Quarter quarter0 = new Quarter();
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."");
    timeSeries0.setNotify(false);
    TimeSeries timeSeries1 = timeSeries0.createCopy(1, Integer.MAX_VALUE);
    assertEquals(""Null 'seriesKeys' argument."", timeSeries1.getRangeDescription());
}",0,assertNotNull(timeSeries1.getRangeDescription())
project,0,test02458,"public void test02458() throws Throwable {
    Quarter quarter0 = new Quarter();
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."");
    timeSeries0.setMaximumItemAge(0L);
    timeSeries0.createCopy(1, Integer.MAX_VALUE);
    assertEquals(""Null 'seriesKeys' argument."", timeSeries0.getRangeDescription());
}",0,assertNotNull(timeSeries0.getRangeDescription())
project,0,test02559,"public void test02559() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0);
    Year year0 = new Year();
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, (Number) 23);
    timeSeriesDataItem0.setSelected(true);
    timeSeries0.add(timeSeriesDataItem0, true);
    timeSeries0.addOrUpdate(timeSeriesDataItem0);
    assertEquals(23.0, timeSeries0.getMaxY(), 0.01);
}",0,
project,0,test02660,"public void test02660() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0);
    Year year0 = new Year();
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, (Number) 23);
    timeSeriesDataItem0.setSelected(true);
    timeSeries0.add(timeSeriesDataItem0, true);
    timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) 0);
    assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
}",0,
project,0,test02761,"public void test02761() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    timeSeries0.add((RegularTimePeriod) week0, (-481.5), false);
    timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 53);
    assertEquals(53.0, timeSeries0.getMinY(), 0.01);
}",0,
project,0,test02862,"public void test02862() throws Throwable {
    Year year0 = new Year();
    TimeSeries timeSeries0 = new TimeSeries(year0);
    timeSeries0.add((RegularTimePeriod) year0, (Number) (-9999), true);
    timeSeries0.addOrUpdate((RegularTimePeriod) year0, (double) 9999);
    assertEquals(9999.0, timeSeries0.getMinY(), 0.01);
}",0,
project,0,test02963,"public void test02963() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    // Undeclared exception!
    try {
        timeSeries0.update((RegularTimePeriod) null, (Number) 1);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'period' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeriesDataItem"", e);
    }
}",0,
project,0,test03064,"public void test03064() throws Throwable {
    MockDate mockDate0 = new MockDate();
    Millisecond millisecond0 = new Millisecond(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(millisecond0, ""9FKCi1a5{:mf)"", ""9FKCi1a5{:mf)"");
    // Undeclared exception!
    try {
        timeSeries0.update(0, (Number) 0);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 0, Size: 0
        //
        verifyException(""java.util.ArrayList"", e);
    }
}",1,
project,0,test03165,"public void test03165() throws Throwable {
    Integer integer0 = JLayeredPane.PALETTE_LAYER;
    TimeSeries timeSeries0 = new TimeSeries("""");
    // Undeclared exception!
    try {
        timeSeries0.update((-1805), (Number) integer0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test03266,"public void test03266() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0);
    timeSeries0.add((RegularTimePeriod) hour0, (double) 23);
    // Undeclared exception!
    try {
        timeSeries0.removeAgedItems(9223372036854775807L, true);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}",0,
project,0,test03367,"public void test03367() throws Throwable {
    TimeSeries timeSeries0 = new TimeSeries("""");
    // Undeclared exception!
    try {
        timeSeries0.getValue((RegularTimePeriod) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'period' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}",0,
project,0,test03468,"public void test03468() throws Throwable {
    TimeSeries timeSeries0 = new TimeSeries(""s"", ""s"", ""the time period "");
    Vector<Millisecond> vector0 = new Vector<Millisecond>();
    timeSeries0.data = (List) vector0;
    // Undeclared exception!
    try {
        timeSeries0.getValue(999);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // Array index out of range: 999
        //
        verifyException(""java.util.Vector"", e);
    }
}",0,
project,0,test03569,"public void test03569() throws Throwable {
    TimeSeries timeSeries0 = new TimeSeries(""You are trying to add data where the time period class "", ""You are trying to add data where the time period class "", (String) null);
    // Undeclared exception!
    try {
        timeSeries0.getTimePeriodsUniqueToOtherSeries((TimeSeries) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}",0,
project,0,test03670,"public void test03670() throws Throwable {
    Millisecond millisecond0 = new Millisecond();
    TimeSeries timeSeries0 = new TimeSeries(millisecond0);
    // Undeclared exception!
    try {
        timeSeries0.getTimePeriod(999);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 999, Size: 0
        //
        verifyException(""java.util.ArrayList"", e);
    }
}",0,
project,0,test03771,"public void test03771() throws Throwable {
    Month month0 = new Month();
    TimeSeries timeSeries0 = new TimeSeries(month0, ""K'$"", (String) null);
    // Undeclared exception!
    try {
        timeSeries0.getRawDataItem(Integer.MAX_VALUE);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 2147483647, Size: 0
        //
        verifyException(""java.util.ArrayList"", e);
    }
}",1,
project,0,test03872,"public void test03872() throws Throwable {
    Week week0 = new Week((-2922), (-2922));
    TimeSeries timeSeries0 = new TimeSeries(week0, ""o)t8;k }'%+/"", ""o)t8;k }'%+/"");
    // Undeclared exception!
    try {
        timeSeries0.getRawDataItem((-2922));
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test03973,"public void test03973() throws Throwable {
    Year year0 = new Year(913);
    TimeSeries timeSeries0 = new TimeSeries(year0, ""Ed>~nh~Y"", ""Ed>~nh~Y"");
    LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
    timeSeries0.data = (List) linkedList0;
    // Undeclared exception!
    try {
        timeSeries0.getNextTimePeriod();
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: -1, Size: 0
        //
        verifyException(""java.util.LinkedList"", e);
    }
}",0,
project,0,test04074,"public void test04074() throws Throwable {
    TimeSeries timeSeries0 = new TimeSeries("""");
    // Undeclared exception!
    try {
        timeSeries0.getDataItem((RegularTimePeriod) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'period' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}",0,
project,0,test04175,"public void test04175() throws Throwable {
    MockDate mockDate0 = new MockDate(1235, 400, 1235);
    OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1.0), (-1.0), (-1.0), (-2.147483648E9), 611.4873052);
    TimeSeries timeSeries0 = new TimeSeries(oHLCDataItem0, (String) null, ""JG#sgA$$!"");
    // Undeclared exception!
    try {
        timeSeries0.getDataItem((-2348));
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test04276,"public void test04276() throws Throwable {
    XYDataItem xYDataItem0 = new XYDataItem((-2.147483648E9), 0.0);
    TimeSeries timeSeries0 = new TimeSeries(xYDataItem0);
    // Undeclared exception!
    try {
        timeSeries0.delete((RegularTimePeriod) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'period' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}",0,
project,0,test04377,"public void test04377() throws Throwable {
    Quarter quarter0 = new Quarter();
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."");
    // Undeclared exception!
    try {
        timeSeries0.delete(4, 29, true);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 4, Size: 0
        //
        verifyException(""java.util.ArrayList"", e);
    }
}",1,
project,0,test04478,"public void test04478() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    // Undeclared exception!
    try {
        timeSeries0.delete((-5480), (-1174));
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test04579,"public void test04579() throws Throwable {
    Year year0 = new Year();
    TimeSeries timeSeries0 = new TimeSeries(year0);
    timeSeries0.add((RegularTimePeriod) year0, (Number) (-9999), true);
    Week week0 = new Week();
    // Undeclared exception!
    try {
        timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 53);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // You are trying to add data where the time period class is org.jfree.data.time.Week, but the TimeSeries is expecting an instance of org.jfree.data.time.Year.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}",0,
project,0,test04680,"public void test04680() throws Throwable {
    TimeSeries timeSeries0 = new TimeSeries(""You are trying to add data where the time period class "", ""gj2w[S"", """");
    // Undeclared exception!
    try {
        timeSeries0.addOrUpdate((RegularTimePeriod) null, (Number) 1900);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'period' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeriesDataItem"", e);
    }
}",0,
project,0,test04781,"public void test04781() throws Throwable {
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
    Month month0 = new Month(date0);
    TimeSeries timeSeries0 = new TimeSeries(month0, """", ""1"");
    // Undeclared exception!
    try {
        timeSeries0.addOrUpdate((RegularTimePeriod) null, 1409.9202);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'period' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeriesDataItem"", e);
    }
}",0,
project,0,test04882,"public void test04882() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0);
    // Undeclared exception!
    try {
        timeSeries0.addAndOrUpdate((TimeSeries) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}",1,
project,0,test04983,"public void test04983() throws Throwable {
    MockDate mockDate0 = new MockDate();
    Hour hour0 = new Hour(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(hour0, """", """");
    // Undeclared exception!
    try {
        timeSeries0.add((TimeSeriesDataItem) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'item' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}",0,
project,0,test05084,"public void test05084() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0);
    Year year0 = new Year();
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, (Number) 23);
    timeSeries0.add(timeSeriesDataItem0, false);
    // Undeclared exception!
    try {
        timeSeries0.add((RegularTimePeriod) hour0, (Number) hour0.FIRST_HOUR_IN_DAY, false);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // You are trying to add data where the time period class is org.jfree.data.time.Hour, but the TimeSeries is expecting an instance of org.jfree.data.time.Year.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}",0,
project,0,test05185,"public void test05185() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    // Undeclared exception!
    try {
        timeSeries0.add((RegularTimePeriod) null, (Number) 1, true);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'period' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeriesDataItem"", e);
    }
}",0,
project,0,test05286,"public void test05286() throws Throwable {
    Month month0 = new Month();
    TimeSeries timeSeries0 = new TimeSeries(month0);
    timeSeries0.add((RegularTimePeriod) month0, 0.0);
    // Undeclared exception!
    try {
        timeSeries0.add((RegularTimePeriod) month0, 0.0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // You are attempting to add an observation for the time period February 2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}",1,
project,0,test05387,"public void test05387() throws Throwable {
    TimeSeries timeSeries0 = null;
    try {
        timeSeries0 = new TimeSeries((Comparable) null, (String) null, ""TL`zt"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'key' argument.
        //
        verifyException(""org.jfree.data.general.Series"", e);
    }
}",1,
project,0,test05488,"public void test05488() throws Throwable {
    TimeSeries timeSeries0 = null;
    try {
        timeSeries0 = new TimeSeries((Comparable) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'key' argument.
        //
        verifyException(""org.jfree.data.general.Series"", e);
    }
}",1,
project,0,test05589,"public void test05589() throws Throwable {
    SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2922);
    Day day0 = new Day(spreadsheetDate0);
    TimeSeries timeSeries0 = new TimeSeries(day0, ""You are trying to add data where the time period class "", ""You are trying to add data where the time period class "");
    timeSeries0.add((RegularTimePeriod) day0, (double) 3, true);
    timeSeries0.delete(0, 0, true);
    assertEquals(0, timeSeries0.getItemCount());
}",0,"assertEquals(0, timeSeries0.getItemCount())"
project,0,test05690,"public void test05690() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond(454L);
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    // Undeclared exception!
    try {
        timeSeries0.delete((-1945), 0, true);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",1,
project,0,test05791,"public void test05791() throws Throwable {
    MockDate mockDate0 = new MockDate(0L);
    Week week0 = new Week(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(week0, ""3jR9"", ""XQ nmA/VK"");
    // Undeclared exception!
    try {
        timeSeries0.delete(1, 0, false);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Requires start <= end.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}",0,
project,0,test05892,"public void test05892() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    timeSeries0.add((RegularTimePeriod) week0, (Number) 1, true);
    RegularTimePeriod regularTimePeriod0 = week0.next();
    timeSeries0.add(regularTimePeriod0, (Number) 1, true);
    timeSeries0.removeAgedItems(true);
    assertEquals(2, timeSeries0.getItemCount());
}",0,
project,0,test05993,"public void test05993() throws Throwable {
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""");
    Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
    Minute minute0 = new Minute(date0);
    TimeSeries timeSeries0 = new TimeSeries(minute0, "".dj8CYsoz`2xA[o"", """");
    timeSeries0.removeAgedItems(false);
    assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
}",0,
project,0,test05994,"public void test05994() throws Throwable {
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""");
    Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
    Minute minute0 = new Minute(date0);
    TimeSeries timeSeries0 = new TimeSeries(minute0, "".dj8CYsoz`2xA[o"", """");
    timeSeries0.removeAgedItems(false);
    assertEquals("".dj8CYsoz`2xA[o"", timeSeries0.getDomainDescription());
}",0,assertNotNull(timeSeries0.getDomainDescription())
project,0,test05995,"public void test05995() throws Throwable {
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""");
    Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
    Minute minute0 = new Minute(date0);
    TimeSeries timeSeries0 = new TimeSeries(minute0, "".dj8CYsoz`2xA[o"", """");
    timeSeries0.removeAgedItems(false);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries0.getMaximumItemCount())"
project,0,test05996,"public void test05996() throws Throwable {
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""");
    Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
    Minute minute0 = new Minute(date0);
    TimeSeries timeSeries0 = new TimeSeries(minute0, "".dj8CYsoz`2xA[o"", """");
    timeSeries0.removeAgedItems(false);
    assertEquals("""", timeSeries0.getRangeDescription());
}",0,assertNotNull(timeSeries0.getRangeDescription())
project,0,test05997,"public void test05997() throws Throwable {
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""");
    Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
    Minute minute0 = new Minute(date0);
    TimeSeries timeSeries0 = new TimeSeries(minute0, "".dj8CYsoz`2xA[o"", """");
    timeSeries0.removeAgedItems(false);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries0.getMaximumItemAge())"
project,0,test05998,"public void test05998() throws Throwable {
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""");
    Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
    Minute minute0 = new Minute(date0);
    TimeSeries timeSeries0 = new TimeSeries(minute0, "".dj8CYsoz`2xA[o"", """");
    timeSeries0.removeAgedItems(false);
    assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
}",0,
project,0,test06099,"public void test06099() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, (-2461.880016307358));
    timeSeries0.addOrUpdate(timeSeriesDataItem0);
    assertEquals((-2461.880016307358), timeSeries0.getMinY(), 0.01);
}",0,
project,0,test061100,"public void test061100() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0);
    timeSeries0.add((RegularTimePeriod) hour0, (double) 23);
    timeSeries0.update(0, (Number) 0);
    assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
}",0,
project,0,test062101,"public void test062101() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0);
    Year year0 = new Year();
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, (Number) 23);
    timeSeries0.add(timeSeriesDataItem0, true);
    timeSeries0.addOrUpdate(timeSeriesDataItem0);
    assertEquals(23.0, timeSeries0.getMinY(), 0.01);
}",0,
project,0,test063102,"public void test063102() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0);
    timeSeries0.add((RegularTimePeriod) hour0, (double) 23);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) hour0, (double) 23);
    // Undeclared exception!
    try {
        timeSeries0.add(timeSeriesDataItem0, true);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // You are attempting to add an observation for the time period [20,14/2/2014] but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}",0,
project,0,test064103,"public void test064103() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-914L));
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    timeSeries0.getIndex(fixedMillisecond0);
    assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
}",0,
project,0,test064104,"public void test064104() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-914L));
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    timeSeries0.getIndex(fixedMillisecond0);
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}",0,assertNotNull(timeSeries0.getDomainDescription())
project,0,test064105,"public void test064105() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-914L));
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    timeSeries0.getIndex(fixedMillisecond0);
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}",0,assertNotNull(timeSeries0.getRangeDescription())
project,0,test064106,"public void test064106() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-914L));
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    timeSeries0.getIndex(fixedMillisecond0);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries0.getMaximumItemCount())"
project,0,test064107,"public void test064107() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-914L));
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    timeSeries0.getIndex(fixedMillisecond0);
    assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
}",0,
project,0,test064108,"public void test064108() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-914L));
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    timeSeries0.getIndex(fixedMillisecond0);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,
project,0,test065109,"public void test065109() throws Throwable {
    MockDate mockDate0 = new MockDate(0L);
    Millisecond millisecond0 = new Millisecond(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(millisecond0);
    // Undeclared exception!
    try {
        timeSeries0.getDataItem(999);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 999, Size: 0
        //
        verifyException(""java.util.ArrayList"", e);
    }
}",0,
project,0,test066110,"public void test066110() throws Throwable {
    Minute minute0 = new Minute();
    TimeSeries timeSeries0 = new TimeSeries(minute0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 59);
    timeSeries0.add(timeSeriesDataItem0);
    // Undeclared exception!
    try {
        timeSeries0.add(timeSeriesDataItem0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // You are attempting to add an observation for the time period Fri Feb 14 20:21:21 GMT 2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}",0,
project,0,test067111,"public void test067111() throws Throwable {
    MockDate mockDate0 = new MockDate((-1864), (-1864), (-1864), 1624, 1438);
    Year year0 = new Year(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(year0);
    timeSeries0.getItemCount();
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries0.getMaximumItemCount())"
project,0,test067112,"public void test067112() throws Throwable {
    MockDate mockDate0 = new MockDate((-1864), (-1864), (-1864), 1624, 1438);
    Year year0 = new Year(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(year0);
    timeSeries0.getItemCount();
    assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
}",0,
project,0,test067113,"public void test067113() throws Throwable {
    MockDate mockDate0 = new MockDate((-1864), (-1864), (-1864), 1624, 1438);
    Year year0 = new Year(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(year0);
    timeSeries0.getItemCount();
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}",0,assertNotNull(timeSeries0.getDomainDescription())
project,0,test067114,"public void test067114() throws Throwable {
    MockDate mockDate0 = new MockDate((-1864), (-1864), (-1864), 1624, 1438);
    Year year0 = new Year(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(year0);
    timeSeries0.getItemCount();
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}",0,assertNotNull(timeSeries0.getRangeDescription())
project,0,test067115,"public void test067115() throws Throwable {
    MockDate mockDate0 = new MockDate((-1864), (-1864), (-1864), 1624, 1438);
    Year year0 = new Year(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(year0);
    timeSeries0.getItemCount();
    assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
}",0,
project,0,test067116,"public void test067116() throws Throwable {
    MockDate mockDate0 = new MockDate((-1864), (-1864), (-1864), 1624, 1438);
    Year year0 = new Year(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(year0);
    timeSeries0.getItemCount();
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries0.getMaximumItemAge())"
project,0,test068117,"public void test068117() throws Throwable {
    Month month0 = new Month();
    TimeSeries timeSeries0 = new TimeSeries(month0, ""K'$"", (String) null);
    timeSeries0.addOrUpdate((RegularTimePeriod) month0, (Number) null);
    assertEquals(""K'$"", timeSeries0.getDomainDescription());
}",0,assertNotNull(timeSeries0.getDomainDescription())
project,0,test068118,"public void test068118() throws Throwable {
    Month month0 = new Month();
    TimeSeries timeSeries0 = new TimeSeries(month0, ""K'$"", (String) null);
    timeSeries0.addOrUpdate((RegularTimePeriod) month0, (Number) null);
    assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
}",0,
project,0,test068119,"public void test068119() throws Throwable {
    Month month0 = new Month();
    TimeSeries timeSeries0 = new TimeSeries(month0, ""K'$"", (String) null);
    timeSeries0.addOrUpdate((RegularTimePeriod) month0, (Number) null);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries0.getMaximumItemCount())"
project,0,test068120,"public void test068120() throws Throwable {
    Month month0 = new Month();
    TimeSeries timeSeries0 = new TimeSeries(month0, ""K'$"", (String) null);
    timeSeries0.addOrUpdate((RegularTimePeriod) month0, (Number) null);
    assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
}",0,
project,0,test068121,"public void test068121() throws Throwable {
    Month month0 = new Month();
    TimeSeries timeSeries0 = new TimeSeries(month0, ""K'$"", (String) null);
    timeSeries0.addOrUpdate((RegularTimePeriod) month0, (Number) null);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries0.getMaximumItemAge())"
project,0,test069122,"public void test069122() throws Throwable {
    Year year0 = new Year();
    TimeSeries timeSeries0 = new TimeSeries(year0);
    timeSeries0.add((RegularTimePeriod) year0, (Number) (-9999), true);
    timeSeries0.hashCode();
    assertEquals((-9999.0), timeSeries0.getMinY(), 0.01);
}",0,
project,0,test070123,"public void test070123() throws Throwable {
    TimeSeries timeSeries0 = new TimeSeries(""the time period "", (String) null, ""the time period "");
    timeSeries0.hashCode();
    assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
}",0,
project,0,test070124,"public void test070124() throws Throwable {
    TimeSeries timeSeries0 = new TimeSeries(""the time period "", (String) null, ""the time period "");
    timeSeries0.hashCode();
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries0.getMaximumItemAge())"
project,0,test070125,"public void test070125() throws Throwable {
    TimeSeries timeSeries0 = new TimeSeries(""the time period "", (String) null, ""the time period "");
    timeSeries0.hashCode();
    assertEquals(""the time period "", timeSeries0.getRangeDescription());
}",0,
project,0,test070126,"public void test070126() throws Throwable {
    TimeSeries timeSeries0 = new TimeSeries(""the time period "", (String) null, ""the time period "");
    timeSeries0.hashCode();
    assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
}",0,
project,0,test070127,"public void test070127() throws Throwable {
    TimeSeries timeSeries0 = new TimeSeries(""the time period "", (String) null, ""the time period "");
    timeSeries0.hashCode();
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries0.getMaximumItemCount())"
project,0,test071128,"public void test071128() throws Throwable {
    Quarter quarter0 = new Quarter();
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."");
    TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
    boolean boolean0 = timeSeries0.equals(timeSeries1);
    assertEquals(""Null 'seriesKeys' argument."", timeSeries0.getRangeDescription());
}",0,assertNotNull(timeSeries0.getRangeDescription())
project,0,test071129,"public void test071129() throws Throwable {
    Quarter quarter0 = new Quarter();
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."");
    TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
    boolean boolean0 = timeSeries0.equals(timeSeries1);
    assertEquals(""Null 'seriesKeys' argument."", timeSeries0.getDomainDescription());
}",0,assertNotNull(timeSeries0.getDomainDescription())
project,0,test071130,"public void test071130() throws Throwable {
    Quarter quarter0 = new Quarter();
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."");
    TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
    boolean boolean0 = timeSeries0.equals(timeSeries1);
    assertEquals(""Value"", timeSeries1.getRangeDescription());
}",0,assertNotNull(timeSeries1.getRangeDescription())
project,0,test071131,"public void test071131() throws Throwable {
    Quarter quarter0 = new Quarter();
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."");
    TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
    boolean boolean0 = timeSeries0.equals(timeSeries1);
    assertEquals(""Time"", timeSeries1.getDomainDescription());
}",0,assertNotNull(timeSeries1.getDomainDescription())
project,0,test071132,"public void test071132() throws Throwable {
    Quarter quarter0 = new Quarter();
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."");
    TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
    boolean boolean0 = timeSeries0.equals(timeSeries1);
    assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
}",0,
project,0,test071133,"public void test071133() throws Throwable {
    Quarter quarter0 = new Quarter();
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."");
    TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
    boolean boolean0 = timeSeries0.equals(timeSeries1);
    assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries1.getMaximumItemCount())"
project,0,test071134,"public void test071134() throws Throwable {
    Quarter quarter0 = new Quarter();
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."");
    TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
    boolean boolean0 = timeSeries0.equals(timeSeries1);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test071135,"public void test071135() throws Throwable {
    Quarter quarter0 = new Quarter();
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."");
    TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
    boolean boolean0 = timeSeries0.equals(timeSeries1);
    assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
}",0,
project,0,test071136,"public void test071136() throws Throwable {
    Quarter quarter0 = new Quarter();
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."");
    TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
    boolean boolean0 = timeSeries0.equals(timeSeries1);
    assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
}",0,
project,0,test072137,"public void test072137() throws Throwable {
    Quarter quarter0 = new Quarter();
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."");
    TimeSeries timeSeries1 = new TimeSeries(""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."");
    boolean boolean0 = timeSeries1.equals(timeSeries0);
    assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
}",0,
project,0,test072138,"public void test072138() throws Throwable {
    Quarter quarter0 = new Quarter();
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."");
    TimeSeries timeSeries1 = new TimeSeries(""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."");
    boolean boolean0 = timeSeries1.equals(timeSeries0);
    assertEquals(""Null 'seriesKeys' argument."", timeSeries1.getRangeDescription());
}",0,
project,0,test072139,"public void test072139() throws Throwable {
    Quarter quarter0 = new Quarter();
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."");
    TimeSeries timeSeries1 = new TimeSeries(""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."");
    boolean boolean0 = timeSeries1.equals(timeSeries0);
    assertEquals(""Null 'seriesKeys' argument."", timeSeries1.getDomainDescription());
}",0,
project,0,test072140,"public void test072140() throws Throwable {
    Quarter quarter0 = new Quarter();
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."");
    TimeSeries timeSeries1 = new TimeSeries(""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."");
    boolean boolean0 = timeSeries1.equals(timeSeries0);
    assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
}",0,
project,0,test072141,"public void test072141() throws Throwable {
    Quarter quarter0 = new Quarter();
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."");
    TimeSeries timeSeries1 = new TimeSeries(""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."");
    boolean boolean0 = timeSeries1.equals(timeSeries0);
    assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries1.getMaximumItemCount())"
project,0,test072142,"public void test072142() throws Throwable {
    Quarter quarter0 = new Quarter();
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."");
    TimeSeries timeSeries1 = new TimeSeries(""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."");
    boolean boolean0 = timeSeries1.equals(timeSeries0);
    assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
}",0,
project,0,test072143,"public void test072143() throws Throwable {
    Quarter quarter0 = new Quarter();
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."");
    TimeSeries timeSeries1 = new TimeSeries(""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."");
    boolean boolean0 = timeSeries1.equals(timeSeries0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test073144,"public void test073144() throws Throwable {
    Year year0 = new Year();
    TimeSeries timeSeries0 = new TimeSeries(year0);
    GridLayout gridLayout0 = new GridLayout(0, 3012);
    Panel panel0 = new Panel(gridLayout0);
    boolean boolean0 = timeSeries0.equals(panel0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test073145,"public void test073145() throws Throwable {
    Year year0 = new Year();
    TimeSeries timeSeries0 = new TimeSeries(year0);
    GridLayout gridLayout0 = new GridLayout(0, 3012);
    Panel panel0 = new Panel(gridLayout0);
    boolean boolean0 = timeSeries0.equals(panel0);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries0.getMaximumItemCount())"
project,0,test073146,"public void test073146() throws Throwable {
    Year year0 = new Year();
    TimeSeries timeSeries0 = new TimeSeries(year0);
    GridLayout gridLayout0 = new GridLayout(0, 3012);
    Panel panel0 = new Panel(gridLayout0);
    boolean boolean0 = timeSeries0.equals(panel0);
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}",0,assertNotNull(timeSeries0.getRangeDescription())
project,0,test073147,"public void test073147() throws Throwable {
    Year year0 = new Year();
    TimeSeries timeSeries0 = new TimeSeries(year0);
    GridLayout gridLayout0 = new GridLayout(0, 3012);
    Panel panel0 = new Panel(gridLayout0);
    boolean boolean0 = timeSeries0.equals(panel0);
    assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
}",0,
project,0,test073148,"public void test073148() throws Throwable {
    Year year0 = new Year();
    TimeSeries timeSeries0 = new TimeSeries(year0);
    GridLayout gridLayout0 = new GridLayout(0, 3012);
    Panel panel0 = new Panel(gridLayout0);
    boolean boolean0 = timeSeries0.equals(panel0);
    assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
}",0,
project,0,test073149,"public void test073149() throws Throwable {
    Year year0 = new Year();
    TimeSeries timeSeries0 = new TimeSeries(year0);
    GridLayout gridLayout0 = new GridLayout(0, 3012);
    Panel panel0 = new Panel(gridLayout0);
    boolean boolean0 = timeSeries0.equals(panel0);
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}",0,assertNotNull(timeSeries0.getDomainDescription())
project,0,test073150,"public void test073150() throws Throwable {
    Year year0 = new Year();
    TimeSeries timeSeries0 = new TimeSeries(year0);
    GridLayout gridLayout0 = new GridLayout(0, 3012);
    Panel panel0 = new Panel(gridLayout0);
    boolean boolean0 = timeSeries0.equals(panel0);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries0.getMaximumItemAge())"
project,0,test074151,"public void test074151() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    timeSeries0.add((RegularTimePeriod) week0, (-481.5), false);
    RegularTimePeriod regularTimePeriod0 = week0.previous();
    timeSeries0.createCopy(regularTimePeriod0, regularTimePeriod0);
    assertEquals((-481.5), timeSeries0.getMaxY(), 0.01);
}",0,
project,0,test075152,"public void test075152() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""93nFD{n"");
    Instant instant0 = MockInstant.ofEpochSecond(0L);
    Date date0 = Date.from(instant0);
    TimeSeries timeSeries0 = new TimeSeries(""You are trying to add data where the time period class "", """", """");
    Day day0 = new Day(date0, timeZone0);
    RegularTimePeriod regularTimePeriod0 = day0.next();
    // Undeclared exception!
    try {
        timeSeries0.createCopy(regularTimePeriod0, (RegularTimePeriod) day0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Requires start on or before end.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}",1,
project,0,test076153,"public void test076153() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    // Undeclared exception!
    try {
        timeSeries0.createCopy((RegularTimePeriod) null, (RegularTimePeriod) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'start' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}",1,
project,0,test077154,"public void test077154() throws Throwable {
    Millisecond millisecond0 = new Millisecond();
    TimeSeries timeSeries0 = new TimeSeries(millisecond0);
    // Undeclared exception!
    try {
        timeSeries0.createCopy(999, 0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Requires start <= end.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}",1,
project,0,test078155,"public void test078155() throws Throwable {
    TimeSeries timeSeries0 = new TimeSeries(""G>`Yl=JF}Uh#c=ol)"");
    // Undeclared exception!
    try {
        timeSeries0.createCopy((-2814), (-2814));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Requires start >= 0.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}",0,
project,0,test079156,"public void test079156() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    // Undeclared exception!
    try {
        timeSeries0.delete(2574, (-1174));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Requires start <= end.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}",0,
project,0,test080157,"public void test080157() throws Throwable {
    Hour hour0 = new Hour();
    RegularTimePeriod regularTimePeriod0 = hour0.next();
    TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
    timeSeries0.add((RegularTimePeriod) hour0, (double) 23);
    timeSeries0.add(regularTimePeriod0, (double) 23, true);
    timeSeries0.delete(regularTimePeriod0);
    assertEquals(1, timeSeries0.getItemCount());
}",0,"assertEquals(1, timeSeries0.getItemCount())"
project,0,test081158,"public void test081158() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0);
    Year year0 = new Year();
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, (Number) 23);
    timeSeries0.add(timeSeriesDataItem0, false);
    timeSeries0.delete((RegularTimePeriod) hour0);
    assertEquals(0, timeSeries0.getItemCount());
}",0,"assertEquals(1, timeSeries0.getItemCount())"
project,0,test082159,"public void test082159() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0, ""3,LZlB"", ""rMy?K}U1Qxkb"");
    timeSeries0.delete((RegularTimePeriod) week0);
    assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
}",0,
project,0,test082160,"public void test082160() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0, ""3,LZlB"", ""rMy?K}U1Qxkb"");
    timeSeries0.delete((RegularTimePeriod) week0);
    assertEquals(""3,LZlB"", timeSeries0.getDomainDescription());
}",0,
project,0,test082161,"public void test082161() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0, ""3,LZlB"", ""rMy?K}U1Qxkb"");
    timeSeries0.delete((RegularTimePeriod) week0);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(1, timeSeries0.getMaximumItemAge())"
project,0,test082162,"public void test082162() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0, ""3,LZlB"", ""rMy?K}U1Qxkb"");
    timeSeries0.delete((RegularTimePeriod) week0);
    assertEquals(""rMy?K}U1Qxkb"", timeSeries0.getRangeDescription());
}",0,assertNotNull(timeSeries0.getRangeDescription())
project,0,test082163,"public void test082163() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0, ""3,LZlB"", ""rMy?K}U1Qxkb"");
    timeSeries0.delete((RegularTimePeriod) week0);
    assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
}",0,
project,0,test082164,"public void test082164() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0, ""3,LZlB"", ""rMy?K}U1Qxkb"");
    timeSeries0.delete((RegularTimePeriod) week0);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(1, timeSeries0.getMaximumItemCount())"
project,0,test083165,"public void test083165() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0);
    timeSeries0.add((RegularTimePeriod) hour0, (double) 23);
    timeSeries0.clear();
    assertEquals(0, timeSeries0.getItemCount());
}",0,"assertEquals(0, timeSeries0.getItemCount())"
project,0,test084166,"public void test084166() throws Throwable {
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""");
    Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
    Week week0 = new Week(date0);
    TimeSeries timeSeries0 = new TimeSeries(week0, """", ""There is no existing value for the specified 'period'."");
    timeSeries0.clear();
    assertEquals(""There is no existing value for the specified 'period'."", timeSeries0.getRangeDescription());
}",0,assertNotNull(timeSeries0.getRangeDescription())
project,0,test084167,"public void test084167() throws Throwable {
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""");
    Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
    Week week0 = new Week(date0);
    TimeSeries timeSeries0 = new TimeSeries(week0, """", ""There is no existing value for the specified 'period'."");
    timeSeries0.clear();
    assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
}",0,
project,0,test084168,"public void test084168() throws Throwable {
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""");
    Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
    Week week0 = new Week(date0);
    TimeSeries timeSeries0 = new TimeSeries(week0, """", ""There is no existing value for the specified 'period'."");
    timeSeries0.clear();
    assertEquals("""", timeSeries0.getDomainDescription());
}",0,assertNotNull(timeSeries0.getDomainDescription())
project,0,test084169,"public void test084169() throws Throwable {
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""");
    Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
    Week week0 = new Week(date0);
    TimeSeries timeSeries0 = new TimeSeries(week0, """", ""There is no existing value for the specified 'period'."");
    timeSeries0.clear();
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries0.getMaximumItemAge())"
project,0,test084170,"public void test084170() throws Throwable {
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""");
    Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
    Week week0 = new Week(date0);
    TimeSeries timeSeries0 = new TimeSeries(week0, """", ""There is no existing value for the specified 'period'."");
    timeSeries0.clear();
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries0.getMaximumItemCount())"
project,0,test084171,"public void test084171() throws Throwable {
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""");
    Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
    Week week0 = new Week(date0);
    TimeSeries timeSeries0 = new TimeSeries(week0, """", ""There is no existing value for the specified 'period'."");
    timeSeries0.clear();
    assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
}",0,
project,0,test085172,"public void test085172() throws Throwable {
    TimeSeries timeSeries0 = new TimeSeries(""You are trying to add data where the time period class "", """", """");
    timeSeries0.removeAgedItems((-674L), true);
    assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
}",0,
project,0,test085173,"public void test085173() throws Throwable {
    TimeSeries timeSeries0 = new TimeSeries(""You are trying to add data where the time period class "", """", """");
    timeSeries0.removeAgedItems((-674L), true);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries0.getMaximumItemAge())"
project,0,test085174,"public void test085174() throws Throwable {
    TimeSeries timeSeries0 = new TimeSeries(""You are trying to add data where the time period class "", """", """");
    timeSeries0.removeAgedItems((-674L), true);
    assertEquals("""", timeSeries0.getDomainDescription());
}",0,assertNotNull(timeSeries0.getDomainDescription())
project,0,test085175,"public void test085175() throws Throwable {
    TimeSeries timeSeries0 = new TimeSeries(""You are trying to add data where the time period class "", """", """");
    timeSeries0.removeAgedItems((-674L), true);
    assertEquals("""", timeSeries0.getRangeDescription());
}",0,assertNotNull(timeSeries0.getRangeDescription())
project,0,test085176,"public void test085176() throws Throwable {
    TimeSeries timeSeries0 = new TimeSeries(""You are trying to add data where the time period class "", """", """");
    timeSeries0.removeAgedItems((-674L), true);
    assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
}",0,
project,0,test085177,"public void test085177() throws Throwable {
    TimeSeries timeSeries0 = new TimeSeries(""You are trying to add data where the time period class "", """", """");
    timeSeries0.removeAgedItems((-674L), true);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries0.getMaximumItemCount())"
project,0,test086178,"public void test086178() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    timeSeries0.add((RegularTimePeriod) week0, (-481.5), false);
    timeSeries0.removeAgedItems(9223372036854775807L, false);
    timeSeries0.removeAgedItems((long) 1, false);
    assertEquals((-481.5), timeSeries0.getMinY(), 0.01);
}",0,
project,0,test087179,"public void test087179() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    timeSeries0.add((RegularTimePeriod) week0, (Number) 1, true);
    timeSeries0.setMaximumItemAge(1);
    Week week1 = new Week(1, 1);
    timeSeries0.add((RegularTimePeriod) week1, (Number) 1, true);
    assertEquals(1, timeSeries0.getItemCount());
}",0,"assertEquals(1, timeSeries0.getItemCount())"
project,0,test088180,"public void test088180() throws Throwable {
    SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-1493.806316114138), 1018.1, false, false);
    TimeSeries timeSeries0 = new TimeSeries(simpleHistogramBin0);
    MockDate mockDate0 = new MockDate();
    Second second0 = new Second(mockDate0);
    Millisecond millisecond0 = new Millisecond((-3112), second0);
    timeSeries0.setMaximumItemCount(0);
    timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, (Number) 999);
    assertEquals(0, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries0.getMaximumItemCount())"
project,0,test089181,"public void test089181() throws Throwable {
    TimeSeries timeSeries0 = new TimeSeries("""");
    Year year0 = new Year((-367));
    Week week0 = new Week((-1645), year0);
    timeSeries0.add((RegularTimePeriod) week0, 2147.604);
    // Undeclared exception!
    try {
        timeSeries0.addOrUpdate((RegularTimePeriod) year0, 2147.604);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // You are trying to add data where the time period class is org.jfree.data.time.Year, but the TimeSeries is expecting an instance of org.jfree.data.time.Week.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}",0,
project,0,test090182,"public void test090182() throws Throwable {
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
    Month month0 = new Month(date0);
    TimeSeries timeSeries0 = new TimeSeries(month0, """", ""1"");
    // Undeclared exception!
    try {
        timeSeries0.addOrUpdate((TimeSeriesDataItem) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'period' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}",0,
project,0,test091183,"public void test091183() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    timeSeries0.add((RegularTimePeriod) week0, (Number) 1, true);
    timeSeries0.addAndOrUpdate(timeSeries0);
    assertEquals(1.0, timeSeries0.getMaxY(), 0.01);
}",0,
project,0,test091184,"public void test091184() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    timeSeries0.add((RegularTimePeriod) week0, (Number) 1, true);
    timeSeries0.addAndOrUpdate(timeSeries0);
    assertEquals(1.0, timeSeries0.getMinY(), 0.01);
}",0,
project,0,test092185,"public void test092185() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0);
    // Undeclared exception!
    try {
        timeSeries0.update((RegularTimePeriod) hour0, (Number) hour0.FIRST_HOUR_IN_DAY);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // There is no existing value for the specified 'period'.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}",0,
project,0,test093186,"public void test093186() throws Throwable {
    Year year0 = new Year();
    TimeSeries timeSeries0 = new TimeSeries(year0);
    timeSeries0.add((RegularTimePeriod) year0, (Number) (-9999), true);
    Long long0 = new Long(4440L);
    timeSeries0.update((RegularTimePeriod) year0, (Number) long0);
    assertEquals(4440.0, timeSeries0.getMinY(), 0.01);
}",0,
project,0,test094187,"public void test094187() throws Throwable {
    Hour hour0 = new Hour();
    RegularTimePeriod regularTimePeriod0 = hour0.next();
    TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
    timeSeries0.add((RegularTimePeriod) hour0, (double) 23);
    timeSeries0.add(regularTimePeriod0, (double) 23, false);
    int int0 = timeSeries0.getIndex(regularTimePeriod0);
    assertEquals(23.0, timeSeries0.getMinY(), 0.01);
}",0,
project,0,test094188,"public void test094188() throws Throwable {
    Hour hour0 = new Hour();
    RegularTimePeriod regularTimePeriod0 = hour0.next();
    TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
    timeSeries0.add((RegularTimePeriod) hour0, (double) 23);
    timeSeries0.add(regularTimePeriod0, (double) 23, false);
    int int0 = timeSeries0.getIndex(regularTimePeriod0);
    assertEquals(1, int0);
}",0,"assertEquals(0, int0)"
project,0,test095189,"public void test095189() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0);
    timeSeries0.add((RegularTimePeriod) hour0, (double) 23);
    // Undeclared exception!
    try {
        timeSeries0.add((RegularTimePeriod) hour0, (double) 23, false);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // You are attempting to add an observation for the time period [20,14/2/2014] but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}",0,
project,0,test096190,"public void test096190() throws Throwable {
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""");
    Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
    Minute minute0 = new Minute(date0);
    TimeSeries timeSeries0 = new TimeSeries(minute0, "".dj8CYsoz`2xA[o"", """");
    // Undeclared exception!
    try {
        timeSeries0.add((TimeSeriesDataItem) null, false);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'item' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}",0,
project,0,test097191,"public void test097191() throws Throwable {
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""");
    Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
    Minute minute0 = new Minute(date0);
    TimeSeries timeSeries0 = new TimeSeries(minute0, "".dj8CYsoz`2xA[o"", """");
    timeSeries0.getValue((RegularTimePeriod) minute0);
    assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
}",0,
project,0,test097192,"public void test097192() throws Throwable {
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""");
    Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
    Minute minute0 = new Minute(date0);
    TimeSeries timeSeries0 = new TimeSeries(minute0, "".dj8CYsoz`2xA[o"", """");
    timeSeries0.getValue((RegularTimePeriod) minute0);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries0.getMaximumItemAge())"
project,0,test097193,"public void test097193() throws Throwable {
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""");
    Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
    Minute minute0 = new Minute(date0);
    TimeSeries timeSeries0 = new TimeSeries(minute0, "".dj8CYsoz`2xA[o"", """");
    timeSeries0.getValue((RegularTimePeriod) minute0);
    assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
}",0,
project,0,test097194,"public void test097194() throws Throwable {
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""");
    Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
    Minute minute0 = new Minute(date0);
    TimeSeries timeSeries0 = new TimeSeries(minute0, "".dj8CYsoz`2xA[o"", """");
    timeSeries0.getValue((RegularTimePeriod) minute0);
    assertEquals("".dj8CYsoz`2xA[o"", timeSeries0.getDomainDescription());
}",0,assertNotNull(timeSeries0.getDomainDescription())
project,0,test097195,"public void test097195() throws Throwable {
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""");
    Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
    Minute minute0 = new Minute(date0);
    TimeSeries timeSeries0 = new TimeSeries(minute0, "".dj8CYsoz`2xA[o"", """");
    timeSeries0.getValue((RegularTimePeriod) minute0);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries0.getMaximumItemCount())"
project,0,test097196,"public void test097196() throws Throwable {
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""");
    Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
    Minute minute0 = new Minute(date0);
    TimeSeries timeSeries0 = new TimeSeries(minute0, "".dj8CYsoz`2xA[o"", """");
    timeSeries0.getValue((RegularTimePeriod) minute0);
    assertEquals("""", timeSeries0.getRangeDescription());
}",0,assertNotNull(timeSeries0.getRangeDescription())
project,0,test098197,"public void test098197() throws Throwable {
    SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2922);
    Day day0 = new Day(spreadsheetDate0);
    TimeSeries timeSeries0 = new TimeSeries(day0, ""You are trying to add data where the time period class "", ""You are trying to add data where the time period class "");
    // Undeclared exception!
    try {
        timeSeries0.getRawDataItem((RegularTimePeriod) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'period' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}",0,
project,0,test099198,"public void test099198() throws Throwable {
    TimeSeries timeSeries0 = new TimeSeries("""");
    TimeSeries timeSeries1 = new TimeSeries("""");
    Year year0 = new Year((-367));
    Week week0 = new Week((-1645), year0);
    timeSeries1.add((RegularTimePeriod) week0, 2147.604);
    timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries1);
    assertEquals(1, timeSeries1.getItemCount());
}",0,"assertEquals(1, timeSeries1.getItemCount())"
project,0,test099199,"public void test099199() throws Throwable {
    TimeSeries timeSeries0 = new TimeSeries("""");
    TimeSeries timeSeries1 = new TimeSeries("""");
    Year year0 = new Year((-367));
    Week week0 = new Week((-1645), year0);
    timeSeries1.add((RegularTimePeriod) week0, 2147.604);
    timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries1);
    assertEquals(2147.604, timeSeries1.getMaxY(), 0.01);
}",0,
project,0,test100200,"public void test100200() throws Throwable {
    TimeSeries timeSeries0 = new TimeSeries("""");
    Year year0 = new Year((-367));
    Week week0 = new Week((-1645), year0);
    timeSeries0.add((RegularTimePeriod) week0, 2147.604);
    timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries0);
    assertEquals(1, timeSeries0.getItemCount());
}",0,"assertEquals(1, timeSeries0.getItemCount())"
project,0,test101201,"public void test101201() throws Throwable {
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
    Month month0 = new Month(date0);
    TimeSeries timeSeries0 = new TimeSeries(month0, """", ""1"");
    timeSeries0.addOrUpdate((RegularTimePeriod) month0, 1409.9202);
    timeSeries0.getTimePeriods();
    assertEquals(1, timeSeries0.getItemCount());
}",0,"assertEquals(1, timeSeries0.getItemCount())"
project,0,test102202,"public void test102202() throws Throwable {
    SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2922);
    Day day0 = new Day(spreadsheetDate0);
    TimeSeries timeSeries0 = new TimeSeries(day0, ""You are trying to add data where the time period class "", ""You are trying to add data where the time period class "");
    timeSeries0.add((RegularTimePeriod) day0, (double) 3, true);
    timeSeries0.getRawDataItem(day0);
    assertEquals(3.0, timeSeries0.getMinY(), 0.01);
}",0,
project,0,test103203,"public void test103203() throws Throwable {
    Year year0 = new Year();
    TimeSeries timeSeries0 = new TimeSeries(year0);
    Week week0 = new Week();
    timeSeries0.getRawDataItem(week0);
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}",0,assertNotNull(timeSeries0.getDomainDescription())
project,0,test103204,"public void test103204() throws Throwable {
    Year year0 = new Year();
    TimeSeries timeSeries0 = new TimeSeries(year0);
    Week week0 = new Week();
    timeSeries0.getRawDataItem(week0);
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}",0,assertNotNull(timeSeries0.getRangeDescription())
project,0,test103205,"public void test103205() throws Throwable {
    Year year0 = new Year();
    TimeSeries timeSeries0 = new TimeSeries(year0);
    Week week0 = new Week();
    timeSeries0.getRawDataItem(week0);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(1, timeSeries0.getMaximumItemAge())"
project,0,test103206,"public void test103206() throws Throwable {
    Year year0 = new Year();
    TimeSeries timeSeries0 = new TimeSeries(year0);
    Week week0 = new Week();
    timeSeries0.getRawDataItem(week0);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,
project,0,test103207,"public void test103207() throws Throwable {
    Year year0 = new Year();
    TimeSeries timeSeries0 = new TimeSeries(year0);
    Week week0 = new Week();
    timeSeries0.getRawDataItem(week0);
    assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
}",0,
project,0,test103208,"public void test103208() throws Throwable {
    Year year0 = new Year();
    TimeSeries timeSeries0 = new TimeSeries(year0);
    Week week0 = new Week();
    timeSeries0.getRawDataItem(week0);
    assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
}",0,
project,0,test104209,"public void test104209() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    timeSeries0.getDataItem((RegularTimePeriod) week0);
    assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
}",0,
project,0,test104210,"public void test104210() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    timeSeries0.getDataItem((RegularTimePeriod) week0);
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}",0,
project,0,test104211,"public void test104211() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    timeSeries0.getDataItem((RegularTimePeriod) week0);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(1, timeSeries0.getMaximumItemAge())"
project,0,test104212,"public void test104212() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    timeSeries0.getDataItem((RegularTimePeriod) week0);
    assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
}",0,
project,0,test104213,"public void test104213() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    timeSeries0.getDataItem((RegularTimePeriod) week0);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries0.getMaximumItemCount())"
project,0,test104214,"public void test104214() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    timeSeries0.getDataItem((RegularTimePeriod) week0);
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}",0,assertNotNull(timeSeries0.getRangeDescription())
project,0,test105215,"public void test105215() throws Throwable {
    Quarter quarter0 = new Quarter();
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."");
    // Undeclared exception!
    try {
        timeSeries0.setMaximumItemAge((-22L));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Negative 'periods' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}",0,
project,0,test106216,"public void test106216() throws Throwable {
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""");
    Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
    Minute minute0 = new Minute(date0);
    TimeSeries timeSeries0 = new TimeSeries(minute0, "".dj8CYsoz`2xA[o"", """");
    timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (Number) 23);
    assertEquals(1, timeSeries0.getItemCount());
}",0,"assertEquals(1, timeSeries0.getItemCount())"
project,0,test106217,"public void test106217() throws Throwable {
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""");
    Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
    Minute minute0 = new Minute(date0);
    TimeSeries timeSeries0 = new TimeSeries(minute0, "".dj8CYsoz`2xA[o"", """");
    timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (Number) 23);
    timeSeries0.setMaximumItemCount(0);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries0.getMaximumItemAge())"
project,0,test107218,"public void test107218() throws Throwable {
    SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-1493.806316114138), 1018.1621595563996, false, false);
    TimeSeries timeSeries0 = new TimeSeries(simpleHistogramBin0);
    // Undeclared exception!
    try {
        timeSeries0.setMaximumItemCount((-2429));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Negative 'maximum' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}",0,
project,0,test108219,"public void test108219() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0);
    timeSeries0.setMaximumItemCount(9999);
    assertEquals(9999, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(1, timeSeries0.getMaximumItemCount())"
project,0,test109220,"public void test109220() throws Throwable {
    Second second0 = new Second();
    TimeSeries timeSeries0 = new TimeSeries(second0);
    timeSeries0.add((RegularTimePeriod) second0, (Number) 59);
    double double0 = timeSeries0.getMinY();
    assertEquals(59.0, timeSeries0.getMaxY(), 0.01);
}",0,
project,0,test109221,"public void test109221() throws Throwable {
    Second second0 = new Second();
    TimeSeries timeSeries0 = new TimeSeries(second0);
    timeSeries0.add((RegularTimePeriod) second0, (Number) 59);
    double double0 = timeSeries0.getMinY();
    assertEquals(59.0, double0, 0.01);
}",0,
project,0,test110222,"public void test110222() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0);
    timeSeries0.add((RegularTimePeriod) hour0, (double) 23);
    Year year0 = new Year();
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, (Number) 23);
    // Undeclared exception!
    try {
        timeSeries0.add(timeSeriesDataItem0, false);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // You are trying to add data where the time period class is org.jfree.data.time.Year, but the TimeSeries is expecting an instance of org.jfree.data.time.Hour.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}",0,
project,0,test111223,"public void test111223() throws Throwable {
    Quarter quarter0 = new Quarter();
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."");
    TimeSeries timeSeries1 = (TimeSeries) timeSeries0.clone();
    timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (Number) 1);
    timeSeries1.addAndOrUpdate(timeSeries0);
    assertEquals(1, timeSeries0.getItemCount());
}",0,"assertEquals(1, timeSeries0.getItemCount())"
project,0,test111224,"public void test111224() throws Throwable {
    Quarter quarter0 = new Quarter();
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."");
    TimeSeries timeSeries1 = (TimeSeries) timeSeries0.clone();
    timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (Number) 1);
    timeSeries1.addAndOrUpdate(timeSeries0);
    assertTrue(timeSeries0.equals((Object) timeSeries1));
}",0,
project,0,test112225,"public void test112225() throws Throwable {
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
    Month month0 = new Month(date0);
    TimeSeries timeSeries0 = new TimeSeries(month0, """", ""1"");
    // Undeclared exception!
    try {
        timeSeries0.getNextTimePeriod();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test113226,"public void test113226() throws Throwable {
    Quarter quarter0 = new Quarter();
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."");
    timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (double) 4);
    timeSeries0.getDataItem((RegularTimePeriod) quarter0);
    assertEquals(1, timeSeries0.getItemCount());
}",0,"assertEquals(0, timeSeries0.getItemCount())"
project,0,test114227,"public void test114227() throws Throwable {
    Year year0 = new Year();
    TimeSeries timeSeries0 = new TimeSeries(year0);
    // Undeclared exception!
    try {
        timeSeries0.delete(0, 0);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 0, Size: 0
        //
        verifyException(""java.util.ArrayList"", e);
    }
}",1,
project,0,test115228,"public void test115228() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0);
    String string0 = timeSeries0.getDomainDescription();
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries0.getMaximumItemCount())"
project,0,test115229,"public void test115229() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0);
    String string0 = timeSeries0.getDomainDescription();
    assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
}",0,
project,0,test115230,"public void test115230() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0);
    String string0 = timeSeries0.getDomainDescription();
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}",0,
project,0,test115231,"public void test115231() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0);
    String string0 = timeSeries0.getDomainDescription();
    assertEquals(""Time"", string0);
}",0,
project,0,test115232,"public void test115232() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0);
    String string0 = timeSeries0.getDomainDescription();
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries0.getMaximumItemAge())"
project,0,test115233,"public void test115233() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0);
    String string0 = timeSeries0.getDomainDescription();
    assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
}",0,
project,0,test116234,"public void test116234() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0);
    String string0 = timeSeries0.getRangeDescription();
    assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
}",0,
project,0,test116235,"public void test116235() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0);
    String string0 = timeSeries0.getRangeDescription();
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries0.getMaximumItemCount())"
project,0,test116236,"public void test116236() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0);
    String string0 = timeSeries0.getRangeDescription();
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}",0,
project,0,test116237,"public void test116237() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0);
    String string0 = timeSeries0.getRangeDescription();
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries0.getMaximumItemAge())"
project,0,test116238,"public void test116238() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0);
    String string0 = timeSeries0.getRangeDescription();
    assertEquals(""Value"", string0);
}",0,
project,0,test116239,"public void test116239() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0);
    String string0 = timeSeries0.getRangeDescription();
    assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
}",0,
project,0,test117240,"public void test117240() throws Throwable {
    MockDate mockDate0 = new MockDate(1235, 400, 1235);
    OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1.0), (-1.0), (-1.0), (-2.147483648E9), 611.4873052);
    TimeSeries timeSeries0 = new TimeSeries(oHLCDataItem0, (String) null, ""JG#sgA$$!"");
    long long0 = timeSeries0.getMaximumItemAge();
    assertEquals(9223372036854775807L, long0);
}",0,"assertEquals(1, long0)"
project,0,test117241,"public void test117241() throws Throwable {
    MockDate mockDate0 = new MockDate(1235, 400, 1235);
    OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1.0), (-1.0), (-1.0), (-2.147483648E9), 611.4873052);
    TimeSeries timeSeries0 = new TimeSeries(oHLCDataItem0, (String) null, ""JG#sgA$$!"");
    long long0 = timeSeries0.getMaximumItemAge();
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries0.getMaximumItemCount())"
project,0,test117242,"public void test117242() throws Throwable {
    MockDate mockDate0 = new MockDate(1235, 400, 1235);
    OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1.0), (-1.0), (-1.0), (-2.147483648E9), 611.4873052);
    TimeSeries timeSeries0 = new TimeSeries(oHLCDataItem0, (String) null, ""JG#sgA$$!"");
    long long0 = timeSeries0.getMaximumItemAge();
    assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
}",0,
project,0,test117243,"public void test117243() throws Throwable {
    MockDate mockDate0 = new MockDate(1235, 400, 1235);
    OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1.0), (-1.0), (-1.0), (-2.147483648E9), 611.4873052);
    TimeSeries timeSeries0 = new TimeSeries(oHLCDataItem0, (String) null, ""JG#sgA$$!"");
    long long0 = timeSeries0.getMaximumItemAge();
    assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
}",0,
project,0,test117244,"public void test117244() throws Throwable {
    MockDate mockDate0 = new MockDate(1235, 400, 1235);
    OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1.0), (-1.0), (-1.0), (-2.147483648E9), 611.4873052);
    TimeSeries timeSeries0 = new TimeSeries(oHLCDataItem0, (String) null, ""JG#sgA$$!"");
    long long0 = timeSeries0.getMaximumItemAge();
    assertEquals(""JG#sgA$$!"", timeSeries0.getRangeDescription());
}",0,assertNotNull(timeSeries0.getRangeDescription())
project,0,test118245,"public void test118245() throws Throwable {
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""");
    Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
    Week week0 = new Week(date0);
    TimeSeries timeSeries0 = new TimeSeries(week0, """", ""There is no existing value for the specified 'period'."");
    assertEquals(""There is no existing value for the specified 'period'."", timeSeries0.getRangeDescription());
}",0,assertNotNull(timeSeries0.getRangeDescription())
project,0,test118246,"public void test118246() throws Throwable {
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""");
    Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
    Week week0 = new Week(date0);
    TimeSeries timeSeries0 = new TimeSeries(week0, """", ""There is no existing value for the specified 'period'."");
    timeSeries0.setRangeDescription("""");
    assertEquals("""", timeSeries0.getRangeDescription());
}",0,assertNotNull(timeSeries0.getRangeDescription())
project,0,test119247,"public void test119247() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0);
    // Undeclared exception!
    try {
        timeSeries0.getValue(0);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 0, Size: 0
        //
        verifyException(""java.util.ArrayList"", e);
    }
}",0,
project,0,test120248,"public void test120248() throws Throwable {
    Year year0 = new Year();
    TimeSeries timeSeries0 = new TimeSeries(year0);
    // Undeclared exception!
    try {
        timeSeries0.getTimePeriod((-1605));
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test121249,"public void test121249() throws Throwable {
    Year year0 = new Year();
    TimeSeries timeSeries0 = new TimeSeries(year0);
    timeSeries0.getTimePeriodClass();
    assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
}",0,
project,0,test121250,"public void test121250() throws Throwable {
    Year year0 = new Year();
    TimeSeries timeSeries0 = new TimeSeries(year0);
    timeSeries0.getTimePeriodClass();
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries0.getMaximumItemCount())"
project,0,test121251,"public void test121251() throws Throwable {
    Year year0 = new Year();
    TimeSeries timeSeries0 = new TimeSeries(year0);
    timeSeries0.getTimePeriodClass();
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}",0,
project,0,test121252,"public void test121252() throws Throwable {
    Year year0 = new Year();
    TimeSeries timeSeries0 = new TimeSeries(year0);
    timeSeries0.getTimePeriodClass();
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries0.getMaximumItemAge())"
project,0,test121253,"public void test121253() throws Throwable {
    Year year0 = new Year();
    TimeSeries timeSeries0 = new TimeSeries(year0);
    timeSeries0.getTimePeriodClass();
    assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
}",0,
project,0,test121254,"public void test121254() throws Throwable {
    Year year0 = new Year();
    TimeSeries timeSeries0 = new TimeSeries(year0);
    timeSeries0.getTimePeriodClass();
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}",0,
project,0,test122255,"public void test122255() throws Throwable {
    TimeSeries timeSeries0 = new TimeSeries(""You are trying to add data where the time period class "", """", """");
    timeSeries0.getItems();
    assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
}",0,
project,0,test122256,"public void test122256() throws Throwable {
    TimeSeries timeSeries0 = new TimeSeries(""You are trying to add data where the time period class "", """", """");
    timeSeries0.getItems();
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries0.getMaximumItemCount())"
project,0,test122257,"public void test122257() throws Throwable {
    TimeSeries timeSeries0 = new TimeSeries(""You are trying to add data where the time period class "", """", """");
    timeSeries0.getItems();
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries0.getMaximumItemAge())"
project,0,test122258,"public void test122258() throws Throwable {
    TimeSeries timeSeries0 = new TimeSeries(""You are trying to add data where the time period class "", """", """");
    timeSeries0.getItems();
    assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
}",0,
project,0,test122259,"public void test122259() throws Throwable {
    TimeSeries timeSeries0 = new TimeSeries(""You are trying to add data where the time period class "", """", """");
    timeSeries0.getItems();
    assertEquals("""", timeSeries0.getDomainDescription());
}",0,assertNotNull(timeSeries0.getDomainDescription())
project,0,test122260,"public void test122260() throws Throwable {
    TimeSeries timeSeries0 = new TimeSeries(""You are trying to add data where the time period class "", """", """");
    timeSeries0.getItems();
    assertEquals("""", timeSeries0.getRangeDescription());
}",0,assertNotNull(timeSeries0.getRangeDescription())
project,0,test123261,"public void test123261() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0);
    int int0 = timeSeries0.getMaximumItemCount();
    assertEquals(Integer.MAX_VALUE, int0);
}",0,
project,0,test123262,"public void test123262() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0);
    int int0 = timeSeries0.getMaximumItemCount();
    assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
}",0,
project,0,test123263,"public void test123263() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0);
    int int0 = timeSeries0.getMaximumItemCount();
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(1, timeSeries0.getMaximumItemAge())"
project,0,test123264,"public void test123264() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0);
    int int0 = timeSeries0.getMaximumItemCount();
    assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
}",0,
project,0,test123265,"public void test123265() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0);
    int int0 = timeSeries0.getMaximumItemCount();
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}",0,
project,0,test123266,"public void test123266() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0);
    int int0 = timeSeries0.getMaximumItemCount();
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}",0,
project,0,test124267,"public void test124267() throws Throwable {
    Year year0 = new Year();
    TimeSeries timeSeries0 = new TimeSeries(year0);
    timeSeries0.add((RegularTimePeriod) year0, (Number) (-9999), true);
    timeSeries0.createCopy((RegularTimePeriod) year0, (RegularTimePeriod) year0);
    assertEquals(1, timeSeries0.getItemCount());
}",0,"assertEquals(1, timeSeries0.getItemCount())"
project,0,test125268,"public void test125268() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0, ""_`S'h$**a[mm`MON"", ""c;AL6dg1"");
    timeSeries0.setDomainDescription(""_`S'h$**a[mm`MON"");
    assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
}",0,
project,0,test125269,"public void test125269() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0, ""_`S'h$**a[mm`MON"", ""c;AL6dg1"");
    timeSeries0.setDomainDescription(""_`S'h$**a[mm`MON"");
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries0.getMaximumItemCount())"
project,0,test125270,"public void test125270() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0, ""_`S'h$**a[mm`MON"", ""c;AL6dg1"");
    timeSeries0.setDomainDescription(""_`S'h$**a[mm`MON"");
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries0.getMaximumItemAge())"
project,0,test125271,"public void test125271() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0, ""_`S'h$**a[mm`MON"", ""c;AL6dg1"");
    timeSeries0.setDomainDescription(""_`S'h$**a[mm`MON"");
    assertEquals(""_`S'h$**a[mm`MON"", timeSeries0.getDomainDescription());
}",0,assertNotNull(timeSeries0.getDomainDescription())
project,0,test125272,"public void test125272() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0, ""_`S'h$**a[mm`MON"", ""c;AL6dg1"");
    timeSeries0.setDomainDescription(""_`S'h$**a[mm`MON"");
    assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
}",0,
project,0,test125273,"public void test125273() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0, ""_`S'h$**a[mm`MON"", ""c;AL6dg1"");
    timeSeries0.setDomainDescription(""_`S'h$**a[mm`MON"");
    assertEquals(""c;AL6dg1"", timeSeries0.getRangeDescription());
}",0,assertNotNull(timeSeries0.getRangeDescription())
