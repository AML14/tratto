focal_method,test_prefix,docstring
"public int getItemCount() {
    return this.data.size();
}","public void test0000() throws Throwable {
    Week week0 = new Week((-1), (-1));
    RegularTimePeriod regularTimePeriod0 = week0.previous();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    timeSeries0.add(regularTimePeriod0, (double) (-9999), true);
    timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 1);
    assertEquals(2, timeSeries0.getItemCount());
}","/**
 * Returns the number of items in the series.
 *
 * @return The item count.
 */"
"public double getMinY() {
    return this.minY;
}","public void test0011() throws Throwable {
    Minute minute0 = new Minute();
    Day day0 = minute0.getDay();
    TimeSeries timeSeries0 = new TimeSeries(day0, ""?*hGzK"", ""?*hGzK"");
    timeSeries0.hashCode();
    assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
}","/**
 * Returns the smallest y-value in the series, ignoring any null and
 * Double.NaN values.  This method returns Double.NaN if there is no
 * smallest y-value (for example, when the series is empty).
 *
 * @return The smallest y-value.
 *
 * @see #getMaxY()
 *
 * @since 1.0.14
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test0012() throws Throwable {
    Minute minute0 = new Minute();
    Day day0 = minute0.getDay();
    TimeSeries timeSeries0 = new TimeSeries(day0, ""?*hGzK"", ""?*hGzK"");
    timeSeries0.hashCode();
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test0013() throws Throwable {
    Minute minute0 = new Minute();
    Day day0 = minute0.getDay();
    TimeSeries timeSeries0 = new TimeSeries(day0, ""?*hGzK"", ""?*hGzK"");
    timeSeries0.hashCode();
    assertEquals(""?*hGzK"", timeSeries0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public double getMaxY() {
    return this.maxY;
}","public void test0014() throws Throwable {
    Minute minute0 = new Minute();
    Day day0 = minute0.getDay();
    TimeSeries timeSeries0 = new TimeSeries(day0, ""?*hGzK"", ""?*hGzK"");
    timeSeries0.hashCode();
    assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
}","/**
 * Returns the largest y-value in the series, ignoring any Double.NaN
 * values.  This method returns Double.NaN if there is no largest y-value
 * (for example, when the series is empty).
 *
 * @return The largest y-value.
 *
 * @see #getMinY()
 *
 * @since 1.0.14
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test0015() throws Throwable {
    Minute minute0 = new Minute();
    Day day0 = minute0.getDay();
    TimeSeries timeSeries0 = new TimeSeries(day0, ""?*hGzK"", ""?*hGzK"");
    timeSeries0.hashCode();
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test0016() throws Throwable {
    Minute minute0 = new Minute();
    Day day0 = minute0.getDay();
    TimeSeries timeSeries0 = new TimeSeries(day0, ""?*hGzK"", ""?*hGzK"");
    timeSeries0.hashCode();
    assertEquals(""?*hGzK"", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public double getMinY() {
    return this.minY;
}","public void test0027() throws Throwable {
    TimeSeries timeSeries0 = new TimeSeries("""", ""Null 'end' argument."", ""Uba"");
    Year year0 = new Year((-3032));
    RegularTimePeriod regularTimePeriod0 = year0.previous();
    TimeSeries timeSeries1 = timeSeries0.createCopy(regularTimePeriod0, (RegularTimePeriod) year0);
    assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
}","/**
 * Returns the smallest y-value in the series, ignoring any null and
 * Double.NaN values.  This method returns Double.NaN if there is no
 * smallest y-value (for example, when the series is empty).
 *
 * @return The smallest y-value.
 *
 * @see #getMaxY()
 *
 * @since 1.0.14
 */"
"public double getMaxY() {
    return this.maxY;
}","public void test0028() throws Throwable {
    TimeSeries timeSeries0 = new TimeSeries("""", ""Null 'end' argument."", ""Uba"");
    Year year0 = new Year((-3032));
    RegularTimePeriod regularTimePeriod0 = year0.previous();
    TimeSeries timeSeries1 = timeSeries0.createCopy(regularTimePeriod0, (RegularTimePeriod) year0);
    assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
}","/**
 * Returns the largest y-value in the series, ignoring any Double.NaN
 * values.  This method returns Double.NaN if there is no largest y-value
 * (for example, when the series is empty).
 *
 * @return The largest y-value.
 *
 * @see #getMinY()
 *
 * @since 1.0.14
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test0029() throws Throwable {
    TimeSeries timeSeries0 = new TimeSeries("""", ""Null 'end' argument."", ""Uba"");
    Year year0 = new Year((-3032));
    RegularTimePeriod regularTimePeriod0 = year0.previous();
    TimeSeries timeSeries1 = timeSeries0.createCopy(regularTimePeriod0, (RegularTimePeriod) year0);
    assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test00210() throws Throwable {
    TimeSeries timeSeries0 = new TimeSeries("""", ""Null 'end' argument."", ""Uba"");
    Year year0 = new Year((-3032));
    RegularTimePeriod regularTimePeriod0 = year0.previous();
    TimeSeries timeSeries1 = timeSeries0.createCopy(regularTimePeriod0, (RegularTimePeriod) year0);
    assertEquals(""Uba"", timeSeries1.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test00211() throws Throwable {
    TimeSeries timeSeries0 = new TimeSeries("""", ""Null 'end' argument."", ""Uba"");
    Year year0 = new Year((-3032));
    RegularTimePeriod regularTimePeriod0 = year0.previous();
    TimeSeries timeSeries1 = timeSeries0.createCopy(regularTimePeriod0, (RegularTimePeriod) year0);
    assertEquals(""Null 'end' argument."", timeSeries1.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test00212() throws Throwable {
    TimeSeries timeSeries0 = new TimeSeries("""", ""Null 'end' argument."", ""Uba"");
    Year year0 = new Year((-3032));
    RegularTimePeriod regularTimePeriod0 = year0.previous();
    TimeSeries timeSeries1 = timeSeries0.createCopy(regularTimePeriod0, (RegularTimePeriod) year0);
    assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public TimeSeries createCopy(int start, int end) throws CloneNotSupportedException {
    if (start < 0) {
        throw new IllegalArgumentException(""Requires start >= 0."");
    }
    if (end < start) {
        throw new IllegalArgumentException(""Requires start <= end."");
    }
    TimeSeries copy = (TimeSeries) super.clone();
    copy.data = new java.util.ArrayList();
    if (this.data.size() > 0) {
        for (int index = start; index <= end; index++) {
            TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(index);
            TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();
            try {
                copy.add(clone);
            } catch (SeriesException e) {
                e.printStackTrace();
            }
        }
    }
    return copy;
}","public void test00313() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    timeSeries0.add((RegularTimePeriod) week0, (-481.5), false);
    // Undeclared exception!
    try {
        timeSeries0.createCopy(0, 23);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 1, Size: 1
        //
        verifyException(""java.util.ArrayList"", e);
    }
}","/**
 * Creates a new timeseries by copying a subset of the data in this time
 * series.
 *
 * @param start  the index of the first time period to copy.
 * @param end  the index of the last time period to copy.
 *
 * @return A series containing a copy of this times series from start until
 *         end.
 *
 * @throws CloneNotSupportedException if there is a cloning problem.
 */"
"public int getItemCount() {
    return this.data.size();
}","public void test00414() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    timeSeries0.add((RegularTimePeriod) week0, (Number) 1, true);
    timeSeries0.setMaximumItemAge(1);
    RegularTimePeriod regularTimePeriod0 = week0.next();
    timeSeries0.add(regularTimePeriod0, (Number) 1, true);
    assertEquals(2, timeSeries0.getItemCount());
}","/**
 * Returns the number of items in the series.
 *
 * @return The item count.
 */"
"public int getItemCount() {
    return this.data.size();
}","public void test00515() throws Throwable {
    Year year0 = new Year();
    TimeSeries timeSeries0 = new TimeSeries(year0);
    timeSeries0.add((RegularTimePeriod) year0, (Number) (-9999), true);
    timeSeries0.delete(0, 0);
    assertEquals(0, timeSeries0.getItemCount());
}","/**
 * Returns the number of items in the series.
 *
 * @return The item count.
 */"
"public double getMinY() {
    return this.minY;
}","public void test00616() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0);
    timeSeries0.add((RegularTimePeriod) hour0, (double) 23);
    Year year0 = new Year();
    timeSeries0.getValue((RegularTimePeriod) year0);
    assertEquals(23.0, timeSeries0.getMinY(), 0.01);
}","/**
 * Returns the smallest y-value in the series, ignoring any null and
 * Double.NaN values.  This method returns Double.NaN if there is no
 * smallest y-value (for example, when the series is empty).
 *
 * @return The smallest y-value.
 *
 * @see #getMaxY()
 *
 * @since 1.0.14
 */"
"public double getMinY() {
    return this.minY;
}","public void test00717() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0);
    Year year0 = new Year();
    timeSeries0.add((RegularTimePeriod) hour0, (Number) year0.MINIMUM_YEAR, false);
    timeSeries0.getValue((RegularTimePeriod) year0);
    assertEquals((-9999.0), timeSeries0.getMinY(), 0.01);
}","/**
 * Returns the smallest y-value in the series, ignoring any null and
 * Double.NaN values.  This method returns Double.NaN if there is no
 * smallest y-value (for example, when the series is empty).
 *
 * @return The smallest y-value.
 *
 * @see #getMaxY()
 *
 * @since 1.0.14
 */"
"public double getMaxY() {
    return this.maxY;
}","public void test00818() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0);
    timeSeries0.add((RegularTimePeriod) hour0, (double) 23);
    timeSeries0.getValue(0);
    assertEquals(23.0, timeSeries0.getMaxY(), 0.01);
}","/**
 * Returns the largest y-value in the series, ignoring any Double.NaN
 * values.  This method returns Double.NaN if there is no largest y-value
 * (for example, when the series is empty).
 *
 * @return The largest y-value.
 *
 * @see #getMinY()
 *
 * @since 1.0.14
 */"
"public double getMinY() {
    return this.minY;
}","public void test00919() throws Throwable {
    Minute minute0 = new Minute();
    TimeSeries timeSeries0 = new TimeSeries(minute0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 59);
    timeSeries0.add(timeSeriesDataItem0);
    timeSeries0.getTimePeriodClass();
    assertEquals(59.0, timeSeries0.getMinY(), 0.01);
}","/**
 * Returns the smallest y-value in the series, ignoring any null and
 * Double.NaN values.  This method returns Double.NaN if there is no
 * smallest y-value (for example, when the series is empty).
 *
 * @return The smallest y-value.
 *
 * @see #getMaxY()
 *
 * @since 1.0.14
 */"
"public double getMaxY() {
    return this.maxY;
}","public void test01020() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0);
    timeSeries0.add((RegularTimePeriod) hour0, (double) 23);
    timeSeries0.getTimePeriod(0);
    assertEquals(23.0, timeSeries0.getMaxY(), 0.01);
}","/**
 * Returns the largest y-value in the series, ignoring any Double.NaN
 * values.  This method returns Double.NaN if there is no largest y-value
 * (for example, when the series is empty).
 *
 * @return The largest y-value.
 *
 * @see #getMinY()
 *
 * @since 1.0.14
 */"
"public double getMinY() {
    return this.minY;
}","public void test01121() throws Throwable {
    Year year0 = new Year();
    TimeSeries timeSeries0 = new TimeSeries(year0);
    timeSeries0.add((RegularTimePeriod) year0, (Number) (-9999), true);
    timeSeries0.getRawDataItem(0);
    assertEquals((-9999.0), timeSeries0.getMinY(), 0.01);
}","/**
 * Returns the smallest y-value in the series, ignoring any null and
 * Double.NaN values.  This method returns Double.NaN if there is no
 * smallest y-value (for example, when the series is empty).
 *
 * @return The smallest y-value.
 *
 * @see #getMaxY()
 *
 * @since 1.0.14
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test01222() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0, """", """");
    String string0 = timeSeries0.getRangeDescription();
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public double getMinY() {
    return this.minY;
}","public void test01223() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0, """", """");
    String string0 = timeSeries0.getRangeDescription();
    assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
}","/**
 * Returns the smallest y-value in the series, ignoring any null and
 * Double.NaN values.  This method returns Double.NaN if there is no
 * smallest y-value (for example, when the series is empty).
 *
 * @return The smallest y-value.
 *
 * @see #getMaxY()
 *
 * @since 1.0.14
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test01224() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0, """", """");
    String string0 = timeSeries0.getRangeDescription();
    assertEquals("""", string0);
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test01225() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0, """", """");
    String string0 = timeSeries0.getRangeDescription();
    assertEquals("""", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test01226() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0, """", """");
    String string0 = timeSeries0.getRangeDescription();
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public double getMaxY() {
    return this.maxY;
}","public void test01227() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0, """", """");
    String string0 = timeSeries0.getRangeDescription();
    assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
}","/**
 * Returns the largest y-value in the series, ignoring any Double.NaN
 * values.  This method returns Double.NaN if there is no largest y-value
 * (for example, when the series is empty).
 *
 * @return The largest y-value.
 *
 * @see #getMinY()
 *
 * @since 1.0.14
 */"
"public double getMaxY() {
    return this.maxY;
}","public void test01328() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0);
    Year year0 = new Year();
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, (Number) 23);
    timeSeries0.add(timeSeriesDataItem0, true);
    timeSeries0.getNextTimePeriod();
    assertEquals(23.0, timeSeries0.getMaxY(), 0.01);
}","/**
 * Returns the largest y-value in the series, ignoring any Double.NaN
 * values.  This method returns Double.NaN if there is no largest y-value
 * (for example, when the series is empty).
 *
 * @return The largest y-value.
 *
 * @see #getMinY()
 *
 * @since 1.0.14
 */"
"public double getMinY() {
    return this.minY;
}","public void test01429() throws Throwable {
    Year year0 = new Year();
    TimeSeries timeSeries0 = new TimeSeries(year0);
    timeSeries0.add((RegularTimePeriod) year0, (Number) (-9999), true);
    double double0 = timeSeries0.getMinY();
    assertEquals((-9999.0), double0, 0.01);
}","/**
 * Returns the smallest y-value in the series, ignoring any null and
 * Double.NaN values.  This method returns Double.NaN if there is no
 * smallest y-value (for example, when the series is empty).
 *
 * @return The smallest y-value.
 *
 * @see #getMaxY()
 *
 * @since 1.0.14
 */"
"public double getMinY() {
    return this.minY;
}","public void test01530() throws Throwable {
    Month month0 = new Month();
    Year year0 = month0.getYear();
    TimeSeries timeSeries0 = new TimeSeries(month0);
    timeSeries0.add((RegularTimePeriod) year0, (Number) 9999);
    double double0 = timeSeries0.getMaxY();
    assertEquals(9999.0, timeSeries0.getMinY(), 0.01);
}","/**
 * Returns the smallest y-value in the series, ignoring any null and
 * Double.NaN values.  This method returns Double.NaN if there is no
 * smallest y-value (for example, when the series is empty).
 *
 * @return The smallest y-value.
 *
 * @see #getMaxY()
 *
 * @since 1.0.14
 */"
"public double getMaxY() {
    return this.maxY;
}","public void test01531() throws Throwable {
    Month month0 = new Month();
    Year year0 = month0.getYear();
    TimeSeries timeSeries0 = new TimeSeries(month0);
    timeSeries0.add((RegularTimePeriod) year0, (Number) 9999);
    double double0 = timeSeries0.getMaxY();
    assertEquals(9999.0, double0, 0.01);
}","/**
 * Returns the largest y-value in the series, ignoring any Double.NaN
 * values.  This method returns Double.NaN if there is no largest y-value
 * (for example, when the series is empty).
 *
 * @return The largest y-value.
 *
 * @see #getMinY()
 *
 * @since 1.0.14
 */"
"public double getMaxY() {
    return this.maxY;
}","public void test01632() throws Throwable {
    MockDate mockDate0 = new MockDate((-1864), (-1864), (-1864), 1624, 1438);
    Year year0 = new Year(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(year0);
    timeSeries0.add((RegularTimePeriod) year0, (Number) (-9999), true);
    double double0 = timeSeries0.getMaxY();
    assertEquals((-9999.0), double0, 0.01);
}","/**
 * Returns the largest y-value in the series, ignoring any Double.NaN
 * values.  This method returns Double.NaN if there is no largest y-value
 * (for example, when the series is empty).
 *
 * @return The largest y-value.
 *
 * @see #getMinY()
 *
 * @since 1.0.14
 */"
"public double getMaxY() {
    return this.maxY;
}","public void test01733() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0);
    timeSeries0.add((RegularTimePeriod) hour0, (double) 23);
    timeSeries0.getItemCount();
    assertEquals(23.0, timeSeries0.getMaxY(), 0.01);
}","/**
 * Returns the largest y-value in the series, ignoring any Double.NaN
 * values.  This method returns Double.NaN if there is no largest y-value
 * (for example, when the series is empty).
 *
 * @return The largest y-value.
 *
 * @see #getMinY()
 *
 * @since 1.0.14
 */"
"public double getMaxY() {
    return this.maxY;
}","public void test01834() throws Throwable {
    Month month0 = new Month();
    Year year0 = month0.getYear();
    TimeSeries timeSeries0 = new TimeSeries(month0);
    timeSeries0.add((RegularTimePeriod) year0, (Number) 9999);
    timeSeries0.getIndex(year0);
    assertEquals(9999.0, timeSeries0.getMaxY(), 0.01);
}","/**
 * Returns the largest y-value in the series, ignoring any Double.NaN
 * values.  This method returns Double.NaN if there is no largest y-value
 * (for example, when the series is empty).
 *
 * @return The largest y-value.
 *
 * @see #getMinY()
 *
 * @since 1.0.14
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test01935() throws Throwable {
    Quarter quarter0 = new Quarter();
    TimeSeries timeSeries0 = new TimeSeries(quarter0, """", ""ivRI\""ZU=bKWicOn"");
    String string0 = timeSeries0.getDomainDescription();
    assertEquals(""ivRI\""ZU=bKWicOn"", timeSeries0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test01936() throws Throwable {
    Quarter quarter0 = new Quarter();
    TimeSeries timeSeries0 = new TimeSeries(quarter0, """", ""ivRI\""ZU=bKWicOn"");
    String string0 = timeSeries0.getDomainDescription();
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public double getMinY() {
    return this.minY;
}","public void test01937() throws Throwable {
    Quarter quarter0 = new Quarter();
    TimeSeries timeSeries0 = new TimeSeries(quarter0, """", ""ivRI\""ZU=bKWicOn"");
    String string0 = timeSeries0.getDomainDescription();
    assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
}","/**
 * Returns the smallest y-value in the series, ignoring any null and
 * Double.NaN values.  This method returns Double.NaN if there is no
 * smallest y-value (for example, when the series is empty).
 *
 * @return The smallest y-value.
 *
 * @see #getMaxY()
 *
 * @since 1.0.14
 */"
"public double getMaxY() {
    return this.maxY;
}","public void test01938() throws Throwable {
    Quarter quarter0 = new Quarter();
    TimeSeries timeSeries0 = new TimeSeries(quarter0, """", ""ivRI\""ZU=bKWicOn"");
    String string0 = timeSeries0.getDomainDescription();
    assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
}","/**
 * Returns the largest y-value in the series, ignoring any Double.NaN
 * values.  This method returns Double.NaN if there is no largest y-value
 * (for example, when the series is empty).
 *
 * @return The largest y-value.
 *
 * @see #getMinY()
 *
 * @since 1.0.14
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test01939() throws Throwable {
    Quarter quarter0 = new Quarter();
    TimeSeries timeSeries0 = new TimeSeries(quarter0, """", ""ivRI\""ZU=bKWicOn"");
    String string0 = timeSeries0.getDomainDescription();
    assertEquals("""", string0);
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test01940() throws Throwable {
    Quarter quarter0 = new Quarter();
    TimeSeries timeSeries0 = new TimeSeries(quarter0, """", ""ivRI\""ZU=bKWicOn"");
    String string0 = timeSeries0.getDomainDescription();
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public double getMinY() {
    return this.minY;
}","public void test02041() throws Throwable {
    Year year0 = new Year();
    TimeSeries timeSeries0 = new TimeSeries(year0);
    timeSeries0.add((RegularTimePeriod) year0, (Number) (-9999), true);
    timeSeries0.getDataItem(0);
    assertEquals((-9999.0), timeSeries0.getMinY(), 0.01);
}","/**
 * Returns the smallest y-value in the series, ignoring any null and
 * Double.NaN values.  This method returns Double.NaN if there is no
 * smallest y-value (for example, when the series is empty).
 *
 * @return The smallest y-value.
 *
 * @see #getMaxY()
 *
 * @since 1.0.14
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test02142() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0, """", """");
    timeSeries0.setNotify(false);
    TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) day0, (RegularTimePeriod) day0);
    assertEquals("""", timeSeries1.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public double getMaxY() {
    return this.maxY;
}","public void test02143() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0, """", """");
    timeSeries0.setNotify(false);
    TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) day0, (RegularTimePeriod) day0);
    assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
}","/**
 * Returns the largest y-value in the series, ignoring any Double.NaN
 * values.  This method returns Double.NaN if there is no largest y-value
 * (for example, when the series is empty).
 *
 * @return The largest y-value.
 *
 * @see #getMinY()
 *
 * @since 1.0.14
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test02144() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0, """", """");
    timeSeries0.setNotify(false);
    TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) day0, (RegularTimePeriod) day0);
    assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test02145() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0, """", """");
    timeSeries0.setNotify(false);
    TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) day0, (RegularTimePeriod) day0);
    assertEquals("""", timeSeries1.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public double getMinY() {
    return this.minY;
}","public void test02146() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0, """", """");
    timeSeries0.setNotify(false);
    TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) day0, (RegularTimePeriod) day0);
    assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
}","/**
 * Returns the smallest y-value in the series, ignoring any null and
 * Double.NaN values.  This method returns Double.NaN if there is no
 * smallest y-value (for example, when the series is empty).
 *
 * @return The smallest y-value.
 *
 * @see #getMaxY()
 *
 * @since 1.0.14
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test02147() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0, """", """");
    timeSeries0.setNotify(false);
    TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) day0, (RegularTimePeriod) day0);
    assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test02248() throws Throwable {
    Quarter quarter0 = new Quarter();
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."");
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public double getMaxY() {
    return this.maxY;
}","public void test02249() throws Throwable {
    Quarter quarter0 = new Quarter();
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."");
    timeSeries0.setMaximumItemAge(0L);
    timeSeries0.createCopy((RegularTimePeriod) quarter0, (RegularTimePeriod) quarter0);
    assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
}","/**
 * Returns the largest y-value in the series, ignoring any Double.NaN
 * values.  This method returns Double.NaN if there is no largest y-value
 * (for example, when the series is empty).
 *
 * @return The largest y-value.
 *
 * @see #getMinY()
 *
 * @since 1.0.14
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test02350() throws Throwable {
    Quarter quarter0 = new Quarter();
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."");
    timeSeries0.setNotify(false);
    TimeSeries timeSeries1 = timeSeries0.createCopy(1, Integer.MAX_VALUE);
    assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public TimeSeries createCopy(int start, int end) throws CloneNotSupportedException {
    if (start < 0) {
        throw new IllegalArgumentException(""Requires start >= 0."");
    }
    if (end < start) {
        throw new IllegalArgumentException(""Requires start <= end."");
    }
    TimeSeries copy = (TimeSeries) super.clone();
    copy.data = new java.util.ArrayList();
    if (this.data.size() > 0) {
        for (int index = start; index <= end; index++) {
            TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(index);
            TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();
            try {
                copy.add(clone);
            } catch (SeriesException e) {
                e.printStackTrace();
            }
        }
    }
    return copy;
}","public void test02351() throws Throwable {
    Quarter quarter0 = new Quarter();
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."");
    timeSeries0.setNotify(false);
    TimeSeries timeSeries1 = timeSeries0.createCopy(1, Integer.MAX_VALUE);
    assertNotSame(timeSeries1, timeSeries0);
}","/**
 * Creates a new timeseries by copying a subset of the data in this time
 * series.
 *
 * @param start  the index of the first time period to copy.
 * @param end  the index of the last time period to copy.
 *
 * @return A series containing a copy of this times series from start until
 *         end.
 *
 * @throws CloneNotSupportedException if there is a cloning problem.
 */"
"public double getMinY() {
    return this.minY;
}","public void test02352() throws Throwable {
    Quarter quarter0 = new Quarter();
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."");
    timeSeries0.setNotify(false);
    TimeSeries timeSeries1 = timeSeries0.createCopy(1, Integer.MAX_VALUE);
    assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
}","/**
 * Returns the smallest y-value in the series, ignoring any null and
 * Double.NaN values.  This method returns Double.NaN if there is no
 * smallest y-value (for example, when the series is empty).
 *
 * @return The smallest y-value.
 *
 * @see #getMaxY()
 *
 * @since 1.0.14
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test02353() throws Throwable {
    Quarter quarter0 = new Quarter();
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."");
    timeSeries0.setNotify(false);
    TimeSeries timeSeries1 = timeSeries0.createCopy(1, Integer.MAX_VALUE);
    assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test02354() throws Throwable {
    Quarter quarter0 = new Quarter();
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."");
    timeSeries0.setNotify(false);
    TimeSeries timeSeries1 = timeSeries0.createCopy(1, Integer.MAX_VALUE);
    assertEquals(""Null 'seriesKeys' argument."", timeSeries1.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public double getMaxY() {
    return this.maxY;
}","public void test02355() throws Throwable {
    Quarter quarter0 = new Quarter();
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."");
    timeSeries0.setNotify(false);
    TimeSeries timeSeries1 = timeSeries0.createCopy(1, Integer.MAX_VALUE);
    assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
}","/**
 * Returns the largest y-value in the series, ignoring any Double.NaN
 * values.  This method returns Double.NaN if there is no largest y-value
 * (for example, when the series is empty).
 *
 * @return The largest y-value.
 *
 * @see #getMinY()
 *
 * @since 1.0.14
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test02356() throws Throwable {
    Quarter quarter0 = new Quarter();
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."");
    timeSeries0.setNotify(false);
    TimeSeries timeSeries1 = timeSeries0.createCopy(1, Integer.MAX_VALUE);
    assertEquals(""Null 'seriesKeys' argument."", timeSeries1.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test02458() throws Throwable {
    Quarter quarter0 = new Quarter();
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."");
    timeSeries0.setMaximumItemAge(0L);
    timeSeries0.createCopy(1, Integer.MAX_VALUE);
    assertEquals(""Null 'seriesKeys' argument."", timeSeries0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public double getMaxY() {
    return this.maxY;
}","public void test02559() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0);
    Year year0 = new Year();
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, (Number) 23);
    timeSeriesDataItem0.setSelected(true);
    timeSeries0.add(timeSeriesDataItem0, true);
    timeSeries0.addOrUpdate(timeSeriesDataItem0);
    assertEquals(23.0, timeSeries0.getMaxY(), 0.01);
}","/**
 * Returns the largest y-value in the series, ignoring any Double.NaN
 * values.  This method returns Double.NaN if there is no largest y-value
 * (for example, when the series is empty).
 *
 * @return The largest y-value.
 *
 * @see #getMinY()
 *
 * @since 1.0.14
 */"
"public double getMaxY() {
    return this.maxY;
}","public void test02660() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0);
    Year year0 = new Year();
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, (Number) 23);
    timeSeriesDataItem0.setSelected(true);
    timeSeries0.add(timeSeriesDataItem0, true);
    timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) 0);
    assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
}","/**
 * Returns the largest y-value in the series, ignoring any Double.NaN
 * values.  This method returns Double.NaN if there is no largest y-value
 * (for example, when the series is empty).
 *
 * @return The largest y-value.
 *
 * @see #getMinY()
 *
 * @since 1.0.14
 */"
"public double getMinY() {
    return this.minY;
}","public void test02761() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    timeSeries0.add((RegularTimePeriod) week0, (-481.5), false);
    timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 53);
    assertEquals(53.0, timeSeries0.getMinY(), 0.01);
}","/**
 * Returns the smallest y-value in the series, ignoring any null and
 * Double.NaN values.  This method returns Double.NaN if there is no
 * smallest y-value (for example, when the series is empty).
 *
 * @return The smallest y-value.
 *
 * @see #getMaxY()
 *
 * @since 1.0.14
 */"
"public double getMinY() {
    return this.minY;
}","public void test02862() throws Throwable {
    Year year0 = new Year();
    TimeSeries timeSeries0 = new TimeSeries(year0);
    timeSeries0.add((RegularTimePeriod) year0, (Number) (-9999), true);
    timeSeries0.addOrUpdate((RegularTimePeriod) year0, (double) 9999);
    assertEquals(9999.0, timeSeries0.getMinY(), 0.01);
}","/**
 * Returns the smallest y-value in the series, ignoring any null and
 * Double.NaN values.  This method returns Double.NaN if there is no
 * smallest y-value (for example, when the series is empty).
 *
 * @return The smallest y-value.
 *
 * @see #getMaxY()
 *
 * @since 1.0.14
 */"
"public void update(RegularTimePeriod period, Number value) {
    TimeSeriesDataItem temp = new TimeSeriesDataItem(period, value);
    int index = Collections.binarySearch(this.data, temp);
    if (index < 0) {
        throw new SeriesException(""There is no existing value for the "" + ""specified 'period'."");
    }
    update(index, value);
}","public void test02963() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    // Undeclared exception!
    try {
        timeSeries0.update((RegularTimePeriod) null, (Number) 1);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'period' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeriesDataItem"", e);
    }
}","/**
 * Updates (changes) the value for a time period.  Throws a
 * {@link SeriesException} if the period does not exist.
 *
 * @param period  the period (<code>null</code> not permitted).
 * @param value  the value (<code>null</code> permitted).
 */"
"public void update(int index, Number value) {
    TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(index);
    boolean iterate = false;
    Number oldYN = item.getValue();
    if (oldYN != null) {
        double oldY = oldYN.doubleValue();
        if (!Double.isNaN(oldY)) {
            iterate = oldY <= this.minY || oldY >= this.maxY;
        }
    }
    item.setValue(value);
    if (iterate) {
        findBoundsByIteration();
    } else if (value != null) {
        double yy = value.doubleValue();
        this.minY = minIgnoreNaN(this.minY, yy);
        this.maxY = maxIgnoreNaN(this.maxY, yy);
    }
    fireSeriesChanged();
}","public void test03064() throws Throwable {
    MockDate mockDate0 = new MockDate();
    Millisecond millisecond0 = new Millisecond(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(millisecond0, ""9FKCi1a5{:mf)"", ""9FKCi1a5{:mf)"");
    // Undeclared exception!
    try {
        timeSeries0.update(0, (Number) 0);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 0, Size: 0
        //
        verifyException(""java.util.ArrayList"", e);
    }
}","/**
 * Updates (changes) the value of a data item.
 *
 * @param index  the index of the data item.
 * @param value  the new value (<code>null</code> permitted).
 */"
"public void update(int index, Number value) {
    TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(index);
    boolean iterate = false;
    Number oldYN = item.getValue();
    if (oldYN != null) {
        double oldY = oldYN.doubleValue();
        if (!Double.isNaN(oldY)) {
            iterate = oldY <= this.minY || oldY >= this.maxY;
        }
    }
    item.setValue(value);
    if (iterate) {
        findBoundsByIteration();
    } else if (value != null) {
        double yy = value.doubleValue();
        this.minY = minIgnoreNaN(this.minY, yy);
        this.maxY = maxIgnoreNaN(this.maxY, yy);
    }
    fireSeriesChanged();
}","public void test03165() throws Throwable {
    Integer integer0 = JLayeredPane.PALETTE_LAYER;
    TimeSeries timeSeries0 = new TimeSeries("""");
    // Undeclared exception!
    try {
        timeSeries0.update((-1805), (Number) integer0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * Updates (changes) the value of a data item.
 *
 * @param index  the index of the data item.
 * @param value  the new value (<code>null</code> permitted).
 */"
"public void removeAgedItems(long latest, boolean notify) {
    if (this.data.isEmpty()) {
        // nothing to do
        return;
    }
    // find the serial index of the period specified by 'latest'
    long index = Long.MAX_VALUE;
    try {
        Method m = RegularTimePeriod.class.getDeclaredMethod(""createInstance"", new Class[] { Class.class, Date.class, TimeZone.class });
        RegularTimePeriod newest = (RegularTimePeriod) m.invoke(this.timePeriodClass, new Object[] { this.timePeriodClass, new Date(latest), TimeZone.getDefault() });
        index = newest.getSerialIndex();
    } catch (NoSuchMethodException e) {
        e.printStackTrace();
    } catch (IllegalAccessException e) {
        e.printStackTrace();
    } catch (InvocationTargetException e) {
        e.printStackTrace();
    }
    // check if there are any values earlier than specified by the history
    // count...
    boolean removed = false;
    while (getItemCount() > 0 && (index - getTimePeriod(0).getSerialIndex()) > this.maximumItemAge) {
        this.data.remove(0);
        removed = true;
    }
    if (removed) {
        findBoundsByIteration();
        if (notify) {
            fireSeriesChanged();
        }
    }
}","public void test03266() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0);
    timeSeries0.add((RegularTimePeriod) hour0, (double) 23);
    // Undeclared exception!
    try {
        timeSeries0.removeAgedItems(9223372036854775807L, true);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}","/**
 * Age items in the series.  Ensure that the timespan from the supplied
 * time to the oldest record in the series does not exceed history count.
 * oldest items will be removed if required.
 *
 * @param latest  the time to be compared against when aging data
 *     (specified in milliseconds).
 * @param notify  controls whether or not a {@link SeriesChangeEvent} is
 *                sent to registered listeners IF any items are removed.
 */"
"public Number getValue(RegularTimePeriod period) {
    int index = getIndex(period);
    if (index >= 0) {
        return getValue(index);
    } else {
        return null;
    }
}","public void test03367() throws Throwable {
    TimeSeries timeSeries0 = new TimeSeries("""");
    // Undeclared exception!
    try {
        timeSeries0.getValue((RegularTimePeriod) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'period' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}","/**
 * Returns the value for a time period.  If there is no data item with the
 * specified period, this method will return <code>null</code>.
 *
 * @param period  time period (<code>null</code> not permitted).
 *
 * @return The value (possibly <code>null</code>).
 */"
"public Number getValue(int index) {
    return getRawDataItem(index).getValue();
}","public void test03468() throws Throwable {
    TimeSeries timeSeries0 = new TimeSeries(""s"", ""s"", ""the time period "");
    Vector<Millisecond> vector0 = new Vector<Millisecond>();
    timeSeries0.data = (List) vector0;
    // Undeclared exception!
    try {
        timeSeries0.getValue(999);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // Array index out of range: 999
        //
        verifyException(""java.util.Vector"", e);
    }
}","/**
 * Returns the value at the specified index.
 *
 * @param index  index of a value.
 *
 * @return The value (possibly <code>null</code>).
 */"
"public Collection getTimePeriodsUniqueToOtherSeries(TimeSeries series) {
    Collection result = new java.util.ArrayList();
    for (int i = 0; i < series.getItemCount(); i++) {
        RegularTimePeriod period = series.getTimePeriod(i);
        int index = getIndex(period);
        if (index < 0) {
            result.add(period);
        }
    }
    return result;
}","public void test03569() throws Throwable {
    TimeSeries timeSeries0 = new TimeSeries(""You are trying to add data where the time period class "", ""You are trying to add data where the time period class "", (String) null);
    // Undeclared exception!
    try {
        timeSeries0.getTimePeriodsUniqueToOtherSeries((TimeSeries) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}","/**
 * Returns a collection of time periods in the specified series, but not in
 * this series, and therefore unique to the specified series.
 *
 * @param series  the series to check against this one.
 *
 * @return The unique time periods.
 */"
"public RegularTimePeriod getTimePeriod(int index) {
    return getRawDataItem(index).getPeriod();
}","public void test03670() throws Throwable {
    Millisecond millisecond0 = new Millisecond();
    TimeSeries timeSeries0 = new TimeSeries(millisecond0);
    // Undeclared exception!
    try {
        timeSeries0.getTimePeriod(999);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 999, Size: 0
        //
        verifyException(""java.util.ArrayList"", e);
    }
}","/**
 * Returns the time period at the specified index.
 *
 * @param index  the index of the data item.
 *
 * @return The time period.
 */"
"TimeSeriesDataItem getRawDataItem(int index) {
    return (TimeSeriesDataItem) this.data.get(index);
}","public void test03771() throws Throwable {
    Month month0 = new Month();
    TimeSeries timeSeries0 = new TimeSeries(month0, ""K'$"", (String) null);
    // Undeclared exception!
    try {
        timeSeries0.getRawDataItem(Integer.MAX_VALUE);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 2147483647, Size: 0
        //
        verifyException(""java.util.ArrayList"", e);
    }
}","/**
 * Returns a data item for the series.  This method returns the object
 * that is used for the underlying storage - you should not modify the
 * contents of the returned value unless you know what you are doing.
 *
 * @param index  the item index (zero-based).
 *
 * @return The data item.
 *
 * @see #getDataItem(int)
 *
 * @since 1.0.14
 */"
"TimeSeriesDataItem getRawDataItem(int index) {
    return (TimeSeriesDataItem) this.data.get(index);
}","public void test03872() throws Throwable {
    Week week0 = new Week((-2922), (-2922));
    TimeSeries timeSeries0 = new TimeSeries(week0, ""o)t8;k }'%+/"", ""o)t8;k }'%+/"");
    // Undeclared exception!
    try {
        timeSeries0.getRawDataItem((-2922));
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * Returns a data item for the series.  This method returns the object
 * that is used for the underlying storage - you should not modify the
 * contents of the returned value unless you know what you are doing.
 *
 * @param index  the item index (zero-based).
 *
 * @return The data item.
 *
 * @see #getDataItem(int)
 *
 * @since 1.0.14
 */"
"public RegularTimePeriod getNextTimePeriod() {
    RegularTimePeriod last = getTimePeriod(getItemCount() - 1);
    return last.next();
}","public void test03973() throws Throwable {
    Year year0 = new Year(913);
    TimeSeries timeSeries0 = new TimeSeries(year0, ""Ed>~nh~Y"", ""Ed>~nh~Y"");
    LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
    timeSeries0.data = (List) linkedList0;
    // Undeclared exception!
    try {
        timeSeries0.getNextTimePeriod();
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: -1, Size: 0
        //
        verifyException(""java.util.LinkedList"", e);
    }
}","/**
 * Returns a time period that would be the next in sequence on the end of
 * the time series.
 *
 * @return The next time period.
 */"
"public TimeSeriesDataItem getDataItem(RegularTimePeriod period) {
    int index = getIndex(period);
    if (index >= 0) {
        return getDataItem(index);
    } else {
        return null;
    }
}","public void test04074() throws Throwable {
    TimeSeries timeSeries0 = new TimeSeries("""");
    // Undeclared exception!
    try {
        timeSeries0.getDataItem((RegularTimePeriod) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'period' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}","/**
 * Returns the data item for a specific period.  Note that the returned
 * object is a clone of the item in the series, so modifying it will have
 * no effect on the data series.
 *
 * @param period  the period of interest (<code>null</code> not allowed).
 *
 * @return The data item matching the specified period (or
 *         <code>null</code> if there is no match).
 *
 * @see #getDataItem(int)
 */"
"public TimeSeriesDataItem getDataItem(int index) {
    TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(index);
    return (TimeSeriesDataItem) item.clone();
}","public void test04175() throws Throwable {
    MockDate mockDate0 = new MockDate(1235, 400, 1235);
    OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1.0), (-1.0), (-1.0), (-2.147483648E9), 611.4873052);
    TimeSeries timeSeries0 = new TimeSeries(oHLCDataItem0, (String) null, ""JG#sgA$$!"");
    // Undeclared exception!
    try {
        timeSeries0.getDataItem((-2348));
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * Returns a data item from the dataset.  Note that the returned object
 * is a clone of the item in the series, so modifying it will have no
 * effect on the data series.
 *
 * @param index  the item index.
 *
 * @return The data item.
 *
 * @see #getDataItem(RegularTimePeriod)
 */"
"public void delete(RegularTimePeriod period) {
    int index = getIndex(period);
    if (index >= 0) {
        TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.remove(index);
        updateBoundsForRemovedItem(item);
        if (this.data.isEmpty()) {
            this.timePeriodClass = null;
        }
        fireSeriesChanged();
    }
}","public void test04276() throws Throwable {
    XYDataItem xYDataItem0 = new XYDataItem((-2.147483648E9), 0.0);
    TimeSeries timeSeries0 = new TimeSeries(xYDataItem0);
    // Undeclared exception!
    try {
        timeSeries0.delete((RegularTimePeriod) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'period' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}","/**
 * Deletes the data item for the given time period and sends a
 * {@link SeriesChangeEvent} to all registered listeners.  If there is no
 * item with the specified time period, this method does nothing.
 *
 * @param period  the period of the item to delete (<code>null</code> not
 *                permitted).
 */"
"public void delete(int start, int end, boolean notify) {
    if (end < start) {
        throw new IllegalArgumentException(""Requires start <= end."");
    }
    for (int i = 0; i <= (end - start); i++) {
        this.data.remove(start);
    }
    findBoundsByIteration();
    if (this.data.isEmpty()) {
        this.timePeriodClass = null;
    }
    if (notify) {
        fireSeriesChanged();
    }
}","public void test04377() throws Throwable {
    Quarter quarter0 = new Quarter();
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."");
    // Undeclared exception!
    try {
        timeSeries0.delete(4, 29, true);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 4, Size: 0
        //
        verifyException(""java.util.ArrayList"", e);
    }
}","/**
 * Deletes data from start until end index (end inclusive).
 *
 * @param start  the index of the first period to delete.
 * @param end  the index of the last period to delete.
 * @param notify  notify listeners?
 *
 * @since 1.0.14
 */"
"public void delete(int start, int end) {
    delete(start, end, true);
}","public void test04478() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    // Undeclared exception!
    try {
        timeSeries0.delete((-5480), (-1174));
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * Deletes data from start until end index (end inclusive).
 *
 * @param start  the index of the first period to delete.
 * @param end  the index of the last period to delete.
 */"
"public TimeSeriesDataItem addOrUpdate(RegularTimePeriod period, Number value) {
    return addOrUpdate(new TimeSeriesDataItem(period, value));
}","public void test04579() throws Throwable {
    Year year0 = new Year();
    TimeSeries timeSeries0 = new TimeSeries(year0);
    timeSeries0.add((RegularTimePeriod) year0, (Number) (-9999), true);
    Week week0 = new Week();
    // Undeclared exception!
    try {
        timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 53);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // You are trying to add data where the time period class is org.jfree.data.time.Week, but the TimeSeries is expecting an instance of org.jfree.data.time.Year.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}","/**
 * Adds or updates an item in the times series and sends a
 * {@link SeriesChangeEvent} to all registered listeners.
 *
 * @param period  the time period to add/update (<code>null</code> not
 *                permitted).
 * @param value  the new value (<code>null</code> permitted).
 *
 * @return A copy of the overwritten data item, or <code>null</code> if no
 *         item was overwritten.
 */"
"public TimeSeriesDataItem addOrUpdate(RegularTimePeriod period, Number value) {
    return addOrUpdate(new TimeSeriesDataItem(period, value));
}","public void test04680() throws Throwable {
    TimeSeries timeSeries0 = new TimeSeries(""You are trying to add data where the time period class "", ""gj2w[S"", """");
    // Undeclared exception!
    try {
        timeSeries0.addOrUpdate((RegularTimePeriod) null, (Number) 1900);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'period' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeriesDataItem"", e);
    }
}","/**
 * Adds or updates an item in the times series and sends a
 * {@link SeriesChangeEvent} to all registered listeners.
 *
 * @param period  the time period to add/update (<code>null</code> not
 *                permitted).
 * @param value  the new value (<code>null</code> permitted).
 *
 * @return A copy of the overwritten data item, or <code>null</code> if no
 *         item was overwritten.
 */"
"public TimeSeriesDataItem addOrUpdate(RegularTimePeriod period, double value) {
    return addOrUpdate(period, new Double(value));
}","public void test04781() throws Throwable {
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
    Month month0 = new Month(date0);
    TimeSeries timeSeries0 = new TimeSeries(month0, """", ""1"");
    // Undeclared exception!
    try {
        timeSeries0.addOrUpdate((RegularTimePeriod) null, 1409.9202);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'period' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeriesDataItem"", e);
    }
}","/**
 * Adds or updates an item in the times series and sends a
 * {@link SeriesChangeEvent} to all registered listeners.
 *
 * @param period  the time period to add/update (<code>null</code> not
 *                permitted).
 * @param value  the new value.
 *
 * @return A copy of the overwritten data item, or <code>null</code> if no
 *         item was overwritten.
 */"
"public TimeSeries addAndOrUpdate(TimeSeries series) {
    TimeSeries overwritten = new TimeSeries(""Overwritten values from: "" + getKey());
    for (int i = 0; i < series.getItemCount(); i++) {
        TimeSeriesDataItem item = series.getRawDataItem(i);
        TimeSeriesDataItem oldItem = addOrUpdate(item.getPeriod(), item.getValue());
        if (oldItem != null) {
            overwritten.add(oldItem);
        }
    }
    return overwritten;
}","public void test04882() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0);
    // Undeclared exception!
    try {
        timeSeries0.addAndOrUpdate((TimeSeries) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}","/**
 * Adds or updates data from one series to another.  Returns another series
 * containing the values that were overwritten.
 *
 * @param series  the series to merge with this.
 *
 * @return A series containing the values that were overwritten.
 */"
"public void add(TimeSeriesDataItem item) {
    add(item, true);
}","public void test04983() throws Throwable {
    MockDate mockDate0 = new MockDate();
    Hour hour0 = new Hour(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(hour0, """", """");
    // Undeclared exception!
    try {
        timeSeries0.add((TimeSeriesDataItem) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'item' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}","/**
 * Adds a data item to the series and sends a {@link SeriesChangeEvent} to
 * all registered listeners.
 *
 * @param item  the (timeperiod, value) pair (<code>null</code> not
 *              permitted).
 */"
"public void add(RegularTimePeriod period, Number value, boolean notify) {
    // defer argument checking...
    TimeSeriesDataItem item = new TimeSeriesDataItem(period, value);
    add(item, notify);
}","public void test05084() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0);
    Year year0 = new Year();
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, (Number) 23);
    timeSeries0.add(timeSeriesDataItem0, false);
    // Undeclared exception!
    try {
        timeSeries0.add((RegularTimePeriod) hour0, (Number) hour0.FIRST_HOUR_IN_DAY, false);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // You are trying to add data where the time period class is org.jfree.data.time.Hour, but the TimeSeries is expecting an instance of org.jfree.data.time.Year.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}","/**
 * Adds a new data item to the series and sends a {@link SeriesChangeEvent}
 * to all registered listeners.
 *
 * @param period  the time period (<code>null</code> not permitted).
 * @param value  the value (<code>null</code> permitted).
 * @param notify  notify listeners?
 */"
"public void add(RegularTimePeriod period, Number value, boolean notify) {
    // defer argument checking...
    TimeSeriesDataItem item = new TimeSeriesDataItem(period, value);
    add(item, notify);
}","public void test05185() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    // Undeclared exception!
    try {
        timeSeries0.add((RegularTimePeriod) null, (Number) 1, true);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'period' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeriesDataItem"", e);
    }
}","/**
 * Adds a new data item to the series and sends a {@link SeriesChangeEvent}
 * to all registered listeners.
 *
 * @param period  the time period (<code>null</code> not permitted).
 * @param value  the value (<code>null</code> permitted).
 * @param notify  notify listeners?
 */"
"public void add(RegularTimePeriod period, double value) {
    // defer argument checking...
    add(period, value, true);
}","public void test05286() throws Throwable {
    Month month0 = new Month();
    TimeSeries timeSeries0 = new TimeSeries(month0);
    timeSeries0.add((RegularTimePeriod) month0, 0.0);
    // Undeclared exception!
    try {
        timeSeries0.add((RegularTimePeriod) month0, 0.0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // You are attempting to add an observation for the time period February 2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}","/**
 * Adds a new data item to the series and sends a {@link SeriesChangeEvent}
 * to all registered listeners.
 *
 * @param period  the time period (<code>null</code> not permitted).
 * @param value  the value.
 */"
"public TimeSeries(Comparable name, String domain, String range) {
    super(name);
    this.domain = domain;
    this.range = range;
    this.timePeriodClass = null;
    this.data = new java.util.ArrayList();
    this.maximumItemCount = Integer.MAX_VALUE;
    this.maximumItemAge = Long.MAX_VALUE;
    this.minY = Double.NaN;
    this.maxY = Double.NaN;
}","public void test05387() throws Throwable {
    TimeSeries timeSeries0 = null;
    try {
        timeSeries0 = new TimeSeries((Comparable) null, (String) null, ""TL`zt"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'key' argument.
        //
        verifyException(""org.jfree.data.general.Series"", e);
    }
}","/**
 * Creates a new time series that contains no data.
 * <P>
 * Descriptions can be specified for the domain and range.  One situation
 * where this is helpful is when generating a chart for the time series -
 * axis labels can be taken from the domain and range description.
 *
 * @param name  the name of the series (<code>null</code> not permitted).
 * @param domain  the domain description (<code>null</code> permitted).
 * @param range  the range description (<code>null</code> permitted).
 *
 * @since 1.0.13
 */"
"public TimeSeries(Comparable name) {
    this(name, DEFAULT_DOMAIN_DESCRIPTION, DEFAULT_RANGE_DESCRIPTION);
}","public void test05488() throws Throwable {
    TimeSeries timeSeries0 = null;
    try {
        timeSeries0 = new TimeSeries((Comparable) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'key' argument.
        //
        verifyException(""org.jfree.data.general.Series"", e);
    }
}","/**
 * Creates a new (empty) time series.  By default, a daily time series is
 * created.  Use one of the other constructors if you require a different
 * time period.
 *
 * @param name  the series name (<code>null</code> not permitted).
 */"
"public int getItemCount() {
    return this.data.size();
}","public void test05589() throws Throwable {
    SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2922);
    Day day0 = new Day(spreadsheetDate0);
    TimeSeries timeSeries0 = new TimeSeries(day0, ""You are trying to add data where the time period class "", ""You are trying to add data where the time period class "");
    timeSeries0.add((RegularTimePeriod) day0, (double) 3, true);
    timeSeries0.delete(0, 0, true);
    assertEquals(0, timeSeries0.getItemCount());
}","/**
 * Returns the number of items in the series.
 *
 * @return The item count.
 */"
"public void delete(int start, int end, boolean notify) {
    if (end < start) {
        throw new IllegalArgumentException(""Requires start <= end."");
    }
    for (int i = 0; i <= (end - start); i++) {
        this.data.remove(start);
    }
    findBoundsByIteration();
    if (this.data.isEmpty()) {
        this.timePeriodClass = null;
    }
    if (notify) {
        fireSeriesChanged();
    }
}","public void test05690() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond(454L);
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    // Undeclared exception!
    try {
        timeSeries0.delete((-1945), 0, true);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * Deletes data from start until end index (end inclusive).
 *
 * @param start  the index of the first period to delete.
 * @param end  the index of the last period to delete.
 * @param notify  notify listeners?
 *
 * @since 1.0.14
 */"
"public void delete(int start, int end, boolean notify) {
    if (end < start) {
        throw new IllegalArgumentException(""Requires start <= end."");
    }
    for (int i = 0; i <= (end - start); i++) {
        this.data.remove(start);
    }
    findBoundsByIteration();
    if (this.data.isEmpty()) {
        this.timePeriodClass = null;
    }
    if (notify) {
        fireSeriesChanged();
    }
}","public void test05791() throws Throwable {
    MockDate mockDate0 = new MockDate(0L);
    Week week0 = new Week(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(week0, ""3jR9"", ""XQ nmA/VK"");
    // Undeclared exception!
    try {
        timeSeries0.delete(1, 0, false);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Requires start <= end.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}","/**
 * Deletes data from start until end index (end inclusive).
 *
 * @param start  the index of the first period to delete.
 * @param end  the index of the last period to delete.
 * @param notify  notify listeners?
 *
 * @since 1.0.14
 */"
"public int getItemCount() {
    return this.data.size();
}","public void test05892() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    timeSeries0.add((RegularTimePeriod) week0, (Number) 1, true);
    RegularTimePeriod regularTimePeriod0 = week0.next();
    timeSeries0.add(regularTimePeriod0, (Number) 1, true);
    timeSeries0.removeAgedItems(true);
    assertEquals(2, timeSeries0.getItemCount());
}","/**
 * Returns the number of items in the series.
 *
 * @return The item count.
 */"
"public double getMinY() {
    return this.minY;
}","public void test05993() throws Throwable {
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""");
    Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
    Minute minute0 = new Minute(date0);
    TimeSeries timeSeries0 = new TimeSeries(minute0, "".dj8CYsoz`2xA[o"", """");
    timeSeries0.removeAgedItems(false);
    assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
}","/**
 * Returns the smallest y-value in the series, ignoring any null and
 * Double.NaN values.  This method returns Double.NaN if there is no
 * smallest y-value (for example, when the series is empty).
 *
 * @return The smallest y-value.
 *
 * @see #getMaxY()
 *
 * @since 1.0.14
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test05994() throws Throwable {
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""");
    Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
    Minute minute0 = new Minute(date0);
    TimeSeries timeSeries0 = new TimeSeries(minute0, "".dj8CYsoz`2xA[o"", """");
    timeSeries0.removeAgedItems(false);
    assertEquals("".dj8CYsoz`2xA[o"", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test05995() throws Throwable {
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""");
    Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
    Minute minute0 = new Minute(date0);
    TimeSeries timeSeries0 = new TimeSeries(minute0, "".dj8CYsoz`2xA[o"", """");
    timeSeries0.removeAgedItems(false);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test05996() throws Throwable {
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""");
    Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
    Minute minute0 = new Minute(date0);
    TimeSeries timeSeries0 = new TimeSeries(minute0, "".dj8CYsoz`2xA[o"", """");
    timeSeries0.removeAgedItems(false);
    assertEquals("""", timeSeries0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test05997() throws Throwable {
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""");
    Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
    Minute minute0 = new Minute(date0);
    TimeSeries timeSeries0 = new TimeSeries(minute0, "".dj8CYsoz`2xA[o"", """");
    timeSeries0.removeAgedItems(false);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public double getMaxY() {
    return this.maxY;
}","public void test05998() throws Throwable {
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""");
    Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
    Minute minute0 = new Minute(date0);
    TimeSeries timeSeries0 = new TimeSeries(minute0, "".dj8CYsoz`2xA[o"", """");
    timeSeries0.removeAgedItems(false);
    assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
}","/**
 * Returns the largest y-value in the series, ignoring any Double.NaN
 * values.  This method returns Double.NaN if there is no largest y-value
 * (for example, when the series is empty).
 *
 * @return The largest y-value.
 *
 * @see #getMinY()
 *
 * @since 1.0.14
 */"
"public double getMinY() {
    return this.minY;
}","public void test06099() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, (-2461.880016307358));
    timeSeries0.addOrUpdate(timeSeriesDataItem0);
    assertEquals((-2461.880016307358), timeSeries0.getMinY(), 0.01);
}","/**
 * Returns the smallest y-value in the series, ignoring any null and
 * Double.NaN values.  This method returns Double.NaN if there is no
 * smallest y-value (for example, when the series is empty).
 *
 * @return The smallest y-value.
 *
 * @see #getMaxY()
 *
 * @since 1.0.14
 */"
"public double getMaxY() {
    return this.maxY;
}","public void test061100() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0);
    timeSeries0.add((RegularTimePeriod) hour0, (double) 23);
    timeSeries0.update(0, (Number) 0);
    assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
}","/**
 * Returns the largest y-value in the series, ignoring any Double.NaN
 * values.  This method returns Double.NaN if there is no largest y-value
 * (for example, when the series is empty).
 *
 * @return The largest y-value.
 *
 * @see #getMinY()
 *
 * @since 1.0.14
 */"
"public double getMinY() {
    return this.minY;
}","public void test062101() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0);
    Year year0 = new Year();
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, (Number) 23);
    timeSeries0.add(timeSeriesDataItem0, true);
    timeSeries0.addOrUpdate(timeSeriesDataItem0);
    assertEquals(23.0, timeSeries0.getMinY(), 0.01);
}","/**
 * Returns the smallest y-value in the series, ignoring any null and
 * Double.NaN values.  This method returns Double.NaN if there is no
 * smallest y-value (for example, when the series is empty).
 *
 * @return The smallest y-value.
 *
 * @see #getMaxY()
 *
 * @since 1.0.14
 */"
"public void add(TimeSeriesDataItem item, boolean notify) {
    if (item == null) {
        throw new IllegalArgumentException(""Null 'item' argument."");
    }
    item = (TimeSeriesDataItem) item.clone();
    Class c = item.getPeriod().getClass();
    if (this.timePeriodClass == null) {
        this.timePeriodClass = c;
    } else if (!this.timePeriodClass.equals(c)) {
        StringBuffer b = new StringBuffer();
        b.append(""You are trying to add data where the time period class "");
        b.append(""is "");
        b.append(item.getPeriod().getClass().getName());
        b.append("", but the TimeSeries is expecting an instance of "");
        b.append(this.timePeriodClass.getName());
        b.append(""."");
        throw new SeriesException(b.toString());
    }
    // make the change (if it's not a duplicate time period)...
    boolean added = false;
    int count = getItemCount();
    if (count == 0) {
        this.data.add(item);
        added = true;
    } else {
        RegularTimePeriod last = getTimePeriod(getItemCount() - 1);
        if (item.getPeriod().compareTo(last) > 0) {
            this.data.add(item);
            added = true;
        } else {
            int index = Collections.binarySearch(this.data, item);
            if (index < 0) {
                this.data.add(-index - 1, item);
                added = true;
            } else {
                StringBuffer b = new StringBuffer();
                b.append(""You are attempting to add an observation for "");
                b.append(""the time period "");
                b.append(item.getPeriod().toString());
                b.append("" but the series already contains an observation"");
                b.append("" for that time period. Duplicates are not "");
                b.append(""permitted.  Try using the addOrUpdate() method."");
                throw new SeriesException(b.toString());
            }
        }
    }
    if (added) {
        updateBoundsForAddedItem(item);
        // check if this addition will exceed the maximum item count...
        if (getItemCount() > this.maximumItemCount) {
            TimeSeriesDataItem d = (TimeSeriesDataItem) this.data.remove(0);
            updateBoundsForRemovedItem(d);
        }
        // remove old items if necessary, but
        removeAgedItems(false);
        // don't notify anyone, because that
        // happens next anyway...
        if (notify) {
            fireSeriesChanged();
        }
    }
}","public void test063102() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0);
    timeSeries0.add((RegularTimePeriod) hour0, (double) 23);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) hour0, (double) 23);
    // Undeclared exception!
    try {
        timeSeries0.add(timeSeriesDataItem0, true);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // You are attempting to add an observation for the time period [20,14/2/2014] but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}","/**
 * Adds a data item to the series and sends a {@link SeriesChangeEvent} to
 * all registered listeners.
 *
 * @param item  the (timeperiod, value) pair (<code>null</code> not
 *              permitted).
 * @param notify  notify listeners?
 */"
"public double getMaxY() {
    return this.maxY;
}","public void test064103() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-914L));
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    timeSeries0.getIndex(fixedMillisecond0);
    assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
}","/**
 * Returns the largest y-value in the series, ignoring any Double.NaN
 * values.  This method returns Double.NaN if there is no largest y-value
 * (for example, when the series is empty).
 *
 * @return The largest y-value.
 *
 * @see #getMinY()
 *
 * @since 1.0.14
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test064104() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-914L));
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    timeSeries0.getIndex(fixedMillisecond0);
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test064105() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-914L));
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    timeSeries0.getIndex(fixedMillisecond0);
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test064106() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-914L));
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    timeSeries0.getIndex(fixedMillisecond0);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public double getMinY() {
    return this.minY;
}","public void test064107() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-914L));
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    timeSeries0.getIndex(fixedMillisecond0);
    assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
}","/**
 * Returns the smallest y-value in the series, ignoring any null and
 * Double.NaN values.  This method returns Double.NaN if there is no
 * smallest y-value (for example, when the series is empty).
 *
 * @return The smallest y-value.
 *
 * @see #getMaxY()
 *
 * @since 1.0.14
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test064108() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-914L));
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    timeSeries0.getIndex(fixedMillisecond0);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public TimeSeriesDataItem getDataItem(int index) {
    TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(index);
    return (TimeSeriesDataItem) item.clone();
}","public void test065109() throws Throwable {
    MockDate mockDate0 = new MockDate(0L);
    Millisecond millisecond0 = new Millisecond(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(millisecond0);
    // Undeclared exception!
    try {
        timeSeries0.getDataItem(999);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 999, Size: 0
        //
        verifyException(""java.util.ArrayList"", e);
    }
}","/**
 * Returns a data item from the dataset.  Note that the returned object
 * is a clone of the item in the series, so modifying it will have no
 * effect on the data series.
 *
 * @param index  the item index.
 *
 * @return The data item.
 *
 * @see #getDataItem(RegularTimePeriod)
 */"
"public void add(TimeSeriesDataItem item) {
    add(item, true);
}","public void test066110() throws Throwable {
    Minute minute0 = new Minute();
    TimeSeries timeSeries0 = new TimeSeries(minute0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 59);
    timeSeries0.add(timeSeriesDataItem0);
    // Undeclared exception!
    try {
        timeSeries0.add(timeSeriesDataItem0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // You are attempting to add an observation for the time period Fri Feb 14 20:21:21 GMT 2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}","/**
 * Adds a data item to the series and sends a {@link SeriesChangeEvent} to
 * all registered listeners.
 *
 * @param item  the (timeperiod, value) pair (<code>null</code> not
 *              permitted).
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test067111() throws Throwable {
    MockDate mockDate0 = new MockDate((-1864), (-1864), (-1864), 1624, 1438);
    Year year0 = new Year(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(year0);
    timeSeries0.getItemCount();
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public double getMinY() {
    return this.minY;
}","public void test067112() throws Throwable {
    MockDate mockDate0 = new MockDate((-1864), (-1864), (-1864), 1624, 1438);
    Year year0 = new Year(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(year0);
    timeSeries0.getItemCount();
    assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
}","/**
 * Returns the smallest y-value in the series, ignoring any null and
 * Double.NaN values.  This method returns Double.NaN if there is no
 * smallest y-value (for example, when the series is empty).
 *
 * @return The smallest y-value.
 *
 * @see #getMaxY()
 *
 * @since 1.0.14
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test067113() throws Throwable {
    MockDate mockDate0 = new MockDate((-1864), (-1864), (-1864), 1624, 1438);
    Year year0 = new Year(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(year0);
    timeSeries0.getItemCount();
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test067114() throws Throwable {
    MockDate mockDate0 = new MockDate((-1864), (-1864), (-1864), 1624, 1438);
    Year year0 = new Year(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(year0);
    timeSeries0.getItemCount();
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public double getMaxY() {
    return this.maxY;
}","public void test067115() throws Throwable {
    MockDate mockDate0 = new MockDate((-1864), (-1864), (-1864), 1624, 1438);
    Year year0 = new Year(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(year0);
    timeSeries0.getItemCount();
    assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
}","/**
 * Returns the largest y-value in the series, ignoring any Double.NaN
 * values.  This method returns Double.NaN if there is no largest y-value
 * (for example, when the series is empty).
 *
 * @return The largest y-value.
 *
 * @see #getMinY()
 *
 * @since 1.0.14
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test067116() throws Throwable {
    MockDate mockDate0 = new MockDate((-1864), (-1864), (-1864), 1624, 1438);
    Year year0 = new Year(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(year0);
    timeSeries0.getItemCount();
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test068117() throws Throwable {
    Month month0 = new Month();
    TimeSeries timeSeries0 = new TimeSeries(month0, ""K'$"", (String) null);
    timeSeries0.addOrUpdate((RegularTimePeriod) month0, (Number) null);
    assertEquals(""K'$"", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public double getMinY() {
    return this.minY;
}","public void test068118() throws Throwable {
    Month month0 = new Month();
    TimeSeries timeSeries0 = new TimeSeries(month0, ""K'$"", (String) null);
    timeSeries0.addOrUpdate((RegularTimePeriod) month0, (Number) null);
    assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
}","/**
 * Returns the smallest y-value in the series, ignoring any null and
 * Double.NaN values.  This method returns Double.NaN if there is no
 * smallest y-value (for example, when the series is empty).
 *
 * @return The smallest y-value.
 *
 * @see #getMaxY()
 *
 * @since 1.0.14
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test068119() throws Throwable {
    Month month0 = new Month();
    TimeSeries timeSeries0 = new TimeSeries(month0, ""K'$"", (String) null);
    timeSeries0.addOrUpdate((RegularTimePeriod) month0, (Number) null);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public double getMaxY() {
    return this.maxY;
}","public void test068120() throws Throwable {
    Month month0 = new Month();
    TimeSeries timeSeries0 = new TimeSeries(month0, ""K'$"", (String) null);
    timeSeries0.addOrUpdate((RegularTimePeriod) month0, (Number) null);
    assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
}","/**
 * Returns the largest y-value in the series, ignoring any Double.NaN
 * values.  This method returns Double.NaN if there is no largest y-value
 * (for example, when the series is empty).
 *
 * @return The largest y-value.
 *
 * @see #getMinY()
 *
 * @since 1.0.14
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test068121() throws Throwable {
    Month month0 = new Month();
    TimeSeries timeSeries0 = new TimeSeries(month0, ""K'$"", (String) null);
    timeSeries0.addOrUpdate((RegularTimePeriod) month0, (Number) null);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public double getMinY() {
    return this.minY;
}","public void test069122() throws Throwable {
    Year year0 = new Year();
    TimeSeries timeSeries0 = new TimeSeries(year0);
    timeSeries0.add((RegularTimePeriod) year0, (Number) (-9999), true);
    timeSeries0.hashCode();
    assertEquals((-9999.0), timeSeries0.getMinY(), 0.01);
}","/**
 * Returns the smallest y-value in the series, ignoring any null and
 * Double.NaN values.  This method returns Double.NaN if there is no
 * smallest y-value (for example, when the series is empty).
 *
 * @return The smallest y-value.
 *
 * @see #getMaxY()
 *
 * @since 1.0.14
 */"
"public double getMinY() {
    return this.minY;
}","public void test070123() throws Throwable {
    TimeSeries timeSeries0 = new TimeSeries(""the time period "", (String) null, ""the time period "");
    timeSeries0.hashCode();
    assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
}","/**
 * Returns the smallest y-value in the series, ignoring any null and
 * Double.NaN values.  This method returns Double.NaN if there is no
 * smallest y-value (for example, when the series is empty).
 *
 * @return The smallest y-value.
 *
 * @see #getMaxY()
 *
 * @since 1.0.14
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test070124() throws Throwable {
    TimeSeries timeSeries0 = new TimeSeries(""the time period "", (String) null, ""the time period "");
    timeSeries0.hashCode();
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test070125() throws Throwable {
    TimeSeries timeSeries0 = new TimeSeries(""the time period "", (String) null, ""the time period "");
    timeSeries0.hashCode();
    assertEquals(""the time period "", timeSeries0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public double getMaxY() {
    return this.maxY;
}","public void test070126() throws Throwable {
    TimeSeries timeSeries0 = new TimeSeries(""the time period "", (String) null, ""the time period "");
    timeSeries0.hashCode();
    assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
}","/**
 * Returns the largest y-value in the series, ignoring any Double.NaN
 * values.  This method returns Double.NaN if there is no largest y-value
 * (for example, when the series is empty).
 *
 * @return The largest y-value.
 *
 * @see #getMinY()
 *
 * @since 1.0.14
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test070127() throws Throwable {
    TimeSeries timeSeries0 = new TimeSeries(""the time period "", (String) null, ""the time period "");
    timeSeries0.hashCode();
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test071128() throws Throwable {
    Quarter quarter0 = new Quarter();
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."");
    TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
    boolean boolean0 = timeSeries0.equals(timeSeries1);
    assertEquals(""Null 'seriesKeys' argument."", timeSeries0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test071129() throws Throwable {
    Quarter quarter0 = new Quarter();
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."");
    TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
    boolean boolean0 = timeSeries0.equals(timeSeries1);
    assertEquals(""Null 'seriesKeys' argument."", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test071130() throws Throwable {
    Quarter quarter0 = new Quarter();
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."");
    TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
    boolean boolean0 = timeSeries0.equals(timeSeries1);
    assertEquals(""Value"", timeSeries1.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test071131() throws Throwable {
    Quarter quarter0 = new Quarter();
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."");
    TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
    boolean boolean0 = timeSeries0.equals(timeSeries1);
    assertEquals(""Time"", timeSeries1.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public double getMinY() {
    return this.minY;
}","public void test071132() throws Throwable {
    Quarter quarter0 = new Quarter();
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."");
    TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
    boolean boolean0 = timeSeries0.equals(timeSeries1);
    assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
}","/**
 * Returns the smallest y-value in the series, ignoring any null and
 * Double.NaN values.  This method returns Double.NaN if there is no
 * smallest y-value (for example, when the series is empty).
 *
 * @return The smallest y-value.
 *
 * @see #getMaxY()
 *
 * @since 1.0.14
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test071133() throws Throwable {
    Quarter quarter0 = new Quarter();
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."");
    TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
    boolean boolean0 = timeSeries0.equals(timeSeries1);
    assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof TimeSeries)) {
        return false;
    }
    TimeSeries that = (TimeSeries) obj;
    if (!ObjectUtilities.equal(getDomainDescription(), that.getDomainDescription())) {
        return false;
    }
    if (!ObjectUtilities.equal(getRangeDescription(), that.getRangeDescription())) {
        return false;
    }
    if (!ObjectUtilities.equal(this.timePeriodClass, that.timePeriodClass)) {
        return false;
    }
    if (getMaximumItemAge() != that.getMaximumItemAge()) {
        return false;
    }
    if (getMaximumItemCount() != that.getMaximumItemCount()) {
        return false;
    }
    int count = getItemCount();
    if (count != that.getItemCount()) {
        return false;
    }
    if (!ObjectUtilities.equal(this.data, that.data)) {
        return false;
    }
    return super.equals(obj);
}","public void test071134() throws Throwable {
    Quarter quarter0 = new Quarter();
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."");
    TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
    boolean boolean0 = timeSeries0.equals(timeSeries1);
    assertFalse(boolean0);
}","/**
 * Tests the series for equality with an arbitrary object.
 *
 * @param obj  the object to test against (<code>null</code> permitted).
 *
 * @return A boolean.
 */"
"public double getMaxY() {
    return this.maxY;
}","public void test071135() throws Throwable {
    Quarter quarter0 = new Quarter();
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."");
    TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
    boolean boolean0 = timeSeries0.equals(timeSeries1);
    assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
}","/**
 * Returns the largest y-value in the series, ignoring any Double.NaN
 * values.  This method returns Double.NaN if there is no largest y-value
 * (for example, when the series is empty).
 *
 * @return The largest y-value.
 *
 * @see #getMinY()
 *
 * @since 1.0.14
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test071136() throws Throwable {
    Quarter quarter0 = new Quarter();
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."");
    TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
    boolean boolean0 = timeSeries0.equals(timeSeries1);
    assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public double getMaxY() {
    return this.maxY;
}","public void test072137() throws Throwable {
    Quarter quarter0 = new Quarter();
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."");
    TimeSeries timeSeries1 = new TimeSeries(""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."");
    boolean boolean0 = timeSeries1.equals(timeSeries0);
    assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
}","/**
 * Returns the largest y-value in the series, ignoring any Double.NaN
 * values.  This method returns Double.NaN if there is no largest y-value
 * (for example, when the series is empty).
 *
 * @return The largest y-value.
 *
 * @see #getMinY()
 *
 * @since 1.0.14
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test072138() throws Throwable {
    Quarter quarter0 = new Quarter();
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."");
    TimeSeries timeSeries1 = new TimeSeries(""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."");
    boolean boolean0 = timeSeries1.equals(timeSeries0);
    assertEquals(""Null 'seriesKeys' argument."", timeSeries1.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test072139() throws Throwable {
    Quarter quarter0 = new Quarter();
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."");
    TimeSeries timeSeries1 = new TimeSeries(""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."");
    boolean boolean0 = timeSeries1.equals(timeSeries0);
    assertEquals(""Null 'seriesKeys' argument."", timeSeries1.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test072140() throws Throwable {
    Quarter quarter0 = new Quarter();
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."");
    TimeSeries timeSeries1 = new TimeSeries(""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."");
    boolean boolean0 = timeSeries1.equals(timeSeries0);
    assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test072141() throws Throwable {
    Quarter quarter0 = new Quarter();
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."");
    TimeSeries timeSeries1 = new TimeSeries(""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."");
    boolean boolean0 = timeSeries1.equals(timeSeries0);
    assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public double getMinY() {
    return this.minY;
}","public void test072142() throws Throwable {
    Quarter quarter0 = new Quarter();
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."");
    TimeSeries timeSeries1 = new TimeSeries(""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."");
    boolean boolean0 = timeSeries1.equals(timeSeries0);
    assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
}","/**
 * Returns the smallest y-value in the series, ignoring any null and
 * Double.NaN values.  This method returns Double.NaN if there is no
 * smallest y-value (for example, when the series is empty).
 *
 * @return The smallest y-value.
 *
 * @see #getMaxY()
 *
 * @since 1.0.14
 */"
"public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof TimeSeries)) {
        return false;
    }
    TimeSeries that = (TimeSeries) obj;
    if (!ObjectUtilities.equal(getDomainDescription(), that.getDomainDescription())) {
        return false;
    }
    if (!ObjectUtilities.equal(getRangeDescription(), that.getRangeDescription())) {
        return false;
    }
    if (!ObjectUtilities.equal(this.timePeriodClass, that.timePeriodClass)) {
        return false;
    }
    if (getMaximumItemAge() != that.getMaximumItemAge()) {
        return false;
    }
    if (getMaximumItemCount() != that.getMaximumItemCount()) {
        return false;
    }
    int count = getItemCount();
    if (count != that.getItemCount()) {
        return false;
    }
    if (!ObjectUtilities.equal(this.data, that.data)) {
        return false;
    }
    return super.equals(obj);
}","public void test072143() throws Throwable {
    Quarter quarter0 = new Quarter();
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."");
    TimeSeries timeSeries1 = new TimeSeries(""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."");
    boolean boolean0 = timeSeries1.equals(timeSeries0);
    assertFalse(boolean0);
}","/**
 * Tests the series for equality with an arbitrary object.
 *
 * @param obj  the object to test against (<code>null</code> permitted).
 *
 * @return A boolean.
 */"
"public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof TimeSeries)) {
        return false;
    }
    TimeSeries that = (TimeSeries) obj;
    if (!ObjectUtilities.equal(getDomainDescription(), that.getDomainDescription())) {
        return false;
    }
    if (!ObjectUtilities.equal(getRangeDescription(), that.getRangeDescription())) {
        return false;
    }
    if (!ObjectUtilities.equal(this.timePeriodClass, that.timePeriodClass)) {
        return false;
    }
    if (getMaximumItemAge() != that.getMaximumItemAge()) {
        return false;
    }
    if (getMaximumItemCount() != that.getMaximumItemCount()) {
        return false;
    }
    int count = getItemCount();
    if (count != that.getItemCount()) {
        return false;
    }
    if (!ObjectUtilities.equal(this.data, that.data)) {
        return false;
    }
    return super.equals(obj);
}","public void test073144() throws Throwable {
    Year year0 = new Year();
    TimeSeries timeSeries0 = new TimeSeries(year0);
    GridLayout gridLayout0 = new GridLayout(0, 3012);
    Panel panel0 = new Panel(gridLayout0);
    boolean boolean0 = timeSeries0.equals(panel0);
    assertFalse(boolean0);
}","/**
 * Tests the series for equality with an arbitrary object.
 *
 * @param obj  the object to test against (<code>null</code> permitted).
 *
 * @return A boolean.
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test073145() throws Throwable {
    Year year0 = new Year();
    TimeSeries timeSeries0 = new TimeSeries(year0);
    GridLayout gridLayout0 = new GridLayout(0, 3012);
    Panel panel0 = new Panel(gridLayout0);
    boolean boolean0 = timeSeries0.equals(panel0);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test073146() throws Throwable {
    Year year0 = new Year();
    TimeSeries timeSeries0 = new TimeSeries(year0);
    GridLayout gridLayout0 = new GridLayout(0, 3012);
    Panel panel0 = new Panel(gridLayout0);
    boolean boolean0 = timeSeries0.equals(panel0);
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public double getMaxY() {
    return this.maxY;
}","public void test073147() throws Throwable {
    Year year0 = new Year();
    TimeSeries timeSeries0 = new TimeSeries(year0);
    GridLayout gridLayout0 = new GridLayout(0, 3012);
    Panel panel0 = new Panel(gridLayout0);
    boolean boolean0 = timeSeries0.equals(panel0);
    assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
}","/**
 * Returns the largest y-value in the series, ignoring any Double.NaN
 * values.  This method returns Double.NaN if there is no largest y-value
 * (for example, when the series is empty).
 *
 * @return The largest y-value.
 *
 * @see #getMinY()
 *
 * @since 1.0.14
 */"
"public double getMinY() {
    return this.minY;
}","public void test073148() throws Throwable {
    Year year0 = new Year();
    TimeSeries timeSeries0 = new TimeSeries(year0);
    GridLayout gridLayout0 = new GridLayout(0, 3012);
    Panel panel0 = new Panel(gridLayout0);
    boolean boolean0 = timeSeries0.equals(panel0);
    assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
}","/**
 * Returns the smallest y-value in the series, ignoring any null and
 * Double.NaN values.  This method returns Double.NaN if there is no
 * smallest y-value (for example, when the series is empty).
 *
 * @return The smallest y-value.
 *
 * @see #getMaxY()
 *
 * @since 1.0.14
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test073149() throws Throwable {
    Year year0 = new Year();
    TimeSeries timeSeries0 = new TimeSeries(year0);
    GridLayout gridLayout0 = new GridLayout(0, 3012);
    Panel panel0 = new Panel(gridLayout0);
    boolean boolean0 = timeSeries0.equals(panel0);
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test073150() throws Throwable {
    Year year0 = new Year();
    TimeSeries timeSeries0 = new TimeSeries(year0);
    GridLayout gridLayout0 = new GridLayout(0, 3012);
    Panel panel0 = new Panel(gridLayout0);
    boolean boolean0 = timeSeries0.equals(panel0);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public double getMaxY() {
    return this.maxY;
}","public void test074151() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    timeSeries0.add((RegularTimePeriod) week0, (-481.5), false);
    RegularTimePeriod regularTimePeriod0 = week0.previous();
    timeSeries0.createCopy(regularTimePeriod0, regularTimePeriod0);
    assertEquals((-481.5), timeSeries0.getMaxY(), 0.01);
}","/**
 * Returns the largest y-value in the series, ignoring any Double.NaN
 * values.  This method returns Double.NaN if there is no largest y-value
 * (for example, when the series is empty).
 *
 * @return The largest y-value.
 *
 * @see #getMinY()
 *
 * @since 1.0.14
 */"
"public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end) throws CloneNotSupportedException {
    if (start == null) {
        throw new IllegalArgumentException(""Null 'start' argument."");
    }
    if (end == null) {
        throw new IllegalArgumentException(""Null 'end' argument."");
    }
    if (start.compareTo(end) > 0) {
        throw new IllegalArgumentException(""Requires start on or before end."");
    }
    boolean emptyRange = false;
    int startIndex = getIndex(start);
    if (startIndex < 0) {
        startIndex = -(startIndex + 1);
        if (startIndex == this.data.size()) {
            // start is after last data item
            emptyRange = true;
        }
    }
    int endIndex = getIndex(end);
    if (endIndex < 0) {
        // end period is not in original series
        // this is first item AFTER end period
        endIndex = -(endIndex + 1);
        // so this is last item BEFORE end
        endIndex = endIndex - 1;
    }
    if ((endIndex < 0) || (endIndex < startIndex)) {
        emptyRange = true;
    }
    if (emptyRange) {
        TimeSeries copy = (TimeSeries) super.clone();
        copy.data = new java.util.ArrayList();
        return copy;
    } else {
        return createCopy(startIndex, endIndex);
    }
}","public void test075152() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""93nFD{n"");
    Instant instant0 = MockInstant.ofEpochSecond(0L);
    Date date0 = Date.from(instant0);
    TimeSeries timeSeries0 = new TimeSeries(""You are trying to add data where the time period class "", """", """");
    Day day0 = new Day(date0, timeZone0);
    RegularTimePeriod regularTimePeriod0 = day0.next();
    // Undeclared exception!
    try {
        timeSeries0.createCopy(regularTimePeriod0, (RegularTimePeriod) day0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Requires start on or before end.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}","/**
 * Creates a new timeseries by copying a subset of the data in this time
 * series.
 *
 * @param start  the first time period to copy (<code>null</code> not
 *         permitted).
 * @param end  the last time period to copy (<code>null</code> not
 *         permitted).
 *
 * @return A time series containing a copy of this time series from start
 *         until end.
 *
 * @throws CloneNotSupportedException if there is a cloning problem.
 */"
"public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end) throws CloneNotSupportedException {
    if (start == null) {
        throw new IllegalArgumentException(""Null 'start' argument."");
    }
    if (end == null) {
        throw new IllegalArgumentException(""Null 'end' argument."");
    }
    if (start.compareTo(end) > 0) {
        throw new IllegalArgumentException(""Requires start on or before end."");
    }
    boolean emptyRange = false;
    int startIndex = getIndex(start);
    if (startIndex < 0) {
        startIndex = -(startIndex + 1);
        if (startIndex == this.data.size()) {
            // start is after last data item
            emptyRange = true;
        }
    }
    int endIndex = getIndex(end);
    if (endIndex < 0) {
        // end period is not in original series
        // this is first item AFTER end period
        endIndex = -(endIndex + 1);
        // so this is last item BEFORE end
        endIndex = endIndex - 1;
    }
    if ((endIndex < 0) || (endIndex < startIndex)) {
        emptyRange = true;
    }
    if (emptyRange) {
        TimeSeries copy = (TimeSeries) super.clone();
        copy.data = new java.util.ArrayList();
        return copy;
    } else {
        return createCopy(startIndex, endIndex);
    }
}","public void test076153() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    // Undeclared exception!
    try {
        timeSeries0.createCopy((RegularTimePeriod) null, (RegularTimePeriod) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'start' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}","/**
 * Creates a new timeseries by copying a subset of the data in this time
 * series.
 *
 * @param start  the first time period to copy (<code>null</code> not
 *         permitted).
 * @param end  the last time period to copy (<code>null</code> not
 *         permitted).
 *
 * @return A time series containing a copy of this time series from start
 *         until end.
 *
 * @throws CloneNotSupportedException if there is a cloning problem.
 */"
"public TimeSeries createCopy(int start, int end) throws CloneNotSupportedException {
    if (start < 0) {
        throw new IllegalArgumentException(""Requires start >= 0."");
    }
    if (end < start) {
        throw new IllegalArgumentException(""Requires start <= end."");
    }
    TimeSeries copy = (TimeSeries) super.clone();
    copy.data = new java.util.ArrayList();
    if (this.data.size() > 0) {
        for (int index = start; index <= end; index++) {
            TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(index);
            TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();
            try {
                copy.add(clone);
            } catch (SeriesException e) {
                e.printStackTrace();
            }
        }
    }
    return copy;
}","public void test077154() throws Throwable {
    Millisecond millisecond0 = new Millisecond();
    TimeSeries timeSeries0 = new TimeSeries(millisecond0);
    // Undeclared exception!
    try {
        timeSeries0.createCopy(999, 0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Requires start <= end.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}","/**
 * Creates a new timeseries by copying a subset of the data in this time
 * series.
 *
 * @param start  the index of the first time period to copy.
 * @param end  the index of the last time period to copy.
 *
 * @return A series containing a copy of this times series from start until
 *         end.
 *
 * @throws CloneNotSupportedException if there is a cloning problem.
 */"
"public TimeSeries createCopy(int start, int end) throws CloneNotSupportedException {
    if (start < 0) {
        throw new IllegalArgumentException(""Requires start >= 0."");
    }
    if (end < start) {
        throw new IllegalArgumentException(""Requires start <= end."");
    }
    TimeSeries copy = (TimeSeries) super.clone();
    copy.data = new java.util.ArrayList();
    if (this.data.size() > 0) {
        for (int index = start; index <= end; index++) {
            TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(index);
            TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();
            try {
                copy.add(clone);
            } catch (SeriesException e) {
                e.printStackTrace();
            }
        }
    }
    return copy;
}","public void test078155() throws Throwable {
    TimeSeries timeSeries0 = new TimeSeries(""G>`Yl=JF}Uh#c=ol)"");
    // Undeclared exception!
    try {
        timeSeries0.createCopy((-2814), (-2814));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Requires start >= 0.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}","/**
 * Creates a new timeseries by copying a subset of the data in this time
 * series.
 *
 * @param start  the index of the first time period to copy.
 * @param end  the index of the last time period to copy.
 *
 * @return A series containing a copy of this times series from start until
 *         end.
 *
 * @throws CloneNotSupportedException if there is a cloning problem.
 */"
"public void delete(int start, int end) {
    delete(start, end, true);
}","public void test079156() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    // Undeclared exception!
    try {
        timeSeries0.delete(2574, (-1174));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Requires start <= end.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}","/**
 * Deletes data from start until end index (end inclusive).
 *
 * @param start  the index of the first period to delete.
 * @param end  the index of the last period to delete.
 */"
"public int getItemCount() {
    return this.data.size();
}","public void test080157() throws Throwable {
    Hour hour0 = new Hour();
    RegularTimePeriod regularTimePeriod0 = hour0.next();
    TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
    timeSeries0.add((RegularTimePeriod) hour0, (double) 23);
    timeSeries0.add(regularTimePeriod0, (double) 23, true);
    timeSeries0.delete(regularTimePeriod0);
    assertEquals(1, timeSeries0.getItemCount());
}","/**
 * Returns the number of items in the series.
 *
 * @return The item count.
 */"
"public int getItemCount() {
    return this.data.size();
}","public void test081158() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0);
    Year year0 = new Year();
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, (Number) 23);
    timeSeries0.add(timeSeriesDataItem0, false);
    timeSeries0.delete((RegularTimePeriod) hour0);
    assertEquals(0, timeSeries0.getItemCount());
}","/**
 * Returns the number of items in the series.
 *
 * @return The item count.
 */"
"public double getMinY() {
    return this.minY;
}","public void test082159() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0, ""3,LZlB"", ""rMy?K}U1Qxkb"");
    timeSeries0.delete((RegularTimePeriod) week0);
    assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
}","/**
 * Returns the smallest y-value in the series, ignoring any null and
 * Double.NaN values.  This method returns Double.NaN if there is no
 * smallest y-value (for example, when the series is empty).
 *
 * @return The smallest y-value.
 *
 * @see #getMaxY()
 *
 * @since 1.0.14
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test082160() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0, ""3,LZlB"", ""rMy?K}U1Qxkb"");
    timeSeries0.delete((RegularTimePeriod) week0);
    assertEquals(""3,LZlB"", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test082161() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0, ""3,LZlB"", ""rMy?K}U1Qxkb"");
    timeSeries0.delete((RegularTimePeriod) week0);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test082162() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0, ""3,LZlB"", ""rMy?K}U1Qxkb"");
    timeSeries0.delete((RegularTimePeriod) week0);
    assertEquals(""rMy?K}U1Qxkb"", timeSeries0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public double getMaxY() {
    return this.maxY;
}","public void test082163() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0, ""3,LZlB"", ""rMy?K}U1Qxkb"");
    timeSeries0.delete((RegularTimePeriod) week0);
    assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
}","/**
 * Returns the largest y-value in the series, ignoring any Double.NaN
 * values.  This method returns Double.NaN if there is no largest y-value
 * (for example, when the series is empty).
 *
 * @return The largest y-value.
 *
 * @see #getMinY()
 *
 * @since 1.0.14
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test082164() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0, ""3,LZlB"", ""rMy?K}U1Qxkb"");
    timeSeries0.delete((RegularTimePeriod) week0);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public int getItemCount() {
    return this.data.size();
}","public void test083165() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0);
    timeSeries0.add((RegularTimePeriod) hour0, (double) 23);
    timeSeries0.clear();
    assertEquals(0, timeSeries0.getItemCount());
}","/**
 * Returns the number of items in the series.
 *
 * @return The item count.
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test084166() throws Throwable {
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""");
    Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
    Week week0 = new Week(date0);
    TimeSeries timeSeries0 = new TimeSeries(week0, """", ""There is no existing value for the specified 'period'."");
    timeSeries0.clear();
    assertEquals(""There is no existing value for the specified 'period'."", timeSeries0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public double getMinY() {
    return this.minY;
}","public void test084167() throws Throwable {
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""");
    Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
    Week week0 = new Week(date0);
    TimeSeries timeSeries0 = new TimeSeries(week0, """", ""There is no existing value for the specified 'period'."");
    timeSeries0.clear();
    assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
}","/**
 * Returns the smallest y-value in the series, ignoring any null and
 * Double.NaN values.  This method returns Double.NaN if there is no
 * smallest y-value (for example, when the series is empty).
 *
 * @return The smallest y-value.
 *
 * @see #getMaxY()
 *
 * @since 1.0.14
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test084168() throws Throwable {
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""");
    Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
    Week week0 = new Week(date0);
    TimeSeries timeSeries0 = new TimeSeries(week0, """", ""There is no existing value for the specified 'period'."");
    timeSeries0.clear();
    assertEquals("""", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test084169() throws Throwable {
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""");
    Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
    Week week0 = new Week(date0);
    TimeSeries timeSeries0 = new TimeSeries(week0, """", ""There is no existing value for the specified 'period'."");
    timeSeries0.clear();
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test084170() throws Throwable {
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""");
    Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
    Week week0 = new Week(date0);
    TimeSeries timeSeries0 = new TimeSeries(week0, """", ""There is no existing value for the specified 'period'."");
    timeSeries0.clear();
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public double getMaxY() {
    return this.maxY;
}","public void test084171() throws Throwable {
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""");
    Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
    Week week0 = new Week(date0);
    TimeSeries timeSeries0 = new TimeSeries(week0, """", ""There is no existing value for the specified 'period'."");
    timeSeries0.clear();
    assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
}","/**
 * Returns the largest y-value in the series, ignoring any Double.NaN
 * values.  This method returns Double.NaN if there is no largest y-value
 * (for example, when the series is empty).
 *
 * @return The largest y-value.
 *
 * @see #getMinY()
 *
 * @since 1.0.14
 */"
"public double getMaxY() {
    return this.maxY;
}","public void test085172() throws Throwable {
    TimeSeries timeSeries0 = new TimeSeries(""You are trying to add data where the time period class "", """", """");
    timeSeries0.removeAgedItems((-674L), true);
    assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
}","/**
 * Returns the largest y-value in the series, ignoring any Double.NaN
 * values.  This method returns Double.NaN if there is no largest y-value
 * (for example, when the series is empty).
 *
 * @return The largest y-value.
 *
 * @see #getMinY()
 *
 * @since 1.0.14
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test085173() throws Throwable {
    TimeSeries timeSeries0 = new TimeSeries(""You are trying to add data where the time period class "", """", """");
    timeSeries0.removeAgedItems((-674L), true);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test085174() throws Throwable {
    TimeSeries timeSeries0 = new TimeSeries(""You are trying to add data where the time period class "", """", """");
    timeSeries0.removeAgedItems((-674L), true);
    assertEquals("""", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test085175() throws Throwable {
    TimeSeries timeSeries0 = new TimeSeries(""You are trying to add data where the time period class "", """", """");
    timeSeries0.removeAgedItems((-674L), true);
    assertEquals("""", timeSeries0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public double getMinY() {
    return this.minY;
}","public void test085176() throws Throwable {
    TimeSeries timeSeries0 = new TimeSeries(""You are trying to add data where the time period class "", """", """");
    timeSeries0.removeAgedItems((-674L), true);
    assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
}","/**
 * Returns the smallest y-value in the series, ignoring any null and
 * Double.NaN values.  This method returns Double.NaN if there is no
 * smallest y-value (for example, when the series is empty).
 *
 * @return The smallest y-value.
 *
 * @see #getMaxY()
 *
 * @since 1.0.14
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test085177() throws Throwable {
    TimeSeries timeSeries0 = new TimeSeries(""You are trying to add data where the time period class "", """", """");
    timeSeries0.removeAgedItems((-674L), true);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public double getMinY() {
    return this.minY;
}","public void test086178() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    timeSeries0.add((RegularTimePeriod) week0, (-481.5), false);
    timeSeries0.removeAgedItems(9223372036854775807L, false);
    timeSeries0.removeAgedItems((long) 1, false);
    assertEquals((-481.5), timeSeries0.getMinY(), 0.01);
}","/**
 * Returns the smallest y-value in the series, ignoring any null and
 * Double.NaN values.  This method returns Double.NaN if there is no
 * smallest y-value (for example, when the series is empty).
 *
 * @return The smallest y-value.
 *
 * @see #getMaxY()
 *
 * @since 1.0.14
 */"
"public int getItemCount() {
    return this.data.size();
}","public void test087179() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    timeSeries0.add((RegularTimePeriod) week0, (Number) 1, true);
    timeSeries0.setMaximumItemAge(1);
    Week week1 = new Week(1, 1);
    timeSeries0.add((RegularTimePeriod) week1, (Number) 1, true);
    assertEquals(1, timeSeries0.getItemCount());
}","/**
 * Returns the number of items in the series.
 *
 * @return The item count.
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test088180() throws Throwable {
    SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-1493.806316114138), 1018.1, false, false);
    TimeSeries timeSeries0 = new TimeSeries(simpleHistogramBin0);
    MockDate mockDate0 = new MockDate();
    Second second0 = new Second(mockDate0);
    Millisecond millisecond0 = new Millisecond((-3112), second0);
    timeSeries0.setMaximumItemCount(0);
    timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, (Number) 999);
    assertEquals(0, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public TimeSeriesDataItem addOrUpdate(RegularTimePeriod period, double value) {
    return addOrUpdate(period, new Double(value));
}","public void test089181() throws Throwable {
    TimeSeries timeSeries0 = new TimeSeries("""");
    Year year0 = new Year((-367));
    Week week0 = new Week((-1645), year0);
    timeSeries0.add((RegularTimePeriod) week0, 2147.604);
    // Undeclared exception!
    try {
        timeSeries0.addOrUpdate((RegularTimePeriod) year0, 2147.604);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // You are trying to add data where the time period class is org.jfree.data.time.Year, but the TimeSeries is expecting an instance of org.jfree.data.time.Week.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}","/**
 * Adds or updates an item in the times series and sends a
 * {@link SeriesChangeEvent} to all registered listeners.
 *
 * @param period  the time period to add/update (<code>null</code> not
 *                permitted).
 * @param value  the new value.
 *
 * @return A copy of the overwritten data item, or <code>null</code> if no
 *         item was overwritten.
 */"
"public TimeSeriesDataItem addOrUpdate(TimeSeriesDataItem item) {
    if (item == null) {
        throw new IllegalArgumentException(""Null 'period' argument."");
    }
    Class periodClass = item.getPeriod().getClass();
    if (this.timePeriodClass == null) {
        this.timePeriodClass = periodClass;
    } else if (!this.timePeriodClass.equals(periodClass)) {
        String msg = ""You are trying to add data where the time "" + ""period class is "" + periodClass.getName() + "", but the TimeSeries is expecting an instance of "" + this.timePeriodClass.getName() + ""."";
        throw new SeriesException(msg);
    }
    TimeSeriesDataItem overwritten = null;
    int index = Collections.binarySearch(this.data, item);
    if (index >= 0) {
        TimeSeriesDataItem existing = (TimeSeriesDataItem) this.data.get(index);
        overwritten = (TimeSeriesDataItem) existing.clone();
        // figure out if we need to iterate through all the y-values
        // to find the revised minY / maxY
        boolean iterate = false;
        Number oldYN = existing.getValue();
        double oldY = oldYN != null ? oldYN.doubleValue() : Double.NaN;
        if (!Double.isNaN(oldY)) {
            iterate = oldY <= this.minY || oldY >= this.maxY;
        }
        existing.setValue(item.getValue());
        if (iterate) {
            findBoundsByIteration();
        } else if (item.getValue() != null) {
            double yy = item.getValue().doubleValue();
            this.minY = minIgnoreNaN(this.minY, yy);
            this.maxY = minIgnoreNaN(this.maxY, yy);
        }
    } else {
        item = (TimeSeriesDataItem) item.clone();
        this.data.add(-index - 1, item);
        updateBoundsForAddedItem(item);
        // check if this addition will exceed the maximum item count...
        if (getItemCount() > this.maximumItemCount) {
            TimeSeriesDataItem d = (TimeSeriesDataItem) this.data.remove(0);
            updateBoundsForRemovedItem(d);
        }
    }
    // remove old items if necessary, but
    removeAgedItems(false);
    // don't notify anyone, because that
    // happens next anyway...
    fireSeriesChanged();
    return overwritten;
}","public void test090182() throws Throwable {
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
    Month month0 = new Month(date0);
    TimeSeries timeSeries0 = new TimeSeries(month0, """", ""1"");
    // Undeclared exception!
    try {
        timeSeries0.addOrUpdate((TimeSeriesDataItem) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'period' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}","/**
 * Adds or updates an item in the times series and sends a
 * {@link SeriesChangeEvent} to all registered listeners.
 *
 * @param item  the data item (<code>null</code> not permitted).
 *
 * @return A copy of the overwritten data item, or <code>null</code> if no
 *         item was overwritten.
 *
 * @since 1.0.14
 */"
"public double getMaxY() {
    return this.maxY;
}","public void test091183() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    timeSeries0.add((RegularTimePeriod) week0, (Number) 1, true);
    timeSeries0.addAndOrUpdate(timeSeries0);
    assertEquals(1.0, timeSeries0.getMaxY(), 0.01);
}","/**
 * Returns the largest y-value in the series, ignoring any Double.NaN
 * values.  This method returns Double.NaN if there is no largest y-value
 * (for example, when the series is empty).
 *
 * @return The largest y-value.
 *
 * @see #getMinY()
 *
 * @since 1.0.14
 */"
"public double getMinY() {
    return this.minY;
}","public void test091184() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    timeSeries0.add((RegularTimePeriod) week0, (Number) 1, true);
    timeSeries0.addAndOrUpdate(timeSeries0);
    assertEquals(1.0, timeSeries0.getMinY(), 0.01);
}","/**
 * Returns the smallest y-value in the series, ignoring any null and
 * Double.NaN values.  This method returns Double.NaN if there is no
 * smallest y-value (for example, when the series is empty).
 *
 * @return The smallest y-value.
 *
 * @see #getMaxY()
 *
 * @since 1.0.14
 */"
"public void update(RegularTimePeriod period, Number value) {
    TimeSeriesDataItem temp = new TimeSeriesDataItem(period, value);
    int index = Collections.binarySearch(this.data, temp);
    if (index < 0) {
        throw new SeriesException(""There is no existing value for the "" + ""specified 'period'."");
    }
    update(index, value);
}","public void test092185() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0);
    // Undeclared exception!
    try {
        timeSeries0.update((RegularTimePeriod) hour0, (Number) hour0.FIRST_HOUR_IN_DAY);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // There is no existing value for the specified 'period'.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}","/**
 * Updates (changes) the value for a time period.  Throws a
 * {@link SeriesException} if the period does not exist.
 *
 * @param period  the period (<code>null</code> not permitted).
 * @param value  the value (<code>null</code> permitted).
 */"
"public double getMinY() {
    return this.minY;
}","public void test093186() throws Throwable {
    Year year0 = new Year();
    TimeSeries timeSeries0 = new TimeSeries(year0);
    timeSeries0.add((RegularTimePeriod) year0, (Number) (-9999), true);
    Long long0 = new Long(4440L);
    timeSeries0.update((RegularTimePeriod) year0, (Number) long0);
    assertEquals(4440.0, timeSeries0.getMinY(), 0.01);
}","/**
 * Returns the smallest y-value in the series, ignoring any null and
 * Double.NaN values.  This method returns Double.NaN if there is no
 * smallest y-value (for example, when the series is empty).
 *
 * @return The smallest y-value.
 *
 * @see #getMaxY()
 *
 * @since 1.0.14
 */"
"public double getMinY() {
    return this.minY;
}","public void test094187() throws Throwable {
    Hour hour0 = new Hour();
    RegularTimePeriod regularTimePeriod0 = hour0.next();
    TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
    timeSeries0.add((RegularTimePeriod) hour0, (double) 23);
    timeSeries0.add(regularTimePeriod0, (double) 23, false);
    int int0 = timeSeries0.getIndex(regularTimePeriod0);
    assertEquals(23.0, timeSeries0.getMinY(), 0.01);
}","/**
 * Returns the smallest y-value in the series, ignoring any null and
 * Double.NaN values.  This method returns Double.NaN if there is no
 * smallest y-value (for example, when the series is empty).
 *
 * @return The smallest y-value.
 *
 * @see #getMaxY()
 *
 * @since 1.0.14
 */"
"public int getIndex(RegularTimePeriod period) {
    if (period == null) {
        throw new IllegalArgumentException(""Null 'period' argument."");
    }
    TimeSeriesDataItem dummy = new TimeSeriesDataItem(period, Integer.MIN_VALUE);
    return Collections.binarySearch(this.data, dummy);
}","public void test094188() throws Throwable {
    Hour hour0 = new Hour();
    RegularTimePeriod regularTimePeriod0 = hour0.next();
    TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
    timeSeries0.add((RegularTimePeriod) hour0, (double) 23);
    timeSeries0.add(regularTimePeriod0, (double) 23, false);
    int int0 = timeSeries0.getIndex(regularTimePeriod0);
    assertEquals(1, int0);
}","/**
 * Returns the index for the item (if any) that corresponds to a time
 * period.
 *
 * @param period  the time period (<code>null</code> not permitted).
 *
 * @return The index.
 */"
"public void add(RegularTimePeriod period, double value, boolean notify) {
    // defer argument checking...
    TimeSeriesDataItem item = new TimeSeriesDataItem(period, value);
    add(item, notify);
}","public void test095189() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0);
    timeSeries0.add((RegularTimePeriod) hour0, (double) 23);
    // Undeclared exception!
    try {
        timeSeries0.add((RegularTimePeriod) hour0, (double) 23, false);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // You are attempting to add an observation for the time period [20,14/2/2014] but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}","/**
 * Adds a new data item to the series and sends a {@link SeriesChangeEvent}
 * to all registered listeners.
 *
 * @param period  the time period (<code>null</code> not permitted).
 * @param value  the value.
 * @param notify  notify listeners?
 */"
"public void add(TimeSeriesDataItem item, boolean notify) {
    if (item == null) {
        throw new IllegalArgumentException(""Null 'item' argument."");
    }
    item = (TimeSeriesDataItem) item.clone();
    Class c = item.getPeriod().getClass();
    if (this.timePeriodClass == null) {
        this.timePeriodClass = c;
    } else if (!this.timePeriodClass.equals(c)) {
        StringBuffer b = new StringBuffer();
        b.append(""You are trying to add data where the time period class "");
        b.append(""is "");
        b.append(item.getPeriod().getClass().getName());
        b.append("", but the TimeSeries is expecting an instance of "");
        b.append(this.timePeriodClass.getName());
        b.append(""."");
        throw new SeriesException(b.toString());
    }
    // make the change (if it's not a duplicate time period)...
    boolean added = false;
    int count = getItemCount();
    if (count == 0) {
        this.data.add(item);
        added = true;
    } else {
        RegularTimePeriod last = getTimePeriod(getItemCount() - 1);
        if (item.getPeriod().compareTo(last) > 0) {
            this.data.add(item);
            added = true;
        } else {
            int index = Collections.binarySearch(this.data, item);
            if (index < 0) {
                this.data.add(-index - 1, item);
                added = true;
            } else {
                StringBuffer b = new StringBuffer();
                b.append(""You are attempting to add an observation for "");
                b.append(""the time period "");
                b.append(item.getPeriod().toString());
                b.append("" but the series already contains an observation"");
                b.append("" for that time period. Duplicates are not "");
                b.append(""permitted.  Try using the addOrUpdate() method."");
                throw new SeriesException(b.toString());
            }
        }
    }
    if (added) {
        updateBoundsForAddedItem(item);
        // check if this addition will exceed the maximum item count...
        if (getItemCount() > this.maximumItemCount) {
            TimeSeriesDataItem d = (TimeSeriesDataItem) this.data.remove(0);
            updateBoundsForRemovedItem(d);
        }
        // remove old items if necessary, but
        removeAgedItems(false);
        // don't notify anyone, because that
        // happens next anyway...
        if (notify) {
            fireSeriesChanged();
        }
    }
}","public void test096190() throws Throwable {
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""");
    Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
    Minute minute0 = new Minute(date0);
    TimeSeries timeSeries0 = new TimeSeries(minute0, "".dj8CYsoz`2xA[o"", """");
    // Undeclared exception!
    try {
        timeSeries0.add((TimeSeriesDataItem) null, false);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'item' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}","/**
 * Adds a data item to the series and sends a {@link SeriesChangeEvent} to
 * all registered listeners.
 *
 * @param item  the (timeperiod, value) pair (<code>null</code> not
 *              permitted).
 * @param notify  notify listeners?
 */"
"public double getMaxY() {
    return this.maxY;
}","public void test097191() throws Throwable {
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""");
    Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
    Minute minute0 = new Minute(date0);
    TimeSeries timeSeries0 = new TimeSeries(minute0, "".dj8CYsoz`2xA[o"", """");
    timeSeries0.getValue((RegularTimePeriod) minute0);
    assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
}","/**
 * Returns the largest y-value in the series, ignoring any Double.NaN
 * values.  This method returns Double.NaN if there is no largest y-value
 * (for example, when the series is empty).
 *
 * @return The largest y-value.
 *
 * @see #getMinY()
 *
 * @since 1.0.14
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test097192() throws Throwable {
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""");
    Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
    Minute minute0 = new Minute(date0);
    TimeSeries timeSeries0 = new TimeSeries(minute0, "".dj8CYsoz`2xA[o"", """");
    timeSeries0.getValue((RegularTimePeriod) minute0);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public double getMinY() {
    return this.minY;
}","public void test097193() throws Throwable {
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""");
    Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
    Minute minute0 = new Minute(date0);
    TimeSeries timeSeries0 = new TimeSeries(minute0, "".dj8CYsoz`2xA[o"", """");
    timeSeries0.getValue((RegularTimePeriod) minute0);
    assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
}","/**
 * Returns the smallest y-value in the series, ignoring any null and
 * Double.NaN values.  This method returns Double.NaN if there is no
 * smallest y-value (for example, when the series is empty).
 *
 * @return The smallest y-value.
 *
 * @see #getMaxY()
 *
 * @since 1.0.14
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test097194() throws Throwable {
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""");
    Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
    Minute minute0 = new Minute(date0);
    TimeSeries timeSeries0 = new TimeSeries(minute0, "".dj8CYsoz`2xA[o"", """");
    timeSeries0.getValue((RegularTimePeriod) minute0);
    assertEquals("".dj8CYsoz`2xA[o"", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test097195() throws Throwable {
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""");
    Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
    Minute minute0 = new Minute(date0);
    TimeSeries timeSeries0 = new TimeSeries(minute0, "".dj8CYsoz`2xA[o"", """");
    timeSeries0.getValue((RegularTimePeriod) minute0);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test097196() throws Throwable {
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""");
    Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
    Minute minute0 = new Minute(date0);
    TimeSeries timeSeries0 = new TimeSeries(minute0, "".dj8CYsoz`2xA[o"", """");
    timeSeries0.getValue((RegularTimePeriod) minute0);
    assertEquals("""", timeSeries0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"TimeSeriesDataItem getRawDataItem(RegularTimePeriod period) {
    int index = getIndex(period);
    if (index >= 0) {
        return (TimeSeriesDataItem) this.data.get(index);
    } else {
        return null;
    }
}","public void test098197() throws Throwable {
    SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2922);
    Day day0 = new Day(spreadsheetDate0);
    TimeSeries timeSeries0 = new TimeSeries(day0, ""You are trying to add data where the time period class "", ""You are trying to add data where the time period class "");
    // Undeclared exception!
    try {
        timeSeries0.getRawDataItem((RegularTimePeriod) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'period' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}","/**
 * Returns a data item for the series.  This method returns the object
 * that is used for the underlying storage - you should not modify the
 * contents of the returned value unless you know what you are doing.
 *
 * @param period  the item index (zero-based).
 *
 * @return The data item.
 *
 * @see #getDataItem(RegularTimePeriod)
 *
 * @since 1.0.14
 */"
"public int getItemCount() {
    return this.data.size();
}","public void test099198() throws Throwable {
    TimeSeries timeSeries0 = new TimeSeries("""");
    TimeSeries timeSeries1 = new TimeSeries("""");
    Year year0 = new Year((-367));
    Week week0 = new Week((-1645), year0);
    timeSeries1.add((RegularTimePeriod) week0, 2147.604);
    timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries1);
    assertEquals(1, timeSeries1.getItemCount());
}","/**
 * Returns the number of items in the series.
 *
 * @return The item count.
 */"
"public double getMaxY() {
    return this.maxY;
}","public void test099199() throws Throwable {
    TimeSeries timeSeries0 = new TimeSeries("""");
    TimeSeries timeSeries1 = new TimeSeries("""");
    Year year0 = new Year((-367));
    Week week0 = new Week((-1645), year0);
    timeSeries1.add((RegularTimePeriod) week0, 2147.604);
    timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries1);
    assertEquals(2147.604, timeSeries1.getMaxY(), 0.01);
}","/**
 * Returns the largest y-value in the series, ignoring any Double.NaN
 * values.  This method returns Double.NaN if there is no largest y-value
 * (for example, when the series is empty).
 *
 * @return The largest y-value.
 *
 * @see #getMinY()
 *
 * @since 1.0.14
 */"
"public int getItemCount() {
    return this.data.size();
}","public void test100200() throws Throwable {
    TimeSeries timeSeries0 = new TimeSeries("""");
    Year year0 = new Year((-367));
    Week week0 = new Week((-1645), year0);
    timeSeries0.add((RegularTimePeriod) week0, 2147.604);
    timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries0);
    assertEquals(1, timeSeries0.getItemCount());
}","/**
 * Returns the number of items in the series.
 *
 * @return The item count.
 */"
"public int getItemCount() {
    return this.data.size();
}","public void test101201() throws Throwable {
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
    Month month0 = new Month(date0);
    TimeSeries timeSeries0 = new TimeSeries(month0, """", ""1"");
    timeSeries0.addOrUpdate((RegularTimePeriod) month0, 1409.9202);
    timeSeries0.getTimePeriods();
    assertEquals(1, timeSeries0.getItemCount());
}","/**
 * Returns the number of items in the series.
 *
 * @return The item count.
 */"
"public double getMinY() {
    return this.minY;
}","public void test102202() throws Throwable {
    SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2922);
    Day day0 = new Day(spreadsheetDate0);
    TimeSeries timeSeries0 = new TimeSeries(day0, ""You are trying to add data where the time period class "", ""You are trying to add data where the time period class "");
    timeSeries0.add((RegularTimePeriod) day0, (double) 3, true);
    timeSeries0.getRawDataItem(day0);
    assertEquals(3.0, timeSeries0.getMinY(), 0.01);
}","/**
 * Returns the smallest y-value in the series, ignoring any null and
 * Double.NaN values.  This method returns Double.NaN if there is no
 * smallest y-value (for example, when the series is empty).
 *
 * @return The smallest y-value.
 *
 * @see #getMaxY()
 *
 * @since 1.0.14
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test103203() throws Throwable {
    Year year0 = new Year();
    TimeSeries timeSeries0 = new TimeSeries(year0);
    Week week0 = new Week();
    timeSeries0.getRawDataItem(week0);
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test103204() throws Throwable {
    Year year0 = new Year();
    TimeSeries timeSeries0 = new TimeSeries(year0);
    Week week0 = new Week();
    timeSeries0.getRawDataItem(week0);
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test103205() throws Throwable {
    Year year0 = new Year();
    TimeSeries timeSeries0 = new TimeSeries(year0);
    Week week0 = new Week();
    timeSeries0.getRawDataItem(week0);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test103206() throws Throwable {
    Year year0 = new Year();
    TimeSeries timeSeries0 = new TimeSeries(year0);
    Week week0 = new Week();
    timeSeries0.getRawDataItem(week0);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public double getMaxY() {
    return this.maxY;
}","public void test103207() throws Throwable {
    Year year0 = new Year();
    TimeSeries timeSeries0 = new TimeSeries(year0);
    Week week0 = new Week();
    timeSeries0.getRawDataItem(week0);
    assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
}","/**
 * Returns the largest y-value in the series, ignoring any Double.NaN
 * values.  This method returns Double.NaN if there is no largest y-value
 * (for example, when the series is empty).
 *
 * @return The largest y-value.
 *
 * @see #getMinY()
 *
 * @since 1.0.14
 */"
"public double getMinY() {
    return this.minY;
}","public void test103208() throws Throwable {
    Year year0 = new Year();
    TimeSeries timeSeries0 = new TimeSeries(year0);
    Week week0 = new Week();
    timeSeries0.getRawDataItem(week0);
    assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
}","/**
 * Returns the smallest y-value in the series, ignoring any null and
 * Double.NaN values.  This method returns Double.NaN if there is no
 * smallest y-value (for example, when the series is empty).
 *
 * @return The smallest y-value.
 *
 * @see #getMaxY()
 *
 * @since 1.0.14
 */"
"public double getMaxY() {
    return this.maxY;
}","public void test104209() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    timeSeries0.getDataItem((RegularTimePeriod) week0);
    assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
}","/**
 * Returns the largest y-value in the series, ignoring any Double.NaN
 * values.  This method returns Double.NaN if there is no largest y-value
 * (for example, when the series is empty).
 *
 * @return The largest y-value.
 *
 * @see #getMinY()
 *
 * @since 1.0.14
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test104210() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    timeSeries0.getDataItem((RegularTimePeriod) week0);
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test104211() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    timeSeries0.getDataItem((RegularTimePeriod) week0);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public double getMinY() {
    return this.minY;
}","public void test104212() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    timeSeries0.getDataItem((RegularTimePeriod) week0);
    assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
}","/**
 * Returns the smallest y-value in the series, ignoring any null and
 * Double.NaN values.  This method returns Double.NaN if there is no
 * smallest y-value (for example, when the series is empty).
 *
 * @return The smallest y-value.
 *
 * @see #getMaxY()
 *
 * @since 1.0.14
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test104213() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    timeSeries0.getDataItem((RegularTimePeriod) week0);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test104214() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    timeSeries0.getDataItem((RegularTimePeriod) week0);
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public void setMaximumItemAge(long periods) {
    if (periods < 0) {
        throw new IllegalArgumentException(""Negative 'periods' argument."");
    }
    this.maximumItemAge = periods;
    // remove old items and notify if necessary
    removeAgedItems(true);
}","public void test105215() throws Throwable {
    Quarter quarter0 = new Quarter();
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."");
    // Undeclared exception!
    try {
        timeSeries0.setMaximumItemAge((-22L));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Negative 'periods' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}","/**
 * Sets the number of time units in the 'history' for the series.  This
 * provides one mechanism for automatically dropping old data from the
 * time series. For example, if a series contains daily data, you might set
 * the history count to 30.  Then, when you add a new data item, all data
 * items more than 30 days older than the latest value are automatically
 * dropped from the series.
 *
 * @param periods  the number of time periods.
 *
 * @see #getMaximumItemAge()
 */"
"public int getItemCount() {
    return this.data.size();
}","public void test106216() throws Throwable {
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""");
    Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
    Minute minute0 = new Minute(date0);
    TimeSeries timeSeries0 = new TimeSeries(minute0, "".dj8CYsoz`2xA[o"", """");
    timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (Number) 23);
    assertEquals(1, timeSeries0.getItemCount());
}","/**
 * Returns the number of items in the series.
 *
 * @return The item count.
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test106217() throws Throwable {
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""");
    Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
    Minute minute0 = new Minute(date0);
    TimeSeries timeSeries0 = new TimeSeries(minute0, "".dj8CYsoz`2xA[o"", """");
    timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (Number) 23);
    timeSeries0.setMaximumItemCount(0);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public void setMaximumItemCount(int maximum) {
    if (maximum < 0) {
        throw new IllegalArgumentException(""Negative 'maximum' argument."");
    }
    this.maximumItemCount = maximum;
    int count = this.data.size();
    if (count > maximum) {
        delete(0, count - maximum - 1);
    }
}","public void test107218() throws Throwable {
    SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-1493.806316114138), 1018.1621595563996, false, false);
    TimeSeries timeSeries0 = new TimeSeries(simpleHistogramBin0);
    // Undeclared exception!
    try {
        timeSeries0.setMaximumItemCount((-2429));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Negative 'maximum' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}","/**
 * Sets the maximum number of items that will be retained in the series.
 * If you add a new item to the series such that the number of items will
 * exceed the maximum item count, then the FIRST element in the series is
 * automatically removed, ensuring that the maximum item count is not
 * exceeded.
 *
 * @param maximum  the maximum (requires >= 0).
 *
 * @see #getMaximumItemCount()
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test108219() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0);
    timeSeries0.setMaximumItemCount(9999);
    assertEquals(9999, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public double getMaxY() {
    return this.maxY;
}","public void test109220() throws Throwable {
    Second second0 = new Second();
    TimeSeries timeSeries0 = new TimeSeries(second0);
    timeSeries0.add((RegularTimePeriod) second0, (Number) 59);
    double double0 = timeSeries0.getMinY();
    assertEquals(59.0, timeSeries0.getMaxY(), 0.01);
}","/**
 * Returns the largest y-value in the series, ignoring any Double.NaN
 * values.  This method returns Double.NaN if there is no largest y-value
 * (for example, when the series is empty).
 *
 * @return The largest y-value.
 *
 * @see #getMinY()
 *
 * @since 1.0.14
 */"
"public double getMinY() {
    return this.minY;
}","public void test109221() throws Throwable {
    Second second0 = new Second();
    TimeSeries timeSeries0 = new TimeSeries(second0);
    timeSeries0.add((RegularTimePeriod) second0, (Number) 59);
    double double0 = timeSeries0.getMinY();
    assertEquals(59.0, double0, 0.01);
}","/**
 * Returns the smallest y-value in the series, ignoring any null and
 * Double.NaN values.  This method returns Double.NaN if there is no
 * smallest y-value (for example, when the series is empty).
 *
 * @return The smallest y-value.
 *
 * @see #getMaxY()
 *
 * @since 1.0.14
 */"
"public void add(TimeSeriesDataItem item, boolean notify) {
    if (item == null) {
        throw new IllegalArgumentException(""Null 'item' argument."");
    }
    item = (TimeSeriesDataItem) item.clone();
    Class c = item.getPeriod().getClass();
    if (this.timePeriodClass == null) {
        this.timePeriodClass = c;
    } else if (!this.timePeriodClass.equals(c)) {
        StringBuffer b = new StringBuffer();
        b.append(""You are trying to add data where the time period class "");
        b.append(""is "");
        b.append(item.getPeriod().getClass().getName());
        b.append("", but the TimeSeries is expecting an instance of "");
        b.append(this.timePeriodClass.getName());
        b.append(""."");
        throw new SeriesException(b.toString());
    }
    // make the change (if it's not a duplicate time period)...
    boolean added = false;
    int count = getItemCount();
    if (count == 0) {
        this.data.add(item);
        added = true;
    } else {
        RegularTimePeriod last = getTimePeriod(getItemCount() - 1);
        if (item.getPeriod().compareTo(last) > 0) {
            this.data.add(item);
            added = true;
        } else {
            int index = Collections.binarySearch(this.data, item);
            if (index < 0) {
                this.data.add(-index - 1, item);
                added = true;
            } else {
                StringBuffer b = new StringBuffer();
                b.append(""You are attempting to add an observation for "");
                b.append(""the time period "");
                b.append(item.getPeriod().toString());
                b.append("" but the series already contains an observation"");
                b.append("" for that time period. Duplicates are not "");
                b.append(""permitted.  Try using the addOrUpdate() method."");
                throw new SeriesException(b.toString());
            }
        }
    }
    if (added) {
        updateBoundsForAddedItem(item);
        // check if this addition will exceed the maximum item count...
        if (getItemCount() > this.maximumItemCount) {
            TimeSeriesDataItem d = (TimeSeriesDataItem) this.data.remove(0);
            updateBoundsForRemovedItem(d);
        }
        // remove old items if necessary, but
        removeAgedItems(false);
        // don't notify anyone, because that
        // happens next anyway...
        if (notify) {
            fireSeriesChanged();
        }
    }
}","public void test110222() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0);
    timeSeries0.add((RegularTimePeriod) hour0, (double) 23);
    Year year0 = new Year();
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, (Number) 23);
    // Undeclared exception!
    try {
        timeSeries0.add(timeSeriesDataItem0, false);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // You are trying to add data where the time period class is org.jfree.data.time.Year, but the TimeSeries is expecting an instance of org.jfree.data.time.Hour.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}","/**
 * Adds a data item to the series and sends a {@link SeriesChangeEvent} to
 * all registered listeners.
 *
 * @param item  the (timeperiod, value) pair (<code>null</code> not
 *              permitted).
 * @param notify  notify listeners?
 */"
"public int getItemCount() {
    return this.data.size();
}","public void test111223() throws Throwable {
    Quarter quarter0 = new Quarter();
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."");
    TimeSeries timeSeries1 = (TimeSeries) timeSeries0.clone();
    timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (Number) 1);
    timeSeries1.addAndOrUpdate(timeSeries0);
    assertEquals(1, timeSeries0.getItemCount());
}","/**
 * Returns the number of items in the series.
 *
 * @return The item count.
 */"
"public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof TimeSeries)) {
        return false;
    }
    TimeSeries that = (TimeSeries) obj;
    if (!ObjectUtilities.equal(getDomainDescription(), that.getDomainDescription())) {
        return false;
    }
    if (!ObjectUtilities.equal(getRangeDescription(), that.getRangeDescription())) {
        return false;
    }
    if (!ObjectUtilities.equal(this.timePeriodClass, that.timePeriodClass)) {
        return false;
    }
    if (getMaximumItemAge() != that.getMaximumItemAge()) {
        return false;
    }
    if (getMaximumItemCount() != that.getMaximumItemCount()) {
        return false;
    }
    int count = getItemCount();
    if (count != that.getItemCount()) {
        return false;
    }
    if (!ObjectUtilities.equal(this.data, that.data)) {
        return false;
    }
    return super.equals(obj);
}","public void test111224() throws Throwable {
    Quarter quarter0 = new Quarter();
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."");
    TimeSeries timeSeries1 = (TimeSeries) timeSeries0.clone();
    timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (Number) 1);
    timeSeries1.addAndOrUpdate(timeSeries0);
    assertTrue(timeSeries0.equals((Object) timeSeries1));
}","/**
 * Tests the series for equality with an arbitrary object.
 *
 * @param obj  the object to test against (<code>null</code> permitted).
 *
 * @return A boolean.
 */"
"public RegularTimePeriod getNextTimePeriod() {
    RegularTimePeriod last = getTimePeriod(getItemCount() - 1);
    return last.next();
}","public void test112225() throws Throwable {
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
    Month month0 = new Month(date0);
    TimeSeries timeSeries0 = new TimeSeries(month0, """", ""1"");
    // Undeclared exception!
    try {
        timeSeries0.getNextTimePeriod();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * Returns a time period that would be the next in sequence on the end of
 * the time series.
 *
 * @return The next time period.
 */"
"public int getItemCount() {
    return this.data.size();
}","public void test113226() throws Throwable {
    Quarter quarter0 = new Quarter();
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""Null 'seriesKeys' argument."", ""Null 'seriesKeys' argument."");
    timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (double) 4);
    timeSeries0.getDataItem((RegularTimePeriod) quarter0);
    assertEquals(1, timeSeries0.getItemCount());
}","/**
 * Returns the number of items in the series.
 *
 * @return The item count.
 */"
"public void delete(int start, int end) {
    delete(start, end, true);
}","public void test114227() throws Throwable {
    Year year0 = new Year();
    TimeSeries timeSeries0 = new TimeSeries(year0);
    // Undeclared exception!
    try {
        timeSeries0.delete(0, 0);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 0, Size: 0
        //
        verifyException(""java.util.ArrayList"", e);
    }
}","/**
 * Deletes data from start until end index (end inclusive).
 *
 * @param start  the index of the first period to delete.
 * @param end  the index of the last period to delete.
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test115228() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0);
    String string0 = timeSeries0.getDomainDescription();
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public double getMinY() {
    return this.minY;
}","public void test115229() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0);
    String string0 = timeSeries0.getDomainDescription();
    assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
}","/**
 * Returns the smallest y-value in the series, ignoring any null and
 * Double.NaN values.  This method returns Double.NaN if there is no
 * smallest y-value (for example, when the series is empty).
 *
 * @return The smallest y-value.
 *
 * @see #getMaxY()
 *
 * @since 1.0.14
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test115230() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0);
    String string0 = timeSeries0.getDomainDescription();
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test115231() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0);
    String string0 = timeSeries0.getDomainDescription();
    assertEquals(""Time"", string0);
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test115232() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0);
    String string0 = timeSeries0.getDomainDescription();
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public double getMaxY() {
    return this.maxY;
}","public void test115233() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0);
    String string0 = timeSeries0.getDomainDescription();
    assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
}","/**
 * Returns the largest y-value in the series, ignoring any Double.NaN
 * values.  This method returns Double.NaN if there is no largest y-value
 * (for example, when the series is empty).
 *
 * @return The largest y-value.
 *
 * @see #getMinY()
 *
 * @since 1.0.14
 */"
"public double getMinY() {
    return this.minY;
}","public void test116234() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0);
    String string0 = timeSeries0.getRangeDescription();
    assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
}","/**
 * Returns the smallest y-value in the series, ignoring any null and
 * Double.NaN values.  This method returns Double.NaN if there is no
 * smallest y-value (for example, when the series is empty).
 *
 * @return The smallest y-value.
 *
 * @see #getMaxY()
 *
 * @since 1.0.14
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test116235() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0);
    String string0 = timeSeries0.getRangeDescription();
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test116236() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0);
    String string0 = timeSeries0.getRangeDescription();
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test116237() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0);
    String string0 = timeSeries0.getRangeDescription();
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test116238() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0);
    String string0 = timeSeries0.getRangeDescription();
    assertEquals(""Value"", string0);
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public double getMaxY() {
    return this.maxY;
}","public void test116239() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0);
    String string0 = timeSeries0.getRangeDescription();
    assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
}","/**
 * Returns the largest y-value in the series, ignoring any Double.NaN
 * values.  This method returns Double.NaN if there is no largest y-value
 * (for example, when the series is empty).
 *
 * @return The largest y-value.
 *
 * @see #getMinY()
 *
 * @since 1.0.14
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test117240() throws Throwable {
    MockDate mockDate0 = new MockDate(1235, 400, 1235);
    OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1.0), (-1.0), (-1.0), (-2.147483648E9), 611.4873052);
    TimeSeries timeSeries0 = new TimeSeries(oHLCDataItem0, (String) null, ""JG#sgA$$!"");
    long long0 = timeSeries0.getMaximumItemAge();
    assertEquals(9223372036854775807L, long0);
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test117241() throws Throwable {
    MockDate mockDate0 = new MockDate(1235, 400, 1235);
    OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1.0), (-1.0), (-1.0), (-2.147483648E9), 611.4873052);
    TimeSeries timeSeries0 = new TimeSeries(oHLCDataItem0, (String) null, ""JG#sgA$$!"");
    long long0 = timeSeries0.getMaximumItemAge();
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public double getMinY() {
    return this.minY;
}","public void test117242() throws Throwable {
    MockDate mockDate0 = new MockDate(1235, 400, 1235);
    OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1.0), (-1.0), (-1.0), (-2.147483648E9), 611.4873052);
    TimeSeries timeSeries0 = new TimeSeries(oHLCDataItem0, (String) null, ""JG#sgA$$!"");
    long long0 = timeSeries0.getMaximumItemAge();
    assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
}","/**
 * Returns the smallest y-value in the series, ignoring any null and
 * Double.NaN values.  This method returns Double.NaN if there is no
 * smallest y-value (for example, when the series is empty).
 *
 * @return The smallest y-value.
 *
 * @see #getMaxY()
 *
 * @since 1.0.14
 */"
"public double getMaxY() {
    return this.maxY;
}","public void test117243() throws Throwable {
    MockDate mockDate0 = new MockDate(1235, 400, 1235);
    OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1.0), (-1.0), (-1.0), (-2.147483648E9), 611.4873052);
    TimeSeries timeSeries0 = new TimeSeries(oHLCDataItem0, (String) null, ""JG#sgA$$!"");
    long long0 = timeSeries0.getMaximumItemAge();
    assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
}","/**
 * Returns the largest y-value in the series, ignoring any Double.NaN
 * values.  This method returns Double.NaN if there is no largest y-value
 * (for example, when the series is empty).
 *
 * @return The largest y-value.
 *
 * @see #getMinY()
 *
 * @since 1.0.14
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test117244() throws Throwable {
    MockDate mockDate0 = new MockDate(1235, 400, 1235);
    OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1.0), (-1.0), (-1.0), (-2.147483648E9), 611.4873052);
    TimeSeries timeSeries0 = new TimeSeries(oHLCDataItem0, (String) null, ""JG#sgA$$!"");
    long long0 = timeSeries0.getMaximumItemAge();
    assertEquals(""JG#sgA$$!"", timeSeries0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test118245() throws Throwable {
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""");
    Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
    Week week0 = new Week(date0);
    TimeSeries timeSeries0 = new TimeSeries(week0, """", ""There is no existing value for the specified 'period'."");
    assertEquals(""There is no existing value for the specified 'period'."", timeSeries0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test118246() throws Throwable {
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""");
    Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
    Week week0 = new Week(date0);
    TimeSeries timeSeries0 = new TimeSeries(week0, """", ""There is no existing value for the specified 'period'."");
    timeSeries0.setRangeDescription("""");
    assertEquals("""", timeSeries0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public Number getValue(int index) {
    return getRawDataItem(index).getValue();
}","public void test119247() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0);
    // Undeclared exception!
    try {
        timeSeries0.getValue(0);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 0, Size: 0
        //
        verifyException(""java.util.ArrayList"", e);
    }
}","/**
 * Returns the value at the specified index.
 *
 * @param index  index of a value.
 *
 * @return The value (possibly <code>null</code>).
 */"
"public RegularTimePeriod getTimePeriod(int index) {
    return getRawDataItem(index).getPeriod();
}","public void test120248() throws Throwable {
    Year year0 = new Year();
    TimeSeries timeSeries0 = new TimeSeries(year0);
    // Undeclared exception!
    try {
        timeSeries0.getTimePeriod((-1605));
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * Returns the time period at the specified index.
 *
 * @param index  the index of the data item.
 *
 * @return The time period.
 */"
"public double getMaxY() {
    return this.maxY;
}","public void test121249() throws Throwable {
    Year year0 = new Year();
    TimeSeries timeSeries0 = new TimeSeries(year0);
    timeSeries0.getTimePeriodClass();
    assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
}","/**
 * Returns the largest y-value in the series, ignoring any Double.NaN
 * values.  This method returns Double.NaN if there is no largest y-value
 * (for example, when the series is empty).
 *
 * @return The largest y-value.
 *
 * @see #getMinY()
 *
 * @since 1.0.14
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test121250() throws Throwable {
    Year year0 = new Year();
    TimeSeries timeSeries0 = new TimeSeries(year0);
    timeSeries0.getTimePeriodClass();
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test121251() throws Throwable {
    Year year0 = new Year();
    TimeSeries timeSeries0 = new TimeSeries(year0);
    timeSeries0.getTimePeriodClass();
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test121252() throws Throwable {
    Year year0 = new Year();
    TimeSeries timeSeries0 = new TimeSeries(year0);
    timeSeries0.getTimePeriodClass();
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public double getMinY() {
    return this.minY;
}","public void test121253() throws Throwable {
    Year year0 = new Year();
    TimeSeries timeSeries0 = new TimeSeries(year0);
    timeSeries0.getTimePeriodClass();
    assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
}","/**
 * Returns the smallest y-value in the series, ignoring any null and
 * Double.NaN values.  This method returns Double.NaN if there is no
 * smallest y-value (for example, when the series is empty).
 *
 * @return The smallest y-value.
 *
 * @see #getMaxY()
 *
 * @since 1.0.14
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test121254() throws Throwable {
    Year year0 = new Year();
    TimeSeries timeSeries0 = new TimeSeries(year0);
    timeSeries0.getTimePeriodClass();
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public double getMinY() {
    return this.minY;
}","public void test122255() throws Throwable {
    TimeSeries timeSeries0 = new TimeSeries(""You are trying to add data where the time period class "", """", """");
    timeSeries0.getItems();
    assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
}","/**
 * Returns the smallest y-value in the series, ignoring any null and
 * Double.NaN values.  This method returns Double.NaN if there is no
 * smallest y-value (for example, when the series is empty).
 *
 * @return The smallest y-value.
 *
 * @see #getMaxY()
 *
 * @since 1.0.14
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test122256() throws Throwable {
    TimeSeries timeSeries0 = new TimeSeries(""You are trying to add data where the time period class "", """", """");
    timeSeries0.getItems();
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test122257() throws Throwable {
    TimeSeries timeSeries0 = new TimeSeries(""You are trying to add data where the time period class "", """", """");
    timeSeries0.getItems();
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public double getMaxY() {
    return this.maxY;
}","public void test122258() throws Throwable {
    TimeSeries timeSeries0 = new TimeSeries(""You are trying to add data where the time period class "", """", """");
    timeSeries0.getItems();
    assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
}","/**
 * Returns the largest y-value in the series, ignoring any Double.NaN
 * values.  This method returns Double.NaN if there is no largest y-value
 * (for example, when the series is empty).
 *
 * @return The largest y-value.
 *
 * @see #getMinY()
 *
 * @since 1.0.14
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test122259() throws Throwable {
    TimeSeries timeSeries0 = new TimeSeries(""You are trying to add data where the time period class "", """", """");
    timeSeries0.getItems();
    assertEquals("""", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test122260() throws Throwable {
    TimeSeries timeSeries0 = new TimeSeries(""You are trying to add data where the time period class "", """", """");
    timeSeries0.getItems();
    assertEquals("""", timeSeries0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test123261() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0);
    int int0 = timeSeries0.getMaximumItemCount();
    assertEquals(Integer.MAX_VALUE, int0);
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public double getMinY() {
    return this.minY;
}","public void test123262() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0);
    int int0 = timeSeries0.getMaximumItemCount();
    assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
}","/**
 * Returns the smallest y-value in the series, ignoring any null and
 * Double.NaN values.  This method returns Double.NaN if there is no
 * smallest y-value (for example, when the series is empty).
 *
 * @return The smallest y-value.
 *
 * @see #getMaxY()
 *
 * @since 1.0.14
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test123263() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0);
    int int0 = timeSeries0.getMaximumItemCount();
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public double getMaxY() {
    return this.maxY;
}","public void test123264() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0);
    int int0 = timeSeries0.getMaximumItemCount();
    assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
}","/**
 * Returns the largest y-value in the series, ignoring any Double.NaN
 * values.  This method returns Double.NaN if there is no largest y-value
 * (for example, when the series is empty).
 *
 * @return The largest y-value.
 *
 * @see #getMinY()
 *
 * @since 1.0.14
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test123265() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0);
    int int0 = timeSeries0.getMaximumItemCount();
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test123266() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0);
    int int0 = timeSeries0.getMaximumItemCount();
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public int getItemCount() {
    return this.data.size();
}","public void test124267() throws Throwable {
    Year year0 = new Year();
    TimeSeries timeSeries0 = new TimeSeries(year0);
    timeSeries0.add((RegularTimePeriod) year0, (Number) (-9999), true);
    timeSeries0.createCopy((RegularTimePeriod) year0, (RegularTimePeriod) year0);
    assertEquals(1, timeSeries0.getItemCount());
}","/**
 * Returns the number of items in the series.
 *
 * @return The item count.
 */"
"public double getMinY() {
    return this.minY;
}","public void test125268() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0, ""_`S'h$**a[mm`MON"", ""c;AL6dg1"");
    timeSeries0.setDomainDescription(""_`S'h$**a[mm`MON"");
    assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
}","/**
 * Returns the smallest y-value in the series, ignoring any null and
 * Double.NaN values.  This method returns Double.NaN if there is no
 * smallest y-value (for example, when the series is empty).
 *
 * @return The smallest y-value.
 *
 * @see #getMaxY()
 *
 * @since 1.0.14
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test125269() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0, ""_`S'h$**a[mm`MON"", ""c;AL6dg1"");
    timeSeries0.setDomainDescription(""_`S'h$**a[mm`MON"");
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test125270() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0, ""_`S'h$**a[mm`MON"", ""c;AL6dg1"");
    timeSeries0.setDomainDescription(""_`S'h$**a[mm`MON"");
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test125271() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0, ""_`S'h$**a[mm`MON"", ""c;AL6dg1"");
    timeSeries0.setDomainDescription(""_`S'h$**a[mm`MON"");
    assertEquals(""_`S'h$**a[mm`MON"", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public double getMaxY() {
    return this.maxY;
}","public void test125272() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0, ""_`S'h$**a[mm`MON"", ""c;AL6dg1"");
    timeSeries0.setDomainDescription(""_`S'h$**a[mm`MON"");
    assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
}","/**
 * Returns the largest y-value in the series, ignoring any Double.NaN
 * values.  This method returns Double.NaN if there is no largest y-value
 * (for example, when the series is empty).
 *
 * @return The largest y-value.
 *
 * @see #getMinY()
 *
 * @since 1.0.14
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test125273() throws Throwable {
    Hour hour0 = new Hour();
    TimeSeries timeSeries0 = new TimeSeries(hour0, ""_`S'h$**a[mm`MON"", ""c;AL6dg1"");
    timeSeries0.setDomainDescription(""_`S'h$**a[mm`MON"");
    assertEquals(""c;AL6dg1"", timeSeries0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
