focal_method,test_prefix,docstring
"public abstract long getSerialIndex();","public void test000() throws Throwable {
    Week week0 = new Week();
    RegularTimePeriod regularTimePeriod0 = week0.next();
    int int0 = week0.compareTo(regularTimePeriod0);
    assertEquals(106750L, regularTimePeriod0.getSerialIndex());
}","/**
 * Returns a serial index number for the time unit.
 *
 * @return The serial index number.
 */"
"public int compareTo(Object o1) {
    int result;
    // CASE 1 : Comparing to another Week object
    // --------------------------------------------
    if (o1 instanceof Week) {
        Week w = (Week) o1;
        result = this.year - w.getYear().getYear();
        if (result == 0) {
            result = this.week - w.getWeek();
        }
    } else // CASE 2 : Comparing to another TimePeriod object
    // -----------------------------------------------
    if (o1 instanceof RegularTimePeriod) {
        // more difficult case - evaluate later...
        result = 0;
    } else // CASE 3 : Comparing to a non-TimePeriod object
    // ---------------------------------------------
    {
        // consider time periods to be ordered after general objects
        result = 1;
    }
    return result;
}","public void test001() throws Throwable {
    Week week0 = new Week();
    RegularTimePeriod regularTimePeriod0 = week0.next();
    int int0 = week0.compareTo(regularTimePeriod0);
    assertEquals((-1), int0);
}","/**
 * Returns an integer indicating the order of this Week object relative to
 * the specified object:
 *
 * negative == before, zero == same, positive == after.
 *
 * @param o1  the object to compare.
 *
 * @return negative == before, zero == same, positive == after.
 */"
"public abstract long getLastMillisecond();","public void test002() throws Throwable {
    Week week0 = new Week();
    RegularTimePeriod regularTimePeriod0 = week0.next();
    int int0 = week0.compareTo(regularTimePeriod0);
    assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
}","/**
 * Returns the last millisecond of the time period.  This will be
 * determined relative to the time zone specified in the constructor, or
 * in the calendar instance passed in the most recent call to the
 * {@link #peg(Calendar)} method.
 *
 * @return The last millisecond of the time period.
 *
 * @see #getFirstMillisecond()
 */"
"public long getLastMillisecond() {
    return this.lastMillisecond;
}","public void test013() throws Throwable {
    Year year0 = new Year(3388);
    Week week0 = new Week(3388, year0);
    Week week1 = new Week();
    int int0 = week0.compareTo(week1);
    assertEquals(1392409281319L, week1.getLastMillisecond());
}","/**
 * Returns the last millisecond of the week.  This will be
 * determined relative to the time zone specified in the constructor, or
 * in the calendar instance passed in the most recent call to the
 * {@link #peg(Calendar)} method.
 *
 * @return The last millisecond of the week.
 *
 * @see #getFirstMillisecond()
 */"
"public int getWeek() {
    return this.week;
}","public void test014() throws Throwable {
    Year year0 = new Year(3388);
    Week week0 = new Week(3388, year0);
    Week week1 = new Week();
    int int0 = week0.compareTo(week1);
    assertEquals(60, week0.getWeek());
}","/**
 * Returns the week.
 *
 * @return The week.
 */"
"public int compareTo(Object o1) {
    int result;
    // CASE 1 : Comparing to another Week object
    // --------------------------------------------
    if (o1 instanceof Week) {
        Week w = (Week) o1;
        result = this.year - w.getYear().getYear();
        if (result == 0) {
            result = this.week - w.getWeek();
        }
    } else // CASE 2 : Comparing to another TimePeriod object
    // -----------------------------------------------
    if (o1 instanceof RegularTimePeriod) {
        // more difficult case - evaluate later...
        result = 0;
    } else // CASE 3 : Comparing to a non-TimePeriod object
    // ---------------------------------------------
    {
        // consider time periods to be ordered after general objects
        result = 1;
    }
    return result;
}","public void test015() throws Throwable {
    Year year0 = new Year(3388);
    Week week0 = new Week(3388, year0);
    Week week1 = new Week();
    int int0 = week0.compareTo(week1);
    assertEquals(1374, int0);
}","/**
 * Returns an integer indicating the order of this Week object relative to
 * the specified object:
 *
 * negative == before, zero == same, positive == after.
 *
 * @param o1  the object to compare.
 *
 * @return negative == before, zero == same, positive == after.
 */"
"public long getSerialIndex() {
    return this.year * 53L + this.week;
}","public void test016() throws Throwable {
    Year year0 = new Year(3388);
    Week week0 = new Week(3388, year0);
    Week week1 = new Week();
    int int0 = week0.compareTo(week1);
    assertEquals(106749L, week1.getSerialIndex());
}","/**
 * Returns a serial index number for the week.
 *
 * @return The serial index number.
 */"
"public long getLastMillisecond() {
    return this.lastMillisecond;
}","public void test027() throws Throwable {
    Week week0 = new Week();
    week0.hashCode();
    assertEquals(1392409281319L, week0.getLastMillisecond());
}","/**
 * Returns the last millisecond of the week.  This will be
 * determined relative to the time zone specified in the constructor, or
 * in the calendar instance passed in the most recent call to the
 * {@link #peg(Calendar)} method.
 *
 * @return The last millisecond of the week.
 *
 * @see #getFirstMillisecond()
 */"
"public long getSerialIndex() {
    return this.year * 53L + this.week;
}","public void test028() throws Throwable {
    Week week0 = new Week();
    week0.hashCode();
    assertEquals(106749L, week0.getSerialIndex());
}","/**
 * Returns a serial index number for the week.
 *
 * @return The serial index number.
 */"
"public long getSerialIndex() {
    return this.year * 53L + this.week;
}","public void test039() throws Throwable {
    Year year0 = new Year();
    Week week0 = new Week(3388, year0);
    Week week1 = new Week(3388, 3388);
    boolean boolean0 = week0.equals(week1);
    assertEquals(179624L, week1.getSerialIndex());
}","/**
 * Returns a serial index number for the week.
 *
 * @return The serial index number.
 */"
"public long getLastMillisecond() {
    return this.lastMillisecond;
}","public void test0310() throws Throwable {
    Year year0 = new Year();
    Week week0 = new Week(3388, year0);
    Week week1 = new Week(3388, 3388);
    boolean boolean0 = week0.equals(week1);
    assertEquals(1392409281319L, week1.getLastMillisecond());
}","/**
 * Returns the last millisecond of the week.  This will be
 * determined relative to the time zone specified in the constructor, or
 * in the calendar instance passed in the most recent call to the
 * {@link #peg(Calendar)} method.
 *
 * @return The last millisecond of the week.
 *
 * @see #getFirstMillisecond()
 */"
"public long getSerialIndex() {
    return this.year * 53L + this.week;
}","public void test0311() throws Throwable {
    Year year0 = new Year();
    Week week0 = new Week(3388, year0);
    Week week1 = new Week(3388, 3388);
    boolean boolean0 = week0.equals(week1);
    assertEquals(106802L, week0.getSerialIndex());
}","/**
 * Returns a serial index number for the week.
 *
 * @return The serial index number.
 */"
"public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof Week)) {
        return false;
    }
    Week that = (Week) obj;
    if (this.week != that.week) {
        return false;
    }
    if (this.year != that.year) {
        return false;
    }
    return true;
}","public void test0312() throws Throwable {
    Year year0 = new Year();
    Week week0 = new Week(3388, year0);
    Week week1 = new Week(3388, 3388);
    boolean boolean0 = week0.equals(week1);
    assertFalse(week1.equals((Object) week0));
}","/**
 * Tests the equality of this Week object to an arbitrary object.  Returns
 * true if the target is a Week instance representing the same week as this
 * object.  In all other cases, returns false.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return <code>true</code> if week and year of this and object are the
 *         same.
 */"
"public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof Week)) {
        return false;
    }
    Week that = (Week) obj;
    if (this.week != that.week) {
        return false;
    }
    if (this.year != that.year) {
        return false;
    }
    return true;
}","public void test0313() throws Throwable {
    Year year0 = new Year();
    Week week0 = new Week(3388, year0);
    Week week1 = new Week(3388, 3388);
    boolean boolean0 = week0.equals(week1);
    assertFalse(boolean0);
}","/**
 * Tests the equality of this Week object to an arbitrary object.  Returns
 * true if the target is a Week instance representing the same week as this
 * object.  In all other cases, returns false.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return <code>true</code> if week and year of this and object are the
 *         same.
 */"
"public long getSerialIndex() {
    return this.year * 53L + this.week;
}","public void test0414() throws Throwable {
    Week week0 = new Week((-1869), (-1869));
    Week week1 = new Week(53, (-1869));
    boolean boolean0 = week0.equals(week1);
    assertEquals((-99004L), week1.getSerialIndex());
}","/**
 * Returns a serial index number for the week.
 *
 * @return The serial index number.
 */"
"public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof Week)) {
        return false;
    }
    Week that = (Week) obj;
    if (this.week != that.week) {
        return false;
    }
    if (this.year != that.year) {
        return false;
    }
    return true;
}","public void test0415() throws Throwable {
    Week week0 = new Week((-1869), (-1869));
    Week week1 = new Week(53, (-1869));
    boolean boolean0 = week0.equals(week1);
    assertFalse(week1.equals((Object) week0));
}","/**
 * Tests the equality of this Week object to an arbitrary object.  Returns
 * true if the target is a Week instance representing the same week as this
 * object.  In all other cases, returns false.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return <code>true</code> if week and year of this and object are the
 *         same.
 */"
"public long getLastMillisecond() {
    return this.lastMillisecond;
}","public void test0416() throws Throwable {
    Week week0 = new Week((-1869), (-1869));
    Week week1 = new Week(53, (-1869));
    boolean boolean0 = week0.equals(week1);
    assertEquals(1392409281319L, week1.getLastMillisecond());
}","/**
 * Returns the last millisecond of the week.  This will be
 * determined relative to the time zone specified in the constructor, or
 * in the calendar instance passed in the most recent call to the
 * {@link #peg(Calendar)} method.
 *
 * @return The last millisecond of the week.
 *
 * @see #getFirstMillisecond()
 */"
"public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof Week)) {
        return false;
    }
    Week that = (Week) obj;
    if (this.week != that.week) {
        return false;
    }
    if (this.year != that.year) {
        return false;
    }
    return true;
}","public void test0417() throws Throwable {
    Week week0 = new Week((-1869), (-1869));
    Week week1 = new Week(53, (-1869));
    boolean boolean0 = week0.equals(week1);
    assertFalse(boolean0);
}","/**
 * Tests the equality of this Week object to an arbitrary object.  Returns
 * true if the target is a Week instance representing the same week as this
 * object.  In all other cases, returns false.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return <code>true</code> if week and year of this and object are the
 *         same.
 */"
"public RegularTimePeriod previous() {
    Week result;
    if (this.week != FIRST_WEEK_IN_YEAR) {
        result = new Week(this.week - 1, this.year);
    } else {
        // we need to work out if the previous year has 52 or 53 weeks...
        if (this.year > 1900) {
            int yy = this.year - 1;
            Calendar prevYearCalendar = Calendar.getInstance();
            prevYearCalendar.set(yy, Calendar.DECEMBER, 31);
            result = new Week(prevYearCalendar.getActualMaximum(Calendar.WEEK_OF_YEAR), yy);
        } else {
            result = null;
        }
    }
    return result;
}","public void test0518() throws Throwable {
    MockDate mockDate0 = new MockDate(0, 0, 8);
    mockDate0.setTime(8);
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    Locale locale0 = Locale.FRENCH;
    Week week0 = new Week(mockDate0, simpleTimeZone0, locale0);
    Week week1 = (Week) week0.previous();
    assertNotNull(week1);
}","/**
 * Returns the week preceding this one.  This method will return
 * <code>null</code> for some lower limit on the range of weeks (currently
 * week 1, 1900).  For week 1 of any year, the previous week is always week
 * 53, but week 53 may not contain any days (you should check for this).
 *
 * @return The preceding week (possibly <code>null</code>).
 */"
"public int getWeek() {
    return this.week;
}","public void test0519() throws Throwable {
    MockDate mockDate0 = new MockDate(0, 0, 8);
    mockDate0.setTime(8);
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    Locale locale0 = Locale.FRENCH;
    Week week0 = new Week(mockDate0, simpleTimeZone0, locale0);
    Week week1 = (Week) week0.previous();
    Week week2 = (Week) week1.next();
    assertEquals(52, week1.getWeek());
}","/**
 * Returns the week.
 *
 * @return The week.
 */"
"public long getSerialIndex() {
    return this.year * 53L + this.week;
}","public void test0520() throws Throwable {
    MockDate mockDate0 = new MockDate(0, 0, 8);
    mockDate0.setTime(8);
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    Locale locale0 = Locale.FRENCH;
    Week week0 = new Week(mockDate0, simpleTimeZone0, locale0);
    Week week1 = (Week) week0.previous();
    Week week2 = (Week) week1.next();
    assertEquals(104411L, week2.getSerialIndex());
}","/**
 * Returns a serial index number for the week.
 *
 * @return The serial index number.
 */"
"public long getLastMillisecond() {
    return this.lastMillisecond;
}","public void test0521() throws Throwable {
    MockDate mockDate0 = new MockDate(0, 0, 8);
    mockDate0.setTime(8);
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    Locale locale0 = Locale.FRENCH;
    Week week0 = new Week(mockDate0, simpleTimeZone0, locale0);
    Week week1 = (Week) week0.previous();
    Week week2 = (Week) week1.next();
    assertEquals(1392409281319L, week2.getLastMillisecond());
}","/**
 * Returns the last millisecond of the week.  This will be
 * determined relative to the time zone specified in the constructor, or
 * in the calendar instance passed in the most recent call to the
 * {@link #peg(Calendar)} method.
 *
 * @return The last millisecond of the week.
 *
 * @see #getFirstMillisecond()
 */"
"public RegularTimePeriod next() {
    Week result;
    if (this.week < 52) {
        result = new Week(this.week + 1, this.year);
    } else {
        Calendar calendar = Calendar.getInstance();
        calendar.set(this.year, Calendar.DECEMBER, 31);
        int actualMaxWeek = calendar.getActualMaximum(Calendar.WEEK_OF_YEAR);
        if (this.week < actualMaxWeek) {
            result = new Week(this.week + 1, this.year);
        } else {
            if (this.year < 9999) {
                result = new Week(FIRST_WEEK_IN_YEAR, this.year + 1);
            } else {
                result = null;
            }
        }
    }
    return result;
}","public void test0522() throws Throwable {
    MockDate mockDate0 = new MockDate(0, 0, 8);
    mockDate0.setTime(8);
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    Locale locale0 = Locale.FRENCH;
    Week week0 = new Week(mockDate0, simpleTimeZone0, locale0);
    Week week1 = (Week) week0.previous();
    Week week2 = (Week) week1.next();
    assertNotNull(week2);
}","/**
 * Returns the week following this one.  This method will return
 * <code>null</code> for some upper limit on the range of weeks (currently
 * week 53, 9999).  For week 52 of any year, the following week is always
 * week 53, but week 53 may not contain any days (you should check for
 * this).
 *
 * @return The following week (possibly <code>null</code>).
 */"
"public long getLastMillisecond() {
    return this.lastMillisecond;
}","public void test0623() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    MockDate mockDate0 = new MockDate(0, 0, 0);
    Week week0 = new Week(mockDate0, timeZone0);
    RegularTimePeriod regularTimePeriod0 = week0.previous();
    assertEquals((-2209075200001L), week0.getLastMillisecond());
}","/**
 * Returns the last millisecond of the week.  This will be
 * determined relative to the time zone specified in the constructor, or
 * in the calendar instance passed in the most recent call to the
 * {@link #peg(Calendar)} method.
 *
 * @return The last millisecond of the week.
 *
 * @see #getFirstMillisecond()
 */"
"public RegularTimePeriod previous() {
    Week result;
    if (this.week != FIRST_WEEK_IN_YEAR) {
        result = new Week(this.week - 1, this.year);
    } else {
        // we need to work out if the previous year has 52 or 53 weeks...
        if (this.year > 1900) {
            int yy = this.year - 1;
            Calendar prevYearCalendar = Calendar.getInstance();
            prevYearCalendar.set(yy, Calendar.DECEMBER, 31);
            result = new Week(prevYearCalendar.getActualMaximum(Calendar.WEEK_OF_YEAR), yy);
        } else {
            result = null;
        }
    }
    return result;
}","public void test0624() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    MockDate mockDate0 = new MockDate(0, 0, 0);
    Week week0 = new Week(mockDate0, timeZone0);
    RegularTimePeriod regularTimePeriod0 = week0.previous();
    assertNull(regularTimePeriod0);
}","/**
 * Returns the week preceding this one.  This method will return
 * <code>null</code> for some lower limit on the range of weeks (currently
 * week 1, 1900).  For week 1 of any year, the previous week is always week
 * 53, but week 53 may not contain any days (you should check for this).
 *
 * @return The preceding week (possibly <code>null</code>).
 */"
"public int getYearValue() {
    return this.year;
}","public void test0625() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    MockDate mockDate0 = new MockDate(0, 0, 0);
    Week week0 = new Week(mockDate0, timeZone0);
    RegularTimePeriod regularTimePeriod0 = week0.previous();
    assertEquals(1900, week0.getYearValue());
}","/**
 * Returns the year in which the week falls, as an integer value.
 *
 * @return The year.
 */"
"public long getSerialIndex() {
    return this.year * 53L + this.week;
}","public void test0726() throws Throwable {
    Week week0 = new Week(0, 0);
    int int0 = week0.getYearValue();
    assertEquals(0L, week0.getSerialIndex());
}","/**
 * Returns a serial index number for the week.
 *
 * @return The serial index number.
 */"
"public long getLastMillisecond() {
    return this.lastMillisecond;
}","public void test0727() throws Throwable {
    Week week0 = new Week(0, 0);
    int int0 = week0.getYearValue();
    assertEquals(1392409281319L, week0.getLastMillisecond());
}","/**
 * Returns the last millisecond of the week.  This will be
 * determined relative to the time zone specified in the constructor, or
 * in the calendar instance passed in the most recent call to the
 * {@link #peg(Calendar)} method.
 *
 * @return The last millisecond of the week.
 *
 * @see #getFirstMillisecond()
 */"
"public int getYearValue() {
    return this.year;
}","public void test0728() throws Throwable {
    Week week0 = new Week(0, 0);
    int int0 = week0.getYearValue();
    assertEquals(0, int0);
}","/**
 * Returns the year in which the week falls, as an integer value.
 *
 * @return The year.
 */"
"public long getSerialIndex() {
    return this.year * 53L + this.week;
}","public void test0829() throws Throwable {
    Week week0 = new Week((-1869), (-1869));
    int int0 = week0.getYearValue();
    assertEquals((-99134L), week0.getSerialIndex());
}","/**
 * Returns a serial index number for the week.
 *
 * @return The serial index number.
 */"
"public long getLastMillisecond() {
    return this.lastMillisecond;
}","public void test0830() throws Throwable {
    Week week0 = new Week((-1869), (-1869));
    int int0 = week0.getYearValue();
    assertEquals(1392409281319L, week0.getLastMillisecond());
}","/**
 * Returns the last millisecond of the week.  This will be
 * determined relative to the time zone specified in the constructor, or
 * in the calendar instance passed in the most recent call to the
 * {@link #peg(Calendar)} method.
 *
 * @return The last millisecond of the week.
 *
 * @see #getFirstMillisecond()
 */"
"public int getYearValue() {
    return this.year;
}","public void test0831() throws Throwable {
    Week week0 = new Week((-1869), (-1869));
    int int0 = week0.getYearValue();
    assertEquals((-1869), int0);
}","/**
 * Returns the year in which the week falls, as an integer value.
 *
 * @return The year.
 */"
"public long getLastMillisecond() {
    return this.lastMillisecond;
}","public void test0932() throws Throwable {
    System.setCurrentTimeMillis(0L);
    Week week0 = new Week();
    week0.getYear();
    assertEquals((-1L), week0.getLastMillisecond());
}","/**
 * Returns the last millisecond of the week.  This will be
 * determined relative to the time zone specified in the constructor, or
 * in the calendar instance passed in the most recent call to the
 * {@link #peg(Calendar)} method.
 *
 * @return The last millisecond of the week.
 *
 * @see #getFirstMillisecond()
 */"
"public long getSerialIndex() {
    return this.year * 53L + this.week;
}","public void test0933() throws Throwable {
    System.setCurrentTimeMillis(0L);
    Week week0 = new Week();
    week0.getYear();
    assertEquals(104411L, week0.getSerialIndex());
}","/**
 * Returns a serial index number for the week.
 *
 * @return The serial index number.
 */"
"public long getLastMillisecond() {
    return this.lastMillisecond;
}","public void test1034() throws Throwable {
    MockDate mockDate0 = new MockDate(0, 0, 8);
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    Locale locale0 = Locale.FRENCH;
    Week week0 = new Week(mockDate0, simpleTimeZone0, locale0);
    week0.getYear();
    assertEquals((-2208384000001L), week0.getLastMillisecond());
}","/**
 * Returns the last millisecond of the week.  This will be
 * determined relative to the time zone specified in the constructor, or
 * in the calendar instance passed in the most recent call to the
 * {@link #peg(Calendar)} method.
 *
 * @return The last millisecond of the week.
 *
 * @see #getFirstMillisecond()
 */"
"public int getWeek() {
    return this.week;
}","public void test1035() throws Throwable {
    MockDate mockDate0 = new MockDate(0, 0, 8);
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    Locale locale0 = Locale.FRENCH;
    Week week0 = new Week(mockDate0, simpleTimeZone0, locale0);
    week0.getYear();
    assertEquals(2, week0.getWeek());
}","/**
 * Returns the week.
 *
 * @return The week.
 */"
"public long getSerialIndex() {
    return this.year * 53L + this.week;
}","public void test1136() throws Throwable {
    Week week0 = new Week(2014, 2014);
    System.setCurrentTimeMillis((-1747L));
    week0.getYear();
    assertEquals(106708L, week0.getSerialIndex());
}","/**
 * Returns a serial index number for the week.
 *
 * @return The serial index number.
 */"
"public long getLastMillisecond() {
    return this.lastMillisecond;
}","public void test1137() throws Throwable {
    Week week0 = new Week(2014, 2014);
    System.setCurrentTimeMillis((-1747L));
    week0.getYear();
    assertEquals(1392409281319L, week0.getLastMillisecond());
}","/**
 * Returns the last millisecond of the week.  This will be
 * determined relative to the time zone specified in the constructor, or
 * in the calendar instance passed in the most recent call to the
 * {@link #peg(Calendar)} method.
 *
 * @return The last millisecond of the week.
 *
 * @see #getFirstMillisecond()
 */"
"public long getLastMillisecond() {
    return this.lastMillisecond;
}","public void test1238() throws Throwable {
    Year year0 = new Year();
    Week week0 = new Week(0, year0);
    int int0 = week0.getWeek();
    assertEquals(1392409281319L, week0.getLastMillisecond());
}","/**
 * Returns the last millisecond of the week.  This will be
 * determined relative to the time zone specified in the constructor, or
 * in the calendar instance passed in the most recent call to the
 * {@link #peg(Calendar)} method.
 *
 * @return The last millisecond of the week.
 *
 * @see #getFirstMillisecond()
 */"
"public int getWeek() {
    return this.week;
}","public void test1239() throws Throwable {
    Year year0 = new Year();
    Week week0 = new Week(0, year0);
    int int0 = week0.getWeek();
    assertEquals(0, int0);
}","/**
 * Returns the week.
 *
 * @return The week.
 */"
"public long getLastMillisecond() {
    return this.lastMillisecond;
}","public void test1340() throws Throwable {
    Week week0 = new Week((-584), 2);
    int int0 = week0.getWeek();
    assertEquals(1392409281319L, week0.getLastMillisecond());
}","/**
 * Returns the last millisecond of the week.  This will be
 * determined relative to the time zone specified in the constructor, or
 * in the calendar instance passed in the most recent call to the
 * {@link #peg(Calendar)} method.
 *
 * @return The last millisecond of the week.
 *
 * @see #getFirstMillisecond()
 */"
"public long getSerialIndex() {
    return this.year * 53L + this.week;
}","public void test1341() throws Throwable {
    Week week0 = new Week((-584), 2);
    int int0 = week0.getWeek();
    assertEquals(34L, week0.getSerialIndex());
}","/**
 * Returns a serial index number for the week.
 *
 * @return The serial index number.
 */"
"public int getWeek() {
    return this.week;
}","public void test1342() throws Throwable {
    Week week0 = new Week((-584), 2);
    int int0 = week0.getWeek();
    assertEquals((-72), int0);
}","/**
 * Returns the week.
 *
 * @return The week.
 */"
"public long getSerialIndex() {
    return this.year * 53L + this.week;
}","public void test1443() throws Throwable {
    Week week0 = new Week(0, 0);
    long long0 = week0.getSerialIndex();
    assertEquals(0L, long0);
}","/**
 * Returns a serial index number for the week.
 *
 * @return The serial index number.
 */"
"public long getLastMillisecond() {
    return this.lastMillisecond;
}","public void test1444() throws Throwable {
    Week week0 = new Week(0, 0);
    long long0 = week0.getSerialIndex();
    assertEquals(1392409281319L, week0.getLastMillisecond());
}","/**
 * Returns the last millisecond of the week.  This will be
 * determined relative to the time zone specified in the constructor, or
 * in the calendar instance passed in the most recent call to the
 * {@link #peg(Calendar)} method.
 *
 * @return The last millisecond of the week.
 *
 * @see #getFirstMillisecond()
 */"
"public long getSerialIndex() {
    return this.year * 53L + this.week;
}","public void test1545() throws Throwable {
    Week week0 = new Week(1491, (-41));
    long long0 = week0.getSerialIndex();
    assertEquals((-2218L), long0);
}","/**
 * Returns a serial index number for the week.
 *
 * @return The serial index number.
 */"
"public long getLastMillisecond() {
    return this.lastMillisecond;
}","public void test1546() throws Throwable {
    Week week0 = new Week(1491, (-41));
    long long0 = week0.getSerialIndex();
    assertEquals(1392409281319L, week0.getLastMillisecond());
}","/**
 * Returns the last millisecond of the week.  This will be
 * determined relative to the time zone specified in the constructor, or
 * in the calendar instance passed in the most recent call to the
 * {@link #peg(Calendar)} method.
 *
 * @return The last millisecond of the week.
 *
 * @see #getFirstMillisecond()
 */"
"public long getSerialIndex() {
    return this.year * 53L + this.week;
}","public void test1648() throws Throwable {
    System.setCurrentTimeMillis(1L);
    Week week0 = new Week(1928, 3432);
    Locale locale0 = Locale.CANADA_FRENCH;
    Calendar calendar0 = MockCalendar.getInstance(locale0);
    long long0 = week0.getLastMillisecond(calendar0);
    assertEquals(181776L, week0.getSerialIndex());
}","/**
 * Returns a serial index number for the week.
 *
 * @return The serial index number.
 */"
"public long getLastMillisecond(Calendar calendar) {
    Calendar c = (Calendar) calendar.clone();
    c.clear();
    c.set(Calendar.YEAR, this.year);
    c.set(Calendar.WEEK_OF_YEAR, this.week + 1);
    c.set(Calendar.DAY_OF_WEEK, c.getFirstDayOfWeek());
    c.set(Calendar.HOUR, 0);
    c.set(Calendar.MINUTE, 0);
    c.set(Calendar.SECOND, 0);
    c.set(Calendar.MILLISECOND, 0);
    //return c.getTimeInMillis();  // this won't work for JDK 1.3
    return c.getTime().getTime() - 1;
}","public void test1649() throws Throwable {
    System.setCurrentTimeMillis(1L);
    Week week0 = new Week(1928, 3432);
    Locale locale0 = Locale.CANADA_FRENCH;
    Calendar calendar0 = MockCalendar.getInstance(locale0);
    long long0 = week0.getLastMillisecond(calendar0);
    assertEquals(0L, long0);
}","/**
 * Returns the last millisecond of the week, evaluated using the supplied
 * calendar (which determines the time zone).
 *
 * @param calendar  the calendar (<code>null</code> not permitted).
 *
 * @return The last millisecond of the week.
 *
 * @throws NullPointerException if <code>calendar</code> is
 *     <code>null</code>.
 */"
"public String toString() {
    return ""Week "" + this.week + "", "" + this.year;
}","public void test1750() throws Throwable {
    Week week0 = new Week((-584), 2);
    Locale locale0 = Locale.UK;
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(week0.DEFAULT_TIME_ZONE, locale0);
    long long0 = week0.getLastMillisecond((Calendar) mockGregorianCalendar0);
    assertEquals(""org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\""GMT\"",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]"", mockGregorianCalendar0.toString());
}","/**
 * Returns a string representing the week (e.g. ""Week 9, 2002"").
 *
 * TODO: look at internationalisation.
 *
 * @return A string representing the week.
 */"
"public long getSerialIndex() {
    return this.year * 53L + this.week;
}","public void test1751() throws Throwable {
    Week week0 = new Week((-584), 2);
    Locale locale0 = Locale.UK;
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(week0.DEFAULT_TIME_ZONE, locale0);
    long long0 = week0.getLastMillisecond((Calendar) mockGregorianCalendar0);
    assertEquals(34L, week0.getSerialIndex());
}","/**
 * Returns a serial index number for the week.
 *
 * @return The serial index number.
 */"
"public long getLastMillisecond(Calendar calendar) {
    Calendar c = (Calendar) calendar.clone();
    c.clear();
    c.set(Calendar.YEAR, this.year);
    c.set(Calendar.WEEK_OF_YEAR, this.week + 1);
    c.set(Calendar.DAY_OF_WEEK, c.getFirstDayOfWeek());
    c.set(Calendar.HOUR, 0);
    c.set(Calendar.MINUTE, 0);
    c.set(Calendar.SECOND, 0);
    c.set(Calendar.MILLISECOND, 0);
    //return c.getTimeInMillis();  // this won't work for JDK 1.3
    return c.getTime().getTime() - 1;
}","public void test1752() throws Throwable {
    Week week0 = new Week((-584), 2);
    Locale locale0 = Locale.UK;
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(week0.DEFAULT_TIME_ZONE, locale0);
    long long0 = week0.getLastMillisecond((Calendar) mockGregorianCalendar0);
    assertEquals(1392409281319L, long0);
}","/**
 * Returns the last millisecond of the week, evaluated using the supplied
 * calendar (which determines the time zone).
 *
 * @param calendar  the calendar (<code>null</code> not permitted).
 *
 * @return The last millisecond of the week.
 *
 * @throws NullPointerException if <code>calendar</code> is
 *     <code>null</code>.
 */"
"public long getSerialIndex() {
    return this.year * 53L + this.week;
}","public void test1853() throws Throwable {
    System.setCurrentTimeMillis(1L);
    Week week0 = new Week(1928, 3432);
    long long0 = week0.getLastMillisecond();
    assertEquals(181776L, week0.getSerialIndex());
}","/**
 * Returns a serial index number for the week.
 *
 * @return The serial index number.
 */"
"public long getLastMillisecond() {
    return this.lastMillisecond;
}","public void test1854() throws Throwable {
    System.setCurrentTimeMillis(1L);
    Week week0 = new Week(1928, 3432);
    long long0 = week0.getLastMillisecond();
    assertEquals(0L, long0);
}","/**
 * Returns the last millisecond of the week.  This will be
 * determined relative to the time zone specified in the constructor, or
 * in the calendar instance passed in the most recent call to the
 * {@link #peg(Calendar)} method.
 *
 * @return The last millisecond of the week.
 *
 * @see #getFirstMillisecond()
 */"
"public String toString() {
    return ""Week "" + this.week + "", "" + this.year;
}","public void test1955() throws Throwable {
    Year year0 = new Year();
    Week week0 = new Week(0, year0);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2013), (-2013), (-13));
    mockGregorianCalendar0.add(1, (-3570));
    week0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
    assertEquals(""org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\""GMT\"",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=5752,MONTH=2,WEEK_OF_YEAR=12,WEEK_OF_MONTH=4,DAY_OF_MONTH=18,DAY_OF_YEAR=77,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]"", mockGregorianCalendar0.toString());
}","/**
 * Returns a string representing the week (e.g. ""Week 9, 2002"").
 *
 * TODO: look at internationalisation.
 *
 * @return A string representing the week.
 */"
"public long getSerialIndex() {
    return this.year * 53L + this.week;
}","public void test1956() throws Throwable {
    Year year0 = new Year();
    Week week0 = new Week(0, year0);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2013), (-2013), (-13));
    mockGregorianCalendar0.add(1, (-3570));
    week0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
    assertEquals(106742L, week0.getSerialIndex());
}","/**
 * Returns a serial index number for the week.
 *
 * @return The serial index number.
 */"
"public long getLastMillisecond() {
    return this.lastMillisecond;
}","public void test1957() throws Throwable {
    Year year0 = new Year();
    Week week0 = new Week(0, year0);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2013), (-2013), (-13));
    mockGregorianCalendar0.add(1, (-3570));
    week0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
    assertEquals(1392409281319L, week0.getLastMillisecond());
}","/**
 * Returns the last millisecond of the week.  This will be
 * determined relative to the time zone specified in the constructor, or
 * in the calendar instance passed in the most recent call to the
 * {@link #peg(Calendar)} method.
 *
 * @return The last millisecond of the week.
 *
 * @see #getFirstMillisecond()
 */"
"public long getFirstMillisecond() {
    return this.firstMillisecond;
}","public void test2058() throws Throwable {
    MockDate mockDate0 = new MockDate((-3105), (-1835), (-1835), (-3105), (-1835), 0);
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.UK;
    Week week0 = new Week(mockDate0, timeZone0, locale0);
    long long0 = week0.getFirstMillisecond();
    assertEquals((-105189809700000L), long0);
}","/**
 * Returns the first millisecond of the week.  This will be determined
 * relative to the time zone specified in the constructor, or in the
 * calendar instance passed in the most recent call to the
 * {@link #peg(Calendar)} method.
 *
 * @return The first millisecond of the week.
 *
 * @see #getLastMillisecond()
 */"
"public long getLastMillisecond() {
    return this.lastMillisecond;
}","public void test2059() throws Throwable {
    MockDate mockDate0 = new MockDate((-3105), (-1835), (-1835), (-3105), (-1835), 0);
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.UK;
    Week week0 = new Week(mockDate0, timeZone0, locale0);
    long long0 = week0.getFirstMillisecond();
    assertEquals((-105189809700001L), week0.getLastMillisecond());
}","/**
 * Returns the last millisecond of the week.  This will be
 * determined relative to the time zone specified in the constructor, or
 * in the calendar instance passed in the most recent call to the
 * {@link #peg(Calendar)} method.
 *
 * @return The last millisecond of the week.
 *
 * @see #getFirstMillisecond()
 */"
"public long getSerialIndex() {
    return this.year * 53L + this.week;
}","public void test2060() throws Throwable {
    MockDate mockDate0 = new MockDate((-3105), (-1835), (-1835), (-3105), (-1835), 0);
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.UK;
    Week week0 = new Week(mockDate0, timeZone0, locale0);
    long long0 = week0.getFirstMillisecond();
    assertEquals(72382L, week0.getSerialIndex());
}","/**
 * Returns a serial index number for the week.
 *
 * @return The serial index number.
 */"
"public void peg(Calendar calendar) {
    this.firstMillisecond = getFirstMillisecond(calendar);
    this.lastMillisecond = getLastMillisecond(calendar);
}","public void test2161() throws Throwable {
    Year year0 = new Year();
    Week week0 = new Week((-1803), year0);
    // Undeclared exception!
    try {
        week0.peg((Calendar) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * Recalculates the start date/time and end date/time for this time period
 * relative to the supplied calendar (which incorporates a time zone).
 *
 * @param calendar  the calendar (<code>null</code> not permitted).
 *
 * @since 1.0.3
 */"
"public long getLastMillisecond(Calendar calendar) {
    Calendar c = (Calendar) calendar.clone();
    c.clear();
    c.set(Calendar.YEAR, this.year);
    c.set(Calendar.WEEK_OF_YEAR, this.week + 1);
    c.set(Calendar.DAY_OF_WEEK, c.getFirstDayOfWeek());
    c.set(Calendar.HOUR, 0);
    c.set(Calendar.MINUTE, 0);
    c.set(Calendar.SECOND, 0);
    c.set(Calendar.MILLISECOND, 0);
    //return c.getTimeInMillis();  // this won't work for JDK 1.3
    return c.getTime().getTime() - 1;
}","public void test2262() throws Throwable {
    Week week0 = new Week((-584), 2);
    // Undeclared exception!
    try {
        week0.getLastMillisecond((Calendar) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jfree.data.time.Week"", e);
    }
}","/**
 * Returns the last millisecond of the week, evaluated using the supplied
 * calendar (which determines the time zone).
 *
 * @param calendar  the calendar (<code>null</code> not permitted).
 *
 * @return The last millisecond of the week.
 *
 * @throws NullPointerException if <code>calendar</code> is
 *     <code>null</code>.
 */"
"public long getFirstMillisecond(Calendar calendar) {
    Calendar c = (Calendar) calendar.clone();
    c.clear();
    c.set(Calendar.YEAR, this.year);
    c.set(Calendar.WEEK_OF_YEAR, this.week);
    c.set(Calendar.DAY_OF_WEEK, c.getFirstDayOfWeek());
    c.set(Calendar.HOUR, 0);
    c.set(Calendar.MINUTE, 0);
    c.set(Calendar.SECOND, 0);
    c.set(Calendar.MILLISECOND, 0);
    //return c.getTimeInMillis();  // this won't work for JDK 1.3
    return c.getTime().getTime();
}","public void test2363() throws Throwable {
    Week week0 = new Week(3109, 273);
    // Undeclared exception!
    try {
        week0.getFirstMillisecond((Calendar) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * Returns the first millisecond of the week, evaluated using the supplied
 * calendar (which determines the time zone).
 *
 * @param calendar  the calendar (<code>null</code> not permitted).
 *
 * @return The first millisecond of the week.
 *
 * @throws NullPointerException if <code>calendar</code> is
 *     <code>null</code>.
 */"
"public int compareTo(Object o1) {
    int result;
    // CASE 1 : Comparing to another Week object
    // --------------------------------------------
    if (o1 instanceof Week) {
        Week w = (Week) o1;
        result = this.year - w.getYear().getYear();
        if (result == 0) {
            result = this.week - w.getWeek();
        }
    } else // CASE 2 : Comparing to another TimePeriod object
    // -----------------------------------------------
    if (o1 instanceof RegularTimePeriod) {
        // more difficult case - evaluate later...
        result = 0;
    } else // CASE 3 : Comparing to a non-TimePeriod object
    // ---------------------------------------------
    {
        // consider time periods to be ordered after general objects
        result = 1;
    }
    return result;
}","public void test2464() throws Throwable {
    Year year0 = new Year(2519);
    Week week0 = new Week(2519, year0);
    Week week1 = new Week(2519, 53);
    // Undeclared exception!
    try {
        week0.compareTo(week1);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Year constructor: year (53) outside valid range.
        //
        verifyException(""org.jfree.data.time.Year"", e);
    }
}","/**
 * Returns an integer indicating the order of this Week object relative to
 * the specified object:
 *
 * negative == before, zero == same, positive == after.
 *
 * @param o1  the object to compare.
 *
 * @return negative == before, zero == same, positive == after.
 */"
"public Week(Date time) {
    // defer argument checking...
    this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());
}","public void test2565() throws Throwable {
    Week week0 = null;
    try {
        week0 = new Week((Date) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'time' argument.
        //
        verifyException(""org.jfree.data.time.Week"", e);
    }
}","/**
 * Creates a time period for the week in which the specified date/time
 * falls.
 *
 * @param time  the time (<code>null</code> not permitted).
 */"
"public Week(int week, Year year) {
    if ((week < FIRST_WEEK_IN_YEAR) && (week > LAST_WEEK_IN_YEAR)) {
        throw new IllegalArgumentException(""The 'week' argument must be in the range 1 - 53."");
    }
    this.week = (byte) week;
    this.year = (short) year.getYear();
    peg(Calendar.getInstance());
}","public void test2666() throws Throwable {
    Week week0 = null;
    try {
        week0 = new Week((-1198), (Year) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jfree.data.time.Week"", e);
    }
}","/**
 * Creates a time period representing the week in the specified year.
 *
 * @param week  the week (1 to 53).
 * @param year  the year (1900 to 9999).
 */"
"public long getLastMillisecond() {
    return this.lastMillisecond;
}","public void test2767() throws Throwable {
    Locale locale0 = Locale.ROOT;
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
    Date date0 = mockGregorianCalendar0.getGregorianChange();
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "" xtWpkwS~n@zOF"");
    Week week0 = new Week(date0, simpleTimeZone0, locale0);
    week0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
    assertEquals((-12219292800001L), week0.getLastMillisecond());
}","/**
 * Returns the last millisecond of the week.  This will be
 * determined relative to the time zone specified in the constructor, or
 * in the calendar instance passed in the most recent call to the
 * {@link #peg(Calendar)} method.
 *
 * @return The last millisecond of the week.
 *
 * @see #getFirstMillisecond()
 */"
"public String toString() {
    return ""Week "" + this.week + "", "" + this.year;
}","public void test2768() throws Throwable {
    Locale locale0 = Locale.ROOT;
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
    Date date0 = mockGregorianCalendar0.getGregorianChange();
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "" xtWpkwS~n@zOF"");
    Week week0 = new Week(date0, simpleTimeZone0, locale0);
    week0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
    assertEquals(""org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\""GMT\"",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]"", mockGregorianCalendar0.toString());
}","/**
 * Returns a string representing the week (e.g. ""Week 9, 2002"").
 *
 * TODO: look at internationalisation.
 *
 * @return A string representing the week.
 */"
"public int getWeek() {
    return this.week;
}","public void test2769() throws Throwable {
    Locale locale0 = Locale.ROOT;
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
    Date date0 = mockGregorianCalendar0.getGregorianChange();
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "" xtWpkwS~n@zOF"");
    Week week0 = new Week(date0, simpleTimeZone0, locale0);
    week0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
    assertEquals(40, week0.getWeek());
}","/**
 * Returns the week.
 *
 * @return The week.
 */"
"public Week(Date time, TimeZone zone, Locale locale) {
    if (time == null) {
        throw new IllegalArgumentException(""Null 'time' argument."");
    }
    if (zone == null) {
        throw new IllegalArgumentException(""Null 'zone' argument."");
    }
    if (locale == null) {
        throw new IllegalArgumentException(""Null 'locale' argument."");
    }
    Calendar calendar = Calendar.getInstance(zone, locale);
    calendar.setTime(time);
    // sometimes the last few days of the year are considered to fall in
    // the *first* week of the following year.  Refer to the Javadocs for
    // GregorianCalendar.
    int tempWeek = calendar.get(Calendar.WEEK_OF_YEAR);
    if (tempWeek == 1 && calendar.get(Calendar.MONTH) == Calendar.DECEMBER) {
        this.week = 1;
        this.year = (short) (calendar.get(Calendar.YEAR) + 1);
    } else {
        this.week = (byte) Math.min(tempWeek, LAST_WEEK_IN_YEAR);
        int yyyy = calendar.get(Calendar.YEAR);
        // alternatively, sometimes the first few days of the year are
        // considered to fall in the *last* week of the previous year...
        if (calendar.get(Calendar.MONTH) == Calendar.JANUARY && this.week >= 52) {
            yyyy--;
        }
        this.year = (short) yyyy;
    }
    peg(calendar);
}","public void test2870() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    Locale locale0 = Locale.FRANCE;
    Week week0 = null;
    try {
        week0 = new Week((Date) null, simpleTimeZone0, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'time' argument.
        //
        verifyException(""org.jfree.data.time.Week"", e);
    }
}","/**
 * Creates a time period for the week in which the specified date/time
 * falls, calculated relative to the specified time zone.
 *
 * @param time  the date/time (<code>null</code> not permitted).
 * @param zone  the time zone (<code>null</code> not permitted).
 * @param locale  the locale (<code>null</code> not permitted).
 *
 * @since 1.0.7
 */"
"public long getLastMillisecond() {
    return this.lastMillisecond;
}","public void test2971() throws Throwable {
    Week week0 = new Week();
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 53, 87);
    week0.peg(mockGregorianCalendar0);
    week0.getFirstMillisecond();
    assertEquals((-1L), week0.getLastMillisecond());
}","/**
 * Returns the last millisecond of the week.  This will be
 * determined relative to the time zone specified in the constructor, or
 * in the calendar instance passed in the most recent call to the
 * {@link #peg(Calendar)} method.
 *
 * @return The last millisecond of the week.
 *
 * @see #getFirstMillisecond()
 */"
"public long getLastMillisecond() {
    return this.lastMillisecond;
}","public void test3072() throws Throwable {
    Week week0 = new Week();
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 53, 87);
    week0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
    assertEquals(1392409281319L, week0.getLastMillisecond());
}","/**
 * Returns the last millisecond of the week.  This will be
 * determined relative to the time zone specified in the constructor, or
 * in the calendar instance passed in the most recent call to the
 * {@link #peg(Calendar)} method.
 *
 * @return The last millisecond of the week.
 *
 * @see #getFirstMillisecond()
 */"
"public int getWeek() {
    return this.week;
}","public void test3073() throws Throwable {
    Week week0 = new Week();
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 53, 87);
    week0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
    assertEquals(7, week0.getWeek());
}","/**
 * Returns the week.
 *
 * @return The week.
 */"
"public long getLastMillisecond(Calendar calendar) {
    Calendar c = (Calendar) calendar.clone();
    c.clear();
    c.set(Calendar.YEAR, this.year);
    c.set(Calendar.WEEK_OF_YEAR, this.week + 1);
    c.set(Calendar.DAY_OF_WEEK, c.getFirstDayOfWeek());
    c.set(Calendar.HOUR, 0);
    c.set(Calendar.MINUTE, 0);
    c.set(Calendar.SECOND, 0);
    c.set(Calendar.MILLISECOND, 0);
    //return c.getTimeInMillis();  // this won't work for JDK 1.3
    return c.getTime().getTime() - 1;
}","public void test3174() throws Throwable {
    Year year0 = new Year();
    Week week0 = new Week(0, year0);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2013), (-2013), (-13));
    long long0 = week0.getLastMillisecond((Calendar) mockGregorianCalendar0);
    assertEquals((-1L), long0);
}","/**
 * Returns the last millisecond of the week, evaluated using the supplied
 * calendar (which determines the time zone).
 *
 * @param calendar  the calendar (<code>null</code> not permitted).
 *
 * @return The last millisecond of the week.
 *
 * @throws NullPointerException if <code>calendar</code> is
 *     <code>null</code>.
 */"
"public int getWeek() {
    return this.week;
}","public void test3175() throws Throwable {
    Year year0 = new Year();
    Week week0 = new Week(0, year0);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2013), (-2013), (-13));
    long long0 = week0.getLastMillisecond((Calendar) mockGregorianCalendar0);
    assertEquals(0, week0.getWeek());
}","/**
 * Returns the week.
 *
 * @return The week.
 */"
"public String toString() {
    return ""Week "" + this.week + "", "" + this.year;
}","public void test3176() throws Throwable {
    Year year0 = new Year();
    Week week0 = new Week(0, year0);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2013), (-2013), (-13));
    long long0 = week0.getLastMillisecond((Calendar) mockGregorianCalendar0);
    assertEquals(""org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\""GMT\"",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-2013,MONTH=-2013,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-13,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]"", mockGregorianCalendar0.toString());
}","/**
 * Returns a string representing the week (e.g. ""Week 9, 2002"").
 *
 * TODO: look at internationalisation.
 *
 * @return A string representing the week.
 */"
"public int getWeek() {
    return this.week;
}","public void test3277() throws Throwable {
    Week week0 = new Week();
    int int0 = week0.getWeek();
    assertEquals(7, int0);
}","/**
 * Returns the week.
 *
 * @return The week.
 */"
"public long getLastMillisecond() {
    return this.lastMillisecond;
}","public void test3278() throws Throwable {
    Week week0 = new Week();
    int int0 = week0.getWeek();
    assertEquals(1392409281319L, week0.getLastMillisecond());
}","/**
 * Returns the last millisecond of the week.  This will be
 * determined relative to the time zone specified in the constructor, or
 * in the calendar instance passed in the most recent call to the
 * {@link #peg(Calendar)} method.
 *
 * @return The last millisecond of the week.
 *
 * @see #getFirstMillisecond()
 */"
"public static Week parseWeek(String s) {
    Week result = null;
    if (s != null) {
        // trim whitespace from either end of the string
        s = s.trim();
        int i = Week.findSeparator(s);
        if (i != -1) {
            String s1 = s.substring(0, i).trim();
            String s2 = s.substring(i + 1, s.length()).trim();
            Year y = Week.evaluateAsYear(s1);
            int w;
            if (y != null) {
                w = Week.stringToWeek(s2);
                if (w == -1) {
                    throw new TimePeriodFormatException(""Can't evaluate the week."");
                }
                result = new Week(w, y);
            } else {
                y = Week.evaluateAsYear(s2);
                if (y != null) {
                    w = Week.stringToWeek(s1);
                    if (w == -1) {
                        throw new TimePeriodFormatException(""Can't evaluate the week."");
                    }
                    result = new Week(w, y);
                } else {
                    throw new TimePeriodFormatException(""Can't evaluate the year."");
                }
            }
        } else {
            throw new TimePeriodFormatException(""Could not find separator."");
        }
    }
    return result;
}","public void test3379() throws Throwable {
    // Undeclared exception!
    try {
        Week.parseWeek(""Week -104, 2393"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Can't evaluate the year.
        //
        verifyException(""org.jfree.data.time.Week"", e);
    }
}","/**
 * Parses the string argument as a week.
 * <P>
 * This method is required to accept the format ""YYYY-Wnn"".  It will also
 * accept ""Wnn-YYYY"". Anything else, at the moment, is a bonus.
 *
 * @param s  string to parse.
 *
 * @return <code>null</code> if the string is not parseable, the week
 *         otherwise.
 */"
"public static Week parseWeek(String s) {
    Week result = null;
    if (s != null) {
        // trim whitespace from either end of the string
        s = s.trim();
        int i = Week.findSeparator(s);
        if (i != -1) {
            String s1 = s.substring(0, i).trim();
            String s2 = s.substring(i + 1, s.length()).trim();
            Year y = Week.evaluateAsYear(s1);
            int w;
            if (y != null) {
                w = Week.stringToWeek(s2);
                if (w == -1) {
                    throw new TimePeriodFormatException(""Can't evaluate the week."");
                }
                result = new Week(w, y);
            } else {
                y = Week.evaluateAsYear(s2);
                if (y != null) {
                    w = Week.stringToWeek(s1);
                    if (w == -1) {
                        throw new TimePeriodFormatException(""Can't evaluate the week."");
                    }
                    result = new Week(w, y);
                } else {
                    throw new TimePeriodFormatException(""Can't evaluate the year."");
                }
            }
        } else {
            throw new TimePeriodFormatException(""Could not find separator."");
        }
    }
    return result;
}","public void test3480() throws Throwable {
    // Undeclared exception!
    try {
        Week.parseWeek(""X`!}^UK15x(_zAC#.r"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Can't evaluate the year.
        //
        verifyException(""org.jfree.data.time.Week"", e);
    }
}","/**
 * Parses the string argument as a week.
 * <P>
 * This method is required to accept the format ""YYYY-Wnn"".  It will also
 * accept ""Wnn-YYYY"". Anything else, at the moment, is a bonus.
 *
 * @param s  string to parse.
 *
 * @return <code>null</code> if the string is not parseable, the week
 *         otherwise.
 */"
"public static Week parseWeek(String s) {
    Week result = null;
    if (s != null) {
        // trim whitespace from either end of the string
        s = s.trim();
        int i = Week.findSeparator(s);
        if (i != -1) {
            String s1 = s.substring(0, i).trim();
            String s2 = s.substring(i + 1, s.length()).trim();
            Year y = Week.evaluateAsYear(s1);
            int w;
            if (y != null) {
                w = Week.stringToWeek(s2);
                if (w == -1) {
                    throw new TimePeriodFormatException(""Can't evaluate the week."");
                }
                result = new Week(w, y);
            } else {
                y = Week.evaluateAsYear(s2);
                if (y != null) {
                    w = Week.stringToWeek(s1);
                    if (w == -1) {
                        throw new TimePeriodFormatException(""Can't evaluate the week."");
                    }
                    result = new Week(w, y);
                } else {
                    throw new TimePeriodFormatException(""Can't evaluate the year."");
                }
            }
        } else {
            throw new TimePeriodFormatException(""Could not find separator."");
        }
    }
    return result;
}","public void test3581() throws Throwable {
    // Undeclared exception!
    try {
        Week.parseWeek("""");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Could not find separator.
        //
        verifyException(""org.jfree.data.time.Week"", e);
    }
}","/**
 * Parses the string argument as a week.
 * <P>
 * This method is required to accept the format ""YYYY-Wnn"".  It will also
 * accept ""Wnn-YYYY"". Anything else, at the moment, is a bonus.
 *
 * @param s  string to parse.
 *
 * @return <code>null</code> if the string is not parseable, the week
 *         otherwise.
 */"
"public static Week parseWeek(String s) {
    Week result = null;
    if (s != null) {
        // trim whitespace from either end of the string
        s = s.trim();
        int i = Week.findSeparator(s);
        if (i != -1) {
            String s1 = s.substring(0, i).trim();
            String s2 = s.substring(i + 1, s.length()).trim();
            Year y = Week.evaluateAsYear(s1);
            int w;
            if (y != null) {
                w = Week.stringToWeek(s2);
                if (w == -1) {
                    throw new TimePeriodFormatException(""Can't evaluate the week."");
                }
                result = new Week(w, y);
            } else {
                y = Week.evaluateAsYear(s2);
                if (y != null) {
                    w = Week.stringToWeek(s1);
                    if (w == -1) {
                        throw new TimePeriodFormatException(""Can't evaluate the week."");
                    }
                    result = new Week(w, y);
                } else {
                    throw new TimePeriodFormatException(""Can't evaluate the year."");
                }
            }
        } else {
            throw new TimePeriodFormatException(""Could not find separator."");
        }
    }
    return result;
}","public void test3682() throws Throwable {
    Week week0 = Week.parseWeek((String) null);
    assertNull(week0);
}","/**
 * Parses the string argument as a week.
 * <P>
 * This method is required to accept the format ""YYYY-Wnn"".  It will also
 * accept ""Wnn-YYYY"". Anything else, at the moment, is a bonus.
 *
 * @param s  string to parse.
 *
 * @return <code>null</code> if the string is not parseable, the week
 *         otherwise.
 */"
"public int compareTo(Object o1) {
    int result;
    // CASE 1 : Comparing to another Week object
    // --------------------------------------------
    if (o1 instanceof Week) {
        Week w = (Week) o1;
        result = this.year - w.getYear().getYear();
        if (result == 0) {
            result = this.week - w.getWeek();
        }
    } else // CASE 2 : Comparing to another TimePeriod object
    // -----------------------------------------------
    if (o1 instanceof RegularTimePeriod) {
        // more difficult case - evaluate later...
        result = 0;
    } else // CASE 3 : Comparing to a non-TimePeriod object
    // ---------------------------------------------
    {
        // consider time periods to be ordered after general objects
        result = 1;
    }
    return result;
}","public void test3783() throws Throwable {
    Year year0 = new Year();
    Week week0 = new Week(0, year0);
    Date date0 = week0.getEnd();
    int int0 = week0.compareTo(date0);
    assertEquals(1, int0);
}","/**
 * Returns an integer indicating the order of this Week object relative to
 * the specified object:
 *
 * negative == before, zero == same, positive == after.
 *
 * @param o1  the object to compare.
 *
 * @return negative == before, zero == same, positive == after.
 */"
"public long getLastMillisecond() {
    return this.lastMillisecond;
}","public void test3784() throws Throwable {
    Year year0 = new Year();
    Week week0 = new Week(0, year0);
    Date date0 = week0.getEnd();
    int int0 = week0.compareTo(date0);
    assertEquals(1392409281319L, week0.getLastMillisecond());
}","/**
 * Returns the last millisecond of the week.  This will be
 * determined relative to the time zone specified in the constructor, or
 * in the calendar instance passed in the most recent call to the
 * {@link #peg(Calendar)} method.
 *
 * @return The last millisecond of the week.
 *
 * @see #getFirstMillisecond()
 */"
"public long getSerialIndex() {
    return this.year * 53L + this.week;
}","public void test3785() throws Throwable {
    Year year0 = new Year();
    Week week0 = new Week(0, year0);
    Date date0 = week0.getEnd();
    int int0 = week0.compareTo(date0);
    assertEquals(106742L, week0.getSerialIndex());
}","/**
 * Returns a serial index number for the week.
 *
 * @return The serial index number.
 */"
"public abstract long getSerialIndex();","public void test3886() throws Throwable {
    Week week0 = new Week(3390, 3390);
    RegularTimePeriod regularTimePeriod0 = week0.next();
    int int0 = week0.compareTo(regularTimePeriod0);
    assertEquals(179724L, regularTimePeriod0.getSerialIndex());
}","/**
 * Returns a serial index number for the time unit.
 *
 * @return The serial index number.
 */"
"public int compareTo(Object o1) {
    int result;
    // CASE 1 : Comparing to another Week object
    // --------------------------------------------
    if (o1 instanceof Week) {
        Week w = (Week) o1;
        result = this.year - w.getYear().getYear();
        if (result == 0) {
            result = this.week - w.getWeek();
        }
    } else // CASE 2 : Comparing to another TimePeriod object
    // -----------------------------------------------
    if (o1 instanceof RegularTimePeriod) {
        // more difficult case - evaluate later...
        result = 0;
    } else // CASE 3 : Comparing to a non-TimePeriod object
    // ---------------------------------------------
    {
        // consider time periods to be ordered after general objects
        result = 1;
    }
    return result;
}","public void test3887() throws Throwable {
    Week week0 = new Week(3390, 3390);
    RegularTimePeriod regularTimePeriod0 = week0.next();
    int int0 = week0.compareTo(regularTimePeriod0);
    assertEquals((-1), int0);
}","/**
 * Returns an integer indicating the order of this Week object relative to
 * the specified object:
 *
 * negative == before, zero == same, positive == after.
 *
 * @param o1  the object to compare.
 *
 * @return negative == before, zero == same, positive == after.
 */"
"public abstract long getLastMillisecond();","public void test3888() throws Throwable {
    Week week0 = new Week(3390, 3390);
    RegularTimePeriod regularTimePeriod0 = week0.next();
    int int0 = week0.compareTo(regularTimePeriod0);
    assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
}","/**
 * Returns the last millisecond of the time period.  This will be
 * determined relative to the time zone specified in the constructor, or
 * in the calendar instance passed in the most recent call to the
 * {@link #peg(Calendar)} method.
 *
 * @return The last millisecond of the time period.
 *
 * @see #getFirstMillisecond()
 */"
"public long getLastMillisecond() {
    return this.lastMillisecond;
}","public void test3989() throws Throwable {
    Week week0 = new Week();
    MockDate mockDate0 = new MockDate(53, 1, 1, (-496), 53);
    Year year0 = new Year(mockDate0, week0.DEFAULT_TIME_ZONE);
    int int0 = week0.compareTo(year0);
    assertEquals(1392409281319L, week0.getLastMillisecond());
}","/**
 * Returns the last millisecond of the week.  This will be
 * determined relative to the time zone specified in the constructor, or
 * in the calendar instance passed in the most recent call to the
 * {@link #peg(Calendar)} method.
 *
 * @return The last millisecond of the week.
 *
 * @see #getFirstMillisecond()
 */"
"public long getSerialIndex() {
    return this.year * 53L + this.week;
}","public void test3990() throws Throwable {
    Week week0 = new Week();
    MockDate mockDate0 = new MockDate(53, 1, 1, (-496), 53);
    Year year0 = new Year(mockDate0, week0.DEFAULT_TIME_ZONE);
    int int0 = week0.compareTo(year0);
    assertEquals(106749L, week0.getSerialIndex());
}","/**
 * Returns a serial index number for the week.
 *
 * @return The serial index number.
 */"
"public int compareTo(Object o1) {
    int result;
    // CASE 1 : Comparing to another Week object
    // --------------------------------------------
    if (o1 instanceof Week) {
        Week w = (Week) o1;
        result = this.year - w.getYear().getYear();
        if (result == 0) {
            result = this.week - w.getWeek();
        }
    } else // CASE 2 : Comparing to another TimePeriod object
    // -----------------------------------------------
    if (o1 instanceof RegularTimePeriod) {
        // more difficult case - evaluate later...
        result = 0;
    } else // CASE 3 : Comparing to a non-TimePeriod object
    // ---------------------------------------------
    {
        // consider time periods to be ordered after general objects
        result = 1;
    }
    return result;
}","public void test3991() throws Throwable {
    Week week0 = new Week();
    MockDate mockDate0 = new MockDate(53, 1, 1, (-496), 53);
    Year year0 = new Year(mockDate0, week0.DEFAULT_TIME_ZONE);
    int int0 = week0.compareTo(year0);
    assertEquals(0, int0);
}","/**
 * Returns an integer indicating the order of this Week object relative to
 * the specified object:
 *
 * negative == before, zero == same, positive == after.
 *
 * @param o1  the object to compare.
 *
 * @return negative == before, zero == same, positive == after.
 */"
"public long getLastMillisecond() {
    return this.lastMillisecond;
}","public void test4092() throws Throwable {
    Year year0 = new Year(3388);
    Week week0 = new Week(3388, year0);
    Week week1 = new Week(3388, year0);
    boolean boolean0 = week0.equals(week1);
    assertEquals(1392409281319L, week1.getLastMillisecond());
}","/**
 * Returns the last millisecond of the week.  This will be
 * determined relative to the time zone specified in the constructor, or
 * in the calendar instance passed in the most recent call to the
 * {@link #peg(Calendar)} method.
 *
 * @return The last millisecond of the week.
 *
 * @see #getFirstMillisecond()
 */"
"public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof Week)) {
        return false;
    }
    Week that = (Week) obj;
    if (this.week != that.week) {
        return false;
    }
    if (this.year != that.year) {
        return false;
    }
    return true;
}","public void test4093() throws Throwable {
    Year year0 = new Year(3388);
    Week week0 = new Week(3388, year0);
    Week week1 = new Week(3388, year0);
    boolean boolean0 = week0.equals(week1);
    assertTrue(boolean0);
}","/**
 * Tests the equality of this Week object to an arbitrary object.  Returns
 * true if the target is a Week instance representing the same week as this
 * object.  In all other cases, returns false.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return <code>true</code> if week and year of this and object are the
 *         same.
 */"
"public int getWeek() {
    return this.week;
}","public void test4094() throws Throwable {
    Year year0 = new Year(3388);
    Week week0 = new Week(3388, year0);
    Week week1 = new Week(3388, year0);
    boolean boolean0 = week0.equals(week1);
    assertEquals(60, week1.getWeek());
}","/**
 * Returns the week.
 *
 * @return The week.
 */"
"public RegularTimePeriod next() {
    Week result;
    if (this.week < 52) {
        result = new Week(this.week + 1, this.year);
    } else {
        Calendar calendar = Calendar.getInstance();
        calendar.set(this.year, Calendar.DECEMBER, 31);
        int actualMaxWeek = calendar.getActualMaximum(Calendar.WEEK_OF_YEAR);
        if (this.week < actualMaxWeek) {
            result = new Week(this.week + 1, this.year);
        } else {
            if (this.year < 9999) {
                result = new Week(FIRST_WEEK_IN_YEAR, this.year + 1);
            } else {
                result = null;
            }
        }
    }
    return result;
}","public void test4195() throws Throwable {
    Week week0 = new Week(3390, 3390);
    RegularTimePeriod regularTimePeriod0 = week0.next();
    assertNotNull(regularTimePeriod0);
}","/**
 * Returns the week following this one.  This method will return
 * <code>null</code> for some upper limit on the range of weeks (currently
 * week 53, 9999).  For week 52 of any year, the following week is always
 * week 53, but week 53 may not contain any days (you should check for
 * this).
 *
 * @return The following week (possibly <code>null</code>).
 */"
"public abstract long getLastMillisecond();","public void test4196() throws Throwable {
    Week week0 = new Week(3390, 3390);
    RegularTimePeriod regularTimePeriod0 = week0.next();
    boolean boolean0 = week0.equals(regularTimePeriod0);
    assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
}","/**
 * Returns the last millisecond of the time period.  This will be
 * determined relative to the time zone specified in the constructor, or
 * in the calendar instance passed in the most recent call to the
 * {@link #peg(Calendar)} method.
 *
 * @return The last millisecond of the time period.
 *
 * @see #getFirstMillisecond()
 */"
"public abstract long getSerialIndex();","public void test4197() throws Throwable {
    Week week0 = new Week(3390, 3390);
    RegularTimePeriod regularTimePeriod0 = week0.next();
    boolean boolean0 = week0.equals(regularTimePeriod0);
    assertEquals(179724L, regularTimePeriod0.getSerialIndex());
}","/**
 * Returns a serial index number for the time unit.
 *
 * @return The serial index number.
 */"
"public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof Week)) {
        return false;
    }
    Week that = (Week) obj;
    if (this.week != that.week) {
        return false;
    }
    if (this.year != that.year) {
        return false;
    }
    return true;
}","public void test4198() throws Throwable {
    Week week0 = new Week(3390, 3390);
    RegularTimePeriod regularTimePeriod0 = week0.next();
    boolean boolean0 = week0.equals(regularTimePeriod0);
    assertFalse(boolean0);
}","/**
 * Tests the equality of this Week object to an arbitrary object.  Returns
 * true if the target is a Week instance representing the same week as this
 * object.  In all other cases, returns false.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return <code>true</code> if week and year of this and object are the
 *         same.
 */"
"public long getLastMillisecond() {
    return this.lastMillisecond;
}","public void test4299() throws Throwable {
    Year year0 = new Year(3388);
    Week week0 = new Week(3388, year0);
    Week week1 = new Week(3388, 1);
    boolean boolean0 = week0.equals(week1);
    assertEquals(1392409281319L, week1.getLastMillisecond());
}","/**
 * Returns the last millisecond of the week.  This will be
 * determined relative to the time zone specified in the constructor, or
 * in the calendar instance passed in the most recent call to the
 * {@link #peg(Calendar)} method.
 *
 * @return The last millisecond of the week.
 *
 * @see #getFirstMillisecond()
 */"
"public long getSerialIndex() {
    return this.year * 53L + this.week;
}","public void test42100() throws Throwable {
    Year year0 = new Year(3388);
    Week week0 = new Week(3388, year0);
    Week week1 = new Week(3388, 1);
    boolean boolean0 = week0.equals(week1);
    assertEquals(179624L, week0.getSerialIndex());
}","/**
 * Returns a serial index number for the week.
 *
 * @return The serial index number.
 */"
"public long getSerialIndex() {
    return this.year * 53L + this.week;
}","public void test42101() throws Throwable {
    Year year0 = new Year(3388);
    Week week0 = new Week(3388, year0);
    Week week1 = new Week(3388, 1);
    boolean boolean0 = week0.equals(week1);
    assertEquals(113L, week1.getSerialIndex());
}","/**
 * Returns a serial index number for the week.
 *
 * @return The serial index number.
 */"
"public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof Week)) {
        return false;
    }
    Week that = (Week) obj;
    if (this.week != that.week) {
        return false;
    }
    if (this.year != that.year) {
        return false;
    }
    return true;
}","public void test42102() throws Throwable {
    Year year0 = new Year(3388);
    Week week0 = new Week(3388, year0);
    Week week1 = new Week(3388, 1);
    boolean boolean0 = week0.equals(week1);
    assertFalse(boolean0);
}","/**
 * Tests the equality of this Week object to an arbitrary object.  Returns
 * true if the target is a Week instance representing the same week as this
 * object.  In all other cases, returns false.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return <code>true</code> if week and year of this and object are the
 *         same.
 */"
"public long getLastMillisecond() {
    return this.lastMillisecond;
}","public void test43103() throws Throwable {
    Year year0 = new Year(2519);
    Week week0 = new Week(2519, year0);
    week0.equals(week0);
    assertEquals(1392409281319L, week0.getLastMillisecond());
}","/**
 * Returns the last millisecond of the week.  This will be
 * determined relative to the time zone specified in the constructor, or
 * in the calendar instance passed in the most recent call to the
 * {@link #peg(Calendar)} method.
 *
 * @return The last millisecond of the week.
 *
 * @see #getFirstMillisecond()
 */"
"public long getSerialIndex() {
    return this.year * 53L + this.week;
}","public void test43104() throws Throwable {
    Year year0 = new Year(2519);
    Week week0 = new Week(2519, year0);
    week0.equals(week0);
    assertEquals(133466L, week0.getSerialIndex());
}","/**
 * Returns a serial index number for the week.
 *
 * @return The serial index number.
 */"
"public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof Week)) {
        return false;
    }
    Week that = (Week) obj;
    if (this.week != that.week) {
        return false;
    }
    if (this.year != that.year) {
        return false;
    }
    return true;
}","public void test44105() throws Throwable {
    Week week0 = new Week();
    boolean boolean0 = week0.equals(""Week 7, 2014"");
    assertFalse(boolean0);
}","/**
 * Tests the equality of this Week object to an arbitrary object.  Returns
 * true if the target is a Week instance representing the same week as this
 * object.  In all other cases, returns false.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return <code>true</code> if week and year of this and object are the
 *         same.
 */"
"public long getLastMillisecond() {
    return this.lastMillisecond;
}","public void test44106() throws Throwable {
    Week week0 = new Week();
    boolean boolean0 = week0.equals(""Week 7, 2014"");
    assertEquals(1392409281319L, week0.getLastMillisecond());
}","/**
 * Returns the last millisecond of the week.  This will be
 * determined relative to the time zone specified in the constructor, or
 * in the calendar instance passed in the most recent call to the
 * {@link #peg(Calendar)} method.
 *
 * @return The last millisecond of the week.
 *
 * @see #getFirstMillisecond()
 */"
"public long getSerialIndex() {
    return this.year * 53L + this.week;
}","public void test44107() throws Throwable {
    Week week0 = new Week();
    boolean boolean0 = week0.equals(""Week 7, 2014"");
    assertEquals(106749L, week0.getSerialIndex());
}","/**
 * Returns a serial index number for the week.
 *
 * @return The serial index number.
 */"
"public abstract long getSerialIndex();","public void test45108() throws Throwable {
    MockDate mockDate0 = new MockDate((-969), (-1322), (-969), (-969), (-1322));
    Week week0 = new Week(mockDate0);
    RegularTimePeriod regularTimePeriod0 = week0.next();
    assertEquals(43360L, regularTimePeriod0.getSerialIndex());
}","/**
 * Returns a serial index number for the time unit.
 *
 * @return The serial index number.
 */"
"public abstract long getLastMillisecond();","public void test45109() throws Throwable {
    MockDate mockDate0 = new MockDate((-969), (-1322), (-969), (-969), (-1322));
    Week week0 = new Week(mockDate0);
    RegularTimePeriod regularTimePeriod0 = week0.next();
    assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
}","/**
 * Returns the last millisecond of the time period.  This will be
 * determined relative to the time zone specified in the constructor, or
 * in the calendar instance passed in the most recent call to the
 * {@link #peg(Calendar)} method.
 *
 * @return The last millisecond of the time period.
 *
 * @see #getFirstMillisecond()
 */"
"public long getSerialIndex() {
    return this.year * 53L + this.week;
}","public void test46110() throws Throwable {
    Week week0 = new Week(1, 1675);
    RegularTimePeriod regularTimePeriod0 = week0.previous();
    assertEquals(88776L, week0.getSerialIndex());
}","/**
 * Returns a serial index number for the week.
 *
 * @return The serial index number.
 */"
"public long getLastMillisecond() {
    return this.lastMillisecond;
}","public void test46111() throws Throwable {
    Week week0 = new Week(1, 1675);
    RegularTimePeriod regularTimePeriod0 = week0.previous();
    assertEquals(1392409281319L, week0.getLastMillisecond());
}","/**
 * Returns the last millisecond of the week.  This will be
 * determined relative to the time zone specified in the constructor, or
 * in the calendar instance passed in the most recent call to the
 * {@link #peg(Calendar)} method.
 *
 * @return The last millisecond of the week.
 *
 * @see #getFirstMillisecond()
 */"
"public RegularTimePeriod previous() {
    Week result;
    if (this.week != FIRST_WEEK_IN_YEAR) {
        result = new Week(this.week - 1, this.year);
    } else {
        // we need to work out if the previous year has 52 or 53 weeks...
        if (this.year > 1900) {
            int yy = this.year - 1;
            Calendar prevYearCalendar = Calendar.getInstance();
            prevYearCalendar.set(yy, Calendar.DECEMBER, 31);
            result = new Week(prevYearCalendar.getActualMaximum(Calendar.WEEK_OF_YEAR), yy);
        } else {
            result = null;
        }
    }
    return result;
}","public void test46112() throws Throwable {
    Week week0 = new Week(1, 1675);
    RegularTimePeriod regularTimePeriod0 = week0.previous();
    assertNull(regularTimePeriod0);
}","/**
 * Returns the week preceding this one.  This method will return
 * <code>null</code> for some lower limit on the range of weeks (currently
 * week 1, 1900).  For week 1 of any year, the previous week is always week
 * 53, but week 53 may not contain any days (you should check for this).
 *
 * @return The preceding week (possibly <code>null</code>).
 */"
"public long getSerialIndex() {
    return this.year * 53L + this.week;
}","public void test47113() throws Throwable {
    MockDate mockDate0 = new MockDate(0, 0, 8);
    mockDate0.setTime(8);
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    Locale locale0 = Locale.FRENCH;
    Week week0 = new Week(mockDate0, simpleTimeZone0, locale0);
    long long0 = week0.getLastMillisecond();
    assertEquals(104411L, week0.getSerialIndex());
}","/**
 * Returns a serial index number for the week.
 *
 * @return The serial index number.
 */"
"public long getLastMillisecond() {
    return this.lastMillisecond;
}","public void test47114() throws Throwable {
    MockDate mockDate0 = new MockDate(0, 0, 8);
    mockDate0.setTime(8);
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    Locale locale0 = Locale.FRENCH;
    Week week0 = new Week(mockDate0, simpleTimeZone0, locale0);
    long long0 = week0.getLastMillisecond();
    assertEquals(7L, long0);
}","/**
 * Returns the last millisecond of the week.  This will be
 * determined relative to the time zone specified in the constructor, or
 * in the calendar instance passed in the most recent call to the
 * {@link #peg(Calendar)} method.
 *
 * @return The last millisecond of the week.
 *
 * @see #getFirstMillisecond()
 */"
"public abstract long getSerialIndex();","public void test48115() throws Throwable {
    MockDate mockDate0 = new MockDate((-1L));
    TimeZone timeZone0 = TimeZone.getTimeZone(""4wmx)"");
    Locale locale0 = Locale.KOREAN;
    Week week0 = new Week(mockDate0, timeZone0, locale0);
    RegularTimePeriod regularTimePeriod0 = week0.previous();
    assertEquals(104409L, regularTimePeriod0.getSerialIndex());
}","/**
 * Returns a serial index number for the time unit.
 *
 * @return The serial index number.
 */"
"public RegularTimePeriod previous() {
    Week result;
    if (this.week != FIRST_WEEK_IN_YEAR) {
        result = new Week(this.week - 1, this.year);
    } else {
        // we need to work out if the previous year has 52 or 53 weeks...
        if (this.year > 1900) {
            int yy = this.year - 1;
            Calendar prevYearCalendar = Calendar.getInstance();
            prevYearCalendar.set(yy, Calendar.DECEMBER, 31);
            result = new Week(prevYearCalendar.getActualMaximum(Calendar.WEEK_OF_YEAR), yy);
        } else {
            result = null;
        }
    }
    return result;
}","public void test48116() throws Throwable {
    MockDate mockDate0 = new MockDate((-1L));
    TimeZone timeZone0 = TimeZone.getTimeZone(""4wmx)"");
    Locale locale0 = Locale.KOREAN;
    Week week0 = new Week(mockDate0, timeZone0, locale0);
    RegularTimePeriod regularTimePeriod0 = week0.previous();
    assertNotNull(regularTimePeriod0);
}","/**
 * Returns the week preceding this one.  This method will return
 * <code>null</code> for some lower limit on the range of weeks (currently
 * week 1, 1900).  For week 1 of any year, the previous week is always week
 * 53, but week 53 may not contain any days (you should check for this).
 *
 * @return The preceding week (possibly <code>null</code>).
 */"
"public Week(Date time, TimeZone zone, Locale locale) {
    if (time == null) {
        throw new IllegalArgumentException(""Null 'time' argument."");
    }
    if (zone == null) {
        throw new IllegalArgumentException(""Null 'zone' argument."");
    }
    if (locale == null) {
        throw new IllegalArgumentException(""Null 'locale' argument."");
    }
    Calendar calendar = Calendar.getInstance(zone, locale);
    calendar.setTime(time);
    // sometimes the last few days of the year are considered to fall in
    // the *first* week of the following year.  Refer to the Javadocs for
    // GregorianCalendar.
    int tempWeek = calendar.get(Calendar.WEEK_OF_YEAR);
    if (tempWeek == 1 && calendar.get(Calendar.MONTH) == Calendar.DECEMBER) {
        this.week = 1;
        this.year = (short) (calendar.get(Calendar.YEAR) + 1);
    } else {
        this.week = (byte) Math.min(tempWeek, LAST_WEEK_IN_YEAR);
        int yyyy = calendar.get(Calendar.YEAR);
        // alternatively, sometimes the first few days of the year are
        // considered to fall in the *last* week of the previous year...
        if (calendar.get(Calendar.MONTH) == Calendar.JANUARY && this.week >= 52) {
            yyyy--;
        }
        this.year = (short) yyyy;
    }
    peg(calendar);
}","public void test49117() throws Throwable {
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
    Date date0 = mockGregorianCalendar0.getGregorianChange();
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-981), ""Null 'day' argument."");
    Week week0 = null;
    try {
        week0 = new Week(date0, simpleTimeZone0, (Locale) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'locale' argument.
        //
        verifyException(""org.jfree.data.time.Week"", e);
    }
}","/**
 * Creates a time period for the week in which the specified date/time
 * falls, calculated relative to the specified time zone.
 *
 * @param time  the date/time (<code>null</code> not permitted).
 * @param zone  the time zone (<code>null</code> not permitted).
 * @param locale  the locale (<code>null</code> not permitted).
 *
 * @since 1.0.7
 */"
"public Week(Date time, TimeZone zone, Locale locale) {
    if (time == null) {
        throw new IllegalArgumentException(""Null 'time' argument."");
    }
    if (zone == null) {
        throw new IllegalArgumentException(""Null 'zone' argument."");
    }
    if (locale == null) {
        throw new IllegalArgumentException(""Null 'locale' argument."");
    }
    Calendar calendar = Calendar.getInstance(zone, locale);
    calendar.setTime(time);
    // sometimes the last few days of the year are considered to fall in
    // the *first* week of the following year.  Refer to the Javadocs for
    // GregorianCalendar.
    int tempWeek = calendar.get(Calendar.WEEK_OF_YEAR);
    if (tempWeek == 1 && calendar.get(Calendar.MONTH) == Calendar.DECEMBER) {
        this.week = 1;
        this.year = (short) (calendar.get(Calendar.YEAR) + 1);
    } else {
        this.week = (byte) Math.min(tempWeek, LAST_WEEK_IN_YEAR);
        int yyyy = calendar.get(Calendar.YEAR);
        // alternatively, sometimes the first few days of the year are
        // considered to fall in the *last* week of the previous year...
        if (calendar.get(Calendar.MONTH) == Calendar.JANUARY && this.week >= 52) {
            yyyy--;
        }
        this.year = (short) yyyy;
    }
    peg(calendar);
}","public void test50118() throws Throwable {
    MockDate mockDate0 = new MockDate(1811, 1811, 9);
    Week week0 = null;
    try {
        week0 = new Week(mockDate0, (TimeZone) null, (Locale) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'zone' argument.
        //
        verifyException(""org.jfree.data.time.Week"", e);
    }
}","/**
 * Creates a time period for the week in which the specified date/time
 * falls, calculated relative to the specified time zone.
 *
 * @param time  the date/time (<code>null</code> not permitted).
 * @param zone  the time zone (<code>null</code> not permitted).
 * @param locale  the locale (<code>null</code> not permitted).
 *
 * @since 1.0.7
 */"
"public abstract long getSerialIndex();","public void test51119() throws Throwable {
    Week week0 = new Week();
    RegularTimePeriod regularTimePeriod0 = week0.previous();
    assertEquals(106748L, regularTimePeriod0.getSerialIndex());
}","/**
 * Returns a serial index number for the time unit.
 *
 * @return The serial index number.
 */"
"public abstract long getLastMillisecond();","public void test51120() throws Throwable {
    Week week0 = new Week();
    RegularTimePeriod regularTimePeriod0 = week0.previous();
    assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
}","/**
 * Returns the last millisecond of the time period.  This will be
 * determined relative to the time zone specified in the constructor, or
 * in the calendar instance passed in the most recent call to the
 * {@link #peg(Calendar)} method.
 *
 * @return The last millisecond of the time period.
 *
 * @see #getFirstMillisecond()
 */"
"public long getSerialIndex() {
    return this.year * 53L + this.week;
}","public void test52121() throws Throwable {
    Week week0 = new Week(0, 0);
    week0.getFirstMillisecond();
    assertEquals(0L, week0.getSerialIndex());
}","/**
 * Returns a serial index number for the week.
 *
 * @return The serial index number.
 */"
"public long getLastMillisecond() {
    return this.lastMillisecond;
}","public void test52122() throws Throwable {
    Week week0 = new Week(0, 0);
    week0.getFirstMillisecond();
    assertEquals(1392409281319L, week0.getLastMillisecond());
}","/**
 * Returns the last millisecond of the week.  This will be
 * determined relative to the time zone specified in the constructor, or
 * in the calendar instance passed in the most recent call to the
 * {@link #peg(Calendar)} method.
 *
 * @return The last millisecond of the week.
 *
 * @see #getFirstMillisecond()
 */"
"public long getLastMillisecond() {
    return this.lastMillisecond;
}","public void test53123() throws Throwable {
    Week week0 = new Week((-584), 2);
    long long0 = week0.getSerialIndex();
    assertEquals(1392409281319L, week0.getLastMillisecond());
}","/**
 * Returns the last millisecond of the week.  This will be
 * determined relative to the time zone specified in the constructor, or
 * in the calendar instance passed in the most recent call to the
 * {@link #peg(Calendar)} method.
 *
 * @return The last millisecond of the week.
 *
 * @see #getFirstMillisecond()
 */"
"public long getSerialIndex() {
    return this.year * 53L + this.week;
}","public void test53124() throws Throwable {
    Week week0 = new Week((-584), 2);
    long long0 = week0.getSerialIndex();
    assertEquals(34L, long0);
}","/**
 * Returns a serial index number for the week.
 *
 * @return The serial index number.
 */"
"public long getLastMillisecond() {
    return this.lastMillisecond;
}","public void test54125() throws Throwable {
    MockDate mockDate0 = new MockDate(0, 0, 8);
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    Locale locale0 = Locale.FRENCH;
    Week week0 = new Week(mockDate0, simpleTimeZone0, locale0);
    String string0 = week0.toString();
    assertEquals((-2208384000001L), week0.getLastMillisecond());
}","/**
 * Returns the last millisecond of the week.  This will be
 * determined relative to the time zone specified in the constructor, or
 * in the calendar instance passed in the most recent call to the
 * {@link #peg(Calendar)} method.
 *
 * @return The last millisecond of the week.
 *
 * @see #getFirstMillisecond()
 */"
"public String toString() {
    return ""Week "" + this.week + "", "" + this.year;
}","public void test54126() throws Throwable {
    MockDate mockDate0 = new MockDate(0, 0, 8);
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    Locale locale0 = Locale.FRENCH;
    Week week0 = new Week(mockDate0, simpleTimeZone0, locale0);
    String string0 = week0.toString();
    assertEquals(""Week 2, 1900"", string0);
}","/**
 * Returns a string representing the week (e.g. ""Week 9, 2002"").
 *
 * TODO: look at internationalisation.
 *
 * @return A string representing the week.
 */"
"public long getLastMillisecond() {
    return this.lastMillisecond;
}","public void test55127() throws Throwable {
    MockDate mockDate0 = new MockDate(0, 0, 8);
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    Locale locale0 = Locale.FRENCH;
    Week week0 = new Week(mockDate0, simpleTimeZone0, locale0);
    int int0 = week0.getYearValue();
    assertEquals((-2208384000001L), week0.getLastMillisecond());
}","/**
 * Returns the last millisecond of the week.  This will be
 * determined relative to the time zone specified in the constructor, or
 * in the calendar instance passed in the most recent call to the
 * {@link #peg(Calendar)} method.
 *
 * @return The last millisecond of the week.
 *
 * @see #getFirstMillisecond()
 */"
"public int getWeek() {
    return this.week;
}","public void test55128() throws Throwable {
    MockDate mockDate0 = new MockDate(0, 0, 8);
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    Locale locale0 = Locale.FRENCH;
    Week week0 = new Week(mockDate0, simpleTimeZone0, locale0);
    int int0 = week0.getYearValue();
    assertEquals(2, week0.getWeek());
}","/**
 * Returns the week.
 *
 * @return The week.
 */"
"public int getYearValue() {
    return this.year;
}","public void test55129() throws Throwable {
    MockDate mockDate0 = new MockDate(0, 0, 8);
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    Locale locale0 = Locale.FRENCH;
    Week week0 = new Week(mockDate0, simpleTimeZone0, locale0);
    int int0 = week0.getYearValue();
    assertEquals(1900, int0);
}","/**
 * Returns the year in which the week falls, as an integer value.
 *
 * @return The year.
 */"
"public static Week parseWeek(String s) {
    Week result = null;
    if (s != null) {
        // trim whitespace from either end of the string
        s = s.trim();
        int i = Week.findSeparator(s);
        if (i != -1) {
            String s1 = s.substring(0, i).trim();
            String s2 = s.substring(i + 1, s.length()).trim();
            Year y = Week.evaluateAsYear(s1);
            int w;
            if (y != null) {
                w = Week.stringToWeek(s2);
                if (w == -1) {
                    throw new TimePeriodFormatException(""Can't evaluate the week."");
                }
                result = new Week(w, y);
            } else {
                y = Week.evaluateAsYear(s2);
                if (y != null) {
                    w = Week.stringToWeek(s1);
                    if (w == -1) {
                        throw new TimePeriodFormatException(""Can't evaluate the week."");
                    }
                    result = new Week(w, y);
                } else {
                    throw new TimePeriodFormatException(""Can't evaluate the year."");
                }
            }
        } else {
            throw new TimePeriodFormatException(""Could not find separator."");
        }
    }
    return result;
}","public void test56130() throws Throwable {
    // Undeclared exception!
    try {
        Week.parseWeek(""Week 6, 2014"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Can't evaluate the week.
        //
        verifyException(""org.jfree.data.time.Week"", e);
    }
}","/**
 * Parses the string argument as a week.
 * <P>
 * This method is required to accept the format ""YYYY-Wnn"".  It will also
 * accept ""Wnn-YYYY"". Anything else, at the moment, is a bonus.
 *
 * @param s  string to parse.
 *
 * @return <code>null</code> if the string is not parseable, the week
 *         otherwise.
 */"
"public long getLastMillisecond() {
    return this.lastMillisecond;
}","public void test57131() throws Throwable {
    MockDate mockDate0 = new MockDate(0, 0, 8);
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    Locale locale0 = Locale.FRENCH;
    Week week0 = new Week(mockDate0, simpleTimeZone0, locale0);
    long long0 = week0.getLastMillisecond();
    assertEquals((-2208384000001L), long0);
}","/**
 * Returns the last millisecond of the week.  This will be
 * determined relative to the time zone specified in the constructor, or
 * in the calendar instance passed in the most recent call to the
 * {@link #peg(Calendar)} method.
 *
 * @return The last millisecond of the week.
 *
 * @see #getFirstMillisecond()
 */"
"public int getWeek() {
    return this.week;
}","public void test57132() throws Throwable {
    MockDate mockDate0 = new MockDate(0, 0, 8);
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    Locale locale0 = Locale.FRENCH;
    Week week0 = new Week(mockDate0, simpleTimeZone0, locale0);
    long long0 = week0.getLastMillisecond();
    assertEquals(2, week0.getWeek());
}","/**
 * Returns the week.
 *
 * @return The week.
 */"
"public Year getYear() {
    return new Year(this.year);
}","public void test58133() throws Throwable {
    MockDate mockDate0 = new MockDate((-969), (-1322), (-969), (-969), (-1322));
    Week week0 = new Week(mockDate0);
    // Undeclared exception!
    try {
        week0.getYear();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Year constructor: year (818) outside valid range.
        //
        verifyException(""org.jfree.data.time.Year"", e);
    }
}","/**
 * Returns the year in which the week falls.
 *
 * @return The year (never <code>null</code>).
 */"
"public Week(Date time, TimeZone zone) {
    // defer argument checking...
    this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());
}","public void test59134() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1020, ""org.jfree.data.time.Week"");
    Week week0 = null;
    try {
        week0 = new Week((Date) null, simpleTimeZone0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'time' argument.
        //
        verifyException(""org.jfree.data.time.Week"", e);
    }
}","/**
 * Creates a time period for the week in which the specified date/time
 * falls, calculated relative to the specified time zone.
 *
 * @param time  the date/time (<code>null</code> not permitted).
 * @param zone  the time zone (<code>null</code> not permitted).
 *
 * @deprecated As of 1.0.7, use {@link #Week(Date, TimeZone, Locale)}.
 */"
