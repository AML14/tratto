project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
    Integer integer0 = new Integer(1311);
    keyedObjects2D0.addObject(integer0, integer0, integer0);
    keyedObjects2D0.hashCode();
}",0,
project,0,test011,"public void test011() throws Throwable {
    KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
    Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
    keyedObjects2D0.removeObject(comparable0, ""'position' out of bounds."");
    Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
    doReturn(""'position' out of bounds."", """", ""gU?UC&dXNpi~WAOH!T"", ""'position' out of bounds."").when(comparable1).toString();
    keyedObjects2D0.setObject((Object) null, comparable1, comparable1);
    Object object0 = keyedObjects2D0.clone();
    boolean boolean0 = keyedObjects2D0.equals(object0);
    assertEquals(1, keyedObjects2D0.getRowCount());
}",0,
project,0,test012,"public void test012() throws Throwable {
    KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
    Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
    keyedObjects2D0.removeObject(comparable0, ""'position' out of bounds."");
    Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
    doReturn(""'position' out of bounds."", """", ""gU?UC&dXNpi~WAOH!T"", ""'position' out of bounds."").when(comparable1).toString();
    keyedObjects2D0.setObject((Object) null, comparable1, comparable1);
    Object object0 = keyedObjects2D0.clone();
    boolean boolean0 = keyedObjects2D0.equals(object0);
    assertTrue(boolean0);
}",0,
project,0,test023,"public void test023() throws Throwable {
    KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
    Comparable<KeyedObjects> comparable0 = (Comparable<KeyedObjects>) mock(Comparable.class, new ViolatedAssumptionAnswer());
    Comparable<String> comparable1 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
    keyedObjects2D0.setObject(keyedObjects2D0, comparable1, comparable1);
    Comparable<KeyedObjects> comparable2 = (Comparable<KeyedObjects>) mock(Comparable.class, new ViolatedAssumptionAnswer());
    keyedObjects2D0.removeObject(comparable0, comparable2);
    assertEquals(1, keyedObjects2D0.getRowCount());
}",0,
project,0,test034,"public void test034() throws Throwable {
    KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
    KeyedObjects keyedObjects0 = new KeyedObjects();
    Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
    keyedObjects2D0.addObject(keyedObjects0, comparable0, comparable0);
    keyedObjects2D0.addObject(keyedObjects2D0, ""-JSH\""n"", ""-JSH\""n"");
    keyedObjects2D0.setObject(keyedObjects2D0, ""-JSH\""n"", ""-JSH\""n"");
    assertEquals(2, keyedObjects2D0.getRowCount());
}",0,"assertEquals(1, keyedObjects2D0.getRowCount())"
project,0,test045,"public void test045() throws Throwable {
    KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
    Integer integer0 = Integer.getInteger("""", 0);
    keyedObjects2D0.setObject(keyedObjects2D0, integer0, """");
    keyedObjects2D0.setObject(""M|F8@("", ""M|F8@("", ""M|F8@("");
    Comparable comparable0 = keyedObjects2D0.getRowKey(0);
    // Undeclared exception!
    try {
        keyedObjects2D0.getObject((Comparable) comparable0, (Comparable) ""M|F8@("");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The key (M|F8@() is not recognised.
        //
        verifyException(""org.jfree.data.KeyedObjects"", e);
    }
}",0,
project,0,test056,"public void test056() throws Throwable {
    KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
    Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
    doReturn((String) null).when(comparable0).toString();
    Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
    // Undeclared exception!
    try {
        keyedObjects2D0.getObject(comparable0, comparable1);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Row key (null) not recognised.
        //
        verifyException(""org.jfree.data.KeyedObjects2D"", e);
    }
}",1,
project,0,test067,"public void test067() throws Throwable {
    KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
    KeyedObjects keyedObjects0 = new KeyedObjects();
    Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
    Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
    keyedObjects2D0.setObject(keyedObjects0, comparable0, comparable1);
    keyedObjects2D0.addObject("""", """", """");
    Object object0 = keyedObjects2D0.getObject((Comparable) """", (Comparable) """");
    assertEquals("""", object0);
}",0,
project,0,test078,"public void test078() throws Throwable {
    KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
    Integer integer0 = new Integer(0);
    keyedObjects2D0.addObject(integer0, integer0, integer0);
    keyedObjects2D0.removeRow(0);
    assertEquals(0, keyedObjects2D0.getRowCount());
}",0,"assertEquals(0, keyedObjects2D0.getRowCount())"
project,0,test089,"public void test089() throws Throwable {
    KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
    keyedObjects2D0.addObject("""", """", """");
    keyedObjects2D0.removeColumn(0);
    assertEquals(1, keyedObjects2D0.getRowCount());
}",0,"assertEquals(0, keyedObjects2D0.getRowCount())"
project,0,test0910,"public void test0910() throws Throwable {
    KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
    Integer integer0 = new Integer(1311);
    keyedObjects2D0.addObject(integer0, integer0, integer0);
    int int0 = keyedObjects2D0.getRowIndex(integer0);
    assertEquals(0, int0);
}",1,
project,0,test1011,"public void test1011() throws Throwable {
    KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
    Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
    keyedObjects2D0.addObject(keyedObjects2D0, comparable0, comparable0);
    int int0 = keyedObjects2D0.getRowCount();
    assertEquals(1, int0);
}",0,"assertEquals(1, int0)"
project,0,test1112,"public void test1112() throws Throwable {
    KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
    keyedObjects2D0.setObject((Object) null, ""M|F8@("", ""M|F8@("");
    Comparable comparable0 = keyedObjects2D0.getRowKey(0);
    Object object0 = keyedObjects2D0.getObject((Comparable) comparable0, (Comparable) ""M|F8@("");
    assertNull(object0);
}",0,assertNotNull(object0)
project,0,test1213,"public void test1213() throws Throwable {
    KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
    keyedObjects2D0.setObject("""", """", """");
    Integer integer0 = new Integer(0);
    Comparable comparable0 = keyedObjects2D0.getColumnKey((int) integer0);
    assertEquals("""", comparable0);
}",0,assertNotNull(comparable0)
project,0,test1314,"public void test1314() throws Throwable {
    KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
    Integer integer0 = new Integer((-1007));
    keyedObjects2D0.setObject("""", """", integer0);
    int int0 = keyedObjects2D0.getColumnIndex(integer0);
    assertEquals(0, int0);
}",0,"assertEquals(0, int0)"
project,0,test1415,"public void test1415() throws Throwable {
    KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
    Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
    keyedObjects2D0.removeObject(comparable0, comparable0);
    Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
    keyedObjects2D0.removeObject(comparable1, """");
    int int0 = keyedObjects2D0.getColumnIndex("""");
    assertEquals(0, keyedObjects2D0.getRowCount());
}",0,"assertEquals(1, keyedObjects2D0.getRowCount())"
project,0,test1416,"public void test1416() throws Throwable {
    KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
    Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
    keyedObjects2D0.removeObject(comparable0, comparable0);
    Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
    keyedObjects2D0.removeObject(comparable1, """");
    int int0 = keyedObjects2D0.getColumnIndex("""");
    assertEquals(1, int0);
}",0,"assertEquals(0, int0)"
project,0,test1517,"public void test1517() throws Throwable {
    KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
    keyedObjects2D0.setObject("""", """", """");
    int int0 = keyedObjects2D0.getColumnCount();
    assertEquals(1, int0);
}",0,"assertEquals(1, int0)"
project,0,test1618,"public void test1618() throws Throwable {
    KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
    // Undeclared exception!
    try {
        keyedObjects2D0.removeRow((-36));
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",1,
project,0,test1719,"public void test1719() throws Throwable {
    Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
    KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
    // Undeclared exception!
    try {
        keyedObjects2D0.removeObject((Comparable) null, comparable0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'rowKey' argument.
        //
        verifyException(""org.jfree.data.KeyedObjects2D"", e);
    }
}",1,
project,0,test1820,"public void test1820() throws Throwable {
    KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
    // Undeclared exception!
    try {
        keyedObjects2D0.removeColumn((-1289));
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",1,
project,0,test1921,"public void test1921() throws Throwable {
    KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
    // Undeclared exception!
    try {
        keyedObjects2D0.getRowKey((-319));
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test2022,"public void test2022() throws Throwable {
    KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
    // Undeclared exception!
    try {
        keyedObjects2D0.getObject(1, 1);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 1, Size: 0
        //
        verifyException(""java.util.ArrayList"", e);
    }
}",1,
project,0,test2123,"public void test2123() throws Throwable {
    KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
    // Undeclared exception!
    try {
        keyedObjects2D0.getObject((-2815), (-2815));
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",1,
project,0,test2224,"public void test2224() throws Throwable {
    KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
    // Undeclared exception!
    try {
        keyedObjects2D0.getColumnKey((-507));
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test2325,"public void test2325() throws Throwable {
    KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
    Integer integer0 = new Integer(518);
    keyedObjects2D0.setObject(integer0, integer0, integer0);
    Object object0 = new Object();
    keyedObjects2D0.setObject(object0, integer0, integer0);
    assertEquals(1, keyedObjects2D0.getRowCount());
}",0,"assertEquals(0, keyedObjects2D0.getRowCount())"
project,0,test2426,"public void test2426() throws Throwable {
    KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
    // Undeclared exception!
    try {
        keyedObjects2D0.setObject((Object) null, (Comparable) null, (Comparable) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'rowKey' argument.
        //
        verifyException(""org.jfree.data.KeyedObjects2D"", e);
    }
}",1,
project,0,test2527,"public void test2527() throws Throwable {
    KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
    Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
    keyedObjects2D0.removeObject(comparable0, comparable0);
    Object object0 = new Object();
    Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
    Comparable<Object> comparable2 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
    keyedObjects2D0.addObject(object0, comparable1, comparable2);
    keyedObjects2D0.getObject(0, 0);
    assertEquals(1, keyedObjects2D0.getRowCount());
}",0,"assertEquals(0, keyedObjects2D0.getRowCount())"
project,0,test2628,"public void test2628() throws Throwable {
    KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
    keyedObjects2D0.setObject("""", """", """");
    Integer integer0 = new Integer(0);
    Object object0 = keyedObjects2D0.getObject((int) integer0, (int) integer0);
    assertEquals("""", object0);
}",1,
project,0,test2729,"public void test2729() throws Throwable {
    KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
    // Undeclared exception!
    try {
        keyedObjects2D0.removeRow(0);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 0, Size: 0
        //
        verifyException(""java.util.ArrayList"", e);
    }
}",1,
project,0,test2830,"public void test2830() throws Throwable {
    KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
    Comparable<KeyedObjects2D> comparable0 = (Comparable<KeyedObjects2D>) mock(Comparable.class, new ViolatedAssumptionAnswer());
    int int0 = keyedObjects2D0.getRowIndex(comparable0);
    assertEquals((-1), int0);
}",1,
project,0,test2931,"public void test2931() throws Throwable {
    KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
    Integer integer0 = new Integer(0);
    // Undeclared exception!
    try {
        keyedObjects2D0.getColumnKey((int) integer0);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 0, Size: 0
        //
        verifyException(""java.util.ArrayList"", e);
    }
}",0,
project,0,test3032,"public void test3032() throws Throwable {
    KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
    keyedObjects2D0.addObject("""", """", """");
    KeyedObjects2D keyedObjects2D1 = new KeyedObjects2D();
    keyedObjects2D1.addObject(keyedObjects2D0, """", """");
    boolean boolean0 = keyedObjects2D0.equals(keyedObjects2D1);
    assertFalse(boolean0);
}",0,
project,0,test3133,"public void test3133() throws Throwable {
    KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
    KeyedObjects2D keyedObjects2D1 = new KeyedObjects2D();
    assertTrue(keyedObjects2D1.equals((Object) keyedObjects2D0));
}",0,
project,0,test3134,"public void test3134() throws Throwable {
    KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
    KeyedObjects2D keyedObjects2D1 = new KeyedObjects2D();
    Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
    doReturn(""^m\""E/ J"").when(comparable0).toString();
    keyedObjects2D1.removeObject(comparable0, comparable0);
    boolean boolean0 = keyedObjects2D0.equals(keyedObjects2D1);
    assertFalse(keyedObjects2D1.equals((Object) keyedObjects2D0));
}",0,
project,0,test3135,"public void test3135() throws Throwable {
    KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
    KeyedObjects2D keyedObjects2D1 = new KeyedObjects2D();
    Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
    doReturn(""^m\""E/ J"").when(comparable0).toString();
    keyedObjects2D1.removeObject(comparable0, comparable0);
    boolean boolean0 = keyedObjects2D0.equals(keyedObjects2D1);
    assertFalse(boolean0);
}",0,
project,0,test3237,"public void test3237() throws Throwable {
    KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
    KeyedObjects2D keyedObjects2D1 = new KeyedObjects2D();
    Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
    doReturn((String) null).when(comparable0).toString();
    keyedObjects2D0.addObject(keyedObjects2D1, comparable0, comparable0);
    boolean boolean0 = keyedObjects2D0.equals(keyedObjects2D1);
    assertFalse(keyedObjects2D1.equals((Object) keyedObjects2D0));
}",0,
project,0,test3238,"public void test3238() throws Throwable {
    KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
    KeyedObjects2D keyedObjects2D1 = new KeyedObjects2D();
    Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
    doReturn((String) null).when(comparable0).toString();
    keyedObjects2D0.addObject(keyedObjects2D1, comparable0, comparable0);
    boolean boolean0 = keyedObjects2D0.equals(keyedObjects2D1);
    assertFalse(boolean0);
}",0,
project,0,test3339,"public void test3339() throws Throwable {
    KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
    keyedObjects2D0.setObject("""", """", """");
    Comparable comparable0 = keyedObjects2D0.getRowKey(0);
    keyedObjects2D0.removeColumn(comparable0);
    // Undeclared exception!
    try {
        keyedObjects2D0.removeColumn(comparable0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Column key () not recognised.
        //
        verifyException(""org.jfree.data.KeyedObjects2D"", e);
    }
}",1,
project,0,test3440,"public void test3440() throws Throwable {
    KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
    keyedObjects2D0.addObject("""", """", """");
    Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
    keyedObjects2D0.removeObject("""", comparable0);
    keyedObjects2D0.getObject(0, 1);
    assertEquals(1, keyedObjects2D0.getRowCount());
}",0,"assertEquals(0, keyedObjects2D0.getRowCount())"
project,0,test3541,"public void test3541() throws Throwable {
    KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
    // Undeclared exception!
    try {
        keyedObjects2D0.setObject(""M|F8@("", ""M|F8@("", (Comparable) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'columnKey' argument.
        //
        verifyException(""org.jfree.data.KeyedObjects2D"", e);
    }
}",1,
project,0,test3642,"public void test3642() throws Throwable {
    KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
    // Undeclared exception!
    try {
        keyedObjects2D0.addObject((Object) null, (Comparable) null, (Comparable) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'rowKey' argument.
        //
        verifyException(""org.jfree.data.KeyedObjects2D"", e);
    }
}",0,
project,0,test3743,"public void test3743() throws Throwable {
    KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
    Integer integer0 = new Integer((-1007));
    keyedObjects2D0.setObject("""", """", integer0);
    Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
    doReturn("""").when(comparable0).toString();
    // Undeclared exception!
    try {
        keyedObjects2D0.getObject((Comparable) """", (Comparable) comparable0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Column key () not recognised.
        //
        verifyException(""org.jfree.data.KeyedObjects2D"", e);
    }
}",0,
project,0,test3844,"public void test3844() throws Throwable {
    KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
    keyedObjects2D0.addObject("""", """", """");
    keyedObjects2D0.removeRow((Comparable) """");
    // Undeclared exception!
    try {
        keyedObjects2D0.getObject((Comparable) """", (Comparable) """");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Row key () not recognised.
        //
        verifyException(""org.jfree.data.KeyedObjects2D"", e);
    }
}",0,
project,0,test3945,"public void test3945() throws Throwable {
    KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
    keyedObjects2D0.setObject(""Null'columney argumen"", ""Null'columney argumen"", ""Null'columney argumen"");
    Comparable comparable0 = keyedObjects2D0.getRowKey(0);
    // Undeclared exception!
    try {
        keyedObjects2D0.getObject((Comparable) comparable0, (Comparable) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'columnKey' argument.
        //
        verifyException(""org.jfree.data.KeyedObjects2D"", e);
    }
}",0,
project,0,test4046,"public void test4046() throws Throwable {
    KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
    Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
    // Undeclared exception!
    try {
        keyedObjects2D0.getObject((Comparable) null, comparable0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'rowKey' argument.
        //
        verifyException(""org.jfree.data.KeyedObjects2D"", e);
    }
}",1,
project,0,test4147,"public void test4147() throws Throwable {
    KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
    Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
    doReturn("") is not recognised."", "") is not recognised."", "") is not recognised."", "") is not recognised."").when(comparable0).toString();
    Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
    doReturn("") is not recognised."", "") is not recognised."", "") is not recognised."", "") is not recognised."").when(comparable1).toString();
    keyedObjects2D0.setObject("") is not recognised."", comparable1, comparable1);
    keyedObjects2D0.addObject(keyedObjects2D0, comparable0, comparable0);
    Object object0 = keyedObjects2D0.clone();
    boolean boolean0 = keyedObjects2D0.equals(object0);
    assertEquals(2, keyedObjects2D0.getColumnCount());
}",0,"assertEquals(1, keyedObjects2D0.getColumnCount())"
project,0,test4148,"public void test4148() throws Throwable {
    KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
    Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
    doReturn("") is not recognised."", "") is not recognised."", "") is not recognised."", "") is not recognised."").when(comparable0).toString();
    Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
    doReturn("") is not recognised."", "") is not recognised."", "") is not recognised."", "") is not recognised."").when(comparable1).toString();
    keyedObjects2D0.setObject("") is not recognised."", comparable1, comparable1);
    keyedObjects2D0.addObject(keyedObjects2D0, comparable0, comparable0);
    Object object0 = keyedObjects2D0.clone();
    boolean boolean0 = keyedObjects2D0.equals(object0);
    assertTrue(boolean0);
}",0,
project,0,test4249,"public void test4249() throws Throwable {
    KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
    int int0 = keyedObjects2D0.getRowCount();
    assertEquals(0, int0);
}",0,"assertEquals(0, int0)"
project,0,test4451,"public void test4451() throws Throwable {
    KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
    // Undeclared exception!
    try {
        keyedObjects2D0.removeRow((Comparable) """");
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test4552,"public void test4552() throws Throwable {
    KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
    Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
    keyedObjects2D0.addObject(keyedObjects2D0, comparable0, comparable0);
    keyedObjects2D0.addObject("""", """", """");
    // Undeclared exception!
    try {
        keyedObjects2D0.removeColumn(1);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The key (java.lang.String@0000000006) is not recognised.
        //
        verifyException(""org.jfree.data.KeyedObjects"", e);
    }
}",1,
project,0,test4653,"public void test4653() throws Throwable {
    KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
    int int0 = keyedObjects2D0.getColumnCount();
    assertEquals(0, int0);
}",0,"assertEquals(0, int0)"
project,0,test4754,"public void test4754() throws Throwable {
    KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
    // Undeclared exception!
    try {
        keyedObjects2D0.removeColumn(1);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 1, Size: 0
        //
        verifyException(""java.util.ArrayList"", e);
    }
}",1,
project,0,test4855,"public void test4855() throws Throwable {
    KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
    int int0 = keyedObjects2D0.getColumnIndex("""");
    assertEquals((-1), int0);
}",0,"assertEquals(0, int0)"
project,0,test4956,"public void test4956() throws Throwable {
    KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
    // Undeclared exception!
    try {
        keyedObjects2D0.getRowKey(1027);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 1027, Size: 0
        //
        verifyException(""java.util.ArrayList"", e);
    }
}",0,
project,0,test5057,"public void test5057() throws Throwable {
    KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
    List list0 = keyedObjects2D0.getRowKeys();
    boolean boolean0 = keyedObjects2D0.equals(list0);
    assertFalse(boolean0);
}",0,
