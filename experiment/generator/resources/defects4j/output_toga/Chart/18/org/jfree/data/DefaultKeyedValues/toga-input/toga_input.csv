focal_method,test_prefix,docstring
"public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof KeyedValues)) {
        return false;
    }
    KeyedValues that = (KeyedValues) obj;
    int count = getItemCount();
    if (count != that.getItemCount()) {
        return false;
    }
    for (int i = 0; i < count; i++) {
        Comparable k1 = getKey(i);
        Comparable k2 = that.getKey(i);
        if (!k1.equals(k2)) {
            return false;
        }
        Number v1 = getValue(i);
        Number v2 = that.getValue(i);
        if (v1 == null) {
            if (v2 != null) {
                return false;
            }
        } else {
            if (!v1.equals(v2)) {
                return false;
            }
        }
    }
    return true;
}","public void test000() throws Throwable {
    DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
    DefaultKeyedValues defaultKeyedValues1 = new DefaultKeyedValues();
    assertTrue(defaultKeyedValues1.equals((Object) defaultKeyedValues0));
}","/**
 * Tests if this object is equal to another.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */"
"public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof KeyedValues)) {
        return false;
    }
    KeyedValues that = (KeyedValues) obj;
    int count = getItemCount();
    if (count != that.getItemCount()) {
        return false;
    }
    for (int i = 0; i < count; i++) {
        Comparable k1 = getKey(i);
        Comparable k2 = that.getKey(i);
        if (!k1.equals(k2)) {
            return false;
        }
        Number v1 = getValue(i);
        Number v2 = that.getValue(i);
        if (v1 == null) {
            if (v2 != null) {
                return false;
            }
        } else {
            if (!v1.equals(v2)) {
                return false;
            }
        }
    }
    return true;
}","public void test001() throws Throwable {
    DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
    DefaultKeyedValues defaultKeyedValues1 = new DefaultKeyedValues();
    Double double0 = Double.valueOf((-418.7609164));
    defaultKeyedValues0.addValue((Comparable) double0, (Number) null);
    defaultKeyedValues1.setValue((Comparable) double0, (double) 1);
    boolean boolean0 = defaultKeyedValues0.equals(defaultKeyedValues1);
    assertFalse(defaultKeyedValues1.equals((Object) defaultKeyedValues0));
}","/**
 * Tests if this object is equal to another.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */"
"public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof KeyedValues)) {
        return false;
    }
    KeyedValues that = (KeyedValues) obj;
    int count = getItemCount();
    if (count != that.getItemCount()) {
        return false;
    }
    for (int i = 0; i < count; i++) {
        Comparable k1 = getKey(i);
        Comparable k2 = that.getKey(i);
        if (!k1.equals(k2)) {
            return false;
        }
        Number v1 = getValue(i);
        Number v2 = that.getValue(i);
        if (v1 == null) {
            if (v2 != null) {
                return false;
            }
        } else {
            if (!v1.equals(v2)) {
                return false;
            }
        }
    }
    return true;
}","public void test002() throws Throwable {
    DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
    DefaultKeyedValues defaultKeyedValues1 = new DefaultKeyedValues();
    Double double0 = Double.valueOf((-418.7609164));
    defaultKeyedValues0.addValue((Comparable) double0, (Number) null);
    defaultKeyedValues1.setValue((Comparable) double0, (double) 1);
    boolean boolean0 = defaultKeyedValues0.equals(defaultKeyedValues1);
    assertFalse(boolean0);
}","/**
 * Tests if this object is equal to another.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */"
"public void insertValue(int position, Comparable key, double value) {
    insertValue(position, key, new Double(value));
}","public void test013() throws Throwable {
    DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
    // Undeclared exception!
    try {
        defaultKeyedValues0.insertValue(0, (Comparable) null, (double) 0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'key' argument.
        //
        verifyException(""org.jfree.data.DefaultKeyedValues"", e);
    }
}","/**
 * Inserts a new value at the specified position in the dataset or, if
 * there is an existing item with the specified key, updates the value
 * for that item and moves it to the specified position.
 *
 * @param position  the position (in the range 0 to getItemCount()).
 * @param key  the key (<code>null</code> not permitted).
 * @param value  the value.
 *
 * @since 1.0.6
 */"
"public Number getValue(Comparable key) {
    int index = getIndex(key);
    if (index < 0) {
        throw new UnknownKeyException(""Key not found: "" + key);
    }
    return getValue(index);
}","public void test035() throws Throwable {
    DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
    // Undeclared exception!
    try {
        defaultKeyedValues0.getValue((Comparable) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'key' argument.
        //
        verifyException(""org.jfree.data.DefaultKeyedValues"", e);
    }
}","/**
 * Returns the value for a given key.
 *
 * @param key  the key (<code>null</code> not permitted).
 *
 * @return The value (possibly <code>null</code>).
 *
 * @throws UnknownKeyException if the key is not recognised.
 *
 * @see #getValue(int)
 */"
"public void insertValue(int position, Comparable key, Number value) {
    if (position < 0 || position > getItemCount()) {
        throw new IllegalArgumentException(""'position' out of bounds."");
    }
    if (key == null) {
        throw new IllegalArgumentException(""Null 'key' argument."");
    }
    int pos = getIndex(key);
    if (pos == position) {
        this.keys.set(pos, key);
        this.values.set(pos, value);
    } else {
        if (pos >= 0) {
            this.keys.remove(pos);
            this.values.remove(pos);
        }
        this.keys.add(position, key);
        this.values.add(position, value);
        rebuildIndex();
    }
}","public void test046() throws Throwable {
    DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
    Float float0 = new Float((float) 1);
    defaultKeyedValues0.addValue((Comparable) float0, (Number) float0);
    // Undeclared exception!
    try {
        defaultKeyedValues0.insertValue(1, (Comparable) float0, (Number) float0);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 1, Size: 0
        //
        verifyException(""java.util.ArrayList"", e);
    }
}","/**
 * Inserts a new value at the specified position in the dataset or, if
 * there is an existing item with the specified key, updates the value
 * for that item and moves it to the specified position.
 *
 * @param position  the position (in the range 0 to getItemCount()).
 * @param key  the key (<code>null</code> not permitted).
 * @param value  the value (<code>null</code> permitted).
 *
 * @since 1.0.6
 */"
"public Number getValue(Comparable key) {
    int index = getIndex(key);
    if (index < 0) {
        throw new UnknownKeyException(""Key not found: "" + key);
    }
    return getValue(index);
}","public void test057() throws Throwable {
    DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
    Integer integer0 = new Integer(0);
    defaultKeyedValues0.setValue((Comparable) integer0, (Number) integer0);
    Number number0 = defaultKeyedValues0.getValue((Comparable) integer0);
    assertEquals(0, number0);
}","/**
 * Returns the value for a given key.
 *
 * @param key  the key (<code>null</code> not permitted).
 *
 * @return The value (possibly <code>null</code>).
 *
 * @throws UnknownKeyException if the key is not recognised.
 *
 * @see #getValue(int)
 */"
"public Number getValue(Comparable key) {
    int index = getIndex(key);
    if (index < 0) {
        throw new UnknownKeyException(""Key not found: "" + key);
    }
    return getValue(index);
}","public void test068() throws Throwable {
    DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
    Double double0 = new Double(3778.1961882888086);
    // Undeclared exception!
    try {
        defaultKeyedValues0.getValue((Comparable) double0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Key not found: 3778.1961882888086
        //
        verifyException(""org.jfree.data.DefaultKeyedValues"", e);
    }
}","/**
 * Returns the value for a given key.
 *
 * @param key  the key (<code>null</code> not permitted).
 *
 * @return The value (possibly <code>null</code>).
 *
 * @throws UnknownKeyException if the key is not recognised.
 *
 * @see #getValue(int)
 */"
"public void setValue(Comparable key, double value) {
    setValue(key, new Double(value));
}","public void test079() throws Throwable {
    DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
    // Undeclared exception!
    try {
        defaultKeyedValues0.setValue((Comparable) null, (-2740.4470689125));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'key' argument.
        //
        verifyException(""org.jfree.data.DefaultKeyedValues"", e);
    }
}","/**
 * Updates an existing value, or adds a new value to the collection.
 *
 * @param key  the key (<code>null</code> not permitted).
 * @param value  the value.
 */"
"public int getItemCount() {
    return this.indexMap.size();
}","public void test0810() throws Throwable {
    DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
    Integer integer0 = Integer.valueOf(0);
    defaultKeyedValues0.setValue((Comparable) integer0, (Number) integer0);
    defaultKeyedValues0.addValue((Comparable) integer0, (double) 0);
    assertEquals(1, defaultKeyedValues0.getItemCount());
}","/**
 * Returns the number of items (values) in the collection.
 *
 * @return The item count.
 */"
"public void insertValue(int position, Comparable key, double value) {
    insertValue(position, key, new Double(value));
}","public void test0911() throws Throwable {
    DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
    Short short0 = new Short((short) (-18));
    // Undeclared exception!
    try {
        defaultKeyedValues0.insertValue((int) (short) (-18), (Comparable) short0, (double) (short) (-18));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // 'position' out of bounds.
        //
        verifyException(""org.jfree.data.DefaultKeyedValues"", e);
    }
}","/**
 * Inserts a new value at the specified position in the dataset or, if
 * there is an existing item with the specified key, updates the value
 * for that item and moves it to the specified position.
 *
 * @param position  the position (in the range 0 to getItemCount()).
 * @param key  the key (<code>null</code> not permitted).
 * @param value  the value.
 *
 * @since 1.0.6
 */"
"public void insertValue(int position, Comparable key, double value) {
    insertValue(position, key, new Double(value));
}","public void test1012() throws Throwable {
    DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
    Short short0 = new Short((short) 12);
    // Undeclared exception!
    try {
        defaultKeyedValues0.insertValue((int) (short) 12, (Comparable) short0, (double) (short) 12);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // 'position' out of bounds.
        //
        verifyException(""org.jfree.data.DefaultKeyedValues"", e);
    }
}","/**
 * Inserts a new value at the specified position in the dataset or, if
 * there is an existing item with the specified key, updates the value
 * for that item and moves it to the specified position.
 *
 * @param position  the position (in the range 0 to getItemCount()).
 * @param key  the key (<code>null</code> not permitted).
 * @param value  the value.
 *
 * @since 1.0.6
 */"
"public int getItemCount() {
    return this.indexMap.size();
}","public void test1113() throws Throwable {
    DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
    Short short0 = new Short((short) 0);
    defaultKeyedValues0.insertValue((int) (short) 0, (Comparable) short0, (double) (short) 0);
    defaultKeyedValues0.insertValue((int) (short) 0, (Comparable) short0, (double) (short) 0);
    assertEquals(1, defaultKeyedValues0.getItemCount());
}","/**
 * Returns the number of items (values) in the collection.
 *
 * @return The item count.
 */"
"public int getItemCount() {
    return this.indexMap.size();
}","public void test1214() throws Throwable {
    DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
    Short short0 = new Short((short) 0);
    defaultKeyedValues0.insertValue((int) (short) 0, (Comparable) short0, (double) (short) 0);
    defaultKeyedValues0.removeValue((Comparable) short0);
    assertEquals(1, defaultKeyedValues0.getItemCount());
}","/**
 * Returns the number of items (values) in the collection.
 *
 * @return The item count.
 */"
"public int getItemCount() {
    return this.indexMap.size();
}","public void test1315() throws Throwable {
    DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
    defaultKeyedValues0.setValue((Comparable) 1, 343.5962409665);
    Integer integer0 = Integer.valueOf(0);
    defaultKeyedValues0.setValue((Comparable) integer0, (Number) integer0);
    defaultKeyedValues0.removeValue(0);
    assertEquals(1, defaultKeyedValues0.getItemCount());
}","/**
 * Returns the number of items (values) in the collection.
 *
 * @return The item count.
 */"
"public int getItemCount() {
    return this.indexMap.size();
}","public void test1416() throws Throwable {
    DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
    Float float0 = new Float(4501.0F);
    defaultKeyedValues0.removeValue((Comparable) float0);
    assertEquals(0, defaultKeyedValues0.getItemCount());
}","/**
 * Returns the number of items (values) in the collection.
 *
 * @return The item count.
 */"
"public int getItemCount() {
    return this.indexMap.size();
}","public void test1517() throws Throwable {
    DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
    defaultKeyedValues0.setValue((Comparable) 0, (double) 0);
    SortOrder sortOrder0 = SortOrder.ASCENDING;
    defaultKeyedValues0.sortByKeys(sortOrder0);
    assertEquals(1, defaultKeyedValues0.getItemCount());
}","/**
 * Returns the number of items (values) in the collection.
 *
 * @return The item count.
 */"
"public int getItemCount() {
    return this.indexMap.size();
}","public void test1618() throws Throwable {
    DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
    defaultKeyedValues0.setValue((Comparable) 0, (double) 0);
    SortOrder sortOrder0 = SortOrder.ASCENDING;
    defaultKeyedValues0.sortByValues(sortOrder0);
    assertEquals(1, defaultKeyedValues0.getItemCount());
}","/**
 * Returns the number of items (values) in the collection.
 *
 * @return The item count.
 */"
"public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof KeyedValues)) {
        return false;
    }
    KeyedValues that = (KeyedValues) obj;
    int count = getItemCount();
    if (count != that.getItemCount()) {
        return false;
    }
    for (int i = 0; i < count; i++) {
        Comparable k1 = getKey(i);
        Comparable k2 = that.getKey(i);
        if (!k1.equals(k2)) {
            return false;
        }
        Number v1 = getValue(i);
        Number v2 = that.getValue(i);
        if (v1 == null) {
            if (v2 != null) {
                return false;
            }
        } else {
            if (!v1.equals(v2)) {
                return false;
            }
        }
    }
    return true;
}","public void test1719() throws Throwable {
    DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
    boolean boolean0 = defaultKeyedValues0.equals(defaultKeyedValues0);
    assertTrue(boolean0);
}","/**
 * Tests if this object is equal to another.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */"
"public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof KeyedValues)) {
        return false;
    }
    KeyedValues that = (KeyedValues) obj;
    int count = getItemCount();
    if (count != that.getItemCount()) {
        return false;
    }
    for (int i = 0; i < count; i++) {
        Comparable k1 = getKey(i);
        Comparable k2 = that.getKey(i);
        if (!k1.equals(k2)) {
            return false;
        }
        Number v1 = getValue(i);
        Number v2 = that.getValue(i);
        if (v1 == null) {
            if (v2 != null) {
                return false;
            }
        } else {
            if (!v1.equals(v2)) {
                return false;
            }
        }
    }
    return true;
}","public void test1820() throws Throwable {
    DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
    boolean boolean0 = defaultKeyedValues0.equals(""org.jfree.data.DefaultKeyedValue"");
    assertFalse(boolean0);
}","/**
 * Tests if this object is equal to another.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */"
"public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof KeyedValues)) {
        return false;
    }
    KeyedValues that = (KeyedValues) obj;
    int count = getItemCount();
    if (count != that.getItemCount()) {
        return false;
    }
    for (int i = 0; i < count; i++) {
        Comparable k1 = getKey(i);
        Comparable k2 = that.getKey(i);
        if (!k1.equals(k2)) {
            return false;
        }
        Number v1 = getValue(i);
        Number v2 = that.getValue(i);
        if (v1 == null) {
            if (v2 != null) {
                return false;
            }
        } else {
            if (!v1.equals(v2)) {
                return false;
            }
        }
    }
    return true;
}","public void test1921() throws Throwable {
    DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
    defaultKeyedValues0.setValue((Comparable) 0, (double) 0);
    DefaultKeyedValues defaultKeyedValues1 = new DefaultKeyedValues();
    boolean boolean0 = defaultKeyedValues0.equals(defaultKeyedValues1);
    assertFalse(boolean0);
}","/**
 * Tests if this object is equal to another.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */"
"public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof KeyedValues)) {
        return false;
    }
    KeyedValues that = (KeyedValues) obj;
    int count = getItemCount();
    if (count != that.getItemCount()) {
        return false;
    }
    for (int i = 0; i < count; i++) {
        Comparable k1 = getKey(i);
        Comparable k2 = that.getKey(i);
        if (!k1.equals(k2)) {
            return false;
        }
        Number v1 = getValue(i);
        Number v2 = that.getValue(i);
        if (v1 == null) {
            if (v2 != null) {
                return false;
            }
        } else {
            if (!v1.equals(v2)) {
                return false;
            }
        }
    }
    return true;
}","public void test1922() throws Throwable {
    DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
    defaultKeyedValues0.setValue((Comparable) 0, (double) 0);
    DefaultKeyedValues defaultKeyedValues1 = new DefaultKeyedValues();
    boolean boolean0 = defaultKeyedValues0.equals(defaultKeyedValues1);
    assertFalse(defaultKeyedValues1.equals((Object) defaultKeyedValues0));
}","/**
 * Tests if this object is equal to another.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */"
"public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof KeyedValues)) {
        return false;
    }
    KeyedValues that = (KeyedValues) obj;
    int count = getItemCount();
    if (count != that.getItemCount()) {
        return false;
    }
    for (int i = 0; i < count; i++) {
        Comparable k1 = getKey(i);
        Comparable k2 = that.getKey(i);
        if (!k1.equals(k2)) {
            return false;
        }
        Number v1 = getValue(i);
        Number v2 = that.getValue(i);
        if (v1 == null) {
            if (v2 != null) {
                return false;
            }
        } else {
            if (!v1.equals(v2)) {
                return false;
            }
        }
    }
    return true;
}","public void test2023() throws Throwable {
    DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
    Double double0 = Double.valueOf(1647.2540407);
    defaultKeyedValues0.setValue((Comparable) double0, (Number) double0);
    Integer integer0 = Integer.valueOf(0);
    DefaultKeyedValues defaultKeyedValues1 = new DefaultKeyedValues();
    defaultKeyedValues1.setValue((Comparable) integer0, (double) 0);
    boolean boolean0 = defaultKeyedValues0.equals(defaultKeyedValues1);
    assertFalse(defaultKeyedValues1.equals((Object) defaultKeyedValues0));
}","/**
 * Tests if this object is equal to another.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */"
"public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof KeyedValues)) {
        return false;
    }
    KeyedValues that = (KeyedValues) obj;
    int count = getItemCount();
    if (count != that.getItemCount()) {
        return false;
    }
    for (int i = 0; i < count; i++) {
        Comparable k1 = getKey(i);
        Comparable k2 = that.getKey(i);
        if (!k1.equals(k2)) {
            return false;
        }
        Number v1 = getValue(i);
        Number v2 = that.getValue(i);
        if (v1 == null) {
            if (v2 != null) {
                return false;
            }
        } else {
            if (!v1.equals(v2)) {
                return false;
            }
        }
    }
    return true;
}","public void test2024() throws Throwable {
    DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
    Double double0 = Double.valueOf(1647.2540407);
    defaultKeyedValues0.setValue((Comparable) double0, (Number) double0);
    Integer integer0 = Integer.valueOf(0);
    DefaultKeyedValues defaultKeyedValues1 = new DefaultKeyedValues();
    defaultKeyedValues1.setValue((Comparable) integer0, (double) 0);
    boolean boolean0 = defaultKeyedValues0.equals(defaultKeyedValues1);
    assertFalse(boolean0);
}","/**
 * Tests if this object is equal to another.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */"
"public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof KeyedValues)) {
        return false;
    }
    KeyedValues that = (KeyedValues) obj;
    int count = getItemCount();
    if (count != that.getItemCount()) {
        return false;
    }
    for (int i = 0; i < count; i++) {
        Comparable k1 = getKey(i);
        Comparable k2 = that.getKey(i);
        if (!k1.equals(k2)) {
            return false;
        }
        Number v1 = getValue(i);
        Number v2 = that.getValue(i);
        if (v1 == null) {
            if (v2 != null) {
                return false;
            }
        } else {
            if (!v1.equals(v2)) {
                return false;
            }
        }
    }
    return true;
}","public void test2125() throws Throwable {
    DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
    defaultKeyedValues0.setValue((Comparable) 0, (double) 0);
    Object object0 = defaultKeyedValues0.clone();
    boolean boolean0 = defaultKeyedValues0.equals(object0);
    assertTrue(boolean0);
}","/**
 * Tests if this object is equal to another.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */"
"public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof KeyedValues)) {
        return false;
    }
    KeyedValues that = (KeyedValues) obj;
    int count = getItemCount();
    if (count != that.getItemCount()) {
        return false;
    }
    for (int i = 0; i < count; i++) {
        Comparable k1 = getKey(i);
        Comparable k2 = that.getKey(i);
        if (!k1.equals(k2)) {
            return false;
        }
        Number v1 = getValue(i);
        Number v2 = that.getValue(i);
        if (v1 == null) {
            if (v2 != null) {
                return false;
            }
        } else {
            if (!v1.equals(v2)) {
                return false;
            }
        }
    }
    return true;
}","public void test2227() throws Throwable {
    DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
    Byte byte0 = Byte.valueOf((byte) (-112));
    defaultKeyedValues0.addValue((Comparable) byte0, (Number) null);
    Object object0 = defaultKeyedValues0.clone();
    boolean boolean0 = defaultKeyedValues0.equals(object0);
    assertTrue(boolean0);
}","/**
 * Tests if this object is equal to another.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */"
"public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof KeyedValues)) {
        return false;
    }
    KeyedValues that = (KeyedValues) obj;
    int count = getItemCount();
    if (count != that.getItemCount()) {
        return false;
    }
    for (int i = 0; i < count; i++) {
        Comparable k1 = getKey(i);
        Comparable k2 = that.getKey(i);
        if (!k1.equals(k2)) {
            return false;
        }
        Number v1 = getValue(i);
        Number v2 = that.getValue(i);
        if (v1 == null) {
            if (v2 != null) {
                return false;
            }
        } else {
            if (!v1.equals(v2)) {
                return false;
            }
        }
    }
    return true;
}","public void test2329() throws Throwable {
    DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
    Integer integer0 = Integer.valueOf(1578);
    defaultKeyedValues0.setValue((Comparable) integer0, (double) 1578);
    DefaultKeyedValues defaultKeyedValues1 = new DefaultKeyedValues();
    defaultKeyedValues1.setValue((Comparable) integer0, (Number) integer0);
    boolean boolean0 = defaultKeyedValues0.equals(defaultKeyedValues1);
    assertFalse(defaultKeyedValues1.equals((Object) defaultKeyedValues0));
}","/**
 * Tests if this object is equal to another.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */"
"public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof KeyedValues)) {
        return false;
    }
    KeyedValues that = (KeyedValues) obj;
    int count = getItemCount();
    if (count != that.getItemCount()) {
        return false;
    }
    for (int i = 0; i < count; i++) {
        Comparable k1 = getKey(i);
        Comparable k2 = that.getKey(i);
        if (!k1.equals(k2)) {
            return false;
        }
        Number v1 = getValue(i);
        Number v2 = that.getValue(i);
        if (v1 == null) {
            if (v2 != null) {
                return false;
            }
        } else {
            if (!v1.equals(v2)) {
                return false;
            }
        }
    }
    return true;
}","public void test2330() throws Throwable {
    DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
    Integer integer0 = Integer.valueOf(1578);
    defaultKeyedValues0.setValue((Comparable) integer0, (double) 1578);
    DefaultKeyedValues defaultKeyedValues1 = new DefaultKeyedValues();
    defaultKeyedValues1.setValue((Comparable) integer0, (Number) integer0);
    boolean boolean0 = defaultKeyedValues0.equals(defaultKeyedValues1);
    assertFalse(boolean0);
}","/**
 * Tests if this object is equal to another.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */"
