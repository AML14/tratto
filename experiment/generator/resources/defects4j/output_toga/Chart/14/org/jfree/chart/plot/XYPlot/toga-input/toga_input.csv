focal_method,test_prefix,docstring
"public double getLeft() {
    return this.left;
}","public void test0000() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    RectangleInsets rectangleInsets0 = combinedRangeXYPlot0.getAxisOffset();
    assertEquals(4.0, rectangleInsets0.getLeft(), 0.01);
}","/**
 * Returns the left insets.
 *
 * @return The left insets.
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test0001() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    RectangleInsets rectangleInsets0 = combinedRangeXYPlot0.getAxisOffset();
    assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public double getBottom() {
    return this.bottom;
}","public void test0002() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    RectangleInsets rectangleInsets0 = combinedRangeXYPlot0.getAxisOffset();
    assertEquals(4.0, rectangleInsets0.getBottom(), 0.01);
}","/**
 * Returns the bottom insets.
 *
 * @return The bottom insets.
 */"
"public double getRight() {
    return this.right;
}","public void test0003() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    RectangleInsets rectangleInsets0 = combinedRangeXYPlot0.getAxisOffset();
    assertEquals(4.0, rectangleInsets0.getRight(), 0.01);
}","/**
 * Returns the right insets.
 *
 * @return The right insets.
 */"
"public double getTop() {
    return this.top;
}","public void test0004() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    RectangleInsets rectangleInsets0 = combinedRangeXYPlot0.getAxisOffset();
    assertEquals(4.0, rectangleInsets0.getTop(), 0.01);
}","/**
 * Returns the top insets.
 *
 * @return The top insets.
 */"
"public int getWeight() {
    return this.weight;
}","public void test0005() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    RectangleInsets rectangleInsets0 = combinedRangeXYPlot0.getAxisOffset();
    assertEquals(1, combinedRangeXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public int getDatasetCount() {
    return this.datasets.size();
}","public void test0016() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    DateAxis dateAxis0 = new DateAxis(""R"");
    xYPlot0.setRangeAxis(1058, (ValueAxis) dateAxis0);
    DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
    xYPlot0.setDataset(500, (XYDataset) defaultXYZDataset0);
    assertEquals(501, xYPlot0.getDatasetCount());
}","/**
 * Returns the number of datasets.
 *
 * @return The number of datasets.
 */"
"public void setRangeAxisLocation(int index, AxisLocation location) {
    // delegate...
    setRangeAxisLocation(index, location, true);
}","public void test0027() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    // Undeclared exception!
    try {
        combinedDomainXYPlot0.setRangeAxisLocation((-1492), (AxisLocation) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Requires index >= 0.
        //
        verifyException(""org.jfree.chart.util.AbstractObjectList"", e);
    }
}","/**
 * Sets the location for a range axis and sends a {@link PlotChangeEvent}
 * to all registered listeners.
 *
 * @param index  the axis index.
 * @param location  the location (<code>null</code> permitted).
 *
 * @see #getRangeAxisLocation(int)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test0038() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    CategoryMarker categoryMarker0 = new CategoryMarker(false);
    combinedRangeXYPlot0.addRangeMarker((Marker) categoryMarker0);
    CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
    boolean boolean0 = combinedRangeXYPlot0.equals(combinedRangeXYPlot1);
    assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof CombinedRangeXYPlot)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    CombinedRangeXYPlot that = (CombinedRangeXYPlot) obj;
    if (!ObjectUtilities.equal(this.subplots, that.subplots)) {
        return false;
    }
    if (this.totalWeight != that.totalWeight) {
        return false;
    }
    if (this.gap != that.gap) {
        return false;
    }
    return true;
}","public void test0039() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    CategoryMarker categoryMarker0 = new CategoryMarker(false);
    combinedRangeXYPlot0.addRangeMarker((Marker) categoryMarker0);
    CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
    boolean boolean0 = combinedRangeXYPlot0.equals(combinedRangeXYPlot1);
    assertFalse(boolean0);
}","/**
 * Tests this plot for equality with another object.
 *
 * @param obj  the other object.
 *
 * @return <code>true</code> or <code>false</code>.
 */"
"public boolean removeAnnotation(XYAnnotation annotation) {
    return removeAnnotation(annotation, true);
}","public void test00410() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(combinedRangeXYPlot0.DEFAULT_LEGEND_ITEM_BOX, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_STROKE, combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT, combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT);
    boolean boolean0 = combinedRangeXYPlot0.removeAnnotation((XYAnnotation) xYShapeAnnotation0);
    assertFalse(boolean0);
}","/**
 * Removes an annotation from the plot and sends a {@link PlotChangeEvent}
 * to all registered listeners.
 *
 * @param annotation  the annotation (<code>null</code> not permitted).
 *
 * @return A boolean (indicates whether or not the annotation was removed).
 *
 * @see #addAnnotation(XYAnnotation)
 * @see #getAnnotations()
 */"
"public int getWeight() {
    return this.weight;
}","public void test00511() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    Color color0 = (Color) combinedRangeXYPlot0.getDomainZeroBaselinePaint();
    assertEquals(1, combinedRangeXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test00512() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    Color color0 = (Color) combinedRangeXYPlot0.getDomainZeroBaselinePaint();
    assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public boolean isRangeZeroBaselineVisible() {
    return this.rangeZeroBaselineVisible;
}","public void test00614() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    combinedDomainXYPlot0.setRangeZeroBaselineVisible(true);
    assertTrue(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
}","/**
 * Returns a flag that controls whether or not a zero baseline is
 * displayed for the range axis.
 *
 * @return A boolean.
 *
 * @see #setRangeZeroBaselineVisible(boolean)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test00715() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    BasicStroke basicStroke0 = (BasicStroke) combinedDomainXYPlot0.getRangeZeroBaselineStroke();
    combinedDomainXYPlot0.setRangeZeroBaselineStroke(basicStroke0);
    assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test00716() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    BasicStroke basicStroke0 = (BasicStroke) combinedDomainXYPlot0.getRangeZeroBaselineStroke();
    combinedDomainXYPlot0.setRangeZeroBaselineStroke(basicStroke0);
    assertEquals(1, combinedDomainXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public AxisLocation getRangeAxisLocation() {
    return (AxisLocation) this.rangeAxisLocations.get(0);
}","public void test00919() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation();
    assertNotNull(axisLocation0);
}","/**
 * Returns the location of the primary range axis.
 *
 * @return The location (never <code>null</code>).
 *
 * @see #setRangeAxisLocation(AxisLocation)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test00920() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation();
    combinedDomainXYPlot0.setRangeAxisLocation(axisLocation0);
    assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test00921() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation();
    combinedDomainXYPlot0.setRangeAxisLocation(axisLocation0);
    assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test01022() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    combinedDomainXYPlot0.setFixedDomainAxisSpace((AxisSpace) null);
    assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test01023() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    combinedDomainXYPlot0.setFixedDomainAxisSpace((AxisSpace) null);
    assertEquals(1, combinedDomainXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test01024() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    combinedDomainXYPlot0.setFixedDomainAxisSpace((AxisSpace) null);
    assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public double getDomainCrosshairValue() {
    return this.domainCrosshairValue;
}","public void test01125() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    combinedDomainXYPlot0.setDomainCrosshairValue(359.3);
    assertEquals(359.3, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
}","/**
 * Returns the domain crosshair value.
 *
 * @return The value.
 *
 * @see #setDomainCrosshairValue(double)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test01226() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation();
    combinedDomainXYPlot0.setDomainAxisLocation(231, axisLocation0);
    assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test01227() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation();
    combinedDomainXYPlot0.setDomainAxisLocation(231, axisLocation0);
    assertEquals(1, combinedDomainXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test01228() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation();
    combinedDomainXYPlot0.setDomainAxisLocation(231, axisLocation0);
    assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test01430() throws Throwable {
    PeriodAxis periodAxis0 = new PeriodAxis("""");
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
    combinedRangeXYPlot0.getRangeAxisCount();
    assertEquals(1, combinedRangeXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test01431() throws Throwable {
    PeriodAxis periodAxis0 = new PeriodAxis("""");
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
    combinedRangeXYPlot0.getRangeAxisCount();
    assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test01532() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    combinedRangeXYPlot0.getRangeMarkers((Layer) null);
    assertEquals(1, combinedRangeXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test01533() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    combinedRangeXYPlot0.getRangeMarkers((Layer) null);
    assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test01534() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    combinedRangeXYPlot0.getRangeMarkers((Layer) null);
    assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public boolean removeRangeMarker(Marker marker) {
    return removeRangeMarker(marker, Layer.FOREGROUND);
}","public void test01635() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    // Undeclared exception!
    try {
        combinedDomainXYPlot0.removeRangeMarker((Marker) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'marker' argument.
        //
        verifyException(""org.jfree.chart.plot.XYPlot"", e);
    }
}","/**
 * Removes a marker for the range axis and sends a {@link PlotChangeEvent}
 * to all registered listeners.
 *
 * @param marker the marker.
 *
 * @return A boolean indicating whether or not the marker was actually
 *         removed.
 *
 * @since 1.0.7
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test01736() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    combinedDomainXYPlot0.getAnnotations();
    assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test01737() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    combinedDomainXYPlot0.getAnnotations();
    assertEquals(1, combinedDomainXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test01738() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    combinedDomainXYPlot0.getAnnotations();
    assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public boolean isDomainZeroBaselineVisible() {
    return this.domainZeroBaselineVisible;
}","public void test01839() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10.499586611593534, 10.499586611593534);
    XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer(500);
    HistogramDataset histogramDataset0 = new HistogramDataset();
    XYPlot xYPlot0 = new XYPlot(histogramDataset0, cyclicNumberAxis0, cyclicNumberAxis0, xYAreaRenderer0);
    xYPlot0.setDomainZeroBaselineVisible(true);
    JFreeChart jFreeChart0 = new JFreeChart("""", cyclicNumberAxis0.DEFAULT_TICK_LABEL_FONT, xYPlot0, true);
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
    jFreeChart0.createBufferedImage(212, 232, 1, chartRenderingInfo0);
    assertTrue(xYPlot0.isDomainZeroBaselineVisible());
}","/**
 * Returns a flag that controls whether or not a zero baseline is
 * displayed for the domain axis.
 *
 * @return A boolean.
 *
 * @since 1.0.5
 *
 * @see #setDomainZeroBaselineVisible(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test01940() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    Color color0 = (Color) combinedDomainXYPlot0.getRangeZeroBaselinePaint();
    assertEquals(1, combinedDomainXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test01941() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    Color color0 = (Color) combinedDomainXYPlot0.getRangeZeroBaselinePaint();
    assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test01943() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    Color color0 = (Color) combinedDomainXYPlot0.getRangeZeroBaselinePaint();
    assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test02044() throws Throwable {
    SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(0);
    StackedXYAreaRenderer2 stackedXYAreaRenderer2_0 = new StackedXYAreaRenderer2();
    XYPlot xYPlot0 = new XYPlot(simpleHistogramDataset0, (ValueAxis) null, (ValueAxis) null, stackedXYAreaRenderer2_0);
    xYPlot0.setDataset((XYDataset) simpleHistogramDataset0);
    assertEquals(1, xYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public int getDatasetCount() {
    return this.datasets.size();
}","public void test02045() throws Throwable {
    SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(0);
    StackedXYAreaRenderer2 stackedXYAreaRenderer2_0 = new StackedXYAreaRenderer2();
    XYPlot xYPlot0 = new XYPlot(simpleHistogramDataset0, (ValueAxis) null, (ValueAxis) null, stackedXYAreaRenderer2_0);
    xYPlot0.setDataset((XYDataset) simpleHistogramDataset0);
    assertEquals(1, xYPlot0.getDatasetCount());
}","/**
 * Returns the number of datasets.
 *
 * @return The number of datasets.
 */"
"public double getRangeCrosshairValue() {
    return this.rangeCrosshairValue;
}","public void test02146() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    combinedDomainXYPlot0.setRangeCrosshairValue((double) 10);
    assertEquals(10.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
}","/**
 * Returns the range crosshair value.
 *
 * @return The value.
 *
 * @see #setRangeCrosshairValue(double)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test02247() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    xYPlot0.clearAnnotations();
    assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test02248() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    xYPlot0.clearAnnotations();
    assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test02349() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    Color color0 = (Color) xYPlot0.getRangeCrosshairPaint();
    assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public int getItemCount() {
    return this.items.size();
}","public void test02451() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(9.172840998556316);
    XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer(500);
    HistogramDataset histogramDataset0 = new HistogramDataset();
    XYPlot xYPlot0 = new XYPlot(histogramDataset0, cyclicNumberAxis0, cyclicNumberAxis0, xYAreaRenderer0);
    LegendItemCollection legendItemCollection0 = xYAreaRenderer0.getLegendItems();
    assertEquals(0, legendItemCollection0.getItemCount());
}","/**
 * Returns the number of legend items in the collection.
 *
 * @return The item count.
 */"
"public boolean getAutoPopulateSeriesPaint() {
    return this.autoPopulateSeriesPaint;
}","public void test02552() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(7.321617752650613);
    XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer(500);
    HistogramDataset histogramDataset0 = new HistogramDataset();
    XYPlot xYPlot0 = new XYPlot(histogramDataset0, cyclicNumberAxis0, cyclicNumberAxis0, xYAreaRenderer0);
    XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(xYPlot0.DEFAULT_LEGEND_ITEM_BOX);
    Layer layer0 = Layer.BACKGROUND;
    xYAreaRenderer0.addAnnotation((XYAnnotation) xYShapeAnnotation0, layer0);
    assertTrue(xYAreaRenderer0.getAutoPopulateSeriesPaint());
}","/**
 * Returns the flag that controls whether or not the series paint list is
 * automatically populated when {@link #lookupSeriesPaint(int)} is called.
 *
 * @return A boolean.
 *
 * @since 1.0.6
 *
 * @see #setAutoPopulateSeriesPaint(boolean)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test02653() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_LEFT;
    combinedDomainXYPlot0.setDomainAxisLocation(axisLocation0, false);
    assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test02654() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_LEFT;
    combinedDomainXYPlot0.setDomainAxisLocation(axisLocation0, false);
    assertEquals(1, combinedDomainXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test02755() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
    combinedDomainXYPlot0.getDomainAxisCount();
    assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test02756() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
    combinedDomainXYPlot0.getDomainAxisCount();
    assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test02857() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    Layer layer0 = Layer.FOREGROUND;
    combinedDomainXYPlot0.getDomainMarkers(layer0);
    assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test02858() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    Layer layer0 = Layer.FOREGROUND;
    combinedDomainXYPlot0.getDomainMarkers(layer0);
    assertEquals(1, combinedDomainXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public double getDomainCrosshairValue() {
    return this.domainCrosshairValue;
}","public void test02959() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(9.17284099856);
    XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer(500);
    HistogramDataset histogramDataset0 = new HistogramDataset();
    XYPlot xYPlot0 = new XYPlot(histogramDataset0, cyclicNumberAxis0, cyclicNumberAxis0, xYAreaRenderer0);
    xYPlot0.setDomainCrosshairVisible(true);
    JFreeChart jFreeChart0 = new JFreeChart(""=lkzadc9)#w"", cyclicNumberAxis0.DEFAULT_TICK_LABEL_FONT, xYPlot0, true);
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
    jFreeChart0.createBufferedImage(500, 500, 1, chartRenderingInfo0);
    assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
}","/**
 * Returns the domain crosshair value.
 *
 * @return The value.
 *
 * @see #setDomainCrosshairValue(double)
 */"
"public int getWeight() {
    return this.weight;
}","public void test03060() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    BasicStroke basicStroke0 = (BasicStroke) xYPlot0.getRangeCrosshairStroke();
    assertEquals(1, xYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test03061() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    BasicStroke basicStroke0 = (BasicStroke) xYPlot0.getRangeCrosshairStroke();
    assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test03163() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
    PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
    Point2D.Double point2D_Double0 = new Point2D.Double();
    xYPlot0.zoomDomainAxes(374.055222837, plotRenderingInfo0, (Point2D) point2D_Double0);
    assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test03164() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
    PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
    Point2D.Double point2D_Double0 = new Point2D.Double();
    xYPlot0.zoomDomainAxes(374.055222837, plotRenderingInfo0, (Point2D) point2D_Double0);
    assertEquals(1, xYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public Point2D getQuadrantOrigin() {
    return this.quadrantOrigin;
}","public void test03265() throws Throwable {
    DateAxis dateAxis0 = new DateAxis(""@(cL"");
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
    Point2D.Double point2D_Double0 = (Point2D.Double) combinedDomainXYPlot0.getQuadrantOrigin();
    assertEquals(0.0, point2D_Double0.y, 0.01);
}","/**
 * Returns the origin for the quadrants that can be displayed on the plot.
 * This defaults to (0, 0).
 *
 * @return The origin point (never <code>null</code>).
 *
 * @see #setQuadrantOrigin(Point2D)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test03267() throws Throwable {
    DateAxis dateAxis0 = new DateAxis(""@(cL"");
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
    Point2D.Double point2D_Double0 = (Point2D.Double) combinedDomainXYPlot0.getQuadrantOrigin();
    assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test03268() throws Throwable {
    DateAxis dateAxis0 = new DateAxis(""@(cL"");
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
    Point2D.Double point2D_Double0 = (Point2D.Double) combinedDomainXYPlot0.getQuadrantOrigin();
    assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test03269() throws Throwable {
    DateAxis dateAxis0 = new DateAxis(""@(cL"");
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
    Point2D.Double point2D_Double0 = (Point2D.Double) combinedDomainXYPlot0.getQuadrantOrigin();
    assertEquals(1, combinedDomainXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test03370() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    int int0 = combinedDomainXYPlot0.getSeriesCount();
    assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test03371() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    int int0 = combinedDomainXYPlot0.getSeriesCount();
    assertEquals(1, combinedDomainXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public int getSeriesCount() {
    int result = 0;
    XYDataset dataset = getDataset();
    if (dataset != null) {
        result = dataset.getSeriesCount();
    }
    return result;
}","public void test03372() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    int int0 = combinedDomainXYPlot0.getSeriesCount();
    assertEquals(0, int0);
}","/**
 * Returns the number of series in the primary dataset for this plot.  If
 * the dataset is <code>null</code>, the method returns 0.
 *
 * @return The series count.
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test03373() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    int int0 = combinedDomainXYPlot0.getSeriesCount();
    assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test03474() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    xYPlot0.getPlotType();
    assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test03475() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    xYPlot0.getPlotType();
    assertEquals(1, xYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test03476() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    xYPlot0.getPlotType();
    assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public boolean removeDomainMarker(Marker marker) {
    return removeDomainMarker(marker, Layer.FOREGROUND);
}","public void test03577() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    CategoryMarker categoryMarker0 = new CategoryMarker(1.0F, combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_STROKE);
    // Undeclared exception!
    try {
        combinedRangeXYPlot0.removeDomainMarker((Marker) categoryMarker0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jfree.chart.plot.XYPlot"", e);
    }
}","/**
 * Removes a marker for the domain axis and sends a {@link PlotChangeEvent}
 * to all registered listeners.
 *
 * @param marker  the marker.
 *
 * @return A boolean indicating whether or not the marker was actually
 *         removed.
 *
 * @since 1.0.7
 */"
"public int getWeight() {
    return this.weight;
}","public void test03678() throws Throwable {
    DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
    XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer(1205);
    NumberAxis numberAxis0 = new NumberAxis(""Z]wbb3qfX<"");
    XYPlot xYPlot0 = new XYPlot(defaultXYZDataset0, (ValueAxis) null, numberAxis0, xYAreaRenderer0);
    int int0 = xYPlot0.getWeight();
    assertEquals(1, int0);
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test03679() throws Throwable {
    DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
    XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer(1205);
    NumberAxis numberAxis0 = new NumberAxis(""Z]wbb3qfX<"");
    XYPlot xYPlot0 = new XYPlot(defaultXYZDataset0, (ValueAxis) null, numberAxis0, xYAreaRenderer0);
    int int0 = xYPlot0.getWeight();
    assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test03680() throws Throwable {
    DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
    XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer(1205);
    NumberAxis numberAxis0 = new NumberAxis(""Z]wbb3qfX<"");
    XYPlot xYPlot0 = new XYPlot(defaultXYZDataset0, (ValueAxis) null, numberAxis0, xYAreaRenderer0);
    int int0 = xYPlot0.getWeight();
    assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test03882() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
    StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
    BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(458, 10, (double) 10, (double) 10, chartRenderingInfo0);
    Graphics2D graphics2D0 = bufferedImage0.createGraphics();
    Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
    AxisSpace axisSpace0 = combinedDomainXYPlot0.calculateAxisSpace(graphics2D0, rectangle2D_Float0);
    combinedDomainXYPlot0.setFixedRangeAxisSpace(axisSpace0);
    CombinedDomainXYPlot combinedDomainXYPlot1 = (CombinedDomainXYPlot) combinedDomainXYPlot0.clone();
    assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test03883() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
    StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
    BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(458, 10, (double) 10, (double) 10, chartRenderingInfo0);
    Graphics2D graphics2D0 = bufferedImage0.createGraphics();
    Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
    AxisSpace axisSpace0 = combinedDomainXYPlot0.calculateAxisSpace(graphics2D0, rectangle2D_Float0);
    combinedDomainXYPlot0.setFixedRangeAxisSpace(axisSpace0);
    CombinedDomainXYPlot combinedDomainXYPlot1 = (CombinedDomainXYPlot) combinedDomainXYPlot0.clone();
    assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test03984() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_LEFT;
    combinedDomainXYPlot0.setDomainAxisLocation(axisLocation0);
    assertEquals(1, combinedDomainXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test04085() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(combinedDomainXYPlot0.DEFAULT_LEGEND_ITEM_CIRCLE, combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT, combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT);
    combinedDomainXYPlot0.addAnnotation((XYAnnotation) xYShapeAnnotation0);
    assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test04086() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(combinedDomainXYPlot0.DEFAULT_LEGEND_ITEM_CIRCLE, combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT, combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT);
    combinedDomainXYPlot0.addAnnotation((XYAnnotation) xYShapeAnnotation0);
    assertEquals(1, combinedDomainXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public void add(XYPlot subplot, int weight) {
    if (subplot == null) {
        throw new IllegalArgumentException(""Null 'subplot' argument."");
    }
    if (weight <= 0) {
        throw new IllegalArgumentException(""Require weight >= 1."");
    }
    // store the plot and its weight
    subplot.setParent(this);
    subplot.setWeight(weight);
    subplot.setInsets(new RectangleInsets(0.0, 0.0, 0.0, 0.0), false);
    subplot.setDomainAxis(null);
    subplot.addChangeListener(this);
    this.subplots.add(subplot);
    // keep track of total weights
    this.totalWeight += weight;
    ValueAxis axis = getDomainAxis();
    if (axis != null) {
        axis.configure();
    }
    fireChangeEvent();
}","public void test04187() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    // Undeclared exception!
    combinedDomainXYPlot0.add((XYPlot) combinedDomainXYPlot0, 10);
}","/**
 * Adds a subplot with the specified weight and sends a
 * {@link PlotChangeEvent} to all registered listeners.  The weight
 * determines how much space is allocated to the subplot relative to all
 * the other subplots.
 * <P>
 * The domain axis for the subplot will be set to <code>null</code>.  You
 * must ensure that the subplot has a non-null range axis.
 *
 * @param subplot  the subplot (<code>null</code> not permitted).
 * @param weight  the weight (must be >= 1).
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test04288() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
    jFreeChart0.createBufferedImage(10, 10, (-249.2377048665138), (double) 1.0F, chartRenderingInfo0);
    assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test04289() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
    jFreeChart0.createBufferedImage(10, 10, (-249.2377048665138), (double) 1.0F, chartRenderingInfo0);
    assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test04390() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    combinedRangeXYPlot0.zoomRangeAxes((-3651.1937073819), (PlotRenderingInfo) null, (Point2D) null);
    assertEquals(1, combinedRangeXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test04391() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    combinedRangeXYPlot0.zoomRangeAxes((-3651.1937073819), (PlotRenderingInfo) null, (Point2D) null);
    assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test04492() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    XYSeries xYSeries0 = new XYSeries(false, false);
    XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, (-669.2495376363));
    DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
    PolarPlot polarPlot0 = new PolarPlot(xYSeriesCollection0, cyclicNumberAxis0, defaultPolarItemRenderer0);
    PlotOrientation plotOrientation0 = polarPlot0.getOrientation();
    combinedRangeXYPlot0.setOrientation(plotOrientation0);
    CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
    boolean boolean0 = combinedRangeXYPlot1.equals(combinedRangeXYPlot0);
    assertEquals(1, combinedRangeXYPlot1.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof CombinedRangeXYPlot)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    CombinedRangeXYPlot that = (CombinedRangeXYPlot) obj;
    if (!ObjectUtilities.equal(this.subplots, that.subplots)) {
        return false;
    }
    if (this.totalWeight != that.totalWeight) {
        return false;
    }
    if (this.gap != that.gap) {
        return false;
    }
    return true;
}","public void test04493() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    XYSeries xYSeries0 = new XYSeries(false, false);
    XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, (-669.2495376363));
    DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
    PolarPlot polarPlot0 = new PolarPlot(xYSeriesCollection0, cyclicNumberAxis0, defaultPolarItemRenderer0);
    PlotOrientation plotOrientation0 = polarPlot0.getOrientation();
    combinedRangeXYPlot0.setOrientation(plotOrientation0);
    CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
    boolean boolean0 = combinedRangeXYPlot1.equals(combinedRangeXYPlot0);
    assertFalse(boolean0);
}","/**
 * Tests this plot for equality with another object.
 *
 * @param obj  the other object.
 *
 * @return <code>true</code> or <code>false</code>.
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test04494() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    XYSeries xYSeries0 = new XYSeries(false, false);
    XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, (-669.2495376363));
    DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
    PolarPlot polarPlot0 = new PolarPlot(xYSeriesCollection0, cyclicNumberAxis0, defaultPolarItemRenderer0);
    PlotOrientation plotOrientation0 = polarPlot0.getOrientation();
    combinedRangeXYPlot0.setOrientation(plotOrientation0);
    CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
    boolean boolean0 = combinedRangeXYPlot1.equals(combinedRangeXYPlot0);
    assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public void setOrientation(PlotOrientation orientation) {
    super.setOrientation(orientation);
    Iterator iterator = this.subplots.iterator();
    while (iterator.hasNext()) {
        XYPlot plot = (XYPlot) iterator.next();
        plot.setOrientation(orientation);
    }
}","public void test04595() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    // Undeclared exception!
    try {
        combinedDomainXYPlot0.setOrientation((PlotOrientation) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'orientation' argument.
        //
        verifyException(""org.jfree.chart.plot.XYPlot"", e);
    }
}","/**
 * Sets the orientation for the plot (also changes the orientation for all
 * the subplots to match).
 *
 * @param orientation  the orientation (<code>null</code> not allowed).
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test04696() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
    combinedRangeXYPlot0.setOrientation(plotOrientation0);
    assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test04697() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
    combinedRangeXYPlot0.setOrientation(plotOrientation0);
    assertEquals(1, combinedRangeXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public void setAxisOffset(RectangleInsets offset) {
    if (offset == null) {
        throw new IllegalArgumentException(""Null 'offset' argument."");
    }
    this.axisOffset = offset;
    fireChangeEvent();
}","public void test04798() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    // Undeclared exception!
    try {
        combinedDomainXYPlot0.setAxisOffset((RectangleInsets) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'offset' argument.
        //
        verifyException(""org.jfree.chart.plot.XYPlot"", e);
    }
}","/**
 * Sets the axis offsets (gap between the data area and the axes) and sends
 * a {@link PlotChangeEvent} to all registered listeners.
 *
 * @param offset  the offset (<code>null</code> not permitted).
 *
 * @see #getAxisOffset()
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test04899() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    combinedRangeXYPlot0.clearDomainAxes();
    assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test049100() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    combinedDomainXYPlot0.clearDomainAxes();
    assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test049101() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    combinedDomainXYPlot0.clearDomainAxes();
    assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public BufferedImage createBufferedImage(int width, int height, int imageType, ChartRenderingInfo info) {
    BufferedImage image = new BufferedImage(width, height, imageType);
    Graphics2D g2 = image.createGraphics();
    draw(g2, new Rectangle2D.Double(0, 0, width, height), null, info);
    g2.dispose();
    return image;
}","public void test050102() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-48.9523527142181), (-48.9523527142181));
    XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer(500);
    HistogramDataset histogramDataset0 = new HistogramDataset();
    XYPlot xYPlot0 = new XYPlot(histogramDataset0, cyclicNumberAxis0, cyclicNumberAxis0, xYAreaRenderer0);
    JFreeChart jFreeChart0 = new JFreeChart("""", cyclicNumberAxis0.DEFAULT_TICK_LABEL_FONT, xYPlot0, true);
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
    ValueAxis[] valueAxisArray0 = new ValueAxis[2];
    ZoneInfo zoneInfo0 = (ZoneInfo) SegmentedTimeline.DEFAULT_TIME_ZONE;
    DateAxis dateAxis0 = new DateAxis(""/jfU@$R]U5;RDcJ"", zoneInfo0);
    valueAxisArray0[1] = (ValueAxis) dateAxis0;
    xYPlot0.setDomainAxes(valueAxisArray0);
    // Undeclared exception!
    try {
        jFreeChart0.createBufferedImage(140, 500, 1, chartRenderingInfo0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jfree.chart.plot.XYPlot"", e);
    }
}","/**
 * Creates and returns a buffered image into which the chart has been drawn.
 *
 * @param width  the width.
 * @param height  the height.
 * @param imageType  the image type.
 * @param info  carries back chart state information (<code>null</code>
 *              permitted).
 *
 * @return A buffered image.
 */"
"public void setDomainAxisLocation(AxisLocation location) {
    // delegate...
    setDomainAxisLocation(0, location, true);
}","public void test051103() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    // Undeclared exception!
    try {
        combinedDomainXYPlot0.setDomainAxisLocation((AxisLocation) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'location' for index 0 not permitted.
        //
        verifyException(""org.jfree.chart.plot.XYPlot"", e);
    }
}","/**
 * Sets the location of the primary domain axis and sends a
 * {@link PlotChangeEvent} to all registered listeners.
 *
 * @param location  the location (<code>null</code> not permitted).
 *
 * @see #getDomainAxisLocation()
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test052104() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    DateAxis dateAxis0 = new DateAxis();
    xYPlot0.setRangeAxis((ValueAxis) dateAxis0);
    assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test053105() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    XYPlot xYPlot0 = new XYPlot();
    assertEquals(1, xYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test053106() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    XYPlot xYPlot0 = new XYPlot();
    combinedRangeXYPlot0.add(xYPlot0, 10);
    assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public int getRangeAxisCount() {
    return this.rangeAxes.size();
}","public void test054107() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0, 0, (String) null);
    combinedRangeXYPlot0.setRangeAxis(0, (ValueAxis) cyclicNumberAxis0);
    assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
}","/**
 * Returns the number of range axes.
 *
 * @return The axis count.
 *
 * @see #getDomainAxisCount()
 */"
"public int getWeight() {
    return this.weight;
}","public void test054108() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0, 0, (String) null);
    combinedRangeXYPlot0.setRangeAxis(0, (ValueAxis) cyclicNumberAxis0);
    assertEquals(1, combinedRangeXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test054109() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0, 0, (String) null);
    combinedRangeXYPlot0.setRangeAxis(0, (ValueAxis) cyclicNumberAxis0);
    assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public int getRangeAxisCount() {
    return this.rangeAxes.size();
}","public void test055110() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    combinedRangeXYPlot0.setRangeAxis(3, (ValueAxis) null, false);
    assertEquals(4, combinedRangeXYPlot0.getRangeAxisCount());
}","/**
 * Returns the number of range axes.
 *
 * @return The axis count.
 *
 * @see #getDomainAxisCount()
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test056111() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    ValueAxis[] valueAxisArray0 = new ValueAxis[1];
    combinedDomainXYPlot0.setRangeAxes(valueAxisArray0);
    assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public int getRangeAxisCount() {
    return this.rangeAxes.size();
}","public void test056112() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    ValueAxis[] valueAxisArray0 = new ValueAxis[1];
    combinedDomainXYPlot0.setRangeAxes(valueAxisArray0);
    assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
}","/**
 * Returns the number of range axes.
 *
 * @return The axis count.
 *
 * @see #getDomainAxisCount()
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test057113() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    combinedRangeXYPlot0.clearRangeAxes();
    assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test058114() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    combinedDomainXYPlot0.clearRangeAxes();
    assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test058115() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    combinedDomainXYPlot0.clearRangeAxes();
    assertEquals(1, combinedDomainXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test058116() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    combinedDomainXYPlot0.clearRangeAxes();
    assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public AxisLocation getRangeAxisLocation(int index) {
    AxisLocation result = null;
    if (index < this.rangeAxisLocations.size()) {
        result = (AxisLocation) this.rangeAxisLocations.get(index);
    }
    if (result == null) {
        result = AxisLocation.getOpposite(getRangeAxisLocation());
    }
    return result;
}","public void test059117() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation(52);
    assertNotNull(axisLocation0);
}","/**
 * Returns the location for a range axis.  If this hasn't been set
 * explicitly, the method returns the location that is opposite to the
 * primary range axis location.
 *
 * @param index  the axis index.
 *
 * @return The location (never <code>null</code>).
 *
 * @see #setRangeAxisLocation(int, AxisLocation)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test059118() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation(52);
    assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test059119() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation(52);
    assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public void setRangeAxisLocation(AxisLocation location) {
    // delegate...
    setRangeAxisLocation(0, location, true);
}","public void test060120() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    // Undeclared exception!
    try {
        combinedDomainXYPlot0.setRangeAxisLocation((AxisLocation) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'location' for index 0 not permitted.
        //
        verifyException(""org.jfree.chart.plot.XYPlot"", e);
    }
}","/**
 * Sets the location of the primary range axis and sends a
 * {@link PlotChangeEvent} to all registered listeners.
 *
 * @param location  the location (<code>null</code> not permitted).
 *
 * @see #getRangeAxisLocation()
 */"
"public int getDatasetCount() {
    return this.datasets.size();
}","public void test061121() throws Throwable {
    TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
    XYPlot xYPlot0 = new XYPlot();
    xYPlot0.setDataset(500, (XYDataset) timeSeriesCollection0);
    JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
    jFreeChart0.createBufferedImage(1, 10);
    assertEquals(501, xYPlot0.getDatasetCount());
}","/**
 * Returns the number of datasets.
 *
 * @return The number of datasets.
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test062122() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    combinedDomainXYPlot0.setDataset(0, (XYDataset) null);
    assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public int getDatasetCount() {
    return this.datasets.size();
}","public void test062123() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    combinedDomainXYPlot0.setDataset(0, (XYDataset) null);
    assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
}","/**
 * Returns the number of datasets.
 *
 * @return The number of datasets.
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test062124() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    combinedDomainXYPlot0.setDataset(0, (XYDataset) null);
    assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test063125() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    CombinedDataset combinedDataset0 = new CombinedDataset();
    int int0 = combinedRangeXYPlot0.indexOf(combinedDataset0);
    assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public int indexOf(XYDataset dataset) {
    int result = -1;
    for (int i = 0; i < this.datasets.size(); i++) {
        if (dataset == this.datasets.get(i)) {
            result = i;
            break;
        }
    }
    return result;
}","public void test063126() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    CombinedDataset combinedDataset0 = new CombinedDataset();
    int int0 = combinedRangeXYPlot0.indexOf(combinedDataset0);
    assertEquals((-1), int0);
}","/**
 * Returns the index of the specified dataset, or <code>-1</code> if the
 * dataset does not belong to the plot.
 *
 * @param dataset  the dataset (<code>null</code> not permitted).
 *
 * @return The index.
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test063127() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    CombinedDataset combinedDataset0 = new CombinedDataset();
    int int0 = combinedRangeXYPlot0.indexOf(combinedDataset0);
    assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test063128() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    CombinedDataset combinedDataset0 = new CombinedDataset();
    int int0 = combinedRangeXYPlot0.indexOf(combinedDataset0);
    assertEquals(1, combinedRangeXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public int indexOf(XYDataset dataset) {
    int result = -1;
    for (int i = 0; i < this.datasets.size(); i++) {
        if (dataset == this.datasets.get(i)) {
            result = i;
            break;
        }
    }
    return result;
}","public void test064129() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    int int0 = combinedDomainXYPlot0.indexOf((XYDataset) null);
    assertEquals(0, int0);
}","/**
 * Returns the index of the specified dataset, or <code>-1</code> if the
 * dataset does not belong to the plot.
 *
 * @param dataset  the dataset (<code>null</code> not permitted).
 *
 * @return The index.
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test064130() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    int int0 = combinedDomainXYPlot0.indexOf((XYDataset) null);
    assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test065131() throws Throwable {
    ThermometerPlot thermometerPlot0 = new ThermometerPlot();
    ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
    SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(3);
    StackedXYAreaRenderer2 stackedXYAreaRenderer2_0 = new StackedXYAreaRenderer2();
    XYPlot xYPlot0 = new XYPlot(simpleHistogramDataset0, valueAxis0, valueAxis0, stackedXYAreaRenderer2_0);
    xYPlot0.setRenderer((XYItemRenderer) stackedXYAreaRenderer2_0);
    assertEquals(1, xYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test066132() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[1];
    combinedDomainXYPlot0.setRenderers(xYItemRendererArray0);
    assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test066133() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[1];
    combinedDomainXYPlot0.setRenderers(xYItemRendererArray0);
    assertEquals(1, combinedDomainXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test066134() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[1];
    combinedDomainXYPlot0.setRenderers(xYItemRendererArray0);
    assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test067135() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    DatasetRenderingOrder datasetRenderingOrder0 = combinedDomainXYPlot0.getDatasetRenderingOrder();
    combinedDomainXYPlot0.setDatasetRenderingOrder(datasetRenderingOrder0);
    assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test067136() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    DatasetRenderingOrder datasetRenderingOrder0 = combinedDomainXYPlot0.getDatasetRenderingOrder();
    combinedDomainXYPlot0.setDatasetRenderingOrder(datasetRenderingOrder0);
    assertEquals(1, combinedDomainXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public void setDatasetRenderingOrder(DatasetRenderingOrder order) {
    if (order == null) {
        throw new IllegalArgumentException(""Null 'order' argument."");
    }
    this.datasetRenderingOrder = order;
    fireChangeEvent();
}","public void test068137() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    // Undeclared exception!
    try {
        combinedDomainXYPlot0.setDatasetRenderingOrder((DatasetRenderingOrder) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'order' argument.
        //
        verifyException(""org.jfree.chart.plot.XYPlot"", e);
    }
}","/**
 * Sets the rendering order and sends a {@link PlotChangeEvent} to all
 * registered listeners.  By default, the plot renders the primary dataset
 * last (so that the primary dataset overlays the secondary datasets).
 * You can reverse this if you want to.
 *
 * @param order  the rendering order (<code>null</code> not permitted).
 *
 * @see #getDatasetRenderingOrder()
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test069138() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    SeriesRenderingOrder seriesRenderingOrder0 = combinedDomainXYPlot0.getSeriesRenderingOrder();
    combinedDomainXYPlot0.setSeriesRenderingOrder(seriesRenderingOrder0);
    assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test069139() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    SeriesRenderingOrder seriesRenderingOrder0 = combinedDomainXYPlot0.getSeriesRenderingOrder();
    combinedDomainXYPlot0.setSeriesRenderingOrder(seriesRenderingOrder0);
    assertEquals(1, combinedDomainXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public void setSeriesRenderingOrder(SeriesRenderingOrder order) {
    if (order == null) {
        throw new IllegalArgumentException(""Null 'order' argument."");
    }
    this.seriesRenderingOrder = order;
    fireChangeEvent();
}","public void test070140() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    // Undeclared exception!
    try {
        combinedRangeXYPlot0.setSeriesRenderingOrder((SeriesRenderingOrder) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'order' argument.
        //
        verifyException(""org.jfree.chart.plot.XYPlot"", e);
    }
}","/**
 * Sets the series order and sends a {@link PlotChangeEvent} to all
 * registered listeners.  By default, the plot renders the primary series
 * last (so that the primary series appears to be on top).
 * You can reverse this if you want to.
 *
 * @param order  the rendering order (<code>null</code> not permitted).
 *
 * @see #getSeriesRenderingOrder()
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test071141() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2137, ""org.jfree.chart.labels.AbstractXYItemLabelGenerator"");
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(simpleTimeZone0);
    combinedDomainXYPlot0.getRendererForDataset(timeSeriesCollection0);
    assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test071142() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2137, ""org.jfree.chart.labels.AbstractXYItemLabelGenerator"");
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(simpleTimeZone0);
    combinedDomainXYPlot0.getRendererForDataset(timeSeriesCollection0);
    assertEquals(1, combinedDomainXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public int getWeight() {
    return this.weight;
}","public void test073144() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    combinedDomainXYPlot0.setDomainGridlinesVisible(true);
    assertEquals(1, combinedDomainXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test073145() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    combinedDomainXYPlot0.setDomainGridlinesVisible(true);
    assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test073146() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    combinedDomainXYPlot0.setDomainGridlinesVisible(true);
    assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public boolean isDomainGridlinesVisible() {
    return this.domainGridlinesVisible;
}","public void test074147() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    combinedDomainXYPlot0.setDomainGridlinesVisible(false);
    assertFalse(combinedDomainXYPlot0.isDomainGridlinesVisible());
}","/**
 * Returns <code>true</code> if the domain gridlines are visible, and
 * <code>false<code> otherwise.
 *
 * @return <code>true</code> or <code>false</code>.
 *
 * @see #setDomainGridlinesVisible(boolean)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test075148() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    BasicStroke basicStroke0 = (BasicStroke) PiePlot.DEFAULT_LABEL_OUTLINE_STROKE;
    combinedDomainXYPlot0.setDomainGridlineStroke(basicStroke0);
    assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test075149() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    BasicStroke basicStroke0 = (BasicStroke) PiePlot.DEFAULT_LABEL_OUTLINE_STROKE;
    combinedDomainXYPlot0.setDomainGridlineStroke(basicStroke0);
    assertEquals(1, combinedDomainXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test075150() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    BasicStroke basicStroke0 = (BasicStroke) PiePlot.DEFAULT_LABEL_OUTLINE_STROKE;
    combinedDomainXYPlot0.setDomainGridlineStroke(basicStroke0);
    assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public void setDomainGridlineStroke(Stroke stroke) {
    if (stroke == null) {
        throw new IllegalArgumentException(""Null 'stroke' argument."");
    }
    this.domainGridlineStroke = stroke;
    fireChangeEvent();
}","public void test076151() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    // Undeclared exception!
    try {
        combinedDomainXYPlot0.setDomainGridlineStroke((Stroke) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'stroke' argument.
        //
        verifyException(""org.jfree.chart.plot.XYPlot"", e);
    }
}","/**
 * Sets the stroke for the grid lines plotted against the domain axis, and
 * sends a {@link PlotChangeEvent} to all registered listeners.
 * <p>
 * If you set this to <code>null</code>, no grid lines will be drawn.
 *
 * @param stroke  the stroke (<code>null</code> not permitted).
 *
 * @throws IllegalArgumentException if <code>stroke</code> is
 *     <code>null</code>.
 *
 * @see #getDomainGridlineStroke()
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test077152() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    SystemColor systemColor0 = SystemColor.control;
    combinedRangeXYPlot0.setDomainGridlinePaint(systemColor0);
    assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test077153() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    SystemColor systemColor0 = SystemColor.control;
    combinedRangeXYPlot0.setDomainGridlinePaint(systemColor0);
    assertEquals(1, combinedRangeXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test077154() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    SystemColor systemColor0 = SystemColor.control;
    combinedRangeXYPlot0.setDomainGridlinePaint(systemColor0);
    assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public void setDomainGridlinePaint(Paint paint) {
    if (paint == null) {
        throw new IllegalArgumentException(""Null 'paint' argument."");
    }
    this.domainGridlinePaint = paint;
    fireChangeEvent();
}","public void test078155() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    // Undeclared exception!
    try {
        combinedDomainXYPlot0.setDomainGridlinePaint((Paint) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'paint' argument.
        //
        verifyException(""org.jfree.chart.plot.XYPlot"", e);
    }
}","/**
 * Sets the paint for the grid lines plotted against the domain axis, and
 * sends a {@link PlotChangeEvent} to all registered listeners.
 *
 * @param paint  the paint (<code>null</code> not permitted).
 *
 * @throws IllegalArgumentException if <code>paint</code> is
 *     <code>null</code>.
 *
 * @see #getDomainGridlinePaint()
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test079156() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    combinedDomainXYPlot0.setRangeGridlinesVisible(true);
    assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test079157() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    combinedDomainXYPlot0.setRangeGridlinesVisible(true);
    assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test080158() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    BasicStroke basicStroke0 = new BasicStroke();
    combinedDomainXYPlot0.setRangeGridlineStroke(basicStroke0);
    assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test080159() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    BasicStroke basicStroke0 = new BasicStroke();
    combinedDomainXYPlot0.setRangeGridlineStroke(basicStroke0);
    assertEquals(1, combinedDomainXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test080160() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    BasicStroke basicStroke0 = new BasicStroke();
    combinedDomainXYPlot0.setRangeGridlineStroke(basicStroke0);
    assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public void setRangeGridlineStroke(Stroke stroke) {
    if (stroke == null) {
        throw new IllegalArgumentException(""Null 'stroke' argument."");
    }
    this.rangeGridlineStroke = stroke;
    fireChangeEvent();
}","public void test081161() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    // Undeclared exception!
    try {
        combinedDomainXYPlot0.setRangeGridlineStroke((Stroke) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'stroke' argument.
        //
        verifyException(""org.jfree.chart.plot.XYPlot"", e);
    }
}","/**
 * Sets the stroke for the grid lines plotted against the range axis,
 * and sends a {@link PlotChangeEvent} to all registered listeners.
 *
 * @param stroke  the stroke (<code>null</code> not permitted).
 *
 * @see #getRangeGridlineStroke()
 */"
"public int getWeight() {
    return this.weight;
}","public void test082162() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    combinedRangeXYPlot0.setRangeGridlinePaint(combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT);
    assertEquals(1, combinedRangeXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test082163() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    combinedRangeXYPlot0.setRangeGridlinePaint(combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT);
    assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public void setRangeGridlinePaint(Paint paint) {
    if (paint == null) {
        throw new IllegalArgumentException(""Null 'paint' argument."");
    }
    this.rangeGridlinePaint = paint;
    fireChangeEvent();
}","public void test083164() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    // Undeclared exception!
    try {
        combinedRangeXYPlot0.setRangeGridlinePaint((Paint) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'paint' argument.
        //
        verifyException(""org.jfree.chart.plot.XYPlot"", e);
    }
}","/**
 * Sets the paint for the grid lines plotted against the range axis and
 * sends a {@link PlotChangeEvent} to all registered listeners.
 *
 * @param paint  the paint (<code>null</code> not permitted).
 *
 * @see #getRangeGridlinePaint()
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test084165() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    Stroke stroke0 = combinedDomainXYPlot0.getDomainCrosshairStroke();
    combinedDomainXYPlot0.setDomainZeroBaselineStroke(stroke0);
    assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public void setDomainZeroBaselineStroke(Stroke stroke) {
    if (stroke == null) {
        throw new IllegalArgumentException(""Null 'stroke' argument."");
    }
    this.domainZeroBaselineStroke = stroke;
    fireChangeEvent();
}","public void test085166() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
    // Undeclared exception!
    try {
        combinedDomainXYPlot0.setDomainZeroBaselineStroke((Stroke) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'stroke' argument.
        //
        verifyException(""org.jfree.chart.plot.XYPlot"", e);
    }
}","/**
 * Sets the stroke for the zero baseline for the domain axis,
 * and sends a {@link PlotChangeEvent} to all registered listeners.
 *
 * @param stroke  the stroke (<code>null</code> not permitted).
 *
 * @since 1.0.5
 *
 * @see #getRangeZeroBaselineStroke()
 */"
"public int getWeight() {
    return this.weight;
}","public void test086167() throws Throwable {
    TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1449.3398049104687));
    CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
    XYPlot xYPlot0 = new XYPlot(timeSeriesCollection0, cyclicNumberAxis0, cyclicNumberAxis0, cyclicXYItemRenderer0);
    xYPlot0.setDomainZeroBaselinePaint(cyclicNumberAxis0.DEFAULT_TICK_LABEL_PAINT);
    assertEquals(1, xYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public void setDomainZeroBaselinePaint(Paint paint) {
    if (paint == null) {
        throw new IllegalArgumentException(""Null 'paint' argument."");
    }
    this.domainZeroBaselinePaint = paint;
    fireChangeEvent();
}","public void test087168() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    // Undeclared exception!
    try {
        combinedRangeXYPlot0.setDomainZeroBaselinePaint((Paint) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'paint' argument.
        //
        verifyException(""org.jfree.chart.plot.XYPlot"", e);
    }
}","/**
 * Sets the paint for the zero baseline plotted against the domain axis and
 * sends a {@link PlotChangeEvent} to all registered listeners.
 *
 * @param paint  the paint (<code>null</code> not permitted).
 *
 * @since 1.0.5
 *
 * @see #getDomainZeroBaselinePaint()
 */"
"public void setRangeZeroBaselineStroke(Stroke stroke) {
    if (stroke == null) {
        throw new IllegalArgumentException(""Null 'stroke' argument."");
    }
    this.rangeZeroBaselineStroke = stroke;
    fireChangeEvent();
}","public void test088169() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    // Undeclared exception!
    try {
        combinedRangeXYPlot0.setRangeZeroBaselineStroke((Stroke) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'stroke' argument.
        //
        verifyException(""org.jfree.chart.plot.XYPlot"", e);
    }
}","/**
 * Sets the stroke for the zero baseline for the range axis,
 * and sends a {@link PlotChangeEvent} to all registered listeners.
 *
 * @param stroke  the stroke (<code>null</code> not permitted).
 *
 * @see #getRangeZeroBaselineStroke()
 */"
"public void setRangeZeroBaselinePaint(Paint paint) {
    if (paint == null) {
        throw new IllegalArgumentException(""Null 'paint' argument."");
    }
    this.rangeZeroBaselinePaint = paint;
    fireChangeEvent();
}","public void test089170() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    // Undeclared exception!
    try {
        combinedRangeXYPlot0.setRangeZeroBaselinePaint((Paint) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'paint' argument.
        //
        verifyException(""org.jfree.chart.plot.XYPlot"", e);
    }
}","/**
 * Sets the paint for the zero baseline plotted against the range axis and
 * sends a {@link PlotChangeEvent} to all registered listeners.
 *
 * @param paint  the paint (<code>null</code> not permitted).
 *
 * @see #getRangeZeroBaselinePaint()
 */"
"public int getWeight() {
    return this.weight;
}","public void test090171() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    Point2D.Double point2D_Double0 = new Point2D.Double();
    combinedRangeXYPlot0.setQuadrantOrigin(point2D_Double0);
    assertEquals(1, combinedRangeXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public void setQuadrantOrigin(Point2D origin) {
    if (origin == null) {
        throw new IllegalArgumentException(""Null 'origin' argument."");
    }
    this.quadrantOrigin = origin;
    fireChangeEvent();
}","public void test091172() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    // Undeclared exception!
    try {
        xYPlot0.setQuadrantOrigin((Point2D) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'origin' argument.
        //
        verifyException(""org.jfree.chart.plot.XYPlot"", e);
    }
}","/**
 * Sets the quadrant origin and sends a {@link PlotChangeEvent} to all
 * registered listeners.
 *
 * @param origin  the origin (<code>null</code> not permitted).
 *
 * @see #getQuadrantOrigin()
 */"
"public Paint getQuadrantPaint(int index) {
    if (index < 0 || index > 3) {
        throw new IllegalArgumentException(""The index value ("" + index + "") should be in the range 0 to 3."");
    }
    return this.quadrantPaint[index];
}","public void test092173() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    // Undeclared exception!
    try {
        xYPlot0.getQuadrantPaint((-2808));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The index value (-2808) should be in the range 0 to 3.
        //
        verifyException(""org.jfree.chart.plot.XYPlot"", e);
    }
}","/**
 * Returns the paint used for the specified quadrant.
 *
 * @param index  the quadrant index (0-3).
 *
 * @return The paint (possibly <code>null</code>).
 *
 * @see #setQuadrantPaint(int, Paint)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test093174() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    combinedDomainXYPlot0.getQuadrantPaint(0);
    assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test093175() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    combinedDomainXYPlot0.getQuadrantPaint(0);
    assertEquals(1, combinedDomainXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public Paint getQuadrantPaint(int index) {
    if (index < 0 || index > 3) {
        throw new IllegalArgumentException(""The index value ("" + index + "") should be in the range 0 to 3."");
    }
    return this.quadrantPaint[index];
}","public void test094176() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    // Undeclared exception!
    try {
        combinedRangeXYPlot0.getQuadrantPaint(10);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The index value (10) should be in the range 0 to 3.
        //
        verifyException(""org.jfree.chart.plot.XYPlot"", e);
    }
}","/**
 * Returns the paint used for the specified quadrant.
 *
 * @param index  the quadrant index (0-3).
 *
 * @return The paint (possibly <code>null</code>).
 *
 * @see #setQuadrantPaint(int, Paint)
 */"
"public void setQuadrantPaint(int index, Paint paint) {
    if (index < 0 || index > 3) {
        throw new IllegalArgumentException(""The index value ("" + index + "") should be in the range 0 to 3."");
    }
    this.quadrantPaint[index] = paint;
    fireChangeEvent();
}","public void test095177() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    Color color0 = Color.black;
    // Undeclared exception!
    try {
        combinedDomainXYPlot0.setQuadrantPaint((-754), color0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The index value (-754) should be in the range 0 to 3.
        //
        verifyException(""org.jfree.chart.plot.XYPlot"", e);
    }
}","/**
 * Sets the paint used for the specified quadrant and sends a
 * {@link PlotChangeEvent} to all registered listeners.
 *
 * @param index  the quadrant index (0-3).
 * @param paint  the paint (<code>null</code> permitted).
 *
 * @see #getQuadrantPaint(int)
 */"
"public int getWeight() {
    return this.weight;
}","public void test096178() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    Color color0 = Color.orange;
    combinedDomainXYPlot0.setQuadrantPaint(1, color0);
    assertEquals(1, combinedDomainXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test096179() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    Color color0 = Color.orange;
    combinedDomainXYPlot0.setQuadrantPaint(1, color0);
    assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public void setQuadrantPaint(int index, Paint paint) {
    if (index < 0 || index > 3) {
        throw new IllegalArgumentException(""The index value ("" + index + "") should be in the range 0 to 3."");
    }
    this.quadrantPaint[index] = paint;
    fireChangeEvent();
}","public void test097180() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    Color color0 = (Color) FastScatterPlot.DEFAULT_GRIDLINE_PAINT;
    // Undeclared exception!
    try {
        combinedDomainXYPlot0.setQuadrantPaint(493, color0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The index value (493) should be in the range 0 to 3.
        //
        verifyException(""org.jfree.chart.plot.XYPlot"", e);
    }
}","/**
 * Sets the paint used for the specified quadrant and sends a
 * {@link PlotChangeEvent} to all registered listeners.
 *
 * @param index  the quadrant index (0-3).
 * @param paint  the paint (<code>null</code> permitted).
 *
 * @see #getQuadrantPaint(int)
 */"
"public int getWeight() {
    return this.weight;
}","public void test098181() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 1.0F);
    Layer layer0 = Layer.BACKGROUND;
    combinedRangeXYPlot0.addDomainMarker(10, (Marker) intervalMarker0, layer0, false);
    combinedRangeXYPlot0.clearDomainMarkers();
    assertEquals(1, combinedRangeXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test099182() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    ValueMarker valueMarker0 = new ValueMarker(10, combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE, combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT, combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE, 0);
    combinedDomainXYPlot0.addDomainMarker((Marker) valueMarker0);
    combinedDomainXYPlot0.clearDomainMarkers();
    assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test099183() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    ValueMarker valueMarker0 = new ValueMarker(10, combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE, combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT, combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE, 0);
    combinedDomainXYPlot0.addDomainMarker((Marker) valueMarker0);
    combinedDomainXYPlot0.clearDomainMarkers();
    assertEquals(1, combinedDomainXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public void addDomainMarker(Marker marker) {
    // defer argument checking...
    addDomainMarker(marker, Layer.FOREGROUND);
}","public void test100184() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    // Undeclared exception!
    try {
        combinedDomainXYPlot0.addDomainMarker((Marker) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'marker' not permitted.
        //
        verifyException(""org.jfree.chart.plot.XYPlot"", e);
    }
}","/**
 * Adds a marker for the domain axis and sends a {@link PlotChangeEvent}
 * to all registered listeners.
 * <P>
 * Typically a marker will be drawn by the renderer as a line perpendicular
 * to the range axis, however this is entirely up to the renderer.
 *
 * @param marker  the marker (<code>null</code> not permitted).
 *
 * @see #addDomainMarker(Marker, Layer)
 * @see #clearDomainMarkers()
 */"
"public void addDomainMarker(int index, Marker marker, Layer layer, boolean notify) {
    if (marker == null) {
        throw new IllegalArgumentException(""Null 'marker' not permitted."");
    }
    if (layer == null) {
        throw new IllegalArgumentException(""Null 'layer' not permitted."");
    }
    Collection markers;
    if (layer == Layer.FOREGROUND) {
        markers = (Collection) this.foregroundDomainMarkers.get(new Integer(index));
        if (markers == null) {
            markers = new java.util.ArrayList();
            this.foregroundDomainMarkers.put(new Integer(index), markers);
        }
        markers.add(marker);
    } else if (layer == Layer.BACKGROUND) {
        markers = (Collection) this.backgroundDomainMarkers.get(new Integer(index));
        if (markers == null) {
            markers = new java.util.ArrayList();
            this.backgroundDomainMarkers.put(new Integer(index), markers);
        }
        markers.add(marker);
    }
    marker.addChangeListener(this);
    if (notify) {
        fireChangeEvent();
    }
}","public void test101185() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    CategoryMarker categoryMarker0 = new CategoryMarker(10);
    // Undeclared exception!
    try {
        combinedRangeXYPlot0.addDomainMarker(10, (Marker) categoryMarker0, (Layer) null, false);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'layer' not permitted.
        //
        verifyException(""org.jfree.chart.plot.XYPlot"", e);
    }
}","/**
 * Adds a marker for a specific dataset/renderer and, if requested, sends a
 * {@link PlotChangeEvent} to all registered listeners.
 * <P>
 * Typically a marker will be drawn by the renderer as a line perpendicular
 * to the domain axis (that the renderer is mapped to), however this is
 * entirely up to the renderer.
 *
 * @param index  the dataset/renderer index.
 * @param marker  the marker.
 * @param layer  the layer (foreground or background).
 * @param notify  notify listeners?
 *
 * @since 1.0.10
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test102186() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    IntervalMarker intervalMarker0 = new IntervalMarker(14.0, 0);
    Layer layer0 = Layer.FOREGROUND;
    combinedDomainXYPlot0.addDomainMarker((Marker) intervalMarker0, layer0);
    combinedDomainXYPlot0.addDomainMarker(0, (Marker) intervalMarker0, layer0, false);
    assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test103187() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 1.0F);
    Layer layer0 = Layer.BACKGROUND;
    combinedRangeXYPlot0.addDomainMarker((-2080), (Marker) intervalMarker0, layer0, false);
    combinedRangeXYPlot0.addDomainMarker((-2080), (Marker) intervalMarker0, layer0, false);
    assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test103188() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 1.0F);
    Layer layer0 = Layer.BACKGROUND;
    combinedRangeXYPlot0.addDomainMarker((-2080), (Marker) intervalMarker0, layer0, false);
    combinedRangeXYPlot0.addDomainMarker((-2080), (Marker) intervalMarker0, layer0, false);
    assertEquals(1, combinedRangeXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test103189() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 1.0F);
    Layer layer0 = Layer.BACKGROUND;
    combinedRangeXYPlot0.addDomainMarker((-2080), (Marker) intervalMarker0, layer0, false);
    combinedRangeXYPlot0.addDomainMarker((-2080), (Marker) intervalMarker0, layer0, false);
    assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test104190() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    IntervalMarker intervalMarker0 = new IntervalMarker(0.5F, 15);
    ValueMarker valueMarker0 = new ValueMarker(1236.10482);
    Layer layer0 = Layer.BACKGROUND;
    combinedRangeXYPlot0.addDomainMarker((Marker) intervalMarker0, layer0);
    combinedRangeXYPlot0.removeDomainMarker(0, (Marker) valueMarker0, layer0, false);
    assertEquals(1, combinedRangeXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test104191() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    IntervalMarker intervalMarker0 = new IntervalMarker(0.5F, 15);
    ValueMarker valueMarker0 = new ValueMarker(1236.10482);
    Layer layer0 = Layer.BACKGROUND;
    combinedRangeXYPlot0.addDomainMarker((Marker) intervalMarker0, layer0);
    combinedRangeXYPlot0.removeDomainMarker(0, (Marker) valueMarker0, layer0, false);
    assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test104192() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    IntervalMarker intervalMarker0 = new IntervalMarker(0.5F, 15);
    ValueMarker valueMarker0 = new ValueMarker(1236.10482);
    Layer layer0 = Layer.BACKGROUND;
    combinedRangeXYPlot0.addDomainMarker((Marker) intervalMarker0, layer0);
    combinedRangeXYPlot0.removeDomainMarker(0, (Marker) valueMarker0, layer0, false);
    assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test105193() throws Throwable {
    DateAxis dateAxis0 = new DateAxis(""Z]wbb3qfX<"");
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
    ValueMarker valueMarker0 = new ValueMarker(688.32824277761);
    Layer layer0 = Layer.BACKGROUND;
    combinedRangeXYPlot0.addDomainMarker((Marker) valueMarker0, layer0);
    boolean boolean0 = combinedRangeXYPlot0.removeDomainMarker(0, (Marker) valueMarker0, layer0, false);
    assertEquals(1, combinedRangeXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean removeDomainMarker(int index, Marker marker, Layer layer, boolean notify) {
    ArrayList markers;
    if (layer == Layer.FOREGROUND) {
        markers = (ArrayList) this.foregroundDomainMarkers.get(new Integer(index));
    } else {
        markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer(index));
    }
    boolean removed = markers.remove(marker);
    if (removed && notify) {
        fireChangeEvent();
    }
    return removed;
}","public void test105194() throws Throwable {
    DateAxis dateAxis0 = new DateAxis(""Z]wbb3qfX<"");
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
    ValueMarker valueMarker0 = new ValueMarker(688.32824277761);
    Layer layer0 = Layer.BACKGROUND;
    combinedRangeXYPlot0.addDomainMarker((Marker) valueMarker0, layer0);
    boolean boolean0 = combinedRangeXYPlot0.removeDomainMarker(0, (Marker) valueMarker0, layer0, false);
    assertTrue(boolean0);
}","/**
 * Removes a marker for a specific dataset/renderer and, if requested,
 * sends a {@link PlotChangeEvent} to all registered listeners.
 *
 * @param index  the dataset/renderer index.
 * @param marker  the marker.
 * @param layer  the layer (foreground or background).
 * @param notify  notify listeners?
 *
 * @return A boolean indicating whether or not the marker was actually
 *         removed.
 *
 * @since 1.0.10
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test106195() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    ValueMarker valueMarker0 = new ValueMarker(2.0);
    Layer layer0 = Layer.BACKGROUND;
    combinedRangeXYPlot0.addDomainMarker((Marker) valueMarker0, layer0);
    combinedRangeXYPlot0.removeDomainMarker(0, (Marker) valueMarker0, layer0, true);
    assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test106196() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    ValueMarker valueMarker0 = new ValueMarker(2.0);
    Layer layer0 = Layer.BACKGROUND;
    combinedRangeXYPlot0.addDomainMarker((Marker) valueMarker0, layer0);
    combinedRangeXYPlot0.removeDomainMarker(0, (Marker) valueMarker0, layer0, true);
    assertEquals(1, combinedRangeXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test106197() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    ValueMarker valueMarker0 = new ValueMarker(2.0);
    Layer layer0 = Layer.BACKGROUND;
    combinedRangeXYPlot0.addDomainMarker((Marker) valueMarker0, layer0);
    combinedRangeXYPlot0.removeDomainMarker(0, (Marker) valueMarker0, layer0, true);
    assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test107198() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    CategoryMarker categoryMarker0 = new CategoryMarker(10, combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE);
    Layer layer0 = Layer.BACKGROUND;
    combinedRangeXYPlot0.addRangeMarker(10, (Marker) categoryMarker0, layer0);
    combinedRangeXYPlot0.clearRangeMarkers();
    assertEquals(1, combinedRangeXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test107199() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    CategoryMarker categoryMarker0 = new CategoryMarker(10, combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE);
    Layer layer0 = Layer.BACKGROUND;
    combinedRangeXYPlot0.addRangeMarker(10, (Marker) categoryMarker0, layer0);
    combinedRangeXYPlot0.clearRangeMarkers();
    assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test108200() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    ValueMarker valueMarker0 = new ValueMarker(1.0F);
    combinedDomainXYPlot0.addRangeMarker((Marker) valueMarker0);
    combinedDomainXYPlot0.clearRangeMarkers();
    assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test109201() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    IntervalMarker intervalMarker0 = new IntervalMarker(482.0, 942.9754205);
    combinedDomainXYPlot0.addRangeMarker((Marker) intervalMarker0);
    CategoryMarker categoryMarker0 = new CategoryMarker(false, combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE);
    combinedDomainXYPlot0.addRangeMarker((Marker) categoryMarker0);
    assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test109202() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    IntervalMarker intervalMarker0 = new IntervalMarker(482.0, 942.9754205);
    combinedDomainXYPlot0.addRangeMarker((Marker) intervalMarker0);
    CategoryMarker categoryMarker0 = new CategoryMarker(false, combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE);
    combinedDomainXYPlot0.addRangeMarker((Marker) categoryMarker0);
    assertEquals(1, combinedDomainXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public void addRangeMarker(int index, Marker marker, Layer layer) {
    addRangeMarker(index, marker, layer, true);
}","public void test110203() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    // Undeclared exception!
    try {
        combinedRangeXYPlot0.addRangeMarker(10, (Marker) null, (Layer) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jfree.chart.plot.XYPlot"", e);
    }
}","/**
 * Adds a marker for a specific dataset/renderer and sends a
 * {@link PlotChangeEvent} to all registered listeners.
 * <P>
 * Typically a marker will be drawn by the renderer as a line perpendicular
 * to the range axis, however this is entirely up to the renderer.
 *
 * @param index  the dataset/renderer index.
 * @param marker  the marker.
 * @param layer  the layer (foreground or background).
 *
 * @see #clearRangeMarkers(int)
 * @see #addDomainMarker(int, Marker, Layer)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test111204() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    Layer layer0 = Layer.BACKGROUND;
    IntervalMarker intervalMarker0 = new IntervalMarker(2730.74, 10);
    combinedRangeXYPlot0.addRangeMarker(3, (Marker) intervalMarker0, layer0);
    combinedRangeXYPlot0.addRangeMarker(3, (Marker) intervalMarker0, layer0, false);
    assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test111205() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    Layer layer0 = Layer.BACKGROUND;
    IntervalMarker intervalMarker0 = new IntervalMarker(2730.74, 10);
    combinedRangeXYPlot0.addRangeMarker(3, (Marker) intervalMarker0, layer0);
    combinedRangeXYPlot0.addRangeMarker(3, (Marker) intervalMarker0, layer0, false);
    assertEquals(1, combinedRangeXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean removeRangeMarker(int index, Marker marker, Layer layer, boolean notify) {
    if (marker == null) {
        throw new IllegalArgumentException(""Null 'marker' argument."");
    }
    ArrayList markers;
    if (layer == Layer.FOREGROUND) {
        markers = (ArrayList) this.foregroundRangeMarkers.get(new Integer(index));
    } else {
        markers = (ArrayList) this.backgroundRangeMarkers.get(new Integer(index));
    }
    boolean removed = markers.remove(marker);
    if (removed && notify) {
        fireChangeEvent();
    }
    return removed;
}","public void test112206() throws Throwable {
    Layer layer0 = Layer.BACKGROUND;
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    ValueMarker valueMarker0 = new ValueMarker((-5141.2983), combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT, combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE);
    combinedRangeXYPlot0.addRangeMarker(10, (Marker) valueMarker0, layer0);
    ValueMarker valueMarker1 = new ValueMarker(10);
    boolean boolean0 = combinedRangeXYPlot0.removeRangeMarker(10, (Marker) valueMarker1, (Layer) null, false);
    assertFalse(boolean0);
}","/**
 * Removes a marker for a specific dataset/renderer and sends a
 * {@link PlotChangeEvent} to all registered listeners.
 *
 * @param index  the dataset/renderer index.
 * @param marker  the marker.
 * @param layer  the layer (foreground or background).
 * @param notify  notify listeners?
 *
 * @return A boolean indicating whether or not the marker was actually
 *         removed.
 *
 * @since 1.0.10
 */"
"public int getWeight() {
    return this.weight;
}","public void test113207() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    ValueMarker valueMarker0 = new ValueMarker(1.0F, combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE);
    Layer layer0 = Layer.BACKGROUND;
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    combinedRangeXYPlot0.addRangeMarker(10, (Marker) valueMarker0, layer0);
    boolean boolean0 = combinedRangeXYPlot0.removeRangeMarker(10, (Marker) valueMarker0, layer0, false);
    assertEquals(1, combinedRangeXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test113208() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    ValueMarker valueMarker0 = new ValueMarker(1.0F, combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE);
    Layer layer0 = Layer.BACKGROUND;
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    combinedRangeXYPlot0.addRangeMarker(10, (Marker) valueMarker0, layer0);
    boolean boolean0 = combinedRangeXYPlot0.removeRangeMarker(10, (Marker) valueMarker0, layer0, false);
    assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public boolean removeRangeMarker(int index, Marker marker, Layer layer, boolean notify) {
    if (marker == null) {
        throw new IllegalArgumentException(""Null 'marker' argument."");
    }
    ArrayList markers;
    if (layer == Layer.FOREGROUND) {
        markers = (ArrayList) this.foregroundRangeMarkers.get(new Integer(index));
    } else {
        markers = (ArrayList) this.backgroundRangeMarkers.get(new Integer(index));
    }
    boolean removed = markers.remove(marker);
    if (removed && notify) {
        fireChangeEvent();
    }
    return removed;
}","public void test113209() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    ValueMarker valueMarker0 = new ValueMarker(1.0F, combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE);
    Layer layer0 = Layer.BACKGROUND;
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    combinedRangeXYPlot0.addRangeMarker(10, (Marker) valueMarker0, layer0);
    boolean boolean0 = combinedRangeXYPlot0.removeRangeMarker(10, (Marker) valueMarker0, layer0, false);
    assertTrue(boolean0);
}","/**
 * Removes a marker for a specific dataset/renderer and sends a
 * {@link PlotChangeEvent} to all registered listeners.
 *
 * @param index  the dataset/renderer index.
 * @param marker  the marker.
 * @param layer  the layer (foreground or background).
 * @param notify  notify listeners?
 *
 * @return A boolean indicating whether or not the marker was actually
 *         removed.
 *
 * @since 1.0.10
 */"
"public boolean removeRangeMarker(int index, Marker marker, Layer layer, boolean notify) {
    if (marker == null) {
        throw new IllegalArgumentException(""Null 'marker' argument."");
    }
    ArrayList markers;
    if (layer == Layer.FOREGROUND) {
        markers = (ArrayList) this.foregroundRangeMarkers.get(new Integer(index));
    } else {
        markers = (ArrayList) this.backgroundRangeMarkers.get(new Integer(index));
    }
    boolean removed = markers.remove(marker);
    if (removed && notify) {
        fireChangeEvent();
    }
    return removed;
}","public void test114210() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    CategoryMarker categoryMarker0 = new CategoryMarker(10);
    Layer layer0 = Layer.FOREGROUND;
    combinedRangeXYPlot0.addRangeMarker(389, (Marker) categoryMarker0, layer0);
    boolean boolean0 = combinedRangeXYPlot0.removeRangeMarker(389, (Marker) categoryMarker0, layer0, true);
    assertTrue(boolean0);
}","/**
 * Removes a marker for a specific dataset/renderer and sends a
 * {@link PlotChangeEvent} to all registered listeners.
 *
 * @param index  the dataset/renderer index.
 * @param marker  the marker.
 * @param layer  the layer (foreground or background).
 * @param notify  notify listeners?
 *
 * @return A boolean indicating whether or not the marker was actually
 *         removed.
 *
 * @since 1.0.10
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test114211() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    CategoryMarker categoryMarker0 = new CategoryMarker(10);
    Layer layer0 = Layer.FOREGROUND;
    combinedRangeXYPlot0.addRangeMarker(389, (Marker) categoryMarker0, layer0);
    boolean boolean0 = combinedRangeXYPlot0.removeRangeMarker(389, (Marker) categoryMarker0, layer0, true);
    assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test114212() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    CategoryMarker categoryMarker0 = new CategoryMarker(10);
    Layer layer0 = Layer.FOREGROUND;
    combinedRangeXYPlot0.addRangeMarker(389, (Marker) categoryMarker0, layer0);
    boolean boolean0 = combinedRangeXYPlot0.removeRangeMarker(389, (Marker) categoryMarker0, layer0, true);
    assertEquals(1, combinedRangeXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public void addAnnotation(XYAnnotation annotation) {
    addAnnotation(annotation, true);
}","public void test115213() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    // Undeclared exception!
    try {
        combinedRangeXYPlot0.addAnnotation((XYAnnotation) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'annotation' argument.
        //
        verifyException(""org.jfree.chart.plot.XYPlot"", e);
    }
}","/**
 * Adds an annotation to the plot and sends a {@link PlotChangeEvent} to
 * all registered listeners.
 *
 * @param annotation  the annotation (<code>null</code> not permitted).
 *
 * @see #getAnnotations()
 * @see #removeAnnotation(XYAnnotation)
 */"
"public boolean removeAnnotation(XYAnnotation annotation, boolean notify) {
    if (annotation == null) {
        throw new IllegalArgumentException(""Null 'annotation' argument."");
    }
    boolean removed = this.annotations.remove(annotation);
    if (removed && notify) {
        fireChangeEvent();
    }
    return removed;
}","public void test116214() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(combinedRangeXYPlot0.DEFAULT_LEGEND_ITEM_BOX, combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_PAINT);
    combinedDomainXYPlot0.addAnnotation((XYAnnotation) xYShapeAnnotation0, false);
    boolean boolean0 = combinedDomainXYPlot0.removeAnnotation((XYAnnotation) xYShapeAnnotation0, false);
    assertTrue(boolean0);
}","/**
 * Removes an annotation from the plot and sends a {@link PlotChangeEvent}
 * to all registered listeners.
 *
 * @param annotation  the annotation (<code>null</code> not permitted).
 * @param notify  notify listeners?
 *
 * @return A boolean (indicates whether or not the annotation was removed).
 *
 * @since 1.0.10
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test116215() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(combinedRangeXYPlot0.DEFAULT_LEGEND_ITEM_BOX, combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_PAINT);
    combinedDomainXYPlot0.addAnnotation((XYAnnotation) xYShapeAnnotation0, false);
    boolean boolean0 = combinedDomainXYPlot0.removeAnnotation((XYAnnotation) xYShapeAnnotation0, false);
    assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test116216() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(combinedRangeXYPlot0.DEFAULT_LEGEND_ITEM_BOX, combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_PAINT);
    combinedDomainXYPlot0.addAnnotation((XYAnnotation) xYShapeAnnotation0, false);
    boolean boolean0 = combinedDomainXYPlot0.removeAnnotation((XYAnnotation) xYShapeAnnotation0, false);
    assertEquals(1, combinedDomainXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean removeAnnotation(XYAnnotation annotation, boolean notify) {
    if (annotation == null) {
        throw new IllegalArgumentException(""Null 'annotation' argument."");
    }
    boolean removed = this.annotations.remove(annotation);
    if (removed && notify) {
        fireChangeEvent();
    }
    return removed;
}","public void test117217() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    // Undeclared exception!
    try {
        combinedRangeXYPlot0.removeAnnotation((XYAnnotation) null, false);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'annotation' argument.
        //
        verifyException(""org.jfree.chart.plot.XYPlot"", e);
    }
}","/**
 * Removes an annotation from the plot and sends a {@link PlotChangeEvent}
 * to all registered listeners.
 *
 * @param annotation  the annotation (<code>null</code> not permitted).
 * @param notify  notify listeners?
 *
 * @return A boolean (indicates whether or not the annotation was removed).
 *
 * @since 1.0.10
 */"
"public int getWeight() {
    return this.weight;
}","public void test118218() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(combinedDomainXYPlot0.DEFAULT_LEGEND_ITEM_BOX, combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_PAINT);
    combinedDomainXYPlot0.addAnnotation((XYAnnotation) xYShapeAnnotation0, false);
    combinedDomainXYPlot0.removeAnnotation((XYAnnotation) xYShapeAnnotation0, true);
    assertEquals(1, combinedDomainXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test118219() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(combinedDomainXYPlot0.DEFAULT_LEGEND_ITEM_BOX, combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_PAINT);
    combinedDomainXYPlot0.addAnnotation((XYAnnotation) xYShapeAnnotation0, false);
    combinedDomainXYPlot0.removeAnnotation((XYAnnotation) xYShapeAnnotation0, true);
    assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test118220() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(combinedDomainXYPlot0.DEFAULT_LEGEND_ITEM_BOX, combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_PAINT);
    combinedDomainXYPlot0.addAnnotation((XYAnnotation) xYShapeAnnotation0, false);
    combinedDomainXYPlot0.removeAnnotation((XYAnnotation) xYShapeAnnotation0, true);
    assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"protected AxisSpace calculateDomainAxisSpace(Graphics2D g2, Rectangle2D plotArea, AxisSpace space) {
    if (space == null) {
        space = new AxisSpace();
    }
    // reserve some space for the domain axis...
    if (this.fixedDomainAxisSpace != null) {
        if (this.orientation == PlotOrientation.HORIZONTAL) {
            space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(), RectangleEdge.LEFT);
            space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(), RectangleEdge.RIGHT);
        } else if (this.orientation == PlotOrientation.VERTICAL) {
            space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(), RectangleEdge.TOP);
            space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(), RectangleEdge.BOTTOM);
        }
    } else {
        // reserve space for the domain axes...
        for (int i = 0; i < this.domainAxes.size(); i++) {
            Axis axis = (Axis) this.domainAxes.get(i);
            if (axis != null) {
                RectangleEdge edge = getDomainAxisEdge(i);
                space = axis.reserveSpace(g2, this, plotArea, edge, space);
            }
        }
    }
    return space;
}","public void test119221() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    // Undeclared exception!
    try {
        combinedDomainXYPlot0.calculateDomainAxisSpace((Graphics2D) null, (Rectangle2D) null, (AxisSpace) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jfree.chart.axis.ValueAxis"", e);
    }
}","/**
 * Calculates the space required for the domain axis/axes.
 *
 * @param g2  the graphics device.
 * @param plotArea  the plot area.
 * @param space  a carrier for the result (<code>null</code> permitted).
 *
 * @return The required space.
 */"
"protected AxisSpace calculateRangeAxisSpace(Graphics2D g2, Rectangle2D plotArea, AxisSpace space) {
    if (space == null) {
        space = new AxisSpace();
    }
    // reserve some space for the range axis...
    if (this.fixedRangeAxisSpace != null) {
        if (this.orientation == PlotOrientation.HORIZONTAL) {
            space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(), RectangleEdge.TOP);
            space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(), RectangleEdge.BOTTOM);
        } else if (this.orientation == PlotOrientation.VERTICAL) {
            space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(), RectangleEdge.LEFT);
            space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(), RectangleEdge.RIGHT);
        }
    } else {
        // reserve space for the range axes...
        for (int i = 0; i < this.rangeAxes.size(); i++) {
            Axis axis = (Axis) this.rangeAxes.get(i);
            if (axis != null) {
                RectangleEdge edge = getRangeAxisEdge(i);
                space = axis.reserveSpace(g2, this, plotArea, edge, space);
            }
        }
    }
    return space;
}","public void test120222() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    DefaultCaret defaultCaret0 = new DefaultCaret();
    // Undeclared exception!
    try {
        combinedRangeXYPlot0.calculateRangeAxisSpace((Graphics2D) null, defaultCaret0, (AxisSpace) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jfree.chart.axis.ValueAxis"", e);
    }
}","/**
 * Calculates the space required for the range axis/axes.
 *
 * @param g2  the graphics device.
 * @param plotArea  the plot area.
 * @param space  a carrier for the result (<code>null</code> permitted).
 *
 * @return The required space.
 */"
"public BufferedImage createBufferedImage(int width, int height) {
    return createBufferedImage(width, height, null);
}","public void test121223() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
    // Undeclared exception!
    try {
        jFreeChart0.createBufferedImage(62, 62);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jfree.chart.plot.XYPlot"", e);
    }
}","/**
 * Creates and returns a buffered image into which the chart has been drawn.
 *
 * @param width  the width.
 * @param height  the height.
 *
 * @return A buffered image.
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test122224() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
    JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
    jFreeChart0.createBufferedImage(335, 10, 10, chartRenderingInfo0);
    assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test122225() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
    JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
    jFreeChart0.createBufferedImage(335, 10, 10, chartRenderingInfo0);
    assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public void draw(Graphics2D g2, Rectangle2D area, Point2D anchor, PlotState parentState, PlotRenderingInfo info) {
    // if the plot area is too small, just return...
    boolean b1 = (area.getWidth() <= MINIMUM_WIDTH_TO_DRAW);
    boolean b2 = (area.getHeight() <= MINIMUM_HEIGHT_TO_DRAW);
    if (b1 || b2) {
        return;
    }
    // record the plot area...
    if (info != null) {
        info.setPlotArea(area);
    }
    // adjust the drawing area for the plot insets (if any)...
    RectangleInsets insets = getInsets();
    insets.trim(area);
    AxisSpace space = calculateAxisSpace(g2, area);
    Rectangle2D dataArea = space.shrink(area, null);
    this.axisOffset.trim(dataArea);
    if (info != null) {
        info.setDataArea(dataArea);
    }
    // draw the plot background and axes...
    drawBackground(g2, dataArea);
    Map axisStateMap = drawAxes(g2, area, dataArea, info);
    PlotOrientation orient = getOrientation();
    // the anchor point is typically the point where the mouse last
    // clicked - the crosshairs will be driven off this point...
    if (anchor != null && !dataArea.contains(anchor)) {
        anchor = null;
    }
    CrosshairState crosshairState = new CrosshairState();
    crosshairState.setCrosshairDistance(Double.POSITIVE_INFINITY);
    crosshairState.setAnchor(anchor);
    crosshairState.setAnchorX(Double.NaN);
    crosshairState.setAnchorY(Double.NaN);
    if (anchor != null) {
        ValueAxis domainAxis = getDomainAxis();
        if (domainAxis != null) {
            double x;
            if (orient == PlotOrientation.VERTICAL) {
                x = domainAxis.java2DToValue(anchor.getX(), dataArea, getDomainAxisEdge());
            } else {
                x = domainAxis.java2DToValue(anchor.getY(), dataArea, getDomainAxisEdge());
            }
            crosshairState.setAnchorX(x);
        }
        ValueAxis rangeAxis = getRangeAxis();
        if (rangeAxis != null) {
            double y;
            if (orient == PlotOrientation.VERTICAL) {
                y = rangeAxis.java2DToValue(anchor.getY(), dataArea, getRangeAxisEdge());
            } else {
                y = rangeAxis.java2DToValue(anchor.getX(), dataArea, getRangeAxisEdge());
            }
            crosshairState.setAnchorY(y);
        }
    }
    crosshairState.setCrosshairX(getDomainCrosshairValue());
    crosshairState.setCrosshairY(getRangeCrosshairValue());
    Shape originalClip = g2.getClip();
    Composite originalComposite = g2.getComposite();
    g2.clip(dataArea);
    g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, getForegroundAlpha()));
    AxisState domainAxisState = (AxisState) axisStateMap.get(getDomainAxis());
    if (domainAxisState == null) {
        if (parentState != null) {
            domainAxisState = (AxisState) parentState.getSharedAxisStates().get(getDomainAxis());
        }
    }
    AxisState rangeAxisState = (AxisState) axisStateMap.get(getRangeAxis());
    if (rangeAxisState == null) {
        if (parentState != null) {
            rangeAxisState = (AxisState) parentState.getSharedAxisStates().get(getRangeAxis());
        }
    }
    if (domainAxisState != null) {
        drawDomainTickBands(g2, dataArea, domainAxisState.getTicks());
    }
    if (rangeAxisState != null) {
        drawRangeTickBands(g2, dataArea, rangeAxisState.getTicks());
    }
    if (domainAxisState != null) {
        drawDomainGridlines(g2, dataArea, domainAxisState.getTicks());
        drawZeroDomainBaseline(g2, dataArea);
    }
    if (rangeAxisState != null) {
        drawRangeGridlines(g2, dataArea, rangeAxisState.getTicks());
        drawZeroRangeBaseline(g2, dataArea);
    }
    // draw the markers that are associated with a specific renderer...
    for (int i = 0; i < this.renderers.size(); i++) {
        drawDomainMarkers(g2, dataArea, i, Layer.BACKGROUND);
    }
    for (int i = 0; i < this.renderers.size(); i++) {
        drawRangeMarkers(g2, dataArea, i, Layer.BACKGROUND);
    }
    // now draw annotations and render data items...
    boolean foundData = false;
    DatasetRenderingOrder order = getDatasetRenderingOrder();
    if (order == DatasetRenderingOrder.FORWARD) {
        // draw background annotations
        int rendererCount = this.renderers.size();
        for (int i = 0; i < rendererCount; i++) {
            XYItemRenderer r = getRenderer(i);
            if (r != null) {
                ValueAxis domainAxis = getDomainAxisForDataset(i);
                ValueAxis rangeAxis = getRangeAxisForDataset(i);
                r.drawAnnotations(g2, dataArea, domainAxis, rangeAxis, Layer.BACKGROUND, info);
            }
        }
        // render data items...
        for (int i = 0; i < getDatasetCount(); i++) {
            foundData = render(g2, dataArea, i, info, crosshairState) || foundData;
        }
        // draw foreground annotations
        for (int i = 0; i < rendererCount; i++) {
            XYItemRenderer r = getRenderer(i);
            if (r != null) {
                ValueAxis domainAxis = getDomainAxisForDataset(i);
                ValueAxis rangeAxis = getRangeAxisForDataset(i);
                r.drawAnnotations(g2, dataArea, domainAxis, rangeAxis, Layer.FOREGROUND, info);
            }
        }
    } else if (order == DatasetRenderingOrder.REVERSE) {
        // draw background annotations
        int rendererCount = this.renderers.size();
        for (int i = rendererCount - 1; i >= 0; i--) {
            XYItemRenderer r = getRenderer(i);
            if (i >= getDatasetCount()) {
                // we need the dataset to make
                // a link to the axes
                continue;
            }
            if (r != null) {
                ValueAxis domainAxis = getDomainAxisForDataset(i);
                ValueAxis rangeAxis = getRangeAxisForDataset(i);
                r.drawAnnotations(g2, dataArea, domainAxis, rangeAxis, Layer.BACKGROUND, info);
            }
        }
        for (int i = getDatasetCount() - 1; i >= 0; i--) {
            foundData = render(g2, dataArea, i, info, crosshairState) || foundData;
        }
        // draw foreground annotations
        for (int i = rendererCount - 1; i >= 0; i--) {
            XYItemRenderer r = getRenderer(i);
            if (i >= getDatasetCount()) {
                // we need the dataset to make
                // a link to the axes
                continue;
            }
            if (r != null) {
                ValueAxis domainAxis = getDomainAxisForDataset(i);
                ValueAxis rangeAxis = getRangeAxisForDataset(i);
                r.drawAnnotations(g2, dataArea, domainAxis, rangeAxis, Layer.FOREGROUND, info);
            }
        }
    }
    // draw domain crosshair if required...
    int xAxisIndex = crosshairState.getDomainAxisIndex();
    ValueAxis xAxis = getDomainAxis(xAxisIndex);
    RectangleEdge xAxisEdge = getDomainAxisEdge(xAxisIndex);
    if (!this.domainCrosshairLockedOnData && anchor != null) {
        double xx;
        if (orient == PlotOrientation.VERTICAL) {
            xx = xAxis.java2DToValue(anchor.getX(), dataArea, xAxisEdge);
        } else {
            xx = xAxis.java2DToValue(anchor.getY(), dataArea, xAxisEdge);
        }
        crosshairState.setCrosshairX(xx);
    }
    setDomainCrosshairValue(crosshairState.getCrosshairX(), false);
    if (isDomainCrosshairVisible()) {
        double x = getDomainCrosshairValue();
        Paint paint = getDomainCrosshairPaint();
        Stroke stroke = getDomainCrosshairStroke();
        drawDomainCrosshair(g2, dataArea, orient, x, xAxis, stroke, paint);
    }
    // draw range crosshair if required...
    int yAxisIndex = crosshairState.getRangeAxisIndex();
    ValueAxis yAxis = getRangeAxis(yAxisIndex);
    RectangleEdge yAxisEdge = getRangeAxisEdge(yAxisIndex);
    if (!this.rangeCrosshairLockedOnData && anchor != null) {
        double yy;
        if (orient == PlotOrientation.VERTICAL) {
            yy = yAxis.java2DToValue(anchor.getY(), dataArea, yAxisEdge);
        } else {
            yy = yAxis.java2DToValue(anchor.getX(), dataArea, yAxisEdge);
        }
        crosshairState.setCrosshairY(yy);
    }
    setRangeCrosshairValue(crosshairState.getCrosshairY(), false);
    if (isRangeCrosshairVisible()) {
        double y = getRangeCrosshairValue();
        Paint paint = getRangeCrosshairPaint();
        Stroke stroke = getRangeCrosshairStroke();
        drawRangeCrosshair(g2, dataArea, orient, y, yAxis, stroke, paint);
    }
    if (!foundData) {
        drawNoDataMessage(g2, dataArea);
    }
    for (int i = 0; i < this.renderers.size(); i++) {
        drawDomainMarkers(g2, dataArea, i, Layer.FOREGROUND);
    }
    for (int i = 0; i < this.renderers.size(); i++) {
        drawRangeMarkers(g2, dataArea, i, Layer.FOREGROUND);
    }
    drawAnnotations(g2, dataArea, info);
    g2.setClip(originalClip);
    g2.setComposite(originalComposite);
    drawOutline(g2, dataArea);
}","public void test123226() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-13.322859994304387), (-13.322859994304387));
    XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer(500);
    HistogramDataset histogramDataset0 = new HistogramDataset();
    XYPlot xYPlot0 = new XYPlot(histogramDataset0, cyclicNumberAxis0, cyclicNumberAxis0, xYAreaRenderer0);
    JFreeChart jFreeChart0 = new JFreeChart((String) null, cyclicNumberAxis0.DEFAULT_TICK_LABEL_FONT, xYPlot0, false);
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
    BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(15, 15, 10, chartRenderingInfo0);
    Graphics2D graphics2D0 = bufferedImage0.createGraphics();
    ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
    Dimension dimension0 = chartPanel0.getPreferredSize();
    Rectangle rectangle0 = new Rectangle(dimension0);
    Point point0 = new Point(0, 0);
    PlotState plotState0 = new PlotState();
    PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
    xYPlot0.draw(graphics2D0, rectangle0, point0, plotState0, plotRenderingInfo0);
    assertEquals(8, rectangle0.x);
}","/**
 * Draws the plot within the specified area on a graphics device.
 *
 * @param g2  the graphics device.
 * @param area  the plot area (in Java2D space).
 * @param anchor  an anchor point in Java2D space (<code>null</code>
 *                permitted).
 * @param parentState  the state from the parent plot, if there is one
 *                     (<code>null</code> permitted).
 * @param info  collects chart drawing information (<code>null</code>
 *              permitted).
 */"
"public boolean isDomainGridlinesVisible() {
    return this.domainGridlinesVisible;
}","public void test124228() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-48.9523527142181), (-48.9523527142181));
    XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer(500);
    HistogramDataset histogramDataset0 = new HistogramDataset();
    XYPlot xYPlot0 = new XYPlot(histogramDataset0, cyclicNumberAxis0, cyclicNumberAxis0, xYAreaRenderer0);
    xYPlot0.setRangeCrosshairLockedOnData(false);
    JFreeChart jFreeChart0 = new JFreeChart("""", cyclicNumberAxis0.DEFAULT_TICK_LABEL_FONT, xYPlot0, true);
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
    jFreeChart0.createBufferedImage(140, 500, 1, chartRenderingInfo0);
    assertTrue(xYPlot0.isDomainGridlinesVisible());
}","/**
 * Returns <code>true</code> if the domain gridlines are visible, and
 * <code>false<code> otherwise.
 *
 * @return <code>true</code> or <code>false</code>.
 *
 * @see #setDomainGridlinesVisible(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test126230() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
    PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
    Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
    xYPlot0.drawAxes((Graphics2D) null, rectangle2D_Float0, rectangle2D_Float0, plotRenderingInfo0);
    assertEquals(1, xYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test126231() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
    PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
    Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
    xYPlot0.drawAxes((Graphics2D) null, rectangle2D_Float0, rectangle2D_Float0, plotRenderingInfo0);
    assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public int getDomainAxisCount() {
    return this.domainAxes.size();
}","public void test127232() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-48.9523527142181), (-48.9523527142181));
    XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer(500);
    HistogramDataset histogramDataset0 = new HistogramDataset();
    XYPlot xYPlot0 = new XYPlot(histogramDataset0, cyclicNumberAxis0, cyclicNumberAxis0, xYAreaRenderer0);
    JFreeChart jFreeChart0 = new JFreeChart("""", cyclicNumberAxis0.DEFAULT_TICK_LABEL_FONT, xYPlot0, true);
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
    ValueAxis[] valueAxisArray0 = new ValueAxis[2];
    valueAxisArray0[0] = (ValueAxis) cyclicNumberAxis0;
    ZoneInfo zoneInfo0 = (ZoneInfo) SegmentedTimeline.DEFAULT_TIME_ZONE;
    DateAxis dateAxis0 = new DateAxis(""/jfU@$R]U5;RDcJ"", zoneInfo0);
    valueAxisArray0[1] = (ValueAxis) dateAxis0;
    xYPlot0.setDomainAxes(valueAxisArray0);
    jFreeChart0.createBufferedImage(140, 500, 1, chartRenderingInfo0);
    assertEquals(2, xYPlot0.getDomainAxisCount());
}","/**
 * Returns the number of domain axes.
 *
 * @return The axis count.
 *
 * @see #getRangeAxisCount()
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test127233() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-48.9523527142181), (-48.9523527142181));
    XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer(500);
    HistogramDataset histogramDataset0 = new HistogramDataset();
    XYPlot xYPlot0 = new XYPlot(histogramDataset0, cyclicNumberAxis0, cyclicNumberAxis0, xYAreaRenderer0);
    JFreeChart jFreeChart0 = new JFreeChart("""", cyclicNumberAxis0.DEFAULT_TICK_LABEL_FONT, xYPlot0, true);
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
    ValueAxis[] valueAxisArray0 = new ValueAxis[2];
    valueAxisArray0[0] = (ValueAxis) cyclicNumberAxis0;
    ZoneInfo zoneInfo0 = (ZoneInfo) SegmentedTimeline.DEFAULT_TIME_ZONE;
    DateAxis dateAxis0 = new DateAxis(""/jfU@$R]U5;RDcJ"", zoneInfo0);
    valueAxisArray0[1] = (ValueAxis) dateAxis0;
    xYPlot0.setDomainAxes(valueAxisArray0);
    jFreeChart0.createBufferedImage(140, 500, 1, chartRenderingInfo0);
    assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public ValueAxis getDomainAxisForDataset(int index) {
    if (index < 0 || index >= getDatasetCount()) {
        throw new IllegalArgumentException(""Index "" + index + "" out of bounds."");
    }
    ValueAxis valueAxis = null;
    Integer axisIndex = (Integer) this.datasetToDomainAxisMap.get(new Integer(index));
    if (axisIndex != null) {
        valueAxis = getDomainAxis(axisIndex.intValue());
    } else {
        valueAxis = getDomainAxis(0);
    }
    return valueAxis;
}","public void test129235() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    // Undeclared exception!
    try {
        combinedDomainXYPlot0.getDomainAxisForDataset((-1120));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Index -1120 out of bounds.
        //
        verifyException(""org.jfree.chart.plot.XYPlot"", e);
    }
}","/**
 * Returns the domain axis for a dataset.
 *
 * @param index  the dataset index.
 *
 * @return The axis.
 */"
"public ValueAxis getDomainAxisForDataset(int index) {
    if (index < 0 || index >= getDatasetCount()) {
        throw new IllegalArgumentException(""Index "" + index + "" out of bounds."");
    }
    ValueAxis valueAxis = null;
    Integer axisIndex = (Integer) this.datasetToDomainAxisMap.get(new Integer(index));
    if (axisIndex != null) {
        valueAxis = getDomainAxis(axisIndex.intValue());
    } else {
        valueAxis = getDomainAxis(0);
    }
    return valueAxis;
}","public void test130236() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    // Undeclared exception!
    try {
        combinedDomainXYPlot0.getDomainAxisForDataset(345);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Index 345 out of bounds.
        //
        verifyException(""org.jfree.chart.plot.XYPlot"", e);
    }
}","/**
 * Returns the domain axis for a dataset.
 *
 * @param index  the dataset index.
 *
 * @return The axis.
 */"
"public int getDatasetCount() {
    return this.datasets.size();
}","public void test131237() throws Throwable {
    TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1449.3398049104687));
    CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
    XYPlot xYPlot0 = new XYPlot(timeSeriesCollection0, cyclicNumberAxis0, cyclicNumberAxis0, cyclicXYItemRenderer0);
    xYPlot0.setDataset(500, (XYDataset) timeSeriesCollection0);
    xYPlot0.getDomainAxisForDataset(4);
    assertEquals(501, xYPlot0.getDatasetCount());
}","/**
 * Returns the number of datasets.
 *
 * @return The number of datasets.
 */"
"public ValueAxis getRangeAxisForDataset(int index) {
    if (index < 0 || index >= getDatasetCount()) {
        throw new IllegalArgumentException(""Index "" + index + "" out of bounds."");
    }
    ValueAxis valueAxis = null;
    Integer axisIndex = (Integer) this.datasetToRangeAxisMap.get(new Integer(index));
    if (axisIndex != null) {
        valueAxis = getRangeAxis(axisIndex.intValue());
    } else {
        valueAxis = getRangeAxis(0);
    }
    return valueAxis;
}","public void test132238() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    // Undeclared exception!
    try {
        combinedDomainXYPlot0.getRangeAxisForDataset((-2459));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Index -2459 out of bounds.
        //
        verifyException(""org.jfree.chart.plot.XYPlot"", e);
    }
}","/**
 * Returns the range axis for a dataset.
 *
 * @param index  the dataset index.
 *
 * @return The axis.
 */"
"public ValueAxis getRangeAxisForDataset(int index) {
    if (index < 0 || index >= getDatasetCount()) {
        throw new IllegalArgumentException(""Index "" + index + "" out of bounds."");
    }
    ValueAxis valueAxis = null;
    Integer axisIndex = (Integer) this.datasetToRangeAxisMap.get(new Integer(index));
    if (axisIndex != null) {
        valueAxis = getRangeAxis(axisIndex.intValue());
    } else {
        valueAxis = getRangeAxis(0);
    }
    return valueAxis;
}","public void test133239() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    // Undeclared exception!
    try {
        combinedDomainXYPlot0.getRangeAxisForDataset(255);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Index 255 out of bounds.
        //
        verifyException(""org.jfree.chart.plot.XYPlot"", e);
    }
}","/**
 * Returns the range axis for a dataset.
 *
 * @param index  the dataset index.
 *
 * @return The axis.
 */"
"public int getDatasetCount() {
    return this.datasets.size();
}","public void test134240() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
    combinedDomainXYPlot0.setDataset(4, (XYDataset) categoryTableXYDataset0);
    combinedDomainXYPlot0.getRangeAxisForDataset(3);
    assertEquals(5, combinedDomainXYPlot0.getDatasetCount());
}","/**
 * Returns the number of datasets.
 *
 * @return The number of datasets.
 */"
"public int getWeight() {
    return this.weight;
}","public void test135241() throws Throwable {
    DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
    XYLine3DRenderer xYLine3DRenderer0 = new XYLine3DRenderer();
    XYPlot xYPlot0 = new XYPlot(defaultXYZDataset0, (ValueAxis) null, (ValueAxis) null, xYLine3DRenderer0);
    BufferedImage bufferedImage0 = new BufferedImage(500, 979, 10);
    Graphics2D graphics2D0 = bufferedImage0.createGraphics();
    LinkedList<DefaultIntervalXYDataset> linkedList0 = new LinkedList<DefaultIntervalXYDataset>();
    xYPlot0.drawRangeGridlines(graphics2D0, (Rectangle2D) null, linkedList0);
    assertEquals(1, xYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test135242() throws Throwable {
    DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
    XYLine3DRenderer xYLine3DRenderer0 = new XYLine3DRenderer();
    XYPlot xYPlot0 = new XYPlot(defaultXYZDataset0, (ValueAxis) null, (ValueAxis) null, xYLine3DRenderer0);
    BufferedImage bufferedImage0 = new BufferedImage(500, 979, 10);
    Graphics2D graphics2D0 = bufferedImage0.createGraphics();
    LinkedList<DefaultIntervalXYDataset> linkedList0 = new LinkedList<DefaultIntervalXYDataset>();
    xYPlot0.drawRangeGridlines(graphics2D0, (Rectangle2D) null, linkedList0);
    assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public boolean isRangeGridlinesVisible() {
    return this.rangeGridlinesVisible;
}","public void test135243() throws Throwable {
    DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
    XYLine3DRenderer xYLine3DRenderer0 = new XYLine3DRenderer();
    XYPlot xYPlot0 = new XYPlot(defaultXYZDataset0, (ValueAxis) null, (ValueAxis) null, xYLine3DRenderer0);
    BufferedImage bufferedImage0 = new BufferedImage(500, 979, 10);
    Graphics2D graphics2D0 = bufferedImage0.createGraphics();
    LinkedList<DefaultIntervalXYDataset> linkedList0 = new LinkedList<DefaultIntervalXYDataset>();
    xYPlot0.drawRangeGridlines(graphics2D0, (Rectangle2D) null, linkedList0);
    assertTrue(xYPlot0.isRangeGridlinesVisible());
}","/**
 * Returns <code>true</code> if the range axis grid is visible, and
 * <code>false<code> otherwise.
 *
 * @return A boolean.
 *
 * @see #setRangeGridlinesVisible(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test137245() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    combinedDomainXYPlot0.getDomainMarkers(1944, (Layer) null);
    assertEquals(1, combinedDomainXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test137246() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    combinedDomainXYPlot0.getDomainMarkers(1944, (Layer) null);
    assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test137247() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    combinedDomainXYPlot0.getDomainMarkers(1944, (Layer) null);
    assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test138248() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    CategoryMarker categoryMarker0 = new CategoryMarker(1.0F);
    Layer layer0 = Layer.FOREGROUND;
    xYPlot0.addRangeMarker((-1088), (Marker) categoryMarker0, layer0, true);
    Collection collection0 = xYPlot0.getRangeMarkers((-1088), layer0);
    assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test138249() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    CategoryMarker categoryMarker0 = new CategoryMarker(1.0F);
    Layer layer0 = Layer.FOREGROUND;
    xYPlot0.addRangeMarker((-1088), (Marker) categoryMarker0, layer0, true);
    Collection collection0 = xYPlot0.getRangeMarkers((-1088), layer0);
    assertEquals(1, xYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public Collection getRangeMarkers(int index, Layer layer) {
    Collection result = null;
    Integer key = new Integer(index);
    if (layer == Layer.FOREGROUND) {
        result = (Collection) this.foregroundRangeMarkers.get(key);
    } else if (layer == Layer.BACKGROUND) {
        result = (Collection) this.backgroundRangeMarkers.get(key);
    }
    if (result != null) {
        result = Collections.unmodifiableCollection(result);
    }
    return result;
}","public void test138250() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    CategoryMarker categoryMarker0 = new CategoryMarker(1.0F);
    Layer layer0 = Layer.FOREGROUND;
    xYPlot0.addRangeMarker((-1088), (Marker) categoryMarker0, layer0, true);
    Collection collection0 = xYPlot0.getRangeMarkers((-1088), layer0);
    assertNotNull(collection0);
}","/**
 * Returns a collection of range markers for a particular renderer and
 * layer.
 *
 * @param index  the renderer index.
 * @param layer  the layer.
 *
 * @return A collection of markers (possibly <code>null</code>).
 *
 * @see #getDomainMarkers(int, Layer)
 */"
"protected void drawHorizontalLine(Graphics2D g2, Rectangle2D dataArea, double value, Stroke stroke, Paint paint) {
    ValueAxis axis = getRangeAxis();
    if (getOrientation() == PlotOrientation.HORIZONTAL) {
        axis = getDomainAxis();
    }
    if (axis.getRange().contains(value)) {
        double yy = axis.valueToJava2D(value, dataArea, RectangleEdge.LEFT);
        Line2D line = new Line2D.Double(dataArea.getMinX(), yy, dataArea.getMaxX(), yy);
        g2.setStroke(stroke);
        g2.setPaint(paint);
        g2.draw(line);
    }
}","public void test139251() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    DefaultCaret defaultCaret0 = new DefaultCaret();
    Color color0 = Color.YELLOW;
    Stroke stroke0 = combinedRangeXYPlot0.getDomainZeroBaselineStroke();
    // Undeclared exception!
    try {
        combinedRangeXYPlot0.drawHorizontalLine((Graphics2D) null, defaultCaret0, 0, stroke0, color0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jfree.chart.plot.XYPlot"", e);
    }
}","/**
 * Utility method for drawing a horizontal line across the data area of the
 * plot.
 *
 * @param g2  the graphics device.
 * @param dataArea  the data area.
 * @param value  the coordinate, where to draw the line.
 * @param stroke  the stroke to use.
 * @param paint  the paint to use.
 */"
"public int getWeight() {
    return this.weight;
}","public void test140252() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    ThermometerPlot thermometerPlot0 = new ThermometerPlot();
    DefaultCaret defaultCaret0 = new DefaultCaret();
    combinedRangeXYPlot0.drawHorizontalLine((Graphics2D) null, defaultCaret0, 2, thermometerPlot0.DEFAULT_OUTLINE_STROKE, thermometerPlot0.DEFAULT_OUTLINE_PAINT);
    assertEquals(1, combinedRangeXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test140253() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    ThermometerPlot thermometerPlot0 = new ThermometerPlot();
    DefaultCaret defaultCaret0 = new DefaultCaret();
    combinedRangeXYPlot0.drawHorizontalLine((Graphics2D) null, defaultCaret0, 2, thermometerPlot0.DEFAULT_OUTLINE_STROKE, thermometerPlot0.DEFAULT_OUTLINE_PAINT);
    assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test141254() throws Throwable {
    ThermometerPlot thermometerPlot0 = new ThermometerPlot();
    PlotOrientation plotOrientation0 = thermometerPlot0.getOrientation();
    LogAxis logAxis0 = new LogAxis(""{0}: ({1}, {2})"");
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
    combinedRangeXYPlot0.drawDomainCrosshair((Graphics2D) null, (Rectangle2D) null, plotOrientation0, 10, logAxis0, logAxis0.DEFAULT_AXIS_LINE_STROKE, logAxis0.DEFAULT_TICK_LABEL_PAINT);
    assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test141255() throws Throwable {
    ThermometerPlot thermometerPlot0 = new ThermometerPlot();
    PlotOrientation plotOrientation0 = thermometerPlot0.getOrientation();
    LogAxis logAxis0 = new LogAxis(""{0}: ({1}, {2})"");
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
    combinedRangeXYPlot0.drawDomainCrosshair((Graphics2D) null, (Rectangle2D) null, plotOrientation0, 10, logAxis0, logAxis0.DEFAULT_AXIS_LINE_STROKE, logAxis0.DEFAULT_TICK_LABEL_PAINT);
    assertEquals(1, combinedRangeXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test141256() throws Throwable {
    ThermometerPlot thermometerPlot0 = new ThermometerPlot();
    PlotOrientation plotOrientation0 = thermometerPlot0.getOrientation();
    LogAxis logAxis0 = new LogAxis(""{0}: ({1}, {2})"");
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
    combinedRangeXYPlot0.drawDomainCrosshair((Graphics2D) null, (Rectangle2D) null, plotOrientation0, 10, logAxis0, logAxis0.DEFAULT_AXIS_LINE_STROKE, logAxis0.DEFAULT_TICK_LABEL_PAINT);
    assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"protected void drawDomainCrosshair(Graphics2D g2, Rectangle2D dataArea, PlotOrientation orientation, double value, ValueAxis axis, Stroke stroke, Paint paint) {
    if (axis.getRange().contains(value)) {
        Line2D line = null;
        if (orientation == PlotOrientation.VERTICAL) {
            double xx = axis.valueToJava2D(value, dataArea, RectangleEdge.BOTTOM);
            line = new Line2D.Double(xx, dataArea.getMinY(), xx, dataArea.getMaxY());
        } else {
            double yy = axis.valueToJava2D(value, dataArea, RectangleEdge.LEFT);
            line = new Line2D.Double(dataArea.getMinX(), yy, dataArea.getMaxX(), yy);
        }
        g2.setStroke(stroke);
        g2.setPaint(paint);
        g2.draw(line);
    }
}","public void test142257() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F);
    BufferedImage bufferedImage0 = new BufferedImage(500, 235, 10);
    Graphics2D graphics2D0 = bufferedImage0.createGraphics();
    PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
    // Undeclared exception!
    try {
        combinedRangeXYPlot0.drawDomainCrosshair(graphics2D0, (Rectangle2D) null, plotOrientation0, 0.0, cyclicNumberAxis0, cyclicNumberAxis0.DEFAULT_TICK_MARK_STROKE, cyclicNumberAxis0.DEFAULT_AXIS_LABEL_PAINT);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jfree.chart.axis.CyclicNumberAxis"", e);
    }
}","/**
 * Draws a domain crosshair.
 *
 * @param g2  the graphics target.
 * @param dataArea  the data area.
 * @param orientation  the plot orientation.
 * @param value  the crosshair value.
 * @param axis  the axis against which the value is measured.
 * @param stroke  the stroke used to draw the crosshair line.
 * @param paint  the paint used to draw the crosshair line.
 *
 * @since 1.0.4
 */"
"protected void drawVerticalLine(Graphics2D g2, Rectangle2D dataArea, double value, Stroke stroke, Paint paint) {
    ValueAxis axis = getDomainAxis();
    if (getOrientation() == PlotOrientation.HORIZONTAL) {
        axis = getRangeAxis();
    }
    if (axis.getRange().contains(value)) {
        double xx = axis.valueToJava2D(value, dataArea, RectangleEdge.BOTTOM);
        Line2D line = new Line2D.Double(xx, dataArea.getMinY(), xx, dataArea.getMaxY());
        g2.setStroke(stroke);
        g2.setPaint(paint);
        g2.draw(line);
    }
}","public void test143258() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
    combinedRangeXYPlot0.setOrientation(plotOrientation0);
    // Undeclared exception!
    try {
        combinedRangeXYPlot0.drawVerticalLine((Graphics2D) null, (Rectangle2D) null, 1.0F, combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE, combinedRangeXYPlot0.DEFAULT_BACKGROUND_PAINT);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jfree.chart.axis.NumberAxis"", e);
    }
}","/**
 * Utility method for drawing a vertical line on the data area of the plot.
 *
 * @param g2  the graphics device.
 * @param dataArea  the data area.
 * @param value  the coordinate, where to draw the line.
 * @param stroke  the stroke to use.
 * @param paint  the paint to use.
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test144259() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    Rectangle rectangle0 = new Rectangle();
    BasicStroke basicStroke0 = (BasicStroke) XYPlot.DEFAULT_CROSSHAIR_STROKE;
    Color color0 = (Color) PeriodAxisLabelInfo.DEFAULT_LABEL_PAINT;
    combinedDomainXYPlot0.drawVerticalLine((Graphics2D) null, rectangle0, (-435.203067591), basicStroke0, color0);
    assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test144260() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    Rectangle rectangle0 = new Rectangle();
    BasicStroke basicStroke0 = (BasicStroke) XYPlot.DEFAULT_CROSSHAIR_STROKE;
    Color color0 = (Color) PeriodAxisLabelInfo.DEFAULT_LABEL_PAINT;
    combinedDomainXYPlot0.drawVerticalLine((Graphics2D) null, rectangle0, (-435.203067591), basicStroke0, color0);
    assertEquals(1, combinedDomainXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test144261() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    Rectangle rectangle0 = new Rectangle();
    BasicStroke basicStroke0 = (BasicStroke) XYPlot.DEFAULT_CROSSHAIR_STROKE;
    Color color0 = (Color) PeriodAxisLabelInfo.DEFAULT_LABEL_PAINT;
    combinedDomainXYPlot0.drawVerticalLine((Graphics2D) null, rectangle0, (-435.203067591), basicStroke0, color0);
    assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test145262() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
    PlotOrientation plotOrientation0 = fastScatterPlot0.getOrientation();
    PeriodAxis periodAxis0 = new PeriodAxis(""Z_ p$}NnIA"");
    combinedDomainXYPlot0.drawRangeCrosshair((Graphics2D) null, (Rectangle2D) null, plotOrientation0, 1.0F, periodAxis0, periodAxis0.DEFAULT_TICK_MARK_STROKE, periodAxis0.DEFAULT_AXIS_LABEL_PAINT);
    assertEquals(1, combinedDomainXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test145263() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
    PlotOrientation plotOrientation0 = fastScatterPlot0.getOrientation();
    PeriodAxis periodAxis0 = new PeriodAxis(""Z_ p$}NnIA"");
    combinedDomainXYPlot0.drawRangeCrosshair((Graphics2D) null, (Rectangle2D) null, plotOrientation0, 1.0F, periodAxis0, periodAxis0.DEFAULT_TICK_MARK_STROKE, periodAxis0.DEFAULT_AXIS_LABEL_PAINT);
    assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test146264() throws Throwable {
    String[] stringArray0 = new String[6];
    SymbolAxis symbolAxis0 = new SymbolAxis(""VD*UDSt"", stringArray0);
    XYAreaRenderer2 xYAreaRenderer2_0 = new XYAreaRenderer2();
    BufferedImage bufferedImage0 = new BufferedImage(500, 500, 10);
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    Graphics2D graphics2D0 = bufferedImage0.createGraphics();
    Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(1.0E-8, 1.0F, 3, 15);
    PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
    combinedDomainXYPlot0.drawRangeCrosshair(graphics2D0, rectangle2D_Double0, plotOrientation0, 0.05, symbolAxis0, xYAreaRenderer2_0.DEFAULT_OUTLINE_STROKE, combinedRangeXYPlot0.DEFAULT_BACKGROUND_PAINT);
    assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test146265() throws Throwable {
    String[] stringArray0 = new String[6];
    SymbolAxis symbolAxis0 = new SymbolAxis(""VD*UDSt"", stringArray0);
    XYAreaRenderer2 xYAreaRenderer2_0 = new XYAreaRenderer2();
    BufferedImage bufferedImage0 = new BufferedImage(500, 500, 10);
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    Graphics2D graphics2D0 = bufferedImage0.createGraphics();
    Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(1.0E-8, 1.0F, 3, 15);
    PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
    combinedDomainXYPlot0.drawRangeCrosshair(graphics2D0, rectangle2D_Double0, plotOrientation0, 0.05, symbolAxis0, xYAreaRenderer2_0.DEFAULT_OUTLINE_STROKE, combinedRangeXYPlot0.DEFAULT_BACKGROUND_PAINT);
    assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"protected void drawRangeCrosshair(Graphics2D g2, Rectangle2D dataArea, PlotOrientation orientation, double value, ValueAxis axis, Stroke stroke, Paint paint) {
    if (axis.getRange().contains(value)) {
        Line2D line = null;
        if (orientation == PlotOrientation.HORIZONTAL) {
            double xx = axis.valueToJava2D(value, dataArea, RectangleEdge.BOTTOM);
            line = new Line2D.Double(xx, dataArea.getMinY(), xx, dataArea.getMaxY());
        } else {
            double yy = axis.valueToJava2D(value, dataArea, RectangleEdge.LEFT);
            line = new Line2D.Double(dataArea.getMinX(), yy, dataArea.getMaxX(), yy);
        }
        g2.setStroke(stroke);
        g2.setPaint(paint);
        g2.draw(line);
    }
}","public void test147266() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    BorderLayout borderLayout0 = new BorderLayout(468, 4);
    byte[] byteArray0 = new byte[1];
    ImageIcon imageIcon0 = new ImageIcon(byteArray0, (String) null);
    JMenuItem jMenuItem0 = new JMenuItem(imageIcon0);
    Dimension dimension0 = borderLayout0.minimumLayoutSize(jMenuItem0);
    Rectangle rectangle0 = new Rectangle(dimension0);
    SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("")*}P<*X]s$["");
    CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(subCategoryAxis0);
    PlotOrientation plotOrientation0 = combinedDomainCategoryPlot0.getOrientation();
    NumberAxis3D numberAxis3D0 = new NumberAxis3D();
    // Undeclared exception!
    try {
        combinedRangeXYPlot0.drawRangeCrosshair((Graphics2D) null, rectangle0, plotOrientation0, 0.2, numberAxis3D0, combinedDomainCategoryPlot0.DEFAULT_GRIDLINE_STROKE, subCategoryAxis0.DEFAULT_TICK_MARK_PAINT);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jfree.chart.plot.XYPlot"", e);
    }
}","/**
 * Draws a range crosshair.
 *
 * @param g2  the graphics target.
 * @param dataArea  the data area.
 * @param orientation  the plot orientation.
 * @param value  the crosshair value.
 * @param axis  the axis against which the value is measured.
 * @param stroke  the stroke used to draw the crosshair line.
 * @param paint  the paint used to draw the crosshair line.
 *
 * @since 1.0.4
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test148267() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
    PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
    xYPlot0.handleClick(10, 10, plotRenderingInfo0);
    assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test148268() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
    PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
    xYPlot0.handleClick(10, 10, plotRenderingInfo0);
    assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public int getDomainAxisCount() {
    return this.domainAxes.size();
}","public void test149269() throws Throwable {
    TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1452.3506622));
    XYPlot xYPlot0 = new XYPlot();
    xYPlot0.setDomainAxis(2, (ValueAxis) cyclicNumberAxis0);
    xYPlot0.setDataset(500, (XYDataset) timeSeriesCollection0);
    assertEquals(3, xYPlot0.getDomainAxisCount());
}","/**
 * Returns the number of domain axes.
 *
 * @return The axis count.
 *
 * @see #getRangeAxisCount()
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test150270() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
    combinedRangeXYPlot0.setParent(spiderWebPlot0);
    DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
    DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(spiderWebPlot0, defaultCategoryDataset0);
    combinedRangeXYPlot0.datasetChanged(datasetChangeEvent0);
    assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test150271() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
    combinedRangeXYPlot0.setParent(spiderWebPlot0);
    DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
    DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(spiderWebPlot0, defaultCategoryDataset0);
    combinedRangeXYPlot0.datasetChanged(datasetChangeEvent0);
    assertEquals(1, combinedRangeXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test150272() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
    combinedRangeXYPlot0.setParent(spiderWebPlot0);
    DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
    DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(spiderWebPlot0, defaultCategoryDataset0);
    combinedRangeXYPlot0.datasetChanged(datasetChangeEvent0);
    assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test151273() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    combinedDomainXYPlot0.setDomainCrosshairVisible(false);
    assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test151274() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    combinedDomainXYPlot0.setDomainCrosshairVisible(false);
    assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test151275() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    combinedDomainXYPlot0.setDomainCrosshairVisible(false);
    assertEquals(1, combinedDomainXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test152276() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test152277() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    xYPlot0.setDomainCrosshairLockedOnData(true);
    assertEquals(1, xYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test152278() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    xYPlot0.setDomainCrosshairLockedOnData(true);
    assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test153280() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    xYPlot0.setDomainCrosshairLockedOnData(false);
    assertFalse(xYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public boolean isDomainCrosshairVisible() {
    return this.domainCrosshairVisible;
}","public void test154281() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.9613068442834365, 1.9613068442834365);
    XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer(500);
    HistogramDataset histogramDataset0 = new HistogramDataset();
    XYPlot xYPlot0 = new XYPlot(histogramDataset0, cyclicNumberAxis0, cyclicNumberAxis0, xYAreaRenderer0);
    xYPlot0.setDomainCrosshairVisible(true);
    xYPlot0.setDomainCrosshairValue(1759.407012544, true);
    assertTrue(xYPlot0.isDomainCrosshairVisible());
}","/**
 * Returns a flag indicating whether or not the domain crosshair is visible.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairVisible(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test155282() throws Throwable {
    XYAreaRenderer2 xYAreaRenderer2_0 = new XYAreaRenderer2();
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    combinedRangeXYPlot0.setDomainCrosshairStroke(xYAreaRenderer2_0.DEFAULT_STROKE);
    assertEquals(1, combinedRangeXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test155283() throws Throwable {
    XYAreaRenderer2 xYAreaRenderer2_0 = new XYAreaRenderer2();
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    combinedRangeXYPlot0.setDomainCrosshairStroke(xYAreaRenderer2_0.DEFAULT_STROKE);
    assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public void setDomainCrosshairStroke(Stroke stroke) {
    if (stroke == null) {
        throw new IllegalArgumentException(""Null 'stroke' argument."");
    }
    this.domainCrosshairStroke = stroke;
    fireChangeEvent();
}","public void test156284() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    // Undeclared exception!
    try {
        combinedDomainXYPlot0.setDomainCrosshairStroke((Stroke) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'stroke' argument.
        //
        verifyException(""org.jfree.chart.plot.XYPlot"", e);
    }
}","/**
 * Sets the Stroke used to draw the crosshairs (if visible) and notifies
 * registered listeners that the axis has been modified.
 *
 * @param stroke  the new crosshair stroke (<code>null</code> not
 *     permitted).
 *
 * @see #getDomainCrosshairStroke()
 */"
"public void setDomainCrosshairPaint(Paint paint) {
    if (paint == null) {
        throw new IllegalArgumentException(""Null 'paint' argument."");
    }
    this.domainCrosshairPaint = paint;
    fireChangeEvent();
}","public void test157285() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    // Undeclared exception!
    try {
        combinedDomainXYPlot0.setDomainCrosshairPaint((Paint) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'paint' argument.
        //
        verifyException(""org.jfree.chart.plot.XYPlot"", e);
    }
}","/**
 * Sets the paint used to draw the crosshairs (if visible) and sends a
 * {@link PlotChangeEvent} to all registered listeners.
 *
 * @param paint the new crosshair paint (<code>null</code> not permitted).
 *
 * @see #getDomainCrosshairPaint()
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test158286() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    combinedRangeXYPlot0.setRangeCrosshairVisible(false);
    assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test158287() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    combinedRangeXYPlot0.setRangeCrosshairVisible(false);
    assertEquals(1, combinedRangeXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test158288() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    combinedRangeXYPlot0.setRangeCrosshairVisible(false);
    assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public double getRangeCrosshairValue() {
    return this.rangeCrosshairValue;
}","public void test159289() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    combinedDomainXYPlot0.setRangeCrosshairVisible(true);
    combinedDomainXYPlot0.setRangeCrosshairValue((double) 2.0F, true);
    assertEquals(2.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
}","/**
 * Returns the range crosshair value.
 *
 * @return The value.
 *
 * @see #setRangeCrosshairValue(double)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test160290() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(9.17284099856);
    XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer(500);
    HistogramDataset histogramDataset0 = new HistogramDataset();
    XYPlot xYPlot0 = new XYPlot(histogramDataset0, cyclicNumberAxis0, cyclicNumberAxis0, xYAreaRenderer0);
    assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test160291() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(9.17284099856);
    XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer(500);
    HistogramDataset histogramDataset0 = new HistogramDataset();
    XYPlot xYPlot0 = new XYPlot(histogramDataset0, cyclicNumberAxis0, cyclicNumberAxis0, xYAreaRenderer0);
    xYPlot0.setRangeCrosshairLockedOnData(true);
    assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public double getRangeCrosshairValue() {
    return this.rangeCrosshairValue;
}","public void test161292() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    combinedDomainXYPlot0.setRangeCrosshairVisible(true);
    combinedDomainXYPlot0.setRangeCrosshairValue((-411.2747621676), false);
    assertEquals((-411.2747621676), combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
}","/**
 * Returns the range crosshair value.
 *
 * @return The value.
 *
 * @see #setRangeCrosshairValue(double)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test162293() throws Throwable {
    YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
    String[] stringArray0 = new String[6];
    SymbolAxis symbolAxis0 = new SymbolAxis(""VD*UDSt"", stringArray0);
    XYAreaRenderer2 xYAreaRenderer2_0 = new XYAreaRenderer2();
    XYPlot xYPlot0 = new XYPlot(yIntervalSeriesCollection0, symbolAxis0, symbolAxis0, xYAreaRenderer2_0);
    xYPlot0.setRangeCrosshairStroke(xYAreaRenderer2_0.DEFAULT_OUTLINE_STROKE);
    assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test162294() throws Throwable {
    YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
    String[] stringArray0 = new String[6];
    SymbolAxis symbolAxis0 = new SymbolAxis(""VD*UDSt"", stringArray0);
    XYAreaRenderer2 xYAreaRenderer2_0 = new XYAreaRenderer2();
    XYPlot xYPlot0 = new XYPlot(yIntervalSeriesCollection0, symbolAxis0, symbolAxis0, xYAreaRenderer2_0);
    xYPlot0.setRangeCrosshairStroke(xYAreaRenderer2_0.DEFAULT_OUTLINE_STROKE);
    assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public void setRangeCrosshairStroke(Stroke stroke) {
    if (stroke == null) {
        throw new IllegalArgumentException(""Null 'stroke' argument."");
    }
    this.rangeCrosshairStroke = stroke;
    fireChangeEvent();
}","public void test163295() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    // Undeclared exception!
    try {
        combinedDomainXYPlot0.setRangeCrosshairStroke((Stroke) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'stroke' argument.
        //
        verifyException(""org.jfree.chart.plot.XYPlot"", e);
    }
}","/**
 * Sets the stroke used to draw the crosshairs (if visible) and sends a
 * {@link PlotChangeEvent} to all registered listeners.
 *
 * @param stroke  the new crosshair stroke (<code>null</code> not
 *         permitted).
 *
 * @see #getRangeCrosshairStroke()
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test164296() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    Color color0 = (Color) SpiderWebPlot.DEFAULT_LABEL_BACKGROUND_PAINT;
    combinedDomainXYPlot0.setRangeCrosshairPaint(color0);
    assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test164297() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    Color color0 = (Color) SpiderWebPlot.DEFAULT_LABEL_BACKGROUND_PAINT;
    combinedDomainXYPlot0.setRangeCrosshairPaint(color0);
    assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test164298() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    Color color0 = (Color) SpiderWebPlot.DEFAULT_LABEL_BACKGROUND_PAINT;
    combinedDomainXYPlot0.setRangeCrosshairPaint(color0);
    assertEquals(1, combinedDomainXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public void setRangeCrosshairPaint(Paint paint) {
    if (paint == null) {
        throw new IllegalArgumentException(""Null 'paint' argument."");
    }
    this.rangeCrosshairPaint = paint;
    fireChangeEvent();
}","public void test165299() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    // Undeclared exception!
    try {
        combinedDomainXYPlot0.setRangeCrosshairPaint((Paint) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'paint' argument.
        //
        verifyException(""org.jfree.chart.plot.XYPlot"", e);
    }
}","/**
 * Sets the paint used to color the crosshairs (if visible) and sends a
 * {@link PlotChangeEvent} to all registered listeners.
 *
 * @param paint the new crosshair paint (<code>null</code> not permitted).
 *
 * @see #getRangeCrosshairPaint()
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test166300() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    combinedDomainXYPlot0.setFixedDomainAxisSpace((AxisSpace) null, false);
    assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test166301() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    combinedDomainXYPlot0.setFixedDomainAxisSpace((AxisSpace) null, false);
    assertEquals(1, combinedDomainXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test166302() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    combinedDomainXYPlot0.setFixedDomainAxisSpace((AxisSpace) null, false);
    assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test167303() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    combinedDomainXYPlot0.setFixedRangeAxisSpace((AxisSpace) null, false);
    assertEquals(1, combinedDomainXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test167304() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    combinedDomainXYPlot0.setFixedRangeAxisSpace((AxisSpace) null, false);
    assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public int getDomainAxisCount() {
    return this.domainAxes.size();
}","public void test168305() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    Point point0 = new Point(10, 10);
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, 10, (String) null);
    combinedRangeXYPlot0.setDomainAxis(10, (ValueAxis) cyclicNumberAxis0);
    PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
    combinedRangeXYPlot0.zoomDomainAxes((-1129.3725111716747), plotRenderingInfo0, (Point2D) point0, true);
    assertEquals(11, combinedRangeXYPlot0.getDomainAxisCount());
}","/**
 * Returns the number of domain axes.
 *
 * @return The axis count.
 *
 * @see #getRangeAxisCount()
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test169306() throws Throwable {
    Point point0 = new Point();
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    combinedDomainXYPlot0.zoomDomainAxes((double) 0, (PlotRenderingInfo) null, (Point2D) point0, false);
    assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test169307() throws Throwable {
    Point point0 = new Point();
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    combinedDomainXYPlot0.zoomDomainAxes((double) 0, (PlotRenderingInfo) null, (Point2D) point0, false);
    assertEquals(1, combinedDomainXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public void zoomDomainAxes(double factor, PlotRenderingInfo info, Point2D source, boolean useAnchor) {
    // perform the zoom on each domain axis
    for (int i = 0; i < this.domainAxes.size(); i++) {
        ValueAxis domainAxis = (ValueAxis) this.domainAxes.get(i);
        if (domainAxis != null) {
            if (useAnchor) {
                // get the relevant source coordinate given the plot
                // orientation
                double sourceX = source.getX();
                if (this.orientation == PlotOrientation.HORIZONTAL) {
                    sourceX = source.getY();
                }
                double anchorX = domainAxis.java2DToValue(sourceX, info.getDataArea(), getDomainAxisEdge());
                domainAxis.resizeRange(factor, anchorX);
            } else {
                domainAxis.resizeRange(factor);
            }
        }
    }
}","public void test170308() throws Throwable {
    Point point0 = new Point();
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
    combinedDomainXYPlot0.setOrientation(plotOrientation0);
    // Undeclared exception!
    try {
        combinedDomainXYPlot0.zoomDomainAxes((double) 0, (PlotRenderingInfo) null, (Point2D) point0, true);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jfree.chart.plot.XYPlot"", e);
    }
}","/**
 * Multiplies the range on the domain axis/axes by the specified factor.
 *
 * @param factor  the zoom factor.
 * @param info  the plot rendering info.
 * @param source  the source point (in Java2D space).
 * @param useAnchor  use source point as zoom anchor?
 *
 * @see #zoomRangeAxes(double, PlotRenderingInfo, Point2D, boolean)
 *
 * @since 1.0.7
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test171309() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
    PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
    Point2D.Double point2D_Double0 = new Point2D.Double();
    combinedDomainXYPlot0.zoomDomainAxes((-3959.811535), 0.4, plotRenderingInfo0, (Point2D) point2D_Double0);
    assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test171310() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
    PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
    Point2D.Double point2D_Double0 = new Point2D.Double();
    combinedDomainXYPlot0.zoomDomainAxes((-3959.811535), 0.4, plotRenderingInfo0, (Point2D) point2D_Double0);
    assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test171311() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
    PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
    Point2D.Double point2D_Double0 = new Point2D.Double();
    combinedDomainXYPlot0.zoomDomainAxes((-3959.811535), 0.4, plotRenderingInfo0, (Point2D) point2D_Double0);
    assertEquals(1, combinedDomainXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test172312() throws Throwable {
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
    PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
    GridBagLayout gridBagLayout0 = new GridBagLayout();
    Point point0 = gridBagLayout0.location(10, (-4139));
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
    combinedDomainXYPlot0.zoomDomainAxes((double) 1.0F, 1523.770865133526, plotRenderingInfo0, (Point2D) point0);
    assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test172313() throws Throwable {
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
    PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
    GridBagLayout gridBagLayout0 = new GridBagLayout();
    Point point0 = gridBagLayout0.location(10, (-4139));
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
    combinedDomainXYPlot0.zoomDomainAxes((double) 1.0F, 1523.770865133526, plotRenderingInfo0, (Point2D) point0);
    assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test173314() throws Throwable {
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
    XYPlot xYPlot0 = new XYPlot();
    PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
    Point2D.Float point2D_Float0 = new Point2D.Float();
    xYPlot0.zoomRangeAxes((-3040.783315968), plotRenderingInfo0, (Point2D) point2D_Float0, true);
    assertEquals(1, xYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test173315() throws Throwable {
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
    XYPlot xYPlot0 = new XYPlot();
    PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
    Point2D.Float point2D_Float0 = new Point2D.Float();
    xYPlot0.zoomRangeAxes((-3040.783315968), plotRenderingInfo0, (Point2D) point2D_Float0, true);
    assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public void zoomRangeAxes(double factor, PlotRenderingInfo info, Point2D source, boolean useAnchor) {
    // perform the zoom on each range axis
    for (int i = 0; i < this.rangeAxes.size(); i++) {
        ValueAxis rangeAxis = (ValueAxis) this.rangeAxes.get(i);
        if (rangeAxis != null) {
            if (useAnchor) {
                // get the relevant source coordinate given the plot
                // orientation
                double sourceY = source.getY();
                if (this.orientation == PlotOrientation.HORIZONTAL) {
                    sourceY = source.getX();
                }
                double anchorY = rangeAxis.java2DToValue(sourceY, info.getDataArea(), getRangeAxisEdge());
                rangeAxis.resizeRange(factor, anchorY);
            } else {
                rangeAxis.resizeRange(factor);
            }
        }
    }
}","public void test174316() throws Throwable {
    Point point0 = new Point();
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    // Undeclared exception!
    try {
        combinedRangeXYPlot0.zoomRangeAxes((double) 0, (PlotRenderingInfo) null, (Point2D) point0, true);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jfree.chart.plot.XYPlot"", e);
    }
}","/**
 * Multiplies the range on the range axis/axes by the specified factor.
 *
 * @param factor  the zoom factor.
 * @param info  the plot rendering info.
 * @param source  the source point.
 * @param useAnchor  a flag that controls whether or not the source point
 *         is used for the zoom anchor.
 *
 * @see #zoomDomainAxes(double, PlotRenderingInfo, Point2D, boolean)
 *
 * @since 1.0.7
 */"
"public void zoomRangeAxes(double factor, PlotRenderingInfo info, Point2D source, boolean useAnchor) {
    // perform the zoom on each range axis
    for (int i = 0; i < this.rangeAxes.size(); i++) {
        ValueAxis rangeAxis = (ValueAxis) this.rangeAxes.get(i);
        if (rangeAxis != null) {
            if (useAnchor) {
                // get the relevant source coordinate given the plot
                // orientation
                double sourceY = source.getY();
                if (this.orientation == PlotOrientation.HORIZONTAL) {
                    sourceY = source.getX();
                }
                double anchorY = rangeAxis.java2DToValue(sourceY, info.getDataArea(), getRangeAxisEdge());
                rangeAxis.resizeRange(factor, anchorY);
            } else {
                rangeAxis.resizeRange(factor);
            }
        }
    }
}","public void test175317() throws Throwable {
    Point point0 = new Point();
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
    combinedRangeXYPlot0.setOrientation(plotOrientation0);
    // Undeclared exception!
    try {
        combinedRangeXYPlot0.zoomRangeAxes((double) 0, (PlotRenderingInfo) null, (Point2D) point0, true);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jfree.chart.plot.XYPlot"", e);
    }
}","/**
 * Multiplies the range on the range axis/axes by the specified factor.
 *
 * @param factor  the zoom factor.
 * @param info  the plot rendering info.
 * @param source  the source point.
 * @param useAnchor  a flag that controls whether or not the source point
 *         is used for the zoom anchor.
 *
 * @see #zoomDomainAxes(double, PlotRenderingInfo, Point2D, boolean)
 *
 * @since 1.0.7
 */"
"public int getWeight() {
    return this.weight;
}","public void test176318() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
    PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
    Arc2D.Double arc2D_Double0 = new Arc2D.Double();
    Point2D point2D0 = arc2D_Double0.getStartPoint();
    xYPlot0.zoomRangeAxes(419.976, 386.30961646692634, plotRenderingInfo0, point2D0);
    assertEquals(1, xYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test176319() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
    PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
    Arc2D.Double arc2D_Double0 = new Arc2D.Double();
    Point2D point2D0 = arc2D_Double0.getStartPoint();
    xYPlot0.zoomRangeAxes(419.976, 386.30961646692634, plotRenderingInfo0, point2D0);
    assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test176320() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
    PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
    Arc2D.Double arc2D_Double0 = new Arc2D.Double();
    Point2D point2D0 = arc2D_Double0.getStartPoint();
    xYPlot0.zoomRangeAxes(419.976, 386.30961646692634, plotRenderingInfo0, point2D0);
    assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public void zoomRangeAxes(double lowerPercent, double upperPercent, PlotRenderingInfo info, Point2D source) {
    for (int i = 0; i < this.rangeAxes.size(); i++) {
        ValueAxis rangeAxis = (ValueAxis) this.rangeAxes.get(i);
        if (rangeAxis != null) {
            rangeAxis.zoomRange(lowerPercent, upperPercent);
        }
    }
}","public void test177321() throws Throwable {
    Point point0 = new Point();
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
    PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
    // Undeclared exception!
    try {
        combinedRangeXYPlot0.zoomRangeAxes(481.0, 1.0E-5, plotRenderingInfo0, (Point2D) point0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Range(double, double): require lower (505.05) <= upper (1.0500000000000001E-5).
        //
        verifyException(""org.jfree.data.Range"", e);
    }
}","/**
 * Zooms in on the range axes.
 *
 * @param lowerPercent  the lower bound.
 * @param upperPercent  the upper bound.
 * @param info  the plot rendering info.
 * @param source  the source point.
 *
 * @see #zoomDomainAxes(double, double, PlotRenderingInfo, Point2D)
 */"
"public int getWeight() {
    return this.weight;
}","public void test178322() throws Throwable {
    ThermometerPlot thermometerPlot0 = new ThermometerPlot();
    ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
    SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(3);
    StackedXYAreaRenderer2 stackedXYAreaRenderer2_0 = new StackedXYAreaRenderer2();
    XYPlot xYPlot0 = new XYPlot(simpleHistogramDataset0, valueAxis0, valueAxis0, stackedXYAreaRenderer2_0);
    int int0 = xYPlot0.getSeriesCount();
    assertEquals(1, xYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test178323() throws Throwable {
    ThermometerPlot thermometerPlot0 = new ThermometerPlot();
    ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
    SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(3);
    StackedXYAreaRenderer2 stackedXYAreaRenderer2_0 = new StackedXYAreaRenderer2();
    XYPlot xYPlot0 = new XYPlot(simpleHistogramDataset0, valueAxis0, valueAxis0, stackedXYAreaRenderer2_0);
    int int0 = xYPlot0.getSeriesCount();
    assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public int getSeriesCount() {
    int result = 0;
    XYDataset dataset = getDataset();
    if (dataset != null) {
        result = dataset.getSeriesCount();
    }
    return result;
}","public void test178324() throws Throwable {
    ThermometerPlot thermometerPlot0 = new ThermometerPlot();
    ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
    SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(3);
    StackedXYAreaRenderer2 stackedXYAreaRenderer2_0 = new StackedXYAreaRenderer2();
    XYPlot xYPlot0 = new XYPlot(simpleHistogramDataset0, valueAxis0, valueAxis0, stackedXYAreaRenderer2_0);
    int int0 = xYPlot0.getSeriesCount();
    assertEquals(1, int0);
}","/**
 * Returns the number of series in the primary dataset for this plot.  If
 * the dataset is <code>null</code>, the method returns 0.
 *
 * @return The series count.
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test179325() throws Throwable {
    SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(1.0F);
    StackedXYAreaRenderer2 stackedXYAreaRenderer2_0 = new StackedXYAreaRenderer2();
    XYPlot xYPlot0 = new XYPlot(simpleHistogramDataset0, (ValueAxis) null, (ValueAxis) null, stackedXYAreaRenderer2_0);
    MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
    LegendItemCollection legendItemCollection0 = multiplePiePlot0.getLegendItems();
    xYPlot0.setFixedLegendItems(legendItemCollection0);
    xYPlot0.getLegendItems();
    assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test179326() throws Throwable {
    SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(1.0F);
    StackedXYAreaRenderer2 stackedXYAreaRenderer2_0 = new StackedXYAreaRenderer2();
    XYPlot xYPlot0 = new XYPlot(simpleHistogramDataset0, (ValueAxis) null, (ValueAxis) null, stackedXYAreaRenderer2_0);
    MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
    LegendItemCollection legendItemCollection0 = multiplePiePlot0.getLegendItems();
    xYPlot0.setFixedLegendItems(legendItemCollection0);
    xYPlot0.getLegendItems();
    assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public LegendItemCollection getLegendItems() {
    if (this.fixedLegendItems != null) {
        return this.fixedLegendItems;
    }
    LegendItemCollection result = new LegendItemCollection();
    int count = this.datasets.size();
    for (int datasetIndex = 0; datasetIndex < count; datasetIndex++) {
        XYDataset dataset = getDataset(datasetIndex);
        if (dataset != null) {
            XYItemRenderer renderer = getRenderer(datasetIndex);
            if (renderer == null) {
                renderer = getRenderer(0);
            }
            if (renderer != null) {
                int seriesCount = dataset.getSeriesCount();
                for (int i = 0; i < seriesCount; i++) {
                    if (renderer.isSeriesVisible(i) && renderer.isSeriesVisibleInLegend(i)) {
                        LegendItem item = renderer.getLegendItem(datasetIndex, i);
                        if (item != null) {
                            result.add(item);
                        }
                    }
                }
            }
        }
    }
    return result;
}","public void test180327() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(1.0F);
    StackedXYAreaRenderer2 stackedXYAreaRenderer2_0 = new StackedXYAreaRenderer2();
    XYPlot xYPlot0 = new XYPlot(simpleHistogramDataset0, (ValueAxis) null, (ValueAxis) null, stackedXYAreaRenderer2_0);
    combinedDomainXYPlot0.setRenderer(10, (XYItemRenderer) stackedXYAreaRenderer2_0, false);
    LegendItemCollection legendItemCollection0 = xYPlot0.getLegendItems();
    assertNotNull(legendItemCollection0);
}","/**
 * Returns the legend items for the plot.  Each legend item is generated by
 * the plot's renderer, since the renderer is responsible for the visual
 * representation of the data.
 *
 * @return The legend items.
 */"
"public int getWeight() {
    return this.weight;
}","public void test180328() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(1.0F);
    StackedXYAreaRenderer2 stackedXYAreaRenderer2_0 = new StackedXYAreaRenderer2();
    XYPlot xYPlot0 = new XYPlot(simpleHistogramDataset0, (ValueAxis) null, (ValueAxis) null, stackedXYAreaRenderer2_0);
    combinedDomainXYPlot0.setRenderer(10, (XYItemRenderer) stackedXYAreaRenderer2_0, false);
    LegendItemCollection legendItemCollection0 = xYPlot0.getLegendItems();
    assertEquals(1, xYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test180329() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(1.0F);
    StackedXYAreaRenderer2 stackedXYAreaRenderer2_0 = new StackedXYAreaRenderer2();
    XYPlot xYPlot0 = new XYPlot(simpleHistogramDataset0, (ValueAxis) null, (ValueAxis) null, stackedXYAreaRenderer2_0);
    combinedDomainXYPlot0.setRenderer(10, (XYItemRenderer) stackedXYAreaRenderer2_0, false);
    LegendItemCollection legendItemCollection0 = xYPlot0.getLegendItems();
    assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public int getItemCount() {
    return this.items.size();
}","public void test180330() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(1.0F);
    StackedXYAreaRenderer2 stackedXYAreaRenderer2_0 = new StackedXYAreaRenderer2();
    XYPlot xYPlot0 = new XYPlot(simpleHistogramDataset0, (ValueAxis) null, (ValueAxis) null, stackedXYAreaRenderer2_0);
    combinedDomainXYPlot0.setRenderer(10, (XYItemRenderer) stackedXYAreaRenderer2_0, false);
    LegendItemCollection legendItemCollection0 = xYPlot0.getLegendItems();
    assertEquals(0, legendItemCollection0.getItemCount());
}","/**
 * Returns the number of legend items in the collection.
 *
 * @return The item count.
 */"
"public int getDomainAxisCount() {
    return this.domainAxes.size();
}","public void test181331() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, 10, (String) null);
    combinedRangeXYPlot0.setDomainAxis(10, (ValueAxis) cyclicNumberAxis0);
    DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
    XYPlot xYPlot0 = new XYPlot(defaultTableXYDataset0, cyclicNumberAxis0, cyclicNumberAxis0, (XYItemRenderer) null);
    combinedRangeXYPlot0.setDomainAxis(10, (ValueAxis) cyclicNumberAxis0);
    assertEquals(11, combinedRangeXYPlot0.getDomainAxisCount());
}","/**
 * Returns the number of domain axes.
 *
 * @return The axis count.
 *
 * @see #getRangeAxisCount()
 */"
"public int getWeight() {
    return this.weight;
}","public void test182332() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    LegendItemCollection legendItemCollection0 = xYPlot0.getLegendItems();
    boolean boolean0 = xYPlot0.equals(legendItemCollection0);
    assertEquals(1, xYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test182333() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    LegendItemCollection legendItemCollection0 = xYPlot0.getLegendItems();
    boolean boolean0 = xYPlot0.equals(legendItemCollection0);
    assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYPlot)) {
        return false;
    }
    XYPlot that = (XYPlot) obj;
    if (this.weight != that.weight) {
        return false;
    }
    if (this.orientation != that.orientation) {
        return false;
    }
    if (!this.domainAxes.equals(that.domainAxes)) {
        return false;
    }
    if (!this.domainAxisLocations.equals(that.domainAxisLocations)) {
        return false;
    }
    if (this.rangeCrosshairLockedOnData != that.rangeCrosshairLockedOnData) {
        return false;
    }
    if (this.domainGridlinesVisible != that.domainGridlinesVisible) {
        return false;
    }
    if (this.rangeGridlinesVisible != that.rangeGridlinesVisible) {
        return false;
    }
    if (this.domainZeroBaselineVisible != that.domainZeroBaselineVisible) {
        return false;
    }
    if (this.rangeZeroBaselineVisible != that.rangeZeroBaselineVisible) {
        return false;
    }
    if (this.domainCrosshairVisible != that.domainCrosshairVisible) {
        return false;
    }
    if (this.domainCrosshairValue != that.domainCrosshairValue) {
        return false;
    }
    if (this.domainCrosshairLockedOnData != that.domainCrosshairLockedOnData) {
        return false;
    }
    if (this.rangeCrosshairVisible != that.rangeCrosshairVisible) {
        return false;
    }
    if (this.rangeCrosshairValue != that.rangeCrosshairValue) {
        return false;
    }
    if (!ObjectUtilities.equal(this.axisOffset, that.axisOffset)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.renderers, that.renderers)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.rangeAxes, that.rangeAxes)) {
        return false;
    }
    if (!this.rangeAxisLocations.equals(that.rangeAxisLocations)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.datasetToDomainAxisMap, that.datasetToDomainAxisMap)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.datasetToRangeAxisMap, that.datasetToRangeAxisMap)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.domainGridlineStroke, that.domainGridlineStroke)) {
        return false;
    }
    if (!PaintUtilities.equal(this.domainGridlinePaint, that.domainGridlinePaint)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.rangeGridlineStroke, that.rangeGridlineStroke)) {
        return false;
    }
    if (!PaintUtilities.equal(this.rangeGridlinePaint, that.rangeGridlinePaint)) {
        return false;
    }
    if (!PaintUtilities.equal(this.domainZeroBaselinePaint, that.domainZeroBaselinePaint)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.domainZeroBaselineStroke, that.domainZeroBaselineStroke)) {
        return false;
    }
    if (!PaintUtilities.equal(this.rangeZeroBaselinePaint, that.rangeZeroBaselinePaint)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.rangeZeroBaselineStroke, that.rangeZeroBaselineStroke)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.domainCrosshairStroke, that.domainCrosshairStroke)) {
        return false;
    }
    if (!PaintUtilities.equal(this.domainCrosshairPaint, that.domainCrosshairPaint)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.rangeCrosshairStroke, that.rangeCrosshairStroke)) {
        return false;
    }
    if (!PaintUtilities.equal(this.rangeCrosshairPaint, that.rangeCrosshairPaint)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.foregroundDomainMarkers, that.foregroundDomainMarkers)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.backgroundDomainMarkers, that.backgroundDomainMarkers)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.foregroundRangeMarkers, that.foregroundRangeMarkers)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.backgroundRangeMarkers, that.backgroundRangeMarkers)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.foregroundDomainMarkers, that.foregroundDomainMarkers)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.backgroundDomainMarkers, that.backgroundDomainMarkers)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.foregroundRangeMarkers, that.foregroundRangeMarkers)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.backgroundRangeMarkers, that.backgroundRangeMarkers)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.annotations, that.annotations)) {
        return false;
    }
    if (!PaintUtilities.equal(this.domainTickBandPaint, that.domainTickBandPaint)) {
        return false;
    }
    if (!PaintUtilities.equal(this.rangeTickBandPaint, that.rangeTickBandPaint)) {
        return false;
    }
    if (!this.quadrantOrigin.equals(that.quadrantOrigin)) {
        return false;
    }
    for (int i = 0; i < 4; i++) {
        if (!PaintUtilities.equal(this.quadrantPaint[i], that.quadrantPaint[i])) {
            return false;
        }
    }
    return super.equals(obj);
}","public void test182334() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    LegendItemCollection legendItemCollection0 = xYPlot0.getLegendItems();
    boolean boolean0 = xYPlot0.equals(legendItemCollection0);
    assertFalse(boolean0);
}","/**
 * Tests this plot for equality with another object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return <code>true</code> or <code>false</code>.
 */"
"public int getWeight() {
    return this.weight;
}","public void test183335() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    CombinedRangeXYPlot combinedRangeXYPlot1 = (CombinedRangeXYPlot) combinedRangeXYPlot0.clone();
    assertEquals(1, combinedRangeXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public int getWeight() {
    return this.weight;
}","public void test183336() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    CombinedRangeXYPlot combinedRangeXYPlot1 = (CombinedRangeXYPlot) combinedRangeXYPlot0.clone();
    combinedRangeXYPlot1.add((XYPlot) combinedRangeXYPlot0, 10);
    combinedRangeXYPlot0.equals(combinedRangeXYPlot1);
    assertEquals(1, combinedRangeXYPlot1.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test184337() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    CombinedRangeXYPlot combinedRangeXYPlot1 = (CombinedRangeXYPlot) combinedRangeXYPlot0.clone();
    boolean boolean0 = combinedRangeXYPlot1.equals(combinedRangeXYPlot0);
    assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test184338() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    CombinedRangeXYPlot combinedRangeXYPlot1 = (CombinedRangeXYPlot) combinedRangeXYPlot0.clone();
    boolean boolean0 = combinedRangeXYPlot1.equals(combinedRangeXYPlot0);
    assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof CombinedRangeXYPlot)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    CombinedRangeXYPlot that = (CombinedRangeXYPlot) obj;
    if (!ObjectUtilities.equal(this.subplots, that.subplots)) {
        return false;
    }
    if (this.totalWeight != that.totalWeight) {
        return false;
    }
    if (this.gap != that.gap) {
        return false;
    }
    return true;
}","public void test184339() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    CombinedRangeXYPlot combinedRangeXYPlot1 = (CombinedRangeXYPlot) combinedRangeXYPlot0.clone();
    boolean boolean0 = combinedRangeXYPlot1.equals(combinedRangeXYPlot0);
    assertTrue(boolean0);
}","/**
 * Tests this plot for equality with another object.
 *
 * @param obj  the other object.
 *
 * @return <code>true</code> or <code>false</code>.
 */"
"public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYPlot)) {
        return false;
    }
    XYPlot that = (XYPlot) obj;
    if (this.weight != that.weight) {
        return false;
    }
    if (this.orientation != that.orientation) {
        return false;
    }
    if (!this.domainAxes.equals(that.domainAxes)) {
        return false;
    }
    if (!this.domainAxisLocations.equals(that.domainAxisLocations)) {
        return false;
    }
    if (this.rangeCrosshairLockedOnData != that.rangeCrosshairLockedOnData) {
        return false;
    }
    if (this.domainGridlinesVisible != that.domainGridlinesVisible) {
        return false;
    }
    if (this.rangeGridlinesVisible != that.rangeGridlinesVisible) {
        return false;
    }
    if (this.domainZeroBaselineVisible != that.domainZeroBaselineVisible) {
        return false;
    }
    if (this.rangeZeroBaselineVisible != that.rangeZeroBaselineVisible) {
        return false;
    }
    if (this.domainCrosshairVisible != that.domainCrosshairVisible) {
        return false;
    }
    if (this.domainCrosshairValue != that.domainCrosshairValue) {
        return false;
    }
    if (this.domainCrosshairLockedOnData != that.domainCrosshairLockedOnData) {
        return false;
    }
    if (this.rangeCrosshairVisible != that.rangeCrosshairVisible) {
        return false;
    }
    if (this.rangeCrosshairValue != that.rangeCrosshairValue) {
        return false;
    }
    if (!ObjectUtilities.equal(this.axisOffset, that.axisOffset)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.renderers, that.renderers)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.rangeAxes, that.rangeAxes)) {
        return false;
    }
    if (!this.rangeAxisLocations.equals(that.rangeAxisLocations)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.datasetToDomainAxisMap, that.datasetToDomainAxisMap)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.datasetToRangeAxisMap, that.datasetToRangeAxisMap)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.domainGridlineStroke, that.domainGridlineStroke)) {
        return false;
    }
    if (!PaintUtilities.equal(this.domainGridlinePaint, that.domainGridlinePaint)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.rangeGridlineStroke, that.rangeGridlineStroke)) {
        return false;
    }
    if (!PaintUtilities.equal(this.rangeGridlinePaint, that.rangeGridlinePaint)) {
        return false;
    }
    if (!PaintUtilities.equal(this.domainZeroBaselinePaint, that.domainZeroBaselinePaint)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.domainZeroBaselineStroke, that.domainZeroBaselineStroke)) {
        return false;
    }
    if (!PaintUtilities.equal(this.rangeZeroBaselinePaint, that.rangeZeroBaselinePaint)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.rangeZeroBaselineStroke, that.rangeZeroBaselineStroke)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.domainCrosshairStroke, that.domainCrosshairStroke)) {
        return false;
    }
    if (!PaintUtilities.equal(this.domainCrosshairPaint, that.domainCrosshairPaint)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.rangeCrosshairStroke, that.rangeCrosshairStroke)) {
        return false;
    }
    if (!PaintUtilities.equal(this.rangeCrosshairPaint, that.rangeCrosshairPaint)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.foregroundDomainMarkers, that.foregroundDomainMarkers)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.backgroundDomainMarkers, that.backgroundDomainMarkers)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.foregroundRangeMarkers, that.foregroundRangeMarkers)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.backgroundRangeMarkers, that.backgroundRangeMarkers)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.foregroundDomainMarkers, that.foregroundDomainMarkers)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.backgroundDomainMarkers, that.backgroundDomainMarkers)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.foregroundRangeMarkers, that.foregroundRangeMarkers)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.backgroundRangeMarkers, that.backgroundRangeMarkers)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.annotations, that.annotations)) {
        return false;
    }
    if (!PaintUtilities.equal(this.domainTickBandPaint, that.domainTickBandPaint)) {
        return false;
    }
    if (!PaintUtilities.equal(this.rangeTickBandPaint, that.rangeTickBandPaint)) {
        return false;
    }
    if (!this.quadrantOrigin.equals(that.quadrantOrigin)) {
        return false;
    }
    for (int i = 0; i < 4; i++) {
        if (!PaintUtilities.equal(this.quadrantPaint[i], that.quadrantPaint[i])) {
            return false;
        }
    }
    return super.equals(obj);
}","public void test185340() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    Object object0 = combinedRangeXYPlot0.clone();
    assertTrue(object0.equals((Object) combinedRangeXYPlot0));
}","/**
 * Tests this plot for equality with another object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return <code>true</code> or <code>false</code>.
 */"
"public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof CombinedRangeXYPlot)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    CombinedRangeXYPlot that = (CombinedRangeXYPlot) obj;
    if (!ObjectUtilities.equal(this.subplots, that.subplots)) {
        return false;
    }
    if (this.totalWeight != that.totalWeight) {
        return false;
    }
    if (this.gap != that.gap) {
        return false;
    }
    return true;
}","public void test185341() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    Object object0 = combinedRangeXYPlot0.clone();
    combinedRangeXYPlot0.setRangeGridlinesVisible(false);
    boolean boolean0 = combinedRangeXYPlot0.equals(object0);
    assertFalse(boolean0);
}","/**
 * Tests this plot for equality with another object.
 *
 * @param obj  the other object.
 *
 * @return <code>true</code> or <code>false</code>.
 */"
"public boolean isDomainZeroBaselineVisible() {
    return this.domainZeroBaselineVisible;
}","public void test186342() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    combinedRangeXYPlot0.setDomainZeroBaselineVisible(true);
    CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
    boolean boolean0 = combinedRangeXYPlot0.equals(combinedRangeXYPlot1);
    assertTrue(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
}","/**
 * Returns a flag that controls whether or not a zero baseline is
 * displayed for the domain axis.
 *
 * @return A boolean.
 *
 * @since 1.0.5
 *
 * @see #setDomainZeroBaselineVisible(boolean)
 */"
"public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof CombinedRangeXYPlot)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    CombinedRangeXYPlot that = (CombinedRangeXYPlot) obj;
    if (!ObjectUtilities.equal(this.subplots, that.subplots)) {
        return false;
    }
    if (this.totalWeight != that.totalWeight) {
        return false;
    }
    if (this.gap != that.gap) {
        return false;
    }
    return true;
}","public void test186343() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    combinedRangeXYPlot0.setDomainZeroBaselineVisible(true);
    CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
    boolean boolean0 = combinedRangeXYPlot0.equals(combinedRangeXYPlot1);
    assertFalse(boolean0);
}","/**
 * Tests this plot for equality with another object.
 *
 * @param obj  the other object.
 *
 * @return <code>true</code> or <code>false</code>.
 */"
"public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof CombinedRangeXYPlot)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    CombinedRangeXYPlot that = (CombinedRangeXYPlot) obj;
    if (!ObjectUtilities.equal(this.subplots, that.subplots)) {
        return false;
    }
    if (this.totalWeight != that.totalWeight) {
        return false;
    }
    if (this.gap != that.gap) {
        return false;
    }
    return true;
}","public void test187344() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
    assertTrue(combinedRangeXYPlot1.equals((Object) combinedRangeXYPlot0));
}","/**
 * Tests this plot for equality with another object.
 *
 * @param obj  the other object.
 *
 * @return <code>true</code> or <code>false</code>.
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test187345() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
    combinedRangeXYPlot1.setAxisOffset(combinedRangeXYPlot0.DEFAULT_INSETS);
    combinedRangeXYPlot0.equals(combinedRangeXYPlot1);
    assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof CombinedRangeXYPlot)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    CombinedRangeXYPlot that = (CombinedRangeXYPlot) obj;
    if (!ObjectUtilities.equal(this.subplots, that.subplots)) {
        return false;
    }
    if (this.totalWeight != that.totalWeight) {
        return false;
    }
    if (this.gap != that.gap) {
        return false;
    }
    return true;
}","public void test188346() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    CombinedRangeXYPlot combinedRangeXYPlot1 = (CombinedRangeXYPlot) combinedRangeXYPlot0.clone();
    assertTrue(combinedRangeXYPlot1.equals((Object) combinedRangeXYPlot0));
}","/**
 * Tests this plot for equality with another object.
 *
 * @param obj  the other object.
 *
 * @return <code>true</code> or <code>false</code>.
 */"
"public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof CombinedRangeXYPlot)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    CombinedRangeXYPlot that = (CombinedRangeXYPlot) obj;
    if (!ObjectUtilities.equal(this.subplots, that.subplots)) {
        return false;
    }
    if (this.totalWeight != that.totalWeight) {
        return false;
    }
    if (this.gap != that.gap) {
        return false;
    }
    return true;
}","public void test188347() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    CombinedRangeXYPlot combinedRangeXYPlot1 = (CombinedRangeXYPlot) combinedRangeXYPlot0.clone();
    StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
    combinedRangeXYPlot1.setRenderer((XYItemRenderer) stackedXYAreaRenderer0);
    boolean boolean0 = combinedRangeXYPlot0.equals(combinedRangeXYPlot1);
    assertFalse(combinedRangeXYPlot1.equals((Object) combinedRangeXYPlot0));
}","/**
 * Tests this plot for equality with another object.
 *
 * @param obj  the other object.
 *
 * @return <code>true</code> or <code>false</code>.
 */"
"public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof CombinedRangeXYPlot)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    CombinedRangeXYPlot that = (CombinedRangeXYPlot) obj;
    if (!ObjectUtilities.equal(this.subplots, that.subplots)) {
        return false;
    }
    if (this.totalWeight != that.totalWeight) {
        return false;
    }
    if (this.gap != that.gap) {
        return false;
    }
    return true;
}","public void test188348() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    CombinedRangeXYPlot combinedRangeXYPlot1 = (CombinedRangeXYPlot) combinedRangeXYPlot0.clone();
    StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
    combinedRangeXYPlot1.setRenderer((XYItemRenderer) stackedXYAreaRenderer0);
    boolean boolean0 = combinedRangeXYPlot0.equals(combinedRangeXYPlot1);
    assertFalse(boolean0);
}","/**
 * Tests this plot for equality with another object.
 *
 * @param obj  the other object.
 *
 * @return <code>true</code> or <code>false</code>.
 */"
"public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof CombinedRangeXYPlot)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    CombinedRangeXYPlot that = (CombinedRangeXYPlot) obj;
    if (!ObjectUtilities.equal(this.subplots, that.subplots)) {
        return false;
    }
    if (this.totalWeight != that.totalWeight) {
        return false;
    }
    if (this.gap != that.gap) {
        return false;
    }
    return true;
}","public void test189349() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot((ValueAxis) null);
    boolean boolean0 = combinedRangeXYPlot1.equals(combinedRangeXYPlot0);
    assertFalse(boolean0);
}","/**
 * Tests this plot for equality with another object.
 *
 * @param obj  the other object.
 *
 * @return <code>true</code> or <code>false</code>.
 */"
"public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof CombinedRangeXYPlot)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    CombinedRangeXYPlot that = (CombinedRangeXYPlot) obj;
    if (!ObjectUtilities.equal(this.subplots, that.subplots)) {
        return false;
    }
    if (this.totalWeight != that.totalWeight) {
        return false;
    }
    if (this.gap != that.gap) {
        return false;
    }
    return true;
}","public void test190351() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
    combinedRangeXYPlot1.mapDatasetToRangeAxis(10, 10);
    boolean boolean0 = combinedRangeXYPlot1.equals(combinedRangeXYPlot0);
    assertFalse(boolean0);
}","/**
 * Tests this plot for equality with another object.
 *
 * @param obj  the other object.
 *
 * @return <code>true</code> or <code>false</code>.
 */"
"public int getWeight() {
    return this.weight;
}","public void test191353() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    CombinedRangeXYPlot combinedRangeXYPlot1 = (CombinedRangeXYPlot) combinedRangeXYPlot0.clone();
    combinedRangeXYPlot1.setRangeZeroBaselinePaint(combinedRangeXYPlot0.DEFAULT_BACKGROUND_PAINT);
    combinedRangeXYPlot0.equals(combinedRangeXYPlot1);
    assertEquals(1, combinedRangeXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof CombinedRangeXYPlot)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    CombinedRangeXYPlot that = (CombinedRangeXYPlot) obj;
    if (!ObjectUtilities.equal(this.subplots, that.subplots)) {
        return false;
    }
    if (this.totalWeight != that.totalWeight) {
        return false;
    }
    if (this.gap != that.gap) {
        return false;
    }
    return true;
}","public void test192355() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    CombinedRangeXYPlot combinedRangeXYPlot1 = (CombinedRangeXYPlot) combinedRangeXYPlot0.clone();
    combinedRangeXYPlot1.setDomainCrosshairPaint(combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT);
    boolean boolean0 = combinedRangeXYPlot0.equals(combinedRangeXYPlot1);
    assertFalse(combinedRangeXYPlot1.equals((Object) combinedRangeXYPlot0));
}","/**
 * Tests this plot for equality with another object.
 *
 * @param obj  the other object.
 *
 * @return <code>true</code> or <code>false</code>.
 */"
"public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof CombinedRangeXYPlot)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    CombinedRangeXYPlot that = (CombinedRangeXYPlot) obj;
    if (!ObjectUtilities.equal(this.subplots, that.subplots)) {
        return false;
    }
    if (this.totalWeight != that.totalWeight) {
        return false;
    }
    if (this.gap != that.gap) {
        return false;
    }
    return true;
}","public void test192356() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    CombinedRangeXYPlot combinedRangeXYPlot1 = (CombinedRangeXYPlot) combinedRangeXYPlot0.clone();
    combinedRangeXYPlot1.setDomainCrosshairPaint(combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT);
    boolean boolean0 = combinedRangeXYPlot0.equals(combinedRangeXYPlot1);
    assertFalse(boolean0);
}","/**
 * Tests this plot for equality with another object.
 *
 * @param obj  the other object.
 *
 * @return <code>true</code> or <code>false</code>.
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test193358() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    Object object0 = combinedRangeXYPlot0.clone();
    CategoryMarker categoryMarker0 = new CategoryMarker(10);
    combinedRangeXYPlot0.addDomainMarker((Marker) categoryMarker0);
    combinedRangeXYPlot0.equals(object0);
    assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof CombinedRangeXYPlot)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    CombinedRangeXYPlot that = (CombinedRangeXYPlot) obj;
    if (!ObjectUtilities.equal(this.subplots, that.subplots)) {
        return false;
    }
    if (this.totalWeight != that.totalWeight) {
        return false;
    }
    if (this.gap != that.gap) {
        return false;
    }
    return true;
}","public void test194359() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    CombinedRangeXYPlot combinedRangeXYPlot1 = (CombinedRangeXYPlot) combinedRangeXYPlot0.clone();
    ValueMarker valueMarker0 = new ValueMarker(10);
    Layer layer0 = Layer.BACKGROUND;
    combinedRangeXYPlot1.addRangeMarker(10, (Marker) valueMarker0, layer0, false);
    boolean boolean0 = combinedRangeXYPlot1.equals(combinedRangeXYPlot0);
    assertFalse(boolean0);
}","/**
 * Tests this plot for equality with another object.
 *
 * @param obj  the other object.
 *
 * @return <code>true</code> or <code>false</code>.
 */"
"public int getWeight() {
    return this.weight;
}","public void test195361() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    CombinedRangeXYPlot combinedRangeXYPlot1 = (CombinedRangeXYPlot) combinedRangeXYPlot0.clone();
    combinedRangeXYPlot1.setDomainTickBandPaint(combinedRangeXYPlot0.DEFAULT_CROSSHAIR_PAINT);
    combinedRangeXYPlot1.equals(combinedRangeXYPlot0);
    assertEquals(1, combinedRangeXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test196362() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    CombinedDomainXYPlot combinedDomainXYPlot1 = (CombinedDomainXYPlot) combinedDomainXYPlot0.clone();
    assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test196363() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    CombinedDomainXYPlot combinedDomainXYPlot1 = (CombinedDomainXYPlot) combinedDomainXYPlot0.clone();
    assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public int getDomainAxisCount() {
    return this.domainAxes.size();
}","public void test196364() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    CombinedDomainXYPlot combinedDomainXYPlot1 = (CombinedDomainXYPlot) combinedDomainXYPlot0.clone();
    assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
}","/**
 * Returns the number of domain axes.
 *
 * @return The axis count.
 *
 * @see #getRangeAxisCount()
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test197365() throws Throwable {
    CombinedDataset combinedDataset0 = new CombinedDataset();
    ThermometerPlot thermometerPlot0 = new ThermometerPlot();
    ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
    XYAreaRenderer2 xYAreaRenderer2_0 = new XYAreaRenderer2();
    XYPlot xYPlot0 = new XYPlot(combinedDataset0, valueAxis0, valueAxis0, xYAreaRenderer2_0);
    XYPlot xYPlot1 = (XYPlot) xYPlot0.clone();
    assertTrue(xYPlot1.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYPlot)) {
        return false;
    }
    XYPlot that = (XYPlot) obj;
    if (this.weight != that.weight) {
        return false;
    }
    if (this.orientation != that.orientation) {
        return false;
    }
    if (!this.domainAxes.equals(that.domainAxes)) {
        return false;
    }
    if (!this.domainAxisLocations.equals(that.domainAxisLocations)) {
        return false;
    }
    if (this.rangeCrosshairLockedOnData != that.rangeCrosshairLockedOnData) {
        return false;
    }
    if (this.domainGridlinesVisible != that.domainGridlinesVisible) {
        return false;
    }
    if (this.rangeGridlinesVisible != that.rangeGridlinesVisible) {
        return false;
    }
    if (this.domainZeroBaselineVisible != that.domainZeroBaselineVisible) {
        return false;
    }
    if (this.rangeZeroBaselineVisible != that.rangeZeroBaselineVisible) {
        return false;
    }
    if (this.domainCrosshairVisible != that.domainCrosshairVisible) {
        return false;
    }
    if (this.domainCrosshairValue != that.domainCrosshairValue) {
        return false;
    }
    if (this.domainCrosshairLockedOnData != that.domainCrosshairLockedOnData) {
        return false;
    }
    if (this.rangeCrosshairVisible != that.rangeCrosshairVisible) {
        return false;
    }
    if (this.rangeCrosshairValue != that.rangeCrosshairValue) {
        return false;
    }
    if (!ObjectUtilities.equal(this.axisOffset, that.axisOffset)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.renderers, that.renderers)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.rangeAxes, that.rangeAxes)) {
        return false;
    }
    if (!this.rangeAxisLocations.equals(that.rangeAxisLocations)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.datasetToDomainAxisMap, that.datasetToDomainAxisMap)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.datasetToRangeAxisMap, that.datasetToRangeAxisMap)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.domainGridlineStroke, that.domainGridlineStroke)) {
        return false;
    }
    if (!PaintUtilities.equal(this.domainGridlinePaint, that.domainGridlinePaint)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.rangeGridlineStroke, that.rangeGridlineStroke)) {
        return false;
    }
    if (!PaintUtilities.equal(this.rangeGridlinePaint, that.rangeGridlinePaint)) {
        return false;
    }
    if (!PaintUtilities.equal(this.domainZeroBaselinePaint, that.domainZeroBaselinePaint)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.domainZeroBaselineStroke, that.domainZeroBaselineStroke)) {
        return false;
    }
    if (!PaintUtilities.equal(this.rangeZeroBaselinePaint, that.rangeZeroBaselinePaint)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.rangeZeroBaselineStroke, that.rangeZeroBaselineStroke)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.domainCrosshairStroke, that.domainCrosshairStroke)) {
        return false;
    }
    if (!PaintUtilities.equal(this.domainCrosshairPaint, that.domainCrosshairPaint)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.rangeCrosshairStroke, that.rangeCrosshairStroke)) {
        return false;
    }
    if (!PaintUtilities.equal(this.rangeCrosshairPaint, that.rangeCrosshairPaint)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.foregroundDomainMarkers, that.foregroundDomainMarkers)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.backgroundDomainMarkers, that.backgroundDomainMarkers)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.foregroundRangeMarkers, that.foregroundRangeMarkers)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.backgroundRangeMarkers, that.backgroundRangeMarkers)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.foregroundDomainMarkers, that.foregroundDomainMarkers)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.backgroundDomainMarkers, that.backgroundDomainMarkers)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.foregroundRangeMarkers, that.foregroundRangeMarkers)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.backgroundRangeMarkers, that.backgroundRangeMarkers)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.annotations, that.annotations)) {
        return false;
    }
    if (!PaintUtilities.equal(this.domainTickBandPaint, that.domainTickBandPaint)) {
        return false;
    }
    if (!PaintUtilities.equal(this.rangeTickBandPaint, that.rangeTickBandPaint)) {
        return false;
    }
    if (!this.quadrantOrigin.equals(that.quadrantOrigin)) {
        return false;
    }
    for (int i = 0; i < 4; i++) {
        if (!PaintUtilities.equal(this.quadrantPaint[i], that.quadrantPaint[i])) {
            return false;
        }
    }
    return super.equals(obj);
}","public void test197366() throws Throwable {
    CombinedDataset combinedDataset0 = new CombinedDataset();
    ThermometerPlot thermometerPlot0 = new ThermometerPlot();
    ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
    XYAreaRenderer2 xYAreaRenderer2_0 = new XYAreaRenderer2();
    XYPlot xYPlot0 = new XYPlot(combinedDataset0, valueAxis0, valueAxis0, xYAreaRenderer2_0);
    XYPlot xYPlot1 = (XYPlot) xYPlot0.clone();
    assertTrue(xYPlot1.equals((Object) xYPlot0));
}","/**
 * Tests this plot for equality with another object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return <code>true</code> or <code>false</code>.
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test198367() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    AxisSpace axisSpace0 = new AxisSpace();
    combinedRangeXYPlot0.setFixedDomainAxisSpace(axisSpace0, true);
    CombinedRangeXYPlot combinedRangeXYPlot1 = (CombinedRangeXYPlot) combinedRangeXYPlot0.clone();
    assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public int getRangeAxisCount() {
    return this.rangeAxes.size();
}","public void test198368() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    AxisSpace axisSpace0 = new AxisSpace();
    combinedRangeXYPlot0.setFixedDomainAxisSpace(axisSpace0, true);
    CombinedRangeXYPlot combinedRangeXYPlot1 = (CombinedRangeXYPlot) combinedRangeXYPlot0.clone();
    assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
}","/**
 * Returns the number of range axes.
 *
 * @return The axis count.
 *
 * @see #getDomainAxisCount()
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test198369() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    AxisSpace axisSpace0 = new AxisSpace();
    combinedRangeXYPlot0.setFixedDomainAxisSpace(axisSpace0, true);
    CombinedRangeXYPlot combinedRangeXYPlot1 = (CombinedRangeXYPlot) combinedRangeXYPlot0.clone();
    assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test198370() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    AxisSpace axisSpace0 = new AxisSpace();
    combinedRangeXYPlot0.setFixedDomainAxisSpace(axisSpace0, true);
    CombinedRangeXYPlot combinedRangeXYPlot1 = (CombinedRangeXYPlot) combinedRangeXYPlot0.clone();
    assertEquals(1, combinedRangeXYPlot1.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
