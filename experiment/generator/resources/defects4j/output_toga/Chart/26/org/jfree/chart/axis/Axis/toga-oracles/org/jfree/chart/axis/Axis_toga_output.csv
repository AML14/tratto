project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
    DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
    Color color0 = defaultTreeCellRenderer0.getBackgroundSelectionColor();
    categoryAxis3D0.setTickMarkPaint(color0);
    assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
}",0,
project,0,test001,"public void test001() throws Throwable {
    CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
    DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
    Color color0 = defaultTreeCellRenderer0.getBackgroundSelectionColor();
    categoryAxis3D0.setTickMarkPaint(color0);
    assertTrue(categoryAxis3D0.isAxisLineVisible());
}",0,assertFalse(categoryAxis3D0.isAxisLineVisible())
project,0,test002,"public void test002() throws Throwable {
    CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
    DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
    Color color0 = defaultTreeCellRenderer0.getBackgroundSelectionColor();
    categoryAxis3D0.setTickMarkPaint(color0);
    assertTrue(categoryAxis3D0.isVisible());
}",1,
project,0,test003,"public void test003() throws Throwable {
    CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
    DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
    Color color0 = defaultTreeCellRenderer0.getBackgroundSelectionColor();
    categoryAxis3D0.setTickMarkPaint(color0);
    assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
}",0,
project,0,test004,"public void test004() throws Throwable {
    CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
    DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
    Color color0 = defaultTreeCellRenderer0.getBackgroundSelectionColor();
    categoryAxis3D0.setTickMarkPaint(color0);
    assertFalse(categoryAxis3D0.isTickMarksVisible());
}",0,assertFalse(categoryAxis3D0.isTickMarksVisible())
project,0,test005,"public void test005() throws Throwable {
    CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
    DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
    Color color0 = defaultTreeCellRenderer0.getBackgroundSelectionColor();
    categoryAxis3D0.setTickMarkPaint(color0);
    assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
}",0,
project,0,test006,"public void test006() throws Throwable {
    CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
    DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
    Color color0 = defaultTreeCellRenderer0.getBackgroundSelectionColor();
    categoryAxis3D0.setTickMarkPaint(color0);
    assertTrue(categoryAxis3D0.isTickLabelsVisible());
}",0,assertFalse(categoryAxis3D0.isTickLabelsVisible())
project,0,test017,"public void test017() throws Throwable {
    CategoryAxis categoryAxis0 = new CategoryAxis((String) null);
    categoryAxis0.setTickMarkOutsideLength(1542.5818F);
    assertEquals(1542.5818F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
}",0,
project,0,test028,"public void test028() throws Throwable {
    NumberAxis numberAxis0 = new NumberAxis();
    CategoryPlot categoryPlot0 = new CategoryPlot();
    RectangleInsets rectangleInsets0 = categoryPlot0.getInsets();
    numberAxis0.setTickLabelInsets(rectangleInsets0);
    assertTrue(numberAxis0.isTickMarksVisible());
}",0,
project,0,test029,"public void test029() throws Throwable {
    NumberAxis numberAxis0 = new NumberAxis();
    CategoryPlot categoryPlot0 = new CategoryPlot();
    RectangleInsets rectangleInsets0 = categoryPlot0.getInsets();
    numberAxis0.setTickLabelInsets(rectangleInsets0);
    assertTrue(numberAxis0.isVisible());
}",0,assertFalse(numberAxis0.isVisible())
project,0,test0210,"public void test0210() throws Throwable {
    NumberAxis numberAxis0 = new NumberAxis();
    CategoryPlot categoryPlot0 = new CategoryPlot();
    RectangleInsets rectangleInsets0 = categoryPlot0.getInsets();
    numberAxis0.setTickLabelInsets(rectangleInsets0);
    assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
}",0,
project,0,test0211,"public void test0211() throws Throwable {
    NumberAxis numberAxis0 = new NumberAxis();
    CategoryPlot categoryPlot0 = new CategoryPlot();
    RectangleInsets rectangleInsets0 = categoryPlot0.getInsets();
    numberAxis0.setTickLabelInsets(rectangleInsets0);
    assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
}",0,
project,0,test0212,"public void test0212() throws Throwable {
    NumberAxis numberAxis0 = new NumberAxis();
    CategoryPlot categoryPlot0 = new CategoryPlot();
    RectangleInsets rectangleInsets0 = categoryPlot0.getInsets();
    numberAxis0.setTickLabelInsets(rectangleInsets0);
    assertTrue(numberAxis0.isAxisLineVisible());
}",0,assertFalse(numberAxis0.isAxisLineVisible())
project,0,test0213,"public void test0213() throws Throwable {
    NumberAxis numberAxis0 = new NumberAxis();
    CategoryPlot categoryPlot0 = new CategoryPlot();
    RectangleInsets rectangleInsets0 = categoryPlot0.getInsets();
    numberAxis0.setTickLabelInsets(rectangleInsets0);
    assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
}",0,
project,0,test0214,"public void test0214() throws Throwable {
    NumberAxis numberAxis0 = new NumberAxis();
    CategoryPlot categoryPlot0 = new CategoryPlot();
    RectangleInsets rectangleInsets0 = categoryPlot0.getInsets();
    numberAxis0.setTickLabelInsets(rectangleInsets0);
    assertTrue(numberAxis0.isTickLabelsVisible());
}",0,assertFalse(numberAxis0.isTickLabelsVisible())
project,0,test0315,"public void test0315() throws Throwable {
    CategoryAxis categoryAxis0 = new CategoryAxis(""Fast_Scatter_Plot"");
    PeriodAxis periodAxis0 = new PeriodAxis(""~neErvtv|w<'"");
    Paint paint0 = periodAxis0.getMinorTickMarkPaint();
    categoryAxis0.setTickLabelPaint(paint0);
    assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
}",0,
project,0,test0316,"public void test0316() throws Throwable {
    CategoryAxis categoryAxis0 = new CategoryAxis(""Fast_Scatter_Plot"");
    PeriodAxis periodAxis0 = new PeriodAxis(""~neErvtv|w<'"");
    Paint paint0 = periodAxis0.getMinorTickMarkPaint();
    categoryAxis0.setTickLabelPaint(paint0);
    assertTrue(periodAxis0.isTickLabelsVisible());
}",0,assertFalse(periodAxis0.isTickLabelsVisible())
project,0,test0317,"public void test0317() throws Throwable {
    CategoryAxis categoryAxis0 = new CategoryAxis(""Fast_Scatter_Plot"");
    PeriodAxis periodAxis0 = new PeriodAxis(""~neErvtv|w<'"");
    Paint paint0 = periodAxis0.getMinorTickMarkPaint();
    categoryAxis0.setTickLabelPaint(paint0);
    assertTrue(periodAxis0.isVisible());
}",0,assertTrue(periodAxis0.isVisible())
project,0,test0318,"public void test0318() throws Throwable {
    CategoryAxis categoryAxis0 = new CategoryAxis(""Fast_Scatter_Plot"");
    PeriodAxis periodAxis0 = new PeriodAxis(""~neErvtv|w<'"");
    Paint paint0 = periodAxis0.getMinorTickMarkPaint();
    categoryAxis0.setTickLabelPaint(paint0);
    assertFalse(categoryAxis0.isTickMarksVisible());
}",0,assertTrue(categoryAxis0.isTickMarksVisible())
project,0,test0319,"public void test0319() throws Throwable {
    CategoryAxis categoryAxis0 = new CategoryAxis(""Fast_Scatter_Plot"");
    PeriodAxis periodAxis0 = new PeriodAxis(""~neErvtv|w<'"");
    Paint paint0 = periodAxis0.getMinorTickMarkPaint();
    categoryAxis0.setTickLabelPaint(paint0);
    assertTrue(periodAxis0.isTickMarksVisible());
}",0,
project,0,test0320,"public void test0320() throws Throwable {
    CategoryAxis categoryAxis0 = new CategoryAxis(""Fast_Scatter_Plot"");
    PeriodAxis periodAxis0 = new PeriodAxis(""~neErvtv|w<'"");
    Paint paint0 = periodAxis0.getMinorTickMarkPaint();
    categoryAxis0.setTickLabelPaint(paint0);
    assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
}",0,
project,0,test0321,"public void test0321() throws Throwable {
    CategoryAxis categoryAxis0 = new CategoryAxis(""Fast_Scatter_Plot"");
    PeriodAxis periodAxis0 = new PeriodAxis(""~neErvtv|w<'"");
    Paint paint0 = periodAxis0.getMinorTickMarkPaint();
    categoryAxis0.setTickLabelPaint(paint0);
    assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
}",0,
project,0,test0322,"public void test0322() throws Throwable {
    CategoryAxis categoryAxis0 = new CategoryAxis(""Fast_Scatter_Plot"");
    PeriodAxis periodAxis0 = new PeriodAxis(""~neErvtv|w<'"");
    Paint paint0 = periodAxis0.getMinorTickMarkPaint();
    categoryAxis0.setTickLabelPaint(paint0);
    assertTrue(periodAxis0.isAxisLineVisible());
}",0,assertFalse(periodAxis0.isAxisLineVisible())
project,0,test0423,"public void test0423() throws Throwable {
    Hour hour0 = new Hour();
    PeriodAxis periodAxis0 = new PeriodAxis(""/>"", hour0, hour0, hour0.DEFAULT_TIME_ZONE);
    MeterPlot meterPlot0 = new MeterPlot();
    Font font0 = meterPlot0.getValueFont();
    periodAxis0.setTickLabelFont(font0);
    assertTrue(periodAxis0.isTickMarksVisible());
}",0,assertTrue(periodAxis0.isTickMarksVisible())
project,0,test0424,"public void test0424() throws Throwable {
    Hour hour0 = new Hour();
    PeriodAxis periodAxis0 = new PeriodAxis(""/>"", hour0, hour0, hour0.DEFAULT_TIME_ZONE);
    MeterPlot meterPlot0 = new MeterPlot();
    Font font0 = meterPlot0.getValueFont();
    periodAxis0.setTickLabelFont(font0);
    assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
}",0,
project,0,test0425,"public void test0425() throws Throwable {
    Hour hour0 = new Hour();
    PeriodAxis periodAxis0 = new PeriodAxis(""/>"", hour0, hour0, hour0.DEFAULT_TIME_ZONE);
    MeterPlot meterPlot0 = new MeterPlot();
    Font font0 = meterPlot0.getValueFont();
    periodAxis0.setTickLabelFont(font0);
    assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
}",0,
project,0,test0426,"public void test0426() throws Throwable {
    Hour hour0 = new Hour();
    PeriodAxis periodAxis0 = new PeriodAxis(""/>"", hour0, hour0, hour0.DEFAULT_TIME_ZONE);
    MeterPlot meterPlot0 = new MeterPlot();
    Font font0 = meterPlot0.getValueFont();
    periodAxis0.setTickLabelFont(font0);
    assertTrue(periodAxis0.isTickLabelsVisible());
}",0,assertFalse(periodAxis0.isTickLabelsVisible())
project,0,test0427,"public void test0427() throws Throwable {
    Hour hour0 = new Hour();
    PeriodAxis periodAxis0 = new PeriodAxis(""/>"", hour0, hour0, hour0.DEFAULT_TIME_ZONE);
    MeterPlot meterPlot0 = new MeterPlot();
    Font font0 = meterPlot0.getValueFont();
    periodAxis0.setTickLabelFont(font0);
    assertTrue(periodAxis0.isAxisLineVisible());
}",0,
project,0,test0428,"public void test0428() throws Throwable {
    Hour hour0 = new Hour();
    PeriodAxis periodAxis0 = new PeriodAxis(""/>"", hour0, hour0, hour0.DEFAULT_TIME_ZONE);
    MeterPlot meterPlot0 = new MeterPlot();
    Font font0 = meterPlot0.getValueFont();
    periodAxis0.setTickLabelFont(font0);
    assertTrue(periodAxis0.isVisible());
}",0,
project,0,test0429,"public void test0429() throws Throwable {
    Hour hour0 = new Hour();
    PeriodAxis periodAxis0 = new PeriodAxis(""/>"", hour0, hour0, hour0.DEFAULT_TIME_ZONE);
    MeterPlot meterPlot0 = new MeterPlot();
    Font font0 = meterPlot0.getValueFont();
    periodAxis0.setTickLabelFont(font0);
    assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
}",0,
project,0,test0530,"public void test0530() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0);
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
    Stroke stroke0 = combinedDomainXYPlot0.getRangeGridlineStroke();
    cyclicNumberAxis0.setAxisLineStroke(stroke0);
    assertTrue(cyclicNumberAxis0.isTickMarksVisible());
}",0,assertTrue(cyclicNumberAxis0.isTickMarksVisible())
project,0,test0531,"public void test0531() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0);
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
    Stroke stroke0 = combinedDomainXYPlot0.getRangeGridlineStroke();
    cyclicNumberAxis0.setAxisLineStroke(stroke0);
    assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
}",0,
project,0,test0532,"public void test0532() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0);
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
    Stroke stroke0 = combinedDomainXYPlot0.getRangeGridlineStroke();
    cyclicNumberAxis0.setAxisLineStroke(stroke0);
    assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
}",0,
project,0,test0533,"public void test0533() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0);
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
    Stroke stroke0 = combinedDomainXYPlot0.getRangeGridlineStroke();
    cyclicNumberAxis0.setAxisLineStroke(stroke0);
    assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
}",0,assertTrue(cyclicNumberAxis0.isTickLabelsVisible())
project,0,test0534,"public void test0534() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0);
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
    Stroke stroke0 = combinedDomainXYPlot0.getRangeGridlineStroke();
    cyclicNumberAxis0.setAxisLineStroke(stroke0);
    assertTrue(cyclicNumberAxis0.isVisible());
}",0,
project,0,test0535,"public void test0535() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0);
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
    Stroke stroke0 = combinedDomainXYPlot0.getRangeGridlineStroke();
    cyclicNumberAxis0.setAxisLineStroke(stroke0);
    assertTrue(cyclicNumberAxis0.isAxisLineVisible());
}",0,assertFalse(cyclicNumberAxis0.isAxisLineVisible())
project,0,test0536,"public void test0536() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0);
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
    Stroke stroke0 = combinedDomainXYPlot0.getRangeGridlineStroke();
    cyclicNumberAxis0.setAxisLineStroke(stroke0);
    assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
}",0,
project,0,test0637,"public void test0637() throws Throwable {
    Week week0 = new Week();
    PeriodAxis periodAxis0 = new PeriodAxis("" 25;eHgg RIKc"", week0, week0);
    GanttRenderer ganttRenderer0 = new GanttRenderer();
    periodAxis0.setLabelFont(ganttRenderer0.DEFAULT_VALUE_LABEL_FONT);
    assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
}",0,
project,0,test0638,"public void test0638() throws Throwable {
    Week week0 = new Week();
    PeriodAxis periodAxis0 = new PeriodAxis("" 25;eHgg RIKc"", week0, week0);
    GanttRenderer ganttRenderer0 = new GanttRenderer();
    periodAxis0.setLabelFont(ganttRenderer0.DEFAULT_VALUE_LABEL_FONT);
    assertTrue(periodAxis0.isTickLabelsVisible());
}",0,assertFalse(periodAxis0.isTickLabelsVisible())
project,0,test0639,"public void test0639() throws Throwable {
    Week week0 = new Week();
    PeriodAxis periodAxis0 = new PeriodAxis("" 25;eHgg RIKc"", week0, week0);
    GanttRenderer ganttRenderer0 = new GanttRenderer();
    periodAxis0.setLabelFont(ganttRenderer0.DEFAULT_VALUE_LABEL_FONT);
    assertTrue(periodAxis0.isAxisLineVisible());
}",0,assertFalse(periodAxis0.isAxisLineVisible())
project,0,test0640,"public void test0640() throws Throwable {
    Week week0 = new Week();
    PeriodAxis periodAxis0 = new PeriodAxis("" 25;eHgg RIKc"", week0, week0);
    GanttRenderer ganttRenderer0 = new GanttRenderer();
    periodAxis0.setLabelFont(ganttRenderer0.DEFAULT_VALUE_LABEL_FONT);
    assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
}",0,
project,0,test0641,"public void test0641() throws Throwable {
    Week week0 = new Week();
    PeriodAxis periodAxis0 = new PeriodAxis("" 25;eHgg RIKc"", week0, week0);
    GanttRenderer ganttRenderer0 = new GanttRenderer();
    periodAxis0.setLabelFont(ganttRenderer0.DEFAULT_VALUE_LABEL_FONT);
    assertTrue(periodAxis0.isVisible());
}",0,assertFalse(periodAxis0.isVisible())
project,0,test0642,"public void test0642() throws Throwable {
    Week week0 = new Week();
    PeriodAxis periodAxis0 = new PeriodAxis("" 25;eHgg RIKc"", week0, week0);
    GanttRenderer ganttRenderer0 = new GanttRenderer();
    periodAxis0.setLabelFont(ganttRenderer0.DEFAULT_VALUE_LABEL_FONT);
    assertTrue(periodAxis0.isTickMarksVisible());
}",0,assertFalse(periodAxis0.isTickMarksVisible())
project,0,test0643,"public void test0643() throws Throwable {
    Week week0 = new Week();
    PeriodAxis periodAxis0 = new PeriodAxis("" 25;eHgg RIKc"", week0, week0);
    GanttRenderer ganttRenderer0 = new GanttRenderer();
    periodAxis0.setLabelFont(ganttRenderer0.DEFAULT_VALUE_LABEL_FONT);
    assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
}",0,
project,0,test0744,"public void test0744() throws Throwable {
    CategoryAxis categoryAxis0 = new CategoryAxis("""");
    AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(categoryAxis0);
    categoryAxis0.notifyListeners(axisChangeEvent0);
    assertFalse(categoryAxis0.isTickMarksVisible());
}",0,assertTrue(categoryAxis0.isTickMarksVisible())
project,0,test0745,"public void test0745() throws Throwable {
    CategoryAxis categoryAxis0 = new CategoryAxis("""");
    AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(categoryAxis0);
    categoryAxis0.notifyListeners(axisChangeEvent0);
    assertTrue(categoryAxis0.isVisible());
}",0,assertFalse(categoryAxis0.isVisible())
project,0,test0746,"public void test0746() throws Throwable {
    CategoryAxis categoryAxis0 = new CategoryAxis("""");
    AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(categoryAxis0);
    categoryAxis0.notifyListeners(axisChangeEvent0);
    assertTrue(categoryAxis0.isTickLabelsVisible());
}",0,
project,0,test0747,"public void test0747() throws Throwable {
    CategoryAxis categoryAxis0 = new CategoryAxis("""");
    AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(categoryAxis0);
    categoryAxis0.notifyListeners(axisChangeEvent0);
    assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
}",0,
project,0,test0748,"public void test0748() throws Throwable {
    CategoryAxis categoryAxis0 = new CategoryAxis("""");
    AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(categoryAxis0);
    categoryAxis0.notifyListeners(axisChangeEvent0);
    assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
}",0,
project,0,test0749,"public void test0749() throws Throwable {
    CategoryAxis categoryAxis0 = new CategoryAxis("""");
    AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(categoryAxis0);
    categoryAxis0.notifyListeners(axisChangeEvent0);
    assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
}",0,
project,0,test0750,"public void test0750() throws Throwable {
    CategoryAxis categoryAxis0 = new CategoryAxis("""");
    AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(categoryAxis0);
    categoryAxis0.notifyListeners(axisChangeEvent0);
    assertTrue(categoryAxis0.isAxisLineVisible());
}",0,assertFalse(categoryAxis0.isAxisLineVisible())
project,0,test0851,"public void test0851() throws Throwable {
    DateAxis dateAxis0 = new DateAxis(""vURU#qE7Fy.y"");
    dateAxis0.configure();
    assertTrue(dateAxis0.isTickMarksVisible());
}",0,assertFalse(dateAxis0.isTickMarksVisible())
project,0,test0852,"public void test0852() throws Throwable {
    DateAxis dateAxis0 = new DateAxis(""vURU#qE7Fy.y"");
    dateAxis0.configure();
    assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
}",0,
project,0,test0853,"public void test0853() throws Throwable {
    DateAxis dateAxis0 = new DateAxis(""vURU#qE7Fy.y"");
    dateAxis0.configure();
    assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
}",0,
project,0,test0854,"public void test0854() throws Throwable {
    DateAxis dateAxis0 = new DateAxis(""vURU#qE7Fy.y"");
    dateAxis0.configure();
    assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
}",0,
project,0,test0855,"public void test0855() throws Throwable {
    DateAxis dateAxis0 = new DateAxis(""vURU#qE7Fy.y"");
    dateAxis0.configure();
    assertTrue(dateAxis0.isVisible());
}",0,assertFalse(dateAxis0.isVisible())
project,0,test0856,"public void test0856() throws Throwable {
    DateAxis dateAxis0 = new DateAxis(""vURU#qE7Fy.y"");
    dateAxis0.configure();
    assertTrue(dateAxis0.isAxisLineVisible());
}",0,assertFalse(dateAxis0.isAxisLineVisible())
project,0,test0857,"public void test0857() throws Throwable {
    DateAxis dateAxis0 = new DateAxis(""vURU#qE7Fy.y"");
    dateAxis0.configure();
    assertTrue(dateAxis0.isTickLabelsVisible());
}",0,assertFalse(dateAxis0.isTickLabelsVisible())
project,0,test0958,"public void test0958() throws Throwable {
    CategoryAxis categoryAxis0 = new CategoryAxis();
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
    BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(397, 397, 10, chartRenderingInfo0);
    Graphics2D graphics2D0 = bufferedImage0.createGraphics();
    Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
    RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
    AxisSpace axisSpace0 = categoryAxis0.reserveSpace(graphics2D0, combinedRangeXYPlot0, rectangle2D_Double0, rectangleEdge0, (AxisSpace) null);
    assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
}",0,
project,0,test0959,"public void test0959() throws Throwable {
    CategoryAxis categoryAxis0 = new CategoryAxis();
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
    BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(397, 397, 10, chartRenderingInfo0);
    Graphics2D graphics2D0 = bufferedImage0.createGraphics();
    Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
    RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
    AxisSpace axisSpace0 = categoryAxis0.reserveSpace(graphics2D0, combinedRangeXYPlot0, rectangle2D_Double0, rectangleEdge0, (AxisSpace) null);
    assertTrue(categoryAxis0.isAxisLineVisible());
}",0,
project,0,test0960,"public void test0960() throws Throwable {
    CategoryAxis categoryAxis0 = new CategoryAxis();
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
    BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(397, 397, 10, chartRenderingInfo0);
    Graphics2D graphics2D0 = bufferedImage0.createGraphics();
    Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
    RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
    AxisSpace axisSpace0 = categoryAxis0.reserveSpace(graphics2D0, combinedRangeXYPlot0, rectangle2D_Double0, rectangleEdge0, (AxisSpace) null);
    assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
}",0,
project,0,test0961,"public void test0961() throws Throwable {
    CategoryAxis categoryAxis0 = new CategoryAxis();
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
    BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(397, 397, 10, chartRenderingInfo0);
    Graphics2D graphics2D0 = bufferedImage0.createGraphics();
    Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
    RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
    AxisSpace axisSpace0 = categoryAxis0.reserveSpace(graphics2D0, combinedRangeXYPlot0, rectangle2D_Double0, rectangleEdge0, (AxisSpace) null);
    assertTrue(categoryAxis0.isTickLabelsVisible());
}",0,assertTrue(categoryAxis0.isTickLabelsVisible())
project,0,test0962,"public void test0962() throws Throwable {
    CategoryAxis categoryAxis0 = new CategoryAxis();
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
    BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(397, 397, 10, chartRenderingInfo0);
    Graphics2D graphics2D0 = bufferedImage0.createGraphics();
    Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
    RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
    AxisSpace axisSpace0 = categoryAxis0.reserveSpace(graphics2D0, combinedRangeXYPlot0, rectangle2D_Double0, rectangleEdge0, (AxisSpace) null);
    assertFalse(categoryAxis0.isTickMarksVisible());
}",0,assertFalse(categoryAxis0.isTickMarksVisible())
project,0,test0963,"public void test0963() throws Throwable {
    CategoryAxis categoryAxis0 = new CategoryAxis();
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
    BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(397, 397, 10, chartRenderingInfo0);
    Graphics2D graphics2D0 = bufferedImage0.createGraphics();
    Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
    RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
    AxisSpace axisSpace0 = categoryAxis0.reserveSpace(graphics2D0, combinedRangeXYPlot0, rectangle2D_Double0, rectangleEdge0, (AxisSpace) null);
    assertEquals(4.0, axisSpace0.getRight(), 0.01);
}",0,
project,0,test0964,"public void test0964() throws Throwable {
    CategoryAxis categoryAxis0 = new CategoryAxis();
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
    BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(397, 397, 10, chartRenderingInfo0);
    Graphics2D graphics2D0 = bufferedImage0.createGraphics();
    Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
    RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
    AxisSpace axisSpace0 = categoryAxis0.reserveSpace(graphics2D0, combinedRangeXYPlot0, rectangle2D_Double0, rectangleEdge0, (AxisSpace) null);
    assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
}",0,
project,0,test0965,"public void test0965() throws Throwable {
    CategoryAxis categoryAxis0 = new CategoryAxis();
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
    BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(397, 397, 10, chartRenderingInfo0);
    Graphics2D graphics2D0 = bufferedImage0.createGraphics();
    Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
    RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
    AxisSpace axisSpace0 = categoryAxis0.reserveSpace(graphics2D0, combinedRangeXYPlot0, rectangle2D_Double0, rectangleEdge0, (AxisSpace) null);
    assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
}",0,
project,0,test1066,"public void test1066() throws Throwable {
    NumberAxis3D numberAxis3D0 = new NumberAxis3D();
    boolean boolean0 = numberAxis3D0.isAxisLineVisible();
    assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
}",0,
project,0,test1067,"public void test1067() throws Throwable {
    NumberAxis3D numberAxis3D0 = new NumberAxis3D();
    boolean boolean0 = numberAxis3D0.isAxisLineVisible();
    assertTrue(numberAxis3D0.isTickMarksVisible());
}",0,assertFalse(numberAxis3D0.isTickMarksVisible())
project,0,test1068,"public void test1068() throws Throwable {
    NumberAxis3D numberAxis3D0 = new NumberAxis3D();
    boolean boolean0 = numberAxis3D0.isAxisLineVisible();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test1069,"public void test1069() throws Throwable {
    NumberAxis3D numberAxis3D0 = new NumberAxis3D();
    boolean boolean0 = numberAxis3D0.isAxisLineVisible();
    assertTrue(numberAxis3D0.isVisible());
}",0,assertTrue(numberAxis3D0.isVisible())
project,0,test1070,"public void test1070() throws Throwable {
    NumberAxis3D numberAxis3D0 = new NumberAxis3D();
    boolean boolean0 = numberAxis3D0.isAxisLineVisible();
    assertTrue(numberAxis3D0.isTickLabelsVisible());
}",0,assertTrue(numberAxis3D0.isTickLabelsVisible())
project,0,test1071,"public void test1071() throws Throwable {
    NumberAxis3D numberAxis3D0 = new NumberAxis3D();
    boolean boolean0 = numberAxis3D0.isAxisLineVisible();
    assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
}",0,
project,0,test1072,"public void test1072() throws Throwable {
    NumberAxis3D numberAxis3D0 = new NumberAxis3D();
    boolean boolean0 = numberAxis3D0.isAxisLineVisible();
    assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
}",0,
project,0,test1173,"public void test1173() throws Throwable {
    DateAxis dateAxis0 = new DateAxis((String) null);
    RectangleEdge rectangleEdge0 = Title.DEFAULT_POSITION;
    dateAxis0.getLabelEnclosure((Graphics2D) null, rectangleEdge0);
    assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
}",0,
project,0,test1174,"public void test1174() throws Throwable {
    DateAxis dateAxis0 = new DateAxis((String) null);
    RectangleEdge rectangleEdge0 = Title.DEFAULT_POSITION;
    dateAxis0.getLabelEnclosure((Graphics2D) null, rectangleEdge0);
    assertTrue(dateAxis0.isTickMarksVisible());
}",0,
project,0,test1175,"public void test1175() throws Throwable {
    DateAxis dateAxis0 = new DateAxis((String) null);
    RectangleEdge rectangleEdge0 = Title.DEFAULT_POSITION;
    dateAxis0.getLabelEnclosure((Graphics2D) null, rectangleEdge0);
    assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
}",0,
project,0,test1176,"public void test1176() throws Throwable {
    DateAxis dateAxis0 = new DateAxis((String) null);
    RectangleEdge rectangleEdge0 = Title.DEFAULT_POSITION;
    dateAxis0.getLabelEnclosure((Graphics2D) null, rectangleEdge0);
    assertTrue(dateAxis0.isVisible());
}",0,assertFalse(dateAxis0.isVisible())
project,0,test1177,"public void test1177() throws Throwable {
    DateAxis dateAxis0 = new DateAxis((String) null);
    RectangleEdge rectangleEdge0 = Title.DEFAULT_POSITION;
    dateAxis0.getLabelEnclosure((Graphics2D) null, rectangleEdge0);
    assertTrue(dateAxis0.isAxisLineVisible());
}",0,assertFalse(dateAxis0.isAxisLineVisible())
project,0,test1178,"public void test1178() throws Throwable {
    DateAxis dateAxis0 = new DateAxis((String) null);
    RectangleEdge rectangleEdge0 = Title.DEFAULT_POSITION;
    dateAxis0.getLabelEnclosure((Graphics2D) null, rectangleEdge0);
    assertTrue(dateAxis0.isTickLabelsVisible());
}",0,assertTrue(dateAxis0.isTickLabelsVisible())
project,0,test1179,"public void test1179() throws Throwable {
    DateAxis dateAxis0 = new DateAxis((String) null);
    RectangleEdge rectangleEdge0 = Title.DEFAULT_POSITION;
    dateAxis0.getLabelEnclosure((Graphics2D) null, rectangleEdge0);
    assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
}",0,
project,0,test1280,"public void test1280() throws Throwable {
    ThermometerPlot thermometerPlot0 = new ThermometerPlot();
    ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
    valueAxis0.getLabel();
    assertEquals(0.0F, valueAxis0.getTickMarkInsideLength(), 0.01F);
}",0,
project,0,test1281,"public void test1281() throws Throwable {
    ThermometerPlot thermometerPlot0 = new ThermometerPlot();
    ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
    valueAxis0.getLabel();
    assertTrue(valueAxis0.isTickMarksVisible());
}",0,assertTrue(valueAxis0.isTickMarksVisible())
project,0,test1282,"public void test1282() throws Throwable {
    ThermometerPlot thermometerPlot0 = new ThermometerPlot();
    ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
    valueAxis0.getLabel();
    assertFalse(valueAxis0.isAxisLineVisible());
}",0,assertFalse(valueAxis0.isAxisLineVisible())
project,0,test1283,"public void test1283() throws Throwable {
    ThermometerPlot thermometerPlot0 = new ThermometerPlot();
    ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
    valueAxis0.getLabel();
    assertEquals(0.0, valueAxis0.getLabelAngle(), 0.01);
}",0,
project,0,test1284,"public void test1284() throws Throwable {
    ThermometerPlot thermometerPlot0 = new ThermometerPlot();
    ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
    valueAxis0.getLabel();
    assertTrue(valueAxis0.isVisible());
}",0,assertTrue(valueAxis0.isVisible())
project,0,test1285,"public void test1285() throws Throwable {
    ThermometerPlot thermometerPlot0 = new ThermometerPlot();
    ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
    valueAxis0.getLabel();
    assertEquals(2.0F, valueAxis0.getTickMarkOutsideLength(), 0.01F);
}",0,
project,0,test1286,"public void test1286() throws Throwable {
    ThermometerPlot thermometerPlot0 = new ThermometerPlot();
    ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
    valueAxis0.getLabel();
    assertTrue(valueAxis0.isTickLabelsVisible());
}",0,assertTrue(valueAxis0.isTickLabelsVisible())
project,0,test1387,"public void test1387() throws Throwable {
    PeriodAxis periodAxis0 = new PeriodAxis(""0m-'*"");
    PipedInputStream pipedInputStream0 = new PipedInputStream();
    periodAxis0.equals(pipedInputStream0);
    assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
}",0,
project,0,test1388,"public void test1388() throws Throwable {
    PeriodAxis periodAxis0 = new PeriodAxis(""0m-'*"");
    PipedInputStream pipedInputStream0 = new PipedInputStream();
    periodAxis0.equals(pipedInputStream0);
    assertTrue(periodAxis0.isAxisLineVisible());
}",0,assertFalse(periodAxis0.isAxisLineVisible())
project,0,test1389,"public void test1389() throws Throwable {
    PeriodAxis periodAxis0 = new PeriodAxis(""0m-'*"");
    PipedInputStream pipedInputStream0 = new PipedInputStream();
    periodAxis0.equals(pipedInputStream0);
    assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
}",0,
project,0,test1390,"public void test1390() throws Throwable {
    PeriodAxis periodAxis0 = new PeriodAxis(""0m-'*"");
    PipedInputStream pipedInputStream0 = new PipedInputStream();
    periodAxis0.equals(pipedInputStream0);
    assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
}",0,
project,0,test1391,"public void test1391() throws Throwable {
    PeriodAxis periodAxis0 = new PeriodAxis(""0m-'*"");
    PipedInputStream pipedInputStream0 = new PipedInputStream();
    periodAxis0.equals(pipedInputStream0);
    assertTrue(periodAxis0.isTickLabelsVisible());
}",0,assertFalse(periodAxis0.isTickLabelsVisible())
project,0,test1392,"public void test1392() throws Throwable {
    PeriodAxis periodAxis0 = new PeriodAxis(""0m-'*"");
    PipedInputStream pipedInputStream0 = new PipedInputStream();
    periodAxis0.equals(pipedInputStream0);
    assertTrue(periodAxis0.isTickMarksVisible());
}",0,assertFalse(periodAxis0.isTickMarksVisible())
project,0,test1393,"public void test1393() throws Throwable {
    PeriodAxis periodAxis0 = new PeriodAxis(""0m-'*"");
    PipedInputStream pipedInputStream0 = new PipedInputStream();
    periodAxis0.equals(pipedInputStream0);
    assertTrue(periodAxis0.isVisible());
}",0,assertTrue(periodAxis0.isVisible())
project,0,test1494,"public void test1494() throws Throwable {
    ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("""");
    ExtendedCategoryAxis extendedCategoryAxis1 = (ExtendedCategoryAxis) extendedCategoryAxis0.clone();
    assertEquals(2.0F, extendedCategoryAxis1.getTickMarkOutsideLength(), 0.01F);
}",0,
project,0,test1495,"public void test1495() throws Throwable {
    ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("""");
    ExtendedCategoryAxis extendedCategoryAxis1 = (ExtendedCategoryAxis) extendedCategoryAxis0.clone();
    assertEquals(0.0F, extendedCategoryAxis1.getTickMarkInsideLength(), 0.01F);
}",0,
project,0,test1496,"public void test1496() throws Throwable {
    ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("""");
    ExtendedCategoryAxis extendedCategoryAxis1 = (ExtendedCategoryAxis) extendedCategoryAxis0.clone();
    assertTrue(extendedCategoryAxis1.isTickLabelsVisible());
}",0,assertFalse(extendedCategoryAxis1.isTickLabelsVisible())
project,0,test1497,"public void test1497() throws Throwable {
    ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("""");
    ExtendedCategoryAxis extendedCategoryAxis1 = (ExtendedCategoryAxis) extendedCategoryAxis0.clone();
    assertFalse(extendedCategoryAxis1.isTickMarksVisible());
}",0,assertFalse(extendedCategoryAxis1.isTickMarksVisible())
project,0,test1498,"public void test1498() throws Throwable {
    ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("""");
    ExtendedCategoryAxis extendedCategoryAxis1 = (ExtendedCategoryAxis) extendedCategoryAxis0.clone();
    assertTrue(extendedCategoryAxis1.isAxisLineVisible());
}",0,assertFalse(extendedCategoryAxis1.isAxisLineVisible())
project,0,test1499,"public void test1499() throws Throwable {
    ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("""");
    ExtendedCategoryAxis extendedCategoryAxis1 = (ExtendedCategoryAxis) extendedCategoryAxis0.clone();
    assertEquals(0.0, extendedCategoryAxis1.getLabelAngle(), 0.01);
}",0,
project,0,test14100,"public void test14100() throws Throwable {
    ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("""");
    ExtendedCategoryAxis extendedCategoryAxis1 = (ExtendedCategoryAxis) extendedCategoryAxis0.clone();
    assertNotSame(extendedCategoryAxis1, extendedCategoryAxis0);
}",0,
project,0,test14101,"public void test14101() throws Throwable {
    ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("""");
    ExtendedCategoryAxis extendedCategoryAxis1 = (ExtendedCategoryAxis) extendedCategoryAxis0.clone();
    assertTrue(extendedCategoryAxis1.isVisible());
}",0,assertFalse(extendedCategoryAxis1.isVisible())
project,0,test15102,"public void test15102() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    DateAxis dateAxis0 = new DateAxis(""|+q|07W5K~ FVX%q"", simpleTimeZone0);
    CategoryAxis categoryAxis0 = new CategoryAxis("""");
    CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
    RectangleEdge rectangleEdge0 = combinedDomainCategoryPlot0.getDomainAxisEdge(0);
    // Undeclared exception!
    try {
        dateAxis0.getLabelEnclosure((Graphics2D) null, rectangleEdge0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jfree.chart.axis.Axis"", e);
    }
}",0,
project,0,test16103,"public void test16103() throws Throwable {
    DateAxis dateAxis0 = new DateAxis();
    PiePlot3D piePlot3D0 = new PiePlot3D((PieDataset) null);
    dateAxis0.addChangeListener(piePlot3D0);
    assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
}",0,
project,0,test16104,"public void test16104() throws Throwable {
    DateAxis dateAxis0 = new DateAxis();
    PiePlot3D piePlot3D0 = new PiePlot3D((PieDataset) null);
    dateAxis0.addChangeListener(piePlot3D0);
    assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
}",0,
project,0,test16105,"public void test16105() throws Throwable {
    DateAxis dateAxis0 = new DateAxis();
    PiePlot3D piePlot3D0 = new PiePlot3D((PieDataset) null);
    dateAxis0.addChangeListener(piePlot3D0);
    assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
}",0,
project,0,test16106,"public void test16106() throws Throwable {
    DateAxis dateAxis0 = new DateAxis();
    PiePlot3D piePlot3D0 = new PiePlot3D((PieDataset) null);
    dateAxis0.addChangeListener(piePlot3D0);
    assertTrue(dateAxis0.isTickLabelsVisible());
}",0,
project,0,test16107,"public void test16107() throws Throwable {
    DateAxis dateAxis0 = new DateAxis();
    PiePlot3D piePlot3D0 = new PiePlot3D((PieDataset) null);
    dateAxis0.addChangeListener(piePlot3D0);
    assertTrue(dateAxis0.isAxisLineVisible());
}",0,assertFalse(dateAxis0.isAxisLineVisible())
project,0,test16108,"public void test16108() throws Throwable {
    DateAxis dateAxis0 = new DateAxis();
    PiePlot3D piePlot3D0 = new PiePlot3D((PieDataset) null);
    dateAxis0.addChangeListener(piePlot3D0);
    assertTrue(dateAxis0.isVisible());
}",0,assertTrue(dateAxis0.isVisible())
project,0,test16109,"public void test16109() throws Throwable {
    DateAxis dateAxis0 = new DateAxis();
    PiePlot3D piePlot3D0 = new PiePlot3D((PieDataset) null);
    dateAxis0.addChangeListener(piePlot3D0);
    assertTrue(dateAxis0.isTickMarksVisible());
}",0,assertFalse(dateAxis0.isTickMarksVisible())
project,0,test17110,"public void test17110() throws Throwable {
    LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(""X"");
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    logarithmicAxis0.addChangeListener(combinedRangeXYPlot0);
    assertTrue(logarithmicAxis0.isTickMarksVisible());
}",0,assertTrue(logarithmicAxis0.isTickMarksVisible())
project,0,test17111,"public void test17111() throws Throwable {
    LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(""X"");
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    logarithmicAxis0.addChangeListener(combinedRangeXYPlot0);
    assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
}",0,
project,0,test17112,"public void test17112() throws Throwable {
    LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(""X"");
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    logarithmicAxis0.addChangeListener(combinedRangeXYPlot0);
    assertTrue(logarithmicAxis0.isAxisLineVisible());
}",0,assertFalse(logarithmicAxis0.isAxisLineVisible())
project,0,test17113,"public void test17113() throws Throwable {
    LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(""X"");
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    logarithmicAxis0.addChangeListener(combinedRangeXYPlot0);
    assertTrue(logarithmicAxis0.isVisible());
}",0,assertTrue(logarithmicAxis0.isVisible())
project,0,test17114,"public void test17114() throws Throwable {
    LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(""X"");
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    logarithmicAxis0.addChangeListener(combinedRangeXYPlot0);
    assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
}",0,
project,0,test17115,"public void test17115() throws Throwable {
    LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(""X"");
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    logarithmicAxis0.addChangeListener(combinedRangeXYPlot0);
    assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
}",0,
project,0,test17116,"public void test17116() throws Throwable {
    LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(""X"");
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    logarithmicAxis0.addChangeListener(combinedRangeXYPlot0);
    assertTrue(logarithmicAxis0.isTickLabelsVisible());
}",0,assertTrue(logarithmicAxis0.isTickLabelsVisible())
project,0,test18117,"public void test18117() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 309.828, ""g0iK"");
    assertTrue(cyclicNumberAxis0.isTickMarksVisible());
}",0,assertFalse(cyclicNumberAxis0.isTickMarksVisible())
project,0,test18118,"public void test18118() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 309.828, ""g0iK"");
    cyclicNumberAxis0.setTickMarksVisible(false);
    boolean boolean0 = cyclicNumberAxis0.isTickMarksVisible();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test19119,"public void test19119() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2679.4453444254);
    Color color0 = (Color) cyclicNumberAxis0.getAxisLinePaint();
    assertTrue(cyclicNumberAxis0.isVisible());
}",0,
project,0,test19120,"public void test19120() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2679.4453444254);
    Color color0 = (Color) cyclicNumberAxis0.getAxisLinePaint();
    assertTrue(cyclicNumberAxis0.isAxisLineVisible());
}",0,
project,0,test19121,"public void test19121() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2679.4453444254);
    Color color0 = (Color) cyclicNumberAxis0.getAxisLinePaint();
    assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
}",0,
project,0,test19123,"public void test19123() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2679.4453444254);
    Color color0 = (Color) cyclicNumberAxis0.getAxisLinePaint();
    assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
}",0,
project,0,test19124,"public void test19124() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2679.4453444254);
    Color color0 = (Color) cyclicNumberAxis0.getAxisLinePaint();
    assertTrue(cyclicNumberAxis0.isTickMarksVisible());
}",0,
project,0,test19125,"public void test19125() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2679.4453444254);
    Color color0 = (Color) cyclicNumberAxis0.getAxisLinePaint();
    assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
}",0,
project,0,test19126,"public void test19126() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2679.4453444254);
    Color color0 = (Color) cyclicNumberAxis0.getAxisLinePaint();
    assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
}",0,
project,0,test20127,"public void test20127() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, ""[v7"");
    Font font0 = cyclicNumberAxis0.getTickLabelFont();
    assertTrue(cyclicNumberAxis0.isVisible());
}",0,
project,0,test20128,"public void test20128() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, ""[v7"");
    Font font0 = cyclicNumberAxis0.getTickLabelFont();
    assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
}",0,
project,0,test20129,"public void test20129() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, ""[v7"");
    Font font0 = cyclicNumberAxis0.getTickLabelFont();
    assertTrue(cyclicNumberAxis0.isAxisLineVisible());
}",0,assertFalse(cyclicNumberAxis0.isAxisLineVisible())
project,0,test20130,"public void test20130() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, ""[v7"");
    Font font0 = cyclicNumberAxis0.getTickLabelFont();
    assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
}",0,
project,0,test20131,"public void test20131() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, ""[v7"");
    Font font0 = cyclicNumberAxis0.getTickLabelFont();
    assertTrue(cyclicNumberAxis0.isTickMarksVisible());
}",0,assertTrue(cyclicNumberAxis0.isTickMarksVisible())
project,0,test20132,"public void test20132() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, ""[v7"");
    Font font0 = cyclicNumberAxis0.getTickLabelFont();
    assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
}",0,
project,0,test20133,"public void test20133() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, ""[v7"");
    Font font0 = cyclicNumberAxis0.getTickLabelFont();
    assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
}",0,
project,0,test21135,"public void test21135() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-2354.619742125702));
    double double0 = cyclicNumberAxis0.getLabelAngle();
    assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
}",0,
project,0,test21136,"public void test21136() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-2354.619742125702));
    double double0 = cyclicNumberAxis0.getLabelAngle();
    assertEquals(0.0, double0, 0.01);
}",0,
project,0,test21137,"public void test21137() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-2354.619742125702));
    double double0 = cyclicNumberAxis0.getLabelAngle();
    assertTrue(cyclicNumberAxis0.isVisible());
}",0,assertTrue(cyclicNumberAxis0.isVisible())
project,0,test21138,"public void test21138() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-2354.619742125702));
    double double0 = cyclicNumberAxis0.getLabelAngle();
    assertTrue(cyclicNumberAxis0.isTickMarksVisible());
}",0,assertTrue(cyclicNumberAxis0.isTickMarksVisible())
project,0,test21139,"public void test21139() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-2354.619742125702));
    double double0 = cyclicNumberAxis0.getLabelAngle();
    assertTrue(cyclicNumberAxis0.isAxisLineVisible());
}",0,
project,0,test21140,"public void test21140() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-2354.619742125702));
    double double0 = cyclicNumberAxis0.getLabelAngle();
    assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
}",0,assertTrue(cyclicNumberAxis0.isTickLabelsVisible())
project,0,test21141,"public void test21141() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-2354.619742125702));
    double double0 = cyclicNumberAxis0.getLabelAngle();
    assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
}",0,
project,0,test22142,"public void test22142() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""6bP8]y~(h{v?"");
    DateAxis dateAxis0 = new DateAxis(""6bP8]y~(h{v?"", timeZone0);
    dateAxis0.getAxisLineStroke();
    assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
}",0,
project,0,test22143,"public void test22143() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""6bP8]y~(h{v?"");
    DateAxis dateAxis0 = new DateAxis(""6bP8]y~(h{v?"", timeZone0);
    dateAxis0.getAxisLineStroke();
    assertTrue(dateAxis0.isAxisLineVisible());
}",0,assertFalse(dateAxis0.isAxisLineVisible())
project,0,test22144,"public void test22144() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""6bP8]y~(h{v?"");
    DateAxis dateAxis0 = new DateAxis(""6bP8]y~(h{v?"", timeZone0);
    dateAxis0.getAxisLineStroke();
    assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
}",0,
project,0,test22145,"public void test22145() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""6bP8]y~(h{v?"");
    DateAxis dateAxis0 = new DateAxis(""6bP8]y~(h{v?"", timeZone0);
    dateAxis0.getAxisLineStroke();
    assertTrue(dateAxis0.isVisible());
}",0,assertFalse(dateAxis0.isVisible())
project,0,test22146,"public void test22146() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""6bP8]y~(h{v?"");
    DateAxis dateAxis0 = new DateAxis(""6bP8]y~(h{v?"", timeZone0);
    dateAxis0.getAxisLineStroke();
    assertTrue(dateAxis0.isTickMarksVisible());
}",0,assertFalse(dateAxis0.isTickMarksVisible())
project,0,test22147,"public void test22147() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""6bP8]y~(h{v?"");
    DateAxis dateAxis0 = new DateAxis(""6bP8]y~(h{v?"", timeZone0);
    dateAxis0.getAxisLineStroke();
    assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
}",0,
project,0,test22148,"public void test22148() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""6bP8]y~(h{v?"");
    DateAxis dateAxis0 = new DateAxis(""6bP8]y~(h{v?"", timeZone0);
    dateAxis0.getAxisLineStroke();
    assertTrue(dateAxis0.isTickLabelsVisible());
}",0,assertFalse(dateAxis0.isTickLabelsVisible())
project,0,test23149,"public void test23149() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1, 0.0F, ""org.jfree.chart.text.TextFragment"");
    Font font0 = cyclicNumberAxis0.getLabelFont();
    assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
}",0,
project,0,test23150,"public void test23150() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1, 0.0F, ""org.jfree.chart.text.TextFragment"");
    Font font0 = cyclicNumberAxis0.getLabelFont();
    assertTrue(cyclicNumberAxis0.isTickMarksVisible());
}",0,assertTrue(cyclicNumberAxis0.isTickMarksVisible())
project,0,test23151,"public void test23151() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1, 0.0F, ""org.jfree.chart.text.TextFragment"");
    Font font0 = cyclicNumberAxis0.getLabelFont();
    assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
}",0,
project,0,test23152,"public void test23152() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1, 0.0F, ""org.jfree.chart.text.TextFragment"");
    Font font0 = cyclicNumberAxis0.getLabelFont();
    assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
}",0,assertTrue(cyclicNumberAxis0.isTickLabelsVisible())
project,0,test23153,"public void test23153() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1, 0.0F, ""org.jfree.chart.text.TextFragment"");
    Font font0 = cyclicNumberAxis0.getLabelFont();
    assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
}",0,
project,0,test23155,"public void test23155() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1, 0.0F, ""org.jfree.chart.text.TextFragment"");
    Font font0 = cyclicNumberAxis0.getLabelFont();
    assertTrue(cyclicNumberAxis0.isVisible());
}",0,assertTrue(cyclicNumberAxis0.isVisible())
project,0,test23156,"public void test23156() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1, 0.0F, ""org.jfree.chart.text.TextFragment"");
    Font font0 = cyclicNumberAxis0.getLabelFont();
    assertTrue(cyclicNumberAxis0.isAxisLineVisible());
}",0,assertFalse(cyclicNumberAxis0.isAxisLineVisible())
project,0,test24157,"public void test24157() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, ""org.jfree.chart.axis.Axis"");
    boolean boolean0 = cyclicNumberAxis0.isVisible();
    assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
}",0,
project,0,test24158,"public void test24158() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, ""org.jfree.chart.axis.Axis"");
    boolean boolean0 = cyclicNumberAxis0.isVisible();
    assertTrue(cyclicNumberAxis0.isAxisLineVisible());
}",0,assertFalse(cyclicNumberAxis0.isAxisLineVisible())
project,0,test24159,"public void test24159() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, ""org.jfree.chart.axis.Axis"");
    boolean boolean0 = cyclicNumberAxis0.isVisible();
    assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
}",0,
project,0,test24160,"public void test24160() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, ""org.jfree.chart.axis.Axis"");
    boolean boolean0 = cyclicNumberAxis0.isVisible();
    assertTrue(cyclicNumberAxis0.isTickMarksVisible());
}",0,
project,0,test24161,"public void test24161() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, ""org.jfree.chart.axis.Axis"");
    boolean boolean0 = cyclicNumberAxis0.isVisible();
    assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
}",0,
project,0,test24162,"public void test24162() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, ""org.jfree.chart.axis.Axis"");
    boolean boolean0 = cyclicNumberAxis0.isVisible();
    assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
}",0,
project,0,test24163,"public void test24163() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, ""org.jfree.chart.axis.Axis"");
    boolean boolean0 = cyclicNumberAxis0.isVisible();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test25164,"public void test25164() throws Throwable {
    PeriodAxis periodAxis0 = new PeriodAxis(""HorizontalAlignment.LEFT"");
    periodAxis0.getPlot();
    assertTrue(periodAxis0.isAxisLineVisible());
}",0,assertTrue(periodAxis0.isAxisLineVisible())
project,0,test25165,"public void test25165() throws Throwable {
    PeriodAxis periodAxis0 = new PeriodAxis(""HorizontalAlignment.LEFT"");
    periodAxis0.getPlot();
    assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
}",0,
project,0,test25166,"public void test25166() throws Throwable {
    PeriodAxis periodAxis0 = new PeriodAxis(""HorizontalAlignment.LEFT"");
    periodAxis0.getPlot();
    assertTrue(periodAxis0.isTickLabelsVisible());
}",0,assertTrue(periodAxis0.isTickLabelsVisible())
project,0,test25167,"public void test25167() throws Throwable {
    PeriodAxis periodAxis0 = new PeriodAxis(""HorizontalAlignment.LEFT"");
    periodAxis0.getPlot();
    assertTrue(periodAxis0.isVisible());
}",0,assertFalse(periodAxis0.isVisible())
project,0,test25168,"public void test25168() throws Throwable {
    PeriodAxis periodAxis0 = new PeriodAxis(""HorizontalAlignment.LEFT"");
    periodAxis0.getPlot();
    assertTrue(periodAxis0.isTickMarksVisible());
}",0,assertTrue(periodAxis0.isTickMarksVisible())
project,0,test25169,"public void test25169() throws Throwable {
    PeriodAxis periodAxis0 = new PeriodAxis(""HorizontalAlignment.LEFT"");
    periodAxis0.getPlot();
    assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
}",0,
project,0,test25170,"public void test25170() throws Throwable {
    PeriodAxis periodAxis0 = new PeriodAxis(""HorizontalAlignment.LEFT"");
    periodAxis0.getPlot();
    assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
}",0,
project,0,test26171,"public void test26171() throws Throwable {
    DateAxis dateAxis0 = new DateAxis();
    Color color0 = (Color) dateAxis0.getTickLabelPaint();
    assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
}",0,
project,0,test26172,"public void test26172() throws Throwable {
    DateAxis dateAxis0 = new DateAxis();
    Color color0 = (Color) dateAxis0.getTickLabelPaint();
    assertTrue(dateAxis0.isTickMarksVisible());
}",0,assertFalse(dateAxis0.isTickMarksVisible())
project,0,test26173,"public void test26173() throws Throwable {
    DateAxis dateAxis0 = new DateAxis();
    Color color0 = (Color) dateAxis0.getTickLabelPaint();
    assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
}",0,
project,0,test26174,"public void test26174() throws Throwable {
    DateAxis dateAxis0 = new DateAxis();
    Color color0 = (Color) dateAxis0.getTickLabelPaint();
    assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
}",0,
project,0,test26175,"public void test26175() throws Throwable {
    DateAxis dateAxis0 = new DateAxis();
    Color color0 = (Color) dateAxis0.getTickLabelPaint();
    assertTrue(dateAxis0.isAxisLineVisible());
}",0,assertFalse(dateAxis0.isAxisLineVisible())
project,0,test26176,"public void test26176() throws Throwable {
    DateAxis dateAxis0 = new DateAxis();
    Color color0 = (Color) dateAxis0.getTickLabelPaint();
    assertTrue(dateAxis0.isTickLabelsVisible());
}",0,assertFalse(dateAxis0.isTickLabelsVisible())
project,0,test26178,"public void test26178() throws Throwable {
    DateAxis dateAxis0 = new DateAxis();
    Color color0 = (Color) dateAxis0.getTickLabelPaint();
    assertTrue(dateAxis0.isVisible());
}",0,assertFalse(dateAxis0.isVisible())
project,0,test27179,"public void test27179() throws Throwable {
    LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(""r9i `5'939m{}T0"");
    RectangleInsets rectangleInsets0 = logarithmicAxis0.getTickLabelInsets();
    assertTrue(logarithmicAxis0.isTickMarksVisible());
}",0,assertTrue(logarithmicAxis0.isTickMarksVisible())
project,0,test27180,"public void test27180() throws Throwable {
    LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(""r9i `5'939m{}T0"");
    RectangleInsets rectangleInsets0 = logarithmicAxis0.getTickLabelInsets();
    assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
}",0,
project,0,test27181,"public void test27181() throws Throwable {
    LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(""r9i `5'939m{}T0"");
    RectangleInsets rectangleInsets0 = logarithmicAxis0.getTickLabelInsets();
    assertTrue(logarithmicAxis0.isTickLabelsVisible());
}",0,assertTrue(logarithmicAxis0.isTickLabelsVisible())
project,0,test27182,"public void test27182() throws Throwable {
    LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(""r9i `5'939m{}T0"");
    RectangleInsets rectangleInsets0 = logarithmicAxis0.getTickLabelInsets();
    assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
}",0,
project,0,test27183,"public void test27183() throws Throwable {
    LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(""r9i `5'939m{}T0"");
    RectangleInsets rectangleInsets0 = logarithmicAxis0.getTickLabelInsets();
    assertTrue(logarithmicAxis0.isAxisLineVisible());
}",0,assertTrue(logarithmicAxis0.isAxisLineVisible())
project,0,test27184,"public void test27184() throws Throwable {
    LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(""r9i `5'939m{}T0"");
    RectangleInsets rectangleInsets0 = logarithmicAxis0.getTickLabelInsets();
    assertTrue(logarithmicAxis0.isVisible());
}",0,
project,0,test27185,"public void test27185() throws Throwable {
    LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(""r9i `5'939m{}T0"");
    RectangleInsets rectangleInsets0 = logarithmicAxis0.getTickLabelInsets();
    assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
}",0,
project,0,test27186,"public void test27186() throws Throwable {
    LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(""r9i `5'939m{}T0"");
    RectangleInsets rectangleInsets0 = logarithmicAxis0.getTickLabelInsets();
    assertEquals(4.0, rectangleInsets0.getLeft(), 0.01);
}",0,
project,0,test28187,"public void test28187() throws Throwable {
    LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis((String) null);
    logarithmicAxis0.getTickMarkStroke();
    assertTrue(logarithmicAxis0.isTickMarksVisible());
}",0,
project,0,test28188,"public void test28188() throws Throwable {
    LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis((String) null);
    logarithmicAxis0.getTickMarkStroke();
    assertTrue(logarithmicAxis0.isVisible());
}",0,assertTrue(logarithmicAxis0.isVisible())
project,0,test28189,"public void test28189() throws Throwable {
    LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis((String) null);
    logarithmicAxis0.getTickMarkStroke();
    assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
}",0,
project,0,test28190,"public void test28190() throws Throwable {
    LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis((String) null);
    logarithmicAxis0.getTickMarkStroke();
    assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
}",0,
project,0,test28191,"public void test28191() throws Throwable {
    LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis((String) null);
    logarithmicAxis0.getTickMarkStroke();
    assertTrue(logarithmicAxis0.isAxisLineVisible());
}",0,
project,0,test28192,"public void test28192() throws Throwable {
    LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis((String) null);
    logarithmicAxis0.getTickMarkStroke();
    assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
}",0,
project,0,test28193,"public void test28193() throws Throwable {
    LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis((String) null);
    logarithmicAxis0.getTickMarkStroke();
    assertTrue(logarithmicAxis0.isTickLabelsVisible());
}",0,assertTrue(logarithmicAxis0.isTickLabelsVisible())
project,0,test29194,"public void test29194() throws Throwable {
    ZoneInfo zoneInfo0 = (ZoneInfo) RegularTimePeriod.DEFAULT_TIME_ZONE;
    DateAxis dateAxis0 = new DateAxis(""sYZwccxsFNxVh!"", zoneInfo0);
    double double0 = dateAxis0.getFixedDimension();
    assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
}",0,
project,0,test29195,"public void test29195() throws Throwable {
    ZoneInfo zoneInfo0 = (ZoneInfo) RegularTimePeriod.DEFAULT_TIME_ZONE;
    DateAxis dateAxis0 = new DateAxis(""sYZwccxsFNxVh!"", zoneInfo0);
    double double0 = dateAxis0.getFixedDimension();
    assertTrue(dateAxis0.isTickLabelsVisible());
}",0,assertTrue(dateAxis0.isTickLabelsVisible())
project,0,test29196,"public void test29196() throws Throwable {
    ZoneInfo zoneInfo0 = (ZoneInfo) RegularTimePeriod.DEFAULT_TIME_ZONE;
    DateAxis dateAxis0 = new DateAxis(""sYZwccxsFNxVh!"", zoneInfo0);
    double double0 = dateAxis0.getFixedDimension();
    assertTrue(dateAxis0.isVisible());
}",0,assertTrue(dateAxis0.isVisible())
project,0,test29197,"public void test29197() throws Throwable {
    ZoneInfo zoneInfo0 = (ZoneInfo) RegularTimePeriod.DEFAULT_TIME_ZONE;
    DateAxis dateAxis0 = new DateAxis(""sYZwccxsFNxVh!"", zoneInfo0);
    double double0 = dateAxis0.getFixedDimension();
    assertTrue(dateAxis0.isTickMarksVisible());
}",0,assertTrue(dateAxis0.isTickMarksVisible())
project,0,test29198,"public void test29198() throws Throwable {
    ZoneInfo zoneInfo0 = (ZoneInfo) RegularTimePeriod.DEFAULT_TIME_ZONE;
    DateAxis dateAxis0 = new DateAxis(""sYZwccxsFNxVh!"", zoneInfo0);
    double double0 = dateAxis0.getFixedDimension();
    assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
}",0,
project,0,test29199,"public void test29199() throws Throwable {
    ZoneInfo zoneInfo0 = (ZoneInfo) RegularTimePeriod.DEFAULT_TIME_ZONE;
    DateAxis dateAxis0 = new DateAxis(""sYZwccxsFNxVh!"", zoneInfo0);
    double double0 = dateAxis0.getFixedDimension();
    assertEquals(0.0, double0, 0.01);
}",0,
project,0,test29200,"public void test29200() throws Throwable {
    ZoneInfo zoneInfo0 = (ZoneInfo) RegularTimePeriod.DEFAULT_TIME_ZONE;
    DateAxis dateAxis0 = new DateAxis(""sYZwccxsFNxVh!"", zoneInfo0);
    double double0 = dateAxis0.getFixedDimension();
    assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
}",0,
project,0,test29201,"public void test29201() throws Throwable {
    ZoneInfo zoneInfo0 = (ZoneInfo) RegularTimePeriod.DEFAULT_TIME_ZONE;
    DateAxis dateAxis0 = new DateAxis(""sYZwccxsFNxVh!"", zoneInfo0);
    double double0 = dateAxis0.getFixedDimension();
    assertTrue(dateAxis0.isAxisLineVisible());
}",0,
project,0,test30202,"public void test30202() throws Throwable {
    ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis(""M znijI]xx5~"");
    float float0 = extendedCategoryAxis0.getTickMarkOutsideLength();
    assertEquals(2.0F, float0, 0.01F);
}",0,
project,0,test30203,"public void test30203() throws Throwable {
    ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis(""M znijI]xx5~"");
    float float0 = extendedCategoryAxis0.getTickMarkOutsideLength();
    assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
}",0,
project,0,test30204,"public void test30204() throws Throwable {
    ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis(""M znijI]xx5~"");
    float float0 = extendedCategoryAxis0.getTickMarkOutsideLength();
    assertFalse(extendedCategoryAxis0.isTickMarksVisible());
}",0,assertTrue(extendedCategoryAxis0.isTickMarksVisible())
project,0,test30205,"public void test30205() throws Throwable {
    ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis(""M znijI]xx5~"");
    float float0 = extendedCategoryAxis0.getTickMarkOutsideLength();
    assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
}",0,
project,0,test30206,"public void test30206() throws Throwable {
    ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis(""M znijI]xx5~"");
    float float0 = extendedCategoryAxis0.getTickMarkOutsideLength();
    assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
}",0,assertTrue(extendedCategoryAxis0.isTickLabelsVisible())
project,0,test30207,"public void test30207() throws Throwable {
    ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis(""M znijI]xx5~"");
    float float0 = extendedCategoryAxis0.getTickMarkOutsideLength();
    assertTrue(extendedCategoryAxis0.isAxisLineVisible());
}",0,assertTrue(extendedCategoryAxis0.isAxisLineVisible())
project,0,test30208,"public void test30208() throws Throwable {
    ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis(""M znijI]xx5~"");
    float float0 = extendedCategoryAxis0.getTickMarkOutsideLength();
    assertTrue(extendedCategoryAxis0.isVisible());
}",0,assertTrue(extendedCategoryAxis0.isVisible())
project,0,test31209,"public void test31209() throws Throwable {
    CategoryAxis categoryAxis0 = new CategoryAxis();
    assertTrue(categoryAxis0.isAxisLineVisible());
}",0,
project,0,test31210,"public void test31210() throws Throwable {
    CategoryAxis categoryAxis0 = new CategoryAxis();
    categoryAxis0.setAxisLineVisible(false);
    assertFalse(categoryAxis0.isAxisLineVisible());
}",0,assertFalse(categoryAxis0.isAxisLineVisible())
project,0,test32211,"public void test32211() throws Throwable {
    DateAxis dateAxis0 = new DateAxis();
    RectangleInsets rectangleInsets0 = dateAxis0.getLabelInsets();
    assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
}",0,
project,0,test32212,"public void test32212() throws Throwable {
    DateAxis dateAxis0 = new DateAxis();
    RectangleInsets rectangleInsets0 = dateAxis0.getLabelInsets();
    assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
}",0,
project,0,test32213,"public void test32213() throws Throwable {
    DateAxis dateAxis0 = new DateAxis();
    RectangleInsets rectangleInsets0 = dateAxis0.getLabelInsets();
    assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
}",0,
project,0,test32214,"public void test32214() throws Throwable {
    DateAxis dateAxis0 = new DateAxis();
    RectangleInsets rectangleInsets0 = dateAxis0.getLabelInsets();
    assertTrue(dateAxis0.isAxisLineVisible());
}",0,assertFalse(dateAxis0.isAxisLineVisible())
project,0,test32215,"public void test32215() throws Throwable {
    DateAxis dateAxis0 = new DateAxis();
    RectangleInsets rectangleInsets0 = dateAxis0.getLabelInsets();
    assertTrue(dateAxis0.isTickLabelsVisible());
}",0,
project,0,test32216,"public void test32216() throws Throwable {
    DateAxis dateAxis0 = new DateAxis();
    RectangleInsets rectangleInsets0 = dateAxis0.getLabelInsets();
    assertEquals(3.0, rectangleInsets0.getTop(), 0.01);
}",0,
project,0,test32217,"public void test32217() throws Throwable {
    DateAxis dateAxis0 = new DateAxis();
    RectangleInsets rectangleInsets0 = dateAxis0.getLabelInsets();
    assertTrue(dateAxis0.isVisible());
}",0,assertFalse(dateAxis0.isVisible())
project,0,test32218,"public void test32218() throws Throwable {
    DateAxis dateAxis0 = new DateAxis();
    RectangleInsets rectangleInsets0 = dateAxis0.getLabelInsets();
    assertTrue(dateAxis0.isTickMarksVisible());
}",0,assertTrue(dateAxis0.isTickMarksVisible())
project,0,test33219,"public void test33219() throws Throwable {
    DateAxis dateAxis0 = new DateAxis();
    Color color0 = (Color) dateAxis0.getLabelPaint();
    assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
}",0,
project,0,test33220,"public void test33220() throws Throwable {
    DateAxis dateAxis0 = new DateAxis();
    Color color0 = (Color) dateAxis0.getLabelPaint();
    assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
}",0,
project,0,test33221,"public void test33221() throws Throwable {
    DateAxis dateAxis0 = new DateAxis();
    Color color0 = (Color) dateAxis0.getLabelPaint();
    assertTrue(dateAxis0.isTickMarksVisible());
}",0,assertTrue(dateAxis0.isTickMarksVisible())
project,0,test33222,"public void test33222() throws Throwable {
    DateAxis dateAxis0 = new DateAxis();
    Color color0 = (Color) dateAxis0.getLabelPaint();
    assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
}",0,
project,0,test33223,"public void test33223() throws Throwable {
    DateAxis dateAxis0 = new DateAxis();
    Color color0 = (Color) dateAxis0.getLabelPaint();
    assertTrue(dateAxis0.isVisible());
}",0,assertFalse(dateAxis0.isVisible())
project,0,test33224,"public void test33224() throws Throwable {
    DateAxis dateAxis0 = new DateAxis();
    Color color0 = (Color) dateAxis0.getLabelPaint();
    assertTrue(dateAxis0.isAxisLineVisible());
}",0,assertFalse(dateAxis0.isAxisLineVisible())
project,0,test33225,"public void test33225() throws Throwable {
    DateAxis dateAxis0 = new DateAxis();
    Color color0 = (Color) dateAxis0.getLabelPaint();
    assertTrue(dateAxis0.isTickLabelsVisible());
}",0,assertFalse(dateAxis0.isTickLabelsVisible())
project,0,test34227,"public void test34227() throws Throwable {
    LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis((String) null);
    float float0 = logarithmicAxis0.getTickMarkInsideLength();
    assertTrue(logarithmicAxis0.isAxisLineVisible());
}",0,assertFalse(logarithmicAxis0.isAxisLineVisible())
project,0,test34228,"public void test34228() throws Throwable {
    LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis((String) null);
    float float0 = logarithmicAxis0.getTickMarkInsideLength();
    assertTrue(logarithmicAxis0.isTickLabelsVisible());
}",0,assertFalse(logarithmicAxis0.isTickLabelsVisible())
project,0,test34229,"public void test34229() throws Throwable {
    LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis((String) null);
    float float0 = logarithmicAxis0.getTickMarkInsideLength();
    assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
}",0,
project,0,test34230,"public void test34230() throws Throwable {
    LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis((String) null);
    float float0 = logarithmicAxis0.getTickMarkInsideLength();
    assertEquals(0.0F, float0, 0.01F);
}",0,
project,0,test34231,"public void test34231() throws Throwable {
    LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis((String) null);
    float float0 = logarithmicAxis0.getTickMarkInsideLength();
    assertTrue(logarithmicAxis0.isVisible());
}",0,
project,0,test34232,"public void test34232() throws Throwable {
    LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis((String) null);
    float float0 = logarithmicAxis0.getTickMarkInsideLength();
    assertTrue(logarithmicAxis0.isTickMarksVisible());
}",0,assertFalse(logarithmicAxis0.isTickMarksVisible())
project,0,test34233,"public void test34233() throws Throwable {
    LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis((String) null);
    float float0 = logarithmicAxis0.getTickMarkInsideLength();
    assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
}",0,
project,0,test35234,"public void test35234() throws Throwable {
    CategoryAxis categoryAxis0 = new CategoryAxis(""N3Cvx5H#52#K"");
    categoryAxis0.getLabel();
    assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
}",0,
project,0,test35235,"public void test35235() throws Throwable {
    CategoryAxis categoryAxis0 = new CategoryAxis(""N3Cvx5H#52#K"");
    categoryAxis0.getLabel();
    assertTrue(categoryAxis0.isAxisLineVisible());
}",0,
project,0,test35236,"public void test35236() throws Throwable {
    CategoryAxis categoryAxis0 = new CategoryAxis(""N3Cvx5H#52#K"");
    categoryAxis0.getLabel();
    assertTrue(categoryAxis0.isVisible());
}",0,assertTrue(categoryAxis0.isVisible())
project,0,test35237,"public void test35237() throws Throwable {
    CategoryAxis categoryAxis0 = new CategoryAxis(""N3Cvx5H#52#K"");
    categoryAxis0.getLabel();
    assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
}",0,
project,0,test35238,"public void test35238() throws Throwable {
    CategoryAxis categoryAxis0 = new CategoryAxis(""N3Cvx5H#52#K"");
    categoryAxis0.getLabel();
    assertFalse(categoryAxis0.isTickMarksVisible());
}",0,assertTrue(categoryAxis0.isTickMarksVisible())
project,0,test35239,"public void test35239() throws Throwable {
    CategoryAxis categoryAxis0 = new CategoryAxis(""N3Cvx5H#52#K"");
    categoryAxis0.getLabel();
    assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
}",0,
project,0,test35240,"public void test35240() throws Throwable {
    CategoryAxis categoryAxis0 = new CategoryAxis(""N3Cvx5H#52#K"");
    categoryAxis0.getLabel();
    assertTrue(categoryAxis0.isTickLabelsVisible());
}",0,assertTrue(categoryAxis0.isTickLabelsVisible())
project,0,test36241,"public void test36241() throws Throwable {
    CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
    boolean boolean0 = categoryAxis3D0.isAxisLineVisible();
    assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
}",0,
project,0,test36242,"public void test36242() throws Throwable {
    CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
    boolean boolean0 = categoryAxis3D0.isAxisLineVisible();
    assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
}",0,
project,0,test36243,"public void test36243() throws Throwable {
    CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
    boolean boolean0 = categoryAxis3D0.isAxisLineVisible();
    assertTrue(categoryAxis3D0.isTickLabelsVisible());
}",0,assertTrue(categoryAxis3D0.isTickLabelsVisible())
project,0,test36244,"public void test36244() throws Throwable {
    CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
    boolean boolean0 = categoryAxis3D0.isAxisLineVisible();
    assertFalse(categoryAxis3D0.isTickMarksVisible());
}",0,assertTrue(categoryAxis3D0.isTickMarksVisible())
project,0,test36245,"public void test36245() throws Throwable {
    CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
    boolean boolean0 = categoryAxis3D0.isAxisLineVisible();
    assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
}",0,
project,0,test36246,"public void test36246() throws Throwable {
    CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
    boolean boolean0 = categoryAxis3D0.isAxisLineVisible();
    assertTrue(categoryAxis3D0.isVisible());
}",0,
project,0,test36247,"public void test36247() throws Throwable {
    CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
    boolean boolean0 = categoryAxis3D0.isAxisLineVisible();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test37248,"public void test37248() throws Throwable {
    Hour hour0 = new Hour();
    PeriodAxis periodAxis0 = new PeriodAxis(""/>"", hour0, hour0, hour0.DEFAULT_TIME_ZONE);
    PolarPlot polarPlot0 = new PolarPlot((XYDataset) null, periodAxis0, (PolarItemRenderer) null);
    periodAxis0.setPlot(polarPlot0);
    assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
}",0,
project,0,test37249,"public void test37249() throws Throwable {
    Hour hour0 = new Hour();
    PeriodAxis periodAxis0 = new PeriodAxis(""/>"", hour0, hour0, hour0.DEFAULT_TIME_ZONE);
    PolarPlot polarPlot0 = new PolarPlot((XYDataset) null, periodAxis0, (PolarItemRenderer) null);
    periodAxis0.setPlot(polarPlot0);
    assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
}",0,
project,0,test37250,"public void test37250() throws Throwable {
    Hour hour0 = new Hour();
    PeriodAxis periodAxis0 = new PeriodAxis(""/>"", hour0, hour0, hour0.DEFAULT_TIME_ZONE);
    PolarPlot polarPlot0 = new PolarPlot((XYDataset) null, periodAxis0, (PolarItemRenderer) null);
    periodAxis0.setPlot(polarPlot0);
    assertTrue(periodAxis0.isTickMarksVisible());
}",0,assertTrue(periodAxis0.isTickMarksVisible())
project,0,test37251,"public void test37251() throws Throwable {
    Hour hour0 = new Hour();
    PeriodAxis periodAxis0 = new PeriodAxis(""/>"", hour0, hour0, hour0.DEFAULT_TIME_ZONE);
    PolarPlot polarPlot0 = new PolarPlot((XYDataset) null, periodAxis0, (PolarItemRenderer) null);
    periodAxis0.setPlot(polarPlot0);
    assertTrue(periodAxis0.isVisible());
}",0,assertTrue(periodAxis0.isVisible())
project,0,test37252,"public void test37252() throws Throwable {
    Hour hour0 = new Hour();
    PeriodAxis periodAxis0 = new PeriodAxis(""/>"", hour0, hour0, hour0.DEFAULT_TIME_ZONE);
    PolarPlot polarPlot0 = new PolarPlot((XYDataset) null, periodAxis0, (PolarItemRenderer) null);
    periodAxis0.setPlot(polarPlot0);
    assertTrue(periodAxis0.isTickLabelsVisible());
}",0,assertTrue(periodAxis0.isTickLabelsVisible())
project,0,test37253,"public void test37253() throws Throwable {
    Hour hour0 = new Hour();
    PeriodAxis periodAxis0 = new PeriodAxis(""/>"", hour0, hour0, hour0.DEFAULT_TIME_ZONE);
    PolarPlot polarPlot0 = new PolarPlot((XYDataset) null, periodAxis0, (PolarItemRenderer) null);
    periodAxis0.setPlot(polarPlot0);
    assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
}",0,
project,0,test37254,"public void test37254() throws Throwable {
    Hour hour0 = new Hour();
    PeriodAxis periodAxis0 = new PeriodAxis(""/>"", hour0, hour0, hour0.DEFAULT_TIME_ZONE);
    PolarPlot polarPlot0 = new PolarPlot((XYDataset) null, periodAxis0, (PolarItemRenderer) null);
    periodAxis0.setPlot(polarPlot0);
    assertTrue(periodAxis0.isAxisLineVisible());
}",0,
project,0,test38255,"public void test38255() throws Throwable {
    NumberAxis numberAxis0 = new NumberAxis("""");
    boolean boolean0 = numberAxis0.isTickLabelsVisible();
    assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
}",0,
project,0,test38256,"public void test38256() throws Throwable {
    NumberAxis numberAxis0 = new NumberAxis("""");
    boolean boolean0 = numberAxis0.isTickLabelsVisible();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test38257,"public void test38257() throws Throwable {
    NumberAxis numberAxis0 = new NumberAxis("""");
    boolean boolean0 = numberAxis0.isTickLabelsVisible();
    assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
}",0,
project,0,test38258,"public void test38258() throws Throwable {
    NumberAxis numberAxis0 = new NumberAxis("""");
    boolean boolean0 = numberAxis0.isTickLabelsVisible();
    assertTrue(numberAxis0.isAxisLineVisible());
}",0,assertFalse(numberAxis0.isAxisLineVisible())
project,0,test38259,"public void test38259() throws Throwable {
    NumberAxis numberAxis0 = new NumberAxis("""");
    boolean boolean0 = numberAxis0.isTickLabelsVisible();
    assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
}",0,
project,0,test38260,"public void test38260() throws Throwable {
    NumberAxis numberAxis0 = new NumberAxis("""");
    boolean boolean0 = numberAxis0.isTickLabelsVisible();
    assertTrue(numberAxis0.isVisible());
}",0,
project,0,test38261,"public void test38261() throws Throwable {
    NumberAxis numberAxis0 = new NumberAxis("""");
    boolean boolean0 = numberAxis0.isTickLabelsVisible();
    assertTrue(numberAxis0.isTickMarksVisible());
}",0,assertFalse(numberAxis0.isTickMarksVisible())
project,0,test39262,"public void test39262() throws Throwable {
    DateAxis dateAxis0 = new DateAxis("""");
    Color color0 = (Color) dateAxis0.getTickMarkPaint();
    assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
}",0,
project,0,test39263,"public void test39263() throws Throwable {
    DateAxis dateAxis0 = new DateAxis("""");
    Color color0 = (Color) dateAxis0.getTickMarkPaint();
    assertTrue(dateAxis0.isTickMarksVisible());
}",0,assertTrue(dateAxis0.isTickMarksVisible())
project,0,test39264,"public void test39264() throws Throwable {
    DateAxis dateAxis0 = new DateAxis("""");
    Color color0 = (Color) dateAxis0.getTickMarkPaint();
    assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
}",0,
project,0,test39265,"public void test39265() throws Throwable {
    DateAxis dateAxis0 = new DateAxis("""");
    Color color0 = (Color) dateAxis0.getTickMarkPaint();
    assertTrue(dateAxis0.isAxisLineVisible());
}",0,assertFalse(dateAxis0.isAxisLineVisible())
project,0,test39266,"public void test39266() throws Throwable {
    DateAxis dateAxis0 = new DateAxis("""");
    Color color0 = (Color) dateAxis0.getTickMarkPaint();
    assertTrue(dateAxis0.isTickLabelsVisible());
}",0,assertFalse(dateAxis0.isTickLabelsVisible())
project,0,test39267,"public void test39267() throws Throwable {
    DateAxis dateAxis0 = new DateAxis("""");
    Color color0 = (Color) dateAxis0.getTickMarkPaint();
    assertTrue(dateAxis0.isVisible());
}",0,assertFalse(dateAxis0.isVisible())
project,0,test39268,"public void test39268() throws Throwable {
    DateAxis dateAxis0 = new DateAxis("""");
    Color color0 = (Color) dateAxis0.getTickMarkPaint();
    assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
}",0,
project,0,test40270,"public void test40270() throws Throwable {
    ThermometerPlot thermometerPlot0 = new ThermometerPlot();
    ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
    boolean boolean0 = valueAxis0.isTickMarksVisible();
    assertFalse(valueAxis0.isAxisLineVisible());
}",0,
project,0,test40271,"public void test40271() throws Throwable {
    ThermometerPlot thermometerPlot0 = new ThermometerPlot();
    ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
    boolean boolean0 = valueAxis0.isTickMarksVisible();
    assertEquals(0.0F, valueAxis0.getTickMarkInsideLength(), 0.01F);
}",0,
project,0,test40272,"public void test40272() throws Throwable {
    ThermometerPlot thermometerPlot0 = new ThermometerPlot();
    ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
    boolean boolean0 = valueAxis0.isTickMarksVisible();
    assertEquals(0.0, valueAxis0.getLabelAngle(), 0.01);
}",0,
project,0,test40273,"public void test40273() throws Throwable {
    ThermometerPlot thermometerPlot0 = new ThermometerPlot();
    ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
    boolean boolean0 = valueAxis0.isTickMarksVisible();
    assertTrue(valueAxis0.isVisible());
}",0,
project,0,test40274,"public void test40274() throws Throwable {
    ThermometerPlot thermometerPlot0 = new ThermometerPlot();
    ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
    boolean boolean0 = valueAxis0.isTickMarksVisible();
    assertTrue(valueAxis0.isTickLabelsVisible());
}",0,assertTrue(valueAxis0.isTickLabelsVisible())
project,0,test40275,"public void test40275() throws Throwable {
    ThermometerPlot thermometerPlot0 = new ThermometerPlot();
    ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
    boolean boolean0 = valueAxis0.isTickMarksVisible();
    assertEquals(2.0F, valueAxis0.getTickMarkOutsideLength(), 0.01F);
}",0,
project,0,test40276,"public void test40276() throws Throwable {
    ThermometerPlot thermometerPlot0 = new ThermometerPlot();
    ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
    boolean boolean0 = valueAxis0.isTickMarksVisible();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test41277,"public void test41277() throws Throwable {
    NumberAxis3D numberAxis3D0 = new NumberAxis3D();
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0);
    boolean boolean0 = numberAxis3D0.equals(cyclicNumberAxis0);
    assertTrue(cyclicNumberAxis0.isVisible());
}",0,assertTrue(cyclicNumberAxis0.isVisible())
project,0,test41278,"public void test41278() throws Throwable {
    NumberAxis3D numberAxis3D0 = new NumberAxis3D();
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0);
    boolean boolean0 = numberAxis3D0.equals(cyclicNumberAxis0);
    assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
}",0,
project,0,test41279,"public void test41279() throws Throwable {
    NumberAxis3D numberAxis3D0 = new NumberAxis3D();
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0);
    boolean boolean0 = numberAxis3D0.equals(cyclicNumberAxis0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test41280,"public void test41280() throws Throwable {
    NumberAxis3D numberAxis3D0 = new NumberAxis3D();
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0);
    boolean boolean0 = numberAxis3D0.equals(cyclicNumberAxis0);
    assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
}",0,
project,0,test41281,"public void test41281() throws Throwable {
    NumberAxis3D numberAxis3D0 = new NumberAxis3D();
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0);
    boolean boolean0 = numberAxis3D0.equals(cyclicNumberAxis0);
    assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
}",0,
project,0,test41282,"public void test41282() throws Throwable {
    NumberAxis3D numberAxis3D0 = new NumberAxis3D();
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0);
    boolean boolean0 = numberAxis3D0.equals(cyclicNumberAxis0);
    assertTrue(cyclicNumberAxis0.isTickMarksVisible());
}",0,assertFalse(cyclicNumberAxis0.isTickMarksVisible())
project,0,test41283,"public void test41283() throws Throwable {
    NumberAxis3D numberAxis3D0 = new NumberAxis3D();
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0);
    boolean boolean0 = numberAxis3D0.equals(cyclicNumberAxis0);
    assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
}",0,
project,0,test42284,"public void test42284() throws Throwable {
    SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis(""Null 'insets' argument."");
    Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
    RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
    PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
    // Undeclared exception!
    try {
        subCategoryAxis0.draw((Graphics2D) null, 1.0E-8, rectangle2D_Double0, rectangle2D_Double0, rectangleEdge0, plotRenderingInfo0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jfree.chart.axis.Axis"", e);
    }
}",0,
project,0,test43285,"public void test43285() throws Throwable {
    SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis(""Null 'insets' argument."");
    Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
    RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
    PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
    // Undeclared exception!
    try {
        subCategoryAxis0.draw((Graphics2D) null, 1.0E-8, rectangle2D_Double0, rectangle2D_Double0, rectangleEdge0, plotRenderingInfo0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jfree.chart.axis.Axis"", e);
    }
}",0,
project,0,test44286,"public void test44286() throws Throwable {
    SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis(""Null 'insets' argument."");
    Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
    RectangleEdge rectangleEdge0 = Title.DEFAULT_POSITION;
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
    PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
    // Undeclared exception!
    try {
        subCategoryAxis0.draw((Graphics2D) null, 1.0E-8, rectangle2D_Double0, rectangle2D_Double0, rectangleEdge0, plotRenderingInfo0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jfree.chart.axis.Axis"", e);
    }
}",0,
project,0,test45287,"public void test45287() throws Throwable {
    SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis(""Null 'insets' argument."");
    Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
    RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
    PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
    // Undeclared exception!
    try {
        subCategoryAxis0.draw((Graphics2D) null, 1.0E-8, rectangle2D_Double0, rectangle2D_Double0, rectangleEdge0, plotRenderingInfo0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jfree.chart.axis.Axis"", e);
    }
}",0,
project,0,test46288,"public void test46288() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(3.0, ""Null 'stroke' argument."");
    float[][] floatArray0 = new float[2][1];
    FastScatterPlot fastScatterPlot0 = new FastScatterPlot(floatArray0, cyclicNumberAxis0, cyclicNumberAxis0);
    PeriodAxis periodAxis0 = new PeriodAxis(""0m-'*"");
    JFreeChart jFreeChart0 = new JFreeChart(""0m-'*"", periodAxis0.DEFAULT_AXIS_LABEL_FONT, fastScatterPlot0, true);
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
    chartRenderingInfo0.setEntityCollection((EntityCollection) null);
    jFreeChart0.createBufferedImage(1913, 500, chartRenderingInfo0);
    assertTrue(periodAxis0.isAxisLineVisible());
}",0,assertFalse(periodAxis0.isAxisLineVisible())
project,0,test46289,"public void test46289() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(3.0, ""Null 'stroke' argument."");
    float[][] floatArray0 = new float[2][1];
    FastScatterPlot fastScatterPlot0 = new FastScatterPlot(floatArray0, cyclicNumberAxis0, cyclicNumberAxis0);
    PeriodAxis periodAxis0 = new PeriodAxis(""0m-'*"");
    JFreeChart jFreeChart0 = new JFreeChart(""0m-'*"", periodAxis0.DEFAULT_AXIS_LABEL_FONT, fastScatterPlot0, true);
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
    chartRenderingInfo0.setEntityCollection((EntityCollection) null);
    jFreeChart0.createBufferedImage(1913, 500, chartRenderingInfo0);
    assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
}",0,
project,0,test46290,"public void test46290() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(3.0, ""Null 'stroke' argument."");
    float[][] floatArray0 = new float[2][1];
    FastScatterPlot fastScatterPlot0 = new FastScatterPlot(floatArray0, cyclicNumberAxis0, cyclicNumberAxis0);
    PeriodAxis periodAxis0 = new PeriodAxis(""0m-'*"");
    JFreeChart jFreeChart0 = new JFreeChart(""0m-'*"", periodAxis0.DEFAULT_AXIS_LABEL_FONT, fastScatterPlot0, true);
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
    chartRenderingInfo0.setEntityCollection((EntityCollection) null);
    jFreeChart0.createBufferedImage(1913, 500, chartRenderingInfo0);
    assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
}",0,
project,0,test46291,"public void test46291() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(3.0, ""Null 'stroke' argument."");
    float[][] floatArray0 = new float[2][1];
    FastScatterPlot fastScatterPlot0 = new FastScatterPlot(floatArray0, cyclicNumberAxis0, cyclicNumberAxis0);
    PeriodAxis periodAxis0 = new PeriodAxis(""0m-'*"");
    JFreeChart jFreeChart0 = new JFreeChart(""0m-'*"", periodAxis0.DEFAULT_AXIS_LABEL_FONT, fastScatterPlot0, true);
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
    chartRenderingInfo0.setEntityCollection((EntityCollection) null);
    jFreeChart0.createBufferedImage(1913, 500, chartRenderingInfo0);
    assertTrue(periodAxis0.isTickMarksVisible());
}",0,assertTrue(periodAxis0.isTickMarksVisible())
project,0,test46292,"public void test46292() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(3.0, ""Null 'stroke' argument."");
    float[][] floatArray0 = new float[2][1];
    FastScatterPlot fastScatterPlot0 = new FastScatterPlot(floatArray0, cyclicNumberAxis0, cyclicNumberAxis0);
    PeriodAxis periodAxis0 = new PeriodAxis(""0m-'*"");
    JFreeChart jFreeChart0 = new JFreeChart(""0m-'*"", periodAxis0.DEFAULT_AXIS_LABEL_FONT, fastScatterPlot0, true);
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
    chartRenderingInfo0.setEntityCollection((EntityCollection) null);
    jFreeChart0.createBufferedImage(1913, 500, chartRenderingInfo0);
    assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
}",0,
project,0,test46293,"public void test46293() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(3.0, ""Null 'stroke' argument."");
    float[][] floatArray0 = new float[2][1];
    FastScatterPlot fastScatterPlot0 = new FastScatterPlot(floatArray0, cyclicNumberAxis0, cyclicNumberAxis0);
    PeriodAxis periodAxis0 = new PeriodAxis(""0m-'*"");
    JFreeChart jFreeChart0 = new JFreeChart(""0m-'*"", periodAxis0.DEFAULT_AXIS_LABEL_FONT, fastScatterPlot0, true);
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
    chartRenderingInfo0.setEntityCollection((EntityCollection) null);
    jFreeChart0.createBufferedImage(1913, 500, chartRenderingInfo0);
    assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
}",0,
project,0,test46294,"public void test46294() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(3.0, ""Null 'stroke' argument."");
    float[][] floatArray0 = new float[2][1];
    FastScatterPlot fastScatterPlot0 = new FastScatterPlot(floatArray0, cyclicNumberAxis0, cyclicNumberAxis0);
    PeriodAxis periodAxis0 = new PeriodAxis(""0m-'*"");
    JFreeChart jFreeChart0 = new JFreeChart(""0m-'*"", periodAxis0.DEFAULT_AXIS_LABEL_FONT, fastScatterPlot0, true);
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
    chartRenderingInfo0.setEntityCollection((EntityCollection) null);
    jFreeChart0.createBufferedImage(1913, 500, chartRenderingInfo0);
    assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
}",0,
project,0,test48296,"public void test48296() throws Throwable {
    LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(""r9i `5'939m{}T0"");
    HistogramDataset histogramDataset0 = new HistogramDataset();
    int[] intArray0 = new int[3];
    SubSeriesDataset subSeriesDataset0 = new SubSeriesDataset(histogramDataset0, intArray0);
    boolean boolean0 = logarithmicAxis0.hasListener(subSeriesDataset0);
    assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
}",0,
project,0,test48297,"public void test48297() throws Throwable {
    LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(""r9i `5'939m{}T0"");
    HistogramDataset histogramDataset0 = new HistogramDataset();
    int[] intArray0 = new int[3];
    SubSeriesDataset subSeriesDataset0 = new SubSeriesDataset(histogramDataset0, intArray0);
    boolean boolean0 = logarithmicAxis0.hasListener(subSeriesDataset0);
    assertTrue(logarithmicAxis0.isTickLabelsVisible());
}",0,assertTrue(logarithmicAxis0.isTickLabelsVisible())
project,0,test48298,"public void test48298() throws Throwable {
    LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(""r9i `5'939m{}T0"");
    HistogramDataset histogramDataset0 = new HistogramDataset();
    int[] intArray0 = new int[3];
    SubSeriesDataset subSeriesDataset0 = new SubSeriesDataset(histogramDataset0, intArray0);
    boolean boolean0 = logarithmicAxis0.hasListener(subSeriesDataset0);
    assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
}",0,
project,0,test48299,"public void test48299() throws Throwable {
    LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(""r9i `5'939m{}T0"");
    HistogramDataset histogramDataset0 = new HistogramDataset();
    int[] intArray0 = new int[3];
    SubSeriesDataset subSeriesDataset0 = new SubSeriesDataset(histogramDataset0, intArray0);
    boolean boolean0 = logarithmicAxis0.hasListener(subSeriesDataset0);
    assertTrue(logarithmicAxis0.isAxisLineVisible());
}",0,
project,0,test48300,"public void test48300() throws Throwable {
    LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(""r9i `5'939m{}T0"");
    HistogramDataset histogramDataset0 = new HistogramDataset();
    int[] intArray0 = new int[3];
    SubSeriesDataset subSeriesDataset0 = new SubSeriesDataset(histogramDataset0, intArray0);
    boolean boolean0 = logarithmicAxis0.hasListener(subSeriesDataset0);
    assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
}",0,
project,0,test48301,"public void test48301() throws Throwable {
    LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(""r9i `5'939m{}T0"");
    HistogramDataset histogramDataset0 = new HistogramDataset();
    int[] intArray0 = new int[3];
    SubSeriesDataset subSeriesDataset0 = new SubSeriesDataset(histogramDataset0, intArray0);
    boolean boolean0 = logarithmicAxis0.hasListener(subSeriesDataset0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test48302,"public void test48302() throws Throwable {
    LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(""r9i `5'939m{}T0"");
    HistogramDataset histogramDataset0 = new HistogramDataset();
    int[] intArray0 = new int[3];
    SubSeriesDataset subSeriesDataset0 = new SubSeriesDataset(histogramDataset0, intArray0);
    boolean boolean0 = logarithmicAxis0.hasListener(subSeriesDataset0);
    assertTrue(logarithmicAxis0.isVisible());
}",0,
project,0,test48303,"public void test48303() throws Throwable {
    LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(""r9i `5'939m{}T0"");
    HistogramDataset histogramDataset0 = new HistogramDataset();
    int[] intArray0 = new int[3];
    SubSeriesDataset subSeriesDataset0 = new SubSeriesDataset(histogramDataset0, intArray0);
    boolean boolean0 = logarithmicAxis0.hasListener(subSeriesDataset0);
    assertTrue(logarithmicAxis0.isTickMarksVisible());
}",0,assertTrue(logarithmicAxis0.isTickMarksVisible())
project,0,test49304,"public void test49304() throws Throwable {
    DateAxis dateAxis0 = new DateAxis();
    DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
    TableOrder tableOrder0 = TableOrder.BY_ROW;
    SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(defaultBoxAndWhiskerCategoryDataset0, tableOrder0);
    dateAxis0.removeChangeListener(spiderWebPlot0);
    assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
}",0,
project,0,test49305,"public void test49305() throws Throwable {
    DateAxis dateAxis0 = new DateAxis();
    DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
    TableOrder tableOrder0 = TableOrder.BY_ROW;
    SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(defaultBoxAndWhiskerCategoryDataset0, tableOrder0);
    dateAxis0.removeChangeListener(spiderWebPlot0);
    assertTrue(dateAxis0.isVisible());
}",0,
project,0,test49306,"public void test49306() throws Throwable {
    DateAxis dateAxis0 = new DateAxis();
    DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
    TableOrder tableOrder0 = TableOrder.BY_ROW;
    SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(defaultBoxAndWhiskerCategoryDataset0, tableOrder0);
    dateAxis0.removeChangeListener(spiderWebPlot0);
    assertTrue(dateAxis0.isTickMarksVisible());
}",0,assertTrue(dateAxis0.isTickMarksVisible())
project,0,test49307,"public void test49307() throws Throwable {
    DateAxis dateAxis0 = new DateAxis();
    DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
    TableOrder tableOrder0 = TableOrder.BY_ROW;
    SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(defaultBoxAndWhiskerCategoryDataset0, tableOrder0);
    dateAxis0.removeChangeListener(spiderWebPlot0);
    assertTrue(dateAxis0.isTickLabelsVisible());
}",0,
project,0,test49308,"public void test49308() throws Throwable {
    DateAxis dateAxis0 = new DateAxis();
    DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
    TableOrder tableOrder0 = TableOrder.BY_ROW;
    SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(defaultBoxAndWhiskerCategoryDataset0, tableOrder0);
    dateAxis0.removeChangeListener(spiderWebPlot0);
    assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
}",0,
project,0,test49309,"public void test49309() throws Throwable {
    DateAxis dateAxis0 = new DateAxis();
    DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
    TableOrder tableOrder0 = TableOrder.BY_ROW;
    SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(defaultBoxAndWhiskerCategoryDataset0, tableOrder0);
    dateAxis0.removeChangeListener(spiderWebPlot0);
    assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
}",0,
project,0,test49310,"public void test49310() throws Throwable {
    DateAxis dateAxis0 = new DateAxis();
    DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
    TableOrder tableOrder0 = TableOrder.BY_ROW;
    SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(defaultBoxAndWhiskerCategoryDataset0, tableOrder0);
    dateAxis0.removeChangeListener(spiderWebPlot0);
    assertTrue(dateAxis0.isAxisLineVisible());
}",0,assertFalse(dateAxis0.isAxisLineVisible())
project,0,test50311,"public void test50311() throws Throwable {
    CategoryAxis categoryAxis0 = new CategoryAxis(""Fast_Scatter_Plot"");
    CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
    categoryAxis0.removeChangeListener(combinedDomainCategoryPlot0);
    assertFalse(categoryAxis0.isTickMarksVisible());
}",0,assertTrue(categoryAxis0.isTickMarksVisible())
project,0,test50312,"public void test50312() throws Throwable {
    CategoryAxis categoryAxis0 = new CategoryAxis(""Fast_Scatter_Plot"");
    CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
    categoryAxis0.removeChangeListener(combinedDomainCategoryPlot0);
    assertTrue(categoryAxis0.isAxisLineVisible());
}",0,
project,0,test50313,"public void test50313() throws Throwable {
    CategoryAxis categoryAxis0 = new CategoryAxis(""Fast_Scatter_Plot"");
    CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
    categoryAxis0.removeChangeListener(combinedDomainCategoryPlot0);
    assertTrue(categoryAxis0.isVisible());
}",0,assertTrue(categoryAxis0.isVisible())
project,0,test50314,"public void test50314() throws Throwable {
    CategoryAxis categoryAxis0 = new CategoryAxis(""Fast_Scatter_Plot"");
    CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
    categoryAxis0.removeChangeListener(combinedDomainCategoryPlot0);
    assertTrue(categoryAxis0.isTickLabelsVisible());
}",0,assertFalse(categoryAxis0.isTickLabelsVisible())
project,0,test50315,"public void test50315() throws Throwable {
    CategoryAxis categoryAxis0 = new CategoryAxis(""Fast_Scatter_Plot"");
    CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
    categoryAxis0.removeChangeListener(combinedDomainCategoryPlot0);
    assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
}",0,
project,0,test50316,"public void test50316() throws Throwable {
    CategoryAxis categoryAxis0 = new CategoryAxis(""Fast_Scatter_Plot"");
    CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
    categoryAxis0.removeChangeListener(combinedDomainCategoryPlot0);
    assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
}",0,
project,0,test50317,"public void test50317() throws Throwable {
    CategoryAxis categoryAxis0 = new CategoryAxis(""Fast_Scatter_Plot"");
    CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
    categoryAxis0.removeChangeListener(combinedDomainCategoryPlot0);
    assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
}",0,
project,0,test51318,"public void test51318() throws Throwable {
    NumberAxis3D numberAxis3D0 = new NumberAxis3D(""7(+/%G<"");
    // Undeclared exception!
    try {
        numberAxis3D0.setTickMarkPaint((Paint) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'paint' argument.
        //
        verifyException(""org.jfree.chart.axis.Axis"", e);
    }
}",0,
project,0,test52319,"public void test52319() throws Throwable {
    NumberAxis3D numberAxis3D0 = new NumberAxis3D();
    PeriodAxis periodAxis0 = new PeriodAxis(""?6?y{g>)q`1"");
    periodAxis0.setTickMarkStroke(numberAxis3D0.DEFAULT_TICK_MARK_STROKE);
    assertTrue(periodAxis0.isAxisLineVisible());
}",0,assertFalse(periodAxis0.isAxisLineVisible())
project,0,test52320,"public void test52320() throws Throwable {
    NumberAxis3D numberAxis3D0 = new NumberAxis3D();
    PeriodAxis periodAxis0 = new PeriodAxis(""?6?y{g>)q`1"");
    periodAxis0.setTickMarkStroke(numberAxis3D0.DEFAULT_TICK_MARK_STROKE);
    assertTrue(periodAxis0.isTickLabelsVisible());
}",0,assertFalse(periodAxis0.isTickLabelsVisible())
project,0,test52321,"public void test52321() throws Throwable {
    NumberAxis3D numberAxis3D0 = new NumberAxis3D();
    PeriodAxis periodAxis0 = new PeriodAxis(""?6?y{g>)q`1"");
    periodAxis0.setTickMarkStroke(numberAxis3D0.DEFAULT_TICK_MARK_STROKE);
    assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
}",0,
project,0,test52322,"public void test52322() throws Throwable {
    NumberAxis3D numberAxis3D0 = new NumberAxis3D();
    PeriodAxis periodAxis0 = new PeriodAxis(""?6?y{g>)q`1"");
    periodAxis0.setTickMarkStroke(numberAxis3D0.DEFAULT_TICK_MARK_STROKE);
    assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
}",0,
project,0,test52323,"public void test52323() throws Throwable {
    NumberAxis3D numberAxis3D0 = new NumberAxis3D();
    PeriodAxis periodAxis0 = new PeriodAxis(""?6?y{g>)q`1"");
    periodAxis0.setTickMarkStroke(numberAxis3D0.DEFAULT_TICK_MARK_STROKE);
    assertFalse(numberAxis3D0.isAxisLineVisible());
}",0,assertFalse(numberAxis3D0.isAxisLineVisible())
project,0,test52324,"public void test52324() throws Throwable {
    NumberAxis3D numberAxis3D0 = new NumberAxis3D();
    PeriodAxis periodAxis0 = new PeriodAxis(""?6?y{g>)q`1"");
    periodAxis0.setTickMarkStroke(numberAxis3D0.DEFAULT_TICK_MARK_STROKE);
    assertTrue(periodAxis0.isTickMarksVisible());
}",0,assertFalse(periodAxis0.isTickMarksVisible())
project,0,test52325,"public void test52325() throws Throwable {
    NumberAxis3D numberAxis3D0 = new NumberAxis3D();
    PeriodAxis periodAxis0 = new PeriodAxis(""?6?y{g>)q`1"");
    periodAxis0.setTickMarkStroke(numberAxis3D0.DEFAULT_TICK_MARK_STROKE);
    assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
}",0,
project,0,test52326,"public void test52326() throws Throwable {
    NumberAxis3D numberAxis3D0 = new NumberAxis3D();
    PeriodAxis periodAxis0 = new PeriodAxis(""?6?y{g>)q`1"");
    periodAxis0.setTickMarkStroke(numberAxis3D0.DEFAULT_TICK_MARK_STROKE);
    assertTrue(periodAxis0.isVisible());
}",0,
project,0,test53327,"public void test53327() throws Throwable {
    Week week0 = new Week();
    PeriodAxis periodAxis0 = new PeriodAxis("" 25;eHgg RIKc"", week0, week0);
    // Undeclared exception!
    try {
        periodAxis0.setTickMarkStroke((Stroke) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'stroke' argument.
        //
        verifyException(""org.jfree.chart.axis.Axis"", e);
    }
}",1,
project,0,test54328,"public void test54328() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
    categoryAxis3D0.setTickMarkStroke(combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE);
    assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
}",0,
project,0,test54329,"public void test54329() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
    categoryAxis3D0.setTickMarkStroke(combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE);
    assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
}",0,
project,0,test54330,"public void test54330() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
    categoryAxis3D0.setTickMarkStroke(combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE);
    assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
}",0,
project,0,test54331,"public void test54331() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
    categoryAxis3D0.setTickMarkStroke(combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE);
    assertTrue(categoryAxis3D0.isAxisLineVisible());
}",0,
project,0,test54332,"public void test54332() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
    categoryAxis3D0.setTickMarkStroke(combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE);
    assertFalse(categoryAxis3D0.isTickMarksVisible());
}",0,assertTrue(categoryAxis3D0.isTickMarksVisible())
project,0,test54333,"public void test54333() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
    categoryAxis3D0.setTickMarkStroke(combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE);
    assertTrue(categoryAxis3D0.isVisible());
}",0,assertTrue(categoryAxis3D0.isVisible())
project,0,test54334,"public void test54334() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
    categoryAxis3D0.setTickMarkStroke(combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE);
    assertTrue(categoryAxis3D0.isTickLabelsVisible());
}",0,
project,0,test55335,"public void test55335() throws Throwable {
    CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D(""TK`"");
    categoryAxis3D0.setTickMarksVisible(false);
    assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
}",0,
project,0,test55336,"public void test55336() throws Throwable {
    CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D(""TK`"");
    categoryAxis3D0.setTickMarksVisible(false);
    assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
}",0,
project,0,test55337,"public void test55337() throws Throwable {
    CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D(""TK`"");
    categoryAxis3D0.setTickMarksVisible(false);
    assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
}",0,
project,0,test55338,"public void test55338() throws Throwable {
    CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D(""TK`"");
    categoryAxis3D0.setTickMarksVisible(false);
    assertTrue(categoryAxis3D0.isVisible());
}",0,assertFalse(categoryAxis3D0.isVisible())
project,0,test55339,"public void test55339() throws Throwable {
    CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D(""TK`"");
    categoryAxis3D0.setTickMarksVisible(false);
    assertTrue(categoryAxis3D0.isAxisLineVisible());
}",0,assertFalse(categoryAxis3D0.isAxisLineVisible())
project,0,test55340,"public void test55340() throws Throwable {
    CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D(""TK`"");
    categoryAxis3D0.setTickMarksVisible(false);
    assertTrue(categoryAxis3D0.isTickLabelsVisible());
}",0,assertFalse(categoryAxis3D0.isTickLabelsVisible())
project,0,test55341,"public void test55341() throws Throwable {
    CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D(""TK`"");
    categoryAxis3D0.setTickMarksVisible(false);
    assertFalse(categoryAxis3D0.isTickMarksVisible());
}",0,assertFalse(categoryAxis3D0.isTickMarksVisible())
project,0,test56342,"public void test56342() throws Throwable {
    NumberAxis3D numberAxis3D0 = new NumberAxis3D("""");
    // Undeclared exception!
    try {
        numberAxis3D0.setTickLabelInsets((RectangleInsets) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'insets' argument.
        //
        verifyException(""org.jfree.chart.axis.Axis"", e);
    }
}",1,
project,0,test57343,"public void test57343() throws Throwable {
    String[] stringArray0 = new String[6];
    CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
    SymbolAxis symbolAxis0 = new SymbolAxis(""TK`"", stringArray0);
    categoryAxis3D0.setTickLabelInsets(symbolAxis0.DEFAULT_TICK_LABEL_INSETS);
    assertEquals(0.0, symbolAxis0.getLabelAngle(), 0.01);
}",0,
project,0,test57344,"public void test57344() throws Throwable {
    String[] stringArray0 = new String[6];
    CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
    SymbolAxis symbolAxis0 = new SymbolAxis(""TK`"", stringArray0);
    categoryAxis3D0.setTickLabelInsets(symbolAxis0.DEFAULT_TICK_LABEL_INSETS);
    assertTrue(symbolAxis0.isTickMarksVisible());
}",0,assertTrue(symbolAxis0.isTickMarksVisible())
project,0,test57345,"public void test57345() throws Throwable {
    String[] stringArray0 = new String[6];
    CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
    SymbolAxis symbolAxis0 = new SymbolAxis(""TK`"", stringArray0);
    categoryAxis3D0.setTickLabelInsets(symbolAxis0.DEFAULT_TICK_LABEL_INSETS);
    assertTrue(symbolAxis0.isVisible());
}",0,
project,0,test57346,"public void test57346() throws Throwable {
    String[] stringArray0 = new String[6];
    CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
    SymbolAxis symbolAxis0 = new SymbolAxis(""TK`"", stringArray0);
    categoryAxis3D0.setTickLabelInsets(symbolAxis0.DEFAULT_TICK_LABEL_INSETS);
    assertFalse(categoryAxis3D0.isTickMarksVisible());
}",0,assertTrue(categoryAxis3D0.isTickMarksVisible())
project,0,test57347,"public void test57347() throws Throwable {
    String[] stringArray0 = new String[6];
    CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
    SymbolAxis symbolAxis0 = new SymbolAxis(""TK`"", stringArray0);
    categoryAxis3D0.setTickLabelInsets(symbolAxis0.DEFAULT_TICK_LABEL_INSETS);
    assertEquals(2.0F, symbolAxis0.getTickMarkOutsideLength(), 0.01F);
}",0,
project,0,test57348,"public void test57348() throws Throwable {
    String[] stringArray0 = new String[6];
    CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
    SymbolAxis symbolAxis0 = new SymbolAxis(""TK`"", stringArray0);
    categoryAxis3D0.setTickLabelInsets(symbolAxis0.DEFAULT_TICK_LABEL_INSETS);
    assertEquals(0.0F, symbolAxis0.getTickMarkInsideLength(), 0.01F);
}",0,
project,0,test57349,"public void test57349() throws Throwable {
    String[] stringArray0 = new String[6];
    CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
    SymbolAxis symbolAxis0 = new SymbolAxis(""TK`"", stringArray0);
    categoryAxis3D0.setTickLabelInsets(symbolAxis0.DEFAULT_TICK_LABEL_INSETS);
    assertTrue(symbolAxis0.isTickLabelsVisible());
}",0,assertTrue(symbolAxis0.isTickLabelsVisible())
project,0,test57350,"public void test57350() throws Throwable {
    String[] stringArray0 = new String[6];
    CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
    SymbolAxis symbolAxis0 = new SymbolAxis(""TK`"", stringArray0);
    categoryAxis3D0.setTickLabelInsets(symbolAxis0.DEFAULT_TICK_LABEL_INSETS);
    assertTrue(symbolAxis0.isAxisLineVisible());
}",0,assertFalse(symbolAxis0.isAxisLineVisible())
project,0,test58351,"public void test58351() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""6bP8]y~(h{v?"");
    DateAxis dateAxis0 = new DateAxis(""6bP8]y~(h{v?"", timeZone0);
    Date date0 = dateAxis0.getMaximumDate();
    Week week0 = new Week(date0, timeZone0);
    PeriodAxis periodAxis0 = new PeriodAxis(""q9GCg4"", week0, week0, week0.DEFAULT_TIME_ZONE);
    dateAxis0.setTickLabelPaint(periodAxis0.DEFAULT_AXIS_LINE_PAINT);
    assertTrue(periodAxis0.isAxisLineVisible());
}",0,assertFalse(periodAxis0.isAxisLineVisible())
project,0,test58352,"public void test58352() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""6bP8]y~(h{v?"");
    DateAxis dateAxis0 = new DateAxis(""6bP8]y~(h{v?"", timeZone0);
    Date date0 = dateAxis0.getMaximumDate();
    Week week0 = new Week(date0, timeZone0);
    PeriodAxis periodAxis0 = new PeriodAxis(""q9GCg4"", week0, week0, week0.DEFAULT_TIME_ZONE);
    dateAxis0.setTickLabelPaint(periodAxis0.DEFAULT_AXIS_LINE_PAINT);
    assertTrue(periodAxis0.isTickLabelsVisible());
}",0,assertFalse(periodAxis0.isTickLabelsVisible())
project,0,test58353,"public void test58353() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""6bP8]y~(h{v?"");
    DateAxis dateAxis0 = new DateAxis(""6bP8]y~(h{v?"", timeZone0);
    Date date0 = dateAxis0.getMaximumDate();
    Week week0 = new Week(date0, timeZone0);
    PeriodAxis periodAxis0 = new PeriodAxis(""q9GCg4"", week0, week0, week0.DEFAULT_TIME_ZONE);
    dateAxis0.setTickLabelPaint(periodAxis0.DEFAULT_AXIS_LINE_PAINT);
    assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
}",0,
project,0,test58354,"public void test58354() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""6bP8]y~(h{v?"");
    DateAxis dateAxis0 = new DateAxis(""6bP8]y~(h{v?"", timeZone0);
    Date date0 = dateAxis0.getMaximumDate();
    Week week0 = new Week(date0, timeZone0);
    PeriodAxis periodAxis0 = new PeriodAxis(""q9GCg4"", week0, week0, week0.DEFAULT_TIME_ZONE);
    dateAxis0.setTickLabelPaint(periodAxis0.DEFAULT_AXIS_LINE_PAINT);
    assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
}",0,
project,0,test58355,"public void test58355() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""6bP8]y~(h{v?"");
    DateAxis dateAxis0 = new DateAxis(""6bP8]y~(h{v?"", timeZone0);
    Date date0 = dateAxis0.getMaximumDate();
    Week week0 = new Week(date0, timeZone0);
    PeriodAxis periodAxis0 = new PeriodAxis(""q9GCg4"", week0, week0, week0.DEFAULT_TIME_ZONE);
    dateAxis0.setTickLabelPaint(periodAxis0.DEFAULT_AXIS_LINE_PAINT);
    assertTrue(periodAxis0.isTickMarksVisible());
}",0,
project,0,test58356,"public void test58356() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""6bP8]y~(h{v?"");
    DateAxis dateAxis0 = new DateAxis(""6bP8]y~(h{v?"", timeZone0);
    Date date0 = dateAxis0.getMaximumDate();
    Week week0 = new Week(date0, timeZone0);
    PeriodAxis periodAxis0 = new PeriodAxis(""q9GCg4"", week0, week0, week0.DEFAULT_TIME_ZONE);
    dateAxis0.setTickLabelPaint(periodAxis0.DEFAULT_AXIS_LINE_PAINT);
    assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
}",0,
project,0,test58357,"public void test58357() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""6bP8]y~(h{v?"");
    DateAxis dateAxis0 = new DateAxis(""6bP8]y~(h{v?"", timeZone0);
    Date date0 = dateAxis0.getMaximumDate();
    Week week0 = new Week(date0, timeZone0);
    PeriodAxis periodAxis0 = new PeriodAxis(""q9GCg4"", week0, week0, week0.DEFAULT_TIME_ZONE);
    dateAxis0.setTickLabelPaint(periodAxis0.DEFAULT_AXIS_LINE_PAINT);
    assertTrue(periodAxis0.isVisible());
}",0,assertFalse(periodAxis0.isVisible())
project,0,test58358,"public void test58358() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""6bP8]y~(h{v?"");
    DateAxis dateAxis0 = new DateAxis(""6bP8]y~(h{v?"", timeZone0);
    Date date0 = dateAxis0.getMaximumDate();
    Week week0 = new Week(date0, timeZone0);
    PeriodAxis periodAxis0 = new PeriodAxis(""q9GCg4"", week0, week0, week0.DEFAULT_TIME_ZONE);
    dateAxis0.setTickLabelPaint(periodAxis0.DEFAULT_AXIS_LINE_PAINT);
    assertTrue(dateAxis0.isTickMarksVisible());
}",0,assertFalse(dateAxis0.isTickMarksVisible())
project,0,test59359,"public void test59359() throws Throwable {
    CategoryAxis categoryAxis0 = new CategoryAxis();
    categoryAxis0.setTickLabelFont(categoryAxis0.DEFAULT_AXIS_LABEL_FONT);
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
    BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(397, 397, 10, chartRenderingInfo0);
    Graphics2D graphics2D0 = bufferedImage0.createGraphics();
    Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
    RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
    categoryAxis0.reserveSpace(graphics2D0, combinedRangeXYPlot0, rectangle2D_Double0, rectangleEdge0, (AxisSpace) null);
    assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
}",0,
project,0,test59360,"public void test59360() throws Throwable {
    CategoryAxis categoryAxis0 = new CategoryAxis();
    categoryAxis0.setTickLabelFont(categoryAxis0.DEFAULT_AXIS_LABEL_FONT);
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
    BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(397, 397, 10, chartRenderingInfo0);
    Graphics2D graphics2D0 = bufferedImage0.createGraphics();
    Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
    RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
    categoryAxis0.reserveSpace(graphics2D0, combinedRangeXYPlot0, rectangle2D_Double0, rectangleEdge0, (AxisSpace) null);
    assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
}",0,
project,0,test59361,"public void test59361() throws Throwable {
    CategoryAxis categoryAxis0 = new CategoryAxis();
    categoryAxis0.setTickLabelFont(categoryAxis0.DEFAULT_AXIS_LABEL_FONT);
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
    BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(397, 397, 10, chartRenderingInfo0);
    Graphics2D graphics2D0 = bufferedImage0.createGraphics();
    Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
    RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
    categoryAxis0.reserveSpace(graphics2D0, combinedRangeXYPlot0, rectangle2D_Double0, rectangleEdge0, (AxisSpace) null);
    assertTrue(categoryAxis0.isTickLabelsVisible());
}",0,assertTrue(categoryAxis0.isTickLabelsVisible())
project,0,test59362,"public void test59362() throws Throwable {
    CategoryAxis categoryAxis0 = new CategoryAxis();
    categoryAxis0.setTickLabelFont(categoryAxis0.DEFAULT_AXIS_LABEL_FONT);
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
    BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(397, 397, 10, chartRenderingInfo0);
    Graphics2D graphics2D0 = bufferedImage0.createGraphics();
    Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
    RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
    categoryAxis0.reserveSpace(graphics2D0, combinedRangeXYPlot0, rectangle2D_Double0, rectangleEdge0, (AxisSpace) null);
    assertFalse(categoryAxis0.isTickMarksVisible());
}",0,assertTrue(categoryAxis0.isTickMarksVisible())
project,0,test59363,"public void test59363() throws Throwable {
    CategoryAxis categoryAxis0 = new CategoryAxis();
    categoryAxis0.setTickLabelFont(categoryAxis0.DEFAULT_AXIS_LABEL_FONT);
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
    BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(397, 397, 10, chartRenderingInfo0);
    Graphics2D graphics2D0 = bufferedImage0.createGraphics();
    Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
    RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
    categoryAxis0.reserveSpace(graphics2D0, combinedRangeXYPlot0, rectangle2D_Double0, rectangleEdge0, (AxisSpace) null);
    assertTrue(categoryAxis0.isAxisLineVisible());
}",0,
project,0,test59364,"public void test59364() throws Throwable {
    CategoryAxis categoryAxis0 = new CategoryAxis();
    categoryAxis0.setTickLabelFont(categoryAxis0.DEFAULT_AXIS_LABEL_FONT);
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
    BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(397, 397, 10, chartRenderingInfo0);
    Graphics2D graphics2D0 = bufferedImage0.createGraphics();
    Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
    RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
    categoryAxis0.reserveSpace(graphics2D0, combinedRangeXYPlot0, rectangle2D_Double0, rectangleEdge0, (AxisSpace) null);
    assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
}",0,
project,0,test59365,"public void test59365() throws Throwable {
    CategoryAxis categoryAxis0 = new CategoryAxis();
    categoryAxis0.setTickLabelFont(categoryAxis0.DEFAULT_AXIS_LABEL_FONT);
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
    BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(397, 397, 10, chartRenderingInfo0);
    Graphics2D graphics2D0 = bufferedImage0.createGraphics();
    Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
    RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
    categoryAxis0.reserveSpace(graphics2D0, combinedRangeXYPlot0, rectangle2D_Double0, rectangleEdge0, (AxisSpace) null);
    assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
}",0,
project,0,test60366,"public void test60366() throws Throwable {
    PeriodAxis periodAxis0 = new PeriodAxis(""0m-'*"");
    assertTrue(periodAxis0.isTickLabelsVisible());
}",0,assertTrue(periodAxis0.isTickLabelsVisible())
project,0,test60367,"public void test60367() throws Throwable {
    PeriodAxis periodAxis0 = new PeriodAxis(""0m-'*"");
    periodAxis0.setTickLabelsVisible(false);
    assertFalse(periodAxis0.isTickLabelsVisible());
}",0,assertFalse(periodAxis0.isTickLabelsVisible())
project,0,test61368,"public void test61368() throws Throwable {
    Year year0 = new Year();
    PeriodAxis periodAxis0 = new PeriodAxis(""SansSerif"", year0, year0, year0.DEFAULT_TIME_ZONE);
    assertTrue(periodAxis0.isTickLabelsVisible());
}",0,
project,0,test61369,"public void test61369() throws Throwable {
    Year year0 = new Year();
    PeriodAxis periodAxis0 = new PeriodAxis(""SansSerif"", year0, year0, year0.DEFAULT_TIME_ZONE);
    periodAxis0.setTickLabelsVisible(true);
    assertTrue(periodAxis0.isVisible());
}",0,
project,0,test61370,"public void test61370() throws Throwable {
    Year year0 = new Year();
    PeriodAxis periodAxis0 = new PeriodAxis(""SansSerif"", year0, year0, year0.DEFAULT_TIME_ZONE);
    periodAxis0.setTickLabelsVisible(true);
    assertTrue(periodAxis0.isAxisLineVisible());
}",0,
project,0,test61371,"public void test61371() throws Throwable {
    Year year0 = new Year();
    PeriodAxis periodAxis0 = new PeriodAxis(""SansSerif"", year0, year0, year0.DEFAULT_TIME_ZONE);
    periodAxis0.setTickLabelsVisible(true);
    assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
}",0,
project,0,test61372,"public void test61372() throws Throwable {
    Year year0 = new Year();
    PeriodAxis periodAxis0 = new PeriodAxis(""SansSerif"", year0, year0, year0.DEFAULT_TIME_ZONE);
    periodAxis0.setTickLabelsVisible(true);
    assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
}",0,
project,0,test61373,"public void test61373() throws Throwable {
    Year year0 = new Year();
    PeriodAxis periodAxis0 = new PeriodAxis(""SansSerif"", year0, year0, year0.DEFAULT_TIME_ZONE);
    periodAxis0.setTickLabelsVisible(true);
    assertTrue(periodAxis0.isTickMarksVisible());
}",0,
project,0,test61374,"public void test61374() throws Throwable {
    Year year0 = new Year();
    PeriodAxis periodAxis0 = new PeriodAxis(""SansSerif"", year0, year0, year0.DEFAULT_TIME_ZONE);
    periodAxis0.setTickLabelsVisible(true);
    assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
}",0,
project,0,test62375,"public void test62375() throws Throwable {
    PeriodAxis periodAxis0 = new PeriodAxis(""org.jfree.chart.axis.Axis"");
    // Undeclared exception!
    try {
        periodAxis0.setAxisLineStroke((Stroke) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'stroke' argument.
        //
        verifyException(""org.jfree.chart.axis.Axis"", e);
    }
}",1,
project,0,test63376,"public void test63376() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""6bP8]y~(h{v?"");
    DateAxis dateAxis0 = new DateAxis(""6bP8]y~(h{v?"", timeZone0);
    // Undeclared exception!
    try {
        dateAxis0.setAxisLinePaint((Paint) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'paint' argument.
        //
        verifyException(""org.jfree.chart.axis.Axis"", e);
    }
}",0,
project,0,test64377,"public void test64377() throws Throwable {
    Week week0 = new Week();
    PeriodAxis periodAxis0 = new PeriodAxis("" 25;eHgg RIKc"", week0, week0);
    GanttRenderer ganttRenderer0 = new GanttRenderer();
    Paint paint0 = ganttRenderer0.getIncompletePaint();
    periodAxis0.setAxisLinePaint(paint0);
    assertTrue(periodAxis0.isTickLabelsVisible());
}",0,assertFalse(periodAxis0.isTickLabelsVisible())
project,0,test64378,"public void test64378() throws Throwable {
    Week week0 = new Week();
    PeriodAxis periodAxis0 = new PeriodAxis("" 25;eHgg RIKc"", week0, week0);
    GanttRenderer ganttRenderer0 = new GanttRenderer();
    Paint paint0 = ganttRenderer0.getIncompletePaint();
    periodAxis0.setAxisLinePaint(paint0);
    assertTrue(periodAxis0.isAxisLineVisible());
}",0,assertFalse(periodAxis0.isAxisLineVisible())
project,0,test64379,"public void test64379() throws Throwable {
    Week week0 = new Week();
    PeriodAxis periodAxis0 = new PeriodAxis("" 25;eHgg RIKc"", week0, week0);
    GanttRenderer ganttRenderer0 = new GanttRenderer();
    Paint paint0 = ganttRenderer0.getIncompletePaint();
    periodAxis0.setAxisLinePaint(paint0);
    assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
}",0,
project,0,test64380,"public void test64380() throws Throwable {
    Week week0 = new Week();
    PeriodAxis periodAxis0 = new PeriodAxis("" 25;eHgg RIKc"", week0, week0);
    GanttRenderer ganttRenderer0 = new GanttRenderer();
    Paint paint0 = ganttRenderer0.getIncompletePaint();
    periodAxis0.setAxisLinePaint(paint0);
    assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
}",0,
project,0,test64381,"public void test64381() throws Throwable {
    Week week0 = new Week();
    PeriodAxis periodAxis0 = new PeriodAxis("" 25;eHgg RIKc"", week0, week0);
    GanttRenderer ganttRenderer0 = new GanttRenderer();
    Paint paint0 = ganttRenderer0.getIncompletePaint();
    periodAxis0.setAxisLinePaint(paint0);
    assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
}",0,
project,0,test64382,"public void test64382() throws Throwable {
    Week week0 = new Week();
    PeriodAxis periodAxis0 = new PeriodAxis("" 25;eHgg RIKc"", week0, week0);
    GanttRenderer ganttRenderer0 = new GanttRenderer();
    Paint paint0 = ganttRenderer0.getIncompletePaint();
    periodAxis0.setAxisLinePaint(paint0);
    assertTrue(periodAxis0.isTickMarksVisible());
}",0,assertTrue(periodAxis0.isTickMarksVisible())
project,0,test64383,"public void test64383() throws Throwable {
    Week week0 = new Week();
    PeriodAxis periodAxis0 = new PeriodAxis("" 25;eHgg RIKc"", week0, week0);
    GanttRenderer ganttRenderer0 = new GanttRenderer();
    Paint paint0 = ganttRenderer0.getIncompletePaint();
    periodAxis0.setAxisLinePaint(paint0);
    assertTrue(periodAxis0.isVisible());
}",0,assertTrue(periodAxis0.isVisible())
project,0,test65384,"public void test65384() throws Throwable {
    SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis(""Null 'paint' argument."");
    PeriodAxis periodAxis0 = new PeriodAxis(""L"");
    periodAxis0.setLabelInsets(subCategoryAxis0.DEFAULT_AXIS_LABEL_INSETS);
    assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
}",0,
project,0,test65385,"public void test65385() throws Throwable {
    SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis(""Null 'paint' argument."");
    PeriodAxis periodAxis0 = new PeriodAxis(""L"");
    periodAxis0.setLabelInsets(subCategoryAxis0.DEFAULT_AXIS_LABEL_INSETS);
    assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
}",0,
project,0,test65386,"public void test65386() throws Throwable {
    SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis(""Null 'paint' argument."");
    PeriodAxis periodAxis0 = new PeriodAxis(""L"");
    periodAxis0.setLabelInsets(subCategoryAxis0.DEFAULT_AXIS_LABEL_INSETS);
    assertTrue(periodAxis0.isAxisLineVisible());
}",0,assertTrue(periodAxis0.isAxisLineVisible())
project,0,test65387,"public void test65387() throws Throwable {
    SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis(""Null 'paint' argument."");
    PeriodAxis periodAxis0 = new PeriodAxis(""L"");
    periodAxis0.setLabelInsets(subCategoryAxis0.DEFAULT_AXIS_LABEL_INSETS);
    assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
}",0,
project,0,test65388,"public void test65388() throws Throwable {
    SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis(""Null 'paint' argument."");
    PeriodAxis periodAxis0 = new PeriodAxis(""L"");
    periodAxis0.setLabelInsets(subCategoryAxis0.DEFAULT_AXIS_LABEL_INSETS);
    assertFalse(subCategoryAxis0.isTickMarksVisible());
}",0,assertTrue(subCategoryAxis0.isTickMarksVisible())
project,0,test65389,"public void test65389() throws Throwable {
    SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis(""Null 'paint' argument."");
    PeriodAxis periodAxis0 = new PeriodAxis(""L"");
    periodAxis0.setLabelInsets(subCategoryAxis0.DEFAULT_AXIS_LABEL_INSETS);
    assertTrue(periodAxis0.isVisible());
}",0,
project,0,test65390,"public void test65390() throws Throwable {
    SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis(""Null 'paint' argument."");
    PeriodAxis periodAxis0 = new PeriodAxis(""L"");
    periodAxis0.setLabelInsets(subCategoryAxis0.DEFAULT_AXIS_LABEL_INSETS);
    assertTrue(periodAxis0.isTickMarksVisible());
}",0,assertTrue(periodAxis0.isTickMarksVisible())
project,0,test65391,"public void test65391() throws Throwable {
    SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis(""Null 'paint' argument."");
    PeriodAxis periodAxis0 = new PeriodAxis(""L"");
    periodAxis0.setLabelInsets(subCategoryAxis0.DEFAULT_AXIS_LABEL_INSETS);
    assertTrue(periodAxis0.isTickLabelsVisible());
}",0,assertTrue(periodAxis0.isTickLabelsVisible())
project,0,test66392,"public void test66392() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(3.0, ""Null 'stroke' argument."");
    float[][] floatArray0 = new float[2][1];
    FastScatterPlot fastScatterPlot0 = new FastScatterPlot(floatArray0, cyclicNumberAxis0, cyclicNumberAxis0);
    cyclicNumberAxis0.setLabelInsets(fastScatterPlot0.DEFAULT_INSETS);
    JFreeChart jFreeChart0 = new JFreeChart(""0m-'*"", cyclicNumberAxis0.DEFAULT_TICK_LABEL_FONT, fastScatterPlot0, true);
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
    jFreeChart0.createBufferedImage(1913, 500, chartRenderingInfo0);
    assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
}",0,
project,0,test66393,"public void test66393() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(3.0, ""Null 'stroke' argument."");
    float[][] floatArray0 = new float[2][1];
    FastScatterPlot fastScatterPlot0 = new FastScatterPlot(floatArray0, cyclicNumberAxis0, cyclicNumberAxis0);
    cyclicNumberAxis0.setLabelInsets(fastScatterPlot0.DEFAULT_INSETS);
    JFreeChart jFreeChart0 = new JFreeChart(""0m-'*"", cyclicNumberAxis0.DEFAULT_TICK_LABEL_FONT, fastScatterPlot0, true);
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
    jFreeChart0.createBufferedImage(1913, 500, chartRenderingInfo0);
    assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
}",0,
project,0,test66394,"public void test66394() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(3.0, ""Null 'stroke' argument."");
    float[][] floatArray0 = new float[2][1];
    FastScatterPlot fastScatterPlot0 = new FastScatterPlot(floatArray0, cyclicNumberAxis0, cyclicNumberAxis0);
    cyclicNumberAxis0.setLabelInsets(fastScatterPlot0.DEFAULT_INSETS);
    JFreeChart jFreeChart0 = new JFreeChart(""0m-'*"", cyclicNumberAxis0.DEFAULT_TICK_LABEL_FONT, fastScatterPlot0, true);
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
    jFreeChart0.createBufferedImage(1913, 500, chartRenderingInfo0);
    assertTrue(cyclicNumberAxis0.isTickMarksVisible());
}",0,
project,0,test66395,"public void test66395() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(3.0, ""Null 'stroke' argument."");
    float[][] floatArray0 = new float[2][1];
    FastScatterPlot fastScatterPlot0 = new FastScatterPlot(floatArray0, cyclicNumberAxis0, cyclicNumberAxis0);
    cyclicNumberAxis0.setLabelInsets(fastScatterPlot0.DEFAULT_INSETS);
    JFreeChart jFreeChart0 = new JFreeChart(""0m-'*"", cyclicNumberAxis0.DEFAULT_TICK_LABEL_FONT, fastScatterPlot0, true);
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
    jFreeChart0.createBufferedImage(1913, 500, chartRenderingInfo0);
    assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
}",0,
project,0,test66396,"public void test66396() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(3.0, ""Null 'stroke' argument."");
    float[][] floatArray0 = new float[2][1];
    FastScatterPlot fastScatterPlot0 = new FastScatterPlot(floatArray0, cyclicNumberAxis0, cyclicNumberAxis0);
    cyclicNumberAxis0.setLabelInsets(fastScatterPlot0.DEFAULT_INSETS);
    JFreeChart jFreeChart0 = new JFreeChart(""0m-'*"", cyclicNumberAxis0.DEFAULT_TICK_LABEL_FONT, fastScatterPlot0, true);
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
    jFreeChart0.createBufferedImage(1913, 500, chartRenderingInfo0);
    assertTrue(cyclicNumberAxis0.isAxisLineVisible());
}",0,assertFalse(cyclicNumberAxis0.isAxisLineVisible())
project,0,test67397,"public void test67397() throws Throwable {
    ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis(""q )Rl|!:5"");
    // Undeclared exception!
    try {
        extendedCategoryAxis0.setLabelPaint((Paint) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'paint' argument.
        //
        verifyException(""org.jfree.chart.axis.Axis"", e);
    }
}",0,
project,0,test68398,"public void test68398() throws Throwable {
    LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(""r9i `5'939m{}T0"");
    SystemColor systemColor0 = SystemColor.menu;
    logarithmicAxis0.setLabelPaint(systemColor0);
    assertTrue(logarithmicAxis0.isTickMarksVisible());
}",0,assertTrue(logarithmicAxis0.isTickMarksVisible())
project,0,test68399,"public void test68399() throws Throwable {
    LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(""r9i `5'939m{}T0"");
    SystemColor systemColor0 = SystemColor.menu;
    logarithmicAxis0.setLabelPaint(systemColor0);
    assertTrue(logarithmicAxis0.isVisible());
}",0,assertFalse(logarithmicAxis0.isVisible())
project,0,test68400,"public void test68400() throws Throwable {
    LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(""r9i `5'939m{}T0"");
    SystemColor systemColor0 = SystemColor.menu;
    logarithmicAxis0.setLabelPaint(systemColor0);
    assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
}",1,
project,0,test68401,"public void test68401() throws Throwable {
    LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(""r9i `5'939m{}T0"");
    SystemColor systemColor0 = SystemColor.menu;
    logarithmicAxis0.setLabelPaint(systemColor0);
    assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
}",0,
project,0,test68402,"public void test68402() throws Throwable {
    LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(""r9i `5'939m{}T0"");
    SystemColor systemColor0 = SystemColor.menu;
    logarithmicAxis0.setLabelPaint(systemColor0);
    assertTrue(logarithmicAxis0.isAxisLineVisible());
}",0,assertFalse(logarithmicAxis0.isAxisLineVisible())
project,0,test68403,"public void test68403() throws Throwable {
    LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(""r9i `5'939m{}T0"");
    SystemColor systemColor0 = SystemColor.menu;
    logarithmicAxis0.setLabelPaint(systemColor0);
    assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
}",0,
project,0,test68404,"public void test68404() throws Throwable {
    LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(""r9i `5'939m{}T0"");
    SystemColor systemColor0 = SystemColor.menu;
    logarithmicAxis0.setLabelPaint(systemColor0);
    assertTrue(logarithmicAxis0.isTickLabelsVisible());
}",0,assertFalse(logarithmicAxis0.isTickLabelsVisible())
project,0,test69405,"public void test69405() throws Throwable {
    CategoryAxis categoryAxis0 = new CategoryAxis();
    // Undeclared exception!
    try {
        categoryAxis0.setLabelFont((Font) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'font' argument.
        //
        verifyException(""org.jfree.chart.axis.Axis"", e);
    }
}",1,
project,0,test70406,"public void test70406() throws Throwable {
    DateAxis dateAxis0 = new DateAxis();
    NumberAxis numberAxis0 = new NumberAxis();
    numberAxis0.setLabelFont(dateAxis0.DEFAULT_AXIS_LABEL_FONT);
    assertTrue(numberAxis0.isTickMarksVisible());
}",0,
project,0,test70407,"public void test70407() throws Throwable {
    DateAxis dateAxis0 = new DateAxis();
    NumberAxis numberAxis0 = new NumberAxis();
    numberAxis0.setLabelFont(dateAxis0.DEFAULT_AXIS_LABEL_FONT);
    assertTrue(numberAxis0.isVisible());
}",0,assertFalse(numberAxis0.isVisible())
project,0,test70408,"public void test70408() throws Throwable {
    DateAxis dateAxis0 = new DateAxis();
    NumberAxis numberAxis0 = new NumberAxis();
    numberAxis0.setLabelFont(dateAxis0.DEFAULT_AXIS_LABEL_FONT);
    assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
}",0,
project,0,test70409,"public void test70409() throws Throwable {
    DateAxis dateAxis0 = new DateAxis();
    NumberAxis numberAxis0 = new NumberAxis();
    numberAxis0.setLabelFont(dateAxis0.DEFAULT_AXIS_LABEL_FONT);
    assertTrue(numberAxis0.isAxisLineVisible());
}",0,assertFalse(numberAxis0.isAxisLineVisible())
project,0,test70410,"public void test70410() throws Throwable {
    DateAxis dateAxis0 = new DateAxis();
    NumberAxis numberAxis0 = new NumberAxis();
    numberAxis0.setLabelFont(dateAxis0.DEFAULT_AXIS_LABEL_FONT);
    assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
}",0,
project,0,test70411,"public void test70411() throws Throwable {
    DateAxis dateAxis0 = new DateAxis();
    NumberAxis numberAxis0 = new NumberAxis();
    numberAxis0.setLabelFont(dateAxis0.DEFAULT_AXIS_LABEL_FONT);
    assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
}",0,
project,0,test70412,"public void test70412() throws Throwable {
    DateAxis dateAxis0 = new DateAxis();
    NumberAxis numberAxis0 = new NumberAxis();
    numberAxis0.setLabelFont(dateAxis0.DEFAULT_AXIS_LABEL_FONT);
    assertTrue(numberAxis0.isTickLabelsVisible());
}",0,assertFalse(numberAxis0.isTickLabelsVisible())
project,0,test71413,"public void test71413() throws Throwable {
    String[] stringArray0 = new String[6];
    SymbolAxis symbolAxis0 = new SymbolAxis((String) null, stringArray0);
    symbolAxis0.setLabel((String) null);
    assertEquals(0.0, symbolAxis0.getLabelAngle(), 0.01);
}",0,
project,0,test71414,"public void test71414() throws Throwable {
    String[] stringArray0 = new String[6];
    SymbolAxis symbolAxis0 = new SymbolAxis((String) null, stringArray0);
    symbolAxis0.setLabel((String) null);
    assertTrue(symbolAxis0.isAxisLineVisible());
}",0,assertFalse(symbolAxis0.isAxisLineVisible())
project,0,test71415,"public void test71415() throws Throwable {
    String[] stringArray0 = new String[6];
    SymbolAxis symbolAxis0 = new SymbolAxis((String) null, stringArray0);
    symbolAxis0.setLabel((String) null);
    assertEquals(2.0F, symbolAxis0.getTickMarkOutsideLength(), 0.01F);
}",0,
project,0,test71416,"public void test71416() throws Throwable {
    String[] stringArray0 = new String[6];
    SymbolAxis symbolAxis0 = new SymbolAxis((String) null, stringArray0);
    symbolAxis0.setLabel((String) null);
    assertEquals(0.0F, symbolAxis0.getTickMarkInsideLength(), 0.01F);
}",0,
project,0,test71417,"public void test71417() throws Throwable {
    String[] stringArray0 = new String[6];
    SymbolAxis symbolAxis0 = new SymbolAxis((String) null, stringArray0);
    symbolAxis0.setLabel((String) null);
    assertTrue(symbolAxis0.isTickLabelsVisible());
}",0,assertFalse(symbolAxis0.isTickLabelsVisible())
project,0,test71418,"public void test71418() throws Throwable {
    String[] stringArray0 = new String[6];
    SymbolAxis symbolAxis0 = new SymbolAxis((String) null, stringArray0);
    symbolAxis0.setLabel((String) null);
    assertTrue(symbolAxis0.isTickMarksVisible());
}",0,assertFalse(symbolAxis0.isTickMarksVisible())
project,0,test71419,"public void test71419() throws Throwable {
    String[] stringArray0 = new String[6];
    SymbolAxis symbolAxis0 = new SymbolAxis((String) null, stringArray0);
    symbolAxis0.setLabel((String) null);
    assertTrue(symbolAxis0.isVisible());
}",0,assertFalse(symbolAxis0.isVisible())
project,0,test72420,"public void test72420() throws Throwable {
    PeriodAxis periodAxis0 = new PeriodAxis("""");
    periodAxis0.setLabel("""");
    assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
}",0,
project,0,test72421,"public void test72421() throws Throwable {
    PeriodAxis periodAxis0 = new PeriodAxis("""");
    periodAxis0.setLabel("""");
    assertTrue(periodAxis0.isAxisLineVisible());
}",0,assertTrue(periodAxis0.isAxisLineVisible())
project,0,test72422,"public void test72422() throws Throwable {
    PeriodAxis periodAxis0 = new PeriodAxis("""");
    periodAxis0.setLabel("""");
    assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
}",0,
project,0,test72423,"public void test72423() throws Throwable {
    PeriodAxis periodAxis0 = new PeriodAxis("""");
    periodAxis0.setLabel("""");
    assertTrue(periodAxis0.isTickLabelsVisible());
}",0,assertTrue(periodAxis0.isTickLabelsVisible())
project,0,test72424,"public void test72424() throws Throwable {
    PeriodAxis periodAxis0 = new PeriodAxis("""");
    periodAxis0.setLabel("""");
    assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
}",0,
project,0,test72425,"public void test72425() throws Throwable {
    PeriodAxis periodAxis0 = new PeriodAxis("""");
    periodAxis0.setLabel("""");
    assertTrue(periodAxis0.isVisible());
}",0,assertFalse(periodAxis0.isVisible())
project,0,test72426,"public void test72426() throws Throwable {
    PeriodAxis periodAxis0 = new PeriodAxis("""");
    periodAxis0.setLabel("""");
    assertTrue(periodAxis0.isTickMarksVisible());
}",0,assertTrue(periodAxis0.isTickMarksVisible())
project,0,test73427,"public void test73427() throws Throwable {
    NumberAxis3D numberAxis3D0 = new NumberAxis3D();
    numberAxis3D0.setLabel(""org.jfree.data.general.DatasetChangeListener"");
    numberAxis3D0.setLabel(""?6?y{g>)q`1"");
    assertEquals(""?6?y{g>)q`1"", numberAxis3D0.getLabel());
}",0,assertNotNull(numberAxis3D0.getLabel())
project,0,test74428,"public void test74428() throws Throwable {
    Quarter quarter0 = new Quarter();
    PeriodAxis periodAxis0 = new PeriodAxis((String) null, quarter0, quarter0);
    assertTrue(periodAxis0.isVisible());
}",0,assertFalse(periodAxis0.isVisible())
project,0,test74429,"public void test74429() throws Throwable {
    Quarter quarter0 = new Quarter();
    PeriodAxis periodAxis0 = new PeriodAxis((String) null, quarter0, quarter0);
    periodAxis0.setVisible(false);
    assertFalse(periodAxis0.isVisible());
}",0,
project,0,test75430,"public void test75430() throws Throwable {
    DateAxis dateAxis0 = new DateAxis();
    assertTrue(dateAxis0.isVisible());
}",0,
project,0,test75431,"public void test75431() throws Throwable {
    DateAxis dateAxis0 = new DateAxis();
    dateAxis0.setVisible(true);
    assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
}",0,
project,0,test75432,"public void test75432() throws Throwable {
    DateAxis dateAxis0 = new DateAxis();
    dateAxis0.setVisible(true);
    assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
}",0,
project,0,test75433,"public void test75433() throws Throwable {
    DateAxis dateAxis0 = new DateAxis();
    dateAxis0.setVisible(true);
    assertTrue(dateAxis0.isTickMarksVisible());
}",0,assertTrue(dateAxis0.isTickMarksVisible())
project,0,test75434,"public void test75434() throws Throwable {
    DateAxis dateAxis0 = new DateAxis();
    dateAxis0.setVisible(true);
    assertTrue(dateAxis0.isTickLabelsVisible());
}",0,assertTrue(dateAxis0.isTickLabelsVisible())
project,0,test75435,"public void test75435() throws Throwable {
    DateAxis dateAxis0 = new DateAxis();
    dateAxis0.setVisible(true);
    assertTrue(dateAxis0.isAxisLineVisible());
}",0,assertTrue(dateAxis0.isAxisLineVisible())
project,0,test75436,"public void test75436() throws Throwable {
    DateAxis dateAxis0 = new DateAxis();
    dateAxis0.setVisible(true);
    assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
}",0,
project,0,test76437,"public void test76437() throws Throwable {
    SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis(""r"");
    subCategoryAxis0.setTickMarkInsideLength(2539.738F);
    assertEquals(2539.738F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
}",0,
project,0,test77438,"public void test77438() throws Throwable {
    PeriodAxis periodAxis0 = new PeriodAxis("""");
    periodAxis0.getLabelToolTip();
    assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
}",0,
project,0,test77439,"public void test77439() throws Throwable {
    PeriodAxis periodAxis0 = new PeriodAxis("""");
    periodAxis0.getLabelToolTip();
    assertTrue(periodAxis0.isAxisLineVisible());
}",0,
project,0,test77440,"public void test77440() throws Throwable {
    PeriodAxis periodAxis0 = new PeriodAxis("""");
    periodAxis0.getLabelToolTip();
    assertTrue(periodAxis0.isTickMarksVisible());
}",0,assertTrue(periodAxis0.isTickMarksVisible())
project,0,test77441,"public void test77441() throws Throwable {
    PeriodAxis periodAxis0 = new PeriodAxis("""");
    periodAxis0.getLabelToolTip();
    assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
}",0,
project,0,test77442,"public void test77442() throws Throwable {
    PeriodAxis periodAxis0 = new PeriodAxis("""");
    periodAxis0.getLabelToolTip();
    assertTrue(periodAxis0.isTickLabelsVisible());
}",0,
project,0,test77443,"public void test77443() throws Throwable {
    PeriodAxis periodAxis0 = new PeriodAxis("""");
    periodAxis0.getLabelToolTip();
    assertTrue(periodAxis0.isVisible());
}",0,
project,0,test77444,"public void test77444() throws Throwable {
    PeriodAxis periodAxis0 = new PeriodAxis("""");
    periodAxis0.getLabelToolTip();
    assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
}",0,
project,0,test78445,"public void test78445() throws Throwable {
    DateAxis dateAxis0 = new DateAxis(""x>eJX?N9S%_X>"");
    dateAxis0.getLabelURL();
    assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
}",0,
project,0,test78446,"public void test78446() throws Throwable {
    DateAxis dateAxis0 = new DateAxis(""x>eJX?N9S%_X>"");
    dateAxis0.getLabelURL();
    assertTrue(dateAxis0.isTickMarksVisible());
}",0,assertTrue(dateAxis0.isTickMarksVisible())
project,0,test78447,"public void test78447() throws Throwable {
    DateAxis dateAxis0 = new DateAxis(""x>eJX?N9S%_X>"");
    dateAxis0.getLabelURL();
    assertTrue(dateAxis0.isVisible());
}",0,assertTrue(dateAxis0.isVisible())
project,0,test78448,"public void test78448() throws Throwable {
    DateAxis dateAxis0 = new DateAxis(""x>eJX?N9S%_X>"");
    dateAxis0.getLabelURL();
    assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
}",0,
project,0,test78449,"public void test78449() throws Throwable {
    DateAxis dateAxis0 = new DateAxis(""x>eJX?N9S%_X>"");
    dateAxis0.getLabelURL();
    assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
}",0,
project,0,test78450,"public void test78450() throws Throwable {
    DateAxis dateAxis0 = new DateAxis(""x>eJX?N9S%_X>"");
    dateAxis0.getLabelURL();
    assertTrue(dateAxis0.isTickLabelsVisible());
}",0,assertTrue(dateAxis0.isTickLabelsVisible())
project,0,test78451,"public void test78451() throws Throwable {
    DateAxis dateAxis0 = new DateAxis(""x>eJX?N9S%_X>"");
    dateAxis0.getLabelURL();
    assertTrue(dateAxis0.isAxisLineVisible());
}",0,
project,0,test79452,"public void test79452() throws Throwable {
    CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D(""TK`"");
    categoryAxis3D0.setLabelAngle(0.0F);
    assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
}",0,
project,0,test79453,"public void test79453() throws Throwable {
    CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D(""TK`"");
    categoryAxis3D0.setLabelAngle(0.0F);
    assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
}",0,
project,0,test79454,"public void test79454() throws Throwable {
    CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D(""TK`"");
    categoryAxis3D0.setLabelAngle(0.0F);
    assertTrue(categoryAxis3D0.isAxisLineVisible());
}",0,assertFalse(categoryAxis3D0.isAxisLineVisible())
project,0,test79455,"public void test79455() throws Throwable {
    CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D(""TK`"");
    categoryAxis3D0.setLabelAngle(0.0F);
    assertTrue(categoryAxis3D0.isVisible());
}",0,assertTrue(categoryAxis3D0.isVisible())
project,0,test79456,"public void test79456() throws Throwable {
    CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D(""TK`"");
    categoryAxis3D0.setLabelAngle(0.0F);
    assertFalse(categoryAxis3D0.isTickMarksVisible());
}",0,assertTrue(categoryAxis3D0.isTickMarksVisible())
project,0,test79457,"public void test79457() throws Throwable {
    CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D(""TK`"");
    categoryAxis3D0.setLabelAngle(0.0F);
    assertTrue(categoryAxis3D0.isTickLabelsVisible());
}",0,assertFalse(categoryAxis3D0.isTickLabelsVisible())
project,0,test79458,"public void test79458() throws Throwable {
    CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D(""TK`"");
    categoryAxis3D0.setLabelAngle(0.0F);
    assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
}",0,
project,0,test80459,"public void test80459() throws Throwable {
    NumberAxis3D numberAxis3D0 = new NumberAxis3D();
    numberAxis3D0.setLabelToolTip(""?6?y{g>)q`1"");
    assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
}",0,
project,0,test80460,"public void test80460() throws Throwable {
    NumberAxis3D numberAxis3D0 = new NumberAxis3D();
    numberAxis3D0.setLabelToolTip(""?6?y{g>)q`1"");
    assertTrue(numberAxis3D0.isTickMarksVisible());
}",0,assertTrue(numberAxis3D0.isTickMarksVisible())
project,0,test80461,"public void test80461() throws Throwable {
    NumberAxis3D numberAxis3D0 = new NumberAxis3D();
    numberAxis3D0.setLabelToolTip(""?6?y{g>)q`1"");
    assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
}",0,
project,0,test80462,"public void test80462() throws Throwable {
    NumberAxis3D numberAxis3D0 = new NumberAxis3D();
    numberAxis3D0.setLabelToolTip(""?6?y{g>)q`1"");
    assertTrue(numberAxis3D0.isTickLabelsVisible());
}",0,assertFalse(numberAxis3D0.isTickLabelsVisible())
project,0,test80463,"public void test80463() throws Throwable {
    NumberAxis3D numberAxis3D0 = new NumberAxis3D();
    numberAxis3D0.setLabelToolTip(""?6?y{g>)q`1"");
    assertTrue(numberAxis3D0.isVisible());
}",0,assertTrue(numberAxis3D0.isVisible())
project,0,test80464,"public void test80464() throws Throwable {
    NumberAxis3D numberAxis3D0 = new NumberAxis3D();
    numberAxis3D0.setLabelToolTip(""?6?y{g>)q`1"");
    assertFalse(numberAxis3D0.isAxisLineVisible());
}",0,assertTrue(numberAxis3D0.isAxisLineVisible())
project,0,test80465,"public void test80465() throws Throwable {
    NumberAxis3D numberAxis3D0 = new NumberAxis3D();
    numberAxis3D0.setLabelToolTip(""?6?y{g>)q`1"");
    assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
}",0,
project,0,test81466,"public void test81466() throws Throwable {
    CategoryAxis categoryAxis0 = new CategoryAxis();
    categoryAxis0.setLabelURL(""ZF#c3@e32uoO[K"");
    assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
}",0,
project,0,test81467,"public void test81467() throws Throwable {
    CategoryAxis categoryAxis0 = new CategoryAxis();
    categoryAxis0.setLabelURL(""ZF#c3@e32uoO[K"");
    assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
}",0,
project,0,test81468,"public void test81468() throws Throwable {
    CategoryAxis categoryAxis0 = new CategoryAxis();
    categoryAxis0.setLabelURL(""ZF#c3@e32uoO[K"");
    assertTrue(categoryAxis0.isTickLabelsVisible());
}",0,assertFalse(categoryAxis0.isTickLabelsVisible())
project,0,test81469,"public void test81469() throws Throwable {
    CategoryAxis categoryAxis0 = new CategoryAxis();
    categoryAxis0.setLabelURL(""ZF#c3@e32uoO[K"");
    assertTrue(categoryAxis0.isVisible());
}",0,assertTrue(categoryAxis0.isVisible())
project,0,test81470,"public void test81470() throws Throwable {
    CategoryAxis categoryAxis0 = new CategoryAxis();
    categoryAxis0.setLabelURL(""ZF#c3@e32uoO[K"");
    assertFalse(categoryAxis0.isTickMarksVisible());
}",0,assertFalse(categoryAxis0.isTickMarksVisible())
project,0,test81471,"public void test81471() throws Throwable {
    CategoryAxis categoryAxis0 = new CategoryAxis();
    categoryAxis0.setLabelURL(""ZF#c3@e32uoO[K"");
    assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
}",0,
project,0,test81472,"public void test81472() throws Throwable {
    CategoryAxis categoryAxis0 = new CategoryAxis();
    categoryAxis0.setLabelURL(""ZF#c3@e32uoO[K"");
    assertTrue(categoryAxis0.isAxisLineVisible());
}",0,assertFalse(categoryAxis0.isAxisLineVisible())
project,0,test82473,"public void test82473() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0);
    cyclicNumberAxis0.setFixedDimension(0.0);
    assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
}",0,
project,0,test82474,"public void test82474() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0);
    cyclicNumberAxis0.setFixedDimension(0.0);
    assertTrue(cyclicNumberAxis0.isTickMarksVisible());
}",0,assertFalse(cyclicNumberAxis0.isTickMarksVisible())
project,0,test82475,"public void test82475() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0);
    cyclicNumberAxis0.setFixedDimension(0.0);
    assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
}",0,
project,0,test82476,"public void test82476() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0);
    cyclicNumberAxis0.setFixedDimension(0.0);
    assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
}",0,
project,0,test82477,"public void test82477() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0);
    cyclicNumberAxis0.setFixedDimension(0.0);
    assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
}",0,
project,0,test82478,"public void test82478() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0);
    cyclicNumberAxis0.setFixedDimension(0.0);
    assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
}",0,
project,0,test82479,"public void test82479() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0);
    cyclicNumberAxis0.setFixedDimension(0.0);
    assertTrue(cyclicNumberAxis0.isVisible());
}",0,assertTrue(cyclicNumberAxis0.isVisible())
project,0,test82480,"public void test82480() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0);
    cyclicNumberAxis0.setFixedDimension(0.0);
    assertTrue(cyclicNumberAxis0.isAxisLineVisible());
}",0,assertFalse(cyclicNumberAxis0.isAxisLineVisible())
