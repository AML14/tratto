focal_method,test_prefix,docstring
"public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof StatisticalBarRenderer)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    StatisticalBarRenderer that = (StatisticalBarRenderer) obj;
    if (!PaintUtilities.equal(this.errorIndicatorPaint, that.errorIndicatorPaint)) {
        return false;
    }
    return true;
}","public void test000() throws Throwable {
    StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
    StatisticalBarRenderer statisticalBarRenderer1 = new StatisticalBarRenderer();
    assertTrue(statisticalBarRenderer1.equals((Object) statisticalBarRenderer0));
}","/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */"
"public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof StatisticalBarRenderer)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    StatisticalBarRenderer that = (StatisticalBarRenderer) obj;
    if (!PaintUtilities.equal(this.errorIndicatorPaint, that.errorIndicatorPaint)) {
        return false;
    }
    return true;
}","public void test001() throws Throwable {
    StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
    StatisticalBarRenderer statisticalBarRenderer1 = new StatisticalBarRenderer();
    statisticalBarRenderer1.setErrorIndicatorPaint(statisticalBarRenderer0.DEFAULT_PAINT);
    boolean boolean0 = statisticalBarRenderer0.equals(statisticalBarRenderer1);
    assertFalse(statisticalBarRenderer1.equals((Object) statisticalBarRenderer0));
}","/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */"
"public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof StatisticalBarRenderer)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    StatisticalBarRenderer that = (StatisticalBarRenderer) obj;
    if (!PaintUtilities.equal(this.errorIndicatorPaint, that.errorIndicatorPaint)) {
        return false;
    }
    return true;
}","public void test002() throws Throwable {
    StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
    StatisticalBarRenderer statisticalBarRenderer1 = new StatisticalBarRenderer();
    statisticalBarRenderer1.setErrorIndicatorPaint(statisticalBarRenderer0.DEFAULT_PAINT);
    boolean boolean0 = statisticalBarRenderer0.equals(statisticalBarRenderer1);
    assertFalse(boolean0);
}","/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */"
"public void drawItem(Graphics2D g2, CategoryItemRendererState state, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, CategoryDataset data, int row, int column, int pass) {
    // defensive check
    if (!(data instanceof StatisticalCategoryDataset)) {
        throw new IllegalArgumentException(""Requires StatisticalCategoryDataset."");
    }
    StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;
    PlotOrientation orientation = plot.getOrientation();
    if (orientation == PlotOrientation.HORIZONTAL) {
        drawHorizontalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, statData, row, column);
    } else if (orientation == PlotOrientation.VERTICAL) {
        drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, statData, row, column);
    }
}","public void test013() throws Throwable {
    StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    JFreeChart jFreeChart0 = new JFreeChart(""^W~v9qa9 }v^!fxRjF"", combinedRangeXYPlot0);
    StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
    BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 1, chartRenderingInfo0);
    Graphics2D graphics2D0 = bufferedImage0.createGraphics();
    PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
    CategoryItemRendererState categoryItemRendererState0 = statisticalBarRenderer0.createState(plotRenderingInfo0);
    Rectangle2D rectangle2D0 = plotRenderingInfo0.getDataArea();
    CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
    CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D(""U#Vq9&"");
    categoryItemRendererState0.setBarWidth(140);
    NumberAxis numberAxis0 = new NumberAxis(""^W~v9qa9 }v^!fxRjF"");
    DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
    // Undeclared exception!
    try {
        statisticalBarRenderer0.drawItem(graphics2D0, categoryItemRendererState0, rectangle2D0, combinedDomainCategoryPlot0, categoryAxis3D0, numberAxis0, defaultStatisticalCategoryDataset0, 1, 27, 10);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 1, Size: 0
        //
        verifyException(""java.util.ArrayList"", e);
    }
}","/**
 * Draws the bar with its standard deviation line range for a single
 * (series, category) data item.
 *
 * @param g2  the graphics device.
 * @param state  the renderer state.
 * @param dataArea  the data area.
 * @param plot  the plot.
 * @param domainAxis  the domain axis.
 * @param rangeAxis  the range axis.
 * @param data  the data.
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * @param pass  the pass index.
 */"
"protected void drawHorizontalItem(Graphics2D g2, CategoryItemRendererState state, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, StatisticalCategoryDataset dataset, int row, int column) {
    RectangleEdge xAxisLocation = plot.getDomainAxisEdge();
    // BAR Y
    double rectY = domainAxis.getCategoryStart(column, getColumnCount(), dataArea, xAxisLocation);
    int seriesCount = getRowCount();
    int categoryCount = getColumnCount();
    if (seriesCount > 1) {
        double seriesGap = dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));
        rectY = rectY + row * (state.getBarWidth() + seriesGap);
    } else {
        rectY = rectY + row * state.getBarWidth();
    }
    // BAR X
    Number meanValue = dataset.getMeanValue(row, column);
    double value = meanValue.doubleValue();
    double base = 0.0;
    double lclip = getLowerClip();
    double uclip = getUpperClip();
    if (uclip <= 0.0) {
        // cases 1, 2, 3 and 4
        if (value >= uclip) {
            // bar is not visible
            return;
        }
        base = uclip;
        if (value <= lclip) {
            value = lclip;
        }
    } else if (lclip <= 0.0) {
        // cases 5, 6, 7 and 8
        if (value >= uclip) {
            value = uclip;
        } else {
            if (value <= lclip) {
                value = lclip;
            }
        }
    } else {
        // cases 9, 10, 11 and 12
        if (value <= lclip) {
            // bar is not visible
            return;
        }
        base = getLowerClip();
        if (value >= uclip) {
            value = uclip;
        }
    }
    RectangleEdge yAxisLocation = plot.getRangeAxisEdge();
    double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);
    double transY2 = rangeAxis.valueToJava2D(value, dataArea, yAxisLocation);
    double rectX = Math.min(transY2, transY1);
    double rectHeight = state.getBarWidth();
    double rectWidth = Math.abs(transY2 - transY1);
    Rectangle2D bar = new Rectangle2D.Double(rectX, rectY, rectWidth, rectHeight);
    Paint seriesPaint = getItemPaint(row, column);
    g2.setPaint(seriesPaint);
    g2.fill(bar);
    if (isDrawBarOutline() && state.getBarWidth() > 3) {
        g2.setStroke(getItemStroke(row, column));
        g2.setPaint(getItemOutlinePaint(row, column));
        g2.draw(bar);
    }
    // standard deviation lines
    double valueDelta = dataset.getStdDevValue(row, column).doubleValue();
    double highVal = rangeAxis.valueToJava2D(meanValue.doubleValue() + valueDelta, dataArea, yAxisLocation);
    double lowVal = rangeAxis.valueToJava2D(meanValue.doubleValue() - valueDelta, dataArea, yAxisLocation);
    if (this.errorIndicatorStroke != null) {
        g2.setStroke(this.errorIndicatorStroke);
    } else {
        g2.setStroke(getItemOutlineStroke(row, column));
    }
    if (this.errorIndicatorPaint != null) {
        g2.setPaint(this.errorIndicatorPaint);
    } else {
        g2.setPaint(getItemOutlinePaint(row, column));
    }
    Line2D line = null;
    line = new Line2D.Double(lowVal, rectY + rectHeight / 2.0d, highVal, rectY + rectHeight / 2.0d);
    g2.draw(line);
    line = new Line2D.Double(highVal, rectY + rectHeight * 0.25, highVal, rectY + rectHeight * 0.75);
    g2.draw(line);
    line = new Line2D.Double(lowVal, rectY + rectHeight * 0.25, lowVal, rectY + rectHeight * 0.75);
    g2.draw(line);
    CategoryItemLabelGenerator generator = getItemLabelGenerator(row, column);
    if (generator != null && isItemLabelVisible(row, column)) {
        drawItemLabel(g2, dataset, row, column, plot, generator, bar, (value < 0.0));
    }
    // add an item entity, if this information is being collected
    EntityCollection entities = state.getEntityCollection();
    if (entities != null) {
        addItemEntity(entities, dataset, row, column, bar);
    }
}","public void test024() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    JFreeChart jFreeChart0 = new JFreeChart(""^W~v9qa9 }v^!fxRjF"", combinedRangeXYPlot0);
    StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
    BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 1, chartRenderingInfo0);
    Graphics2D graphics2D0 = bufferedImage0.createGraphics();
    StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
    PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
    Rectangle2D rectangle2D0 = plotRenderingInfo0.getDataArea();
    CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
    CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D(""U#Vq9&"");
    NumberAxis numberAxis0 = new NumberAxis(""^W~v9qa9 }v^!fxRjF"");
    DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
    CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
    CategoryItemRendererState categoryItemRendererState0 = categoryStepRenderer0.createState(plotRenderingInfo0);
    categoryItemRendererState0.setBarWidth((-706.7233107376167));
    // Undeclared exception!
    try {
        statisticalBarRenderer0.drawHorizontalItem(graphics2D0, categoryItemRendererState0, rectangle2D0, combinedDomainCategoryPlot0, categoryAxis3D0, numberAxis0, defaultStatisticalCategoryDataset0, 3463, 1);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 3463, Size: 0
        //
        verifyException(""java.util.ArrayList"", e);
    }
}","/**
 * Draws an item for a plot with a horizontal orientation.
 *
 * @param g2  the graphics device.
 * @param state  the renderer state.
 * @param dataArea  the data area.
 * @param plot  the plot.
 * @param domainAxis  the domain axis.
 * @param rangeAxis  the range axis.
 * @param dataset  the data.
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 */"
"public Stroke getErrorIndicatorStroke() {
    return this.errorIndicatorStroke;
}","public void test035() throws Throwable {
    StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
    statisticalBarRenderer0.setErrorIndicatorStroke((Stroke) null);
    Stroke stroke0 = statisticalBarRenderer0.getErrorIndicatorStroke();
    assertNull(stroke0);
}","/**
 * Returns the stroke used for the error indicators.
 *
 * @return The stroke (possibly <code>null</code>).
 *
 * @see #setErrorIndicatorStroke(Stroke)
 *
 * @since 1.2.0
 */"
"public Paint getErrorIndicatorPaint() {
    return this.errorIndicatorPaint;
}","public void test046() throws Throwable {
    StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
    statisticalBarRenderer0.setErrorIndicatorPaint((Paint) null);
    Paint paint0 = statisticalBarRenderer0.getErrorIndicatorPaint();
    assertNull(paint0);
}","/**
 * Returns the paint used for the error indicators.
 *
 * @return The paint used for the error indicators (possibly
 *         <code>null</code>).
 *
 * @see #setErrorIndicatorPaint(Paint)
 */"
"protected void drawVerticalItem(Graphics2D g2, CategoryItemRendererState state, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, StatisticalCategoryDataset dataset, int row, int column) {
    RectangleEdge xAxisLocation = plot.getDomainAxisEdge();
    // BAR X
    double rectX = domainAxis.getCategoryStart(column, getColumnCount(), dataArea, xAxisLocation);
    int seriesCount = getRowCount();
    int categoryCount = getColumnCount();
    if (seriesCount > 1) {
        double seriesGap = dataArea.getWidth() * getItemMargin() / (categoryCount * (seriesCount - 1));
        rectX = rectX + row * (state.getBarWidth() + seriesGap);
    } else {
        rectX = rectX + row * state.getBarWidth();
    }
    // BAR Y
    Number meanValue = dataset.getMeanValue(row, column);
    double value = meanValue.doubleValue();
    double base = 0.0;
    double lclip = getLowerClip();
    double uclip = getUpperClip();
    if (uclip <= 0.0) {
        // cases 1, 2, 3 and 4
        if (value >= uclip) {
            // bar is not visible
            return;
        }
        base = uclip;
        if (value <= lclip) {
            value = lclip;
        }
    } else if (lclip <= 0.0) {
        // cases 5, 6, 7 and 8
        if (value >= uclip) {
            value = uclip;
        } else {
            if (value <= lclip) {
                value = lclip;
            }
        }
    } else {
        // cases 9, 10, 11 and 12
        if (value <= lclip) {
            // bar is not visible
            return;
        }
        base = getLowerClip();
        if (value >= uclip) {
            value = uclip;
        }
    }
    RectangleEdge yAxisLocation = plot.getRangeAxisEdge();
    double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);
    double transY2 = rangeAxis.valueToJava2D(value, dataArea, yAxisLocation);
    double rectY = Math.min(transY2, transY1);
    double rectWidth = state.getBarWidth();
    double rectHeight = Math.abs(transY2 - transY1);
    Rectangle2D bar = new Rectangle2D.Double(rectX, rectY, rectWidth, rectHeight);
    Paint seriesPaint = getItemPaint(row, column);
    g2.setPaint(seriesPaint);
    g2.fill(bar);
    if (isDrawBarOutline() && state.getBarWidth() > 3) {
        g2.setStroke(getItemStroke(row, column));
        g2.setPaint(getItemOutlinePaint(row, column));
        g2.draw(bar);
    }
    // standard deviation lines
    double valueDelta = dataset.getStdDevValue(row, column).doubleValue();
    double highVal = rangeAxis.valueToJava2D(meanValue.doubleValue() + valueDelta, dataArea, yAxisLocation);
    double lowVal = rangeAxis.valueToJava2D(meanValue.doubleValue() - valueDelta, dataArea, yAxisLocation);
    if (this.errorIndicatorStroke != null) {
        g2.setStroke(this.errorIndicatorStroke);
    } else {
        g2.setStroke(getItemOutlineStroke(row, column));
    }
    if (this.errorIndicatorPaint != null) {
        g2.setPaint(this.errorIndicatorPaint);
    } else {
        g2.setPaint(getItemOutlinePaint(row, column));
    }
    Line2D line = null;
    line = new Line2D.Double(rectX + rectWidth / 2.0d, lowVal, rectX + rectWidth / 2.0d, highVal);
    g2.draw(line);
    line = new Line2D.Double(rectX + rectWidth / 2.0d - 5.0d, highVal, rectX + rectWidth / 2.0d + 5.0d, highVal);
    g2.draw(line);
    line = new Line2D.Double(rectX + rectWidth / 2.0d - 5.0d, lowVal, rectX + rectWidth / 2.0d + 5.0d, lowVal);
    g2.draw(line);
    CategoryItemLabelGenerator generator = getItemLabelGenerator(row, column);
    if (generator != null && isItemLabelVisible(row, column)) {
        drawItemLabel(g2, dataset, row, column, plot, generator, bar, (value < 0.0));
    }
    // add an item entity, if this information is being collected
    EntityCollection entities = state.getEntityCollection();
    if (entities != null) {
        addItemEntity(entities, dataset, row, column, bar);
    }
}","public void test057() throws Throwable {
    StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
    DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
    MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultStatisticalCategoryDataset0);
    JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
    BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, (ChartRenderingInfo) null);
    Graphics2D graphics2D0 = bufferedImage0.createGraphics();
    PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
    CategoryItemRendererState categoryItemRendererState0 = new CategoryItemRendererState(plotRenderingInfo0);
    CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
    CategoryAxis categoryAxis0 = new CategoryAxis("""");
    PeriodAxis periodAxis0 = new PeriodAxis("""");
    // Undeclared exception!
    try {
        statisticalBarRenderer0.drawVerticalItem(graphics2D0, categoryItemRendererState0, (Rectangle2D) null, combinedRangeCategoryPlot0, categoryAxis0, periodAxis0, defaultStatisticalCategoryDataset0, 10, 0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jfree.chart.axis.CategoryAxis"", e);
    }
}","/**
 * Draws an item for a plot with a vertical orientation.
 *
 * @param g2  the graphics device.
 * @param state  the renderer state.
 * @param dataArea  the data area.
 * @param plot  the plot.
 * @param domainAxis  the domain axis.
 * @param rangeAxis  the range axis.
 * @param dataset  the data.
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 */"
"protected void drawVerticalItem(Graphics2D g2, CategoryItemRendererState state, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, StatisticalCategoryDataset dataset, int row, int column) {
    RectangleEdge xAxisLocation = plot.getDomainAxisEdge();
    // BAR X
    double rectX = domainAxis.getCategoryStart(column, getColumnCount(), dataArea, xAxisLocation);
    int seriesCount = getRowCount();
    int categoryCount = getColumnCount();
    if (seriesCount > 1) {
        double seriesGap = dataArea.getWidth() * getItemMargin() / (categoryCount * (seriesCount - 1));
        rectX = rectX + row * (state.getBarWidth() + seriesGap);
    } else {
        rectX = rectX + row * state.getBarWidth();
    }
    // BAR Y
    Number meanValue = dataset.getMeanValue(row, column);
    double value = meanValue.doubleValue();
    double base = 0.0;
    double lclip = getLowerClip();
    double uclip = getUpperClip();
    if (uclip <= 0.0) {
        // cases 1, 2, 3 and 4
        if (value >= uclip) {
            // bar is not visible
            return;
        }
        base = uclip;
        if (value <= lclip) {
            value = lclip;
        }
    } else if (lclip <= 0.0) {
        // cases 5, 6, 7 and 8
        if (value >= uclip) {
            value = uclip;
        } else {
            if (value <= lclip) {
                value = lclip;
            }
        }
    } else {
        // cases 9, 10, 11 and 12
        if (value <= lclip) {
            // bar is not visible
            return;
        }
        base = getLowerClip();
        if (value >= uclip) {
            value = uclip;
        }
    }
    RectangleEdge yAxisLocation = plot.getRangeAxisEdge();
    double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);
    double transY2 = rangeAxis.valueToJava2D(value, dataArea, yAxisLocation);
    double rectY = Math.min(transY2, transY1);
    double rectWidth = state.getBarWidth();
    double rectHeight = Math.abs(transY2 - transY1);
    Rectangle2D bar = new Rectangle2D.Double(rectX, rectY, rectWidth, rectHeight);
    Paint seriesPaint = getItemPaint(row, column);
    g2.setPaint(seriesPaint);
    g2.fill(bar);
    if (isDrawBarOutline() && state.getBarWidth() > 3) {
        g2.setStroke(getItemStroke(row, column));
        g2.setPaint(getItemOutlinePaint(row, column));
        g2.draw(bar);
    }
    // standard deviation lines
    double valueDelta = dataset.getStdDevValue(row, column).doubleValue();
    double highVal = rangeAxis.valueToJava2D(meanValue.doubleValue() + valueDelta, dataArea, yAxisLocation);
    double lowVal = rangeAxis.valueToJava2D(meanValue.doubleValue() - valueDelta, dataArea, yAxisLocation);
    if (this.errorIndicatorStroke != null) {
        g2.setStroke(this.errorIndicatorStroke);
    } else {
        g2.setStroke(getItemOutlineStroke(row, column));
    }
    if (this.errorIndicatorPaint != null) {
        g2.setPaint(this.errorIndicatorPaint);
    } else {
        g2.setPaint(getItemOutlinePaint(row, column));
    }
    Line2D line = null;
    line = new Line2D.Double(rectX + rectWidth / 2.0d, lowVal, rectX + rectWidth / 2.0d, highVal);
    g2.draw(line);
    line = new Line2D.Double(rectX + rectWidth / 2.0d - 5.0d, highVal, rectX + rectWidth / 2.0d + 5.0d, highVal);
    g2.draw(line);
    line = new Line2D.Double(rectX + rectWidth / 2.0d - 5.0d, lowVal, rectX + rectWidth / 2.0d + 5.0d, lowVal);
    g2.draw(line);
    CategoryItemLabelGenerator generator = getItemLabelGenerator(row, column);
    if (generator != null && isItemLabelVisible(row, column)) {
        drawItemLabel(g2, dataset, row, column, plot, generator, bar, (value < 0.0));
    }
    // add an item entity, if this information is being collected
    EntityCollection entities = state.getEntityCollection();
    if (entities != null) {
        addItemEntity(entities, dataset, row, column, bar);
    }
}","public void test068() throws Throwable {
    StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
    StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
    PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
    CategoryItemRendererState categoryItemRendererState0 = statisticalBarRenderer0.createState(plotRenderingInfo0);
    Rectangle2D rectangle2D0 = plotRenderingInfo0.getDataArea();
    CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
    CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D(""U#Vq9&"");
    NumberAxis numberAxis0 = new NumberAxis(""^W~v9qa9 }v^!fxRjF"");
    DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
    // Undeclared exception!
    try {
        statisticalBarRenderer0.drawVerticalItem((Graphics2D) null, categoryItemRendererState0, rectangle2D0, combinedDomainCategoryPlot0, categoryAxis3D0, numberAxis0, defaultStatisticalCategoryDataset0, 0, 420);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 0, Size: 0
        //
        verifyException(""java.util.ArrayList"", e);
    }
}","/**
 * Draws an item for a plot with a vertical orientation.
 *
 * @param g2  the graphics device.
 * @param state  the renderer state.
 * @param dataArea  the data area.
 * @param plot  the plot.
 * @param domainAxis  the domain axis.
 * @param rangeAxis  the range axis.
 * @param dataset  the data.
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 */"
"protected void drawVerticalItem(Graphics2D g2, CategoryItemRendererState state, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, StatisticalCategoryDataset dataset, int row, int column) {
    RectangleEdge xAxisLocation = plot.getDomainAxisEdge();
    // BAR X
    double rectX = domainAxis.getCategoryStart(column, getColumnCount(), dataArea, xAxisLocation);
    int seriesCount = getRowCount();
    int categoryCount = getColumnCount();
    if (seriesCount > 1) {
        double seriesGap = dataArea.getWidth() * getItemMargin() / (categoryCount * (seriesCount - 1));
        rectX = rectX + row * (state.getBarWidth() + seriesGap);
    } else {
        rectX = rectX + row * state.getBarWidth();
    }
    // BAR Y
    Number meanValue = dataset.getMeanValue(row, column);
    double value = meanValue.doubleValue();
    double base = 0.0;
    double lclip = getLowerClip();
    double uclip = getUpperClip();
    if (uclip <= 0.0) {
        // cases 1, 2, 3 and 4
        if (value >= uclip) {
            // bar is not visible
            return;
        }
        base = uclip;
        if (value <= lclip) {
            value = lclip;
        }
    } else if (lclip <= 0.0) {
        // cases 5, 6, 7 and 8
        if (value >= uclip) {
            value = uclip;
        } else {
            if (value <= lclip) {
                value = lclip;
            }
        }
    } else {
        // cases 9, 10, 11 and 12
        if (value <= lclip) {
            // bar is not visible
            return;
        }
        base = getLowerClip();
        if (value >= uclip) {
            value = uclip;
        }
    }
    RectangleEdge yAxisLocation = plot.getRangeAxisEdge();
    double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);
    double transY2 = rangeAxis.valueToJava2D(value, dataArea, yAxisLocation);
    double rectY = Math.min(transY2, transY1);
    double rectWidth = state.getBarWidth();
    double rectHeight = Math.abs(transY2 - transY1);
    Rectangle2D bar = new Rectangle2D.Double(rectX, rectY, rectWidth, rectHeight);
    Paint seriesPaint = getItemPaint(row, column);
    g2.setPaint(seriesPaint);
    g2.fill(bar);
    if (isDrawBarOutline() && state.getBarWidth() > 3) {
        g2.setStroke(getItemStroke(row, column));
        g2.setPaint(getItemOutlinePaint(row, column));
        g2.draw(bar);
    }
    // standard deviation lines
    double valueDelta = dataset.getStdDevValue(row, column).doubleValue();
    double highVal = rangeAxis.valueToJava2D(meanValue.doubleValue() + valueDelta, dataArea, yAxisLocation);
    double lowVal = rangeAxis.valueToJava2D(meanValue.doubleValue() - valueDelta, dataArea, yAxisLocation);
    if (this.errorIndicatorStroke != null) {
        g2.setStroke(this.errorIndicatorStroke);
    } else {
        g2.setStroke(getItemOutlineStroke(row, column));
    }
    if (this.errorIndicatorPaint != null) {
        g2.setPaint(this.errorIndicatorPaint);
    } else {
        g2.setPaint(getItemOutlinePaint(row, column));
    }
    Line2D line = null;
    line = new Line2D.Double(rectX + rectWidth / 2.0d, lowVal, rectX + rectWidth / 2.0d, highVal);
    g2.draw(line);
    line = new Line2D.Double(rectX + rectWidth / 2.0d - 5.0d, highVal, rectX + rectWidth / 2.0d + 5.0d, highVal);
    g2.draw(line);
    line = new Line2D.Double(rectX + rectWidth / 2.0d - 5.0d, lowVal, rectX + rectWidth / 2.0d + 5.0d, lowVal);
    g2.draw(line);
    CategoryItemLabelGenerator generator = getItemLabelGenerator(row, column);
    if (generator != null && isItemLabelVisible(row, column)) {
        drawItemLabel(g2, dataset, row, column, plot, generator, bar, (value < 0.0));
    }
    // add an item entity, if this information is being collected
    EntityCollection entities = state.getEntityCollection();
    if (entities != null) {
        addItemEntity(entities, dataset, row, column, bar);
    }
}","public void test079() throws Throwable {
    StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
    StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
    PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
    CategoryItemRendererState categoryItemRendererState0 = statisticalBarRenderer0.createState(plotRenderingInfo0);
    Rectangle2D rectangle2D0 = plotRenderingInfo0.getDataArea();
    CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
    CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D(""U#Vq9&"");
    NumberAxis numberAxis0 = new NumberAxis(""^W~v9qa9 }v^!fxRjF"");
    DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
    BufferedImage bufferedImage0 = new BufferedImage(1404, 800, 1);
    Graphics2D graphics2D0 = bufferedImage0.createGraphics();
    // Undeclared exception!
    try {
        statisticalBarRenderer0.drawVerticalItem(graphics2D0, categoryItemRendererState0, rectangle2D0, combinedDomainCategoryPlot0, categoryAxis3D0, numberAxis0, defaultStatisticalCategoryDataset0, (-1635), 1);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * Draws an item for a plot with a vertical orientation.
 *
 * @param g2  the graphics device.
 * @param state  the renderer state.
 * @param dataArea  the data area.
 * @param plot  the plot.
 * @param domainAxis  the domain axis.
 * @param rangeAxis  the range axis.
 * @param dataset  the data.
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 */"
"public void drawItem(Graphics2D g2, CategoryItemRendererState state, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, CategoryDataset data, int row, int column, int pass) {
    // defensive check
    if (!(data instanceof StatisticalCategoryDataset)) {
        throw new IllegalArgumentException(""Requires StatisticalCategoryDataset."");
    }
    StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;
    PlotOrientation orientation = plot.getOrientation();
    if (orientation == PlotOrientation.HORIZONTAL) {
        drawHorizontalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, statData, row, column);
    } else if (orientation == PlotOrientation.VERTICAL) {
        drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, statData, row, column);
    }
}","public void test0810() throws Throwable {
    StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
    MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
    JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
    BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 1, 1, chartRenderingInfo0);
    Graphics2D graphics2D0 = bufferedImage0.createGraphics();
    BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
    CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
    CategoryItemRendererState categoryItemRendererState0 = boxAndWhiskerRenderer0.initialise(graphics2D0, (Rectangle2D) null, combinedDomainCategoryPlot0, 10, (PlotRenderingInfo) null);
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(10, ""Requires StatisticalCategoryDataset."");
    DateAxis dateAxis0 = new DateAxis(""x!H=RS"", simpleTimeZone0);
    DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
    // Undeclared exception!
    try {
        statisticalBarRenderer0.drawItem(graphics2D0, categoryItemRendererState0, (Rectangle2D) null, combinedDomainCategoryPlot0, (CategoryAxis) null, dateAxis0, defaultStatisticalCategoryDataset0, (-1343), 6554, 1);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jfree.chart.renderer.category.StatisticalBarRenderer"", e);
    }
}","/**
 * Draws the bar with its standard deviation line range for a single
 * (series, category) data item.
 *
 * @param g2  the graphics device.
 * @param state  the renderer state.
 * @param dataArea  the data area.
 * @param plot  the plot.
 * @param domainAxis  the domain axis.
 * @param rangeAxis  the range axis.
 * @param data  the data.
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * @param pass  the pass index.
 */"
"public void drawItem(Graphics2D g2, CategoryItemRendererState state, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, CategoryDataset data, int row, int column, int pass) {
    // defensive check
    if (!(data instanceof StatisticalCategoryDataset)) {
        throw new IllegalArgumentException(""Requires StatisticalCategoryDataset."");
    }
    StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;
    PlotOrientation orientation = plot.getOrientation();
    if (orientation == PlotOrientation.HORIZONTAL) {
        drawHorizontalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, statData, row, column);
    } else if (orientation == PlotOrientation.VERTICAL) {
        drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, statData, row, column);
    }
}","public void test0911() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    JFreeChart jFreeChart0 = new JFreeChart(""^W~9qa9 }v^!fxRjF"", combinedRangeXYPlot0);
    StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
    BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 1, chartRenderingInfo0);
    Graphics2D graphics2D0 = bufferedImage0.createGraphics();
    StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
    PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
    Rectangle2D rectangle2D0 = plotRenderingInfo0.getDataArea();
    CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
    CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D((String) null);
    DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
    CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
    CategoryItemRendererState categoryItemRendererState0 = categoryStepRenderer0.createState(plotRenderingInfo0);
    LogAxis logAxis0 = new LogAxis();
    // Undeclared exception!
    try {
        statisticalBarRenderer0.drawItem(graphics2D0, categoryItemRendererState0, rectangle2D0, combinedDomainCategoryPlot0, categoryAxis3D0, logAxis0, defaultStatisticalCategoryDataset0, (-1), 0, (-2011));
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * Draws the bar with its standard deviation line range for a single
 * (series, category) data item.
 *
 * @param g2  the graphics device.
 * @param state  the renderer state.
 * @param dataArea  the data area.
 * @param plot  the plot.
 * @param domainAxis  the domain axis.
 * @param rangeAxis  the range axis.
 * @param data  the data.
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * @param pass  the pass index.
 */"
"protected void drawHorizontalItem(Graphics2D g2, CategoryItemRendererState state, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, StatisticalCategoryDataset dataset, int row, int column) {
    RectangleEdge xAxisLocation = plot.getDomainAxisEdge();
    // BAR Y
    double rectY = domainAxis.getCategoryStart(column, getColumnCount(), dataArea, xAxisLocation);
    int seriesCount = getRowCount();
    int categoryCount = getColumnCount();
    if (seriesCount > 1) {
        double seriesGap = dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));
        rectY = rectY + row * (state.getBarWidth() + seriesGap);
    } else {
        rectY = rectY + row * state.getBarWidth();
    }
    // BAR X
    Number meanValue = dataset.getMeanValue(row, column);
    double value = meanValue.doubleValue();
    double base = 0.0;
    double lclip = getLowerClip();
    double uclip = getUpperClip();
    if (uclip <= 0.0) {
        // cases 1, 2, 3 and 4
        if (value >= uclip) {
            // bar is not visible
            return;
        }
        base = uclip;
        if (value <= lclip) {
            value = lclip;
        }
    } else if (lclip <= 0.0) {
        // cases 5, 6, 7 and 8
        if (value >= uclip) {
            value = uclip;
        } else {
            if (value <= lclip) {
                value = lclip;
            }
        }
    } else {
        // cases 9, 10, 11 and 12
        if (value <= lclip) {
            // bar is not visible
            return;
        }
        base = getLowerClip();
        if (value >= uclip) {
            value = uclip;
        }
    }
    RectangleEdge yAxisLocation = plot.getRangeAxisEdge();
    double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);
    double transY2 = rangeAxis.valueToJava2D(value, dataArea, yAxisLocation);
    double rectX = Math.min(transY2, transY1);
    double rectHeight = state.getBarWidth();
    double rectWidth = Math.abs(transY2 - transY1);
    Rectangle2D bar = new Rectangle2D.Double(rectX, rectY, rectWidth, rectHeight);
    Paint seriesPaint = getItemPaint(row, column);
    g2.setPaint(seriesPaint);
    g2.fill(bar);
    if (isDrawBarOutline() && state.getBarWidth() > 3) {
        g2.setStroke(getItemStroke(row, column));
        g2.setPaint(getItemOutlinePaint(row, column));
        g2.draw(bar);
    }
    // standard deviation lines
    double valueDelta = dataset.getStdDevValue(row, column).doubleValue();
    double highVal = rangeAxis.valueToJava2D(meanValue.doubleValue() + valueDelta, dataArea, yAxisLocation);
    double lowVal = rangeAxis.valueToJava2D(meanValue.doubleValue() - valueDelta, dataArea, yAxisLocation);
    if (this.errorIndicatorStroke != null) {
        g2.setStroke(this.errorIndicatorStroke);
    } else {
        g2.setStroke(getItemOutlineStroke(row, column));
    }
    if (this.errorIndicatorPaint != null) {
        g2.setPaint(this.errorIndicatorPaint);
    } else {
        g2.setPaint(getItemOutlinePaint(row, column));
    }
    Line2D line = null;
    line = new Line2D.Double(lowVal, rectY + rectHeight / 2.0d, highVal, rectY + rectHeight / 2.0d);
    g2.draw(line);
    line = new Line2D.Double(highVal, rectY + rectHeight * 0.25, highVal, rectY + rectHeight * 0.75);
    g2.draw(line);
    line = new Line2D.Double(lowVal, rectY + rectHeight * 0.25, lowVal, rectY + rectHeight * 0.75);
    g2.draw(line);
    CategoryItemLabelGenerator generator = getItemLabelGenerator(row, column);
    if (generator != null && isItemLabelVisible(row, column)) {
        drawItemLabel(g2, dataset, row, column, plot, generator, bar, (value < 0.0));
    }
    // add an item entity, if this information is being collected
    EntityCollection entities = state.getEntityCollection();
    if (entities != null) {
        addItemEntity(entities, dataset, row, column, bar);
    }
}","public void test1012() throws Throwable {
    StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
    CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
    SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("""");
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(3598.1, 0.2, """");
    DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
    // Undeclared exception!
    try {
        statisticalBarRenderer0.drawHorizontalItem((Graphics2D) null, (CategoryItemRendererState) null, (Rectangle2D) null, combinedRangeCategoryPlot0, subCategoryAxis0, cyclicNumberAxis0, defaultStatisticalCategoryDataset0, 1214, 0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jfree.chart.axis.CategoryAxis"", e);
    }
}","/**
 * Draws an item for a plot with a horizontal orientation.
 *
 * @param g2  the graphics device.
 * @param state  the renderer state.
 * @param dataArea  the data area.
 * @param plot  the plot.
 * @param domainAxis  the domain axis.
 * @param rangeAxis  the range axis.
 * @param dataset  the data.
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 */"
"protected void drawHorizontalItem(Graphics2D g2, CategoryItemRendererState state, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, StatisticalCategoryDataset dataset, int row, int column) {
    RectangleEdge xAxisLocation = plot.getDomainAxisEdge();
    // BAR Y
    double rectY = domainAxis.getCategoryStart(column, getColumnCount(), dataArea, xAxisLocation);
    int seriesCount = getRowCount();
    int categoryCount = getColumnCount();
    if (seriesCount > 1) {
        double seriesGap = dataArea.getHeight() * getItemMargin() / (categoryCount * (seriesCount - 1));
        rectY = rectY + row * (state.getBarWidth() + seriesGap);
    } else {
        rectY = rectY + row * state.getBarWidth();
    }
    // BAR X
    Number meanValue = dataset.getMeanValue(row, column);
    double value = meanValue.doubleValue();
    double base = 0.0;
    double lclip = getLowerClip();
    double uclip = getUpperClip();
    if (uclip <= 0.0) {
        // cases 1, 2, 3 and 4
        if (value >= uclip) {
            // bar is not visible
            return;
        }
        base = uclip;
        if (value <= lclip) {
            value = lclip;
        }
    } else if (lclip <= 0.0) {
        // cases 5, 6, 7 and 8
        if (value >= uclip) {
            value = uclip;
        } else {
            if (value <= lclip) {
                value = lclip;
            }
        }
    } else {
        // cases 9, 10, 11 and 12
        if (value <= lclip) {
            // bar is not visible
            return;
        }
        base = getLowerClip();
        if (value >= uclip) {
            value = uclip;
        }
    }
    RectangleEdge yAxisLocation = plot.getRangeAxisEdge();
    double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);
    double transY2 = rangeAxis.valueToJava2D(value, dataArea, yAxisLocation);
    double rectX = Math.min(transY2, transY1);
    double rectHeight = state.getBarWidth();
    double rectWidth = Math.abs(transY2 - transY1);
    Rectangle2D bar = new Rectangle2D.Double(rectX, rectY, rectWidth, rectHeight);
    Paint seriesPaint = getItemPaint(row, column);
    g2.setPaint(seriesPaint);
    g2.fill(bar);
    if (isDrawBarOutline() && state.getBarWidth() > 3) {
        g2.setStroke(getItemStroke(row, column));
        g2.setPaint(getItemOutlinePaint(row, column));
        g2.draw(bar);
    }
    // standard deviation lines
    double valueDelta = dataset.getStdDevValue(row, column).doubleValue();
    double highVal = rangeAxis.valueToJava2D(meanValue.doubleValue() + valueDelta, dataArea, yAxisLocation);
    double lowVal = rangeAxis.valueToJava2D(meanValue.doubleValue() - valueDelta, dataArea, yAxisLocation);
    if (this.errorIndicatorStroke != null) {
        g2.setStroke(this.errorIndicatorStroke);
    } else {
        g2.setStroke(getItemOutlineStroke(row, column));
    }
    if (this.errorIndicatorPaint != null) {
        g2.setPaint(this.errorIndicatorPaint);
    } else {
        g2.setPaint(getItemOutlinePaint(row, column));
    }
    Line2D line = null;
    line = new Line2D.Double(lowVal, rectY + rectHeight / 2.0d, highVal, rectY + rectHeight / 2.0d);
    g2.draw(line);
    line = new Line2D.Double(highVal, rectY + rectHeight * 0.25, highVal, rectY + rectHeight * 0.75);
    g2.draw(line);
    line = new Line2D.Double(lowVal, rectY + rectHeight * 0.25, lowVal, rectY + rectHeight * 0.75);
    g2.draw(line);
    CategoryItemLabelGenerator generator = getItemLabelGenerator(row, column);
    if (generator != null && isItemLabelVisible(row, column)) {
        drawItemLabel(g2, dataset, row, column, plot, generator, bar, (value < 0.0));
    }
    // add an item entity, if this information is being collected
    EntityCollection entities = state.getEntityCollection();
    if (entities != null) {
        addItemEntity(entities, dataset, row, column, bar);
    }
}","public void test1113() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    JFreeChart jFreeChart0 = new JFreeChart(""^W~v9qa9 }v^!fxRjF"", combinedRangeXYPlot0);
    StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
    BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 1, chartRenderingInfo0);
    Graphics2D graphics2D0 = bufferedImage0.createGraphics();
    StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
    PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
    Rectangle2D rectangle2D0 = plotRenderingInfo0.getDataArea();
    CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
    CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D(""U#Vq9&"");
    NumberAxis numberAxis0 = new NumberAxis(""^W~v9qa9 }v^!fxRjF"");
    DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
    CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
    CategoryItemRendererState categoryItemRendererState0 = categoryStepRenderer0.createState(plotRenderingInfo0);
    // Undeclared exception!
    try {
        statisticalBarRenderer0.drawHorizontalItem(graphics2D0, categoryItemRendererState0, rectangle2D0, combinedDomainCategoryPlot0, categoryAxis3D0, numberAxis0, defaultStatisticalCategoryDataset0, (-531), 1);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * Draws an item for a plot with a horizontal orientation.
 *
 * @param g2  the graphics device.
 * @param state  the renderer state.
 * @param dataArea  the data area.
 * @param plot  the plot.
 * @param domainAxis  the domain axis.
 * @param rangeAxis  the range axis.
 * @param dataset  the data.
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 */"
"public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof StatisticalBarRenderer)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    StatisticalBarRenderer that = (StatisticalBarRenderer) obj;
    if (!PaintUtilities.equal(this.errorIndicatorPaint, that.errorIndicatorPaint)) {
        return false;
    }
    return true;
}","public void test1214() throws Throwable {
    StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
    statisticalBarRenderer0.setErrorIndicatorPaint(statisticalBarRenderer0.DEFAULT_PAINT);
    StatisticalBarRenderer statisticalBarRenderer1 = new StatisticalBarRenderer();
    boolean boolean0 = statisticalBarRenderer0.equals(statisticalBarRenderer1);
    assertFalse(boolean0);
}","/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */"
"public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof StatisticalBarRenderer)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    StatisticalBarRenderer that = (StatisticalBarRenderer) obj;
    if (!PaintUtilities.equal(this.errorIndicatorPaint, that.errorIndicatorPaint)) {
        return false;
    }
    return true;
}","public void test1215() throws Throwable {
    StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
    statisticalBarRenderer0.setErrorIndicatorPaint(statisticalBarRenderer0.DEFAULT_PAINT);
    StatisticalBarRenderer statisticalBarRenderer1 = new StatisticalBarRenderer();
    boolean boolean0 = statisticalBarRenderer0.equals(statisticalBarRenderer1);
    assertFalse(statisticalBarRenderer1.equals((Object) statisticalBarRenderer0));
}","/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */"
"public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof StatisticalBarRenderer)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    StatisticalBarRenderer that = (StatisticalBarRenderer) obj;
    if (!PaintUtilities.equal(this.errorIndicatorPaint, that.errorIndicatorPaint)) {
        return false;
    }
    return true;
}","public void test1316() throws Throwable {
    StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
    statisticalBarRenderer0.setMinimumBarLength(3.0);
    StatisticalBarRenderer statisticalBarRenderer1 = new StatisticalBarRenderer();
    boolean boolean0 = statisticalBarRenderer0.equals(statisticalBarRenderer1);
    assertFalse(boolean0);
}","/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */"
"public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof StatisticalBarRenderer)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    StatisticalBarRenderer that = (StatisticalBarRenderer) obj;
    if (!PaintUtilities.equal(this.errorIndicatorPaint, that.errorIndicatorPaint)) {
        return false;
    }
    return true;
}","public void test1417() throws Throwable {
    StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
    StatisticalBarRenderer statisticalBarRenderer1 = new StatisticalBarRenderer();
    boolean boolean0 = statisticalBarRenderer0.equals(statisticalBarRenderer1);
    assertTrue(boolean0);
}","/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */"
"public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof StatisticalBarRenderer)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    StatisticalBarRenderer that = (StatisticalBarRenderer) obj;
    if (!PaintUtilities.equal(this.errorIndicatorPaint, that.errorIndicatorPaint)) {
        return false;
    }
    return true;
}","public void test1518() throws Throwable {
    StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
    boolean boolean0 = statisticalBarRenderer0.equals(statisticalBarRenderer0);
    assertTrue(boolean0);
}","/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */"
"public void drawItem(Graphics2D g2, CategoryItemRendererState state, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, CategoryDataset data, int row, int column, int pass) {
    // defensive check
    if (!(data instanceof StatisticalCategoryDataset)) {
        throw new IllegalArgumentException(""Requires StatisticalCategoryDataset."");
    }
    StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;
    PlotOrientation orientation = plot.getOrientation();
    if (orientation == PlotOrientation.HORIZONTAL) {
        drawHorizontalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, statData, row, column);
    } else if (orientation == PlotOrientation.VERTICAL) {
        drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, statData, row, column);
    }
}","public void test1619() throws Throwable {
    StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
    BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
    StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
    PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
    NumberAxis3D numberAxis3D0 = new NumberAxis3D(""tciScT\""s6H8jeg8Q"");
    CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(numberAxis3D0);
    CategoryItemRendererState categoryItemRendererState0 = boxAndWhiskerRenderer0.initialise((Graphics2D) null, (Rectangle2D) null, combinedRangeCategoryPlot0, 599, plotRenderingInfo0);
    CategoryAxis categoryAxis0 = new CategoryAxis(""wh"");
    String[] stringArray0 = new String[3];
    Number[][] numberArray0 = new Number[3][9];
    DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, numberArray0, numberArray0);
    // Undeclared exception!
    try {
        statisticalBarRenderer0.drawItem((Graphics2D) null, categoryItemRendererState0, (Rectangle2D) null, combinedRangeCategoryPlot0, categoryAxis0, numberAxis3D0, defaultIntervalCategoryDataset0, 10, 274, 274);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Requires StatisticalCategoryDataset.
        //
        verifyException(""org.jfree.chart.renderer.category.StatisticalBarRenderer"", e);
    }
}","/**
 * Draws the bar with its standard deviation line range for a single
 * (series, category) data item.
 *
 * @param g2  the graphics device.
 * @param state  the renderer state.
 * @param dataArea  the data area.
 * @param plot  the plot.
 * @param domainAxis  the domain axis.
 * @param rangeAxis  the range axis.
 * @param data  the data.
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * @param pass  the pass index.
 */"
"public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof StatisticalBarRenderer)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    StatisticalBarRenderer that = (StatisticalBarRenderer) obj;
    if (!PaintUtilities.equal(this.errorIndicatorPaint, that.errorIndicatorPaint)) {
        return false;
    }
    return true;
}","public void test1821() throws Throwable {
    StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
    Color color0 = (Color) statisticalBarRenderer0.getErrorIndicatorPaint();
    boolean boolean0 = statisticalBarRenderer0.equals(color0);
    assertFalse(boolean0);
}","/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */"
