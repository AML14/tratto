focal_method,test_prefix,docstring
"public double getItemMiddle(Comparable rowKey, Comparable columnKey, CategoryDataset dataset, CategoryAxis axis, Rectangle2D area, RectangleEdge edge) {
    return axis.getCategoryMiddle(columnKey, dataset.getColumnKeys(), area, edge);
}","public void test000() throws Throwable {
    DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
    CategoryAxis categoryAxis0 = new CategoryAxis();
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getDomainAxisEdge((-3422));
    // Undeclared exception!
    try {
        defaultCategoryItemRenderer0.getItemMiddle(0.2, 8.0, (CategoryDataset) null, categoryAxis0, (Rectangle2D) null, rectangleEdge0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jfree.chart.renderer.category.AbstractCategoryItemRenderer"", e);
    }
}","/**
 * Returns the Java2D coordinate for the middle of the specified data item.
 *
 * @param rowKey  the row key.
 * @param columnKey  the column key.
 * @param dataset  the dataset.
 * @param axis  the axis.
 * @param area  the data area.
 * @param edge  the edge along which the axis lies.
 *
 * @return The Java2D coordinate for the middle of the item.
 *
 * @since 1.0.11
 */"
"public double getMaximumBarWidth() {
    return this.maximumBarWidth;
}","public void test011() throws Throwable {
    StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer(false);
    stackedBarRenderer0.setSeriesToolTipGenerator(0, (CategoryToolTipGenerator) null);
    assertEquals(1.0, stackedBarRenderer0.getMaximumBarWidth(), 0.01);
}","/**
 * Returns the maximum bar width, as a percentage of the available drawing
 * space.
 *
 * @return The maximum bar width.
 *
 * @see #setMaximumBarWidth(double)
 */"
"public void drawRangeLine(Graphics2D g2, CategoryPlot plot, ValueAxis axis, Rectangle2D dataArea, double value, Paint paint, Stroke stroke) {
    Range range = axis.getRange();
    if (!range.contains(value)) {
        return;
    }
    PlotOrientation orientation = plot.getOrientation();
    Line2D line = null;
    double v = axis.valueToJava2D(value, dataArea, plot.getRangeAxisEdge());
    if (orientation == PlotOrientation.HORIZONTAL) {
        line = new Line2D.Double(v, dataArea.getMinY(), v, dataArea.getMaxY());
    } else if (orientation == PlotOrientation.VERTICAL) {
        line = new Line2D.Double(dataArea.getMinX(), v, dataArea.getMaxX(), v);
    }
    g2.setPaint(paint);
    g2.setStroke(stroke);
    g2.draw(line);
}","public void test022() throws Throwable {
    LevelRenderer levelRenderer0 = new LevelRenderer();
    WaferMapPlot waferMapPlot0 = new WaferMapPlot();
    JFreeChart jFreeChart0 = new JFreeChart(""3(<"", waferMapPlot0);
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
    BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, chartRenderingInfo0);
    BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
    SunGraphics2D sunGraphics2D0 = (SunGraphics2D) bufferedImageRenderingSource0.createGraphics2D();
    NumberAxis3D numberAxis3D0 = new NumberAxis3D();
    CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(numberAxis3D0);
    Point2D.Double point2D_Double0 = new Point2D.Double();
    Line2D.Float line2D_Float0 = new Line2D.Float(point2D_Double0, point2D_Double0);
    Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float) line2D_Float0.getBounds2D();
    Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double) numberAxis3D0.DEFAULT_AXIS_LABEL_INSETS.createOutsetRectangle((Rectangle2D) rectangle2D_Float0, true, false);
    levelRenderer0.drawRangeLine(sunGraphics2D0, combinedRangeCategoryPlot0, numberAxis3D0, rectangle2D_Double0, 0.5F, waferMapPlot0.DEFAULT_OUTLINE_PAINT, waferMapPlot0.DEFAULT_GRIDLINE_STROKE);
    assertEquals((-8355712), sunGraphics2D0.eargb);
}","/**
 * Draws a line perpendicular to the range axis.
 *
 * @param g2  the graphics device.
 * @param plot  the plot.
 * @param axis  the value axis.
 * @param dataArea  the area for plotting data (not yet adjusted for any 3D
 *                  effect).
 * @param value  the value at which the grid line should be drawn.
 * @param paint  the paint (<code>null</code> not permitted).
 * @param stroke  the stroke (<code>null</code> not permitted).
 *
 * @see #drawRangeGridline
 *
 * @since 1.0.13
 */"
"public CategoryURLGenerator getSeriesURLGenerator(int series) {
    return (CategoryURLGenerator) this.urlGeneratorList.get(series);
}","public void test034() throws Throwable {
    GanttRenderer ganttRenderer0 = new GanttRenderer();
    CategoryURLGenerator categoryURLGenerator0 = ganttRenderer0.getSeriesURLGenerator(0);
    assertNull(categoryURLGenerator0);
}","/**
 * Returns the URL generator for a series.
 *
 * @param series  the series index (zero based).
 *
 * @return The URL generator for the series.
 *
 * @see #setSeriesURLGenerator(int, CategoryURLGenerator)
 */"
"public CategoryToolTipGenerator getSeriesToolTipGenerator(int series) {
    return (CategoryToolTipGenerator) this.toolTipGeneratorList.get(series);
}","public void test045() throws Throwable {
    MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
    CategoryToolTipGenerator categoryToolTipGenerator0 = minMaxCategoryRenderer0.getSeriesToolTipGenerator(29);
    assertNull(categoryToolTipGenerator0);
}","/**
 * Returns the tool tip generator for the specified series (a ""layer 1""
 * generator).
 *
 * @param series  the series index (zero-based).
 *
 * @return The tool tip generator (possibly <code>null</code>).
 *
 * @see #setSeriesToolTipGenerator(int, CategoryToolTipGenerator)
 */"
"protected ValueAxis getRangeAxis(CategoryPlot plot, int index) {
    ValueAxis result = plot.getRangeAxis(index);
    if (result == null) {
        result = plot.getRangeAxis();
    }
    return result;
}","public void test056() throws Throwable {
    MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
    Color color0 = Color.red;
    WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer(minMaxCategoryRenderer0.DEFAULT_OUTLINE_PAINT, color0, minMaxCategoryRenderer0.DEFAULT_VALUE_LABEL_PAINT, minMaxCategoryRenderer0.DEFAULT_VALUE_LABEL_PAINT);
    CategoryAxis categoryAxis0 = new CategoryAxis(""\""5\"""");
    CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
    ValueAxis valueAxis0 = waterfallBarRenderer0.getRangeAxis(combinedDomainCategoryPlot0, 0);
    assertNull(valueAxis0);
}","/**
 * Returns a range axis for a plot.
 *
 * @param plot  the plot.
 * @param index  the axis index.
 *
 * @return A range axis.
 */"
"public CategorySeriesLabelGenerator getLegendItemToolTipGenerator() {
    return this.legendItemToolTipGenerator;
}","public void test067() throws Throwable {
    StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
    CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = stackedAreaRenderer0.getLegendItemToolTipGenerator();
    assertNull(categorySeriesLabelGenerator0);
}","/**
 * Returns the legend item tool tip generator.
 *
 * @return The tool tip generator (possibly <code>null</code>).
 *
 * @see #setLegendItemToolTipGenerator(CategorySeriesLabelGenerator)
 */"
"public LegendItem getLegendItem(int datasetIndex, int series) {
    CategoryPlot cp = getPlot();
    if (cp == null) {
        return null;
    }
    // check that a legend item needs to be displayed...
    if (!isSeriesVisible(series) || !isSeriesVisibleInLegend(series)) {
        return null;
    }
    CategoryDataset dataset = cp.getDataset(datasetIndex);
    String label = getLegendItemLabelGenerator().generateLabel(dataset, series);
    String description = label;
    String toolTipText = null;
    if (getLegendItemToolTipGenerator() != null) {
        toolTipText = getLegendItemToolTipGenerator().generateLabel(dataset, series);
    }
    String urlText = null;
    if (getLegendItemURLGenerator() != null) {
        urlText = getLegendItemURLGenerator().generateLabel(dataset, series);
    }
    Shape shape = lookupLegendShape(series);
    Paint paint = lookupSeriesPaint(series);
    Paint outlinePaint = lookupSeriesOutlinePaint(series);
    Stroke outlineStroke = lookupSeriesOutlineStroke(series);
    LegendItem result = new LegendItem(label, description, toolTipText, urlText, shape, paint, outlineStroke, outlinePaint);
    result.setLabelFont(lookupLegendTextFont(series));
    Paint labelPaint = lookupLegendTextPaint(series);
    if (labelPaint != null) {
        result.setLabelPaint(labelPaint);
    }
    result.setDataset(dataset);
    result.setDatasetIndex(datasetIndex);
    result.setSeriesKey(dataset.getRowKey(series));
    result.setSeriesIndex(series);
    return result;
}","public void test078() throws Throwable {
    BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
    LegendItem legendItem0 = boxAndWhiskerRenderer0.getLegendItem(2591, 2084);
    assertNull(legendItem0);
}","/**
 * Returns a legend item for a series.
 *
 * @param datasetIndex  the dataset index (zero-based).
 * @param series  the series index (zero-based).
 *
 * @return The legend item (possibly <code>null</code>).
 */"
"// ITEM LABEL GENERATOR
/**
 * Returns the item label generator for a data item.  This implementation
 * returns the series item label generator if one is defined, otherwise
 * it returns the default item label generator (which may be
 * <code>null</code>).
 *
 * @param row  the row index (zero based).
 * @param column  the column index (zero based).
 * @param selected  is the item selected?
 *
 * @return The generator (possibly <code>null</code>).
 *
 * @since 1.2.0
 */
public CategoryItemLabelGenerator getItemLabelGenerator(int row, int column, boolean selected) {
    CategoryItemLabelGenerator generator = (CategoryItemLabelGenerator) this.itemLabelGeneratorList.get(row);
    if (generator == null) {
        generator = this.baseItemLabelGenerator;
    }
    return generator;
}","public void test089() throws Throwable {
    StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
    CategoryItemLabelGenerator categoryItemLabelGenerator0 = stackedBarRenderer3D0.getItemLabelGenerator((-1), (-1), true);
    assertNull(categoryItemLabelGenerator0);
}",""
"public String getLabelFormat() {
    return this.labelFormat;
}","public void test0910() throws Throwable {
    StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
    StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator();
    stackedBarRenderer3D0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) standardCategoryItemLabelGenerator0);
    StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator1 = (StandardCategoryItemLabelGenerator) stackedBarRenderer3D0.getItemLabelGenerator((-1), (-1), true);
    assertEquals(""{2}"", standardCategoryItemLabelGenerator1.getLabelFormat());
}","/**
 * Returns the label format string.
 *
 * @return The label format string (never <code>null</code>).
 */"
"protected CategoryAxis getDomainAxis(CategoryPlot plot, CategoryDataset dataset) {
    int datasetIndex = plot.indexOf(dataset);
    return plot.getDomainAxisForDataset(datasetIndex);
}","public void test1011() throws Throwable {
    StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
    CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
    CategoryAxis categoryAxis0 = statisticalBarRenderer0.getDomainAxis(combinedRangeCategoryPlot0, (CategoryDataset) null);
    assertNull(categoryAxis0);
}","/**
 * Returns the domain axis that is used for the specified dataset.
 *
 * @param plot  the plot (<code>null</code> not permitted).
 * @param dataset  the dataset (<code>null</code> not permitted).
 *
 * @return A domain axis.
 */"
"public boolean isAxisLineVisible() {
    return this.axisLineVisible;
}","public void test1112() throws Throwable {
    LevelRenderer levelRenderer0 = new LevelRenderer();
    CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
    CategoryAxis categoryAxis0 = levelRenderer0.getDomainAxis(combinedDomainCategoryPlot0, (CategoryDataset) null);
    assertTrue(categoryAxis0.isAxisLineVisible());
}","/**
 * A flag that controls whether or not the axis line is drawn.
 *
 * @return A boolean.
 *
 * @see #getAxisLinePaint()
 * @see #getAxisLineStroke()
 * @see #setAxisLineVisible(boolean)
 */"
"public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof BarRenderer)) {
        return false;
    }
    BarRenderer that = (BarRenderer) obj;
    if (this.base != that.base) {
        return false;
    }
    if (this.itemMargin != that.itemMargin) {
        return false;
    }
    if (this.drawBarOutline != that.drawBarOutline) {
        return false;
    }
    if (this.maximumBarWidth != that.maximumBarWidth) {
        return false;
    }
    if (this.minimumBarLength != that.minimumBarLength) {
        return false;
    }
    if (!ObjectUtilities.equal(this.gradientPaintTransformer, that.gradientPaintTransformer)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.positiveItemLabelPositionFallback, that.positiveItemLabelPositionFallback)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.negativeItemLabelPositionFallback, that.negativeItemLabelPositionFallback)) {
        return false;
    }
    if (!this.barPainter.equals(that.barPainter)) {
        return false;
    }
    if (this.shadowsVisible != that.shadowsVisible) {
        return false;
    }
    if (!PaintUtilities.equal(this.shadowPaint, that.shadowPaint)) {
        return false;
    }
    if (this.shadowXOffset != that.shadowXOffset) {
        return false;
    }
    if (this.shadowYOffset != that.shadowYOffset) {
        return false;
    }
    return super.equals(obj);
}","public void test1213() throws Throwable {
    LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
    LevelRenderer levelRenderer0 = new LevelRenderer();
    boolean boolean0 = layeredBarRenderer0.equals(levelRenderer0);
    assertFalse(boolean0);
}","/**
 * Tests this instance for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */"
"public double getSeriesRunningTotal() {
    return this.seriesRunningTotal;
}","public void test1314() throws Throwable {
    LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
    CategoryItemRendererState categoryItemRendererState0 = lineRenderer3D0.createState((PlotRenderingInfo) null);
    assertEquals(0.0, categoryItemRendererState0.getSeriesRunningTotal(), 0.01);
}","/**
 * Returns the series running total.
 *
 * @return The running total.
 *
 * @see #setSeriesRunningTotal(double)
 */"
"public void setSeriesURLGenerator(int series, CategoryURLGenerator generator) {
    setSeriesURLGenerator(series, generator, true);
}","public void test1415() throws Throwable {
    BarRenderer barRenderer0 = new BarRenderer();
    // Undeclared exception!
    try {
        barRenderer0.setSeriesURLGenerator((-683), (CategoryURLGenerator) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Requires index >= 0.
        //
        verifyException(""org.jfree.chart.util.AbstractObjectList"", e);
    }
}","/**
 * Sets the URL generator for a series and sends a
 * {@link RendererChangeEvent} to all registered listeners.
 *
 * @param series  the series index (zero based).
 * @param generator  the generator.
 *
 * @see #getSeriesURLGenerator(int)
 */"
"public void setSeriesToolTipGenerator(int series, CategoryToolTipGenerator generator, boolean notify) {
    this.toolTipGeneratorList.set(series, generator);
    if (notify) {
        notifyListeners(new RendererChangeEvent(this));
    }
}","public void test1516() throws Throwable {
    MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
    // Undeclared exception!
    try {
        minMaxCategoryRenderer0.setSeriesToolTipGenerator((-3479), (CategoryToolTipGenerator) null, true);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Requires index >= 0.
        //
        verifyException(""org.jfree.chart.util.AbstractObjectList"", e);
    }
}","/**
 * Sets the tool tip generator for a series and sends a
 * {@link org.jfree.chart.event.RendererChangeEvent} to all registered
 * listeners.
 *
 * @param series  the series index (zero-based).
 * @param generator  the generator (<code>null</code> permitted).
 * @param notify  notify listeners?
 *
 * @since 1.2.0
 *
 * @see #getSeriesToolTipGenerator(int)
 */"
"public void setSeriesItemLabelGenerator(int series, CategoryItemLabelGenerator generator, boolean notify) {
    this.itemLabelGeneratorList.set(series, generator);
    if (notify) {
        notifyListeners(new RendererChangeEvent(this));
    }
}","public void test1617() throws Throwable {
    BarRenderer3D barRenderer3D0 = new BarRenderer3D();
    IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator();
    // Undeclared exception!
    try {
        barRenderer3D0.setSeriesItemLabelGenerator((-248), (CategoryItemLabelGenerator) intervalCategoryItemLabelGenerator0, true);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Requires index >= 0.
        //
        verifyException(""org.jfree.chart.util.AbstractObjectList"", e);
    }
}","/**
 * Sets the item label generator for a series and, if requested, sends a
 * {@link RendererChangeEvent} to all registered listeners.
 *
 * @param series  the series index (zero based).
 * @param generator  the generator (<code>null</code> permitted).
 * @param notify  notify listeners?
 *
 * @since 1.2.0
 *
 * @see #getSeriesItemLabelGenerator(int)
 */"
"public void setSeriesItemLabelGenerator(int series, CategoryItemLabelGenerator generator) {
    setSeriesItemLabelGenerator(series, generator, true);
}","public void test1718() throws Throwable {
    StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
    IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator();
    // Undeclared exception!
    try {
        stackedBarRenderer3D0.setSeriesItemLabelGenerator((-263), (CategoryItemLabelGenerator) intervalCategoryItemLabelGenerator0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Requires index >= 0.
        //
        verifyException(""org.jfree.chart.util.AbstractObjectList"", e);
    }
}","/**
 * Sets the item label generator for a series and sends a
 * {@link RendererChangeEvent} to all registered listeners.
 *
 * @param series  the series index (zero based).
 * @param generator  the generator (<code>null</code> permitted).
 *
 * @see #getSeriesItemLabelGenerator(int)
 */"
"public CategoryItemRendererState initialise(Graphics2D g2, Rectangle2D dataArea, CategoryPlot plot, CategoryDataset dataset, PlotRenderingInfo info) {
    CategoryItemRendererState state = super.initialise(g2, dataArea, plot, dataset, info);
    // calculate the bar width
    calculateBarWidth(plot, dataArea, dataset, state);
    return state;
}","public void test1819() throws Throwable {
    StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
    DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
    StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
    PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
    // Undeclared exception!
    try {
        statisticalBarRenderer0.initialise((Graphics2D) null, (Rectangle2D) null, (CategoryPlot) null, defaultStatisticalCategoryDataset0, plotRenderingInfo0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'plot' argument.
        //
        verifyException(""org.jfree.chart.renderer.category.AbstractCategoryItemRenderer"", e);
    }
}","/**
 * Initialises the renderer and returns a state object that will be passed
 * to subsequent calls to the drawItem method.  This method gets called
 * once at the start of the process of drawing a chart.
 *
 * @param g2  the graphics device.
 * @param dataArea  the area in which the data is to be plotted.
 * @param plot  the plot.
 * @param dataset  the dataset.
 * @param info  collects chart rendering information for return to caller.
 *
 * @return The renderer state.
 */"
"protected ValueAxis getRangeAxis(CategoryPlot plot, int index) {
    ValueAxis result = plot.getRangeAxis(index);
    if (result == null) {
        result = plot.getRangeAxis();
    }
    return result;
}","public void test1920() throws Throwable {
    LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
    // Undeclared exception!
    try {
        lineRenderer3D0.getRangeAxis((CategoryPlot) null, 2009);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jfree.chart.renderer.category.AbstractCategoryItemRenderer"", e);
    }
}","/**
 * Returns a range axis for a plot.
 *
 * @param plot  the plot.
 * @param index  the axis index.
 *
 * @return A range axis.
 */"
"protected CategoryAxis getDomainAxis(CategoryPlot plot, CategoryDataset dataset) {
    int datasetIndex = plot.indexOf(dataset);
    return plot.getDomainAxisForDataset(datasetIndex);
}","public void test2021() throws Throwable {
    LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
    // Undeclared exception!
    try {
        layeredBarRenderer0.getDomainAxis((CategoryPlot) null, (CategoryDataset) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jfree.chart.renderer.category.AbstractCategoryItemRenderer"", e);
    }
}","/**
 * Returns the domain axis that is used for the specified dataset.
 *
 * @param plot  the plot (<code>null</code> not permitted).
 * @param dataset  the dataset (<code>null</code> not permitted).
 *
 * @return A domain axis.
 */"
"protected Range findRangeBounds(CategoryDataset dataset, boolean includeInterval) {
    if (dataset == null) {
        return null;
    }
    if (getDataBoundsIncludesVisibleSeriesOnly()) {
        List visibleSeriesKeys = new ArrayList();
        int seriesCount = dataset.getRowCount();
        for (int s = 0; s < seriesCount; s++) {
            if (isSeriesVisible(s)) {
                visibleSeriesKeys.add(dataset.getRowKey(s));
            }
        }
        return DatasetUtilities.findRangeBounds(dataset, visibleSeriesKeys, includeInterval);
    } else {
        return DatasetUtilities.findRangeBounds(dataset, includeInterval);
    }
}","public void test2122() throws Throwable {
    BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
    DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Comparable[]) null, (Comparable[]) null, (Number[][]) null, (Number[][]) null);
    // Undeclared exception!
    try {
        boxAndWhiskerRenderer0.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jfree.data.category.DefaultIntervalCategoryDataset"", e);
    }
}","/**
 * Returns the range of values the renderer requires to display all the
 * items from the specified dataset.
 *
 * @param dataset  the dataset (<code>null</code> permitted).
 * @param includeInterval  include the y-interval if the dataset has one.
 *
 * @return The range (<code>null</code> if the dataset is <code>null</code>
 *         or empty).
 *
 * @since 1.0.13
 */"
"public Range findRangeBounds(CategoryDataset dataset) {
    return findRangeBounds(dataset, false);
}","public void test2223() throws Throwable {
    BarRenderer3D barRenderer3D0 = new BarRenderer3D(759.363, 0.0);
    Number[][] numberArray0 = new Number[9][1];
    Number[] numberArray1 = new Number[4];
    numberArray0[0] = numberArray1;
    DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
    // Undeclared exception!
    try {
        barRenderer3D0.findRangeBounds(defaultIntervalCategoryDataset0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 1
        //
        verifyException(""org.jfree.data.category.DefaultIntervalCategoryDataset"", e);
    }
}","/**
 * Returns the range of values the renderer requires to display all the
 * items from the specified dataset.
 *
 * @param dataset  the dataset (<code>null</code> permitted).
 *
 * @return The range (or <code>null</code> if the dataset is
 *         <code>null</code> or empty).
 */"
"public void drawDomainMarker(Graphics2D g2, CategoryPlot plot, CategoryAxis axis, CategoryMarker marker, Rectangle2D dataArea) {
    Comparable category = marker.getKey();
    CategoryDataset dataset = plot.getDataset(plot.getIndexOf(this));
    int columnIndex = dataset.getColumnIndex(category);
    if (columnIndex < 0) {
        return;
    }
    final Composite savedComposite = g2.getComposite();
    g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, marker.getAlpha()));
    PlotOrientation orientation = plot.getOrientation();
    Rectangle2D bounds = null;
    if (marker.getDrawAsLine()) {
        double v = axis.getCategoryMiddle(columnIndex, dataset.getColumnCount(), dataArea, plot.getDomainAxisEdge());
        Line2D line = null;
        if (orientation == PlotOrientation.HORIZONTAL) {
            line = new Line2D.Double(dataArea.getMinX(), v, dataArea.getMaxX(), v);
        } else if (orientation == PlotOrientation.VERTICAL) {
            line = new Line2D.Double(v, dataArea.getMinY(), v, dataArea.getMaxY());
        }
        g2.setPaint(marker.getPaint());
        g2.setStroke(marker.getStroke());
        g2.draw(line);
        bounds = line.getBounds2D();
    } else {
        double v0 = axis.getCategoryStart(columnIndex, dataset.getColumnCount(), dataArea, plot.getDomainAxisEdge());
        double v1 = axis.getCategoryEnd(columnIndex, dataset.getColumnCount(), dataArea, plot.getDomainAxisEdge());
        Rectangle2D area = null;
        if (orientation == PlotOrientation.HORIZONTAL) {
            area = new Rectangle2D.Double(dataArea.getMinX(), v0, dataArea.getWidth(), (v1 - v0));
        } else if (orientation == PlotOrientation.VERTICAL) {
            area = new Rectangle2D.Double(v0, dataArea.getMinY(), (v1 - v0), dataArea.getHeight());
        }
        g2.setPaint(marker.getPaint());
        g2.fill(area);
        bounds = area;
    }
    String label = marker.getLabel();
    RectangleAnchor anchor = marker.getLabelAnchor();
    if (label != null) {
        Font labelFont = marker.getLabelFont();
        g2.setFont(labelFont);
        g2.setPaint(marker.getLabelPaint());
        Point2D coordinates = calculateDomainMarkerTextAnchorPoint(g2, orientation, dataArea, bounds, marker.getLabelOffset(), marker.getLabelOffsetType(), anchor);
        TextUtilities.drawAlignedString(label, g2, (float) coordinates.getX(), (float) coordinates.getY(), marker.getLabelTextAnchor());
    }
    g2.setComposite(savedComposite);
}","public void test2324() throws Throwable {
    GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
    ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis(""VMzuSU"");
    CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(extendedCategoryAxis0);
    JFreeChart jFreeChart0 = new JFreeChart(""VMzuSU"", combinedDomainCategoryPlot0);
    StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
    BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 1, 1, chartRenderingInfo0);
    Graphics2D graphics2D0 = bufferedImage0.createGraphics();
    CategoryMarker categoryMarker0 = new CategoryMarker(false, extendedCategoryAxis0.DEFAULT_AXIS_LABEL_PAINT, extendedCategoryAxis0.DEFAULT_TICK_MARK_STROKE);
    // Undeclared exception!
    try {
        groupedStackedBarRenderer0.drawDomainMarker(graphics2D0, combinedDomainCategoryPlot0, extendedCategoryAxis0, categoryMarker0, (Rectangle2D) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jfree.chart.renderer.category.AbstractCategoryItemRenderer"", e);
    }
}","/**
 * Draws a marker for the domain axis.
 *
 * @param g2  the graphics device (not <code>null</code>).
 * @param plot  the plot (not <code>null</code>).
 * @param axis  the range axis (not <code>null</code>).
 * @param marker  the marker to be drawn (not <code>null</code>).
 * @param dataArea  the area inside the axes (not <code>null</code>).
 *
 * @see #drawRangeMarker(Graphics2D, CategoryPlot, ValueAxis, Marker,
 *     Rectangle2D)
 */"
"protected void addEntity(EntityCollection entities, Shape hotspot, CategoryDataset dataset, int row, int column, boolean selected, double entityX, double entityY) {
    if (!getItemCreateEntity(row, column, selected)) {
        return;
    }
    Shape s = hotspot;
    if (hotspot == null) {
        double r = getDefaultEntityRadius();
        double w = r * 2;
        if (getPlot().getOrientation() == PlotOrientation.VERTICAL) {
            s = new Ellipse2D.Double(entityX - r, entityY - r, w, w);
        } else {
            s = new Ellipse2D.Double(entityY - r, entityX - r, w, w);
        }
    }
    String tip = null;
    CategoryToolTipGenerator generator = getToolTipGenerator(row, column, selected);
    if (generator != null) {
        tip = generator.generateToolTip(dataset, row, column);
    }
    String url = null;
    CategoryURLGenerator urlster = getURLGenerator(row, column, selected);
    if (urlster != null) {
        url = urlster.generateURL(dataset, row, column);
    }
    CategoryItemEntity entity = new CategoryItemEntity(s, tip, url, dataset, dataset.getRowKey(row), dataset.getColumnKey(column));
    entities.add(entity);
}","public void test2425() throws Throwable {
    LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
    StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
    CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(3.0);
    Shape shape0 = candlestickRenderer0.getItemShape(2153, (-1030), false);
    double[][] doubleArray0 = new double[7][2];
    DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
    // Undeclared exception!
    try {
        layeredBarRenderer0.addEntity(standardEntityCollection0, shape0, defaultIntervalCategoryDataset0, 3739, 2, false, (-2620.74785), (-4799.05081782642));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The 'row' argument is out of bounds.
        //
        verifyException(""org.jfree.data.category.DefaultIntervalCategoryDataset"", e);
    }
}","/**
 * Adds an entity to the collection.
 *
 * @param entities  the entity collection being populated.
 * @param hotspot  the entity area (if <code>null</code> a default will be
 *              used).
 * @param dataset  the dataset.
 * @param row  the series.
 * @param column  the item.
 * @param selected  is the item selected?
 * @param entityX  the entity's center x-coordinate in user space (only
 *                 used if <code>area</code> is <code>null</code>).
 * @param entityY  the entity's center y-coordinate in user space (only
 *                 used if <code>area</code> is <code>null</code>).
 *
 * @since 1.2.0
 */"
"protected void addEntity(EntityCollection entities, Shape hotspot, CategoryDataset dataset, int row, int column, boolean selected, double entityX, double entityY) {
    if (!getItemCreateEntity(row, column, selected)) {
        return;
    }
    Shape s = hotspot;
    if (hotspot == null) {
        double r = getDefaultEntityRadius();
        double w = r * 2;
        if (getPlot().getOrientation() == PlotOrientation.VERTICAL) {
            s = new Ellipse2D.Double(entityX - r, entityY - r, w, w);
        } else {
            s = new Ellipse2D.Double(entityY - r, entityX - r, w, w);
        }
    }
    String tip = null;
    CategoryToolTipGenerator generator = getToolTipGenerator(row, column, selected);
    if (generator != null) {
        tip = generator.generateToolTip(dataset, row, column);
    }
    String url = null;
    CategoryURLGenerator urlster = getURLGenerator(row, column, selected);
    if (urlster != null) {
        url = urlster.generateURL(dataset, row, column);
    }
    CategoryItemEntity entity = new CategoryItemEntity(s, tip, url, dataset, dataset.getRowKey(row), dataset.getColumnKey(column));
    entities.add(entity);
}","public void test2526() throws Throwable {
    LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
    DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
    SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultStatisticalCategoryDataset0, 0, (-581));
    StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
    DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
    Shape shape0 = defaultPolarItemRenderer0.getItemShape(0, 0, true);
    // Undeclared exception!
    try {
        lineAndShapeRenderer0.addEntity(standardEntityCollection0, shape0, slidingCategoryDataset0, (-581), 2517, true, 1000000.0, 0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * Adds an entity to the collection.
 *
 * @param entities  the entity collection being populated.
 * @param hotspot  the entity area (if <code>null</code> a default will be
 *              used).
 * @param dataset  the dataset.
 * @param row  the series.
 * @param column  the item.
 * @param selected  is the item selected?
 * @param entityX  the entity's center x-coordinate in user space (only
 *                 used if <code>area</code> is <code>null</code>).
 * @param entityY  the entity's center y-coordinate in user space (only
 *                 used if <code>area</code> is <code>null</code>).
 *
 * @since 1.2.0
 */"
"protected void addEntity(EntityCollection entities, Shape hotspot, CategoryDataset dataset, int row, int column, boolean selected) {
    if (hotspot == null) {
        throw new IllegalArgumentException(""Null 'hotspot' argument."");
    }
    addEntity(entities, hotspot, dataset, row, column, selected, 0.0, 0.0);
}","public void test2627() throws Throwable {
    StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
    StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
    // Undeclared exception!
    try {
        stackedAreaRenderer0.addEntity(standardEntityCollection0, stackedAreaRenderer0.DEFAULT_SHAPE, (CategoryDataset) null, (-1417), 6, false);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jfree.chart.renderer.category.AbstractCategoryItemRenderer"", e);
    }
}","/**
 * Adds an entity with the specified hotspot.
 *
 * @param entities  the entity collection.
 * @param hotspot  the hotspot (<code>null</code> not permitted).
 * @param dataset  the dataset.
 * @param row  the row index.
 * @param column  the column index.
 * @param selected  is the item selected?
 *
 * @since 1.2.0
 */"
"public int getColumnCount() {
    return this.columnCount;
}","public void test2728() throws Throwable {
    IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
    IntervalBarRenderer intervalBarRenderer1 = (IntervalBarRenderer) intervalBarRenderer0.clone();
    assertEquals(0, intervalBarRenderer1.getColumnCount());
}","/**
 * Returns the number of columns in the dataset.  This value is updated in
 * the {@link AbstractCategoryItemRenderer#initialise} method.
 *
 * @return The column count.
 */"
"public DrawingSupplier getDrawingSupplier() {
    DrawingSupplier result = null;
    CategoryPlot cp = getPlot();
    if (cp != null) {
        result = cp.getDrawingSupplier();
    }
    return result;
}","public void test2829() throws Throwable {
    LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
    DrawingSupplier drawingSupplier0 = lineRenderer3D0.getDrawingSupplier();
    assertNull(drawingSupplier0);
}","/**
 * Returns the drawing supplier from the plot.
 *
 * @return The drawing supplier (possibly <code>null</code>).
 */"
"protected Range findRangeBounds(CategoryDataset dataset, boolean includeInterval) {
    if (dataset == null) {
        return null;
    }
    if (getDataBoundsIncludesVisibleSeriesOnly()) {
        List visibleSeriesKeys = new ArrayList();
        int seriesCount = dataset.getRowCount();
        for (int s = 0; s < seriesCount; s++) {
            if (isSeriesVisible(s)) {
                visibleSeriesKeys.add(dataset.getRowKey(s));
            }
        }
        return DatasetUtilities.findRangeBounds(dataset, visibleSeriesKeys, includeInterval);
    } else {
        return DatasetUtilities.findRangeBounds(dataset, includeInterval);
    }
}","public void test2930() throws Throwable {
    BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
    TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
    SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 1022, 1022);
    Range range0 = boxAndWhiskerRenderer0.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, false);
    assertNull(range0);
}","/**
 * Returns the range of values the renderer requires to display all the
 * items from the specified dataset.
 *
 * @param dataset  the dataset (<code>null</code> permitted).
 * @param includeInterval  include the y-interval if the dataset has one.
 *
 * @return The range (<code>null</code> if the dataset is <code>null</code>
 *         or empty).
 *
 * @since 1.0.13
 */"
"public boolean getShadowsVisible() {
    return this.shadowsVisible;
}","public void test3031() throws Throwable {
    BarRenderer3D barRenderer3D0 = new BarRenderer3D();
    CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation(""tI"", 12.0, 3.0);
    Layer layer0 = Layer.FOREGROUND;
    barRenderer3D0.addAnnotation((CategoryAnnotation) categoryTextAnnotation0, layer0);
    assertTrue(barRenderer3D0.getShadowsVisible());
}","/**
 * Returns the flag that controls whether or not shadows are drawn for
 * the bars.
 *
 * @return A boolean.
 *
 * @since 1.0.11
 */"
"// URL GENERATOR
/**
 * Returns the URL generator for a data item.
 *
 * @param row  the row index (zero based).
 * @param column  the column index (zero based).
 * @param selected  is the item selected?
 *
 * @return The URL generator.
 *
 * @since 1.2.0
 */
public CategoryURLGenerator getURLGenerator(int row, int column, boolean selected) {
    CategoryURLGenerator generator = (CategoryURLGenerator) this.urlGeneratorList.get(row);
    if (generator == null) {
        generator = this.baseURLGenerator;
    }
    return generator;
}","public void test3132() throws Throwable {
    ScatterRenderer scatterRenderer0 = new ScatterRenderer();
    CategoryURLGenerator categoryURLGenerator0 = scatterRenderer0.getURLGenerator(3, 0, false);
    assertNull(categoryURLGenerator0);
}",""
"public boolean isDrawBarOutline() {
    return this.drawBarOutline;
}","public void test3233() throws Throwable {
    ScatterRenderer scatterRenderer0 = new ScatterRenderer();
    StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D((double) scatterRenderer0.ZERO, (double) scatterRenderer0.ZERO);
    stackedBarRenderer3D0.setBaseToolTipGenerator((CategoryToolTipGenerator) null, true);
    assertFalse(stackedBarRenderer3D0.isDrawBarOutline());
}","/**
 * Returns a flag that controls whether or not bar outlines are drawn.
 *
 * @return A boolean.
 *
 * @see #setDrawBarOutline(boolean)
 */"
"// TOOL TIP GENERATOR
/**
 * Returns the tool tip generator that should be used for the specified
 * item.  You can override this method if you want to return a different
 * generator per item.
 *
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * @param selected  is the item selected?
 *
 * @return The generator (possibly <code>null</code>).
 *
 * @since 1.2.0
 */
public CategoryToolTipGenerator getToolTipGenerator(int row, int column, boolean selected) {
    CategoryToolTipGenerator result = null;
    result = getSeriesToolTipGenerator(row);
    if (result == null) {
        result = this.baseToolTipGenerator;
    }
    return result;
}","public void test3334() throws Throwable {
    DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
    CategoryToolTipGenerator categoryToolTipGenerator0 = defaultCategoryItemRenderer0.getToolTipGenerator(8, 15, true);
    assertNull(categoryToolTipGenerator0);
}",""
"public double getItemLabelAnchorOffset() {
    return this.itemLabelAnchorOffset;
}","public void test3435() throws Throwable {
    StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(0.0, 0.0);
    StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator();
    stackedBarRenderer3D0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) standardCategoryItemLabelGenerator0, true);
    assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01);
}","/**
 * Returns the item label anchor offset.
 *
 * @return The offset.
 *
 * @see #setItemLabelAnchorOffset(double)
 */"
"public boolean getAutoPopulateSeriesPaint() {
    return this.autoPopulateSeriesPaint;
}","public void test3536() throws Throwable {
    WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
    StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator();
    waterfallBarRenderer0.setSeriesItemLabelGenerator(2669, (CategoryItemLabelGenerator) standardCategoryItemLabelGenerator0, true);
    assertTrue(waterfallBarRenderer0.getAutoPopulateSeriesPaint());
}","/**
 * Returns the flag that controls whether or not the series paint list is
 * automatically populated when {@link #lookupSeriesPaint(int)} is called.
 *
 * @return A boolean.
 *
 * @since 1.0.6
 *
 * @see #setAutoPopulateSeriesPaint(boolean)
 */"
"public boolean getAutoPopulateSeriesOutlinePaint() {
    return this.autoPopulateSeriesOutlinePaint;
}","public void test3637() throws Throwable {
    GanttRenderer ganttRenderer0 = new GanttRenderer();
    CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
    ganttRenderer0.setPlot(combinedDomainCategoryPlot0);
    assertFalse(ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
}","/**
 * Returns the flag that controls whether or not the series outline paint
 * list is automatically populated when
 * {@link #lookupSeriesOutlinePaint(int)} is called.
 *
 * @return A boolean.
 *
 * @since 1.0.6
 *
 * @see #setAutoPopulateSeriesOutlinePaint(boolean)
 */"
"public CategoryPlot getPlot() {
    return this.plot;
}","public void test3738() throws Throwable {
    LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
    CategoryPlot categoryPlot0 = layeredBarRenderer0.getPlot();
    assertNull(categoryPlot0);
}","/**
 * Returns the plot that the renderer has been assigned to (where
 * <code>null</code> indicates that the renderer is not currently assigned
 * to a plot).
 *
 * @return The plot (possibly <code>null</code>).
 *
 * @see #setPlot(CategoryPlot)
 */"
"protected void addEntity(EntityCollection entities, Shape hotspot, CategoryDataset dataset, int row, int column, boolean selected, double entityX, double entityY) {
    if (!getItemCreateEntity(row, column, selected)) {
        return;
    }
    Shape s = hotspot;
    if (hotspot == null) {
        double r = getDefaultEntityRadius();
        double w = r * 2;
        if (getPlot().getOrientation() == PlotOrientation.VERTICAL) {
            s = new Ellipse2D.Double(entityX - r, entityY - r, w, w);
        } else {
            s = new Ellipse2D.Double(entityY - r, entityX - r, w, w);
        }
    }
    String tip = null;
    CategoryToolTipGenerator generator = getToolTipGenerator(row, column, selected);
    if (generator != null) {
        tip = generator.generateToolTip(dataset, row, column);
    }
    String url = null;
    CategoryURLGenerator urlster = getURLGenerator(row, column, selected);
    if (urlster != null) {
        url = urlster.generateURL(dataset, row, column);
    }
    CategoryItemEntity entity = new CategoryItemEntity(s, tip, url, dataset, dataset.getRowKey(row), dataset.getColumnKey(column));
    entities.add(entity);
}","public void test3839() throws Throwable {
    StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(false, false);
    SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, 2638, 0);
    // Undeclared exception!
    try {
        statisticalLineAndShapeRenderer0.addEntity((EntityCollection) null, (Shape) null, slidingCategoryDataset0, 2638, 489, false, 0.0, 0.0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jfree.chart.renderer.category.AbstractCategoryItemRenderer"", e);
    }
}","/**
 * Adds an entity to the collection.
 *
 * @param entities  the entity collection being populated.
 * @param hotspot  the entity area (if <code>null</code> a default will be
 *              used).
 * @param dataset  the dataset.
 * @param row  the series.
 * @param column  the item.
 * @param selected  is the item selected?
 * @param entityX  the entity's center x-coordinate in user space (only
 *                 used if <code>area</code> is <code>null</code>).
 * @param entityY  the entity's center y-coordinate in user space (only
 *                 used if <code>area</code> is <code>null</code>).
 *
 * @since 1.2.0
 */"
"public int getItemCount() {
    return this.items.size();
}","public void test3940() throws Throwable {
    LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(true, true);
    LegendItemCollection legendItemCollection0 = lineAndShapeRenderer0.getLegendItems();
    assertEquals(0, legendItemCollection0.getItemCount());
}","/**
 * Returns the number of legend items in the collection.
 *
 * @return The item count.
 */"
"public Object clone() throws CloneNotSupportedException {
    return super.clone();
}","public void test4041() throws Throwable {
    StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
    CustomCategoryURLGenerator customCategoryURLGenerator0 = new CustomCategoryURLGenerator();
    stackedAreaRenderer0.setBaseURLGenerator((CategoryURLGenerator) customCategoryURLGenerator0, true);
    Object object0 = stackedAreaRenderer0.clone();
    assertNotSame(object0, stackedAreaRenderer0);
}","/**
 * Returns an independent copy of the renderer.
 *
 * @return A clone.
 *
 * @throws CloneNotSupportedException  should not happen.
 */"
"public void drawAnnotations(Graphics2D g2, Rectangle2D dataArea, CategoryAxis domainAxis, ValueAxis rangeAxis, Layer layer, PlotRenderingInfo info) {
    Iterator iterator = null;
    if (layer.equals(Layer.FOREGROUND)) {
        iterator = this.foregroundAnnotations.iterator();
    } else if (layer.equals(Layer.BACKGROUND)) {
        iterator = this.backgroundAnnotations.iterator();
    } else {
        // should not get here
        throw new RuntimeException(""Unknown layer."");
    }
    while (iterator.hasNext()) {
        CategoryAnnotation annotation = (CategoryAnnotation) iterator.next();
        annotation.draw(g2, this.plot, dataArea, domainAxis, rangeAxis, 0, info);
    }
}","public void test4142() throws Throwable {
    BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
    DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
    CompassPlot compassPlot0 = new CompassPlot(defaultValueDataset0);
    JFreeChart jFreeChart0 = new JFreeChart("""", compassPlot0);
    StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
    BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(3212, 276, 7, chartRenderingInfo0);
    BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
    Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
    Line2D.Double line2D_Double0 = new Line2D.Double();
    Rectangle2D rectangle2D0 = line2D_Double0.getBounds2D();
    CategoryAxis categoryAxis0 = new CategoryAxis();
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0, 0.5F);
    Layer layer0 = Layer.BACKGROUND;
    boxAndWhiskerRenderer0.drawAnnotations(graphics2D0, rectangle2D0, categoryAxis0, cyclicNumberAxis0, layer0, (PlotRenderingInfo) null);
    assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
}","/**
 * Draws all the annotations for the specified layer.
 *
 * @param g2  the graphics device.
 * @param dataArea  the data area.
 * @param domainAxis  the domain axis.
 * @param rangeAxis  the range axis.
 * @param layer  the layer.
 * @param info  the plot rendering info.
 *
 * @since 1.2.0
 */"
"public int getPassCount() {
    return 1;
}","public void test4243() throws Throwable {
    LevelRenderer levelRenderer0 = new LevelRenderer();
    DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
    levelRenderer0.drawItemLabel((Graphics2D) null, (PlotOrientation) null, defaultBoxAndWhiskerCategoryDataset0, 1, 1, false, 1, (-23.947), true);
    assertEquals(1, levelRenderer0.getPassCount());
}","/**
 * Returns the number of passes through the dataset required by the
 * renderer.  This method returns <code>1</code>, subclasses should
 * override if they need more passes.
 *
 * @return The pass count.
 */"
"public boolean getUseSeriesOffset() {
    return this.useSeriesOffset;
}","public void test4344() throws Throwable {
    LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
    CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
    ValueAxis valueAxis0 = lineRenderer3D0.getRangeAxis(combinedRangeCategoryPlot0, 2025);
    Week week0 = new Week(10, 500);
    Millisecond millisecond0 = new Millisecond();
    float[][] floatArray0 = new float[7][9];
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0F, ""bH>\""<)k'"");
    FastScatterPlot fastScatterPlot0 = new FastScatterPlot(floatArray0, valueAxis0, cyclicNumberAxis0);
    PlotOrientation plotOrientation0 = fastScatterPlot0.getOrientation();
    lineRenderer3D0.updateCrosshairValues((CategoryCrosshairState) null, week0, millisecond0, 0.0F, 2025, 1.0, 72.0, plotOrientation0);
    assertFalse(lineRenderer3D0.getUseSeriesOffset());
}","/**
 * Returns the flag that controls whether or not the x-position for each
 * data item is offset within the category according to the series.
 *
 * @return A boolean.
 *
 * @see #setUseSeriesOffset(boolean)
 *
 * @since 1.0.7
 */"
"public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof StatisticalBarRenderer)) {
        return false;
    }
    StatisticalBarRenderer that = (StatisticalBarRenderer) obj;
    if (!PaintUtilities.equal(this.errorIndicatorPaint, that.errorIndicatorPaint)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.errorIndicatorStroke, that.errorIndicatorStroke)) {
        return false;
    }
    return super.equals(obj);
}","public void test4445() throws Throwable {
    StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
    StatisticalBarRenderer statisticalBarRenderer1 = new StatisticalBarRenderer();
    boolean boolean0 = statisticalBarRenderer0.equals(statisticalBarRenderer1);
    assertTrue(boolean0);
}","/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */"
"protected Point2D calculateRangeMarkerTextAnchorPoint(Graphics2D g2, PlotOrientation orientation, Rectangle2D dataArea, Rectangle2D markerArea, RectangleInsets markerOffset, LengthAdjustmentType labelOffsetType, RectangleAnchor anchor) {
    Rectangle2D anchorRect = null;
    if (orientation == PlotOrientation.HORIZONTAL) {
        anchorRect = markerOffset.createAdjustedRectangle(markerArea, labelOffsetType, LengthAdjustmentType.CONTRACT);
    } else if (orientation == PlotOrientation.VERTICAL) {
        anchorRect = markerOffset.createAdjustedRectangle(markerArea, LengthAdjustmentType.CONTRACT, labelOffsetType);
    }
    return RectangleAnchor.coordinates(anchorRect, anchor);
}","public void test4546() throws Throwable {
    MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
    DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
    ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
    PlotOrientation plotOrientation0 = thermometerPlot0.getOrientation();
    LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.CONTRACT;
    RectangleAnchor rectangleAnchor0 = RectangleAnchor.RIGHT;
    // Undeclared exception!
    try {
        minMaxCategoryRenderer0.calculateRangeMarkerTextAnchorPoint((Graphics2D) null, plotOrientation0, (Rectangle2D) null, (Rectangle2D) null, thermometerPlot0.DEFAULT_INSETS, lengthAdjustmentType0, rectangleAnchor0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'base' argument.
        //
        verifyException(""org.jfree.chart.util.RectangleInsets"", e);
    }
}","/**
 * Calculates the (x, y) coordinates for drawing a marker label.
 *
 * @param g2  the graphics device.
 * @param orientation  the plot orientation.
 * @param dataArea  the data area.
 * @param markerArea  the rectangle surrounding the marker.
 * @param markerOffset  the marker offset.
 * @param labelOffsetType  the label offset type.
 * @param anchor  the label anchor.
 *
 * @return The coordinates for drawing the marker label.
 */"
"public boolean getAutoPopulateSeriesOutlineStroke() {
    return this.autoPopulateSeriesOutlineStroke;
}","public void test4647() throws Throwable {
    LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
    Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double) layeredBarRenderer0.lookupLegendShape(0);
    StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
    LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
    PeriodAxis periodAxis0 = new PeriodAxis(""OQA(9KM7&U5H`)k"");
    ValueMarker valueMarker0 = new ValueMarker(2.0F, lineRenderer3D0.DEFAULT_PAINT, statisticalBarRenderer0.DEFAULT_OUTLINE_STROKE);
    statisticalBarRenderer0.drawRangeMarker((Graphics2D) null, (CategoryPlot) null, periodAxis0, valueMarker0, rectangle2D_Double0);
    assertFalse(statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
}","/**
 * Returns the flag that controls whether or not the series outline stroke
 * list is automatically populated when
 * {@link #lookupSeriesOutlineStroke(int)} is called.
 *
 * @return A boolean.
 *
 * @since 1.0.6
 *
 * @see #setAutoPopulateSeriesOutlineStroke(boolean)
 */"
"public double getItemMargin() {
    return this.itemMargin;
}","public void test4748() throws Throwable {
    DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
    CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = new Locale(""j"", ""lL{^w0e9u_@s+no\u0007P"");
    DateAxis dateAxis0 = new DateAxis("""", timeZone0, locale0);
    defaultCategoryItemRenderer0.drawRangeLine((Graphics2D) null, combinedDomainCategoryPlot0, dateAxis0, (Rectangle2D) null, 1.7976931348623157E308, dateAxis0.DEFAULT_TICK_LABEL_PAINT, combinedDomainCategoryPlot0.DEFAULT_CROSSHAIR_STROKE);
    assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01);
}","/**
 * Returns the item margin, which is the gap between items within a
 * category (expressed as a percentage of the overall category width).
 * This can be used to match the offset alignment with the bars drawn by
 * a {@link BarRenderer}).
 *
 * @return The item margin.
 *
 * @see #setItemMargin(double)
 * @see #getUseSeriesOffset()
 *
 * @since 1.0.7
 */"
"public void drawDomainLine(Graphics2D g2, CategoryPlot plot, Rectangle2D dataArea, double value, Paint paint, Stroke stroke) {
    if (paint == null) {
        throw new IllegalArgumentException(""Null 'paint' argument."");
    }
    if (stroke == null) {
        throw new IllegalArgumentException(""Null 'stroke' argument."");
    }
    Line2D line = null;
    PlotOrientation orientation = plot.getOrientation();
    if (orientation == PlotOrientation.HORIZONTAL) {
        line = new Line2D.Double(dataArea.getMinX(), value, dataArea.getMaxX(), value);
    } else if (orientation == PlotOrientation.VERTICAL) {
        line = new Line2D.Double(value, dataArea.getMinY(), value, dataArea.getMaxY());
    }
    g2.setPaint(paint);
    g2.setStroke(stroke);
    g2.draw(line);
}","public void test4849() throws Throwable {
    StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer(true);
    StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
    Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double) statisticalBarRenderer0.lookupSeriesShape(2669);
    WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
    DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
    SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("":D4(bZgN@QU"");
    NumberAxis3D numberAxis3D0 = new NumberAxis3D("":D4(bZgN@QU"");
    CategoryPlot categoryPlot0 = new CategoryPlot(defaultBoxAndWhiskerCategoryDataset0, subCategoryAxis0, numberAxis3D0, statisticalBarRenderer0);
    // Undeclared exception!
    try {
        waterfallBarRenderer0.drawDomainLine((Graphics2D) null, categoryPlot0, rectangle2D_Double0, 1136.7620977163, stackedBarRenderer0.DEFAULT_VALUE_LABEL_PAINT, stackedBarRenderer0.DEFAULT_OUTLINE_STROKE);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jfree.chart.renderer.category.AbstractCategoryItemRenderer"", e);
    }
}","/**
 * Draws a grid line against the domain axis.
 * <P>
 * Note that this default implementation assumes that the horizontal axis
 * is the domain axis. If this is not the case, you will need to override
 * this method.
 *
 * @param g2  the graphics device.
 * @param plot  the plot.
 * @param dataArea  the area for plotting data (not yet adjusted for any
 *                  3D effect).
 * @param value  the Java2D value at which the grid line should be drawn.
 * @param paint  the paint (<code>null</code> not permitted).
 * @param stroke  the stroke (<code>null</code> not permitted).
 *
 * @see #drawRangeGridline(Graphics2D, CategoryPlot, ValueAxis,
 *     Rectangle2D, double)
 *
 * @since 1.2.0
 */"
"protected Range findRangeBounds(CategoryDataset dataset, boolean includeInterval) {
    if (dataset == null) {
        return null;
    }
    if (getDataBoundsIncludesVisibleSeriesOnly()) {
        List visibleSeriesKeys = new ArrayList();
        int seriesCount = dataset.getRowCount();
        for (int s = 0; s < seriesCount; s++) {
            if (isSeriesVisible(s)) {
                visibleSeriesKeys.add(dataset.getRowKey(s));
            }
        }
        return DatasetUtilities.findRangeBounds(dataset, visibleSeriesKeys, includeInterval);
    } else {
        return DatasetUtilities.findRangeBounds(dataset, includeInterval);
    }
}","public void test4950() throws Throwable {
    StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(false, false);
    Range range0 = statisticalLineAndShapeRenderer0.findRangeBounds((CategoryDataset) null, false);
    assertNull(range0);
}","/**
 * Returns the range of values the renderer requires to display all the
 * items from the specified dataset.
 *
 * @param dataset  the dataset (<code>null</code> permitted).
 * @param includeInterval  include the y-interval if the dataset has one.
 *
 * @return The range (<code>null</code> if the dataset is <code>null</code>
 *         or empty).
 *
 * @since 1.0.13
 */"
"public CategoryItemRendererState initialise(Graphics2D g2, Rectangle2D dataArea, CategoryPlot plot, CategoryDataset dataset, PlotRenderingInfo info) {
    CategoryItemRendererState state = super.initialise(g2, dataArea, plot, dataset, info);
    // calculate the bar width
    calculateBarWidth(plot, dataArea, dataset, state);
    return state;
}","public void test5051() throws Throwable {
    CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
    StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
    Polygon polygon0 = new Polygon();
    Rectangle rectangle0 = polygon0.getBounds();
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
    PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
    // Undeclared exception!
    try {
        statisticalBarRenderer0.initialise((Graphics2D) null, rectangle0, combinedDomainCategoryPlot0, (CategoryDataset) null, plotRenderingInfo0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jfree.chart.renderer.category.AbstractCategoryItemRenderer"", e);
    }
}","/**
 * Initialises the renderer and returns a state object that will be passed
 * to subsequent calls to the drawItem method.  This method gets called
 * once at the start of the process of drawing a chart.
 *
 * @param g2  the graphics device.
 * @param dataArea  the area in which the data is to be plotted.
 * @param plot  the plot.
 * @param dataset  the dataset.
 * @param info  collects chart rendering information for return to caller.
 *
 * @return The renderer state.
 */"
"public CategoryItemRendererState initialise(Graphics2D g2, Rectangle2D dataArea, CategoryPlot plot, CategoryDataset dataset, PlotRenderingInfo info) {
    CategoryItemRendererState state = super.initialise(g2, dataArea, plot, dataset, info);
    // calculate the bar width
    calculateBarWidth(plot, dataArea, dataset, state);
    return state;
}","public void test5152() throws Throwable {
    StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
    Line2D.Float line2D_Float0 = new Line2D.Float();
    Rectangle2D rectangle2D0 = line2D_Float0.getBounds2D();
    ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("""");
    CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(extendedCategoryAxis0);
    Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
    JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
    PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
    // Undeclared exception!
    try {
        statisticalBarRenderer0.initialise((Graphics2D) null, rectangle2D0, combinedDomainCategoryPlot0, jDBCCategoryDataset0, plotRenderingInfo0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Negative 'index'.
        //
        verifyException(""org.jfree.chart.plot.CategoryPlot"", e);
    }
}","/**
 * Initialises the renderer and returns a state object that will be passed
 * to subsequent calls to the drawItem method.  This method gets called
 * once at the start of the process of drawing a chart.
 *
 * @param g2  the graphics device.
 * @param dataArea  the area in which the data is to be plotted.
 * @param plot  the plot.
 * @param dataset  the dataset.
 * @param info  collects chart rendering information for return to caller.
 *
 * @return The renderer state.
 */"
"public void setLegendItemLabelGenerator(CategorySeriesLabelGenerator generator) {
    if (generator == null) {
        throw new IllegalArgumentException(""Null 'generator' argument."");
    }
    this.legendItemLabelGenerator = generator;
    fireChangeEvent();
}","public void test5253() throws Throwable {
    BarRenderer barRenderer0 = new BarRenderer();
    // Undeclared exception!
    try {
        barRenderer0.setLegendItemLabelGenerator((CategorySeriesLabelGenerator) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'generator' argument.
        //
        verifyException(""org.jfree.chart.renderer.category.AbstractCategoryItemRenderer"", e);
    }
}","/**
 * Sets the legend item label generator and sends a
 * {@link RendererChangeEvent} to all registered listeners.
 *
 * @param generator  the generator (<code>null</code> not permitted).
 *
 * @see #getLegendItemLabelGenerator()
 */"
"public double getYOffset() {
    return this.yOffset;
}","public void test5354() throws Throwable {
    BarRenderer3D barRenderer3D0 = new BarRenderer3D();
    StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
    CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = statisticalBarRenderer0.getLegendItemLabelGenerator();
    barRenderer3D0.setLegendItemLabelGenerator(categorySeriesLabelGenerator0);
    assertEquals(8.0, barRenderer3D0.getYOffset(), 0.01);
}","/**
 * Returns the y-offset for the 3D effect.
 *
 * @return The 3D effect.
 */"
"public boolean removeAnnotation(CategoryAnnotation annotation) {
    boolean removed = this.foregroundAnnotations.remove(annotation);
    removed = removed & this.backgroundAnnotations.remove(annotation);
    notifyListeners(new RendererChangeEvent(this));
    return removed;
}","public void test5455() throws Throwable {
    StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
    CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("""", """", 1380.0, (-2439.614));
    Layer layer0 = Layer.BACKGROUND;
    stackedBarRenderer3D0.addAnnotation((CategoryAnnotation) categoryPointerAnnotation0, layer0);
    boolean boolean0 = stackedBarRenderer3D0.removeAnnotation(categoryPointerAnnotation0);
    assertFalse(boolean0);
}","/**
 * Removes the specified annotation and sends a {@link RendererChangeEvent}
 * to all registered listeners.
 *
 * @param annotation  the annotation to remove (<code>null</code> not
 *                    permitted).
 *
 * @return A boolean to indicate whether or not the annotation was
 *         successfully removed.
 *
 * @since 1.2.0
 */"
"public void addAnnotation(CategoryAnnotation annotation, Layer layer) {
    if (annotation == null) {
        throw new IllegalArgumentException(""Null 'annotation' argument."");
    }
    if (layer.equals(Layer.FOREGROUND)) {
        this.foregroundAnnotations.add(annotation);
        notifyListeners(new RendererChangeEvent(this));
    } else if (layer.equals(Layer.BACKGROUND)) {
        this.backgroundAnnotations.add(annotation);
        notifyListeners(new RendererChangeEvent(this));
    } else {
        // should never get here
        throw new RuntimeException(""Unknown layer."");
    }
}","public void test5556() throws Throwable {
    StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
    Layer layer0 = Layer.FOREGROUND;
    // Undeclared exception!
    try {
        statisticalBarRenderer0.addAnnotation((CategoryAnnotation) null, layer0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'annotation' argument.
        //
        verifyException(""org.jfree.chart.renderer.category.AbstractCategoryItemRenderer"", e);
    }
}","/**
 * Adds an annotation to the specified layer.
 *
 * @param annotation  the annotation (<code>null</code> not permitted).
 * @param layer  the layer (<code>null</code> not permitted).
 *
 * @since 1.2.0
 */"
"public boolean getAutoPopulateSeriesFillPaint() {
    return this.autoPopulateSeriesFillPaint;
}","public void test5657() throws Throwable {
    LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
    lineAndShapeRenderer0.setBaseURLGenerator((CategoryURLGenerator) null, false);
    assertFalse(lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
}","/**
 * Returns the flag that controls whether or not the series fill paint list
 * is automatically populated when {@link #lookupSeriesFillPaint(int)} is
 * called.
 *
 * @return A boolean.
 *
 * @since 1.0.6
 *
 * @see #setAutoPopulateSeriesFillPaint(boolean)
 */"
"// URL GENERATOR
/**
 * Returns the URL generator for a data item.
 *
 * @param row  the row index (zero based).
 * @param column  the column index (zero based).
 * @param selected  is the item selected?
 *
 * @return The URL generator.
 *
 * @since 1.2.0
 */
public CategoryURLGenerator getURLGenerator(int row, int column, boolean selected) {
    CategoryURLGenerator generator = (CategoryURLGenerator) this.urlGeneratorList.get(row);
    if (generator == null) {
        generator = this.baseURLGenerator;
    }
    return generator;
}","public void test5758() throws Throwable {
    StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
    StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator(""E||1811{DU:V0q"", ""E||1811{DU:V0q"", """");
    stackedAreaRenderer0.setSeriesURLGenerator(652, (CategoryURLGenerator) standardCategoryURLGenerator0, false);
    CategoryURLGenerator categoryURLGenerator0 = stackedAreaRenderer0.getURLGenerator(652, 2, true);
    assertSame(categoryURLGenerator0, standardCategoryURLGenerator0);
}",""
"public String getLabelFormat() {
    return this.labelFormat;
}","public void test5859() throws Throwable {
    DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
    BoxAndWhiskerToolTipGenerator boxAndWhiskerToolTipGenerator0 = new BoxAndWhiskerToolTipGenerator();
    defaultCategoryItemRenderer0.setBaseToolTipGenerator((CategoryToolTipGenerator) boxAndWhiskerToolTipGenerator0, false);
    BoxAndWhiskerToolTipGenerator boxAndWhiskerToolTipGenerator1 = (BoxAndWhiskerToolTipGenerator) defaultCategoryItemRenderer0.getToolTipGenerator(8, 15, true);
    assertEquals(""X: {1} Mean: {2} Median: {3} Min: {4} Max: {5} Q1: {6} Q3: {7} "", boxAndWhiskerToolTipGenerator1.getLabelFormat());
}","/**
 * Returns the label format string.
 *
 * @return The label format string (never <code>null</code>).
 */"
"public boolean getBaseCreateEntities() {
    return this.baseCreateEntities;
}","public void test5960() throws Throwable {
    StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
    stackedAreaRenderer0.setSeriesToolTipGenerator(1562, (CategoryToolTipGenerator) null, true);
    assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
}","/**
 * Returns the base visibility for all series.
 *
 * @return The base visibility.
 *
 * @see #setBaseCreateEntities(boolean)
 */"
"public boolean getBaseCreateEntities() {
    return this.baseCreateEntities;
}","public void test6061() throws Throwable {
    GanttRenderer ganttRenderer0 = new GanttRenderer();
    IntervalCategoryToolTipGenerator intervalCategoryToolTipGenerator0 = new IntervalCategoryToolTipGenerator();
    ganttRenderer0.setSeriesToolTipGenerator(10, (CategoryToolTipGenerator) intervalCategoryToolTipGenerator0, false);
    assertTrue(ganttRenderer0.getBaseCreateEntities());
}","/**
 * Returns the base visibility for all series.
 *
 * @return The base visibility.
 *
 * @see #setBaseCreateEntities(boolean)
 */"
"protected void addEntity(EntityCollection entities, Shape hotspot, CategoryDataset dataset, int row, int column, boolean selected) {
    if (hotspot == null) {
        throw new IllegalArgumentException(""Null 'hotspot' argument."");
    }
    addEntity(entities, hotspot, dataset, row, column, selected, 0.0, 0.0);
}","public void test6162() throws Throwable {
    StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer(true);
    MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
    StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
    TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
    SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 2669, 2669);
    // Undeclared exception!
    try {
        minMaxCategoryRenderer0.addEntity(standardEntityCollection0, stackedBarRenderer0.DEFAULT_SHAPE, slidingGanttCategoryDataset0, 0, 1729, true);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 0, Size: 0
        //
        verifyException(""java.util.ArrayList"", e);
    }
}","/**
 * Adds an entity with the specified hotspot.
 *
 * @param entities  the entity collection.
 * @param hotspot  the hotspot (<code>null</code> not permitted).
 * @param dataset  the dataset.
 * @param row  the row index.
 * @param column  the column index.
 * @param selected  is the item selected?
 *
 * @since 1.2.0
 */"
"public boolean getAutoPopulateSeriesShape() {
    return this.autoPopulateSeriesShape;
}","public void test6263() throws Throwable {
    CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(true);
    categoryStepRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) null, false);
    assertTrue(categoryStepRenderer0.getAutoPopulateSeriesShape());
}","/**
 * Returns the flag that controls whether or not the series shape list is
 * automatically populated when {@link #lookupSeriesShape(int)} is called.
 *
 * @return A boolean.
 *
 * @since 1.0.6
 *
 * @see #setAutoPopulateSeriesShape(boolean)
 */"
"public int getPassCount() {
    return 1;
}","public void test6364() throws Throwable {
    StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
    statisticalBarRenderer0.setSeriesItemLabelGenerator(1066, (CategoryItemLabelGenerator) null, false);
    assertEquals(1, statisticalBarRenderer0.getPassCount());
}","/**
 * Returns the number of passes through the dataset required by the
 * renderer.  This method returns <code>1</code>, subclasses should
 * override if they need more passes.
 *
 * @return The pass count.
 */"
"// ITEM LABEL GENERATOR
/**
 * Returns the item label generator for a data item.  This implementation
 * returns the series item label generator if one is defined, otherwise
 * it returns the default item label generator (which may be
 * <code>null</code>).
 *
 * @param row  the row index (zero based).
 * @param column  the column index (zero based).
 * @param selected  is the item selected?
 *
 * @return The generator (possibly <code>null</code>).
 *
 * @since 1.2.0
 */
public CategoryItemLabelGenerator getItemLabelGenerator(int row, int column, boolean selected) {
    CategoryItemLabelGenerator generator = (CategoryItemLabelGenerator) this.itemLabelGeneratorList.get(row);
    if (generator == null) {
        generator = this.baseItemLabelGenerator;
    }
    return generator;
}","public void test6465() throws Throwable {
    StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
    CategoryItemLabelGenerator categoryItemLabelGenerator0 = statisticalBarRenderer0.getItemLabelGenerator((-6), 249, true);
    assertNull(categoryItemLabelGenerator0);
}",""
"public void setPlot(CategoryPlot plot) {
    if (plot == null) {
        throw new IllegalArgumentException(""Null 'plot' argument."");
    }
    this.plot = plot;
}","public void test6566() throws Throwable {
    StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(0.0, 0.0);
    // Undeclared exception!
    try {
        stackedBarRenderer3D0.setPlot((CategoryPlot) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'plot' argument.
        //
        verifyException(""org.jfree.chart.renderer.category.AbstractCategoryItemRenderer"", e);
    }
}","/**
 * Sets the plot that the renderer has been assigned to.  This method is
 * usually called by the {@link CategoryPlot}, in normal usage you
 * shouldn't need to call this method directly.
 *
 * @param plot  the plot (<code>null</code> not permitted).
 *
 * @see #getPlot()
 */"
"public int getVisibleSeriesCount() {
    if (this.visibleSeries == null) {
        return -1;
    }
    return this.visibleSeries.length;
}","public void test6667() throws Throwable {
    DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
    CompassPlot compassPlot0 = new CompassPlot(defaultValueDataset0);
    JFreeChart jFreeChart0 = new JFreeChart("""", compassPlot0);
    StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
    BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(3212, 276, 7, chartRenderingInfo0);
    BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
    Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
    Line2D.Double line2D_Double0 = new Line2D.Double();
    Rectangle2D rectangle2D0 = line2D_Double0.getBounds2D();
    LevelRenderer levelRenderer0 = new LevelRenderer();
    CategoryPlot categoryPlot0 = new CategoryPlot();
    CategoryItemRendererState categoryItemRendererState0 = levelRenderer0.initialise(graphics2D0, rectangle2D0, categoryPlot0, (CategoryDataset) null, (PlotRenderingInfo) null);
    assertEquals(0, categoryItemRendererState0.getVisibleSeriesCount());
}","/**
 * Returns the number of visible series or -1 if no visible series have
 * been specified.
 *
 * @return The number or -1.
 *
 * @since 1.0.13
 */"
"public int getColumnCount() {
    return this.columnCount;
}","public void test6668() throws Throwable {
    DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
    CompassPlot compassPlot0 = new CompassPlot(defaultValueDataset0);
    JFreeChart jFreeChart0 = new JFreeChart("""", compassPlot0);
    StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
    BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(3212, 276, 7, chartRenderingInfo0);
    BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
    Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
    Line2D.Double line2D_Double0 = new Line2D.Double();
    Rectangle2D rectangle2D0 = line2D_Double0.getBounds2D();
    LevelRenderer levelRenderer0 = new LevelRenderer();
    CategoryPlot categoryPlot0 = new CategoryPlot();
    CategoryItemRendererState categoryItemRendererState0 = levelRenderer0.initialise(graphics2D0, rectangle2D0, categoryPlot0, (CategoryDataset) null, (PlotRenderingInfo) null);
    assertEquals(0, levelRenderer0.getColumnCount());
}","/**
 * Returns the number of columns in the dataset.  This value is updated in
 * the {@link AbstractCategoryItemRenderer#initialise} method.
 *
 * @return The column count.
 */"
"public boolean getAutoPopulateSeriesOutlinePaint() {
    return this.autoPopulateSeriesOutlinePaint;
}","public void test6769() throws Throwable {
    StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
    stackedAreaRenderer0.setSeriesURLGenerator(1022, (CategoryURLGenerator) null);
    assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
}","/**
 * Returns the flag that controls whether or not the series outline paint
 * list is automatically populated when
 * {@link #lookupSeriesOutlinePaint(int)} is called.
 *
 * @return A boolean.
 *
 * @since 1.0.6
 *
 * @see #setAutoPopulateSeriesOutlinePaint(boolean)
 */"
"public CategoryItemLabelGenerator getBaseItemLabelGenerator() {
    return this.baseItemLabelGenerator;
}","public void test6870() throws Throwable {
    WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
    CategoryItemLabelGenerator categoryItemLabelGenerator0 = waterfallBarRenderer0.getBaseItemLabelGenerator();
    assertNull(categoryItemLabelGenerator0);
}","/**
 * Returns the base item label generator.
 *
 * @return The generator (possibly <code>null</code>).
 *
 * @see #setBaseItemLabelGenerator(CategoryItemLabelGenerator)
 */"
"public boolean getBaseSeriesVisibleInLegend() {
    return this.baseSeriesVisibleInLegend;
}","public void test6971() throws Throwable {
    StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(true, true);
    StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D((-1213.962634562), 4672.8062);
    CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = stackedBarRenderer3D0.getLegendItemLabelGenerator();
    statisticalLineAndShapeRenderer0.setLegendItemToolTipGenerator(categorySeriesLabelGenerator0);
    assertTrue(statisticalLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
}","/**
 * Returns the base visibility in the legend for all series.
 *
 * @return The base visibility.
 *
 * @see #setBaseSeriesVisibleInLegend(boolean)
 */"
"public int getRowCount() {
    return this.rowCount;
}","public void test7072() throws Throwable {
    StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
    int int0 = stackedAreaRenderer0.getRowCount();
    assertEquals(0, int0);
}","/**
 * Returns the number of rows in the dataset.  This value is updated in the
 * {@link AbstractCategoryItemRenderer#initialise} method.
 *
 * @return The row count.
 */"
"public void setSeriesToolTipGenerator(int series, CategoryToolTipGenerator generator) {
    setSeriesToolTipGenerator(series, generator, true);
}","public void test7173() throws Throwable {
    StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
    // Undeclared exception!
    try {
        stackedAreaRenderer0.setSeriesToolTipGenerator((-4315), (CategoryToolTipGenerator) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Requires index >= 0.
        //
        verifyException(""org.jfree.chart.util.AbstractObjectList"", e);
    }
}","/**
 * Sets the tool tip generator for a series and sends a
 * {@link RendererChangeEvent} to all registered listeners.
 *
 * @param series  the series index (zero-based).
 * @param generator  the generator (<code>null</code> permitted).
 *
 * @see #getSeriesToolTipGenerator(int)
 */"
"public int getPassCount() {
    return 1;
}","public void test7274() throws Throwable {
    LevelRenderer levelRenderer0 = new LevelRenderer();
    levelRenderer0.setBaseToolTipGenerator((CategoryToolTipGenerator) null);
    assertEquals(1, levelRenderer0.getPassCount());
}","/**
 * Returns the number of passes through the dataset required by the
 * renderer.  This method returns <code>1</code>, subclasses should
 * override if they need more passes.
 *
 * @return The pass count.
 */"
"public void drawBackground(Graphics2D g2, CategoryPlot plot, Rectangle2D dataArea) {
    plot.drawBackground(g2, dataArea);
}","public void test7375() throws Throwable {
    BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
    DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
    CompassPlot compassPlot0 = new CompassPlot(defaultValueDataset0);
    JFreeChart jFreeChart0 = new JFreeChart("""", compassPlot0);
    StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
    BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(3212, 276, 7, chartRenderingInfo0);
    BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
    Graphics2D graphics2D0 = bufferedImageRenderingSource0.createGraphics2D();
    Line2D.Double line2D_Double0 = new Line2D.Double();
    Rectangle2D rectangle2D0 = line2D_Double0.getBounds2D();
    // Undeclared exception!
    try {
        boxAndWhiskerRenderer0.drawBackground(graphics2D0, (CategoryPlot) null, rectangle2D0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jfree.chart.renderer.category.AbstractCategoryItemRenderer"", e);
    }
}","/**
 * Draws a background for the data area.  The default implementation just
 * gets the plot to draw the background, but some renderers will override
 * this behaviour.
 *
 * @param g2  the graphics device.
 * @param plot  the plot.
 * @param dataArea  the data area.
 */"
"public CategoryItemLabelGenerator getSeriesItemLabelGenerator(int series) {
    return (CategoryItemLabelGenerator) this.itemLabelGeneratorList.get(series);
}","public void test7476() throws Throwable {
    LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
    CategoryItemLabelGenerator categoryItemLabelGenerator0 = layeredBarRenderer0.getSeriesItemLabelGenerator(844);
    assertNull(categoryItemLabelGenerator0);
}","/**
 * Returns the item label generator for a series.
 *
 * @param series  the series index (zero based).
 *
 * @return The generator (possibly <code>null</code>).
 *
 * @see #setSeriesItemLabelGenerator(int, CategoryItemLabelGenerator)
 */"
"public CategorySeriesLabelGenerator getLegendItemURLGenerator() {
    return this.legendItemURLGenerator;
}","public void test7577() throws Throwable {
    BarRenderer barRenderer0 = new BarRenderer();
    CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = barRenderer0.getLegendItemURLGenerator();
    assertNull(categorySeriesLabelGenerator0);
}","/**
 * Returns the legend item URL generator.
 *
 * @return The URL generator (possibly <code>null</code>).
 *
 * @see #setLegendItemURLGenerator(CategorySeriesLabelGenerator)
 */"
"public void removeAnnotations() {
    this.foregroundAnnotations.clear();
    this.backgroundAnnotations.clear();
    notifyListeners(new RendererChangeEvent(this));
}","public void test7678() throws Throwable {
    BarRenderer barRenderer0 = new BarRenderer();
    barRenderer0.removeAnnotations();
    assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
}","/**
 * Removes all annotations and sends a {@link RendererChangeEvent}
 * to all registered listeners.
 *
 * @since 1.2.0
 */"
"public boolean getAutoPopulateSeriesFillPaint() {
    return this.autoPopulateSeriesFillPaint;
}","public void test7779() throws Throwable {
    StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer(true);
    stackedBarRenderer0.setBaseURLGenerator((CategoryURLGenerator) null);
    assertFalse(stackedBarRenderer0.getAutoPopulateSeriesFillPaint());
}","/**
 * Returns the flag that controls whether or not the series fill paint list
 * is automatically populated when {@link #lookupSeriesFillPaint(int)} is
 * called.
 *
 * @return A boolean.
 *
 * @since 1.0.6
 *
 * @see #setAutoPopulateSeriesFillPaint(boolean)
 */"
"public CategoryURLGenerator getBaseURLGenerator() {
    return this.baseURLGenerator;
}","public void test7880() throws Throwable {
    LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
    CategoryURLGenerator categoryURLGenerator0 = layeredBarRenderer0.getBaseURLGenerator();
    assertNull(categoryURLGenerator0);
}","/**
 * Returns the base item URL generator.
 *
 * @return The item URL generator.
 *
 * @see #setBaseURLGenerator(CategoryURLGenerator)
 */"
"public void drawOutline(Graphics2D g2, CategoryPlot plot, Rectangle2D dataArea) {
    plot.drawOutline(g2, dataArea);
}","public void test7981() throws Throwable {
    StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
    // Undeclared exception!
    try {
        statisticalBarRenderer0.drawOutline((Graphics2D) null, (CategoryPlot) null, (Rectangle2D) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jfree.chart.renderer.category.AbstractCategoryItemRenderer"", e);
    }
}","/**
 * Draws an outline for the data area.  The default implementation just
 * gets the plot to draw the outline, but some renderers will override this
 * behaviour.
 *
 * @param g2  the graphics device.
 * @param plot  the plot.
 * @param dataArea  the data area.
 */"
"public int hashCode() {
    int result = super.hashCode();
    return result;
}","public void test8082() throws Throwable {
    ScatterRenderer scatterRenderer0 = new ScatterRenderer();
    scatterRenderer0.hashCode();
}","/**
 * Returns a hash code for the renderer.
 *
 * @return The hash code.
 */"
"public int getPassCount() {
    return 1;
}","public void test8183() throws Throwable {
    BarRenderer barRenderer0 = new BarRenderer();
    int int0 = barRenderer0.getPassCount();
    assertEquals(1, int0);
}","/**
 * Returns the number of passes through the dataset required by the
 * renderer.  This method returns <code>1</code>, subclasses should
 * override if they need more passes.
 *
 * @return The pass count.
 */"
"public int getColumnCount() {
    return this.columnCount;
}","public void test8284() throws Throwable {
    GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
    int int0 = groupedStackedBarRenderer0.getColumnCount();
    assertEquals(0, int0);
}","/**
 * Returns the number of columns in the dataset.  This value is updated in
 * the {@link AbstractCategoryItemRenderer#initialise} method.
 *
 * @return The column count.
 */"
"public double getMaximumBarWidth() {
    return this.maximumBarWidth;
}","public void test8385() throws Throwable {
    BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
    boxAndWhiskerRenderer0.setLegendItemURLGenerator((CategorySeriesLabelGenerator) null);
    assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01);
}","/**
 * Returns the maximum bar width as a percentage of the available drawing
 * space.
 *
 * @return The maximum bar width.
 *
 * @see #setMaximumBarWidth(double)
 *
 * @since 1.0.10
 */"
"public Range findRangeBounds(CategoryDataset dataset) {
    return findRangeBounds(dataset, false);
}","public void test8486() throws Throwable {
    BarRenderer3D barRenderer3D0 = new BarRenderer3D(759.363, 0.0);
    Number[][] numberArray0 = new Number[9][1];
    DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
    Range range0 = barRenderer3D0.findRangeBounds(defaultIntervalCategoryDataset0);
    assertNull(range0);
}","/**
 * Returns the range of values the renderer requires to display all the
 * items from the specified dataset.
 *
 * @param dataset  the dataset (<code>null</code> permitted).
 *
 * @return The range (or <code>null</code> if the dataset is
 *         <code>null</code> or empty).
 */"
"protected CategoryAxis getDomainAxis(CategoryPlot plot, CategoryDataset dataset) {
    int datasetIndex = plot.indexOf(dataset);
    return plot.getDomainAxisForDataset(datasetIndex);
}","public void test8587() throws Throwable {
    CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
    DateAxis dateAxis0 = new DateAxis();
    CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
    double[][] doubleArray0 = new double[1][3];
    DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
    // Undeclared exception!
    try {
        categoryStepRenderer0.getDomainAxis(combinedRangeCategoryPlot0, defaultIntervalCategoryDataset0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Negative 'index'.
        //
        verifyException(""org.jfree.chart.plot.CategoryPlot"", e);
    }
}","/**
 * Returns the domain axis that is used for the specified dataset.
 *
 * @param plot  the plot (<code>null</code> not permitted).
 * @param dataset  the dataset (<code>null</code> not permitted).
 *
 * @return A domain axis.
 */"
"public double getBaseRadius() {
    return this.baseRadius;
}","public void test8688() throws Throwable {
    LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
    CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation(""1R_-?.w~e'"", lineAndShapeRenderer0.ZERO, (-1149.0), (double) lineAndShapeRenderer0.ZERO);
    lineAndShapeRenderer0.addAnnotation((CategoryAnnotation) categoryPointerAnnotation0);
    assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01);
}","/**
 * Returns the base radius.
 *
 * @return The base radius (in Java2D units).
 *
 * @see #setBaseRadius(double)
 */"
"public CategoryToolTipGenerator getBaseToolTipGenerator() {
    return this.baseToolTipGenerator;
}","public void test8789() throws Throwable {
    ScatterRenderer scatterRenderer0 = new ScatterRenderer();
    CategoryToolTipGenerator categoryToolTipGenerator0 = scatterRenderer0.getBaseToolTipGenerator();
    assertNull(categoryToolTipGenerator0);
}","/**
 * Returns the base tool tip generator (the ""layer 2"" generator).
 *
 * @return The tool tip generator (possibly <code>null</code>).
 *
 * @see #setBaseToolTipGenerator(CategoryToolTipGenerator)
 */"
"public boolean getAutoPopulateSeriesShape() {
    return this.autoPopulateSeriesShape;
}","public void test8890() throws Throwable {
    StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
    IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator();
    stackedBarRenderer3D0.setSeriesItemLabelGenerator(3, (CategoryItemLabelGenerator) intervalCategoryItemLabelGenerator0);
    assertTrue(stackedBarRenderer3D0.getAutoPopulateSeriesShape());
}","/**
 * Returns the flag that controls whether or not the series shape list is
 * automatically populated when {@link #lookupSeriesShape(int)} is called.
 *
 * @return A boolean.
 *
 * @since 1.0.6
 *
 * @see #setAutoPopulateSeriesShape(boolean)
 */"
