project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test0000,"public void test0000() throws Throwable {
    Day day0 = new Day();
    RegularTimePeriod regularTimePeriod0 = day0.previous();
    Class<Month> class0 = Month.class;
    TimeSeries timeSeries0 = new TimeSeries(day0, ""=wzUe FC9tegUK,&]d"", (String) null, class0);
    TimeSeries timeSeries1 = timeSeries0.createCopy(regularTimePeriod0, (RegularTimePeriod) day0);
    assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries1.getMaximumItemCount())"
project,0,test0001,"public void test0001() throws Throwable {
    Day day0 = new Day();
    RegularTimePeriod regularTimePeriod0 = day0.previous();
    Class<Month> class0 = Month.class;
    TimeSeries timeSeries0 = new TimeSeries(day0, ""=wzUe FC9tegUK,&]d"", (String) null, class0);
    TimeSeries timeSeries1 = timeSeries0.createCopy(regularTimePeriod0, (RegularTimePeriod) day0);
    assertEquals(""=wzUe FC9tegUK,&]d"", timeSeries1.getDomainDescription());
}",0,
project,0,test0002,"public void test0002() throws Throwable {
    Day day0 = new Day();
    RegularTimePeriod regularTimePeriod0 = day0.previous();
    Class<Month> class0 = Month.class;
    TimeSeries timeSeries0 = new TimeSeries(day0, ""=wzUe FC9tegUK,&]d"", (String) null, class0);
    TimeSeries timeSeries1 = timeSeries0.createCopy(regularTimePeriod0, (RegularTimePeriod) day0);
    assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries1.getMaximumItemAge())"
project,0,test0013,"public void test0013() throws Throwable {
    MockDate mockDate0 = new MockDate();
    TimeZone timeZone0 = TimeZone.getTimeZone(""yehcE"");
    Day day0 = new Day(mockDate0, timeZone0);
    RegularTimePeriod regularTimePeriod0 = day0.previous();
    TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
    timeSeries0.add(regularTimePeriod0, (Number) null);
    timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) null);
    timeSeries0.delete((RegularTimePeriod) day0);
    assertEquals(1, timeSeries0.getItemCount());
}",0,"assertEquals(0, timeSeries0.getItemCount())"
project,0,test0024,"public void test0024() throws Throwable {
    MockDate mockDate0 = new MockDate();
    TimeZone timeZone0 = TimeZone.getTimeZone(""yFneyFE"");
    Day day0 = new Day(mockDate0, timeZone0);
    RegularTimePeriod regularTimePeriod0 = day0.previous();
    TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
    timeSeries0.add(regularTimePeriod0, (Number) null);
    timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) null);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,
project,0,test0025,"public void test0025() throws Throwable {
    MockDate mockDate0 = new MockDate();
    TimeZone timeZone0 = TimeZone.getTimeZone(""yFneyFE"");
    Day day0 = new Day(mockDate0, timeZone0);
    RegularTimePeriod regularTimePeriod0 = day0.previous();
    TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
    timeSeries0.add(regularTimePeriod0, (Number) null);
    timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) null);
    timeSeries0.setMaximumItemAge(415L);
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}",0,assertNotNull(timeSeries0.getDomainDescription())
project,0,test0036,"public void test0036() throws Throwable {
    MockDate mockDate0 = new MockDate();
    TimeZone timeZone0 = TimeZone.getTimeZone(""yehcE"");
    Day day0 = new Day(mockDate0, timeZone0);
    RegularTimePeriod regularTimePeriod0 = day0.previous();
    TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
    timeSeries0.add(regularTimePeriod0, (Number) null);
    timeSeries0.addOrUpdate((RegularTimePeriod) day0, (-291.0));
    timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) null);
    assertEquals(2, timeSeries0.getItemCount());
}",0,"assertEquals(0, timeSeries0.getItemCount())"
project,0,test0047,"public void test0047() throws Throwable {
    MockDate mockDate0 = new MockDate((-507), (-507), 0);
    Quarter quarter0 = new Quarter(mockDate0);
    Class<Week> class0 = Week.class;
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""Requires start >= 0."", ""You are attempting to add an observation for "", class0);
    timeSeries0.setMaximumItemCount(Integer.MAX_VALUE);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries0.getMaximumItemCount())"
project,0,test0048,"public void test0048() throws Throwable {
    MockDate mockDate0 = new MockDate((-507), (-507), 0);
    Quarter quarter0 = new Quarter(mockDate0);
    Class<Week> class0 = Week.class;
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""Requires start >= 0."", ""You are attempting to add an observation for "", class0);
    timeSeries0.setMaximumItemCount(Integer.MAX_VALUE);
    assertEquals(""Requires start >= 0."", timeSeries0.getDomainDescription());
}",0,assertNotNull(timeSeries0.getDomainDescription())
project,0,test0049,"public void test0049() throws Throwable {
    MockDate mockDate0 = new MockDate((-507), (-507), 0);
    Quarter quarter0 = new Quarter(mockDate0);
    Class<Week> class0 = Week.class;
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""Requires start >= 0."", ""You are attempting to add an observation for "", class0);
    timeSeries0.setMaximumItemCount(Integer.MAX_VALUE);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries0.getMaximumItemAge())"
project,0,test00410,"public void test00410() throws Throwable {
    MockDate mockDate0 = new MockDate((-507), (-507), 0);
    Quarter quarter0 = new Quarter(mockDate0);
    Class<Week> class0 = Week.class;
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""Requires start >= 0."", ""You are attempting to add an observation for "", class0);
    timeSeries0.setMaximumItemCount(Integer.MAX_VALUE);
    assertEquals(""You are attempting to add an observation for "", timeSeries0.getRangeDescription());
}",0,assertNotNull(timeSeries0.getRangeDescription())
project,0,test00511,"public void test00511() throws Throwable {
    MockDate mockDate0 = new MockDate();
    Day day0 = new Day(mockDate0);
    Class<Hour> class0 = Hour.class;
    TimeSeries timeSeries0 = new TimeSeries(day0, """", ""org.jfree.data.time.TimeSeries"", class0);
    assertEquals("""", timeSeries0.getDomainDescription());
}",0,assertNotNull(timeSeries0.getDomainDescription())
project,0,test00512,"public void test00512() throws Throwable {
    MockDate mockDate0 = new MockDate();
    Day day0 = new Day(mockDate0);
    Class<Hour> class0 = Hour.class;
    TimeSeries timeSeries0 = new TimeSeries(day0, """", ""org.jfree.data.time.TimeSeries"", class0);
    timeSeries0.setDomainDescription((String) null);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries0.getMaximumItemAge())"
project,0,test00513,"public void test00513() throws Throwable {
    MockDate mockDate0 = new MockDate();
    Day day0 = new Day(mockDate0);
    Class<Hour> class0 = Hour.class;
    TimeSeries timeSeries0 = new TimeSeries(day0, """", ""org.jfree.data.time.TimeSeries"", class0);
    timeSeries0.setDomainDescription((String) null);
    assertEquals(""org.jfree.data.time.TimeSeries"", timeSeries0.getRangeDescription());
}",0,assertNotNull(timeSeries0.getRangeDescription())
project,0,test00514,"public void test00514() throws Throwable {
    MockDate mockDate0 = new MockDate();
    Day day0 = new Day(mockDate0);
    Class<Hour> class0 = Hour.class;
    TimeSeries timeSeries0 = new TimeSeries(day0, """", ""org.jfree.data.time.TimeSeries"", class0);
    timeSeries0.setDomainDescription((String) null);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries0.getMaximumItemCount())"
project,0,test00615,"public void test00615() throws Throwable {
    MockDate mockDate0 = new MockDate((-1), (-1), 2958418, (-1), 1376);
    Minute minute0 = new Minute(mockDate0);
    Day day0 = minute0.getDay();
    TimeSeries timeSeries0 = new TimeSeries(""WN"");
    timeSeries0.add((RegularTimePeriod) day0, (Number) 0, false);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries0.getMaximumItemCount())"
project,0,test00616,"public void test00616() throws Throwable {
    MockDate mockDate0 = new MockDate((-1), (-1), 2958418, (-1), 1376);
    Minute minute0 = new Minute(mockDate0);
    Day day0 = minute0.getDay();
    TimeSeries timeSeries0 = new TimeSeries(""WN"");
    timeSeries0.add((RegularTimePeriod) day0, (Number) 0, false);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries0.getMaximumItemAge())"
project,0,test00617,"public void test00617() throws Throwable {
    MockDate mockDate0 = new MockDate((-1), (-1), 2958418, (-1), 1376);
    Minute minute0 = new Minute(mockDate0);
    Day day0 = minute0.getDay();
    TimeSeries timeSeries0 = new TimeSeries(""WN"");
    timeSeries0.add((RegularTimePeriod) day0, (Number) 0, false);
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}",0,assertNotNull(timeSeries0.getDomainDescription())
project,0,test00618,"public void test00618() throws Throwable {
    MockDate mockDate0 = new MockDate((-1), (-1), 2958418, (-1), 1376);
    Minute minute0 = new Minute(mockDate0);
    Day day0 = minute0.getDay();
    TimeSeries timeSeries0 = new TimeSeries(""WN"");
    timeSeries0.add((RegularTimePeriod) day0, (Number) 0, false);
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}",0,assertNotNull(timeSeries0.getRangeDescription())
project,0,test00719,"public void test00719() throws Throwable {
    MockDate mockDate0 = new MockDate(0, 45, 0, 1525, 1525, 1525);
    Millisecond millisecond0 = new Millisecond(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(millisecond0);
    Second second0 = millisecond0.getSecond();
    timeSeries0.addOrUpdate((RegularTimePeriod) second0, 0.0);
    timeSeries0.update(0, (Number) 0);
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}",0,assertNotNull(timeSeries0.getRangeDescription())
project,0,test00720,"public void test00720() throws Throwable {
    MockDate mockDate0 = new MockDate(0, 45, 0, 1525, 1525, 1525);
    Millisecond millisecond0 = new Millisecond(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(millisecond0);
    Second second0 = millisecond0.getSecond();
    timeSeries0.addOrUpdate((RegularTimePeriod) second0, 0.0);
    timeSeries0.update(0, (Number) 0);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries0.getMaximumItemAge())"
project,0,test00721,"public void test00721() throws Throwable {
    MockDate mockDate0 = new MockDate(0, 45, 0, 1525, 1525, 1525);
    Millisecond millisecond0 = new Millisecond(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(millisecond0);
    Second second0 = millisecond0.getSecond();
    timeSeries0.addOrUpdate((RegularTimePeriod) second0, 0.0);
    timeSeries0.update(0, (Number) 0);
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}",0,assertNotNull(timeSeries0.getDomainDescription())
project,0,test00722,"public void test00722() throws Throwable {
    MockDate mockDate0 = new MockDate(0, 45, 0, 1525, 1525, 1525);
    Millisecond millisecond0 = new Millisecond(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(millisecond0);
    Second second0 = millisecond0.getSecond();
    timeSeries0.addOrUpdate((RegularTimePeriod) second0, 0.0);
    timeSeries0.update(0, (Number) 0);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries0.getMaximumItemCount())"
project,0,test00823,"public void test00823() throws Throwable {
    MockDate mockDate0 = new MockDate(0, 45, 0, 0, 0, 0);
    Millisecond millisecond0 = new Millisecond(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(millisecond0);
    boolean boolean0 = timeSeries0.equals(timeSeries0);
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}",0,assertNotNull(timeSeries0.getDomainDescription())
project,0,test00824,"public void test00824() throws Throwable {
    MockDate mockDate0 = new MockDate(0, 45, 0, 0, 0, 0);
    Millisecond millisecond0 = new Millisecond(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(millisecond0);
    boolean boolean0 = timeSeries0.equals(timeSeries0);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries0.getMaximumItemAge())"
project,0,test00825,"public void test00825() throws Throwable {
    MockDate mockDate0 = new MockDate(0, 45, 0, 0, 0, 0);
    Millisecond millisecond0 = new Millisecond(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(millisecond0);
    boolean boolean0 = timeSeries0.equals(timeSeries0);
    assertTrue(boolean0);
}",0,
project,0,test00826,"public void test00826() throws Throwable {
    MockDate mockDate0 = new MockDate(0, 45, 0, 0, 0, 0);
    Millisecond millisecond0 = new Millisecond(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(millisecond0);
    boolean boolean0 = timeSeries0.equals(timeSeries0);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries0.getMaximumItemCount())"
project,0,test00827,"public void test00827() throws Throwable {
    MockDate mockDate0 = new MockDate(0, 45, 0, 0, 0, 0);
    Millisecond millisecond0 = new Millisecond(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(millisecond0);
    boolean boolean0 = timeSeries0.equals(timeSeries0);
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}",0,assertNotNull(timeSeries0.getRangeDescription())
project,0,test00928,"public void test00928() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.add((RegularTimePeriod) day0, 882.599950745);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(1, timeSeries0.getMaximumItemCount())"
project,0,test00929,"public void test00929() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.add((RegularTimePeriod) day0, 882.599950745);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(1, timeSeries0.getMaximumItemAge())"
project,0,test00930,"public void test00930() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.add((RegularTimePeriod) day0, 882.599950745);
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}",0,assertNotNull(timeSeries0.getDomainDescription())
project,0,test00931,"public void test00931() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.add((RegularTimePeriod) day0, 882.599950745);
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}",0,assertNotNull(timeSeries0.getRangeDescription())
project,0,test01032,"public void test01032() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.add((RegularTimePeriod) day0, 718.0, false);
    Number number0 = timeSeries0.getValue((RegularTimePeriod) day0);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(1, timeSeries0.getMaximumItemAge())"
project,0,test01033,"public void test01033() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.add((RegularTimePeriod) day0, 718.0, false);
    Number number0 = timeSeries0.getValue((RegularTimePeriod) day0);
    assertEquals(718.0, number0);
}",0,
project,0,test01034,"public void test01034() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.add((RegularTimePeriod) day0, 718.0, false);
    Number number0 = timeSeries0.getValue((RegularTimePeriod) day0);
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}",0,assertNotNull(timeSeries0.getRangeDescription())
project,0,test01036,"public void test01036() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.add((RegularTimePeriod) day0, 718.0, false);
    Number number0 = timeSeries0.getValue((RegularTimePeriod) day0);
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}",0,assertNotNull(timeSeries0.getDomainDescription())
project,0,test01037,"public void test01037() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.add((RegularTimePeriod) day0, 718.0, false);
    Number number0 = timeSeries0.getValue((RegularTimePeriod) day0);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(1, timeSeries0.getMaximumItemCount())"
project,0,test01138,"public void test01138() throws Throwable {
    Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
    TimeSeries timeSeries0 = new TimeSeries(""java.util.TimeZone"", ""java.util.TimeZone"", ""java.util.TimeZone"", class0);
    timeSeries0.getTimePeriodClass();
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries0.getMaximumItemAge())"
project,0,test01139,"public void test01139() throws Throwable {
    Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
    TimeSeries timeSeries0 = new TimeSeries(""java.util.TimeZone"", ""java.util.TimeZone"", ""java.util.TimeZone"", class0);
    timeSeries0.getTimePeriodClass();
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries0.getMaximumItemCount())"
project,0,test01140,"public void test01140() throws Throwable {
    Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
    TimeSeries timeSeries0 = new TimeSeries(""java.util.TimeZone"", ""java.util.TimeZone"", ""java.util.TimeZone"", class0);
    timeSeries0.getTimePeriodClass();
    assertEquals(""java.util.TimeZone"", timeSeries0.getRangeDescription());
}",0,assertNotNull(timeSeries0.getRangeDescription())
project,0,test01141,"public void test01141() throws Throwable {
    Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
    TimeSeries timeSeries0 = new TimeSeries(""java.util.TimeZone"", ""java.util.TimeZone"", ""java.util.TimeZone"", class0);
    timeSeries0.getTimePeriodClass();
    assertEquals(""java.util.TimeZone"", timeSeries0.getDomainDescription());
}",0,assertNotNull(timeSeries0.getDomainDescription())
project,0,test01242,"public void test01242() throws Throwable {
    MockDate mockDate0 = new MockDate();
    TimeZone timeZone0 = TimeZone.getTimeZone(""yehcE"");
    Day day0 = new Day(mockDate0, timeZone0);
    RegularTimePeriod regularTimePeriod0 = day0.previous();
    TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
    timeSeries0.add(regularTimePeriod0, (Number) null);
    timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) null);
    assertEquals(2, timeSeries0.getItemCount());
}",0,"assertEquals(0, timeSeries0.getItemCount())"
project,0,test01243,"public void test01243() throws Throwable {
    MockDate mockDate0 = new MockDate();
    TimeZone timeZone0 = TimeZone.getTimeZone(""yehcE"");
    Day day0 = new Day(mockDate0, timeZone0);
    RegularTimePeriod regularTimePeriod0 = day0.previous();
    TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
    timeSeries0.add(regularTimePeriod0, (Number) null);
    timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) null);
    timeSeries0.getTimePeriod(1);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries0.getMaximumItemCount())"
project,0,test01344,"public void test01344() throws Throwable {
    Minute minute0 = new Minute();
    Class<RegularTimePeriod> class0 = RegularTimePeriod.class;
    TimeSeries timeSeries0 = new TimeSeries(minute0, class0);
    String string0 = timeSeries0.getRangeDescription();
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}",0,assertNotNull(timeSeries0.getDomainDescription())
project,0,test01345,"public void test01345() throws Throwable {
    Minute minute0 = new Minute();
    Class<RegularTimePeriod> class0 = RegularTimePeriod.class;
    TimeSeries timeSeries0 = new TimeSeries(minute0, class0);
    String string0 = timeSeries0.getRangeDescription();
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries0.getMaximumItemAge())"
project,0,test01346,"public void test01346() throws Throwable {
    Minute minute0 = new Minute();
    Class<RegularTimePeriod> class0 = RegularTimePeriod.class;
    TimeSeries timeSeries0 = new TimeSeries(minute0, class0);
    String string0 = timeSeries0.getRangeDescription();
    assertEquals(""Value"", string0);
}",0,
project,0,test01347,"public void test01347() throws Throwable {
    Minute minute0 = new Minute();
    Class<RegularTimePeriod> class0 = RegularTimePeriod.class;
    TimeSeries timeSeries0 = new TimeSeries(minute0, class0);
    String string0 = timeSeries0.getRangeDescription();
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries0.getMaximumItemCount())"
project,0,test01448,"public void test01448() throws Throwable {
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""");
    ParsePosition parsePosition0 = new ParsePosition((-1829));
    Date date0 = mockSimpleDateFormat0.parse("""", parsePosition0);
    Day day0 = new Day(date0);
    Class<TimeSeries> class0 = TimeSeries.class;
    TimeSeries timeSeries0 = new TimeSeries(day0, """", """", class0);
    String string0 = timeSeries0.getRangeDescription();
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries0.getMaximumItemCount())"
project,0,test01449,"public void test01449() throws Throwable {
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""");
    ParsePosition parsePosition0 = new ParsePosition((-1829));
    Date date0 = mockSimpleDateFormat0.parse("""", parsePosition0);
    Day day0 = new Day(date0);
    Class<TimeSeries> class0 = TimeSeries.class;
    TimeSeries timeSeries0 = new TimeSeries(day0, """", """", class0);
    String string0 = timeSeries0.getRangeDescription();
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries0.getMaximumItemAge())"
project,0,test01450,"public void test01450() throws Throwable {
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""");
    ParsePosition parsePosition0 = new ParsePosition((-1829));
    Date date0 = mockSimpleDateFormat0.parse("""", parsePosition0);
    Day day0 = new Day(date0);
    Class<TimeSeries> class0 = TimeSeries.class;
    TimeSeries timeSeries0 = new TimeSeries(day0, """", """", class0);
    String string0 = timeSeries0.getRangeDescription();
    assertEquals("""", timeSeries0.getDomainDescription());
}",0,
project,0,test01451,"public void test01451() throws Throwable {
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""");
    ParsePosition parsePosition0 = new ParsePosition((-1829));
    Date date0 = mockSimpleDateFormat0.parse("""", parsePosition0);
    Day day0 = new Day(date0);
    Class<TimeSeries> class0 = TimeSeries.class;
    TimeSeries timeSeries0 = new TimeSeries(day0, """", """", class0);
    String string0 = timeSeries0.getRangeDescription();
    assertEquals("""", string0);
}",0,assertNotNull(string0)
project,0,test01552,"public void test01552() throws Throwable {
    MockDate mockDate0 = new MockDate();
    TimeZone timeZone0 = TimeZone.getTimeZone(""yehcE"");
    Day day0 = new Day(mockDate0, timeZone0);
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.add((RegularTimePeriod) day0, (Number) null);
    timeSeries0.getNextTimePeriod();
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries0.getMaximumItemCount())"
project,0,test01553,"public void test01553() throws Throwable {
    MockDate mockDate0 = new MockDate();
    TimeZone timeZone0 = TimeZone.getTimeZone(""yehcE"");
    Day day0 = new Day(mockDate0, timeZone0);
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.add((RegularTimePeriod) day0, (Number) null);
    timeSeries0.getNextTimePeriod();
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}",0,assertNotNull(timeSeries0.getRangeDescription())
project,0,test01554,"public void test01554() throws Throwable {
    MockDate mockDate0 = new MockDate();
    TimeZone timeZone0 = TimeZone.getTimeZone(""yehcE"");
    Day day0 = new Day(mockDate0, timeZone0);
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.add((RegularTimePeriod) day0, (Number) null);
    timeSeries0.getNextTimePeriod();
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries0.getMaximumItemAge())"
project,0,test01555,"public void test01555() throws Throwable {
    MockDate mockDate0 = new MockDate();
    TimeZone timeZone0 = TimeZone.getTimeZone(""yehcE"");
    Day day0 = new Day(mockDate0, timeZone0);
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.add((RegularTimePeriod) day0, (Number) null);
    timeSeries0.getNextTimePeriod();
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}",0,assertNotNull(timeSeries0.getDomainDescription())
project,0,test01656,"public void test01656() throws Throwable {
    Class<String> class0 = String.class;
    Millisecond millisecond0 = new Millisecond();
    TimeSeries timeSeries0 = new TimeSeries(millisecond0, ""-)OJT/."", ""-)OJT/."", class0);
    timeSeries0.setMaximumItemCount(0);
    int int0 = timeSeries0.getMaximumItemCount();
    assertEquals(0, int0);
}",0,
project,0,test01757,"public void test01757() throws Throwable {
    Day day0 = new Day();
    Class<Millisecond> class0 = Millisecond.class;
    TimeSeries timeSeries0 = new TimeSeries(day0, class0);
    timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) null);
    int int0 = timeSeries0.getItemCount();
    assertEquals(1, int0);
}",0,"assertEquals(1, int0)"
project,0,test01858,"public void test01858() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.add((RegularTimePeriod) day0, 718.0, false);
    timeSeries0.getIndex(day0);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries0.getMaximumItemCount())"
project,0,test01859,"public void test01859() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.add((RegularTimePeriod) day0, 718.0, false);
    timeSeries0.getIndex(day0);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries0.getMaximumItemAge())"
project,0,test01860,"public void test01860() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.add((RegularTimePeriod) day0, 718.0, false);
    timeSeries0.getIndex(day0);
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}",0,assertNotNull(timeSeries0.getDomainDescription())
project,0,test01861,"public void test01861() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.add((RegularTimePeriod) day0, 718.0, false);
    timeSeries0.getIndex(day0);
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}",0,assertNotNull(timeSeries0.getRangeDescription())
project,0,test01962,"public void test01962() throws Throwable {
    MockDate mockDate0 = new MockDate();
    TimeZone timeZone0 = TimeZone.getTimeZone(""yehcE"");
    Day day0 = new Day(mockDate0, timeZone0);
    RegularTimePeriod regularTimePeriod0 = day0.previous();
    TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
    timeSeries0.add(regularTimePeriod0, (Number) null);
    timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) null);
    int int0 = timeSeries0.getIndex(day0);
    assertEquals(2, timeSeries0.getItemCount());
}",0,"assertEquals(0, timeSeries0.getItemCount())"
project,0,test01963,"public void test01963() throws Throwable {
    MockDate mockDate0 = new MockDate();
    TimeZone timeZone0 = TimeZone.getTimeZone(""yehcE"");
    Day day0 = new Day(mockDate0, timeZone0);
    RegularTimePeriod regularTimePeriod0 = day0.previous();
    TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
    timeSeries0.add(regularTimePeriod0, (Number) null);
    timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) null);
    int int0 = timeSeries0.getIndex(day0);
    assertEquals(1, int0);
}",0,"assertEquals(0, int0)"
project,0,test02064,"public void test02064() throws Throwable {
    Month month0 = new Month();
    Class<Year> class0 = Year.class;
    TimeSeries timeSeries0 = new TimeSeries(month0, """", """", class0);
    String string0 = timeSeries0.getDomainDescription();
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries0.getMaximumItemCount())"
project,0,test02065,"public void test02065() throws Throwable {
    Month month0 = new Month();
    Class<Year> class0 = Year.class;
    TimeSeries timeSeries0 = new TimeSeries(month0, """", """", class0);
    String string0 = timeSeries0.getDomainDescription();
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries0.getMaximumItemAge())"
project,0,test02066,"public void test02066() throws Throwable {
    Month month0 = new Month();
    Class<Year> class0 = Year.class;
    TimeSeries timeSeries0 = new TimeSeries(month0, """", """", class0);
    String string0 = timeSeries0.getDomainDescription();
    assertEquals("""", string0);
}",0,
project,0,test02067,"public void test02067() throws Throwable {
    Month month0 = new Month();
    Class<Year> class0 = Year.class;
    TimeSeries timeSeries0 = new TimeSeries(month0, """", """", class0);
    String string0 = timeSeries0.getDomainDescription();
    assertEquals("""", timeSeries0.getRangeDescription());
}",0,
project,0,test02168,"public void test02168() throws Throwable {
    MockDate mockDate0 = new MockDate(0, 45, 0, 1525, 1525, 1525);
    Millisecond millisecond0 = new Millisecond(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(millisecond0);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,
project,0,test02169,"public void test02169() throws Throwable {
    MockDate mockDate0 = new MockDate(0, 45, 0, 1525, 1525, 1525);
    Millisecond millisecond0 = new Millisecond(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(millisecond0);
    timeSeries0.setMaximumItemAge(0L);
    timeSeries0.createCopy((RegularTimePeriod) millisecond0, (RegularTimePeriod) millisecond0);
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}",0,assertNotNull(timeSeries0.getRangeDescription())
project,0,test02270,"public void test02270() throws Throwable {
    MockDate mockDate0 = new MockDate();
    TimeZone timeZone0 = TimeZone.getTimeZone(""yehcE"");
    Day day0 = new Day(mockDate0, timeZone0);
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.add((RegularTimePeriod) day0, (Number) null);
    timeSeries0.createCopy((RegularTimePeriod) day0, (RegularTimePeriod) day0);
    assertEquals(1, timeSeries0.getItemCount());
}",0,"assertEquals(0, timeSeries0.getItemCount())"
project,0,test02371,"public void test02371() throws Throwable {
    Class<String> class0 = String.class;
    Millisecond millisecond0 = new Millisecond();
    TimeSeries timeSeries0 = new TimeSeries(millisecond0, ""-)OJT/."", ""-)OJT/."", class0);
    timeSeries0.setMaximumItemCount(0);
    timeSeries0.createCopy(0, 999);
    assertEquals(0, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(1, timeSeries0.getMaximumItemCount())"
project,0,test02473,"public void test02473() throws Throwable {
    MockDate mockDate0 = new MockDate(0, 45, 0, 1525, 1525, 1525);
    Millisecond millisecond0 = new Millisecond(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(millisecond0);
    timeSeries0.setMaximumItemAge(0L);
    TimeSeries timeSeries1 = timeSeries0.createCopy(0, 2958489);
    assertNotSame(timeSeries0, timeSeries1);
}",1,
project,0,test02574,"public void test02574() throws Throwable {
    MockDate mockDate0 = new MockDate(0, 45, 0, 1525, 1525, 1525);
    Millisecond millisecond0 = new Millisecond(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(millisecond0);
    timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, (-380.28592));
    Second second0 = millisecond0.getSecond();
    timeSeries0.addOrUpdate((RegularTimePeriod) second0, 0.0);
    assertEquals(1, timeSeries0.getItemCount());
}",0,"assertEquals(1, timeSeries0.getItemCount())"
project,0,test02675,"public void test02675() throws Throwable {
    Class<String> class0 = String.class;
    TimeSeries timeSeries0 = new TimeSeries(""b"", """", ""b"", class0);
    // Undeclared exception!
    try {
        timeSeries0.update((RegularTimePeriod) null, (Number) 23);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'period' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeriesDataItem"", e);
    }
}",0,
project,0,test02776,"public void test02776() throws Throwable {
    MockDate mockDate0 = new MockDate(0, 45, 0, 1525, 1525, 1525);
    Millisecond millisecond0 = new Millisecond(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(millisecond0);
    Stack<Millisecond> stack0 = new Stack<Millisecond>();
    timeSeries0.data = (List) stack0;
    // Undeclared exception!
    try {
        timeSeries0.update(445, (Number) 0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // Array index out of range: 445
        //
        verifyException(""java.util.Vector"", e);
    }
}",0,
project,0,test02877,"public void test02877() throws Throwable {
    Class<String> class0 = String.class;
    Millisecond millisecond0 = new Millisecond();
    TimeSeries timeSeries0 = new TimeSeries(millisecond0, ""-)OJT/."", ""-)OJT/."", class0);
    // Undeclared exception!
    try {
        timeSeries0.removeAgedItems((long) 0, true);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}",0,
project,0,test02978,"public void test02978() throws Throwable {
    MockDate mockDate0 = new MockDate((-507), (-507), 0);
    Quarter quarter0 = new Quarter(mockDate0);
    Class<Week> class0 = Week.class;
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""Requires start >= 0."", ""You are attempting to add an observation for "", class0);
    // Undeclared exception!
    try {
        timeSeries0.getValue((-279));
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test03079,"public void test03079() throws Throwable {
    MockDate mockDate0 = new MockDate(45, 0, 0, 1525, 45);
    Millisecond millisecond0 = new Millisecond(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(millisecond0);
    Second second0 = millisecond0.getSecond();
    timeSeries0.addOrUpdate((RegularTimePeriod) second0, (double) 0);
    TimeSeries timeSeries1 = (TimeSeries) timeSeries0.clone();
    timeSeries1.data = null;
    // Undeclared exception!
    try {
        timeSeries1.getTimePeriodsUniqueToOtherSeries(timeSeries0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.Collections"", e);
    }
}",0,
project,0,test03180,"public void test03180() throws Throwable {
    Quarter quarter0 = new Quarter();
    Class<TimeSeries> class0 = TimeSeries.class;
    TimeSeries timeSeries0 = new TimeSeries(quarter0, class0);
    // Undeclared exception!
    try {
        timeSeries0.getTimePeriod((-161));
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test03281,"public void test03281() throws Throwable {
    Minute minute0 = new Minute();
    TimeSeries timeSeries0 = new TimeSeries(minute0);
    LinkedList<Minute> linkedList0 = new LinkedList<Minute>();
    timeSeries0.data = (List) linkedList0;
    // Undeclared exception!
    try {
        timeSeries0.getNextTimePeriod();
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: -1, Size: 0
        //
        verifyException(""java.util.LinkedList"", e);
    }
}",0,
project,0,test03382,"public void test03382() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofHours(0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
    Date date0 = mockGregorianCalendar0.getGregorianChange();
    Month month0 = new Month(date0);
    Class<Hour> class0 = Hour.class;
    TimeSeries timeSeries0 = new TimeSeries(month0, """", """", class0);
    // Undeclared exception!
    try {
        timeSeries0.getDataItem((RegularTimePeriod) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'period' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}",0,
project,0,test03483,"public void test03483() throws Throwable {
    Integer integer0 = JLayeredPane.DEFAULT_LAYER;
    Class<Minute> class0 = Minute.class;
    TimeSeries timeSeries0 = new TimeSeries(integer0, """", ""^"", class0);
    // Undeclared exception!
    try {
        timeSeries0.getDataItem((-1));
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test03584,"public void test03584() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    // Undeclared exception!
    try {
        timeSeries0.delete((RegularTimePeriod) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'period' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}",0,
project,0,test03685,"public void test03685() throws Throwable {
    Minute minute0 = new Minute();
    Class<Second> class0 = Second.class;
    TimeSeries timeSeries0 = new TimeSeries(minute0, class0);
    // Undeclared exception!
    try {
        timeSeries0.delete((-963), 970);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",1,
project,0,test03786,"public void test03786() throws Throwable {
    MockDate mockDate0 = new MockDate((-4654));
    SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(serialDate0);
    // Undeclared exception!
    try {
        timeSeries0.addOrUpdate((RegularTimePeriod) null, (double) 2958465);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'period' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}",0,
project,0,test03887,"public void test03887() throws Throwable {
    Class<String> class0 = String.class;
    Millisecond millisecond0 = new Millisecond();
    TimeSeries timeSeries0 = new TimeSeries(millisecond0, ""-)OJT/."", ""-)OJT/."", class0);
    // Undeclared exception!
    try {
        timeSeries0.addAndOrUpdate((TimeSeries) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}",0,
project,0,test03988,"public void test03988() throws Throwable {
    MockDate mockDate0 = new MockDate(0, 0, 0, 0, 0);
    TimeZone timeZone0 = TimeZone.getDefault();
    Quarter quarter0 = new Quarter(mockDate0, timeZone0);
    TimeSeries timeSeries0 = new TimeSeries(quarter0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) quarter0, (Number) 1);
    // Undeclared exception!
    try {
        timeSeries0.add(timeSeriesDataItem0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // You are trying to add data where the time period class is org.jfree.data.time.Quarter, but the TimeSeries is expecting an instance of org.jfree.data.time.Day.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}",0,
project,0,test04089,"public void test04089() throws Throwable {
    Month month0 = new Month(2, (-4399));
    Class<Week> class0 = Week.class;
    TimeSeries timeSeries0 = new TimeSeries(month0, ""BdJ{+$"", ""W~B4\""g?V.YjTJ@!}F7"", class0);
    // Undeclared exception!
    try {
        timeSeries0.add((TimeSeriesDataItem) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'item' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}",1,
project,0,test04190,"public void test04190() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
    Class<Millisecond> class0 = Millisecond.class;
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, (String) null, ""1\""T\""ptclv%"", class0);
    Integer integer0 = new Integer((-24));
    // Undeclared exception!
    try {
        timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) integer0, false);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // You are trying to add data where the time period class is org.jfree.data.time.FixedMillisecond, but the TimeSeries is expecting an instance of org.jfree.data.time.Millisecond.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}",0,
project,0,test04291,"public void test04291() throws Throwable {
    Minute minute0 = new Minute();
    TimeSeries timeSeries0 = new TimeSeries(minute0);
    // Undeclared exception!
    try {
        timeSeries0.add((RegularTimePeriod) minute0, (Number) 59);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // You are trying to add data where the time period class is org.jfree.data.time.Minute, but the TimeSeries is expecting an instance of org.jfree.data.time.Day.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}",1,
project,0,test04392,"public void test04392() throws Throwable {
    SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-1.0), Double.POSITIVE_INFINITY);
    Class<Day> class0 = Day.class;
    TimeSeries timeSeries0 = new TimeSeries(simpleHistogramBin0, class0);
    Short short0 = new Short((short) 0);
    // Undeclared exception!
    try {
        timeSeries0.add((RegularTimePeriod) null, (Number) short0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'period' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeriesDataItem"", e);
    }
}",1,
project,0,test04493,"public void test04493() throws Throwable {
    TimeSeries timeSeries0 = new TimeSeries(""vX{{15"");
    // Undeclared exception!
    try {
        timeSeries0.add((RegularTimePeriod) null, 0.0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'period' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeriesDataItem"", e);
    }
}",1,
project,0,test04594,"public void test04594() throws Throwable {
    Class<Year> class0 = Year.class;
    TimeSeries timeSeries0 = null;
    try {
        timeSeries0 = new TimeSeries((Comparable) null, ""Requires start on or before end."", ""You are trying to add data where the time period class "", class0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'key' argument.
        //
        verifyException(""org.jfree.data.general.Series"", e);
    }
}",1,
project,0,test04695,"public void test04695() throws Throwable {
    Class<Panel> class0 = Panel.class;
    TimeSeries timeSeries0 = null;
    try {
        timeSeries0 = new TimeSeries((Comparable) null, class0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'key' argument.
        //
        verifyException(""org.jfree.data.general.Series"", e);
    }
}",1,
project,0,test04796,"public void test04796() throws Throwable {
    TimeSeries timeSeries0 = null;
    try {
        timeSeries0 = new TimeSeries((Comparable) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'key' argument.
        //
        verifyException(""org.jfree.data.general.Series"", e);
    }
}",1,
project,0,test04897,"public void test04897() throws Throwable {
    MockDate mockDate0 = new MockDate(0, 45, 0, 1525, 1525, 1525);
    Millisecond millisecond0 = new Millisecond(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(millisecond0);
    Second second0 = millisecond0.getSecond();
    timeSeries0.addOrUpdate((RegularTimePeriod) second0, 0.0);
    // Undeclared exception!
    try {
        timeSeries0.createCopy(45, 640);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 45, Size: 1
        //
        verifyException(""java.util.ArrayList"", e);
    }
}",1,
project,0,test04998,"public void test04998() throws Throwable {
    MockDate mockDate0 = new MockDate(1293, 716, 917);
    Minute minute0 = new Minute(mockDate0);
    Day day0 = minute0.getDay();
    Class<Quarter> class0 = Quarter.class;
    TimeSeries timeSeries0 = new TimeSeries(day0, class0);
    // Undeclared exception!
    try {
        timeSeries0.createCopy(1293, 439);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Requires start <= end.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}",0,
project,0,test05099,"public void test05099() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    // Undeclared exception!
    try {
        timeSeries0.delete(2958465, 2958465);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 2958465, Size: 0
        //
        verifyException(""java.util.ArrayList"", e);
    }
}",1,
project,0,test051100,"public void test051100() throws Throwable {
    MockDate mockDate0 = new MockDate();
    TimeZone timeZone0 = TimeZone.getTimeZone(""yehcE"");
    Day day0 = new Day(mockDate0, timeZone0);
    RegularTimePeriod regularTimePeriod0 = day0.previous();
    TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
    timeSeries0.add(regularTimePeriod0, (Number) null);
    timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) null);
    timeSeries0.removeAgedItems(false);
    assertEquals(2, timeSeries0.getItemCount());
}",0,"assertEquals(0, timeSeries0.getItemCount())"
project,0,test052101,"public void test052101() throws Throwable {
    Minute minute0 = new Minute();
    Class<String> class0 = String.class;
    TimeSeries timeSeries0 = new TimeSeries(minute0, ""Null 'serialDate' argument."", (String) null, class0);
    timeSeries0.removeAgedItems(false);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(1, timeSeries0.getMaximumItemAge())"
project,0,test052102,"public void test052102() throws Throwable {
    Minute minute0 = new Minute();
    Class<String> class0 = String.class;
    TimeSeries timeSeries0 = new TimeSeries(minute0, ""Null 'serialDate' argument."", (String) null, class0);
    timeSeries0.removeAgedItems(false);
    assertEquals(""Null 'serialDate' argument."", timeSeries0.getDomainDescription());
}",0,
project,0,test052103,"public void test052103() throws Throwable {
    Minute minute0 = new Minute();
    Class<String> class0 = String.class;
    TimeSeries timeSeries0 = new TimeSeries(minute0, ""Null 'serialDate' argument."", (String) null, class0);
    timeSeries0.removeAgedItems(false);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries0.getMaximumItemCount())"
project,0,test053104,"public void test053104() throws Throwable {
    Class<String> class0 = String.class;
    Millisecond millisecond0 = new Millisecond();
    TimeSeries timeSeries0 = new TimeSeries(millisecond0, ""-)OJT/."", ""-)OJT/."", class0);
    timeSeries0.setMaximumItemCount(0);
    timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, (Number) 999);
    assertEquals(0, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries0.getMaximumItemCount())"
project,0,test054105,"public void test054105() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond(12L);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) fixedMillisecond0, (-1035.328606761431));
    Class<Integer> class0 = Integer.class;
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0, ""Negative 'maximum' argument."", """", class0);
    // Undeclared exception!
    try {
        timeSeries0.add(timeSeriesDataItem0, true);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // You are trying to add data where the time period class is org.jfree.data.time.FixedMillisecond, but the TimeSeries is expecting an instance of java.lang.Integer.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}",1,
project,0,test055106,"public void test055106() throws Throwable {
    TimeSeries timeSeries0 = new TimeSeries(""h"");
    // Undeclared exception!
    try {
        timeSeries0.getIndex((RegularTimePeriod) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'period' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}",0,
project,0,test056107,"public void test056107() throws Throwable {
    Clock clock0 = MockClock.systemUTC();
    Instant instant0 = MockInstant.now(clock0);
    Date date0 = Date.from(instant0);
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    timeSeries0.getIndex(fixedMillisecond0);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries0.getMaximumItemCount())"
project,0,test056108,"public void test056108() throws Throwable {
    Clock clock0 = MockClock.systemUTC();
    Instant instant0 = MockInstant.now(clock0);
    Date date0 = Date.from(instant0);
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    timeSeries0.getIndex(fixedMillisecond0);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries0.getMaximumItemAge())"
project,0,test056109,"public void test056109() throws Throwable {
    Clock clock0 = MockClock.systemUTC();
    Instant instant0 = MockInstant.now(clock0);
    Date date0 = Date.from(instant0);
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    timeSeries0.getIndex(fixedMillisecond0);
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}",0,assertNotNull(timeSeries0.getRangeDescription())
project,0,test056110,"public void test056110() throws Throwable {
    Clock clock0 = MockClock.systemUTC();
    Instant instant0 = MockInstant.now(clock0);
    Date date0 = Date.from(instant0);
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    timeSeries0.getIndex(fixedMillisecond0);
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}",0,assertNotNull(timeSeries0.getDomainDescription())
project,0,test057111,"public void test057111() throws Throwable {
    Class<Second> class0 = Second.class;
    TimeSeries timeSeries0 = new TimeSeries(""w[I"", ""w[I"", (String) null, class0);
    timeSeries0.getTimePeriodClass();
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries0.getMaximumItemAge())"
project,0,test057112,"public void test057112() throws Throwable {
    Class<Second> class0 = Second.class;
    TimeSeries timeSeries0 = new TimeSeries(""w[I"", ""w[I"", (String) null, class0);
    timeSeries0.getTimePeriodClass();
    assertEquals(""w[I"", timeSeries0.getDomainDescription());
}",0,assertNotNull(timeSeries0.getDomainDescription())
project,0,test057113,"public void test057113() throws Throwable {
    Class<Second> class0 = Second.class;
    TimeSeries timeSeries0 = new TimeSeries(""w[I"", ""w[I"", (String) null, class0);
    timeSeries0.getTimePeriodClass();
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries0.getMaximumItemCount())"
project,0,test058114,"public void test058114() throws Throwable {
    Class<String> class0 = String.class;
    Millisecond millisecond0 = new Millisecond();
    TimeSeries timeSeries0 = new TimeSeries(millisecond0, ""-)OJT/."", ""-)OJT/."", class0);
    int int0 = timeSeries0.getMaximumItemCount();
    assertEquals(""-)OJT/."", timeSeries0.getDomainDescription());
}",0,
project,0,test058115,"public void test058115() throws Throwable {
    Class<String> class0 = String.class;
    Millisecond millisecond0 = new Millisecond();
    TimeSeries timeSeries0 = new TimeSeries(millisecond0, ""-)OJT/."", ""-)OJT/."", class0);
    int int0 = timeSeries0.getMaximumItemCount();
    assertEquals(""-)OJT/."", timeSeries0.getRangeDescription());
}",0,
project,0,test058116,"public void test058116() throws Throwable {
    Class<String> class0 = String.class;
    Millisecond millisecond0 = new Millisecond();
    TimeSeries timeSeries0 = new TimeSeries(millisecond0, ""-)OJT/."", ""-)OJT/."", class0);
    int int0 = timeSeries0.getMaximumItemCount();
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries0.getMaximumItemAge())"
project,0,test058117,"public void test058117() throws Throwable {
    Class<String> class0 = String.class;
    Millisecond millisecond0 = new Millisecond();
    TimeSeries timeSeries0 = new TimeSeries(millisecond0, ""-)OJT/."", ""-)OJT/."", class0);
    int int0 = timeSeries0.getMaximumItemCount();
    assertEquals(Integer.MAX_VALUE, int0);
}",0,
project,0,test059118,"public void test059118() throws Throwable {
    Day day0 = new Day();
    Class<Millisecond> class0 = Millisecond.class;
    TimeSeries timeSeries0 = new TimeSeries(day0, class0);
    long long0 = timeSeries0.getMaximumItemAge();
    assertEquals(9223372036854775807L, long0);
}",0,"assertEquals(0, long0)"
project,0,test059119,"public void test059119() throws Throwable {
    Day day0 = new Day();
    Class<Millisecond> class0 = Millisecond.class;
    TimeSeries timeSeries0 = new TimeSeries(day0, class0);
    long long0 = timeSeries0.getMaximumItemAge();
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries0.getMaximumItemCount())"
project,0,test059120,"public void test059120() throws Throwable {
    Day day0 = new Day();
    Class<Millisecond> class0 = Millisecond.class;
    TimeSeries timeSeries0 = new TimeSeries(day0, class0);
    long long0 = timeSeries0.getMaximumItemAge();
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}",0,
project,0,test059121,"public void test059121() throws Throwable {
    Day day0 = new Day();
    Class<Millisecond> class0 = Millisecond.class;
    TimeSeries timeSeries0 = new TimeSeries(day0, class0);
    long long0 = timeSeries0.getMaximumItemAge();
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}",0,
project,0,test060122,"public void test060122() throws Throwable {
    Integer integer0 = JLayeredPane.DEFAULT_LAYER;
    Class<Object> class0 = Object.class;
    TimeSeries timeSeries0 = new TimeSeries(integer0, """", (String) null, class0);
    String string0 = timeSeries0.getRangeDescription();
    assertNull(string0);
}",0,assertNotNull(string0)
project,0,test060123,"public void test060123() throws Throwable {
    Integer integer0 = JLayeredPane.DEFAULT_LAYER;
    Class<Object> class0 = Object.class;
    TimeSeries timeSeries0 = new TimeSeries(integer0, """", (String) null, class0);
    String string0 = timeSeries0.getRangeDescription();
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries0.getMaximumItemCount())"
project,0,test060124,"public void test060124() throws Throwable {
    Integer integer0 = JLayeredPane.DEFAULT_LAYER;
    Class<Object> class0 = Object.class;
    TimeSeries timeSeries0 = new TimeSeries(integer0, """", (String) null, class0);
    String string0 = timeSeries0.getRangeDescription();
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries0.getMaximumItemAge())"
project,0,test060125,"public void test060125() throws Throwable {
    Integer integer0 = JLayeredPane.DEFAULT_LAYER;
    Class<Object> class0 = Object.class;
    TimeSeries timeSeries0 = new TimeSeries(integer0, """", (String) null, class0);
    String string0 = timeSeries0.getRangeDescription();
    assertEquals("""", timeSeries0.getDomainDescription());
}",0,assertNotNull(timeSeries0.getDomainDescription())
project,0,test061126,"public void test061126() throws Throwable {
    TimeSeries timeSeries0 = new TimeSeries(""WN"");
    // Undeclared exception!
    try {
        timeSeries0.getValue(0);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 0, Size: 0
        //
        verifyException(""java.util.ArrayList"", e);
    }
}",0,
project,0,test062127,"public void test062127() throws Throwable {
    Class<String> class0 = String.class;
    Millisecond millisecond0 = new Millisecond();
    TimeSeries timeSeries0 = new TimeSeries(millisecond0, ""-)OJT/."", ""-)OJT/."", class0);
    // Undeclared exception!
    try {
        timeSeries0.add((RegularTimePeriod) null, (Number) 999, true);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'period' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeriesDataItem"", e);
    }
}",0,
project,0,test063128,"public void test063128() throws Throwable {
    Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
    TimeSeries timeSeries0 = new TimeSeries(""java.util.TimeZone"", ""java.util.TimeZone"", ""java.util.TimeZone"", class0);
    // Undeclared exception!
    try {
        timeSeries0.getTimePeriod(174);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 174, Size: 0
        //
        verifyException(""java.util.ArrayList"", e);
    }
}",0,
project,0,test064129,"public void test064129() throws Throwable {
    Day day0 = new Day();
    Class<Month> class0 = Month.class;
    TimeSeries timeSeries0 = new TimeSeries(day0, ""=wzUe FC9tegUK,&]d"", (String) null, class0);
    String string0 = timeSeries0.getDomainDescription();
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries0.getMaximumItemCount())"
project,0,test064130,"public void test064130() throws Throwable {
    Day day0 = new Day();
    Class<Month> class0 = Month.class;
    TimeSeries timeSeries0 = new TimeSeries(day0, ""=wzUe FC9tegUK,&]d"", (String) null, class0);
    String string0 = timeSeries0.getDomainDescription();
    assertEquals(""=wzUe FC9tegUK,&]d"", string0);
}",0,
project,0,test064132,"public void test064132() throws Throwable {
    Day day0 = new Day();
    Class<Month> class0 = Month.class;
    TimeSeries timeSeries0 = new TimeSeries(day0, ""=wzUe FC9tegUK,&]d"", (String) null, class0);
    String string0 = timeSeries0.getDomainDescription();
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries0.getMaximumItemAge())"
project,0,test065133,"public void test065133() throws Throwable {
    Day day0 = new Day();
    Class<Week> class0 = Week.class;
    TimeSeries timeSeries0 = new TimeSeries(day0, ""<A$nQ"", ""java.lang.Class"", class0);
    // Undeclared exception!
    try {
        timeSeries0.getDataItem(1);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 1, Size: 0
        //
        verifyException(""java.util.ArrayList"", e);
    }
}",1,
project,0,test066134,"public void test066134() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(day0, (Number) null);
    timeSeries0.add(timeSeriesDataItem0);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries0.getMaximumItemAge())"
project,0,test066135,"public void test066135() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(day0, (Number) null);
    timeSeries0.add(timeSeriesDataItem0);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries0.getMaximumItemCount())"
project,0,test066136,"public void test066136() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(day0, (Number) null);
    timeSeries0.add(timeSeriesDataItem0);
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}",0,assertNotNull(timeSeries0.getRangeDescription())
project,0,test066137,"public void test066137() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(day0, (Number) null);
    timeSeries0.add(timeSeriesDataItem0);
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}",0,
project,0,test067138,"public void test067138() throws Throwable {
    MockDate mockDate0 = new MockDate(714, 479, 1351);
    Month month0 = new Month(mockDate0);
    Class<Millisecond> class0 = Millisecond.class;
    TimeSeries timeSeries0 = new TimeSeries(month0, class0);
    timeSeries0.getItemCount();
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}",0,assertNotNull(timeSeries0.getRangeDescription())
project,0,test067139,"public void test067139() throws Throwable {
    MockDate mockDate0 = new MockDate(714, 479, 1351);
    Month month0 = new Month(mockDate0);
    Class<Millisecond> class0 = Millisecond.class;
    TimeSeries timeSeries0 = new TimeSeries(month0, class0);
    timeSeries0.getItemCount();
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}",0,
project,0,test067140,"public void test067140() throws Throwable {
    MockDate mockDate0 = new MockDate(714, 479, 1351);
    Month month0 = new Month(mockDate0);
    Class<Millisecond> class0 = Millisecond.class;
    TimeSeries timeSeries0 = new TimeSeries(month0, class0);
    timeSeries0.getItemCount();
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries0.getMaximumItemAge())"
project,0,test067141,"public void test067141() throws Throwable {
    MockDate mockDate0 = new MockDate(714, 479, 1351);
    Month month0 = new Month(mockDate0);
    Class<Millisecond> class0 = Millisecond.class;
    TimeSeries timeSeries0 = new TimeSeries(month0, class0);
    timeSeries0.getItemCount();
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries0.getMaximumItemCount())"
project,0,test068142,"public void test068142() throws Throwable {
    MockDate mockDate0 = new MockDate(0, 45, 0, 1525, 1525, 1525);
    Millisecond millisecond0 = new Millisecond(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(millisecond0);
    timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, (-380.28592));
    timeSeries0.hashCode();
    assertEquals(1, timeSeries0.getItemCount());
}",0,"assertEquals(0, timeSeries0.getItemCount())"
project,0,test069143,"public void test069143() throws Throwable {
    Day day0 = new Day();
    Class<Month> class0 = Month.class;
    TimeSeries timeSeries0 = new TimeSeries(day0, ""=wzUe FC9tegUK,&]d"", (String) null, class0);
    timeSeries0.hashCode();
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries0.getMaximumItemAge())"
project,0,test069144,"public void test069144() throws Throwable {
    Day day0 = new Day();
    Class<Month> class0 = Month.class;
    TimeSeries timeSeries0 = new TimeSeries(day0, ""=wzUe FC9tegUK,&]d"", (String) null, class0);
    timeSeries0.hashCode();
    assertEquals(""=wzUe FC9tegUK,&]d"", timeSeries0.getDomainDescription());
}",0,
project,0,test069145,"public void test069145() throws Throwable {
    Day day0 = new Day();
    Class<Month> class0 = Month.class;
    TimeSeries timeSeries0 = new TimeSeries(day0, ""=wzUe FC9tegUK,&]d"", (String) null, class0);
    timeSeries0.hashCode();
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries0.getMaximumItemCount())"
project,0,test070146,"public void test070146() throws Throwable {
    Millisecond millisecond0 = new Millisecond();
    TimeSeries timeSeries0 = new TimeSeries(millisecond0, (String) null, ""-9OJT/."", (Class) null);
    timeSeries0.hashCode();
    assertEquals(""-9OJT/."", timeSeries0.getRangeDescription());
}",0,assertNotNull(timeSeries0.getRangeDescription())
project,0,test070147,"public void test070147() throws Throwable {
    Millisecond millisecond0 = new Millisecond();
    TimeSeries timeSeries0 = new TimeSeries(millisecond0, (String) null, ""-9OJT/."", (Class) null);
    timeSeries0.hashCode();
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries0.getMaximumItemAge())"
project,0,test070148,"public void test070148() throws Throwable {
    Millisecond millisecond0 = new Millisecond();
    TimeSeries timeSeries0 = new TimeSeries(millisecond0, (String) null, ""-9OJT/."", (Class) null);
    timeSeries0.hashCode();
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries0.getMaximumItemCount())"
project,0,test071149,"public void test071149() throws Throwable {
    MockDate mockDate0 = new MockDate(714, 479, 1351);
    Month month0 = new Month(mockDate0);
    Class<Millisecond> class0 = Millisecond.class;
    TimeSeries timeSeries0 = new TimeSeries(month0, class0);
    Class<Day> class1 = Day.class;
    TimeSeries timeSeries1 = new TimeSeries(mockDate0, ""InD"", ""InD"", class1);
    boolean boolean0 = timeSeries1.equals(timeSeries0);
    assertEquals(""InD"", timeSeries1.getRangeDescription());
}",0,assertNotNull(timeSeries1.getRangeDescription())
project,0,test071150,"public void test071150() throws Throwable {
    MockDate mockDate0 = new MockDate(714, 479, 1351);
    Month month0 = new Month(mockDate0);
    Class<Millisecond> class0 = Millisecond.class;
    TimeSeries timeSeries0 = new TimeSeries(month0, class0);
    Class<Day> class1 = Day.class;
    TimeSeries timeSeries1 = new TimeSeries(mockDate0, ""InD"", ""InD"", class1);
    boolean boolean0 = timeSeries1.equals(timeSeries0);
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}",0,assertNotNull(timeSeries0.getRangeDescription())
project,0,test071151,"public void test071151() throws Throwable {
    MockDate mockDate0 = new MockDate(714, 479, 1351);
    Month month0 = new Month(mockDate0);
    Class<Millisecond> class0 = Millisecond.class;
    TimeSeries timeSeries0 = new TimeSeries(month0, class0);
    Class<Day> class1 = Day.class;
    TimeSeries timeSeries1 = new TimeSeries(mockDate0, ""InD"", ""InD"", class1);
    boolean boolean0 = timeSeries1.equals(timeSeries0);
    assertFalse(boolean0);
}",0,
project,0,test071152,"public void test071152() throws Throwable {
    MockDate mockDate0 = new MockDate(714, 479, 1351);
    Month month0 = new Month(mockDate0);
    Class<Millisecond> class0 = Millisecond.class;
    TimeSeries timeSeries0 = new TimeSeries(month0, class0);
    Class<Day> class1 = Day.class;
    TimeSeries timeSeries1 = new TimeSeries(mockDate0, ""InD"", ""InD"", class1);
    boolean boolean0 = timeSeries1.equals(timeSeries0);
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}",0,assertNotNull(timeSeries0.getDomainDescription())
project,0,test071153,"public void test071153() throws Throwable {
    MockDate mockDate0 = new MockDate(714, 479, 1351);
    Month month0 = new Month(mockDate0);
    Class<Millisecond> class0 = Millisecond.class;
    TimeSeries timeSeries0 = new TimeSeries(month0, class0);
    Class<Day> class1 = Day.class;
    TimeSeries timeSeries1 = new TimeSeries(mockDate0, ""InD"", ""InD"", class1);
    boolean boolean0 = timeSeries1.equals(timeSeries0);
    assertEquals(""InD"", timeSeries1.getDomainDescription());
}",0,assertNotNull(timeSeries1.getDomainDescription())
project,0,test071154,"public void test071154() throws Throwable {
    MockDate mockDate0 = new MockDate(714, 479, 1351);
    Month month0 = new Month(mockDate0);
    Class<Millisecond> class0 = Millisecond.class;
    TimeSeries timeSeries0 = new TimeSeries(month0, class0);
    Class<Day> class1 = Day.class;
    TimeSeries timeSeries1 = new TimeSeries(mockDate0, ""InD"", ""InD"", class1);
    boolean boolean0 = timeSeries1.equals(timeSeries0);
    assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries1.getMaximumItemAge())"
project,0,test071155,"public void test071155() throws Throwable {
    MockDate mockDate0 = new MockDate(714, 479, 1351);
    Month month0 = new Month(mockDate0);
    Class<Millisecond> class0 = Millisecond.class;
    TimeSeries timeSeries0 = new TimeSeries(month0, class0);
    Class<Day> class1 = Day.class;
    TimeSeries timeSeries1 = new TimeSeries(mockDate0, ""InD"", ""InD"", class1);
    boolean boolean0 = timeSeries1.equals(timeSeries0);
    assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries1.getMaximumItemCount())"
project,0,test072156,"public void test072156() throws Throwable {
    MockDate mockDate0 = new MockDate(0, 45, 0, 1525, 1525, 1525);
    Millisecond millisecond0 = new Millisecond(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(millisecond0);
    boolean boolean0 = timeSeries0.equals(millisecond0);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries0.getMaximumItemCount())"
project,0,test072157,"public void test072157() throws Throwable {
    MockDate mockDate0 = new MockDate(0, 45, 0, 1525, 1525, 1525);
    Millisecond millisecond0 = new Millisecond(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(millisecond0);
    boolean boolean0 = timeSeries0.equals(millisecond0);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries0.getMaximumItemAge())"
project,0,test072158,"public void test072158() throws Throwable {
    MockDate mockDate0 = new MockDate(0, 45, 0, 1525, 1525, 1525);
    Millisecond millisecond0 = new Millisecond(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(millisecond0);
    boolean boolean0 = timeSeries0.equals(millisecond0);
    assertFalse(boolean0);
}",0,
project,0,test072159,"public void test072159() throws Throwable {
    MockDate mockDate0 = new MockDate(0, 45, 0, 1525, 1525, 1525);
    Millisecond millisecond0 = new Millisecond(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(millisecond0);
    boolean boolean0 = timeSeries0.equals(millisecond0);
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}",0,
project,0,test072160,"public void test072160() throws Throwable {
    MockDate mockDate0 = new MockDate(0, 45, 0, 1525, 1525, 1525);
    Millisecond millisecond0 = new Millisecond(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(millisecond0);
    boolean boolean0 = timeSeries0.equals(millisecond0);
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}",0,assertNotNull(timeSeries0.getDomainDescription())
project,0,test073161,"public void test073161() throws Throwable {
    MockDate mockDate0 = new MockDate((-1L));
    Second second0 = new Second(mockDate0);
    RegularTimePeriod regularTimePeriod0 = second0.next();
    Class<Integer> class0 = Integer.class;
    TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, class0);
    // Undeclared exception!
    try {
        timeSeries0.createCopy(regularTimePeriod0, (RegularTimePeriod) second0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Requires start on or before end.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}",1,
project,0,test074162,"public void test074162() throws Throwable {
    Class<String> class0 = String.class;
    Millisecond millisecond0 = new Millisecond();
    TimeSeries timeSeries0 = new TimeSeries(millisecond0, ""-)OJT/."", ""-)OJT/."", class0);
    // Undeclared exception!
    try {
        timeSeries0.createCopy((RegularTimePeriod) millisecond0, (RegularTimePeriod) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'end' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}",1,
project,0,test075163,"public void test075163() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
    Date date0 = mockGregorianCalendar0.getGregorianChange();
    Month month0 = new Month(date0);
    Class<Hour> class0 = Hour.class;
    TimeSeries timeSeries0 = new TimeSeries(month0, """", """", class0);
    // Undeclared exception!
    try {
        timeSeries0.createCopy((RegularTimePeriod) null, (RegularTimePeriod) month0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'start' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}",1,
project,0,test076164,"public void test076164() throws Throwable {
    Minute minute0 = new Minute();
    Class<String> class0 = String.class;
    TimeSeries timeSeries0 = new TimeSeries(minute0, ""Null 'serialDate' argument."", (String) null, class0);
    // Undeclared exception!
    try {
        timeSeries0.createCopy((-984), 59);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Requires start >= 0.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}",1,
project,0,test077165,"public void test077165() throws Throwable {
    SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(92);
    Class<TimeSeriesDataItem> class0 = TimeSeriesDataItem.class;
    TimeSeries timeSeries0 = new TimeSeries(spreadsheetDate0, ""YZM wgVx0wYOEyW67"", "";])ZY"", class0);
    // Undeclared exception!
    try {
        timeSeries0.delete(2786, 44);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Requires start <= end.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}",0,
project,0,test078166,"public void test078166() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.add((RegularTimePeriod) day0, 718.0, false);
    timeSeries0.delete((RegularTimePeriod) day0);
    assertEquals(0, timeSeries0.getItemCount());
}",0,"assertEquals(1, timeSeries0.getItemCount())"
project,0,test079167,"public void test079167() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.delete((RegularTimePeriod) day0);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries0.getMaximumItemCount())"
project,0,test079168,"public void test079168() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.delete((RegularTimePeriod) day0);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries0.getMaximumItemAge())"
project,0,test079169,"public void test079169() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.delete((RegularTimePeriod) day0);
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}",0,
project,0,test079170,"public void test079170() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.delete((RegularTimePeriod) day0);
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}",0,
project,0,test080171,"public void test080171() throws Throwable {
    MockDate mockDate0 = new MockDate(0, 45, 0, 1525, 1525, 1525);
    Millisecond millisecond0 = new Millisecond(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(millisecond0);
    Second second0 = millisecond0.getSecond();
    timeSeries0.addOrUpdate((RegularTimePeriod) second0, 0.0);
    assertEquals(1, timeSeries0.getItemCount());
}",0,"assertEquals(1, timeSeries0.getItemCount())"
project,0,test080172,"public void test080172() throws Throwable {
    MockDate mockDate0 = new MockDate(0, 45, 0, 1525, 1525, 1525);
    Millisecond millisecond0 = new Millisecond(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(millisecond0);
    Second second0 = millisecond0.getSecond();
    timeSeries0.addOrUpdate((RegularTimePeriod) second0, 0.0);
    timeSeries0.clear();
    assertEquals(0, timeSeries0.getItemCount());
}",0,"assertEquals(1, timeSeries0.getItemCount())"
project,0,test081173,"public void test081173() throws Throwable {
    Class<String> class0 = String.class;
    Millisecond millisecond0 = new Millisecond();
    TimeSeries timeSeries0 = new TimeSeries(millisecond0, ""-)OJT/."", ""-)OJT/."", class0);
    timeSeries0.clear();
    assertEquals(""-)OJT/."", timeSeries0.getDomainDescription());
}",0,assertNotNull(timeSeries0.getDomainDescription())
project,0,test081174,"public void test081174() throws Throwable {
    Class<String> class0 = String.class;
    Millisecond millisecond0 = new Millisecond();
    TimeSeries timeSeries0 = new TimeSeries(millisecond0, ""-)OJT/."", ""-)OJT/."", class0);
    timeSeries0.clear();
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries0.getMaximumItemCount())"
project,0,test081175,"public void test081175() throws Throwable {
    Class<String> class0 = String.class;
    Millisecond millisecond0 = new Millisecond();
    TimeSeries timeSeries0 = new TimeSeries(millisecond0, ""-)OJT/."", ""-)OJT/."", class0);
    timeSeries0.clear();
    assertEquals(""-)OJT/."", timeSeries0.getRangeDescription());
}",0,assertNotNull(timeSeries0.getRangeDescription())
project,0,test081176,"public void test081176() throws Throwable {
    Class<String> class0 = String.class;
    Millisecond millisecond0 = new Millisecond();
    TimeSeries timeSeries0 = new TimeSeries(millisecond0, ""-)OJT/."", ""-)OJT/."", class0);
    timeSeries0.clear();
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries0.getMaximumItemAge())"
project,0,test082177,"public void test082177() throws Throwable {
    MockDate mockDate0 = new MockDate(0, 45, 0, 1525, 1525, 1525);
    Millisecond millisecond0 = new Millisecond(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(millisecond0);
    timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, (-380.28592));
    timeSeries0.removeAgedItems((long) 0, false);
    assertEquals(1, timeSeries0.getItemCount());
}",0,"assertEquals(0, timeSeries0.getItemCount())"
project,0,test083178,"public void test083178() throws Throwable {
    Clock clock0 = MockClock.systemUTC();
    Instant instant0 = MockInstant.now(clock0);
    Date date0 = Date.from(instant0);
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    timeSeries0.removeAgedItems(1392409281320L, false);
    timeSeries0.removeAgedItems((-208L), true);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries0.getMaximumItemCount())"
project,0,test083179,"public void test083179() throws Throwable {
    Clock clock0 = MockClock.systemUTC();
    Instant instant0 = MockInstant.now(clock0);
    Date date0 = Date.from(instant0);
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    timeSeries0.removeAgedItems(1392409281320L, false);
    timeSeries0.removeAgedItems((-208L), true);
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}",0,
project,0,test083180,"public void test083180() throws Throwable {
    Clock clock0 = MockClock.systemUTC();
    Instant instant0 = MockInstant.now(clock0);
    Date date0 = Date.from(instant0);
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    timeSeries0.removeAgedItems(1392409281320L, false);
    timeSeries0.removeAgedItems((-208L), true);
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}",0,
project,0,test083181,"public void test083181() throws Throwable {
    Clock clock0 = MockClock.systemUTC();
    Instant instant0 = MockInstant.now(clock0);
    Date date0 = Date.from(instant0);
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    timeSeries0.removeAgedItems(1392409281320L, false);
    timeSeries0.removeAgedItems((-208L), true);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries0.getMaximumItemAge())"
project,0,test084182,"public void test084182() throws Throwable {
    Clock clock0 = MockClock.systemUTC();
    Instant instant0 = MockInstant.now(clock0);
    Date date0 = Date.from(instant0);
    TimeSeries timeSeries0 = new TimeSeries(date0);
    Integer integer0 = JLayeredPane.DEFAULT_LAYER;
    // Undeclared exception!
    try {
        timeSeries0.addOrUpdate((RegularTimePeriod) null, (Number) integer0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'period' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}",0,
project,0,test085183,"public void test085183() throws Throwable {
    MockDate mockDate0 = new MockDate(45, 0, 0, 1525, 45);
    Millisecond millisecond0 = new Millisecond(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(millisecond0);
    TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) millisecond0, (RegularTimePeriod) millisecond0);
    Second second0 = millisecond0.getSecond();
    timeSeries0.addOrUpdate((RegularTimePeriod) second0, 0.0);
    timeSeries1.addAndOrUpdate(timeSeries0);
    assertEquals(1, timeSeries0.getItemCount());
}",0,"assertEquals(0, timeSeries0.getItemCount())"
project,0,test085184,"public void test085184() throws Throwable {
    MockDate mockDate0 = new MockDate(45, 0, 0, 1525, 45);
    Millisecond millisecond0 = new Millisecond(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(millisecond0);
    TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) millisecond0, (RegularTimePeriod) millisecond0);
    Second second0 = millisecond0.getSecond();
    timeSeries0.addOrUpdate((RegularTimePeriod) second0, 0.0);
    timeSeries1.addAndOrUpdate(timeSeries0);
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}",0,assertNotNull(timeSeries0.getDomainDescription())
project,0,test086185,"public void test086185() throws Throwable {
    MockDate mockDate0 = new MockDate(45, 0, 0, 1525, 45);
    Millisecond millisecond0 = new Millisecond(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(millisecond0);
    Second second0 = millisecond0.getSecond();
    timeSeries0.addOrUpdate((RegularTimePeriod) second0, 0.0);
    // Undeclared exception!
    try {
        timeSeries0.addAndOrUpdate(timeSeries0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // You are trying to add data where the time period class is org.jfree.data.time.Second, but the TimeSeries is expecting an instance of org.jfree.data.time.Day.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}",0,
project,0,test087186,"public void test087186() throws Throwable {
    Minute minute0 = new Minute();
    Second second0 = new Second(273, minute0);
    TimeSeries timeSeries0 = new TimeSeries(second0);
    // Undeclared exception!
    try {
        timeSeries0.update((RegularTimePeriod) second0, (Number) 59);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // TimeSeries.update(TimePeriod, Number):  period does not exist.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}",0,
project,0,test088187,"public void test088187() throws Throwable {
    MockDate mockDate0 = new MockDate();
    TimeZone timeZone0 = TimeZone.getTimeZone(""yehcE"");
    Day day0 = new Day(mockDate0, timeZone0);
    RegularTimePeriod regularTimePeriod0 = day0.previous();
    TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
    timeSeries0.add(regularTimePeriod0, (Number) null);
    timeSeries0.add((RegularTimePeriod) day0, (Number) null);
    assertEquals(2, timeSeries0.getItemCount());
}",0,"assertEquals(0, timeSeries0.getItemCount())"
project,0,test089188,"public void test089188() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.add((RegularTimePeriod) day0, 718.0, false);
    // Undeclared exception!
    try {
        timeSeries0.add((RegularTimePeriod) day0, 882.599950745);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // You are attempting to add an observation for the time period 14-February-2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}",1,
project,0,test090189,"public void test090189() throws Throwable {
    MockDate mockDate0 = new MockDate((-230));
    Second second0 = new Second(mockDate0);
    Millisecond millisecond0 = new Millisecond((-230), second0);
    TimeSeries timeSeries0 = new TimeSeries(millisecond0);
    // Undeclared exception!
    try {
        timeSeries0.add((TimeSeriesDataItem) null, true);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'item' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}",1,
project,0,test091190,"public void test091190() throws Throwable {
    MockDate mockDate0 = new MockDate(714, 479, 1351);
    Month month0 = new Month(mockDate0);
    Class<Millisecond> class0 = Millisecond.class;
    TimeSeries timeSeries0 = new TimeSeries(month0, class0);
    timeSeries0.getValue((RegularTimePeriod) month0);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries0.getMaximumItemCount())"
project,0,test091191,"public void test091191() throws Throwable {
    MockDate mockDate0 = new MockDate(714, 479, 1351);
    Month month0 = new Month(mockDate0);
    Class<Millisecond> class0 = Millisecond.class;
    TimeSeries timeSeries0 = new TimeSeries(month0, class0);
    timeSeries0.getValue((RegularTimePeriod) month0);
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}",0,assertNotNull(timeSeries0.getDomainDescription())
project,0,test091192,"public void test091192() throws Throwable {
    MockDate mockDate0 = new MockDate(714, 479, 1351);
    Month month0 = new Month(mockDate0);
    Class<Millisecond> class0 = Millisecond.class;
    TimeSeries timeSeries0 = new TimeSeries(month0, class0);
    timeSeries0.getValue((RegularTimePeriod) month0);
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}",0,
project,0,test091193,"public void test091193() throws Throwable {
    MockDate mockDate0 = new MockDate(714, 479, 1351);
    Month month0 = new Month(mockDate0);
    Class<Millisecond> class0 = Millisecond.class;
    TimeSeries timeSeries0 = new TimeSeries(month0, class0);
    timeSeries0.getValue((RegularTimePeriod) month0);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries0.getMaximumItemAge())"
project,0,test092194,"public void test092194() throws Throwable {
    Class<String> class0 = String.class;
    Millisecond millisecond0 = new Millisecond();
    TimeSeries timeSeries0 = new TimeSeries(millisecond0, ""-)OJT/."", ""-)OJT/."", class0);
    // Undeclared exception!
    try {
        timeSeries0.getValue((RegularTimePeriod) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'period' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}",0,
project,0,test093195,"public void test093195() throws Throwable {
    MockDate mockDate0 = new MockDate(45, 0, 0, 1525, 45);
    Millisecond millisecond0 = new Millisecond(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(millisecond0);
    TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) millisecond0, (RegularTimePeriod) millisecond0);
    Second second0 = millisecond0.getSecond();
    timeSeries0.addOrUpdate((RegularTimePeriod) second0, 0.0);
    timeSeries1.getTimePeriodsUniqueToOtherSeries(timeSeries0);
    assertEquals(1, timeSeries0.getItemCount());
}",0,"assertEquals(0, timeSeries0.getItemCount())"
project,0,test093196,"public void test093196() throws Throwable {
    MockDate mockDate0 = new MockDate(45, 0, 0, 1525, 45);
    Millisecond millisecond0 = new Millisecond(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(millisecond0);
    TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) millisecond0, (RegularTimePeriod) millisecond0);
    Second second0 = millisecond0.getSecond();
    timeSeries0.addOrUpdate((RegularTimePeriod) second0, 0.0);
    timeSeries1.getTimePeriodsUniqueToOtherSeries(timeSeries0);
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}",0,assertNotNull(timeSeries0.getDomainDescription())
project,0,test094197,"public void test094197() throws Throwable {
    MockDate mockDate0 = new MockDate(45, 0, 0, 1525, 45);
    Millisecond millisecond0 = new Millisecond(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(millisecond0);
    Second second0 = millisecond0.getSecond();
    timeSeries0.addOrUpdate((RegularTimePeriod) second0, 0.0);
    timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries0);
    assertEquals(1, timeSeries0.getItemCount());
}",0,"assertEquals(0, timeSeries0.getItemCount())"
project,0,test095198,"public void test095198() throws Throwable {
    TimeSeries timeSeries0 = new TimeSeries(""2:aXr!"");
    timeSeries0.getTimePeriods();
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries0.getMaximumItemAge())"
project,0,test095199,"public void test095199() throws Throwable {
    TimeSeries timeSeries0 = new TimeSeries(""2:aXr!"");
    timeSeries0.getTimePeriods();
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries0.getMaximumItemCount())"
project,0,test095200,"public void test095200() throws Throwable {
    TimeSeries timeSeries0 = new TimeSeries(""2:aXr!"");
    timeSeries0.getTimePeriods();
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}",0,assertNotNull(timeSeries0.getRangeDescription())
project,0,test095201,"public void test095201() throws Throwable {
    TimeSeries timeSeries0 = new TimeSeries(""2:aXr!"");
    timeSeries0.getTimePeriods();
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}",0,
project,0,test096202,"public void test096202() throws Throwable {
    Clock clock0 = MockClock.systemUTC();
    Instant instant0 = MockInstant.now(clock0);
    Date date0 = Date.from(instant0);
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
    TimeSeries timeSeries0 = new TimeSeries(date0);
    Integer integer0 = JLayeredPane.DEFAULT_LAYER;
    timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) integer0);
    timeSeries0.getDataItem((RegularTimePeriod) fixedMillisecond0);
    assertEquals(1, timeSeries0.getItemCount());
}",0,"assertEquals(1, timeSeries0.getItemCount())"
project,0,test097203,"public void test097203() throws Throwable {
    MockDate mockDate0 = new MockDate((-507), (-507), 0);
    Quarter quarter0 = new Quarter(mockDate0);
    Class<Week> class0 = Week.class;
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""Requires start >= 0."", ""You are attempting to add an observation for "", class0);
    timeSeries0.getDataItem((RegularTimePeriod) quarter0);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries0.getMaximumItemCount())"
project,0,test097204,"public void test097204() throws Throwable {
    MockDate mockDate0 = new MockDate((-507), (-507), 0);
    Quarter quarter0 = new Quarter(mockDate0);
    Class<Week> class0 = Week.class;
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""Requires start >= 0."", ""You are attempting to add an observation for "", class0);
    timeSeries0.getDataItem((RegularTimePeriod) quarter0);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries0.getMaximumItemAge())"
project,0,test097205,"public void test097205() throws Throwable {
    MockDate mockDate0 = new MockDate((-507), (-507), 0);
    Quarter quarter0 = new Quarter(mockDate0);
    Class<Week> class0 = Week.class;
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""Requires start >= 0."", ""You are attempting to add an observation for "", class0);
    timeSeries0.getDataItem((RegularTimePeriod) quarter0);
    assertEquals(""Requires start >= 0."", timeSeries0.getDomainDescription());
}",0,assertNotNull(timeSeries0.getDomainDescription())
project,0,test097206,"public void test097206() throws Throwable {
    MockDate mockDate0 = new MockDate((-507), (-507), 0);
    Quarter quarter0 = new Quarter(mockDate0);
    Class<Week> class0 = Week.class;
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""Requires start >= 0."", ""You are attempting to add an observation for "", class0);
    timeSeries0.getDataItem((RegularTimePeriod) quarter0);
    assertEquals(""You are attempting to add an observation for "", timeSeries0.getRangeDescription());
}",0,assertNotNull(timeSeries0.getRangeDescription())
project,0,test098207,"public void test098207() throws Throwable {
    Class<String> class0 = String.class;
    Millisecond millisecond0 = new Millisecond();
    TimeSeries timeSeries0 = new TimeSeries(millisecond0, ""-)OJT/."", ""-)OJT/."", class0);
    // Undeclared exception!
    try {
        timeSeries0.setMaximumItemAge((-689L));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Negative 'periods' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}",1,
project,0,test099208,"public void test099208() throws Throwable {
    MockDate mockDate0 = new MockDate(45, 0, 0, 1525, 45);
    Millisecond millisecond0 = new Millisecond(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(millisecond0);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,
project,0,test099209,"public void test099209() throws Throwable {
    MockDate mockDate0 = new MockDate(45, 0, 0, 1525, 45);
    Millisecond millisecond0 = new Millisecond(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(millisecond0);
    timeSeries0.setMaximumItemAge(0L);
    timeSeries0.getMaximumItemAge();
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}",0,assertNotNull(timeSeries0.getDomainDescription())
project,0,test100210,"public void test100210() throws Throwable {
    Millisecond millisecond0 = new Millisecond();
    Class<Object> class0 = Object.class;
    TimeSeries timeSeries0 = new TimeSeries(""-)OJT/."", class0);
    timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, (double) (-689L));
    timeSeries0.setMaximumItemCount(0);
    assertEquals(0, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries0.getMaximumItemCount())"
project,0,test101211,"public void test101211() throws Throwable {
    Minute minute0 = new Minute();
    Class<RegularTimePeriod> class0 = RegularTimePeriod.class;
    TimeSeries timeSeries0 = new TimeSeries(minute0, class0);
    // Undeclared exception!
    try {
        timeSeries0.setMaximumItemCount((-1031));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Negative 'maximum' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}",1,
project,0,test102212,"public void test102212() throws Throwable {
    Clock clock0 = MockClock.systemUTC();
    Instant instant0 = MockInstant.now(clock0);
    Date date0 = Date.from(instant0);
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    TimeSeries timeSeries1 = new TimeSeries(date0);
    assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries1.getMaximumItemAge())"
project,0,test102213,"public void test102213() throws Throwable {
    Clock clock0 = MockClock.systemUTC();
    Instant instant0 = MockInstant.now(clock0);
    Date date0 = Date.from(instant0);
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    TimeSeries timeSeries1 = new TimeSeries(date0);
    assertEquals(""Time"", timeSeries1.getDomainDescription());
}",0,assertNotNull(timeSeries1.getDomainDescription())
project,0,test102214,"public void test102214() throws Throwable {
    Clock clock0 = MockClock.systemUTC();
    Instant instant0 = MockInstant.now(clock0);
    Date date0 = Date.from(instant0);
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    TimeSeries timeSeries1 = new TimeSeries(date0);
    assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries1.getMaximumItemCount())"
project,0,test102215,"public void test102215() throws Throwable {
    Clock clock0 = MockClock.systemUTC();
    Instant instant0 = MockInstant.now(clock0);
    Date date0 = Date.from(instant0);
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    TimeSeries timeSeries1 = new TimeSeries(date0);
    assertEquals(""Value"", timeSeries1.getRangeDescription());
}",0,assertNotNull(timeSeries1.getRangeDescription())
project,0,test103216,"public void test103216() throws Throwable {
    Class<String> class0 = String.class;
    TimeSeries timeSeries0 = new TimeSeries(""b"", """", ""b"", class0);
    timeSeries0.setRangeDescription(""]BlbnZ5}4H4"");
    assertEquals(""]BlbnZ5}4H4"", timeSeries0.getRangeDescription());
}",1,
project,0,test104217,"public void test104217() throws Throwable {
    MockDate mockDate0 = new MockDate();
    TimeZone timeZone0 = TimeZone.getTimeZone(""yehcE"");
    Day day0 = new Day(mockDate0, timeZone0);
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.add((RegularTimePeriod) day0, (Number) null);
    assertEquals(1, timeSeries0.getItemCount());
}",0,"assertEquals(0, timeSeries0.getItemCount())"
project,0,test104218,"public void test104218() throws Throwable {
    MockDate mockDate0 = new MockDate();
    TimeZone timeZone0 = TimeZone.getTimeZone(""yehcE"");
    Day day0 = new Day(mockDate0, timeZone0);
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.add((RegularTimePeriod) day0, (Number) null);
    timeSeries0.update((RegularTimePeriod) day0, (Number) null);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries0.getMaximumItemCount())"
project,0,test105219,"public void test105219() throws Throwable {
    MockDate mockDate0 = new MockDate(45, 0, 0, 1525, 45);
    Millisecond millisecond0 = new Millisecond(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(millisecond0);
    // Undeclared exception!
    try {
        timeSeries0.clone();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Requires start <= end.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}",0,
project,0,test106220,"public void test106220() throws Throwable {
    MockDate mockDate0 = new MockDate(45, 0, 0, 1525, 45);
    Millisecond millisecond0 = new Millisecond(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(millisecond0);
    // Undeclared exception!
    try {
        timeSeries0.add((RegularTimePeriod) millisecond0, (double) 0, true);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // You are trying to add data where the time period class is org.jfree.data.time.Millisecond, but the TimeSeries is expecting an instance of org.jfree.data.time.Day.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}",0,
project,0,test107221,"public void test107221() throws Throwable {
    Minute minute0 = new Minute();
    TimeSeries timeSeries0 = new TimeSeries(""2:aXr!"");
    timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (double) 59);
    timeSeries0.getValue((RegularTimePeriod) minute0);
    assertEquals(1, timeSeries0.getItemCount());
}",0,"assertEquals(1, timeSeries0.getItemCount())"
project,0,test108222,"public void test108222() throws Throwable {
    MockDate mockDate0 = new MockDate(714, 479, 1351);
    Month month0 = new Month(mockDate0);
    Class<Millisecond> class0 = Millisecond.class;
    TimeSeries timeSeries0 = new TimeSeries(month0, class0);
    // Undeclared exception!
    try {
        timeSeries0.getNextTimePeriod();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test109223,"public void test109223() throws Throwable {
    Clock clock0 = MockClock.systemUTC();
    Instant instant0 = MockInstant.now(clock0);
    Date date0 = Date.from(instant0);
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    timeSeries0.getItems();
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}",0,assertNotNull(timeSeries0.getRangeDescription())
project,0,test109224,"public void test109224() throws Throwable {
    Clock clock0 = MockClock.systemUTC();
    Instant instant0 = MockInstant.now(clock0);
    Date date0 = Date.from(instant0);
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    timeSeries0.getItems();
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}",0,assertNotNull(timeSeries0.getDomainDescription())
project,0,test109225,"public void test109225() throws Throwable {
    Clock clock0 = MockClock.systemUTC();
    Instant instant0 = MockInstant.now(clock0);
    Date date0 = Date.from(instant0);
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    timeSeries0.getItems();
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(1, timeSeries0.getMaximumItemCount())"
project,0,test109226,"public void test109226() throws Throwable {
    Clock clock0 = MockClock.systemUTC();
    Instant instant0 = MockInstant.now(clock0);
    Date date0 = Date.from(instant0);
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    timeSeries0.getItems();
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries0.getMaximumItemAge())"
project,0,test110227,"public void test110227() throws Throwable {
    MockDate mockDate0 = new MockDate(0, 45, 0, 1525, 1525, 1525);
    Millisecond millisecond0 = new Millisecond(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(millisecond0);
    // Undeclared exception!
    try {
        timeSeries0.update(45, (Number) 0);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 45, Size: 0
        //
        verifyException(""java.util.ArrayList"", e);
    }
}",0,
project,0,test111228,"public void test111228() throws Throwable {
    Minute minute0 = new Minute();
    TimeSeries timeSeries0 = new TimeSeries(""2:aXr!"");
    TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) minute0, (RegularTimePeriod) minute0);
    boolean boolean0 = timeSeries1.equals(timeSeries0);
    assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries1.getMaximumItemCount())"
project,0,test111229,"public void test111229() throws Throwable {
    Minute minute0 = new Minute();
    TimeSeries timeSeries0 = new TimeSeries(""2:aXr!"");
    TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) minute0, (RegularTimePeriod) minute0);
    boolean boolean0 = timeSeries1.equals(timeSeries0);
    assertTrue(boolean0);
}",0,
project,0,test111230,"public void test111230() throws Throwable {
    Minute minute0 = new Minute();
    TimeSeries timeSeries0 = new TimeSeries(""2:aXr!"");
    TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) minute0, (RegularTimePeriod) minute0);
    boolean boolean0 = timeSeries1.equals(timeSeries0);
    assertEquals(""Time"", timeSeries1.getDomainDescription());
}",0,assertNotNull(timeSeries1.getDomainDescription())
project,0,test111231,"public void test111231() throws Throwable {
    Minute minute0 = new Minute();
    TimeSeries timeSeries0 = new TimeSeries(""2:aXr!"");
    TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) minute0, (RegularTimePeriod) minute0);
    boolean boolean0 = timeSeries1.equals(timeSeries0);
    assertEquals(""Value"", timeSeries1.getRangeDescription());
}",0,assertNotNull(timeSeries1.getRangeDescription())
project,0,test111232,"public void test111232() throws Throwable {
    Minute minute0 = new Minute();
    TimeSeries timeSeries0 = new TimeSeries(""2:aXr!"");
    TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) minute0, (RegularTimePeriod) minute0);
    boolean boolean0 = timeSeries1.equals(timeSeries0);
    assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries1.getMaximumItemAge())"
