focal_method,test_prefix,docstring
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test0000() throws Throwable {
    Day day0 = new Day();
    RegularTimePeriod regularTimePeriod0 = day0.previous();
    Class<Month> class0 = Month.class;
    TimeSeries timeSeries0 = new TimeSeries(day0, ""=wzUe FC9tegUK,&]d"", (String) null, class0);
    TimeSeries timeSeries1 = timeSeries0.createCopy(regularTimePeriod0, (RegularTimePeriod) day0);
    assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test0001() throws Throwable {
    Day day0 = new Day();
    RegularTimePeriod regularTimePeriod0 = day0.previous();
    Class<Month> class0 = Month.class;
    TimeSeries timeSeries0 = new TimeSeries(day0, ""=wzUe FC9tegUK,&]d"", (String) null, class0);
    TimeSeries timeSeries1 = timeSeries0.createCopy(regularTimePeriod0, (RegularTimePeriod) day0);
    assertEquals(""=wzUe FC9tegUK,&]d"", timeSeries1.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test0002() throws Throwable {
    Day day0 = new Day();
    RegularTimePeriod regularTimePeriod0 = day0.previous();
    Class<Month> class0 = Month.class;
    TimeSeries timeSeries0 = new TimeSeries(day0, ""=wzUe FC9tegUK,&]d"", (String) null, class0);
    TimeSeries timeSeries1 = timeSeries0.createCopy(regularTimePeriod0, (RegularTimePeriod) day0);
    assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public int getItemCount() {
    return this.data.size();
}","public void test0013() throws Throwable {
    MockDate mockDate0 = new MockDate();
    TimeZone timeZone0 = TimeZone.getTimeZone(""yehcE"");
    Day day0 = new Day(mockDate0, timeZone0);
    RegularTimePeriod regularTimePeriod0 = day0.previous();
    TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
    timeSeries0.add(regularTimePeriod0, (Number) null);
    timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) null);
    timeSeries0.delete((RegularTimePeriod) day0);
    assertEquals(1, timeSeries0.getItemCount());
}","/**
 * Returns the number of items in the series.
 *
 * @return The item count.
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test0024() throws Throwable {
    MockDate mockDate0 = new MockDate();
    TimeZone timeZone0 = TimeZone.getTimeZone(""yFneyFE"");
    Day day0 = new Day(mockDate0, timeZone0);
    RegularTimePeriod regularTimePeriod0 = day0.previous();
    TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
    timeSeries0.add(regularTimePeriod0, (Number) null);
    timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) null);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test0025() throws Throwable {
    MockDate mockDate0 = new MockDate();
    TimeZone timeZone0 = TimeZone.getTimeZone(""yFneyFE"");
    Day day0 = new Day(mockDate0, timeZone0);
    RegularTimePeriod regularTimePeriod0 = day0.previous();
    TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
    timeSeries0.add(regularTimePeriod0, (Number) null);
    timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) null);
    timeSeries0.setMaximumItemAge(415L);
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public int getItemCount() {
    return this.data.size();
}","public void test0036() throws Throwable {
    MockDate mockDate0 = new MockDate();
    TimeZone timeZone0 = TimeZone.getTimeZone(""yehcE"");
    Day day0 = new Day(mockDate0, timeZone0);
    RegularTimePeriod regularTimePeriod0 = day0.previous();
    TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
    timeSeries0.add(regularTimePeriod0, (Number) null);
    timeSeries0.addOrUpdate((RegularTimePeriod) day0, (-291.0));
    timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) null);
    assertEquals(2, timeSeries0.getItemCount());
}","/**
 * Returns the number of items in the series.
 *
 * @return The item count.
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test0047() throws Throwable {
    MockDate mockDate0 = new MockDate((-507), (-507), 0);
    Quarter quarter0 = new Quarter(mockDate0);
    Class<Week> class0 = Week.class;
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""Requires start >= 0."", ""You are attempting to add an observation for "", class0);
    timeSeries0.setMaximumItemCount(Integer.MAX_VALUE);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test0048() throws Throwable {
    MockDate mockDate0 = new MockDate((-507), (-507), 0);
    Quarter quarter0 = new Quarter(mockDate0);
    Class<Week> class0 = Week.class;
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""Requires start >= 0."", ""You are attempting to add an observation for "", class0);
    timeSeries0.setMaximumItemCount(Integer.MAX_VALUE);
    assertEquals(""Requires start >= 0."", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test0049() throws Throwable {
    MockDate mockDate0 = new MockDate((-507), (-507), 0);
    Quarter quarter0 = new Quarter(mockDate0);
    Class<Week> class0 = Week.class;
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""Requires start >= 0."", ""You are attempting to add an observation for "", class0);
    timeSeries0.setMaximumItemCount(Integer.MAX_VALUE);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test00410() throws Throwable {
    MockDate mockDate0 = new MockDate((-507), (-507), 0);
    Quarter quarter0 = new Quarter(mockDate0);
    Class<Week> class0 = Week.class;
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""Requires start >= 0."", ""You are attempting to add an observation for "", class0);
    timeSeries0.setMaximumItemCount(Integer.MAX_VALUE);
    assertEquals(""You are attempting to add an observation for "", timeSeries0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test00511() throws Throwable {
    MockDate mockDate0 = new MockDate();
    Day day0 = new Day(mockDate0);
    Class<Hour> class0 = Hour.class;
    TimeSeries timeSeries0 = new TimeSeries(day0, """", ""org.jfree.data.time.TimeSeries"", class0);
    assertEquals("""", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test00512() throws Throwable {
    MockDate mockDate0 = new MockDate();
    Day day0 = new Day(mockDate0);
    Class<Hour> class0 = Hour.class;
    TimeSeries timeSeries0 = new TimeSeries(day0, """", ""org.jfree.data.time.TimeSeries"", class0);
    timeSeries0.setDomainDescription((String) null);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test00513() throws Throwable {
    MockDate mockDate0 = new MockDate();
    Day day0 = new Day(mockDate0);
    Class<Hour> class0 = Hour.class;
    TimeSeries timeSeries0 = new TimeSeries(day0, """", ""org.jfree.data.time.TimeSeries"", class0);
    timeSeries0.setDomainDescription((String) null);
    assertEquals(""org.jfree.data.time.TimeSeries"", timeSeries0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test00514() throws Throwable {
    MockDate mockDate0 = new MockDate();
    Day day0 = new Day(mockDate0);
    Class<Hour> class0 = Hour.class;
    TimeSeries timeSeries0 = new TimeSeries(day0, """", ""org.jfree.data.time.TimeSeries"", class0);
    timeSeries0.setDomainDescription((String) null);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test00615() throws Throwable {
    MockDate mockDate0 = new MockDate((-1), (-1), 2958418, (-1), 1376);
    Minute minute0 = new Minute(mockDate0);
    Day day0 = minute0.getDay();
    TimeSeries timeSeries0 = new TimeSeries(""WN"");
    timeSeries0.add((RegularTimePeriod) day0, (Number) 0, false);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test00616() throws Throwable {
    MockDate mockDate0 = new MockDate((-1), (-1), 2958418, (-1), 1376);
    Minute minute0 = new Minute(mockDate0);
    Day day0 = minute0.getDay();
    TimeSeries timeSeries0 = new TimeSeries(""WN"");
    timeSeries0.add((RegularTimePeriod) day0, (Number) 0, false);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test00617() throws Throwable {
    MockDate mockDate0 = new MockDate((-1), (-1), 2958418, (-1), 1376);
    Minute minute0 = new Minute(mockDate0);
    Day day0 = minute0.getDay();
    TimeSeries timeSeries0 = new TimeSeries(""WN"");
    timeSeries0.add((RegularTimePeriod) day0, (Number) 0, false);
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test00618() throws Throwable {
    MockDate mockDate0 = new MockDate((-1), (-1), 2958418, (-1), 1376);
    Minute minute0 = new Minute(mockDate0);
    Day day0 = minute0.getDay();
    TimeSeries timeSeries0 = new TimeSeries(""WN"");
    timeSeries0.add((RegularTimePeriod) day0, (Number) 0, false);
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test00719() throws Throwable {
    MockDate mockDate0 = new MockDate(0, 45, 0, 1525, 1525, 1525);
    Millisecond millisecond0 = new Millisecond(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(millisecond0);
    Second second0 = millisecond0.getSecond();
    timeSeries0.addOrUpdate((RegularTimePeriod) second0, 0.0);
    timeSeries0.update(0, (Number) 0);
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test00720() throws Throwable {
    MockDate mockDate0 = new MockDate(0, 45, 0, 1525, 1525, 1525);
    Millisecond millisecond0 = new Millisecond(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(millisecond0);
    Second second0 = millisecond0.getSecond();
    timeSeries0.addOrUpdate((RegularTimePeriod) second0, 0.0);
    timeSeries0.update(0, (Number) 0);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test00721() throws Throwable {
    MockDate mockDate0 = new MockDate(0, 45, 0, 1525, 1525, 1525);
    Millisecond millisecond0 = new Millisecond(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(millisecond0);
    Second second0 = millisecond0.getSecond();
    timeSeries0.addOrUpdate((RegularTimePeriod) second0, 0.0);
    timeSeries0.update(0, (Number) 0);
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test00722() throws Throwable {
    MockDate mockDate0 = new MockDate(0, 45, 0, 1525, 1525, 1525);
    Millisecond millisecond0 = new Millisecond(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(millisecond0);
    Second second0 = millisecond0.getSecond();
    timeSeries0.addOrUpdate((RegularTimePeriod) second0, 0.0);
    timeSeries0.update(0, (Number) 0);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test00823() throws Throwable {
    MockDate mockDate0 = new MockDate(0, 45, 0, 0, 0, 0);
    Millisecond millisecond0 = new Millisecond(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(millisecond0);
    boolean boolean0 = timeSeries0.equals(timeSeries0);
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test00824() throws Throwable {
    MockDate mockDate0 = new MockDate(0, 45, 0, 0, 0, 0);
    Millisecond millisecond0 = new Millisecond(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(millisecond0);
    boolean boolean0 = timeSeries0.equals(timeSeries0);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public boolean equals(Object object) {
    if (object == this) {
        return true;
    }
    if (!(object instanceof TimeSeries) || !super.equals(object)) {
        return false;
    }
    TimeSeries s = (TimeSeries) object;
    if (!ObjectUtilities.equal(getDomainDescription(), s.getDomainDescription())) {
        return false;
    }
    if (!ObjectUtilities.equal(getRangeDescription(), s.getRangeDescription())) {
        return false;
    }
    if (!getClass().equals(s.getClass())) {
        return false;
    }
    if (getMaximumItemAge() != s.getMaximumItemAge()) {
        return false;
    }
    if (getMaximumItemCount() != s.getMaximumItemCount()) {
        return false;
    }
    int count = getItemCount();
    if (count != s.getItemCount()) {
        return false;
    }
    for (int i = 0; i < count; i++) {
        if (!getDataItem(i).equals(s.getDataItem(i))) {
            return false;
        }
    }
    return true;
}","public void test00825() throws Throwable {
    MockDate mockDate0 = new MockDate(0, 45, 0, 0, 0, 0);
    Millisecond millisecond0 = new Millisecond(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(millisecond0);
    boolean boolean0 = timeSeries0.equals(timeSeries0);
    assertTrue(boolean0);
}","/**
 * Tests the series for equality with an arbitrary object.
 *
 * @param object  the object to test against (<code>null</code> permitted).
 *
 * @return A boolean.
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test00826() throws Throwable {
    MockDate mockDate0 = new MockDate(0, 45, 0, 0, 0, 0);
    Millisecond millisecond0 = new Millisecond(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(millisecond0);
    boolean boolean0 = timeSeries0.equals(timeSeries0);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test00827() throws Throwable {
    MockDate mockDate0 = new MockDate(0, 45, 0, 0, 0, 0);
    Millisecond millisecond0 = new Millisecond(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(millisecond0);
    boolean boolean0 = timeSeries0.equals(timeSeries0);
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test00928() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.add((RegularTimePeriod) day0, 882.599950745);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test00929() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.add((RegularTimePeriod) day0, 882.599950745);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test00930() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.add((RegularTimePeriod) day0, 882.599950745);
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test00931() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.add((RegularTimePeriod) day0, 882.599950745);
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test01032() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.add((RegularTimePeriod) day0, 718.0, false);
    Number number0 = timeSeries0.getValue((RegularTimePeriod) day0);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public Number getValue(RegularTimePeriod period) {
    int index = getIndex(period);
    if (index >= 0) {
        return getValue(index);
    } else {
        return null;
    }
}","public void test01033() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.add((RegularTimePeriod) day0, 718.0, false);
    Number number0 = timeSeries0.getValue((RegularTimePeriod) day0);
    assertEquals(718.0, number0);
}","/**
 * Returns the value for a time period.  If there is no data item with the
 * specified period, this method will return <code>null</code>.
 *
 * @param period  time period (<code>null</code> not permitted).
 *
 * @return The value (possibly <code>null</code>).
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test01034() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.add((RegularTimePeriod) day0, 718.0, false);
    Number number0 = timeSeries0.getValue((RegularTimePeriod) day0);
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test01036() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.add((RegularTimePeriod) day0, 718.0, false);
    Number number0 = timeSeries0.getValue((RegularTimePeriod) day0);
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test01037() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.add((RegularTimePeriod) day0, 718.0, false);
    Number number0 = timeSeries0.getValue((RegularTimePeriod) day0);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test01138() throws Throwable {
    Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
    TimeSeries timeSeries0 = new TimeSeries(""java.util.TimeZone"", ""java.util.TimeZone"", ""java.util.TimeZone"", class0);
    timeSeries0.getTimePeriodClass();
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test01139() throws Throwable {
    Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
    TimeSeries timeSeries0 = new TimeSeries(""java.util.TimeZone"", ""java.util.TimeZone"", ""java.util.TimeZone"", class0);
    timeSeries0.getTimePeriodClass();
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test01140() throws Throwable {
    Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
    TimeSeries timeSeries0 = new TimeSeries(""java.util.TimeZone"", ""java.util.TimeZone"", ""java.util.TimeZone"", class0);
    timeSeries0.getTimePeriodClass();
    assertEquals(""java.util.TimeZone"", timeSeries0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test01141() throws Throwable {
    Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
    TimeSeries timeSeries0 = new TimeSeries(""java.util.TimeZone"", ""java.util.TimeZone"", ""java.util.TimeZone"", class0);
    timeSeries0.getTimePeriodClass();
    assertEquals(""java.util.TimeZone"", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public int getItemCount() {
    return this.data.size();
}","public void test01242() throws Throwable {
    MockDate mockDate0 = new MockDate();
    TimeZone timeZone0 = TimeZone.getTimeZone(""yehcE"");
    Day day0 = new Day(mockDate0, timeZone0);
    RegularTimePeriod regularTimePeriod0 = day0.previous();
    TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
    timeSeries0.add(regularTimePeriod0, (Number) null);
    timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) null);
    assertEquals(2, timeSeries0.getItemCount());
}","/**
 * Returns the number of items in the series.
 *
 * @return The item count.
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test01243() throws Throwable {
    MockDate mockDate0 = new MockDate();
    TimeZone timeZone0 = TimeZone.getTimeZone(""yehcE"");
    Day day0 = new Day(mockDate0, timeZone0);
    RegularTimePeriod regularTimePeriod0 = day0.previous();
    TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
    timeSeries0.add(regularTimePeriod0, (Number) null);
    timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) null);
    timeSeries0.getTimePeriod(1);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test01344() throws Throwable {
    Minute minute0 = new Minute();
    Class<RegularTimePeriod> class0 = RegularTimePeriod.class;
    TimeSeries timeSeries0 = new TimeSeries(minute0, class0);
    String string0 = timeSeries0.getRangeDescription();
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test01345() throws Throwable {
    Minute minute0 = new Minute();
    Class<RegularTimePeriod> class0 = RegularTimePeriod.class;
    TimeSeries timeSeries0 = new TimeSeries(minute0, class0);
    String string0 = timeSeries0.getRangeDescription();
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test01346() throws Throwable {
    Minute minute0 = new Minute();
    Class<RegularTimePeriod> class0 = RegularTimePeriod.class;
    TimeSeries timeSeries0 = new TimeSeries(minute0, class0);
    String string0 = timeSeries0.getRangeDescription();
    assertEquals(""Value"", string0);
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test01347() throws Throwable {
    Minute minute0 = new Minute();
    Class<RegularTimePeriod> class0 = RegularTimePeriod.class;
    TimeSeries timeSeries0 = new TimeSeries(minute0, class0);
    String string0 = timeSeries0.getRangeDescription();
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test01448() throws Throwable {
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""");
    ParsePosition parsePosition0 = new ParsePosition((-1829));
    Date date0 = mockSimpleDateFormat0.parse("""", parsePosition0);
    Day day0 = new Day(date0);
    Class<TimeSeries> class0 = TimeSeries.class;
    TimeSeries timeSeries0 = new TimeSeries(day0, """", """", class0);
    String string0 = timeSeries0.getRangeDescription();
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test01449() throws Throwable {
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""");
    ParsePosition parsePosition0 = new ParsePosition((-1829));
    Date date0 = mockSimpleDateFormat0.parse("""", parsePosition0);
    Day day0 = new Day(date0);
    Class<TimeSeries> class0 = TimeSeries.class;
    TimeSeries timeSeries0 = new TimeSeries(day0, """", """", class0);
    String string0 = timeSeries0.getRangeDescription();
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test01450() throws Throwable {
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""");
    ParsePosition parsePosition0 = new ParsePosition((-1829));
    Date date0 = mockSimpleDateFormat0.parse("""", parsePosition0);
    Day day0 = new Day(date0);
    Class<TimeSeries> class0 = TimeSeries.class;
    TimeSeries timeSeries0 = new TimeSeries(day0, """", """", class0);
    String string0 = timeSeries0.getRangeDescription();
    assertEquals("""", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test01451() throws Throwable {
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""");
    ParsePosition parsePosition0 = new ParsePosition((-1829));
    Date date0 = mockSimpleDateFormat0.parse("""", parsePosition0);
    Day day0 = new Day(date0);
    Class<TimeSeries> class0 = TimeSeries.class;
    TimeSeries timeSeries0 = new TimeSeries(day0, """", """", class0);
    String string0 = timeSeries0.getRangeDescription();
    assertEquals("""", string0);
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test01552() throws Throwable {
    MockDate mockDate0 = new MockDate();
    TimeZone timeZone0 = TimeZone.getTimeZone(""yehcE"");
    Day day0 = new Day(mockDate0, timeZone0);
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.add((RegularTimePeriod) day0, (Number) null);
    timeSeries0.getNextTimePeriod();
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test01553() throws Throwable {
    MockDate mockDate0 = new MockDate();
    TimeZone timeZone0 = TimeZone.getTimeZone(""yehcE"");
    Day day0 = new Day(mockDate0, timeZone0);
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.add((RegularTimePeriod) day0, (Number) null);
    timeSeries0.getNextTimePeriod();
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test01554() throws Throwable {
    MockDate mockDate0 = new MockDate();
    TimeZone timeZone0 = TimeZone.getTimeZone(""yehcE"");
    Day day0 = new Day(mockDate0, timeZone0);
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.add((RegularTimePeriod) day0, (Number) null);
    timeSeries0.getNextTimePeriod();
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test01555() throws Throwable {
    MockDate mockDate0 = new MockDate();
    TimeZone timeZone0 = TimeZone.getTimeZone(""yehcE"");
    Day day0 = new Day(mockDate0, timeZone0);
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.add((RegularTimePeriod) day0, (Number) null);
    timeSeries0.getNextTimePeriod();
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test01656() throws Throwable {
    Class<String> class0 = String.class;
    Millisecond millisecond0 = new Millisecond();
    TimeSeries timeSeries0 = new TimeSeries(millisecond0, ""-)OJT/."", ""-)OJT/."", class0);
    timeSeries0.setMaximumItemCount(0);
    int int0 = timeSeries0.getMaximumItemCount();
    assertEquals(0, int0);
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public int getItemCount() {
    return this.data.size();
}","public void test01757() throws Throwable {
    Day day0 = new Day();
    Class<Millisecond> class0 = Millisecond.class;
    TimeSeries timeSeries0 = new TimeSeries(day0, class0);
    timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) null);
    int int0 = timeSeries0.getItemCount();
    assertEquals(1, int0);
}","/**
 * Returns the number of items in the series.
 *
 * @return The item count.
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test01858() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.add((RegularTimePeriod) day0, 718.0, false);
    timeSeries0.getIndex(day0);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test01859() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.add((RegularTimePeriod) day0, 718.0, false);
    timeSeries0.getIndex(day0);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test01860() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.add((RegularTimePeriod) day0, 718.0, false);
    timeSeries0.getIndex(day0);
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test01861() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.add((RegularTimePeriod) day0, 718.0, false);
    timeSeries0.getIndex(day0);
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public int getItemCount() {
    return this.data.size();
}","public void test01962() throws Throwable {
    MockDate mockDate0 = new MockDate();
    TimeZone timeZone0 = TimeZone.getTimeZone(""yehcE"");
    Day day0 = new Day(mockDate0, timeZone0);
    RegularTimePeriod regularTimePeriod0 = day0.previous();
    TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
    timeSeries0.add(regularTimePeriod0, (Number) null);
    timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) null);
    int int0 = timeSeries0.getIndex(day0);
    assertEquals(2, timeSeries0.getItemCount());
}","/**
 * Returns the number of items in the series.
 *
 * @return The item count.
 */"
"public int getIndex(RegularTimePeriod period) {
    if (period == null) {
        throw new IllegalArgumentException(""Null 'period' argument."");
    }
    TimeSeriesDataItem dummy = new TimeSeriesDataItem(period, Integer.MIN_VALUE);
    return Collections.binarySearch(this.data, dummy);
}","public void test01963() throws Throwable {
    MockDate mockDate0 = new MockDate();
    TimeZone timeZone0 = TimeZone.getTimeZone(""yehcE"");
    Day day0 = new Day(mockDate0, timeZone0);
    RegularTimePeriod regularTimePeriod0 = day0.previous();
    TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
    timeSeries0.add(regularTimePeriod0, (Number) null);
    timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) null);
    int int0 = timeSeries0.getIndex(day0);
    assertEquals(1, int0);
}","/**
 * Returns the index for the item (if any) that corresponds to a time
 * period.
 *
 * @param period  the time period (<code>null</code> not permitted).
 *
 * @return The index.
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test02064() throws Throwable {
    Month month0 = new Month();
    Class<Year> class0 = Year.class;
    TimeSeries timeSeries0 = new TimeSeries(month0, """", """", class0);
    String string0 = timeSeries0.getDomainDescription();
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test02065() throws Throwable {
    Month month0 = new Month();
    Class<Year> class0 = Year.class;
    TimeSeries timeSeries0 = new TimeSeries(month0, """", """", class0);
    String string0 = timeSeries0.getDomainDescription();
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test02066() throws Throwable {
    Month month0 = new Month();
    Class<Year> class0 = Year.class;
    TimeSeries timeSeries0 = new TimeSeries(month0, """", """", class0);
    String string0 = timeSeries0.getDomainDescription();
    assertEquals("""", string0);
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test02067() throws Throwable {
    Month month0 = new Month();
    Class<Year> class0 = Year.class;
    TimeSeries timeSeries0 = new TimeSeries(month0, """", """", class0);
    String string0 = timeSeries0.getDomainDescription();
    assertEquals("""", timeSeries0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test02168() throws Throwable {
    MockDate mockDate0 = new MockDate(0, 45, 0, 1525, 1525, 1525);
    Millisecond millisecond0 = new Millisecond(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(millisecond0);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test02169() throws Throwable {
    MockDate mockDate0 = new MockDate(0, 45, 0, 1525, 1525, 1525);
    Millisecond millisecond0 = new Millisecond(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(millisecond0);
    timeSeries0.setMaximumItemAge(0L);
    timeSeries0.createCopy((RegularTimePeriod) millisecond0, (RegularTimePeriod) millisecond0);
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public int getItemCount() {
    return this.data.size();
}","public void test02270() throws Throwable {
    MockDate mockDate0 = new MockDate();
    TimeZone timeZone0 = TimeZone.getTimeZone(""yehcE"");
    Day day0 = new Day(mockDate0, timeZone0);
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.add((RegularTimePeriod) day0, (Number) null);
    timeSeries0.createCopy((RegularTimePeriod) day0, (RegularTimePeriod) day0);
    assertEquals(1, timeSeries0.getItemCount());
}","/**
 * Returns the number of items in the series.
 *
 * @return The item count.
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test02371() throws Throwable {
    Class<String> class0 = String.class;
    Millisecond millisecond0 = new Millisecond();
    TimeSeries timeSeries0 = new TimeSeries(millisecond0, ""-)OJT/."", ""-)OJT/."", class0);
    timeSeries0.setMaximumItemCount(0);
    timeSeries0.createCopy(0, 999);
    assertEquals(0, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public TimeSeries createCopy(int start, int end) throws CloneNotSupportedException {
    if (start < 0) {
        throw new IllegalArgumentException(""Requires start >= 0."");
    }
    if (end < start) {
        throw new IllegalArgumentException(""Requires start <= end."");
    }
    TimeSeries copy = (TimeSeries) super.clone();
    copy.data = new java.util.ArrayList();
    if (this.data.size() > 0) {
        for (int index = start; index <= end; index++) {
            TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(index);
            TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();
            try {
                copy.add(clone);
            } catch (SeriesException e) {
                e.printStackTrace();
            }
        }
    }
    return copy;
}","public void test02473() throws Throwable {
    MockDate mockDate0 = new MockDate(0, 45, 0, 1525, 1525, 1525);
    Millisecond millisecond0 = new Millisecond(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(millisecond0);
    timeSeries0.setMaximumItemAge(0L);
    TimeSeries timeSeries1 = timeSeries0.createCopy(0, 2958489);
    assertNotSame(timeSeries0, timeSeries1);
}","/**
 * Creates a new timeseries by copying a subset of the data in this time
 * series.
 *
 * @param start  the index of the first time period to copy.
 * @param end  the index of the last time period to copy.
 *
 * @return A series containing a copy of this times series from start until
 *         end.
 *
 * @throws CloneNotSupportedException if there is a cloning problem.
 */"
"public int getItemCount() {
    return this.data.size();
}","public void test02574() throws Throwable {
    MockDate mockDate0 = new MockDate(0, 45, 0, 1525, 1525, 1525);
    Millisecond millisecond0 = new Millisecond(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(millisecond0);
    timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, (-380.28592));
    Second second0 = millisecond0.getSecond();
    timeSeries0.addOrUpdate((RegularTimePeriod) second0, 0.0);
    assertEquals(1, timeSeries0.getItemCount());
}","/**
 * Returns the number of items in the series.
 *
 * @return The item count.
 */"
"public void update(RegularTimePeriod period, Number value) {
    TimeSeriesDataItem temp = new TimeSeriesDataItem(period, value);
    int index = Collections.binarySearch(this.data, temp);
    if (index >= 0) {
        TimeSeriesDataItem pair = (TimeSeriesDataItem) this.data.get(index);
        pair.setValue(value);
        fireSeriesChanged();
    } else {
        throw new SeriesException(""TimeSeries.update(TimePeriod, Number):  period does not exist."");
    }
}","public void test02675() throws Throwable {
    Class<String> class0 = String.class;
    TimeSeries timeSeries0 = new TimeSeries(""b"", """", ""b"", class0);
    // Undeclared exception!
    try {
        timeSeries0.update((RegularTimePeriod) null, (Number) 23);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'period' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeriesDataItem"", e);
    }
}","/**
 * Updates (changes) the value for a time period.  Throws a
 * {@link SeriesException} if the period does not exist.
 *
 * @param period  the period (<code>null</code> not permitted).
 * @param value  the value (<code>null</code> permitted).
 */"
"public void update(int index, Number value) {
    TimeSeriesDataItem item = getDataItem(index);
    item.setValue(value);
    fireSeriesChanged();
}","public void test02776() throws Throwable {
    MockDate mockDate0 = new MockDate(0, 45, 0, 1525, 1525, 1525);
    Millisecond millisecond0 = new Millisecond(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(millisecond0);
    Stack<Millisecond> stack0 = new Stack<Millisecond>();
    timeSeries0.data = (List) stack0;
    // Undeclared exception!
    try {
        timeSeries0.update(445, (Number) 0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // Array index out of range: 445
        //
        verifyException(""java.util.Vector"", e);
    }
}","/**
 * Updates (changes) the value of a data item.
 *
 * @param index  the index of the data item.
 * @param value  the new value (<code>null</code> permitted).
 */"
"public void removeAgedItems(long latest, boolean notify) {
    // find the serial index of the period specified by 'latest'
    long index = Long.MAX_VALUE;
    try {
        Method m = RegularTimePeriod.class.getDeclaredMethod(""createInstance"", new Class[] { Class.class, Date.class, TimeZone.class });
        RegularTimePeriod newest = (RegularTimePeriod) m.invoke(this.timePeriodClass, new Object[] { this.timePeriodClass, new Date(latest), TimeZone.getDefault() });
        index = newest.getSerialIndex();
    } catch (NoSuchMethodException e) {
        e.printStackTrace();
    } catch (IllegalAccessException e) {
        e.printStackTrace();
    } catch (InvocationTargetException e) {
        e.printStackTrace();
    }
    // check if there are any values earlier than specified by the history
    // count...
    boolean removed = false;
    while (getItemCount() > 0 && (index - getTimePeriod(0).getSerialIndex()) > this.maximumItemAge) {
        this.data.remove(0);
        removed = true;
    }
    if (removed && notify) {
        fireSeriesChanged();
    }
}","public void test02877() throws Throwable {
    Class<String> class0 = String.class;
    Millisecond millisecond0 = new Millisecond();
    TimeSeries timeSeries0 = new TimeSeries(millisecond0, ""-)OJT/."", ""-)OJT/."", class0);
    // Undeclared exception!
    try {
        timeSeries0.removeAgedItems((long) 0, true);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}","/**
 * Age items in the series.  Ensure that the timespan from the supplied
 * time to the oldest record in the series does not exceed history count.
 * oldest items will be removed if required.
 *
 * @param latest  the time to be compared against when aging data
 *     (specified in milliseconds).
 * @param notify  controls whether or not a {@link SeriesChangeEvent} is
 *                sent to registered listeners IF any items are removed.
 */"
"public Number getValue(int index) {
    return getDataItem(index).getValue();
}","public void test02978() throws Throwable {
    MockDate mockDate0 = new MockDate((-507), (-507), 0);
    Quarter quarter0 = new Quarter(mockDate0);
    Class<Week> class0 = Week.class;
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""Requires start >= 0."", ""You are attempting to add an observation for "", class0);
    // Undeclared exception!
    try {
        timeSeries0.getValue((-279));
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * Returns the value at the specified index.
 *
 * @param index  index of a value.
 *
 * @return The value (possibly <code>null</code>).
 */"
"public Collection getTimePeriodsUniqueToOtherSeries(TimeSeries series) {
    Collection result = new java.util.ArrayList();
    for (int i = 0; i < series.getItemCount(); i++) {
        RegularTimePeriod period = series.getTimePeriod(i);
        int index = getIndex(period);
        if (index < 0) {
            result.add(period);
        }
    }
    return result;
}","public void test03079() throws Throwable {
    MockDate mockDate0 = new MockDate(45, 0, 0, 1525, 45);
    Millisecond millisecond0 = new Millisecond(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(millisecond0);
    Second second0 = millisecond0.getSecond();
    timeSeries0.addOrUpdate((RegularTimePeriod) second0, (double) 0);
    TimeSeries timeSeries1 = (TimeSeries) timeSeries0.clone();
    timeSeries1.data = null;
    // Undeclared exception!
    try {
        timeSeries1.getTimePeriodsUniqueToOtherSeries(timeSeries0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.Collections"", e);
    }
}","/**
 * Returns a collection of time periods in the specified series, but not in
 * this series, and therefore unique to the specified series.
 *
 * @param series  the series to check against this one.
 *
 * @return The unique time periods.
 */"
"public RegularTimePeriod getTimePeriod(int index) {
    return getDataItem(index).getPeriod();
}","public void test03180() throws Throwable {
    Quarter quarter0 = new Quarter();
    Class<TimeSeries> class0 = TimeSeries.class;
    TimeSeries timeSeries0 = new TimeSeries(quarter0, class0);
    // Undeclared exception!
    try {
        timeSeries0.getTimePeriod((-161));
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * Returns the time period at the specified index.
 *
 * @param index  the index of the data item.
 *
 * @return The time period.
 */"
"public RegularTimePeriod getNextTimePeriod() {
    RegularTimePeriod last = getTimePeriod(getItemCount() - 1);
    return last.next();
}","public void test03281() throws Throwable {
    Minute minute0 = new Minute();
    TimeSeries timeSeries0 = new TimeSeries(minute0);
    LinkedList<Minute> linkedList0 = new LinkedList<Minute>();
    timeSeries0.data = (List) linkedList0;
    // Undeclared exception!
    try {
        timeSeries0.getNextTimePeriod();
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: -1, Size: 0
        //
        verifyException(""java.util.LinkedList"", e);
    }
}","/**
 * Returns a time period that would be the next in sequence on the end of
 * the time series.
 *
 * @return The next time period.
 */"
"public TimeSeriesDataItem getDataItem(RegularTimePeriod period) {
    int index = getIndex(period);
    if (index >= 0) {
        return (TimeSeriesDataItem) this.data.get(index);
    } else {
        return null;
    }
}","public void test03382() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofHours(0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
    Date date0 = mockGregorianCalendar0.getGregorianChange();
    Month month0 = new Month(date0);
    Class<Hour> class0 = Hour.class;
    TimeSeries timeSeries0 = new TimeSeries(month0, """", """", class0);
    // Undeclared exception!
    try {
        timeSeries0.getDataItem((RegularTimePeriod) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'period' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}","/**
 * Returns the data item for a specific period.
 *
 * @param period  the period of interest (<code>null</code> not allowed).
 *
 * @return The data item matching the specified period (or
 *         <code>null</code> if there is no match).
 *
 * @see #getDataItem(int)
 */"
"public TimeSeriesDataItem getDataItem(int index) {
    return (TimeSeriesDataItem) this.data.get(index);
}","public void test03483() throws Throwable {
    Integer integer0 = JLayeredPane.DEFAULT_LAYER;
    Class<Minute> class0 = Minute.class;
    TimeSeries timeSeries0 = new TimeSeries(integer0, """", ""^"", class0);
    // Undeclared exception!
    try {
        timeSeries0.getDataItem((-1));
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * Returns a data item for the series.
 *
 * @param index  the item index (zero-based).
 *
 * @return The data item.
 *
 * @see #getDataItem(RegularTimePeriod)
 */"
"public void delete(RegularTimePeriod period) {
    int index = getIndex(period);
    if (index >= 0) {
        this.data.remove(index);
        fireSeriesChanged();
    }
}","public void test03584() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    // Undeclared exception!
    try {
        timeSeries0.delete((RegularTimePeriod) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'period' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}","/**
 * Deletes the data item for the given time period and sends a
 * {@link SeriesChangeEvent} to all registered listeners.  If there is no
 * item with the specified time period, this method does nothing.
 *
 * @param period  the period of the item to delete (<code>null</code> not
 *                permitted).
 */"
"public void delete(int start, int end) {
    if (end < start) {
        throw new IllegalArgumentException(""Requires start <= end."");
    }
    for (int i = 0; i <= (end - start); i++) {
        this.data.remove(start);
    }
    fireSeriesChanged();
}","public void test03685() throws Throwable {
    Minute minute0 = new Minute();
    Class<Second> class0 = Second.class;
    TimeSeries timeSeries0 = new TimeSeries(minute0, class0);
    // Undeclared exception!
    try {
        timeSeries0.delete((-963), 970);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * Deletes data from start until end index (end inclusive).
 *
 * @param start  the index of the first period to delete.
 * @param end  the index of the last period to delete.
 */"
"public TimeSeriesDataItem addOrUpdate(RegularTimePeriod period, double value) {
    return this.addOrUpdate(period, new Double(value));
}","public void test03786() throws Throwable {
    MockDate mockDate0 = new MockDate((-4654));
    SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(serialDate0);
    // Undeclared exception!
    try {
        timeSeries0.addOrUpdate((RegularTimePeriod) null, (double) 2958465);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'period' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}","/**
 * Adds or updates an item in the times series and sends a
 * {@link org.jfree.data.general.SeriesChangeEvent} to all registered
 * listeners.
 *
 * @param period  the time period to add/update (<code>null</code> not
 *                permitted).
 * @param value  the new value.
 *
 * @return A copy of the overwritten data item, or <code>null</code> if no
 *         item was overwritten.
 */"
"public TimeSeries addAndOrUpdate(TimeSeries series) {
    TimeSeries overwritten = new TimeSeries(""Overwritten values from: "" + getKey(), series.getTimePeriodClass());
    for (int i = 0; i < series.getItemCount(); i++) {
        TimeSeriesDataItem item = series.getDataItem(i);
        TimeSeriesDataItem oldItem = addOrUpdate(item.getPeriod(), item.getValue());
        if (oldItem != null) {
            overwritten.add(oldItem);
        }
    }
    return overwritten;
}","public void test03887() throws Throwable {
    Class<String> class0 = String.class;
    Millisecond millisecond0 = new Millisecond();
    TimeSeries timeSeries0 = new TimeSeries(millisecond0, ""-)OJT/."", ""-)OJT/."", class0);
    // Undeclared exception!
    try {
        timeSeries0.addAndOrUpdate((TimeSeries) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}","/**
 * Adds or updates data from one series to another.  Returns another series
 * containing the values that were overwritten.
 *
 * @param series  the series to merge with this.
 *
 * @return A series containing the values that were overwritten.
 */"
"public void add(TimeSeriesDataItem item) {
    add(item, true);
}","public void test03988() throws Throwable {
    MockDate mockDate0 = new MockDate(0, 0, 0, 0, 0);
    TimeZone timeZone0 = TimeZone.getDefault();
    Quarter quarter0 = new Quarter(mockDate0, timeZone0);
    TimeSeries timeSeries0 = new TimeSeries(quarter0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) quarter0, (Number) 1);
    // Undeclared exception!
    try {
        timeSeries0.add(timeSeriesDataItem0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // You are trying to add data where the time period class is org.jfree.data.time.Quarter, but the TimeSeries is expecting an instance of org.jfree.data.time.Day.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}","/**
 * Adds a data item to the series and sends a
 * {@link org.jfree.data.general.SeriesChangeEvent} to all registered
 * listeners.
 *
 * @param item  the (timeperiod, value) pair (<code>null</code> not
 *              permitted).
 */"
"public void add(TimeSeriesDataItem item) {
    add(item, true);
}","public void test04089() throws Throwable {
    Month month0 = new Month(2, (-4399));
    Class<Week> class0 = Week.class;
    TimeSeries timeSeries0 = new TimeSeries(month0, ""BdJ{+$"", ""W~B4\""g?V.YjTJ@!}F7"", class0);
    // Undeclared exception!
    try {
        timeSeries0.add((TimeSeriesDataItem) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'item' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}","/**
 * Adds a data item to the series and sends a
 * {@link org.jfree.data.general.SeriesChangeEvent} to all registered
 * listeners.
 *
 * @param item  the (timeperiod, value) pair (<code>null</code> not
 *              permitted).
 */"
"public void add(RegularTimePeriod period, Number value, boolean notify) {
    // defer argument checking...
    TimeSeriesDataItem item = new TimeSeriesDataItem(period, value);
    add(item, notify);
}","public void test04190() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
    Class<Millisecond> class0 = Millisecond.class;
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, (String) null, ""1\""T\""ptclv%"", class0);
    Integer integer0 = new Integer((-24));
    // Undeclared exception!
    try {
        timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) integer0, false);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // You are trying to add data where the time period class is org.jfree.data.time.FixedMillisecond, but the TimeSeries is expecting an instance of org.jfree.data.time.Millisecond.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}","/**
 * Adds a new data item to the series and sends
 * a {@link org.jfree.data.general.SeriesChangeEvent} to all registered
 * listeners.
 *
 * @param period  the time period (<code>null</code> not permitted).
 * @param value  the value (<code>null</code> permitted).
 * @param notify  notify listeners?
 */"
"public void add(RegularTimePeriod period, Number value) {
    // defer argument checking...
    add(period, value, true);
}","public void test04291() throws Throwable {
    Minute minute0 = new Minute();
    TimeSeries timeSeries0 = new TimeSeries(minute0);
    // Undeclared exception!
    try {
        timeSeries0.add((RegularTimePeriod) minute0, (Number) 59);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // You are trying to add data where the time period class is org.jfree.data.time.Minute, but the TimeSeries is expecting an instance of org.jfree.data.time.Day.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}","/**
 * Adds a new data item to the series and sends
 * a {@link org.jfree.data.general.SeriesChangeEvent} to all registered
 * listeners.
 *
 * @param period  the time period (<code>null</code> not permitted).
 * @param value  the value (<code>null</code> permitted).
 */"
"public void add(RegularTimePeriod period, Number value) {
    // defer argument checking...
    add(period, value, true);
}","public void test04392() throws Throwable {
    SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-1.0), Double.POSITIVE_INFINITY);
    Class<Day> class0 = Day.class;
    TimeSeries timeSeries0 = new TimeSeries(simpleHistogramBin0, class0);
    Short short0 = new Short((short) 0);
    // Undeclared exception!
    try {
        timeSeries0.add((RegularTimePeriod) null, (Number) short0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'period' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeriesDataItem"", e);
    }
}","/**
 * Adds a new data item to the series and sends
 * a {@link org.jfree.data.general.SeriesChangeEvent} to all registered
 * listeners.
 *
 * @param period  the time period (<code>null</code> not permitted).
 * @param value  the value (<code>null</code> permitted).
 */"
"public void add(RegularTimePeriod period, double value) {
    // defer argument checking...
    add(period, value, true);
}","public void test04493() throws Throwable {
    TimeSeries timeSeries0 = new TimeSeries(""vX{{15"");
    // Undeclared exception!
    try {
        timeSeries0.add((RegularTimePeriod) null, 0.0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'period' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeriesDataItem"", e);
    }
}","/**
 * Adds a new data item to the series and sends a {@link SeriesChangeEvent}
 * to all registered listeners.
 *
 * @param period  the time period (<code>null</code> not permitted).
 * @param value  the value.
 */"
"public TimeSeries(Comparable name, String domain, String range, Class timePeriodClass) {
    super(name);
    this.domain = domain;
    this.range = range;
    this.timePeriodClass = timePeriodClass;
    this.data = new java.util.ArrayList();
    this.maximumItemCount = Integer.MAX_VALUE;
    this.maximumItemAge = Long.MAX_VALUE;
}","public void test04594() throws Throwable {
    Class<Year> class0 = Year.class;
    TimeSeries timeSeries0 = null;
    try {
        timeSeries0 = new TimeSeries((Comparable) null, ""Requires start on or before end."", ""You are trying to add data where the time period class "", class0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'key' argument.
        //
        verifyException(""org.jfree.data.general.Series"", e);
    }
}","/**
 * Creates a new time series that contains no data.
 * <P>
 * Descriptions can be specified for the domain and range.  One situation
 * where this is helpful is when generating a chart for the time series -
 * axis labels can be taken from the domain and range description.
 *
 * @param name  the name of the series (<code>null</code> not permitted).
 * @param domain  the domain description (<code>null</code> permitted).
 * @param range  the range description (<code>null</code> permitted).
 * @param timePeriodClass  the type of time period (<code>null</code> not
 *                         permitted).
 */"
"public TimeSeries(Comparable name, Class timePeriodClass) {
    this(name, DEFAULT_DOMAIN_DESCRIPTION, DEFAULT_RANGE_DESCRIPTION, timePeriodClass);
}","public void test04695() throws Throwable {
    Class<Panel> class0 = Panel.class;
    TimeSeries timeSeries0 = null;
    try {
        timeSeries0 = new TimeSeries((Comparable) null, class0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'key' argument.
        //
        verifyException(""org.jfree.data.general.Series"", e);
    }
}","/**
 * Creates a new (empty) time series with the specified name and class
 * of {@link RegularTimePeriod}.
 *
 * @param name  the series name (<code>null</code> not permitted).
 * @param timePeriodClass  the type of time period (<code>null</code> not
 *                         permitted).
 */"
"public TimeSeries(Comparable name) {
    this(name, DEFAULT_DOMAIN_DESCRIPTION, DEFAULT_RANGE_DESCRIPTION, Day.class);
}","public void test04796() throws Throwable {
    TimeSeries timeSeries0 = null;
    try {
        timeSeries0 = new TimeSeries((Comparable) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'key' argument.
        //
        verifyException(""org.jfree.data.general.Series"", e);
    }
}","/**
 * Creates a new (empty) time series.  By default, a daily time series is
 * created.  Use one of the other constructors if you require a different
 * time period.
 *
 * @param name  the series name (<code>null</code> not permitted).
 */"
"public TimeSeries createCopy(int start, int end) throws CloneNotSupportedException {
    if (start < 0) {
        throw new IllegalArgumentException(""Requires start >= 0."");
    }
    if (end < start) {
        throw new IllegalArgumentException(""Requires start <= end."");
    }
    TimeSeries copy = (TimeSeries) super.clone();
    copy.data = new java.util.ArrayList();
    if (this.data.size() > 0) {
        for (int index = start; index <= end; index++) {
            TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(index);
            TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();
            try {
                copy.add(clone);
            } catch (SeriesException e) {
                e.printStackTrace();
            }
        }
    }
    return copy;
}","public void test04897() throws Throwable {
    MockDate mockDate0 = new MockDate(0, 45, 0, 1525, 1525, 1525);
    Millisecond millisecond0 = new Millisecond(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(millisecond0);
    Second second0 = millisecond0.getSecond();
    timeSeries0.addOrUpdate((RegularTimePeriod) second0, 0.0);
    // Undeclared exception!
    try {
        timeSeries0.createCopy(45, 640);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 45, Size: 1
        //
        verifyException(""java.util.ArrayList"", e);
    }
}","/**
 * Creates a new timeseries by copying a subset of the data in this time
 * series.
 *
 * @param start  the index of the first time period to copy.
 * @param end  the index of the last time period to copy.
 *
 * @return A series containing a copy of this times series from start until
 *         end.
 *
 * @throws CloneNotSupportedException if there is a cloning problem.
 */"
"public TimeSeries createCopy(int start, int end) throws CloneNotSupportedException {
    if (start < 0) {
        throw new IllegalArgumentException(""Requires start >= 0."");
    }
    if (end < start) {
        throw new IllegalArgumentException(""Requires start <= end."");
    }
    TimeSeries copy = (TimeSeries) super.clone();
    copy.data = new java.util.ArrayList();
    if (this.data.size() > 0) {
        for (int index = start; index <= end; index++) {
            TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(index);
            TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();
            try {
                copy.add(clone);
            } catch (SeriesException e) {
                e.printStackTrace();
            }
        }
    }
    return copy;
}","public void test04998() throws Throwable {
    MockDate mockDate0 = new MockDate(1293, 716, 917);
    Minute minute0 = new Minute(mockDate0);
    Day day0 = minute0.getDay();
    Class<Quarter> class0 = Quarter.class;
    TimeSeries timeSeries0 = new TimeSeries(day0, class0);
    // Undeclared exception!
    try {
        timeSeries0.createCopy(1293, 439);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Requires start <= end.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}","/**
 * Creates a new timeseries by copying a subset of the data in this time
 * series.
 *
 * @param start  the index of the first time period to copy.
 * @param end  the index of the last time period to copy.
 *
 * @return A series containing a copy of this times series from start until
 *         end.
 *
 * @throws CloneNotSupportedException if there is a cloning problem.
 */"
"public void delete(int start, int end) {
    if (end < start) {
        throw new IllegalArgumentException(""Requires start <= end."");
    }
    for (int i = 0; i <= (end - start); i++) {
        this.data.remove(start);
    }
    fireSeriesChanged();
}","public void test05099() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    // Undeclared exception!
    try {
        timeSeries0.delete(2958465, 2958465);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 2958465, Size: 0
        //
        verifyException(""java.util.ArrayList"", e);
    }
}","/**
 * Deletes data from start until end index (end inclusive).
 *
 * @param start  the index of the first period to delete.
 * @param end  the index of the last period to delete.
 */"
"public int getItemCount() {
    return this.data.size();
}","public void test051100() throws Throwable {
    MockDate mockDate0 = new MockDate();
    TimeZone timeZone0 = TimeZone.getTimeZone(""yehcE"");
    Day day0 = new Day(mockDate0, timeZone0);
    RegularTimePeriod regularTimePeriod0 = day0.previous();
    TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
    timeSeries0.add(regularTimePeriod0, (Number) null);
    timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) null);
    timeSeries0.removeAgedItems(false);
    assertEquals(2, timeSeries0.getItemCount());
}","/**
 * Returns the number of items in the series.
 *
 * @return The item count.
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test052101() throws Throwable {
    Minute minute0 = new Minute();
    Class<String> class0 = String.class;
    TimeSeries timeSeries0 = new TimeSeries(minute0, ""Null 'serialDate' argument."", (String) null, class0);
    timeSeries0.removeAgedItems(false);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test052102() throws Throwable {
    Minute minute0 = new Minute();
    Class<String> class0 = String.class;
    TimeSeries timeSeries0 = new TimeSeries(minute0, ""Null 'serialDate' argument."", (String) null, class0);
    timeSeries0.removeAgedItems(false);
    assertEquals(""Null 'serialDate' argument."", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test052103() throws Throwable {
    Minute minute0 = new Minute();
    Class<String> class0 = String.class;
    TimeSeries timeSeries0 = new TimeSeries(minute0, ""Null 'serialDate' argument."", (String) null, class0);
    timeSeries0.removeAgedItems(false);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test053104() throws Throwable {
    Class<String> class0 = String.class;
    Millisecond millisecond0 = new Millisecond();
    TimeSeries timeSeries0 = new TimeSeries(millisecond0, ""-)OJT/."", ""-)OJT/."", class0);
    timeSeries0.setMaximumItemCount(0);
    timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, (Number) 999);
    assertEquals(0, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public void add(TimeSeriesDataItem item, boolean notify) {
    if (item == null) {
        throw new IllegalArgumentException(""Null 'item' argument."");
    }
    if (!item.getPeriod().getClass().equals(this.timePeriodClass)) {
        StringBuffer b = new StringBuffer();
        b.append(""You are trying to add data where the time period class "");
        b.append(""is "");
        b.append(item.getPeriod().getClass().getName());
        b.append("", but the TimeSeries is expecting an instance of "");
        b.append(this.timePeriodClass.getName());
        b.append(""."");
        throw new SeriesException(b.toString());
    }
    // make the change (if it's not a duplicate time period)...
    boolean added = false;
    int count = getItemCount();
    if (count == 0) {
        this.data.add(item);
        added = true;
    } else {
        RegularTimePeriod last = getTimePeriod(getItemCount() - 1);
        if (item.getPeriod().compareTo(last) > 0) {
            this.data.add(item);
            added = true;
        } else {
            int index = Collections.binarySearch(this.data, item);
            if (index < 0) {
                this.data.add(-index - 1, item);
                added = true;
            } else {
                StringBuffer b = new StringBuffer();
                b.append(""You are attempting to add an observation for "");
                b.append(""the time period "");
                b.append(item.getPeriod().toString());
                b.append("" but the series already contains an observation"");
                b.append("" for that time period. Duplicates are not "");
                b.append(""permitted.  Try using the addOrUpdate() method."");
                throw new SeriesException(b.toString());
            }
        }
    }
    if (added) {
        // check if this addition will exceed the maximum item count...
        if (getItemCount() > this.maximumItemCount) {
            this.data.remove(0);
        }
        // remove old items if necessary, but
        removeAgedItems(false);
        // don't notify anyone, because that
        // happens next anyway...
        if (notify) {
            fireSeriesChanged();
        }
    }
}","public void test054105() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond(12L);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) fixedMillisecond0, (-1035.328606761431));
    Class<Integer> class0 = Integer.class;
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0, ""Negative 'maximum' argument."", """", class0);
    // Undeclared exception!
    try {
        timeSeries0.add(timeSeriesDataItem0, true);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // You are trying to add data where the time period class is org.jfree.data.time.FixedMillisecond, but the TimeSeries is expecting an instance of java.lang.Integer.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}","/**
 * Adds a data item to the series and sends a
 * {@link org.jfree.data.general.SeriesChangeEvent} to all registered
 * listeners.
 *
 * @param item  the (timeperiod, value) pair (<code>null</code> not
 *              permitted).
 * @param notify  notify listeners?
 */"
"public int getIndex(RegularTimePeriod period) {
    if (period == null) {
        throw new IllegalArgumentException(""Null 'period' argument."");
    }
    TimeSeriesDataItem dummy = new TimeSeriesDataItem(period, Integer.MIN_VALUE);
    return Collections.binarySearch(this.data, dummy);
}","public void test055106() throws Throwable {
    TimeSeries timeSeries0 = new TimeSeries(""h"");
    // Undeclared exception!
    try {
        timeSeries0.getIndex((RegularTimePeriod) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'period' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}","/**
 * Returns the index for the item (if any) that corresponds to a time
 * period.
 *
 * @param period  the time period (<code>null</code> not permitted).
 *
 * @return The index.
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test056107() throws Throwable {
    Clock clock0 = MockClock.systemUTC();
    Instant instant0 = MockInstant.now(clock0);
    Date date0 = Date.from(instant0);
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    timeSeries0.getIndex(fixedMillisecond0);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test056108() throws Throwable {
    Clock clock0 = MockClock.systemUTC();
    Instant instant0 = MockInstant.now(clock0);
    Date date0 = Date.from(instant0);
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    timeSeries0.getIndex(fixedMillisecond0);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test056109() throws Throwable {
    Clock clock0 = MockClock.systemUTC();
    Instant instant0 = MockInstant.now(clock0);
    Date date0 = Date.from(instant0);
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    timeSeries0.getIndex(fixedMillisecond0);
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test056110() throws Throwable {
    Clock clock0 = MockClock.systemUTC();
    Instant instant0 = MockInstant.now(clock0);
    Date date0 = Date.from(instant0);
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    timeSeries0.getIndex(fixedMillisecond0);
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test057111() throws Throwable {
    Class<Second> class0 = Second.class;
    TimeSeries timeSeries0 = new TimeSeries(""w[I"", ""w[I"", (String) null, class0);
    timeSeries0.getTimePeriodClass();
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test057112() throws Throwable {
    Class<Second> class0 = Second.class;
    TimeSeries timeSeries0 = new TimeSeries(""w[I"", ""w[I"", (String) null, class0);
    timeSeries0.getTimePeriodClass();
    assertEquals(""w[I"", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test057113() throws Throwable {
    Class<Second> class0 = Second.class;
    TimeSeries timeSeries0 = new TimeSeries(""w[I"", ""w[I"", (String) null, class0);
    timeSeries0.getTimePeriodClass();
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test058114() throws Throwable {
    Class<String> class0 = String.class;
    Millisecond millisecond0 = new Millisecond();
    TimeSeries timeSeries0 = new TimeSeries(millisecond0, ""-)OJT/."", ""-)OJT/."", class0);
    int int0 = timeSeries0.getMaximumItemCount();
    assertEquals(""-)OJT/."", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test058115() throws Throwable {
    Class<String> class0 = String.class;
    Millisecond millisecond0 = new Millisecond();
    TimeSeries timeSeries0 = new TimeSeries(millisecond0, ""-)OJT/."", ""-)OJT/."", class0);
    int int0 = timeSeries0.getMaximumItemCount();
    assertEquals(""-)OJT/."", timeSeries0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test058116() throws Throwable {
    Class<String> class0 = String.class;
    Millisecond millisecond0 = new Millisecond();
    TimeSeries timeSeries0 = new TimeSeries(millisecond0, ""-)OJT/."", ""-)OJT/."", class0);
    int int0 = timeSeries0.getMaximumItemCount();
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test058117() throws Throwable {
    Class<String> class0 = String.class;
    Millisecond millisecond0 = new Millisecond();
    TimeSeries timeSeries0 = new TimeSeries(millisecond0, ""-)OJT/."", ""-)OJT/."", class0);
    int int0 = timeSeries0.getMaximumItemCount();
    assertEquals(Integer.MAX_VALUE, int0);
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test059118() throws Throwable {
    Day day0 = new Day();
    Class<Millisecond> class0 = Millisecond.class;
    TimeSeries timeSeries0 = new TimeSeries(day0, class0);
    long long0 = timeSeries0.getMaximumItemAge();
    assertEquals(9223372036854775807L, long0);
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test059119() throws Throwable {
    Day day0 = new Day();
    Class<Millisecond> class0 = Millisecond.class;
    TimeSeries timeSeries0 = new TimeSeries(day0, class0);
    long long0 = timeSeries0.getMaximumItemAge();
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test059120() throws Throwable {
    Day day0 = new Day();
    Class<Millisecond> class0 = Millisecond.class;
    TimeSeries timeSeries0 = new TimeSeries(day0, class0);
    long long0 = timeSeries0.getMaximumItemAge();
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test059121() throws Throwable {
    Day day0 = new Day();
    Class<Millisecond> class0 = Millisecond.class;
    TimeSeries timeSeries0 = new TimeSeries(day0, class0);
    long long0 = timeSeries0.getMaximumItemAge();
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test060122() throws Throwable {
    Integer integer0 = JLayeredPane.DEFAULT_LAYER;
    Class<Object> class0 = Object.class;
    TimeSeries timeSeries0 = new TimeSeries(integer0, """", (String) null, class0);
    String string0 = timeSeries0.getRangeDescription();
    assertNull(string0);
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test060123() throws Throwable {
    Integer integer0 = JLayeredPane.DEFAULT_LAYER;
    Class<Object> class0 = Object.class;
    TimeSeries timeSeries0 = new TimeSeries(integer0, """", (String) null, class0);
    String string0 = timeSeries0.getRangeDescription();
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test060124() throws Throwable {
    Integer integer0 = JLayeredPane.DEFAULT_LAYER;
    Class<Object> class0 = Object.class;
    TimeSeries timeSeries0 = new TimeSeries(integer0, """", (String) null, class0);
    String string0 = timeSeries0.getRangeDescription();
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test060125() throws Throwable {
    Integer integer0 = JLayeredPane.DEFAULT_LAYER;
    Class<Object> class0 = Object.class;
    TimeSeries timeSeries0 = new TimeSeries(integer0, """", (String) null, class0);
    String string0 = timeSeries0.getRangeDescription();
    assertEquals("""", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public Number getValue(int index) {
    return getDataItem(index).getValue();
}","public void test061126() throws Throwable {
    TimeSeries timeSeries0 = new TimeSeries(""WN"");
    // Undeclared exception!
    try {
        timeSeries0.getValue(0);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 0, Size: 0
        //
        verifyException(""java.util.ArrayList"", e);
    }
}","/**
 * Returns the value at the specified index.
 *
 * @param index  index of a value.
 *
 * @return The value (possibly <code>null</code>).
 */"
"public void add(RegularTimePeriod period, Number value, boolean notify) {
    // defer argument checking...
    TimeSeriesDataItem item = new TimeSeriesDataItem(period, value);
    add(item, notify);
}","public void test062127() throws Throwable {
    Class<String> class0 = String.class;
    Millisecond millisecond0 = new Millisecond();
    TimeSeries timeSeries0 = new TimeSeries(millisecond0, ""-)OJT/."", ""-)OJT/."", class0);
    // Undeclared exception!
    try {
        timeSeries0.add((RegularTimePeriod) null, (Number) 999, true);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'period' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeriesDataItem"", e);
    }
}","/**
 * Adds a new data item to the series and sends
 * a {@link org.jfree.data.general.SeriesChangeEvent} to all registered
 * listeners.
 *
 * @param period  the time period (<code>null</code> not permitted).
 * @param value  the value (<code>null</code> permitted).
 * @param notify  notify listeners?
 */"
"public RegularTimePeriod getTimePeriod(int index) {
    return getDataItem(index).getPeriod();
}","public void test063128() throws Throwable {
    Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
    TimeSeries timeSeries0 = new TimeSeries(""java.util.TimeZone"", ""java.util.TimeZone"", ""java.util.TimeZone"", class0);
    // Undeclared exception!
    try {
        timeSeries0.getTimePeriod(174);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 174, Size: 0
        //
        verifyException(""java.util.ArrayList"", e);
    }
}","/**
 * Returns the time period at the specified index.
 *
 * @param index  the index of the data item.
 *
 * @return The time period.
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test064129() throws Throwable {
    Day day0 = new Day();
    Class<Month> class0 = Month.class;
    TimeSeries timeSeries0 = new TimeSeries(day0, ""=wzUe FC9tegUK,&]d"", (String) null, class0);
    String string0 = timeSeries0.getDomainDescription();
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test064130() throws Throwable {
    Day day0 = new Day();
    Class<Month> class0 = Month.class;
    TimeSeries timeSeries0 = new TimeSeries(day0, ""=wzUe FC9tegUK,&]d"", (String) null, class0);
    String string0 = timeSeries0.getDomainDescription();
    assertEquals(""=wzUe FC9tegUK,&]d"", string0);
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test064132() throws Throwable {
    Day day0 = new Day();
    Class<Month> class0 = Month.class;
    TimeSeries timeSeries0 = new TimeSeries(day0, ""=wzUe FC9tegUK,&]d"", (String) null, class0);
    String string0 = timeSeries0.getDomainDescription();
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public TimeSeriesDataItem getDataItem(int index) {
    return (TimeSeriesDataItem) this.data.get(index);
}","public void test065133() throws Throwable {
    Day day0 = new Day();
    Class<Week> class0 = Week.class;
    TimeSeries timeSeries0 = new TimeSeries(day0, ""<A$nQ"", ""java.lang.Class"", class0);
    // Undeclared exception!
    try {
        timeSeries0.getDataItem(1);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 1, Size: 0
        //
        verifyException(""java.util.ArrayList"", e);
    }
}","/**
 * Returns a data item for the series.
 *
 * @param index  the item index (zero-based).
 *
 * @return The data item.
 *
 * @see #getDataItem(RegularTimePeriod)
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test066134() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(day0, (Number) null);
    timeSeries0.add(timeSeriesDataItem0);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test066135() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(day0, (Number) null);
    timeSeries0.add(timeSeriesDataItem0);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test066136() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(day0, (Number) null);
    timeSeries0.add(timeSeriesDataItem0);
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test066137() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(day0, (Number) null);
    timeSeries0.add(timeSeriesDataItem0);
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test067138() throws Throwable {
    MockDate mockDate0 = new MockDate(714, 479, 1351);
    Month month0 = new Month(mockDate0);
    Class<Millisecond> class0 = Millisecond.class;
    TimeSeries timeSeries0 = new TimeSeries(month0, class0);
    timeSeries0.getItemCount();
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test067139() throws Throwable {
    MockDate mockDate0 = new MockDate(714, 479, 1351);
    Month month0 = new Month(mockDate0);
    Class<Millisecond> class0 = Millisecond.class;
    TimeSeries timeSeries0 = new TimeSeries(month0, class0);
    timeSeries0.getItemCount();
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test067140() throws Throwable {
    MockDate mockDate0 = new MockDate(714, 479, 1351);
    Month month0 = new Month(mockDate0);
    Class<Millisecond> class0 = Millisecond.class;
    TimeSeries timeSeries0 = new TimeSeries(month0, class0);
    timeSeries0.getItemCount();
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test067141() throws Throwable {
    MockDate mockDate0 = new MockDate(714, 479, 1351);
    Month month0 = new Month(mockDate0);
    Class<Millisecond> class0 = Millisecond.class;
    TimeSeries timeSeries0 = new TimeSeries(month0, class0);
    timeSeries0.getItemCount();
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public int getItemCount() {
    return this.data.size();
}","public void test068142() throws Throwable {
    MockDate mockDate0 = new MockDate(0, 45, 0, 1525, 1525, 1525);
    Millisecond millisecond0 = new Millisecond(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(millisecond0);
    timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, (-380.28592));
    timeSeries0.hashCode();
    assertEquals(1, timeSeries0.getItemCount());
}","/**
 * Returns the number of items in the series.
 *
 * @return The item count.
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test069143() throws Throwable {
    Day day0 = new Day();
    Class<Month> class0 = Month.class;
    TimeSeries timeSeries0 = new TimeSeries(day0, ""=wzUe FC9tegUK,&]d"", (String) null, class0);
    timeSeries0.hashCode();
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test069144() throws Throwable {
    Day day0 = new Day();
    Class<Month> class0 = Month.class;
    TimeSeries timeSeries0 = new TimeSeries(day0, ""=wzUe FC9tegUK,&]d"", (String) null, class0);
    timeSeries0.hashCode();
    assertEquals(""=wzUe FC9tegUK,&]d"", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test069145() throws Throwable {
    Day day0 = new Day();
    Class<Month> class0 = Month.class;
    TimeSeries timeSeries0 = new TimeSeries(day0, ""=wzUe FC9tegUK,&]d"", (String) null, class0);
    timeSeries0.hashCode();
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test070146() throws Throwable {
    Millisecond millisecond0 = new Millisecond();
    TimeSeries timeSeries0 = new TimeSeries(millisecond0, (String) null, ""-9OJT/."", (Class) null);
    timeSeries0.hashCode();
    assertEquals(""-9OJT/."", timeSeries0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test070147() throws Throwable {
    Millisecond millisecond0 = new Millisecond();
    TimeSeries timeSeries0 = new TimeSeries(millisecond0, (String) null, ""-9OJT/."", (Class) null);
    timeSeries0.hashCode();
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test070148() throws Throwable {
    Millisecond millisecond0 = new Millisecond();
    TimeSeries timeSeries0 = new TimeSeries(millisecond0, (String) null, ""-9OJT/."", (Class) null);
    timeSeries0.hashCode();
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test071149() throws Throwable {
    MockDate mockDate0 = new MockDate(714, 479, 1351);
    Month month0 = new Month(mockDate0);
    Class<Millisecond> class0 = Millisecond.class;
    TimeSeries timeSeries0 = new TimeSeries(month0, class0);
    Class<Day> class1 = Day.class;
    TimeSeries timeSeries1 = new TimeSeries(mockDate0, ""InD"", ""InD"", class1);
    boolean boolean0 = timeSeries1.equals(timeSeries0);
    assertEquals(""InD"", timeSeries1.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test071150() throws Throwable {
    MockDate mockDate0 = new MockDate(714, 479, 1351);
    Month month0 = new Month(mockDate0);
    Class<Millisecond> class0 = Millisecond.class;
    TimeSeries timeSeries0 = new TimeSeries(month0, class0);
    Class<Day> class1 = Day.class;
    TimeSeries timeSeries1 = new TimeSeries(mockDate0, ""InD"", ""InD"", class1);
    boolean boolean0 = timeSeries1.equals(timeSeries0);
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public boolean equals(Object object) {
    if (object == this) {
        return true;
    }
    if (!(object instanceof TimeSeries) || !super.equals(object)) {
        return false;
    }
    TimeSeries s = (TimeSeries) object;
    if (!ObjectUtilities.equal(getDomainDescription(), s.getDomainDescription())) {
        return false;
    }
    if (!ObjectUtilities.equal(getRangeDescription(), s.getRangeDescription())) {
        return false;
    }
    if (!getClass().equals(s.getClass())) {
        return false;
    }
    if (getMaximumItemAge() != s.getMaximumItemAge()) {
        return false;
    }
    if (getMaximumItemCount() != s.getMaximumItemCount()) {
        return false;
    }
    int count = getItemCount();
    if (count != s.getItemCount()) {
        return false;
    }
    for (int i = 0; i < count; i++) {
        if (!getDataItem(i).equals(s.getDataItem(i))) {
            return false;
        }
    }
    return true;
}","public void test071151() throws Throwable {
    MockDate mockDate0 = new MockDate(714, 479, 1351);
    Month month0 = new Month(mockDate0);
    Class<Millisecond> class0 = Millisecond.class;
    TimeSeries timeSeries0 = new TimeSeries(month0, class0);
    Class<Day> class1 = Day.class;
    TimeSeries timeSeries1 = new TimeSeries(mockDate0, ""InD"", ""InD"", class1);
    boolean boolean0 = timeSeries1.equals(timeSeries0);
    assertFalse(boolean0);
}","/**
 * Tests the series for equality with an arbitrary object.
 *
 * @param object  the object to test against (<code>null</code> permitted).
 *
 * @return A boolean.
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test071152() throws Throwable {
    MockDate mockDate0 = new MockDate(714, 479, 1351);
    Month month0 = new Month(mockDate0);
    Class<Millisecond> class0 = Millisecond.class;
    TimeSeries timeSeries0 = new TimeSeries(month0, class0);
    Class<Day> class1 = Day.class;
    TimeSeries timeSeries1 = new TimeSeries(mockDate0, ""InD"", ""InD"", class1);
    boolean boolean0 = timeSeries1.equals(timeSeries0);
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test071153() throws Throwable {
    MockDate mockDate0 = new MockDate(714, 479, 1351);
    Month month0 = new Month(mockDate0);
    Class<Millisecond> class0 = Millisecond.class;
    TimeSeries timeSeries0 = new TimeSeries(month0, class0);
    Class<Day> class1 = Day.class;
    TimeSeries timeSeries1 = new TimeSeries(mockDate0, ""InD"", ""InD"", class1);
    boolean boolean0 = timeSeries1.equals(timeSeries0);
    assertEquals(""InD"", timeSeries1.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test071154() throws Throwable {
    MockDate mockDate0 = new MockDate(714, 479, 1351);
    Month month0 = new Month(mockDate0);
    Class<Millisecond> class0 = Millisecond.class;
    TimeSeries timeSeries0 = new TimeSeries(month0, class0);
    Class<Day> class1 = Day.class;
    TimeSeries timeSeries1 = new TimeSeries(mockDate0, ""InD"", ""InD"", class1);
    boolean boolean0 = timeSeries1.equals(timeSeries0);
    assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test071155() throws Throwable {
    MockDate mockDate0 = new MockDate(714, 479, 1351);
    Month month0 = new Month(mockDate0);
    Class<Millisecond> class0 = Millisecond.class;
    TimeSeries timeSeries0 = new TimeSeries(month0, class0);
    Class<Day> class1 = Day.class;
    TimeSeries timeSeries1 = new TimeSeries(mockDate0, ""InD"", ""InD"", class1);
    boolean boolean0 = timeSeries1.equals(timeSeries0);
    assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test072156() throws Throwable {
    MockDate mockDate0 = new MockDate(0, 45, 0, 1525, 1525, 1525);
    Millisecond millisecond0 = new Millisecond(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(millisecond0);
    boolean boolean0 = timeSeries0.equals(millisecond0);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test072157() throws Throwable {
    MockDate mockDate0 = new MockDate(0, 45, 0, 1525, 1525, 1525);
    Millisecond millisecond0 = new Millisecond(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(millisecond0);
    boolean boolean0 = timeSeries0.equals(millisecond0);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public boolean equals(Object object) {
    if (object == this) {
        return true;
    }
    if (!(object instanceof TimeSeries) || !super.equals(object)) {
        return false;
    }
    TimeSeries s = (TimeSeries) object;
    if (!ObjectUtilities.equal(getDomainDescription(), s.getDomainDescription())) {
        return false;
    }
    if (!ObjectUtilities.equal(getRangeDescription(), s.getRangeDescription())) {
        return false;
    }
    if (!getClass().equals(s.getClass())) {
        return false;
    }
    if (getMaximumItemAge() != s.getMaximumItemAge()) {
        return false;
    }
    if (getMaximumItemCount() != s.getMaximumItemCount()) {
        return false;
    }
    int count = getItemCount();
    if (count != s.getItemCount()) {
        return false;
    }
    for (int i = 0; i < count; i++) {
        if (!getDataItem(i).equals(s.getDataItem(i))) {
            return false;
        }
    }
    return true;
}","public void test072158() throws Throwable {
    MockDate mockDate0 = new MockDate(0, 45, 0, 1525, 1525, 1525);
    Millisecond millisecond0 = new Millisecond(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(millisecond0);
    boolean boolean0 = timeSeries0.equals(millisecond0);
    assertFalse(boolean0);
}","/**
 * Tests the series for equality with an arbitrary object.
 *
 * @param object  the object to test against (<code>null</code> permitted).
 *
 * @return A boolean.
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test072159() throws Throwable {
    MockDate mockDate0 = new MockDate(0, 45, 0, 1525, 1525, 1525);
    Millisecond millisecond0 = new Millisecond(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(millisecond0);
    boolean boolean0 = timeSeries0.equals(millisecond0);
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test072160() throws Throwable {
    MockDate mockDate0 = new MockDate(0, 45, 0, 1525, 1525, 1525);
    Millisecond millisecond0 = new Millisecond(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(millisecond0);
    boolean boolean0 = timeSeries0.equals(millisecond0);
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end) throws CloneNotSupportedException {
    if (start == null) {
        throw new IllegalArgumentException(""Null 'start' argument."");
    }
    if (end == null) {
        throw new IllegalArgumentException(""Null 'end' argument."");
    }
    if (start.compareTo(end) > 0) {
        throw new IllegalArgumentException(""Requires start on or before end."");
    }
    boolean emptyRange = false;
    int startIndex = getIndex(start);
    if (startIndex < 0) {
        startIndex = -(startIndex + 1);
        if (startIndex == this.data.size()) {
            // start is after last data item
            emptyRange = true;
        }
    }
    int endIndex = getIndex(end);
    if (endIndex < 0) {
        // end period is not in original series
        // this is first item AFTER end period
        endIndex = -(endIndex + 1);
        // so this is last item BEFORE end
        endIndex = endIndex - 1;
    }
    if (endIndex < 0) {
        emptyRange = true;
    }
    if (emptyRange) {
        TimeSeries copy = (TimeSeries) super.clone();
        copy.data = new java.util.ArrayList();
        return copy;
    } else {
        return createCopy(startIndex, endIndex);
    }
}","public void test073161() throws Throwable {
    MockDate mockDate0 = new MockDate((-1L));
    Second second0 = new Second(mockDate0);
    RegularTimePeriod regularTimePeriod0 = second0.next();
    Class<Integer> class0 = Integer.class;
    TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, class0);
    // Undeclared exception!
    try {
        timeSeries0.createCopy(regularTimePeriod0, (RegularTimePeriod) second0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Requires start on or before end.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}","/**
 * Creates a new timeseries by copying a subset of the data in this time
 * series.
 *
 * @param start  the first time period to copy.
 * @param end  the last time period to copy.
 *
 * @return A time series containing a copy of this time series from start
 *         until end.
 *
 * @throws CloneNotSupportedException if there is a cloning problem.
 */"
"public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end) throws CloneNotSupportedException {
    if (start == null) {
        throw new IllegalArgumentException(""Null 'start' argument."");
    }
    if (end == null) {
        throw new IllegalArgumentException(""Null 'end' argument."");
    }
    if (start.compareTo(end) > 0) {
        throw new IllegalArgumentException(""Requires start on or before end."");
    }
    boolean emptyRange = false;
    int startIndex = getIndex(start);
    if (startIndex < 0) {
        startIndex = -(startIndex + 1);
        if (startIndex == this.data.size()) {
            // start is after last data item
            emptyRange = true;
        }
    }
    int endIndex = getIndex(end);
    if (endIndex < 0) {
        // end period is not in original series
        // this is first item AFTER end period
        endIndex = -(endIndex + 1);
        // so this is last item BEFORE end
        endIndex = endIndex - 1;
    }
    if (endIndex < 0) {
        emptyRange = true;
    }
    if (emptyRange) {
        TimeSeries copy = (TimeSeries) super.clone();
        copy.data = new java.util.ArrayList();
        return copy;
    } else {
        return createCopy(startIndex, endIndex);
    }
}","public void test074162() throws Throwable {
    Class<String> class0 = String.class;
    Millisecond millisecond0 = new Millisecond();
    TimeSeries timeSeries0 = new TimeSeries(millisecond0, ""-)OJT/."", ""-)OJT/."", class0);
    // Undeclared exception!
    try {
        timeSeries0.createCopy((RegularTimePeriod) millisecond0, (RegularTimePeriod) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'end' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}","/**
 * Creates a new timeseries by copying a subset of the data in this time
 * series.
 *
 * @param start  the first time period to copy.
 * @param end  the last time period to copy.
 *
 * @return A time series containing a copy of this time series from start
 *         until end.
 *
 * @throws CloneNotSupportedException if there is a cloning problem.
 */"
"public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end) throws CloneNotSupportedException {
    if (start == null) {
        throw new IllegalArgumentException(""Null 'start' argument."");
    }
    if (end == null) {
        throw new IllegalArgumentException(""Null 'end' argument."");
    }
    if (start.compareTo(end) > 0) {
        throw new IllegalArgumentException(""Requires start on or before end."");
    }
    boolean emptyRange = false;
    int startIndex = getIndex(start);
    if (startIndex < 0) {
        startIndex = -(startIndex + 1);
        if (startIndex == this.data.size()) {
            // start is after last data item
            emptyRange = true;
        }
    }
    int endIndex = getIndex(end);
    if (endIndex < 0) {
        // end period is not in original series
        // this is first item AFTER end period
        endIndex = -(endIndex + 1);
        // so this is last item BEFORE end
        endIndex = endIndex - 1;
    }
    if (endIndex < 0) {
        emptyRange = true;
    }
    if (emptyRange) {
        TimeSeries copy = (TimeSeries) super.clone();
        copy.data = new java.util.ArrayList();
        return copy;
    } else {
        return createCopy(startIndex, endIndex);
    }
}","public void test075163() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
    Date date0 = mockGregorianCalendar0.getGregorianChange();
    Month month0 = new Month(date0);
    Class<Hour> class0 = Hour.class;
    TimeSeries timeSeries0 = new TimeSeries(month0, """", """", class0);
    // Undeclared exception!
    try {
        timeSeries0.createCopy((RegularTimePeriod) null, (RegularTimePeriod) month0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'start' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}","/**
 * Creates a new timeseries by copying a subset of the data in this time
 * series.
 *
 * @param start  the first time period to copy.
 * @param end  the last time period to copy.
 *
 * @return A time series containing a copy of this time series from start
 *         until end.
 *
 * @throws CloneNotSupportedException if there is a cloning problem.
 */"
"public TimeSeries createCopy(int start, int end) throws CloneNotSupportedException {
    if (start < 0) {
        throw new IllegalArgumentException(""Requires start >= 0."");
    }
    if (end < start) {
        throw new IllegalArgumentException(""Requires start <= end."");
    }
    TimeSeries copy = (TimeSeries) super.clone();
    copy.data = new java.util.ArrayList();
    if (this.data.size() > 0) {
        for (int index = start; index <= end; index++) {
            TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(index);
            TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();
            try {
                copy.add(clone);
            } catch (SeriesException e) {
                e.printStackTrace();
            }
        }
    }
    return copy;
}","public void test076164() throws Throwable {
    Minute minute0 = new Minute();
    Class<String> class0 = String.class;
    TimeSeries timeSeries0 = new TimeSeries(minute0, ""Null 'serialDate' argument."", (String) null, class0);
    // Undeclared exception!
    try {
        timeSeries0.createCopy((-984), 59);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Requires start >= 0.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}","/**
 * Creates a new timeseries by copying a subset of the data in this time
 * series.
 *
 * @param start  the index of the first time period to copy.
 * @param end  the index of the last time period to copy.
 *
 * @return A series containing a copy of this times series from start until
 *         end.
 *
 * @throws CloneNotSupportedException if there is a cloning problem.
 */"
"public void delete(int start, int end) {
    if (end < start) {
        throw new IllegalArgumentException(""Requires start <= end."");
    }
    for (int i = 0; i <= (end - start); i++) {
        this.data.remove(start);
    }
    fireSeriesChanged();
}","public void test077165() throws Throwable {
    SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(92);
    Class<TimeSeriesDataItem> class0 = TimeSeriesDataItem.class;
    TimeSeries timeSeries0 = new TimeSeries(spreadsheetDate0, ""YZM wgVx0wYOEyW67"", "";])ZY"", class0);
    // Undeclared exception!
    try {
        timeSeries0.delete(2786, 44);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Requires start <= end.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}","/**
 * Deletes data from start until end index (end inclusive).
 *
 * @param start  the index of the first period to delete.
 * @param end  the index of the last period to delete.
 */"
"public int getItemCount() {
    return this.data.size();
}","public void test078166() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.add((RegularTimePeriod) day0, 718.0, false);
    timeSeries0.delete((RegularTimePeriod) day0);
    assertEquals(0, timeSeries0.getItemCount());
}","/**
 * Returns the number of items in the series.
 *
 * @return The item count.
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test079167() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.delete((RegularTimePeriod) day0);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test079168() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.delete((RegularTimePeriod) day0);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test079169() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.delete((RegularTimePeriod) day0);
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test079170() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.delete((RegularTimePeriod) day0);
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public int getItemCount() {
    return this.data.size();
}","public void test080171() throws Throwable {
    MockDate mockDate0 = new MockDate(0, 45, 0, 1525, 1525, 1525);
    Millisecond millisecond0 = new Millisecond(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(millisecond0);
    Second second0 = millisecond0.getSecond();
    timeSeries0.addOrUpdate((RegularTimePeriod) second0, 0.0);
    assertEquals(1, timeSeries0.getItemCount());
}","/**
 * Returns the number of items in the series.
 *
 * @return The item count.
 */"
"public int getItemCount() {
    return this.data.size();
}","public void test080172() throws Throwable {
    MockDate mockDate0 = new MockDate(0, 45, 0, 1525, 1525, 1525);
    Millisecond millisecond0 = new Millisecond(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(millisecond0);
    Second second0 = millisecond0.getSecond();
    timeSeries0.addOrUpdate((RegularTimePeriod) second0, 0.0);
    timeSeries0.clear();
    assertEquals(0, timeSeries0.getItemCount());
}","/**
 * Returns the number of items in the series.
 *
 * @return The item count.
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test081173() throws Throwable {
    Class<String> class0 = String.class;
    Millisecond millisecond0 = new Millisecond();
    TimeSeries timeSeries0 = new TimeSeries(millisecond0, ""-)OJT/."", ""-)OJT/."", class0);
    timeSeries0.clear();
    assertEquals(""-)OJT/."", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test081174() throws Throwable {
    Class<String> class0 = String.class;
    Millisecond millisecond0 = new Millisecond();
    TimeSeries timeSeries0 = new TimeSeries(millisecond0, ""-)OJT/."", ""-)OJT/."", class0);
    timeSeries0.clear();
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test081175() throws Throwable {
    Class<String> class0 = String.class;
    Millisecond millisecond0 = new Millisecond();
    TimeSeries timeSeries0 = new TimeSeries(millisecond0, ""-)OJT/."", ""-)OJT/."", class0);
    timeSeries0.clear();
    assertEquals(""-)OJT/."", timeSeries0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test081176() throws Throwable {
    Class<String> class0 = String.class;
    Millisecond millisecond0 = new Millisecond();
    TimeSeries timeSeries0 = new TimeSeries(millisecond0, ""-)OJT/."", ""-)OJT/."", class0);
    timeSeries0.clear();
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public int getItemCount() {
    return this.data.size();
}","public void test082177() throws Throwable {
    MockDate mockDate0 = new MockDate(0, 45, 0, 1525, 1525, 1525);
    Millisecond millisecond0 = new Millisecond(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(millisecond0);
    timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, (-380.28592));
    timeSeries0.removeAgedItems((long) 0, false);
    assertEquals(1, timeSeries0.getItemCount());
}","/**
 * Returns the number of items in the series.
 *
 * @return The item count.
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test083178() throws Throwable {
    Clock clock0 = MockClock.systemUTC();
    Instant instant0 = MockInstant.now(clock0);
    Date date0 = Date.from(instant0);
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    timeSeries0.removeAgedItems(1392409281320L, false);
    timeSeries0.removeAgedItems((-208L), true);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test083179() throws Throwable {
    Clock clock0 = MockClock.systemUTC();
    Instant instant0 = MockInstant.now(clock0);
    Date date0 = Date.from(instant0);
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    timeSeries0.removeAgedItems(1392409281320L, false);
    timeSeries0.removeAgedItems((-208L), true);
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test083180() throws Throwable {
    Clock clock0 = MockClock.systemUTC();
    Instant instant0 = MockInstant.now(clock0);
    Date date0 = Date.from(instant0);
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    timeSeries0.removeAgedItems(1392409281320L, false);
    timeSeries0.removeAgedItems((-208L), true);
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test083181() throws Throwable {
    Clock clock0 = MockClock.systemUTC();
    Instant instant0 = MockInstant.now(clock0);
    Date date0 = Date.from(instant0);
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    timeSeries0.removeAgedItems(1392409281320L, false);
    timeSeries0.removeAgedItems((-208L), true);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public TimeSeriesDataItem addOrUpdate(RegularTimePeriod period, Number value) {
    if (period == null) {
        throw new IllegalArgumentException(""Null 'period' argument."");
    }
    TimeSeriesDataItem overwritten = null;
    TimeSeriesDataItem key = new TimeSeriesDataItem(period, value);
    int index = Collections.binarySearch(this.data, key);
    if (index >= 0) {
        TimeSeriesDataItem existing = (TimeSeriesDataItem) this.data.get(index);
        overwritten = (TimeSeriesDataItem) existing.clone();
        existing.setValue(value);
        // remove old items if necessary, but
        removeAgedItems(false);
        // don't notify anyone, because that
        // happens next anyway...
        fireSeriesChanged();
    } else {
        this.data.add(-index - 1, new TimeSeriesDataItem(period, value));
        // check if this addition will exceed the maximum item count...
        if (getItemCount() > this.maximumItemCount) {
            this.data.remove(0);
        }
        // remove old items if necessary, but
        removeAgedItems(false);
        // don't notify anyone, because that
        // happens next anyway...
        fireSeriesChanged();
    }
    return overwritten;
}","public void test084182() throws Throwable {
    Clock clock0 = MockClock.systemUTC();
    Instant instant0 = MockInstant.now(clock0);
    Date date0 = Date.from(instant0);
    TimeSeries timeSeries0 = new TimeSeries(date0);
    Integer integer0 = JLayeredPane.DEFAULT_LAYER;
    // Undeclared exception!
    try {
        timeSeries0.addOrUpdate((RegularTimePeriod) null, (Number) integer0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'period' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}","/**
 * Adds or updates an item in the times series and sends a
 * {@link org.jfree.data.general.SeriesChangeEvent} to all registered
 * listeners.
 *
 * @param period  the time period to add/update (<code>null</code> not
 *                permitted).
 * @param value  the new value (<code>null</code> permitted).
 *
 * @return A copy of the overwritten data item, or <code>null</code> if no
 *         item was overwritten.
 */"
"public int getItemCount() {
    return this.data.size();
}","public void test085183() throws Throwable {
    MockDate mockDate0 = new MockDate(45, 0, 0, 1525, 45);
    Millisecond millisecond0 = new Millisecond(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(millisecond0);
    TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) millisecond0, (RegularTimePeriod) millisecond0);
    Second second0 = millisecond0.getSecond();
    timeSeries0.addOrUpdate((RegularTimePeriod) second0, 0.0);
    timeSeries1.addAndOrUpdate(timeSeries0);
    assertEquals(1, timeSeries0.getItemCount());
}","/**
 * Returns the number of items in the series.
 *
 * @return The item count.
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test085184() throws Throwable {
    MockDate mockDate0 = new MockDate(45, 0, 0, 1525, 45);
    Millisecond millisecond0 = new Millisecond(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(millisecond0);
    TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) millisecond0, (RegularTimePeriod) millisecond0);
    Second second0 = millisecond0.getSecond();
    timeSeries0.addOrUpdate((RegularTimePeriod) second0, 0.0);
    timeSeries1.addAndOrUpdate(timeSeries0);
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public TimeSeries addAndOrUpdate(TimeSeries series) {
    TimeSeries overwritten = new TimeSeries(""Overwritten values from: "" + getKey(), series.getTimePeriodClass());
    for (int i = 0; i < series.getItemCount(); i++) {
        TimeSeriesDataItem item = series.getDataItem(i);
        TimeSeriesDataItem oldItem = addOrUpdate(item.getPeriod(), item.getValue());
        if (oldItem != null) {
            overwritten.add(oldItem);
        }
    }
    return overwritten;
}","public void test086185() throws Throwable {
    MockDate mockDate0 = new MockDate(45, 0, 0, 1525, 45);
    Millisecond millisecond0 = new Millisecond(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(millisecond0);
    Second second0 = millisecond0.getSecond();
    timeSeries0.addOrUpdate((RegularTimePeriod) second0, 0.0);
    // Undeclared exception!
    try {
        timeSeries0.addAndOrUpdate(timeSeries0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // You are trying to add data where the time period class is org.jfree.data.time.Second, but the TimeSeries is expecting an instance of org.jfree.data.time.Day.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}","/**
 * Adds or updates data from one series to another.  Returns another series
 * containing the values that were overwritten.
 *
 * @param series  the series to merge with this.
 *
 * @return A series containing the values that were overwritten.
 */"
"public void update(RegularTimePeriod period, Number value) {
    TimeSeriesDataItem temp = new TimeSeriesDataItem(period, value);
    int index = Collections.binarySearch(this.data, temp);
    if (index >= 0) {
        TimeSeriesDataItem pair = (TimeSeriesDataItem) this.data.get(index);
        pair.setValue(value);
        fireSeriesChanged();
    } else {
        throw new SeriesException(""TimeSeries.update(TimePeriod, Number):  period does not exist."");
    }
}","public void test087186() throws Throwable {
    Minute minute0 = new Minute();
    Second second0 = new Second(273, minute0);
    TimeSeries timeSeries0 = new TimeSeries(second0);
    // Undeclared exception!
    try {
        timeSeries0.update((RegularTimePeriod) second0, (Number) 59);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // TimeSeries.update(TimePeriod, Number):  period does not exist.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}","/**
 * Updates (changes) the value for a time period.  Throws a
 * {@link SeriesException} if the period does not exist.
 *
 * @param period  the period (<code>null</code> not permitted).
 * @param value  the value (<code>null</code> permitted).
 */"
"public int getItemCount() {
    return this.data.size();
}","public void test088187() throws Throwable {
    MockDate mockDate0 = new MockDate();
    TimeZone timeZone0 = TimeZone.getTimeZone(""yehcE"");
    Day day0 = new Day(mockDate0, timeZone0);
    RegularTimePeriod regularTimePeriod0 = day0.previous();
    TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
    timeSeries0.add(regularTimePeriod0, (Number) null);
    timeSeries0.add((RegularTimePeriod) day0, (Number) null);
    assertEquals(2, timeSeries0.getItemCount());
}","/**
 * Returns the number of items in the series.
 *
 * @return The item count.
 */"
"public void add(RegularTimePeriod period, double value) {
    // defer argument checking...
    add(period, value, true);
}","public void test089188() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.add((RegularTimePeriod) day0, 718.0, false);
    // Undeclared exception!
    try {
        timeSeries0.add((RegularTimePeriod) day0, 882.599950745);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // You are attempting to add an observation for the time period 14-February-2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}","/**
 * Adds a new data item to the series and sends a {@link SeriesChangeEvent}
 * to all registered listeners.
 *
 * @param period  the time period (<code>null</code> not permitted).
 * @param value  the value.
 */"
"public void add(TimeSeriesDataItem item, boolean notify) {
    if (item == null) {
        throw new IllegalArgumentException(""Null 'item' argument."");
    }
    if (!item.getPeriod().getClass().equals(this.timePeriodClass)) {
        StringBuffer b = new StringBuffer();
        b.append(""You are trying to add data where the time period class "");
        b.append(""is "");
        b.append(item.getPeriod().getClass().getName());
        b.append("", but the TimeSeries is expecting an instance of "");
        b.append(this.timePeriodClass.getName());
        b.append(""."");
        throw new SeriesException(b.toString());
    }
    // make the change (if it's not a duplicate time period)...
    boolean added = false;
    int count = getItemCount();
    if (count == 0) {
        this.data.add(item);
        added = true;
    } else {
        RegularTimePeriod last = getTimePeriod(getItemCount() - 1);
        if (item.getPeriod().compareTo(last) > 0) {
            this.data.add(item);
            added = true;
        } else {
            int index = Collections.binarySearch(this.data, item);
            if (index < 0) {
                this.data.add(-index - 1, item);
                added = true;
            } else {
                StringBuffer b = new StringBuffer();
                b.append(""You are attempting to add an observation for "");
                b.append(""the time period "");
                b.append(item.getPeriod().toString());
                b.append("" but the series already contains an observation"");
                b.append("" for that time period. Duplicates are not "");
                b.append(""permitted.  Try using the addOrUpdate() method."");
                throw new SeriesException(b.toString());
            }
        }
    }
    if (added) {
        // check if this addition will exceed the maximum item count...
        if (getItemCount() > this.maximumItemCount) {
            this.data.remove(0);
        }
        // remove old items if necessary, but
        removeAgedItems(false);
        // don't notify anyone, because that
        // happens next anyway...
        if (notify) {
            fireSeriesChanged();
        }
    }
}","public void test090189() throws Throwable {
    MockDate mockDate0 = new MockDate((-230));
    Second second0 = new Second(mockDate0);
    Millisecond millisecond0 = new Millisecond((-230), second0);
    TimeSeries timeSeries0 = new TimeSeries(millisecond0);
    // Undeclared exception!
    try {
        timeSeries0.add((TimeSeriesDataItem) null, true);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'item' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}","/**
 * Adds a data item to the series and sends a
 * {@link org.jfree.data.general.SeriesChangeEvent} to all registered
 * listeners.
 *
 * @param item  the (timeperiod, value) pair (<code>null</code> not
 *              permitted).
 * @param notify  notify listeners?
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test091190() throws Throwable {
    MockDate mockDate0 = new MockDate(714, 479, 1351);
    Month month0 = new Month(mockDate0);
    Class<Millisecond> class0 = Millisecond.class;
    TimeSeries timeSeries0 = new TimeSeries(month0, class0);
    timeSeries0.getValue((RegularTimePeriod) month0);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test091191() throws Throwable {
    MockDate mockDate0 = new MockDate(714, 479, 1351);
    Month month0 = new Month(mockDate0);
    Class<Millisecond> class0 = Millisecond.class;
    TimeSeries timeSeries0 = new TimeSeries(month0, class0);
    timeSeries0.getValue((RegularTimePeriod) month0);
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test091192() throws Throwable {
    MockDate mockDate0 = new MockDate(714, 479, 1351);
    Month month0 = new Month(mockDate0);
    Class<Millisecond> class0 = Millisecond.class;
    TimeSeries timeSeries0 = new TimeSeries(month0, class0);
    timeSeries0.getValue((RegularTimePeriod) month0);
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test091193() throws Throwable {
    MockDate mockDate0 = new MockDate(714, 479, 1351);
    Month month0 = new Month(mockDate0);
    Class<Millisecond> class0 = Millisecond.class;
    TimeSeries timeSeries0 = new TimeSeries(month0, class0);
    timeSeries0.getValue((RegularTimePeriod) month0);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public Number getValue(RegularTimePeriod period) {
    int index = getIndex(period);
    if (index >= 0) {
        return getValue(index);
    } else {
        return null;
    }
}","public void test092194() throws Throwable {
    Class<String> class0 = String.class;
    Millisecond millisecond0 = new Millisecond();
    TimeSeries timeSeries0 = new TimeSeries(millisecond0, ""-)OJT/."", ""-)OJT/."", class0);
    // Undeclared exception!
    try {
        timeSeries0.getValue((RegularTimePeriod) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'period' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}","/**
 * Returns the value for a time period.  If there is no data item with the
 * specified period, this method will return <code>null</code>.
 *
 * @param period  time period (<code>null</code> not permitted).
 *
 * @return The value (possibly <code>null</code>).
 */"
"public int getItemCount() {
    return this.data.size();
}","public void test093195() throws Throwable {
    MockDate mockDate0 = new MockDate(45, 0, 0, 1525, 45);
    Millisecond millisecond0 = new Millisecond(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(millisecond0);
    TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) millisecond0, (RegularTimePeriod) millisecond0);
    Second second0 = millisecond0.getSecond();
    timeSeries0.addOrUpdate((RegularTimePeriod) second0, 0.0);
    timeSeries1.getTimePeriodsUniqueToOtherSeries(timeSeries0);
    assertEquals(1, timeSeries0.getItemCount());
}","/**
 * Returns the number of items in the series.
 *
 * @return The item count.
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test093196() throws Throwable {
    MockDate mockDate0 = new MockDate(45, 0, 0, 1525, 45);
    Millisecond millisecond0 = new Millisecond(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(millisecond0);
    TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) millisecond0, (RegularTimePeriod) millisecond0);
    Second second0 = millisecond0.getSecond();
    timeSeries0.addOrUpdate((RegularTimePeriod) second0, 0.0);
    timeSeries1.getTimePeriodsUniqueToOtherSeries(timeSeries0);
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public int getItemCount() {
    return this.data.size();
}","public void test094197() throws Throwable {
    MockDate mockDate0 = new MockDate(45, 0, 0, 1525, 45);
    Millisecond millisecond0 = new Millisecond(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(millisecond0);
    Second second0 = millisecond0.getSecond();
    timeSeries0.addOrUpdate((RegularTimePeriod) second0, 0.0);
    timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries0);
    assertEquals(1, timeSeries0.getItemCount());
}","/**
 * Returns the number of items in the series.
 *
 * @return The item count.
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test095198() throws Throwable {
    TimeSeries timeSeries0 = new TimeSeries(""2:aXr!"");
    timeSeries0.getTimePeriods();
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test095199() throws Throwable {
    TimeSeries timeSeries0 = new TimeSeries(""2:aXr!"");
    timeSeries0.getTimePeriods();
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test095200() throws Throwable {
    TimeSeries timeSeries0 = new TimeSeries(""2:aXr!"");
    timeSeries0.getTimePeriods();
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test095201() throws Throwable {
    TimeSeries timeSeries0 = new TimeSeries(""2:aXr!"");
    timeSeries0.getTimePeriods();
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public int getItemCount() {
    return this.data.size();
}","public void test096202() throws Throwable {
    Clock clock0 = MockClock.systemUTC();
    Instant instant0 = MockInstant.now(clock0);
    Date date0 = Date.from(instant0);
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
    TimeSeries timeSeries0 = new TimeSeries(date0);
    Integer integer0 = JLayeredPane.DEFAULT_LAYER;
    timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) integer0);
    timeSeries0.getDataItem((RegularTimePeriod) fixedMillisecond0);
    assertEquals(1, timeSeries0.getItemCount());
}","/**
 * Returns the number of items in the series.
 *
 * @return The item count.
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test097203() throws Throwable {
    MockDate mockDate0 = new MockDate((-507), (-507), 0);
    Quarter quarter0 = new Quarter(mockDate0);
    Class<Week> class0 = Week.class;
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""Requires start >= 0."", ""You are attempting to add an observation for "", class0);
    timeSeries0.getDataItem((RegularTimePeriod) quarter0);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test097204() throws Throwable {
    MockDate mockDate0 = new MockDate((-507), (-507), 0);
    Quarter quarter0 = new Quarter(mockDate0);
    Class<Week> class0 = Week.class;
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""Requires start >= 0."", ""You are attempting to add an observation for "", class0);
    timeSeries0.getDataItem((RegularTimePeriod) quarter0);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test097205() throws Throwable {
    MockDate mockDate0 = new MockDate((-507), (-507), 0);
    Quarter quarter0 = new Quarter(mockDate0);
    Class<Week> class0 = Week.class;
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""Requires start >= 0."", ""You are attempting to add an observation for "", class0);
    timeSeries0.getDataItem((RegularTimePeriod) quarter0);
    assertEquals(""Requires start >= 0."", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test097206() throws Throwable {
    MockDate mockDate0 = new MockDate((-507), (-507), 0);
    Quarter quarter0 = new Quarter(mockDate0);
    Class<Week> class0 = Week.class;
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""Requires start >= 0."", ""You are attempting to add an observation for "", class0);
    timeSeries0.getDataItem((RegularTimePeriod) quarter0);
    assertEquals(""You are attempting to add an observation for "", timeSeries0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public void setMaximumItemAge(long periods) {
    if (periods < 0) {
        throw new IllegalArgumentException(""Negative 'periods' argument."");
    }
    this.maximumItemAge = periods;
    // remove old items and notify if necessary
    removeAgedItems(true);
}","public void test098207() throws Throwable {
    Class<String> class0 = String.class;
    Millisecond millisecond0 = new Millisecond();
    TimeSeries timeSeries0 = new TimeSeries(millisecond0, ""-)OJT/."", ""-)OJT/."", class0);
    // Undeclared exception!
    try {
        timeSeries0.setMaximumItemAge((-689L));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Negative 'periods' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}","/**
 * Sets the number of time units in the 'history' for the series.  This
 * provides one mechanism for automatically dropping old data from the
 * time series. For example, if a series contains daily data, you might set
 * the history count to 30.  Then, when you add a new data item, all data
 * items more than 30 days older than the latest value are automatically
 * dropped from the series.
 *
 * @param periods  the number of time periods.
 *
 * @see #getMaximumItemAge()
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test099208() throws Throwable {
    MockDate mockDate0 = new MockDate(45, 0, 0, 1525, 45);
    Millisecond millisecond0 = new Millisecond(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(millisecond0);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test099209() throws Throwable {
    MockDate mockDate0 = new MockDate(45, 0, 0, 1525, 45);
    Millisecond millisecond0 = new Millisecond(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(millisecond0);
    timeSeries0.setMaximumItemAge(0L);
    timeSeries0.getMaximumItemAge();
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test100210() throws Throwable {
    Millisecond millisecond0 = new Millisecond();
    Class<Object> class0 = Object.class;
    TimeSeries timeSeries0 = new TimeSeries(""-)OJT/."", class0);
    timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, (double) (-689L));
    timeSeries0.setMaximumItemCount(0);
    assertEquals(0, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public void setMaximumItemCount(int maximum) {
    if (maximum < 0) {
        throw new IllegalArgumentException(""Negative 'maximum' argument."");
    }
    this.maximumItemCount = maximum;
    int count = this.data.size();
    if (count > maximum) {
        delete(0, count - maximum - 1);
    }
}","public void test101211() throws Throwable {
    Minute minute0 = new Minute();
    Class<RegularTimePeriod> class0 = RegularTimePeriod.class;
    TimeSeries timeSeries0 = new TimeSeries(minute0, class0);
    // Undeclared exception!
    try {
        timeSeries0.setMaximumItemCount((-1031));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Negative 'maximum' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}","/**
 * Sets the maximum number of items that will be retained in the series.
 * If you add a new item to the series such that the number of items will
 * exceed the maximum item count, then the FIRST element in the series is
 * automatically removed, ensuring that the maximum item count is not
 * exceeded.
 *
 * @param maximum  the maximum (requires >= 0).
 *
 * @see #getMaximumItemCount()
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test102212() throws Throwable {
    Clock clock0 = MockClock.systemUTC();
    Instant instant0 = MockInstant.now(clock0);
    Date date0 = Date.from(instant0);
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    TimeSeries timeSeries1 = new TimeSeries(date0);
    assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test102213() throws Throwable {
    Clock clock0 = MockClock.systemUTC();
    Instant instant0 = MockInstant.now(clock0);
    Date date0 = Date.from(instant0);
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    TimeSeries timeSeries1 = new TimeSeries(date0);
    assertEquals(""Time"", timeSeries1.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test102214() throws Throwable {
    Clock clock0 = MockClock.systemUTC();
    Instant instant0 = MockInstant.now(clock0);
    Date date0 = Date.from(instant0);
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    TimeSeries timeSeries1 = new TimeSeries(date0);
    assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test102215() throws Throwable {
    Clock clock0 = MockClock.systemUTC();
    Instant instant0 = MockInstant.now(clock0);
    Date date0 = Date.from(instant0);
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    TimeSeries timeSeries1 = new TimeSeries(date0);
    assertEquals(""Value"", timeSeries1.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test103216() throws Throwable {
    Class<String> class0 = String.class;
    TimeSeries timeSeries0 = new TimeSeries(""b"", """", ""b"", class0);
    timeSeries0.setRangeDescription(""]BlbnZ5}4H4"");
    assertEquals(""]BlbnZ5}4H4"", timeSeries0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public int getItemCount() {
    return this.data.size();
}","public void test104217() throws Throwable {
    MockDate mockDate0 = new MockDate();
    TimeZone timeZone0 = TimeZone.getTimeZone(""yehcE"");
    Day day0 = new Day(mockDate0, timeZone0);
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.add((RegularTimePeriod) day0, (Number) null);
    assertEquals(1, timeSeries0.getItemCount());
}","/**
 * Returns the number of items in the series.
 *
 * @return The item count.
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test104218() throws Throwable {
    MockDate mockDate0 = new MockDate();
    TimeZone timeZone0 = TimeZone.getTimeZone(""yehcE"");
    Day day0 = new Day(mockDate0, timeZone0);
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.add((RegularTimePeriod) day0, (Number) null);
    timeSeries0.update((RegularTimePeriod) day0, (Number) null);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public Object clone() throws CloneNotSupportedException {
    Object clone = createCopy(0, getItemCount() - 1);
    return clone;
}","public void test105219() throws Throwable {
    MockDate mockDate0 = new MockDate(45, 0, 0, 1525, 45);
    Millisecond millisecond0 = new Millisecond(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(millisecond0);
    // Undeclared exception!
    try {
        timeSeries0.clone();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Requires start <= end.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}","/**
 * Returns a clone of the time series.
 * <P>
 * Notes:
 * <ul>
 *   <li>no need to clone the domain and range descriptions, since String
 *     object is immutable;</li>
 *   <li>we pass over to the more general method clone(start, end).</li>
 * </ul>
 *
 * @return A clone of the time series.
 *
 * @throws CloneNotSupportedException not thrown by this class, but
 *         subclasses may differ.
 */"
"public void add(RegularTimePeriod period, double value, boolean notify) {
    // defer argument checking...
    TimeSeriesDataItem item = new TimeSeriesDataItem(period, value);
    add(item, notify);
}","public void test106220() throws Throwable {
    MockDate mockDate0 = new MockDate(45, 0, 0, 1525, 45);
    Millisecond millisecond0 = new Millisecond(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(millisecond0);
    // Undeclared exception!
    try {
        timeSeries0.add((RegularTimePeriod) millisecond0, (double) 0, true);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // You are trying to add data where the time period class is org.jfree.data.time.Millisecond, but the TimeSeries is expecting an instance of org.jfree.data.time.Day.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}","/**
 * Adds a new data item to the series and sends a {@link SeriesChangeEvent}
 * to all registered listeners.
 *
 * @param period  the time period (<code>null</code> not permitted).
 * @param value  the value.
 * @param notify  notify listeners?
 */"
"public int getItemCount() {
    return this.data.size();
}","public void test107221() throws Throwable {
    Minute minute0 = new Minute();
    TimeSeries timeSeries0 = new TimeSeries(""2:aXr!"");
    timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (double) 59);
    timeSeries0.getValue((RegularTimePeriod) minute0);
    assertEquals(1, timeSeries0.getItemCount());
}","/**
 * Returns the number of items in the series.
 *
 * @return The item count.
 */"
"public RegularTimePeriod getNextTimePeriod() {
    RegularTimePeriod last = getTimePeriod(getItemCount() - 1);
    return last.next();
}","public void test108222() throws Throwable {
    MockDate mockDate0 = new MockDate(714, 479, 1351);
    Month month0 = new Month(mockDate0);
    Class<Millisecond> class0 = Millisecond.class;
    TimeSeries timeSeries0 = new TimeSeries(month0, class0);
    // Undeclared exception!
    try {
        timeSeries0.getNextTimePeriod();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * Returns a time period that would be the next in sequence on the end of
 * the time series.
 *
 * @return The next time period.
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test109223() throws Throwable {
    Clock clock0 = MockClock.systemUTC();
    Instant instant0 = MockInstant.now(clock0);
    Date date0 = Date.from(instant0);
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    timeSeries0.getItems();
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test109224() throws Throwable {
    Clock clock0 = MockClock.systemUTC();
    Instant instant0 = MockInstant.now(clock0);
    Date date0 = Date.from(instant0);
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    timeSeries0.getItems();
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test109225() throws Throwable {
    Clock clock0 = MockClock.systemUTC();
    Instant instant0 = MockInstant.now(clock0);
    Date date0 = Date.from(instant0);
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    timeSeries0.getItems();
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test109226() throws Throwable {
    Clock clock0 = MockClock.systemUTC();
    Instant instant0 = MockInstant.now(clock0);
    Date date0 = Date.from(instant0);
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    timeSeries0.getItems();
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public void update(int index, Number value) {
    TimeSeriesDataItem item = getDataItem(index);
    item.setValue(value);
    fireSeriesChanged();
}","public void test110227() throws Throwable {
    MockDate mockDate0 = new MockDate(0, 45, 0, 1525, 1525, 1525);
    Millisecond millisecond0 = new Millisecond(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(millisecond0);
    // Undeclared exception!
    try {
        timeSeries0.update(45, (Number) 0);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 45, Size: 0
        //
        verifyException(""java.util.ArrayList"", e);
    }
}","/**
 * Updates (changes) the value of a data item.
 *
 * @param index  the index of the data item.
 * @param value  the new value (<code>null</code> permitted).
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test111228() throws Throwable {
    Minute minute0 = new Minute();
    TimeSeries timeSeries0 = new TimeSeries(""2:aXr!"");
    TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) minute0, (RegularTimePeriod) minute0);
    boolean boolean0 = timeSeries1.equals(timeSeries0);
    assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public boolean equals(Object object) {
    if (object == this) {
        return true;
    }
    if (!(object instanceof TimeSeries) || !super.equals(object)) {
        return false;
    }
    TimeSeries s = (TimeSeries) object;
    if (!ObjectUtilities.equal(getDomainDescription(), s.getDomainDescription())) {
        return false;
    }
    if (!ObjectUtilities.equal(getRangeDescription(), s.getRangeDescription())) {
        return false;
    }
    if (!getClass().equals(s.getClass())) {
        return false;
    }
    if (getMaximumItemAge() != s.getMaximumItemAge()) {
        return false;
    }
    if (getMaximumItemCount() != s.getMaximumItemCount()) {
        return false;
    }
    int count = getItemCount();
    if (count != s.getItemCount()) {
        return false;
    }
    for (int i = 0; i < count; i++) {
        if (!getDataItem(i).equals(s.getDataItem(i))) {
            return false;
        }
    }
    return true;
}","public void test111229() throws Throwable {
    Minute minute0 = new Minute();
    TimeSeries timeSeries0 = new TimeSeries(""2:aXr!"");
    TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) minute0, (RegularTimePeriod) minute0);
    boolean boolean0 = timeSeries1.equals(timeSeries0);
    assertTrue(boolean0);
}","/**
 * Tests the series for equality with an arbitrary object.
 *
 * @param object  the object to test against (<code>null</code> permitted).
 *
 * @return A boolean.
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test111230() throws Throwable {
    Minute minute0 = new Minute();
    TimeSeries timeSeries0 = new TimeSeries(""2:aXr!"");
    TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) minute0, (RegularTimePeriod) minute0);
    boolean boolean0 = timeSeries1.equals(timeSeries0);
    assertEquals(""Time"", timeSeries1.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test111231() throws Throwable {
    Minute minute0 = new Minute();
    TimeSeries timeSeries0 = new TimeSeries(""2:aXr!"");
    TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) minute0, (RegularTimePeriod) minute0);
    boolean boolean0 = timeSeries1.equals(timeSeries0);
    assertEquals(""Value"", timeSeries1.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test111232() throws Throwable {
    Minute minute0 = new Minute();
    TimeSeries timeSeries0 = new TimeSeries(""2:aXr!"");
    TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) minute0, (RegularTimePeriod) minute0);
    boolean boolean0 = timeSeries1.equals(timeSeries0);
    assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
