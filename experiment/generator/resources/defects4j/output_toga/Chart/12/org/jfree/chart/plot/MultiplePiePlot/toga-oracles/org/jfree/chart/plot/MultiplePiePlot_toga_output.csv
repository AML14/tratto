project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
    Color color0 = (Color) JFreeChart.DEFAULT_BACKGROUND_PAINT;
    multiplePiePlot0.setAggregatedItemsPaint(color0);
    MultiplePiePlot multiplePiePlot1 = (MultiplePiePlot) multiplePiePlot0.clone();
    boolean boolean0 = multiplePiePlot0.equals(multiplePiePlot1);
    assertTrue(boolean0);
}",0,
project,0,test001,"public void test001() throws Throwable {
    MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
    Color color0 = (Color) JFreeChart.DEFAULT_BACKGROUND_PAINT;
    multiplePiePlot0.setAggregatedItemsPaint(color0);
    MultiplePiePlot multiplePiePlot1 = (MultiplePiePlot) multiplePiePlot0.clone();
    boolean boolean0 = multiplePiePlot0.equals(multiplePiePlot1);
    assertEquals(0.0, multiplePiePlot1.getLimit(), 0.01);
}",0,
project,0,test012,"public void test012() throws Throwable {
    MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
    MultiplePiePlot multiplePiePlot1 = new MultiplePiePlot();
    assertEquals(0.0, multiplePiePlot1.getLimit(), 0.01);
}",0,
project,0,test013,"public void test013() throws Throwable {
    MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
    MultiplePiePlot multiplePiePlot1 = new MultiplePiePlot();
    multiplePiePlot1.setLimit(1.0F);
    boolean boolean0 = multiplePiePlot0.equals(multiplePiePlot1);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test024,"public void test024() throws Throwable {
    double[][] doubleArray0 = new double[2][0];
    double[] doubleArray1 = new double[10];
    doubleArray0[0] = doubleArray1;
    DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
    MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultIntervalCategoryDataset0);
    JFreeChart jFreeChart0 = new JFreeChart(""hnlXySWvrw"", multiplePiePlot0);
    StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
    // Undeclared exception!
    try {
        jFreeChart0.createBufferedImage(20, 20, chartRenderingInfo0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 0
        //
        verifyException(""org.jfree.data.category.DefaultIntervalCategoryDataset"", e);
    }
}",0,
project,0,test035,"public void test035() throws Throwable {
    TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
    MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(taskSeriesCollection0);
    JFreeChart jFreeChart0 = new JFreeChart("""", multiplePiePlot0);
    RectangleInsets rectangleInsets0 = Axis.DEFAULT_TICK_LABEL_INSETS;
    multiplePiePlot0.setInsets(rectangleInsets0, false);
    jFreeChart0.createBufferedImage(4, 10);
    assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
}",0,
project,0,test046,"public void test046() throws Throwable {
    MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
    SystemColor systemColor0 = SystemColor.scrollbar;
    multiplePiePlot0.setAggregatedItemsPaint(systemColor0);
    multiplePiePlot0.getAggregatedItemsPaint();
    assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
}",0,
project,0,test057,"public void test057() throws Throwable {
    DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
    MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultKeyedValues2DDataset0);
    JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
    DateTitle dateTitle0 = new DateTitle();
    jFreeChart0.addSubtitle((Title) dateTitle0);
    multiplePiePlot0.getPieChart();
    assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
}",0,
project,0,test068,"public void test068() throws Throwable {
    DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
    MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultKeyedValues2DDataset0);
    assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
}",0,
project,0,test069,"public void test069() throws Throwable {
    DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
    MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultKeyedValues2DDataset0);
    multiplePiePlot0.setLimit(1.0);
    double double0 = multiplePiePlot0.getLimit();
    assertEquals(1.0, double0, 0.01);
}",0,
project,0,test0710,"public void test0710() throws Throwable {
    MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
    multiplePiePlot0.setLimit((-1761.638998));
    double double0 = multiplePiePlot0.getLimit();
    assertEquals((-1761.638998), double0, 0.01);
}",0,
project,0,test0811,"public void test0811() throws Throwable {
    MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
    multiplePiePlot0.getDataset();
    assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
}",0,
project,0,test0912,"public void test0912() throws Throwable {
    String[] stringArray0 = new String[3];
    DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
    MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultIntervalCategoryDataset0);
    // Undeclared exception!
    try {
        multiplePiePlot0.getLegendItems();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test1013,"public void test1013() throws Throwable {
    MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
    JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
    ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 2670, 15, 10, 10, 2670, 3224, true, true, true, true, true, true);
    Rectangle2D rectangle2D0 = chartPanel0.getScreenDataArea();
    PlotState plotState0 = new PlotState();
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
    PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
    // Undeclared exception!
    try {
        multiplePiePlot0.draw((Graphics2D) null, rectangle2D0, (Point2D) null, plotState0, plotRenderingInfo0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jfree.chart.plot.Plot"", e);
    }
}",0,
project,0,test1114,"public void test1114() throws Throwable {
    DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
    MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultKeyedValues2DDataset0);
    multiplePiePlot0.getDataset();
    assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
}",0,
project,0,test1215,"public void test1215() throws Throwable {
    MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
    multiplePiePlot0.setBackgroundAlpha(10);
    MultiplePiePlot multiplePiePlot1 = new MultiplePiePlot();
    boolean boolean0 = multiplePiePlot0.equals(multiplePiePlot1);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test1216,"public void test1216() throws Throwable {
    MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
    multiplePiePlot0.setBackgroundAlpha(10);
    MultiplePiePlot multiplePiePlot1 = new MultiplePiePlot();
    boolean boolean0 = multiplePiePlot0.equals(multiplePiePlot1);
    assertEquals(0.0, multiplePiePlot1.getLimit(), 0.01);
}",0,
project,0,test1317,"public void test1317() throws Throwable {
    MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
    Color color0 = (Color) JFreeChart.DEFAULT_BACKGROUND_PAINT;
    multiplePiePlot0.setAggregatedItemsPaint(color0);
    MultiplePiePlot multiplePiePlot1 = new MultiplePiePlot();
    boolean boolean0 = multiplePiePlot0.equals(multiplePiePlot1);
    assertFalse(multiplePiePlot1.equals((Object) multiplePiePlot0));
}",0,
project,0,test1318,"public void test1318() throws Throwable {
    MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
    Color color0 = (Color) JFreeChart.DEFAULT_BACKGROUND_PAINT;
    multiplePiePlot0.setAggregatedItemsPaint(color0);
    MultiplePiePlot multiplePiePlot1 = new MultiplePiePlot();
    boolean boolean0 = multiplePiePlot0.equals(multiplePiePlot1);
    assertEquals(0.0, multiplePiePlot1.getLimit(), 0.01);
}",0,
project,0,test1319,"public void test1319() throws Throwable {
    MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
    Color color0 = (Color) JFreeChart.DEFAULT_BACKGROUND_PAINT;
    multiplePiePlot0.setAggregatedItemsPaint(color0);
    MultiplePiePlot multiplePiePlot1 = new MultiplePiePlot();
    boolean boolean0 = multiplePiePlot0.equals(multiplePiePlot1);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test1420,"public void test1420() throws Throwable {
    DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
    MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultKeyedValues2DDataset0);
    multiplePiePlot0.setAggregatedItemsKey(0.5F);
    MultiplePiePlot multiplePiePlot1 = new MultiplePiePlot();
    boolean boolean0 = multiplePiePlot0.equals(multiplePiePlot1);
    assertEquals(0.0, multiplePiePlot1.getLimit(), 0.01);
}",0,
project,0,test1421,"public void test1421() throws Throwable {
    DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
    MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultKeyedValues2DDataset0);
    multiplePiePlot0.setAggregatedItemsKey(0.5F);
    MultiplePiePlot multiplePiePlot1 = new MultiplePiePlot();
    boolean boolean0 = multiplePiePlot0.equals(multiplePiePlot1);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test1522,"public void test1522() throws Throwable {
    DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
    MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultKeyedValues2DDataset0);
    multiplePiePlot0.setLimit(10);
    MultiplePiePlot multiplePiePlot1 = new MultiplePiePlot();
    boolean boolean0 = multiplePiePlot0.equals(multiplePiePlot1);
    assertEquals(10.0, multiplePiePlot0.getLimit(), 0.01);
}",0,
project,0,test1523,"public void test1523() throws Throwable {
    DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
    MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultKeyedValues2DDataset0);
    multiplePiePlot0.setLimit(10);
    MultiplePiePlot multiplePiePlot1 = new MultiplePiePlot();
    boolean boolean0 = multiplePiePlot0.equals(multiplePiePlot1);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test1624,"public void test1624() throws Throwable {
    DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
    MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultKeyedValues2DDataset0);
    TableOrder tableOrder0 = TableOrder.BY_ROW;
    multiplePiePlot0.setDataExtractOrder(tableOrder0);
    MultiplePiePlot multiplePiePlot1 = new MultiplePiePlot();
    boolean boolean0 = multiplePiePlot0.equals(multiplePiePlot1);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test1625,"public void test1625() throws Throwable {
    DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
    MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultKeyedValues2DDataset0);
    TableOrder tableOrder0 = TableOrder.BY_ROW;
    multiplePiePlot0.setDataExtractOrder(tableOrder0);
    MultiplePiePlot multiplePiePlot1 = new MultiplePiePlot();
    boolean boolean0 = multiplePiePlot0.equals(multiplePiePlot1);
    assertEquals(0.0, multiplePiePlot1.getLimit(), 0.01);
}",0,
project,0,test1726,"public void test1726() throws Throwable {
    DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
    MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultKeyedValues2DDataset0);
    defaultKeyedValues2DDataset0.addChangeListener(multiplePiePlot0);
    multiplePiePlot0.setDataset(defaultKeyedValues2DDataset0);
    assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
}",0,
project,0,test1827,"public void test1827() throws Throwable {
    DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
    MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultStatisticalCategoryDataset0);
    Object object0 = new Object();
    boolean boolean0 = multiplePiePlot0.equals(object0);
    assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
}",0,
project,0,test1828,"public void test1828() throws Throwable {
    DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
    MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultStatisticalCategoryDataset0);
    Object object0 = new Object();
    boolean boolean0 = multiplePiePlot0.equals(object0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test1929,"public void test1929() throws Throwable {
    MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
    multiplePiePlot0.getLegendItems();
    assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
}",0,
project,0,test2030,"public void test2030() throws Throwable {
    DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
    MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultKeyedValues2DDataset0);
    defaultKeyedValues2DDataset0.setValue((Number) 1.0F, (Comparable) 10, (Comparable) 1.0F);
    TableOrder tableOrder0 = TableOrder.BY_ROW;
    multiplePiePlot0.setDataExtractOrder(tableOrder0);
    multiplePiePlot0.getLegendItems();
    LegendItemCollection legendItemCollection0 = multiplePiePlot0.getLegendItems();
    assertEquals(1, legendItemCollection0.getItemCount());
}",0,"assertEquals(1, legendItemCollection0.getItemCount())"
project,0,test2031,"public void test2031() throws Throwable {
    DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
    MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultKeyedValues2DDataset0);
    defaultKeyedValues2DDataset0.setValue((Number) 1.0F, (Comparable) 10, (Comparable) 1.0F);
    TableOrder tableOrder0 = TableOrder.BY_ROW;
    multiplePiePlot0.setDataExtractOrder(tableOrder0);
    multiplePiePlot0.getLegendItems();
    LegendItemCollection legendItemCollection0 = multiplePiePlot0.getLegendItems();
    assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
}",0,
project,0,test2132,"public void test2132() throws Throwable {
    double[][] doubleArray0 = new double[2][0];
    double[] doubleArray1 = new double[9];
    doubleArray0[0] = doubleArray1;
    doubleArray0[1] = doubleArray1;
    DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
    MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultIntervalCategoryDataset0);
    JFreeChart jFreeChart0 = new JFreeChart(""hnlXySWvrw"", multiplePiePlot0);
    jFreeChart0.createBufferedImage(10, 10);
    assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
}",0,
project,0,test2233,"public void test2233() throws Throwable {
    double[][] doubleArray0 = new double[2][0];
    double[] doubleArray1 = new double[10];
    doubleArray0[0] = doubleArray1;
    doubleArray0[1] = doubleArray1;
    DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
    MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultIntervalCategoryDataset0);
    JFreeChart jFreeChart0 = new JFreeChart(""hnlXySWvrw"", multiplePiePlot0);
    StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
    jFreeChart0.createBufferedImage(8, 8, chartRenderingInfo0);
    assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
}",1,
project,0,test2334,"public void test2334() throws Throwable {
    DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
    MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultStatisticalCategoryDataset0);
    BufferedImage bufferedImage0 = new BufferedImage(24, 24, 10);
    Graphics2D graphics2D0 = bufferedImage0.createGraphics();
    Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(547.2595721, (-319.649), (-5.0), 1.0F);
    Point2D point2D0 = RectangleAnchor.coordinates(rectangle2D_Double0, (RectangleAnchor) null);
    Rectangle rectangle0 = new Rectangle(0, 0);
    PlotState plotState0 = new PlotState();
    StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
    PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
    multiplePiePlot0.draw(graphics2D0, rectangle0, point2D0, plotState0, plotRenderingInfo0);
    assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
}",0,
project,0,test2435,"public void test2435() throws Throwable {
    MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
    // Undeclared exception!
    try {
        multiplePiePlot0.setAggregatedItemsPaint((Paint) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'paint' argument.
        //
        verifyException(""org.jfree.chart.plot.MultiplePiePlot"", e);
    }
}",1,
project,0,test2536,"public void test2536() throws Throwable {
    MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
    // Undeclared exception!
    try {
        multiplePiePlot0.setAggregatedItemsKey((Comparable) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'key' argument.
        //
        verifyException(""org.jfree.chart.plot.MultiplePiePlot"", e);
    }
}",0,
project,0,test2637,"public void test2637() throws Throwable {
    MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
    // Undeclared exception!
    try {
        multiplePiePlot0.setDataExtractOrder((TableOrder) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'order' argument
        //
        verifyException(""org.jfree.chart.plot.MultiplePiePlot"", e);
    }
}",0,
project,0,test2738,"public void test2738() throws Throwable {
    MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
    JFreeChart jFreeChart0 = new JFreeChart(multiplePiePlot0);
    // Undeclared exception!
    try {
        multiplePiePlot0.setPieChart(jFreeChart0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The 'pieChart' argument must be a chart based on a PiePlot.
        //
        verifyException(""org.jfree.chart.plot.MultiplePiePlot"", e);
    }
}",1,
project,0,test2839,"public void test2839() throws Throwable {
    MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
    // Undeclared exception!
    try {
        multiplePiePlot0.setPieChart((JFreeChart) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'pieChart' argument.
        //
        verifyException(""org.jfree.chart.plot.MultiplePiePlot"", e);
    }
}",1,
project,0,test2940,"public void test2940() throws Throwable {
    MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
    multiplePiePlot0.setDataset((CategoryDataset) null);
    assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
}",0,
project,0,test3041,"public void test3041() throws Throwable {
    DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
    MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultKeyedValues2DDataset0);
    TableOrder tableOrder0 = multiplePiePlot0.getDataExtractOrder();
    multiplePiePlot0.setDataExtractOrder(tableOrder0);
    assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
}",0,
project,0,test3142,"public void test3142() throws Throwable {
    DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
    MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultKeyedValues2DDataset0);
    double double0 = multiplePiePlot0.getLimit();
    assertEquals(0.0, double0, 0.01);
}",0,
project,0,test3244,"public void test3244() throws Throwable {
    DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
    MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultKeyedValues2DDataset0);
    multiplePiePlot0.setLimit(1.0);
    LegendItemCollection legendItemCollection0 = multiplePiePlot0.getLegendItems();
    assertEquals(1, legendItemCollection0.getItemCount());
}",0,"assertEquals(0, legendItemCollection0.getItemCount())"
project,0,test3345,"public void test3345() throws Throwable {
    DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
    MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultKeyedValues2DDataset0);
    defaultKeyedValues2DDataset0.setValue((Number) 1.0F, (Comparable) 10, (Comparable) 1.0F);
    multiplePiePlot0.getLegendItems();
    LegendItemCollection legendItemCollection0 = multiplePiePlot0.getLegendItems();
    assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
}",0,
project,0,test3346,"public void test3346() throws Throwable {
    DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
    MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultKeyedValues2DDataset0);
    defaultKeyedValues2DDataset0.setValue((Number) 1.0F, (Comparable) 10, (Comparable) 1.0F);
    multiplePiePlot0.getLegendItems();
    LegendItemCollection legendItemCollection0 = multiplePiePlot0.getLegendItems();
    assertEquals(1, legendItemCollection0.getItemCount());
}",0,"assertEquals(0, legendItemCollection0.getItemCount())"
project,0,test3447,"public void test3447() throws Throwable {
    DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
    MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultKeyedValues2DDataset0);
    Comparable comparable0 = multiplePiePlot0.getAggregatedItemsKey();
    assertEquals(""Other"", comparable0);
}",0,
project,0,test3448,"public void test3448() throws Throwable {
    DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
    MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultKeyedValues2DDataset0);
    Comparable comparable0 = multiplePiePlot0.getAggregatedItemsKey();
    assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
}",0,
project,0,test3549,"public void test3549() throws Throwable {
    DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
    MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultKeyedValues2DDataset0);
    String string0 = multiplePiePlot0.getPlotType();
    assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
}",0,
project,0,test3550,"public void test3550() throws Throwable {
    DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
    MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultKeyedValues2DDataset0);
    String string0 = multiplePiePlot0.getPlotType();
    assertEquals(""Multiple Pie Plot"", string0);
}",0,assertNotNull(string0)
project,0,test3651,"public void test3651() throws Throwable {
    DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
    MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultKeyedValues2DDataset0);
    JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
    multiplePiePlot0.setPieChart(jFreeChart0);
    assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
}",0,
