focal_method,test_prefix,docstring
"public int getMinStartIndex() {
    return this.minStartIndex;
}","public void test000() throws Throwable {
    Minute minute0 = new Minute();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0, ""iMPL^G+;TH#Qv"", ""><8,KGM>"");
    TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(2545, 0);
    timePeriodValues0.add((TimePeriod) minute0, (Number) 0);
    boolean boolean0 = timePeriodValues0.equals(timePeriodValues1);
    assertEquals(0, timePeriodValues0.getMinStartIndex());
}","/**
 * Returns the index of the time period with the minimum start milliseconds.
 *
 * @return The index.
 */"
"public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof TimePeriodValues)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    TimePeriodValues that = (TimePeriodValues) obj;
    if (!ObjectUtilities.equal(this.getDomainDescription(), that.getDomainDescription())) {
        return false;
    }
    if (!ObjectUtilities.equal(this.getRangeDescription(), that.getRangeDescription())) {
        return false;
    }
    int count = getItemCount();
    if (count != that.getItemCount()) {
        return false;
    }
    for (int i = 0; i < count; i++) {
        if (!getDataItem(i).equals(that.getDataItem(i))) {
            return false;
        }
    }
    return true;
}","public void test001() throws Throwable {
    Minute minute0 = new Minute();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0, ""iMPL^G+;TH#Qv"", ""><8,KGM>"");
    TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(2545, 0);
    timePeriodValues0.add((TimePeriod) minute0, (Number) 0);
    boolean boolean0 = timePeriodValues0.equals(timePeriodValues1);
    assertFalse(timePeriodValues1.equals((Object) timePeriodValues0));
}","/**
 * Tests the series for equality with another object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return <code>true</code> or <code>false</code>.
 */"
"public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof TimePeriodValues)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    TimePeriodValues that = (TimePeriodValues) obj;
    if (!ObjectUtilities.equal(this.getDomainDescription(), that.getDomainDescription())) {
        return false;
    }
    if (!ObjectUtilities.equal(this.getRangeDescription(), that.getRangeDescription())) {
        return false;
    }
    int count = getItemCount();
    if (count != that.getItemCount()) {
        return false;
    }
    for (int i = 0; i < count; i++) {
        if (!getDataItem(i).equals(that.getDataItem(i))) {
            return false;
        }
    }
    return true;
}","public void test002() throws Throwable {
    Minute minute0 = new Minute();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0, ""iMPL^G+;TH#Qv"", ""><8,KGM>"");
    TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(2545, 0);
    timePeriodValues0.add((TimePeriod) minute0, (Number) 0);
    boolean boolean0 = timePeriodValues0.equals(timePeriodValues1);
    assertFalse(boolean0);
}","/**
 * Tests the series for equality with another object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return <code>true</code> or <code>false</code>.
 */"
"public int getItemCount() {
    return this.data.size();
}","public void test013() throws Throwable {
    Millisecond millisecond0 = new Millisecond();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0, """", """");
    TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) millisecond0, (Number) 0);
    timePeriodValues0.add(timePeriodValue0);
    timePeriodValues0.delete(0, 0);
    assertEquals(0, timePeriodValues0.getItemCount());
}","/**
 * Returns the number of items in the series.
 *
 * @return The item count.
 */"
"public int getMinEndIndex() {
    return this.minEndIndex;
}","public void test024() throws Throwable {
    Hour hour0 = new Hour();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0, (String) null, (String) null);
    timePeriodValues0.add((TimePeriod) hour0, (Number) 0);
    MockDate mockDate0 = new MockDate(37, 23, 640, (-1285), 29, 29);
    TimeZone timeZone0 = TimeZone.getTimeZone(""nIgn_xMf}8Te"");
    Hour hour1 = new Hour(mockDate0, timeZone0);
    timePeriodValues0.add((TimePeriod) hour1, (Number) 23);
    timePeriodValues0.add((TimePeriod) hour1, 0.0);
    assertEquals(1, timePeriodValues0.getMinEndIndex());
}","/**
 * Returns the index of the time period with the minimum end milliseconds.
 *
 * @return The index.
 */"
"public int getMinEndIndex() {
    return this.minEndIndex;
}","public void test035() throws Throwable {
    Minute minute0 = new Minute();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0, ""iMPL^G+;TH#Qv"", ""><8,KGM>"");
    TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) minute0, (double) 59);
    timePeriodValues0.add(timePeriodValue0);
    timePeriodValues0.update(0, 0);
    assertEquals(0, timePeriodValues0.getMinEndIndex());
}","/**
 * Returns the index of the time period with the minimum end milliseconds.
 *
 * @return The index.
 */"
"public int getMaxEndIndex() {
    return this.maxEndIndex;
}","public void test036() throws Throwable {
    Minute minute0 = new Minute();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0, ""iMPL^G+;TH#Qv"", ""><8,KGM>"");
    TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) minute0, (double) 59);
    timePeriodValues0.add(timePeriodValue0);
    timePeriodValues0.update(0, 0);
    assertEquals(0, timePeriodValues0.getMaxEndIndex());
}","/**
 * Returns the index of the time period with the maximum end milliseconds.
 *
 * @return The index.
 */"
"public int getMaxMiddleIndex() {
    return this.maxMiddleIndex;
}","public void test047() throws Throwable {
    Minute minute0 = new Minute();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0, ""ex"", ""ex"");
    boolean boolean0 = timePeriodValues0.equals(timePeriodValues0);
    assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
}","/**
 * Returns the index of the time period with the maximum middle
 * milliseconds.
 *
 * @return The index.
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test048() throws Throwable {
    Minute minute0 = new Minute();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0, ""ex"", ""ex"");
    boolean boolean0 = timePeriodValues0.equals(timePeriodValues0);
    assertEquals(""ex"", timePeriodValues0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #getRangeDescription()
 * @see #setDomainDescription(String)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test049() throws Throwable {
    Minute minute0 = new Minute();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0, ""ex"", ""ex"");
    boolean boolean0 = timePeriodValues0.equals(timePeriodValues0);
    assertEquals(""ex"", timePeriodValues0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #getDomainDescription()
 * @see #setRangeDescription(String)
 */"
"public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof TimePeriodValues)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    TimePeriodValues that = (TimePeriodValues) obj;
    if (!ObjectUtilities.equal(this.getDomainDescription(), that.getDomainDescription())) {
        return false;
    }
    if (!ObjectUtilities.equal(this.getRangeDescription(), that.getRangeDescription())) {
        return false;
    }
    int count = getItemCount();
    if (count != that.getItemCount()) {
        return false;
    }
    for (int i = 0; i < count; i++) {
        if (!getDataItem(i).equals(that.getDataItem(i))) {
            return false;
        }
    }
    return true;
}","public void test0410() throws Throwable {
    Minute minute0 = new Minute();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0, ""ex"", ""ex"");
    boolean boolean0 = timePeriodValues0.equals(timePeriodValues0);
    assertTrue(boolean0);
}","/**
 * Tests the series for equality with another object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return <code>true</code> or <code>false</code>.
 */"
"public int getMinStartIndex() {
    return this.minStartIndex;
}","public void test0411() throws Throwable {
    Minute minute0 = new Minute();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0, ""ex"", ""ex"");
    boolean boolean0 = timePeriodValues0.equals(timePeriodValues0);
    assertEquals((-1), timePeriodValues0.getMinStartIndex());
}","/**
 * Returns the index of the time period with the minimum start milliseconds.
 *
 * @return The index.
 */"
"public int getMaxStartIndex() {
    return this.maxStartIndex;
}","public void test0412() throws Throwable {
    Minute minute0 = new Minute();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0, ""ex"", ""ex"");
    boolean boolean0 = timePeriodValues0.equals(timePeriodValues0);
    assertEquals((-1), timePeriodValues0.getMaxStartIndex());
}","/**
 * Returns the index of the time period with the maximum start milliseconds.
 *
 * @return The index.
 */"
"public int getMaxEndIndex() {
    return this.maxEndIndex;
}","public void test0413() throws Throwable {
    Minute minute0 = new Minute();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0, ""ex"", ""ex"");
    boolean boolean0 = timePeriodValues0.equals(timePeriodValues0);
    assertEquals((-1), timePeriodValues0.getMaxEndIndex());
}","/**
 * Returns the index of the time period with the maximum end milliseconds.
 *
 * @return The index.
 */"
"public int getMinMiddleIndex() {
    return this.minMiddleIndex;
}","public void test0414() throws Throwable {
    Minute minute0 = new Minute();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0, ""ex"", ""ex"");
    boolean boolean0 = timePeriodValues0.equals(timePeriodValues0);
    assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
}","/**
 * Returns the index of the time period with the minimum middle
 * milliseconds.
 *
 * @return The index.
 */"
"public int getMinEndIndex() {
    return this.minEndIndex;
}","public void test0415() throws Throwable {
    Minute minute0 = new Minute();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0, ""ex"", ""ex"");
    boolean boolean0 = timePeriodValues0.equals(timePeriodValues0);
    assertEquals((-1), timePeriodValues0.getMinEndIndex());
}","/**
 * Returns the index of the time period with the minimum end milliseconds.
 *
 * @return The index.
 */"
"public int getMaxStartIndex() {
    return this.maxStartIndex;
}","public void test0516() throws Throwable {
    MockDate mockDate0 = new MockDate();
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
    Quarter quarter0 = new Quarter(mockDate0, timeZone0);
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0);
    timePeriodValues0.add((TimePeriod) quarter0, (Number) 4);
    timePeriodValues0.add((TimePeriod) quarter0, (-1315.4242));
    timePeriodValues0.getValue(1);
    assertEquals(0, timePeriodValues0.getMaxStartIndex());
}","/**
 * Returns the index of the time period with the maximum start milliseconds.
 *
 * @return The index.
 */"
"public int getMaxStartIndex() {
    return this.maxStartIndex;
}","public void test0617() throws Throwable {
    Hour hour0 = new Hour();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0, (String) null, (String) null);
    timePeriodValues0.add((TimePeriod) hour0, (Number) 0);
    timePeriodValues0.getValue(0);
    assertEquals(0, timePeriodValues0.getMaxStartIndex());
}","/**
 * Returns the index of the time period with the maximum start milliseconds.
 *
 * @return The index.
 */"
"public int getMaxEndIndex() {
    return this.maxEndIndex;
}","public void test0618() throws Throwable {
    Hour hour0 = new Hour();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0, (String) null, (String) null);
    timePeriodValues0.add((TimePeriod) hour0, (Number) 0);
    timePeriodValues0.getValue(0);
    assertEquals(0, timePeriodValues0.getMaxEndIndex());
}","/**
 * Returns the index of the time period with the maximum end milliseconds.
 *
 * @return The index.
 */"
"public int getMinMiddleIndex() {
    return this.minMiddleIndex;
}","public void test0719() throws Throwable {
    MockDate mockDate0 = new MockDate();
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
    Quarter quarter0 = new Quarter(mockDate0, timeZone0);
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0);
    timePeriodValues0.add((TimePeriod) quarter0, (Number) 4);
    timePeriodValues0.add((TimePeriod) quarter0, (Number) 4);
    timePeriodValues0.getValue(1);
    assertEquals(0, timePeriodValues0.getMinMiddleIndex());
}","/**
 * Returns the index of the time period with the minimum middle
 * milliseconds.
 *
 * @return The index.
 */"
"public int getMinEndIndex() {
    return this.minEndIndex;
}","public void test0820() throws Throwable {
    Hour hour0 = new Hour();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0, (String) null, (String) null);
    timePeriodValues0.add((TimePeriod) hour0, (Number) 0);
    timePeriodValues0.getTimePeriod(0);
    assertEquals(0, timePeriodValues0.getMinEndIndex());
}","/**
 * Returns the index of the time period with the minimum end milliseconds.
 *
 * @return The index.
 */"
"public int getMinStartIndex() {
    return this.minStartIndex;
}","public void test0821() throws Throwable {
    Hour hour0 = new Hour();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0, (String) null, (String) null);
    timePeriodValues0.add((TimePeriod) hour0, (Number) 0);
    timePeriodValues0.getTimePeriod(0);
    assertEquals(0, timePeriodValues0.getMinStartIndex());
}","/**
 * Returns the index of the time period with the minimum start milliseconds.
 *
 * @return The index.
 */"
"public int getMaxMiddleIndex() {
    return this.maxMiddleIndex;
}","public void test0922() throws Throwable {
    MockDate mockDate0 = new MockDate();
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
    Quarter quarter0 = new Quarter(mockDate0, timeZone0);
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0);
    String string0 = timePeriodValues0.getRangeDescription();
    assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
}","/**
 * Returns the index of the time period with the maximum middle
 * milliseconds.
 *
 * @return The index.
 */"
"public int getMaxStartIndex() {
    return this.maxStartIndex;
}","public void test0923() throws Throwable {
    MockDate mockDate0 = new MockDate();
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
    Quarter quarter0 = new Quarter(mockDate0, timeZone0);
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0);
    String string0 = timePeriodValues0.getRangeDescription();
    assertEquals((-1), timePeriodValues0.getMaxStartIndex());
}","/**
 * Returns the index of the time period with the maximum start milliseconds.
 *
 * @return The index.
 */"
"public int getMaxEndIndex() {
    return this.maxEndIndex;
}","public void test0924() throws Throwable {
    MockDate mockDate0 = new MockDate();
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
    Quarter quarter0 = new Quarter(mockDate0, timeZone0);
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0);
    String string0 = timePeriodValues0.getRangeDescription();
    assertEquals((-1), timePeriodValues0.getMaxEndIndex());
}","/**
 * Returns the index of the time period with the maximum end milliseconds.
 *
 * @return The index.
 */"
"public int getMinEndIndex() {
    return this.minEndIndex;
}","public void test0925() throws Throwable {
    MockDate mockDate0 = new MockDate();
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
    Quarter quarter0 = new Quarter(mockDate0, timeZone0);
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0);
    String string0 = timePeriodValues0.getRangeDescription();
    assertEquals((-1), timePeriodValues0.getMinEndIndex());
}","/**
 * Returns the index of the time period with the minimum end milliseconds.
 *
 * @return The index.
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test0926() throws Throwable {
    MockDate mockDate0 = new MockDate();
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
    Quarter quarter0 = new Quarter(mockDate0, timeZone0);
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0);
    String string0 = timePeriodValues0.getRangeDescription();
    assertEquals(""Value"", string0);
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #getDomainDescription()
 * @see #setRangeDescription(String)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test0927() throws Throwable {
    MockDate mockDate0 = new MockDate();
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
    Quarter quarter0 = new Quarter(mockDate0, timeZone0);
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0);
    String string0 = timePeriodValues0.getRangeDescription();
    assertEquals(""Time"", timePeriodValues0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #getRangeDescription()
 * @see #setDomainDescription(String)
 */"
"public int getMinMiddleIndex() {
    return this.minMiddleIndex;
}","public void test0928() throws Throwable {
    MockDate mockDate0 = new MockDate();
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
    Quarter quarter0 = new Quarter(mockDate0, timeZone0);
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0);
    String string0 = timePeriodValues0.getRangeDescription();
    assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
}","/**
 * Returns the index of the time period with the minimum middle
 * milliseconds.
 *
 * @return The index.
 */"
"public int getMinStartIndex() {
    return this.minStartIndex;
}","public void test0929() throws Throwable {
    MockDate mockDate0 = new MockDate();
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
    Quarter quarter0 = new Quarter(mockDate0, timeZone0);
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0);
    String string0 = timePeriodValues0.getRangeDescription();
    assertEquals((-1), timePeriodValues0.getMinStartIndex());
}","/**
 * Returns the index of the time period with the minimum start milliseconds.
 *
 * @return The index.
 */"
"public int getMinEndIndex() {
    return this.minEndIndex;
}","public void test1030() throws Throwable {
    Minute minute0 = new Minute();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0, """", """");
    String string0 = timePeriodValues0.getRangeDescription();
    assertEquals((-1), timePeriodValues0.getMinEndIndex());
}","/**
 * Returns the index of the time period with the minimum end milliseconds.
 *
 * @return The index.
 */"
"public int getMaxMiddleIndex() {
    return this.maxMiddleIndex;
}","public void test1031() throws Throwable {
    Minute minute0 = new Minute();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0, """", """");
    String string0 = timePeriodValues0.getRangeDescription();
    assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
}","/**
 * Returns the index of the time period with the maximum middle
 * milliseconds.
 *
 * @return The index.
 */"
"public int getMinStartIndex() {
    return this.minStartIndex;
}","public void test1032() throws Throwable {
    Minute minute0 = new Minute();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0, """", """");
    String string0 = timePeriodValues0.getRangeDescription();
    assertEquals((-1), timePeriodValues0.getMinStartIndex());
}","/**
 * Returns the index of the time period with the minimum start milliseconds.
 *
 * @return The index.
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test1033() throws Throwable {
    Minute minute0 = new Minute();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0, """", """");
    String string0 = timePeriodValues0.getRangeDescription();
    assertEquals("""", timePeriodValues0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #getRangeDescription()
 * @see #setDomainDescription(String)
 */"
"public int getMinMiddleIndex() {
    return this.minMiddleIndex;
}","public void test1034() throws Throwable {
    Minute minute0 = new Minute();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0, """", """");
    String string0 = timePeriodValues0.getRangeDescription();
    assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
}","/**
 * Returns the index of the time period with the minimum middle
 * milliseconds.
 *
 * @return The index.
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test1035() throws Throwable {
    Minute minute0 = new Minute();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0, """", """");
    String string0 = timePeriodValues0.getRangeDescription();
    assertEquals("""", string0);
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #getDomainDescription()
 * @see #setRangeDescription(String)
 */"
"public int getMaxEndIndex() {
    return this.maxEndIndex;
}","public void test1036() throws Throwable {
    Minute minute0 = new Minute();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0, """", """");
    String string0 = timePeriodValues0.getRangeDescription();
    assertEquals((-1), timePeriodValues0.getMaxEndIndex());
}","/**
 * Returns the index of the time period with the maximum end milliseconds.
 *
 * @return The index.
 */"
"public int getMaxStartIndex() {
    return this.maxStartIndex;
}","public void test1037() throws Throwable {
    Minute minute0 = new Minute();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0, """", """");
    String string0 = timePeriodValues0.getRangeDescription();
    assertEquals((-1), timePeriodValues0.getMaxStartIndex());
}","/**
 * Returns the index of the time period with the maximum start milliseconds.
 *
 * @return The index.
 */"
"public int getMaxMiddleIndex() {
    return this.maxMiddleIndex;
}","public void test1138() throws Throwable {
    Hour hour0 = new Hour();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0, (String) null, (String) null);
    timePeriodValues0.add((TimePeriod) hour0, (Number) 0);
    int int0 = timePeriodValues0.getMinStartIndex();
    assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
}","/**
 * Returns the index of the time period with the maximum middle
 * milliseconds.
 *
 * @return The index.
 */"
"public int getMaxEndIndex() {
    return this.maxEndIndex;
}","public void test1139() throws Throwable {
    Hour hour0 = new Hour();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0, (String) null, (String) null);
    timePeriodValues0.add((TimePeriod) hour0, (Number) 0);
    int int0 = timePeriodValues0.getMinStartIndex();
    assertEquals(0, timePeriodValues0.getMaxEndIndex());
}","/**
 * Returns the index of the time period with the maximum end milliseconds.
 *
 * @return The index.
 */"
"public int getMinStartIndex() {
    return this.minStartIndex;
}","public void test1140() throws Throwable {
    Hour hour0 = new Hour();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0, (String) null, (String) null);
    timePeriodValues0.add((TimePeriod) hour0, (Number) 0);
    int int0 = timePeriodValues0.getMinStartIndex();
    assertEquals(0, int0);
}","/**
 * Returns the index of the time period with the minimum start milliseconds.
 *
 * @return The index.
 */"
"public int getMaxMiddleIndex() {
    return this.maxMiddleIndex;
}","public void test1241() throws Throwable {
    Hour hour0 = new Hour();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0, (String) null, (String) null);
    timePeriodValues0.add((TimePeriod) hour0, (Number) 0);
    MockDate mockDate0 = new MockDate(37, 23, 640, (-1285), 29, 29);
    TimeZone timeZone0 = TimeZone.getTimeZone(""nIgn_xMf}8Te"");
    Hour hour1 = new Hour(mockDate0, timeZone0);
    timePeriodValues0.add((TimePeriod) hour1, (Number) 23);
    int int0 = timePeriodValues0.getMinStartIndex();
    assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
}","/**
 * Returns the index of the time period with the maximum middle
 * milliseconds.
 *
 * @return The index.
 */"
"public int getMinStartIndex() {
    return this.minStartIndex;
}","public void test1242() throws Throwable {
    Hour hour0 = new Hour();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0, (String) null, (String) null);
    timePeriodValues0.add((TimePeriod) hour0, (Number) 0);
    MockDate mockDate0 = new MockDate(37, 23, 640, (-1285), 29, 29);
    TimeZone timeZone0 = TimeZone.getTimeZone(""nIgn_xMf}8Te"");
    Hour hour1 = new Hour(mockDate0, timeZone0);
    timePeriodValues0.add((TimePeriod) hour1, (Number) 23);
    int int0 = timePeriodValues0.getMinStartIndex();
    assertEquals(1, int0);
}","/**
 * Returns the index of the time period with the minimum start milliseconds.
 *
 * @return The index.
 */"
"public int getMaxEndIndex() {
    return this.maxEndIndex;
}","public void test1343() throws Throwable {
    Hour hour0 = new Hour();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0, (String) null, (String) null);
    timePeriodValues0.add((TimePeriod) hour0, (Number) 0);
    int int0 = timePeriodValues0.getMinMiddleIndex();
    assertEquals(0, timePeriodValues0.getMaxEndIndex());
}","/**
 * Returns the index of the time period with the maximum end milliseconds.
 *
 * @return The index.
 */"
"public int getMaxStartIndex() {
    return this.maxStartIndex;
}","public void test1344() throws Throwable {
    Hour hour0 = new Hour();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0, (String) null, (String) null);
    timePeriodValues0.add((TimePeriod) hour0, (Number) 0);
    int int0 = timePeriodValues0.getMinMiddleIndex();
    assertEquals(0, timePeriodValues0.getMaxStartIndex());
}","/**
 * Returns the index of the time period with the maximum start milliseconds.
 *
 * @return The index.
 */"
"public int getMinMiddleIndex() {
    return this.minMiddleIndex;
}","public void test1345() throws Throwable {
    Hour hour0 = new Hour();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0, (String) null, (String) null);
    timePeriodValues0.add((TimePeriod) hour0, (Number) 0);
    int int0 = timePeriodValues0.getMinMiddleIndex();
    assertEquals(0, int0);
}","/**
 * Returns the index of the time period with the minimum middle
 * milliseconds.
 *
 * @return The index.
 */"
"public int getMinEndIndex() {
    return this.minEndIndex;
}","public void test1446() throws Throwable {
    Hour hour0 = new Hour();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0, (String) null, (String) null);
    timePeriodValues0.add((TimePeriod) hour0, (Number) 0);
    MockDate mockDate0 = new MockDate(37, 23, 640, (-1285), 29, 29);
    TimeZone timeZone0 = TimeZone.getTimeZone(""nIgn_xMf}8Te"");
    Hour hour1 = new Hour(mockDate0, timeZone0);
    timePeriodValues0.add((TimePeriod) hour1, (Number) 23);
    int int0 = timePeriodValues0.getMinMiddleIndex();
    assertEquals(1, timePeriodValues0.getMinEndIndex());
}","/**
 * Returns the index of the time period with the minimum end milliseconds.
 *
 * @return The index.
 */"
"public int getMinMiddleIndex() {
    return this.minMiddleIndex;
}","public void test1447() throws Throwable {
    Hour hour0 = new Hour();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0, (String) null, (String) null);
    timePeriodValues0.add((TimePeriod) hour0, (Number) 0);
    MockDate mockDate0 = new MockDate(37, 23, 640, (-1285), 29, 29);
    TimeZone timeZone0 = TimeZone.getTimeZone(""nIgn_xMf}8Te"");
    Hour hour1 = new Hour(mockDate0, timeZone0);
    timePeriodValues0.add((TimePeriod) hour1, (Number) 23);
    int int0 = timePeriodValues0.getMinMiddleIndex();
    assertEquals(1, int0);
}","/**
 * Returns the index of the time period with the minimum middle
 * milliseconds.
 *
 * @return The index.
 */"
"public int getMinStartIndex() {
    return this.minStartIndex;
}","public void test1548() throws Throwable {
    Hour hour0 = new Hour();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0, (String) null, (String) null);
    timePeriodValues0.add((TimePeriod) hour0, (Number) 0);
    int int0 = timePeriodValues0.getMinEndIndex();
    assertEquals(0, timePeriodValues0.getMinStartIndex());
}","/**
 * Returns the index of the time period with the minimum start milliseconds.
 *
 * @return The index.
 */"
"public int getMinEndIndex() {
    return this.minEndIndex;
}","public void test1549() throws Throwable {
    Hour hour0 = new Hour();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0, (String) null, (String) null);
    timePeriodValues0.add((TimePeriod) hour0, (Number) 0);
    int int0 = timePeriodValues0.getMinEndIndex();
    assertEquals(0, int0);
}","/**
 * Returns the index of the time period with the minimum end milliseconds.
 *
 * @return The index.
 */"
"public int getMaxEndIndex() {
    return this.maxEndIndex;
}","public void test1650() throws Throwable {
    Hour hour0 = new Hour();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0, (String) null, (String) null);
    timePeriodValues0.add((TimePeriod) hour0, (Number) 0);
    MockDate mockDate0 = new MockDate(37, 23, 640, (-1285), 29, 29);
    TimeZone timeZone0 = TimeZone.getTimeZone(""nIgn_xMf}8Te"");
    Hour hour1 = new Hour(mockDate0, timeZone0);
    timePeriodValues0.add((TimePeriod) hour1, (Number) 23);
    int int0 = timePeriodValues0.getMinEndIndex();
    assertEquals(0, timePeriodValues0.getMaxEndIndex());
}","/**
 * Returns the index of the time period with the maximum end milliseconds.
 *
 * @return The index.
 */"
"public int getMinEndIndex() {
    return this.minEndIndex;
}","public void test1651() throws Throwable {
    Hour hour0 = new Hour();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0, (String) null, (String) null);
    timePeriodValues0.add((TimePeriod) hour0, (Number) 0);
    MockDate mockDate0 = new MockDate(37, 23, 640, (-1285), 29, 29);
    TimeZone timeZone0 = TimeZone.getTimeZone(""nIgn_xMf}8Te"");
    Hour hour1 = new Hour(mockDate0, timeZone0);
    timePeriodValues0.add((TimePeriod) hour1, (Number) 23);
    int int0 = timePeriodValues0.getMinEndIndex();
    assertEquals(1, int0);
}","/**
 * Returns the index of the time period with the minimum end milliseconds.
 *
 * @return The index.
 */"
"public int getMaxEndIndex() {
    return this.maxEndIndex;
}","public void test1752() throws Throwable {
    MockDate mockDate0 = new MockDate();
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
    Quarter quarter0 = new Quarter(mockDate0, timeZone0);
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0);
    timePeriodValues0.add((TimePeriod) quarter0, (Number) 4);
    int int0 = timePeriodValues0.getMaxStartIndex();
    assertEquals(0, timePeriodValues0.getMaxEndIndex());
}","/**
 * Returns the index of the time period with the maximum end milliseconds.
 *
 * @return The index.
 */"
"public int getMaxMiddleIndex() {
    return this.maxMiddleIndex;
}","public void test1753() throws Throwable {
    MockDate mockDate0 = new MockDate();
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
    Quarter quarter0 = new Quarter(mockDate0, timeZone0);
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0);
    timePeriodValues0.add((TimePeriod) quarter0, (Number) 4);
    int int0 = timePeriodValues0.getMaxStartIndex();
    assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
}","/**
 * Returns the index of the time period with the maximum middle
 * milliseconds.
 *
 * @return The index.
 */"
"public int getMaxStartIndex() {
    return this.maxStartIndex;
}","public void test1754() throws Throwable {
    MockDate mockDate0 = new MockDate();
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
    Quarter quarter0 = new Quarter(mockDate0, timeZone0);
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0);
    timePeriodValues0.add((TimePeriod) quarter0, (Number) 4);
    int int0 = timePeriodValues0.getMaxStartIndex();
    assertEquals(0, int0);
}","/**
 * Returns the index of the time period with the maximum start milliseconds.
 *
 * @return The index.
 */"
"public int getMaxEndIndex() {
    return this.maxEndIndex;
}","public void test1855() throws Throwable {
    Hour hour0 = new Hour();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0, (String) null, (String) null);
    timePeriodValues0.add((TimePeriod) hour0, (Number) 0);
    MockDate mockDate0 = new MockDate(640, 10, 640);
    TimeZone timeZone0 = TimeZone.getTimeZone(""nIgn_xMf}8Te"");
    Hour hour1 = new Hour(mockDate0, timeZone0);
    timePeriodValues0.add((TimePeriod) hour1, (Number) 23);
    int int0 = timePeriodValues0.getMaxStartIndex();
    assertEquals(1, timePeriodValues0.getMaxEndIndex());
}","/**
 * Returns the index of the time period with the maximum end milliseconds.
 *
 * @return The index.
 */"
"public int getMaxStartIndex() {
    return this.maxStartIndex;
}","public void test1856() throws Throwable {
    Hour hour0 = new Hour();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0, (String) null, (String) null);
    timePeriodValues0.add((TimePeriod) hour0, (Number) 0);
    MockDate mockDate0 = new MockDate(640, 10, 640);
    TimeZone timeZone0 = TimeZone.getTimeZone(""nIgn_xMf}8Te"");
    Hour hour1 = new Hour(mockDate0, timeZone0);
    timePeriodValues0.add((TimePeriod) hour1, (Number) 23);
    int int0 = timePeriodValues0.getMaxStartIndex();
    assertEquals(1, int0);
}","/**
 * Returns the index of the time period with the maximum start milliseconds.
 *
 * @return The index.
 */"
"public int getMaxEndIndex() {
    return this.maxEndIndex;
}","public void test1957() throws Throwable {
    Hour hour0 = new Hour();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0, (String) null, (String) null);
    timePeriodValues0.add((TimePeriod) hour0, (Number) 0);
    int int0 = timePeriodValues0.getMaxMiddleIndex();
    assertEquals(0, timePeriodValues0.getMaxEndIndex());
}","/**
 * Returns the index of the time period with the maximum end milliseconds.
 *
 * @return The index.
 */"
"public int getMinMiddleIndex() {
    return this.minMiddleIndex;
}","public void test1958() throws Throwable {
    Hour hour0 = new Hour();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0, (String) null, (String) null);
    timePeriodValues0.add((TimePeriod) hour0, (Number) 0);
    int int0 = timePeriodValues0.getMaxMiddleIndex();
    assertEquals(0, timePeriodValues0.getMinMiddleIndex());
}","/**
 * Returns the index of the time period with the minimum middle
 * milliseconds.
 *
 * @return The index.
 */"
"public int getMaxMiddleIndex() {
    return this.maxMiddleIndex;
}","public void test1959() throws Throwable {
    Hour hour0 = new Hour();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0, (String) null, (String) null);
    timePeriodValues0.add((TimePeriod) hour0, (Number) 0);
    int int0 = timePeriodValues0.getMaxMiddleIndex();
    assertEquals(0, int0);
}","/**
 * Returns the index of the time period with the maximum middle
 * milliseconds.
 *
 * @return The index.
 */"
"public int getMinMiddleIndex() {
    return this.minMiddleIndex;
}","public void test2060() throws Throwable {
    Hour hour0 = new Hour();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0, (String) null, (String) null);
    timePeriodValues0.add((TimePeriod) hour0, (Number) 0);
    MockDate mockDate0 = new MockDate(640, 10, 640);
    TimeZone timeZone0 = TimeZone.getTimeZone(""nIgn_xMf}8Te"");
    Hour hour1 = new Hour(mockDate0, timeZone0);
    timePeriodValues0.add((TimePeriod) hour1, (Number) 23);
    int int0 = timePeriodValues0.getMaxMiddleIndex();
    assertEquals(0, timePeriodValues0.getMinMiddleIndex());
}","/**
 * Returns the index of the time period with the minimum middle
 * milliseconds.
 *
 * @return The index.
 */"
"public int getMaxMiddleIndex() {
    return this.maxMiddleIndex;
}","public void test2061() throws Throwable {
    Hour hour0 = new Hour();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0, (String) null, (String) null);
    timePeriodValues0.add((TimePeriod) hour0, (Number) 0);
    MockDate mockDate0 = new MockDate(640, 10, 640);
    TimeZone timeZone0 = TimeZone.getTimeZone(""nIgn_xMf}8Te"");
    Hour hour1 = new Hour(mockDate0, timeZone0);
    timePeriodValues0.add((TimePeriod) hour1, (Number) 23);
    int int0 = timePeriodValues0.getMaxMiddleIndex();
    assertEquals(1, int0);
}","/**
 * Returns the index of the time period with the maximum middle
 * milliseconds.
 *
 * @return The index.
 */"
"public int getMinEndIndex() {
    return this.minEndIndex;
}","public void test2162() throws Throwable {
    Day day0 = new Day();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(day0, ""org.jfree.data.time.TimeSeries"", ""?{\""4C"");
    Long long0 = new Long(1645L);
    timePeriodValues0.add((TimePeriod) day0, (Number) long0);
    int int0 = timePeriodValues0.getMaxEndIndex();
    assertEquals(0, timePeriodValues0.getMinEndIndex());
}","/**
 * Returns the index of the time period with the minimum end milliseconds.
 *
 * @return The index.
 */"
"public int getMaxStartIndex() {
    return this.maxStartIndex;
}","public void test2163() throws Throwable {
    Day day0 = new Day();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(day0, ""org.jfree.data.time.TimeSeries"", ""?{\""4C"");
    Long long0 = new Long(1645L);
    timePeriodValues0.add((TimePeriod) day0, (Number) long0);
    int int0 = timePeriodValues0.getMaxEndIndex();
    assertEquals(0, timePeriodValues0.getMaxStartIndex());
}","/**
 * Returns the index of the time period with the maximum start milliseconds.
 *
 * @return The index.
 */"
"public int getMaxEndIndex() {
    return this.maxEndIndex;
}","public void test2164() throws Throwable {
    Day day0 = new Day();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(day0, ""org.jfree.data.time.TimeSeries"", ""?{\""4C"");
    Long long0 = new Long(1645L);
    timePeriodValues0.add((TimePeriod) day0, (Number) long0);
    int int0 = timePeriodValues0.getMaxEndIndex();
    assertEquals(0, int0);
}","/**
 * Returns the index of the time period with the maximum end milliseconds.
 *
 * @return The index.
 */"
"public int getMinEndIndex() {
    return this.minEndIndex;
}","public void test2265() throws Throwable {
    Minute minute0 = new Minute();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0, ""iMPL^G+;TH#Qv"", ""><8,KGM>"");
    timePeriodValues0.add((TimePeriod) minute0, (Number) 0);
    Second second0 = new Second(59, minute0);
    timePeriodValues0.add((TimePeriod) second0, (double) 0);
    int int0 = timePeriodValues0.getMaxEndIndex();
    assertEquals(0, timePeriodValues0.getMinEndIndex());
}","/**
 * Returns the index of the time period with the minimum end milliseconds.
 *
 * @return The index.
 */"
"public int getMaxEndIndex() {
    return this.maxEndIndex;
}","public void test2266() throws Throwable {
    Minute minute0 = new Minute();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0, ""iMPL^G+;TH#Qv"", ""><8,KGM>"");
    timePeriodValues0.add((TimePeriod) minute0, (Number) 0);
    Second second0 = new Second(59, minute0);
    timePeriodValues0.add((TimePeriod) second0, (double) 0);
    int int0 = timePeriodValues0.getMaxEndIndex();
    assertEquals(1, int0);
}","/**
 * Returns the index of the time period with the maximum end milliseconds.
 *
 * @return The index.
 */"
"public int getMinStartIndex() {
    return this.minStartIndex;
}","public void test2367() throws Throwable {
    Hour hour0 = new Hour();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0, (String) null, (String) null);
    timePeriodValues0.add((TimePeriod) hour0, (Number) 0);
    timePeriodValues0.getItemCount();
    assertEquals(0, timePeriodValues0.getMinStartIndex());
}","/**
 * Returns the index of the time period with the minimum start milliseconds.
 *
 * @return The index.
 */"
"public int getMaxStartIndex() {
    return this.maxStartIndex;
}","public void test2368() throws Throwable {
    Hour hour0 = new Hour();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0, (String) null, (String) null);
    timePeriodValues0.add((TimePeriod) hour0, (Number) 0);
    timePeriodValues0.getItemCount();
    assertEquals(0, timePeriodValues0.getMaxStartIndex());
}","/**
 * Returns the index of the time period with the maximum start milliseconds.
 *
 * @return The index.
 */"
"public int getMaxStartIndex() {
    return this.maxStartIndex;
}","public void test2469() throws Throwable {
    MockDate mockDate0 = new MockDate();
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
    Quarter quarter0 = new Quarter(mockDate0, timeZone0);
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0);
    String string0 = timePeriodValues0.getDomainDescription();
    assertEquals((-1), timePeriodValues0.getMaxStartIndex());
}","/**
 * Returns the index of the time period with the maximum start milliseconds.
 *
 * @return The index.
 */"
"public int getMinStartIndex() {
    return this.minStartIndex;
}","public void test2470() throws Throwable {
    MockDate mockDate0 = new MockDate();
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
    Quarter quarter0 = new Quarter(mockDate0, timeZone0);
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0);
    String string0 = timePeriodValues0.getDomainDescription();
    assertEquals((-1), timePeriodValues0.getMinStartIndex());
}","/**
 * Returns the index of the time period with the minimum start milliseconds.
 *
 * @return The index.
 */"
"public int getMinMiddleIndex() {
    return this.minMiddleIndex;
}","public void test2471() throws Throwable {
    MockDate mockDate0 = new MockDate();
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
    Quarter quarter0 = new Quarter(mockDate0, timeZone0);
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0);
    String string0 = timePeriodValues0.getDomainDescription();
    assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
}","/**
 * Returns the index of the time period with the minimum middle
 * milliseconds.
 *
 * @return The index.
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test2472() throws Throwable {
    MockDate mockDate0 = new MockDate();
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
    Quarter quarter0 = new Quarter(mockDate0, timeZone0);
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0);
    String string0 = timePeriodValues0.getDomainDescription();
    assertEquals(""Value"", timePeriodValues0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #getDomainDescription()
 * @see #setRangeDescription(String)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test2473() throws Throwable {
    MockDate mockDate0 = new MockDate();
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
    Quarter quarter0 = new Quarter(mockDate0, timeZone0);
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0);
    String string0 = timePeriodValues0.getDomainDescription();
    assertEquals(""Time"", string0);
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #getRangeDescription()
 * @see #setDomainDescription(String)
 */"
"public int getMaxMiddleIndex() {
    return this.maxMiddleIndex;
}","public void test2474() throws Throwable {
    MockDate mockDate0 = new MockDate();
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
    Quarter quarter0 = new Quarter(mockDate0, timeZone0);
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0);
    String string0 = timePeriodValues0.getDomainDescription();
    assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
}","/**
 * Returns the index of the time period with the maximum middle
 * milliseconds.
 *
 * @return The index.
 */"
"public int getMaxEndIndex() {
    return this.maxEndIndex;
}","public void test2475() throws Throwable {
    MockDate mockDate0 = new MockDate();
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
    Quarter quarter0 = new Quarter(mockDate0, timeZone0);
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0);
    String string0 = timePeriodValues0.getDomainDescription();
    assertEquals((-1), timePeriodValues0.getMaxEndIndex());
}","/**
 * Returns the index of the time period with the maximum end milliseconds.
 *
 * @return The index.
 */"
"public int getMinEndIndex() {
    return this.minEndIndex;
}","public void test2476() throws Throwable {
    MockDate mockDate0 = new MockDate();
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
    Quarter quarter0 = new Quarter(mockDate0, timeZone0);
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0);
    String string0 = timePeriodValues0.getDomainDescription();
    assertEquals((-1), timePeriodValues0.getMinEndIndex());
}","/**
 * Returns the index of the time period with the minimum end milliseconds.
 *
 * @return The index.
 */"
"public int getMinMiddleIndex() {
    return this.minMiddleIndex;
}","public void test2577() throws Throwable {
    Hour hour0 = new Hour();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0, """", ""ql(=UKz+F"");
    String string0 = timePeriodValues0.getDomainDescription();
    assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
}","/**
 * Returns the index of the time period with the minimum middle
 * milliseconds.
 *
 * @return The index.
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test2578() throws Throwable {
    Hour hour0 = new Hour();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0, """", ""ql(=UKz+F"");
    String string0 = timePeriodValues0.getDomainDescription();
    assertEquals(""ql(=UKz+F"", timePeriodValues0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #getDomainDescription()
 * @see #setRangeDescription(String)
 */"
"public int getMinStartIndex() {
    return this.minStartIndex;
}","public void test2579() throws Throwable {
    Hour hour0 = new Hour();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0, """", ""ql(=UKz+F"");
    String string0 = timePeriodValues0.getDomainDescription();
    assertEquals((-1), timePeriodValues0.getMinStartIndex());
}","/**
 * Returns the index of the time period with the minimum start milliseconds.
 *
 * @return The index.
 */"
"public int getMaxStartIndex() {
    return this.maxStartIndex;
}","public void test2580() throws Throwable {
    Hour hour0 = new Hour();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0, """", ""ql(=UKz+F"");
    String string0 = timePeriodValues0.getDomainDescription();
    assertEquals((-1), timePeriodValues0.getMaxStartIndex());
}","/**
 * Returns the index of the time period with the maximum start milliseconds.
 *
 * @return The index.
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test2581() throws Throwable {
    Hour hour0 = new Hour();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0, """", ""ql(=UKz+F"");
    String string0 = timePeriodValues0.getDomainDescription();
    assertEquals("""", string0);
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #getRangeDescription()
 * @see #setDomainDescription(String)
 */"
"public int getMaxEndIndex() {
    return this.maxEndIndex;
}","public void test2582() throws Throwable {
    Hour hour0 = new Hour();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0, """", ""ql(=UKz+F"");
    String string0 = timePeriodValues0.getDomainDescription();
    assertEquals((-1), timePeriodValues0.getMaxEndIndex());
}","/**
 * Returns the index of the time period with the maximum end milliseconds.
 *
 * @return The index.
 */"
"public int getMaxMiddleIndex() {
    return this.maxMiddleIndex;
}","public void test2583() throws Throwable {
    Hour hour0 = new Hour();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0, """", ""ql(=UKz+F"");
    String string0 = timePeriodValues0.getDomainDescription();
    assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
}","/**
 * Returns the index of the time period with the maximum middle
 * milliseconds.
 *
 * @return The index.
 */"
"public int getMinEndIndex() {
    return this.minEndIndex;
}","public void test2584() throws Throwable {
    Hour hour0 = new Hour();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0, """", ""ql(=UKz+F"");
    String string0 = timePeriodValues0.getDomainDescription();
    assertEquals((-1), timePeriodValues0.getMinEndIndex());
}","/**
 * Returns the index of the time period with the minimum end milliseconds.
 *
 * @return The index.
 */"
"public int getMaxStartIndex() {
    return this.maxStartIndex;
}","public void test2685() throws Throwable {
    Hour hour0 = new Hour();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0, (String) null, (String) null);
    timePeriodValues0.add((TimePeriod) hour0, (Number) 0);
    timePeriodValues0.getDataItem(0);
    assertEquals(0, timePeriodValues0.getMaxStartIndex());
}","/**
 * Returns the index of the time period with the maximum start milliseconds.
 *
 * @return The index.
 */"
"public int getMinEndIndex() {
    return this.minEndIndex;
}","public void test2686() throws Throwable {
    Hour hour0 = new Hour();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0, (String) null, (String) null);
    timePeriodValues0.add((TimePeriod) hour0, (Number) 0);
    timePeriodValues0.getDataItem(0);
    assertEquals(0, timePeriodValues0.getMinEndIndex());
}","/**
 * Returns the index of the time period with the minimum end milliseconds.
 *
 * @return The index.
 */"
"public int getMaxMiddleIndex() {
    return this.maxMiddleIndex;
}","public void test2787() throws Throwable {
    Minute minute0 = new Minute();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0, ""iMPL^G+;TH#Qv"", ""><8,KGM>"");
    timePeriodValues0.setNotify(false);
    TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(59, 59);
    assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
}","/**
 * Returns the index of the time period with the maximum middle
 * milliseconds.
 *
 * @return The index.
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test2788() throws Throwable {
    Minute minute0 = new Minute();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0, ""iMPL^G+;TH#Qv"", ""><8,KGM>"");
    timePeriodValues0.setNotify(false);
    TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(59, 59);
    assertEquals(""iMPL^G+;TH#Qv"", timePeriodValues1.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #getRangeDescription()
 * @see #setDomainDescription(String)
 */"
"public TimePeriodValues createCopy(int start, int end) throws CloneNotSupportedException {
    TimePeriodValues copy = (TimePeriodValues) super.clone();
    copy.data = new ArrayList();
    if (this.data.size() > 0) {
        for (int index = start; index <= end; index++) {
            TimePeriodValue item = (TimePeriodValue) this.data.get(index);
            TimePeriodValue clone = (TimePeriodValue) item.clone();
            try {
                copy.add(clone);
            } catch (SeriesException e) {
                System.err.println(""Failed to add cloned item."");
            }
        }
    }
    return copy;
}","public void test2789() throws Throwable {
    Minute minute0 = new Minute();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0, ""iMPL^G+;TH#Qv"", ""><8,KGM>"");
    timePeriodValues0.setNotify(false);
    TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(59, 59);
    assertNotSame(timePeriodValues1, timePeriodValues0);
}","/**
 * Creates a new instance by copying a subset of the data in this
 * collection.
 *
 * @param start  the index of the first item to copy.
 * @param end  the index of the last item to copy.
 *
 * @return A copy of a subset of the items.
 *
 * @throws CloneNotSupportedException if there is a cloning problem.
 */"
"public int getMinStartIndex() {
    return this.minStartIndex;
}","public void test2790() throws Throwable {
    Minute minute0 = new Minute();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0, ""iMPL^G+;TH#Qv"", ""><8,KGM>"");
    timePeriodValues0.setNotify(false);
    TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(59, 59);
    assertEquals((-1), timePeriodValues1.getMinStartIndex());
}","/**
 * Returns the index of the time period with the minimum start milliseconds.
 *
 * @return The index.
 */"
"public int getMinMiddleIndex() {
    return this.minMiddleIndex;
}","public void test2791() throws Throwable {
    Minute minute0 = new Minute();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0, ""iMPL^G+;TH#Qv"", ""><8,KGM>"");
    timePeriodValues0.setNotify(false);
    TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(59, 59);
    assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
}","/**
 * Returns the index of the time period with the minimum middle
 * milliseconds.
 *
 * @return The index.
 */"
"public int getMinEndIndex() {
    return this.minEndIndex;
}","public void test2792() throws Throwable {
    Minute minute0 = new Minute();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0, ""iMPL^G+;TH#Qv"", ""><8,KGM>"");
    timePeriodValues0.setNotify(false);
    TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(59, 59);
    assertEquals((-1), timePeriodValues1.getMinEndIndex());
}","/**
 * Returns the index of the time period with the minimum end milliseconds.
 *
 * @return The index.
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test2793() throws Throwable {
    Minute minute0 = new Minute();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0, ""iMPL^G+;TH#Qv"", ""><8,KGM>"");
    timePeriodValues0.setNotify(false);
    TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(59, 59);
    assertEquals(""><8,KGM>"", timePeriodValues1.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #getDomainDescription()
 * @see #setRangeDescription(String)
 */"
"public int getMaxEndIndex() {
    return this.maxEndIndex;
}","public void test2794() throws Throwable {
    Minute minute0 = new Minute();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0, ""iMPL^G+;TH#Qv"", ""><8,KGM>"");
    timePeriodValues0.setNotify(false);
    TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(59, 59);
    assertEquals((-1), timePeriodValues1.getMaxEndIndex());
}","/**
 * Returns the index of the time period with the maximum end milliseconds.
 *
 * @return The index.
 */"
"public int getMaxStartIndex() {
    return this.maxStartIndex;
}","public void test2795() throws Throwable {
    Minute minute0 = new Minute();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0, ""iMPL^G+;TH#Qv"", ""><8,KGM>"");
    timePeriodValues0.setNotify(false);
    TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(59, 59);
    assertEquals((-1), timePeriodValues1.getMaxStartIndex());
}","/**
 * Returns the index of the time period with the maximum start milliseconds.
 *
 * @return The index.
 */"
"public int getItemCount() {
    return this.data.size();
}","public void test2896() throws Throwable {
    Hour hour0 = new Hour();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0, (String) null, (String) null);
    timePeriodValues0.add((TimePeriod) hour0, (Number) 0);
    MockDate mockDate0 = new MockDate(640, 10, 640);
    TimeZone timeZone0 = TimeZone.getTimeZone(""nIgn_xMf}8Te"");
    Hour hour1 = new Hour(mockDate0, timeZone0);
    timePeriodValues0.add((TimePeriod) hour1, (Number) 23);
    timePeriodValues0.createCopy(2283, 59);
    assertEquals(2, timePeriodValues0.getItemCount());
}","/**
 * Returns the number of items in the series.
 *
 * @return The item count.
 */"
"public int getMinStartIndex() {
    return this.minStartIndex;
}","public void test2997() throws Throwable {
    Millisecond millisecond0 = new Millisecond();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0, """", """");
    TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) millisecond0, (Number) 0);
    timePeriodValues0.add(timePeriodValue0);
    timePeriodValues0.createCopy(0, 0);
    assertEquals(0, timePeriodValues0.getMinStartIndex());
}","/**
 * Returns the index of the time period with the minimum start milliseconds.
 *
 * @return The index.
 */"
"public void update(int index, Number value) {
    TimePeriodValue item = getDataItem(index);
    item.setValue(value);
    fireSeriesChanged();
}","public void test3098() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0, """", ""d\"""");
    Float float0 = new Float(0.0F);
    // Undeclared exception!
    try {
        timePeriodValues0.update((-9), float0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * Updates (changes) the value of a data item and sends a
 * {@link SeriesChangeEvent} to all registered listeners.
 *
 * @param index  the index of the data item to update.
 * @param value  the new value (<code>null</code> not permitted).
 */"
"public void setDomainDescription(String description) {
    String old = this.domain;
    this.domain = description;
    firePropertyChange(""Domain"", old, description);
}","public void test3199() throws Throwable {
    Month month0 = new Month();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(month0);
    MetalComboBoxUI metalComboBoxUI0 = new MetalComboBoxUI();
    PropertyChangeListener propertyChangeListener0 = metalComboBoxUI0.createPropertyChangeListener();
    timePeriodValues0.addPropertyChangeListener(propertyChangeListener0);
    // Undeclared exception!
    try {
        timePeriodValues0.setDomainDescription((String) null);
        fail(""Expecting exception: ClassCastException"");
    } catch (ClassCastException e) {
        //
        // org.jfree.data.time.TimePeriodValues cannot be cast to javax.swing.JComboBox
        //
        verifyException(""javax.swing.plaf.basic.BasicComboBoxUI$Handler"", e);
    }
}","/**
 * Sets the domain description and fires a property change event (with the
 * property name <code>Domain</code> if the description changes).
 *
 * @param description  the new description (<code>null</code> permitted).
 *
 * @see #getDomainDescription()
 */"
"public Number getValue(int index) {
    return getDataItem(index).getValue();
}","public void test32100() throws Throwable {
    MockDate mockDate0 = new MockDate();
    ZoneInfo zoneInfo0 = (ZoneInfo) RegularTimePeriod.DEFAULT_TIME_ZONE;
    Minute minute0 = new Minute(mockDate0, zoneInfo0);
    Day day0 = minute0.getDay();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(day0);
    // Undeclared exception!
    try {
        timePeriodValues0.getValue((-30));
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * Returns the value at the specified index.
 *
 * @param index  the item index (in the range <code>0</code> to
 *     <code>getItemCount() - 1</code>).
 *
 * @return The value at the specified index (possibly <code>null</code>).
 *
 * @see #getDataItem(int)
 */"
"public TimePeriod getTimePeriod(int index) {
    return getDataItem(index).getPeriod();
}","public void test33101() throws Throwable {
    Day day0 = new Day();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(day0);
    // Undeclared exception!
    try {
        timePeriodValues0.getTimePeriod((-1299));
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * Returns the time period at the specified index.
 *
 * @param index  the item index (in the range <code>0</code> to
 *     <code>getItemCount() - 1</code>).
 *
 * @return The time period at the specified index.
 *
 * @see #getDataItem(int)
 */"
"public TimePeriodValue getDataItem(int index) {
    return (TimePeriodValue) this.data.get(index);
}","public void test34102() throws Throwable {
    Millisecond millisecond0 = new Millisecond();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0, """", """");
    // Undeclared exception!
    try {
        timePeriodValues0.getDataItem((-990));
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * Returns one data item for the series.
 *
 * @param index  the item index (in the range <code>0</code> to
 *     <code>getItemCount() - 1</code>).
 *
 * @return One data item for the series.
 */"
"public void delete(int start, int end) {
    for (int i = 0; i <= (end - start); i++) {
        this.data.remove(start);
    }
    recalculateBounds();
    fireSeriesChanged();
}","public void test35103() throws Throwable {
    Minute minute0 = new Minute();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0);
    // Undeclared exception!
    try {
        timePeriodValues0.delete((-1789), 120);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * Deletes data from start until end index (end inclusive) and sends a
 * {@link SeriesChangeEvent} to all registered listeners.
 *
 * @param start  the index of the first period to delete.
 * @param end  the index of the last period to delete.
 */"
"public TimePeriodValues createCopy(int start, int end) throws CloneNotSupportedException {
    TimePeriodValues copy = (TimePeriodValues) super.clone();
    copy.data = new ArrayList();
    if (this.data.size() > 0) {
        for (int index = start; index <= end; index++) {
            TimePeriodValue item = (TimePeriodValue) this.data.get(index);
            TimePeriodValue clone = (TimePeriodValue) item.clone();
            try {
                copy.add(clone);
            } catch (SeriesException e) {
                System.err.println(""Failed to add cloned item."");
            }
        }
    }
    return copy;
}","public void test36104() throws Throwable {
    Millisecond millisecond0 = new Millisecond();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0, """", """");
    TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) millisecond0, (Number) 0);
    timePeriodValues0.add(timePeriodValue0);
    // Undeclared exception!
    try {
        timePeriodValues0.createCopy(0, 1067);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 1, Size: 1
        //
        verifyException(""java.util.ArrayList"", e);
    }
}","/**
 * Creates a new instance by copying a subset of the data in this
 * collection.
 *
 * @param start  the index of the first item to copy.
 * @param end  the index of the last item to copy.
 *
 * @return A copy of a subset of the items.
 *
 * @throws CloneNotSupportedException if there is a cloning problem.
 */"
"public Object clone() throws CloneNotSupportedException {
    Object clone = createCopy(0, getItemCount() - 1);
    return clone;
}","public void test37105() throws Throwable {
    Hour hour0 = new Hour();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0, (String) null, (String) null);
    timePeriodValues0.add((TimePeriod) hour0, (Number) 0);
    MockDate mockDate0 = new MockDate(37, 23, 640, (-1285), 29, 29);
    TimeZone timeZone0 = TimeZone.getTimeZone(""nIgn_xMf}8Te"");
    Hour hour1 = new Hour(mockDate0, timeZone0);
    timePeriodValues0.add((TimePeriod) hour1, (Number) 23);
    // Undeclared exception!
    try {
        timePeriodValues0.clone();
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 1, Size: 1
        //
        verifyException(""java.util.ArrayList"", e);
    }
}","/**
 * Returns a clone of the collection.
 * <P>
 * Notes:
 * <ul>
 *   <li>no need to clone the domain and range descriptions, since String
 *       object is immutable;</li>
 *   <li>we pass over to the more general method createCopy(start, end).
 *   </li>
 * </ul>
 *
 * @return A clone of the time series.
 *
 * @throws CloneNotSupportedException if there is a cloning problem.
 */"
"public void add(TimePeriod period, Number value) {
    TimePeriodValue item = new TimePeriodValue(period, value);
    add(item);
}","public void test38106() throws Throwable {
    Minute minute0 = new Minute();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0, ""iMPL^G+;TH#Qv"", ""p><8,KGM>"");
    TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) minute0, (double) 59);
    timePeriodValues0.add(timePeriodValue0);
    MockDate mockDate0 = new MockDate((-2153307112000L));
    Second second0 = new Second(mockDate0);
    timePeriodValues0.add((TimePeriod) second0, (double) 59);
    TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(2545, 59);
    // Undeclared exception!
    try {
        timePeriodValues1.add((TimePeriod) minute0, (Number) 59);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 1, Size: 1
        //
        verifyException(""java.util.ArrayList"", e);
    }
}","/**
 * Adds a new data item to the series and sends a {@link SeriesChangeEvent}
 * to all registered listeners.
 *
 * @param period  the time period (<code>null</code> not permitted).
 * @param value  the value (<code>null</code> permitted).
 */"
"public void add(TimePeriod period, Number value) {
    TimePeriodValue item = new TimePeriodValue(period, value);
    add(item);
}","public void test39107() throws Throwable {
    MockDate mockDate0 = new MockDate();
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
    Quarter quarter0 = new Quarter(mockDate0, timeZone0);
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0);
    // Undeclared exception!
    try {
        timePeriodValues0.add((TimePeriod) null, (Number) 4);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'period' argument.
        //
        verifyException(""org.jfree.data.time.TimePeriodValue"", e);
    }
}","/**
 * Adds a new data item to the series and sends a {@link SeriesChangeEvent}
 * to all registered listeners.
 *
 * @param period  the time period (<code>null</code> not permitted).
 * @param value  the value (<code>null</code> permitted).
 */"
"public void add(TimePeriod period, double value) {
    TimePeriodValue item = new TimePeriodValue(period, value);
    add(item);
}","public void test40108() throws Throwable {
    MockDate mockDate0 = new MockDate(3426L);
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0);
    // Undeclared exception!
    try {
        timePeriodValues0.add((TimePeriod) null, (double) 3426L);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'period' argument.
        //
        verifyException(""org.jfree.data.time.TimePeriodValue"", e);
    }
}","/**
 * Adds a new data item to the series and sends a {@link SeriesChangeEvent}
 * to all registered listeners.
 *
 * @param period  the time period (<code>null</code> not permitted).
 * @param value  the value.
 *
 * @see #add(TimePeriod, Number)
 */"
"public TimePeriodValues(Comparable name, String domain, String range) {
    super(name);
    this.domain = domain;
    this.range = range;
    this.data = new ArrayList();
}","public void test41109() throws Throwable {
    TimePeriodValues timePeriodValues0 = null;
    try {
        timePeriodValues0 = new TimePeriodValues((Comparable) null, ""z*EG>~.ppng% "", ""Failed to add cloned item."");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'key' argument.
        //
        verifyException(""org.jfree.data.general.Series"", e);
    }
}","/**
 * Creates a new time series that contains no data.
 * <P>
 * Descriptions can be specified for the domain and range.  One situation
 * where this is helpful is when generating a chart for the time series -
 * axis labels can be taken from the domain and range description.
 *
 * @param name  the name of the series (<code>null</code> not permitted).
 * @param domain  the domain description.
 * @param range  the range description.
 */"
"public TimePeriodValues(Comparable name) {
    this(name, DEFAULT_DOMAIN_DESCRIPTION, DEFAULT_RANGE_DESCRIPTION);
}","public void test42110() throws Throwable {
    TimePeriodValues timePeriodValues0 = null;
    try {
        timePeriodValues0 = new TimePeriodValues((Comparable) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'key' argument.
        //
        verifyException(""org.jfree.data.general.Series"", e);
    }
}","/**
 * Creates a new (empty) collection of time period values.
 *
 * @param name  the name of the series (<code>null</code> not permitted).
 */"
"public int getMaxMiddleIndex() {
    return this.maxMiddleIndex;
}","public void test43111() throws Throwable {
    Hour hour0 = new Hour();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0, (String) null, (String) null);
    String string0 = timePeriodValues0.getDomainDescription();
    assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
}","/**
 * Returns the index of the time period with the maximum middle
 * milliseconds.
 *
 * @return The index.
 */"
"public int getMinStartIndex() {
    return this.minStartIndex;
}","public void test43112() throws Throwable {
    Hour hour0 = new Hour();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0, (String) null, (String) null);
    String string0 = timePeriodValues0.getDomainDescription();
    assertEquals((-1), timePeriodValues0.getMinStartIndex());
}","/**
 * Returns the index of the time period with the minimum start milliseconds.
 *
 * @return The index.
 */"
"public int getMinMiddleIndex() {
    return this.minMiddleIndex;
}","public void test43113() throws Throwable {
    Hour hour0 = new Hour();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0, (String) null, (String) null);
    String string0 = timePeriodValues0.getDomainDescription();
    assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
}","/**
 * Returns the index of the time period with the minimum middle
 * milliseconds.
 *
 * @return The index.
 */"
"public int getMinEndIndex() {
    return this.minEndIndex;
}","public void test43114() throws Throwable {
    Hour hour0 = new Hour();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0, (String) null, (String) null);
    String string0 = timePeriodValues0.getDomainDescription();
    assertEquals((-1), timePeriodValues0.getMinEndIndex());
}","/**
 * Returns the index of the time period with the minimum end milliseconds.
 *
 * @return The index.
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test43115() throws Throwable {
    Hour hour0 = new Hour();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0, (String) null, (String) null);
    String string0 = timePeriodValues0.getDomainDescription();
    assertNull(string0);
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #getRangeDescription()
 * @see #setDomainDescription(String)
 */"
"public int getMaxStartIndex() {
    return this.maxStartIndex;
}","public void test43116() throws Throwable {
    Hour hour0 = new Hour();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0, (String) null, (String) null);
    String string0 = timePeriodValues0.getDomainDescription();
    assertEquals((-1), timePeriodValues0.getMaxStartIndex());
}","/**
 * Returns the index of the time period with the maximum start milliseconds.
 *
 * @return The index.
 */"
"public int getMaxEndIndex() {
    return this.maxEndIndex;
}","public void test43117() throws Throwable {
    Hour hour0 = new Hour();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0, (String) null, (String) null);
    String string0 = timePeriodValues0.getDomainDescription();
    assertEquals((-1), timePeriodValues0.getMaxEndIndex());
}","/**
 * Returns the index of the time period with the maximum end milliseconds.
 *
 * @return The index.
 */"
"public TimePeriodValue getDataItem(int index) {
    return (TimePeriodValue) this.data.get(index);
}","public void test44118() throws Throwable {
    Hour hour0 = new Hour();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0, (String) null, (String) null);
    // Undeclared exception!
    try {
        timePeriodValues0.getDataItem(0);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 0, Size: 0
        //
        verifyException(""java.util.ArrayList"", e);
    }
}","/**
 * Returns one data item for the series.
 *
 * @param index  the item index (in the range <code>0</code> to
 *     <code>getItemCount() - 1</code>).
 *
 * @return One data item for the series.
 */"
"public int getMaxMiddleIndex() {
    return this.maxMiddleIndex;
}","public void test45119() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0, ""|#8%_F&&?:?[Cv).[{"", (String) null);
    String string0 = timePeriodValues0.getRangeDescription();
    assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
}","/**
 * Returns the index of the time period with the maximum middle
 * milliseconds.
 *
 * @return The index.
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test45120() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0, ""|#8%_F&&?:?[Cv).[{"", (String) null);
    String string0 = timePeriodValues0.getRangeDescription();
    assertEquals(""|#8%_F&&?:?[Cv).[{"", timePeriodValues0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #getRangeDescription()
 * @see #setDomainDescription(String)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test45121() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0, ""|#8%_F&&?:?[Cv).[{"", (String) null);
    String string0 = timePeriodValues0.getRangeDescription();
    assertNull(string0);
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #getDomainDescription()
 * @see #setRangeDescription(String)
 */"
"public int getMinStartIndex() {
    return this.minStartIndex;
}","public void test45122() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0, ""|#8%_F&&?:?[Cv).[{"", (String) null);
    String string0 = timePeriodValues0.getRangeDescription();
    assertEquals((-1), timePeriodValues0.getMinStartIndex());
}","/**
 * Returns the index of the time period with the minimum start milliseconds.
 *
 * @return The index.
 */"
"public int getMinMiddleIndex() {
    return this.minMiddleIndex;
}","public void test45123() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0, ""|#8%_F&&?:?[Cv).[{"", (String) null);
    String string0 = timePeriodValues0.getRangeDescription();
    assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
}","/**
 * Returns the index of the time period with the minimum middle
 * milliseconds.
 *
 * @return The index.
 */"
"public int getMaxEndIndex() {
    return this.maxEndIndex;
}","public void test45124() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0, ""|#8%_F&&?:?[Cv).[{"", (String) null);
    String string0 = timePeriodValues0.getRangeDescription();
    assertEquals((-1), timePeriodValues0.getMaxEndIndex());
}","/**
 * Returns the index of the time period with the maximum end milliseconds.
 *
 * @return The index.
 */"
"public int getMinEndIndex() {
    return this.minEndIndex;
}","public void test45125() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0, ""|#8%_F&&?:?[Cv).[{"", (String) null);
    String string0 = timePeriodValues0.getRangeDescription();
    assertEquals((-1), timePeriodValues0.getMinEndIndex());
}","/**
 * Returns the index of the time period with the minimum end milliseconds.
 *
 * @return The index.
 */"
"public int getMaxStartIndex() {
    return this.maxStartIndex;
}","public void test45126() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(fixedMillisecond0, ""|#8%_F&&?:?[Cv).[{"", (String) null);
    String string0 = timePeriodValues0.getRangeDescription();
    assertEquals((-1), timePeriodValues0.getMaxStartIndex());
}","/**
 * Returns the index of the time period with the maximum start milliseconds.
 *
 * @return The index.
 */"
"public int getMinMiddleIndex() {
    return this.minMiddleIndex;
}","public void test46127() throws Throwable {
    Millisecond millisecond0 = new Millisecond();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0, """", """");
    timePeriodValues0.getItemCount();
    assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
}","/**
 * Returns the index of the time period with the minimum middle
 * milliseconds.
 *
 * @return The index.
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test46128() throws Throwable {
    Millisecond millisecond0 = new Millisecond();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0, """", """");
    timePeriodValues0.getItemCount();
    assertEquals("""", timePeriodValues0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #getDomainDescription()
 * @see #setRangeDescription(String)
 */"
"public int getMaxStartIndex() {
    return this.maxStartIndex;
}","public void test46129() throws Throwable {
    Millisecond millisecond0 = new Millisecond();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0, """", """");
    timePeriodValues0.getItemCount();
    assertEquals((-1), timePeriodValues0.getMaxStartIndex());
}","/**
 * Returns the index of the time period with the maximum start milliseconds.
 *
 * @return The index.
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test46130() throws Throwable {
    Millisecond millisecond0 = new Millisecond();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0, """", """");
    timePeriodValues0.getItemCount();
    assertEquals("""", timePeriodValues0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #getRangeDescription()
 * @see #setDomainDescription(String)
 */"
"public int getMaxEndIndex() {
    return this.maxEndIndex;
}","public void test46131() throws Throwable {
    Millisecond millisecond0 = new Millisecond();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0, """", """");
    timePeriodValues0.getItemCount();
    assertEquals((-1), timePeriodValues0.getMaxEndIndex());
}","/**
 * Returns the index of the time period with the maximum end milliseconds.
 *
 * @return The index.
 */"
"public int getMinStartIndex() {
    return this.minStartIndex;
}","public void test46132() throws Throwable {
    Millisecond millisecond0 = new Millisecond();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0, """", """");
    timePeriodValues0.getItemCount();
    assertEquals((-1), timePeriodValues0.getMinStartIndex());
}","/**
 * Returns the index of the time period with the minimum start milliseconds.
 *
 * @return The index.
 */"
"public int getMinEndIndex() {
    return this.minEndIndex;
}","public void test46133() throws Throwable {
    Millisecond millisecond0 = new Millisecond();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0, """", """");
    timePeriodValues0.getItemCount();
    assertEquals((-1), timePeriodValues0.getMinEndIndex());
}","/**
 * Returns the index of the time period with the minimum end milliseconds.
 *
 * @return The index.
 */"
"public int getMaxMiddleIndex() {
    return this.maxMiddleIndex;
}","public void test46134() throws Throwable {
    Millisecond millisecond0 = new Millisecond();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0, """", """");
    timePeriodValues0.getItemCount();
    assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
}","/**
 * Returns the index of the time period with the maximum middle
 * milliseconds.
 *
 * @return The index.
 */"
"public TimePeriodValues createCopy(int start, int end) throws CloneNotSupportedException {
    TimePeriodValues copy = (TimePeriodValues) super.clone();
    copy.data = new ArrayList();
    if (this.data.size() > 0) {
        for (int index = start; index <= end; index++) {
            TimePeriodValue item = (TimePeriodValue) this.data.get(index);
            TimePeriodValue clone = (TimePeriodValue) item.clone();
            try {
                copy.add(clone);
            } catch (SeriesException e) {
                System.err.println(""Failed to add cloned item."");
            }
        }
    }
    return copy;
}","public void test47135() throws Throwable {
    Millisecond millisecond0 = new Millisecond();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0, """", """");
    TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) millisecond0, (Number) 0);
    timePeriodValues0.add(timePeriodValue0);
    // Undeclared exception!
    try {
        timePeriodValues0.createCopy((-1823), 408);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * Creates a new instance by copying a subset of the data in this
 * collection.
 *
 * @param start  the index of the first item to copy.
 * @param end  the index of the last item to copy.
 *
 * @return A copy of a subset of the items.
 *
 * @throws CloneNotSupportedException if there is a cloning problem.
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test48136() throws Throwable {
    Month month0 = new Month();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(month0);
    assertEquals(""Value"", timePeriodValues0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #getDomainDescription()
 * @see #setRangeDescription(String)
 */"
"public int getMinStartIndex() {
    return this.minStartIndex;
}","public void test48137() throws Throwable {
    Month month0 = new Month();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(month0);
    timePeriodValues0.setRangeDescription((String) null);
    timePeriodValues0.hashCode();
    assertEquals((-1), timePeriodValues0.getMinStartIndex());
}","/**
 * Returns the index of the time period with the minimum start milliseconds.
 *
 * @return The index.
 */"
"public int getMaxStartIndex() {
    return this.maxStartIndex;
}","public void test48138() throws Throwable {
    Month month0 = new Month();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(month0);
    timePeriodValues0.setRangeDescription((String) null);
    timePeriodValues0.hashCode();
    assertEquals((-1), timePeriodValues0.getMaxStartIndex());
}","/**
 * Returns the index of the time period with the maximum start milliseconds.
 *
 * @return The index.
 */"
"public int getMaxEndIndex() {
    return this.maxEndIndex;
}","public void test48139() throws Throwable {
    Month month0 = new Month();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(month0);
    timePeriodValues0.setRangeDescription((String) null);
    timePeriodValues0.hashCode();
    assertEquals((-1), timePeriodValues0.getMaxEndIndex());
}","/**
 * Returns the index of the time period with the maximum end milliseconds.
 *
 * @return The index.
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test48140() throws Throwable {
    Month month0 = new Month();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(month0);
    timePeriodValues0.setRangeDescription((String) null);
    timePeriodValues0.hashCode();
    assertEquals(""Time"", timePeriodValues0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #getRangeDescription()
 * @see #setDomainDescription(String)
 */"
"public int getMinEndIndex() {
    return this.minEndIndex;
}","public void test48141() throws Throwable {
    Month month0 = new Month();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(month0);
    timePeriodValues0.setRangeDescription((String) null);
    timePeriodValues0.hashCode();
    assertEquals((-1), timePeriodValues0.getMinEndIndex());
}","/**
 * Returns the index of the time period with the minimum end milliseconds.
 *
 * @return The index.
 */"
"public int getMaxMiddleIndex() {
    return this.maxMiddleIndex;
}","public void test49142() throws Throwable {
    Millisecond millisecond0 = new Millisecond();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0, """", """");
    timePeriodValues0.hashCode();
    assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
}","/**
 * Returns the index of the time period with the maximum middle
 * milliseconds.
 *
 * @return The index.
 */"
"public int getMinStartIndex() {
    return this.minStartIndex;
}","public void test49143() throws Throwable {
    Millisecond millisecond0 = new Millisecond();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0, """", """");
    timePeriodValues0.hashCode();
    assertEquals((-1), timePeriodValues0.getMinStartIndex());
}","/**
 * Returns the index of the time period with the minimum start milliseconds.
 *
 * @return The index.
 */"
"public int getMinEndIndex() {
    return this.minEndIndex;
}","public void test49144() throws Throwable {
    Millisecond millisecond0 = new Millisecond();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0, """", """");
    timePeriodValues0.hashCode();
    assertEquals((-1), timePeriodValues0.getMinEndIndex());
}","/**
 * Returns the index of the time period with the minimum end milliseconds.
 *
 * @return The index.
 */"
"public int getMaxEndIndex() {
    return this.maxEndIndex;
}","public void test49145() throws Throwable {
    Millisecond millisecond0 = new Millisecond();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0, """", """");
    timePeriodValues0.hashCode();
    assertEquals((-1), timePeriodValues0.getMaxEndIndex());
}","/**
 * Returns the index of the time period with the maximum end milliseconds.
 *
 * @return The index.
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test50146() throws Throwable {
    Month month0 = new Month();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(month0);
    assertEquals(""Time"", timePeriodValues0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #getRangeDescription()
 * @see #setDomainDescription(String)
 */"
"public int getMinEndIndex() {
    return this.minEndIndex;
}","public void test50147() throws Throwable {
    Month month0 = new Month();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(month0);
    timePeriodValues0.setDomainDescription((String) null);
    timePeriodValues0.hashCode();
    assertEquals((-1), timePeriodValues0.getMinEndIndex());
}","/**
 * Returns the index of the time period with the minimum end milliseconds.
 *
 * @return The index.
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test50148() throws Throwable {
    Month month0 = new Month();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(month0);
    timePeriodValues0.setDomainDescription((String) null);
    timePeriodValues0.hashCode();
    assertEquals(""Value"", timePeriodValues0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #getDomainDescription()
 * @see #setRangeDescription(String)
 */"
"public int getMaxMiddleIndex() {
    return this.maxMiddleIndex;
}","public void test50149() throws Throwable {
    Month month0 = new Month();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(month0);
    timePeriodValues0.setDomainDescription((String) null);
    timePeriodValues0.hashCode();
    assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
}","/**
 * Returns the index of the time period with the maximum middle
 * milliseconds.
 *
 * @return The index.
 */"
"public int getMinMiddleIndex() {
    return this.minMiddleIndex;
}","public void test50150() throws Throwable {
    Month month0 = new Month();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(month0);
    timePeriodValues0.setDomainDescription((String) null);
    timePeriodValues0.hashCode();
    assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
}","/**
 * Returns the index of the time period with the minimum middle
 * milliseconds.
 *
 * @return The index.
 */"
"public int getMinStartIndex() {
    return this.minStartIndex;
}","public void test50151() throws Throwable {
    Month month0 = new Month();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(month0);
    timePeriodValues0.setDomainDescription((String) null);
    timePeriodValues0.hashCode();
    assertEquals((-1), timePeriodValues0.getMinStartIndex());
}","/**
 * Returns the index of the time period with the minimum start milliseconds.
 *
 * @return The index.
 */"
"public int getItemCount() {
    return this.data.size();
}","public void test51152() throws Throwable {
    Minute minute0 = new Minute();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0, ""iMPQUL^G+;TH#mv"", ""iMPQUL^G+;TH#mv"");
    TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) minute0, (double) 59);
    timePeriodValue0.setValue(59);
    timePeriodValues0.add(timePeriodValue0);
    TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(2545, 59);
    timePeriodValues1.add((TimePeriod) minute0, (Number) 59);
    boolean boolean0 = timePeriodValues1.equals(timePeriodValues0);
    assertEquals(1, timePeriodValues0.getItemCount());
}","/**
 * Returns the number of items in the series.
 *
 * @return The item count.
 */"
"public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof TimePeriodValues)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    TimePeriodValues that = (TimePeriodValues) obj;
    if (!ObjectUtilities.equal(this.getDomainDescription(), that.getDomainDescription())) {
        return false;
    }
    if (!ObjectUtilities.equal(this.getRangeDescription(), that.getRangeDescription())) {
        return false;
    }
    int count = getItemCount();
    if (count != that.getItemCount()) {
        return false;
    }
    for (int i = 0; i < count; i++) {
        if (!getDataItem(i).equals(that.getDataItem(i))) {
            return false;
        }
    }
    return true;
}","public void test51153() throws Throwable {
    Minute minute0 = new Minute();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0, ""iMPQUL^G+;TH#mv"", ""iMPQUL^G+;TH#mv"");
    TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) minute0, (double) 59);
    timePeriodValue0.setValue(59);
    timePeriodValues0.add(timePeriodValue0);
    TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(2545, 59);
    timePeriodValues1.add((TimePeriod) minute0, (Number) 59);
    boolean boolean0 = timePeriodValues1.equals(timePeriodValues0);
    assertTrue(boolean0);
}","/**
 * Tests the series for equality with another object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return <code>true</code> or <code>false</code>.
 */"
"public int getItemCount() {
    return this.data.size();
}","public void test52154() throws Throwable {
    Minute minute0 = new Minute();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0, ""iMPL^G+;TH#Qv"", ""iMPL^G+;TH#Qv"");
    TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(2545, 0);
    TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) minute0, (double) 59);
    timePeriodValues1.add(timePeriodValue0);
    timePeriodValues0.add((TimePeriod) minute0, (Number) 59);
    boolean boolean0 = timePeriodValues0.equals(timePeriodValues1);
    assertEquals(1, timePeriodValues1.getItemCount());
}","/**
 * Returns the number of items in the series.
 *
 * @return The item count.
 */"
"public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof TimePeriodValues)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    TimePeriodValues that = (TimePeriodValues) obj;
    if (!ObjectUtilities.equal(this.getDomainDescription(), that.getDomainDescription())) {
        return false;
    }
    if (!ObjectUtilities.equal(this.getRangeDescription(), that.getRangeDescription())) {
        return false;
    }
    int count = getItemCount();
    if (count != that.getItemCount()) {
        return false;
    }
    for (int i = 0; i < count; i++) {
        if (!getDataItem(i).equals(that.getDataItem(i))) {
            return false;
        }
    }
    return true;
}","public void test52155() throws Throwable {
    Minute minute0 = new Minute();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0, ""iMPL^G+;TH#Qv"", ""iMPL^G+;TH#Qv"");
    TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(2545, 0);
    TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) minute0, (double) 59);
    timePeriodValues1.add(timePeriodValue0);
    timePeriodValues0.add((TimePeriod) minute0, (Number) 59);
    boolean boolean0 = timePeriodValues0.equals(timePeriodValues1);
    assertFalse(boolean0);
}","/**
 * Tests the series for equality with another object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return <code>true</code> or <code>false</code>.
 */"
"public int getMinMiddleIndex() {
    return this.minMiddleIndex;
}","public void test53156() throws Throwable {
    Minute minute0 = new Minute();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0, ""iMPL^G+;TH#Qv"", ""iMPL^G+;TH#Qv"");
    TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(2545, 0);
    timePeriodValues1.add((TimePeriod) minute0, (Number) 59);
    boolean boolean0 = timePeriodValues0.equals(timePeriodValues1);
    assertEquals(0, timePeriodValues1.getMinMiddleIndex());
}","/**
 * Returns the index of the time period with the minimum middle
 * milliseconds.
 *
 * @return The index.
 */"
"public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof TimePeriodValues)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    TimePeriodValues that = (TimePeriodValues) obj;
    if (!ObjectUtilities.equal(this.getDomainDescription(), that.getDomainDescription())) {
        return false;
    }
    if (!ObjectUtilities.equal(this.getRangeDescription(), that.getRangeDescription())) {
        return false;
    }
    int count = getItemCount();
    if (count != that.getItemCount()) {
        return false;
    }
    for (int i = 0; i < count; i++) {
        if (!getDataItem(i).equals(that.getDataItem(i))) {
            return false;
        }
    }
    return true;
}","public void test53157() throws Throwable {
    Minute minute0 = new Minute();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0, ""iMPL^G+;TH#Qv"", ""iMPL^G+;TH#Qv"");
    TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(2545, 0);
    timePeriodValues1.add((TimePeriod) minute0, (Number) 59);
    boolean boolean0 = timePeriodValues0.equals(timePeriodValues1);
    assertFalse(timePeriodValues1.equals((Object) timePeriodValues0));
}","/**
 * Tests the series for equality with another object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return <code>true</code> or <code>false</code>.
 */"
"public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof TimePeriodValues)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    TimePeriodValues that = (TimePeriodValues) obj;
    if (!ObjectUtilities.equal(this.getDomainDescription(), that.getDomainDescription())) {
        return false;
    }
    if (!ObjectUtilities.equal(this.getRangeDescription(), that.getRangeDescription())) {
        return false;
    }
    int count = getItemCount();
    if (count != that.getItemCount()) {
        return false;
    }
    for (int i = 0; i < count; i++) {
        if (!getDataItem(i).equals(that.getDataItem(i))) {
            return false;
        }
    }
    return true;
}","public void test53158() throws Throwable {
    Minute minute0 = new Minute();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0, ""iMPL^G+;TH#Qv"", ""iMPL^G+;TH#Qv"");
    TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(2545, 0);
    timePeriodValues1.add((TimePeriod) minute0, (Number) 59);
    boolean boolean0 = timePeriodValues0.equals(timePeriodValues1);
    assertFalse(boolean0);
}","/**
 * Tests the series for equality with another object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return <code>true</code> or <code>false</code>.
 */"
"public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof TimePeriodValues)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    TimePeriodValues that = (TimePeriodValues) obj;
    if (!ObjectUtilities.equal(this.getDomainDescription(), that.getDomainDescription())) {
        return false;
    }
    if (!ObjectUtilities.equal(this.getRangeDescription(), that.getRangeDescription())) {
        return false;
    }
    int count = getItemCount();
    if (count != that.getItemCount()) {
        return false;
    }
    for (int i = 0; i < count; i++) {
        if (!getDataItem(i).equals(that.getDataItem(i))) {
            return false;
        }
    }
    return true;
}","public void test54159() throws Throwable {
    Minute minute0 = new Minute();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0, ""iMPL^G+;TH#Q9"", """");
    TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(0, 59);
    timePeriodValues1.setRangeDescription(""iMPL^G+;TH#Q9"");
    boolean boolean0 = timePeriodValues0.equals(timePeriodValues1);
    assertFalse(boolean0);
}","/**
 * Tests the series for equality with another object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return <code>true</code> or <code>false</code>.
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test54160() throws Throwable {
    Minute minute0 = new Minute();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0, ""iMPL^G+;TH#Q9"", """");
    TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(0, 59);
    timePeriodValues1.setRangeDescription(""iMPL^G+;TH#Q9"");
    boolean boolean0 = timePeriodValues0.equals(timePeriodValues1);
    assertEquals(""iMPL^G+;TH#Q9"", timePeriodValues1.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #getDomainDescription()
 * @see #setRangeDescription(String)
 */"
"public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof TimePeriodValues)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    TimePeriodValues that = (TimePeriodValues) obj;
    if (!ObjectUtilities.equal(this.getDomainDescription(), that.getDomainDescription())) {
        return false;
    }
    if (!ObjectUtilities.equal(this.getRangeDescription(), that.getRangeDescription())) {
        return false;
    }
    int count = getItemCount();
    if (count != that.getItemCount()) {
        return false;
    }
    for (int i = 0; i < count; i++) {
        if (!getDataItem(i).equals(that.getDataItem(i))) {
            return false;
        }
    }
    return true;
}","public void test55161() throws Throwable {
    Millisecond millisecond0 = new Millisecond();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0, """", """");
    TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(999, 0);
    assertTrue(timePeriodValues1.equals((Object) timePeriodValues0));
}","/**
 * Tests the series for equality with another object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return <code>true</code> or <code>false</code>.
 */"
"public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof TimePeriodValues)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    TimePeriodValues that = (TimePeriodValues) obj;
    if (!ObjectUtilities.equal(this.getDomainDescription(), that.getDomainDescription())) {
        return false;
    }
    if (!ObjectUtilities.equal(this.getRangeDescription(), that.getRangeDescription())) {
        return false;
    }
    int count = getItemCount();
    if (count != that.getItemCount()) {
        return false;
    }
    for (int i = 0; i < count; i++) {
        if (!getDataItem(i).equals(that.getDataItem(i))) {
            return false;
        }
    }
    return true;
}","public void test55162() throws Throwable {
    Millisecond millisecond0 = new Millisecond();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0, """", """");
    TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(999, 0);
    timePeriodValues0.setDescription("""");
    boolean boolean0 = timePeriodValues1.equals(timePeriodValues0);
    assertFalse(boolean0);
}","/**
 * Tests the series for equality with another object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return <code>true</code> or <code>false</code>.
 */"
"public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof TimePeriodValues)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    TimePeriodValues that = (TimePeriodValues) obj;
    if (!ObjectUtilities.equal(this.getDomainDescription(), that.getDomainDescription())) {
        return false;
    }
    if (!ObjectUtilities.equal(this.getRangeDescription(), that.getRangeDescription())) {
        return false;
    }
    int count = getItemCount();
    if (count != that.getItemCount()) {
        return false;
    }
    for (int i = 0; i < count; i++) {
        if (!getDataItem(i).equals(that.getDataItem(i))) {
            return false;
        }
    }
    return true;
}","public void test55163() throws Throwable {
    Millisecond millisecond0 = new Millisecond();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0, """", """");
    TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(999, 0);
    timePeriodValues0.setDescription("""");
    boolean boolean0 = timePeriodValues1.equals(timePeriodValues0);
    assertFalse(timePeriodValues1.equals((Object) timePeriodValues0));
}","/**
 * Tests the series for equality with another object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return <code>true</code> or <code>false</code>.
 */"
"public int getMinMiddleIndex() {
    return this.minMiddleIndex;
}","public void test56164() throws Throwable {
    Minute minute0 = new Minute();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0);
    Object object0 = new Object();
    boolean boolean0 = timePeriodValues0.equals(object0);
    assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
}","/**
 * Returns the index of the time period with the minimum middle
 * milliseconds.
 *
 * @return The index.
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test56165() throws Throwable {
    Minute minute0 = new Minute();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0);
    Object object0 = new Object();
    boolean boolean0 = timePeriodValues0.equals(object0);
    assertEquals(""Value"", timePeriodValues0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #getDomainDescription()
 * @see #setRangeDescription(String)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test56166() throws Throwable {
    Minute minute0 = new Minute();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0);
    Object object0 = new Object();
    boolean boolean0 = timePeriodValues0.equals(object0);
    assertEquals(""Time"", timePeriodValues0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #getRangeDescription()
 * @see #setDomainDescription(String)
 */"
"public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof TimePeriodValues)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    TimePeriodValues that = (TimePeriodValues) obj;
    if (!ObjectUtilities.equal(this.getDomainDescription(), that.getDomainDescription())) {
        return false;
    }
    if (!ObjectUtilities.equal(this.getRangeDescription(), that.getRangeDescription())) {
        return false;
    }
    int count = getItemCount();
    if (count != that.getItemCount()) {
        return false;
    }
    for (int i = 0; i < count; i++) {
        if (!getDataItem(i).equals(that.getDataItem(i))) {
            return false;
        }
    }
    return true;
}","public void test56167() throws Throwable {
    Minute minute0 = new Minute();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0);
    Object object0 = new Object();
    boolean boolean0 = timePeriodValues0.equals(object0);
    assertFalse(boolean0);
}","/**
 * Tests the series for equality with another object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return <code>true</code> or <code>false</code>.
 */"
"public int getMaxStartIndex() {
    return this.maxStartIndex;
}","public void test56168() throws Throwable {
    Minute minute0 = new Minute();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0);
    Object object0 = new Object();
    boolean boolean0 = timePeriodValues0.equals(object0);
    assertEquals((-1), timePeriodValues0.getMaxStartIndex());
}","/**
 * Returns the index of the time period with the maximum start milliseconds.
 *
 * @return The index.
 */"
"public int getMinStartIndex() {
    return this.minStartIndex;
}","public void test56169() throws Throwable {
    Minute minute0 = new Minute();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0);
    Object object0 = new Object();
    boolean boolean0 = timePeriodValues0.equals(object0);
    assertEquals((-1), timePeriodValues0.getMinStartIndex());
}","/**
 * Returns the index of the time period with the minimum start milliseconds.
 *
 * @return The index.
 */"
"public int getMaxMiddleIndex() {
    return this.maxMiddleIndex;
}","public void test56170() throws Throwable {
    Minute minute0 = new Minute();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0);
    Object object0 = new Object();
    boolean boolean0 = timePeriodValues0.equals(object0);
    assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
}","/**
 * Returns the index of the time period with the maximum middle
 * milliseconds.
 *
 * @return The index.
 */"
"public int getMaxEndIndex() {
    return this.maxEndIndex;
}","public void test56171() throws Throwable {
    Minute minute0 = new Minute();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0);
    Object object0 = new Object();
    boolean boolean0 = timePeriodValues0.equals(object0);
    assertEquals((-1), timePeriodValues0.getMaxEndIndex());
}","/**
 * Returns the index of the time period with the maximum end milliseconds.
 *
 * @return The index.
 */"
"public int getMinEndIndex() {
    return this.minEndIndex;
}","public void test56172() throws Throwable {
    Minute minute0 = new Minute();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0);
    Object object0 = new Object();
    boolean boolean0 = timePeriodValues0.equals(object0);
    assertEquals((-1), timePeriodValues0.getMinEndIndex());
}","/**
 * Returns the index of the time period with the minimum end milliseconds.
 *
 * @return The index.
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test57173() throws Throwable {
    Millisecond millisecond0 = new Millisecond();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0, """", """");
    TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(999, 0);
    timePeriodValues0.setDomainDescription(""^tpu."");
    boolean boolean0 = timePeriodValues1.equals(timePeriodValues0);
    assertEquals(""^tpu."", timePeriodValues0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #getRangeDescription()
 * @see #setDomainDescription(String)
 */"
"public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof TimePeriodValues)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    TimePeriodValues that = (TimePeriodValues) obj;
    if (!ObjectUtilities.equal(this.getDomainDescription(), that.getDomainDescription())) {
        return false;
    }
    if (!ObjectUtilities.equal(this.getRangeDescription(), that.getRangeDescription())) {
        return false;
    }
    int count = getItemCount();
    if (count != that.getItemCount()) {
        return false;
    }
    for (int i = 0; i < count; i++) {
        if (!getDataItem(i).equals(that.getDataItem(i))) {
            return false;
        }
    }
    return true;
}","public void test57174() throws Throwable {
    Millisecond millisecond0 = new Millisecond();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0, """", """");
    TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(999, 0);
    timePeriodValues0.setDomainDescription(""^tpu."");
    boolean boolean0 = timePeriodValues1.equals(timePeriodValues0);
    assertFalse(boolean0);
}","/**
 * Tests the series for equality with another object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return <code>true</code> or <code>false</code>.
 */"
"public void delete(int start, int end) {
    for (int i = 0; i <= (end - start); i++) {
        this.data.remove(start);
    }
    recalculateBounds();
    fireSeriesChanged();
}","public void test58175() throws Throwable {
    Millisecond millisecond0 = new Millisecond();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0, """", """");
    // Undeclared exception!
    try {
        timePeriodValues0.delete(0, 0);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 0, Size: 0
        //
        verifyException(""java.util.ArrayList"", e);
    }
}","/**
 * Deletes data from start until end index (end inclusive) and sends a
 * {@link SeriesChangeEvent} to all registered listeners.
 *
 * @param start  the index of the first period to delete.
 * @param end  the index of the last period to delete.
 */"
"public int getMinEndIndex() {
    return this.minEndIndex;
}","public void test59176() throws Throwable {
    Millisecond millisecond0 = new Millisecond();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0, """", """");
    TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) millisecond0, (Number) 0);
    timePeriodValues0.add(timePeriodValue0);
    timePeriodValues0.delete(9, 0);
    assertEquals(0, timePeriodValues0.getMinEndIndex());
}","/**
 * Returns the index of the time period with the minimum end milliseconds.
 *
 * @return The index.
 */"
"public Object clone() throws CloneNotSupportedException {
    Object clone = createCopy(0, getItemCount() - 1);
    return clone;
}","public void test60177() throws Throwable {
    Hour hour0 = new Hour();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0, (String) null, (String) null);
    timePeriodValues0.add((TimePeriod) hour0, (Number) 0);
    MockDate mockDate0 = new MockDate(640, 29, 37);
    TimeZone timeZone0 = TimeZone.getTimeZone(""nIgn_xMf}8Te"");
    Hour hour1 = new Hour(mockDate0, timeZone0);
    timePeriodValues0.add((TimePeriod) hour1, (Number) 23);
    // Undeclared exception!
    try {
        timePeriodValues0.clone();
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 1, Size: 1
        //
        verifyException(""java.util.ArrayList"", e);
    }
}","/**
 * Returns a clone of the collection.
 * <P>
 * Notes:
 * <ul>
 *   <li>no need to clone the domain and range descriptions, since String
 *       object is immutable;</li>
 *   <li>we pass over to the more general method createCopy(start, end).
 *   </li>
 * </ul>
 *
 * @return A clone of the time series.
 *
 * @throws CloneNotSupportedException if there is a cloning problem.
 */"
"public void add(TimePeriodValue item) {
    if (item == null) {
        throw new IllegalArgumentException(""Null item not allowed."");
    }
    this.data.add(item);
    updateBounds(item.getPeriod(), this.data.size() - 1);
    fireSeriesChanged();
}","public void test61178() throws Throwable {
    MockDate mockDate0 = new MockDate();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(mockDate0, ""org.jfree.data.UnknownKeyException"", ""org.jfree.data.UnknownKeyException"");
    // Undeclared exception!
    try {
        timePeriodValues0.add((TimePeriodValue) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null item not allowed.
        //
        verifyException(""org.jfree.data.time.TimePeriodValues"", e);
    }
}","/**
 * Adds a data item to the series and sends a {@link SeriesChangeEvent} to
 * all registered listeners.
 *
 * @param item  the item (<code>null</code> not permitted).
 */"
"public int getMinEndIndex() {
    return this.minEndIndex;
}","public void test62179() throws Throwable {
    Millisecond millisecond0 = new Millisecond();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0, """", """");
    int int0 = timePeriodValues0.getMinMiddleIndex();
    assertEquals((-1), timePeriodValues0.getMinEndIndex());
}","/**
 * Returns the index of the time period with the minimum end milliseconds.
 *
 * @return The index.
 */"
"public int getMaxEndIndex() {
    return this.maxEndIndex;
}","public void test62180() throws Throwable {
    Millisecond millisecond0 = new Millisecond();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0, """", """");
    int int0 = timePeriodValues0.getMinMiddleIndex();
    assertEquals((-1), timePeriodValues0.getMaxEndIndex());
}","/**
 * Returns the index of the time period with the maximum end milliseconds.
 *
 * @return The index.
 */"
"public int getMaxStartIndex() {
    return this.maxStartIndex;
}","public void test62181() throws Throwable {
    Millisecond millisecond0 = new Millisecond();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0, """", """");
    int int0 = timePeriodValues0.getMinMiddleIndex();
    assertEquals((-1), timePeriodValues0.getMaxStartIndex());
}","/**
 * Returns the index of the time period with the maximum start milliseconds.
 *
 * @return The index.
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test62182() throws Throwable {
    Millisecond millisecond0 = new Millisecond();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0, """", """");
    int int0 = timePeriodValues0.getMinMiddleIndex();
    assertEquals("""", timePeriodValues0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #getDomainDescription()
 * @see #setRangeDescription(String)
 */"
"public int getMinStartIndex() {
    return this.minStartIndex;
}","public void test62183() throws Throwable {
    Millisecond millisecond0 = new Millisecond();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0, """", """");
    int int0 = timePeriodValues0.getMinMiddleIndex();
    assertEquals((-1), timePeriodValues0.getMinStartIndex());
}","/**
 * Returns the index of the time period with the minimum start milliseconds.
 *
 * @return The index.
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test62184() throws Throwable {
    Millisecond millisecond0 = new Millisecond();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0, """", """");
    int int0 = timePeriodValues0.getMinMiddleIndex();
    assertEquals("""", timePeriodValues0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #getRangeDescription()
 * @see #setDomainDescription(String)
 */"
"public int getMinMiddleIndex() {
    return this.minMiddleIndex;
}","public void test62185() throws Throwable {
    Millisecond millisecond0 = new Millisecond();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0, """", """");
    int int0 = timePeriodValues0.getMinMiddleIndex();
    assertEquals((-1), int0);
}","/**
 * Returns the index of the time period with the minimum middle
 * milliseconds.
 *
 * @return The index.
 */"
"public int getMaxMiddleIndex() {
    return this.maxMiddleIndex;
}","public void test62186() throws Throwable {
    Millisecond millisecond0 = new Millisecond();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0, """", """");
    int int0 = timePeriodValues0.getMinMiddleIndex();
    assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
}","/**
 * Returns the index of the time period with the maximum middle
 * milliseconds.
 *
 * @return The index.
 */"
"public void update(int index, Number value) {
    TimePeriodValue item = getDataItem(index);
    item.setValue(value);
    fireSeriesChanged();
}","public void test63187() throws Throwable {
    Month month0 = new Month();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(month0);
    Long long0 = new Long((byte) 34);
    // Undeclared exception!
    try {
        timePeriodValues0.update(0, long0);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 0, Size: 0
        //
        verifyException(""java.util.ArrayList"", e);
    }
}","/**
 * Updates (changes) the value of a data item and sends a
 * {@link SeriesChangeEvent} to all registered listeners.
 *
 * @param index  the index of the data item to update.
 * @param value  the new value (<code>null</code> not permitted).
 */"
"public int getMaxMiddleIndex() {
    return this.maxMiddleIndex;
}","public void test64188() throws Throwable {
    Minute minute0 = new Minute();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0, ""iMPL^G+;TH#Q9"", """");
    int int0 = timePeriodValues0.getMaxEndIndex();
    assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
}","/**
 * Returns the index of the time period with the maximum middle
 * milliseconds.
 *
 * @return The index.
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test64189() throws Throwable {
    Minute minute0 = new Minute();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0, ""iMPL^G+;TH#Q9"", """");
    int int0 = timePeriodValues0.getMaxEndIndex();
    assertEquals(""iMPL^G+;TH#Q9"", timePeriodValues0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #getRangeDescription()
 * @see #setDomainDescription(String)
 */"
"public int getMinStartIndex() {
    return this.minStartIndex;
}","public void test64190() throws Throwable {
    Minute minute0 = new Minute();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0, ""iMPL^G+;TH#Q9"", """");
    int int0 = timePeriodValues0.getMaxEndIndex();
    assertEquals((-1), timePeriodValues0.getMinStartIndex());
}","/**
 * Returns the index of the time period with the minimum start milliseconds.
 *
 * @return The index.
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test64191() throws Throwable {
    Minute minute0 = new Minute();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0, ""iMPL^G+;TH#Q9"", """");
    int int0 = timePeriodValues0.getMaxEndIndex();
    assertEquals("""", timePeriodValues0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #getDomainDescription()
 * @see #setRangeDescription(String)
 */"
"public int getMinMiddleIndex() {
    return this.minMiddleIndex;
}","public void test64192() throws Throwable {
    Minute minute0 = new Minute();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0, ""iMPL^G+;TH#Q9"", """");
    int int0 = timePeriodValues0.getMaxEndIndex();
    assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
}","/**
 * Returns the index of the time period with the minimum middle
 * milliseconds.
 *
 * @return The index.
 */"
"public int getMinEndIndex() {
    return this.minEndIndex;
}","public void test64193() throws Throwable {
    Minute minute0 = new Minute();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0, ""iMPL^G+;TH#Q9"", """");
    int int0 = timePeriodValues0.getMaxEndIndex();
    assertEquals((-1), timePeriodValues0.getMinEndIndex());
}","/**
 * Returns the index of the time period with the minimum end milliseconds.
 *
 * @return The index.
 */"
"public int getMaxEndIndex() {
    return this.maxEndIndex;
}","public void test64194() throws Throwable {
    Minute minute0 = new Minute();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0, ""iMPL^G+;TH#Q9"", """");
    int int0 = timePeriodValues0.getMaxEndIndex();
    assertEquals((-1), int0);
}","/**
 * Returns the index of the time period with the maximum end milliseconds.
 *
 * @return The index.
 */"
"public int getMaxStartIndex() {
    return this.maxStartIndex;
}","public void test64195() throws Throwable {
    Minute minute0 = new Minute();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0, ""iMPL^G+;TH#Q9"", """");
    int int0 = timePeriodValues0.getMaxEndIndex();
    assertEquals((-1), timePeriodValues0.getMaxStartIndex());
}","/**
 * Returns the index of the time period with the maximum start milliseconds.
 *
 * @return The index.
 */"
"public TimePeriod getTimePeriod(int index) {
    return getDataItem(index).getPeriod();
}","public void test65196() throws Throwable {
    Hour hour0 = new Hour();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0, (String) null, (String) null);
    // Undeclared exception!
    try {
        timePeriodValues0.getTimePeriod(0);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 0, Size: 0
        //
        verifyException(""java.util.ArrayList"", e);
    }
}","/**
 * Returns the time period at the specified index.
 *
 * @param index  the item index (in the range <code>0</code> to
 *     <code>getItemCount() - 1</code>).
 *
 * @return The time period at the specified index.
 *
 * @see #getDataItem(int)
 */"
"public int getMinStartIndex() {
    return this.minStartIndex;
}","public void test66197() throws Throwable {
    Millisecond millisecond0 = new Millisecond();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0, """", """");
    int int0 = timePeriodValues0.getMinStartIndex();
    assertEquals((-1), int0);
}","/**
 * Returns the index of the time period with the minimum start milliseconds.
 *
 * @return The index.
 */"
"public int getMaxEndIndex() {
    return this.maxEndIndex;
}","public void test66198() throws Throwable {
    Millisecond millisecond0 = new Millisecond();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0, """", """");
    int int0 = timePeriodValues0.getMinStartIndex();
    assertEquals((-1), timePeriodValues0.getMaxEndIndex());
}","/**
 * Returns the index of the time period with the maximum end milliseconds.
 *
 * @return The index.
 */"
"public int getMinEndIndex() {
    return this.minEndIndex;
}","public void test66199() throws Throwable {
    Millisecond millisecond0 = new Millisecond();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0, """", """");
    int int0 = timePeriodValues0.getMinStartIndex();
    assertEquals((-1), timePeriodValues0.getMinEndIndex());
}","/**
 * Returns the index of the time period with the minimum end milliseconds.
 *
 * @return The index.
 */"
"public int getMaxMiddleIndex() {
    return this.maxMiddleIndex;
}","public void test66200() throws Throwable {
    Millisecond millisecond0 = new Millisecond();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0, """", """");
    int int0 = timePeriodValues0.getMinStartIndex();
    assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
}","/**
 * Returns the index of the time period with the maximum middle
 * milliseconds.
 *
 * @return The index.
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test66201() throws Throwable {
    Millisecond millisecond0 = new Millisecond();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0, """", """");
    int int0 = timePeriodValues0.getMinStartIndex();
    assertEquals("""", timePeriodValues0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #getDomainDescription()
 * @see #setRangeDescription(String)
 */"
"public int getMaxStartIndex() {
    return this.maxStartIndex;
}","public void test66202() throws Throwable {
    Millisecond millisecond0 = new Millisecond();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0, """", """");
    int int0 = timePeriodValues0.getMinStartIndex();
    assertEquals((-1), timePeriodValues0.getMaxStartIndex());
}","/**
 * Returns the index of the time period with the maximum start milliseconds.
 *
 * @return The index.
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test66203() throws Throwable {
    Millisecond millisecond0 = new Millisecond();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0, """", """");
    int int0 = timePeriodValues0.getMinStartIndex();
    assertEquals("""", timePeriodValues0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #getRangeDescription()
 * @see #setDomainDescription(String)
 */"
"public int getMinMiddleIndex() {
    return this.minMiddleIndex;
}","public void test66204() throws Throwable {
    Millisecond millisecond0 = new Millisecond();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0, """", """");
    int int0 = timePeriodValues0.getMinStartIndex();
    assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
}","/**
 * Returns the index of the time period with the minimum middle
 * milliseconds.
 *
 * @return The index.
 */"
"public int getMaxStartIndex() {
    return this.maxStartIndex;
}","public void test67205() throws Throwable {
    Minute minute0 = new Minute();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0);
    int int0 = timePeriodValues0.getMaxStartIndex();
    assertEquals((-1), int0);
}","/**
 * Returns the index of the time period with the maximum start milliseconds.
 *
 * @return The index.
 */"
"public int getMinEndIndex() {
    return this.minEndIndex;
}","public void test67206() throws Throwable {
    Minute minute0 = new Minute();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0);
    int int0 = timePeriodValues0.getMaxStartIndex();
    assertEquals((-1), timePeriodValues0.getMinEndIndex());
}","/**
 * Returns the index of the time period with the minimum end milliseconds.
 *
 * @return The index.
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test67207() throws Throwable {
    Minute minute0 = new Minute();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0);
    int int0 = timePeriodValues0.getMaxStartIndex();
    assertEquals(""Value"", timePeriodValues0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #getDomainDescription()
 * @see #setRangeDescription(String)
 */"
"public int getMaxEndIndex() {
    return this.maxEndIndex;
}","public void test67208() throws Throwable {
    Minute minute0 = new Minute();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0);
    int int0 = timePeriodValues0.getMaxStartIndex();
    assertEquals((-1), timePeriodValues0.getMaxEndIndex());
}","/**
 * Returns the index of the time period with the maximum end milliseconds.
 *
 * @return The index.
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test67209() throws Throwable {
    Minute minute0 = new Minute();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0);
    int int0 = timePeriodValues0.getMaxStartIndex();
    assertEquals(""Time"", timePeriodValues0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #getRangeDescription()
 * @see #setDomainDescription(String)
 */"
"public int getMinMiddleIndex() {
    return this.minMiddleIndex;
}","public void test67210() throws Throwable {
    Minute minute0 = new Minute();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0);
    int int0 = timePeriodValues0.getMaxStartIndex();
    assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
}","/**
 * Returns the index of the time period with the minimum middle
 * milliseconds.
 *
 * @return The index.
 */"
"public int getMaxMiddleIndex() {
    return this.maxMiddleIndex;
}","public void test67211() throws Throwable {
    Minute minute0 = new Minute();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0);
    int int0 = timePeriodValues0.getMaxStartIndex();
    assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
}","/**
 * Returns the index of the time period with the maximum middle
 * milliseconds.
 *
 * @return The index.
 */"
"public int getMinStartIndex() {
    return this.minStartIndex;
}","public void test67212() throws Throwable {
    Minute minute0 = new Minute();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0);
    int int0 = timePeriodValues0.getMaxStartIndex();
    assertEquals((-1), timePeriodValues0.getMinStartIndex());
}","/**
 * Returns the index of the time period with the minimum start milliseconds.
 *
 * @return The index.
 */"
"public int getMinMiddleIndex() {
    return this.minMiddleIndex;
}","public void test68213() throws Throwable {
    Second second0 = new Second();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(second0);
    int int0 = timePeriodValues0.getMinEndIndex();
    assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
}","/**
 * Returns the index of the time period with the minimum middle
 * milliseconds.
 *
 * @return The index.
 */"
"public int getMaxEndIndex() {
    return this.maxEndIndex;
}","public void test68214() throws Throwable {
    Second second0 = new Second();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(second0);
    int int0 = timePeriodValues0.getMinEndIndex();
    assertEquals((-1), timePeriodValues0.getMaxEndIndex());
}","/**
 * Returns the index of the time period with the maximum end milliseconds.
 *
 * @return The index.
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test68215() throws Throwable {
    Second second0 = new Second();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(second0);
    int int0 = timePeriodValues0.getMinEndIndex();
    assertEquals(""Time"", timePeriodValues0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #getRangeDescription()
 * @see #setDomainDescription(String)
 */"
"public int getMaxStartIndex() {
    return this.maxStartIndex;
}","public void test68216() throws Throwable {
    Second second0 = new Second();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(second0);
    int int0 = timePeriodValues0.getMinEndIndex();
    assertEquals((-1), timePeriodValues0.getMaxStartIndex());
}","/**
 * Returns the index of the time period with the maximum start milliseconds.
 *
 * @return The index.
 */"
"public int getMinEndIndex() {
    return this.minEndIndex;
}","public void test68217() throws Throwable {
    Second second0 = new Second();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(second0);
    int int0 = timePeriodValues0.getMinEndIndex();
    assertEquals((-1), int0);
}","/**
 * Returns the index of the time period with the minimum end milliseconds.
 *
 * @return The index.
 */"
"public int getMaxMiddleIndex() {
    return this.maxMiddleIndex;
}","public void test68218() throws Throwable {
    Second second0 = new Second();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(second0);
    int int0 = timePeriodValues0.getMinEndIndex();
    assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
}","/**
 * Returns the index of the time period with the maximum middle
 * milliseconds.
 *
 * @return The index.
 */"
"public int getMinStartIndex() {
    return this.minStartIndex;
}","public void test68219() throws Throwable {
    Second second0 = new Second();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(second0);
    int int0 = timePeriodValues0.getMinEndIndex();
    assertEquals((-1), timePeriodValues0.getMinStartIndex());
}","/**
 * Returns the index of the time period with the minimum start milliseconds.
 *
 * @return The index.
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test68220() throws Throwable {
    Second second0 = new Second();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(second0);
    int int0 = timePeriodValues0.getMinEndIndex();
    assertEquals(""Value"", timePeriodValues0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #getDomainDescription()
 * @see #setRangeDescription(String)
 */"
"public int getMaxStartIndex() {
    return this.maxStartIndex;
}","public void test69221() throws Throwable {
    Minute minute0 = new Minute();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0, ""iMPL^G+;TH#Qv"", ""iMPL^G+;TH#Qv"");
    TimePeriodValues timePeriodValues1 = (TimePeriodValues) timePeriodValues0.clone();
    assertEquals((-1), timePeriodValues1.getMaxStartIndex());
}","/**
 * Returns the index of the time period with the maximum start milliseconds.
 *
 * @return The index.
 */"
"public int getMinMiddleIndex() {
    return this.minMiddleIndex;
}","public void test69222() throws Throwable {
    Minute minute0 = new Minute();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0, ""iMPL^G+;TH#Qv"", ""iMPL^G+;TH#Qv"");
    TimePeriodValues timePeriodValues1 = (TimePeriodValues) timePeriodValues0.clone();
    assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
}","/**
 * Returns the index of the time period with the minimum middle
 * milliseconds.
 *
 * @return The index.
 */"
"public int getMinStartIndex() {
    return this.minStartIndex;
}","public void test69223() throws Throwable {
    Minute minute0 = new Minute();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0, ""iMPL^G+;TH#Qv"", ""iMPL^G+;TH#Qv"");
    TimePeriodValues timePeriodValues1 = (TimePeriodValues) timePeriodValues0.clone();
    assertEquals((-1), timePeriodValues1.getMinStartIndex());
}","/**
 * Returns the index of the time period with the minimum start milliseconds.
 *
 * @return The index.
 */"
"public Object clone() throws CloneNotSupportedException {
    Object clone = createCopy(0, getItemCount() - 1);
    return clone;
}","public void test69224() throws Throwable {
    Minute minute0 = new Minute();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0, ""iMPL^G+;TH#Qv"", ""iMPL^G+;TH#Qv"");
    TimePeriodValues timePeriodValues1 = (TimePeriodValues) timePeriodValues0.clone();
    assertNotSame(timePeriodValues1, timePeriodValues0);
}","/**
 * Returns a clone of the collection.
 * <P>
 * Notes:
 * <ul>
 *   <li>no need to clone the domain and range descriptions, since String
 *       object is immutable;</li>
 *   <li>we pass over to the more general method createCopy(start, end).
 *   </li>
 * </ul>
 *
 * @return A clone of the time series.
 *
 * @throws CloneNotSupportedException if there is a cloning problem.
 */"
"public int getMaxEndIndex() {
    return this.maxEndIndex;
}","public void test69225() throws Throwable {
    Minute minute0 = new Minute();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0, ""iMPL^G+;TH#Qv"", ""iMPL^G+;TH#Qv"");
    TimePeriodValues timePeriodValues1 = (TimePeriodValues) timePeriodValues0.clone();
    assertEquals((-1), timePeriodValues1.getMaxEndIndex());
}","/**
 * Returns the index of the time period with the maximum end milliseconds.
 *
 * @return The index.
 */"
"public int getMaxMiddleIndex() {
    return this.maxMiddleIndex;
}","public void test69226() throws Throwable {
    Minute minute0 = new Minute();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0, ""iMPL^G+;TH#Qv"", ""iMPL^G+;TH#Qv"");
    TimePeriodValues timePeriodValues1 = (TimePeriodValues) timePeriodValues0.clone();
    assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
}","/**
 * Returns the index of the time period with the maximum middle
 * milliseconds.
 *
 * @return The index.
 */"
"public int getMinEndIndex() {
    return this.minEndIndex;
}","public void test69227() throws Throwable {
    Minute minute0 = new Minute();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0, ""iMPL^G+;TH#Qv"", ""iMPL^G+;TH#Qv"");
    TimePeriodValues timePeriodValues1 = (TimePeriodValues) timePeriodValues0.clone();
    assertEquals((-1), timePeriodValues1.getMinEndIndex());
}","/**
 * Returns the index of the time period with the minimum end milliseconds.
 *
 * @return The index.
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test69228() throws Throwable {
    Minute minute0 = new Minute();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0, ""iMPL^G+;TH#Qv"", ""iMPL^G+;TH#Qv"");
    TimePeriodValues timePeriodValues1 = (TimePeriodValues) timePeriodValues0.clone();
    assertEquals(""iMPL^G+;TH#Qv"", timePeriodValues1.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #getDomainDescription()
 * @see #setRangeDescription(String)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test69229() throws Throwable {
    Minute minute0 = new Minute();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0, ""iMPL^G+;TH#Qv"", ""iMPL^G+;TH#Qv"");
    TimePeriodValues timePeriodValues1 = (TimePeriodValues) timePeriodValues0.clone();
    assertEquals(""iMPL^G+;TH#Qv"", timePeriodValues1.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #getRangeDescription()
 * @see #setDomainDescription(String)
 */"
"public Number getValue(int index) {
    return getDataItem(index).getValue();
}","public void test70230() throws Throwable {
    Millisecond millisecond0 = new Millisecond();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0, """", """");
    // Undeclared exception!
    try {
        timePeriodValues0.getValue(0);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 0, Size: 0
        //
        verifyException(""java.util.ArrayList"", e);
    }
}","/**
 * Returns the value at the specified index.
 *
 * @param index  the item index (in the range <code>0</code> to
 *     <code>getItemCount() - 1</code>).
 *
 * @return The value at the specified index (possibly <code>null</code>).
 *
 * @see #getDataItem(int)
 */"
"public int getMaxStartIndex() {
    return this.maxStartIndex;
}","public void test71231() throws Throwable {
    Hour hour0 = new Hour();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0, (String) null, (String) null);
    int int0 = timePeriodValues0.getMaxMiddleIndex();
    assertEquals((-1), timePeriodValues0.getMaxStartIndex());
}","/**
 * Returns the index of the time period with the maximum start milliseconds.
 *
 * @return The index.
 */"
"public int getMinMiddleIndex() {
    return this.minMiddleIndex;
}","public void test71232() throws Throwable {
    Hour hour0 = new Hour();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0, (String) null, (String) null);
    int int0 = timePeriodValues0.getMaxMiddleIndex();
    assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
}","/**
 * Returns the index of the time period with the minimum middle
 * milliseconds.
 *
 * @return The index.
 */"
"public int getMaxEndIndex() {
    return this.maxEndIndex;
}","public void test71233() throws Throwable {
    Hour hour0 = new Hour();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0, (String) null, (String) null);
    int int0 = timePeriodValues0.getMaxMiddleIndex();
    assertEquals((-1), timePeriodValues0.getMaxEndIndex());
}","/**
 * Returns the index of the time period with the maximum end milliseconds.
 *
 * @return The index.
 */"
"public int getMinEndIndex() {
    return this.minEndIndex;
}","public void test71234() throws Throwable {
    Hour hour0 = new Hour();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0, (String) null, (String) null);
    int int0 = timePeriodValues0.getMaxMiddleIndex();
    assertEquals((-1), timePeriodValues0.getMinEndIndex());
}","/**
 * Returns the index of the time period with the minimum end milliseconds.
 *
 * @return The index.
 */"
"public int getMinStartIndex() {
    return this.minStartIndex;
}","public void test71235() throws Throwable {
    Hour hour0 = new Hour();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0, (String) null, (String) null);
    int int0 = timePeriodValues0.getMaxMiddleIndex();
    assertEquals((-1), timePeriodValues0.getMinStartIndex());
}","/**
 * Returns the index of the time period with the minimum start milliseconds.
 *
 * @return The index.
 */"
"public int getMaxMiddleIndex() {
    return this.maxMiddleIndex;
}","public void test71236() throws Throwable {
    Hour hour0 = new Hour();
    TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0, (String) null, (String) null);
    int int0 = timePeriodValues0.getMaxMiddleIndex();
    assertEquals((-1), int0);
}","/**
 * Returns the index of the time period with the maximum middle
 * milliseconds.
 *
 * @return The index.
 */"
