focal_method,test_prefix,docstring
"public String getRangeDescription() {
    return this.range;
}","public void test0000() throws Throwable {
    DateFormatSymbols dateFormatSymbols0 = SerialDate.DATE_FORMAT_SYMBOLS;
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""", dateFormatSymbols0);
    ParsePosition parsePosition0 = new ParsePosition(2);
    Date date0 = mockSimpleDateFormat0.parse(""java.lang.Class"", parsePosition0);
    TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
    Millisecond millisecond0 = new Millisecond(date0, timeZone0);
    Class<String> class0 = String.class;
    TimeSeries timeSeries0 = new TimeSeries(millisecond0, """", """", class0);
    timeSeries0.hashCode();
    assertEquals("""", timeSeries0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test0001() throws Throwable {
    DateFormatSymbols dateFormatSymbols0 = SerialDate.DATE_FORMAT_SYMBOLS;
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""", dateFormatSymbols0);
    ParsePosition parsePosition0 = new ParsePosition(2);
    Date date0 = mockSimpleDateFormat0.parse(""java.lang.Class"", parsePosition0);
    TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
    Millisecond millisecond0 = new Millisecond(date0, timeZone0);
    Class<String> class0 = String.class;
    TimeSeries timeSeries0 = new TimeSeries(millisecond0, """", """", class0);
    timeSeries0.hashCode();
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test0002() throws Throwable {
    DateFormatSymbols dateFormatSymbols0 = SerialDate.DATE_FORMAT_SYMBOLS;
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""", dateFormatSymbols0);
    ParsePosition parsePosition0 = new ParsePosition(2);
    Date date0 = mockSimpleDateFormat0.parse(""java.lang.Class"", parsePosition0);
    TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
    Millisecond millisecond0 = new Millisecond(date0, timeZone0);
    Class<String> class0 = String.class;
    TimeSeries timeSeries0 = new TimeSeries(millisecond0, """", """", class0);
    timeSeries0.hashCode();
    assertEquals("""", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test0003() throws Throwable {
    DateFormatSymbols dateFormatSymbols0 = SerialDate.DATE_FORMAT_SYMBOLS;
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""", dateFormatSymbols0);
    ParsePosition parsePosition0 = new ParsePosition(2);
    Date date0 = mockSimpleDateFormat0.parse(""java.lang.Class"", parsePosition0);
    TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
    Millisecond millisecond0 = new Millisecond(date0, timeZone0);
    Class<String> class0 = String.class;
    TimeSeries timeSeries0 = new TimeSeries(millisecond0, """", """", class0);
    timeSeries0.hashCode();
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public boolean equals(Object object) {
    if (object == this) {
        return true;
    }
    if (!(object instanceof TimeSeries) || !super.equals(object)) {
        return false;
    }
    TimeSeries s = (TimeSeries) object;
    if (!ObjectUtilities.equal(getDomainDescription(), s.getDomainDescription())) {
        return false;
    }
    if (!ObjectUtilities.equal(getRangeDescription(), s.getRangeDescription())) {
        return false;
    }
    if (!getClass().equals(s.getClass())) {
        return false;
    }
    if (getMaximumItemAge() != s.getMaximumItemAge()) {
        return false;
    }
    if (getMaximumItemCount() != s.getMaximumItemCount()) {
        return false;
    }
    int count = getItemCount();
    if (count != s.getItemCount()) {
        return false;
    }
    for (int i = 0; i < count; i++) {
        if (!getDataItem(i).equals(s.getDataItem(i))) {
            return false;
        }
    }
    return true;
}","public void test0014() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    TimeSeries timeSeries1 = timeSeries0.createCopy(1, 1);
    assertTrue(timeSeries1.equals((Object) timeSeries0));
}","/**
 * Tests the series for equality with an arbitrary object.
 *
 * @param object  the object to test against (<code>null</code> permitted).
 *
 * @return A boolean.
 */"
"public boolean equals(Object object) {
    if (object == this) {
        return true;
    }
    if (!(object instanceof TimeSeries) || !super.equals(object)) {
        return false;
    }
    TimeSeries s = (TimeSeries) object;
    if (!ObjectUtilities.equal(getDomainDescription(), s.getDomainDescription())) {
        return false;
    }
    if (!ObjectUtilities.equal(getRangeDescription(), s.getRangeDescription())) {
        return false;
    }
    if (!getClass().equals(s.getClass())) {
        return false;
    }
    if (getMaximumItemAge() != s.getMaximumItemAge()) {
        return false;
    }
    if (getMaximumItemCount() != s.getMaximumItemCount()) {
        return false;
    }
    int count = getItemCount();
    if (count != s.getItemCount()) {
        return false;
    }
    for (int i = 0; i < count; i++) {
        if (!getDataItem(i).equals(s.getDataItem(i))) {
            return false;
        }
    }
    return true;
}","public void test0015() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    TimeSeries timeSeries1 = timeSeries0.createCopy(1, 1);
    timeSeries1.addOrUpdate((RegularTimePeriod) week0, (double) 33);
    boolean boolean0 = timeSeries1.equals(timeSeries0);
    assertFalse(timeSeries1.equals((Object) timeSeries0));
}","/**
 * Tests the series for equality with an arbitrary object.
 *
 * @param object  the object to test against (<code>null</code> permitted).
 *
 * @return A boolean.
 */"
"public boolean equals(Object object) {
    if (object == this) {
        return true;
    }
    if (!(object instanceof TimeSeries) || !super.equals(object)) {
        return false;
    }
    TimeSeries s = (TimeSeries) object;
    if (!ObjectUtilities.equal(getDomainDescription(), s.getDomainDescription())) {
        return false;
    }
    if (!ObjectUtilities.equal(getRangeDescription(), s.getRangeDescription())) {
        return false;
    }
    if (!getClass().equals(s.getClass())) {
        return false;
    }
    if (getMaximumItemAge() != s.getMaximumItemAge()) {
        return false;
    }
    if (getMaximumItemCount() != s.getMaximumItemCount()) {
        return false;
    }
    int count = getItemCount();
    if (count != s.getItemCount()) {
        return false;
    }
    for (int i = 0; i < count; i++) {
        if (!getDataItem(i).equals(s.getDataItem(i))) {
            return false;
        }
    }
    return true;
}","public void test0016() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    TimeSeries timeSeries1 = timeSeries0.createCopy(1, 1);
    timeSeries1.addOrUpdate((RegularTimePeriod) week0, (double) 33);
    boolean boolean0 = timeSeries1.equals(timeSeries0);
    assertFalse(boolean0);
}","/**
 * Tests the series for equality with an arbitrary object.
 *
 * @param object  the object to test against (<code>null</code> permitted).
 *
 * @return A boolean.
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test0027() throws Throwable {
    SerialDate serialDate0 = SerialDate.createInstance((int) (byte) 100);
    Class<TimeSeries> class0 = TimeSeries.class;
    TimeSeries timeSeries0 = new TimeSeries(serialDate0, class0);
    Year year0 = new Year();
    RegularTimePeriod regularTimePeriod0 = year0.next();
    timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) (-1));
    TimeSeries timeSeries1 = timeSeries0.createCopy(regularTimePeriod0, regularTimePeriod0);
    assertEquals(""Time"", timeSeries1.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test0028() throws Throwable {
    SerialDate serialDate0 = SerialDate.createInstance((int) (byte) 100);
    Class<TimeSeries> class0 = TimeSeries.class;
    TimeSeries timeSeries0 = new TimeSeries(serialDate0, class0);
    Year year0 = new Year();
    RegularTimePeriod regularTimePeriod0 = year0.next();
    timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) (-1));
    TimeSeries timeSeries1 = timeSeries0.createCopy(regularTimePeriod0, regularTimePeriod0);
    assertEquals(""Value"", timeSeries1.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test0029() throws Throwable {
    SerialDate serialDate0 = SerialDate.createInstance((int) (byte) 100);
    Class<TimeSeries> class0 = TimeSeries.class;
    TimeSeries timeSeries0 = new TimeSeries(serialDate0, class0);
    Year year0 = new Year();
    RegularTimePeriod regularTimePeriod0 = year0.next();
    timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) (-1));
    TimeSeries timeSeries1 = timeSeries0.createCopy(regularTimePeriod0, regularTimePeriod0);
    assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test00210() throws Throwable {
    SerialDate serialDate0 = SerialDate.createInstance((int) (byte) 100);
    Class<TimeSeries> class0 = TimeSeries.class;
    TimeSeries timeSeries0 = new TimeSeries(serialDate0, class0);
    Year year0 = new Year();
    RegularTimePeriod regularTimePeriod0 = year0.next();
    timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) (-1));
    TimeSeries timeSeries1 = timeSeries0.createCopy(regularTimePeriod0, regularTimePeriod0);
    assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public int getItemCount() {
    return this.data.size();
}","public void test00311() throws Throwable {
    SerialDate serialDate0 = SerialDate.createInstance(3);
    Class<TimeSeries> class0 = TimeSeries.class;
    TimeSeries timeSeries0 = new TimeSeries(serialDate0, class0);
    timeSeries0.setMaximumItemCount(1);
    Year year0 = new Year();
    timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) (-1));
    assertEquals(1, timeSeries0.getItemCount());
}","/**
 * Returns the number of items in the series.
 *
 * @return The item count.
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test00412() throws Throwable {
    Millisecond millisecond0 = new Millisecond();
    Class<Minute> class0 = Minute.class;
    TimeSeries timeSeries0 = new TimeSeries(millisecond0, """", ""]?FcP(On#"", class0);
    assertEquals(""]?FcP(On#"", timeSeries0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test00413() throws Throwable {
    Millisecond millisecond0 = new Millisecond();
    Class<Minute> class0 = Minute.class;
    TimeSeries timeSeries0 = new TimeSeries(millisecond0, """", ""]?FcP(On#"", class0);
    timeSeries0.setRangeDescription("""");
    assertEquals("""", timeSeries0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test00514() throws Throwable {
    Millisecond millisecond0 = new Millisecond();
    Class<Minute> class0 = Minute.class;
    TimeSeries timeSeries0 = new TimeSeries(millisecond0, """", ""]?FcP(On#"", class0);
    timeSeries0.setDomainDescription(""Invalid 'index': "");
    assertEquals(""Invalid 'index': "", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test00615() throws Throwable {
    Class<Year> class0 = Year.class;
    TimeSeries timeSeries0 = new TimeSeries("""", class0);
    Year year0 = new Year();
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, 0.0);
    timeSeries0.add(timeSeriesDataItem0);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test00616() throws Throwable {
    Class<Year> class0 = Year.class;
    TimeSeries timeSeries0 = new TimeSeries("""", class0);
    Year year0 = new Year();
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, 0.0);
    timeSeries0.add(timeSeriesDataItem0);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test00617() throws Throwable {
    Class<Year> class0 = Year.class;
    TimeSeries timeSeries0 = new TimeSeries("""", class0);
    Year year0 = new Year();
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, 0.0);
    timeSeries0.add(timeSeriesDataItem0);
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test00618() throws Throwable {
    Class<Year> class0 = Year.class;
    TimeSeries timeSeries0 = new TimeSeries("""", class0);
    Year year0 = new Year();
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, 0.0);
    timeSeries0.add(timeSeriesDataItem0);
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test00719() throws Throwable {
    MockDate mockDate0 = new MockDate();
    TimeZone timeZone0 = TimeZone.getDefault();
    Day day0 = new Day(mockDate0, timeZone0);
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.add((RegularTimePeriod) day0, 0.0, true);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test00720() throws Throwable {
    MockDate mockDate0 = new MockDate();
    TimeZone timeZone0 = TimeZone.getDefault();
    Day day0 = new Day(mockDate0, timeZone0);
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.add((RegularTimePeriod) day0, 0.0, true);
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test00721() throws Throwable {
    MockDate mockDate0 = new MockDate();
    TimeZone timeZone0 = TimeZone.getDefault();
    Day day0 = new Day(mockDate0, timeZone0);
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.add((RegularTimePeriod) day0, 0.0, true);
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test00722() throws Throwable {
    MockDate mockDate0 = new MockDate();
    TimeZone timeZone0 = TimeZone.getDefault();
    Day day0 = new Day(mockDate0, timeZone0);
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.add((RegularTimePeriod) day0, 0.0, true);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test00823() throws Throwable {
    SerialDate serialDate0 = SerialDate.createInstance((int) (byte) 100);
    Class<TimeSeries> class0 = TimeSeries.class;
    TimeSeries timeSeries0 = new TimeSeries(serialDate0, class0);
    Year year0 = new Year();
    timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) (-1));
    timeSeries0.update(0, (Number) 1);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test00824() throws Throwable {
    SerialDate serialDate0 = SerialDate.createInstance((int) (byte) 100);
    Class<TimeSeries> class0 = TimeSeries.class;
    TimeSeries timeSeries0 = new TimeSeries(serialDate0, class0);
    Year year0 = new Year();
    timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) (-1));
    timeSeries0.update(0, (Number) 1);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test00825() throws Throwable {
    SerialDate serialDate0 = SerialDate.createInstance((int) (byte) 100);
    Class<TimeSeries> class0 = TimeSeries.class;
    TimeSeries timeSeries0 = new TimeSeries(serialDate0, class0);
    Year year0 = new Year();
    timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) (-1));
    timeSeries0.update(0, (Number) 1);
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test00826() throws Throwable {
    SerialDate serialDate0 = SerialDate.createInstance((int) (byte) 100);
    Class<TimeSeries> class0 = TimeSeries.class;
    TimeSeries timeSeries0 = new TimeSeries(serialDate0, class0);
    Year year0 = new Year();
    timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) (-1));
    timeSeries0.update(0, (Number) 1);
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public boolean equals(Object object) {
    if (object == this) {
        return true;
    }
    if (!(object instanceof TimeSeries) || !super.equals(object)) {
        return false;
    }
    TimeSeries s = (TimeSeries) object;
    if (!ObjectUtilities.equal(getDomainDescription(), s.getDomainDescription())) {
        return false;
    }
    if (!ObjectUtilities.equal(getRangeDescription(), s.getRangeDescription())) {
        return false;
    }
    if (!getClass().equals(s.getClass())) {
        return false;
    }
    if (getMaximumItemAge() != s.getMaximumItemAge()) {
        return false;
    }
    if (getMaximumItemCount() != s.getMaximumItemCount()) {
        return false;
    }
    int count = getItemCount();
    if (count != s.getItemCount()) {
        return false;
    }
    for (int i = 0; i < count; i++) {
        if (!getDataItem(i).equals(s.getDataItem(i))) {
            return false;
        }
    }
    return true;
}","public void test00927() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    boolean boolean0 = timeSeries0.equals(timeSeries0);
    assertTrue(boolean0);
}","/**
 * Tests the series for equality with an arbitrary object.
 *
 * @param object  the object to test against (<code>null</code> permitted).
 *
 * @return A boolean.
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test00928() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    boolean boolean0 = timeSeries0.equals(timeSeries0);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test00929() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    boolean boolean0 = timeSeries0.equals(timeSeries0);
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test00930() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    boolean boolean0 = timeSeries0.equals(timeSeries0);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test00931() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    boolean boolean0 = timeSeries0.equals(timeSeries0);
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test01032() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) 1392409281320L);
    TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) minute0, (RegularTimePeriod) hour0);
    assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test01033() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) 1392409281320L);
    TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) minute0, (RegularTimePeriod) hour0);
    assertEquals(""Time"", timeSeries1.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test01034() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) 1392409281320L);
    TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) minute0, (RegularTimePeriod) hour0);
    assertEquals(""Value"", timeSeries1.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test01035() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) 1392409281320L);
    TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) minute0, (RegularTimePeriod) hour0);
    assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public int getItemCount() {
    return this.data.size();
}","public void test01036() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) 1392409281320L);
    TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) minute0, (RegularTimePeriod) hour0);
    assertEquals(0, timeSeries1.getItemCount());
}","/**
 * Returns the number of items in the series.
 *
 * @return The item count.
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test01137() throws Throwable {
    MockDate mockDate0 = new MockDate();
    Minute minute0 = new Minute(mockDate0);
    Day day0 = minute0.getDay();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.add((RegularTimePeriod) day0, (Number) 0);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test01138() throws Throwable {
    MockDate mockDate0 = new MockDate();
    Minute minute0 = new Minute(mockDate0);
    Day day0 = minute0.getDay();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.add((RegularTimePeriod) day0, (Number) 0);
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test01139() throws Throwable {
    MockDate mockDate0 = new MockDate();
    Minute minute0 = new Minute(mockDate0);
    Day day0 = minute0.getDay();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.add((RegularTimePeriod) day0, (Number) 0);
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test01140() throws Throwable {
    MockDate mockDate0 = new MockDate();
    Minute minute0 = new Minute(mockDate0);
    Day day0 = minute0.getDay();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.add((RegularTimePeriod) day0, (Number) 0);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test01241() throws Throwable {
    Year year0 = new Year();
    Week week0 = new Week(29, year0);
    Class<Week> class0 = Week.class;
    TimeSeries timeSeries0 = new TimeSeries(week0, """", ""xq}MLAs|G'WLFu,"", class0);
    timeSeries0.add((RegularTimePeriod) week0, (double) 53);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test01242() throws Throwable {
    Year year0 = new Year();
    Week week0 = new Week(29, year0);
    Class<Week> class0 = Week.class;
    TimeSeries timeSeries0 = new TimeSeries(week0, """", ""xq}MLAs|G'WLFu,"", class0);
    timeSeries0.add((RegularTimePeriod) week0, (double) 53);
    assertEquals(""xq}MLAs|G'WLFu,"", timeSeries0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test01243() throws Throwable {
    Year year0 = new Year();
    Week week0 = new Week(29, year0);
    Class<Week> class0 = Week.class;
    TimeSeries timeSeries0 = new TimeSeries(week0, """", ""xq}MLAs|G'WLFu,"", class0);
    timeSeries0.add((RegularTimePeriod) week0, (double) 53);
    assertEquals("""", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test01244() throws Throwable {
    Year year0 = new Year();
    Week week0 = new Week(29, year0);
    Class<Week> class0 = Week.class;
    TimeSeries timeSeries0 = new TimeSeries(week0, """", ""xq}MLAs|G'WLFu,"", class0);
    timeSeries0.add((RegularTimePeriod) week0, (double) 53);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public Number getValue(RegularTimePeriod period) {
    int index = getIndex(period);
    if (index >= 0) {
        return getValue(index);
    } else {
        return null;
    }
}","public void test01345() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (-1.0));
    Number number0 = timeSeries0.getValue((RegularTimePeriod) hour0);
    assertEquals((-1.0), number0);
}","/**
 * Returns the value for a time period.  If there is no data item with the
 * specified period, this method will return <code>null</code>.
 *
 * @param period  time period (<code>null</code> not permitted).
 *
 * @return The value (possibly <code>null</code>).
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test01346() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (-1.0));
    Number number0 = timeSeries0.getValue((RegularTimePeriod) hour0);
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test01347() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (-1.0));
    Number number0 = timeSeries0.getValue((RegularTimePeriod) hour0);
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test01349() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (-1.0));
    Number number0 = timeSeries0.getValue((RegularTimePeriod) hour0);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test01350() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (-1.0));
    Number number0 = timeSeries0.getValue((RegularTimePeriod) hour0);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test01451() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    BigInteger bigInteger0 = BigInteger.TEN;
    timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0, true);
    Number number0 = timeSeries0.getValue((RegularTimePeriod) day0);
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test01452() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    BigInteger bigInteger0 = BigInteger.TEN;
    timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0, true);
    Number number0 = timeSeries0.getValue((RegularTimePeriod) day0);
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public Number getValue(RegularTimePeriod period) {
    int index = getIndex(period);
    if (index >= 0) {
        return getValue(index);
    } else {
        return null;
    }
}","public void test01453() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    BigInteger bigInteger0 = BigInteger.TEN;
    timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0, true);
    Number number0 = timeSeries0.getValue((RegularTimePeriod) day0);
    assertNotNull(number0);
}","/**
 * Returns the value for a time period.  If there is no data item with the
 * specified period, this method will return <code>null</code>.
 *
 * @param period  time period (<code>null</code> not permitted).
 *
 * @return The value (possibly <code>null</code>).
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test01454() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    BigInteger bigInteger0 = BigInteger.TEN;
    timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0, true);
    Number number0 = timeSeries0.getValue((RegularTimePeriod) day0);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test01455() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    BigInteger bigInteger0 = BigInteger.TEN;
    timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0, true);
    Number number0 = timeSeries0.getValue((RegularTimePeriod) day0);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public Number getValue(RegularTimePeriod period) {
    int index = getIndex(period);
    if (index >= 0) {
        return getValue(index);
    } else {
        return null;
    }
}","public void test01556() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) 1392409281320L);
    Number number0 = timeSeries0.getValue((RegularTimePeriod) hour0);
    assertEquals(1.39240928132E12, number0);
}","/**
 * Returns the value for a time period.  If there is no data item with the
 * specified period, this method will return <code>null</code>.
 *
 * @param period  time period (<code>null</code> not permitted).
 *
 * @return The value (possibly <code>null</code>).
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test01557() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) 1392409281320L);
    Number number0 = timeSeries0.getValue((RegularTimePeriod) hour0);
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test01558() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) 1392409281320L);
    Number number0 = timeSeries0.getValue((RegularTimePeriod) hour0);
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test01559() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) 1392409281320L);
    Number number0 = timeSeries0.getValue((RegularTimePeriod) hour0);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test01560() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) 1392409281320L);
    Number number0 = timeSeries0.getValue((RegularTimePeriod) hour0);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test01662() throws Throwable {
    Minute minute0 = new Minute();
    TimeSeries timeSeries0 = new TimeSeries(minute0, ""java.lang.Class"", ""java.lang.Class"", (Class) null);
    timeSeries0.getTimePeriodClass();
    assertEquals(""java.lang.Class"", timeSeries0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test01663() throws Throwable {
    Minute minute0 = new Minute();
    TimeSeries timeSeries0 = new TimeSeries(minute0, ""java.lang.Class"", ""java.lang.Class"", (Class) null);
    timeSeries0.getTimePeriodClass();
    assertEquals(""java.lang.Class"", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test01664() throws Throwable {
    Minute minute0 = new Minute();
    TimeSeries timeSeries0 = new TimeSeries(minute0, ""java.lang.Class"", ""java.lang.Class"", (Class) null);
    timeSeries0.getTimePeriodClass();
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test01665() throws Throwable {
    Minute minute0 = new Minute();
    TimeSeries timeSeries0 = new TimeSeries(minute0, ""java.lang.Class"", ""java.lang.Class"", (Class) null);
    timeSeries0.getTimePeriodClass();
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test01766() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute(0, hour0);
    Second second0 = new Second(2883, minute0);
    Class<Object> class0 = Object.class;
    TimeSeries timeSeries0 = new TimeSeries(second0, class0);
    String string0 = timeSeries0.getRangeDescription();
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test01767() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute(0, hour0);
    Second second0 = new Second(2883, minute0);
    Class<Object> class0 = Object.class;
    TimeSeries timeSeries0 = new TimeSeries(second0, class0);
    String string0 = timeSeries0.getRangeDescription();
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test01768() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute(0, hour0);
    Second second0 = new Second(2883, minute0);
    Class<Object> class0 = Object.class;
    TimeSeries timeSeries0 = new TimeSeries(second0, class0);
    String string0 = timeSeries0.getRangeDescription();
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test01769() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute(0, hour0);
    Second second0 = new Second(2883, minute0);
    Class<Object> class0 = Object.class;
    TimeSeries timeSeries0 = new TimeSeries(second0, class0);
    String string0 = timeSeries0.getRangeDescription();
    assertEquals(""Value"", string0);
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test01870() throws Throwable {
    MockDate mockDate0 = new MockDate(4350L);
    Millisecond millisecond0 = new Millisecond(mockDate0);
    Class<Millisecond> class0 = Millisecond.class;
    TimeSeries timeSeries0 = new TimeSeries(millisecond0, ""Null 'range' argument."", """", class0);
    String string0 = timeSeries0.getRangeDescription();
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test01871() throws Throwable {
    MockDate mockDate0 = new MockDate(4350L);
    Millisecond millisecond0 = new Millisecond(mockDate0);
    Class<Millisecond> class0 = Millisecond.class;
    TimeSeries timeSeries0 = new TimeSeries(millisecond0, ""Null 'range' argument."", """", class0);
    String string0 = timeSeries0.getRangeDescription();
    assertEquals(""Null 'range' argument."", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test01872() throws Throwable {
    MockDate mockDate0 = new MockDate(4350L);
    Millisecond millisecond0 = new Millisecond(mockDate0);
    Class<Millisecond> class0 = Millisecond.class;
    TimeSeries timeSeries0 = new TimeSeries(millisecond0, ""Null 'range' argument."", """", class0);
    String string0 = timeSeries0.getRangeDescription();
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test01873() throws Throwable {
    MockDate mockDate0 = new MockDate(4350L);
    Millisecond millisecond0 = new Millisecond(mockDate0);
    Class<Millisecond> class0 = Millisecond.class;
    TimeSeries timeSeries0 = new TimeSeries(millisecond0, ""Null 'range' argument."", """", class0);
    String string0 = timeSeries0.getRangeDescription();
    assertEquals("""", string0);
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test01974() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    MockRandom mockRandom0 = new MockRandom();
    BigInteger bigInteger0 = BigInteger.probablePrime(264, mockRandom0);
    timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) bigInteger0);
    timeSeries0.getNextTimePeriod();
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test01975() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    MockRandom mockRandom0 = new MockRandom();
    BigInteger bigInteger0 = BigInteger.probablePrime(264, mockRandom0);
    timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) bigInteger0);
    timeSeries0.getNextTimePeriod();
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test01976() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    MockRandom mockRandom0 = new MockRandom();
    BigInteger bigInteger0 = BigInteger.probablePrime(264, mockRandom0);
    timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) bigInteger0);
    timeSeries0.getNextTimePeriod();
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test01977() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    MockRandom mockRandom0 = new MockRandom();
    BigInteger bigInteger0 = BigInteger.probablePrime(264, mockRandom0);
    timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) bigInteger0);
    timeSeries0.getNextTimePeriod();
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test02078() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test02079() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    timeSeries0.setMaximumItemAge(0);
    timeSeries0.getMaximumItemAge();
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test02180() throws Throwable {
    Quarter quarter0 = new Quarter();
    Class<Minute> class0 = Minute.class;
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""org.jfree.data.time.RegularTimePeriod"", ""org.jfree.data.time.RegularTimePeriod"", class0);
    timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (Number) 1);
    timeSeries0.getItemCount();
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test02181() throws Throwable {
    Quarter quarter0 = new Quarter();
    Class<Minute> class0 = Minute.class;
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""org.jfree.data.time.RegularTimePeriod"", ""org.jfree.data.time.RegularTimePeriod"", class0);
    timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (Number) 1);
    timeSeries0.getItemCount();
    assertEquals(""org.jfree.data.time.RegularTimePeriod"", timeSeries0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test02182() throws Throwable {
    Quarter quarter0 = new Quarter();
    Class<Minute> class0 = Minute.class;
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""org.jfree.data.time.RegularTimePeriod"", ""org.jfree.data.time.RegularTimePeriod"", class0);
    timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (Number) 1);
    timeSeries0.getItemCount();
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test02183() throws Throwable {
    Quarter quarter0 = new Quarter();
    Class<Minute> class0 = Minute.class;
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""org.jfree.data.time.RegularTimePeriod"", ""org.jfree.data.time.RegularTimePeriod"", class0);
    timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (Number) 1);
    timeSeries0.getItemCount();
    assertEquals(""org.jfree.data.time.RegularTimePeriod"", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test02284() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    MockRandom mockRandom0 = new MockRandom();
    BigInteger bigInteger0 = BigInteger.probablePrime(273, mockRandom0);
    timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) bigInteger0);
    timeSeries0.getIndex(fixedMillisecond0);
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test02285() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    MockRandom mockRandom0 = new MockRandom();
    BigInteger bigInteger0 = BigInteger.probablePrime(273, mockRandom0);
    timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) bigInteger0);
    timeSeries0.getIndex(fixedMillisecond0);
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test02286() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    MockRandom mockRandom0 = new MockRandom();
    BigInteger bigInteger0 = BigInteger.probablePrime(273, mockRandom0);
    timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) bigInteger0);
    timeSeries0.getIndex(fixedMillisecond0);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test02287() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    MockRandom mockRandom0 = new MockRandom();
    BigInteger bigInteger0 = BigInteger.probablePrime(273, mockRandom0);
    timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) bigInteger0);
    timeSeries0.getIndex(fixedMillisecond0);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test02388() throws Throwable {
    Year year0 = new Year();
    Class<FixedMillisecond> class0 = FixedMillisecond.class;
    TimeSeries timeSeries0 = new TimeSeries(year0, (String) null, (String) null, class0);
    String string0 = timeSeries0.getDomainDescription();
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test02389() throws Throwable {
    Year year0 = new Year();
    Class<FixedMillisecond> class0 = FixedMillisecond.class;
    TimeSeries timeSeries0 = new TimeSeries(year0, (String) null, (String) null, class0);
    String string0 = timeSeries0.getDomainDescription();
    assertNull(string0);
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test02390() throws Throwable {
    Year year0 = new Year();
    Class<FixedMillisecond> class0 = FixedMillisecond.class;
    TimeSeries timeSeries0 = new TimeSeries(year0, (String) null, (String) null, class0);
    String string0 = timeSeries0.getDomainDescription();
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test02491() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    timeSeries0.addOrUpdate((RegularTimePeriod) week0, (double) 1);
    timeSeries0.getDataItem(0);
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test02492() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    timeSeries0.addOrUpdate((RegularTimePeriod) week0, (double) 1);
    timeSeries0.getDataItem(0);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test02493() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    timeSeries0.addOrUpdate((RegularTimePeriod) week0, (double) 1);
    timeSeries0.getDataItem(0);
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test02494() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    timeSeries0.addOrUpdate((RegularTimePeriod) week0, (double) 1);
    timeSeries0.getDataItem(0);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test02595() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    timeSeries0.setNotify(false);
    TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) fixedMillisecond0, (RegularTimePeriod) fixedMillisecond0);
    assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test02596() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    timeSeries0.setNotify(false);
    TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) fixedMillisecond0, (RegularTimePeriod) fixedMillisecond0);
    assertEquals(""Value"", timeSeries1.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test02597() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    timeSeries0.setNotify(false);
    TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) fixedMillisecond0, (RegularTimePeriod) fixedMillisecond0);
    assertEquals(""Time"", timeSeries1.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test02598() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    timeSeries0.setNotify(false);
    TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) fixedMillisecond0, (RegularTimePeriod) fixedMillisecond0);
    assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test02699() throws Throwable {
    Minute minute0 = new Minute();
    TimeSeries timeSeries0 = new TimeSeries(minute0);
    Hour hour0 = minute0.getHour();
    timeSeries0.setMaximumItemCount(0);
    timeSeries0.createCopy((RegularTimePeriod) minute0, (RegularTimePeriod) hour0);
    assertEquals(0, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test027100() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test027101() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.setMaximumItemAge(0L);
    timeSeries0.createCopy((RegularTimePeriod) day0, (RegularTimePeriod) day0);
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test028102() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) 1392409281320L);
    timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (-1.0));
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test028103() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) 1392409281320L);
    timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (-1.0));
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test028104() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) 1392409281320L);
    timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (-1.0));
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test028105() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) 1392409281320L);
    timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (-1.0));
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public void update(RegularTimePeriod period, Number value) {
    TimeSeriesDataItem temp = new TimeSeriesDataItem(period, value);
    int index = Collections.binarySearch(this.data, temp);
    if (index >= 0) {
        TimeSeriesDataItem pair = (TimeSeriesDataItem) this.data.get(index);
        pair.setValue(value);
        fireSeriesChanged();
    } else {
        throw new SeriesException(""TimeSeries.update(TimePeriod, Number):  period does not exist."");
    }
}","public void test029106() throws Throwable {
    Minute minute0 = new Minute();
    Class<String> class0 = String.class;
    TimeSeries timeSeries0 = new TimeSeries(minute0, ""java.lang.Class"", ""java.lang.Class"", class0);
    // Undeclared exception!
    try {
        timeSeries0.update((RegularTimePeriod) null, (Number) 59);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'period' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeriesDataItem"", e);
    }
}","/**
 * Updates (changes) the value for a time period.  Throws a
 * {@link SeriesException} if the period does not exist.
 *
 * @param period  the period (<code>null</code> not permitted).
 * @param value  the value (<code>null</code> permitted).
 */"
"public void update(int index, Number value) {
    TimeSeriesDataItem item = getDataItem(index);
    item.setValue(value);
    fireSeriesChanged();
}","public void test030107() throws Throwable {
    Second second0 = new Second();
    Class<Second> class0 = Second.class;
    TimeSeries timeSeries0 = new TimeSeries(second0, ""Null 'start' argument."", """", class0);
    // Undeclared exception!
    try {
        timeSeries0.update(59, (Number) 59);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 59, Size: 0
        //
        verifyException(""java.util.ArrayList"", e);
    }
}","/**
 * Updates (changes) the value of a data item.
 *
 * @param index  the index of the data item.
 * @param value  the new value (<code>null</code> permitted).
 */"
"public void setDomainDescription(String description) {
    String old = this.domain;
    this.domain = description;
    firePropertyChange(""Domain"", old, description);
}","public void test031108() throws Throwable {
    Minute minute0 = new Minute();
    TimeSeries timeSeries0 = new TimeSeries(minute0);
    MetalComboBoxUI metalComboBoxUI0 = new MetalComboBoxUI();
    PropertyChangeListener propertyChangeListener0 = metalComboBoxUI0.createPropertyChangeListener();
    timeSeries0.addPropertyChangeListener(propertyChangeListener0);
    // Undeclared exception!
    try {
        timeSeries0.setDomainDescription(""FXx>Zd5FG:E_0INv"");
        fail(""Expecting exception: ClassCastException"");
    } catch (ClassCastException e) {
        //
        // org.jfree.data.time.TimeSeries cannot be cast to javax.swing.JComboBox
        //
        verifyException(""javax.swing.plaf.basic.BasicComboBoxUI$Handler"", e);
    }
}","/**
 * Sets the domain description and sends a <code>PropertyChangeEvent</code>
 * (with the property name <code>Domain</code>) to all registered
 * property change listeners.
 *
 * @param description  the description (<code>null</code> permitted).
 *
 * @see #getDomainDescription()
 */"
"public void removeAgedItems(long latest, boolean notify) {
    // find the serial index of the period specified by 'latest'
    long index = Long.MAX_VALUE;
    try {
        Method m = RegularTimePeriod.class.getDeclaredMethod(""createInstance"", new Class[] { Class.class, Date.class, TimeZone.class });
        RegularTimePeriod newest = (RegularTimePeriod) m.invoke(this.timePeriodClass, new Object[] { this.timePeriodClass, new Date(latest), TimeZone.getDefault() });
        index = newest.getSerialIndex();
    } catch (NoSuchMethodException e) {
        e.printStackTrace();
    } catch (IllegalAccessException e) {
        e.printStackTrace();
    } catch (InvocationTargetException e) {
        e.printStackTrace();
    }
    // check if there are any values earlier than specified by the history
    // count...
    boolean removed = false;
    while (getItemCount() > 0 && (index - getTimePeriod(0).getSerialIndex()) > this.maximumItemAge) {
        this.data.remove(0);
        removed = true;
    }
    if (removed && notify) {
        fireSeriesChanged();
    }
}","public void test032109() throws Throwable {
    XYDataItem xYDataItem0 = new XYDataItem(0.0, 0.0);
    Class<Integer> class0 = Integer.class;
    TimeSeries timeSeries0 = new TimeSeries(xYDataItem0, class0);
    // Undeclared exception!
    try {
        timeSeries0.removeAgedItems((-3466L), true);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}","/**
 * Age items in the series.  Ensure that the timespan from the supplied
 * time to the oldest record in the series does not exceed history count.
 * oldest items will be removed if required.
 *
 * @param latest  the time to be compared against when aging data
 *     (specified in milliseconds).
 * @param notify  controls whether or not a {@link SeriesChangeEvent} is
 *                sent to registered listeners IF any items are removed.
 */"
"public Number getValue(int index) {
    return getDataItem(index).getValue();
}","public void test033110() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    // Undeclared exception!
    try {
        timeSeries0.getValue((-260));
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * Returns the value at the specified index.
 *
 * @param index  index of a value.
 *
 * @return The value (possibly <code>null</code>).
 */"
"public Collection getTimePeriodsUniqueToOtherSeries(TimeSeries series) {
    Collection result = new java.util.ArrayList();
    for (int i = 0; i < series.getItemCount(); i++) {
        RegularTimePeriod period = series.getTimePeriod(i);
        int index = getIndex(period);
        if (index < 0) {
            result.add(period);
        }
    }
    return result;
}","public void test034111() throws Throwable {
    Year year0 = new Year();
    TimeSeries timeSeries0 = new TimeSeries(year0);
    // Undeclared exception!
    try {
        timeSeries0.getTimePeriodsUniqueToOtherSeries((TimeSeries) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}","/**
 * Returns a collection of time periods in the specified series, but not in
 * this series, and therefore unique to the specified series.
 *
 * @param series  the series to check against this one.
 *
 * @return The unique time periods.
 */"
"public RegularTimePeriod getTimePeriod(int index) {
    return getDataItem(index).getPeriod();
}","public void test035112() throws Throwable {
    MockDate mockDate0 = new MockDate(3, 3, (-746), (-746), (-746));
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    Week week0 = new Week(mockDate0, timeZone0, locale0);
    Class<XYDatasetTableModel> class0 = XYDatasetTableModel.class;
    TimeSeries timeSeries0 = new TimeSeries(week0, class0);
    // Undeclared exception!
    try {
        timeSeries0.getTimePeriod(3673);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 3673, Size: 0
        //
        verifyException(""java.util.ArrayList"", e);
    }
}","/**
 * Returns the time period at the specified index.
 *
 * @param index  the index of the data item.
 *
 * @return The time period.
 */"
"public RegularTimePeriod getNextTimePeriod() {
    RegularTimePeriod last = getTimePeriod(getItemCount() - 1);
    return last.next();
}","public void test036113() throws Throwable {
    SerialDate serialDate0 = SerialDate.createInstance((int) (byte) 100);
    Class<TimeSeries> class0 = TimeSeries.class;
    TimeSeries timeSeries0 = new TimeSeries(serialDate0, class0);
    LinkedList<TimeSeries> linkedList0 = new LinkedList<TimeSeries>();
    timeSeries0.data = (List) linkedList0;
    // Undeclared exception!
    try {
        timeSeries0.getNextTimePeriod();
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: -1, Size: 0
        //
        verifyException(""java.util.LinkedList"", e);
    }
}","/**
 * Returns a time period that would be the next in sequence on the end of
 * the time series.
 *
 * @return The next time period.
 */"
"public RegularTimePeriod getNextTimePeriod() {
    RegularTimePeriod last = getTimePeriod(getItemCount() - 1);
    return last.next();
}","public void test037114() throws Throwable {
    SerialDate serialDate0 = SerialDate.createInstance((int) (byte) 100);
    Class<TimeSeries> class0 = TimeSeries.class;
    TimeSeries timeSeries0 = new TimeSeries(serialDate0, class0);
    LinkedList<TimeSeries> linkedList0 = new LinkedList<TimeSeries>();
    timeSeries0.data = (List) linkedList0;
    linkedList0.add(timeSeries0);
    // Undeclared exception!
    try {
        timeSeries0.getNextTimePeriod();
        fail(""Expecting exception: ClassCastException"");
    } catch (ClassCastException e) {
        //
        // org.jfree.data.time.TimeSeries cannot be cast to org.jfree.data.time.TimeSeriesDataItem
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}","/**
 * Returns a time period that would be the next in sequence on the end of
 * the time series.
 *
 * @return The next time period.
 */"
"public TimeSeriesDataItem getDataItem(RegularTimePeriod period) {
    int index = getIndex(period);
    if (index >= 0) {
        return (TimeSeriesDataItem) this.data.get(index);
    } else {
        return null;
    }
}","public void test038115() throws Throwable {
    Year year0 = new Year();
    Class<Hour> class0 = Hour.class;
    TimeSeries timeSeries0 = new TimeSeries(year0, (String) null, (String) null, class0);
    // Undeclared exception!
    try {
        timeSeries0.getDataItem((RegularTimePeriod) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'period' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}","/**
 * Returns the data item for a specific period.
 *
 * @param period  the period of interest (<code>null</code> not allowed).
 *
 * @return The data item matching the specified period (or
 *         <code>null</code> if there is no match).
 *
 * @see #getDataItem(int)
 */"
"public TimeSeriesDataItem getDataItem(int index) {
    return (TimeSeriesDataItem) this.data.get(index);
}","public void test039116() throws Throwable {
    MockDate mockDate0 = new MockDate();
    TimeZone timeZone0 = TimeZone.getDefault();
    Day day0 = new Day(mockDate0, timeZone0);
    TimeSeries timeSeries0 = new TimeSeries(day0);
    // Undeclared exception!
    try {
        timeSeries0.getDataItem((-1562));
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * Returns a data item for the series.
 *
 * @param index  the item index (zero-based).
 *
 * @return The data item.
 *
 * @see #getDataItem(RegularTimePeriod)
 */"
"public void delete(RegularTimePeriod period) {
    int index = getIndex(period);
    if (index >= 0) {
        this.data.remove(index);
        fireSeriesChanged();
    }
}","public void test040117() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    // Undeclared exception!
    try {
        timeSeries0.delete((RegularTimePeriod) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'period' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}","/**
 * Deletes the data item for the given time period and sends a
 * {@link SeriesChangeEvent} to all registered listeners.  If there is no
 * item with the specified time period, this method does nothing.
 *
 * @param period  the period of the item to delete (<code>null</code> not
 *                permitted).
 */"
"public void delete(int start, int end) {
    if (end < start) {
        throw new IllegalArgumentException(""Requires start <= end."");
    }
    for (int i = 0; i <= (end - start); i++) {
        this.data.remove(start);
    }
    fireSeriesChanged();
}","public void test041118() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.data = null;
    // Undeclared exception!
    try {
        timeSeries0.delete((-1461), 999);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}","/**
 * Deletes data from start until end index (end inclusive).
 *
 * @param start  the index of the first period to delete.
 * @param end  the index of the last period to delete.
 */"
"public void delete(int start, int end) {
    if (end < start) {
        throw new IllegalArgumentException(""Requires start <= end."");
    }
    for (int i = 0; i <= (end - start); i++) {
        this.data.remove(start);
    }
    fireSeriesChanged();
}","public void test042119() throws Throwable {
    Minute minute0 = new Minute();
    Class<String> class0 = String.class;
    TimeSeries timeSeries0 = new TimeSeries(minute0, ""java.lang.Class"", ""org.jfree.data.time.FixedMillisecond"", class0);
    // Undeclared exception!
    try {
        timeSeries0.delete(2, 59);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 2, Size: 0
        //
        verifyException(""java.util.ArrayList"", e);
    }
}","/**
 * Deletes data from start until end index (end inclusive).
 *
 * @param start  the index of the first period to delete.
 * @param end  the index of the last period to delete.
 */"
"public TimeSeriesDataItem addOrUpdate(RegularTimePeriod period, Number value) {
    if (period == null) {
        throw new IllegalArgumentException(""Null 'period' argument."");
    }
    TimeSeriesDataItem overwritten = null;
    TimeSeriesDataItem key = new TimeSeriesDataItem(period, value);
    int index = Collections.binarySearch(this.data, key);
    if (index >= 0) {
        TimeSeriesDataItem existing = (TimeSeriesDataItem) this.data.get(index);
        overwritten = (TimeSeriesDataItem) existing.clone();
        existing.setValue(value);
        // remove old items if necessary, but
        removeAgedItems(false);
        // don't notify anyone, because that
        // happens next anyway...
        fireSeriesChanged();
    } else {
        this.data.add(-index - 1, new TimeSeriesDataItem(period, value));
        // check if this addition will exceed the maximum item count...
        if (getItemCount() > this.maximumItemCount) {
            this.data.remove(0);
        }
        // remove old items if necessary, but
        removeAgedItems(false);
        // don't notify anyone, because that
        // happens next anyway...
        fireSeriesChanged();
    }
    return overwritten;
}","public void test043120() throws Throwable {
    SerialDate serialDate0 = SerialDate.createInstance(3);
    Class<TimeSeries> class0 = TimeSeries.class;
    TimeSeries timeSeries0 = new TimeSeries(serialDate0, class0);
    List list0 = timeSeries0.getItems();
    timeSeries0.data = list0;
    Year year0 = new Year();
    // Undeclared exception!
    try {
        timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) (-1));
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.Collections$UnmodifiableList"", e);
    }
}","/**
 * Adds or updates an item in the times series and sends a
 * {@link org.jfree.data.general.SeriesChangeEvent} to all registered
 * listeners.
 *
 * @param period  the time period to add/update (<code>null</code> not
 *                permitted).
 * @param value  the new value (<code>null</code> permitted).
 *
 * @return A copy of the overwritten data item, or <code>null</code> if no
 *         item was overwritten.
 */"
"public TimeSeriesDataItem addOrUpdate(RegularTimePeriod period, Number value) {
    if (period == null) {
        throw new IllegalArgumentException(""Null 'period' argument."");
    }
    TimeSeriesDataItem overwritten = null;
    TimeSeriesDataItem key = new TimeSeriesDataItem(period, value);
    int index = Collections.binarySearch(this.data, key);
    if (index >= 0) {
        TimeSeriesDataItem existing = (TimeSeriesDataItem) this.data.get(index);
        overwritten = (TimeSeriesDataItem) existing.clone();
        existing.setValue(value);
        // remove old items if necessary, but
        removeAgedItems(false);
        // don't notify anyone, because that
        // happens next anyway...
        fireSeriesChanged();
    } else {
        this.data.add(-index - 1, new TimeSeriesDataItem(period, value));
        // check if this addition will exceed the maximum item count...
        if (getItemCount() > this.maximumItemCount) {
            this.data.remove(0);
        }
        // remove old items if necessary, but
        removeAgedItems(false);
        // don't notify anyone, because that
        // happens next anyway...
        fireSeriesChanged();
    }
    return overwritten;
}","public void test044121() throws Throwable {
    SerialDate serialDate0 = SerialDate.createInstance((int) (byte) 100);
    Class<TimeSeries> class0 = TimeSeries.class;
    TimeSeries timeSeries0 = new TimeSeries(serialDate0, class0);
    LinkedList<TimeSeries> linkedList0 = new LinkedList<TimeSeries>();
    timeSeries0.data = (List) linkedList0;
    linkedList0.add(timeSeries0);
    Year year0 = new Year();
    // Undeclared exception!
    try {
        timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) (-1));
        fail(""Expecting exception: ClassCastException"");
    } catch (ClassCastException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * Adds or updates an item in the times series and sends a
 * {@link org.jfree.data.general.SeriesChangeEvent} to all registered
 * listeners.
 *
 * @param period  the time period to add/update (<code>null</code> not
 *                permitted).
 * @param value  the new value (<code>null</code> permitted).
 *
 * @return A copy of the overwritten data item, or <code>null</code> if no
 *         item was overwritten.
 */"
"public TimeSeries addAndOrUpdate(TimeSeries series) {
    TimeSeries overwritten = new TimeSeries(""Overwritten values from: "" + getKey(), series.getTimePeriodClass());
    for (int i = 0; i < series.getItemCount(); i++) {
        TimeSeriesDataItem item = series.getDataItem(i);
        TimeSeriesDataItem oldItem = addOrUpdate(item.getPeriod(), item.getValue());
        if (oldItem != null) {
            overwritten.add(oldItem);
        }
    }
    return overwritten;
}","public void test045122() throws Throwable {
    Year year0 = new Year();
    Week week0 = new Week(9999, year0);
    TimeSeries timeSeries0 = new TimeSeries(week0);
    // Undeclared exception!
    try {
        timeSeries0.addAndOrUpdate((TimeSeries) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}","/**
 * Adds or updates data from one series to another.  Returns another series
 * containing the values that were overwritten.
 *
 * @param series  the series to merge with this.
 *
 * @return A series containing the values that were overwritten.
 */"
"public void add(TimeSeriesDataItem item) {
    add(item, true);
}","public void test046123() throws Throwable {
    Hour hour0 = new Hour();
    Class<Minute> class0 = Minute.class;
    TimeSeries timeSeries0 = new TimeSeries(hour0, class0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) hour0, (Number) 0);
    // Undeclared exception!
    try {
        timeSeries0.add(timeSeriesDataItem0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // You are trying to add data where the time period class is org.jfree.data.time.Hour, but the TimeSeries is expecting an instance of org.jfree.data.time.Minute.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}","/**
 * Adds a data item to the series and sends a
 * {@link org.jfree.data.general.SeriesChangeEvent} to all registered
 * listeners.
 *
 * @param item  the (timeperiod, value) pair (<code>null</code> not
 *              permitted).
 */"
"public void add(RegularTimePeriod period, Number value, boolean notify) {
    // defer argument checking...
    TimeSeriesDataItem item = new TimeSeriesDataItem(period, value);
    add(item, notify);
}","public void test047124() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    // Undeclared exception!
    try {
        timeSeries0.add((RegularTimePeriod) week0, (Number) 53, true);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // You are trying to add data where the time period class is org.jfree.data.time.Week, but the TimeSeries is expecting an instance of org.jfree.data.time.Day.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}","/**
 * Adds a new data item to the series and sends
 * a {@link org.jfree.data.general.SeriesChangeEvent} to all registered
 * listeners.
 *
 * @param period  the time period (<code>null</code> not permitted).
 * @param value  the value (<code>null</code> permitted).
 * @param notify  notify listeners?
 */"
"public void add(RegularTimePeriod period, Number value, boolean notify) {
    // defer argument checking...
    TimeSeriesDataItem item = new TimeSeriesDataItem(period, value);
    add(item, notify);
}","public void test048125() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    BigInteger bigInteger0 = BigInteger.TEN;
    timeSeries0.data = null;
    // Undeclared exception!
    try {
        timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0, true);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * Adds a new data item to the series and sends
 * a {@link org.jfree.data.general.SeriesChangeEvent} to all registered
 * listeners.
 *
 * @param period  the time period (<code>null</code> not permitted).
 * @param value  the value (<code>null</code> permitted).
 * @param notify  notify listeners?
 */"
"public void add(RegularTimePeriod period, Number value, boolean notify) {
    // defer argument checking...
    TimeSeriesDataItem item = new TimeSeriesDataItem(period, value);
    add(item, notify);
}","public void test049126() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    // Undeclared exception!
    try {
        timeSeries0.add((RegularTimePeriod) null, (Number) null, true);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'period' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeriesDataItem"", e);
    }
}","/**
 * Adds a new data item to the series and sends
 * a {@link org.jfree.data.general.SeriesChangeEvent} to all registered
 * listeners.
 *
 * @param period  the time period (<code>null</code> not permitted).
 * @param value  the value (<code>null</code> permitted).
 * @param notify  notify listeners?
 */"
"public void add(RegularTimePeriod period, double value, boolean notify) {
    // defer argument checking...
    TimeSeriesDataItem item = new TimeSeriesDataItem(period, value);
    add(item, notify);
}","public void test050127() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    // Undeclared exception!
    try {
        timeSeries0.add((RegularTimePeriod) null, (-1.0), true);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'period' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeriesDataItem"", e);
    }
}","/**
 * Adds a new data item to the series and sends a {@link SeriesChangeEvent}
 * to all registered listeners.
 *
 * @param period  the time period (<code>null</code> not permitted).
 * @param value  the value.
 * @param notify  notify listeners?
 */"
"public void add(RegularTimePeriod period, double value) {
    // defer argument checking...
    add(period, value, true);
}","public void test051128() throws Throwable {
    Minute minute0 = new Minute();
    Class<String> class0 = String.class;
    TimeSeries timeSeries0 = new TimeSeries(minute0, ""java.lang.Class"", ""java.lang.Class"", class0);
    // Undeclared exception!
    try {
        timeSeries0.add((RegularTimePeriod) minute0, (-2.147483648E9));
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // You are trying to add data where the time period class is org.jfree.data.time.Minute, but the TimeSeries is expecting an instance of java.lang.String.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}","/**
 * Adds a new data item to the series and sends a {@link SeriesChangeEvent}
 * to all registered listeners.
 *
 * @param period  the time period (<code>null</code> not permitted).
 * @param value  the value.
 */"
"public void add(RegularTimePeriod period, double value) {
    // defer argument checking...
    add(period, value, true);
}","public void test052129() throws Throwable {
    Minute minute0 = new Minute();
    TimeSeries timeSeries0 = new TimeSeries(minute0, ""java.lang.Class"", ""java.lang.Class"", (Class) null);
    // Undeclared exception!
    try {
        timeSeries0.add((RegularTimePeriod) minute0, (double) 59);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * Adds a new data item to the series and sends a {@link SeriesChangeEvent}
 * to all registered listeners.
 *
 * @param period  the time period (<code>null</code> not permitted).
 * @param value  the value.
 */"
"public TimeSeries(Comparable name, String domain, String range, Class timePeriodClass) {
    super(name);
    this.domain = domain;
    this.range = range;
    this.timePeriodClass = timePeriodClass;
    this.data = new java.util.ArrayList();
    this.maximumItemCount = Integer.MAX_VALUE;
    this.maximumItemAge = Long.MAX_VALUE;
}","public void test053130() throws Throwable {
    Class<Minute> class0 = Minute.class;
    TimeSeries timeSeries0 = null;
    try {
        timeSeries0 = new TimeSeries((Comparable) null, """", """", class0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'key' argument.
        //
        verifyException(""org.jfree.data.general.Series"", e);
    }
}","/**
 * Creates a new time series that contains no data.
 * <P>
 * Descriptions can be specified for the domain and range.  One situation
 * where this is helpful is when generating a chart for the time series -
 * axis labels can be taken from the domain and range description.
 *
 * @param name  the name of the series (<code>null</code> not permitted).
 * @param domain  the domain description (<code>null</code> permitted).
 * @param range  the range description (<code>null</code> permitted).
 * @param timePeriodClass  the type of time period (<code>null</code> not
 *                         permitted).
 */"
"public TimeSeries(Comparable name, Class timePeriodClass) {
    this(name, DEFAULT_DOMAIN_DESCRIPTION, DEFAULT_RANGE_DESCRIPTION, timePeriodClass);
}","public void test054131() throws Throwable {
    Class<Integer> class0 = Integer.class;
    TimeSeries timeSeries0 = null;
    try {
        timeSeries0 = new TimeSeries((Comparable) null, class0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'key' argument.
        //
        verifyException(""org.jfree.data.general.Series"", e);
    }
}","/**
 * Creates a new (empty) time series with the specified name and class
 * of {@link RegularTimePeriod}.
 *
 * @param name  the series name (<code>null</code> not permitted).
 * @param timePeriodClass  the type of time period (<code>null</code> not
 *                         permitted).
 */"
"public TimeSeries(Comparable name) {
    this(name, DEFAULT_DOMAIN_DESCRIPTION, DEFAULT_RANGE_DESCRIPTION, Day.class);
}","public void test055132() throws Throwable {
    TimeSeries timeSeries0 = null;
    try {
        timeSeries0 = new TimeSeries((Comparable) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'key' argument.
        //
        verifyException(""org.jfree.data.general.Series"", e);
    }
}","/**
 * Creates a new (empty) time series.  By default, a daily time series is
 * created.  Use one of the other constructors if you require a different
 * time period.
 *
 * @param name  the series name (<code>null</code> not permitted).
 */"
"public TimeSeries createCopy(int start, int end) throws CloneNotSupportedException {
    if (start < 0) {
        throw new IllegalArgumentException(""Requires start >= 0."");
    }
    if (end < start) {
        throw new IllegalArgumentException(""Requires start <= end."");
    }
    TimeSeries copy = (TimeSeries) super.clone();
    copy.data = new java.util.ArrayList();
    if (this.data.size() > 0) {
        for (int index = start; index <= end; index++) {
            TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(index);
            TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();
            try {
                copy.add(clone);
            } catch (SeriesException e) {
                e.printStackTrace();
            }
        }
    }
    return copy;
}","public void test056133() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    BigInteger bigInteger0 = BigInteger.ZERO;
    timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0, true);
    // Undeclared exception!
    try {
        timeSeries0.createCopy(2, 29);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 2, Size: 1
        //
        verifyException(""java.util.ArrayList"", e);
    }
}","/**
 * Creates a new timeseries by copying a subset of the data in this time
 * series.
 *
 * @param start  the index of the first time period to copy.
 * @param end  the index of the last time period to copy.
 *
 * @return A series containing a copy of this times series from start until
 *         end.
 *
 * @throws CloneNotSupportedException if there is a cloning problem.
 */"
"public void delete(int start, int end) {
    if (end < start) {
        throw new IllegalArgumentException(""Requires start <= end."");
    }
    for (int i = 0; i <= (end - start); i++) {
        this.data.remove(start);
    }
    fireSeriesChanged();
}","public void test057134() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    // Undeclared exception!
    try {
        timeSeries0.delete((-1500), (-1500));
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * Deletes data from start until end index (end inclusive).
 *
 * @param start  the index of the first period to delete.
 * @param end  the index of the last period to delete.
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test058135() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    timeSeries0.removeAgedItems(false);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test058136() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    timeSeries0.removeAgedItems(false);
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test058137() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    timeSeries0.removeAgedItems(false);
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test058138() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    timeSeries0.removeAgedItems(false);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test059139() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    BigInteger bigInteger0 = BigInteger.ZERO;
    timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0, true);
    timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) bigInteger0);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test059140() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    BigInteger bigInteger0 = BigInteger.ZERO;
    timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0, true);
    timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) bigInteger0);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test059141() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    BigInteger bigInteger0 = BigInteger.ZERO;
    timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0, true);
    timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) bigInteger0);
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test059142() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    BigInteger bigInteger0 = BigInteger.ZERO;
    timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0, true);
    timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) bigInteger0);
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test060143() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    BigInteger bigInteger0 = BigInteger.ZERO;
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(day0, bigInteger0);
    timeSeries0.add(timeSeriesDataItem0, true);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test060144() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    BigInteger bigInteger0 = BigInteger.ZERO;
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(day0, bigInteger0);
    timeSeries0.add(timeSeriesDataItem0, true);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test060145() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    BigInteger bigInteger0 = BigInteger.ZERO;
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(day0, bigInteger0);
    timeSeries0.add(timeSeriesDataItem0, true);
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test060146() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    BigInteger bigInteger0 = BigInteger.ZERO;
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(day0, bigInteger0);
    timeSeries0.add(timeSeriesDataItem0, true);
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public void add(TimeSeriesDataItem item, boolean notify) {
    if (item == null) {
        throw new IllegalArgumentException(""Null 'item' argument."");
    }
    if (!item.getPeriod().getClass().equals(this.timePeriodClass)) {
        StringBuffer b = new StringBuffer();
        b.append(""You are trying to add data where the time period class "");
        b.append(""is "");
        b.append(item.getPeriod().getClass().getName());
        b.append("", but the TimeSeries is expecting an instance of "");
        b.append(this.timePeriodClass.getName());
        b.append(""."");
        throw new SeriesException(b.toString());
    }
    // make the change (if it's not a duplicate time period)...
    boolean added = false;
    int count = getItemCount();
    if (count == 0) {
        this.data.add(item);
        added = true;
    } else {
        RegularTimePeriod last = getTimePeriod(getItemCount() - 1);
        if (item.getPeriod().compareTo(last) > 0) {
            this.data.add(item);
            added = true;
        } else {
            int index = Collections.binarySearch(this.data, item);
            if (index < 0) {
                this.data.add(-index - 1, item);
                added = true;
            } else {
                StringBuffer b = new StringBuffer();
                b.append(""You are attempting to add an observation for "");
                b.append(""the time period "");
                b.append(item.getPeriod().toString());
                b.append("" but the series already contains an observation"");
                b.append("" for that time period. Duplicates are not "");
                b.append(""permitted.  Try using the addOrUpdate() method."");
                throw new SeriesException(b.toString());
            }
        }
    }
    if (added) {
        // check if this addition will exceed the maximum item count...
        if (getItemCount() > this.maximumItemCount) {
            this.data.remove(0);
        }
        // remove old items if necessary, but
        removeAgedItems(false);
        // don't notify anyone, because that
        // happens next anyway...
        if (notify) {
            fireSeriesChanged();
        }
    }
}","public void test061147() throws Throwable {
    MockDate mockDate0 = new MockDate(0L);
    Millisecond millisecond0 = new Millisecond(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(millisecond0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(millisecond0, (Number) null);
    // Undeclared exception!
    try {
        timeSeries0.add(timeSeriesDataItem0, false);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // You are trying to add data where the time period class is org.jfree.data.time.Millisecond, but the TimeSeries is expecting an instance of org.jfree.data.time.Day.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}","/**
 * Adds a data item to the series and sends a
 * {@link org.jfree.data.general.SeriesChangeEvent} to all registered
 * listeners.
 *
 * @param item  the (timeperiod, value) pair (<code>null</code> not
 *              permitted).
 * @param notify  notify listeners?
 */"
"public void add(TimeSeriesDataItem item, boolean notify) {
    if (item == null) {
        throw new IllegalArgumentException(""Null 'item' argument."");
    }
    if (!item.getPeriod().getClass().equals(this.timePeriodClass)) {
        StringBuffer b = new StringBuffer();
        b.append(""You are trying to add data where the time period class "");
        b.append(""is "");
        b.append(item.getPeriod().getClass().getName());
        b.append("", but the TimeSeries is expecting an instance of "");
        b.append(this.timePeriodClass.getName());
        b.append(""."");
        throw new SeriesException(b.toString());
    }
    // make the change (if it's not a duplicate time period)...
    boolean added = false;
    int count = getItemCount();
    if (count == 0) {
        this.data.add(item);
        added = true;
    } else {
        RegularTimePeriod last = getTimePeriod(getItemCount() - 1);
        if (item.getPeriod().compareTo(last) > 0) {
            this.data.add(item);
            added = true;
        } else {
            int index = Collections.binarySearch(this.data, item);
            if (index < 0) {
                this.data.add(-index - 1, item);
                added = true;
            } else {
                StringBuffer b = new StringBuffer();
                b.append(""You are attempting to add an observation for "");
                b.append(""the time period "");
                b.append(item.getPeriod().toString());
                b.append("" but the series already contains an observation"");
                b.append("" for that time period. Duplicates are not "");
                b.append(""permitted.  Try using the addOrUpdate() method."");
                throw new SeriesException(b.toString());
            }
        }
    }
    if (added) {
        // check if this addition will exceed the maximum item count...
        if (getItemCount() > this.maximumItemCount) {
            this.data.remove(0);
        }
        // remove old items if necessary, but
        removeAgedItems(false);
        // don't notify anyone, because that
        // happens next anyway...
        if (notify) {
            fireSeriesChanged();
        }
    }
}","public void test062148() throws Throwable {
    MockDate mockDate0 = new MockDate(1439, 1713, 1439, 3, 13);
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
    Class<String> class0 = String.class;
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, """", """", class0);
    // Undeclared exception!
    try {
        timeSeries0.add((TimeSeriesDataItem) null, false);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'item' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}","/**
 * Adds a data item to the series and sends a
 * {@link org.jfree.data.general.SeriesChangeEvent} to all registered
 * listeners.
 *
 * @param item  the (timeperiod, value) pair (<code>null</code> not
 *              permitted).
 * @param notify  notify listeners?
 */"
"public int getIndex(RegularTimePeriod period) {
    if (period == null) {
        throw new IllegalArgumentException(""Null 'period' argument."");
    }
    TimeSeriesDataItem dummy = new TimeSeriesDataItem(period, Integer.MIN_VALUE);
    return Collections.binarySearch(this.data, dummy);
}","public void test063149() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    // Undeclared exception!
    try {
        timeSeries0.getIndex((RegularTimePeriod) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'period' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}","/**
 * Returns the index for the item (if any) that corresponds to a time
 * period.
 *
 * @param period  the time period (<code>null</code> not permitted).
 *
 * @return The index.
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test064150() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    timeSeries0.getIndex(fixedMillisecond0);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test064151() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    timeSeries0.getIndex(fixedMillisecond0);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test064152() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    timeSeries0.getIndex(fixedMillisecond0);
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test064153() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    timeSeries0.getIndex(fixedMillisecond0);
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test065154() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.getTimePeriodClass();
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test065155() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.getTimePeriodClass();
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test065156() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.getTimePeriodClass();
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test065157() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.getTimePeriodClass();
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test066158() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    long long0 = timeSeries0.getMaximumItemAge();
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test066159() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    long long0 = timeSeries0.getMaximumItemAge();
    assertEquals(9223372036854775807L, long0);
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test066160() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    long long0 = timeSeries0.getMaximumItemAge();
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test066161() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    long long0 = timeSeries0.getMaximumItemAge();
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public void add(RegularTimePeriod period, double value, boolean notify) {
    // defer argument checking...
    TimeSeriesDataItem item = new TimeSeriesDataItem(period, value);
    add(item, notify);
}","public void test067162() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    // Undeclared exception!
    try {
        timeSeries0.add((RegularTimePeriod) minute0, (double) (-3500), true);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // You are trying to add data where the time period class is org.jfree.data.time.Minute, but the TimeSeries is expecting an instance of org.jfree.data.time.Day.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}","/**
 * Adds a new data item to the series and sends a {@link SeriesChangeEvent}
 * to all registered listeners.
 *
 * @param period  the time period (<code>null</code> not permitted).
 * @param value  the value.
 * @param notify  notify listeners?
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test068163() throws Throwable {
    Class<Panel> class0 = Panel.class;
    TimeSeries timeSeries0 = new TimeSeries(""You are attempting to add an observation for "", ""[BD"", (String) null, class0);
    String string0 = timeSeries0.getRangeDescription();
    assertNull(string0);
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test068164() throws Throwable {
    Class<Panel> class0 = Panel.class;
    TimeSeries timeSeries0 = new TimeSeries(""You are attempting to add an observation for "", ""[BD"", (String) null, class0);
    String string0 = timeSeries0.getRangeDescription();
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test068165() throws Throwable {
    Class<Panel> class0 = Panel.class;
    TimeSeries timeSeries0 = new TimeSeries(""You are attempting to add an observation for "", ""[BD"", (String) null, class0);
    String string0 = timeSeries0.getRangeDescription();
    assertEquals(""[BD"", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test068166() throws Throwable {
    Class<Panel> class0 = Panel.class;
    TimeSeries timeSeries0 = new TimeSeries(""You are attempting to add an observation for "", ""[BD"", (String) null, class0);
    String string0 = timeSeries0.getRangeDescription();
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public Number getValue(int index) {
    return getDataItem(index).getValue();
}","public void test069167() throws Throwable {
    MockDate mockDate0 = new MockDate(59L);
    TimeZone timeZone0 = TimeZone.getDefault();
    Hour hour0 = new Hour(mockDate0, timeZone0);
    TimeSeries timeSeries0 = new TimeSeries(hour0);
    // Undeclared exception!
    try {
        timeSeries0.getValue(151);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 151, Size: 0
        //
        verifyException(""java.util.ArrayList"", e);
    }
}","/**
 * Returns the value at the specified index.
 *
 * @param index  index of a value.
 *
 * @return The value (possibly <code>null</code>).
 */"
"public RegularTimePeriod getTimePeriod(int index) {
    return getDataItem(index).getPeriod();
}","public void test070168() throws Throwable {
    MockDate mockDate0 = new MockDate();
    Class<TimeSeriesDataItem> class0 = TimeSeriesDataItem.class;
    TimeSeries timeSeries0 = new TimeSeries(mockDate0, class0);
    // Undeclared exception!
    try {
        timeSeries0.getTimePeriod((-2387));
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * Returns the time period at the specified index.
 *
 * @param index  the index of the data item.
 *
 * @return The time period.
 */"
"public TimeSeriesDataItem getDataItem(int index) {
    return (TimeSeriesDataItem) this.data.get(index);
}","public void test071169() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    // Undeclared exception!
    try {
        timeSeries0.getDataItem(59);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 59, Size: 0
        //
        verifyException(""java.util.ArrayList"", e);
    }
}","/**
 * Returns a data item for the series.
 *
 * @param index  the item index (zero-based).
 *
 * @return The data item.
 *
 * @see #getDataItem(RegularTimePeriod)
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test072170() throws Throwable {
    SerialDate serialDate0 = SerialDate.createInstance((int) (byte) 100);
    Class<TimeSeries> class0 = TimeSeries.class;
    TimeSeries timeSeries0 = new TimeSeries(serialDate0, class0);
    timeSeries0.getItemCount();
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test072171() throws Throwable {
    SerialDate serialDate0 = SerialDate.createInstance((int) (byte) 100);
    Class<TimeSeries> class0 = TimeSeries.class;
    TimeSeries timeSeries0 = new TimeSeries(serialDate0, class0);
    timeSeries0.getItemCount();
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test072172() throws Throwable {
    SerialDate serialDate0 = SerialDate.createInstance((int) (byte) 100);
    Class<TimeSeries> class0 = TimeSeries.class;
    TimeSeries timeSeries0 = new TimeSeries(serialDate0, class0);
    timeSeries0.getItemCount();
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test072173() throws Throwable {
    SerialDate serialDate0 = SerialDate.createInstance((int) (byte) 100);
    Class<TimeSeries> class0 = TimeSeries.class;
    TimeSeries timeSeries0 = new TimeSeries(serialDate0, class0);
    timeSeries0.getItemCount();
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test073174() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) 1392409281320L);
    timeSeries0.hashCode();
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test073175() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) 1392409281320L);
    timeSeries0.hashCode();
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test073176() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) 1392409281320L);
    timeSeries0.hashCode();
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test073177() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) 1392409281320L);
    timeSeries0.hashCode();
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public boolean equals(Object object) {
    if (object == this) {
        return true;
    }
    if (!(object instanceof TimeSeries) || !super.equals(object)) {
        return false;
    }
    TimeSeries s = (TimeSeries) object;
    if (!ObjectUtilities.equal(getDomainDescription(), s.getDomainDescription())) {
        return false;
    }
    if (!ObjectUtilities.equal(getRangeDescription(), s.getRangeDescription())) {
        return false;
    }
    if (!getClass().equals(s.getClass())) {
        return false;
    }
    if (getMaximumItemAge() != s.getMaximumItemAge()) {
        return false;
    }
    if (getMaximumItemCount() != s.getMaximumItemCount()) {
        return false;
    }
    int count = getItemCount();
    if (count != s.getItemCount()) {
        return false;
    }
    for (int i = 0; i < count; i++) {
        if (!getDataItem(i).equals(s.getDataItem(i))) {
            return false;
        }
    }
    return true;
}","public void test074178() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    TimeSeries timeSeries1 = timeSeries0.createCopy(1, 1);
    timeSeries1.setMaximumItemAge(1);
    boolean boolean0 = timeSeries1.equals(timeSeries0);
    assertFalse(boolean0);
}","/**
 * Tests the series for equality with an arbitrary object.
 *
 * @param object  the object to test against (<code>null</code> permitted).
 *
 * @return A boolean.
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test074179() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    TimeSeries timeSeries1 = timeSeries0.createCopy(1, 1);
    timeSeries1.setMaximumItemAge(1);
    boolean boolean0 = timeSeries1.equals(timeSeries0);
    assertEquals(1L, timeSeries1.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public boolean equals(Object object) {
    if (object == this) {
        return true;
    }
    if (!(object instanceof TimeSeries) || !super.equals(object)) {
        return false;
    }
    TimeSeries s = (TimeSeries) object;
    if (!ObjectUtilities.equal(getDomainDescription(), s.getDomainDescription())) {
        return false;
    }
    if (!ObjectUtilities.equal(getRangeDescription(), s.getRangeDescription())) {
        return false;
    }
    if (!getClass().equals(s.getClass())) {
        return false;
    }
    if (getMaximumItemAge() != s.getMaximumItemAge()) {
        return false;
    }
    if (getMaximumItemCount() != s.getMaximumItemCount()) {
        return false;
    }
    int count = getItemCount();
    if (count != s.getItemCount()) {
        return false;
    }
    for (int i = 0; i < count; i++) {
        if (!getDataItem(i).equals(s.getDataItem(i))) {
            return false;
        }
    }
    return true;
}","public void test075181() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    TimeSeries timeSeries1 = timeSeries0.createCopy(1, 1);
    timeSeries1.setDomainDescription((String) null);
    boolean boolean0 = timeSeries1.equals(timeSeries0);
    assertFalse(timeSeries1.equals((Object) timeSeries0));
}","/**
 * Tests the series for equality with an arbitrary object.
 *
 * @param object  the object to test against (<code>null</code> permitted).
 *
 * @return A boolean.
 */"
"public boolean equals(Object object) {
    if (object == this) {
        return true;
    }
    if (!(object instanceof TimeSeries) || !super.equals(object)) {
        return false;
    }
    TimeSeries s = (TimeSeries) object;
    if (!ObjectUtilities.equal(getDomainDescription(), s.getDomainDescription())) {
        return false;
    }
    if (!ObjectUtilities.equal(getRangeDescription(), s.getRangeDescription())) {
        return false;
    }
    if (!getClass().equals(s.getClass())) {
        return false;
    }
    if (getMaximumItemAge() != s.getMaximumItemAge()) {
        return false;
    }
    if (getMaximumItemCount() != s.getMaximumItemCount()) {
        return false;
    }
    int count = getItemCount();
    if (count != s.getItemCount()) {
        return false;
    }
    for (int i = 0; i < count; i++) {
        if (!getDataItem(i).equals(s.getDataItem(i))) {
            return false;
        }
    }
    return true;
}","public void test075182() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    TimeSeries timeSeries1 = timeSeries0.createCopy(1, 1);
    timeSeries1.setDomainDescription((String) null);
    boolean boolean0 = timeSeries1.equals(timeSeries0);
    assertFalse(boolean0);
}","/**
 * Tests the series for equality with an arbitrary object.
 *
 * @param object  the object to test against (<code>null</code> permitted).
 *
 * @return A boolean.
 */"
"public boolean equals(Object object) {
    if (object == this) {
        return true;
    }
    if (!(object instanceof TimeSeries) || !super.equals(object)) {
        return false;
    }
    TimeSeries s = (TimeSeries) object;
    if (!ObjectUtilities.equal(getDomainDescription(), s.getDomainDescription())) {
        return false;
    }
    if (!ObjectUtilities.equal(getRangeDescription(), s.getRangeDescription())) {
        return false;
    }
    if (!getClass().equals(s.getClass())) {
        return false;
    }
    if (getMaximumItemAge() != s.getMaximumItemAge()) {
        return false;
    }
    if (getMaximumItemCount() != s.getMaximumItemCount()) {
        return false;
    }
    int count = getItemCount();
    if (count != s.getItemCount()) {
        return false;
    }
    for (int i = 0; i < count; i++) {
        if (!getDataItem(i).equals(s.getDataItem(i))) {
            return false;
        }
    }
    return true;
}","public void test076183() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    Class<Minute> class0 = Minute.class;
    TimeSeries timeSeries1 = new TimeSeries(minute0, ""["", """", class0);
    boolean boolean0 = timeSeries0.equals(timeSeries1);
    assertFalse(boolean0);
}","/**
 * Tests the series for equality with an arbitrary object.
 *
 * @param object  the object to test against (<code>null</code> permitted).
 *
 * @return A boolean.
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test076184() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    Class<Minute> class0 = Minute.class;
    TimeSeries timeSeries1 = new TimeSeries(minute0, ""["", """", class0);
    boolean boolean0 = timeSeries0.equals(timeSeries1);
    assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test076185() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    Class<Minute> class0 = Minute.class;
    TimeSeries timeSeries1 = new TimeSeries(minute0, ""["", """", class0);
    boolean boolean0 = timeSeries0.equals(timeSeries1);
    assertEquals(""["", timeSeries1.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test076186() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    Class<Minute> class0 = Minute.class;
    TimeSeries timeSeries1 = new TimeSeries(minute0, ""["", """", class0);
    boolean boolean0 = timeSeries0.equals(timeSeries1);
    assertEquals("""", timeSeries1.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test076187() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    Class<Minute> class0 = Minute.class;
    TimeSeries timeSeries1 = new TimeSeries(minute0, ""["", """", class0);
    boolean boolean0 = timeSeries0.equals(timeSeries1);
    assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test077188() throws Throwable {
    Quarter quarter0 = new Quarter();
    Class<Minute> class0 = Minute.class;
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""org.jfree.data.time.RegularTimePeriod"", ""org.jfree.data.time.RegularTimePeriod"", class0);
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond(4);
    boolean boolean0 = timeSeries0.equals(fixedMillisecond0);
    assertEquals(""org.jfree.data.time.RegularTimePeriod"", timeSeries0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test077189() throws Throwable {
    Quarter quarter0 = new Quarter();
    Class<Minute> class0 = Minute.class;
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""org.jfree.data.time.RegularTimePeriod"", ""org.jfree.data.time.RegularTimePeriod"", class0);
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond(4);
    boolean boolean0 = timeSeries0.equals(fixedMillisecond0);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test077190() throws Throwable {
    Quarter quarter0 = new Quarter();
    Class<Minute> class0 = Minute.class;
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""org.jfree.data.time.RegularTimePeriod"", ""org.jfree.data.time.RegularTimePeriod"", class0);
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond(4);
    boolean boolean0 = timeSeries0.equals(fixedMillisecond0);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public boolean equals(Object object) {
    if (object == this) {
        return true;
    }
    if (!(object instanceof TimeSeries) || !super.equals(object)) {
        return false;
    }
    TimeSeries s = (TimeSeries) object;
    if (!ObjectUtilities.equal(getDomainDescription(), s.getDomainDescription())) {
        return false;
    }
    if (!ObjectUtilities.equal(getRangeDescription(), s.getRangeDescription())) {
        return false;
    }
    if (!getClass().equals(s.getClass())) {
        return false;
    }
    if (getMaximumItemAge() != s.getMaximumItemAge()) {
        return false;
    }
    if (getMaximumItemCount() != s.getMaximumItemCount()) {
        return false;
    }
    int count = getItemCount();
    if (count != s.getItemCount()) {
        return false;
    }
    for (int i = 0; i < count; i++) {
        if (!getDataItem(i).equals(s.getDataItem(i))) {
            return false;
        }
    }
    return true;
}","public void test077191() throws Throwable {
    Quarter quarter0 = new Quarter();
    Class<Minute> class0 = Minute.class;
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""org.jfree.data.time.RegularTimePeriod"", ""org.jfree.data.time.RegularTimePeriod"", class0);
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond(4);
    boolean boolean0 = timeSeries0.equals(fixedMillisecond0);
    assertFalse(boolean0);
}","/**
 * Tests the series for equality with an arbitrary object.
 *
 * @param object  the object to test against (<code>null</code> permitted).
 *
 * @return A boolean.
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test077192() throws Throwable {
    Quarter quarter0 = new Quarter();
    Class<Minute> class0 = Minute.class;
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""org.jfree.data.time.RegularTimePeriod"", ""org.jfree.data.time.RegularTimePeriod"", class0);
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond(4);
    boolean boolean0 = timeSeries0.equals(fixedMillisecond0);
    assertEquals(""org.jfree.data.time.RegularTimePeriod"", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public boolean equals(Object object) {
    if (object == this) {
        return true;
    }
    if (!(object instanceof TimeSeries) || !super.equals(object)) {
        return false;
    }
    TimeSeries s = (TimeSeries) object;
    if (!ObjectUtilities.equal(getDomainDescription(), s.getDomainDescription())) {
        return false;
    }
    if (!ObjectUtilities.equal(getRangeDescription(), s.getRangeDescription())) {
        return false;
    }
    if (!getClass().equals(s.getClass())) {
        return false;
    }
    if (getMaximumItemAge() != s.getMaximumItemAge()) {
        return false;
    }
    if (getMaximumItemCount() != s.getMaximumItemCount()) {
        return false;
    }
    int count = getItemCount();
    if (count != s.getItemCount()) {
        return false;
    }
    for (int i = 0; i < count; i++) {
        if (!getDataItem(i).equals(s.getDataItem(i))) {
            return false;
        }
    }
    return true;
}","public void test078194() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    TimeSeries timeSeries1 = timeSeries0.createCopy(1, 1);
    timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) week0.LAST_WEEK_IN_YEAR);
    boolean boolean0 = timeSeries1.equals(timeSeries0);
    assertFalse(boolean0);
}","/**
 * Tests the series for equality with an arbitrary object.
 *
 * @param object  the object to test against (<code>null</code> permitted).
 *
 * @return A boolean.
 */"
"public int getItemCount() {
    return this.data.size();
}","public void test079195() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    BigInteger bigInteger0 = BigInteger.ZERO;
    timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0, true);
    RegularTimePeriod regularTimePeriod0 = day0.previous();
    TimeSeries timeSeries1 = timeSeries0.createCopy(regularTimePeriod0, (RegularTimePeriod) day0);
    assertEquals(1, timeSeries1.getItemCount());
}","/**
 * Returns the number of items in the series.
 *
 * @return The item count.
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test079196() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    BigInteger bigInteger0 = BigInteger.ZERO;
    timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0, true);
    RegularTimePeriod regularTimePeriod0 = day0.previous();
    TimeSeries timeSeries1 = timeSeries0.createCopy(regularTimePeriod0, (RegularTimePeriod) day0);
    assertEquals(""Value"", timeSeries1.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test079197() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    BigInteger bigInteger0 = BigInteger.ZERO;
    timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0, true);
    RegularTimePeriod regularTimePeriod0 = day0.previous();
    TimeSeries timeSeries1 = timeSeries0.createCopy(regularTimePeriod0, (RegularTimePeriod) day0);
    assertEquals(""Time"", timeSeries1.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end) throws CloneNotSupportedException {
    if (start == null) {
        throw new IllegalArgumentException(""Null 'start' argument."");
    }
    if (end == null) {
        throw new IllegalArgumentException(""Null 'end' argument."");
    }
    if (start.compareTo(end) > 0) {
        throw new IllegalArgumentException(""Requires start on or before end."");
    }
    boolean emptyRange = false;
    int startIndex = getIndex(start);
    if (startIndex < 0) {
        startIndex = -(startIndex + 1);
        if (startIndex == this.data.size()) {
            // start is after last data item
            emptyRange = true;
        }
    }
    int endIndex = getIndex(end);
    if (endIndex < 0) {
        // end period is not in original series
        // this is first item AFTER end period
        endIndex = -(endIndex + 1);
        // so this is last item BEFORE end
        endIndex = endIndex - 1;
    }
    if (endIndex < 0) {
        emptyRange = true;
    }
    if (emptyRange) {
        TimeSeries copy = (TimeSeries) super.clone();
        copy.data = new java.util.ArrayList();
        return copy;
    } else {
        return createCopy(startIndex, endIndex);
    }
}","public void test079198() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    BigInteger bigInteger0 = BigInteger.ZERO;
    timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0, true);
    RegularTimePeriod regularTimePeriod0 = day0.previous();
    TimeSeries timeSeries1 = timeSeries0.createCopy(regularTimePeriod0, (RegularTimePeriod) day0);
    assertNotSame(timeSeries1, timeSeries0);
}","/**
 * Creates a new timeseries by copying a subset of the data in this time
 * series.
 *
 * @param start  the first time period to copy (<code>null</code> not
 *         permitted).
 * @param end  the last time period to copy (<code>null</code> not
 *         permitted).
 *
 * @return A time series containing a copy of this time series from start
 *         until end.
 *
 * @throws CloneNotSupportedException if there is a cloning problem.
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test079199() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    BigInteger bigInteger0 = BigInteger.ZERO;
    timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0, true);
    RegularTimePeriod regularTimePeriod0 = day0.previous();
    TimeSeries timeSeries1 = timeSeries0.createCopy(regularTimePeriod0, (RegularTimePeriod) day0);
    assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test079200() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    BigInteger bigInteger0 = BigInteger.ZERO;
    timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0, true);
    RegularTimePeriod regularTimePeriod0 = day0.previous();
    TimeSeries timeSeries1 = timeSeries0.createCopy(regularTimePeriod0, (RegularTimePeriod) day0);
    assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end) throws CloneNotSupportedException {
    if (start == null) {
        throw new IllegalArgumentException(""Null 'start' argument."");
    }
    if (end == null) {
        throw new IllegalArgumentException(""Null 'end' argument."");
    }
    if (start.compareTo(end) > 0) {
        throw new IllegalArgumentException(""Requires start on or before end."");
    }
    boolean emptyRange = false;
    int startIndex = getIndex(start);
    if (startIndex < 0) {
        startIndex = -(startIndex + 1);
        if (startIndex == this.data.size()) {
            // start is after last data item
            emptyRange = true;
        }
    }
    int endIndex = getIndex(end);
    if (endIndex < 0) {
        // end period is not in original series
        // this is first item AFTER end period
        endIndex = -(endIndex + 1);
        // so this is last item BEFORE end
        endIndex = endIndex - 1;
    }
    if (endIndex < 0) {
        emptyRange = true;
    }
    if (emptyRange) {
        TimeSeries copy = (TimeSeries) super.clone();
        copy.data = new java.util.ArrayList();
        return copy;
    } else {
        return createCopy(startIndex, endIndex);
    }
}","public void test080201() throws Throwable {
    Week week0 = new Week();
    Class<Minute> class0 = Minute.class;
    RegularTimePeriod regularTimePeriod0 = week0.next();
    TimeSeries timeSeries0 = new TimeSeries(week0, class0);
    // Undeclared exception!
    try {
        timeSeries0.createCopy(regularTimePeriod0, (RegularTimePeriod) week0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Requires start on or before end.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}","/**
 * Creates a new timeseries by copying a subset of the data in this time
 * series.
 *
 * @param start  the first time period to copy (<code>null</code> not
 *         permitted).
 * @param end  the last time period to copy (<code>null</code> not
 *         permitted).
 *
 * @return A time series containing a copy of this time series from start
 *         until end.
 *
 * @throws CloneNotSupportedException if there is a cloning problem.
 */"
"public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end) throws CloneNotSupportedException {
    if (start == null) {
        throw new IllegalArgumentException(""Null 'start' argument."");
    }
    if (end == null) {
        throw new IllegalArgumentException(""Null 'end' argument."");
    }
    if (start.compareTo(end) > 0) {
        throw new IllegalArgumentException(""Requires start on or before end."");
    }
    boolean emptyRange = false;
    int startIndex = getIndex(start);
    if (startIndex < 0) {
        startIndex = -(startIndex + 1);
        if (startIndex == this.data.size()) {
            // start is after last data item
            emptyRange = true;
        }
    }
    int endIndex = getIndex(end);
    if (endIndex < 0) {
        // end period is not in original series
        // this is first item AFTER end period
        endIndex = -(endIndex + 1);
        // so this is last item BEFORE end
        endIndex = endIndex - 1;
    }
    if (endIndex < 0) {
        emptyRange = true;
    }
    if (emptyRange) {
        TimeSeries copy = (TimeSeries) super.clone();
        copy.data = new java.util.ArrayList();
        return copy;
    } else {
        return createCopy(startIndex, endIndex);
    }
}","public void test081202() throws Throwable {
    Quarter quarter0 = new Quarter();
    Class<Minute> class0 = Minute.class;
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""org.jfree.data.time.RegularTimePeriod"", ""org.jfree.data.time.RegularTimePeriod"", class0);
    // Undeclared exception!
    try {
        timeSeries0.createCopy((RegularTimePeriod) quarter0, (RegularTimePeriod) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'end' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}","/**
 * Creates a new timeseries by copying a subset of the data in this time
 * series.
 *
 * @param start  the first time period to copy (<code>null</code> not
 *         permitted).
 * @param end  the last time period to copy (<code>null</code> not
 *         permitted).
 *
 * @return A time series containing a copy of this time series from start
 *         until end.
 *
 * @throws CloneNotSupportedException if there is a cloning problem.
 */"
"public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end) throws CloneNotSupportedException {
    if (start == null) {
        throw new IllegalArgumentException(""Null 'start' argument."");
    }
    if (end == null) {
        throw new IllegalArgumentException(""Null 'end' argument."");
    }
    if (start.compareTo(end) > 0) {
        throw new IllegalArgumentException(""Requires start on or before end."");
    }
    boolean emptyRange = false;
    int startIndex = getIndex(start);
    if (startIndex < 0) {
        startIndex = -(startIndex + 1);
        if (startIndex == this.data.size()) {
            // start is after last data item
            emptyRange = true;
        }
    }
    int endIndex = getIndex(end);
    if (endIndex < 0) {
        // end period is not in original series
        // this is first item AFTER end period
        endIndex = -(endIndex + 1);
        // so this is last item BEFORE end
        endIndex = endIndex - 1;
    }
    if (endIndex < 0) {
        emptyRange = true;
    }
    if (emptyRange) {
        TimeSeries copy = (TimeSeries) super.clone();
        copy.data = new java.util.ArrayList();
        return copy;
    } else {
        return createCopy(startIndex, endIndex);
    }
}","public void test082203() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    // Undeclared exception!
    try {
        timeSeries0.createCopy((RegularTimePeriod) null, (RegularTimePeriod) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'start' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}","/**
 * Creates a new timeseries by copying a subset of the data in this time
 * series.
 *
 * @param start  the first time period to copy (<code>null</code> not
 *         permitted).
 * @param end  the last time period to copy (<code>null</code> not
 *         permitted).
 *
 * @return A time series containing a copy of this time series from start
 *         until end.
 *
 * @throws CloneNotSupportedException if there is a cloning problem.
 */"
"public TimeSeries createCopy(int start, int end) throws CloneNotSupportedException {
    if (start < 0) {
        throw new IllegalArgumentException(""Requires start >= 0."");
    }
    if (end < start) {
        throw new IllegalArgumentException(""Requires start <= end."");
    }
    TimeSeries copy = (TimeSeries) super.clone();
    copy.data = new java.util.ArrayList();
    if (this.data.size() > 0) {
        for (int index = start; index <= end; index++) {
            TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(index);
            TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();
            try {
                copy.add(clone);
            } catch (SeriesException e) {
                e.printStackTrace();
            }
        }
    }
    return copy;
}","public void test083204() throws Throwable {
    MockDate mockDate0 = new MockDate();
    Quarter quarter0 = new Quarter(mockDate0);
    Class<TimeSeriesDataItem> class0 = TimeSeriesDataItem.class;
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""s)~xX[|lsmF}\""lH@"", ""s)~xX[|lsmF}\""lH@"", class0);
    // Undeclared exception!
    try {
        timeSeries0.createCopy(Integer.MAX_VALUE, 4);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Requires start <= end.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}","/**
 * Creates a new timeseries by copying a subset of the data in this time
 * series.
 *
 * @param start  the index of the first time period to copy.
 * @param end  the index of the last time period to copy.
 *
 * @return A series containing a copy of this times series from start until
 *         end.
 *
 * @throws CloneNotSupportedException if there is a cloning problem.
 */"
"public TimeSeries createCopy(int start, int end) throws CloneNotSupportedException {
    if (start < 0) {
        throw new IllegalArgumentException(""Requires start >= 0."");
    }
    if (end < start) {
        throw new IllegalArgumentException(""Requires start <= end."");
    }
    TimeSeries copy = (TimeSeries) super.clone();
    copy.data = new java.util.ArrayList();
    if (this.data.size() > 0) {
        for (int index = start; index <= end; index++) {
            TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(index);
            TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();
            try {
                copy.add(clone);
            } catch (SeriesException e) {
                e.printStackTrace();
            }
        }
    }
    return copy;
}","public void test084205() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    // Undeclared exception!
    try {
        timeSeries0.createCopy((-625), 0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Requires start >= 0.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}","/**
 * Creates a new timeseries by copying a subset of the data in this time
 * series.
 *
 * @param start  the index of the first time period to copy.
 * @param end  the index of the last time period to copy.
 *
 * @return A series containing a copy of this times series from start until
 *         end.
 *
 * @throws CloneNotSupportedException if there is a cloning problem.
 */"
"public void delete(int start, int end) {
    if (end < start) {
        throw new IllegalArgumentException(""Requires start <= end."");
    }
    for (int i = 0; i <= (end - start); i++) {
        this.data.remove(start);
    }
    fireSeriesChanged();
}","public void test085206() throws Throwable {
    Second second0 = new Second();
    TimeSeries timeSeries0 = new TimeSeries(second0);
    // Undeclared exception!
    try {
        timeSeries0.delete(1073741824, 297);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Requires start <= end.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}","/**
 * Deletes data from start until end index (end inclusive).
 *
 * @param start  the index of the first period to delete.
 * @param end  the index of the last period to delete.
 */"
"public int getItemCount() {
    return this.data.size();
}","public void test086207() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) 1392409281320L);
    timeSeries0.delete((RegularTimePeriod) minute0);
    assertEquals(0, timeSeries0.getItemCount());
}","/**
 * Returns the number of items in the series.
 *
 * @return The item count.
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test087208() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    timeSeries0.delete((RegularTimePeriod) fixedMillisecond0);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test087209() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    timeSeries0.delete((RegularTimePeriod) fixedMillisecond0);
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test087210() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    timeSeries0.delete((RegularTimePeriod) fixedMillisecond0);
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test087211() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    timeSeries0.delete((RegularTimePeriod) fixedMillisecond0);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public int getItemCount() {
    return this.data.size();
}","public void test088212() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    BigInteger bigInteger0 = BigInteger.ZERO;
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(day0, bigInteger0);
    timeSeries0.add(timeSeriesDataItem0, false);
    timeSeries0.clear();
    assertEquals(0, timeSeries0.getItemCount());
}","/**
 * Returns the number of items in the series.
 *
 * @return The item count.
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test089213() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    timeSeries0.clear();
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test089214() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    timeSeries0.clear();
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test089215() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    timeSeries0.clear();
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test089216() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    timeSeries0.clear();
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public int getItemCount() {
    return this.data.size();
}","public void test090217() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    BigInteger bigInteger0 = BigInteger.TEN;
    timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0, true);
    timeSeries0.removeAgedItems(0L, true);
    assertEquals(1, timeSeries0.getItemCount());
}","/**
 * Returns the number of items in the series.
 *
 * @return The item count.
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test091218() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    timeSeries0.removeAgedItems((long) (-3500), false);
    timeSeries0.removeAgedItems(2032L, false);
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test091219() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    timeSeries0.removeAgedItems((long) (-3500), false);
    timeSeries0.removeAgedItems(2032L, false);
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test091220() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    timeSeries0.removeAgedItems((long) (-3500), false);
    timeSeries0.removeAgedItems(2032L, false);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test091221() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    timeSeries0.removeAgedItems((long) (-3500), false);
    timeSeries0.removeAgedItems(2032L, false);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test092222() throws Throwable {
    SerialDate serialDate0 = SerialDate.createInstance(3);
    Class<TimeSeries> class0 = TimeSeries.class;
    TimeSeries timeSeries0 = new TimeSeries(serialDate0, class0);
    timeSeries0.setMaximumItemCount(0);
    Year year0 = new Year();
    timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) (-1));
    assertEquals(0, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public TimeSeriesDataItem addOrUpdate(RegularTimePeriod period, Number value) {
    if (period == null) {
        throw new IllegalArgumentException(""Null 'period' argument."");
    }
    TimeSeriesDataItem overwritten = null;
    TimeSeriesDataItem key = new TimeSeriesDataItem(period, value);
    int index = Collections.binarySearch(this.data, key);
    if (index >= 0) {
        TimeSeriesDataItem existing = (TimeSeriesDataItem) this.data.get(index);
        overwritten = (TimeSeriesDataItem) existing.clone();
        existing.setValue(value);
        // remove old items if necessary, but
        removeAgedItems(false);
        // don't notify anyone, because that
        // happens next anyway...
        fireSeriesChanged();
    } else {
        this.data.add(-index - 1, new TimeSeriesDataItem(period, value));
        // check if this addition will exceed the maximum item count...
        if (getItemCount() > this.maximumItemCount) {
            this.data.remove(0);
        }
        // remove old items if necessary, but
        removeAgedItems(false);
        // don't notify anyone, because that
        // happens next anyway...
        fireSeriesChanged();
    }
    return overwritten;
}","public void test093223() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond(4);
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    // Undeclared exception!
    try {
        timeSeries0.addOrUpdate((RegularTimePeriod) null, (Number) 1);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'period' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}","/**
 * Adds or updates an item in the times series and sends a
 * {@link org.jfree.data.general.SeriesChangeEvent} to all registered
 * listeners.
 *
 * @param period  the time period to add/update (<code>null</code> not
 *                permitted).
 * @param value  the new value (<code>null</code> permitted).
 *
 * @return A copy of the overwritten data item, or <code>null</code> if no
 *         item was overwritten.
 */"
"public int getItemCount() {
    return this.data.size();
}","public void test094224() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
    MockRandom mockRandom0 = new MockRandom();
    BigInteger bigInteger0 = BigInteger.probablePrime(273, mockRandom0);
    timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) bigInteger0);
    timeSeries1.addAndOrUpdate(timeSeries0);
    assertEquals(1, timeSeries1.getItemCount());
}","/**
 * Returns the number of items in the series.
 *
 * @return The item count.
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test095225() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    BigInteger bigInteger0 = BigInteger.TEN;
    timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0, false);
    TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
    assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test095226() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    BigInteger bigInteger0 = BigInteger.TEN;
    timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0, false);
    TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
    assertEquals(""Value"", timeSeries1.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test095227() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    BigInteger bigInteger0 = BigInteger.TEN;
    timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0, false);
    TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
    assertEquals(""Time"", timeSeries1.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test095228() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    BigInteger bigInteger0 = BigInteger.TEN;
    timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0, false);
    TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
    assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public int getItemCount() {
    return this.data.size();
}","public void test095229() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    BigInteger bigInteger0 = BigInteger.TEN;
    timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0, false);
    TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
    assertEquals(1, timeSeries1.getItemCount());
}","/**
 * Returns the number of items in the series.
 *
 * @return The item count.
 */"
"public TimeSeries addAndOrUpdate(TimeSeries series) {
    TimeSeries overwritten = new TimeSeries(""Overwritten values from: "" + getKey(), series.getTimePeriodClass());
    for (int i = 0; i < series.getItemCount(); i++) {
        TimeSeriesDataItem item = series.getDataItem(i);
        TimeSeriesDataItem oldItem = addOrUpdate(item.getPeriod(), item.getValue());
        if (oldItem != null) {
            overwritten.add(oldItem);
        }
    }
    return overwritten;
}","public void test095230() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    BigInteger bigInteger0 = BigInteger.TEN;
    timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0, false);
    TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
    assertNotSame(timeSeries1, timeSeries0);
}","/**
 * Adds or updates data from one series to another.  Returns another series
 * containing the values that were overwritten.
 *
 * @param series  the series to merge with this.
 *
 * @return A series containing the values that were overwritten.
 */"
"public int getItemCount() {
    return this.data.size();
}","public void test096231() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    MockRandom mockRandom0 = new MockRandom();
    BigInteger bigInteger0 = BigInteger.probablePrime(273, mockRandom0);
    timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) bigInteger0);
    assertEquals(1, timeSeries0.getItemCount());
}","/**
 * Returns the number of items in the series.
 *
 * @return The item count.
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test096232() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    MockRandom mockRandom0 = new MockRandom();
    BigInteger bigInteger0 = BigInteger.probablePrime(273, mockRandom0);
    timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) bigInteger0);
    timeSeries0.update((RegularTimePeriod) fixedMillisecond0, (Number) bigInteger0);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public void update(RegularTimePeriod period, Number value) {
    TimeSeriesDataItem temp = new TimeSeriesDataItem(period, value);
    int index = Collections.binarySearch(this.data, temp);
    if (index >= 0) {
        TimeSeriesDataItem pair = (TimeSeriesDataItem) this.data.get(index);
        pair.setValue(value);
        fireSeriesChanged();
    } else {
        throw new SeriesException(""TimeSeries.update(TimePeriod, Number):  period does not exist."");
    }
}","public void test097233() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    MockRandom mockRandom0 = new MockRandom();
    BigInteger bigInteger0 = BigInteger.probablePrime(273, mockRandom0);
    // Undeclared exception!
    try {
        timeSeries0.update((RegularTimePeriod) fixedMillisecond0, (Number) bigInteger0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // TimeSeries.update(TimePeriod, Number):  period does not exist.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}","/**
 * Updates (changes) the value for a time period.  Throws a
 * {@link SeriesException} if the period does not exist.
 *
 * @param period  the period (<code>null</code> not permitted).
 * @param value  the value (<code>null</code> permitted).
 */"
"public void add(TimeSeriesDataItem item, boolean notify) {
    if (item == null) {
        throw new IllegalArgumentException(""Null 'item' argument."");
    }
    if (!item.getPeriod().getClass().equals(this.timePeriodClass)) {
        StringBuffer b = new StringBuffer();
        b.append(""You are trying to add data where the time period class "");
        b.append(""is "");
        b.append(item.getPeriod().getClass().getName());
        b.append("", but the TimeSeries is expecting an instance of "");
        b.append(this.timePeriodClass.getName());
        b.append(""."");
        throw new SeriesException(b.toString());
    }
    // make the change (if it's not a duplicate time period)...
    boolean added = false;
    int count = getItemCount();
    if (count == 0) {
        this.data.add(item);
        added = true;
    } else {
        RegularTimePeriod last = getTimePeriod(getItemCount() - 1);
        if (item.getPeriod().compareTo(last) > 0) {
            this.data.add(item);
            added = true;
        } else {
            int index = Collections.binarySearch(this.data, item);
            if (index < 0) {
                this.data.add(-index - 1, item);
                added = true;
            } else {
                StringBuffer b = new StringBuffer();
                b.append(""You are attempting to add an observation for "");
                b.append(""the time period "");
                b.append(item.getPeriod().toString());
                b.append("" but the series already contains an observation"");
                b.append("" for that time period. Duplicates are not "");
                b.append(""permitted.  Try using the addOrUpdate() method."");
                throw new SeriesException(b.toString());
            }
        }
    }
    if (added) {
        // check if this addition will exceed the maximum item count...
        if (getItemCount() > this.maximumItemCount) {
            this.data.remove(0);
        }
        // remove old items if necessary, but
        removeAgedItems(false);
        // don't notify anyone, because that
        // happens next anyway...
        if (notify) {
            fireSeriesChanged();
        }
    }
}","public void test098234() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    BigInteger bigInteger0 = BigInteger.TEN;
    timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0, false);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(day0, bigInteger0);
    // Undeclared exception!
    try {
        timeSeries0.add(timeSeriesDataItem0, false);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // You are attempting to add an observation for the time period 14-February-2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}","/**
 * Adds a data item to the series and sends a
 * {@link org.jfree.data.general.SeriesChangeEvent} to all registered
 * listeners.
 *
 * @param item  the (timeperiod, value) pair (<code>null</code> not
 *              permitted).
 * @param notify  notify listeners?
 */"
"public void add(TimeSeriesDataItem item) {
    add(item, true);
}","public void test099235() throws Throwable {
    MockDate mockDate0 = new MockDate((-1750L));
    Week week0 = new Week(mockDate0);
    Class<XYDatasetTableModel> class0 = XYDatasetTableModel.class;
    TimeSeries timeSeries0 = new TimeSeries(week0, ""FB6}c-sW?"", ""Key not found: "", class0);
    // Undeclared exception!
    try {
        timeSeries0.add((TimeSeriesDataItem) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'item' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}","/**
 * Adds a data item to the series and sends a
 * {@link org.jfree.data.general.SeriesChangeEvent} to all registered
 * listeners.
 *
 * @param item  the (timeperiod, value) pair (<code>null</code> not
 *              permitted).
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test100236() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    timeSeries0.getValue((RegularTimePeriod) minute0);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test100237() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    timeSeries0.getValue((RegularTimePeriod) minute0);
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test100238() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    timeSeries0.getValue((RegularTimePeriod) minute0);
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test100239() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    timeSeries0.getValue((RegularTimePeriod) minute0);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public Number getValue(RegularTimePeriod period) {
    int index = getIndex(period);
    if (index >= 0) {
        return getValue(index);
    } else {
        return null;
    }
}","public void test101240() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    // Undeclared exception!
    try {
        timeSeries0.getValue((RegularTimePeriod) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'period' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}","/**
 * Returns the value for a time period.  If there is no data item with the
 * specified period, this method will return <code>null</code>.
 *
 * @param period  time period (<code>null</code> not permitted).
 *
 * @return The value (possibly <code>null</code>).
 */"
"public int getItemCount() {
    return this.data.size();
}","public void test102241() throws Throwable {
    Quarter quarter0 = new Quarter();
    Class<Minute> class0 = Minute.class;
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""org.jfree.data.time.RegularTimePeriod"", ""org.jfree.data.time.RegularTimePeriod"", class0);
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond(4);
    TimeSeries timeSeries1 = new TimeSeries(fixedMillisecond0);
    timeSeries1.addOrUpdate((RegularTimePeriod) quarter0, (Number) 1);
    timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries1);
    assertEquals(1, timeSeries1.getItemCount());
}","/**
 * Returns the number of items in the series.
 *
 * @return The item count.
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test102242() throws Throwable {
    Quarter quarter0 = new Quarter();
    Class<Minute> class0 = Minute.class;
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""org.jfree.data.time.RegularTimePeriod"", ""org.jfree.data.time.RegularTimePeriod"", class0);
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond(4);
    TimeSeries timeSeries1 = new TimeSeries(fixedMillisecond0);
    timeSeries1.addOrUpdate((RegularTimePeriod) quarter0, (Number) 1);
    timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries1);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public int getItemCount() {
    return this.data.size();
}","public void test103243() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    BigInteger bigInteger0 = BigInteger.TEN;
    timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0, false);
    timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries0);
    assertEquals(1, timeSeries0.getItemCount());
}","/**
 * Returns the number of items in the series.
 *
 * @return The item count.
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test104244() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    timeSeries0.getTimePeriods();
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test104245() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    timeSeries0.getTimePeriods();
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test104246() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    timeSeries0.getTimePeriods();
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test104247() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    timeSeries0.getTimePeriods();
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public int getItemCount() {
    return this.data.size();
}","public void test105248() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    BigInteger bigInteger0 = BigInteger.ZERO;
    timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0, true);
    timeSeries0.getDataItem((RegularTimePeriod) day0);
    assertEquals(1, timeSeries0.getItemCount());
}","/**
 * Returns the number of items in the series.
 *
 * @return The item count.
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test106249() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.getDataItem((RegularTimePeriod) day0);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test106250() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.getDataItem((RegularTimePeriod) day0);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test106251() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.getDataItem((RegularTimePeriod) day0);
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test106252() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.getDataItem((RegularTimePeriod) day0);
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public void setMaximumItemAge(long periods) {
    if (periods < 0) {
        throw new IllegalArgumentException(""Negative 'periods' argument."");
    }
    this.maximumItemAge = periods;
    // remove old items and notify if necessary
    removeAgedItems(true);
}","public void test107253() throws Throwable {
    Year year0 = new Year();
    Week week0 = new Week(9999, year0);
    TimeSeries timeSeries0 = new TimeSeries(week0);
    // Undeclared exception!
    try {
        timeSeries0.setMaximumItemAge((-1L));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Negative 'periods' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}","/**
 * Sets the number of time units in the 'history' for the series.  This
 * provides one mechanism for automatically dropping old data from the
 * time series. For example, if a series contains daily data, you might set
 * the history count to 30.  Then, when you add a new data item, all data
 * items more than 30 days older than the latest value are automatically
 * dropped from the series.
 *
 * @param periods  the number of time periods.
 *
 * @see #getMaximumItemAge()
 */"
"public int getItemCount() {
    return this.data.size();
}","public void test108254() throws Throwable {
    SerialDate serialDate0 = SerialDate.createInstance((int) (byte) 100);
    Class<TimeSeries> class0 = TimeSeries.class;
    TimeSeries timeSeries0 = new TimeSeries(serialDate0, class0);
    Year year0 = new Year();
    timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) (-1));
    assertEquals(1, timeSeries0.getItemCount());
}","/**
 * Returns the number of items in the series.
 *
 * @return The item count.
 */"
"public int getItemCount() {
    return this.data.size();
}","public void test108255() throws Throwable {
    SerialDate serialDate0 = SerialDate.createInstance((int) (byte) 100);
    Class<TimeSeries> class0 = TimeSeries.class;
    TimeSeries timeSeries0 = new TimeSeries(serialDate0, class0);
    Year year0 = new Year();
    timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) (-1));
    timeSeries0.setMaximumItemCount(0);
    assertEquals(0, timeSeries0.getItemCount());
}","/**
 * Returns the number of items in the series.
 *
 * @return The item count.
 */"
"public void setMaximumItemCount(int maximum) {
    if (maximum < 0) {
        throw new IllegalArgumentException(""Negative 'maximum' argument."");
    }
    this.maximumItemCount = maximum;
    int count = this.data.size();
    if (count > maximum) {
        delete(0, count - maximum - 1);
    }
}","public void test109256() throws Throwable {
    Minute minute0 = new Minute();
    TimeSeries timeSeries0 = new TimeSeries(minute0);
    // Undeclared exception!
    try {
        timeSeries0.setMaximumItemCount((-685));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Negative 'maximum' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}","/**
 * Sets the maximum number of items that will be retained in the series.
 * If you add a new item to the series such that the number of items will
 * exceed the maximum item count, then the FIRST element in the series is
 * automatically removed, ensuring that the maximum item count is not
 * exceeded.
 *
 * @param maximum  the maximum (requires >= 0).
 *
 * @see #getMaximumItemCount()
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test110257() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    TimeSeries timeSeries1 = new TimeSeries(fixedMillisecond0);
    assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test110258() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    TimeSeries timeSeries1 = new TimeSeries(fixedMillisecond0);
    assertEquals(""Time"", timeSeries1.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test110259() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    TimeSeries timeSeries1 = new TimeSeries(fixedMillisecond0);
    assertEquals(""Value"", timeSeries1.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test110260() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    TimeSeries timeSeries1 = new TimeSeries(fixedMillisecond0);
    assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public boolean equals(Object object) {
    if (object == this) {
        return true;
    }
    if (!(object instanceof TimeSeries) || !super.equals(object)) {
        return false;
    }
    TimeSeries s = (TimeSeries) object;
    if (!ObjectUtilities.equal(getDomainDescription(), s.getDomainDescription())) {
        return false;
    }
    if (!ObjectUtilities.equal(getRangeDescription(), s.getRangeDescription())) {
        return false;
    }
    if (!getClass().equals(s.getClass())) {
        return false;
    }
    if (getMaximumItemAge() != s.getMaximumItemAge()) {
        return false;
    }
    if (getMaximumItemCount() != s.getMaximumItemCount()) {
        return false;
    }
    int count = getItemCount();
    if (count != s.getItemCount()) {
        return false;
    }
    for (int i = 0; i < count; i++) {
        if (!getDataItem(i).equals(s.getDataItem(i))) {
            return false;
        }
    }
    return true;
}","public void test111261() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    TimeSeries timeSeries1 = timeSeries0.createCopy(1, 1);
    boolean boolean0 = timeSeries1.equals(timeSeries0);
    assertTrue(boolean0);
}","/**
 * Tests the series for equality with an arbitrary object.
 *
 * @param object  the object to test against (<code>null</code> permitted).
 *
 * @return A boolean.
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test111263() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    TimeSeries timeSeries1 = timeSeries0.createCopy(1, 1);
    boolean boolean0 = timeSeries1.equals(timeSeries0);
    assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test111264() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    TimeSeries timeSeries1 = timeSeries0.createCopy(1, 1);
    boolean boolean0 = timeSeries1.equals(timeSeries0);
    assertEquals(""Value"", timeSeries1.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test111265() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    TimeSeries timeSeries1 = timeSeries0.createCopy(1, 1);
    boolean boolean0 = timeSeries1.equals(timeSeries0);
    assertEquals(""Time"", timeSeries1.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test111266() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    TimeSeries timeSeries1 = timeSeries0.createCopy(1, 1);
    boolean boolean0 = timeSeries1.equals(timeSeries0);
    assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public void add(RegularTimePeriod period, Number value) {
    // defer argument checking...
    add(period, value, true);
}","public void test112267() throws Throwable {
    Day day0 = new Day();
    Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
    TimeSeries timeSeries0 = new TimeSeries(day0, class0);
    Short short0 = new Short((short) 305);
    // Undeclared exception!
    try {
        timeSeries0.add((RegularTimePeriod) day0, (Number) short0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // You are trying to add data where the time period class is org.jfree.data.time.Day, but the TimeSeries is expecting an instance of java.time.chrono.ChronoLocalDate.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}","/**
 * Adds a new data item to the series and sends
 * a {@link org.jfree.data.general.SeriesChangeEvent} to all registered
 * listeners.
 *
 * @param period  the time period (<code>null</code> not permitted).
 * @param value  the value (<code>null</code> permitted).
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test113268() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    TimeSeries timeSeries1 = (TimeSeries) timeSeries0.clone();
    assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test113269() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    TimeSeries timeSeries1 = (TimeSeries) timeSeries0.clone();
    assertEquals(""Value"", timeSeries1.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test113270() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    TimeSeries timeSeries1 = (TimeSeries) timeSeries0.clone();
    assertEquals(""Time"", timeSeries1.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test113271() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    TimeSeries timeSeries1 = (TimeSeries) timeSeries0.clone();
    assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public Object clone() throws CloneNotSupportedException {
    TimeSeries clone = (TimeSeries) super.clone();
    clone.data = (List) ObjectUtilities.deepClone(this.data);
    return clone;
}","public void test113272() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    TimeSeries timeSeries1 = (TimeSeries) timeSeries0.clone();
    assertNotSame(timeSeries1, timeSeries0);
}","/**
 * Returns a clone of the time series.
 * <P>
 * Notes:
 * <ul>
 *   <li>no need to clone the domain and range descriptions, since String
 *     object is immutable;</li>
 *   <li>we pass over to the more general method clone(start, end).</li>
 * </ul>
 *
 * @return A clone of the time series.
 *
 * @throws CloneNotSupportedException not thrown by this class, but
 *         subclasses may differ.
 */"
"public void add(RegularTimePeriod period, double value) {
    // defer argument checking...
    add(period, value, true);
}","public void test114273() throws Throwable {
    Minute minute0 = new Minute();
    Class<String> class0 = String.class;
    TimeSeries timeSeries0 = new TimeSeries(minute0, ""java.lang.Class"", ""java.lang.Class"", class0);
    // Undeclared exception!
    try {
        timeSeries0.add((RegularTimePeriod) null, (-2.147483648E9));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'period' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeriesDataItem"", e);
    }
}","/**
 * Adds a new data item to the series and sends a {@link SeriesChangeEvent}
 * to all registered listeners.
 *
 * @param period  the time period (<code>null</code> not permitted).
 * @param value  the value.
 */"
"public int getItemCount() {
    return this.data.size();
}","public void test115274() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    BigInteger bigInteger0 = BigInteger.ZERO;
    timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0, true);
    timeSeries0.getValue((RegularTimePeriod) day0);
    assertEquals(1, timeSeries0.getItemCount());
}","/**
 * Returns the number of items in the series.
 *
 * @return The item count.
 */"
"public RegularTimePeriod getNextTimePeriod() {
    RegularTimePeriod last = getTimePeriod(getItemCount() - 1);
    return last.next();
}","public void test116275() throws Throwable {
    SerialDate serialDate0 = SerialDate.createInstance((int) (byte) 100);
    Class<TimeSeries> class0 = TimeSeries.class;
    TimeSeries timeSeries0 = new TimeSeries(serialDate0, class0);
    // Undeclared exception!
    try {
        timeSeries0.getNextTimePeriod();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * Returns a time period that would be the next in sequence on the end of
 * the time series.
 *
 * @return The next time period.
 */"
"public int getItemCount() {
    return this.data.size();
}","public void test117276() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) 1392409281320L);
    timeSeries0.getTimePeriods();
    assertEquals(1, timeSeries0.getItemCount());
}","/**
 * Returns the number of items in the series.
 *
 * @return The item count.
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test118277() throws Throwable {
    Quarter quarter0 = new Quarter();
    Class<Minute> class0 = Minute.class;
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""org.jfree.data.time.RegularTimePeriod"", ""org.jfree.data.time.RegularTimePeriod"", class0);
    int int0 = timeSeries0.getMaximumItemCount();
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test118278() throws Throwable {
    Quarter quarter0 = new Quarter();
    Class<Minute> class0 = Minute.class;
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""org.jfree.data.time.RegularTimePeriod"", ""org.jfree.data.time.RegularTimePeriod"", class0);
    int int0 = timeSeries0.getMaximumItemCount();
    assertEquals(Integer.MAX_VALUE, int0);
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test118279() throws Throwable {
    Quarter quarter0 = new Quarter();
    Class<Minute> class0 = Minute.class;
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""org.jfree.data.time.RegularTimePeriod"", ""org.jfree.data.time.RegularTimePeriod"", class0);
    int int0 = timeSeries0.getMaximumItemCount();
    assertEquals(""org.jfree.data.time.RegularTimePeriod"", timeSeries0.getDomainDescription());
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test118280() throws Throwable {
    Quarter quarter0 = new Quarter();
    Class<Minute> class0 = Minute.class;
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""org.jfree.data.time.RegularTimePeriod"", ""org.jfree.data.time.RegularTimePeriod"", class0);
    int int0 = timeSeries0.getMaximumItemCount();
    assertEquals(""org.jfree.data.time.RegularTimePeriod"", timeSeries0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public void update(int index, Number value) {
    TimeSeriesDataItem item = getDataItem(index);
    item.setValue(value);
    fireSeriesChanged();
}","public void test119281() throws Throwable {
    MockDate mockDate0 = new MockDate(0, 1997, (-1375), 3, 3);
    OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-211.3533), 295.78733, 0, (-211.3533), 820.5191593314);
    Class<Minute> class0 = Minute.class;
    TimeSeries timeSeries0 = new TimeSeries(oHLCDataItem0, class0);
    // Undeclared exception!
    try {
        timeSeries0.update((-739), (Number) null);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * Updates (changes) the value of a data item.
 *
 * @param index  the index of the data item.
 * @param value  the new value (<code>null</code> permitted).
 */"
"public int getMaximumItemCount() {
    return this.maximumItemCount;
}","public void test120282() throws Throwable {
    Quarter quarter0 = new Quarter();
    Class<Minute> class0 = Minute.class;
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""org.jfree.data.time.RegularTimePeriod"", ""org.jfree.data.time.RegularTimePeriod"", class0);
    String string0 = timeSeries0.getDomainDescription();
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}","/**
 * Returns the maximum number of items that will be retained in the series.
 * The default value is <code>Integer.MAX_VALUE</code>.
 *
 * @return The maximum item count.
 *
 * @see #setMaximumItemCount(int)
 */"
"public String getRangeDescription() {
    return this.range;
}","public void test120283() throws Throwable {
    Quarter quarter0 = new Quarter();
    Class<Minute> class0 = Minute.class;
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""org.jfree.data.time.RegularTimePeriod"", ""org.jfree.data.time.RegularTimePeriod"", class0);
    String string0 = timeSeries0.getDomainDescription();
    assertEquals(""org.jfree.data.time.RegularTimePeriod"", timeSeries0.getRangeDescription());
}","/**
 * Returns the range description.
 *
 * @return The range description (possibly <code>null</code>).
 *
 * @see #setRangeDescription(String)
 */"
"public String getDomainDescription() {
    return this.domain;
}","public void test120284() throws Throwable {
    Quarter quarter0 = new Quarter();
    Class<Minute> class0 = Minute.class;
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""org.jfree.data.time.RegularTimePeriod"", ""org.jfree.data.time.RegularTimePeriod"", class0);
    String string0 = timeSeries0.getDomainDescription();
    assertEquals(""org.jfree.data.time.RegularTimePeriod"", string0);
}","/**
 * Returns the domain description.
 *
 * @return The domain description (possibly <code>null</code>).
 *
 * @see #setDomainDescription(String)
 */"
"public long getMaximumItemAge() {
    return this.maximumItemAge;
}","public void test120285() throws Throwable {
    Quarter quarter0 = new Quarter();
    Class<Minute> class0 = Minute.class;
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""org.jfree.data.time.RegularTimePeriod"", ""org.jfree.data.time.RegularTimePeriod"", class0);
    String string0 = timeSeries0.getDomainDescription();
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}","/**
 * Returns the maximum item age (in time periods) for the series.
 *
 * @return The maximum item age.
 *
 * @see #setMaximumItemAge(long)
 */"
