focal_method,test_prefix,docstring
"public int getRendererCount() {
    return this.renderers.size();
}","public void test0000() throws Throwable {
    DateAxis dateAxis0 = new DateAxis(""lM'8h(1mMLzI:\""'G"");
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
    XYBubbleRenderer xYBubbleRenderer0 = new XYBubbleRenderer();
    combinedDomainXYPlot0.setRenderer(1607, (XYItemRenderer) xYBubbleRenderer0);
    assertEquals(1608, combinedDomainXYPlot0.getRendererCount());
}","/**
 * Returns the number of renderer slots for this plot.
 *
 * @return The number of renderer slots.
 *
 * @since 1.0.11
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test0011() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    combinedRangeXYPlot0.mapDatasetToRangeAxis(1114, 1114);
    assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test0012() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    combinedRangeXYPlot0.mapDatasetToRangeAxis(1114, 1114);
    assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test0013() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    combinedRangeXYPlot0.mapDatasetToRangeAxis(1114, 1114);
    assertEquals(1, combinedRangeXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public int getWeight() {
    return this.weight;
}","public void test0024() throws Throwable {
    MockDate mockDate0 = new MockDate();
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1781), ""cQC|40!,Z2D`'!A0{"");
    Minute minute0 = new Minute(mockDate0, simpleTimeZone0);
    PeriodAxis periodAxis0 = new PeriodAxis(""+9lOI"", minute0, minute0);
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
    Color color0 = (Color) MeterPlot.DEFAULT_DIAL_BACKGROUND_PAINT;
    CategoryMarker categoryMarker0 = new CategoryMarker(0.0F, periodAxis0.DEFAULT_TICK_MARK_PAINT, combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE, color0, periodAxis0.DEFAULT_AXIS_LINE_STROKE, 0.0F);
    Layer layer0 = Layer.BACKGROUND;
    combinedRangeXYPlot0.addRangeMarker((Marker) categoryMarker0, layer0);
    assertEquals(1, combinedRangeXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test0025() throws Throwable {
    MockDate mockDate0 = new MockDate();
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1781), ""cQC|40!,Z2D`'!A0{"");
    Minute minute0 = new Minute(mockDate0, simpleTimeZone0);
    PeriodAxis periodAxis0 = new PeriodAxis(""+9lOI"", minute0, minute0);
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
    Color color0 = (Color) MeterPlot.DEFAULT_DIAL_BACKGROUND_PAINT;
    CategoryMarker categoryMarker0 = new CategoryMarker(0.0F, periodAxis0.DEFAULT_TICK_MARK_PAINT, combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE, color0, periodAxis0.DEFAULT_AXIS_LINE_STROKE, 0.0F);
    Layer layer0 = Layer.BACKGROUND;
    combinedRangeXYPlot0.addRangeMarker((Marker) categoryMarker0, layer0);
    assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test0036() throws Throwable {
    String[] stringArray0 = new String[0];
    SymbolAxis symbolAxis0 = new SymbolAxis(""Requires 'index' >= 0."", stringArray0);
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(symbolAxis0);
    CategoryMarker categoryMarker0 = new CategoryMarker(0.05);
    Layer layer0 = Layer.BACKGROUND;
    combinedDomainXYPlot0.addDomainMarker(500, (Marker) categoryMarker0, layer0);
    assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test0037() throws Throwable {
    String[] stringArray0 = new String[0];
    SymbolAxis symbolAxis0 = new SymbolAxis(""Requires 'index' >= 0."", stringArray0);
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(symbolAxis0);
    CategoryMarker categoryMarker0 = new CategoryMarker(0.05);
    Layer layer0 = Layer.BACKGROUND;
    combinedDomainXYPlot0.addDomainMarker(500, (Marker) categoryMarker0, layer0);
    assertEquals(1, combinedDomainXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test0048() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
    PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
    Rectangle2D rectangle2D0 = chartRenderingInfo0.getChartArea();
    RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_RIGHT;
    Point2D point2D0 = RectangleAnchor.coordinates(rectangle2D0, rectangleAnchor0);
    combinedRangeXYPlot0.zoomDomainAxes(1098.1, 1098.1, plotRenderingInfo0, point2D0);
    assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test0049() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
    PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
    Rectangle2D rectangle2D0 = chartRenderingInfo0.getChartArea();
    RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_RIGHT;
    Point2D point2D0 = RectangleAnchor.coordinates(rectangle2D0, rectangleAnchor0);
    combinedRangeXYPlot0.zoomDomainAxes(1098.1, 1098.1, plotRenderingInfo0, point2D0);
    assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test00410() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
    PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
    Rectangle2D rectangle2D0 = chartRenderingInfo0.getChartArea();
    RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_RIGHT;
    Point2D point2D0 = RectangleAnchor.coordinates(rectangle2D0, rectangleAnchor0);
    combinedRangeXYPlot0.zoomDomainAxes(1098.1, 1098.1, plotRenderingInfo0, point2D0);
    assertEquals(1, combinedRangeXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test00511() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
    PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
    combinedDomainXYPlot0.handleClick(5, 500, plotRenderingInfo0);
    assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test00512() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
    PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
    combinedDomainXYPlot0.handleClick(5, 500, plotRenderingInfo0);
    assertEquals(1, combinedDomainXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test00613() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    xYPlot0.getRangeAxis();
    assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test00614() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    xYPlot0.getRangeAxis();
    assertEquals(1, xYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public void zoomRangeAxes(double lowerPercent, double upperPercent, PlotRenderingInfo info, Point2D source) {
    // delegate 'info' and 'source' argument checks...
    XYPlot subplot = findSubplot(info, source);
    if (subplot != null) {
        subplot.zoomRangeAxes(lowerPercent, upperPercent, info, source);
    } else {
        // if the source point doesn't fall within a subplot, we do the
        // zoom on all subplots...
        Iterator iterator = getSubplots().iterator();
        while (iterator.hasNext()) {
            subplot = (XYPlot) iterator.next();
            subplot.zoomRangeAxes(lowerPercent, upperPercent, info, source);
        }
    }
}","public void test00715() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    Point2D point2D0 = RectangleAnchor.coordinates((Rectangle2D) null, (RectangleAnchor) null);
    // Undeclared exception!
    try {
        combinedDomainXYPlot0.zoomRangeAxes(0.0, 735.223704, (PlotRenderingInfo) null, point2D0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'info' argument.
        //
        verifyException(""org.jfree.chart.plot.CombinedDomainXYPlot"", e);
    }
}","/**
 * Zooms in on the range axes.
 *
 * @param lowerPercent  the lower bound.
 * @param upperPercent  the upper bound.
 * @param info  the plot rendering info (<code>null</code> not permitted).
 * @param source  the source point (<code>null</code> not permitted).
 */"
"public void setDomainAxis(int index, ValueAxis axis) {
    setDomainAxis(index, axis, true);
}","public void test00816() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    NumberAxis3D numberAxis3D0 = new NumberAxis3D("""");
    // Undeclared exception!
    try {
        xYPlot0.setDomainAxis((-1), (ValueAxis) numberAxis3D0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Requires index >= 0.
        //
        verifyException(""org.jfree.chart.util.AbstractObjectList"", e);
    }
}","/**
 * Sets a domain axis and sends a {@link PlotChangeEvent} to all
 * registered listeners.
 *
 * @param index  the axis index.
 * @param axis  the axis (<code>null</code> permitted).
 *
 * @see #getDomainAxis(int)
 * @see #setRangeAxis(int, ValueAxis)
 */"
"public void addRangeMarker(int index, Marker marker, Layer layer, boolean notify) {
    Collection markers;
    if (layer == Layer.FOREGROUND) {
        markers = (Collection) this.foregroundRangeMarkers.get(new Integer(index));
        if (markers == null) {
            markers = new java.util.ArrayList();
            this.foregroundRangeMarkers.put(new Integer(index), markers);
        }
        markers.add(marker);
    } else if (layer == Layer.BACKGROUND) {
        markers = (Collection) this.backgroundRangeMarkers.get(new Integer(index));
        if (markers == null) {
            markers = new java.util.ArrayList();
            this.backgroundRangeMarkers.put(new Integer(index), markers);
        }
        markers.add(marker);
    }
    marker.addChangeListener(this);
    if (notify) {
        fireChangeEvent();
    }
}","public void test00917() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    // Undeclared exception!
    try {
        combinedRangeXYPlot0.addRangeMarker(4893, (Marker) null, (Layer) null, true);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jfree.chart.plot.XYPlot"", e);
    }
}","/**
 * Adds a marker for a specific dataset/renderer and, if requested, sends a
 * {@link PlotChangeEvent} to all registered listeners.
 * <P>
 * Typically a marker will be drawn by the renderer as a line perpendicular
 * to the range axis, however this is entirely up to the renderer.
 *
 * @param index  the dataset/renderer index.
 * @param marker  the marker.
 * @param layer  the layer (foreground or background).
 * @param notify  notify listeners?
 *
 * @since 1.0.10
 */"
"public XYPlot(XYDataset dataset, ValueAxis domainAxis, ValueAxis rangeAxis, XYItemRenderer renderer) {
    super();
    this.orientation = PlotOrientation.VERTICAL;
    // only relevant when this is a subplot
    this.weight = 1;
    this.axisOffset = new RectangleInsets(4.0, 4.0, 4.0, 4.0);
    // allocate storage for datasets, axes and renderers (all optional)
    this.domainAxes = new ObjectList();
    this.domainAxisLocations = new ObjectList();
    this.foregroundDomainMarkers = new HashMap();
    this.backgroundDomainMarkers = new HashMap();
    this.rangeAxes = new ObjectList();
    this.rangeAxisLocations = new ObjectList();
    this.foregroundRangeMarkers = new HashMap();
    this.backgroundRangeMarkers = new HashMap();
    this.datasets = new ObjectList();
    this.renderers = new ObjectList();
    this.datasetToDomainAxesMap = new TreeMap();
    this.datasetToRangeAxesMap = new TreeMap();
    this.annotations = new java.util.ArrayList();
    this.datasets.set(0, dataset);
    if (dataset != null) {
        dataset.addChangeListener(this);
    }
    this.renderers.set(0, renderer);
    if (renderer != null) {
        renderer.setPlot(this);
        renderer.addChangeListener(this);
    }
    this.domainAxes.set(0, domainAxis);
    this.mapDatasetToDomainAxis(0, 0);
    if (domainAxis != null) {
        domainAxis.setPlot(this);
        domainAxis.addChangeListener(this);
    }
    this.domainAxisLocations.set(0, AxisLocation.BOTTOM_OR_LEFT);
    this.rangeAxes.set(0, rangeAxis);
    this.mapDatasetToRangeAxis(0, 0);
    if (rangeAxis != null) {
        rangeAxis.setPlot(this);
        rangeAxis.addChangeListener(this);
    }
    this.rangeAxisLocations.set(0, AxisLocation.BOTTOM_OR_LEFT);
    configureDomainAxes();
    configureRangeAxes();
    this.domainGridlinesVisible = true;
    this.domainGridlineStroke = DEFAULT_GRIDLINE_STROKE;
    this.domainGridlinePaint = DEFAULT_GRIDLINE_PAINT;
    this.domainMinorGridlinesVisible = false;
    this.domainMinorGridlineStroke = DEFAULT_GRIDLINE_STROKE;
    this.domainMinorGridlinePaint = Color.white;
    this.domainZeroBaselineVisible = false;
    this.domainZeroBaselinePaint = Color.black;
    this.domainZeroBaselineStroke = new BasicStroke(0.5f);
    this.rangeGridlinesVisible = true;
    this.rangeGridlineStroke = DEFAULT_GRIDLINE_STROKE;
    this.rangeGridlinePaint = DEFAULT_GRIDLINE_PAINT;
    this.rangeMinorGridlinesVisible = false;
    this.rangeMinorGridlineStroke = DEFAULT_GRIDLINE_STROKE;
    this.rangeMinorGridlinePaint = Color.white;
    this.rangeZeroBaselineVisible = false;
    this.rangeZeroBaselinePaint = Color.black;
    this.rangeZeroBaselineStroke = new BasicStroke(0.5f);
    this.domainCrosshairVisible = false;
    this.domainCrosshairValue = 0.0;
    this.domainCrosshairStroke = DEFAULT_CROSSHAIR_STROKE;
    this.domainCrosshairPaint = DEFAULT_CROSSHAIR_PAINT;
    this.rangeCrosshairVisible = false;
    this.rangeCrosshairValue = 0.0;
    this.rangeCrosshairStroke = DEFAULT_CROSSHAIR_STROKE;
    this.rangeCrosshairPaint = DEFAULT_CROSSHAIR_PAINT;
}","public void test01018() throws Throwable {
    XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
    PeriodAxis periodAxis0 = new PeriodAxis(""N~IO2 dKo1e4%9%$Iz9"");
    StackedXYAreaRenderer2 stackedXYAreaRenderer2_0 = new StackedXYAreaRenderer2();
    XYPlot xYPlot0 = null;
    try {
        xYPlot0 = new XYPlot(xYIntervalSeriesCollection0, periodAxis0, periodAxis0, stackedXYAreaRenderer2_0);
        fail(""Expecting exception: ClassCastException"");
    } catch (ClassCastException e) {
        //
        // org.jfree.data.xy.XYIntervalSeriesCollection cannot be cast to org.jfree.data.xy.TableXYDataset
        //
        verifyException(""org.jfree.chart.renderer.xy.StackedXYAreaRenderer2"", e);
    }
}","/**
 * Creates a new plot with the specified dataset, axes and renderer.  Any
 * of the arguments can be <code>null</code>, but in that case you should
 * take care to specify the value before using the plot (otherwise a
 * <code>NullPointerException</code> may be thrown).
 *
 * @param dataset  the dataset (<code>null</code> permitted).
 * @param domainAxis  the domain axis (<code>null</code> permitted).
 * @param rangeAxis  the range axis (<code>null</code> permitted).
 * @param renderer  the renderer (<code>null</code> permitted).
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test01119() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    XYPlot xYPlot1 = (XYPlot) xYPlot0.clone();
    assertTrue(xYPlot1.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test01120() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    XYPlot xYPlot1 = (XYPlot) xYPlot0.clone();
    assertEquals(1, xYPlot1.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public double getLowerBound() {
    return this.range.getLowerBound();
}","public void test01221() throws Throwable {
    Year year0 = new Year();
    DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, (-70), year0);
    String[] stringArray0 = new String[3];
    SymbolAxis symbolAxis0 = new SymbolAxis(""Z>,0][>mO{["", stringArray0);
    StandardXYZToolTipGenerator standardXYZToolTipGenerator0 = new StandardXYZToolTipGenerator();
    StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer(4, standardXYZToolTipGenerator0, (XYURLGenerator) null);
    XYPlot xYPlot0 = new XYPlot(dynamicTimeSeriesCollection0, symbolAxis0, symbolAxis0, standardXYItemRenderer0);
    StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
    PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
    Point point0 = new Point(0, 10);
    xYPlot0.zoomRangeAxes((double) 3, plotRenderingInfo0, (Point2D) point0, false);
    assertEquals((-3.5), symbolAxis0.getLowerBound(), 0.01);
}","/**
 * Returns the lower bound of the axis range.
 *
 * @return The lower bound.
 *
 * @see #setLowerBound(double)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test01222() throws Throwable {
    Year year0 = new Year();
    DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, (-70), year0);
    String[] stringArray0 = new String[3];
    SymbolAxis symbolAxis0 = new SymbolAxis(""Z>,0][>mO{["", stringArray0);
    StandardXYZToolTipGenerator standardXYZToolTipGenerator0 = new StandardXYZToolTipGenerator();
    StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer(4, standardXYZToolTipGenerator0, (XYURLGenerator) null);
    XYPlot xYPlot0 = new XYPlot(dynamicTimeSeriesCollection0, symbolAxis0, symbolAxis0, standardXYItemRenderer0);
    StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
    PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
    Point point0 = new Point(0, 10);
    xYPlot0.zoomRangeAxes((double) 3, plotRenderingInfo0, (Point2D) point0, false);
    assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test01323() throws Throwable {
    PeriodAxis periodAxis0 = new PeriodAxis((String) null);
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(periodAxis0);
    combinedDomainXYPlot0.setFixedRangeAxisSpace((AxisSpace) null, true);
    assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test01324() throws Throwable {
    PeriodAxis periodAxis0 = new PeriodAxis((String) null);
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(periodAxis0);
    combinedDomainXYPlot0.setFixedRangeAxisSpace((AxisSpace) null, true);
    assertEquals(1, combinedDomainXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public double getRangeCrosshairValue() {
    return this.rangeCrosshairValue;
}","public void test01425() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    combinedDomainXYPlot0.setRangeCrosshairValue(0.2, false);
    assertEquals(0.2, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
}","/**
 * Returns the range crosshair value.
 *
 * @return The value.
 *
 * @see #setRangeCrosshairValue(double)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test01526() throws Throwable {
    DateAxis dateAxis0 = new DateAxis(""}1e(abVox"");
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
    combinedDomainXYPlot0.setDomainCrosshairValue(3252.212, true);
    assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test01527() throws Throwable {
    DateAxis dateAxis0 = new DateAxis(""}1e(abVox"");
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
    combinedDomainXYPlot0.setDomainCrosshairValue(3252.212, true);
    assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test01628() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2455.0, ""Null 'insets' argument."");
    DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
    DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(cyclicNumberAxis0, defaultKeyedValuesDataset0);
    combinedDomainXYPlot0.datasetChanged(datasetChangeEvent0);
    assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test01629() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2455.0, ""Null 'insets' argument."");
    DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
    DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(cyclicNumberAxis0, defaultKeyedValuesDataset0);
    combinedDomainXYPlot0.datasetChanged(datasetChangeEvent0);
    assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public double getLowerBound() {
    return this.range.getLowerBound();
}","public void test01730() throws Throwable {
    DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
    NumberAxis numberAxis0 = new NumberAxis(""fcs[#>"");
    StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
    XYPlot xYPlot0 = new XYPlot(defaultTableXYDataset0, numberAxis0, numberAxis0, stackedXYAreaRenderer0);
    xYPlot0.getDataRange((ValueAxis) null);
    assertEquals((-5.0E-9), numberAxis0.getLowerBound(), 0.01);
}","/**
 * Returns the lower bound of the axis range.
 *
 * @return The lower bound.
 *
 * @see #setLowerBound(double)
 */"
"public double getUpperBound() {
    return this.range.getUpperBound();
}","public void test01731() throws Throwable {
    DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
    NumberAxis numberAxis0 = new NumberAxis(""fcs[#>"");
    StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
    XYPlot xYPlot0 = new XYPlot(defaultTableXYDataset0, numberAxis0, numberAxis0, stackedXYAreaRenderer0);
    xYPlot0.getDataRange((ValueAxis) null);
    assertEquals(5.0E-9, numberAxis0.getUpperBound(), 0.01);
}","/**
 * Returns the upper bound for the axis range.
 *
 * @return The upper bound.
 *
 * @see #setUpperBound(double)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test01832() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    xYPlot0.getDataRange((ValueAxis) null);
    assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test01833() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    xYPlot0.getDataRange((ValueAxis) null);
    assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public int getRangeAxisIndex(ValueAxis axis) {
    int result = this.rangeAxes.indexOf(axis);
    if (result < 0) {
        // try the parent plot
        Plot parent = getParent();
        if (parent instanceof XYPlot) {
            XYPlot p = (XYPlot) parent;
            result = p.getRangeAxisIndex(axis);
        }
    }
    return result;
}","public void test01934() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("""");
    int int0 = combinedRangeXYPlot0.getRangeAxisIndex(logarithmicAxis0);
    assertEquals((-1), int0);
}","/**
 * Returns the index of the given range axis.
 *
 * @param axis  the axis.
 *
 * @return The axis index.
 *
 * @see #getDomainAxisIndex(ValueAxis)
 */"
"public double getLowerBound() {
    return this.range.getLowerBound();
}","public void test02035() throws Throwable {
    DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
    NumberAxis numberAxis0 = new NumberAxis(""fcs[#>"");
    StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
    XYPlot xYPlot0 = new XYPlot(defaultTableXYDataset0, numberAxis0, numberAxis0, stackedXYAreaRenderer0);
    int int0 = xYPlot0.getDomainAxisIndex(numberAxis0);
    assertEquals((-5.0E-9), numberAxis0.getLowerBound(), 0.01);
}","/**
 * Returns the lower bound of the axis range.
 *
 * @return The lower bound.
 *
 * @see #setLowerBound(double)
 */"
"public int getDomainAxisIndex(ValueAxis axis) {
    int result = this.domainAxes.indexOf(axis);
    if (result < 0) {
        // try the parent plot
        Plot parent = getParent();
        if (parent instanceof XYPlot) {
            XYPlot p = (XYPlot) parent;
            result = p.getDomainAxisIndex(axis);
        }
    }
    return result;
}","public void test02036() throws Throwable {
    DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
    NumberAxis numberAxis0 = new NumberAxis(""fcs[#>"");
    StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
    XYPlot xYPlot0 = new XYPlot(defaultTableXYDataset0, numberAxis0, numberAxis0, stackedXYAreaRenderer0);
    int int0 = xYPlot0.getDomainAxisIndex(numberAxis0);
    assertEquals(0, int0);
}","/**
 * Returns the index of the given domain axis.
 *
 * @param axis  the axis.
 *
 * @return The axis index.
 *
 * @see #getRangeAxisIndex(ValueAxis)
 */"
"public int getDomainAxisIndex(ValueAxis axis) {
    int result = this.domainAxes.indexOf(axis);
    if (result < 0) {
        // try the parent plot
        Plot parent = getParent();
        if (parent instanceof XYPlot) {
            XYPlot p = (XYPlot) parent;
            result = p.getDomainAxisIndex(axis);
        }
    }
    return result;
}","public void test02137() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    NumberAxis3D numberAxis3D0 = new NumberAxis3D();
    int int0 = combinedDomainXYPlot0.getDomainAxisIndex(numberAxis3D0);
    assertEquals((-1), int0);
}","/**
 * Returns the index of the given domain axis.
 *
 * @param axis  the axis.
 *
 * @return The axis index.
 *
 * @see #getRangeAxisIndex(ValueAxis)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test02138() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    NumberAxis3D numberAxis3D0 = new NumberAxis3D();
    int int0 = combinedDomainXYPlot0.getDomainAxisIndex(numberAxis3D0);
    assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test02139() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    NumberAxis3D numberAxis3D0 = new NumberAxis3D();
    int int0 = combinedDomainXYPlot0.getDomainAxisIndex(numberAxis3D0);
    assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test02240() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
    XYDrawableAnnotation xYDrawableAnnotation0 = new XYDrawableAnnotation(0.4, 10, 0.35, 10, (-904.71297004), jFreeChart0);
    boolean boolean0 = xYPlot0.removeAnnotation((XYAnnotation) xYDrawableAnnotation0, true);
    assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test02241() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
    XYDrawableAnnotation xYDrawableAnnotation0 = new XYDrawableAnnotation(0.4, 10, 0.35, 10, (-904.71297004), jFreeChart0);
    boolean boolean0 = xYPlot0.removeAnnotation((XYAnnotation) xYDrawableAnnotation0, true);
    assertEquals(1, xYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean removeAnnotation(XYAnnotation annotation, boolean notify) {
    if (annotation == null) {
        throw new IllegalArgumentException(""Null 'annotation' argument."");
    }
    boolean removed = this.annotations.remove(annotation);
    if (removed && notify) {
        fireChangeEvent();
    }
    return removed;
}","public void test02242() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
    XYDrawableAnnotation xYDrawableAnnotation0 = new XYDrawableAnnotation(0.4, 10, 0.35, 10, (-904.71297004), jFreeChart0);
    boolean boolean0 = xYPlot0.removeAnnotation((XYAnnotation) xYDrawableAnnotation0, true);
    assertFalse(boolean0);
}","/**
 * Removes an annotation from the plot and sends a {@link PlotChangeEvent}
 * to all registered listeners.
 *
 * @param annotation  the annotation (<code>null</code> not permitted).
 * @param notify  notify listeners?
 *
 * @return A boolean (indicates whether or not the annotation was removed).
 *
 * @since 1.0.10
 */"
"public int getWeight() {
    return this.weight;
}","public void test02343() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    CategoryMarker categoryMarker0 = new CategoryMarker(1.0F);
    Layer layer0 = Layer.FOREGROUND;
    combinedRangeXYPlot0.addRangeMarker(163, (Marker) categoryMarker0, layer0, false);
    assertEquals(1, combinedRangeXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public int getWeight() {
    return this.weight;
}","public void test02444() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    Layer layer0 = Layer.FOREGROUND;
    IntervalMarker intervalMarker0 = new IntervalMarker((-980.914558), 0.0);
    boolean boolean0 = combinedRangeXYPlot0.removeDomainMarker(817, (Marker) intervalMarker0, layer0, true);
    assertEquals(1, combinedRangeXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test02445() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    Layer layer0 = Layer.FOREGROUND;
    IntervalMarker intervalMarker0 = new IntervalMarker((-980.914558), 0.0);
    boolean boolean0 = combinedRangeXYPlot0.removeDomainMarker(817, (Marker) intervalMarker0, layer0, true);
    assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public boolean removeDomainMarker(int index, Marker marker, Layer layer, boolean notify) {
    ArrayList markers;
    if (layer == Layer.FOREGROUND) {
        markers = (ArrayList) this.foregroundDomainMarkers.get(new Integer(index));
    } else {
        markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer(index));
    }
    if (markers == null) {
        return false;
    }
    boolean removed = markers.remove(marker);
    if (removed && notify) {
        fireChangeEvent();
    }
    return removed;
}","public void test02446() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    Layer layer0 = Layer.FOREGROUND;
    IntervalMarker intervalMarker0 = new IntervalMarker((-980.914558), 0.0);
    boolean boolean0 = combinedRangeXYPlot0.removeDomainMarker(817, (Marker) intervalMarker0, layer0, true);
    assertFalse(boolean0);
}","/**
 * Removes a marker for a specific dataset/renderer and, if requested,
 * sends a {@link PlotChangeEvent} to all registered listeners.
 *
 * @param index  the dataset/renderer index.
 * @param marker  the marker.
 * @param layer  the layer (foreground or background).
 * @param notify  notify listeners?
 *
 * @return A boolean indicating whether or not the marker was actually
 *         removed.
 *
 * @since 1.0.10
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test02547() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    ValueMarker valueMarker0 = new ValueMarker(Double.POSITIVE_INFINITY, combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_STROKE);
    Layer layer0 = Layer.BACKGROUND;
    combinedRangeXYPlot0.removeDomainMarker(10, (Marker) valueMarker0, layer0, false);
    assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test02548() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    ValueMarker valueMarker0 = new ValueMarker(Double.POSITIVE_INFINITY, combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_STROKE);
    Layer layer0 = Layer.BACKGROUND;
    combinedRangeXYPlot0.removeDomainMarker(10, (Marker) valueMarker0, layer0, false);
    assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test02649() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    combinedRangeXYPlot0.getRenderer(0);
    assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test02650() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    combinedRangeXYPlot0.getRenderer(0);
    assertEquals(1, combinedRangeXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public void mapDatasetToDomainAxes(int index, List axisIndices) {
    if (index < 0) {
        throw new IllegalArgumentException(""Requires 'index' >= 0."");
    }
    checkAxisIndices(axisIndices);
    Integer key = new Integer(index);
    this.datasetToDomainAxesMap.put(key, new ArrayList(axisIndices));
    // fake a dataset change event to update axes...
    datasetChanged(new DatasetChangeEvent(this, getDataset(index)));
}","public void test02751() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    Vector<XYErrorRenderer> vector0 = new Vector<XYErrorRenderer>();
    // Undeclared exception!
    try {
        combinedRangeXYPlot0.mapDatasetToDomainAxes(0, vector0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Empty list not permitted.
        //
        verifyException(""org.jfree.chart.plot.XYPlot"", e);
    }
}","/**
 * Maps the specified dataset to the axes in the list.  Note that the
 * conversion of data values into Java2D space is always performed using
 * the first axis in the list.
 *
 * @param index  the dataset index (zero-based).
 * @param axisIndices  the axis indices (<code>null</code> permitted).
 *
 * @since 1.0.12
 */"
"public int getDatasetCount() {
    return this.datasets.size();
}","public void test02852() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(1.0F);
    combinedRangeXYPlot0.setDataset(0, (XYDataset) simpleHistogramDataset0);
    assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
}","/**
 * Returns the number of datasets.
 *
 * @return The number of datasets.
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test02853() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(1.0F);
    combinedRangeXYPlot0.setDataset(0, (XYDataset) simpleHistogramDataset0);
    assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public void setDataset(int index, XYDataset dataset) {
    XYDataset existing = getDataset(index);
    if (existing != null) {
        existing.removeChangeListener(this);
    }
    this.datasets.set(index, dataset);
    if (dataset != null) {
        dataset.addChangeListener(this);
    }
    // send a dataset change event to self...
    DatasetChangeEvent event = new DatasetChangeEvent(this, dataset);
    datasetChanged(event);
}","public void test02954() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection((MatrixSeries) null);
    // Undeclared exception!
    try {
        combinedDomainXYPlot0.setDataset((-2861), (XYDataset) matrixSeriesCollection0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Requires index >= 0.
        //
        verifyException(""org.jfree.chart.util.AbstractObjectList"", e);
    }
}","/**
 * Sets a dataset for the plot.
 *
 * @param index  the dataset index.
 * @param dataset  the dataset (<code>null</code> permitted).
 *
 * @see #getDataset(int)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test03055() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation(459);
    assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public AxisLocation getRangeAxisLocation(int index) {
    AxisLocation result = null;
    if (index < this.rangeAxisLocations.size()) {
        result = (AxisLocation) this.rangeAxisLocations.get(index);
    }
    if (result == null) {
        result = AxisLocation.getOpposite(getRangeAxisLocation());
    }
    return result;
}","public void test03056() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation(459);
    assertNotNull(axisLocation0);
}","/**
 * Returns the location for a range axis.  If this hasn't been set
 * explicitly, the method returns the location that is opposite to the
 * primary range axis location.
 *
 * @param index  the axis index.
 *
 * @return The location (never <code>null</code>).
 *
 * @see #setRangeAxisLocation(int, AxisLocation)
 */"
"public int getRangeAxisCount() {
    return this.rangeAxes.size();
}","public void test03157() throws Throwable {
    NumberAxis3D numberAxis3D0 = new NumberAxis3D();
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
    combinedDomainXYPlot0.setRangeAxis(500, (ValueAxis) null, false);
    assertEquals(501, combinedDomainXYPlot0.getRangeAxisCount());
}","/**
 * Returns the number of range axes.
 *
 * @return The axis count.
 *
 * @see #getDomainAxisCount()
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test03258() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    combinedDomainXYPlot0.getRangeAxis((-1611));
    assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test03359() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
    combinedDomainXYPlot0.setDomainAxisLocation(200, axisLocation0, true);
    assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test03360() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
    combinedDomainXYPlot0.setDomainAxisLocation(200, axisLocation0, true);
    assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public double getLowerBound() {
    return this.range.getLowerBound();
}","public void test03461() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, (-1956.2458428825128));
    combinedRangeXYPlot0.setDomainAxis(10, (ValueAxis) cyclicNumberAxis0, true);
    assertEquals((-9.0), cyclicNumberAxis0.getLowerBound(), 0.01);
}","/**
 * Returns the lower bound of the axis range.
 *
 * @return The lower bound.
 *
 * @see #setLowerBound(double)
 */"
"public int getDomainAxisCount() {
    return this.domainAxes.size();
}","public void test03462() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, (-1956.2458428825128));
    combinedRangeXYPlot0.setDomainAxis(10, (ValueAxis) cyclicNumberAxis0, true);
    assertEquals(11, combinedRangeXYPlot0.getDomainAxisCount());
}","/**
 * Returns the number of domain axes.
 *
 * @return The axis count.
 *
 * @see #getRangeAxisCount()
 */"
"public void setDomainAxis(int index, ValueAxis axis, boolean notify) {
    ValueAxis existing = getDomainAxis(index);
    if (existing != null) {
        existing.removeChangeListener(this);
    }
    if (axis != null) {
        axis.setPlot(this);
    }
    this.domainAxes.set(index, axis);
    if (axis != null) {
        axis.configure();
        axis.addChangeListener(this);
    }
    if (notify) {
        fireChangeEvent();
    }
}","public void test03563() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, (-1956.2458428825128));
    // Undeclared exception!
    try {
        combinedRangeXYPlot0.setDomainAxis((-3602), (ValueAxis) cyclicNumberAxis0, true);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Requires index >= 0.
        //
        verifyException(""org.jfree.chart.util.AbstractObjectList"", e);
    }
}","/**
 * Sets a domain axis and, if requested, sends a {@link PlotChangeEvent} to
 * all registered listeners.
 *
 * @param index  the axis index.
 * @param axis  the axis.
 * @param notify  notify listeners?
 *
 * @see #getDomainAxis(int)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test03664() throws Throwable {
    DateAxis dateAxis0 = new DateAxis(""="");
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
    combinedRangeXYPlot0.getDomainAxis(0);
    assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test03765() throws Throwable {
    NumberAxis numberAxis0 = new NumberAxis(""DHoDLjC].,yo"");
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
    combinedRangeXYPlot0.isDomainZoomable();
    assertEquals(1, combinedRangeXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test03766() throws Throwable {
    NumberAxis numberAxis0 = new NumberAxis(""DHoDLjC].,yo"");
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
    combinedRangeXYPlot0.isDomainZoomable();
    assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public void setRenderer(int index, XYItemRenderer renderer) {
    setRenderer(index, renderer, true);
}","public void test03867() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    XYBoxAndWhiskerRenderer xYBoxAndWhiskerRenderer0 = new XYBoxAndWhiskerRenderer();
    // Undeclared exception!
    try {
        combinedRangeXYPlot0.setRenderer((-93), (XYItemRenderer) xYBoxAndWhiskerRenderer0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Requires index >= 0.
        //
        verifyException(""org.jfree.chart.util.AbstractObjectList"", e);
    }
}","/**
 * Sets a renderer and sends a {@link PlotChangeEvent} to all
 * registered listeners.
 *
 * @param index  the index.
 * @param renderer  the renderer.
 *
 * @see #getRenderer(int)
 */"
"public void mapDatasetToRangeAxis(int index, int axisIndex) {
    List axisIndices = new java.util.ArrayList(1);
    axisIndices.add(new Integer(axisIndex));
    mapDatasetToRangeAxes(index, axisIndices);
}","public void test03968() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    // Undeclared exception!
    try {
        combinedDomainXYPlot0.mapDatasetToRangeAxis((-1), (-1));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Requires 'index' >= 0.
        //
        verifyException(""org.jfree.chart.plot.XYPlot"", e);
    }
}","/**
 * Maps a dataset to a particular range axis.  All data will be plotted
 * against axis zero by default, no mapping is required for this case.
 *
 * @param index  the dataset index (zero-based).
 * @param axisIndex  the axis index.
 *
 * @see #mapDatasetToDomainAxis(int, int)
 */"
"public AxisSpace getFixedRangeAxisSpace() {
    return this.fixedRangeAxisSpace;
}","public void test04069() throws Throwable {
    PeriodAxis periodAxis0 = new PeriodAxis((String) null);
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(periodAxis0);
    AxisSpace axisSpace0 = combinedDomainXYPlot0.getFixedRangeAxisSpace();
    assertNull(axisSpace0);
}","/**
 * Returns the fixed range axis space.
 *
 * @return The fixed range axis space (possibly <code>null</code>).
 *
 * @see #setFixedRangeAxisSpace(AxisSpace)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test04170() throws Throwable {
    MockDate mockDate0 = new MockDate();
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1781), ""cQC|40!,Z2D`'!A0{"");
    Minute minute0 = new Minute(mockDate0, simpleTimeZone0);
    PeriodAxis periodAxis0 = new PeriodAxis(""+9lOI"", minute0, minute0);
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
    combinedRangeXYPlot0.getDomainAxis();
    assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test04271() throws Throwable {
    DateAxis dateAxis0 = new DateAxis();
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
    combinedRangeXYPlot0.getFixedLegendItems();
    assertEquals(1, combinedRangeXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test04372() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    xYPlot0.getRangeAxisEdge();
    assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test04373() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    xYPlot0.getRangeAxisEdge();
    assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test04474() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10.0);
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
    combinedRangeXYPlot0.getFixedDomainAxisSpace();
    assertEquals(1, combinedRangeXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test04475() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10.0);
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
    combinedRangeXYPlot0.getFixedDomainAxisSpace();
    assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public int getRendererCount() {
    return this.renderers.size();
}","public void test04576() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    int int0 = combinedDomainXYPlot0.getRendererCount();
    assertEquals(1, int0);
}","/**
 * Returns the number of renderer slots for this plot.
 *
 * @return The number of renderer slots.
 *
 * @since 1.0.11
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test04677() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    boolean boolean0 = combinedDomainXYPlot0.isRangeZoomable();
    assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public boolean isRangeZoomable() {
    return true;
}","public void test04678() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    boolean boolean0 = combinedDomainXYPlot0.isRangeZoomable();
    assertTrue(boolean0);
}","/**
 * Returns <code>true</code>, indicating that the range axis/axes for this
 * plot are zoomable.
 *
 * @return A boolean.
 *
 * @see #isDomainZoomable()
 */"
"public int getWeight() {
    return this.weight;
}","public void test04679() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    boolean boolean0 = combinedDomainXYPlot0.isRangeZoomable();
    assertEquals(1, combinedDomainXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public int getDomainAxisCount() {
    return this.domainAxes.size();
}","public void test04780() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10.0, ""f<oJ!XU,"");
    combinedRangeXYPlot0.setDomainAxis(2, (ValueAxis) cyclicNumberAxis0);
    assertEquals(3, combinedRangeXYPlot0.getDomainAxisCount());
}","/**
 * Returns the number of domain axes.
 *
 * @return The axis count.
 *
 * @see #getRangeAxisCount()
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test04881() throws Throwable {
    LogAxis logAxis0 = new LogAxis("", "");
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logAxis0);
    combinedDomainXYPlot0.getRenderer();
    assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test04882() throws Throwable {
    LogAxis logAxis0 = new LogAxis("", "");
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logAxis0);
    combinedDomainXYPlot0.getRenderer();
    assertEquals(1, combinedDomainXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test04983() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    IntervalMarker intervalMarker0 = new IntervalMarker(0.0, 0.0);
    Layer layer0 = Layer.BACKGROUND;
    boolean boolean0 = combinedRangeXYPlot0.removeDomainMarker((-270), (Marker) intervalMarker0, layer0);
    assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public boolean removeDomainMarker(int index, Marker marker, Layer layer) {
    return removeDomainMarker(index, marker, layer, true);
}","public void test04984() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    IntervalMarker intervalMarker0 = new IntervalMarker(0.0, 0.0);
    Layer layer0 = Layer.BACKGROUND;
    boolean boolean0 = combinedRangeXYPlot0.removeDomainMarker((-270), (Marker) intervalMarker0, layer0);
    assertFalse(boolean0);
}","/**
 * Removes a marker for a specific dataset/renderer and sends a
 * {@link PlotChangeEvent} to all registered listeners.
 *
 * @param index the dataset/renderer index.
 * @param marker the marker.
 * @param layer the layer (foreground or background).
 *
 * @return A boolean indicating whether or not the marker was actually
 *         removed.
 *
 * @since 1.0.7
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test04985() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    IntervalMarker intervalMarker0 = new IntervalMarker(0.0, 0.0);
    Layer layer0 = Layer.BACKGROUND;
    boolean boolean0 = combinedRangeXYPlot0.removeDomainMarker((-270), (Marker) intervalMarker0, layer0);
    assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test04986() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    IntervalMarker intervalMarker0 = new IntervalMarker(0.0, 0.0);
    Layer layer0 = Layer.BACKGROUND;
    boolean boolean0 = combinedRangeXYPlot0.removeDomainMarker((-270), (Marker) intervalMarker0, layer0);
    assertEquals(1, combinedRangeXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public void addRangeMarker(int index, Marker marker, Layer layer) {
    addRangeMarker(index, marker, layer, true);
}","public void test05087() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    IntervalMarker intervalMarker0 = new IntervalMarker(0.05, (-1494.001655), combinedRangeXYPlot0.DEFAULT_CROSSHAIR_PAINT);
    Layer layer0 = Layer.FOREGROUND;
    combinedRangeXYPlot0.addRangeMarker(2, (Marker) intervalMarker0, layer0);
    assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
}","/**
 * Adds a marker for a specific dataset/renderer and sends a
 * {@link PlotChangeEvent} to all registered listeners.
 * <P>
 * Typically a marker will be drawn by the renderer as a line perpendicular
 * to the range axis, however this is entirely up to the renderer.
 *
 * @param index  the dataset/renderer index.
 * @param marker  the marker.
 * @param layer  the layer (foreground or background).
 *
 * @see #clearRangeMarkers(int)
 * @see #addDomainMarker(int, Marker, Layer)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test05188() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    combinedDomainXYPlot0.getDatasetCount();
    assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public ValueAxis getRangeAxis() {
    return getRangeAxis(0);
}","public void test05289() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    ValueAxis valueAxis0 = combinedRangeXYPlot0.getRangeAxis();
    assertNotNull(valueAxis0);
}","/**
 * Returns the range axis for the plot.  If the range axis for this plot is
 * <code>null</code>, then the method will return the parent plot's range
 * axis (if there is a parent plot).
 *
 * @return The range axis.
 *
 * @see #getRangeAxis(int)
 * @see #setRangeAxis(ValueAxis)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test05290() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    ValueAxis valueAxis0 = combinedRangeXYPlot0.getRangeAxis();
    assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test05291() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    ValueAxis valueAxis0 = combinedRangeXYPlot0.getRangeAxis();
    assertEquals(1, combinedRangeXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test05392() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    XYDotRenderer xYDotRenderer0 = new XYDotRenderer();
    xYPlot0.getIndexOf(xYDotRenderer0);
    assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test05393() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    XYDotRenderer xYDotRenderer0 = new XYDotRenderer();
    xYPlot0.getIndexOf(xYDotRenderer0);
    assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test05494() throws Throwable {
    DateAxis dateAxis0 = new DateAxis(""="");
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
    combinedRangeXYPlot0.clearSelection();
    assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test05495() throws Throwable {
    DateAxis dateAxis0 = new DateAxis(""="");
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
    combinedRangeXYPlot0.clearSelection();
    assertEquals(1, combinedRangeXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test05596() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    GeneralPath generalPath0 = new GeneralPath(combinedDomainXYPlot0.DEFAULT_LEGEND_ITEM_CIRCLE);
    Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(459, Float.POSITIVE_INFINITY, 264.31018F, (-61.768425F));
    ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null);
    combinedDomainXYPlot0.select(generalPath0, (Rectangle2D) rectangle2D_Float0, (RenderingSource) chartPanel0);
    assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test05597() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    GeneralPath generalPath0 = new GeneralPath(combinedDomainXYPlot0.DEFAULT_LEGEND_ITEM_CIRCLE);
    Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(459, Float.POSITIVE_INFINITY, 264.31018F, (-61.768425F));
    ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null);
    combinedDomainXYPlot0.select(generalPath0, (Rectangle2D) rectangle2D_Float0, (RenderingSource) chartPanel0);
    assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public double getLowerBound() {
    return this.range.getLowerBound();
}","public void test05698() throws Throwable {
    DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
    NumberAxis numberAxis0 = new NumberAxis(""fcs[#>"");
    StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
    XYPlot xYPlot0 = new XYPlot(defaultTableXYDataset0, numberAxis0, numberAxis0, stackedXYAreaRenderer0);
    xYPlot0.getLegendItems();
    assertEquals((-5.0E-9), numberAxis0.getLowerBound(), 0.01);
}","/**
 * Returns the lower bound of the axis range.
 *
 * @return The lower bound.
 *
 * @see #setLowerBound(double)
 */"
"public double getUpperBound() {
    return this.range.getUpperBound();
}","public void test05699() throws Throwable {
    DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
    NumberAxis numberAxis0 = new NumberAxis(""fcs[#>"");
    StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
    XYPlot xYPlot0 = new XYPlot(defaultTableXYDataset0, numberAxis0, numberAxis0, stackedXYAreaRenderer0);
    xYPlot0.getLegendItems();
    assertEquals(5.0E-9, numberAxis0.getUpperBound(), 0.01);
}","/**
 * Returns the upper bound for the axis range.
 *
 * @return The upper bound.
 *
 * @see #setUpperBound(double)
 */"
"public double getLowerBound() {
    return this.range.getLowerBound();
}","public void test057100() throws Throwable {
    DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
    NumberAxis numberAxis0 = new NumberAxis(""fcs[#>"");
    StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
    XYPlot xYPlot0 = new XYPlot(defaultTableXYDataset0, numberAxis0, numberAxis0, stackedXYAreaRenderer0);
    int int0 = xYPlot0.getSeriesCount();
    assertEquals((-5.0E-9), numberAxis0.getLowerBound(), 0.01);
}","/**
 * Returns the lower bound of the axis range.
 *
 * @return The lower bound.
 *
 * @see #setLowerBound(double)
 */"
"public int getSeriesCount() {
    int result = 0;
    XYDataset dataset = getDataset();
    if (dataset != null) {
        result = dataset.getSeriesCount();
    }
    return result;
}","public void test057101() throws Throwable {
    DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
    NumberAxis numberAxis0 = new NumberAxis(""fcs[#>"");
    StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
    XYPlot xYPlot0 = new XYPlot(defaultTableXYDataset0, numberAxis0, numberAxis0, stackedXYAreaRenderer0);
    int int0 = xYPlot0.getSeriesCount();
    assertEquals(0, int0);
}","/**
 * Returns the number of series in the primary dataset for this plot.  If
 * the dataset is <code>null</code>, the method returns 0.
 *
 * @return The series count.
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test058102() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    Point2D.Double point2D_Double0 = new Point2D.Double((-2311.4268), 0.1);
    combinedDomainXYPlot0.zoomDomainAxes(0.0, (PlotRenderingInfo) null, (Point2D) point2D_Double0, false);
    assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test058103() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    Point2D.Double point2D_Double0 = new Point2D.Double((-2311.4268), 0.1);
    combinedDomainXYPlot0.zoomDomainAxes(0.0, (PlotRenderingInfo) null, (Point2D) point2D_Double0, false);
    assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test059104() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    Color color0 = Color.getColor(""Requires 'count' > 0."", 445);
    combinedRangeXYPlot0.setRangeCrosshairPaint(color0);
    assertEquals(1, combinedRangeXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public void setRangeCrosshairStroke(Stroke stroke) {
    if (stroke == null) {
        throw new IllegalArgumentException(""Null 'stroke' argument."");
    }
    this.rangeCrosshairStroke = stroke;
    fireChangeEvent();
}","public void test060105() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    // Undeclared exception!
    try {
        combinedRangeXYPlot0.setRangeCrosshairStroke((Stroke) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'stroke' argument.
        //
        verifyException(""org.jfree.chart.plot.XYPlot"", e);
    }
}","/**
 * Sets the stroke used to draw the crosshairs (if visible) and sends a
 * {@link PlotChangeEvent} to all registered listeners.
 *
 * @param stroke  the new crosshair stroke (<code>null</code> not
 *         permitted).
 *
 * @see #getRangeCrosshairStroke()
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test061106() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    BasicStroke basicStroke0 = (BasicStroke) PolarPlot.DEFAULT_GRIDLINE_STROKE;
    combinedRangeXYPlot0.setRangeCrosshairStroke(basicStroke0);
    assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test061107() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    BasicStroke basicStroke0 = (BasicStroke) PolarPlot.DEFAULT_GRIDLINE_STROKE;
    combinedRangeXYPlot0.setRangeCrosshairStroke(basicStroke0);
    assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test062108() throws Throwable {
    LogAxis logAxis0 = new LogAxis("", "");
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logAxis0);
    assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test062109() throws Throwable {
    LogAxis logAxis0 = new LogAxis("", "");
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logAxis0);
    combinedDomainXYPlot0.setRangeCrosshairLockedOnData(true);
    assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public boolean isRangeCrosshairVisible() {
    return this.rangeCrosshairVisible;
}","public void test063110() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    combinedRangeXYPlot0.setRangeCrosshairVisible(true);
    assertTrue(combinedRangeXYPlot0.isRangeCrosshairVisible());
}","/**
 * Returns a flag indicating whether or not the range crosshair is visible.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairVisible(boolean)
 * @see #isDomainCrosshairVisible()
 */"
"public int getWeight() {
    return this.weight;
}","public void test064111() throws Throwable {
    DateAxis dateAxis0 = new DateAxis(""lM'8h(1mMLzI:\""'G"");
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
    combinedDomainXYPlot0.setRangeCrosshairVisible(false);
    assertEquals(1, combinedDomainXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test064112() throws Throwable {
    DateAxis dateAxis0 = new DateAxis(""lM'8h(1mMLzI:\""'G"");
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
    combinedDomainXYPlot0.setRangeCrosshairVisible(false);
    assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test065113() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    xYPlot0.setDomainCrosshairPaint(xYPlot0.DEFAULT_GRIDLINE_PAINT);
    assertEquals(1, xYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test065114() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    xYPlot0.setDomainCrosshairPaint(xYPlot0.DEFAULT_GRIDLINE_PAINT);
    assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test066115() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1, "")CCY],<-DU#:@<Az"");
    combinedRangeXYPlot0.setDomainCrosshairStroke(cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_STROKE);
    assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test067116() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test067117() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    combinedRangeXYPlot0.setDomainCrosshairLockedOnData(true);
    assertEquals(1, combinedRangeXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public int getWeight() {
    return this.weight;
}","public void test068118() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    xYPlot0.setDomainCrosshairVisible(false);
    assertEquals(1, xYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test069119() throws Throwable {
    DateAxis dateAxis0 = new DateAxis(""="");
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
    RendererChangeEvent rendererChangeEvent0 = new RendererChangeEvent(timeZone0, false);
    combinedRangeXYPlot0.rendererChanged(rendererChangeEvent0);
    assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test069120() throws Throwable {
    DateAxis dateAxis0 = new DateAxis(""="");
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
    RendererChangeEvent rendererChangeEvent0 = new RendererChangeEvent(timeZone0, false);
    combinedRangeXYPlot0.rendererChanged(rendererChangeEvent0);
    assertEquals(1, combinedRangeXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test069121() throws Throwable {
    DateAxis dateAxis0 = new DateAxis(""="");
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
    RendererChangeEvent rendererChangeEvent0 = new RendererChangeEvent(timeZone0, false);
    combinedRangeXYPlot0.rendererChanged(rendererChangeEvent0);
    assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test070122() throws Throwable {
    MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
    PeriodAxis periodAxis0 = new PeriodAxis(""Null 'offset' argument."");
    Color color0 = (Color) Axis.DEFAULT_AXIS_LINE_PAINT;
    XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(color0, periodAxis0.DEFAULT_TICK_MARK_PAINT, true);
    XYPlot xYPlot0 = new XYPlot(matrixSeriesCollection0, periodAxis0, periodAxis0, xYDifferenceRenderer0);
    XYPlot xYPlot1 = (XYPlot) xYPlot0.clone();
    assertTrue(xYPlot1.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test071123() throws Throwable {
    String[] stringArray0 = new String[0];
    SymbolAxis symbolAxis0 = new SymbolAxis(""Requires 'index' >= 0."", stringArray0);
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(symbolAxis0);
    Layer layer0 = Layer.BACKGROUND;
    combinedDomainXYPlot0.getRangeMarkers(0, layer0);
    assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test072124() throws Throwable {
    TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
    StackedXYAreaRenderer2 stackedXYAreaRenderer2_0 = new StackedXYAreaRenderer2();
    XYPlot xYPlot0 = new XYPlot(timeTableXYDataset0, (ValueAxis) null, (ValueAxis) null, stackedXYAreaRenderer2_0);
    Layer layer0 = Layer.BACKGROUND;
    xYPlot0.getDomainMarkers(0, layer0);
    assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test072125() throws Throwable {
    TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
    StackedXYAreaRenderer2 stackedXYAreaRenderer2_0 = new StackedXYAreaRenderer2();
    XYPlot xYPlot0 = new XYPlot(timeTableXYDataset0, (ValueAxis) null, (ValueAxis) null, stackedXYAreaRenderer2_0);
    Layer layer0 = Layer.BACKGROUND;
    xYPlot0.getDomainMarkers(0, layer0);
    assertEquals(1, xYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test073126() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    Hashtable<AttributedCharacterIterator.Attribute, XIntervalSeriesCollection> hashtable0 = new Hashtable<AttributedCharacterIterator.Attribute, XIntervalSeriesCollection>();
    Font font0 = Font.getFont((Map<? extends AttributedCharacterIterator.Attribute, ?>) hashtable0);
    JFreeChart jFreeChart0 = new JFreeChart("""", font0, combinedDomainXYPlot0, true);
    ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
    ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
    BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, 10, chartRenderingInfo0);
    Graphics2D graphics2D0 = bufferedImage0.createGraphics();
    short[][] shortArray0 = new short[4][7];
    ShortLookupTable shortLookupTable0 = new ShortLookupTable(1, shortArray0);
    LookupOp lookupOp0 = new LookupOp(shortLookupTable0, ((SunGraphics2D) graphics2D0).hints);
    Rectangle2D rectangle2D0 = lookupOp0.getBounds2D(bufferedImage0);
    Vector<Integer> vector0 = new Vector<Integer>();
    combinedDomainXYPlot0.drawDomainGridlines(graphics2D0, rectangle2D0, vector0);
    assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test073127() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    Hashtable<AttributedCharacterIterator.Attribute, XIntervalSeriesCollection> hashtable0 = new Hashtable<AttributedCharacterIterator.Attribute, XIntervalSeriesCollection>();
    Font font0 = Font.getFont((Map<? extends AttributedCharacterIterator.Attribute, ?>) hashtable0);
    JFreeChart jFreeChart0 = new JFreeChart("""", font0, combinedDomainXYPlot0, true);
    ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
    ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
    BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, 10, chartRenderingInfo0);
    Graphics2D graphics2D0 = bufferedImage0.createGraphics();
    short[][] shortArray0 = new short[4][7];
    ShortLookupTable shortLookupTable0 = new ShortLookupTable(1, shortArray0);
    LookupOp lookupOp0 = new LookupOp(shortLookupTable0, ((SunGraphics2D) graphics2D0).hints);
    Rectangle2D rectangle2D0 = lookupOp0.getBounds2D(bufferedImage0);
    Vector<Integer> vector0 = new Vector<Integer>();
    combinedDomainXYPlot0.drawDomainGridlines(graphics2D0, rectangle2D0, vector0);
    assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public boolean isDomainZoomable() {
    return this.domainZoomable;
}","public void test073128() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    Hashtable<AttributedCharacterIterator.Attribute, XIntervalSeriesCollection> hashtable0 = new Hashtable<AttributedCharacterIterator.Attribute, XIntervalSeriesCollection>();
    Font font0 = Font.getFont((Map<? extends AttributedCharacterIterator.Attribute, ?>) hashtable0);
    JFreeChart jFreeChart0 = new JFreeChart("""", font0, combinedDomainXYPlot0, true);
    ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
    ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
    BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, 10, chartRenderingInfo0);
    Graphics2D graphics2D0 = bufferedImage0.createGraphics();
    short[][] shortArray0 = new short[4][7];
    ShortLookupTable shortLookupTable0 = new ShortLookupTable(1, shortArray0);
    LookupOp lookupOp0 = new LookupOp(shortLookupTable0, ((SunGraphics2D) graphics2D0).hints);
    Rectangle2D rectangle2D0 = lookupOp0.getBounds2D(bufferedImage0);
    Vector<Integer> vector0 = new Vector<Integer>();
    combinedDomainXYPlot0.drawDomainGridlines(graphics2D0, rectangle2D0, vector0);
    assertTrue(chartPanel0.isDomainZoomable());
}","/**
 * Returns the flag that determines whether or not zooming is enabled for
 * the domain axis.
 *
 * @return A boolean.
 */"
"public boolean isRangeZoomable() {
    return this.rangeZoomable;
}","public void test073129() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    Hashtable<AttributedCharacterIterator.Attribute, XIntervalSeriesCollection> hashtable0 = new Hashtable<AttributedCharacterIterator.Attribute, XIntervalSeriesCollection>();
    Font font0 = Font.getFont((Map<? extends AttributedCharacterIterator.Attribute, ?>) hashtable0);
    JFreeChart jFreeChart0 = new JFreeChart("""", font0, combinedDomainXYPlot0, true);
    ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
    ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
    BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, 10, chartRenderingInfo0);
    Graphics2D graphics2D0 = bufferedImage0.createGraphics();
    short[][] shortArray0 = new short[4][7];
    ShortLookupTable shortLookupTable0 = new ShortLookupTable(1, shortArray0);
    LookupOp lookupOp0 = new LookupOp(shortLookupTable0, ((SunGraphics2D) graphics2D0).hints);
    Rectangle2D rectangle2D0 = lookupOp0.getBounds2D(bufferedImage0);
    Vector<Integer> vector0 = new Vector<Integer>();
    combinedDomainXYPlot0.drawDomainGridlines(graphics2D0, rectangle2D0, vector0);
    assertTrue(chartPanel0.isRangeZoomable());
}","/**
 * Returns the flag that determines whether or not zooming is enabled for
 * the range axis.
 *
 * @return A boolean.
 */"
"public ValueAxis getRangeAxisForDataset(int index) {
    int upper = Math.max(getDatasetCount(), getRendererCount());
    if (index < 0 || index >= upper) {
        throw new IllegalArgumentException(""Index "" + index + "" out of bounds."");
    }
    ValueAxis valueAxis = null;
    List axisIndices = (List) this.datasetToRangeAxesMap.get(new Integer(index));
    if (axisIndices != null) {
        // the first axis in the list is used for data <--> Java2D
        Integer axisIndex = (Integer) axisIndices.get(0);
        valueAxis = getRangeAxis(axisIndex.intValue());
    } else {
        valueAxis = getRangeAxis(0);
    }
    return valueAxis;
}","public void test074130() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    // Undeclared exception!
    try {
        combinedDomainXYPlot0.getRangeAxisForDataset((-1949));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Index -1949 out of bounds.
        //
        verifyException(""org.jfree.chart.plot.XYPlot"", e);
    }
}","/**
 * Returns the range axis for a dataset.
 *
 * @param index  the dataset index.
 *
 * @return The axis.
 */"
"public ValueAxis getDomainAxisForDataset(int index) {
    int upper = Math.max(getDatasetCount(), getRendererCount());
    if (index < 0 || index >= upper) {
        throw new IllegalArgumentException(""Index "" + index + "" out of bounds."");
    }
    ValueAxis valueAxis = null;
    List axisIndices = (List) this.datasetToDomainAxesMap.get(new Integer(index));
    if (axisIndices != null) {
        // the first axis in the list is used for data <--> Java2D
        Integer axisIndex = (Integer) axisIndices.get(0);
        valueAxis = getDomainAxis(axisIndex.intValue());
    } else {
        valueAxis = getDomainAxis(0);
    }
    return valueAxis;
}","public void test075131() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.PRC;
    DateAxis dateAxis0 = new DateAxis(""]a/9S,W^5 a3i%"", timeZone0, locale0);
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
    // Undeclared exception!
    try {
        combinedDomainXYPlot0.getDomainAxisForDataset(4);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Index 4 out of bounds.
        //
        verifyException(""org.jfree.chart.plot.XYPlot"", e);
    }
}","/**
 * Returns the domain axis for a dataset.
 *
 * @param index  the dataset index.
 *
 * @return The axis.
 */"
"public ValueAxis getDomainAxisForDataset(int index) {
    int upper = Math.max(getDatasetCount(), getRendererCount());
    if (index < 0 || index >= upper) {
        throw new IllegalArgumentException(""Index "" + index + "" out of bounds."");
    }
    ValueAxis valueAxis = null;
    List axisIndices = (List) this.datasetToDomainAxesMap.get(new Integer(index));
    if (axisIndices != null) {
        // the first axis in the list is used for data <--> Java2D
        Integer axisIndex = (Integer) axisIndices.get(0);
        valueAxis = getDomainAxis(axisIndex.intValue());
    } else {
        valueAxis = getDomainAxis(0);
    }
    return valueAxis;
}","public void test076132() throws Throwable {
    DateAxis dateAxis0 = new DateAxis(""="");
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
    // Undeclared exception!
    try {
        combinedRangeXYPlot0.getDomainAxisForDataset((-1517));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Index -1517 out of bounds.
        //
        verifyException(""org.jfree.chart.plot.XYPlot"", e);
    }
}","/**
 * Returns the domain axis for a dataset.
 *
 * @param index  the dataset index.
 *
 * @return The axis.
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test077133() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    Font font0 = LegendTitle.DEFAULT_ITEM_FONT;
    JFreeChart jFreeChart0 = new JFreeChart(""Null 'location' for index 0 not permitted."", font0, xYPlot0, true);
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
    jFreeChart0.createBufferedImage(10, 10, 1, chartRenderingInfo0);
    assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test077134() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    Font font0 = LegendTitle.DEFAULT_ITEM_FONT;
    JFreeChart jFreeChart0 = new JFreeChart(""Null 'location' for index 0 not permitted."", font0, xYPlot0, true);
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
    jFreeChart0.createBufferedImage(10, 10, 1, chartRenderingInfo0);
    assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test078135() throws Throwable {
    String[] stringArray0 = new String[0];
    SymbolAxis symbolAxis0 = new SymbolAxis(""Requires 'index' >= 0."", stringArray0);
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(symbolAxis0);
    XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(combinedDomainXYPlot0.DEFAULT_LEGEND_ITEM_BOX, combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE, symbolAxis0.DEFAULT_TICK_MARK_PAINT, symbolAxis0.DEFAULT_AXIS_LINE_PAINT);
    combinedDomainXYPlot0.addAnnotation((XYAnnotation) xYShapeAnnotation0, false);
    assertEquals(1, combinedDomainXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean removeRangeMarker(int index, Marker marker, Layer layer, boolean notify) {
    if (marker == null) {
        throw new IllegalArgumentException(""Null 'marker' argument."");
    }
    ArrayList markers;
    if (layer == Layer.FOREGROUND) {
        markers = (ArrayList) this.foregroundRangeMarkers.get(new Integer(index));
    } else {
        markers = (ArrayList) this.backgroundRangeMarkers.get(new Integer(index));
    }
    if (markers == null) {
        return false;
    }
    boolean removed = markers.remove(marker);
    if (removed && notify) {
        fireChangeEvent();
    }
    return removed;
}","public void test079136() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    Layer layer0 = Layer.FOREGROUND;
    // Undeclared exception!
    try {
        xYPlot0.removeRangeMarker(84, (Marker) null, layer0, false);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'marker' argument.
        //
        verifyException(""org.jfree.chart.plot.XYPlot"", e);
    }
}","/**
 * Removes a marker for a specific dataset/renderer and sends a
 * {@link PlotChangeEvent} to all registered listeners.
 *
 * @param index  the dataset/renderer index.
 * @param marker  the marker.
 * @param layer  the layer (foreground or background).
 * @param notify  notify listeners?
 *
 * @return A boolean indicating whether or not the marker was actually
 *         removed.
 *
 * @since 1.0.10
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test080137() throws Throwable {
    DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
    NumberAxis numberAxis0 = new NumberAxis(""fcs[#>"");
    StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
    XYPlot xYPlot0 = new XYPlot(defaultTableXYDataset0, numberAxis0, numberAxis0, stackedXYAreaRenderer0);
    xYPlot0.clearRangeMarkers((-1443));
    assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test080138() throws Throwable {
    DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
    NumberAxis numberAxis0 = new NumberAxis(""fcs[#>"");
    StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
    XYPlot xYPlot0 = new XYPlot(defaultTableXYDataset0, numberAxis0, numberAxis0, stackedXYAreaRenderer0);
    xYPlot0.clearRangeMarkers((-1443));
    assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test080139() throws Throwable {
    DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
    NumberAxis numberAxis0 = new NumberAxis(""fcs[#>"");
    StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
    XYPlot xYPlot0 = new XYPlot(defaultTableXYDataset0, numberAxis0, numberAxis0, stackedXYAreaRenderer0);
    xYPlot0.clearRangeMarkers((-1443));
    assertEquals(1, xYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test081140() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    XYBoxAndWhiskerRenderer xYBoxAndWhiskerRenderer0 = new XYBoxAndWhiskerRenderer();
    Paint paint0 = xYBoxAndWhiskerRenderer0.getBoxPaint();
    ValueMarker valueMarker0 = new ValueMarker(6715.1971257, paint0, combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE);
    Layer layer0 = Layer.BACKGROUND;
    combinedRangeXYPlot0.addRangeMarker(6, (Marker) valueMarker0, layer0, false);
    assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public float getBackgroundImageAlpha() {
    return this.backgroundImageAlpha;
}","public void test082141() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    combinedRangeXYPlot0.clearRangeMarkers();
    assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
}","/**
 * Returns the alpha transparency used to draw the background image.  This
 * is a value in the range 0.0f to 1.0f, where 0.0f is fully transparent
 * and 1.0f is fully opaque.
 *
 * @return The alpha transparency.
 *
 * @see #setBackgroundImageAlpha(float)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test083142() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    CategoryMarker categoryMarker0 = new CategoryMarker(false);
    Layer layer0 = Layer.BACKGROUND;
    xYPlot0.addDomainMarker(3665, (Marker) categoryMarker0, layer0, false);
    assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test083143() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    CategoryMarker categoryMarker0 = new CategoryMarker(false);
    Layer layer0 = Layer.BACKGROUND;
    xYPlot0.addDomainMarker(3665, (Marker) categoryMarker0, layer0, false);
    assertEquals(1, xYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public void addDomainMarker(int index, Marker marker, Layer layer) {
    addDomainMarker(index, marker, layer, true);
}","public void test084144() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    IntervalMarker intervalMarker0 = new IntervalMarker((-208), 0.0, combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT);
    // Undeclared exception!
    try {
        combinedRangeXYPlot0.addDomainMarker((-208), (Marker) intervalMarker0, (Layer) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'layer' not permitted.
        //
        verifyException(""org.jfree.chart.plot.XYPlot"", e);
    }
}","/**
 * Adds a marker for a specific dataset/renderer and sends a
 * {@link PlotChangeEvent} to all registered listeners.
 * <P>
 * Typically a marker will be drawn by the renderer as a line perpendicular
 * to the domain axis (that the renderer is mapped to), however this is
 * entirely up to the renderer.
 *
 * @param index  the dataset/renderer index.
 * @param marker  the marker.
 * @param layer  the layer (foreground or background).
 *
 * @see #clearDomainMarkers(int)
 * @see #addRangeMarker(int, Marker, Layer)
 */"
"public int getWeight() {
    return this.weight;
}","public void test085145() throws Throwable {
    LogAxis logAxis0 = new LogAxis("", "");
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logAxis0);
    combinedDomainXYPlot0.clearDomainMarkers(353);
    assertEquals(1, combinedDomainXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test086146() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    combinedRangeXYPlot0.clearDomainMarkers();
    assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test086147() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    combinedRangeXYPlot0.clearDomainMarkers();
    assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test087148() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) null);
    combinedRangeXYPlot0.setQuadrantPaint(2, (Paint) null);
    assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test087149() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) null);
    combinedRangeXYPlot0.setQuadrantPaint(2, (Paint) null);
    assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public void setQuadrantPaint(int index, Paint paint) {
    if (index < 0 || index > 3) {
        throw new IllegalArgumentException(""The index value ("" + index + "") should be in the range 0 to 3."");
    }
    this.quadrantPaint[index] = paint;
    fireChangeEvent();
}","public void test088150() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation(""Null 'order' argument."", 10.0, (-30.0), (-2151));
    Paint paint0 = xYPointerAnnotation0.getOutlinePaint();
    // Undeclared exception!
    try {
        xYPlot0.setQuadrantPaint((-2727), paint0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The index value (-2727) should be in the range 0 to 3.
        //
        verifyException(""org.jfree.chart.plot.XYPlot"", e);
    }
}","/**
 * Sets the paint used for the specified quadrant and sends a
 * {@link PlotChangeEvent} to all registered listeners.
 *
 * @param index  the quadrant index (0-3).
 * @param paint  the paint (<code>null</code> permitted).
 *
 * @see #getQuadrantPaint(int)
 */"
"public Paint getQuadrantPaint(int index) {
    if (index < 0 || index > 3) {
        throw new IllegalArgumentException(""The index value ("" + index + "") should be in the range 0 to 3."");
    }
    return this.quadrantPaint[index];
}","public void test089151() throws Throwable {
    String[] stringArray0 = new String[0];
    SymbolAxis symbolAxis0 = new SymbolAxis(""Requires 'index' >= 0."", stringArray0);
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(symbolAxis0);
    // Undeclared exception!
    try {
        combinedDomainXYPlot0.getQuadrantPaint((-16));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The index value (-16) should be in the range 0 to 3.
        //
        verifyException(""org.jfree.chart.plot.XYPlot"", e);
    }
}","/**
 * Returns the paint used for the specified quadrant.
 *
 * @param index  the quadrant index (0-3).
 *
 * @return The paint (possibly <code>null</code>).
 *
 * @see #setQuadrantPaint(int, Paint)
 */"
"public int getRangeAxisCount() {
    return this.rangeAxes.size();
}","public void test090152() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    combinedRangeXYPlot0.setRangeZeroBaselinePaint(combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT);
    assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
}","/**
 * Returns the number of range axes.
 *
 * @return The axis count.
 *
 * @see #getDomainAxisCount()
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test091153() throws Throwable {
    ThermometerPlot thermometerPlot0 = new ThermometerPlot();
    ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
    combinedDomainXYPlot0.setRangeZeroBaselineStroke(valueAxis0.DEFAULT_AXIS_LINE_STROKE);
    assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test092154() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    Color color0 = (Color) SpiderWebPlot.DEFAULT_LABEL_OUTLINE_PAINT;
    combinedRangeXYPlot0.setDomainZeroBaselinePaint(color0);
    assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public void setDomainZeroBaselineStroke(Stroke stroke) {
    if (stroke == null) {
        throw new IllegalArgumentException(""Null 'stroke' argument."");
    }
    this.domainZeroBaselineStroke = stroke;
    fireChangeEvent();
}","public void test093155() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    // Undeclared exception!
    try {
        combinedDomainXYPlot0.setDomainZeroBaselineStroke((Stroke) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'stroke' argument.
        //
        verifyException(""org.jfree.chart.plot.XYPlot"", e);
    }
}","/**
 * Sets the stroke for the zero baseline for the domain axis,
 * and sends a {@link PlotChangeEvent} to all registered listeners.
 *
 * @param stroke  the stroke (<code>null</code> not permitted).
 *
 * @since 1.0.5
 *
 * @see #getRangeZeroBaselineStroke()
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test094156() throws Throwable {
    LogAxis logAxis0 = new LogAxis("", "");
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logAxis0);
    combinedDomainXYPlot0.setDomainZeroBaselineStroke(logAxis0.DEFAULT_TICK_MARK_STROKE);
    assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test094157() throws Throwable {
    LogAxis logAxis0 = new LogAxis("", "");
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logAxis0);
    combinedDomainXYPlot0.setDomainZeroBaselineStroke(logAxis0.DEFAULT_TICK_MARK_STROKE);
    assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public double getAutoRangeMinimumSize() {
    return this.autoRangeMinimumSize;
}","public void test095158() throws Throwable {
    NumberAxis numberAxis0 = new NumberAxis((String) null);
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
    combinedRangeXYPlot0.setRangeMinorGridlinePaint(numberAxis0.DEFAULT_TICK_MARK_PAINT);
    assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
}","/**
 * Returns the minimum size allowed for the axis range when it is
 * automatically calculated.
 *
 * @return The minimum range.
 *
 * @see #setAutoRangeMinimumSize(double)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test096159() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
    Stroke stroke0 = defaultPolarItemRenderer0.getBaseStroke();
    combinedDomainXYPlot0.setRangeMinorGridlineStroke(stroke0);
    assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test096160() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
    Stroke stroke0 = defaultPolarItemRenderer0.getBaseStroke();
    combinedDomainXYPlot0.setRangeMinorGridlineStroke(stroke0);
    assertEquals(1, combinedDomainXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test097161() throws Throwable {
    DateAxis dateAxis0 = new DateAxis();
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
    combinedDomainXYPlot0.setRangeMinorGridlinesVisible(true);
    assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test097162() throws Throwable {
    DateAxis dateAxis0 = new DateAxis();
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
    combinedDomainXYPlot0.setRangeMinorGridlinesVisible(true);
    assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test098163() throws Throwable {
    LogAxis logAxis0 = new LogAxis("", "");
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logAxis0);
    combinedDomainXYPlot0.setRangeGridlineStroke(logAxis0.DEFAULT_TICK_MARK_STROKE);
    assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test098164() throws Throwable {
    LogAxis logAxis0 = new LogAxis("", "");
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logAxis0);
    combinedDomainXYPlot0.setRangeGridlineStroke(logAxis0.DEFAULT_TICK_MARK_STROKE);
    assertEquals(1, combinedDomainXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test098165() throws Throwable {
    LogAxis logAxis0 = new LogAxis("", "");
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logAxis0);
    combinedDomainXYPlot0.setRangeGridlineStroke(logAxis0.DEFAULT_TICK_MARK_STROKE);
    assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public boolean isRangeGridlinesVisible() {
    return this.rangeGridlinesVisible;
}","public void test099166() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    combinedDomainXYPlot0.setRangeGridlinesVisible(false);
    assertFalse(combinedDomainXYPlot0.isRangeGridlinesVisible());
}","/**
 * Returns <code>true</code> if the range axis grid is visible, and
 * <code>false<code> otherwise.
 *
 * @return A boolean.
 *
 * @see #setRangeGridlinesVisible(boolean)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test100167() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-436.367), (String) null);
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
    combinedRangeXYPlot0.setRangeGridlinesVisible(true);
    assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test100168() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-436.367), (String) null);
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
    combinedRangeXYPlot0.setRangeGridlinesVisible(true);
    assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public void setDomainMinorGridlinePaint(Paint paint) {
    if (paint == null) {
        throw new IllegalArgumentException(""Null 'paint' argument."");
    }
    this.domainMinorGridlinePaint = paint;
    fireChangeEvent();
}","public void test101169() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    // Undeclared exception!
    try {
        combinedRangeXYPlot0.setDomainMinorGridlinePaint((Paint) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'paint' argument.
        //
        verifyException(""org.jfree.chart.plot.XYPlot"", e);
    }
}","/**
 * Sets the paint for the minor grid lines plotted against the domain axis,
 * and sends a {@link PlotChangeEvent} to all registered listeners.
 *
 * @param paint  the paint (<code>null</code> not permitted).
 *
 * @throws IllegalArgumentException if <code>paint</code> is
 *     <code>null</code>.
 *
 * @see #getDomainMinorGridlinePaint()
 *
 * @since 1.0.12
 */"
"public String getPlotType() {
    return ""Combined_Domain_XYPlot"";
}","public void test102170() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    SystemColor systemColor0 = SystemColor.windowText;
    combinedDomainXYPlot0.setDomainMinorGridlinePaint(systemColor0);
    assertEquals(""Combined_Domain_XYPlot"", combinedDomainXYPlot0.getPlotType());
}","/**
 * Returns a string describing the type of plot.
 *
 * @return The type of plot.
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test103171() throws Throwable {
    LogAxis logAxis0 = new LogAxis("""");
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    combinedDomainXYPlot0.setDomainGridlinePaint(logAxis0.DEFAULT_TICK_MARK_PAINT);
    assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test103172() throws Throwable {
    LogAxis logAxis0 = new LogAxis("""");
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    combinedDomainXYPlot0.setDomainGridlinePaint(logAxis0.DEFAULT_TICK_MARK_PAINT);
    assertEquals(1, combinedDomainXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test103173() throws Throwable {
    LogAxis logAxis0 = new LogAxis("""");
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    combinedDomainXYPlot0.setDomainGridlinePaint(logAxis0.DEFAULT_TICK_MARK_PAINT);
    assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test104174() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    XYDotRenderer xYDotRenderer0 = new XYDotRenderer();
    xYPlot0.setDomainMinorGridlineStroke(xYDotRenderer0.DEFAULT_OUTLINE_STROKE);
    assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test104175() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    XYDotRenderer xYDotRenderer0 = new XYDotRenderer();
    xYPlot0.setDomainMinorGridlineStroke(xYDotRenderer0.DEFAULT_OUTLINE_STROKE);
    assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test105176() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1.0), (-1218.73699));
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
    combinedRangeXYPlot0.setDomainGridlineStroke(cyclicNumberAxis0.DEFAULT_TICK_MARK_STROKE);
    assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test105177() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1.0), (-1218.73699));
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
    combinedRangeXYPlot0.setDomainGridlineStroke(cyclicNumberAxis0.DEFAULT_TICK_MARK_STROKE);
    assertEquals(1, combinedRangeXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test105178() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1.0), (-1218.73699));
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
    combinedRangeXYPlot0.setDomainGridlineStroke(cyclicNumberAxis0.DEFAULT_TICK_MARK_STROKE);
    assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public boolean isDomainMinorGridlinesVisible() {
    return this.domainMinorGridlinesVisible;
}","public void test106179() throws Throwable {
    NumberAxis3D numberAxis3D0 = new NumberAxis3D();
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
    combinedDomainXYPlot0.setDomainMinorGridlinesVisible(true);
    assertTrue(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
}","/**
 * Returns <code>true</code> if the domain minor gridlines are visible, and
 * <code>false<code> otherwise.
 *
 * @return <code>true</code> or <code>false</code>.
 *
 * @see #setDomainMinorGridlinesVisible(boolean)
 *
 * @since 1.0.12
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test107180() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    combinedDomainXYPlot0.setDomainMinorGridlinesVisible(false);
    assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public double getLowerBound() {
    return this.range.getLowerBound();
}","public void test108181() throws Throwable {
    DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
    NumberAxis numberAxis0 = new NumberAxis(""fcs[#>"");
    StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
    XYPlot xYPlot0 = new XYPlot(defaultTableXYDataset0, numberAxis0, numberAxis0, stackedXYAreaRenderer0);
    xYPlot0.setDomainGridlinesVisible(false);
    assertEquals((-5.0E-9), numberAxis0.getLowerBound(), 0.01);
}","/**
 * Returns the lower bound of the axis range.
 *
 * @return The lower bound.
 *
 * @see #setLowerBound(double)
 */"
"public boolean isDomainGridlinesVisible() {
    return this.domainGridlinesVisible;
}","public void test108182() throws Throwable {
    DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
    NumberAxis numberAxis0 = new NumberAxis(""fcs[#>"");
    StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
    XYPlot xYPlot0 = new XYPlot(defaultTableXYDataset0, numberAxis0, numberAxis0, stackedXYAreaRenderer0);
    xYPlot0.setDomainGridlinesVisible(false);
    assertFalse(xYPlot0.isDomainGridlinesVisible());
}","/**
 * Returns <code>true</code> if the domain gridlines are visible, and
 * <code>false<code> otherwise.
 *
 * @return <code>true</code> or <code>false</code>.
 *
 * @see #setDomainGridlinesVisible(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test109183() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    xYPlot0.setDomainGridlinesVisible(true);
    assertEquals(1, xYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test109184() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    xYPlot0.setDomainGridlinesVisible(true);
    assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test109185() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    xYPlot0.setDomainGridlinesVisible(true);
    assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test110186() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
    combinedRangeXYPlot0.getRendererForDataset(defaultWindDataset0);
    assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test111187() throws Throwable {
    NumberAxis numberAxis0 = new NumberAxis(""DHoDLjC].,yo"");
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
    SeriesRenderingOrder seriesRenderingOrder0 = SeriesRenderingOrder.REVERSE;
    combinedRangeXYPlot0.setSeriesRenderingOrder(seriesRenderingOrder0);
    assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test111188() throws Throwable {
    NumberAxis numberAxis0 = new NumberAxis(""DHoDLjC].,yo"");
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
    SeriesRenderingOrder seriesRenderingOrder0 = SeriesRenderingOrder.REVERSE;
    combinedRangeXYPlot0.setSeriesRenderingOrder(seriesRenderingOrder0);
    assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public void setDatasetRenderingOrder(DatasetRenderingOrder order) {
    if (order == null) {
        throw new IllegalArgumentException(""Null 'order' argument."");
    }
    this.datasetRenderingOrder = order;
    fireChangeEvent();
}","public void test112189() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    // Undeclared exception!
    try {
        combinedRangeXYPlot0.setDatasetRenderingOrder((DatasetRenderingOrder) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'order' argument.
        //
        verifyException(""org.jfree.chart.plot.XYPlot"", e);
    }
}","/**
 * Sets the rendering order and sends a {@link PlotChangeEvent} to all
 * registered listeners.  By default, the plot renders the primary dataset
 * last (so that the primary dataset overlays the secondary datasets).
 * You can reverse this if you want to.
 *
 * @param order  the rendering order (<code>null</code> not permitted).
 *
 * @see #getDatasetRenderingOrder()
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test113190() throws Throwable {
    LogAxis logAxis0 = new LogAxis(""Xl{g(M':lrZ"");
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
    DatasetRenderingOrder datasetRenderingOrder0 = DatasetRenderingOrder.REVERSE;
    combinedRangeXYPlot0.setDatasetRenderingOrder(datasetRenderingOrder0);
    assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public int getRendererCount() {
    return this.renderers.size();
}","public void test114191() throws Throwable {
    ThermometerPlot thermometerPlot0 = new ThermometerPlot();
    ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
    XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[8];
    combinedDomainXYPlot0.setRenderers(xYItemRendererArray0);
    assertEquals(8, combinedDomainXYPlot0.getRendererCount());
}","/**
 * Returns the number of renderer slots for this plot.
 *
 * @return The number of renderer slots.
 *
 * @since 1.0.11
 */"
"public void mapDatasetToRangeAxes(int index, List axisIndices) {
    if (index < 0) {
        throw new IllegalArgumentException(""Requires 'index' >= 0."");
    }
    checkAxisIndices(axisIndices);
    Integer key = new Integer(index);
    this.datasetToRangeAxesMap.put(key, new ArrayList(axisIndices));
    // fake a dataset change event to update axes...
    datasetChanged(new DatasetChangeEvent(this, getDataset(index)));
}","public void test115192() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    LinkedList<Rectangle2D.Float> linkedList0 = new LinkedList<Rectangle2D.Float>();
    // Undeclared exception!
    try {
        combinedDomainXYPlot0.mapDatasetToRangeAxes(6, linkedList0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Empty list not permitted.
        //
        verifyException(""org.jfree.chart.plot.XYPlot"", e);
    }
}","/**
 * Maps the specified dataset to the axes in the list.  Note that the
 * conversion of data values into Java2D space is always performed using
 * the first axis in the list.
 *
 * @param index  the dataset index (zero-based).
 * @param axisIndices  the axis indices (<code>null</code> permitted).
 *
 * @since 1.0.12
 */"
"public void mapDatasetToRangeAxes(int index, List axisIndices) {
    if (index < 0) {
        throw new IllegalArgumentException(""Requires 'index' >= 0."");
    }
    checkAxisIndices(axisIndices);
    Integer key = new Integer(index);
    this.datasetToRangeAxesMap.put(key, new ArrayList(axisIndices));
    // fake a dataset change event to update axes...
    datasetChanged(new DatasetChangeEvent(this, getDataset(index)));
}","public void test116193() throws Throwable {
    NumberAxis numberAxis0 = new NumberAxis(""DHoDLjC].,yo"");
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
    // Undeclared exception!
    try {
        combinedRangeXYPlot0.mapDatasetToRangeAxes(500, (List) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * Maps the specified dataset to the axes in the list.  Note that the
 * conversion of data values into Java2D space is always performed using
 * the first axis in the list.
 *
 * @param index  the dataset index (zero-based).
 * @param axisIndices  the axis indices (<code>null</code> permitted).
 *
 * @since 1.0.12
 */"
"public void mapDatasetToRangeAxes(int index, List axisIndices) {
    if (index < 0) {
        throw new IllegalArgumentException(""Requires 'index' >= 0."");
    }
    checkAxisIndices(axisIndices);
    Integer key = new Integer(index);
    this.datasetToRangeAxesMap.put(key, new ArrayList(axisIndices));
    // fake a dataset change event to update axes...
    datasetChanged(new DatasetChangeEvent(this, getDataset(index)));
}","public void test117194() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    Vector<GradientPaint> vector0 = new Vector<GradientPaint>();
    // Undeclared exception!
    try {
        combinedRangeXYPlot0.mapDatasetToRangeAxes((-476), vector0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Requires 'index' >= 0.
        //
        verifyException(""org.jfree.chart.plot.XYPlot"", e);
    }
}","/**
 * Maps the specified dataset to the axes in the list.  Note that the
 * conversion of data values into Java2D space is always performed using
 * the first axis in the list.
 *
 * @param index  the dataset index (zero-based).
 * @param axisIndices  the axis indices (<code>null</code> permitted).
 *
 * @since 1.0.12
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test118195() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    int int0 = xYPlot0.indexOf((XYDataset) null);
    assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public int indexOf(XYDataset dataset) {
    int result = -1;
    for (int i = 0; i < this.datasets.size(); i++) {
        if (dataset == this.datasets.get(i)) {
            result = i;
            break;
        }
    }
    return result;
}","public void test118196() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    int int0 = xYPlot0.indexOf((XYDataset) null);
    assertEquals(0, int0);
}","/**
 * Returns the index of the specified dataset, or <code>-1</code> if the
 * dataset does not belong to the plot.
 *
 * @param dataset  the dataset (<code>null</code> not permitted).
 *
 * @return The index.
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test118197() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    int int0 = xYPlot0.indexOf((XYDataset) null);
    assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test119198() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
    int int0 = combinedRangeXYPlot0.indexOf(xIntervalSeriesCollection0);
    assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test119199() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
    int int0 = combinedRangeXYPlot0.indexOf(xIntervalSeriesCollection0);
    assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public int indexOf(XYDataset dataset) {
    int result = -1;
    for (int i = 0; i < this.datasets.size(); i++) {
        if (dataset == this.datasets.get(i)) {
            result = i;
            break;
        }
    }
    return result;
}","public void test119200() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
    int int0 = combinedRangeXYPlot0.indexOf(xIntervalSeriesCollection0);
    assertEquals((-1), int0);
}","/**
 * Returns the index of the specified dataset, or <code>-1</code> if the
 * dataset does not belong to the plot.
 *
 * @param dataset  the dataset (<code>null</code> not permitted).
 *
 * @return The index.
 */"
"public int getWeight() {
    return this.weight;
}","public void test120201() throws Throwable {
    DateAxis dateAxis0 = new DateAxis(""lM'8h(1mMLzI:\""'G"");
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
    combinedDomainXYPlot0.mapDatasetToDomainAxis(3489, 1607);
    assertEquals(1, combinedDomainXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test120202() throws Throwable {
    DateAxis dateAxis0 = new DateAxis(""lM'8h(1mMLzI:\""'G"");
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
    combinedDomainXYPlot0.mapDatasetToDomainAxis(3489, 1607);
    assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test121203() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_LEFT;
    xYPlot0.setRangeAxisLocation(0, axisLocation0, false);
    assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public String toString() {
    return this.name;
}","public void test122204() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    RectangleEdge rectangleEdge0 = combinedRangeXYPlot0.getRangeAxisEdge(0);
    assertEquals(""RectangleEdge.LEFT"", rectangleEdge0.toString());
}","/**
 * Returns a string representing the object.
 *
 * @return The string.
 */"
"public int getWeight() {
    return this.weight;
}","public void test122205() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    RectangleEdge rectangleEdge0 = combinedRangeXYPlot0.getRangeAxisEdge(0);
    assertEquals(1, combinedRangeXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test123206() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    combinedDomainXYPlot0.clearRangeAxes();
    assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test123207() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    combinedDomainXYPlot0.clearRangeAxes();
    assertEquals(1, combinedDomainXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public int getRangeAxisCount() {
    return this.rangeAxes.size();
}","public void test124208() throws Throwable {
    NumberAxis3D numberAxis3D0 = new NumberAxis3D();
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
    combinedDomainXYPlot0.setRangeAxis(0, (ValueAxis) numberAxis3D0);
    assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
}","/**
 * Returns the number of range axes.
 *
 * @return The axis count.
 *
 * @see #getDomainAxisCount()
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test124209() throws Throwable {
    NumberAxis3D numberAxis3D0 = new NumberAxis3D();
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
    combinedDomainXYPlot0.setRangeAxis(0, (ValueAxis) numberAxis3D0);
    assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public int getRangeAxisCount() {
    return this.rangeAxes.size();
}","public void test125210() throws Throwable {
    NumberAxis3D numberAxis3D0 = new NumberAxis3D(""nQa@N;O{9g>Dy:47t4"");
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
    ValueAxis[] valueAxisArray0 = new ValueAxis[2];
    combinedRangeXYPlot0.setRangeAxes(valueAxisArray0);
    assertEquals(2, combinedRangeXYPlot0.getRangeAxisCount());
}","/**
 * Returns the number of range axes.
 *
 * @return The axis count.
 *
 * @see #getDomainAxisCount()
 */"
"public int getWeight() {
    return this.weight;
}","public void test126211() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    combinedDomainXYPlot0.getRangeAxis(10);
    assertEquals(1, combinedDomainXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test126212() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    combinedDomainXYPlot0.getRangeAxis(10);
    assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test126213() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    combinedDomainXYPlot0.getRangeAxis(10);
    assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public double getGap() {
    return this.gap;
}","public void test127214() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(3900.162748021003, """");
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
    combinedDomainXYPlot0.setRangeAxis((ValueAxis) cyclicNumberAxis0);
    assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
}","/**
 * Returns the gap between subplots, measured in Java2D units.
 *
 * @return The gap (in Java2D units).
 */"
"public int getWeight() {
    return this.weight;
}","public void test128215() throws Throwable {
    Month month0 = new Month();
    XYSeries xYSeries0 = new XYSeries(month0, true);
    XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
    XYBarDataset xYBarDataset0 = new XYBarDataset(xYSeriesCollection0, 1086);
    CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(0);
    XYPlot xYPlot0 = new XYPlot(xYBarDataset0, (ValueAxis) null, (ValueAxis) null, cyclicXYItemRenderer0);
    xYPlot0.setRangeAxis((ValueAxis) null);
    assertEquals(1, xYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public String toString() {
    return this.name;
}","public void test129216() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    RectangleEdge rectangleEdge0 = xYPlot0.getDomainAxisEdge((-1));
    assertEquals(""RectangleEdge.TOP"", rectangleEdge0.toString());
}","/**
 * Returns a string representing the object.
 *
 * @return The string.
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test129217() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    RectangleEdge rectangleEdge0 = xYPlot0.getDomainAxisEdge((-1));
    assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test129218() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    RectangleEdge rectangleEdge0 = xYPlot0.getDomainAxisEdge((-1));
    assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public String toString() {
    return this.name;
}","public void test130219() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    AxisLocation axisLocation0 = xYPlot0.getDomainAxisLocation(0);
    assertEquals(""AxisLocation.BOTTOM_OR_LEFT"", axisLocation0.toString());
}","/**
 * Returns a string representing the object.
 *
 * @return The string.
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test130220() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    AxisLocation axisLocation0 = xYPlot0.getDomainAxisLocation(0);
    assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test130221() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    AxisLocation axisLocation0 = xYPlot0.getDomainAxisLocation(0);
    assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public AxisLocation getDomainAxisLocation(int index) {
    AxisLocation result = null;
    if (index < this.domainAxisLocations.size()) {
        result = (AxisLocation) this.domainAxisLocations.get(index);
    }
    if (result == null) {
        result = AxisLocation.getOpposite(getDomainAxisLocation());
    }
    return result;
}","public void test131222() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    AxisLocation axisLocation0 = combinedRangeXYPlot0.getDomainAxisLocation(3);
    assertNotNull(axisLocation0);
}","/**
 * Returns the location for a domain axis.  If this hasn't been set
 * explicitly, the method returns the location that is opposite to the
 * primary domain axis location.
 *
 * @param index  the axis index.
 *
 * @return The location (never <code>null</code>).
 *
 * @see #setDomainAxisLocation(int, AxisLocation)
 */"
"public int getWeight() {
    return this.weight;
}","public void test131223() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    AxisLocation axisLocation0 = combinedRangeXYPlot0.getDomainAxisLocation(3);
    combinedRangeXYPlot0.setRangeAxisLocation(3, axisLocation0);
    assertEquals(1, combinedRangeXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test131224() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    AxisLocation axisLocation0 = combinedRangeXYPlot0.getDomainAxisLocation(3);
    combinedRangeXYPlot0.setRangeAxisLocation(3, axisLocation0);
    assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test132225() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    xYPlot0.clearDomainAxes();
    assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test132226() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    xYPlot0.clearDomainAxes();
    assertEquals(1, xYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public int getWeight() {
    return this.weight;
}","public void test133227() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    ValueAxis[] valueAxisArray0 = new ValueAxis[0];
    combinedDomainXYPlot0.setDomainAxes(valueAxisArray0);
    assertEquals(1, combinedDomainXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test133228() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    ValueAxis[] valueAxisArray0 = new ValueAxis[0];
    combinedDomainXYPlot0.setDomainAxes(valueAxisArray0);
    assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public void setDomainAxis(int index, ValueAxis axis, boolean notify) {
    ValueAxis existing = getDomainAxis(index);
    if (existing != null) {
        existing.removeChangeListener(this);
    }
    if (axis != null) {
        axis.setPlot(this);
    }
    this.domainAxes.set(index, axis);
    if (axis != null) {
        axis.configure();
        axis.addChangeListener(this);
    }
    if (notify) {
        fireChangeEvent();
    }
}","public void test134229() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    // Undeclared exception!
    try {
        combinedRangeXYPlot0.setDomainAxis((-3602), (ValueAxis) null, true);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Requires index >= 0.
        //
        verifyException(""org.jfree.chart.util.AbstractObjectList"", e);
    }
}","/**
 * Sets a domain axis and, if requested, sends a {@link PlotChangeEvent} to
 * all registered listeners.
 *
 * @param index  the axis index.
 * @param axis  the axis.
 * @param notify  notify listeners?
 *
 * @see #getDomainAxis(int)
 */"
"public void setDomainAxis(ValueAxis axis) {
    setDomainAxis(0, axis);
}","public void test135230() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    ModuloAxis moduloAxis0 = new ModuloAxis(""<P~<bw./oaEx]Ct"", (Range) null);
    // Undeclared exception!
    try {
        combinedDomainXYPlot0.setDomainAxis((ValueAxis) moduloAxis0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'range' argument.
        //
        verifyException(""org.jfree.chart.axis.ValueAxis"", e);
    }
}","/**
 * Sets the domain axis for the plot and sends a {@link PlotChangeEvent}
 * to all registered listeners.
 *
 * @param axis  the new axis (<code>null</code> permitted).
 *
 * @see #getDomainAxis()
 * @see #setDomainAxis(int, ValueAxis)
 */"
"public int getWeight() {
    return this.weight;
}","public void test136231() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    xYPlot0.getDomainAxis(1);
    assertEquals(1, xYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test136232() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    xYPlot0.getDomainAxis(1);
    assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test137233() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    combinedRangeXYPlot0.setAxisOffset(combinedRangeXYPlot0.DEFAULT_INSETS);
    assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test137234() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    combinedRangeXYPlot0.setAxisOffset(combinedRangeXYPlot0.DEFAULT_INSETS);
    assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public void setOrientation(PlotOrientation orientation) {
    super.setOrientation(orientation);
    Iterator iterator = this.subplots.iterator();
    while (iterator.hasNext()) {
        XYPlot plot = (XYPlot) iterator.next();
        plot.setOrientation(orientation);
    }
}","public void test138235() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    // Undeclared exception!
    try {
        combinedDomainXYPlot0.setOrientation((PlotOrientation) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'orientation' argument.
        //
        verifyException(""org.jfree.chart.plot.XYPlot"", e);
    }
}","/**
 * Sets the orientation for the plot (also changes the orientation for all
 * the subplots to match).
 *
 * @param orientation  the orientation (<code>null</code> not allowed).
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test139236() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    PlotOrientation plotOrientation0 = combinedRangeXYPlot0.getOrientation();
    combinedRangeXYPlot0.setOrientation(plotOrientation0);
    assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test139237() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    PlotOrientation plotOrientation0 = combinedRangeXYPlot0.getOrientation();
    combinedRangeXYPlot0.setOrientation(plotOrientation0);
    assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test141239() throws Throwable {
    NumberAxis numberAxis0 = new NumberAxis((String) null);
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
    combinedRangeXYPlot0.setDomainTickBandPaint(numberAxis0.DEFAULT_TICK_MARK_PAINT);
    assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test141240() throws Throwable {
    NumberAxis numberAxis0 = new NumberAxis((String) null);
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
    combinedRangeXYPlot0.setDomainTickBandPaint(numberAxis0.DEFAULT_TICK_MARK_PAINT);
    assertEquals(1, combinedRangeXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test141241() throws Throwable {
    NumberAxis numberAxis0 = new NumberAxis((String) null);
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
    combinedRangeXYPlot0.setDomainTickBandPaint(numberAxis0.DEFAULT_TICK_MARK_PAINT);
    assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test142242() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    boolean boolean0 = combinedRangeXYPlot0.isDomainCrosshairLockedOnData();
    assertTrue(boolean0);
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test142243() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    boolean boolean0 = combinedRangeXYPlot0.isDomainCrosshairLockedOnData();
    assertEquals(1, combinedRangeXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test142244() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    boolean boolean0 = combinedRangeXYPlot0.isDomainCrosshairLockedOnData();
    assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test143245() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    double[] doubleArray0 = new double[0];
    XYPolygonAnnotation xYPolygonAnnotation0 = new XYPolygonAnnotation(doubleArray0, combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE, combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT);
    combinedRangeXYPlot0.addAnnotation((XYAnnotation) xYPolygonAnnotation0);
    assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test143246() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    double[] doubleArray0 = new double[0];
    XYPolygonAnnotation xYPolygonAnnotation0 = new XYPolygonAnnotation(doubleArray0, combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE, combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT);
    combinedRangeXYPlot0.addAnnotation((XYAnnotation) xYPolygonAnnotation0);
    assertEquals(1, combinedRangeXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public int getWeight() {
    return this.weight;
}","public void test144247() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_LEFT;
    xYPlot0.setDomainAxisLocation(axisLocation0);
    assertEquals(1, xYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public float getBackgroundImageAlpha() {
    return this.backgroundImageAlpha;
}","public void test145248() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    combinedRangeXYPlot0.setRangePannable(false);
    assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
}","/**
 * Returns the alpha transparency used to draw the background image.  This
 * is a value in the range 0.0f to 1.0f, where 0.0f is fully transparent
 * and 1.0f is fully opaque.
 *
 * @return The alpha transparency.
 *
 * @see #setBackgroundImageAlpha(float)
 */"
"public int getWeight() {
    return this.weight;
}","public void test146249() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    int int0 = xYPlot0.getWeight();
    assertEquals(1, int0);
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public XYPlot(XYDataset dataset, ValueAxis domainAxis, ValueAxis rangeAxis, XYItemRenderer renderer) {
    super();
    this.orientation = PlotOrientation.VERTICAL;
    // only relevant when this is a subplot
    this.weight = 1;
    this.axisOffset = new RectangleInsets(4.0, 4.0, 4.0, 4.0);
    // allocate storage for datasets, axes and renderers (all optional)
    this.domainAxes = new ObjectList();
    this.domainAxisLocations = new ObjectList();
    this.foregroundDomainMarkers = new HashMap();
    this.backgroundDomainMarkers = new HashMap();
    this.rangeAxes = new ObjectList();
    this.rangeAxisLocations = new ObjectList();
    this.foregroundRangeMarkers = new HashMap();
    this.backgroundRangeMarkers = new HashMap();
    this.datasets = new ObjectList();
    this.renderers = new ObjectList();
    this.datasetToDomainAxesMap = new TreeMap();
    this.datasetToRangeAxesMap = new TreeMap();
    this.annotations = new java.util.ArrayList();
    this.datasets.set(0, dataset);
    if (dataset != null) {
        dataset.addChangeListener(this);
    }
    this.renderers.set(0, renderer);
    if (renderer != null) {
        renderer.setPlot(this);
        renderer.addChangeListener(this);
    }
    this.domainAxes.set(0, domainAxis);
    this.mapDatasetToDomainAxis(0, 0);
    if (domainAxis != null) {
        domainAxis.setPlot(this);
        domainAxis.addChangeListener(this);
    }
    this.domainAxisLocations.set(0, AxisLocation.BOTTOM_OR_LEFT);
    this.rangeAxes.set(0, rangeAxis);
    this.mapDatasetToRangeAxis(0, 0);
    if (rangeAxis != null) {
        rangeAxis.setPlot(this);
        rangeAxis.addChangeListener(this);
    }
    this.rangeAxisLocations.set(0, AxisLocation.BOTTOM_OR_LEFT);
    configureDomainAxes();
    configureRangeAxes();
    this.domainGridlinesVisible = true;
    this.domainGridlineStroke = DEFAULT_GRIDLINE_STROKE;
    this.domainGridlinePaint = DEFAULT_GRIDLINE_PAINT;
    this.domainMinorGridlinesVisible = false;
    this.domainMinorGridlineStroke = DEFAULT_GRIDLINE_STROKE;
    this.domainMinorGridlinePaint = Color.white;
    this.domainZeroBaselineVisible = false;
    this.domainZeroBaselinePaint = Color.black;
    this.domainZeroBaselineStroke = new BasicStroke(0.5f);
    this.rangeGridlinesVisible = true;
    this.rangeGridlineStroke = DEFAULT_GRIDLINE_STROKE;
    this.rangeGridlinePaint = DEFAULT_GRIDLINE_PAINT;
    this.rangeMinorGridlinesVisible = false;
    this.rangeMinorGridlineStroke = DEFAULT_GRIDLINE_STROKE;
    this.rangeMinorGridlinePaint = Color.white;
    this.rangeZeroBaselineVisible = false;
    this.rangeZeroBaselinePaint = Color.black;
    this.rangeZeroBaselineStroke = new BasicStroke(0.5f);
    this.domainCrosshairVisible = false;
    this.domainCrosshairValue = 0.0;
    this.domainCrosshairStroke = DEFAULT_CROSSHAIR_STROKE;
    this.domainCrosshairPaint = DEFAULT_CROSSHAIR_PAINT;
    this.rangeCrosshairVisible = false;
    this.rangeCrosshairValue = 0.0;
    this.rangeCrosshairStroke = DEFAULT_CROSSHAIR_STROKE;
    this.rangeCrosshairPaint = DEFAULT_CROSSHAIR_PAINT;
}","public void test147250() throws Throwable {
    XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection((XYSeries) null);
    LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis((String) null);
    XYPlot xYPlot0 = null;
    try {
        xYPlot0 = new XYPlot(xYSeriesCollection0, logarithmicAxis0, logarithmicAxis0, (XYItemRenderer) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jfree.chart.plot.XYPlot"", e);
    }
}","/**
 * Creates a new plot with the specified dataset, axes and renderer.  Any
 * of the arguments can be <code>null</code>, but in that case you should
 * take care to specify the value before using the plot (otherwise a
 * <code>NullPointerException</code> may be thrown).
 *
 * @param dataset  the dataset (<code>null</code> permitted).
 * @param domainAxis  the domain axis (<code>null</code> permitted).
 * @param rangeAxis  the range axis (<code>null</code> permitted).
 * @param renderer  the renderer (<code>null</code> permitted).
 */"
"public int getWeight() {
    return this.weight;
}","public void test148251() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    CategoryMarker categoryMarker0 = new CategoryMarker(false, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_PAINT, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE);
    boolean boolean0 = combinedDomainXYPlot0.removeDomainMarker((Marker) categoryMarker0);
    assertEquals(1, combinedDomainXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean removeDomainMarker(Marker marker) {
    return removeDomainMarker(marker, Layer.FOREGROUND);
}","public void test148252() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    CategoryMarker categoryMarker0 = new CategoryMarker(false, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_PAINT, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE);
    boolean boolean0 = combinedDomainXYPlot0.removeDomainMarker((Marker) categoryMarker0);
    assertFalse(boolean0);
}","/**
 * Removes a marker for the domain axis and sends a {@link PlotChangeEvent}
 * to all registered listeners.
 *
 * @param marker  the marker.
 *
 * @return A boolean indicating whether or not the marker was actually
 *         removed.
 *
 * @since 1.0.7
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test149253() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    combinedDomainXYPlot0.isRangeZeroBaselineVisible();
    assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test150254() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    xYPlot0.getDataset();
    assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test150255() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    xYPlot0.getDataset();
    assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test150256() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    xYPlot0.getDataset();
    assertEquals(1, xYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test151257() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    combinedDomainXYPlot0.isDomainGridlinesVisible();
    assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test151258() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    combinedDomainXYPlot0.isDomainGridlinesVisible();
    assertEquals(1, combinedDomainXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test152259() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-308.3487655), 0.0);
    XYPlot xYPlot0 = new XYPlot((XYDataset) null, cyclicNumberAxis0, cyclicNumberAxis0, (XYItemRenderer) null);
    xYPlot0.getRangeMinorGridlinePaint();
    assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test152260() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-308.3487655), 0.0);
    XYPlot xYPlot0 = new XYPlot((XYDataset) null, cyclicNumberAxis0, cyclicNumberAxis0, (XYItemRenderer) null);
    xYPlot0.getRangeMinorGridlinePaint();
    assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public double getUpperBound() {
    return this.range.getUpperBound();
}","public void test153261() throws Throwable {
    DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
    NumberAxis numberAxis0 = new NumberAxis(""fcs[#>"");
    StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
    XYPlot xYPlot0 = new XYPlot(defaultTableXYDataset0, numberAxis0, numberAxis0, stackedXYAreaRenderer0);
    xYPlot0.getDomainMinorGridlinePaint();
    assertEquals(5.0E-9, numberAxis0.getUpperBound(), 0.01);
}","/**
 * Returns the upper bound for the axis range.
 *
 * @return The upper bound.
 *
 * @see #setUpperBound(double)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test153262() throws Throwable {
    DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
    NumberAxis numberAxis0 = new NumberAxis(""fcs[#>"");
    StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
    XYPlot xYPlot0 = new XYPlot(defaultTableXYDataset0, numberAxis0, numberAxis0, stackedXYAreaRenderer0);
    xYPlot0.getDomainMinorGridlinePaint();
    assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test154263() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    Color color0 = (Color) combinedDomainXYPlot0.getDomainCrosshairPaint();
    ValueMarker valueMarker0 = new ValueMarker(1663.66881479802, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT, combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE, color0, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE, 0.0F);
    Layer layer0 = Layer.BACKGROUND;
    combinedDomainXYPlot0.removeRangeMarker(0, (Marker) valueMarker0, layer0, true);
    assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test154264() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    Color color0 = (Color) combinedDomainXYPlot0.getDomainCrosshairPaint();
    ValueMarker valueMarker0 = new ValueMarker(1663.66881479802, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT, combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE, color0, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE, 0.0F);
    Layer layer0 = Layer.BACKGROUND;
    combinedDomainXYPlot0.removeRangeMarker(0, (Marker) valueMarker0, layer0, true);
    assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test155266() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    Layer layer0 = Layer.FOREGROUND;
    combinedDomainXYPlot0.getDomainMarkers(layer0);
    assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test155267() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    Layer layer0 = Layer.FOREGROUND;
    combinedDomainXYPlot0.getDomainMarkers(layer0);
    assertEquals(1, combinedDomainXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test156268() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    combinedDomainXYPlot0.getDomainAxisCount();
    assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test157269() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    Color color0 = (Color) combinedRangeXYPlot0.getRangeGridlinePaint();
    assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test157270() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    Color color0 = (Color) combinedRangeXYPlot0.getRangeGridlinePaint();
    assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test157271() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    Color color0 = (Color) combinedRangeXYPlot0.getRangeGridlinePaint();
    assertEquals(1, combinedRangeXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public int getWeight() {
    return this.weight;
}","public void test158273() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    LegendItemCollection legendItemCollection0 = combinedDomainXYPlot0.getLegendItems();
    combinedDomainXYPlot0.setFixedLegendItems(legendItemCollection0);
    assertEquals(1, combinedDomainXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test159274() throws Throwable {
    LogAxis logAxis0 = new LogAxis("", "");
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logAxis0);
    combinedDomainXYPlot0.getRangeGridlineStroke();
    assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test160275() throws Throwable {
    Year year0 = new Year();
    DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, (-70), year0);
    String[] stringArray0 = new String[3];
    SymbolAxis symbolAxis0 = new SymbolAxis(""Z>,0][>mO{["", stringArray0);
    StandardXYZToolTipGenerator standardXYZToolTipGenerator0 = new StandardXYZToolTipGenerator();
    StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer(4, standardXYZToolTipGenerator0, (XYURLGenerator) null);
    XYPlot xYPlot0 = new XYPlot(dynamicTimeSeriesCollection0, symbolAxis0, symbolAxis0, standardXYItemRenderer0);
    CategoryMarker categoryMarker0 = new CategoryMarker(true);
    xYPlot0.addDomainMarker((Marker) categoryMarker0);
    assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test160276() throws Throwable {
    Year year0 = new Year();
    DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, (-70), year0);
    String[] stringArray0 = new String[3];
    SymbolAxis symbolAxis0 = new SymbolAxis(""Z>,0][>mO{["", stringArray0);
    StandardXYZToolTipGenerator standardXYZToolTipGenerator0 = new StandardXYZToolTipGenerator();
    StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer(4, standardXYZToolTipGenerator0, (XYURLGenerator) null);
    XYPlot xYPlot0 = new XYPlot(dynamicTimeSeriesCollection0, symbolAxis0, symbolAxis0, standardXYItemRenderer0);
    CategoryMarker categoryMarker0 = new CategoryMarker(true);
    xYPlot0.addDomainMarker((Marker) categoryMarker0);
    assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test161278() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    BasicStroke basicStroke0 = (BasicStroke) combinedDomainXYPlot0.getDomainZeroBaselineStroke();
    assertEquals(1, combinedDomainXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test161279() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    BasicStroke basicStroke0 = (BasicStroke) combinedDomainXYPlot0.getDomainZeroBaselineStroke();
    assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public double getRangeCrosshairValue() {
    return this.rangeCrosshairValue;
}","public void test162280() throws Throwable {
    String[] stringArray0 = new String[0];
    SymbolAxis symbolAxis0 = new SymbolAxis(""Requires 'index' >= 0."", stringArray0);
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(symbolAxis0);
    combinedDomainXYPlot0.setRangeCrosshairValue(0.35);
    assertEquals(0.35, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
}","/**
 * Returns the range crosshair value.
 *
 * @return The value.
 *
 * @see #setRangeCrosshairValue(double)
 */"
"public int getRendererCount() {
    return this.renderers.size();
}","public void test163281() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    StandardXYZToolTipGenerator standardXYZToolTipGenerator0 = new StandardXYZToolTipGenerator();
    StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer(0, standardXYZToolTipGenerator0);
    combinedDomainXYPlot0.setRenderer((XYItemRenderer) standardXYItemRenderer0);
    assertEquals(1, combinedDomainXYPlot0.getRendererCount());
}","/**
 * Returns the number of renderer slots for this plot.
 *
 * @return The number of renderer slots.
 *
 * @since 1.0.11
 */"
"public int getWeight() {
    return this.weight;
}","public void test164282() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    xYPlot0.getAnnotations();
    assertEquals(1, xYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test164283() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    xYPlot0.getAnnotations();
    assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test165284() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    ValueMarker valueMarker0 = new ValueMarker(10);
    combinedRangeXYPlot0.removeRangeMarker((Marker) valueMarker0);
    assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test166285() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    Layer layer0 = Layer.FOREGROUND;
    combinedDomainXYPlot0.getRangeMarkers(layer0);
    assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test167286() throws Throwable {
    LogAxis logAxis0 = new LogAxis("", "");
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logAxis0);
    AxisLocation axisLocation0 = combinedDomainXYPlot0.getDomainAxisLocation();
    combinedDomainXYPlot0.setDomainAxisLocation(500, axisLocation0);
    assertEquals(1, combinedDomainXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test168287() throws Throwable {
    LogAxis logAxis0 = new LogAxis("", "");
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logAxis0);
    boolean boolean0 = combinedDomainXYPlot0.isRangeCrosshairLockedOnData();
    assertTrue(boolean0);
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test168288() throws Throwable {
    LogAxis logAxis0 = new LogAxis("", "");
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logAxis0);
    boolean boolean0 = combinedDomainXYPlot0.isRangeCrosshairLockedOnData();
    assertEquals(1, combinedDomainXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public int getWeight() {
    return this.weight;
}","public void test169289() throws Throwable {
    MockDate mockDate0 = new MockDate();
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
    PeriodAxis periodAxis0 = new PeriodAxis(""mfaJ[$`'["", fixedMillisecond0, fixedMillisecond0);
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
    combinedRangeXYPlot0.setFixedDomainAxisSpace((AxisSpace) null);
    assertEquals(1, combinedRangeXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test170290() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    LookupPaintScale lookupPaintScale0 = new LookupPaintScale(Double.NaN, 10, combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT);
    PeriodAxis periodAxis0 = new PeriodAxis("""");
    PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(lookupPaintScale0, periodAxis0);
    AxisLocation axisLocation0 = paintScaleLegend0.getAxisLocation();
    combinedRangeXYPlot0.setRangeAxisLocation(axisLocation0);
    assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test170291() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    LookupPaintScale lookupPaintScale0 = new LookupPaintScale(Double.NaN, 10, combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT);
    PeriodAxis periodAxis0 = new PeriodAxis("""");
    PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(lookupPaintScale0, periodAxis0);
    AxisLocation axisLocation0 = paintScaleLegend0.getAxisLocation();
    combinedRangeXYPlot0.setRangeAxisLocation(axisLocation0);
    assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public String toString() {
    return this.name;
}","public void test171292() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    SeriesRenderingOrder seriesRenderingOrder0 = combinedDomainXYPlot0.getSeriesRenderingOrder();
    assertEquals(""SeriesRenderingOrder.REVERSE"", seriesRenderingOrder0.toString());
}","/**
 * Returns a string representing the object.
 *
 * @return The string (never <code>null</code>).
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test172293() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    BasicStroke basicStroke0 = (BasicStroke) combinedRangeXYPlot0.getRangeZeroBaselineStroke();
    assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test172294() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    BasicStroke basicStroke0 = (BasicStroke) combinedRangeXYPlot0.getRangeZeroBaselineStroke();
    assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test173296() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    combinedRangeXYPlot0.setRangeZeroBaselineVisible(false);
    assertEquals(1, combinedRangeXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test174297() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    CategoryMarker categoryMarker0 = new CategoryMarker(false);
    xYPlot0.addRangeMarker((Marker) categoryMarker0);
    assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public void setRangeAxisLocation(int index, AxisLocation location) {
    // delegate...
    setRangeAxisLocation(index, location, true);
}","public void test175298() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    AxisLocation axisLocation0 = AxisLocation.TOP_OR_RIGHT;
    // Undeclared exception!
    try {
        xYPlot0.setRangeAxisLocation((-62), axisLocation0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Requires index >= 0.
        //
        verifyException(""org.jfree.chart.util.AbstractObjectList"", e);
    }
}","/**
 * Sets the location for a range axis and sends a {@link PlotChangeEvent}
 * to all registered listeners.
 *
 * @param index  the axis index.
 * @param location  the location (<code>null</code> permitted).
 *
 * @see #getRangeAxisLocation(int)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test176299() throws Throwable {
    DateAxis dateAxis0 = new DateAxis(""="");
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
    combinedRangeXYPlot0.isDomainZeroBaselineVisible();
    assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test176300() throws Throwable {
    DateAxis dateAxis0 = new DateAxis(""="");
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
    combinedRangeXYPlot0.isDomainZeroBaselineVisible();
    assertEquals(1, combinedRangeXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test177301() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    xYPlot0.getDatasetRenderingOrder();
    assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test177302() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    xYPlot0.getDatasetRenderingOrder();
    assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public double getLeft() {
    return this.left;
}","public void test178303() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    RectangleInsets rectangleInsets0 = combinedDomainXYPlot0.getAxisOffset();
    assertEquals(4.0, rectangleInsets0.getLeft(), 0.01);
}","/**
 * Returns the left insets.
 *
 * @return The left insets.
 */"
"public double getRight() {
    return this.right;
}","public void test178304() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    RectangleInsets rectangleInsets0 = combinedDomainXYPlot0.getAxisOffset();
    assertEquals(4.0, rectangleInsets0.getRight(), 0.01);
}","/**
 * Returns the right insets.
 *
 * @return The right insets.
 */"
"public int getWeight() {
    return this.weight;
}","public void test178305() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    RectangleInsets rectangleInsets0 = combinedDomainXYPlot0.getAxisOffset();
    assertEquals(1, combinedDomainXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public double getBottom() {
    return this.bottom;
}","public void test178306() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    RectangleInsets rectangleInsets0 = combinedDomainXYPlot0.getAxisOffset();
    assertEquals(4.0, rectangleInsets0.getBottom(), 0.01);
}","/**
 * Returns the bottom insets.
 *
 * @return The bottom insets.
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test178307() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    RectangleInsets rectangleInsets0 = combinedDomainXYPlot0.getAxisOffset();
    assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public double getTop() {
    return this.top;
}","public void test178308() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    RectangleInsets rectangleInsets0 = combinedDomainXYPlot0.getAxisOffset();
    assertEquals(4.0, rectangleInsets0.getTop(), 0.01);
}","/**
 * Returns the top insets.
 *
 * @return The top insets.
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test179309() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
    PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
    Point2D.Float point2D_Float0 = new Point2D.Float(10, 0.0F);
    combinedRangeXYPlot0.zoomRangeAxes(1.0, plotRenderingInfo0, (Point2D) point2D_Float0);
    assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public int getDomainAxisCount() {
    return this.domainAxes.size();
}","public void test180310() throws Throwable {
    LogAxis logAxis0 = new LogAxis();
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
    combinedRangeXYPlot0.setDomainAxis((ValueAxis) logAxis0);
    assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
}","/**
 * Returns the number of domain axes.
 *
 * @return The axis count.
 *
 * @see #getRangeAxisCount()
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test181311() throws Throwable {
    ThermometerPlot thermometerPlot0 = new ThermometerPlot();
    ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
    BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
    Paint paint0 = boxAndWhiskerRenderer0.getArtifactPaint();
    combinedDomainXYPlot0.setRangeTickBandPaint(paint0);
    assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test181312() throws Throwable {
    ThermometerPlot thermometerPlot0 = new ThermometerPlot();
    ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
    BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
    Paint paint0 = boxAndWhiskerRenderer0.getArtifactPaint();
    combinedDomainXYPlot0.setRangeTickBandPaint(paint0);
    assertEquals(1, combinedDomainXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test182313() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10.0);
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
    combinedRangeXYPlot0.isDomainMinorGridlinesVisible();
    assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test182314() throws Throwable {
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10.0);
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
    combinedRangeXYPlot0.isDomainMinorGridlinesVisible();
    assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public float getForegroundAlpha() {
    return this.foregroundAlpha;
}","public void test183315() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    xYPlot0.setFixedRangeAxisSpace((AxisSpace) null);
    assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
}","/**
 * Returns the alpha-transparency for the plot foreground.
 *
 * @return The alpha-transparency.
 *
 * @see #setForegroundAlpha(float)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test184316() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    combinedRangeXYPlot0.isRangePannable();
    assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test184317() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    combinedRangeXYPlot0.isRangePannable();
    assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test184318() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    combinedRangeXYPlot0.isRangePannable();
    assertEquals(1, combinedRangeXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test185319() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    CategoryMarker categoryMarker0 = new CategoryMarker(false, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_PAINT, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE);
    Layer layer0 = Layer.FOREGROUND;
    combinedDomainXYPlot0.removeRangeMarker((Marker) categoryMarker0, layer0);
    assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test186320() throws Throwable {
    NumberAxis3D numberAxis3D0 = new NumberAxis3D();
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
    BasicStroke basicStroke0 = (BasicStroke) combinedDomainXYPlot0.getRangeCrosshairStroke();
    assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test186321() throws Throwable {
    NumberAxis3D numberAxis3D0 = new NumberAxis3D();
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
    BasicStroke basicStroke0 = (BasicStroke) combinedDomainXYPlot0.getRangeCrosshairStroke();
    assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test187323() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    combinedDomainXYPlot0.getDomainAxisEdge();
    assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public boolean getRefreshBuffer() {
    return this.refreshBuffer;
}","public void test188324() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    JFreeChart jFreeChart0 = new JFreeChart("""", combinedRangeXYPlot0);
    ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
    ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
    PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
    GridBagLayout gridBagLayout0 = new GridBagLayout();
    Point point0 = gridBagLayout0.getLayoutOrigin();
    combinedRangeXYPlot0.zoomRangeAxes(10.0, 57.52977, plotRenderingInfo0, (Point2D) point0);
    assertTrue(chartPanel0.getRefreshBuffer());
}","/**
 * Returns the flag that controls whether or not the offscreen buffer
 * needs to be refreshed.
 *
 * @return A boolean.
 */"
"public boolean isRangeZoomable() {
    return true;
}","public void test188325() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    JFreeChart jFreeChart0 = new JFreeChart("""", combinedRangeXYPlot0);
    ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
    ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
    PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
    GridBagLayout gridBagLayout0 = new GridBagLayout();
    Point point0 = gridBagLayout0.getLayoutOrigin();
    combinedRangeXYPlot0.zoomRangeAxes(10.0, 57.52977, plotRenderingInfo0, (Point2D) point0);
    assertTrue(combinedRangeXYPlot0.isRangeZoomable());
}","/**
 * Returns <code>true</code>, indicating that the range axis/axes for this
 * plot are zoomable.
 *
 * @return A boolean.
 *
 * @see #isDomainZoomable()
 */"
"public double getRangeCrosshairValue() {
    return this.rangeCrosshairValue;
}","public void test189326() throws Throwable {
    DateAxis dateAxis0 = new DateAxis(""(6k{sdDj#~V:Q!"");
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
    double double0 = combinedRangeXYPlot0.getRangeCrosshairValue();
    assertEquals(0.0, double0, 0.01);
}","/**
 * Returns the range crosshair value.
 *
 * @return The value.
 *
 * @see #setRangeCrosshairValue(double)
 */"
"public boolean isRangeZeroBaselineVisible() {
    return this.rangeZeroBaselineVisible;
}","public void test190327() throws Throwable {
    MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
    PeriodAxis periodAxis0 = new PeriodAxis(""Null 'offset' argument."");
    Color color0 = (Color) Axis.DEFAULT_AXIS_LINE_PAINT;
    XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(color0, periodAxis0.DEFAULT_TICK_MARK_PAINT, true);
    XYPlot xYPlot0 = new XYPlot(matrixSeriesCollection0, periodAxis0, periodAxis0, xYDifferenceRenderer0);
    AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
    xYPlot0.setDomainAxisLocation(axisLocation0, false);
    assertFalse(xYPlot0.isRangeZeroBaselineVisible());
}","/**
 * Returns a flag that controls whether or not a zero baseline is
 * displayed for the range axis.
 *
 * @return A boolean.
 *
 * @see #setRangeZeroBaselineVisible(boolean)
 */"
"public void setDomainAxes(ValueAxis[] axes) {
    for (int i = 0; i < axes.length; i++) {
        setDomainAxis(i, axes[i], false);
    }
    fireChangeEvent();
}","public void test191328() throws Throwable {
    Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
    JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
    DateAxis dateAxis0 = new DateAxis(""XY_Plot"");
    XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer();
    XYPlot xYPlot0 = new XYPlot(jDBCXYDataset0, dateAxis0, dateAxis0, xYLineAndShapeRenderer0);
    // Undeclared exception!
    try {
        xYPlot0.setDomainAxes((ValueAxis[]) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jfree.chart.plot.XYPlot"", e);
    }
}","/**
 * Sets the domain axes for this plot and sends a {@link PlotChangeEvent}
 * to all registered listeners.
 *
 * @param axes  the axes (<code>null</code> not permitted).
 *
 * @see #setRangeAxes(ValueAxis[])
 */"
"public int getWeight() {
    return this.weight;
}","public void test192329() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    xYPlot0.setWeight(335);
    assertEquals(335, xYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public int getWeight() {
    return this.weight;
}","public void test193330() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    Color color0 = (Color) xYPlot0.getRangeCrosshairPaint();
    assertEquals(1, xYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public int getWeight() {
    return this.weight;
}","public void test194332() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    combinedRangeXYPlot0.clearAnnotations();
    assertEquals(1, combinedRangeXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test194333() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    combinedRangeXYPlot0.clearAnnotations();
    assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test195334() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1, 1746);
    combinedRangeXYPlot0.setDataset((XYDataset) dynamicTimeSeriesCollection0);
    assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public int getDatasetCount() {
    return this.datasets.size();
}","public void test195335() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1, 1746);
    combinedRangeXYPlot0.setDataset((XYDataset) dynamicTimeSeriesCollection0);
    assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
}","/**
 * Returns the number of datasets.
 *
 * @return The number of datasets.
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test196336() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    Color color0 = (Color) combinedDomainXYPlot0.getRangeZeroBaselinePaint();
    assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test196337() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    Color color0 = (Color) combinedDomainXYPlot0.getRangeZeroBaselinePaint();
    assertEquals(1, combinedDomainXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test197339() throws Throwable {
    DateAxis dateAxis0 = new DateAxis(""lM'8h(1mMLzI:\""'G"");
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
    combinedDomainXYPlot0.isRangeMinorGridlinesVisible();
    assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test197340() throws Throwable {
    DateAxis dateAxis0 = new DateAxis(""lM'8h(1mMLzI:\""'G"");
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
    combinedDomainXYPlot0.isRangeMinorGridlinesVisible();
    assertEquals(1, combinedDomainXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test198341() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    CategoryMarker categoryMarker0 = new CategoryMarker(false, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_PAINT, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE);
    Layer layer0 = Layer.FOREGROUND;
    combinedDomainXYPlot0.addDomainMarker((Marker) categoryMarker0, layer0);
    boolean boolean0 = combinedDomainXYPlot0.removeDomainMarker((Marker) categoryMarker0);
    assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public boolean removeDomainMarker(Marker marker) {
    return removeDomainMarker(marker, Layer.FOREGROUND);
}","public void test198342() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    CategoryMarker categoryMarker0 = new CategoryMarker(false, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_PAINT, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE);
    Layer layer0 = Layer.FOREGROUND;
    combinedDomainXYPlot0.addDomainMarker((Marker) categoryMarker0, layer0);
    boolean boolean0 = combinedDomainXYPlot0.removeDomainMarker((Marker) categoryMarker0);
    assertTrue(boolean0);
}","/**
 * Removes a marker for the domain axis and sends a {@link PlotChangeEvent}
 * to all registered listeners.
 *
 * @param marker  the marker.
 *
 * @return A boolean indicating whether or not the marker was actually
 *         removed.
 *
 * @since 1.0.7
 */"
"public int getWeight() {
    return this.weight;
}","public void test199343() throws Throwable {
    MockDate mockDate0 = new MockDate();
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
    PeriodAxis periodAxis0 = new PeriodAxis(""mfaJ[$`'["", fixedMillisecond0, fixedMillisecond0);
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
    combinedRangeXYPlot0.getRangeAxisCount();
    assertEquals(1, combinedRangeXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test199344() throws Throwable {
    MockDate mockDate0 = new MockDate();
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
    PeriodAxis periodAxis0 = new PeriodAxis(""mfaJ[$`'["", fixedMillisecond0, fixedMillisecond0);
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
    combinedRangeXYPlot0.getRangeAxisCount();
    assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public double getPeriod() {
    return this.period;
}","public void test200345() throws Throwable {
    Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
    JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, (-850.8));
    XYErrorRenderer xYErrorRenderer0 = new XYErrorRenderer();
    XYPlot xYPlot0 = new XYPlot(jDBCXYDataset0, cyclicNumberAxis0, cyclicNumberAxis0, xYErrorRenderer0);
    xYPlot0.setDomainCrosshairValue(0.05);
    assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
}","/**
 * The cycle bound is a multiple of the period, plus optionally a start
 * offset.
 * <P>
 * <pre>cb = n * period + offset</pre><br>
 *
 * @return The current period.
 *
 * @see #getCycleBound()
 */"
"public double getLowerBound() {
    return this.range.getLowerBound();
}","public void test200346() throws Throwable {
    Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
    JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
    CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, (-850.8));
    XYErrorRenderer xYErrorRenderer0 = new XYErrorRenderer();
    XYPlot xYPlot0 = new XYPlot(jDBCXYDataset0, cyclicNumberAxis0, cyclicNumberAxis0, xYErrorRenderer0);
    xYPlot0.setDomainCrosshairValue(0.05);
    assertEquals((-5.0E-9), cyclicNumberAxis0.getLowerBound(), 0.01);
}","/**
 * Returns the lower bound of the axis range.
 *
 * @return The lower bound.
 *
 * @see #setLowerBound(double)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test201347() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    CategoryMarker categoryMarker0 = new CategoryMarker(1.0F);
    Layer layer0 = Layer.BACKGROUND;
    combinedRangeXYPlot0.removeDomainMarker((Marker) categoryMarker0, layer0);
    assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test201348() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    CategoryMarker categoryMarker0 = new CategoryMarker(1.0F);
    Layer layer0 = Layer.BACKGROUND;
    combinedRangeXYPlot0.removeDomainMarker((Marker) categoryMarker0, layer0);
    assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test202349() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    xYPlot0.canSelectByRegion();
    assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test203350() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    xYPlot0.getDomainZeroBaselinePaint();
    assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test203351() throws Throwable {
    XYPlot xYPlot0 = new XYPlot();
    xYPlot0.getDomainZeroBaselinePaint();
    assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public AxisLocation getRangeAxisLocation() {
    return (AxisLocation) this.rangeAxisLocations.get(0);
}","public void test204352() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation();
    assertNotNull(axisLocation0);
}","/**
 * Returns the location of the primary range axis.
 *
 * @return The location (never <code>null</code>).
 *
 * @see #setRangeAxisLocation(AxisLocation)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test204353() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation();
    assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public ValueAxis getRangeAxisForDataset(int index) {
    int upper = Math.max(getDatasetCount(), getRendererCount());
    if (index < 0 || index >= upper) {
        throw new IllegalArgumentException(""Index "" + index + "" out of bounds."");
    }
    ValueAxis valueAxis = null;
    List axisIndices = (List) this.datasetToRangeAxesMap.get(new Integer(index));
    if (axisIndices != null) {
        // the first axis in the list is used for data <--> Java2D
        Integer axisIndex = (Integer) axisIndices.get(0);
        valueAxis = getRangeAxis(axisIndex.intValue());
    } else {
        valueAxis = getRangeAxis(0);
    }
    return valueAxis;
}","public void test205354() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    // Undeclared exception!
    try {
        combinedDomainXYPlot0.getRangeAxisForDataset(355);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Index 355 out of bounds.
        //
        verifyException(""org.jfree.chart.plot.XYPlot"", e);
    }
}","/**
 * Returns the range axis for a dataset.
 *
 * @param index  the dataset index.
 *
 * @return The axis.
 */"
"public boolean removeAnnotation(XYAnnotation annotation) {
    return removeAnnotation(annotation, true);
}","public void test206355() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(1.0F, 0.0, (-1566.47034), 0.0, combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_PAINT);
    boolean boolean0 = combinedDomainXYPlot0.removeAnnotation((XYAnnotation) xYLineAnnotation0);
    assertFalse(boolean0);
}","/**
 * Removes an annotation from the plot and sends a {@link PlotChangeEvent}
 * to all registered listeners.
 *
 * @param annotation  the annotation (<code>null</code> not permitted).
 *
 * @return A boolean (indicates whether or not the annotation was removed).
 *
 * @see #addAnnotation(XYAnnotation)
 * @see #getAnnotations()
 */"
"public void addRangeMarker(Marker marker, Layer layer) {
    addRangeMarker(0, marker, layer);
}","public void test207356() throws Throwable {
    CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
    Layer layer0 = Layer.FOREGROUND;
    // Undeclared exception!
    try {
        combinedDomainXYPlot0.addRangeMarker((Marker) null, layer0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jfree.chart.plot.XYPlot"", e);
    }
}","/**
 * Adds a marker for the range axis in the specified layer and sends a
 * {@link PlotChangeEvent} to all registered listeners.
 * <P>
 * Typically a marker will be drawn by the renderer as a line perpendicular
 * to the range axis, however this is entirely up to the renderer.
 *
 * @param marker  the marker (<code>null</code> not permitted).
 * @param layer  the layer (foreground or background).
 *
 * @see #addRangeMarker(int, Marker, Layer)
 */"
"public boolean isRangeCrosshairLockedOnData() {
    return this.rangeCrosshairLockedOnData;
}","public void test208357() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    combinedRangeXYPlot0.getDomainMinorGridlineStroke();
    assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setRangeCrosshairLockedOnData(boolean)
 */"
"public int getWeight() {
    return this.weight;
}","public void test208358() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    combinedRangeXYPlot0.getDomainMinorGridlineStroke();
    assertEquals(1, combinedRangeXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test208359() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    combinedRangeXYPlot0.getDomainMinorGridlineStroke();
    assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public void setRangeAxis(int index, ValueAxis axis) {
    setRangeAxis(index, axis, true);
}","public void test209360() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    DateAxis dateAxis0 = new DateAxis();
    // Undeclared exception!
    try {
        combinedRangeXYPlot0.setRangeAxis((-693), (ValueAxis) dateAxis0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Requires index >= 0.
        //
        verifyException(""org.jfree.chart.util.AbstractObjectList"", e);
    }
}","/**
 * Sets a range axis and sends a {@link PlotChangeEvent} to all registered
 * listeners.
 *
 * @param index  the axis index.
 * @param axis  the axis (<code>null</code> permitted).
 *
 * @see #getRangeAxis(int)
 */"
"public int getWeight() {
    return this.weight;
}","public void test210361() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    double double0 = combinedRangeXYPlot0.getDomainCrosshairValue();
    assertEquals(1, combinedRangeXYPlot0.getWeight());
}","/**
 * Returns the weight for this plot when it is used as a subplot within a
 * combined plot.
 *
 * @return The weight.
 *
 * @see #setWeight(int)
 */"
"public boolean isDomainCrosshairLockedOnData() {
    return this.domainCrosshairLockedOnData;
}","public void test210362() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    double double0 = combinedRangeXYPlot0.getDomainCrosshairValue();
    assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
}","/**
 * Returns a flag indicating whether or not the crosshair should ""lock-on""
 * to actual data values.
 *
 * @return The flag.
 *
 * @see #setDomainCrosshairLockedOnData(boolean)
 */"
"public double getDomainCrosshairValue() {
    return this.domainCrosshairValue;
}","public void test210363() throws Throwable {
    CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
    double double0 = combinedRangeXYPlot0.getDomainCrosshairValue();
    assertEquals(0.0, double0, 0.01);
}","/**
 * Returns the domain crosshair value.
 *
 * @return The value.
 *
 * @see #setDomainCrosshairValue(double)
 */"
