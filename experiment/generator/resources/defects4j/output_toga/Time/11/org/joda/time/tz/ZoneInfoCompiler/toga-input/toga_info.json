{
  "test1212" : {
    "methodSignature" : "public void parseDataFile(BufferedReader in) throws IOException",
    "methodName" : "parseDataFile",
    "className" : "org.joda.time.tz.ZoneInfoCompiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1212() throws Throwable {\n    ZoneInfoCompiler zoneInfoCompiler0 = new ZoneInfoCompiler();\n    zoneInfoCompiler0.parseDataFile((BufferedReader) null);\n}",
    "testName" : "test1212"
  },
  "test2323" : {
    "methodSignature" : "static boolean test(String id, DateTimeZone tz)",
    "methodName" : "test",
    "className" : "org.joda.time.tz.ZoneInfoCompiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2323() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(3);\n    boolean boolean0 = ZoneInfoCompiler.test(\"MonthOfYear: 1\\nDayOfMonth: 1\\nDayOfWeek: 0\\nAdvanceDayOfWeek: false\\nMillisOfDay: 0\\nZoneChar: w\\n\", dateTimeZone0);\n}",
    "testName" : "test2323"
  },
  "test3434" : {
    "methodSignature" : "static String parseOptional(String str)",
    "methodName" : "parseOptional",
    "className" : "org.joda.time.tz.ZoneInfoCompiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3434() throws Throwable {\n    String string0 = ZoneInfoCompiler.parseOptional(\"\");\n}",
    "testName" : "test3434"
  },
  "test1313" : {
    "methodSignature" : "public void parseDataFile(BufferedReader in) throws IOException",
    "methodName" : "parseDataFile",
    "className" : "org.joda.time.tz.ZoneInfoCompiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1313() throws Throwable {\n    ZoneInfoCompiler zoneInfoCompiler0 = new ZoneInfoCompiler();\n    PipedReader pipedReader0 = new PipedReader();\n    BufferedReader bufferedReader0 = new BufferedReader(pipedReader0);\n    zoneInfoCompiler0.parseDataFile(bufferedReader0);\n}",
    "testName" : "test1313"
  },
  "test2424" : {
    "methodSignature" : "static char parseZoneChar(char c)",
    "methodName" : "parseZoneChar",
    "className" : "org.joda.time.tz.ZoneInfoCompiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2424() throws Throwable {\n    char char0 = ZoneInfoCompiler.parseZoneChar('Q');\n}",
    "testName" : "test2424"
  },
  "test3535" : {
    "methodSignature" : "static int parseYear(String str, int def)",
    "methodName" : "parseYear",
    "className" : "org.joda.time.tz.ZoneInfoCompiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3535() throws Throwable {\n    ZoneInfoCompiler.parseYear(\"zone\", 83);\n}",
    "testName" : "test3535"
  },
  "test1010" : {
    "methodSignature" : "static int parseMonth(String str)",
    "methodName" : "parseMonth",
    "className" : "org.joda.time.tz.ZoneInfoCompiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1010() throws Throwable {\n    ZoneInfoCompiler.parseMonth((String) null);\n}",
    "testName" : "test1010"
  },
  "test3232" : {
    "methodSignature" : "static int parseTime(String str)",
    "methodName" : "parseTime",
    "className" : "org.joda.time.tz.ZoneInfoCompiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3232() throws Throwable {\n    ZoneInfoCompiler.parseTime(\"qJagA79?:\");\n}",
    "testName" : "test3232"
  },
  "test4445" : {
    "methodSignature" : "public static void main(String[] args) throws Exception",
    "methodName" : "main",
    "className" : "org.joda.time.tz.ZoneInfoCompiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4445() throws Throwable {\n    String[] stringArray0 = new String[0];\n    ZoneInfoCompiler.main(stringArray0);\n}",
    "testName" : "test4445"
  },
  "test1111" : {
    "methodSignature" : "static int parseDayOfWeek(String str)",
    "methodName" : "parseDayOfWeek",
    "className" : "org.joda.time.tz.ZoneInfoCompiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1111() throws Throwable {\n    ZoneInfoCompiler.parseDayOfWeek((String) null);\n}",
    "testName" : "test1111"
  },
  "test2222" : {
    "methodSignature" : "public Map<String, DateTimeZone> compile(File outputDir, File[] sources) throws IOException",
    "methodName" : "compile",
    "className" : "org.joda.time.tz.ZoneInfoCompiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2222() throws Throwable {\n    ZoneInfoCompiler zoneInfoCompiler0 = new ZoneInfoCompiler();\n    File file0 = MockFile.createTempFile(\"maximum\", \"co!\");\n    zoneInfoCompiler0.compile(file0, (File[]) null);\n}",
    "testName" : "test2222"
  },
  "test3333" : {
    "methodSignature" : "static int parseTime(String str)",
    "methodName" : "parseTime",
    "className" : "org.joda.time.tz.ZoneInfoCompiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3333() throws Throwable {\n    int int0 = ZoneInfoCompiler.parseTime(\"-0L0K)xA\");\n}",
    "testName" : "test3333"
  },
  "test033" : {
    "methodSignature" : "static String parseOptional(String str)",
    "methodName" : "parseOptional",
    "className" : "org.joda.time.tz.ZoneInfoCompiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033() throws Throwable {\n    String string0 = ZoneInfoCompiler.parseOptional(\"-\\\"ew~P?7_k;Xpg\");\n}",
    "testName" : "test033"
  },
  "test055" : {
    "methodSignature" : "static void writeZoneInfoMap(DataOutputStream dout, Map<String, DateTimeZone> zimap) throws IOException",
    "methodName" : "writeZoneInfoMap",
    "className" : "org.joda.time.tz.ZoneInfoCompiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055() throws Throwable {\n    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();\n    DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);\n    HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();\n    ZoneInfoCompiler.writeZoneInfoMap(dataOutputStream0, hashMap0);\n}",
    "testName" : "test055"
  },
  "test077" : {
    "methodSignature" : "static int parseYear(String str, int def)",
    "methodName" : "parseYear",
    "className" : "org.joda.time.tz.ZoneInfoCompiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077() throws Throwable {\n    ZoneInfoCompiler.parseYear((String) null, 2);\n}",
    "testName" : "test077"
  },
  "test099" : {
    "methodSignature" : "static String parseOptional(String str)",
    "methodName" : "parseOptional",
    "className" : "org.joda.time.tz.ZoneInfoCompiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099() throws Throwable {\n    ZoneInfoCompiler.parseOptional((String) null);\n}",
    "testName" : "test099"
  },
  "test1616" : {
    "methodSignature" : "static Chronology getLenientISOChronology()",
    "methodName" : "getLenientISOChronology",
    "className" : "org.joda.time.tz.ZoneInfoCompiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1616() throws Throwable {\n    Chronology chronology0 = ZoneInfoCompiler.getLenientISOChronology();\n    Chronology chronology1 = ZoneInfoCompiler.getLenientISOChronology();\n}",
    "testName" : "test1616"
  },
  "test3839" : {
    "methodSignature" : "static int parseTime(String str)",
    "methodName" : "parseTime",
    "className" : "org.joda.time.tz.ZoneInfoCompiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3839() throws Throwable {\n    Chronology chronology0 = ZoneInfoCompiler.getLenientISOChronology();\n    int int0 = ZoneInfoCompiler.parseTime(\"24,G0\");\n}",
    "testName" : "test3839"
  },
  "test2727" : {
    "methodSignature" : "static char parseZoneChar(char c)",
    "methodName" : "parseZoneChar",
    "className" : "org.joda.time.tz.ZoneInfoCompiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2727() throws Throwable {\n    char char0 = ZoneInfoCompiler.parseZoneChar('g');\n}",
    "testName" : "test2727"
  },
  "test3838" : {
    "methodSignature" : "static Chronology getLenientISOChronology()",
    "methodName" : "getLenientISOChronology",
    "className" : "org.joda.time.tz.ZoneInfoCompiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3838() throws Throwable {\n    Chronology chronology0 = ZoneInfoCompiler.getLenientISOChronology();\n}",
    "testName" : "test3838"
  },
  "test2828" : {
    "methodSignature" : "static char parseZoneChar(char c)",
    "methodName" : "parseZoneChar",
    "className" : "org.joda.time.tz.ZoneInfoCompiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2828() throws Throwable {\n    char char0 = ZoneInfoCompiler.parseZoneChar('U');\n}",
    "testName" : "test2828"
  },
  "test1414" : {
    "methodSignature" : "public Map<String, DateTimeZone> compile(File outputDir, File[] sources) throws IOException",
    "methodName" : "compile",
    "className" : "org.joda.time.tz.ZoneInfoCompiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1414() throws Throwable {\n    ZoneInfoCompiler zoneInfoCompiler0 = new ZoneInfoCompiler();\n    File[] fileArray0 = new File[3];\n    zoneInfoCompiler0.compile((File) null, fileArray0);\n}",
    "testName" : "test1414"
  },
  "test2525" : {
    "methodSignature" : "static char parseZoneChar(char c)",
    "methodName" : "parseZoneChar",
    "className" : "org.joda.time.tz.ZoneInfoCompiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2525() throws Throwable {\n    char char0 = ZoneInfoCompiler.parseZoneChar('w');\n}",
    "testName" : "test2525"
  },
  "test3636" : {
    "methodSignature" : "static int parseYear(String str, int def)",
    "methodName" : "parseYear",
    "className" : "org.joda.time.tz.ZoneInfoCompiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3636() throws Throwable {\n    int int0 = ZoneInfoCompiler.parseYear(\"minimum\", (-76));\n}",
    "testName" : "test3636"
  },
  "test1515" : {
    "methodSignature" : "public Map<String, DateTimeZone> compile(File outputDir, File[] sources) throws IOException",
    "methodName" : "compile",
    "className" : "org.joda.time.tz.ZoneInfoCompiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1515() throws Throwable {\n    ZoneInfoCompiler zoneInfoCompiler0 = new ZoneInfoCompiler();\n    MockFile mockFile0 = new MockFile(\"-I%rwfe}24G>O&M1H\", \"-I%rwfe}24G>O&M1H\");\n    File[] fileArray0 = new File[6];\n    fileArray0[0] = (File) mockFile0;\n    zoneInfoCompiler0.compile(mockFile0, fileArray0);\n}",
    "testName" : "test1515"
  },
  "test2626" : {
    "methodSignature" : "static char parseZoneChar(char c)",
    "methodName" : "parseZoneChar",
    "className" : "org.joda.time.tz.ZoneInfoCompiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2626() throws Throwable {\n    char char0 = ZoneInfoCompiler.parseZoneChar('u');\n}",
    "testName" : "test2626"
  },
  "test3737" : {
    "methodSignature" : "static void writeZoneInfoMap(DataOutputStream dout, Map<String, DateTimeZone> zimap) throws IOException",
    "methodName" : "writeZoneInfoMap",
    "className" : "org.joda.time.tz.ZoneInfoCompiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3737() throws Throwable {\n    HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    hashMap0.put(\"-*r* Error in \", dateTimeZone0);\n    hashMap0.put(\"\", dateTimeZone0);\n    ZoneInfoCompiler.writeZoneInfoMap((DataOutputStream) null, hashMap0);\n}",
    "testName" : "test3737"
  },
  "test3030" : {
    "methodSignature" : "static char parseZoneChar(char c)",
    "methodName" : "parseZoneChar",
    "className" : "org.joda.time.tz.ZoneInfoCompiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3030() throws Throwable {\n    char char0 = ZoneInfoCompiler.parseZoneChar('W');\n}",
    "testName" : "test3030"
  },
  "test4243" : {
    "methodSignature" : "static int parseMonth(String str)",
    "methodName" : "parseMonth",
    "className" : "org.joda.time.tz.ZoneInfoCompiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4243() throws Throwable {\n    ZoneInfoCompiler.parseMonth(\"\");\n}",
    "testName" : "test4243"
  },
  "test2020" : {
    "methodSignature" : "public Map<String, DateTimeZone> compile(File outputDir, File[] sources) throws IOException",
    "methodName" : "compile",
    "className" : "org.joda.time.tz.ZoneInfoCompiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2020() throws Throwable {\n    ZoneInfoCompiler zoneInfoCompiler0 = new ZoneInfoCompiler();\n    FileSystemHandling.shouldAllThrowIOExceptions();\n    MockFile mockFile0 = new MockFile(\"E4kq\\\"mEi2kIZ?m(Zw#a\", \"Tho many time zon ids\");\n    File[] fileArray0 = new File[0];\n    zoneInfoCompiler0.compile(mockFile0, fileArray0);\n}",
    "testName" : "test2020"
  },
  "test3131" : {
    "methodSignature" : "static char parseZoneChar(char c)",
    "methodName" : "parseZoneChar",
    "className" : "org.joda.time.tz.ZoneInfoCompiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3131() throws Throwable {\n    char char0 = ZoneInfoCompiler.parseZoneChar('G');\n}",
    "testName" : "test3131"
  },
  "test4142" : {
    "methodSignature" : "static int parseDayOfWeek(String str)",
    "methodName" : "parseDayOfWeek",
    "className" : "org.joda.time.tz.ZoneInfoCompiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4142() throws Throwable {\n    ZoneInfoCompiler.parseDayOfWeek(\"MonthOfYear: 1\\nDayOfMonth: 1\\nDayOfWeek: 0\\nAdvanceDayOfWeek: false\\nMillisOfDay: 0\\nZoneChar: w\\n\");\n}",
    "testName" : "test4142"
  },
  "test4041" : {
    "methodSignature" : "public static void main(String[] args) throws Exception",
    "methodName" : "main",
    "className" : "org.joda.time.tz.ZoneInfoCompiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4041() throws Throwable {\n    String[] stringArray0 = new String[3];\n    stringArray0[0] = \"o\";\n    stringArray0[1] = \"o\";\n    stringArray0[2] = \"minimum\";\n    ZoneInfoCompiler.main(stringArray0);\n}",
    "testName" : "test4041"
  },
  "test3940" : {
    "methodSignature" : "static DateTimeOfYear getStartOfYear()",
    "methodName" : "getStartOfYear",
    "className" : "org.joda.time.tz.ZoneInfoCompiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3940() throws Throwable {\n    ZoneInfoCompiler.DateTimeOfYear zoneInfoCompiler_DateTimeOfYear0 = ZoneInfoCompiler.getStartOfYear();\n    ZoneInfoCompiler.DateTimeOfYear zoneInfoCompiler_DateTimeOfYear1 = ZoneInfoCompiler.getStartOfYear();\n}",
    "testName" : "test3940"
  },
  "test022" : {
    "methodSignature" : "public static void main(String[] args) throws Exception",
    "methodName" : "main",
    "className" : "org.joda.time.tz.ZoneInfoCompiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022() throws Throwable {\n    String[] stringArray0 = new String[4];\n    stringArray0[0] = \"-dst\";\n    stringArray0[1] = \"\";\n    ZoneInfoCompiler.main(stringArray0);\n}",
    "testName" : "test022"
  },
  "test044" : {
    "methodSignature" : "static int parseDayOfWeek(String str)",
    "methodName" : "parseDayOfWeek",
    "className" : "org.joda.time.tz.ZoneInfoCompiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044() throws Throwable {\n    int int0 = ZoneInfoCompiler.parseDayOfWeek(\"3\");\n}",
    "testName" : "test044"
  },
  "test066" : {
    "methodSignature" : "static boolean test(String id, DateTimeZone tz)",
    "methodName" : "test",
    "className" : "org.joda.time.tz.ZoneInfoCompiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066() throws Throwable {\n    ZoneInfoCompiler.test(\"o\", (DateTimeZone) null);\n}",
    "testName" : "test066"
  },
  "test088" : {
    "methodSignature" : "static int parseTime(String str)",
    "methodName" : "parseTime",
    "className" : "org.joda.time.tz.ZoneInfoCompiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088() throws Throwable {\n    ZoneInfoCompiler.parseTime((String) null);\n}",
    "testName" : "test088"
  },
  "test1818" : {
    "methodSignature" : "public void parseDataFile(BufferedReader in) throws IOException",
    "methodName" : "parseDataFile",
    "className" : "org.joda.time.tz.ZoneInfoCompiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1818() throws Throwable {\n    ZoneInfoCompiler zoneInfoCompiler0 = new ZoneInfoCompiler();\n    StringReader stringReader0 = new StringReader(\"\\nFormat: \");\n    BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 47);\n    zoneInfoCompiler0.parseDataFile(bufferedReader0);\n}",
    "testName" : "test1818"
  },
  "test2929" : {
    "methodSignature" : "static char parseZoneChar(char c)",
    "methodName" : "parseZoneChar",
    "className" : "org.joda.time.tz.ZoneInfoCompiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2929() throws Throwable {\n    char char0 = ZoneInfoCompiler.parseZoneChar('S');\n}",
    "testName" : "test2929"
  },
  "test1919" : {
    "methodSignature" : "public Map<String, DateTimeZone> compile(File outputDir, File[] sources) throws IOException",
    "methodName" : "compile",
    "className" : "org.joda.time.tz.ZoneInfoCompiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1919() throws Throwable {\n    ZoneInfoCompiler zoneInfoCompiler0 = new ZoneInfoCompiler();\n    File file0 = MockFile.createTempFile(\"Mont>KhOfear: \", \")m)4=>MAYq@Lw]7\");\n    File[] fileArray0 = new File[1];\n    fileArray0[0] = file0;\n    zoneInfoCompiler0.compile(file0, fileArray0);\n}",
    "testName" : "test1919"
  }
}