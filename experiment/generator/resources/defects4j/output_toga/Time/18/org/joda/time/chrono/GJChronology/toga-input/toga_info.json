{
  "test3754" : {
    "methodSignature" : "long julianToGregorianByYear(long instant)",
    "methodName" : "julianToGregorianByYear",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3754() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    long long0 = gJChronology0.julianToGregorianByYear(732L);\n}",
    "testName" : "test3754"
  },
  "test3753" : {
    "methodSignature" : "public int getMinimumDaysInFirstWeek()",
    "methodName" : "getMinimumDaysInFirstWeek",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3753() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    long long0 = gJChronology0.julianToGregorianByYear(732L);\n    gJChronology0.getMinimumDaysInFirstWeek();\n}",
    "testName" : "test3753"
  },
  "test1016" : {
    "methodSignature" : "protected void assemble(Fields fields)",
    "methodName" : "assemble",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1016() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstanceUTC();\n    gJChronology0.assemble((AssembledChronology.Fields) null);\n}",
    "testName" : "test1016"
  },
  "test2028" : {
    "methodSignature" : "public int getMinimumDaysInFirstWeek()",
    "methodName" : "getMinimumDaysInFirstWeek",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2028() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstanceUTC();\n    Duration duration0 = Duration.standardMinutes((-463));\n    Instant instant0 = GJChronology.DEFAULT_CUTOVER;\n    DateTime dateTime0 = instant0.toDateTime((Chronology) gJChronology0);\n    Period period0 = new Period(354, 354, 354, 354);\n    DateTime dateTime1 = dateTime0.withPeriodAdded(period0, (-1637));\n    MutablePeriod mutablePeriod0 = new MutablePeriod(duration0, dateTime1);\n    gJChronology0.getMinimumDaysInFirstWeek();\n}",
    "testName" : "test2028"
  },
  "test2941" : {
    "methodSignature" : "public int getMinimumDaysInFirstWeek()",
    "methodName" : "getMinimumDaysInFirstWeek",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2941() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    GJChronology gJChronology1 = (GJChronology) gJChronology0.withZone((DateTimeZone) null);\n    gJChronology1.getMinimumDaysInFirstWeek();\n}",
    "testName" : "test2941"
  },
  "test3551" : {
    "methodSignature" : "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth, int hourOfDay, int minuteOfHour, int secondOfMinute, int millisOfSecond) throws IllegalArgumentException",
    "methodName" : "getDateTimeMillis",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3551() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    int int0 = 3499;\n    int int1 = 499;\n    gJChronology0.getZone();\n    int[] intArray0 = new int[7];\n    GJChronology.getInstanceUTC();\n    intArray0[1] = 3499;\n    intArray0[2] = 3499;\n    intArray0[3] = 499;\n    intArray0[4] = 3499;\n    intArray0[5] = 3499;\n    intArray0[6] = 3499;\n    LocalDateTime localDateTime0 = new LocalDateTime((-454L));\n    LocalDateTime localDateTime1 = localDateTime0.minusMinutes(3499);\n    localDateTime1.getEra();\n    gJChronology0.set(localDateTime1, (-79271568000000L));\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);\n    Chronology chronology0 = lenientChronology0.withUTC();\n    DateTime dateTime0 = new DateTime(1, 479, 3499, (-1070), 60, 2400, (-3134), chronology0);\n    GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0);\n    gJChronology0.getDateTimeMillis(3499, 3499, 499, 499, 0, 0, 0);\n}",
    "testName" : "test3551"
  },
  "test034" : {
    "methodSignature" : "public int getMinimumDaysInFirstWeek()",
    "methodName" : "getMinimumDaysInFirstWeek",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test034() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();\n    gJChronology0.assemble(assembledChronology_Fields0);\n    gJChronology0.getMinimumDaysInFirstWeek();\n}",
    "testName" : "test034"
  },
  "test3956" : {
    "methodSignature" : "public int getMinimumDaysInFirstWeek()",
    "methodName" : "getMinimumDaysInFirstWeek",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3956() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(508);\n    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);\n    gJChronology0.equals(dateTimeZone0);\n    gJChronology0.getMinimumDaysInFirstWeek();\n}",
    "testName" : "test3956"
  },
  "test1218" : {
    "methodSignature" : "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth, int hourOfDay, int minuteOfHour, int secondOfMinute, int millisOfSecond) throws IllegalArgumentException",
    "methodName" : "getDateTimeMillis",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1218() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstanceUTC();\n    gJChronology0.getDateTimeMillis(12, 1136, (-4851), 3449, 1750, (-4851), 12);\n}",
    "testName" : "test1218"
  },
  "test069" : {
    "methodSignature" : "public int getMinimumDaysInFirstWeek()",
    "methodName" : "getMinimumDaysInFirstWeek",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test069() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    long long0 = gJChronology0.gregorianToJulianByYear((-113825952000000L));\n    gJChronology0.getMinimumDaysInFirstWeek();\n}",
    "testName" : "test069"
  },
  "test1421" : {
    "methodSignature" : "public Chronology withZone(DateTimeZone zone)",
    "methodName" : "withZone",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1421() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstanceUTC();\n    GJChronology gJChronology1 = GJChronology.getInstance();\n    DateTimeZone dateTimeZone0 = gJChronology1.getZone();\n    Chronology chronology0 = gJChronology0.withZone(dateTimeZone0);\n}",
    "testName" : "test1421"
  },
  "test0610" : {
    "methodSignature" : "long gregorianToJulianByYear(long instant)",
    "methodName" : "gregorianToJulianByYear",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0610() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    long long0 = gJChronology0.gregorianToJulianByYear((-113825952000000L));\n}",
    "testName" : "test0610"
  },
  "test2435" : {
    "methodSignature" : "public DateTime withWeekyear(int weekyear)",
    "methodName" : "withWeekyear",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2435() throws Throwable {\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();\n    DateTime dateTime0 = DateTime.now((Chronology) buddhistChronology0);\n    dateTime0.withWeekyear((-541));\n}",
    "testName" : "test2435"
  },
  "test2232" : {
    "methodSignature" : "public int getMinimumDaysInFirstWeek()",
    "methodName" : "getMinimumDaysInFirstWeek",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2232() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    Months months0 = Months.ZERO;\n    int[] intArray0 = gJChronology0.get((ReadablePeriod) months0, (long) 499, (-25252563974400000L));\n    gJChronology0.getMinimumDaysInFirstWeek();\n}",
    "testName" : "test2232"
  },
  "test3244" : {
    "methodSignature" : "public int getMinimumDaysInFirstWeek()",
    "methodName" : "getMinimumDaysInFirstWeek",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3244() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    Months months0 = Months.EIGHT;\n    long long0 = gJChronology0.add((ReadablePeriod) months0, (-1L), 1136);\n    gJChronology0.getMinimumDaysInFirstWeek();\n}",
    "testName" : "test3244"
  },
  "test2231" : {
    "methodSignature" : "public int[] get(ReadablePeriod period, long startInstant, long endInstant)",
    "methodName" : "get",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2231() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    Months months0 = Months.ZERO;\n    int[] intArray0 = gJChronology0.get((ReadablePeriod) months0, (long) 499, (-25252563974400000L));\n}",
    "testName" : "test2231"
  },
  "test4057" : {
    "methodSignature" : "public int getMinimumDaysInFirstWeek()",
    "methodName" : "getMinimumDaysInFirstWeek",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4057() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstanceUTC();\n    long long0 = gJChronology0.julianToGregorianByWeekyear((-4186L));\n    gJChronology0.getMinimumDaysInFirstWeek();\n}",
    "testName" : "test4057"
  },
  "test3245" : {
    "methodSignature" : "public long add(ReadablePeriod period, long instant, int scalar)",
    "methodName" : "add",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3245() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    Months months0 = Months.EIGHT;\n    long long0 = gJChronology0.add((ReadablePeriod) months0, (-1L), 1136);\n}",
    "testName" : "test3245"
  },
  "test4058" : {
    "methodSignature" : "long julianToGregorianByWeekyear(long instant)",
    "methodName" : "julianToGregorianByWeekyear",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4058() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstanceUTC();\n    long long0 = gJChronology0.julianToGregorianByWeekyear((-4186L));\n}",
    "testName" : "test4058"
  },
  "test0813" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0813() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 168L, 1);\n    Instant instant0 = gJChronology0.getGregorianCutover();\n    instant0.getMillis();\n}",
    "testName" : "test0813"
  },
  "test1825" : {
    "methodSignature" : "public Chronology withUTC()",
    "methodName" : "withUTC",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1825() throws Throwable {\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);\n    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();\n    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);\n    GJChronology gJChronology1 = (GJChronology) gJChronology0.withUTC();\n}",
    "testName" : "test1825"
  },
  "test023" : {
    "methodSignature" : "public static GJChronology getInstance(DateTimeZone zone, long gregorianCutover, int minDaysInFirstWeek)",
    "methodName" : "getInstance",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test023() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);\n    GJChronology.getInstance(dateTimeZone0, (-25252563974399000L), 1109);\n}",
    "testName" : "test023"
  },
  "test0814" : {
    "methodSignature" : "public int getMinimumDaysInFirstWeek()",
    "methodName" : "getMinimumDaysInFirstWeek",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0814() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 168L, 1);\n    Instant instant0 = gJChronology0.getGregorianCutover();\n    gJChronology0.getMinimumDaysInFirstWeek();\n}",
    "testName" : "test0814"
  },
  "test1826" : {
    "methodSignature" : "public int getMinimumDaysInFirstWeek()",
    "methodName" : "getMinimumDaysInFirstWeek",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1826() throws Throwable {\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);\n    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();\n    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);\n    GJChronology gJChronology1 = (GJChronology) gJChronology0.withUTC();\n    gJChronology1.getMinimumDaysInFirstWeek();\n}",
    "testName" : "test1826"
  },
  "test1623" : {
    "methodSignature" : "public static DateTimeZone forID(String id)",
    "methodName" : "forID",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1623() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);\n    GJChronology.getInstance(dateTimeZone0, (ReadableInstant) null, 1);\n    DateTimeZone.forID(\"cKI+| >S2\");\n}",
    "testName" : "test1623"
  },
  "test3449" : {
    "methodSignature" : "public boolean equals(Object partial)",
    "methodName" : "equals",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3449() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstanceUTC();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();\n    Partial partial0 = new Partial(dateTimeFieldType0, 1, gJChronology0);\n    PeriodType periodType0 = PeriodType.standard();\n    Period period0 = new Period(15356250, 15356250, 4221, (-649), (-649), (-649), (-3611), 0, periodType0);\n    Partial partial1 = partial0.withPeriodAdded(period0, (-649));\n    partial1.equals((Object) partial0);\n}",
    "testName" : "test3449"
  },
  "test2637" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2637() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstanceUTC();\n    String string0 = gJChronology0.toString();\n}",
    "testName" : "test2637"
  },
  "test057" : {
    "methodSignature" : "long julianToGregorianByWeekyear(long instant)",
    "methodName" : "julianToGregorianByWeekyear",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test057() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    long long0 = gJChronology0.julianToGregorianByWeekyear(30589264004L);\n}",
    "testName" : "test057"
  },
  "test058" : {
    "methodSignature" : "public int getMinimumDaysInFirstWeek()",
    "methodName" : "getMinimumDaysInFirstWeek",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test058() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    long long0 = gJChronology0.julianToGregorianByWeekyear(30589264004L);\n    gJChronology0.getMinimumDaysInFirstWeek();\n}",
    "testName" : "test058"
  },
  "test3042" : {
    "methodSignature" : "public int getMinimumDaysInFirstWeek()",
    "methodName" : "getMinimumDaysInFirstWeek",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3042() throws Throwable {\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();\n    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (-12219292800000L), 1);\n    gJChronology0.getMinimumDaysInFirstWeek();\n}",
    "testName" : "test3042"
  },
  "test2840" : {
    "methodSignature" : "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth, int millisOfDay) throws IllegalArgumentException",
    "methodName" : "getDateTimeMillis",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2840() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);\n    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) null);\n    long long0 = gJChronology0.getDateTimeMillis(2, 2, 1, 2);\n}",
    "testName" : "test2840"
  },
  "test3855" : {
    "methodSignature" : "public int getMinimumDaysInFirstWeek()",
    "methodName" : "getMinimumDaysInFirstWeek",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3855() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstanceUTC();\n    gJChronology0.hashCode();\n    gJChronology0.getMinimumDaysInFirstWeek();\n}",
    "testName" : "test3855"
  },
  "test3652" : {
    "methodSignature" : "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth, int millisOfDay) throws IllegalArgumentException",
    "methodName" : "getDateTimeMillis",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3652() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = gJChronology0.getZone();\n    gJChronology0.getZone();\n    DateMidnight dateMidnight0 = new DateMidnight((-674L), dateTimeZone0);\n    dateMidnight0.isEqual((-674L));\n    dateTimeZone0.equals(dateMidnight0);\n    GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateMidnight0, 4);\n    GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateMidnight0);\n    Period period0 = Period.millis(4);\n    gJChronology1.gregorianToJulianByWeekyear(4);\n    Period.minutes(23118750);\n    period0.withDays(4);\n    period0.getHours();\n    gJChronology1.toString();\n    dateTimeZone0.adjustOffset((-5528L), false);\n    gJChronology1.gregorianToJulianByYear(1351L);\n    gJChronology1.getDateTimeMillis((-1), (-333), 4, (-2135));\n}",
    "testName" : "test3652"
  },
  "test1319" : {
    "methodSignature" : "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth, int millisOfDay) throws IllegalArgumentException",
    "methodName" : "getDateTimeMillis",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1319() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstanceUTC();\n    long long0 = gJChronology0.getDateTimeMillis(2, 5, 1, 2);\n}",
    "testName" : "test1319"
  },
  "test012" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test012() throws Throwable {\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();\n    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();\n    DateMidnight dateMidnight0 = new DateMidnight(1123200004L, dateTimeZone0);\n    DateMidnight dateMidnight1 = dateMidnight0.plusDays((-292275054));\n    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateMidnight1);\n    String string0 = gJChronology0.toString();\n}",
    "testName" : "test012"
  },
  "test1117" : {
    "methodSignature" : "public long set(ReadablePartial partial, long instant)",
    "methodName" : "set",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1117() throws Throwable {\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();\n    LocalDate localDate0 = new LocalDate((long) 1);\n    long long0 = buddhistChronology0.set(localDate0, (-57358001L));\n}",
    "testName" : "test1117"
  },
  "test2129" : {
    "methodSignature" : "public int getMinimumDaysInFirstWeek()",
    "methodName" : "getMinimumDaysInFirstWeek",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2129() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    Months months0 = Months.NINE;\n    int[] intArray0 = gJChronology0.get((ReadablePeriod) months0, (-12219292800000L), 31449600000L);\n    gJChronology0.getMinimumDaysInFirstWeek();\n}",
    "testName" : "test2129"
  },
  "test046" : {
    "methodSignature" : "public int getMinimumDaysInFirstWeek()",
    "methodName" : "getMinimumDaysInFirstWeek",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test046() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    long long0 = gJChronology0.julianToGregorianByYear(15778800000L);\n    gJChronology0.getMinimumDaysInFirstWeek();\n}",
    "testName" : "test046"
  },
  "test3450" : {
    "methodSignature" : "public int getMinimumDaysInFirstWeek()",
    "methodName" : "getMinimumDaysInFirstWeek",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3450() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstanceUTC();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();\n    Partial partial0 = new Partial(dateTimeFieldType0, 1, gJChronology0);\n    PeriodType periodType0 = PeriodType.standard();\n    Period period0 = new Period(15356250, 15356250, 4221, (-649), (-649), (-649), (-3611), 0, periodType0);\n    Partial partial1 = partial0.withPeriodAdded(period0, (-649));\n    gJChronology0.getMinimumDaysInFirstWeek();\n}",
    "testName" : "test3450"
  },
  "test3347" : {
    "methodSignature" : "public long getEndMillis()",
    "methodName" : "getEndMillis",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3347() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(508);\n    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);\n    YearMonth yearMonth0 = new YearMonth(5154L, (Chronology) gJChronology0);\n    Interval interval0 = yearMonth0.toInterval();\n    Months months0 = Months.monthsIn(interval0);\n    interval0.getEndMillis();\n}",
    "testName" : "test3347"
  },
  "test2334" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2334() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstanceUTC();\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();\n    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();\n    DateMidnight dateMidnight0 = new DateMidnight(1123200004L, dateTimeZone0);\n    DateMidnight dateMidnight1 = dateMidnight0.withChronology(gJChronology0);\n    DateMidnight dateMidnight2 = dateMidnight1.plusDays((-292275054));\n    DurationFieldType durationFieldType0 = DurationFieldType.weekyears();\n    DateMidnight dateMidnight3 = dateMidnight2.withFieldAdded(durationFieldType0, 1);\n    dateMidnight3.getMillis();\n}",
    "testName" : "test2334"
  },
  "test3346" : {
    "methodSignature" : "public int getMinimumDaysInFirstWeek()",
    "methodName" : "getMinimumDaysInFirstWeek",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3346() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(508);\n    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);\n    YearMonth yearMonth0 = new YearMonth(5154L, (Chronology) gJChronology0);\n    Interval interval0 = yearMonth0.toInterval();\n    Months months0 = Months.monthsIn(interval0);\n    gJChronology0.getMinimumDaysInFirstWeek();\n}",
    "testName" : "test3346"
  },
  "test1522" : {
    "methodSignature" : "public int getMinimumDaysInFirstWeek()",
    "methodName" : "getMinimumDaysInFirstWeek",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1522() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(2, 2);\n    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 0L, 2);\n    GJChronology gJChronology1 = (GJChronology) gJChronology0.withZone(dateTimeZone0);\n    gJChronology1.getMinimumDaysInFirstWeek();\n}",
    "testName" : "test1522"
  },
  "test3348" : {
    "methodSignature" : "public int getMonths()",
    "methodName" : "getMonths",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3348() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(508);\n    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);\n    YearMonth yearMonth0 = new YearMonth(5154L, (Chronology) gJChronology0);\n    Interval interval0 = yearMonth0.toInterval();\n    Months months0 = Months.monthsIn(interval0);\n    months0.getMonths();\n}",
    "testName" : "test3348"
  },
  "test1320" : {
    "methodSignature" : "public int getMinimumDaysInFirstWeek()",
    "methodName" : "getMinimumDaysInFirstWeek",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1320() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstanceUTC();\n    long long0 = gJChronology0.getDateTimeMillis(2, 5, 1, 2);\n    gJChronology0.getMinimumDaysInFirstWeek();\n}",
    "testName" : "test1320"
  },
  "test2333" : {
    "methodSignature" : "public int getMinimumDaysInFirstWeek()",
    "methodName" : "getMinimumDaysInFirstWeek",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2333() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstanceUTC();\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();\n    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();\n    DateMidnight dateMidnight0 = new DateMidnight(1123200004L, dateTimeZone0);\n    DateMidnight dateMidnight1 = dateMidnight0.withChronology(gJChronology0);\n    DateMidnight dateMidnight2 = dateMidnight1.plusDays((-292275054));\n    DurationFieldType durationFieldType0 = DurationFieldType.weekyears();\n    DateMidnight dateMidnight3 = dateMidnight2.withFieldAdded(durationFieldType0, 1);\n    gJChronology0.getMinimumDaysInFirstWeek();\n}",
    "testName" : "test2333"
  },
  "test000" : {
    "methodSignature" : "public int getMinimumDaysInFirstWeek()",
    "methodName" : "getMinimumDaysInFirstWeek",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstanceUTC();\n    MutablePeriod mutablePeriod0 = new MutablePeriod((Object) null);\n    int[] intArray0 = gJChronology0.get((ReadablePeriod) mutablePeriod0, (-1585L), (-12219292800000L));\n    gJChronology0.getMinimumDaysInFirstWeek();\n}",
    "testName" : "test000"
  },
  "test2739" : {
    "methodSignature" : "public int getMinimumDaysInFirstWeek()",
    "methodName" : "getMinimumDaysInFirstWeek",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2739() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    long long0 = gJChronology0.getDateTimeMillis(123, 3, 3, 15, 3, 3, 0);\n    gJChronology0.getMinimumDaysInFirstWeek();\n}",
    "testName" : "test2739"
  },
  "test001" : {
    "methodSignature" : "public int[] get(ReadablePeriod period, long startInstant, long endInstant)",
    "methodName" : "get",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test001() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstanceUTC();\n    MutablePeriod mutablePeriod0 = new MutablePeriod((Object) null);\n    int[] intArray0 = gJChronology0.get((ReadablePeriod) mutablePeriod0, (-1585L), (-12219292800000L));\n}",
    "testName" : "test001"
  },
  "test045" : {
    "methodSignature" : "long julianToGregorianByYear(long instant)",
    "methodName" : "julianToGregorianByYear",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test045() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    long long0 = gJChronology0.julianToGregorianByYear(15778800000L);\n}",
    "testName" : "test045"
  },
  "test2738" : {
    "methodSignature" : "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth, int hourOfDay, int minuteOfHour, int secondOfMinute, int millisOfSecond) throws IllegalArgumentException",
    "methodName" : "getDateTimeMillis",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2738() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    long long0 = gJChronology0.getDateTimeMillis(123, 3, 3, 15, 3, 3, 0);\n}",
    "testName" : "test2738"
  },
  "test0915" : {
    "methodSignature" : "public static synchronized GJChronology getInstance(DateTimeZone zone, ReadableInstant gregorianCutover, int minDaysInFirstWeek)",
    "methodName" : "getInstance",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0915() throws Throwable {\n    Instant instant0 = Instant.now();\n    DateTimeZone dateTimeZone0 = instant0.getZone();\n    GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0, 400);\n}",
    "testName" : "test0915"
  },
  "test1927" : {
    "methodSignature" : "public int getMinimumDaysInFirstWeek()",
    "methodName" : "getMinimumDaysInFirstWeek",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1927() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-150));\n    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) null);\n    int int0 = gJChronology0.getMinimumDaysInFirstWeek();\n}",
    "testName" : "test1927"
  },
  "test0711" : {
    "methodSignature" : "public int getMinimumDaysInFirstWeek()",
    "methodName" : "getMinimumDaysInFirstWeek",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0711() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstanceUTC();\n    long long0 = gJChronology0.gregorianToJulianByWeekyear((-1209604186L));\n    gJChronology0.getMinimumDaysInFirstWeek();\n}",
    "testName" : "test0711"
  },
  "test2536" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2536() throws Throwable {\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();\n    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();\n    DateMidnight dateMidnight0 = new DateMidnight(dateTimeZone0);\n    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateMidnight0, 1);\n    String string0 = gJChronology0.toString();\n}",
    "testName" : "test2536"
  },
  "test0712" : {
    "methodSignature" : "long gregorianToJulianByWeekyear(long instant)",
    "methodName" : "gregorianToJulianByWeekyear",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0712() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstanceUTC();\n    long long0 = gJChronology0.gregorianToJulianByWeekyear((-1209604186L));\n}",
    "testName" : "test0712"
  },
  "test1724" : {
    "methodSignature" : "public int getMinimumDaysInFirstWeek()",
    "methodName" : "getMinimumDaysInFirstWeek",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1724() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) null);\n    gJChronology0.getGregorianCutover();\n    gJChronology0.getMinimumDaysInFirstWeek();\n}",
    "testName" : "test1724"
  },
  "test3143" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3143() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstanceUTC();\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();\n    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();\n    DateMidnight dateMidnight0 = new DateMidnight(1123200004L, dateTimeZone0);\n    DateMidnight dateMidnight1 = dateMidnight0.withChronology(gJChronology0);\n    DurationFieldType durationFieldType0 = DurationFieldType.weekyears();\n    DateMidnight dateMidnight2 = dateMidnight1.withFieldAdded(durationFieldType0, 1);\n    dateMidnight2.getMillis();\n}",
    "testName" : "test3143"
  },
  "test2130" : {
    "methodSignature" : "public int[] get(ReadablePeriod period, long startInstant, long endInstant)",
    "methodName" : "get",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2130() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    Months months0 = Months.NINE;\n    int[] intArray0 = gJChronology0.get((ReadablePeriod) months0, (-12219292800000L), 31449600000L);\n}",
    "testName" : "test2130"
  }
}