focal_method,test_prefix,docstring
"public int getMinimumDaysInFirstWeek() {
    return iGregorianChronology.getMinimumDaysInFirstWeek();
}","public void test000() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    MutablePeriod mutablePeriod0 = new MutablePeriod((Object) null);
    int[] intArray0 = gJChronology0.get((ReadablePeriod) mutablePeriod0, (-1585L), (-12219292800000L));
    assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
}","/**
 * Gets the minimum days needed for a week to be the first week in a year.
 *
 * @return the minimum days
 */"
"//-----------------------------------------------------------------------
/**
 * Gets the values of a period from an interval.
 *
 * @param period  the period instant to use
 * @param startInstant  the start instant of an interval to query
 * @param endInstant  the start instant of an interval to query
 * @return the values of the period extracted from the interval
 */
public int[] get(ReadablePeriod period, long startInstant, long endInstant) {
    int size = period.size();
    int[] values = new int[size];
    if (startInstant != endInstant) {
        for (int i = 0; i < size; i++) {
            DurationField field = period.getFieldType(i).getField(this);
            int value = field.getDifference(endInstant, startInstant);
            startInstant = field.add(startInstant, value);
            values[i] = value;
        }
    }
    return values;
}","public void test001() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    MutablePeriod mutablePeriod0 = new MutablePeriod((Object) null);
    int[] intArray0 = gJChronology0.get((ReadablePeriod) mutablePeriod0, (-1585L), (-12219292800000L));
    assertArrayEquals(new int[] { (-387), (-2), (-2), (-2), (-23), (-59), (-58), (-415) }, intArray0);
}",""
"// Output
//-----------------------------------------------------------------------
/**
 * Gets a debugging toString.
 *
 * @return a debugging string
 */
public String toString() {
    StringBuffer sb = new StringBuffer(60);
    sb.append(""GJChronology"");
    sb.append('[');
    sb.append(getZone().getID());
    if (iCutoverMillis != DEFAULT_CUTOVER.getMillis()) {
        sb.append("",cutover="");
        DateTimeFormatter printer;
        if (withUTC().dayOfYear().remainder(iCutoverMillis) == 0) {
            printer = ISODateTimeFormat.date();
        } else {
            printer = ISODateTimeFormat.dateTime();
        }
        printer.withChronology(withUTC()).printTo(sb, iCutoverMillis);
    }
    if (getMinimumDaysInFirstWeek() != 4) {
        sb.append("",mdfw="");
        sb.append(getMinimumDaysInFirstWeek());
    }
    sb.append(']');
    return sb.toString();
}","public void test012() throws Throwable {
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
    DateMidnight dateMidnight0 = new DateMidnight(1123200004L, dateTimeZone0);
    DateMidnight dateMidnight1 = dateMidnight0.plusDays((-292275054));
    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateMidnight1);
    String string0 = gJChronology0.toString();
    assertEquals(""GJChronology[America/Los_Angeles,cutover=-798252-02-12T07:52:58.000Z]"", string0);
}",""
"public static GJChronology getInstance(DateTimeZone zone, long gregorianCutover, int minDaysInFirstWeek) {
    Instant cutoverInstant;
    if (gregorianCutover == DEFAULT_CUTOVER.getMillis()) {
        cutoverInstant = null;
    } else {
        cutoverInstant = new Instant(gregorianCutover);
    }
    return getInstance(zone, cutoverInstant, minDaysInFirstWeek);
}","public void test023() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
    // Undeclared exception!
    try {
        GJChronology.getInstance(dateTimeZone0, (-25252563974399000L), 1109);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid min days in first week: 1109
        //
        verifyException(""org.joda.time.chrono.JulianChronology"", e);
    }
}","/**
 * Factory method returns instances of the GJ cutover chronology. Any
 * cutover date may be specified.
 *
 * @param zone  the time zone to use, null is default
 * @param gregorianCutover  the cutover to use
 * @param minDaysInFirstWeek  minimum number of days in first week of the year; default is 4
 */"
"public int getMinimumDaysInFirstWeek() {
    return iGregorianChronology.getMinimumDaysInFirstWeek();
}","public void test034() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
    gJChronology0.assemble(assembledChronology_Fields0);
    assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
}","/**
 * Gets the minimum days needed for a week to be the first week in a year.
 *
 * @return the minimum days
 */"
"long julianToGregorianByYear(long instant) {
    return convertByYear(instant, iJulianChronology, iGregorianChronology);
}","public void test045() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    long long0 = gJChronology0.julianToGregorianByYear(15778800000L);
    assertEquals(14655600000L, long0);
}",""
"public int getMinimumDaysInFirstWeek() {
    return iGregorianChronology.getMinimumDaysInFirstWeek();
}","public void test046() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    long long0 = gJChronology0.julianToGregorianByYear(15778800000L);
    assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
}","/**
 * Gets the minimum days needed for a week to be the first week in a year.
 *
 * @return the minimum days
 */"
"long julianToGregorianByWeekyear(long instant) {
    return convertByWeekyear(instant, iJulianChronology, iGregorianChronology);
}","public void test057() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    long long0 = gJChronology0.julianToGregorianByWeekyear(30589264004L);
    assertEquals(29379664004L, long0);
}",""
"public int getMinimumDaysInFirstWeek() {
    return iGregorianChronology.getMinimumDaysInFirstWeek();
}","public void test058() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    long long0 = gJChronology0.julianToGregorianByWeekyear(30589264004L);
    assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
}","/**
 * Gets the minimum days needed for a week to be the first week in a year.
 *
 * @return the minimum days
 */"
"public int getMinimumDaysInFirstWeek() {
    return iGregorianChronology.getMinimumDaysInFirstWeek();
}","public void test069() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    long long0 = gJChronology0.gregorianToJulianByYear((-113825952000000L));
    assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
}","/**
 * Gets the minimum days needed for a week to be the first week in a year.
 *
 * @return the minimum days
 */"
"long gregorianToJulianByYear(long instant) {
    return convertByYear(instant, iGregorianChronology, iJulianChronology);
}","public void test0610() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    long long0 = gJChronology0.gregorianToJulianByYear((-113825952000000L));
    assertEquals((-113795625600000L), long0);
}",""
"public int getMinimumDaysInFirstWeek() {
    return iGregorianChronology.getMinimumDaysInFirstWeek();
}","public void test0711() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    long long0 = gJChronology0.gregorianToJulianByWeekyear((-1209604186L));
    assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
}","/**
 * Gets the minimum days needed for a week to be the first week in a year.
 *
 * @return the minimum days
 */"
"long gregorianToJulianByWeekyear(long instant) {
    return convertByWeekyear(instant, iGregorianChronology, iJulianChronology);
}","public void test0712() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    long long0 = gJChronology0.gregorianToJulianByWeekyear((-1209604186L));
    assertEquals((-4186L), long0);
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the milliseconds of the instant.
 *
 * @return the number of milliseconds since 1970-01-01T00:00:00Z
 */
public long getMillis() {
    return iMillis;
}","public void test0813() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 168L, 1);
    Instant instant0 = gJChronology0.getGregorianCutover();
    assertEquals(168L, instant0.getMillis());
}",""
"public int getMinimumDaysInFirstWeek() {
    return iGregorianChronology.getMinimumDaysInFirstWeek();
}","public void test0814() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 168L, 1);
    Instant instant0 = gJChronology0.getGregorianCutover();
    assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
}","/**
 * Gets the minimum days needed for a week to be the first week in a year.
 *
 * @return the minimum days
 */"
"public static synchronized GJChronology getInstance(DateTimeZone zone, ReadableInstant gregorianCutover, int minDaysInFirstWeek) {
    zone = DateTimeUtils.getZone(zone);
    Instant cutoverInstant;
    if (gregorianCutover == null) {
        cutoverInstant = DEFAULT_CUTOVER;
    } else {
        cutoverInstant = gregorianCutover.toInstant();
    }
    GJChronology chrono;
    ArrayList<GJChronology> chronos = cCache.get(zone);
    if (chronos == null) {
        chronos = new ArrayList<GJChronology>(2);
        cCache.put(zone, chronos);
    } else {
        for (int i = chronos.size(); --i >= 0; ) {
            chrono = chronos.get(i);
            if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) {
                return chrono;
            }
        }
    }
    if (zone == DateTimeZone.UTC) {
        chrono = new GJChronology(JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant);
    } else {
        chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);
        chrono = new GJChronology(ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant);
    }
    chronos.add(chrono);
    return chrono;
}","public void test0915() throws Throwable {
    Instant instant0 = Instant.now();
    DateTimeZone dateTimeZone0 = instant0.getZone();
    // Undeclared exception!
    try {
        GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0, 400);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid min days in first week: 400
        //
        verifyException(""org.joda.time.chrono.JulianChronology"", e);
    }
}","/**
 * Factory method returns instances of the GJ cutover chronology. Any
 * cutover date may be specified.
 *
 * @param zone  the time zone to use, null is default
 * @param gregorianCutover  the cutover to use, null means default
 * @param minDaysInFirstWeek  minimum number of days in first week of the year; default is 4
 */"
"protected void assemble(Fields fields) {
    Object[] params = (Object[]) getParam();
    JulianChronology julian = (JulianChronology) params[0];
    GregorianChronology gregorian = (GregorianChronology) params[1];
    Instant cutoverInstant = (Instant) params[2];
    iCutoverMillis = cutoverInstant.getMillis();
    iJulianChronology = julian;
    iGregorianChronology = gregorian;
    iCutoverInstant = cutoverInstant;
    if (getBase() != null) {
        return;
    }
    if (julian.getMinimumDaysInFirstWeek() != gregorian.getMinimumDaysInFirstWeek()) {
        throw new IllegalArgumentException();
    }
    // Compute difference between the chronologies at the cutover instant
    iGapDuration = iCutoverMillis - julianToGregorianByYear(iCutoverMillis);
    // Begin field definitions.
    // First just copy all the Gregorian fields and then override those
    // that need special attention.
    fields.copyFieldsFrom(gregorian);
    // Assuming cutover is at midnight, all time of day fields can be
    // gregorian since they are unaffected by cutover.
    // Verify assumption.
    if (gregorian.millisOfDay().get(iCutoverMillis) == 0) {
        // Cutover is sometime in the day, so cutover fields are required
        // for time of day.
        fields.millisOfSecond = new CutoverField(julian.millisOfSecond(), fields.millisOfSecond, iCutoverMillis);
        fields.millisOfDay = new CutoverField(julian.millisOfDay(), fields.millisOfDay, iCutoverMillis);
        fields.secondOfMinute = new CutoverField(julian.secondOfMinute(), fields.secondOfMinute, iCutoverMillis);
        fields.secondOfDay = new CutoverField(julian.secondOfDay(), fields.secondOfDay, iCutoverMillis);
        fields.minuteOfHour = new CutoverField(julian.minuteOfHour(), fields.minuteOfHour, iCutoverMillis);
        fields.minuteOfDay = new CutoverField(julian.minuteOfDay(), fields.minuteOfDay, iCutoverMillis);
        fields.hourOfDay = new CutoverField(julian.hourOfDay(), fields.hourOfDay, iCutoverMillis);
        fields.hourOfHalfday = new CutoverField(julian.hourOfHalfday(), fields.hourOfHalfday, iCutoverMillis);
        fields.clockhourOfDay = new CutoverField(julian.clockhourOfDay(), fields.clockhourOfDay, iCutoverMillis);
        fields.clockhourOfHalfday = new CutoverField(julian.clockhourOfHalfday(), fields.clockhourOfHalfday, iCutoverMillis);
        fields.halfdayOfDay = new CutoverField(julian.halfdayOfDay(), fields.halfdayOfDay, iCutoverMillis);
    }
    // These fields just require basic cutover support.
    {
        fields.era = new CutoverField(julian.era(), fields.era, iCutoverMillis);
    }
    // DayOfYear and weekOfWeekyear require special handling since cutover
    // year has fewer days and weeks. Extend the cutover to the start of
    // the next year or weekyear. This keeps the sequence unbroken during
    // the cutover year.
    {
        long cutover = gregorian.year().roundCeiling(iCutoverMillis);
        fields.dayOfYear = new CutoverField(julian.dayOfYear(), fields.dayOfYear, cutover);
    }
    {
        long cutover = gregorian.weekyear().roundCeiling(iCutoverMillis);
        fields.weekOfWeekyear = new CutoverField(julian.weekOfWeekyear(), fields.weekOfWeekyear, cutover, true);
    }
    // These fields are special because they have imprecise durations. The
    // family of addition methods need special attention. Override affected
    // duration fields as well.
    {
        fields.year = new ImpreciseCutoverField(julian.year(), fields.year, iCutoverMillis);
        fields.years = fields.year.getDurationField();
        fields.yearOfEra = new ImpreciseCutoverField(julian.yearOfEra(), fields.yearOfEra, fields.years, iCutoverMillis);
        fields.yearOfCentury = new ImpreciseCutoverField(julian.yearOfCentury(), fields.yearOfCentury, fields.years, iCutoverMillis);
        fields.centuryOfEra = new ImpreciseCutoverField(julian.centuryOfEra(), fields.centuryOfEra, iCutoverMillis);
        fields.centuries = fields.centuryOfEra.getDurationField();
        fields.monthOfYear = new ImpreciseCutoverField(julian.monthOfYear(), fields.monthOfYear, iCutoverMillis);
        fields.months = fields.monthOfYear.getDurationField();
        fields.weekyear = new ImpreciseCutoverField(julian.weekyear(), fields.weekyear, null, iCutoverMillis, true);
        fields.weekyearOfCentury = new ImpreciseCutoverField(julian.weekyearOfCentury(), fields.weekyearOfCentury, fields.weekyears, iCutoverMillis);
        fields.weekyears = fields.weekyear.getDurationField();
    }
    // These fields require basic cutover support, except they must link to
    // imprecise durations.
    {
        CutoverField cf = new CutoverField(julian.dayOfMonth(), fields.dayOfMonth, iCutoverMillis);
        cf.iRangeDurationField = fields.months;
        fields.dayOfMonth = cf;
    }
}","public void test1016() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    // Undeclared exception!
    try {
        gJChronology0.assemble((AssembledChronology.Fields) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.chrono.GJChronology"", e);
    }
}",""
"public long set(ReadablePartial partial, long instant) {
    for (int i = 0, isize = partial.size(); i < isize; i++) {
        instant = partial.getFieldType(i).getField(this).set(instant, partial.getValue(i));
    }
    return instant;
}","public void test1117() throws Throwable {
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    LocalDate localDate0 = new LocalDate((long) 1);
    long long0 = buddhistChronology0.set(localDate0, (-57358001L));
    assertEquals((-17134732558001L), long0);
}","/**
 * Sets the partial into the instant.
 *
 * @param partial  the partial instant to use
 * @param instant  the instant to update
 * @return the updated instant
 */"
"public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth, int hourOfDay, int minuteOfHour, int secondOfMinute, int millisOfSecond) throws IllegalArgumentException {
    Chronology base;
    if ((base = getBase()) != null) {
        return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
    }
    // Assume date is Gregorian.
    long instant;
    instant = iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
    if (instant < iCutoverMillis) {
        // Maybe it's Julian.
        instant = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
        if (instant >= iCutoverMillis) {
            // Okay, it's in the illegal cutover gap.
            throw new IllegalArgumentException(""Specified date does not exist"");
        }
    }
    return instant;
}","public void test1218() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    try {
        gJChronology0.getDateTimeMillis(12, 1136, (-4851), 3449, 1750, (-4851), 12);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value 3449 for hourOfDay must be in the range [0,23]
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",""
"public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth, int millisOfDay) throws IllegalArgumentException {
    Chronology base;
    if ((base = getBase()) != null) {
        return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);
    }
    // Assume date is Gregorian.
    long instant = iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);
    if (instant < iCutoverMillis) {
        // Maybe it's Julian.
        instant = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);
        if (instant >= iCutoverMillis) {
            // Okay, it's in the illegal cutover gap.
            throw new IllegalArgumentException(""Specified date does not exist"");
        }
    }
    return instant;
}","public void test1319() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    long long0 = gJChronology0.getDateTimeMillis(2, 5, 1, 2);
    assertEquals((-62093865599998L), long0);
}",""
"public int getMinimumDaysInFirstWeek() {
    return iGregorianChronology.getMinimumDaysInFirstWeek();
}","public void test1320() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    long long0 = gJChronology0.getDateTimeMillis(2, 5, 1, 2);
    assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
}","/**
 * Gets the minimum days needed for a week to be the first week in a year.
 *
 * @return the minimum days
 */"
"public Chronology withZone(DateTimeZone zone) {
    if (zone == null) {
        zone = DateTimeZone.getDefault();
    }
    if (zone == getZone()) {
        return this;
    }
    return getInstance(zone, iCutoverInstant, getMinimumDaysInFirstWeek());
}","public void test1421() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    GJChronology gJChronology1 = GJChronology.getInstance();
    DateTimeZone dateTimeZone0 = gJChronology1.getZone();
    Chronology chronology0 = gJChronology0.withZone(dateTimeZone0);
    assertSame(chronology0, gJChronology1);
}","/**
 * Gets the Chronology in a specific time zone.
 *
 * @param zone  the zone to get the chronology in, null is default
 * @return the chronology
 */"
"public int getMinimumDaysInFirstWeek() {
    return iGregorianChronology.getMinimumDaysInFirstWeek();
}","public void test1522() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(2, 2);
    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 0L, 2);
    GJChronology gJChronology1 = (GJChronology) gJChronology0.withZone(dateTimeZone0);
    assertEquals(2, gJChronology1.getMinimumDaysInFirstWeek());
}","/**
 * Gets the minimum days needed for a week to be the first week in a year.
 *
 * @return the minimum days
 */"
"//-----------------------------------------------------------------------
/**
 * Gets a time zone instance for the specified time zone id.
 * <p>
 * The time zone id may be one of those returned by getAvailableIDs.
 * Short ids, as accepted by {@link java.util.TimeZone}, are not accepted.
 * All IDs must be specified in the long format.
 * The exception is UTC, which is an acceptable id.
 * <p>
 * Alternatively a locale independent, fixed offset, datetime zone can
 * be specified. The form <code>[+-]hh:mm</code> can be used.
 *
 * @param id  the ID of the datetime zone, null means default
 * @return the DateTimeZone object for the ID
 * @throws IllegalArgumentException if the ID is not recognised
 */
@FromString
public static DateTimeZone forID(String id) {
    if (id == null) {
        return getDefault();
    }
    if (id.equals(""UTC"")) {
        return DateTimeZone.UTC;
    }
    DateTimeZone zone = cProvider.getZone(id);
    if (zone != null) {
        return zone;
    }
    if (id.startsWith(""+"") || id.startsWith(""-"")) {
        int offset = parseOffset(id);
        if (offset == 0L) {
            return DateTimeZone.UTC;
        } else {
            id = printOffset(offset);
            return fixedOffsetZone(id, offset);
        }
    }
    throw new IllegalArgumentException(""The datetime zone id '"" + id + ""' is not recognised"");
}","public void test1623() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
    GJChronology.getInstance(dateTimeZone0, (ReadableInstant) null, 1);
    // Undeclared exception!
    try {
        DateTimeZone.forID(""cKI+| >S2"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The datetime zone id 'cKI+| >S2' is not recognised
        //
        verifyException(""org.joda.time.DateTimeZone"", e);
    }
}",""
"public int getMinimumDaysInFirstWeek() {
    return iGregorianChronology.getMinimumDaysInFirstWeek();
}","public void test1724() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) null);
    gJChronology0.getGregorianCutover();
    assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
}","/**
 * Gets the minimum days needed for a week to be the first week in a year.
 *
 * @return the minimum days
 */"
"// Conversion
//-----------------------------------------------------------------------
/**
 * Gets the Chronology in the UTC time zone.
 *
 * @return the chronology in UTC
 */
public Chronology withUTC() {
    return withZone(DateTimeZone.UTC);
}","public void test1825() throws Throwable {
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
    GJChronology gJChronology1 = (GJChronology) gJChronology0.withUTC();
    assertNotSame(gJChronology1, gJChronology0);
}",""
"public int getMinimumDaysInFirstWeek() {
    return iGregorianChronology.getMinimumDaysInFirstWeek();
}","public void test1826() throws Throwable {
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
    GJChronology gJChronology1 = (GJChronology) gJChronology0.withUTC();
    assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
}","/**
 * Gets the minimum days needed for a week to be the first week in a year.
 *
 * @return the minimum days
 */"
"public int getMinimumDaysInFirstWeek() {
    return iGregorianChronology.getMinimumDaysInFirstWeek();
}","public void test1927() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-150));
    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) null);
    int int0 = gJChronology0.getMinimumDaysInFirstWeek();
    assertEquals(4, int0);
}","/**
 * Gets the minimum days needed for a week to be the first week in a year.
 *
 * @return the minimum days
 */"
"public int getMinimumDaysInFirstWeek() {
    return iGregorianChronology.getMinimumDaysInFirstWeek();
}","public void test2028() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    Duration duration0 = Duration.standardMinutes((-463));
    Instant instant0 = GJChronology.DEFAULT_CUTOVER;
    DateTime dateTime0 = instant0.toDateTime((Chronology) gJChronology0);
    Period period0 = new Period(354, 354, 354, 354);
    DateTime dateTime1 = dateTime0.withPeriodAdded(period0, (-1637));
    MutablePeriod mutablePeriod0 = new MutablePeriod(duration0, dateTime1);
    assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
}","/**
 * Gets the minimum days needed for a week to be the first week in a year.
 *
 * @return the minimum days
 */"
"public int getMinimumDaysInFirstWeek() {
    return iGregorianChronology.getMinimumDaysInFirstWeek();
}","public void test2129() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    Months months0 = Months.NINE;
    int[] intArray0 = gJChronology0.get((ReadablePeriod) months0, (-12219292800000L), 31449600000L);
    assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
}","/**
 * Gets the minimum days needed for a week to be the first week in a year.
 *
 * @return the minimum days
 */"
"//-----------------------------------------------------------------------
/**
 * Gets the values of a period from an interval.
 *
 * @param period  the period instant to use
 * @param startInstant  the start instant of an interval to query
 * @param endInstant  the start instant of an interval to query
 * @return the values of the period extracted from the interval
 */
public int[] get(ReadablePeriod period, long startInstant, long endInstant) {
    int size = period.size();
    int[] values = new int[size];
    if (startInstant != endInstant) {
        for (int i = 0; i < size; i++) {
            DurationField field = period.getFieldType(i).getField(this);
            int value = field.getDifference(endInstant, startInstant);
            startInstant = field.add(startInstant, value);
            values[i] = value;
        }
    }
    return values;
}","public void test2130() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    Months months0 = Months.NINE;
    int[] intArray0 = gJChronology0.get((ReadablePeriod) months0, (-12219292800000L), 31449600000L);
    assertArrayEquals(new int[] { 4658 }, intArray0);
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the values of a period from an interval.
 *
 * @param period  the period instant to use
 * @param startInstant  the start instant of an interval to query
 * @param endInstant  the start instant of an interval to query
 * @return the values of the period extracted from the interval
 */
public int[] get(ReadablePeriod period, long startInstant, long endInstant) {
    int size = period.size();
    int[] values = new int[size];
    if (startInstant != endInstant) {
        for (int i = 0; i < size; i++) {
            DurationField field = period.getFieldType(i).getField(this);
            int value = field.getDifference(endInstant, startInstant);
            startInstant = field.add(startInstant, value);
            values[i] = value;
        }
    }
    return values;
}","public void test2231() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    Months months0 = Months.ZERO;
    int[] intArray0 = gJChronology0.get((ReadablePeriod) months0, (long) 499, (-25252563974400000L));
    assertArrayEquals(new int[] { (-9602477) }, intArray0);
}",""
"public int getMinimumDaysInFirstWeek() {
    return iGregorianChronology.getMinimumDaysInFirstWeek();
}","public void test2232() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    Months months0 = Months.ZERO;
    int[] intArray0 = gJChronology0.get((ReadablePeriod) months0, (long) 499, (-25252563974400000L));
    assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
}","/**
 * Gets the minimum days needed for a week to be the first week in a year.
 *
 * @return the minimum days
 */"
"public int getMinimumDaysInFirstWeek() {
    return iGregorianChronology.getMinimumDaysInFirstWeek();
}","public void test2333() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
    DateMidnight dateMidnight0 = new DateMidnight(1123200004L, dateTimeZone0);
    DateMidnight dateMidnight1 = dateMidnight0.withChronology(gJChronology0);
    DateMidnight dateMidnight2 = dateMidnight1.plusDays((-292275054));
    DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
    DateMidnight dateMidnight3 = dateMidnight2.withFieldAdded(durationFieldType0, 1);
    assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
}","/**
 * Gets the minimum days needed for a week to be the first week in a year.
 *
 * @return the minimum days
 */"
"//-----------------------------------------------------------------------
/**
 * Gets the milliseconds of the datetime instant from the Java epoch
 * of 1970-01-01T00:00:00Z.
 *
 * @return the number of milliseconds since 1970-01-01T00:00:00Z
 */
public long getMillis() {
    return iMillis;
}","public void test2334() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
    DateMidnight dateMidnight0 = new DateMidnight(1123200004L, dateTimeZone0);
    DateMidnight dateMidnight1 = dateMidnight0.withChronology(gJChronology0);
    DateMidnight dateMidnight2 = dateMidnight1.plusDays((-292275054));
    DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
    DateMidnight dateMidnight3 = dateMidnight2.withFieldAdded(durationFieldType0, 1);
    assertEquals((-25252531574400000L), dateMidnight3.getMillis());
}",""
"public DateTime withWeekyear(int weekyear) {
    return withMillis(getChronology().weekyear().set(getMillis(), weekyear));
}","public void test2435() throws Throwable {
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    DateTime dateTime0 = DateTime.now((Chronology) buddhistChronology0);
    // Undeclared exception!
    try {
        dateTime0.withWeekyear((-541));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (BuddhistChronology[UTC])
        //
        verifyException(""org.joda.time.chrono.LimitChronology"", e);
    }
}","/**
 * Returns a copy of this datetime with the weekyear field updated.
 * <p>
 * The weekyear is the year that matches with the weekOfWeekyear field.
 * In the standard ISO8601 week algorithm, the first week of the year
 * is that in which at least 4 days are in the year. As a result of this
 * definition, day 1 of the first week may be in the previous year.
 * The weekyear allows you to query the effective year for that day.
 * <p>
 * DateTime is immutable, so there are no set methods.
 * Instead, this method returns a new instance with the value of
 * weekyear changed.
 *
 * @param weekyear  the weekyear to set
 * @return a copy of this object with the field set
 * @throws IllegalArgumentException if the value is invalid
 * @since 1.3
 */"
"// Output
//-----------------------------------------------------------------------
/**
 * Gets a debugging toString.
 *
 * @return a debugging string
 */
public String toString() {
    StringBuffer sb = new StringBuffer(60);
    sb.append(""GJChronology"");
    sb.append('[');
    sb.append(getZone().getID());
    if (iCutoverMillis != DEFAULT_CUTOVER.getMillis()) {
        sb.append("",cutover="");
        DateTimeFormatter printer;
        if (withUTC().dayOfYear().remainder(iCutoverMillis) == 0) {
            printer = ISODateTimeFormat.date();
        } else {
            printer = ISODateTimeFormat.dateTime();
        }
        printer.withChronology(withUTC()).printTo(sb, iCutoverMillis);
    }
    if (getMinimumDaysInFirstWeek() != 4) {
        sb.append("",mdfw="");
        sb.append(getMinimumDaysInFirstWeek());
    }
    sb.append(']');
    return sb.toString();
}","public void test2536() throws Throwable {
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
    DateMidnight dateMidnight0 = new DateMidnight(dateTimeZone0);
    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateMidnight0, 1);
    String string0 = gJChronology0.toString();
    assertEquals(""GJChronology[America/Los_Angeles,cutover=2014-02-14T08:00:00.000Z,mdfw=1]"", string0);
}",""
"// Output
//-----------------------------------------------------------------------
/**
 * Gets a debugging toString.
 *
 * @return a debugging string
 */
public String toString() {
    StringBuffer sb = new StringBuffer(60);
    sb.append(""GJChronology"");
    sb.append('[');
    sb.append(getZone().getID());
    if (iCutoverMillis != DEFAULT_CUTOVER.getMillis()) {
        sb.append("",cutover="");
        DateTimeFormatter printer;
        if (withUTC().dayOfYear().remainder(iCutoverMillis) == 0) {
            printer = ISODateTimeFormat.date();
        } else {
            printer = ISODateTimeFormat.dateTime();
        }
        printer.withChronology(withUTC()).printTo(sb, iCutoverMillis);
    }
    if (getMinimumDaysInFirstWeek() != 4) {
        sb.append("",mdfw="");
        sb.append(getMinimumDaysInFirstWeek());
    }
    sb.append(']');
    return sb.toString();
}","public void test2637() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    String string0 = gJChronology0.toString();
    assertEquals(""GJChronology[UTC]"", string0);
}",""
"public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth, int hourOfDay, int minuteOfHour, int secondOfMinute, int millisOfSecond) throws IllegalArgumentException {
    Chronology base;
    if ((base = getBase()) != null) {
        return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
    }
    // Assume date is Gregorian.
    long instant;
    instant = iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
    if (instant < iCutoverMillis) {
        // Maybe it's Julian.
        instant = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
        if (instant >= iCutoverMillis) {
            // Okay, it's in the illegal cutover gap.
            throw new IllegalArgumentException(""Specified date does not exist"");
        }
    }
    return instant;
}","public void test2738() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    long long0 = gJChronology0.getDateTimeMillis(123, 3, 3, 15, 3, 3, 0);
    assertEquals((-58280432639000L), long0);
}",""
"public int getMinimumDaysInFirstWeek() {
    return iGregorianChronology.getMinimumDaysInFirstWeek();
}","public void test2739() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    long long0 = gJChronology0.getDateTimeMillis(123, 3, 3, 15, 3, 3, 0);
    assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
}","/**
 * Gets the minimum days needed for a week to be the first week in a year.
 *
 * @return the minimum days
 */"
"public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth, int millisOfDay) throws IllegalArgumentException {
    Chronology base;
    if ((base = getBase()) != null) {
        return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);
    }
    // Assume date is Gregorian.
    long instant = iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);
    if (instant < iCutoverMillis) {
        // Maybe it's Julian.
        instant = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);
        if (instant >= iCutoverMillis) {
            // Okay, it's in the illegal cutover gap.
            throw new IllegalArgumentException(""Specified date does not exist"");
        }
    }
    return instant;
}","public void test2840() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) null);
    long long0 = gJChronology0.getDateTimeMillis(2, 2, 1, 2);
    assertEquals((-62101562399998L), long0);
}",""
"public int getMinimumDaysInFirstWeek() {
    return iGregorianChronology.getMinimumDaysInFirstWeek();
}","public void test2941() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    GJChronology gJChronology1 = (GJChronology) gJChronology0.withZone((DateTimeZone) null);
    assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
}","/**
 * Gets the minimum days needed for a week to be the first week in a year.
 *
 * @return the minimum days
 */"
"public int getMinimumDaysInFirstWeek() {
    return iGregorianChronology.getMinimumDaysInFirstWeek();
}","public void test3042() throws Throwable {
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (-12219292800000L), 1);
    assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
}","/**
 * Gets the minimum days needed for a week to be the first week in a year.
 *
 * @return the minimum days
 */"
"//-----------------------------------------------------------------------
/**
 * Gets the milliseconds of the datetime instant from the Java epoch
 * of 1970-01-01T00:00:00Z.
 *
 * @return the number of milliseconds since 1970-01-01T00:00:00Z
 */
public long getMillis() {
    return iMillis;
}","public void test3143() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
    DateMidnight dateMidnight0 = new DateMidnight(1123200004L, dateTimeZone0);
    DateMidnight dateMidnight1 = dateMidnight0.withChronology(gJChronology0);
    DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
    DateMidnight dateMidnight2 = dateMidnight1.withFieldAdded(durationFieldType0, 1);
    assertEquals(33091200000L, dateMidnight2.getMillis());
}",""
"public int getMinimumDaysInFirstWeek() {
    return iGregorianChronology.getMinimumDaysInFirstWeek();
}","public void test3244() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    Months months0 = Months.EIGHT;
    long long0 = gJChronology0.add((ReadablePeriod) months0, (-1L), 1136);
    assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
}","/**
 * Gets the minimum days needed for a week to be the first week in a year.
 *
 * @return the minimum days
 */"
"public long add(ReadablePeriod period, long instant, int scalar) {
    if (scalar != 0 && period != null) {
        for (int i = 0, isize = period.size(); i < isize; i++) {
            // use long to allow for multiplication (fits OK)
            long value = period.getValue(i);
            if (value != 0) {
                instant = period.getFieldType(i).getField(this).add(instant, value * scalar);
            }
        }
    }
    return instant;
}","public void test3245() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    Months months0 = Months.EIGHT;
    long long0 = gJChronology0.add((ReadablePeriod) months0, (-1L), 1136);
    assertEquals(23898927599999L, long0);
}","/**
 * Adds the period to the instant, specifying the number of times to add.
 *
 * @param period  the period to add, null means add nothing
 * @param instant  the instant to add to
 * @param scalar  the number of times to add
 * @return the updated instant
 */"
"public int getMinimumDaysInFirstWeek() {
    return iGregorianChronology.getMinimumDaysInFirstWeek();
}","public void test3346() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(508);
    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
    YearMonth yearMonth0 = new YearMonth(5154L, (Chronology) gJChronology0);
    Interval interval0 = yearMonth0.toInterval();
    Months months0 = Months.monthsIn(interval0);
    assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
}","/**
 * Gets the minimum days needed for a week to be the first week in a year.
 *
 * @return the minimum days
 */"
"public long getEndMillis() {
    return iEndMillis;
}","public void test3347() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(508);
    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
    YearMonth yearMonth0 = new YearMonth(5154L, (Chronology) gJChronology0);
    Interval interval0 = yearMonth0.toInterval();
    Months months0 = Months.monthsIn(interval0);
    assertEquals(2707200000L, interval0.getEndMillis());
}","/**
 * Gets the end of this time interval which is exclusive.
 *
 * @return the end of the time interval,
 *  millisecond instant from 1970-01-01T00:00:00Z
 */"
"//-----------------------------------------------------------------------
/**
 * Gets the number of months that this period represents.
 *
 * @return the number of months in the period
 */
public int getMonths() {
    return getValue();
}","public void test3348() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(508);
    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
    YearMonth yearMonth0 = new YearMonth(5154L, (Chronology) gJChronology0);
    Interval interval0 = yearMonth0.toInterval();
    Months months0 = Months.monthsIn(interval0);
    assertEquals(1, months0.getMonths());
}",""
"//-----------------------------------------------------------------------
/**
 * Compares this ReadablePartial with another returning true if the chronology,
 * field types and values are equal.
 *
 * @param partial  an object to check against
 * @return true if fields and values are equal
 */
public boolean equals(Object partial) {
    if (this == partial) {
        return true;
    }
    if (partial instanceof ReadablePartial == false) {
        return false;
    }
    ReadablePartial other = (ReadablePartial) partial;
    if (size() != other.size()) {
        return false;
    }
    for (int i = 0, isize = size(); i < isize; i++) {
        if (getValue(i) != other.getValue(i) || getFieldType(i) != other.getFieldType(i)) {
            return false;
        }
    }
    return FieldUtils.equals(getChronology(), other.getChronology());
}","public void test3449() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
    Partial partial0 = new Partial(dateTimeFieldType0, 1, gJChronology0);
    PeriodType periodType0 = PeriodType.standard();
    Period period0 = new Period(15356250, 15356250, 4221, (-649), (-649), (-649), (-3611), 0, periodType0);
    Partial partial1 = partial0.withPeriodAdded(period0, (-649));
    assertFalse(partial1.equals((Object) partial0));
}",""
"public int getMinimumDaysInFirstWeek() {
    return iGregorianChronology.getMinimumDaysInFirstWeek();
}","public void test3450() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
    Partial partial0 = new Partial(dateTimeFieldType0, 1, gJChronology0);
    PeriodType periodType0 = PeriodType.standard();
    Period period0 = new Period(15356250, 15356250, 4221, (-649), (-649), (-649), (-3611), 0, periodType0);
    Partial partial1 = partial0.withPeriodAdded(period0, (-649));
    assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
}","/**
 * Gets the minimum days needed for a week to be the first week in a year.
 *
 * @return the minimum days
 */"
"public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth, int hourOfDay, int minuteOfHour, int secondOfMinute, int millisOfSecond) throws IllegalArgumentException {
    Chronology base;
    if ((base = getBase()) != null) {
        return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
    }
    // Assume date is Gregorian.
    long instant;
    instant = iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
    if (instant < iCutoverMillis) {
        // Maybe it's Julian.
        instant = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
        if (instant >= iCutoverMillis) {
            // Okay, it's in the illegal cutover gap.
            throw new IllegalArgumentException(""Specified date does not exist"");
        }
    }
    return instant;
}","public void test3551() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    int int0 = 3499;
    int int1 = 499;
    gJChronology0.getZone();
    int[] intArray0 = new int[7];
    GJChronology.getInstanceUTC();
    intArray0[1] = 3499;
    intArray0[2] = 3499;
    intArray0[3] = 499;
    intArray0[4] = 3499;
    intArray0[5] = 3499;
    intArray0[6] = 3499;
    LocalDateTime localDateTime0 = new LocalDateTime((-454L));
    LocalDateTime localDateTime1 = localDateTime0.minusMinutes(3499);
    localDateTime1.getEra();
    gJChronology0.set(localDateTime1, (-79271568000000L));
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
    Chronology chronology0 = lenientChronology0.withUTC();
    DateTime dateTime0 = new DateTime(1, 479, 3499, (-1070), 60, 2400, (-3134), chronology0);
    GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0);
    try {
        gJChronology0.getDateTimeMillis(3499, 3499, 499, 499, 0, 0, 0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value 499 for hourOfDay must be in the range [0,23]
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",""
"public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth, int millisOfDay) throws IllegalArgumentException {
    Chronology base;
    if ((base = getBase()) != null) {
        return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);
    }
    // Assume date is Gregorian.
    long instant = iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);
    if (instant < iCutoverMillis) {
        // Maybe it's Julian.
        instant = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);
        if (instant >= iCutoverMillis) {
            // Okay, it's in the illegal cutover gap.
            throw new IllegalArgumentException(""Specified date does not exist"");
        }
    }
    return instant;
}","public void test3652() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = gJChronology0.getZone();
    gJChronology0.getZone();
    DateMidnight dateMidnight0 = new DateMidnight((-674L), dateTimeZone0);
    dateMidnight0.isEqual((-674L));
    dateTimeZone0.equals(dateMidnight0);
    GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateMidnight0, 4);
    GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateMidnight0);
    Period period0 = Period.millis(4);
    gJChronology1.gregorianToJulianByWeekyear(4);
    Period.minutes(23118750);
    period0.withDays(4);
    period0.getHours();
    gJChronology1.toString();
    dateTimeZone0.adjustOffset((-5528L), false);
    gJChronology1.gregorianToJulianByYear(1351L);
    try {
        gJChronology1.getDateTimeMillis((-1), (-333), 4, (-2135));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value -2135 for millisOfDay must be in the range [0,86400000]
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",""
"public int getMinimumDaysInFirstWeek() {
    return iGregorianChronology.getMinimumDaysInFirstWeek();
}","public void test3753() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    long long0 = gJChronology0.julianToGregorianByYear(732L);
    assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
}","/**
 * Gets the minimum days needed for a week to be the first week in a year.
 *
 * @return the minimum days
 */"
"long julianToGregorianByYear(long instant) {
    return convertByYear(instant, iJulianChronology, iGregorianChronology);
}","public void test3754() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    long long0 = gJChronology0.julianToGregorianByYear(732L);
    assertEquals((-1123199268L), long0);
}",""
"public int getMinimumDaysInFirstWeek() {
    return iGregorianChronology.getMinimumDaysInFirstWeek();
}","public void test3855() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    gJChronology0.hashCode();
    assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
}","/**
 * Gets the minimum days needed for a week to be the first week in a year.
 *
 * @return the minimum days
 */"
"public int getMinimumDaysInFirstWeek() {
    return iGregorianChronology.getMinimumDaysInFirstWeek();
}","public void test3956() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(508);
    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
    gJChronology0.equals(dateTimeZone0);
    assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
}","/**
 * Gets the minimum days needed for a week to be the first week in a year.
 *
 * @return the minimum days
 */"
"public int getMinimumDaysInFirstWeek() {
    return iGregorianChronology.getMinimumDaysInFirstWeek();
}","public void test4057() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    long long0 = gJChronology0.julianToGregorianByWeekyear((-4186L));
    assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
}","/**
 * Gets the minimum days needed for a week to be the first week in a year.
 *
 * @return the minimum days
 */"
"long julianToGregorianByWeekyear(long instant) {
    return convertByWeekyear(instant, iJulianChronology, iGregorianChronology);
}","public void test4058() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    long long0 = gJChronology0.julianToGregorianByWeekyear((-4186L));
    assertEquals((-1209604186L), long0);
}",""
