project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    MutablePeriod mutablePeriod0 = new MutablePeriod((Object) null);
    int[] intArray0 = gJChronology0.get((ReadablePeriod) mutablePeriod0, (-1585L), (-12219292800000L));
    assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
}",0,"assertEquals(0, gJChronology0.getMinimumDaysInFirstWeek())"
project,0,test001,"public void test001() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    MutablePeriod mutablePeriod0 = new MutablePeriod((Object) null);
    int[] intArray0 = gJChronology0.get((ReadablePeriod) mutablePeriod0, (-1585L), (-12219292800000L));
    assertArrayEquals(new int[] { (-387), (-2), (-2), (-2), (-23), (-59), (-58), (-415) }, intArray0);
}",0,
project,0,test012,"public void test012() throws Throwable {
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
    DateMidnight dateMidnight0 = new DateMidnight(1123200004L, dateTimeZone0);
    DateMidnight dateMidnight1 = dateMidnight0.plusDays((-292275054));
    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateMidnight1);
    String string0 = gJChronology0.toString();
    assertEquals(""GJChronology[America/Los_Angeles,cutover=-798252-02-12T07:52:58.000Z]"", string0);
}",0,
project,0,test023,"public void test023() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
    // Undeclared exception!
    try {
        GJChronology.getInstance(dateTimeZone0, (-25252563974399000L), 1109);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid min days in first week: 1109
        //
        verifyException(""org.joda.time.chrono.JulianChronology"", e);
    }
}",0,
project,0,test034,"public void test034() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
    gJChronology0.assemble(assembledChronology_Fields0);
    assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
}",0,"assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek())"
project,0,test045,"public void test045() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    long long0 = gJChronology0.julianToGregorianByYear(15778800000L);
    assertEquals(14655600000L, long0);
}",0,"assertEquals(1, long0)"
project,0,test046,"public void test046() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    long long0 = gJChronology0.julianToGregorianByYear(15778800000L);
    assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
}",0,
project,0,test057,"public void test057() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    long long0 = gJChronology0.julianToGregorianByWeekyear(30589264004L);
    assertEquals(29379664004L, long0);
}",0,
project,0,test058,"public void test058() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    long long0 = gJChronology0.julianToGregorianByWeekyear(30589264004L);
    assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
}",0,
project,0,test069,"public void test069() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    long long0 = gJChronology0.gregorianToJulianByYear((-113825952000000L));
    assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
}",0,"assertEquals(0, gJChronology0.getMinimumDaysInFirstWeek())"
project,0,test0610,"public void test0610() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    long long0 = gJChronology0.gregorianToJulianByYear((-113825952000000L));
    assertEquals((-113795625600000L), long0);
}",1,
project,0,test0711,"public void test0711() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    long long0 = gJChronology0.gregorianToJulianByWeekyear((-1209604186L));
    assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
}",0,
project,0,test0712,"public void test0712() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    long long0 = gJChronology0.gregorianToJulianByWeekyear((-1209604186L));
    assertEquals((-4186L), long0);
}",0,"assertEquals(1, long0)"
project,0,test0813,"public void test0813() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 168L, 1);
    Instant instant0 = gJChronology0.getGregorianCutover();
    assertEquals(168L, instant0.getMillis());
}",0,"assertEquals(1, instant0.getMillis())"
project,0,test0814,"public void test0814() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 168L, 1);
    Instant instant0 = gJChronology0.getGregorianCutover();
    assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
}",0,"assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek())"
project,0,test0915,"public void test0915() throws Throwable {
    Instant instant0 = Instant.now();
    DateTimeZone dateTimeZone0 = instant0.getZone();
    // Undeclared exception!
    try {
        GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0, 400);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid min days in first week: 400
        //
        verifyException(""org.joda.time.chrono.JulianChronology"", e);
    }
}",0,
project,0,test1016,"public void test1016() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    // Undeclared exception!
    try {
        gJChronology0.assemble((AssembledChronology.Fields) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.chrono.GJChronology"", e);
    }
}",0,
project,0,test1117,"public void test1117() throws Throwable {
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    LocalDate localDate0 = new LocalDate((long) 1);
    long long0 = buddhistChronology0.set(localDate0, (-57358001L));
    assertEquals((-17134732558001L), long0);
}",0,"assertEquals(1, long0)"
project,0,test1218,"public void test1218() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    try {
        gJChronology0.getDateTimeMillis(12, 1136, (-4851), 3449, 1750, (-4851), 12);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value 3449 for hourOfDay must be in the range [0,23]
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",0,
project,0,test1319,"public void test1319() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    long long0 = gJChronology0.getDateTimeMillis(2, 5, 1, 2);
    assertEquals((-62093865599998L), long0);
}",0,"assertEquals(1, long0)"
project,0,test1320,"public void test1320() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    long long0 = gJChronology0.getDateTimeMillis(2, 5, 1, 2);
    assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
}",0,"assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek())"
project,0,test1421,"public void test1421() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    GJChronology gJChronology1 = GJChronology.getInstance();
    DateTimeZone dateTimeZone0 = gJChronology1.getZone();
    Chronology chronology0 = gJChronology0.withZone(dateTimeZone0);
    assertSame(chronology0, gJChronology1);
}",0,
project,0,test1522,"public void test1522() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(2, 2);
    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 0L, 2);
    GJChronology gJChronology1 = (GJChronology) gJChronology0.withZone(dateTimeZone0);
    assertEquals(2, gJChronology1.getMinimumDaysInFirstWeek());
}",0,
project,0,test1623,"public void test1623() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
    GJChronology.getInstance(dateTimeZone0, (ReadableInstant) null, 1);
    // Undeclared exception!
    try {
        DateTimeZone.forID(""cKI+| >S2"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The datetime zone id 'cKI+| >S2' is not recognised
        //
        verifyException(""org.joda.time.DateTimeZone"", e);
    }
}",0,
project,0,test1724,"public void test1724() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) null);
    gJChronology0.getGregorianCutover();
    assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
}",0,"assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek())"
project,0,test1825,"public void test1825() throws Throwable {
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
    GJChronology gJChronology1 = (GJChronology) gJChronology0.withUTC();
    assertNotSame(gJChronology1, gJChronology0);
}",0,
project,0,test1826,"public void test1826() throws Throwable {
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
    GJChronology gJChronology1 = (GJChronology) gJChronology0.withUTC();
    assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
}",0,
project,0,test1927,"public void test1927() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-150));
    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) null);
    int int0 = gJChronology0.getMinimumDaysInFirstWeek();
    assertEquals(4, int0);
}",0,
project,0,test2028,"public void test2028() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    Duration duration0 = Duration.standardMinutes((-463));
    Instant instant0 = GJChronology.DEFAULT_CUTOVER;
    DateTime dateTime0 = instant0.toDateTime((Chronology) gJChronology0);
    Period period0 = new Period(354, 354, 354, 354);
    DateTime dateTime1 = dateTime0.withPeriodAdded(period0, (-1637));
    MutablePeriod mutablePeriod0 = new MutablePeriod(duration0, dateTime1);
    assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
}",0,"assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek())"
project,0,test2129,"public void test2129() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    Months months0 = Months.NINE;
    int[] intArray0 = gJChronology0.get((ReadablePeriod) months0, (-12219292800000L), 31449600000L);
    assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
}",0,"assertEquals(0, gJChronology0.getMinimumDaysInFirstWeek())"
project,0,test2130,"public void test2130() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    Months months0 = Months.NINE;
    int[] intArray0 = gJChronology0.get((ReadablePeriod) months0, (-12219292800000L), 31449600000L);
    assertArrayEquals(new int[] { 4658 }, intArray0);
}",0,
project,0,test2231,"public void test2231() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    Months months0 = Months.ZERO;
    int[] intArray0 = gJChronology0.get((ReadablePeriod) months0, (long) 499, (-25252563974400000L));
    assertArrayEquals(new int[] { (-9602477) }, intArray0);
}",0,
project,0,test2232,"public void test2232() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    Months months0 = Months.ZERO;
    int[] intArray0 = gJChronology0.get((ReadablePeriod) months0, (long) 499, (-25252563974400000L));
    assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
}",0,"assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek())"
project,0,test2333,"public void test2333() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
    DateMidnight dateMidnight0 = new DateMidnight(1123200004L, dateTimeZone0);
    DateMidnight dateMidnight1 = dateMidnight0.withChronology(gJChronology0);
    DateMidnight dateMidnight2 = dateMidnight1.plusDays((-292275054));
    DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
    DateMidnight dateMidnight3 = dateMidnight2.withFieldAdded(durationFieldType0, 1);
    assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
}",0,"assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek())"
project,0,test2334,"public void test2334() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
    DateMidnight dateMidnight0 = new DateMidnight(1123200004L, dateTimeZone0);
    DateMidnight dateMidnight1 = dateMidnight0.withChronology(gJChronology0);
    DateMidnight dateMidnight2 = dateMidnight1.plusDays((-292275054));
    DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
    DateMidnight dateMidnight3 = dateMidnight2.withFieldAdded(durationFieldType0, 1);
    assertEquals((-25252531574400000L), dateMidnight3.getMillis());
}",0,"assertEquals(0, dateMidnight3.getMillis())"
project,0,test2435,"public void test2435() throws Throwable {
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    DateTime dateTime0 = DateTime.now((Chronology) buddhistChronology0);
    // Undeclared exception!
    try {
        dateTime0.withWeekyear((-541));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (BuddhistChronology[UTC])
        //
        verifyException(""org.joda.time.chrono.LimitChronology"", e);
    }
}",0,
project,0,test2536,"public void test2536() throws Throwable {
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
    DateMidnight dateMidnight0 = new DateMidnight(dateTimeZone0);
    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateMidnight0, 1);
    String string0 = gJChronology0.toString();
    assertEquals(""GJChronology[America/Los_Angeles,cutover=2014-02-14T08:00:00.000Z,mdfw=1]"", string0);
}",0,
project,0,test2637,"public void test2637() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    String string0 = gJChronology0.toString();
    assertEquals(""GJChronology[UTC]"", string0);
}",0,
project,0,test2738,"public void test2738() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    long long0 = gJChronology0.getDateTimeMillis(123, 3, 3, 15, 3, 3, 0);
    assertEquals((-58280432639000L), long0);
}",1,
project,0,test2739,"public void test2739() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    long long0 = gJChronology0.getDateTimeMillis(123, 3, 3, 15, 3, 3, 0);
    assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
}",0,
project,0,test2840,"public void test2840() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) null);
    long long0 = gJChronology0.getDateTimeMillis(2, 2, 1, 2);
    assertEquals((-62101562399998L), long0);
}",0,"assertEquals(1, long0)"
project,0,test2941,"public void test2941() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    GJChronology gJChronology1 = (GJChronology) gJChronology0.withZone((DateTimeZone) null);
    assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
}",0,"assertEquals(1, gJChronology1.getMinimumDaysInFirstWeek())"
project,0,test3042,"public void test3042() throws Throwable {
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (-12219292800000L), 1);
    assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek());
}",0,"assertEquals(0, gJChronology0.getMinimumDaysInFirstWeek())"
project,0,test3143,"public void test3143() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
    DateMidnight dateMidnight0 = new DateMidnight(1123200004L, dateTimeZone0);
    DateMidnight dateMidnight1 = dateMidnight0.withChronology(gJChronology0);
    DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
    DateMidnight dateMidnight2 = dateMidnight1.withFieldAdded(durationFieldType0, 1);
    assertEquals(33091200000L, dateMidnight2.getMillis());
}",0,
project,0,test3244,"public void test3244() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    Months months0 = Months.EIGHT;
    long long0 = gJChronology0.add((ReadablePeriod) months0, (-1L), 1136);
    assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
}",0,"assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek())"
project,0,test3245,"public void test3245() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    Months months0 = Months.EIGHT;
    long long0 = gJChronology0.add((ReadablePeriod) months0, (-1L), 1136);
    assertEquals(23898927599999L, long0);
}",0,"assertEquals(1, long0)"
project,0,test3346,"public void test3346() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(508);
    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
    YearMonth yearMonth0 = new YearMonth(5154L, (Chronology) gJChronology0);
    Interval interval0 = yearMonth0.toInterval();
    Months months0 = Months.monthsIn(interval0);
    assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
}",0,"assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek())"
project,0,test3347,"public void test3347() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(508);
    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
    YearMonth yearMonth0 = new YearMonth(5154L, (Chronology) gJChronology0);
    Interval interval0 = yearMonth0.toInterval();
    Months months0 = Months.monthsIn(interval0);
    assertEquals(2707200000L, interval0.getEndMillis());
}",0,"assertEquals(0, interval0.getEndMillis())"
project,0,test3348,"public void test3348() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(508);
    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
    YearMonth yearMonth0 = new YearMonth(5154L, (Chronology) gJChronology0);
    Interval interval0 = yearMonth0.toInterval();
    Months months0 = Months.monthsIn(interval0);
    assertEquals(1, months0.getMonths());
}",0,"assertEquals(0, months0.getMonths())"
project,0,test3449,"public void test3449() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
    Partial partial0 = new Partial(dateTimeFieldType0, 1, gJChronology0);
    PeriodType periodType0 = PeriodType.standard();
    Period period0 = new Period(15356250, 15356250, 4221, (-649), (-649), (-649), (-3611), 0, periodType0);
    Partial partial1 = partial0.withPeriodAdded(period0, (-649));
    assertFalse(partial1.equals((Object) partial0));
}",0,
project,0,test3450,"public void test3450() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
    Partial partial0 = new Partial(dateTimeFieldType0, 1, gJChronology0);
    PeriodType periodType0 = PeriodType.standard();
    Period period0 = new Period(15356250, 15356250, 4221, (-649), (-649), (-649), (-3611), 0, periodType0);
    Partial partial1 = partial0.withPeriodAdded(period0, (-649));
    assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
}",0,"assertEquals(0, gJChronology0.getMinimumDaysInFirstWeek())"
project,0,test3551,"public void test3551() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    int int0 = 3499;
    int int1 = 499;
    gJChronology0.getZone();
    int[] intArray0 = new int[7];
    GJChronology.getInstanceUTC();
    intArray0[1] = 3499;
    intArray0[2] = 3499;
    intArray0[3] = 499;
    intArray0[4] = 3499;
    intArray0[5] = 3499;
    intArray0[6] = 3499;
    LocalDateTime localDateTime0 = new LocalDateTime((-454L));
    LocalDateTime localDateTime1 = localDateTime0.minusMinutes(3499);
    localDateTime1.getEra();
    gJChronology0.set(localDateTime1, (-79271568000000L));
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
    Chronology chronology0 = lenientChronology0.withUTC();
    DateTime dateTime0 = new DateTime(1, 479, 3499, (-1070), 60, 2400, (-3134), chronology0);
    GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0);
    try {
        gJChronology0.getDateTimeMillis(3499, 3499, 499, 499, 0, 0, 0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value 499 for hourOfDay must be in the range [0,23]
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",0,
project,0,test3652,"public void test3652() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = gJChronology0.getZone();
    gJChronology0.getZone();
    DateMidnight dateMidnight0 = new DateMidnight((-674L), dateTimeZone0);
    dateMidnight0.isEqual((-674L));
    dateTimeZone0.equals(dateMidnight0);
    GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateMidnight0, 4);
    GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateMidnight0);
    Period period0 = Period.millis(4);
    gJChronology1.gregorianToJulianByWeekyear(4);
    Period.minutes(23118750);
    period0.withDays(4);
    period0.getHours();
    gJChronology1.toString();
    dateTimeZone0.adjustOffset((-5528L), false);
    gJChronology1.gregorianToJulianByYear(1351L);
    try {
        gJChronology1.getDateTimeMillis((-1), (-333), 4, (-2135));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value -2135 for millisOfDay must be in the range [0,86400000]
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",0,
project,0,test3753,"public void test3753() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    long long0 = gJChronology0.julianToGregorianByYear(732L);
    assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
}",0,
project,0,test3754,"public void test3754() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    long long0 = gJChronology0.julianToGregorianByYear(732L);
    assertEquals((-1123199268L), long0);
}",0,"assertEquals(1, long0)"
project,0,test3855,"public void test3855() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    gJChronology0.hashCode();
    assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
}",0,"assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek())"
project,0,test3956,"public void test3956() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(508);
    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
    gJChronology0.equals(dateTimeZone0);
    assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
}",0,"assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek())"
project,0,test4057,"public void test4057() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    long long0 = gJChronology0.julianToGregorianByWeekyear((-4186L));
    assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
}",0,"assertEquals(0, gJChronology0.getMinimumDaysInFirstWeek())"
project,0,test4058,"public void test4058() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    long long0 = gJChronology0.julianToGregorianByWeekyear((-4186L));
    assertEquals((-1209604186L), long0);
}",0,"assertEquals(1, long0)"
