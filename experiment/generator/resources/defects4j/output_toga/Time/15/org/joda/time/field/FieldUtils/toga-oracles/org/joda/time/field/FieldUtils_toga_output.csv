project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    int int0 = FieldUtils.getWrappedValue((-2206), (-1), 1);
    assertEquals((-1), int0);
}",1,
project,0,test011,"public void test011() throws Throwable {
    int int0 = FieldUtils.getWrappedValue(0, 0, Integer.MIN_VALUE, 0);
    assertEquals(2, int0);
}",0,"assertEquals(1, int0)"
project,0,test022,"public void test022() throws Throwable {
    // Undeclared exception!
    try {
        FieldUtils.getWrappedValue(3912, 3349, 3912, 3349);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // MIN > MAX
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",0,
project,0,test033,"public void test033() throws Throwable {
    FieldUtils.verifyValueBounds(""Multiplication overflows an int: "", 3349, 3349, 3912);
}",1,
project,0,test044,"public void test044() throws Throwable {
    // Undeclared exception!
    try {
        FieldUtils.verifyValueBounds(""*<"", 3566, (-495), (-495));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value 3566 for *< must be in the range [-495,-495]
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",1,
project,0,test055,"public void test055() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
    FieldUtils.verifyValueBounds(dateTimeFieldType0, 0, 0, 2022);
    assertEquals(""hourOfHalfday"", dateTimeFieldType0.toString());
}",0,assertNotNull(dateTimeFieldType0.toString())
project,0,test066,"public void test066() throws Throwable {
    FieldUtils.verifyValueBounds((DateTimeField) null, Integer.MIN_VALUE, Integer.MIN_VALUE, (-1));
}",1,
project,0,test077,"public void test077() throws Throwable {
    // Undeclared exception!
    try {
        FieldUtils.safeMultiply(1605L, 10000000000000000L);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // Multiplication overflows a long: 1605 * 10000000000000000
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",1,
project,0,test088,"public void test088() throws Throwable {
    // Undeclared exception!
    try {
        FieldUtils.safeMultiply((-9223372036854775808L), (-851));
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // Multiplication overflows a long: -9223372036854775808 * -851
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",0,
project,0,test099,"public void test099() throws Throwable {
    int int0 = FieldUtils.safeMultiply((-1), (-2147483647));
    assertEquals(Integer.MAX_VALUE, int0);
}",1,
project,0,test1010,"public void test1010() throws Throwable {
    int int0 = FieldUtils.safeMultiply(1, Integer.MIN_VALUE);
    assertEquals(Integer.MIN_VALUE, int0);
}",1,
project,0,test1111,"public void test1111() throws Throwable {
    long long0 = FieldUtils.safeSubtract((-861L), (-861L));
    assertEquals(0L, long0);
}",0,"assertEquals(1, long0)"
project,0,test1212,"public void test1212() throws Throwable {
    // Undeclared exception!
    try {
        FieldUtils.safeAdd((-9223372036854775808L), (-9223372036854775808L));
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // The calculation caused an overflow: -9223372036854775808 + -9223372036854775808
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",0,
project,0,test1313,"public void test1313() throws Throwable {
    // Undeclared exception!
    try {
        FieldUtils.safeAdd((-200), Integer.MIN_VALUE);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // The calculation caused an overflow: -200 + -2147483648
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",0,
project,0,test1414,"public void test1414() throws Throwable {
    int int0 = FieldUtils.safeToInt(0L);
    assertEquals(0, int0);
}",1,
project,0,test1515,"public void test1515() throws Throwable {
    int int0 = FieldUtils.safeToInt((-2147483648L));
    assertEquals(Integer.MIN_VALUE, int0);
}",1,
project,0,test1616,"public void test1616() throws Throwable {
    long long0 = FieldUtils.safeSubtract(0L, 0L);
    assertEquals(0L, long0);
}",0,"assertEquals(0, long0)"
project,0,test1717,"public void test1717() throws Throwable {
    int int0 = FieldUtils.safeNegate((-1126));
    assertEquals(1126, int0);
}",1,
project,0,test1818,"public void test1818() throws Throwable {
    int int0 = FieldUtils.safeNegate(231);
    assertEquals((-231), int0);
}",1,
project,0,test1919,"public void test1919() throws Throwable {
    int int0 = FieldUtils.safeMultiplyToInt(0L, 0L);
    assertEquals(0, int0);
}",0,"assertEquals(1, int0)"
project,0,test2020,"public void test2020() throws Throwable {
    int int0 = FieldUtils.safeMultiplyToInt((-1440L), 2856L);
    assertEquals((-4112640), int0);
}",0,"assertEquals(0, int0)"
project,0,test2121,"public void test2121() throws Throwable {
    long long0 = FieldUtils.safeMultiply(63L, (long) (-2206));
    assertEquals((-138978L), long0);
}",1,
project,0,test2222,"public void test2222() throws Throwable {
    long long0 = FieldUtils.safeMultiply((-1L), 2031);
    assertEquals((-2031L), long0);
}",0,"assertEquals(0, long0)"
project,0,test2323,"public void test2323() throws Throwable {
    int int0 = FieldUtils.safeMultiply(0, 0);
    assertEquals(0, int0);
}",1,
project,0,test2424,"public void test2424() throws Throwable {
    long long0 = FieldUtils.safeAdd(0L, 0L);
    assertEquals(0L, long0);
}",0,"assertEquals(1, long0)"
project,0,test2525,"public void test2525() throws Throwable {
    int int0 = FieldUtils.safeAdd(365, 365);
    assertEquals(730, int0);
}",0,"assertEquals(0, int0)"
project,0,test2626,"public void test2626() throws Throwable {
    int int0 = FieldUtils.getWrappedValue(0, 0, 0, 412);
    assertEquals(0, int0);
}",0,"assertEquals(1, int0)"
project,0,test2727,"public void test2727() throws Throwable {
    int int0 = FieldUtils.getWrappedValue((-2283), Integer.MIN_VALUE, Integer.MIN_VALUE, 2);
    assertEquals((-2280), int0);
}",0,"assertEquals(1, int0)"
project,0,test2828,"public void test2828() throws Throwable {
    int int0 = FieldUtils.getWrappedValue(Integer.MIN_VALUE, Integer.MIN_VALUE, (-1));
    assertEquals(Integer.MIN_VALUE, int0);
}",1,
project,0,test2929,"public void test2929() throws Throwable {
    int int0 = FieldUtils.getWrappedValue((-417), 231, 898);
    assertEquals(251, int0);
}",1,
project,0,test3030,"public void test3030() throws Throwable {
    int int0 = FieldUtils.getWrappedValue(1430, (-1), 17971875);
    assertEquals(1430, int0);
}",1,
project,0,test3131,"public void test3131() throws Throwable {
    // Undeclared exception!
    try {
        FieldUtils.getWrappedValue(16, 16, 16);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // MIN > MAX
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",1,
project,0,test3232,"public void test3232() throws Throwable {
    // Undeclared exception!
    try {
        FieldUtils.safeToInt(9223372036854775807L);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // Value cannot fit in an int: 9223372036854775807
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",1,
project,0,test3333,"public void test3333() throws Throwable {
    int int0 = FieldUtils.safeToInt(2147483647L);
    assertEquals(Integer.MAX_VALUE, int0);
}",1,
project,0,test3434,"public void test3434() throws Throwable {
    long long0 = FieldUtils.safeMultiply(2147483647L, (long) 3224);
    assertEquals(6923487277928L, long0);
}",1,
project,0,test3535,"public void test3535() throws Throwable {
    long long0 = FieldUtils.safeMultiply(1L, 1L);
    assertEquals(1L, long0);
}",1,
project,0,test3636,"public void test3636() throws Throwable {
    long long0 = FieldUtils.safeMultiply((-2359L), (-1));
    assertEquals(2359L, long0);
}",0,"assertEquals(1, long0)"
project,0,test3737,"public void test3737() throws Throwable {
    Integer integer0 = new Integer(271);
    boolean boolean0 = FieldUtils.equals((Object) integer0, (Object) null);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test3838,"public void test3838() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
    DateTimeField dateTimeField0 = dateTimeFieldType0.getField((Chronology) null);
    Object object0 = new Object();
    boolean boolean0 = FieldUtils.equals((Object) dateTimeField0, object0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test3939,"public void test3939() throws Throwable {
    Object object0 = new Object();
    boolean boolean0 = FieldUtils.equals(object0, object0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test4040,"public void test4040() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
    DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
    boolean boolean0 = FieldUtils.equals((Object) null, (Object) durationFieldType0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test4141,"public void test4141() throws Throwable {
    int int0 = FieldUtils.getWrappedValue((-2146907296), 0, 31);
    assertEquals(0, int0);
}",1,
project,0,test4242,"public void test4242() throws Throwable {
    // Undeclared exception!
    try {
        FieldUtils.verifyValueBounds(""U:b"", 0, 0, (-97));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value 0 for U:b must be in the range [0,-97]
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",1,
project,0,test4343,"public void test4343() throws Throwable {
    FieldUtils.verifyValueBounds(""YearMonthDay"", Integer.MIN_VALUE, Integer.MIN_VALUE, Integer.MIN_VALUE);
}",1,
project,0,test4444,"public void test4444() throws Throwable {
    Integer integer0 = new Integer(0);
    // Undeclared exception!
    try {
        FieldUtils.verifyValueBounds("" * "", (int) integer0, 3654, 0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value 0 for  *  must be in the range [3654,0]
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",1,
project,0,test4545,"public void test4545() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
    // Undeclared exception!
    try {
        FieldUtils.verifyValueBounds(dateTimeFieldType0, (-1), (-1570), (-1570));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value -1 for dayOfMonth must be in the range [-1570,-1570]
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",1,
project,0,test4646,"public void test4646() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
    FieldUtils.verifyValueBounds(dateTimeFieldType0, Integer.MIN_VALUE, Integer.MIN_VALUE, Integer.MIN_VALUE);
    assertEquals(""secondOfMinute"", dateTimeFieldType0.getName());
}",0,assertNotNull(dateTimeFieldType0.getName())
project,0,test4747,"public void test4747() throws Throwable {
    // Undeclared exception!
    try {
        FieldUtils.verifyValueBounds((DateTimeFieldType) null, (-1958), 100, (-1958));
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.IllegalFieldValueException"", e);
    }
}",1,
project,0,test4848,"public void test4848() throws Throwable {
    // Undeclared exception!
    try {
        FieldUtils.verifyValueBounds((DateTimeField) null, 841, (-251526), (-3169));
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",1,
project,0,test4949,"public void test4949() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
    DateTimeField dateTimeField0 = dateTimeFieldType0.getField((Chronology) null);
    FieldUtils.verifyValueBounds(dateTimeField0, 0, 0, 0);
}",1,
project,0,test5050,"public void test5050() throws Throwable {
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    DateTimeField dateTimeField0 = buddhistChronology0.millisOfSecond();
    // Undeclared exception!
    try {
        FieldUtils.verifyValueBounds(dateTimeField0, 1, 1776, (-1207));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value 1 for millisOfSecond must be in the range [1776,-1207]
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",1,
project,0,test5151,"public void test5151() throws Throwable {
    // Undeclared exception!
    try {
        FieldUtils.safeMultiplyToInt((-761L), (-2147483648L));
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // Value cannot fit in an int: 1634235056128
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",0,
project,0,test5252,"public void test5252() throws Throwable {
    // Undeclared exception!
    try {
        FieldUtils.safeToInt((-9223372036854775808L));
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // Value cannot fit in an int: -9223372036854775808
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",1,
project,0,test5353,"public void test5353() throws Throwable {
    // Undeclared exception!
    try {
        FieldUtils.safeMultiply((-1L), (-9223372036854775800L));
        //  fail(""Expecting exception: ArithmeticException"");
        // Unstable assertion
    } catch (ArithmeticException e) {
        //
        // Multiplication overflows a long: -1 * -9223372036854775800
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",0,
project,0,test5454,"public void test5454() throws Throwable {
    // Undeclared exception!
    try {
        FieldUtils.safeMultiply((-9223372036854775808L), (-1L));
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // Multiplication overflows a long: -9223372036854775808 * -1
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",1,
project,0,test5555,"public void test5555() throws Throwable {
    // Undeclared exception!
    try {
        FieldUtils.safeMultiply((-3520L), 1000000000000000000L);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // Multiplication overflows a long: -3520 * 1000000000000000000
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",1,
project,0,test5656,"public void test5656() throws Throwable {
    long long0 = FieldUtils.safeMultiply((-801L), 0L);
    assertEquals(0L, long0);
}",1,
project,0,test5757,"public void test5757() throws Throwable {
    long long0 = FieldUtils.safeMultiply((long) 0, (long) 0);
    assertEquals(0L, long0);
}",1,
project,0,test5858,"public void test5858() throws Throwable {
    int int0 = FieldUtils.safeMultiplyToInt(10L, 10L);
    assertEquals(100, int0);
}",0,"assertEquals(0, int0)"
project,0,test5959,"public void test5959() throws Throwable {
    long long0 = FieldUtils.safeMultiply(1L, 170L);
    assertEquals(170L, long0);
}",1,
project,0,test6060,"public void test6060() throws Throwable {
    // Undeclared exception!
    try {
        FieldUtils.safeMultiply(9223372036854775805L, 1017);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // Multiplication overflows a long: 9223372036854775805 * 1017
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",0,
project,0,test6161,"public void test6161() throws Throwable {
    Integer integer0 = new Integer(25);
    long long0 = FieldUtils.safeMultiply((long) integer0, 1);
    assertEquals(25L, long0);
}",0,"assertEquals(1, long0)"
project,0,test6262,"public void test6262() throws Throwable {
    long long0 = FieldUtils.safeMultiply((long) 0, 0);
    assertEquals(0L, long0);
}",0,"assertEquals(1, long0)"
project,0,test6363,"public void test6363() throws Throwable {
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) null);
    long long0 = ethiopicChronology0.add((-313L), (-1556L), (-1));
    assertEquals(1243L, long0);
}",1,
project,0,test6464,"public void test6464() throws Throwable {
    // Undeclared exception!
    try {
        FieldUtils.safeMultiply(Integer.MIN_VALUE, Integer.MIN_VALUE);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // Multiplication overflows an int: -2147483648 * -2147483648
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",0,
project,0,test6565,"public void test6565() throws Throwable {
    // Undeclared exception!
    try {
        FieldUtils.safeMultiply(25, (-2145181949));
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // Multiplication overflows an int: 25 * -2145181949
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",1,
project,0,test6666,"public void test6666() throws Throwable {
    // Undeclared exception!
    try {
        FieldUtils.safeSubtract((-9223372036854775776L), 21600000L);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // The calculation caused an overflow: -9223372036854775776 - 21600000
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",0,
project,0,test6767,"public void test6767() throws Throwable {
    long long0 = FieldUtils.safeSubtract(0L, 10L);
    assertEquals((-10L), long0);
}",0,"assertEquals(1, long0)"
project,0,test6868,"public void test6868() throws Throwable {
    long long0 = FieldUtils.safeSubtract(1907, (-1267));
    assertEquals(3174L, long0);
}",0,"assertEquals(0, long0)"
project,0,test6969,"public void test6969() throws Throwable {
    // Undeclared exception!
    try {
        FieldUtils.safeAdd((-1504L), (-9223372036854775808L));
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // The calculation caused an overflow: -1504 + -9223372036854775808
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",0,
project,0,test7070,"public void test7070() throws Throwable {
    long long0 = FieldUtils.safeAdd(10L, (-1958L));
    assertEquals((-1948L), long0);
}",0,"assertEquals(1, long0)"
project,0,test7171,"public void test7171() throws Throwable {
    long long0 = FieldUtils.safeAdd((long) 170, 1L);
    assertEquals(171L, long0);
}",0,"assertEquals(1, long0)"
project,0,test7272,"public void test7272() throws Throwable {
    // Undeclared exception!
    try {
        FieldUtils.safeAdd(2147483639, 2147483639);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // The calculation caused an overflow: 2147483639 + 2147483639
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",0,
project,0,test7373,"public void test7373() throws Throwable {
    int int0 = FieldUtils.safeAdd(0, (-2456));
    assertEquals((-2456), int0);
}",0,"assertEquals(1, int0)"
project,0,test7474,"public void test7474() throws Throwable {
    int int0 = FieldUtils.safeAdd(0, 0);
    assertEquals(0, int0);
}",0,"assertEquals(1, int0)"
project,0,test7575,"public void test7575() throws Throwable {
    // Undeclared exception!
    try {
        FieldUtils.safeNegate(Integer.MIN_VALUE);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // Integer.MIN_VALUE cannot be negated
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",1,
project,0,test7676,"public void test7676() throws Throwable {
    int int0 = FieldUtils.safeNegate(0);
    assertEquals(0, int0);
}",1,
project,0,test7777,"public void test7777() throws Throwable {
    int int0 = FieldUtils.safeMultiplyToInt(170L, 1L);
    assertEquals(170, int0);
}",0,"assertEquals(1, int0)"
