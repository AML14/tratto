focal_method,test_prefix,docstring
"//-----------------------------------------------------------------------
/**
 * Gets a time zone instance for the specified time zone id.
 * <p>
 * The time zone id may be one of those returned by getAvailableIDs.
 * Short ids, as accepted by {@link java.util.TimeZone}, are not accepted.
 * All IDs must be specified in the long format.
 * The exception is UTC, which is an acceptable id.
 * <p>
 * Alternatively a locale independent, fixed offset, datetime zone can
 * be specified. The form <code>[+-]hh:mm</code> can be used.
 *
 * @param id  the ID of the datetime zone, null means default
 * @return the DateTimeZone object for the ID
 * @throws IllegalArgumentException if the ID is not recognised
 */
@FromString
public static DateTimeZone forID(String id) {
    if (id == null) {
        return getDefault();
    }
    if (id.equals(""UTC"")) {
        return DateTimeZone.UTC;
    }
    DateTimeZone zone = cProvider.getZone(id);
    if (zone != null) {
        return zone;
    }
    if (id.startsWith(""+"") || id.startsWith(""-"")) {
        int offset = parseOffset(id);
        if (offset == 0L) {
            return DateTimeZone.UTC;
        } else {
            id = printOffset(offset);
            return fixedOffsetZone(id, offset);
        }
    }
    throw new IllegalArgumentException(""The datetime zone id '"" + id + ""' is not recognised"");
}","public void test000() throws Throwable {
    CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone) DateTimeZone.getDefault();
    LocalDateTime localDateTime0 = LocalDateTime.now((DateTimeZone) cachedDateTimeZone0);
    FileSystemHandling.createFolder((EvoSuiteFile) null);
    cachedDateTimeZone0.equals(localDateTime0);
    Duration duration0 = Duration.standardHours((-1L));
    cachedDateTimeZone0.getNameKey((-1L));
    localDateTime0.yearOfEra();
    Duration duration1 = duration0.withDurationAdded((ReadableDuration) null, (-2050));
    LocalDateTime localDateTime1 = localDateTime0.minus((ReadableDuration) duration1);
    duration1.plus((-1L));
    localDateTime1.minuteOfHour();
    LocalDateTime localDateTime2 = localDateTime1.plusHours((-2050));
    cachedDateTimeZone0.isLocalDateTimeGap(localDateTime2);
    UTCProvider uTCProvider0 = new UTCProvider();
    DateTimeZone.setProvider(uTCProvider0);
    cachedDateTimeZone0.toString();
    cachedDateTimeZone0.getNameKey((-1L));
    DateTimeZone.getProvider();
    ((DateTimeZone) cachedDateTimeZone0).writeReplace();
    cachedDateTimeZone0.adjustOffset((-1L), true);
    // Undeclared exception!
    try {
        DateTimeZone.forID(""America/Los_Angeles"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The datetime zone id 'America/Los_Angeles' is not recognised
        //
        verifyException(""org.joda.time.DateTimeZone"", e);
    }
}",""
"public String getName(long instant, Locale locale) {
    if (locale == null) {
        locale = Locale.getDefault();
    }
    String nameKey = getNameKey(instant);
    if (nameKey == null) {
        return iID;
    }
    String name = cNameProvider.getName(locale, iID, nameKey);
    if (name != null) {
        return name;
    }
    return printOffset(getOffset(instant));
}","public void test011() throws Throwable {
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.forOffsetMillis(60);
    DefaultNameProvider defaultNameProvider0 = new DefaultNameProvider();
    DateTimeZone.setNameProvider(defaultNameProvider0);
    fixedDateTimeZone0.toTimeZone();
    ((DateTimeZone) fixedDateTimeZone0).writeReplace();
    FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""?IXi"");
    Locale locale0 = Locale.ROOT;
    String string0 = fixedDateTimeZone0.getName((long) 60, locale0);
    assertEquals(""+00:00:00.060"", string0);
}","/**
 * Gets the long name of this datetime zone suitable for display using
 * the specified locale.
 * <p>
 * If the name is not available for the locale, then this method returns a
 * string in the format <code>[+-]hh:mm</code>.
 *
 * @param instant  milliseconds from 1970-01-01T00:00:00Z to get the name for
 * @param locale  the locale to get the name for
 * @return the human-readable long name in the specified locale
 */"
"public String toString() {
    return getID();
}","public void test012() throws Throwable {
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.forOffsetMillis(60);
    DefaultNameProvider defaultNameProvider0 = new DefaultNameProvider();
    DateTimeZone.setNameProvider(defaultNameProvider0);
    fixedDateTimeZone0.toTimeZone();
    ((DateTimeZone) fixedDateTimeZone0).writeReplace();
    FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""?IXi"");
    Locale locale0 = Locale.ROOT;
    String string0 = fixedDateTimeZone0.getName((long) 60, locale0);
    Instant instant0 = new Instant((-74L));
    Instant instant1 = instant0.withMillis((-391L));
    DateTime dateTime0 = instant1.toDateTime();
    fixedDateTimeZone0.getOffset((ReadableInstant) dateTime0);
    assertEquals(""+00:00:00.060"", fixedDateTimeZone0.toString());
}","/**
 * Gets the datetime zone as a string, which is simply its ID.
 * @return the id of the zone
 */"
"//-----------------------------------------------------------------------
/**
 * Gets a time zone instance for the specified time zone id.
 * <p>
 * The time zone id may be one of those returned by getAvailableIDs.
 * Short ids, as accepted by {@link java.util.TimeZone}, are not accepted.
 * All IDs must be specified in the long format.
 * The exception is UTC, which is an acceptable id.
 * <p>
 * Alternatively a locale independent, fixed offset, datetime zone can
 * be specified. The form <code>[+-]hh:mm</code> can be used.
 *
 * @param id  the ID of the datetime zone, null means default
 * @return the DateTimeZone object for the ID
 * @throws IllegalArgumentException if the ID is not recognised
 */
@FromString
public static DateTimeZone forID(String id) {
    if (id == null) {
        return getDefault();
    }
    if (id.equals(""UTC"")) {
        return DateTimeZone.UTC;
    }
    DateTimeZone zone = cProvider.getZone(id);
    if (zone != null) {
        return zone;
    }
    if (id.startsWith(""+"") || id.startsWith(""-"")) {
        int offset = parseOffset(id);
        if (offset == 0L) {
            return DateTimeZone.UTC;
        } else {
            id = printOffset(offset);
            return fixedOffsetZone(id, offset);
        }
    }
    throw new IllegalArgumentException(""The datetime zone id '"" + id + ""' is not recognised"");
}","public void test023() throws Throwable {
    // Undeclared exception!
    try {
        DateTimeZone.forID(""-America/Denver"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid format: \""-America/Denver\"" is malformed at \""America/Denver\""
        //
        verifyException(""org.joda.time.format.DateTimeFormatter"", e);
    }
}",""
"public long adjustOffset(long instant, boolean earlierOrLater) {
    // a bit messy, but will work in all non-pathological cases
    // evaluate 3 hours before and after to work out if anything is happening
    long instantBefore = instant - 3 * DateTimeConstants.MILLIS_PER_HOUR;
    long instantAfter = instant + 3 * DateTimeConstants.MILLIS_PER_HOUR;
    long offsetBefore = getOffset(instantBefore);
    long offsetAfter = getOffset(instantAfter);
    if (offsetBefore <= offsetAfter) {
        // not an overlap (less than is a gap, equal is normal case)
        return instant;
    }
    // work out range of instants that have duplicate local times
    long diff = offsetBefore - offsetAfter;
    long transition = nextTransition(instantBefore);
    long overlapStart = transition - diff;
    long overlapEnd = transition + diff;
    if (instant < overlapStart || instant >= overlapEnd) {
        // not an overlap
        return instant;
    }
    // calculate result
    long afterStart = instant - overlapStart;
    if (afterStart >= diff) {
        // currently in later offset
        return earlierOrLater ? instant : instant - diff;
    } else {
        // currently in earlier offset
        return earlierOrLater ? instant + diff : instant;
    }
}","public void test034() throws Throwable {
    DateTimeZone.getAvailableIDs();
    UTCProvider uTCProvider0 = new UTCProvider();
    uTCProvider0.getAvailableIDs();
    uTCProvider0.getAvailableIDs();
    DateTimeZone.setProvider(uTCProvider0);
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2253));
    long long0 = dateTimeZone0.adjustOffset(0L, false);
    assertEquals(0L, long0);
}","/**
 * Adjusts the offset to be the earlier or later one during an overlap.
 *
 * @param instant  the instant to adjust
 * @param earlierOrLater  false for earlier, true for later
 * @return the adjusted instant millis
 */"
"// Principal methods
//--------------------------------------------------------------------
/**
 * Gets the ID of this datetime zone.
 *
 * @return the ID of this datetime zone
 */
@ToString
public final String getID() {
    return iID;
}","public void test035() throws Throwable {
    DateTimeZone.getAvailableIDs();
    UTCProvider uTCProvider0 = new UTCProvider();
    uTCProvider0.getAvailableIDs();
    uTCProvider0.getAvailableIDs();
    DateTimeZone.setProvider(uTCProvider0);
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2253));
    long long0 = dateTimeZone0.adjustOffset(0L, false);
    DateTimeZone.getProvider();
    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis((-2253));
    assertEquals(""-00:00:02.253"", dateTimeZone1.getID());
}",""
"public String toString() {
    return getID();
}","public void test036() throws Throwable {
    DateTimeZone.getAvailableIDs();
    UTCProvider uTCProvider0 = new UTCProvider();
    uTCProvider0.getAvailableIDs();
    uTCProvider0.getAvailableIDs();
    DateTimeZone.setProvider(uTCProvider0);
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2253));
    long long0 = dateTimeZone0.adjustOffset(0L, false);
    DateTimeZone.getProvider();
    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis((-2253));
    DateTimeZone dateTimeZone2 = DateTimeZone.forOffsetMillis(2000);
    assertEquals(""+00:00:02"", dateTimeZone2.toString());
}","/**
 * Gets the datetime zone as a string, which is simply its ID.
 * @return the id of the zone
 */"
"public boolean isStandardOffset(long instant) {
    return getOffset(instant) == getStandardOffset(instant);
}","public void test037() throws Throwable {
    DateTimeZone.getAvailableIDs();
    UTCProvider uTCProvider0 = new UTCProvider();
    uTCProvider0.getAvailableIDs();
    uTCProvider0.getAvailableIDs();
    DateTimeZone.setProvider(uTCProvider0);
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2253));
    long long0 = dateTimeZone0.adjustOffset(0L, false);
    DateTimeZone.getProvider();
    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis((-2253));
    DateTimeZone dateTimeZone2 = DateTimeZone.forOffsetMillis(2000);
    boolean boolean0 = dateTimeZone0.isStandardOffset(0L);
    assertTrue(boolean0);
}","/**
 * Checks whether, at a particular instant, the offset is standard or not.
 * <p>
 * This method can be used to determine whether Summer Time (DST) applies.
 * As a general rule, if the offset at the specified instant is standard,
 * then either Winter time applies, or there is no Summer Time. If the
 * instant is not standard, then Summer Time applies.
 * <p>
 * The implementation of the method is simply whether {@link #getOffset(long)}
 * equals {@link #getStandardOffset(long)} at the specified instant.
 *
 * @param instant  milliseconds from 1970-01-01T00:00:00Z to get the offset for
 * @return true if the offset at the given instant is the standard offset
 * @since 1.5
 */"
"//-----------------------------------------------------------------------
/**
 * Gets the milliseconds of the datetime instant from the Java epoch
 * of 1970-01-01T00:00:00Z.
 *
 * @return the number of milliseconds since 1970-01-01T00:00:00Z
 */
public long getMillis() {
    return iMillis;
}","public void test048() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
    DateMidnight dateMidnight0 = DateMidnight.now();
    dateTimeZone0.getOffset((ReadableInstant) dateMidnight0);
    assertEquals(1392364800000L, dateMidnight0.getMillis());
}",""
"public final String getShortName(long instant) {
    return getShortName(instant, null);
}","public void test049() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
    DateMidnight dateMidnight0 = DateMidnight.now();
    dateTimeZone0.getOffset((ReadableInstant) dateMidnight0);
    dateTimeZone0.getNameKey(408L);
    dateTimeZone0.UTC.previousTransition(366L);
    dateTimeZone0.toString();
    dateTimeZone0.getStandardOffset(408L);
    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(0);
    DateTimeZone.getAvailableIDs();
    String string0 = dateTimeZone1.getShortName(0L);
    assertNotNull(string0);
}","/**
 * Gets the short name of this datetime zone suitable for display using
 * the default locale.
 * <p>
 * If the name is not available for the locale, then this method returns a
 * string in the format <code>[+-]hh:mm</code>.
 *
 * @param instant  milliseconds from 1970-01-01T00:00:00Z to get the name for
 * @return the human-readable short name in the default locale
 */"
"public long convertLocalToUTC(long instantLocal, boolean strict) {
    // get the offset at instantLocal (first estimate)
    int offsetLocal = getOffset(instantLocal);
    // adjust instantLocal using the estimate and recalc the offset
    int offset = getOffset(instantLocal - offsetLocal);
    // if the offsets differ, we must be near a DST boundary
    if (offsetLocal != offset) {
        // if strict then always check if in DST gap
        // otherwise only check if zone in Western hemisphere (as the
        // value of offset is already correct for Eastern hemisphere)
        if (strict || offsetLocal < 0) {
            // determine if we are in the DST gap
            long nextLocal = nextTransition(instantLocal - offsetLocal);
            if (nextLocal == (instantLocal - offsetLocal)) {
                nextLocal = Long.MAX_VALUE;
            }
            long nextAdjusted = nextTransition(instantLocal - offset);
            if (nextAdjusted == (instantLocal - offset)) {
                nextAdjusted = Long.MAX_VALUE;
            }
            if (nextLocal != nextAdjusted) {
                // yes we are in the DST gap
                if (strict) {
                    // DST gap is not acceptable
                    throw new IllegalInstantException(instantLocal, getID());
                } else {
                    // DST gap is acceptable, but for the Western hemisphere
                    // the offset is wrong and will result in local times
                    // before the cutover so use the offsetLocal instead
                    offset = offsetLocal;
                }
            }
        }
    }
    // check for overflow
    long instantUTC = instantLocal - offset;
    // If there is a sign change, but the two values have different signs...
    if ((instantLocal ^ instantUTC) < 0 && (instantLocal ^ offset) < 0) {
        throw new ArithmeticException(""Subtracting time zone offset caused overflow"");
    }
    return instantUTC;
}","public void test0613() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    long long0 = 1796L;
    DateTimeUtils.setCurrentMillisFixed(1796L);
    boolean boolean0 = true;
    // Undeclared exception!
    try {
        dateTimeZone0.convertLocalToUTC(9223372036854775807L, true);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // Subtracting time zone offset caused overflow
        //
        verifyException(""org.joda.time.DateTimeZone"", e);
    }
}","/**
 * Converts a local instant to a standard UTC instant with the same
 * local time. This conversion is used after performing a calculation
 * where the calculation was done using a simple local zone.
 *
 * @param instantLocal  the local instant to convert to UTC
 * @param strict  whether the conversion should reject non-existent local times
 * @return the UTC instant with the same local time,
 * @throws ArithmeticException if the result overflows a long
 * @throws IllegalInstantException if the zone has no equivalent local time
 * @since 1.5
 */"
"public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {
    if (hoursOffset == 0 && minutesOffset == 0) {
        return DateTimeZone.UTC;
    }
    if (minutesOffset < 0 || minutesOffset > 59) {
        throw new IllegalArgumentException(""Minutes out of range: "" + minutesOffset);
    }
    int offset = 0;
    try {
        int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);
        if (hoursInMinutes < 0) {
            minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);
        } else {
            minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);
        }
        offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);
    } catch (ArithmeticException ex) {
        throw new IllegalArgumentException(""Offset is too large"");
    }
    return forOffsetMillis(offset);
}","public void test0714() throws Throwable {
    int int0 = 204;
    try {
        DateTimeZone.forOffsetHoursMinutes(0, 204);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Minutes out of range: 204
        //
        verifyException(""org.joda.time.DateTimeZone"", e);
    }
}","/**
 * Gets a time zone instance for the specified offset to UTC in hours and minutes.
 * This method assumes 60 minutes in an hour, and standard length minutes.
 * <p>
 * This factory is a convenient way of constructing zones with a fixed offset.
 * The minutes value is always positive and in the range 0 to 59.
 * If constructed with the values (-2, 30), the resulting zone is '-02:30'.
 *
 * @param hoursOffset  the offset in hours from UTC, from -23 to +23
 * @param minutesOffset  the offset in minutes from UTC, must be between 0 and 59 inclusive
 * @return the DateTimeZone object for the offset
 * @throws IllegalArgumentException if the offset or minute is too large or too small
 */"
"//    //-----------------------------------------------------------------------
//    /**
//     * Checks if the given {@link LocalDateTime} is within an overlap.
//     * <p>
//     * When switching from Daylight Savings Time to standard time there is
//     * typically an overlap where the same clock hour occurs twice. This
//     * method identifies whether the local datetime refers to such an overlap.
//     *
//     * @param localDateTime  the time to check, not null
//     * @return true if the given datetime refers to an overlap
//     */
//    public boolean isLocalDateTimeOverlap(LocalDateTime localDateTime) {
//        if (isFixed()) {
//            return false;
//        }
//        long instantLocal = localDateTime.toDateTime(DateTimeZone.UTC).getMillis();
//        // get the offset at instantLocal (first estimate)
//        int offsetLocal = getOffset(instantLocal);
//        // adjust instantLocal using the estimate and recalc the offset
//        int offset = getOffset(instantLocal - offsetLocal);
//        // if the offsets differ, we must be near a DST boundary
//        if (offsetLocal != offset) {
//            long nextLocal = nextTransition(instantLocal - offsetLocal);
//            long nextAdjusted = nextTransition(instantLocal - offset);
//            if (nextLocal != nextAdjusted) {
//                // in DST gap
//                return false;
//            }
//            long diff = Math.abs(offset - offsetLocal);
//            DateTime dateTime = localDateTime.toDateTime(this);
//            DateTime adjusted = dateTime.plus(diff);
//            if (dateTime.getHourOfDay() == adjusted.getHourOfDay() &&
//                    dateTime.getMinuteOfHour() == adjusted.getMinuteOfHour() &&
//                    dateTime.getSecondOfMinute() == adjusted.getSecondOfMinute()) {
//                return true;
//            }
//            adjusted = dateTime.minus(diff);
//            if (dateTime.getHourOfDay() == adjusted.getHourOfDay() &&
//                    dateTime.getMinuteOfHour() == adjusted.getMinuteOfHour() &&
//                    dateTime.getSecondOfMinute() == adjusted.getSecondOfMinute()) {
//                return true;
//            }
//            return false;
//        }
//        return false;
//    }
//
//
//        DateTime dateTime = null;
//        try {
//            dateTime = localDateTime.toDateTime(this);
//        } catch (IllegalArgumentException ex) {
//            return false;  // it is a gap, not an overlap
//        }
//        long offset1 = Math.abs(getOffset(dateTime.getMillis() + 1) - getStandardOffset(dateTime.getMillis() + 1));
//        long offset2 = Math.abs(getOffset(dateTime.getMillis() - 1) - getStandardOffset(dateTime.getMillis() - 1));
//        long offset = Math.max(offset1, offset2);
//        if (offset == 0) {
//            return false;
//        }
//        DateTime adjusted = dateTime.plus(offset);
//        if (dateTime.getHourOfDay() == adjusted.getHourOfDay() &&
//                dateTime.getMinuteOfHour() == adjusted.getMinuteOfHour() &&
//                dateTime.getSecondOfMinute() == adjusted.getSecondOfMinute()) {
//            return true;
//        }
//        adjusted = dateTime.minus(offset);
//        if (dateTime.getHourOfDay() == adjusted.getHourOfDay() &&
//                dateTime.getMinuteOfHour() == adjusted.getMinuteOfHour() &&
//                dateTime.getSecondOfMinute() == adjusted.getSecondOfMinute()) {
//            return true;
//        }
//        return false;
//        long millis = dateTime.getMillis();
//        long nextTransition = nextTransition(millis);
//        long previousTransition = previousTransition(millis);
//        long deltaToPreviousTransition = millis - previousTransition;
//        long deltaToNextTransition = nextTransition - millis;
//        if (deltaToNextTransition < deltaToPreviousTransition) {
//            int offset = getOffset(nextTransition);
//            int standardOffset = getStandardOffset(nextTransition);
//            if (Math.abs(offset - standardOffset) >= deltaToNextTransition) {
//                return true;
//            }
//        } else  {
//            int offset = getOffset(previousTransition);
//            int standardOffset = getStandardOffset(previousTransition);
//            if (Math.abs(offset - standardOffset) >= deltaToPreviousTransition) {
//                return true;
//            }
//        }
//        return false;
//    }
/**
 * Checks if the given {@link LocalDateTime} is within a gap.
 * <p>
 * When switching from standard time to Daylight Savings Time there is
 * typically a gap where a clock hour is missing. This method identifies
 * whether the local datetime refers to such a gap.
 *
 * @param localDateTime  the time to check, not null
 * @return true if the given datetime refers to a gap
 * @since 1.6
 */
public boolean isLocalDateTimeGap(LocalDateTime localDateTime) {
    if (isFixed()) {
        return false;
    }
    try {
        localDateTime.toDateTime(this);
        return false;
    } catch (IllegalInstantException ex) {
        return true;
    }
}","public void test0815() throws Throwable {
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetHours((-462));
    dateTimeZone0.isStandardOffset(1);
    LocalDateTime localDateTime0 = new LocalDateTime((long) 1, dateTimeZone1);
    localDateTime0.minusDays((-462));
    LocalDateTime localDateTime1 = localDateTime0.minusSeconds(58);
    boolean boolean0 = dateTimeZone0.isLocalDateTimeGap(localDateTime1);
    assertFalse(boolean0);
}",""
"public String getShortName(long instant, Locale locale) {
    if (locale == null) {
        locale = Locale.getDefault();
    }
    String nameKey = getNameKey(instant);
    if (nameKey == null) {
        return iID;
    }
    String name = cNameProvider.getShortName(locale, iID, nameKey);
    if (name != null) {
        return name;
    }
    return printOffset(getOffset(instant));
}","public void test0816() throws Throwable {
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetHours((-462));
    dateTimeZone0.isStandardOffset(1);
    LocalDateTime localDateTime0 = new LocalDateTime((long) 1, dateTimeZone1);
    localDateTime0.minusDays((-462));
    LocalDateTime localDateTime1 = localDateTime0.minusSeconds(58);
    boolean boolean0 = dateTimeZone0.isLocalDateTimeGap(localDateTime1);
    dateTimeZone1.getID();
    dateTimeZone0.previousTransition(1);
    dateTimeZone0.isFixed();
    Locale locale0 = Locale.ROOT;
    String string0 = dateTimeZone1.getShortName(15L, locale0);
    assertEquals(""-462:00"", string0);
}","/**
 * Gets the short name of this datetime zone suitable for display using
 * the specified locale.
 * <p>
 * If the name is not available for the locale, then this method returns a
 * string in the format <code>[+-]hh:mm</code>.
 *
 * @param instant  milliseconds from 1970-01-01T00:00:00Z to get the name for
 * @param locale  the locale to get the name for
 * @return the human-readable short name in the specified locale
 */"
"public int getOffsetFromLocal(long instantLocal) {
    // get the offset at instantLocal (first estimate)
    final int offsetLocal = getOffset(instantLocal);
    // adjust instantLocal using the estimate and recalc the offset
    final long instantAdjusted = instantLocal - offsetLocal;
    final int offsetAdjusted = getOffset(instantAdjusted);
    // if the offsets differ, we must be near a DST boundary
    if (offsetLocal != offsetAdjusted) {
        // we need to ensure that time is always after the DST gap
        // this happens naturally for positive offsets, but not for negative
        if ((offsetLocal - offsetAdjusted) < 0) {
            // if we just return offsetAdjusted then the time is pushed
            // back before the transition, whereas it should be
            // on or after the transition
            long nextLocal = nextTransition(instantAdjusted);
            long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);
            if (nextLocal != nextAdjusted) {
                return offsetLocal;
            }
        }
    } else if (offsetLocal >= 0) {
        long prev = previousTransition(instantAdjusted);
        if (prev < instantAdjusted) {
            int offsetPrev = getOffset(prev);
            int diff = offsetPrev - offsetLocal;
            if (instantAdjusted - prev <= diff) {
                return offsetPrev;
            }
        }
    }
    return offsetAdjusted;
}","public void test0817() throws Throwable {
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetHours((-462));
    dateTimeZone0.isStandardOffset(1);
    LocalDateTime localDateTime0 = new LocalDateTime((long) 1, dateTimeZone1);
    localDateTime0.minusDays((-462));
    LocalDateTime localDateTime1 = localDateTime0.minusSeconds(58);
    boolean boolean0 = dateTimeZone0.isLocalDateTimeGap(localDateTime1);
    dateTimeZone1.getID();
    dateTimeZone0.previousTransition(1);
    dateTimeZone0.isFixed();
    Locale locale0 = Locale.ROOT;
    String string0 = dateTimeZone1.getShortName(15L, locale0);
    int int0 = dateTimeZone1.getOffsetFromLocal((-1L));
    assertEquals((-1663200000), int0);
}","/**
 * Gets the millisecond offset to subtract from local time to get UTC time.
 * This offset can be used to undo adding the offset obtained by getOffset.
 *
 * <pre>
 * millisLocal == millisUTC   + getOffset(millisUTC)
 * millisUTC   == millisLocal - getOffsetFromLocal(millisLocal)
 * </pre>
 *
 * NOTE: After calculating millisLocal, some error may be introduced. At
 * offset transitions (due to DST or other historical changes), ranges of
 * local times may map to different UTC times.
 * <p>
 * This method will return an offset suitable for calculating an instant
 * after any DST gap. For example, consider a zone with a cutover
 * from 01:00 to 01:59:<br />
 * Input: 00:00  Output: 00:00<br />
 * Input: 00:30  Output: 00:30<br />
 * Input: 01:00  Output: 02:00<br />
 * Input: 01:30  Output: 02:30<br />
 * Input: 02:00  Output: 02:00<br />
 * Input: 02:30  Output: 02:30<br />
 * <p>
 * During a DST overlap (where the local time is ambiguous) this method will return
 * the earlier instant. The combination of these two rules is to always favour
 * daylight (summer) time over standard (winter) time.
 * <p>
 * NOTE: Prior to v2.0, the DST overlap behaviour was not defined and varied by hemisphere.
 * Prior to v1.5, the DST gap behaviour was also not defined.
 *
 * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for
 * @return the millisecond offset to subtract from local time to get UTC time
 */"
"public String getShortName(long instant, Locale locale) {
    if (locale == null) {
        locale = Locale.getDefault();
    }
    String nameKey = getNameKey(instant);
    if (nameKey == null) {
        return iID;
    }
    String name = cNameProvider.getShortName(locale, iID, nameKey);
    if (name != null) {
        return name;
    }
    return printOffset(getOffset(instant));
}","public void test0918() throws Throwable {
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    fixedDateTimeZone0.UTC.convertLocalToUTC((-1066L), true);
    TimeZone timeZone0 = fixedDateTimeZone0.toTimeZone();
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
    DateTimeUtils.setCurrentMillisFixed((-1066L));
    dateTimeZone0.UTC.getName(2451L);
    dateTimeZone0.hashCode();
    fixedDateTimeZone0.previousTransition((-1066L));
    DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
    Locale locale0 = Locale.FRENCH;
    String string0 = dateTimeZone1.UTC.getShortName(2451L, locale0);
    assertEquals(""+00:00"", string0);
}","/**
 * Gets the short name of this datetime zone suitable for display using
 * the specified locale.
 * <p>
 * If the name is not available for the locale, then this method returns a
 * string in the format <code>[+-]hh:mm</code>.
 *
 * @param instant  milliseconds from 1970-01-01T00:00:00Z to get the name for
 * @param locale  the locale to get the name for
 * @return the human-readable short name in the specified locale
 */"
"public long convertLocalToUTC(long instantLocal, boolean strict) {
    // get the offset at instantLocal (first estimate)
    int offsetLocal = getOffset(instantLocal);
    // adjust instantLocal using the estimate and recalc the offset
    int offset = getOffset(instantLocal - offsetLocal);
    // if the offsets differ, we must be near a DST boundary
    if (offsetLocal != offset) {
        // if strict then always check if in DST gap
        // otherwise only check if zone in Western hemisphere (as the
        // value of offset is already correct for Eastern hemisphere)
        if (strict || offsetLocal < 0) {
            // determine if we are in the DST gap
            long nextLocal = nextTransition(instantLocal - offsetLocal);
            if (nextLocal == (instantLocal - offsetLocal)) {
                nextLocal = Long.MAX_VALUE;
            }
            long nextAdjusted = nextTransition(instantLocal - offset);
            if (nextAdjusted == (instantLocal - offset)) {
                nextAdjusted = Long.MAX_VALUE;
            }
            if (nextLocal != nextAdjusted) {
                // yes we are in the DST gap
                if (strict) {
                    // DST gap is not acceptable
                    throw new IllegalInstantException(instantLocal, getID());
                } else {
                    // DST gap is acceptable, but for the Western hemisphere
                    // the offset is wrong and will result in local times
                    // before the cutover so use the offsetLocal instead
                    offset = offsetLocal;
                }
            }
        }
    }
    // check for overflow
    long instantUTC = instantLocal - offset;
    // If there is a sign change, but the two values have different signs...
    if ((instantLocal ^ instantUTC) < 0 && (instantLocal ^ offset) < 0) {
        throw new ArithmeticException(""Subtracting time zone offset caused overflow"");
    }
    return instantUTC;
}","public void test0919() throws Throwable {
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    fixedDateTimeZone0.UTC.convertLocalToUTC((-1066L), true);
    TimeZone timeZone0 = fixedDateTimeZone0.toTimeZone();
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
    DateTimeUtils.setCurrentMillisFixed((-1066L));
    dateTimeZone0.UTC.getName(2451L);
    dateTimeZone0.hashCode();
    fixedDateTimeZone0.previousTransition((-1066L));
    DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
    Locale locale0 = Locale.FRENCH;
    String string0 = dateTimeZone1.UTC.getShortName(2451L, locale0);
    dateTimeZone1.UTC.getStandardOffset((-1L));
    DateTimeZone.getDefault();
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
    LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
    List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList1, (Collection<Locale>) linkedList2);
    List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList1, (Collection<Locale>) list0);
    Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
    Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list1, locale_FilteringMode0);
    dateTimeZone0.getOffsetFromLocal((-1066L));
    long long0 = dateTimeZone0.convertLocalToUTC((-354L), true);
    assertEquals((-354L), long0);
}","/**
 * Converts a local instant to a standard UTC instant with the same
 * local time. This conversion is used after performing a calculation
 * where the calculation was done using a simple local zone.
 *
 * @param instantLocal  the local instant to convert to UTC
 * @param strict  whether the conversion should reject non-existent local times
 * @return the UTC instant with the same local time,
 * @throws ArithmeticException if the result overflows a long
 * @throws IllegalInstantException if the zone has no equivalent local time
 * @since 1.5
 */"
"public String getName(long instant, Locale locale) {
    if (locale == null) {
        locale = Locale.getDefault();
    }
    String nameKey = getNameKey(instant);
    if (nameKey == null) {
        return iID;
    }
    String name = cNameProvider.getName(locale, iID, nameKey);
    if (name != null) {
        return name;
    }
    return printOffset(getOffset(instant));
}","public void test0920() throws Throwable {
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    fixedDateTimeZone0.UTC.convertLocalToUTC((-1066L), true);
    TimeZone timeZone0 = fixedDateTimeZone0.toTimeZone();
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
    DateTimeUtils.setCurrentMillisFixed((-1066L));
    dateTimeZone0.UTC.getName(2451L);
    dateTimeZone0.hashCode();
    fixedDateTimeZone0.previousTransition((-1066L));
    DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
    Locale locale0 = Locale.FRENCH;
    String string0 = dateTimeZone1.UTC.getShortName(2451L, locale0);
    dateTimeZone1.UTC.getStandardOffset((-1L));
    DateTimeZone.getDefault();
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
    LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
    List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList1, (Collection<Locale>) linkedList2);
    List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList1, (Collection<Locale>) list0);
    Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
    Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list1, locale_FilteringMode0);
    dateTimeZone0.getOffsetFromLocal((-1066L));
    long long0 = dateTimeZone0.convertLocalToUTC((-354L), true);
    String string1 = dateTimeZone0.getName((long) 0, locale0);
    assertNotNull(string1);
}","/**
 * Gets the long name of this datetime zone suitable for display using
 * the specified locale.
 * <p>
 * If the name is not available for the locale, then this method returns a
 * string in the format <code>[+-]hh:mm</code>.
 *
 * @param instant  milliseconds from 1970-01-01T00:00:00Z to get the name for
 * @param locale  the locale to get the name for
 * @return the human-readable long name in the specified locale
 */"
"public ZoneInfoProvider(String resourcePath, ClassLoader loader) throws IOException {
    this(resourcePath, loader, true);
}","public void test1022() throws Throwable {
    int int0 = 59;
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(59, 59);
    dateTimeZone0.UTC.convertUTCToLocal(59);
    DateTimeUtils.setCurrentMillisSystem();
    dateTimeZone0.getOffsetFromLocal(59);
    DateTimeUtils.setCurrentMillisSystem();
    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(59);
    dateTimeZone0.UTC.getNameKey(59L);
    dateTimeZone1.UTC.isStandardOffset(0L);
    dateTimeZone1.UTC.isFixed();
    dateTimeZone1.UTC.getNameKey(59L);
    long long0 = 338L;
    ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
    ClassLoader classLoader1 = classLoader0.getParent();
    ZoneInfoProvider zoneInfoProvider0 = null;
    try {
        zoneInfoProvider0 = new ZoneInfoProvider(""UTC"", classLoader1);
        fail(""Expecting exception: IOException"");
    } catch (Throwable e) {
        //
        // Resource not found: \""UTC/ZoneInfoMap\"" ClassLoader: sun.misc.Launcher$ExtClassLoader@0000000005
        //
        verifyException(""org.joda.time.tz.ZoneInfoProvider"", e);
    }
}","/**
 * ZoneInfoProvider searches the given ClassLoader resource path for
 * compiled data files.
 *
 * @param loader ClassLoader to load compiled data files from. If null,
 * use system ClassLoader.
 * @throws IOException if directory or map file cannot be read
 */"
"public String toString() {
    return getID();
}","public void test1123() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    DateTimeUtils.setCurrentMillisFixed((-845L));
    dateTimeZone0.UTC.getStandardOffset(0L);
    dateTimeZone0.UTC.previousTransition(0L);
    JapaneseDate japaneseDate0 = MockJapaneseDate.now();
    dateTimeZone0.getShortName((-845L));
    dateTimeZone0.equals(japaneseDate0);
    dateTimeZone0.UTC.previousTransition((-845L));
    DateTimeZone.getDefault();
    DateTimeUtils.setCurrentMillisFixed((-2720L));
    dateTimeZone0.getNameKey((-128L));
    dateTimeZone0.getOffsetFromLocal(1687L);
    dateTimeZone0.convertLocalToUTC((long) (-28800000), false);
    dateTimeZone0.convertUTCToLocal((-28800000));
    Locale locale0 = Locale.UK;
    dateTimeZone0.getName((-2720L), locale0);
    DateTimeZone.setDefault(dateTimeZone0);
    assertEquals(""America/Los_Angeles"", dateTimeZone0.toString());
}","/**
 * Gets the datetime zone as a string, which is simply its ID.
 * @return the id of the zone
 */"
"public static DateTimeZone forOffsetHours(int hoursOffset) throws IllegalArgumentException {
    return forOffsetHoursMinutes(hoursOffset, 0);
}","public void test1224() throws Throwable {
    NameProvider nameProvider0 = null;
    DateTimeZone.setNameProvider((NameProvider) null);
    int int0 = 1139;
    try {
        DateTimeZone.forOffsetHours(1139);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Offset is too large
        //
        verifyException(""org.joda.time.DateTimeZone"", e);
    }
}","/**
 * Gets a time zone instance for the specified offset to UTC in hours.
 * This method assumes standard length hours.
 * <p>
 * This factory is a convenient way of constructing zones with a fixed offset.
 *
 * @param hoursOffset  the offset in hours from UTC, from -23 to +23
 * @return the DateTimeZone object for the offset
 * @throws IllegalArgumentException if the offset is too large or too small
 */"
"//    //-----------------------------------------------------------------------
//    /**
//     * Checks if the given {@link LocalDateTime} is within an overlap.
//     * <p>
//     * When switching from Daylight Savings Time to standard time there is
//     * typically an overlap where the same clock hour occurs twice. This
//     * method identifies whether the local datetime refers to such an overlap.
//     *
//     * @param localDateTime  the time to check, not null
//     * @return true if the given datetime refers to an overlap
//     */
//    public boolean isLocalDateTimeOverlap(LocalDateTime localDateTime) {
//        if (isFixed()) {
//            return false;
//        }
//        long instantLocal = localDateTime.toDateTime(DateTimeZone.UTC).getMillis();
//        // get the offset at instantLocal (first estimate)
//        int offsetLocal = getOffset(instantLocal);
//        // adjust instantLocal using the estimate and recalc the offset
//        int offset = getOffset(instantLocal - offsetLocal);
//        // if the offsets differ, we must be near a DST boundary
//        if (offsetLocal != offset) {
//            long nextLocal = nextTransition(instantLocal - offsetLocal);
//            long nextAdjusted = nextTransition(instantLocal - offset);
//            if (nextLocal != nextAdjusted) {
//                // in DST gap
//                return false;
//            }
//            long diff = Math.abs(offset - offsetLocal);
//            DateTime dateTime = localDateTime.toDateTime(this);
//            DateTime adjusted = dateTime.plus(diff);
//            if (dateTime.getHourOfDay() == adjusted.getHourOfDay() &&
//                    dateTime.getMinuteOfHour() == adjusted.getMinuteOfHour() &&
//                    dateTime.getSecondOfMinute() == adjusted.getSecondOfMinute()) {
//                return true;
//            }
//            adjusted = dateTime.minus(diff);
//            if (dateTime.getHourOfDay() == adjusted.getHourOfDay() &&
//                    dateTime.getMinuteOfHour() == adjusted.getMinuteOfHour() &&
//                    dateTime.getSecondOfMinute() == adjusted.getSecondOfMinute()) {
//                return true;
//            }
//            return false;
//        }
//        return false;
//    }
//
//
//        DateTime dateTime = null;
//        try {
//            dateTime = localDateTime.toDateTime(this);
//        } catch (IllegalArgumentException ex) {
//            return false;  // it is a gap, not an overlap
//        }
//        long offset1 = Math.abs(getOffset(dateTime.getMillis() + 1) - getStandardOffset(dateTime.getMillis() + 1));
//        long offset2 = Math.abs(getOffset(dateTime.getMillis() - 1) - getStandardOffset(dateTime.getMillis() - 1));
//        long offset = Math.max(offset1, offset2);
//        if (offset == 0) {
//            return false;
//        }
//        DateTime adjusted = dateTime.plus(offset);
//        if (dateTime.getHourOfDay() == adjusted.getHourOfDay() &&
//                dateTime.getMinuteOfHour() == adjusted.getMinuteOfHour() &&
//                dateTime.getSecondOfMinute() == adjusted.getSecondOfMinute()) {
//            return true;
//        }
//        adjusted = dateTime.minus(offset);
//        if (dateTime.getHourOfDay() == adjusted.getHourOfDay() &&
//                dateTime.getMinuteOfHour() == adjusted.getMinuteOfHour() &&
//                dateTime.getSecondOfMinute() == adjusted.getSecondOfMinute()) {
//            return true;
//        }
//        return false;
//        long millis = dateTime.getMillis();
//        long nextTransition = nextTransition(millis);
//        long previousTransition = previousTransition(millis);
//        long deltaToPreviousTransition = millis - previousTransition;
//        long deltaToNextTransition = nextTransition - millis;
//        if (deltaToNextTransition < deltaToPreviousTransition) {
//            int offset = getOffset(nextTransition);
//            int standardOffset = getStandardOffset(nextTransition);
//            if (Math.abs(offset - standardOffset) >= deltaToNextTransition) {
//                return true;
//            }
//        } else  {
//            int offset = getOffset(previousTransition);
//            int standardOffset = getStandardOffset(previousTransition);
//            if (Math.abs(offset - standardOffset) >= deltaToPreviousTransition) {
//                return true;
//            }
//        }
//        return false;
//    }
/**
 * Checks if the given {@link LocalDateTime} is within a gap.
 * <p>
 * When switching from standard time to Daylight Savings Time there is
 * typically a gap where a clock hour is missing. This method identifies
 * whether the local datetime refers to such a gap.
 *
 * @param localDateTime  the time to check, not null
 * @return true if the given datetime refers to a gap
 * @since 1.6
 */
public boolean isLocalDateTimeGap(LocalDateTime localDateTime) {
    if (isFixed()) {
        return false;
    }
    try {
        localDateTime.toDateTime(this);
        return false;
    } catch (IllegalInstantException ex) {
        return true;
    }
}","public void test1325() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
    DateTimeZone.getDefault();
    dateTimeZone0.nextTransition(31557600000L);
    dateTimeZone0.hashCode();
    DateTimeZone dateTimeZone1 = DateTimeZone.getDefault();
    DateTimeZone dateTimeZone2 = DateTimeZone.forTimeZone((TimeZone) null);
    GJChronology gJChronology0 = GJChronology.getInstance();
    DateMidnight dateMidnight0 = new DateMidnight(0L, (Chronology) gJChronology0);
    DateMidnight dateMidnight1 = dateMidnight0.withZoneRetainFields(dateTimeZone2);
    dateTimeZone1.getOffset((ReadableInstant) dateMidnight1);
    // Undeclared exception!
    try {
        dateTimeZone2.isLocalDateTimeGap((LocalDateTime) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.DateTimeZone"", e);
    }
}",""
"public long nextTransition(long instant) {
    return instant;
}","public void test1426() throws Throwable {
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    fixedDateTimeZone0.UTC.getOffsetFromLocal(9223372036854775807L);
    fixedDateTimeZone0.UTC.getShortName(9223372036854775807L, (Locale) null);
    fixedDateTimeZone0.isStandardOffset(31083663600000L);
    fixedDateTimeZone0.getOffset(10000000000000L);
    fixedDateTimeZone0.getID();
    long long0 = fixedDateTimeZone0.nextTransition(245L);
    assertEquals(245L, long0);
}",""
"public abstract int getOffset(long instant);","public void test1527() throws Throwable {
    DateTimeZone.setProvider((Provider) null);
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    int int0 = dateTimeZone0.getOffset((-351L));
    assertEquals((-28800000), int0);
}","/**
 * Gets the millisecond offset to add to UTC to get local time.
 *
 * @param instant  milliseconds from 1970-01-01T00:00:00Z to get the offset for
 * @return the millisecond offset to add to UTC to get local time
 */"
"public long adjustOffset(long instant, boolean earlierOrLater) {
    // a bit messy, but will work in all non-pathological cases
    // evaluate 3 hours before and after to work out if anything is happening
    long instantBefore = instant - 3 * DateTimeConstants.MILLIS_PER_HOUR;
    long instantAfter = instant + 3 * DateTimeConstants.MILLIS_PER_HOUR;
    long offsetBefore = getOffset(instantBefore);
    long offsetAfter = getOffset(instantAfter);
    if (offsetBefore <= offsetAfter) {
        // not an overlap (less than is a gap, equal is normal case)
        return instant;
    }
    // work out range of instants that have duplicate local times
    long diff = offsetBefore - offsetAfter;
    long transition = nextTransition(instantBefore);
    long overlapStart = transition - diff;
    long overlapEnd = transition + diff;
    if (instant < overlapStart || instant >= overlapEnd) {
        // not an overlap
        return instant;
    }
    // calculate result
    long afterStart = instant - overlapStart;
    if (afterStart >= diff) {
        // currently in later offset
        return earlierOrLater ? instant : instant - diff;
    } else {
        // currently in earlier offset
        return earlierOrLater ? instant + diff : instant;
    }
}","public void test1628() throws Throwable {
    UTCProvider uTCProvider0 = new UTCProvider();
    DateTimeZone dateTimeZone0 = uTCProvider0.getZone(""UTC"");
    dateTimeZone0.nextTransition((-175L));
    long long0 = dateTimeZone0.adjustOffset(3386L, true);
    assertEquals(3386L, long0);
}","/**
 * Adjusts the offset to be the earlier or later one during an overlap.
 *
 * @param instant  the instant to adjust
 * @param earlierOrLater  false for earlier, true for later
 * @return the adjusted instant millis
 */"
"public long getMillisKeepLocal(DateTimeZone newZone, long oldInstant) {
    if (newZone == null) {
        newZone = DateTimeZone.getDefault();
    }
    if (newZone == this) {
        return oldInstant;
    }
    long instantLocal = convertUTCToLocal(oldInstant);
    return newZone.convertLocalToUTC(instantLocal, false, oldInstant);
}","public void test1729() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    UTCProvider uTCProvider0 = new UTCProvider();
    uTCProvider0.getZone(""(r"");
    long long0 = dateTimeZone0.getMillisKeepLocal((DateTimeZone) null, (-657L));
    assertEquals((-657L), long0);
}","/**
 * Gets the millisecond instant in another zone keeping the same local time.
 * <p>
 * The conversion is performed by converting the specified UTC millis to local
 * millis in this zone, then converting back to UTC millis in the new zone.
 *
 * @param newZone  the new zone, null means default
 * @param oldInstant  the UTC millisecond instant to convert
 * @return the UTC millisecond instant with the same local time in the new zone
 */"
"public final String getName(long instant) {
    return getName(instant, null);
}","public void test1730() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    UTCProvider uTCProvider0 = new UTCProvider();
    uTCProvider0.getZone(""(r"");
    long long0 = dateTimeZone0.getMillisKeepLocal((DateTimeZone) null, (-657L));
    dateTimeZone0.getOffset((-427L));
    dateTimeZone0.getNameKey((-427L));
    dateTimeZone0.getOffsetFromLocal((-28800000));
    dateTimeZone0.UTC.getStandardOffset(100000000000000000L);
    dateTimeZone0.getName((-3192L));
    FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""+Y"");
    dateTimeZone0.getOffsetFromLocal((-3192L));
    String string0 = dateTimeZone0.getName(45155216L);
    assertEquals(""-08:00"", string0);
}","/**
 * Gets the long name of this datetime zone suitable for display using
 * the default locale.
 * <p>
 * If the name is not available for the locale, then this method returns a
 * string in the format <code>[+-]hh:mm</code>.
 *
 * @param instant  milliseconds from 1970-01-01T00:00:00Z to get the name for
 * @return the human-readable long name in the default locale
 */"
"public long adjustOffset(long instant, boolean earlierOrLater) {
    // a bit messy, but will work in all non-pathological cases
    // evaluate 3 hours before and after to work out if anything is happening
    long instantBefore = instant - 3 * DateTimeConstants.MILLIS_PER_HOUR;
    long instantAfter = instant + 3 * DateTimeConstants.MILLIS_PER_HOUR;
    long offsetBefore = getOffset(instantBefore);
    long offsetAfter = getOffset(instantAfter);
    if (offsetBefore <= offsetAfter) {
        // not an overlap (less than is a gap, equal is normal case)
        return instant;
    }
    // work out range of instants that have duplicate local times
    long diff = offsetBefore - offsetAfter;
    long transition = nextTransition(instantBefore);
    long overlapStart = transition - diff;
    long overlapEnd = transition + diff;
    if (instant < overlapStart || instant >= overlapEnd) {
        // not an overlap
        return instant;
    }
    // calculate result
    long afterStart = instant - overlapStart;
    if (afterStart >= diff) {
        // currently in later offset
        return earlierOrLater ? instant : instant - diff;
    } else {
        // currently in earlier offset
        return earlierOrLater ? instant + diff : instant;
    }
}","public void test1831() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(3);
    long long0 = dateTimeZone0.adjustOffset((-1268L), true);
    assertEquals((-1268L), long0);
}","/**
 * Adjusts the offset to be the earlier or later one during an overlap.
 *
 * @param instant  the instant to adjust
 * @param earlierOrLater  false for earlier, true for later
 * @return the adjusted instant millis
 */"
"public String getName(long instant, Locale locale) {
    if (locale == null) {
        locale = Locale.getDefault();
    }
    String nameKey = getNameKey(instant);
    if (nameKey == null) {
        return iID;
    }
    String name = cNameProvider.getName(locale, iID, nameKey);
    if (name != null) {
        return name;
    }
    return printOffset(getOffset(instant));
}","public void test1832() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(3);
    long long0 = dateTimeZone0.adjustOffset((-1268L), true);
    dateTimeZone0.getName((long) 3);
    dateTimeZone0.UTC.getOffset(1157L);
    DateTimeZone dateTimeZone1 = DateTimeZone.forID(""+03:00"");
    dateTimeZone0.convertUTCToLocal(0L);
    dateTimeZone0.convertUTCToLocal(3);
    Locale locale0 = Locale.CHINA;
    String string0 = dateTimeZone0.getName(0L, locale0);
    assertEquals(""+03:00"", string0);
}","/**
 * Gets the long name of this datetime zone suitable for display using
 * the specified locale.
 * <p>
 * If the name is not available for the locale, then this method returns a
 * string in the format <code>[+-]hh:mm</code>.
 *
 * @param instant  milliseconds from 1970-01-01T00:00:00Z to get the name for
 * @param locale  the locale to get the name for
 * @return the human-readable long name in the specified locale
 */"
"public long getMillisKeepLocal(DateTimeZone newZone, long oldInstant) {
    if (newZone == null) {
        newZone = DateTimeZone.getDefault();
    }
    if (newZone == this) {
        return oldInstant;
    }
    long instantLocal = convertUTCToLocal(oldInstant);
    return newZone.convertLocalToUTC(instantLocal, false, oldInstant);
}","public void test1833() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(3);
    long long0 = dateTimeZone0.adjustOffset((-1268L), true);
    dateTimeZone0.getName((long) 3);
    dateTimeZone0.UTC.getOffset(1157L);
    DateTimeZone dateTimeZone1 = DateTimeZone.forID(""+03:00"");
    dateTimeZone0.convertUTCToLocal(0L);
    dateTimeZone0.convertUTCToLocal(3);
    Locale locale0 = Locale.CHINA;
    String string0 = dateTimeZone0.getName(0L, locale0);
    long long1 = dateTimeZone1.getMillisKeepLocal(dateTimeZone0, 1722L);
    assertEquals(1722L, long1);
}","/**
 * Gets the millisecond instant in another zone keeping the same local time.
 * <p>
 * The conversion is performed by converting the specified UTC millis to local
 * millis in this zone, then converting back to UTC millis in the new zone.
 *
 * @param newZone  the new zone, null means default
 * @param oldInstant  the UTC millisecond instant to convert
 * @return the UTC millisecond instant with the same local time in the new zone
 */"
"public abstract int getOffset(long instant);","public void test1834() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(3);
    long long0 = dateTimeZone0.adjustOffset((-1268L), true);
    dateTimeZone0.getName((long) 3);
    dateTimeZone0.UTC.getOffset(1157L);
    DateTimeZone dateTimeZone1 = DateTimeZone.forID(""+03:00"");
    dateTimeZone0.convertUTCToLocal(0L);
    dateTimeZone0.convertUTCToLocal(3);
    Locale locale0 = Locale.CHINA;
    String string0 = dateTimeZone0.getName(0L, locale0);
    long long1 = dateTimeZone1.getMillisKeepLocal(dateTimeZone0, 1722L);
    int int0 = dateTimeZone1.getOffset(0L);
    assertEquals(10800000, int0);
}","/**
 * Gets the millisecond offset to add to UTC to get local time.
 *
 * @param instant  milliseconds from 1970-01-01T00:00:00Z to get the offset for
 * @return the millisecond offset to add to UTC to get local time
 */"
"public long convertLocalToUTC(long instantLocal, boolean strict) {
    // get the offset at instantLocal (first estimate)
    int offsetLocal = getOffset(instantLocal);
    // adjust instantLocal using the estimate and recalc the offset
    int offset = getOffset(instantLocal - offsetLocal);
    // if the offsets differ, we must be near a DST boundary
    if (offsetLocal != offset) {
        // if strict then always check if in DST gap
        // otherwise only check if zone in Western hemisphere (as the
        // value of offset is already correct for Eastern hemisphere)
        if (strict || offsetLocal < 0) {
            // determine if we are in the DST gap
            long nextLocal = nextTransition(instantLocal - offsetLocal);
            if (nextLocal == (instantLocal - offsetLocal)) {
                nextLocal = Long.MAX_VALUE;
            }
            long nextAdjusted = nextTransition(instantLocal - offset);
            if (nextAdjusted == (instantLocal - offset)) {
                nextAdjusted = Long.MAX_VALUE;
            }
            if (nextLocal != nextAdjusted) {
                // yes we are in the DST gap
                if (strict) {
                    // DST gap is not acceptable
                    throw new IllegalInstantException(instantLocal, getID());
                } else {
                    // DST gap is acceptable, but for the Western hemisphere
                    // the offset is wrong and will result in local times
                    // before the cutover so use the offsetLocal instead
                    offset = offsetLocal;
                }
            }
        }
    }
    // check for overflow
    long instantUTC = instantLocal - offset;
    // If there is a sign change, but the two values have different signs...
    if ((instantLocal ^ instantUTC) < 0 && (instantLocal ^ offset) < 0) {
        throw new ArithmeticException(""Subtracting time zone offset caused overflow"");
    }
    return instantUTC;
}","public void test1935() throws Throwable {
    DateTimeZone.getProvider();
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(ethiopicChronology0, dateTimeZone0);
    zonedChronology0.getDateTimeMillis(1, 1, 1, 1);
    DateTimeZone dateTimeZone1 = zonedChronology0.getZone();
    long long0 = dateTimeZone1.convertLocalToUTC((long) 1, true);
    assertEquals(28800001L, long0);
}","/**
 * Converts a local instant to a standard UTC instant with the same
 * local time. This conversion is used after performing a calculation
 * where the calculation was done using a simple local zone.
 *
 * @param instantLocal  the local instant to convert to UTC
 * @param strict  whether the conversion should reject non-existent local times
 * @return the UTC instant with the same local time,
 * @throws ArithmeticException if the result overflows a long
 * @throws IllegalInstantException if the zone has no equivalent local time
 * @since 1.5
 */"
"public abstract long previousTransition(long instant);","public void test1936() throws Throwable {
    DateTimeZone.getProvider();
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(ethiopicChronology0, dateTimeZone0);
    zonedChronology0.getDateTimeMillis(1, 1, 1, 1);
    DateTimeZone dateTimeZone1 = zonedChronology0.getZone();
    long long0 = dateTimeZone1.convertLocalToUTC((long) 1, true);
    long long1 = dateTimeZone1.previousTransition(934L);
    assertEquals((-5756400001L), long1);
}","/**
 * Retreats the given instant to where the time zone offset or name changes.
 * If the instant returned is exactly the same as passed in, then
 * no changes occur before the given instant.
 *
 * @param instant  milliseconds from 1970-01-01T00:00:00Z
 * @return milliseconds from 1970-01-01T00:00:00Z
 */"
"public LocalDateTime(Object instant, DateTimeZone zone) {
    PartialConverter converter = ConverterManager.getInstance().getPartialConverter(instant);
    Chronology chronology = converter.getChronology(instant, zone);
    chronology = DateTimeUtils.getChronology(chronology);
    iChronology = chronology.withUTC();
    int[] values = converter.getPartialValues(this, instant, chronology, ISODateTimeFormat.localDateOptionalTimeParser());
    iLocalMillis = iChronology.getDateTimeMillis(values[0], values[1], values[2], values[3]);
}","public void test2037() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forID(""UTC"");
    long long0 = 0L;
    Object object0 = new Object();
    dateTimeZone0.UTC.toTimeZone();
    LocalDateTime localDateTime0 = null;
    try {
        localDateTime0 = new LocalDateTime(object0, dateTimeZone0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // No partial converter found for type: java.lang.Object
        //
        verifyException(""org.joda.time.convert.ConverterManager"", e);
    }
}","/**
 * Constructs an instance from an Object that represents a datetime,
 * forcing the time zone to that specified.
 * <p>
 * If the object contains no chronology, <code>ISOChronology</code> is used.
 * If the specified time zone is null, the default zone is used.
 * Once the constructor is completed, the zone is no longer used.
 * <p>
 * The recognised object types are defined in
 * {@link org.joda.time.convert.ConverterManager ConverterManager} and
 * include ReadablePartial, ReadableInstant, String, Calendar and Date.
 * The String formats are described by {@link ISODateTimeFormat#localDateOptionalTimeParser()}.
 * The default String converter ignores the zone and only parses the field values.
 *
 * @param instant  the datetime object
 * @param zone  the time zone
 * @throws IllegalArgumentException if the instant is invalid
 */"
"public boolean isStandardOffset(long instant) {
    return getOffset(instant) == getStandardOffset(instant);
}","public void test2138() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
    boolean boolean0 = dateTimeZone0.isStandardOffset(30L);
    assertTrue(boolean0);
}","/**
 * Checks whether, at a particular instant, the offset is standard or not.
 * <p>
 * This method can be used to determine whether Summer Time (DST) applies.
 * As a general rule, if the offset at the specified instant is standard,
 * then either Winter time applies, or there is no Summer Time. If the
 * instant is not standard, then Summer Time applies.
 * <p>
 * The implementation of the method is simply whether {@link #getOffset(long)}
 * equals {@link #getStandardOffset(long)} at the specified instant.
 *
 * @param instant  milliseconds from 1970-01-01T00:00:00Z to get the offset for
 * @return true if the offset at the given instant is the standard offset
 * @since 1.5
 */"
"public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {
    if (hoursOffset == 0 && minutesOffset == 0) {
        return DateTimeZone.UTC;
    }
    if (minutesOffset < 0 || minutesOffset > 59) {
        throw new IllegalArgumentException(""Minutes out of range: "" + minutesOffset);
    }
    int offset = 0;
    try {
        int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);
        if (hoursInMinutes < 0) {
            minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);
        } else {
            minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);
        }
        offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);
    } catch (ArithmeticException ex) {
        throw new IllegalArgumentException(""Offset is too large"");
    }
    return forOffsetMillis(offset);
}","public void test2239() throws Throwable {
    int int0 = (-884);
    try {
        DateTimeZone.forOffsetHoursMinutes((-884), 1);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Offset is too large
        //
        verifyException(""org.joda.time.DateTimeZone"", e);
    }
}","/**
 * Gets a time zone instance for the specified offset to UTC in hours and minutes.
 * This method assumes 60 minutes in an hour, and standard length minutes.
 * <p>
 * This factory is a convenient way of constructing zones with a fixed offset.
 * The minutes value is always positive and in the range 0 to 59.
 * If constructed with the values (-2, 30), the resulting zone is '-02:30'.
 *
 * @param hoursOffset  the offset in hours from UTC, from -23 to +23
 * @param minutesOffset  the offset in minutes from UTC, must be between 0 and 59 inclusive
 * @return the DateTimeZone object for the offset
 * @throws IllegalArgumentException if the offset or minute is too large or too small
 */"
"public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
    int offsetOriginal = getOffset(originalInstantUTC);
    long instantUTC = instantLocal - offsetOriginal;
    int offsetLocalFromOriginal = getOffset(instantUTC);
    if (offsetLocalFromOriginal == offsetOriginal) {
        return instantUTC;
    }
    return convertLocalToUTC(instantLocal, strict);
}","public void test2340() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(43);
    long long0 = dateTimeZone0.convertLocalToUTC(2790L, false, (-4390L));
    assertEquals(2747L, long0);
}","/**
 * Converts a local instant to a standard UTC instant with the same
 * local time attempting to use the same offset as the original.
 * <p>
 * This conversion is used after performing a calculation
 * where the calculation was done using a simple local zone.
 * Whenever possible, the same offset as the original offset will be used.
 * This is most significant during a daylight savings overlap.
 *
 * @param instantLocal  the local instant to convert to UTC
 * @param strict  whether the conversion should reject non-existent local times
 * @param originalInstantUTC  the original instant that the calculation is based on
 * @return the UTC instant with the same local time,
 * @throws ArithmeticException if the result overflows a long
 * @throws IllegalArgumentException if the zone has no equivalent local time
 * @since 2.0
 */"
"// Principal methods
//--------------------------------------------------------------------
/**
 * Gets the ID of this datetime zone.
 *
 * @return the ID of this datetime zone
 */
@ToString
public final String getID() {
    return iID;
}","public void test2341() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(43);
    long long0 = dateTimeZone0.convertLocalToUTC(2790L, false, (-4390L));
    String string0 = dateTimeZone0.getID();
    assertEquals(""+00:00:00.043"", string0);
}",""
"public long convertLocalToUTC(long instantLocal, boolean strict) {
    // get the offset at instantLocal (first estimate)
    int offsetLocal = getOffset(instantLocal);
    // adjust instantLocal using the estimate and recalc the offset
    int offset = getOffset(instantLocal - offsetLocal);
    // if the offsets differ, we must be near a DST boundary
    if (offsetLocal != offset) {
        // if strict then always check if in DST gap
        // otherwise only check if zone in Western hemisphere (as the
        // value of offset is already correct for Eastern hemisphere)
        if (strict || offsetLocal < 0) {
            // determine if we are in the DST gap
            long nextLocal = nextTransition(instantLocal - offsetLocal);
            if (nextLocal == (instantLocal - offsetLocal)) {
                nextLocal = Long.MAX_VALUE;
            }
            long nextAdjusted = nextTransition(instantLocal - offset);
            if (nextAdjusted == (instantLocal - offset)) {
                nextAdjusted = Long.MAX_VALUE;
            }
            if (nextLocal != nextAdjusted) {
                // yes we are in the DST gap
                if (strict) {
                    // DST gap is not acceptable
                    throw new IllegalInstantException(instantLocal, getID());
                } else {
                    // DST gap is acceptable, but for the Western hemisphere
                    // the offset is wrong and will result in local times
                    // before the cutover so use the offsetLocal instead
                    offset = offsetLocal;
                }
            }
        }
    }
    // check for overflow
    long instantUTC = instantLocal - offset;
    // If there is a sign change, but the two values have different signs...
    if ((instantLocal ^ instantUTC) < 0 && (instantLocal ^ offset) < 0) {
        throw new ArithmeticException(""Subtracting time zone offset caused overflow"");
    }
    return instantUTC;
}","public void test2342() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(43);
    long long0 = dateTimeZone0.convertLocalToUTC(2790L, false, (-4390L));
    String string0 = dateTimeZone0.getID();
    long long1 = dateTimeZone0.convertLocalToUTC(1L, false);
    assertEquals((-42L), long1);
}","/**
 * Converts a local instant to a standard UTC instant with the same
 * local time. This conversion is used after performing a calculation
 * where the calculation was done using a simple local zone.
 *
 * @param instantLocal  the local instant to convert to UTC
 * @param strict  whether the conversion should reject non-existent local times
 * @return the UTC instant with the same local time,
 * @throws ArithmeticException if the result overflows a long
 * @throws IllegalInstantException if the zone has no equivalent local time
 * @since 1.5
 */"
"//    //-----------------------------------------------------------------------
//    /**
//     * Checks if the given {@link LocalDateTime} is within an overlap.
//     * <p>
//     * When switching from Daylight Savings Time to standard time there is
//     * typically an overlap where the same clock hour occurs twice. This
//     * method identifies whether the local datetime refers to such an overlap.
//     *
//     * @param localDateTime  the time to check, not null
//     * @return true if the given datetime refers to an overlap
//     */
//    public boolean isLocalDateTimeOverlap(LocalDateTime localDateTime) {
//        if (isFixed()) {
//            return false;
//        }
//        long instantLocal = localDateTime.toDateTime(DateTimeZone.UTC).getMillis();
//        // get the offset at instantLocal (first estimate)
//        int offsetLocal = getOffset(instantLocal);
//        // adjust instantLocal using the estimate and recalc the offset
//        int offset = getOffset(instantLocal - offsetLocal);
//        // if the offsets differ, we must be near a DST boundary
//        if (offsetLocal != offset) {
//            long nextLocal = nextTransition(instantLocal - offsetLocal);
//            long nextAdjusted = nextTransition(instantLocal - offset);
//            if (nextLocal != nextAdjusted) {
//                // in DST gap
//                return false;
//            }
//            long diff = Math.abs(offset - offsetLocal);
//            DateTime dateTime = localDateTime.toDateTime(this);
//            DateTime adjusted = dateTime.plus(diff);
//            if (dateTime.getHourOfDay() == adjusted.getHourOfDay() &&
//                    dateTime.getMinuteOfHour() == adjusted.getMinuteOfHour() &&
//                    dateTime.getSecondOfMinute() == adjusted.getSecondOfMinute()) {
//                return true;
//            }
//            adjusted = dateTime.minus(diff);
//            if (dateTime.getHourOfDay() == adjusted.getHourOfDay() &&
//                    dateTime.getMinuteOfHour() == adjusted.getMinuteOfHour() &&
//                    dateTime.getSecondOfMinute() == adjusted.getSecondOfMinute()) {
//                return true;
//            }
//            return false;
//        }
//        return false;
//    }
//
//
//        DateTime dateTime = null;
//        try {
//            dateTime = localDateTime.toDateTime(this);
//        } catch (IllegalArgumentException ex) {
//            return false;  // it is a gap, not an overlap
//        }
//        long offset1 = Math.abs(getOffset(dateTime.getMillis() + 1) - getStandardOffset(dateTime.getMillis() + 1));
//        long offset2 = Math.abs(getOffset(dateTime.getMillis() - 1) - getStandardOffset(dateTime.getMillis() - 1));
//        long offset = Math.max(offset1, offset2);
//        if (offset == 0) {
//            return false;
//        }
//        DateTime adjusted = dateTime.plus(offset);
//        if (dateTime.getHourOfDay() == adjusted.getHourOfDay() &&
//                dateTime.getMinuteOfHour() == adjusted.getMinuteOfHour() &&
//                dateTime.getSecondOfMinute() == adjusted.getSecondOfMinute()) {
//            return true;
//        }
//        adjusted = dateTime.minus(offset);
//        if (dateTime.getHourOfDay() == adjusted.getHourOfDay() &&
//                dateTime.getMinuteOfHour() == adjusted.getMinuteOfHour() &&
//                dateTime.getSecondOfMinute() == adjusted.getSecondOfMinute()) {
//            return true;
//        }
//        return false;
//        long millis = dateTime.getMillis();
//        long nextTransition = nextTransition(millis);
//        long previousTransition = previousTransition(millis);
//        long deltaToPreviousTransition = millis - previousTransition;
//        long deltaToNextTransition = nextTransition - millis;
//        if (deltaToNextTransition < deltaToPreviousTransition) {
//            int offset = getOffset(nextTransition);
//            int standardOffset = getStandardOffset(nextTransition);
//            if (Math.abs(offset - standardOffset) >= deltaToNextTransition) {
//                return true;
//            }
//        } else  {
//            int offset = getOffset(previousTransition);
//            int standardOffset = getStandardOffset(previousTransition);
//            if (Math.abs(offset - standardOffset) >= deltaToPreviousTransition) {
//                return true;
//            }
//        }
//        return false;
//    }
/**
 * Checks if the given {@link LocalDateTime} is within a gap.
 * <p>
 * When switching from standard time to Daylight Savings Time there is
 * typically a gap where a clock hour is missing. This method identifies
 * whether the local datetime refers to such a gap.
 *
 * @param localDateTime  the time to check, not null
 * @return true if the given datetime refers to a gap
 * @since 1.6
 */
public boolean isLocalDateTimeGap(LocalDateTime localDateTime) {
    if (isFixed()) {
        return false;
    }
    try {
        localDateTime.toDateTime(this);
        return false;
    } catch (IllegalInstantException ex) {
        return true;
    }
}","public void test2443() throws Throwable {
    Provider provider0 = DateTimeZone.getProvider();
    DateTimeZone.setProvider(provider0);
    ISOChronology iSOChronology0 = ISOChronology.getInstance();
    Chronology chronology0 = iSOChronology0.withUTC();
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = gJChronology0.getZone();
    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(chronology0, dateTimeZone0);
    DateTimeZone dateTimeZone1 = zonedChronology0.getZone();
    LocalTime.now((Chronology) iSOChronology0);
    dateTimeZone1.getName(605L);
    dateTimeZone0.getMillisKeepLocal(dateTimeZone1, 0L);
    DateTimeZone.forOffsetMillis((-970));
    dateTimeZone0.convertLocalToUTC(605L, true);
    boolean boolean0 = dateTimeZone0.isLocalDateTimeGap((LocalDateTime) null);
    assertFalse(boolean0);
}",""
"//    //-----------------------------------------------------------------------
//    /**
//     * Checks if the given {@link LocalDateTime} is within an overlap.
//     * <p>
//     * When switching from Daylight Savings Time to standard time there is
//     * typically an overlap where the same clock hour occurs twice. This
//     * method identifies whether the local datetime refers to such an overlap.
//     *
//     * @param localDateTime  the time to check, not null
//     * @return true if the given datetime refers to an overlap
//     */
//    public boolean isLocalDateTimeOverlap(LocalDateTime localDateTime) {
//        if (isFixed()) {
//            return false;
//        }
//        long instantLocal = localDateTime.toDateTime(DateTimeZone.UTC).getMillis();
//        // get the offset at instantLocal (first estimate)
//        int offsetLocal = getOffset(instantLocal);
//        // adjust instantLocal using the estimate and recalc the offset
//        int offset = getOffset(instantLocal - offsetLocal);
//        // if the offsets differ, we must be near a DST boundary
//        if (offsetLocal != offset) {
//            long nextLocal = nextTransition(instantLocal - offsetLocal);
//            long nextAdjusted = nextTransition(instantLocal - offset);
//            if (nextLocal != nextAdjusted) {
//                // in DST gap
//                return false;
//            }
//            long diff = Math.abs(offset - offsetLocal);
//            DateTime dateTime = localDateTime.toDateTime(this);
//            DateTime adjusted = dateTime.plus(diff);
//            if (dateTime.getHourOfDay() == adjusted.getHourOfDay() &&
//                    dateTime.getMinuteOfHour() == adjusted.getMinuteOfHour() &&
//                    dateTime.getSecondOfMinute() == adjusted.getSecondOfMinute()) {
//                return true;
//            }
//            adjusted = dateTime.minus(diff);
//            if (dateTime.getHourOfDay() == adjusted.getHourOfDay() &&
//                    dateTime.getMinuteOfHour() == adjusted.getMinuteOfHour() &&
//                    dateTime.getSecondOfMinute() == adjusted.getSecondOfMinute()) {
//                return true;
//            }
//            return false;
//        }
//        return false;
//    }
//
//
//        DateTime dateTime = null;
//        try {
//            dateTime = localDateTime.toDateTime(this);
//        } catch (IllegalArgumentException ex) {
//            return false;  // it is a gap, not an overlap
//        }
//        long offset1 = Math.abs(getOffset(dateTime.getMillis() + 1) - getStandardOffset(dateTime.getMillis() + 1));
//        long offset2 = Math.abs(getOffset(dateTime.getMillis() - 1) - getStandardOffset(dateTime.getMillis() - 1));
//        long offset = Math.max(offset1, offset2);
//        if (offset == 0) {
//            return false;
//        }
//        DateTime adjusted = dateTime.plus(offset);
//        if (dateTime.getHourOfDay() == adjusted.getHourOfDay() &&
//                dateTime.getMinuteOfHour() == adjusted.getMinuteOfHour() &&
//                dateTime.getSecondOfMinute() == adjusted.getSecondOfMinute()) {
//            return true;
//        }
//        adjusted = dateTime.minus(offset);
//        if (dateTime.getHourOfDay() == adjusted.getHourOfDay() &&
//                dateTime.getMinuteOfHour() == adjusted.getMinuteOfHour() &&
//                dateTime.getSecondOfMinute() == adjusted.getSecondOfMinute()) {
//            return true;
//        }
//        return false;
//        long millis = dateTime.getMillis();
//        long nextTransition = nextTransition(millis);
//        long previousTransition = previousTransition(millis);
//        long deltaToPreviousTransition = millis - previousTransition;
//        long deltaToNextTransition = nextTransition - millis;
//        if (deltaToNextTransition < deltaToPreviousTransition) {
//            int offset = getOffset(nextTransition);
//            int standardOffset = getStandardOffset(nextTransition);
//            if (Math.abs(offset - standardOffset) >= deltaToNextTransition) {
//                return true;
//            }
//        } else  {
//            int offset = getOffset(previousTransition);
//            int standardOffset = getStandardOffset(previousTransition);
//            if (Math.abs(offset - standardOffset) >= deltaToPreviousTransition) {
//                return true;
//            }
//        }
//        return false;
//    }
/**
 * Checks if the given {@link LocalDateTime} is within a gap.
 * <p>
 * When switching from standard time to Daylight Savings Time there is
 * typically a gap where a clock hour is missing. This method identifies
 * whether the local datetime refers to such a gap.
 *
 * @param localDateTime  the time to check, not null
 * @return true if the given datetime refers to a gap
 * @since 1.6
 */
public boolean isLocalDateTimeGap(LocalDateTime localDateTime) {
    if (isFixed()) {
        return false;
    }
    try {
        localDateTime.toDateTime(this);
        return false;
    } catch (IllegalInstantException ex) {
        return true;
    }
}","public void test2544() throws Throwable {
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
    LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(lenientChronology0, fixedDateTimeZone0);
    DateTimeZone dateTimeZone0 = zonedChronology0.getZone();
    LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
    LocalDateTime localDateTime1 = localDateTime0.withMonthOfYear(1);
    boolean boolean0 = dateTimeZone0.isLocalDateTimeGap(localDateTime1);
    assertFalse(boolean0);
}",""
"public long adjustOffset(long instant, boolean earlierOrLater) {
    // a bit messy, but will work in all non-pathological cases
    // evaluate 3 hours before and after to work out if anything is happening
    long instantBefore = instant - 3 * DateTimeConstants.MILLIS_PER_HOUR;
    long instantAfter = instant + 3 * DateTimeConstants.MILLIS_PER_HOUR;
    long offsetBefore = getOffset(instantBefore);
    long offsetAfter = getOffset(instantAfter);
    if (offsetBefore <= offsetAfter) {
        // not an overlap (less than is a gap, equal is normal case)
        return instant;
    }
    // work out range of instants that have duplicate local times
    long diff = offsetBefore - offsetAfter;
    long transition = nextTransition(instantBefore);
    long overlapStart = transition - diff;
    long overlapEnd = transition + diff;
    if (instant < overlapStart || instant >= overlapEnd) {
        // not an overlap
        return instant;
    }
    // calculate result
    long afterStart = instant - overlapStart;
    if (afterStart >= diff) {
        // currently in later offset
        return earlierOrLater ? instant : instant - diff;
    } else {
        // currently in earlier offset
        return earlierOrLater ? instant + diff : instant;
    }
}","public void test2645() throws Throwable {
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    long long0 = fixedDateTimeZone0.adjustOffset(100000L, true);
    assertEquals(100000L, long0);
}","/**
 * Adjusts the offset to be the earlier or later one during an overlap.
 *
 * @param instant  the instant to adjust
 * @param earlierOrLater  false for earlier, true for later
 * @return the adjusted instant millis
 */"
"public long adjustOffset(long instant, boolean earlierOrLater) {
    // a bit messy, but will work in all non-pathological cases
    // evaluate 3 hours before and after to work out if anything is happening
    long instantBefore = instant - 3 * DateTimeConstants.MILLIS_PER_HOUR;
    long instantAfter = instant + 3 * DateTimeConstants.MILLIS_PER_HOUR;
    long offsetBefore = getOffset(instantBefore);
    long offsetAfter = getOffset(instantAfter);
    if (offsetBefore <= offsetAfter) {
        // not an overlap (less than is a gap, equal is normal case)
        return instant;
    }
    // work out range of instants that have duplicate local times
    long diff = offsetBefore - offsetAfter;
    long transition = nextTransition(instantBefore);
    long overlapStart = transition - diff;
    long overlapEnd = transition + diff;
    if (instant < overlapStart || instant >= overlapEnd) {
        // not an overlap
        return instant;
    }
    // calculate result
    long afterStart = instant - overlapStart;
    if (afterStart >= diff) {
        // currently in later offset
        return earlierOrLater ? instant : instant - diff;
    } else {
        // currently in earlier offset
        return earlierOrLater ? instant + diff : instant;
    }
}","public void test2746() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetHours(0);
    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone1);
    DateTimeZone dateTimeZone2 = zonedChronology0.getZone();
    long long0 = dateTimeZone2.adjustOffset(0, false);
    assertEquals(0L, long0);
}","/**
 * Adjusts the offset to be the earlier or later one during an overlap.
 *
 * @param instant  the instant to adjust
 * @param earlierOrLater  false for earlier, true for later
 * @return the adjusted instant millis
 */"
"public String toString() {
    return getID();
}","public void test2747() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetHours(0);
    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone1);
    DateTimeZone dateTimeZone2 = zonedChronology0.getZone();
    long long0 = dateTimeZone2.adjustOffset(0, false);
    assertEquals(""UTC"", dateTimeZone2.toString());
}","/**
 * Gets the datetime zone as a string, which is simply its ID.
 * @return the id of the zone
 */"
"public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {
    if (hoursOffset == 0 && minutesOffset == 0) {
        return DateTimeZone.UTC;
    }
    if (minutesOffset < 0 || minutesOffset > 59) {
        throw new IllegalArgumentException(""Minutes out of range: "" + minutesOffset);
    }
    int offset = 0;
    try {
        int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);
        if (hoursInMinutes < 0) {
            minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);
        } else {
            minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);
        }
        offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);
    } catch (ArithmeticException ex) {
        throw new IllegalArgumentException(""Offset is too large"");
    }
    return forOffsetMillis(offset);
}","public void test2848() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(10, 10);
    dateTimeZone0.hashCode();
    DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
    doReturn(0L).when(dateTimeUtils_MillisProvider0).getMillis();
    DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
    dateTimeZone0.getOffsetFromLocal(10);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
    DateMidnight dateMidnight0 = DateMidnight.now((Chronology) buddhistChronology0);
    DateMidnight dateMidnight1 = dateMidnight0.plusWeeks(265);
    dateMidnight1.getMillisOfSecond();
    dateTimeZone0.getOffset((ReadableInstant) dateMidnight1);
    dateTimeZone0.adjustOffset(21600000L, true);
    dateTimeZone0.getOffset(21600000L);
    dateTimeZone0.convertLocalToUTC((long) 10, true);
    DateTimeZone dateTimeZone1 = DateTimeZone.forID(""America/Denver"");
    dateTimeZone0.toString();
    long long0 = 10800000L;
    dateTimeZone1.convertLocalToUTC(10800000L, true, 10800000L);
    dateTimeZone1.getStandardOffset(10);
    dateTimeZone0.UTC.previousTransition(36000000L);
    int int0 = (-167);
    try {
        DateTimeZone.forOffsetHoursMinutes(1, (-167));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Minutes out of range: -167
        //
        verifyException(""org.joda.time.DateTimeZone"", e);
    }
}","/**
 * Gets a time zone instance for the specified offset to UTC in hours and minutes.
 * This method assumes 60 minutes in an hour, and standard length minutes.
 * <p>
 * This factory is a convenient way of constructing zones with a fixed offset.
 * The minutes value is always positive and in the range 0 to 59.
 * If constructed with the values (-2, 30), the resulting zone is '-02:30'.
 *
 * @param hoursOffset  the offset in hours from UTC, from -23 to +23
 * @param minutesOffset  the offset in minutes from UTC, must be between 0 and 59 inclusive
 * @return the DateTimeZone object for the offset
 * @throws IllegalArgumentException if the offset or minute is too large or too small
 */"
"//-----------------------------------------------------------------------
/**
 * Gets the milliseconds of the datetime instant from the Java epoch
 * of 1970-01-01T00:00:00Z.
 *
 * @return the number of milliseconds since 1970-01-01T00:00:00Z
 */
public long getMillis() {
    return iMillis;
}","public void test2949() throws Throwable {
    DateTime dateTime0 = new DateTime(498L);
    DateTime dateTime1 = dateTime0.minusDays(1);
    DateTime dateTime2 = dateTime1.withEarlierOffsetAtOverlap();
    GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) dateTime2, 1);
    DateTimeZone dateTimeZone0 = gJChronology0.getZone();
    dateTimeZone0.hashCode();
    assertEquals((-86399502L), dateTime2.getMillis());
}",""
"public int hashCode() {
    return 57 + getID().hashCode();
}","public void test2950() throws Throwable {
    DateTime dateTime0 = new DateTime(498L);
    DateTime dateTime1 = dateTime0.minusDays(1);
    DateTime dateTime2 = dateTime1.withEarlierOffsetAtOverlap();
    GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) dateTime2, 1);
    DateTimeZone dateTimeZone0 = gJChronology0.getZone();
    dateTimeZone0.hashCode();
    assertSame(dateTime1, dateTime2);
}","/**
 * Gets a hash code compatable with equals.
 *
 * @return suitable hashcode
 */"
"//-----------------------------------------------------------------------
/**
 * Gets a time zone instance for the specified time zone id.
 * <p>
 * The time zone id may be one of those returned by getAvailableIDs.
 * Short ids, as accepted by {@link java.util.TimeZone}, are not accepted.
 * All IDs must be specified in the long format.
 * The exception is UTC, which is an acceptable id.
 * <p>
 * Alternatively a locale independent, fixed offset, datetime zone can
 * be specified. The form <code>[+-]hh:mm</code> can be used.
 *
 * @param id  the ID of the datetime zone, null means default
 * @return the DateTimeZone object for the ID
 * @throws IllegalArgumentException if the ID is not recognised
 */
@FromString
public static DateTimeZone forID(String id) {
    if (id == null) {
        return getDefault();
    }
    if (id.equals(""UTC"")) {
        return DateTimeZone.UTC;
    }
    DateTimeZone zone = cProvider.getZone(id);
    if (zone != null) {
        return zone;
    }
    if (id.startsWith(""+"") || id.startsWith(""-"")) {
        int offset = parseOffset(id);
        if (offset == 0L) {
            return DateTimeZone.UTC;
        } else {
            id = printOffset(offset);
            return fixedOffsetZone(id, offset);
        }
    }
    throw new IllegalArgumentException(""The datetime zone id '"" + id + ""' is not recognised"");
}","public void test3051() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    DateTimeZone.forTimeZone(timeZone0);
    // Undeclared exception!
    try {
        DateTimeZone.forID(""+&OxR7{L] |au,X"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid format: \""+&OxR7{L] |au,X\"" is malformed at \""&OxR7{L] |au,X\""
        //
        verifyException(""org.joda.time.format.DateTimeFormatter"", e);
    }
}",""
"public abstract int getStandardOffset(long instant);","public void test3152() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(4, 4);
    int int0 = dateTimeZone0.getStandardOffset(984L);
    assertEquals(14640000, int0);
}","/**
 * Gets the standard millisecond offset to add to UTC to get local time,
 * when standard time is in effect.
 *
 * @param instant  milliseconds from 1970-01-01T00:00:00Z to get the offset for
 * @return the millisecond offset to add to UTC to get local time
 */"
"public String toString() {
    return getID();
}","public void test3153() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(4, 4);
    int int0 = dateTimeZone0.getStandardOffset(984L);
    assertEquals(""+04:04"", dateTimeZone0.toString());
}","/**
 * Gets the datetime zone as a string, which is simply its ID.
 * @return the id of the zone
 */"
"public static DateTimeZone forOffsetHours(int hoursOffset) throws IllegalArgumentException {
    return forOffsetHoursMinutes(hoursOffset, 0);
}","public void test3254() throws Throwable {
    int int0 = (-1578);
    try {
        DateTimeZone.forOffsetHours((-1578));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Offset is too large
        //
        verifyException(""org.joda.time.DateTimeZone"", e);
    }
}","/**
 * Gets a time zone instance for the specified offset to UTC in hours.
 * This method assumes standard length hours.
 * <p>
 * This factory is a convenient way of constructing zones with a fixed offset.
 *
 * @param hoursOffset  the offset in hours from UTC, from -23 to +23
 * @return the DateTimeZone object for the offset
 * @throws IllegalArgumentException if the offset is too large or too small
 */"
"public long convertLocalToUTC(long instantLocal, boolean strict) {
    // get the offset at instantLocal (first estimate)
    int offsetLocal = getOffset(instantLocal);
    // adjust instantLocal using the estimate and recalc the offset
    int offset = getOffset(instantLocal - offsetLocal);
    // if the offsets differ, we must be near a DST boundary
    if (offsetLocal != offset) {
        // if strict then always check if in DST gap
        // otherwise only check if zone in Western hemisphere (as the
        // value of offset is already correct for Eastern hemisphere)
        if (strict || offsetLocal < 0) {
            // determine if we are in the DST gap
            long nextLocal = nextTransition(instantLocal - offsetLocal);
            if (nextLocal == (instantLocal - offsetLocal)) {
                nextLocal = Long.MAX_VALUE;
            }
            long nextAdjusted = nextTransition(instantLocal - offset);
            if (nextAdjusted == (instantLocal - offset)) {
                nextAdjusted = Long.MAX_VALUE;
            }
            if (nextLocal != nextAdjusted) {
                // yes we are in the DST gap
                if (strict) {
                    // DST gap is not acceptable
                    throw new IllegalInstantException(instantLocal, getID());
                } else {
                    // DST gap is acceptable, but for the Western hemisphere
                    // the offset is wrong and will result in local times
                    // before the cutover so use the offsetLocal instead
                    offset = offsetLocal;
                }
            }
        }
    }
    // check for overflow
    long instantUTC = instantLocal - offset;
    // If there is a sign change, but the two values have different signs...
    if ((instantLocal ^ instantUTC) < 0 && (instantLocal ^ offset) < 0) {
        throw new ArithmeticException(""Subtracting time zone offset caused overflow"");
    }
    return instantUTC;
}","public void test3355() throws Throwable {
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
    dateTimeZone0.UTC.adjustOffset(1, true);
    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis((-216));
    Locale locale0 = Locale.CANADA;
    dateTimeZone0.getName(0L, locale0);
    Locale locale1 = Locale.FRANCE;
    dateTimeZone0.getName(0L, locale1);
    long long0 = dateTimeZone0.convertLocalToUTC((-1107L), true);
    assertEquals((-1107L), long0);
}","/**
 * Converts a local instant to a standard UTC instant with the same
 * local time. This conversion is used after performing a calculation
 * where the calculation was done using a simple local zone.
 *
 * @param instantLocal  the local instant to convert to UTC
 * @param strict  whether the conversion should reject non-existent local times
 * @return the UTC instant with the same local time,
 * @throws ArithmeticException if the result overflows a long
 * @throws IllegalInstantException if the zone has no equivalent local time
 * @since 1.5
 */"
"public final String getShortName(long instant) {
    return getShortName(instant, null);
}","public void test3356() throws Throwable {
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
    dateTimeZone0.UTC.adjustOffset(1, true);
    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis((-216));
    Locale locale0 = Locale.CANADA;
    dateTimeZone0.getName(0L, locale0);
    Locale locale1 = Locale.FRANCE;
    dateTimeZone0.getName(0L, locale1);
    long long0 = dateTimeZone0.convertLocalToUTC((-1107L), true);
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    dateTimeZone0.UTC.toTimeZone();
    DateTimeZone dateTimeZone2 = DateTimeZone.forTimeZone(timeZone0);
    LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone1);
    dateTimeZone2.UTC.isLocalDateTimeGap(localDateTime0);
    DateTimeZone.getAvailableIDs();
    String string0 = dateTimeZone0.getShortName(0L);
    assertNotNull(string0);
}","/**
 * Gets the short name of this datetime zone suitable for display using
 * the default locale.
 * <p>
 * If the name is not available for the locale, then this method returns a
 * string in the format <code>[+-]hh:mm</code>.
 *
 * @param instant  milliseconds from 1970-01-01T00:00:00Z to get the name for
 * @return the human-readable short name in the default locale
 */"
"public String toString() {
    return getID();
}","public void test3357() throws Throwable {
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
    dateTimeZone0.UTC.adjustOffset(1, true);
    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis((-216));
    Locale locale0 = Locale.CANADA;
    dateTimeZone0.getName(0L, locale0);
    Locale locale1 = Locale.FRANCE;
    dateTimeZone0.getName(0L, locale1);
    long long0 = dateTimeZone0.convertLocalToUTC((-1107L), true);
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    dateTimeZone0.UTC.toTimeZone();
    DateTimeZone dateTimeZone2 = DateTimeZone.forTimeZone(timeZone0);
    LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone1);
    dateTimeZone2.UTC.isLocalDateTimeGap(localDateTime0);
    DateTimeZone.getAvailableIDs();
    String string0 = dateTimeZone0.getShortName(0L);
    dateTimeZone2.previousTransition(0L);
    DateTimeZone dateTimeZone3 = DateTimeZone.forOffsetMillis((-1858));
    dateTimeZone3.UTC.getOffset((long) 1);
    UTCProvider uTCProvider0 = new UTCProvider();
    DateTimeZone.setProvider(uTCProvider0);
    dateTimeZone3.nextTransition(1L);
    assertEquals(""-00:00:01.858"", dateTimeZone3.toString());
}","/**
 * Gets the datetime zone as a string, which is simply its ID.
 * @return the id of the zone
 */"
"public int getOffsetFromLocal(long instantLocal) {
    // get the offset at instantLocal (first estimate)
    final int offsetLocal = getOffset(instantLocal);
    // adjust instantLocal using the estimate and recalc the offset
    final long instantAdjusted = instantLocal - offsetLocal;
    final int offsetAdjusted = getOffset(instantAdjusted);
    // if the offsets differ, we must be near a DST boundary
    if (offsetLocal != offsetAdjusted) {
        // we need to ensure that time is always after the DST gap
        // this happens naturally for positive offsets, but not for negative
        if ((offsetLocal - offsetAdjusted) < 0) {
            // if we just return offsetAdjusted then the time is pushed
            // back before the transition, whereas it should be
            // on or after the transition
            long nextLocal = nextTransition(instantAdjusted);
            long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);
            if (nextLocal != nextAdjusted) {
                return offsetLocal;
            }
        }
    } else if (offsetLocal >= 0) {
        long prev = previousTransition(instantAdjusted);
        if (prev < instantAdjusted) {
            int offsetPrev = getOffset(prev);
            int diff = offsetPrev - offsetLocal;
            if (instantAdjusted - prev <= diff) {
                return offsetPrev;
            }
        }
    }
    return offsetAdjusted;
}","public void test3358() throws Throwable {
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
    dateTimeZone0.UTC.adjustOffset(1, true);
    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis((-216));
    Locale locale0 = Locale.CANADA;
    dateTimeZone0.getName(0L, locale0);
    Locale locale1 = Locale.FRANCE;
    dateTimeZone0.getName(0L, locale1);
    long long0 = dateTimeZone0.convertLocalToUTC((-1107L), true);
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    dateTimeZone0.UTC.toTimeZone();
    DateTimeZone dateTimeZone2 = DateTimeZone.forTimeZone(timeZone0);
    LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone1);
    dateTimeZone2.UTC.isLocalDateTimeGap(localDateTime0);
    DateTimeZone.getAvailableIDs();
    String string0 = dateTimeZone0.getShortName(0L);
    dateTimeZone2.previousTransition(0L);
    DateTimeZone dateTimeZone3 = DateTimeZone.forOffsetMillis((-1858));
    dateTimeZone3.UTC.getOffset((long) 1);
    UTCProvider uTCProvider0 = new UTCProvider();
    DateTimeZone.setProvider(uTCProvider0);
    dateTimeZone3.nextTransition(1L);
    DateTimeZone.getProvider();
    dateTimeZone2.getNameKey(1L);
    dateTimeZone0.isLocalDateTimeGap(localDateTime0);
    int int0 = dateTimeZone1.getOffsetFromLocal(0L);
    assertEquals((-216), int0);
}","/**
 * Gets the millisecond offset to subtract from local time to get UTC time.
 * This offset can be used to undo adding the offset obtained by getOffset.
 *
 * <pre>
 * millisLocal == millisUTC   + getOffset(millisUTC)
 * millisUTC   == millisLocal - getOffsetFromLocal(millisLocal)
 * </pre>
 *
 * NOTE: After calculating millisLocal, some error may be introduced. At
 * offset transitions (due to DST or other historical changes), ranges of
 * local times may map to different UTC times.
 * <p>
 * This method will return an offset suitable for calculating an instant
 * after any DST gap. For example, consider a zone with a cutover
 * from 01:00 to 01:59:<br />
 * Input: 00:00  Output: 00:00<br />
 * Input: 00:30  Output: 00:30<br />
 * Input: 01:00  Output: 02:00<br />
 * Input: 01:30  Output: 02:30<br />
 * Input: 02:00  Output: 02:00<br />
 * Input: 02:30  Output: 02:30<br />
 * <p>
 * During a DST overlap (where the local time is ambiguous) this method will return
 * the earlier instant. The combination of these two rules is to always favour
 * daylight (summer) time over standard (winter) time.
 * <p>
 * NOTE: Prior to v2.0, the DST overlap behaviour was not defined and varied by hemisphere.
 * Prior to v1.5, the DST gap behaviour was also not defined.
 *
 * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for
 * @return the millisecond offset to subtract from local time to get UTC time
 */"
"public String toString() {
    return getID();
}","public void test3359() throws Throwable {
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
    dateTimeZone0.UTC.adjustOffset(1, true);
    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis((-216));
    Locale locale0 = Locale.CANADA;
    dateTimeZone0.getName(0L, locale0);
    Locale locale1 = Locale.FRANCE;
    dateTimeZone0.getName(0L, locale1);
    long long0 = dateTimeZone0.convertLocalToUTC((-1107L), true);
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    dateTimeZone0.UTC.toTimeZone();
    DateTimeZone dateTimeZone2 = DateTimeZone.forTimeZone(timeZone0);
    LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone1);
    dateTimeZone2.UTC.isLocalDateTimeGap(localDateTime0);
    DateTimeZone.getAvailableIDs();
    String string0 = dateTimeZone0.getShortName(0L);
    dateTimeZone2.previousTransition(0L);
    DateTimeZone dateTimeZone3 = DateTimeZone.forOffsetMillis((-1858));
    dateTimeZone3.UTC.getOffset((long) 1);
    UTCProvider uTCProvider0 = new UTCProvider();
    DateTimeZone.setProvider(uTCProvider0);
    dateTimeZone3.nextTransition(1L);
    DateTimeZone.getProvider();
    dateTimeZone2.getNameKey(1L);
    dateTimeZone0.isLocalDateTimeGap(localDateTime0);
    int int0 = dateTimeZone1.getOffsetFromLocal(0L);
    assertEquals(""-00:00:00.216"", dateTimeZone1.toString());
}","/**
 * Gets the datetime zone as a string, which is simply its ID.
 * @return the id of the zone
 */"
"public final String getName(long instant) {
    return getName(instant, null);
}","public void test3360() throws Throwable {
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
    dateTimeZone0.UTC.adjustOffset(1, true);
    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis((-216));
    Locale locale0 = Locale.CANADA;
    dateTimeZone0.getName(0L, locale0);
    Locale locale1 = Locale.FRANCE;
    dateTimeZone0.getName(0L, locale1);
    long long0 = dateTimeZone0.convertLocalToUTC((-1107L), true);
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    dateTimeZone0.UTC.toTimeZone();
    DateTimeZone dateTimeZone2 = DateTimeZone.forTimeZone(timeZone0);
    LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone1);
    dateTimeZone2.UTC.isLocalDateTimeGap(localDateTime0);
    DateTimeZone.getAvailableIDs();
    String string0 = dateTimeZone0.getShortName(0L);
    dateTimeZone2.previousTransition(0L);
    DateTimeZone dateTimeZone3 = DateTimeZone.forOffsetMillis((-1858));
    dateTimeZone3.UTC.getOffset((long) 1);
    UTCProvider uTCProvider0 = new UTCProvider();
    DateTimeZone.setProvider(uTCProvider0);
    dateTimeZone3.nextTransition(1L);
    DateTimeZone.getProvider();
    dateTimeZone2.getNameKey(1L);
    dateTimeZone0.isLocalDateTimeGap(localDateTime0);
    int int0 = dateTimeZone1.getOffsetFromLocal(0L);
    DateTimeZone dateTimeZone4 = DateTimeZone.forTimeZone(timeZone0);
    String string1 = dateTimeZone4.getName((long) (-1858));
    assertEquals(""+00:00"", string1);
}","/**
 * Gets the long name of this datetime zone suitable for display using
 * the default locale.
 * <p>
 * If the name is not available for the locale, then this method returns a
 * string in the format <code>[+-]hh:mm</code>.
 *
 * @param instant  milliseconds from 1970-01-01T00:00:00Z to get the name for
 * @return the human-readable long name in the default locale
 */"
"public String toString() {
    return getID();
}","public void test3462() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2363);
    dateTimeZone0.hashCode();
    String string0 = dateTimeZone0.toString();
    assertEquals(""+00:00:02.363"", string0);
}","/**
 * Gets the datetime zone as a string, which is simply its ID.
 * @return the id of the zone
 */"
"public long convertUTCToLocal(long instantUTC) {
    int offset = getOffset(instantUTC);
    long instantLocal = instantUTC + offset;
    // If there is a sign change, but the two values have the same sign...
    if ((instantUTC ^ instantLocal) < 0 && (instantUTC ^ offset) >= 0) {
        throw new ArithmeticException(""Adding time zone offset caused overflow"");
    }
    return instantLocal;
}","public void test3463() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2363);
    dateTimeZone0.hashCode();
    String string0 = dateTimeZone0.toString();
    dateTimeZone0.previousTransition(2596L);
    long long0 = dateTimeZone0.convertUTCToLocal(100000000000L);
    assertEquals(100000002363L, long0);
}","/**
 * Converts a standard UTC instant to a local instant with the same
 * local time. This conversion is used before performing a calculation
 * so that the calculation can be done using a simple local zone.
 *
 * @param instantUTC  the UTC instant to convert to local
 * @return the local instant with the same local time
 * @throws ArithmeticException if the result overflows a long
 * @since 1.5
 */"
"public int getOffsetFromLocal(long instantLocal) {
    // get the offset at instantLocal (first estimate)
    final int offsetLocal = getOffset(instantLocal);
    // adjust instantLocal using the estimate and recalc the offset
    final long instantAdjusted = instantLocal - offsetLocal;
    final int offsetAdjusted = getOffset(instantAdjusted);
    // if the offsets differ, we must be near a DST boundary
    if (offsetLocal != offsetAdjusted) {
        // we need to ensure that time is always after the DST gap
        // this happens naturally for positive offsets, but not for negative
        if ((offsetLocal - offsetAdjusted) < 0) {
            // if we just return offsetAdjusted then the time is pushed
            // back before the transition, whereas it should be
            // on or after the transition
            long nextLocal = nextTransition(instantAdjusted);
            long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);
            if (nextLocal != nextAdjusted) {
                return offsetLocal;
            }
        }
    } else if (offsetLocal >= 0) {
        long prev = previousTransition(instantAdjusted);
        if (prev < instantAdjusted) {
            int offsetPrev = getOffset(prev);
            int diff = offsetPrev - offsetLocal;
            if (instantAdjusted - prev <= diff) {
                return offsetPrev;
            }
        }
    }
    return offsetAdjusted;
}","public void test3464() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2363);
    dateTimeZone0.hashCode();
    String string0 = dateTimeZone0.toString();
    dateTimeZone0.previousTransition(2596L);
    long long0 = dateTimeZone0.convertUTCToLocal(100000000000L);
    int int0 = dateTimeZone0.getOffsetFromLocal(1660L);
    assertEquals(2363, int0);
}","/**
 * Gets the millisecond offset to subtract from local time to get UTC time.
 * This offset can be used to undo adding the offset obtained by getOffset.
 *
 * <pre>
 * millisLocal == millisUTC   + getOffset(millisUTC)
 * millisUTC   == millisLocal - getOffsetFromLocal(millisLocal)
 * </pre>
 *
 * NOTE: After calculating millisLocal, some error may be introduced. At
 * offset transitions (due to DST or other historical changes), ranges of
 * local times may map to different UTC times.
 * <p>
 * This method will return an offset suitable for calculating an instant
 * after any DST gap. For example, consider a zone with a cutover
 * from 01:00 to 01:59:<br />
 * Input: 00:00  Output: 00:00<br />
 * Input: 00:30  Output: 00:30<br />
 * Input: 01:00  Output: 02:00<br />
 * Input: 01:30  Output: 02:30<br />
 * Input: 02:00  Output: 02:00<br />
 * Input: 02:30  Output: 02:30<br />
 * <p>
 * During a DST overlap (where the local time is ambiguous) this method will return
 * the earlier instant. The combination of these two rules is to always favour
 * daylight (summer) time over standard (winter) time.
 * <p>
 * NOTE: Prior to v2.0, the DST overlap behaviour was not defined and varied by hemisphere.
 * Prior to v1.5, the DST gap behaviour was also not defined.
 *
 * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for
 * @return the millisecond offset to subtract from local time to get UTC time
 */"
"public long adjustOffset(long instant, boolean earlierOrLater) {
    // a bit messy, but will work in all non-pathological cases
    // evaluate 3 hours before and after to work out if anything is happening
    long instantBefore = instant - 3 * DateTimeConstants.MILLIS_PER_HOUR;
    long instantAfter = instant + 3 * DateTimeConstants.MILLIS_PER_HOUR;
    long offsetBefore = getOffset(instantBefore);
    long offsetAfter = getOffset(instantAfter);
    if (offsetBefore <= offsetAfter) {
        // not an overlap (less than is a gap, equal is normal case)
        return instant;
    }
    // work out range of instants that have duplicate local times
    long diff = offsetBefore - offsetAfter;
    long transition = nextTransition(instantBefore);
    long overlapStart = transition - diff;
    long overlapEnd = transition + diff;
    if (instant < overlapStart || instant >= overlapEnd) {
        // not an overlap
        return instant;
    }
    // calculate result
    long afterStart = instant - overlapStart;
    if (afterStart >= diff) {
        // currently in later offset
        return earlierOrLater ? instant : instant - diff;
    } else {
        // currently in earlier offset
        return earlierOrLater ? instant + diff : instant;
    }
}","public void test3565() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
    dateTimeZone0.UTC.convertLocalToUTC(946L, true);
    timeZone0.getDisplayName();
    long long0 = dateTimeZone0.adjustOffset((-3000L), false);
    assertEquals((-3000L), long0);
}","/**
 * Adjusts the offset to be the earlier or later one during an overlap.
 *
 * @param instant  the instant to adjust
 * @param earlierOrLater  false for earlier, true for later
 * @return the adjusted instant millis
 */"
"public long convertUTCToLocal(long instantUTC) {
    int offset = getOffset(instantUTC);
    long instantLocal = instantUTC + offset;
    // If there is a sign change, but the two values have the same sign...
    if ((instantUTC ^ instantLocal) < 0 && (instantUTC ^ offset) >= 0) {
        throw new ArithmeticException(""Adding time zone offset caused overflow"");
    }
    return instantLocal;
}","public void test3566() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
    dateTimeZone0.UTC.convertLocalToUTC(946L, true);
    timeZone0.getDisplayName();
    long long0 = dateTimeZone0.adjustOffset((-3000L), false);
    dateTimeZone0.convertLocalToUTC(0L, false, 0L);
    timeZone0.clone();
    dateTimeZone0.nextTransition(0L);
    dateTimeZone0.equals(timeZone0);
    dateTimeZone0.previousTransition(10800000L);
    long long1 = dateTimeZone0.convertUTCToLocal(1540L);
    assertEquals(1540L, long1);
}","/**
 * Converts a standard UTC instant to a local instant with the same
 * local time. This conversion is used before performing a calculation
 * so that the calculation can be done using a simple local zone.
 *
 * @param instantUTC  the UTC instant to convert to local
 * @return the local instant with the same local time
 * @throws ArithmeticException if the result overflows a long
 * @since 1.5
 */"
"public long convertLocalToUTC(long instantLocal, boolean strict) {
    // get the offset at instantLocal (first estimate)
    int offsetLocal = getOffset(instantLocal);
    // adjust instantLocal using the estimate and recalc the offset
    int offset = getOffset(instantLocal - offsetLocal);
    // if the offsets differ, we must be near a DST boundary
    if (offsetLocal != offset) {
        // if strict then always check if in DST gap
        // otherwise only check if zone in Western hemisphere (as the
        // value of offset is already correct for Eastern hemisphere)
        if (strict || offsetLocal < 0) {
            // determine if we are in the DST gap
            long nextLocal = nextTransition(instantLocal - offsetLocal);
            if (nextLocal == (instantLocal - offsetLocal)) {
                nextLocal = Long.MAX_VALUE;
            }
            long nextAdjusted = nextTransition(instantLocal - offset);
            if (nextAdjusted == (instantLocal - offset)) {
                nextAdjusted = Long.MAX_VALUE;
            }
            if (nextLocal != nextAdjusted) {
                // yes we are in the DST gap
                if (strict) {
                    // DST gap is not acceptable
                    throw new IllegalInstantException(instantLocal, getID());
                } else {
                    // DST gap is acceptable, but for the Western hemisphere
                    // the offset is wrong and will result in local times
                    // before the cutover so use the offsetLocal instead
                    offset = offsetLocal;
                }
            }
        }
    }
    // check for overflow
    long instantUTC = instantLocal - offset;
    // If there is a sign change, but the two values have different signs...
    if ((instantLocal ^ instantUTC) < 0 && (instantLocal ^ offset) < 0) {
        throw new ArithmeticException(""Subtracting time zone offset caused overflow"");
    }
    return instantUTC;
}","public void test3567() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
    dateTimeZone0.UTC.convertLocalToUTC(946L, true);
    timeZone0.getDisplayName();
    long long0 = dateTimeZone0.adjustOffset((-3000L), false);
    dateTimeZone0.convertLocalToUTC(0L, false, 0L);
    timeZone0.clone();
    dateTimeZone0.nextTransition(0L);
    dateTimeZone0.equals(timeZone0);
    dateTimeZone0.previousTransition(10800000L);
    long long1 = dateTimeZone0.convertUTCToLocal(1540L);
    long long2 = dateTimeZone0.convertLocalToUTC(1000L, false);
    assertEquals(1000L, long2);
}","/**
 * Converts a local instant to a standard UTC instant with the same
 * local time. This conversion is used after performing a calculation
 * where the calculation was done using a simple local zone.
 *
 * @param instantLocal  the local instant to convert to UTC
 * @param strict  whether the conversion should reject non-existent local times
 * @return the UTC instant with the same local time,
 * @throws ArithmeticException if the result overflows a long
 * @throws IllegalInstantException if the zone has no equivalent local time
 * @since 1.5
 */"
"public String toString() {
    return getID();
}","public void test3568() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
    dateTimeZone0.UTC.convertLocalToUTC(946L, true);
    timeZone0.getDisplayName();
    long long0 = dateTimeZone0.adjustOffset((-3000L), false);
    dateTimeZone0.convertLocalToUTC(0L, false, 0L);
    timeZone0.clone();
    dateTimeZone0.nextTransition(0L);
    dateTimeZone0.equals(timeZone0);
    dateTimeZone0.previousTransition(10800000L);
    long long1 = dateTimeZone0.convertUTCToLocal(1540L);
    long long2 = dateTimeZone0.convertLocalToUTC(1000L, false);
    dateTimeZone0.isStandardOffset(1540L);
    DateTimeZone.getDefault();
    DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
    assertEquals(""UTC"", dateTimeZone1.toString());
}","/**
 * Gets the datetime zone as a string, which is simply its ID.
 * @return the id of the zone
 */"
"public String toString() {
    return getID();
}","public void test3569() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
    dateTimeZone0.UTC.convertLocalToUTC(946L, true);
    timeZone0.getDisplayName();
    long long0 = dateTimeZone0.adjustOffset((-3000L), false);
    dateTimeZone0.convertLocalToUTC(0L, false, 0L);
    timeZone0.clone();
    dateTimeZone0.nextTransition(0L);
    dateTimeZone0.equals(timeZone0);
    dateTimeZone0.previousTransition(10800000L);
    long long1 = dateTimeZone0.convertUTCToLocal(1540L);
    long long2 = dateTimeZone0.convertLocalToUTC(1000L, false);
    dateTimeZone0.isStandardOffset(1540L);
    DateTimeZone.getDefault();
    DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
    DateTimeZone dateTimeZone2 = DateTimeZone.forOffsetMillis(253);
    assertEquals(""+00:00:00.253"", dateTimeZone2.toString());
}","/**
 * Gets the datetime zone as a string, which is simply its ID.
 * @return the id of the zone
 */"
"//-----------------------------------------------------------------------
/**
 * Parses a {@code LocalDateTime} from the specified string.
 * <p>
 * This uses {@link ISODateTimeFormat#localDateOptionalTimeParser()}.
 *
 * @param str  the string to parse, not null
 * @since 2.0
 */
@FromString
public static LocalDateTime parse(String str) {
    return parse(str, ISODateTimeFormat.localDateOptionalTimeParser());
}","public void test3670() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.MAX;
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    DateTimeZone.forTimeZone(timeZone0);
    DateTimeUtils.setCurrentMillisOffset(10800000L);
    // Undeclared exception!
    try {
        LocalDateTime.parse(""4|rmN$}!tZmIy~tl$c"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid format: \""4|rmN$}!tZmIy~tl$c\"" is malformed at \""|rmN$}!tZmIy~tl$c\""
        //
        verifyException(""org.joda.time.format.DateTimeFormatter"", e);
    }
}",""
"public static DateTimeZone forTimeZone(TimeZone zone) {
    if (zone == null) {
        return getDefault();
    }
    final String id = zone.getID();
    if (id.equals(""UTC"")) {
        return DateTimeZone.UTC;
    }
    // Convert from old alias before consulting provider since they may differ.
    DateTimeZone dtz = null;
    String convId = getConvertedId(id);
    if (convId != null) {
        dtz = cProvider.getZone(convId);
    }
    if (dtz == null) {
        dtz = cProvider.getZone(id);
    }
    if (dtz != null) {
        return dtz;
    }
    // Support GMT+/-hh:mm formats
    if (convId == null) {
        convId = zone.getID();
        if (convId.startsWith(""GMT+"") || convId.startsWith(""GMT-"")) {
            convId = convId.substring(3);
            int offset = parseOffset(convId);
            if (offset == 0L) {
                return DateTimeZone.UTC;
            } else {
                convId = printOffset(offset);
                return fixedOffsetZone(convId, offset);
            }
        }
    }
    throw new IllegalArgumentException(""The datetime zone id '"" + id + ""' is not recognised"");
}","public void test3771() throws Throwable {
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
    dateTimeZone0.convertUTCToLocal(0L);
    Hours hours0 = Hours.SIX;
    PeriodType periodType0 = hours0.getPeriodType();
    Period period0 = new Period(0L, periodType0, (Chronology) buddhistChronology0);
    buddhistChronology0.get((ReadablePeriod) period0, (-1L));
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, ""/y<.b,"", 1, 1, 1, 0, 0, 1, 1, 1915, 1);
    // Undeclared exception!
    try {
        DateTimeZone.forTimeZone(simpleTimeZone0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The datetime zone id '/y<.b,' is not recognised
        //
        verifyException(""org.joda.time.DateTimeZone"", e);
    }
}","/**
 * Gets a time zone instance for a JDK TimeZone.
 * <p>
 * DateTimeZone only accepts a subset of the IDs from TimeZone. The
 * excluded IDs are the short three letter form (except UTC). This
 * method will attempt to convert between time zones created using the
 * short IDs and the full version.
 * <p>
 * This method is not designed to parse time zones with rules created by
 * applications using <code>SimpleTimeZone</code> directly.
 *
 * @param zone  the zone to convert, null means default
 * @return the DateTimeZone object for the zone
 * @throws IllegalArgumentException if the zone is not recognised
 */"
"public abstract long nextTransition(long instant);","public void test3872() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""America/Denver"");
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
    dateTimeZone0.UTC.getNameKey(0L);
    long long0 = dateTimeZone0.nextTransition(0L);
    assertEquals(9968400000L, long0);
}","/**
 * Advances the given instant to where the time zone offset or name changes.
 * If the instant returned is exactly the same as passed in, then
 * no changes occur after the given instant.
 *
 * @param instant  milliseconds from 1970-01-01T00:00:00Z
 * @return milliseconds from 1970-01-01T00:00:00Z
 */"
"public long convertLocalToUTC(long instantLocal, boolean strict) {
    // get the offset at instantLocal (first estimate)
    int offsetLocal = getOffset(instantLocal);
    // adjust instantLocal using the estimate and recalc the offset
    int offset = getOffset(instantLocal - offsetLocal);
    // if the offsets differ, we must be near a DST boundary
    if (offsetLocal != offset) {
        // if strict then always check if in DST gap
        // otherwise only check if zone in Western hemisphere (as the
        // value of offset is already correct for Eastern hemisphere)
        if (strict || offsetLocal < 0) {
            // determine if we are in the DST gap
            long nextLocal = nextTransition(instantLocal - offsetLocal);
            if (nextLocal == (instantLocal - offsetLocal)) {
                nextLocal = Long.MAX_VALUE;
            }
            long nextAdjusted = nextTransition(instantLocal - offset);
            if (nextAdjusted == (instantLocal - offset)) {
                nextAdjusted = Long.MAX_VALUE;
            }
            if (nextLocal != nextAdjusted) {
                // yes we are in the DST gap
                if (strict) {
                    // DST gap is not acceptable
                    throw new IllegalInstantException(instantLocal, getID());
                } else {
                    // DST gap is acceptable, but for the Western hemisphere
                    // the offset is wrong and will result in local times
                    // before the cutover so use the offsetLocal instead
                    offset = offsetLocal;
                }
            }
        }
    }
    // check for overflow
    long instantUTC = instantLocal - offset;
    // If there is a sign change, but the two values have different signs...
    if ((instantLocal ^ instantUTC) < 0 && (instantLocal ^ offset) < 0) {
        throw new ArithmeticException(""Subtracting time zone offset caused overflow"");
    }
    return instantUTC;
}","public void test3973() throws Throwable {
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
    dateTimeZone0.isFixed();
    dateTimeZone0.getID();
    dateTimeZone0.previousTransition(1);
    long long0 = dateTimeZone0.convertLocalToUTC(2153L, true);
    assertEquals(2153L, long0);
}","/**
 * Converts a local instant to a standard UTC instant with the same
 * local time. This conversion is used after performing a calculation
 * where the calculation was done using a simple local zone.
 *
 * @param instantLocal  the local instant to convert to UTC
 * @param strict  whether the conversion should reject non-existent local times
 * @return the UTC instant with the same local time,
 * @throws ArithmeticException if the result overflows a long
 * @throws IllegalInstantException if the zone has no equivalent local time
 * @since 1.5
 */"
"public String toString() {
    return getID();
}","public void test3974() throws Throwable {
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
    dateTimeZone0.isFixed();
    dateTimeZone0.getID();
    dateTimeZone0.previousTransition(1);
    long long0 = dateTimeZone0.convertLocalToUTC(2153L, true);
    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(1);
    long long1 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, 2153L);
    assertEquals(""+00:00:00.001"", dateTimeZone1.toString());
}","/**
 * Gets the datetime zone as a string, which is simply its ID.
 * @return the id of the zone
 */"
"public long getMillisKeepLocal(DateTimeZone newZone, long oldInstant) {
    if (newZone == null) {
        newZone = DateTimeZone.getDefault();
    }
    if (newZone == this) {
        return oldInstant;
    }
    long instantLocal = convertUTCToLocal(oldInstant);
    return newZone.convertLocalToUTC(instantLocal, false, oldInstant);
}","public void test3975() throws Throwable {
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
    dateTimeZone0.isFixed();
    dateTimeZone0.getID();
    dateTimeZone0.previousTransition(1);
    long long0 = dateTimeZone0.convertLocalToUTC(2153L, true);
    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(1);
    long long1 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, 2153L);
    assertEquals(2152L, long1);
}","/**
 * Gets the millisecond instant in another zone keeping the same local time.
 * <p>
 * The conversion is performed by converting the specified UTC millis to local
 * millis in this zone, then converting back to UTC millis in the new zone.
 *
 * @param newZone  the new zone, null means default
 * @param oldInstant  the UTC millisecond instant to convert
 * @return the UTC millisecond instant with the same local time in the new zone
 */"
"public static void setDefault(DateTimeZone zone) throws SecurityException {
    SecurityManager sm = System.getSecurityManager();
    if (sm != null) {
        sm.checkPermission(new JodaTimePermission(""DateTimeZone.setDefault""));
    }
    if (zone == null) {
        throw new IllegalArgumentException(""The datetime zone must not be null"");
    }
    synchronized (DateTimeZone.class) {
        cDefault = zone;
    }
}","public void test4076() throws Throwable {
    DateTimeZone.getProvider();
    // Undeclared exception!
    try {
        DateTimeZone.setDefault((DateTimeZone) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The datetime zone must not be null
        //
        verifyException(""org.joda.time.DateTimeZone"", e);
    }
}","/**
 * Sets the default time zone.
 * <p>
 * NOTE: Calling this method does <i>not</i> set the {@code java.util.TimeZone} default.
 *
 * @param zone  the default datetime zone object, must not be null
 * @throws IllegalArgumentException if the zone is null
 * @throws SecurityException if the application has insufficient security rights
 */"
"public static void setDefault(DateTimeZone zone) throws SecurityException {
    SecurityManager sm = System.getSecurityManager();
    if (sm != null) {
        sm.checkPermission(new JodaTimePermission(""DateTimeZone.setDefault""));
    }
    if (zone == null) {
        throw new IllegalArgumentException(""The datetime zone must not be null"");
    }
    synchronized (DateTimeZone.class) {
        cDefault = zone;
    }
}","public void test4278() throws Throwable {
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
    DateTimeZone.forTimeZone((TimeZone) null);
    dateTimeZone0.getStandardOffset((-257L));
    dateTimeZone0.convertLocalToUTC((-1682L), true, 1658L);
    // Undeclared exception!
    try {
        DateTimeZone.setDefault((DateTimeZone) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The datetime zone must not be null
        //
        verifyException(""org.joda.time.DateTimeZone"", e);
    }
}","/**
 * Sets the default time zone.
 * <p>
 * NOTE: Calling this method does <i>not</i> set the {@code java.util.TimeZone} default.
 *
 * @param zone  the default datetime zone object, must not be null
 * @throws IllegalArgumentException if the zone is null
 * @throws SecurityException if the application has insufficient security rights
 */"
"//-----------------------------------------------------------------------
/**
 * Gets the name provider factory.
 * <p>
 * The name provider is a pluggable instance factory that supplies the
 * names of each DateTimeZone.
 *
 * @return the provider
 */
public static NameProvider getNameProvider() {
    return cNameProvider;
}","public void test4480() throws Throwable {
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    fixedDateTimeZone0.UTC.getStandardOffset((-1L));
    fixedDateTimeZone0.UTC.toTimeZone();
    Locale locale0 = Locale.CHINESE;
    fixedDateTimeZone0.getName(2075L, locale0);
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    DateTimeUtils.setCurrentMillisFixed(13L);
    dateTimeZone0.UTC.nextTransition(0);
    fixedDateTimeZone0.convertLocalToUTC((long) 0, false);
    NameProvider nameProvider0 = DateTimeZone.getNameProvider();
    assertNotNull(nameProvider0);
}",""
"public String toString() {
    return getID();
}","public void test4581() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
    timeZone0.getDisplayName();
    dateTimeZone0.adjustOffset((-3000L), false);
    dateTimeZone0.convertLocalToUTC(0L, false, 0L);
    timeZone0.clone();
    dateTimeZone0.nextTransition(0L);
    dateTimeZone0.equals(timeZone0);
    dateTimeZone0.previousTransition(10800000L);
    dateTimeZone0.convertUTCToLocal(1540L);
    dateTimeZone0.convertLocalToUTC(1000L, false);
    dateTimeZone0.isStandardOffset(1540L);
    DateTimeZone dateTimeZone1 = DateTimeZone.getDefault();
    assertEquals(""America/Los_Angeles"", dateTimeZone1.toString());
}","/**
 * Gets the datetime zone as a string, which is simply its ID.
 * @return the id of the zone
 */"
"public String toString() {
    return getID();
}","public void test4682() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(8);
    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetHours(8);
    assertEquals(""+08:00"", dateTimeZone1.toString());
}","/**
 * Gets the datetime zone as a string, which is simply its ID.
 * @return the id of the zone
 */"
"public abstract int getOffset(long instant);","public void test4683() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(8);
    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetHours(8);
    int int0 = dateTimeZone0.getOffset((long) 8);
    assertEquals(8, int0);
}","/**
 * Gets the millisecond offset to add to UTC to get local time.
 *
 * @param instant  milliseconds from 1970-01-01T00:00:00Z to get the offset for
 * @return the millisecond offset to add to UTC to get local time
 */"
"public String toString() {
    return getID();
}","public void test4684() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(8);
    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetHours(8);
    int int0 = dateTimeZone0.getOffset((long) 8);
    assertEquals(""+00:00:00.008"", dateTimeZone0.toString());
}","/**
 * Gets the datetime zone as a string, which is simply its ID.
 * @return the id of the zone
 */"
"// Principal methods
//--------------------------------------------------------------------
/**
 * Gets the ID of this datetime zone.
 *
 * @return the ID of this datetime zone
 */
@ToString
public final String getID() {
    return iID;
}","public void test4685() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(8);
    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetHours(8);
    int int0 = dateTimeZone0.getOffset((long) 8);
    assertEquals(""+00:00:00.008"", dateTimeZone0.getID());
}",""
"public String getName(long instant, Locale locale) {
    if (locale == null) {
        locale = Locale.getDefault();
    }
    String nameKey = getNameKey(instant);
    if (nameKey == null) {
        return iID;
    }
    String name = cNameProvider.getName(locale, iID, nameKey);
    if (name != null) {
        return name;
    }
    return printOffset(getOffset(instant));
}","public void test4786() throws Throwable {
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
    DateTimeZone dateTimeZone1 = gJChronology0.getZone();
    Locale locale0 = Locale.KOREAN;
    String string0 = dateTimeZone1.getName(9223372036854775807L, locale0);
    assertNotNull(string0);
}","/**
 * Gets the long name of this datetime zone suitable for display using
 * the specified locale.
 * <p>
 * If the name is not available for the locale, then this method returns a
 * string in the format <code>[+-]hh:mm</code>.
 *
 * @param instant  milliseconds from 1970-01-01T00:00:00Z to get the name for
 * @param locale  the locale to get the name for
 * @return the human-readable long name in the specified locale
 */"
"public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {
    if (hoursOffset == 0 && minutesOffset == 0) {
        return DateTimeZone.UTC;
    }
    if (minutesOffset < 0 || minutesOffset > 59) {
        throw new IllegalArgumentException(""Minutes out of range: "" + minutesOffset);
    }
    int offset = 0;
    try {
        int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);
        if (hoursInMinutes < 0) {
            minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);
        } else {
            minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);
        }
        offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);
    } catch (ArithmeticException ex) {
        throw new IllegalArgumentException(""Offset is too large"");
    }
    return forOffsetMillis(offset);
}","public void test4888() throws Throwable {
    int int0 = 24;
    int int1 = 3600000;
    try {
        DateTimeZone.forOffsetHoursMinutes(24, 3600000);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Minutes out of range: 3600000
        //
        verifyException(""org.joda.time.DateTimeZone"", e);
    }
}","/**
 * Gets a time zone instance for the specified offset to UTC in hours and minutes.
 * This method assumes 60 minutes in an hour, and standard length minutes.
 * <p>
 * This factory is a convenient way of constructing zones with a fixed offset.
 * The minutes value is always positive and in the range 0 to 59.
 * If constructed with the values (-2, 30), the resulting zone is '-02:30'.
 *
 * @param hoursOffset  the offset in hours from UTC, from -23 to +23
 * @param minutesOffset  the offset in minutes from UTC, must be between 0 and 59 inclusive
 * @return the DateTimeZone object for the offset
 * @throws IllegalArgumentException if the offset or minute is too large or too small
 */"
"//-----------------------------------------------------------------------
/**
 * Gets the default time zone.
 * <p>
 * The default time zone is derived from the system property {@code user.timezone}.
 * If that is {@code null} or is not a valid identifier, then the value of the
 * JDK {@code TimeZone} default is converted. If that fails, {@code UTC} is used.
 * <p>
 * NOTE: If the {@code java.util.TimeZone} default is updated <i>after</i> calling this
 * method, then the change will not be picked up here.
 *
 * @return the default datetime zone object
 */
public static DateTimeZone getDefault() {
    DateTimeZone zone = cDefault;
    if (zone == null) {
        synchronized (DateTimeZone.class) {
            zone = cDefault;
            if (zone == null) {
                DateTimeZone temp = null;
                try {
                    try {
                        String id = System.getProperty(""user.timezone"");
                        if (id != null) {
                            // null check avoids stack overflow
                            temp = forID(id);
                        }
                    } catch (RuntimeException ex) {
                        // ignored
                    }
                    if (temp == null) {
                        temp = forTimeZone(TimeZone.getDefault());
                    }
                } catch (IllegalArgumentException ex) {
                    // ignored
                }
                if (temp == null) {
                    temp = UTC;
                }
                cDefault = zone = temp;
            }
        }
    }
    return zone;
}","public void test4989() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    assertNotNull(dateTimeZone0);
}",""
"public String getShortName(long instant, Locale locale) {
    if (locale == null) {
        locale = Locale.getDefault();
    }
    String nameKey = getNameKey(instant);
    if (nameKey == null) {
        return iID;
    }
    String name = cNameProvider.getShortName(locale, iID, nameKey);
    if (name != null) {
        return name;
    }
    return printOffset(getOffset(instant));
}","public void test4990() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    DateTimeUtils.setCurrentMillisSystem();
    DateTimeZone.setDefault(dateTimeZone0);
    dateTimeZone0.getNameKey(2660L);
    Locale locale0 = Locale.SIMPLIFIED_CHINESE;
    Locale locale1 = locale0.stripExtensions();
    String string0 = dateTimeZone0.UTC.getShortName(2660L, locale1);
    assertEquals(""+00:00"", string0);
}","/**
 * Gets the short name of this datetime zone suitable for display using
 * the specified locale.
 * <p>
 * If the name is not available for the locale, then this method returns a
 * string in the format <code>[+-]hh:mm</code>.
 *
 * @param instant  milliseconds from 1970-01-01T00:00:00Z to get the name for
 * @param locale  the locale to get the name for
 * @return the human-readable short name in the specified locale
 */"
"public final String getName(long instant) {
    return getName(instant, null);
}","public void test4991() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    DateTimeUtils.setCurrentMillisSystem();
    DateTimeZone.setDefault(dateTimeZone0);
    dateTimeZone0.getNameKey(2660L);
    Locale locale0 = Locale.SIMPLIFIED_CHINESE;
    Locale locale1 = locale0.stripExtensions();
    String string0 = dateTimeZone0.UTC.getShortName(2660L, locale1);
    dateTimeZone0.getName((-4462L));
    String string1 = dateTimeZone0.getName(10800000L);
    assertNotNull(string1);
}","/**
 * Gets the long name of this datetime zone suitable for display using
 * the default locale.
 * <p>
 * If the name is not available for the locale, then this method returns a
 * string in the format <code>[+-]hh:mm</code>.
 *
 * @param instant  milliseconds from 1970-01-01T00:00:00Z to get the name for
 * @return the human-readable long name in the default locale
 */"
"public final String getShortName(long instant) {
    return getShortName(instant, null);
}","public void test4993() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    DateTimeUtils.setCurrentMillisSystem();
    DateTimeZone.setDefault(dateTimeZone0);
    dateTimeZone0.getNameKey(2660L);
    Locale locale0 = Locale.SIMPLIFIED_CHINESE;
    Locale locale1 = locale0.stripExtensions();
    String string0 = dateTimeZone0.UTC.getShortName(2660L, locale1);
    dateTimeZone0.getName((-4462L));
    String string1 = dateTimeZone0.getName(10800000L);
    String string2 = dateTimeZone0.getShortName((-4462L));
    assertNotNull(string2);
}","/**
 * Gets the short name of this datetime zone suitable for display using
 * the default locale.
 * <p>
 * If the name is not available for the locale, then this method returns a
 * string in the format <code>[+-]hh:mm</code>.
 *
 * @param instant  milliseconds from 1970-01-01T00:00:00Z to get the name for
 * @return the human-readable short name in the default locale
 */"
"public boolean isStandardOffset(long instant) {
    return getOffset(instant) == getStandardOffset(instant);
}","public void test4994() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    DateTimeUtils.setCurrentMillisSystem();
    DateTimeZone.setDefault(dateTimeZone0);
    dateTimeZone0.getNameKey(2660L);
    Locale locale0 = Locale.SIMPLIFIED_CHINESE;
    Locale locale1 = locale0.stripExtensions();
    String string0 = dateTimeZone0.UTC.getShortName(2660L, locale1);
    dateTimeZone0.getName((-4462L));
    String string1 = dateTimeZone0.getName(10800000L);
    String string2 = dateTimeZone0.getShortName((-4462L));
    dateTimeZone0.isFixed();
    boolean boolean0 = dateTimeZone0.isStandardOffset(2660L);
    assertTrue(boolean0);
}","/**
 * Checks whether, at a particular instant, the offset is standard or not.
 * <p>
 * This method can be used to determine whether Summer Time (DST) applies.
 * As a general rule, if the offset at the specified instant is standard,
 * then either Winter time applies, or there is no Summer Time. If the
 * instant is not standard, then Summer Time applies.
 * <p>
 * The implementation of the method is simply whether {@link #getOffset(long)}
 * equals {@link #getStandardOffset(long)} at the specified instant.
 *
 * @param instant  milliseconds from 1970-01-01T00:00:00Z to get the offset for
 * @return true if the offset at the given instant is the standard offset
 * @since 1.5
 */"
"public abstract int getStandardOffset(long instant);","public void test4995() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    DateTimeUtils.setCurrentMillisSystem();
    DateTimeZone.setDefault(dateTimeZone0);
    dateTimeZone0.getNameKey(2660L);
    Locale locale0 = Locale.SIMPLIFIED_CHINESE;
    Locale locale1 = locale0.stripExtensions();
    String string0 = dateTimeZone0.UTC.getShortName(2660L, locale1);
    dateTimeZone0.getName((-4462L));
    String string1 = dateTimeZone0.getName(10800000L);
    String string2 = dateTimeZone0.getShortName((-4462L));
    dateTimeZone0.isFixed();
    boolean boolean0 = dateTimeZone0.isStandardOffset(2660L);
    int int0 = dateTimeZone0.getStandardOffset(2660L);
    assertEquals((-28800000), int0);
}","/**
 * Gets the standard millisecond offset to add to UTC to get local time,
 * when standard time is in effect.
 *
 * @param instant  milliseconds from 1970-01-01T00:00:00Z to get the offset for
 * @return the millisecond offset to add to UTC to get local time
 */"
"public boolean isStandardOffset(long instant) {
    return getOffset(instant) == getStandardOffset(instant);
}","public void test5096() throws Throwable {
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.forOffsetHours((-455));
    DateTimeZone.getDefault();
    ZoneInfoProvider zoneInfoProvider0 = (ZoneInfoProvider) DateTimeZone.getProvider();
    boolean boolean0 = fixedDateTimeZone0.isStandardOffset((-338L));
    assertTrue(boolean0);
}","/**
 * Checks whether, at a particular instant, the offset is standard or not.
 * <p>
 * This method can be used to determine whether Summer Time (DST) applies.
 * As a general rule, if the offset at the specified instant is standard,
 * then either Winter time applies, or there is no Summer Time. If the
 * instant is not standard, then Summer Time applies.
 * <p>
 * The implementation of the method is simply whether {@link #getOffset(long)}
 * equals {@link #getStandardOffset(long)} at the specified instant.
 *
 * @param instant  milliseconds from 1970-01-01T00:00:00Z to get the offset for
 * @return true if the offset at the given instant is the standard offset
 * @since 1.5
 */"
"public final String getName(long instant) {
    return getName(instant, null);
}","public void test5097() throws Throwable {
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.forOffsetHours((-455));
    DateTimeZone.getDefault();
    ZoneInfoProvider zoneInfoProvider0 = (ZoneInfoProvider) DateTimeZone.getProvider();
    boolean boolean0 = fixedDateTimeZone0.isStandardOffset((-338L));
    DateTimeZone.setProvider(zoneInfoProvider0);
    fixedDateTimeZone0.convertUTCToLocal((-338L));
    DateTimeZone.setProvider(zoneInfoProvider0);
    ((DateTimeZone) fixedDateTimeZone0).writeReplace();
    String string0 = fixedDateTimeZone0.getName((-338L));
    assertEquals(""-455:00"", string0);
}","/**
 * Gets the long name of this datetime zone suitable for display using
 * the default locale.
 * <p>
 * If the name is not available for the locale, then this method returns a
 * string in the format <code>[+-]hh:mm</code>.
 *
 * @param instant  milliseconds from 1970-01-01T00:00:00Z to get the name for
 * @return the human-readable long name in the default locale
 */"
"public long convertUTCToLocal(long instantUTC) {
    int offset = getOffset(instantUTC);
    long instantLocal = instantUTC + offset;
    // If there is a sign change, but the two values have the same sign...
    if ((instantUTC ^ instantLocal) < 0 && (instantUTC ^ offset) >= 0) {
        throw new ArithmeticException(""Adding time zone offset caused overflow"");
    }
    return instantLocal;
}","public void test5098() throws Throwable {
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.forOffsetHours((-455));
    DateTimeZone.getDefault();
    ZoneInfoProvider zoneInfoProvider0 = (ZoneInfoProvider) DateTimeZone.getProvider();
    boolean boolean0 = fixedDateTimeZone0.isStandardOffset((-338L));
    DateTimeZone.setProvider(zoneInfoProvider0);
    fixedDateTimeZone0.convertUTCToLocal((-338L));
    DateTimeZone.setProvider(zoneInfoProvider0);
    ((DateTimeZone) fixedDateTimeZone0).writeReplace();
    String string0 = fixedDateTimeZone0.getName((-338L));
    long long0 = fixedDateTimeZone0.convertUTCToLocal((-455));
    assertEquals((-1638000455L), long0);
}","/**
 * Converts a standard UTC instant to a local instant with the same
 * local time. This conversion is used before performing a calculation
 * so that the calculation can be done using a simple local zone.
 *
 * @param instantUTC  the UTC instant to convert to local
 * @return the local instant with the same local time
 * @throws ArithmeticException if the result overflows a long
 * @since 1.5
 */"
"public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {
    if (hoursOffset == 0 && minutesOffset == 0) {
        return DateTimeZone.UTC;
    }
    if (minutesOffset < 0 || minutesOffset > 59) {
        throw new IllegalArgumentException(""Minutes out of range: "" + minutesOffset);
    }
    int offset = 0;
    try {
        int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);
        if (hoursInMinutes < 0) {
            minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);
        } else {
            minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);
        }
        offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);
    } catch (ArithmeticException ex) {
        throw new IllegalArgumentException(""Offset is too large"");
    }
    return forOffsetMillis(offset);
}","public void test5199() throws Throwable {
    int int0 = (-976);
    try {
        DateTimeZone.forOffsetHoursMinutes((-976), (-976));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Minutes out of range: -976
        //
        verifyException(""org.joda.time.DateTimeZone"", e);
    }
}","/**
 * Gets a time zone instance for the specified offset to UTC in hours and minutes.
 * This method assumes 60 minutes in an hour, and standard length minutes.
 * <p>
 * This factory is a convenient way of constructing zones with a fixed offset.
 * The minutes value is always positive and in the range 0 to 59.
 * If constructed with the values (-2, 30), the resulting zone is '-02:30'.
 *
 * @param hoursOffset  the offset in hours from UTC, from -23 to +23
 * @param minutesOffset  the offset in minutes from UTC, must be between 0 and 59 inclusive
 * @return the DateTimeZone object for the offset
 * @throws IllegalArgumentException if the offset or minute is too large or too small
 */"
"public static DateTimeZone forOffsetHours(int hoursOffset) throws IllegalArgumentException {
    return forOffsetHoursMinutes(hoursOffset, 0);
}","public void test52100() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    dateTimeZone0.toTimeZone();
    DateTimeZone.getDefault();
    DateTimeZone.getDefault();
    try {
        DateTimeZone.forOffsetHours((-4460));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Offset is too large
        //
        verifyException(""org.joda.time.DateTimeZone"", e);
    }
}","/**
 * Gets a time zone instance for the specified offset to UTC in hours.
 * This method assumes standard length hours.
 * <p>
 * This factory is a convenient way of constructing zones with a fixed offset.
 *
 * @param hoursOffset  the offset in hours from UTC, from -23 to +23
 * @return the DateTimeZone object for the offset
 * @throws IllegalArgumentException if the offset is too large or too small
 */"
"public String toString() {
    return getID();
}","public void test53101() throws Throwable {
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.forOffsetMillis((-942));
    ((DateTimeZone) fixedDateTimeZone0).writeReplace();
    assertEquals(""-00:00:00.942"", fixedDateTimeZone0.toString());
}","/**
 * Gets the datetime zone as a string, which is simply its ID.
 * @return the id of the zone
 */"
"//-----------------------------------------------------------------------
/**
 * Gets a time zone instance for the specified time zone id.
 * <p>
 * The time zone id may be one of those returned by getAvailableIDs.
 * Short ids, as accepted by {@link java.util.TimeZone}, are not accepted.
 * All IDs must be specified in the long format.
 * The exception is UTC, which is an acceptable id.
 * <p>
 * Alternatively a locale independent, fixed offset, datetime zone can
 * be specified. The form <code>[+-]hh:mm</code> can be used.
 *
 * @param id  the ID of the datetime zone, null means default
 * @return the DateTimeZone object for the ID
 * @throws IllegalArgumentException if the ID is not recognised
 */
@FromString
public static DateTimeZone forID(String id) {
    if (id == null) {
        return getDefault();
    }
    if (id.equals(""UTC"")) {
        return DateTimeZone.UTC;
    }
    DateTimeZone zone = cProvider.getZone(id);
    if (zone != null) {
        return zone;
    }
    if (id.startsWith(""+"") || id.startsWith(""-"")) {
        int offset = parseOffset(id);
        if (offset == 0L) {
            return DateTimeZone.UTC;
        } else {
            id = printOffset(offset);
            return fixedOffsetZone(id, offset);
        }
    }
    throw new IllegalArgumentException(""The datetime zone id '"" + id + ""' is not recognised"");
}","public void test54102() throws Throwable {
    String string0 = ""Adding time zone offset caused overflow"";
    // Undeclared exception!
    try {
        DateTimeZone.forID(""Adding time zone offset caused overflow"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The datetime zone id 'Adding time zone offset caused overflow' is not recognised
        //
        verifyException(""org.joda.time.DateTimeZone"", e);
    }
}",""
"public String toString() {
    return getID();
}","public void test55103() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(43);
    assertEquals(""+43:00"", dateTimeZone0.toString());
}","/**
 * Gets the datetime zone as a string, which is simply its ID.
 * @return the id of the zone
 */"
"public static DateTimeZone forOffsetHours(int hoursOffset) throws IllegalArgumentException {
    return forOffsetHoursMinutes(hoursOffset, 0);
}","public void test56104() throws Throwable {
    int int0 = (-2208);
    try {
        DateTimeZone.forOffsetHours((-2208));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Offset is too large
        //
        verifyException(""org.joda.time.DateTimeZone"", e);
    }
}","/**
 * Gets a time zone instance for the specified offset to UTC in hours.
 * This method assumes standard length hours.
 * <p>
 * This factory is a convenient way of constructing zones with a fixed offset.
 *
 * @param hoursOffset  the offset in hours from UTC, from -23 to +23
 * @return the DateTimeZone object for the offset
 * @throws IllegalArgumentException if the offset is too large or too small
 */"
"public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {
    if (hoursOffset == 0 && minutesOffset == 0) {
        return DateTimeZone.UTC;
    }
    if (minutesOffset < 0 || minutesOffset > 59) {
        throw new IllegalArgumentException(""Minutes out of range: "" + minutesOffset);
    }
    int offset = 0;
    try {
        int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);
        if (hoursInMinutes < 0) {
            minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);
        } else {
            minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);
        }
        offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);
    } catch (ArithmeticException ex) {
        throw new IllegalArgumentException(""Offset is too large"");
    }
    return forOffsetMillis(offset);
}","public void test57105() throws Throwable {
    FileSystemHandling.createFolder((EvoSuiteFile) null);
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    fixedDateTimeZone0.getOffset(36600010L);
    TimeZone timeZone0 = TimeZone.getTimeZone(""U=N<5e"");
    DateTimeZone.forTimeZone(timeZone0);
    fixedDateTimeZone0.UTC.getStandardOffset(0);
    fixedDateTimeZone0.getOffsetFromLocal((-1204L));
    DateTimeZone.setDefault(fixedDateTimeZone0);
    FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
    try {
        DateTimeZone.forOffsetHoursMinutes((-230), 60);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Minutes out of range: 60
        //
        verifyException(""org.joda.time.DateTimeZone"", e);
    }
}","/**
 * Gets a time zone instance for the specified offset to UTC in hours and minutes.
 * This method assumes 60 minutes in an hour, and standard length minutes.
 * <p>
 * This factory is a convenient way of constructing zones with a fixed offset.
 * The minutes value is always positive and in the range 0 to 59.
 * If constructed with the values (-2, 30), the resulting zone is '-02:30'.
 *
 * @param hoursOffset  the offset in hours from UTC, from -23 to +23
 * @param minutesOffset  the offset in minutes from UTC, must be between 0 and 59 inclusive
 * @return the DateTimeZone object for the offset
 * @throws IllegalArgumentException if the offset or minute is too large or too small
 */"
"//-----------------------------------------------------------------------
/**
 * Gets a time zone instance for the specified time zone id.
 * <p>
 * The time zone id may be one of those returned by getAvailableIDs.
 * Short ids, as accepted by {@link java.util.TimeZone}, are not accepted.
 * All IDs must be specified in the long format.
 * The exception is UTC, which is an acceptable id.
 * <p>
 * Alternatively a locale independent, fixed offset, datetime zone can
 * be specified. The form <code>[+-]hh:mm</code> can be used.
 *
 * @param id  the ID of the datetime zone, null means default
 * @return the DateTimeZone object for the ID
 * @throws IllegalArgumentException if the ID is not recognised
 */
@FromString
public static DateTimeZone forID(String id) {
    if (id == null) {
        return getDefault();
    }
    if (id.equals(""UTC"")) {
        return DateTimeZone.UTC;
    }
    DateTimeZone zone = cProvider.getZone(id);
    if (zone != null) {
        return zone;
    }
    if (id.startsWith(""+"") || id.startsWith(""-"")) {
        int offset = parseOffset(id);
        if (offset == 0L) {
            return DateTimeZone.UTC;
        } else {
            id = printOffset(offset);
            return fixedOffsetZone(id, offset);
        }
    }
    throw new IllegalArgumentException(""The datetime zone id '"" + id + ""' is not recognised"");
}","public void test58106() throws Throwable {
    // Undeclared exception!
    try {
        DateTimeZone.forID(""Ci.=p3yTl"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The datetime zone id 'Ci.=p3yTl' is not recognised
        //
        verifyException(""org.joda.time.DateTimeZone"", e);
    }
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the default time zone.
 * <p>
 * The default time zone is derived from the system property {@code user.timezone}.
 * If that is {@code null} or is not a valid identifier, then the value of the
 * JDK {@code TimeZone} default is converted. If that fails, {@code UTC} is used.
 * <p>
 * NOTE: If the {@code java.util.TimeZone} default is updated <i>after</i> calling this
 * method, then the change will not be picked up here.
 *
 * @return the default datetime zone object
 */
public static DateTimeZone getDefault() {
    DateTimeZone zone = cDefault;
    if (zone == null) {
        synchronized (DateTimeZone.class) {
            zone = cDefault;
            if (zone == null) {
                DateTimeZone temp = null;
                try {
                    try {
                        String id = System.getProperty(""user.timezone"");
                        if (id != null) {
                            // null check avoids stack overflow
                            temp = forID(id);
                        }
                    } catch (RuntimeException ex) {
                        // ignored
                    }
                    if (temp == null) {
                        temp = forTimeZone(TimeZone.getDefault());
                    }
                } catch (IllegalArgumentException ex) {
                    // ignored
                }
                if (temp == null) {
                    temp = UTC;
                }
                cDefault = zone = temp;
            }
        }
    }
    return zone;
}","public void test60108() throws Throwable {
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    DateTimeUtils.setCurrentMillisFixed(0L);
    Locale locale0 = Locale.forLanguageTag(""A_c*d}ih>cx"");
    fixedDateTimeZone0.isFixed();
    Locale locale1 = Locale.SIMPLIFIED_CHINESE;
    locale0.getDisplayCountry(locale1);
    fixedDateTimeZone0.getShortName(0L, locale0);
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
    dateTimeZone0.equals(""A_c*d}ih>cx"");
    DateTimeUtils.setCurrentMillisSystem();
    fixedDateTimeZone0.getOffsetFromLocal(0L);
    dateTimeZone0.getStandardOffset(0);
    DateTimeUtils.setCurrentMillisOffset(0);
    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetHours(0);
    fixedDateTimeZone0.nextTransition((-1L));
    DateTimeZone dateTimeZone2 = DateTimeZone.getDefault();
    assertNotNull(dateTimeZone2);
}",""
"public long adjustOffset(long instant, boolean earlierOrLater) {
    // a bit messy, but will work in all non-pathological cases
    // evaluate 3 hours before and after to work out if anything is happening
    long instantBefore = instant - 3 * DateTimeConstants.MILLIS_PER_HOUR;
    long instantAfter = instant + 3 * DateTimeConstants.MILLIS_PER_HOUR;
    long offsetBefore = getOffset(instantBefore);
    long offsetAfter = getOffset(instantAfter);
    if (offsetBefore <= offsetAfter) {
        // not an overlap (less than is a gap, equal is normal case)
        return instant;
    }
    // work out range of instants that have duplicate local times
    long diff = offsetBefore - offsetAfter;
    long transition = nextTransition(instantBefore);
    long overlapStart = transition - diff;
    long overlapEnd = transition + diff;
    if (instant < overlapStart || instant >= overlapEnd) {
        // not an overlap
        return instant;
    }
    // calculate result
    long afterStart = instant - overlapStart;
    if (afterStart >= diff) {
        // currently in later offset
        return earlierOrLater ? instant : instant - diff;
    } else {
        // currently in earlier offset
        return earlierOrLater ? instant + diff : instant;
    }
}","public void test60109() throws Throwable {
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    DateTimeUtils.setCurrentMillisFixed(0L);
    Locale locale0 = Locale.forLanguageTag(""A_c*d}ih>cx"");
    fixedDateTimeZone0.isFixed();
    Locale locale1 = Locale.SIMPLIFIED_CHINESE;
    locale0.getDisplayCountry(locale1);
    fixedDateTimeZone0.getShortName(0L, locale0);
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
    dateTimeZone0.equals(""A_c*d}ih>cx"");
    DateTimeUtils.setCurrentMillisSystem();
    fixedDateTimeZone0.getOffsetFromLocal(0L);
    dateTimeZone0.getStandardOffset(0);
    DateTimeUtils.setCurrentMillisOffset(0);
    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetHours(0);
    fixedDateTimeZone0.nextTransition((-1L));
    DateTimeZone dateTimeZone2 = DateTimeZone.getDefault();
    long long0 = dateTimeZone2.adjustOffset(0, false);
    assertEquals(0L, long0);
}","/**
 * Adjusts the offset to be the earlier or later one during an overlap.
 *
 * @param instant  the instant to adjust
 * @param earlierOrLater  false for earlier, true for later
 * @return the adjusted instant millis
 */"
"public long getMillisKeepLocal(DateTimeZone newZone, long oldInstant) {
    if (newZone == null) {
        newZone = DateTimeZone.getDefault();
    }
    if (newZone == this) {
        return oldInstant;
    }
    long instantLocal = convertUTCToLocal(oldInstant);
    return newZone.convertLocalToUTC(instantLocal, false, oldInstant);
}","public void test60110() throws Throwable {
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    DateTimeUtils.setCurrentMillisFixed(0L);
    Locale locale0 = Locale.forLanguageTag(""A_c*d}ih>cx"");
    fixedDateTimeZone0.isFixed();
    Locale locale1 = Locale.SIMPLIFIED_CHINESE;
    locale0.getDisplayCountry(locale1);
    fixedDateTimeZone0.getShortName(0L, locale0);
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
    dateTimeZone0.equals(""A_c*d}ih>cx"");
    DateTimeUtils.setCurrentMillisSystem();
    fixedDateTimeZone0.getOffsetFromLocal(0L);
    dateTimeZone0.getStandardOffset(0);
    DateTimeUtils.setCurrentMillisOffset(0);
    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetHours(0);
    fixedDateTimeZone0.nextTransition((-1L));
    DateTimeZone dateTimeZone2 = DateTimeZone.getDefault();
    long long0 = dateTimeZone2.adjustOffset(0, false);
    long long1 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, 365L);
    assertEquals(365L, long1);
}","/**
 * Gets the millisecond instant in another zone keeping the same local time.
 * <p>
 * The conversion is performed by converting the specified UTC millis to local
 * millis in this zone, then converting back to UTC millis in the new zone.
 *
 * @param newZone  the new zone, null means default
 * @param oldInstant  the UTC millisecond instant to convert
 * @return the UTC millisecond instant with the same local time in the new zone
 */"
"public final String getShortName(long instant) {
    return getShortName(instant, null);
}","public void test60111() throws Throwable {
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    DateTimeUtils.setCurrentMillisFixed(0L);
    Locale locale0 = Locale.forLanguageTag(""A_c*d}ih>cx"");
    fixedDateTimeZone0.isFixed();
    Locale locale1 = Locale.SIMPLIFIED_CHINESE;
    locale0.getDisplayCountry(locale1);
    fixedDateTimeZone0.getShortName(0L, locale0);
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
    dateTimeZone0.equals(""A_c*d}ih>cx"");
    DateTimeUtils.setCurrentMillisSystem();
    fixedDateTimeZone0.getOffsetFromLocal(0L);
    dateTimeZone0.getStandardOffset(0);
    DateTimeUtils.setCurrentMillisOffset(0);
    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetHours(0);
    fixedDateTimeZone0.nextTransition((-1L));
    DateTimeZone dateTimeZone2 = DateTimeZone.getDefault();
    long long0 = dateTimeZone2.adjustOffset(0, false);
    long long1 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, 365L);
    fixedDateTimeZone0.toString();
    DateTimeZone dateTimeZone3 = DateTimeZone.forOffsetHours(0);
    dateTimeZone3.equals("""");
    dateTimeZone3.toTimeZone();
    DateTimeZone.setDefault(dateTimeZone3);
    String string0 = dateTimeZone1.getShortName(2528L);
    assertEquals(""+00:00"", string0);
}","/**
 * Gets the short name of this datetime zone suitable for display using
 * the default locale.
 * <p>
 * If the name is not available for the locale, then this method returns a
 * string in the format <code>[+-]hh:mm</code>.
 *
 * @param instant  milliseconds from 1970-01-01T00:00:00Z to get the name for
 * @return the human-readable short name in the default locale
 */"
"@SuppressWarnings(""deprecation"")
public static LocalDateTime fromDateFields(Date date) {
    if (date == null) {
        throw new IllegalArgumentException(""The date must not be null"");
    }
    if (date.getTime() < 0) {
        // handle years in era BC
        GregorianCalendar cal = new GregorianCalendar();
        cal.setTime(date);
        return fromCalendarFields(cal);
    }
    return new LocalDateTime(date.getYear() + 1900, date.getMonth() + 1, date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), (((int) (date.getTime() % 1000)) + 1000) % 1000);
}","public void test61112() throws Throwable {
    int int0 = 1;
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
    Interval interval0 = new Interval((-272L), 10800000L);
    Duration duration0 = interval0.toDuration();
    dateTimeZone0.getNameKey((-352L));
    interval0.withEndMillis(1);
    DateTime dateTime0 = interval0.getEnd();
    dateTime0.withDayOfYear(1);
    dateTime0.getDayOfMonth();
    interval0.withDurationBeforeEnd(duration0);
    dateTime0.withZoneRetainFields(dateTimeZone0);
    dateTimeZone0.getOffset((ReadableInstant) dateTime0);
    DateTimeZone.getAvailableIDs();
    dateTimeZone0.convertUTCToLocal((-352L));
    dateTimeZone0.isStandardOffset((-1611L));
    dateTimeZone0.previousTransition(0L);
    dateTimeZone0.isFixed();
    DateTimeZone.getDefault();
    // Undeclared exception!
    try {
        LocalDateTime.fromDateFields((Date) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.joda.time.LocalDateTime"", e);
    }
}","/**
 * Constructs a LocalDateTime from a <code>java.util.Date</code>
 * using exactly the same field values.
 * <p>
 * Each field is queried from the Date and assigned to the LocalDateTime.
 * This is useful if you have been using the Date as a local date,
 * ignoring the zone.
 * <p>
 * One advantage of this method is that this method is unaffected if the
 * version of the time zone data differs between the JDK and Joda-Time.
 * That is because the local field values are transferred, calculated using
 * the JDK time zone data and without using the Joda-Time time zone data.
 * <p>
 * This factory method always creates a LocalDateTime with ISO chronology.
 *
 * @param date  the Date to extract fields from, not null
 * @return the created local date-time, not null
 * @throws IllegalArgumentException if the calendar is null
 * @throws IllegalArgumentException if the date is invalid for the ISO chronology
 */"
"public static DateTimeZone forOffsetHours(int hoursOffset) throws IllegalArgumentException {
    return forOffsetHoursMinutes(hoursOffset, 0);
}","public void test62113() throws Throwable {
    int int0 = 3487;
    try {
        DateTimeZone.forOffsetHours(3487);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Offset is too large
        //
        verifyException(""org.joda.time.DateTimeZone"", e);
    }
}","/**
 * Gets a time zone instance for the specified offset to UTC in hours.
 * This method assumes standard length hours.
 * <p>
 * This factory is a convenient way of constructing zones with a fixed offset.
 *
 * @param hoursOffset  the offset in hours from UTC, from -23 to +23
 * @return the DateTimeZone object for the offset
 * @throws IllegalArgumentException if the offset is too large or too small
 */"
"public final String getName(long instant) {
    return getName(instant, null);
}","public void test63114() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forID(""America/Los_Angeles"");
    String string0 = dateTimeZone0.UTC.getName(3600000L);
    assertEquals(""+00:00"", string0);
}","/**
 * Gets the long name of this datetime zone suitable for display using
 * the default locale.
 * <p>
 * If the name is not available for the locale, then this method returns a
 * string in the format <code>[+-]hh:mm</code>.
 *
 * @param instant  milliseconds from 1970-01-01T00:00:00Z to get the name for
 * @return the human-readable long name in the default locale
 */"
"public long convertLocalToUTC(long instantLocal, boolean strict) {
    // get the offset at instantLocal (first estimate)
    int offsetLocal = getOffset(instantLocal);
    // adjust instantLocal using the estimate and recalc the offset
    int offset = getOffset(instantLocal - offsetLocal);
    // if the offsets differ, we must be near a DST boundary
    if (offsetLocal != offset) {
        // if strict then always check if in DST gap
        // otherwise only check if zone in Western hemisphere (as the
        // value of offset is already correct for Eastern hemisphere)
        if (strict || offsetLocal < 0) {
            // determine if we are in the DST gap
            long nextLocal = nextTransition(instantLocal - offsetLocal);
            if (nextLocal == (instantLocal - offsetLocal)) {
                nextLocal = Long.MAX_VALUE;
            }
            long nextAdjusted = nextTransition(instantLocal - offset);
            if (nextAdjusted == (instantLocal - offset)) {
                nextAdjusted = Long.MAX_VALUE;
            }
            if (nextLocal != nextAdjusted) {
                // yes we are in the DST gap
                if (strict) {
                    // DST gap is not acceptable
                    throw new IllegalInstantException(instantLocal, getID());
                } else {
                    // DST gap is acceptable, but for the Western hemisphere
                    // the offset is wrong and will result in local times
                    // before the cutover so use the offsetLocal instead
                    offset = offsetLocal;
                }
            }
        }
    }
    // check for overflow
    long instantUTC = instantLocal - offset;
    // If there is a sign change, but the two values have different signs...
    if ((instantLocal ^ instantUTC) < 0 && (instantLocal ^ offset) < 0) {
        throw new ArithmeticException(""Subtracting time zone offset caused overflow"");
    }
    return instantUTC;
}","public void test63115() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forID(""America/Los_Angeles"");
    String string0 = dateTimeZone0.UTC.getName(3600000L);
    DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
    DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
    dateTimeZone0.UTC.writeReplace();
    UTCProvider uTCProvider0 = new UTCProvider();
    DateTimeZone.setProvider(uTCProvider0);
    dateTimeZone0.isStandardOffset(0L);
    DefaultNameProvider defaultNameProvider0 = new DefaultNameProvider();
    DateTimeUtils.setCurrentMillisOffset(604800000L);
    DateTimeZone.setNameProvider(defaultNameProvider0);
    dateTimeZone0.toString();
    dateTimeZone0.getShortName(0L);
    long long0 = dateTimeZone0.UTC.convertLocalToUTC(0L, false);
    assertEquals(0L, long0);
}","/**
 * Converts a local instant to a standard UTC instant with the same
 * local time. This conversion is used after performing a calculation
 * where the calculation was done using a simple local zone.
 *
 * @param instantLocal  the local instant to convert to UTC
 * @param strict  whether the conversion should reject non-existent local times
 * @return the UTC instant with the same local time,
 * @throws ArithmeticException if the result overflows a long
 * @throws IllegalInstantException if the zone has no equivalent local time
 * @since 1.5
 */"
"public String getShortName(long instant, Locale locale) {
    if (locale == null) {
        locale = Locale.getDefault();
    }
    String nameKey = getNameKey(instant);
    if (nameKey == null) {
        return iID;
    }
    String name = cNameProvider.getShortName(locale, iID, nameKey);
    if (name != null) {
        return name;
    }
    return printOffset(getOffset(instant));
}","public void test63116() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forID(""America/Los_Angeles"");
    String string0 = dateTimeZone0.UTC.getName(3600000L);
    DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
    DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
    dateTimeZone0.UTC.writeReplace();
    UTCProvider uTCProvider0 = new UTCProvider();
    DateTimeZone.setProvider(uTCProvider0);
    dateTimeZone0.isStandardOffset(0L);
    DefaultNameProvider defaultNameProvider0 = new DefaultNameProvider();
    DateTimeUtils.setCurrentMillisOffset(604800000L);
    DateTimeZone.setNameProvider(defaultNameProvider0);
    dateTimeZone0.toString();
    dateTimeZone0.getShortName(0L);
    long long0 = dateTimeZone0.UTC.convertLocalToUTC(0L, false);
    defaultNameProvider0.getName((Locale) null, (String) null, ""America/Los_Angeles"");
    String string1 = dateTimeZone0.getShortName(0L, (Locale) null);
    assertEquals(""-08:00"", string1);
}","/**
 * Gets the short name of this datetime zone suitable for display using
 * the specified locale.
 * <p>
 * If the name is not available for the locale, then this method returns a
 * string in the format <code>[+-]hh:mm</code>.
 *
 * @param instant  milliseconds from 1970-01-01T00:00:00Z to get the name for
 * @param locale  the locale to get the name for
 * @return the human-readable short name in the specified locale
 */"
"//-----------------------------------------------------------------------
/**
 * Gets the name provider factory.
 * <p>
 * The name provider is a pluggable instance factory that supplies the
 * names of each DateTimeZone.
 *
 * @return the provider
 */
public static NameProvider getNameProvider() {
    return cNameProvider;
}","public void test63117() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forID(""America/Los_Angeles"");
    String string0 = dateTimeZone0.UTC.getName(3600000L);
    DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
    DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
    dateTimeZone0.UTC.writeReplace();
    UTCProvider uTCProvider0 = new UTCProvider();
    DateTimeZone.setProvider(uTCProvider0);
    dateTimeZone0.isStandardOffset(0L);
    DefaultNameProvider defaultNameProvider0 = new DefaultNameProvider();
    DateTimeUtils.setCurrentMillisOffset(604800000L);
    DateTimeZone.setNameProvider(defaultNameProvider0);
    dateTimeZone0.toString();
    dateTimeZone0.getShortName(0L);
    long long0 = dateTimeZone0.UTC.convertLocalToUTC(0L, false);
    defaultNameProvider0.getName((Locale) null, (String) null, ""America/Los_Angeles"");
    String string1 = dateTimeZone0.getShortName(0L, (Locale) null);
    defaultNameProvider0.getName((Locale) null, (String) null, ""America/Los_Angeles"");
    dateTimeZone0.nextTransition(0L);
    DateTimeZone.setNameProvider(defaultNameProvider0);
    NameProvider nameProvider0 = DateTimeZone.getNameProvider();
    assertSame(nameProvider0, defaultNameProvider0);
}",""
"public long convertUTCToLocal(long instantUTC) {
    int offset = getOffset(instantUTC);
    long instantLocal = instantUTC + offset;
    // If there is a sign change, but the two values have the same sign...
    if ((instantUTC ^ instantLocal) < 0 && (instantUTC ^ offset) >= 0) {
        throw new ArithmeticException(""Adding time zone offset caused overflow"");
    }
    return instantLocal;
}","public void test63118() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forID(""America/Los_Angeles"");
    String string0 = dateTimeZone0.UTC.getName(3600000L);
    DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
    DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
    dateTimeZone0.UTC.writeReplace();
    UTCProvider uTCProvider0 = new UTCProvider();
    DateTimeZone.setProvider(uTCProvider0);
    dateTimeZone0.isStandardOffset(0L);
    DefaultNameProvider defaultNameProvider0 = new DefaultNameProvider();
    DateTimeUtils.setCurrentMillisOffset(604800000L);
    DateTimeZone.setNameProvider(defaultNameProvider0);
    dateTimeZone0.toString();
    dateTimeZone0.getShortName(0L);
    long long0 = dateTimeZone0.UTC.convertLocalToUTC(0L, false);
    defaultNameProvider0.getName((Locale) null, (String) null, ""America/Los_Angeles"");
    String string1 = dateTimeZone0.getShortName(0L, (Locale) null);
    defaultNameProvider0.getName((Locale) null, (String) null, ""America/Los_Angeles"");
    dateTimeZone0.nextTransition(0L);
    DateTimeZone.setNameProvider(defaultNameProvider0);
    NameProvider nameProvider0 = DateTimeZone.getNameProvider();
    long long1 = dateTimeZone0.convertUTCToLocal(0L);
    assertEquals((-28800000L), long1);
}","/**
 * Converts a standard UTC instant to a local instant with the same
 * local time. This conversion is used before performing a calculation
 * so that the calculation can be done using a simple local zone.
 *
 * @param instantUTC  the UTC instant to convert to local
 * @return the local instant with the same local time
 * @throws ArithmeticException if the result overflows a long
 * @since 1.5
 */"
"//    System.out.println(new DateTime(transitionStart, DateTimeZone.UTC) + "" "" + new DateTime(transitionStart, this));
//-----------------------------------------------------------------------
/**
 * Returns true if this time zone has no transitions.
 *
 * @return true if no transitions
 */
public abstract boolean isFixed();","public void test63119() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forID(""America/Los_Angeles"");
    String string0 = dateTimeZone0.UTC.getName(3600000L);
    DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
    DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
    dateTimeZone0.UTC.writeReplace();
    UTCProvider uTCProvider0 = new UTCProvider();
    DateTimeZone.setProvider(uTCProvider0);
    dateTimeZone0.isStandardOffset(0L);
    DefaultNameProvider defaultNameProvider0 = new DefaultNameProvider();
    DateTimeUtils.setCurrentMillisOffset(604800000L);
    DateTimeZone.setNameProvider(defaultNameProvider0);
    dateTimeZone0.toString();
    dateTimeZone0.getShortName(0L);
    long long0 = dateTimeZone0.UTC.convertLocalToUTC(0L, false);
    defaultNameProvider0.getName((Locale) null, (String) null, ""America/Los_Angeles"");
    String string1 = dateTimeZone0.getShortName(0L, (Locale) null);
    defaultNameProvider0.getName((Locale) null, (String) null, ""America/Los_Angeles"");
    dateTimeZone0.nextTransition(0L);
    DateTimeZone.setNameProvider(defaultNameProvider0);
    NameProvider nameProvider0 = DateTimeZone.getNameProvider();
    long long1 = dateTimeZone0.convertUTCToLocal(0L);
    boolean boolean0 = dateTimeZone0.isFixed();
    assertFalse(boolean0);
}",""
"public MutableDateTime parseMutableDateTime(String text) {
    DateTimeParser parser = requireParser();
    Chronology chrono = selectChronology(null);
    DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);
    int newPos = parser.parseInto(bucket, text, 0);
    if (newPos >= 0) {
        if (newPos >= text.length()) {
            long millis = bucket.computeMillis(true, text);
            if (iOffsetParsed && bucket.getOffsetInteger() != null) {
                int parsedOffset = bucket.getOffsetInteger();
                DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);
                chrono = chrono.withZone(parsedZone);
            } else if (bucket.getZone() != null) {
                chrono = chrono.withZone(bucket.getZone());
            }
            MutableDateTime dt = new MutableDateTime(millis, chrono);
            if (iZone != null) {
                dt.setZone(iZone);
            }
            return dt;
        }
    } else {
        newPos = ~newPos;
    }
    throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));
}","public void test64120() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetHours(0);
    DefaultNameProvider defaultNameProvider0 = new DefaultNameProvider();
    DateTimeZone.setNameProvider(defaultNameProvider0);
    dateTimeZone1.getStandardOffset(0);
    Locale locale0 = new Locale(""f (V"", "" - "", "" - "");
    dateTimeZone1.getName((long) 0, locale0);
    DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
    DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
    doReturn(910, 0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class), anyString(), anyInt());
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
    int int0 = 7678125;
    dateTimeZone1.getOffsetFromLocal(0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(7678125);
    Integer integer0 = new Integer(7678125);
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer0);
    dateTimeZone0.getShortName((long) 7678125);
    DateTimeZone.forOffsetMillis(910);
    DateTime dateTime0 = dateTimeFormatter2.parseDateTime(""America/Chicago"");
    dateTime0.minusMillis(2774);
    String string0 = ""^=Q+3q\\u==+CQ{fn<2"";
    // Undeclared exception!
    try {
        dateTimeFormatter2.parseMutableDateTime(string0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid format: \""^=Q+3q\\u==+CQ{fn<2\""
        //
        verifyException(""org.joda.time.format.DateTimeFormatter"", e);
    }
}","/**
 * Parses a date-time from the given text, returning a new MutableDateTime.
 * <p>
 * The parse will use the zone and chronology specified on this formatter.
 * <p>
 * If the text contains a time zone string then that will be taken into
 * account in adjusting the time of day as follows.
 * If the {@link #withOffsetParsed()} has been called, then the resulting
 * DateTime will have a fixed offset based on the parsed time zone.
 * Otherwise the resulting DateTime will have the zone of this formatter,
 * but the parsed zone may have caused the time to be adjusted.
 *
 * @param text  the text to parse, not null
 * @return the parsed date-time, never null
 * @throws UnsupportedOperationException if parsing is not supported
 * @throws IllegalArgumentException if the text to parse is invalid
 */"
"public String getShortName(long instant, Locale locale) {
    if (locale == null) {
        locale = Locale.getDefault();
    }
    String nameKey = getNameKey(instant);
    if (nameKey == null) {
        return iID;
    }
    String name = cNameProvider.getShortName(locale, iID, nameKey);
    if (name != null) {
        return name;
    }
    return printOffset(getOffset(instant));
}","public void test65122() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(60000);
    Integer integer0 = new Integer(60000);
    dateTimeZone1.UTC.previousTransition(100L);
    UTCProvider uTCProvider0 = new UTCProvider();
    uTCProvider0.getAvailableIDs();
    uTCProvider0.getAvailableIDs();
    DateTimeZone.setProvider(uTCProvider0);
    Locale locale0 = Locale.US;
    locale0.toLanguageTag();
    String string0 = dateTimeZone0.getShortName((-922L), locale0);
    assertNotNull(string0);
}","/**
 * Gets the short name of this datetime zone suitable for display using
 * the specified locale.
 * <p>
 * If the name is not available for the locale, then this method returns a
 * string in the format <code>[+-]hh:mm</code>.
 *
 * @param instant  milliseconds from 1970-01-01T00:00:00Z to get the name for
 * @param locale  the locale to get the name for
 * @return the human-readable short name in the specified locale
 */"
"public long convertUTCToLocal(long instantUTC) {
    int offset = getOffset(instantUTC);
    long instantLocal = instantUTC + offset;
    // If there is a sign change, but the two values have the same sign...
    if ((instantUTC ^ instantLocal) < 0 && (instantUTC ^ offset) >= 0) {
        throw new ArithmeticException(""Adding time zone offset caused overflow"");
    }
    return instantLocal;
}","public void test65124() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(60000);
    Integer integer0 = new Integer(60000);
    dateTimeZone1.UTC.previousTransition(100L);
    UTCProvider uTCProvider0 = new UTCProvider();
    uTCProvider0.getAvailableIDs();
    uTCProvider0.getAvailableIDs();
    DateTimeZone.setProvider(uTCProvider0);
    Locale locale0 = Locale.US;
    locale0.toLanguageTag();
    String string0 = dateTimeZone0.getShortName((-922L), locale0);
    long long0 = dateTimeZone0.convertUTCToLocal(0L);
    assertEquals((-28800000L), long0);
}","/**
 * Converts a standard UTC instant to a local instant with the same
 * local time. This conversion is used before performing a calculation
 * so that the calculation can be done using a simple local zone.
 *
 * @param instantUTC  the UTC instant to convert to local
 * @return the local instant with the same local time
 * @throws ArithmeticException if the result overflows a long
 * @since 1.5
 */"
"public long convertLocalToUTC(long instantLocal, boolean strict) {
    // get the offset at instantLocal (first estimate)
    int offsetLocal = getOffset(instantLocal);
    // adjust instantLocal using the estimate and recalc the offset
    int offset = getOffset(instantLocal - offsetLocal);
    // if the offsets differ, we must be near a DST boundary
    if (offsetLocal != offset) {
        // if strict then always check if in DST gap
        // otherwise only check if zone in Western hemisphere (as the
        // value of offset is already correct for Eastern hemisphere)
        if (strict || offsetLocal < 0) {
            // determine if we are in the DST gap
            long nextLocal = nextTransition(instantLocal - offsetLocal);
            if (nextLocal == (instantLocal - offsetLocal)) {
                nextLocal = Long.MAX_VALUE;
            }
            long nextAdjusted = nextTransition(instantLocal - offset);
            if (nextAdjusted == (instantLocal - offset)) {
                nextAdjusted = Long.MAX_VALUE;
            }
            if (nextLocal != nextAdjusted) {
                // yes we are in the DST gap
                if (strict) {
                    // DST gap is not acceptable
                    throw new IllegalInstantException(instantLocal, getID());
                } else {
                    // DST gap is acceptable, but for the Western hemisphere
                    // the offset is wrong and will result in local times
                    // before the cutover so use the offsetLocal instead
                    offset = offsetLocal;
                }
            }
        }
    }
    // check for overflow
    long instantUTC = instantLocal - offset;
    // If there is a sign change, but the two values have different signs...
    if ((instantLocal ^ instantUTC) < 0 && (instantLocal ^ offset) < 0) {
        throw new ArithmeticException(""Subtracting time zone offset caused overflow"");
    }
    return instantUTC;
}","public void test65125() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(60000);
    Integer integer0 = new Integer(60000);
    dateTimeZone1.UTC.previousTransition(100L);
    UTCProvider uTCProvider0 = new UTCProvider();
    uTCProvider0.getAvailableIDs();
    uTCProvider0.getAvailableIDs();
    DateTimeZone.setProvider(uTCProvider0);
    Locale locale0 = Locale.US;
    locale0.toLanguageTag();
    String string0 = dateTimeZone0.getShortName((-922L), locale0);
    long long0 = dateTimeZone0.convertUTCToLocal(0L);
    long long1 = dateTimeZone0.convertLocalToUTC(1L, true);
    assertEquals(28800001L, long1);
}","/**
 * Converts a local instant to a standard UTC instant with the same
 * local time. This conversion is used after performing a calculation
 * where the calculation was done using a simple local zone.
 *
 * @param instantLocal  the local instant to convert to UTC
 * @param strict  whether the conversion should reject non-existent local times
 * @return the UTC instant with the same local time,
 * @throws ArithmeticException if the result overflows a long
 * @throws IllegalInstantException if the zone has no equivalent local time
 * @since 1.5
 */"
"public abstract int getStandardOffset(long instant);","public void test65126() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(60000);
    Integer integer0 = new Integer(60000);
    dateTimeZone1.UTC.previousTransition(100L);
    UTCProvider uTCProvider0 = new UTCProvider();
    uTCProvider0.getAvailableIDs();
    uTCProvider0.getAvailableIDs();
    DateTimeZone.setProvider(uTCProvider0);
    Locale locale0 = Locale.US;
    locale0.toLanguageTag();
    String string0 = dateTimeZone0.getShortName((-922L), locale0);
    long long0 = dateTimeZone0.convertUTCToLocal(0L);
    long long1 = dateTimeZone0.convertLocalToUTC(1L, true);
    int int0 = dateTimeZone1.getStandardOffset(0L);
    assertEquals(60000, int0);
}","/**
 * Gets the standard millisecond offset to add to UTC to get local time,
 * when standard time is in effect.
 *
 * @param instant  milliseconds from 1970-01-01T00:00:00Z to get the offset for
 * @return the millisecond offset to add to UTC to get local time
 */"
"public String toString() {
    return getID();
}","public void test65127() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(60000);
    Integer integer0 = new Integer(60000);
    dateTimeZone1.UTC.previousTransition(100L);
    UTCProvider uTCProvider0 = new UTCProvider();
    uTCProvider0.getAvailableIDs();
    uTCProvider0.getAvailableIDs();
    DateTimeZone.setProvider(uTCProvider0);
    Locale locale0 = Locale.US;
    locale0.toLanguageTag();
    String string0 = dateTimeZone0.getShortName((-922L), locale0);
    long long0 = dateTimeZone0.convertUTCToLocal(0L);
    long long1 = dateTimeZone0.convertLocalToUTC(1L, true);
    int int0 = dateTimeZone1.getStandardOffset(0L);
    TimeZone timeZone0 = dateTimeZone1.toTimeZone();
    DateTimeZone dateTimeZone2 = DateTimeZone.forTimeZone(timeZone0);
    assertEquals(""+00:01"", dateTimeZone1.toString());
}","/**
 * Gets the datetime zone as a string, which is simply its ID.
 * @return the id of the zone
 */"
"public static DateTimeZone forTimeZone(TimeZone zone) {
    if (zone == null) {
        return getDefault();
    }
    final String id = zone.getID();
    if (id.equals(""UTC"")) {
        return DateTimeZone.UTC;
    }
    // Convert from old alias before consulting provider since they may differ.
    DateTimeZone dtz = null;
    String convId = getConvertedId(id);
    if (convId != null) {
        dtz = cProvider.getZone(convId);
    }
    if (dtz == null) {
        dtz = cProvider.getZone(id);
    }
    if (dtz != null) {
        return dtz;
    }
    // Support GMT+/-hh:mm formats
    if (convId == null) {
        convId = zone.getID();
        if (convId.startsWith(""GMT+"") || convId.startsWith(""GMT-"")) {
            convId = convId.substring(3);
            int offset = parseOffset(convId);
            if (offset == 0L) {
                return DateTimeZone.UTC;
            } else {
                convId = printOffset(offset);
                return fixedOffsetZone(convId, offset);
            }
        }
    }
    throw new IllegalArgumentException(""The datetime zone id '"" + id + ""' is not recognised"");
}","public void test65128() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(60000);
    Integer integer0 = new Integer(60000);
    dateTimeZone1.UTC.previousTransition(100L);
    UTCProvider uTCProvider0 = new UTCProvider();
    uTCProvider0.getAvailableIDs();
    uTCProvider0.getAvailableIDs();
    DateTimeZone.setProvider(uTCProvider0);
    Locale locale0 = Locale.US;
    locale0.toLanguageTag();
    String string0 = dateTimeZone0.getShortName((-922L), locale0);
    long long0 = dateTimeZone0.convertUTCToLocal(0L);
    long long1 = dateTimeZone0.convertLocalToUTC(1L, true);
    int int0 = dateTimeZone1.getStandardOffset(0L);
    TimeZone timeZone0 = dateTimeZone1.toTimeZone();
    DateTimeZone dateTimeZone2 = DateTimeZone.forTimeZone(timeZone0);
    assertSame(dateTimeZone2, dateTimeZone1);
}","/**
 * Gets a time zone instance for a JDK TimeZone.
 * <p>
 * DateTimeZone only accepts a subset of the IDs from TimeZone. The
 * excluded IDs are the short three letter form (except UTC). This
 * method will attempt to convert between time zones created using the
 * short IDs and the full version.
 * <p>
 * This method is not designed to parse time zones with rules created by
 * applications using <code>SimpleTimeZone</code> directly.
 *
 * @param zone  the zone to convert, null means default
 * @return the DateTimeZone object for the zone
 * @throws IllegalArgumentException if the zone is not recognised
 */"
"public static DateTimeZone forOffsetHours(int hoursOffset) throws IllegalArgumentException {
    return forOffsetHoursMinutes(hoursOffset, 0);
}","public void test66129() throws Throwable {
    DateTimeZone.getNameProvider();
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    long long0 = (-47L);
    dateTimeZone0.adjustOffset((-47L), false);
    Locale locale0 = Locale.ITALIAN;
    dateTimeZone0.getShortName((-47L), locale0);
    dateTimeZone0.convertLocalToUTC((-47L), false);
    UTCProvider uTCProvider0 = new UTCProvider();
    dateTimeZone0.equals(uTCProvider0);
    dateTimeZone0.getID();
    JulianChronology.getInstance(dateTimeZone0);
    try {
        DateTimeZone.forOffsetHours(1822);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Offset is too large
        //
        verifyException(""org.joda.time.DateTimeZone"", e);
    }
}","/**
 * Gets a time zone instance for the specified offset to UTC in hours.
 * This method assumes standard length hours.
 * <p>
 * This factory is a convenient way of constructing zones with a fixed offset.
 *
 * @param hoursOffset  the offset in hours from UTC, from -23 to +23
 * @return the DateTimeZone object for the offset
 * @throws IllegalArgumentException if the offset is too large or too small
 */"
