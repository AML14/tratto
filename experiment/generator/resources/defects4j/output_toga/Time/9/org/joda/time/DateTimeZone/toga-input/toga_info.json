{
  "test2544" : {
    "methodSignature" : "public boolean isLocalDateTimeGap(LocalDateTime localDateTime)",
    "methodName" : "isLocalDateTimeGap",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2544() throws Throwable {\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) fixedDateTimeZone0);\n    LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);\n    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(lenientChronology0, fixedDateTimeZone0);\n    DateTimeZone dateTimeZone0 = zonedChronology0.getZone();\n    LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);\n    LocalDateTime localDateTime1 = localDateTime0.withMonthOfYear(1);\n    boolean boolean0 = dateTimeZone0.isLocalDateTimeGap(localDateTime1);\n}",
    "testName" : "test2544"
  },
  "test3358" : {
    "methodSignature" : "public int getOffsetFromLocal(long instantLocal)",
    "methodName" : "getOffsetFromLocal",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3358() throws Throwable {\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();\n    dateTimeZone0.UTC.adjustOffset(1, true);\n    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis((-216));\n    Locale locale0 = Locale.CANADA;\n    dateTimeZone0.getName(0L, locale0);\n    Locale locale1 = Locale.FRANCE;\n    dateTimeZone0.getName(0L, locale1);\n    long long0 = dateTimeZone0.convertLocalToUTC((-1107L), true);\n    TimeZone timeZone0 = TimeZone.getTimeZone(\"\");\n    dateTimeZone0.UTC.toTimeZone();\n    DateTimeZone dateTimeZone2 = DateTimeZone.forTimeZone(timeZone0);\n    LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone1);\n    dateTimeZone2.UTC.isLocalDateTimeGap(localDateTime0);\n    DateTimeZone.getAvailableIDs();\n    String string0 = dateTimeZone0.getShortName(0L);\n    dateTimeZone2.previousTransition(0L);\n    DateTimeZone dateTimeZone3 = DateTimeZone.forOffsetMillis((-1858));\n    dateTimeZone3.UTC.getOffset((long) 1);\n    UTCProvider uTCProvider0 = new UTCProvider();\n    DateTimeZone.setProvider(uTCProvider0);\n    dateTimeZone3.nextTransition(1L);\n    DateTimeZone.getProvider();\n    dateTimeZone2.getNameKey(1L);\n    dateTimeZone0.isLocalDateTimeGap(localDateTime0);\n    int int0 = dateTimeZone1.getOffsetFromLocal(0L);\n}",
    "testName" : "test3358"
  },
  "test1730" : {
    "methodSignature" : "public final String getName(long instant)",
    "methodName" : "getName",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1730() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    UTCProvider uTCProvider0 = new UTCProvider();\n    uTCProvider0.getZone(\"(r\");\n    long long0 = dateTimeZone0.getMillisKeepLocal((DateTimeZone) null, (-657L));\n    dateTimeZone0.getOffset((-427L));\n    dateTimeZone0.getNameKey((-427L));\n    dateTimeZone0.getOffsetFromLocal((-28800000));\n    dateTimeZone0.UTC.getStandardOffset(100000000000000000L);\n    dateTimeZone0.getName((-3192L));\n    FileSystemHandling.appendStringToFile((EvoSuiteFile) null, \"+Y\");\n    dateTimeZone0.getOffsetFromLocal((-3192L));\n    String string0 = dateTimeZone0.getName(45155216L);\n}",
    "testName" : "test1730"
  },
  "test3357" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3357() throws Throwable {\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();\n    dateTimeZone0.UTC.adjustOffset(1, true);\n    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis((-216));\n    Locale locale0 = Locale.CANADA;\n    dateTimeZone0.getName(0L, locale0);\n    Locale locale1 = Locale.FRANCE;\n    dateTimeZone0.getName(0L, locale1);\n    long long0 = dateTimeZone0.convertLocalToUTC((-1107L), true);\n    TimeZone timeZone0 = TimeZone.getTimeZone(\"\");\n    dateTimeZone0.UTC.toTimeZone();\n    DateTimeZone dateTimeZone2 = DateTimeZone.forTimeZone(timeZone0);\n    LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone1);\n    dateTimeZone2.UTC.isLocalDateTimeGap(localDateTime0);\n    DateTimeZone.getAvailableIDs();\n    String string0 = dateTimeZone0.getShortName(0L);\n    dateTimeZone2.previousTransition(0L);\n    DateTimeZone dateTimeZone3 = DateTimeZone.forOffsetMillis((-1858));\n    dateTimeZone3.UTC.getOffset((long) 1);\n    UTCProvider uTCProvider0 = new UTCProvider();\n    DateTimeZone.setProvider(uTCProvider0);\n    dateTimeZone3.nextTransition(1L);\n    dateTimeZone3.toString();\n}",
    "testName" : "test3357"
  },
  "test3359" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3359() throws Throwable {\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();\n    dateTimeZone0.UTC.adjustOffset(1, true);\n    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis((-216));\n    Locale locale0 = Locale.CANADA;\n    dateTimeZone0.getName(0L, locale0);\n    Locale locale1 = Locale.FRANCE;\n    dateTimeZone0.getName(0L, locale1);\n    long long0 = dateTimeZone0.convertLocalToUTC((-1107L), true);\n    TimeZone timeZone0 = TimeZone.getTimeZone(\"\");\n    dateTimeZone0.UTC.toTimeZone();\n    DateTimeZone dateTimeZone2 = DateTimeZone.forTimeZone(timeZone0);\n    LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone1);\n    dateTimeZone2.UTC.isLocalDateTimeGap(localDateTime0);\n    DateTimeZone.getAvailableIDs();\n    String string0 = dateTimeZone0.getShortName(0L);\n    dateTimeZone2.previousTransition(0L);\n    DateTimeZone dateTimeZone3 = DateTimeZone.forOffsetMillis((-1858));\n    dateTimeZone3.UTC.getOffset((long) 1);\n    UTCProvider uTCProvider0 = new UTCProvider();\n    DateTimeZone.setProvider(uTCProvider0);\n    dateTimeZone3.nextTransition(1L);\n    DateTimeZone.getProvider();\n    dateTimeZone2.getNameKey(1L);\n    dateTimeZone0.isLocalDateTimeGap(localDateTime0);\n    int int0 = dateTimeZone1.getOffsetFromLocal(0L);\n    dateTimeZone1.toString();\n}",
    "testName" : "test3359"
  },
  "test3356" : {
    "methodSignature" : "public final String getShortName(long instant)",
    "methodName" : "getShortName",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3356() throws Throwable {\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();\n    dateTimeZone0.UTC.adjustOffset(1, true);\n    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis((-216));\n    Locale locale0 = Locale.CANADA;\n    dateTimeZone0.getName(0L, locale0);\n    Locale locale1 = Locale.FRANCE;\n    dateTimeZone0.getName(0L, locale1);\n    long long0 = dateTimeZone0.convertLocalToUTC((-1107L), true);\n    TimeZone timeZone0 = TimeZone.getTimeZone(\"\");\n    dateTimeZone0.UTC.toTimeZone();\n    DateTimeZone dateTimeZone2 = DateTimeZone.forTimeZone(timeZone0);\n    LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone1);\n    dateTimeZone2.UTC.isLocalDateTimeGap(localDateTime0);\n    DateTimeZone.getAvailableIDs();\n    String string0 = dateTimeZone0.getShortName(0L);\n}",
    "testName" : "test3356"
  },
  "test4684" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4684() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(8);\n    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetHours(8);\n    int int0 = dateTimeZone0.getOffset((long) 8);\n    dateTimeZone0.toString();\n}",
    "testName" : "test4684"
  },
  "test3355" : {
    "methodSignature" : "public long convertLocalToUTC(long instantLocal, boolean strict)",
    "methodName" : "convertLocalToUTC",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3355() throws Throwable {\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();\n    dateTimeZone0.UTC.adjustOffset(1, true);\n    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis((-216));\n    Locale locale0 = Locale.CANADA;\n    dateTimeZone0.getName(0L, locale0);\n    Locale locale1 = Locale.FRANCE;\n    dateTimeZone0.getName(0L, locale1);\n    long long0 = dateTimeZone0.convertLocalToUTC((-1107L), true);\n}",
    "testName" : "test3355"
  },
  "test3872" : {
    "methodSignature" : "public abstract long nextTransition(long instant)",
    "methodName" : "nextTransition",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3872() throws Throwable {\n    TimeZone timeZone0 = TimeZone.getTimeZone(\"America/Denver\");\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);\n    dateTimeZone0.UTC.getNameKey(0L);\n    long long0 = dateTimeZone0.nextTransition(0L);\n}",
    "testName" : "test3872"
  },
  "test4685" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4685() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(8);\n    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetHours(8);\n    int int0 = dateTimeZone0.getOffset((long) 8);\n    dateTimeZone0.getID();\n}",
    "testName" : "test4685"
  },
  "test2949" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2949() throws Throwable {\n    DateTime dateTime0 = new DateTime(498L);\n    DateTime dateTime1 = dateTime0.minusDays(1);\n    DateTime dateTime2 = dateTime1.withEarlierOffsetAtOverlap();\n    GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) dateTime2, 1);\n    DateTimeZone dateTimeZone0 = gJChronology0.getZone();\n    dateTimeZone0.hashCode();\n    dateTime2.getMillis();\n}",
    "testName" : "test2949"
  },
  "test0920" : {
    "methodSignature" : "public String getName(long instant, Locale locale)",
    "methodName" : "getName",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0920() throws Throwable {\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    fixedDateTimeZone0.UTC.convertLocalToUTC((-1066L), true);\n    TimeZone timeZone0 = fixedDateTimeZone0.toTimeZone();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);\n    DateTimeUtils.setCurrentMillisFixed((-1066L));\n    dateTimeZone0.UTC.getName(2451L);\n    dateTimeZone0.hashCode();\n    fixedDateTimeZone0.previousTransition((-1066L));\n    DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);\n    Locale locale0 = Locale.FRENCH;\n    String string0 = dateTimeZone1.UTC.getShortName(2451L, locale0);\n    dateTimeZone1.UTC.getStandardOffset((-1L));\n    DateTimeZone.getDefault();\n    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();\n    LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();\n    LinkedList<Locale> linkedList2 = new LinkedList<Locale>();\n    List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList1, (Collection<Locale>) linkedList2);\n    List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList1, (Collection<Locale>) list0);\n    Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;\n    Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list1, locale_FilteringMode0);\n    dateTimeZone0.getOffsetFromLocal((-1066L));\n    long long0 = dateTimeZone0.convertLocalToUTC((-354L), true);\n    String string1 = dateTimeZone0.getName((long) 0, locale0);\n}",
    "testName" : "test0920"
  },
  "test0918" : {
    "methodSignature" : "public String getShortName(long instant, Locale locale)",
    "methodName" : "getShortName",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0918() throws Throwable {\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    fixedDateTimeZone0.UTC.convertLocalToUTC((-1066L), true);\n    TimeZone timeZone0 = fixedDateTimeZone0.toTimeZone();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);\n    DateTimeUtils.setCurrentMillisFixed((-1066L));\n    dateTimeZone0.UTC.getName(2451L);\n    dateTimeZone0.hashCode();\n    fixedDateTimeZone0.previousTransition((-1066L));\n    DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);\n    Locale locale0 = Locale.FRENCH;\n    String string0 = dateTimeZone1.UTC.getShortName(2451L, locale0);\n}",
    "testName" : "test0918"
  },
  "test64120" : {
    "methodSignature" : "public MutableDateTime parseMutableDateTime(String text)",
    "methodName" : "parseMutableDateTime",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test64120() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);\n    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetHours(0);\n    DefaultNameProvider defaultNameProvider0 = new DefaultNameProvider();\n    DateTimeZone.setNameProvider(defaultNameProvider0);\n    dateTimeZone1.getStandardOffset(0);\n    Locale locale0 = new Locale(\"f (V\", \" - \", \" - \");\n    dateTimeZone1.getName((long) 0, locale0);\n    DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());\n    DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());\n    doReturn(910, 0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class), anyString(), anyInt());\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);\n    int int0 = 7678125;\n    dateTimeZone1.getOffsetFromLocal(0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(7678125);\n    Integer integer0 = new Integer(7678125);\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer0);\n    dateTimeZone0.getShortName((long) 7678125);\n    DateTimeZone.forOffsetMillis(910);\n    DateTime dateTime0 = dateTimeFormatter2.parseDateTime(\"America/Chicago\");\n    dateTime0.minusMillis(2774);\n    String string0 = \"^=Q+3q\\\\u==+CQ{fn<2\";\n    dateTimeFormatter2.parseMutableDateTime(string0);\n}",
    "testName" : "test64120"
  },
  "test0919" : {
    "methodSignature" : "public long convertLocalToUTC(long instantLocal, boolean strict)",
    "methodName" : "convertLocalToUTC",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0919() throws Throwable {\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    fixedDateTimeZone0.UTC.convertLocalToUTC((-1066L), true);\n    TimeZone timeZone0 = fixedDateTimeZone0.toTimeZone();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);\n    DateTimeUtils.setCurrentMillisFixed((-1066L));\n    dateTimeZone0.UTC.getName(2451L);\n    dateTimeZone0.hashCode();\n    fixedDateTimeZone0.previousTransition((-1066L));\n    DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);\n    Locale locale0 = Locale.FRENCH;\n    String string0 = dateTimeZone1.UTC.getShortName(2451L, locale0);\n    dateTimeZone1.UTC.getStandardOffset((-1L));\n    DateTimeZone.getDefault();\n    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();\n    LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();\n    LinkedList<Locale> linkedList2 = new LinkedList<Locale>();\n    List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList1, (Collection<Locale>) linkedList2);\n    List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList1, (Collection<Locale>) list0);\n    Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;\n    Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list1, locale_FilteringMode0);\n    dateTimeZone0.getOffsetFromLocal((-1066L));\n    long long0 = dateTimeZone0.convertLocalToUTC((-354L), true);\n}",
    "testName" : "test0919"
  },
  "test4682" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4682() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(8);\n    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetHours(8);\n    dateTimeZone1.toString();\n}",
    "testName" : "test4682"
  },
  "test4683" : {
    "methodSignature" : "public abstract int getOffset(long instant)",
    "methodName" : "getOffset",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4683() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(8);\n    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetHours(8);\n    int int0 = dateTimeZone0.getOffset((long) 8);\n}",
    "testName" : "test4683"
  },
  "test5098" : {
    "methodSignature" : "public long convertUTCToLocal(long instantUTC)",
    "methodName" : "convertUTCToLocal",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5098() throws Throwable {\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.forOffsetHours((-455));\n    DateTimeZone.getDefault();\n    ZoneInfoProvider zoneInfoProvider0 = (ZoneInfoProvider) DateTimeZone.getProvider();\n    boolean boolean0 = fixedDateTimeZone0.isStandardOffset((-338L));\n    DateTimeZone.setProvider(zoneInfoProvider0);\n    fixedDateTimeZone0.convertUTCToLocal((-338L));\n    DateTimeZone.setProvider(zoneInfoProvider0);\n    ((DateTimeZone) fixedDateTimeZone0).writeReplace();\n    String string0 = fixedDateTimeZone0.getName((-338L));\n    long long0 = fixedDateTimeZone0.convertUTCToLocal((-455));\n}",
    "testName" : "test5098"
  },
  "test5096" : {
    "methodSignature" : "public boolean isStandardOffset(long instant)",
    "methodName" : "isStandardOffset",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5096() throws Throwable {\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.forOffsetHours((-455));\n    DateTimeZone.getDefault();\n    ZoneInfoProvider zoneInfoProvider0 = (ZoneInfoProvider) DateTimeZone.getProvider();\n    boolean boolean0 = fixedDateTimeZone0.isStandardOffset((-338L));\n}",
    "testName" : "test5096"
  },
  "test5097" : {
    "methodSignature" : "public final String getName(long instant)",
    "methodName" : "getName",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5097() throws Throwable {\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.forOffsetHours((-455));\n    DateTimeZone.getDefault();\n    ZoneInfoProvider zoneInfoProvider0 = (ZoneInfoProvider) DateTimeZone.getProvider();\n    boolean boolean0 = fixedDateTimeZone0.isStandardOffset((-338L));\n    DateTimeZone.setProvider(zoneInfoProvider0);\n    fixedDateTimeZone0.convertUTCToLocal((-338L));\n    DateTimeZone.setProvider(zoneInfoProvider0);\n    ((DateTimeZone) fixedDateTimeZone0).writeReplace();\n    String string0 = fixedDateTimeZone0.getName((-338L));\n}",
    "testName" : "test5097"
  },
  "test58106" : {
    "methodSignature" : "public static DateTimeZone forID(String id)",
    "methodName" : "forID",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test58106() throws Throwable {\n    DateTimeZone.forID(\"Ci.=p3yTl\");\n}",
    "testName" : "test58106"
  },
  "test1224" : {
    "methodSignature" : "public static DateTimeZone forOffsetHours(int hoursOffset) throws IllegalArgumentException",
    "methodName" : "forOffsetHours",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1224() throws Throwable {\n    NameProvider nameProvider0 = null;\n    DateTimeZone.setNameProvider((NameProvider) null);\n    int int0 = 1139;\n    DateTimeZone.forOffsetHours(1139);\n}",
    "testName" : "test1224"
  },
  "test2037" : {
    "methodSignature" : "public LocalDateTime(Object instant, DateTimeZone zone)",
    "methodName" : "LocalDateTime",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2037() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forID(\"UTC\");\n    long long0 = 0L;\n    Object object0 = new Object();\n    dateTimeZone0.UTC.toTimeZone();\n    LocalDateTime localDateTime0 = null;\n    localDateTime0 = new LocalDateTime(object0, dateTimeZone0);\n}",
    "testName" : "test2037"
  },
  "test2950" : {
    "methodSignature" : "public int hashCode()",
    "methodName" : "hashCode",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2950() throws Throwable {\n    DateTime dateTime0 = new DateTime(498L);\n    DateTime dateTime1 = dateTime0.minusDays(1);\n    DateTime dateTime2 = dateTime1.withEarlierOffsetAtOverlap();\n    GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) dateTime2, 1);\n    DateTimeZone dateTimeZone0 = gJChronology0.getZone();\n    dateTimeZone0.hashCode();\n}",
    "testName" : "test2950"
  },
  "test1628" : {
    "methodSignature" : "public long adjustOffset(long instant, boolean earlierOrLater)",
    "methodName" : "adjustOffset",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1628() throws Throwable {\n    UTCProvider uTCProvider0 = new UTCProvider();\n    DateTimeZone dateTimeZone0 = uTCProvider0.getZone(\"UTC\");\n    dateTimeZone0.nextTransition((-175L));\n    long long0 = dateTimeZone0.adjustOffset(3386L, true);\n}",
    "testName" : "test1628"
  },
  "test0815" : {
    "methodSignature" : "public boolean isLocalDateTimeGap(LocalDateTime localDateTime)",
    "methodName" : "isLocalDateTimeGap",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0815() throws Throwable {\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();\n    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetHours((-462));\n    dateTimeZone0.isStandardOffset(1);\n    LocalDateTime localDateTime0 = new LocalDateTime((long) 1, dateTimeZone1);\n    localDateTime0.minusDays((-462));\n    LocalDateTime localDateTime1 = localDateTime0.minusSeconds(58);\n    boolean boolean0 = dateTimeZone0.isLocalDateTimeGap(localDateTime1);\n}",
    "testName" : "test0815"
  },
  "test0816" : {
    "methodSignature" : "public String getShortName(long instant, Locale locale)",
    "methodName" : "getShortName",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0816() throws Throwable {\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();\n    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetHours((-462));\n    dateTimeZone0.isStandardOffset(1);\n    LocalDateTime localDateTime0 = new LocalDateTime((long) 1, dateTimeZone1);\n    localDateTime0.minusDays((-462));\n    LocalDateTime localDateTime1 = localDateTime0.minusSeconds(58);\n    boolean boolean0 = dateTimeZone0.isLocalDateTimeGap(localDateTime1);\n    dateTimeZone1.getID();\n    dateTimeZone0.previousTransition(1);\n    dateTimeZone0.isFixed();\n    Locale locale0 = Locale.ROOT;\n    String string0 = dateTimeZone1.getShortName(15L, locale0);\n}",
    "testName" : "test0816"
  },
  "test3360" : {
    "methodSignature" : "public final String getName(long instant)",
    "methodName" : "getName",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3360() throws Throwable {\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();\n    dateTimeZone0.UTC.adjustOffset(1, true);\n    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis((-216));\n    Locale locale0 = Locale.CANADA;\n    dateTimeZone0.getName(0L, locale0);\n    Locale locale1 = Locale.FRANCE;\n    dateTimeZone0.getName(0L, locale1);\n    long long0 = dateTimeZone0.convertLocalToUTC((-1107L), true);\n    TimeZone timeZone0 = TimeZone.getTimeZone(\"\");\n    dateTimeZone0.UTC.toTimeZone();\n    DateTimeZone dateTimeZone2 = DateTimeZone.forTimeZone(timeZone0);\n    LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone1);\n    dateTimeZone2.UTC.isLocalDateTimeGap(localDateTime0);\n    DateTimeZone.getAvailableIDs();\n    String string0 = dateTimeZone0.getShortName(0L);\n    dateTimeZone2.previousTransition(0L);\n    DateTimeZone dateTimeZone3 = DateTimeZone.forOffsetMillis((-1858));\n    dateTimeZone3.UTC.getOffset((long) 1);\n    UTCProvider uTCProvider0 = new UTCProvider();\n    DateTimeZone.setProvider(uTCProvider0);\n    dateTimeZone3.nextTransition(1L);\n    DateTimeZone.getProvider();\n    dateTimeZone2.getNameKey(1L);\n    dateTimeZone0.isLocalDateTimeGap(localDateTime0);\n    int int0 = dateTimeZone1.getOffsetFromLocal(0L);\n    DateTimeZone dateTimeZone4 = DateTimeZone.forTimeZone(timeZone0);\n    String string1 = dateTimeZone4.getName((long) (-1858));\n}",
    "testName" : "test3360"
  },
  "test55103" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test55103() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(43);\n    dateTimeZone0.toString();\n}",
    "testName" : "test55103"
  },
  "test3254" : {
    "methodSignature" : "public static DateTimeZone forOffsetHours(int hoursOffset) throws IllegalArgumentException",
    "methodName" : "forOffsetHours",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3254() throws Throwable {\n    int int0 = (-1578);\n    DateTimeZone.forOffsetHours((-1578));\n}",
    "testName" : "test3254"
  },
  "test3771" : {
    "methodSignature" : "public static DateTimeZone forTimeZone(TimeZone zone)",
    "methodName" : "forTimeZone",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3771() throws Throwable {\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();\n    dateTimeZone0.convertUTCToLocal(0L);\n    Hours hours0 = Hours.SIX;\n    PeriodType periodType0 = hours0.getPeriodType();\n    Period period0 = new Period(0L, periodType0, (Chronology) buddhistChronology0);\n    buddhistChronology0.get((ReadablePeriod) period0, (-1L));\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, \"/y<.b,\", 1, 1, 1, 0, 0, 1, 1, 1915, 1);\n    DateTimeZone.forTimeZone(simpleTimeZone0);\n}",
    "testName" : "test3771"
  },
  "test2443" : {
    "methodSignature" : "public boolean isLocalDateTimeGap(LocalDateTime localDateTime)",
    "methodName" : "isLocalDateTimeGap",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2443() throws Throwable {\n    Provider provider0 = DateTimeZone.getProvider();\n    DateTimeZone.setProvider(provider0);\n    ISOChronology iSOChronology0 = ISOChronology.getInstance();\n    Chronology chronology0 = iSOChronology0.withUTC();\n    GJChronology gJChronology0 = GJChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = gJChronology0.getZone();\n    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(chronology0, dateTimeZone0);\n    DateTimeZone dateTimeZone1 = zonedChronology0.getZone();\n    LocalTime.now((Chronology) iSOChronology0);\n    dateTimeZone1.getName(605L);\n    dateTimeZone0.getMillisKeepLocal(dateTimeZone1, 0L);\n    DateTimeZone.forOffsetMillis((-970));\n    dateTimeZone0.convertLocalToUTC(605L, true);\n    boolean boolean0 = dateTimeZone0.isLocalDateTimeGap((LocalDateTime) null);\n}",
    "testName" : "test2443"
  },
  "test011" : {
    "methodSignature" : "public String getName(long instant, Locale locale)",
    "methodName" : "getName",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011() throws Throwable {\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.forOffsetMillis(60);\n    DefaultNameProvider defaultNameProvider0 = new DefaultNameProvider();\n    DateTimeZone.setNameProvider(defaultNameProvider0);\n    fixedDateTimeZone0.toTimeZone();\n    ((DateTimeZone) fixedDateTimeZone0).writeReplace();\n    FileSystemHandling.appendLineToFile((EvoSuiteFile) null, \"?IXi\");\n    Locale locale0 = Locale.ROOT;\n    String string0 = fixedDateTimeZone0.getName((long) 60, locale0);\n}",
    "testName" : "test011"
  },
  "test012" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test012() throws Throwable {\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.forOffsetMillis(60);\n    DefaultNameProvider defaultNameProvider0 = new DefaultNameProvider();\n    DateTimeZone.setNameProvider(defaultNameProvider0);\n    fixedDateTimeZone0.toTimeZone();\n    ((DateTimeZone) fixedDateTimeZone0).writeReplace();\n    FileSystemHandling.appendLineToFile((EvoSuiteFile) null, \"?IXi\");\n    Locale locale0 = Locale.ROOT;\n    String string0 = fixedDateTimeZone0.getName((long) 60, locale0);\n    Instant instant0 = new Instant((-74L));\n    Instant instant1 = instant0.withMillis((-391L));\n    DateTime dateTime0 = instant1.toDateTime();\n    fixedDateTimeZone0.getOffset((ReadableInstant) dateTime0);\n    fixedDateTimeZone0.toString();\n}",
    "testName" : "test012"
  },
  "test2848" : {
    "methodSignature" : "public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException",
    "methodName" : "forOffsetHoursMinutes",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2848() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(10, 10);\n    dateTimeZone0.hashCode();\n    DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());\n    doReturn(0L).when(dateTimeUtils_MillisProvider0).getMillis();\n    DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);\n    dateTimeZone0.getOffsetFromLocal(10);\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();\n    DateMidnight dateMidnight0 = DateMidnight.now((Chronology) buddhistChronology0);\n    DateMidnight dateMidnight1 = dateMidnight0.plusWeeks(265);\n    dateMidnight1.getMillisOfSecond();\n    dateTimeZone0.getOffset((ReadableInstant) dateMidnight1);\n    dateTimeZone0.adjustOffset(21600000L, true);\n    dateTimeZone0.getOffset(21600000L);\n    dateTimeZone0.convertLocalToUTC((long) 10, true);\n    DateTimeZone dateTimeZone1 = DateTimeZone.forID(\"America/Denver\");\n    dateTimeZone0.toString();\n    long long0 = 10800000L;\n    dateTimeZone1.convertLocalToUTC(10800000L, true, 10800000L);\n    dateTimeZone1.getStandardOffset(10);\n    dateTimeZone0.UTC.previousTransition(36000000L);\n    int int0 = (-167);\n    DateTimeZone.forOffsetHoursMinutes(1, (-167));\n}",
    "testName" : "test2848"
  },
  "test4989" : {
    "methodSignature" : "public static DateTimeZone getDefault()",
    "methodName" : "getDefault",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4989() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n}",
    "testName" : "test4989"
  },
  "test0817" : {
    "methodSignature" : "public int getOffsetFromLocal(long instantLocal)",
    "methodName" : "getOffsetFromLocal",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0817() throws Throwable {\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();\n    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetHours((-462));\n    dateTimeZone0.isStandardOffset(1);\n    LocalDateTime localDateTime0 = new LocalDateTime((long) 1, dateTimeZone1);\n    localDateTime0.minusDays((-462));\n    LocalDateTime localDateTime1 = localDateTime0.minusSeconds(58);\n    boolean boolean0 = dateTimeZone0.isLocalDateTimeGap(localDateTime1);\n    dateTimeZone1.getID();\n    dateTimeZone0.previousTransition(1);\n    dateTimeZone0.isFixed();\n    Locale locale0 = Locale.ROOT;\n    String string0 = dateTimeZone1.getShortName(15L, locale0);\n    int int0 = dateTimeZone1.getOffsetFromLocal((-1L));\n}",
    "testName" : "test0817"
  },
  "test56104" : {
    "methodSignature" : "public static DateTimeZone forOffsetHours(int hoursOffset) throws IllegalArgumentException",
    "methodName" : "forOffsetHours",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test56104() throws Throwable {\n    int int0 = (-2208);\n    DateTimeZone.forOffsetHours((-2208));\n}",
    "testName" : "test56104"
  },
  "test4581" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4581() throws Throwable {\n    TimeZone timeZone0 = TimeZone.getDefault();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);\n    timeZone0.getDisplayName();\n    dateTimeZone0.adjustOffset((-3000L), false);\n    dateTimeZone0.convertLocalToUTC(0L, false, 0L);\n    timeZone0.clone();\n    dateTimeZone0.nextTransition(0L);\n    dateTimeZone0.equals(timeZone0);\n    dateTimeZone0.previousTransition(10800000L);\n    dateTimeZone0.convertUTCToLocal(1540L);\n    dateTimeZone0.convertLocalToUTC(1000L, false);\n    dateTimeZone0.isStandardOffset(1540L);\n    DateTimeZone dateTimeZone1 = DateTimeZone.getDefault();\n    dateTimeZone1.toString();\n}",
    "testName" : "test4581"
  },
  "test61112" : {
    "methodSignature" : "public static LocalDateTime fromDateFields(Date date)",
    "methodName" : "fromDateFields",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test61112() throws Throwable {\n    int int0 = 1;\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);\n    Interval interval0 = new Interval((-272L), 10800000L);\n    Duration duration0 = interval0.toDuration();\n    dateTimeZone0.getNameKey((-352L));\n    interval0.withEndMillis(1);\n    DateTime dateTime0 = interval0.getEnd();\n    dateTime0.withDayOfYear(1);\n    dateTime0.getDayOfMonth();\n    interval0.withDurationBeforeEnd(duration0);\n    dateTime0.withZoneRetainFields(dateTimeZone0);\n    dateTimeZone0.getOffset((ReadableInstant) dateTime0);\n    DateTimeZone.getAvailableIDs();\n    dateTimeZone0.convertUTCToLocal((-352L));\n    dateTimeZone0.isStandardOffset((-1611L));\n    dateTimeZone0.previousTransition(0L);\n    dateTimeZone0.isFixed();\n    DateTimeZone.getDefault();\n    LocalDateTime.fromDateFields((Date) null);\n}",
    "testName" : "test61112"
  },
  "test4994" : {
    "methodSignature" : "public boolean isStandardOffset(long instant)",
    "methodName" : "isStandardOffset",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4994() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    DateTimeUtils.setCurrentMillisSystem();\n    DateTimeZone.setDefault(dateTimeZone0);\n    dateTimeZone0.getNameKey(2660L);\n    Locale locale0 = Locale.SIMPLIFIED_CHINESE;\n    Locale locale1 = locale0.stripExtensions();\n    String string0 = dateTimeZone0.UTC.getShortName(2660L, locale1);\n    dateTimeZone0.getName((-4462L));\n    String string1 = dateTimeZone0.getName(10800000L);\n    String string2 = dateTimeZone0.getShortName((-4462L));\n    dateTimeZone0.isFixed();\n    boolean boolean0 = dateTimeZone0.isStandardOffset(2660L);\n}",
    "testName" : "test4994"
  },
  "test4995" : {
    "methodSignature" : "public abstract int getStandardOffset(long instant)",
    "methodName" : "getStandardOffset",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4995() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    DateTimeUtils.setCurrentMillisSystem();\n    DateTimeZone.setDefault(dateTimeZone0);\n    dateTimeZone0.getNameKey(2660L);\n    Locale locale0 = Locale.SIMPLIFIED_CHINESE;\n    Locale locale1 = locale0.stripExtensions();\n    String string0 = dateTimeZone0.UTC.getShortName(2660L, locale1);\n    dateTimeZone0.getName((-4462L));\n    String string1 = dateTimeZone0.getName(10800000L);\n    String string2 = dateTimeZone0.getShortName((-4462L));\n    dateTimeZone0.isFixed();\n    boolean boolean0 = dateTimeZone0.isStandardOffset(2660L);\n    int int0 = dateTimeZone0.getStandardOffset(2660L);\n}",
    "testName" : "test4995"
  },
  "test1123" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1123() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    DateTimeUtils.setCurrentMillisFixed((-845L));\n    dateTimeZone0.UTC.getStandardOffset(0L);\n    dateTimeZone0.UTC.previousTransition(0L);\n    JapaneseDate japaneseDate0 = MockJapaneseDate.now();\n    dateTimeZone0.getShortName((-845L));\n    dateTimeZone0.equals(japaneseDate0);\n    dateTimeZone0.UTC.previousTransition((-845L));\n    DateTimeZone.getDefault();\n    DateTimeUtils.setCurrentMillisFixed((-2720L));\n    dateTimeZone0.getNameKey((-128L));\n    dateTimeZone0.getOffsetFromLocal(1687L);\n    dateTimeZone0.convertLocalToUTC((long) (-28800000), false);\n    dateTimeZone0.convertUTCToLocal((-28800000));\n    Locale locale0 = Locale.UK;\n    dateTimeZone0.getName((-2720L), locale0);\n    DateTimeZone.setDefault(dateTimeZone0);\n    dateTimeZone0.toString();\n}",
    "testName" : "test1123"
  },
  "test4993" : {
    "methodSignature" : "public final String getShortName(long instant)",
    "methodName" : "getShortName",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4993() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    DateTimeUtils.setCurrentMillisSystem();\n    DateTimeZone.setDefault(dateTimeZone0);\n    dateTimeZone0.getNameKey(2660L);\n    Locale locale0 = Locale.SIMPLIFIED_CHINESE;\n    Locale locale1 = locale0.stripExtensions();\n    String string0 = dateTimeZone0.UTC.getShortName(2660L, locale1);\n    dateTimeZone0.getName((-4462L));\n    String string1 = dateTimeZone0.getName(10800000L);\n    String string2 = dateTimeZone0.getShortName((-4462L));\n}",
    "testName" : "test4993"
  },
  "test000" : {
    "methodSignature" : "public static DateTimeZone forID(String id)",
    "methodName" : "forID",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone) DateTimeZone.getDefault();\n    LocalDateTime localDateTime0 = LocalDateTime.now((DateTimeZone) cachedDateTimeZone0);\n    FileSystemHandling.createFolder((EvoSuiteFile) null);\n    cachedDateTimeZone0.equals(localDateTime0);\n    Duration duration0 = Duration.standardHours((-1L));\n    cachedDateTimeZone0.getNameKey((-1L));\n    localDateTime0.yearOfEra();\n    Duration duration1 = duration0.withDurationAdded((ReadableDuration) null, (-2050));\n    LocalDateTime localDateTime1 = localDateTime0.minus((ReadableDuration) duration1);\n    duration1.plus((-1L));\n    localDateTime1.minuteOfHour();\n    LocalDateTime localDateTime2 = localDateTime1.plusHours((-2050));\n    cachedDateTimeZone0.isLocalDateTimeGap(localDateTime2);\n    UTCProvider uTCProvider0 = new UTCProvider();\n    DateTimeZone.setProvider(uTCProvider0);\n    cachedDateTimeZone0.toString();\n    cachedDateTimeZone0.getNameKey((-1L));\n    DateTimeZone.getProvider();\n    ((DateTimeZone) cachedDateTimeZone0).writeReplace();\n    cachedDateTimeZone0.adjustOffset((-1L), true);\n    DateTimeZone.forID(\"America/Los_Angeles\");\n}",
    "testName" : "test000"
  },
  "test0714" : {
    "methodSignature" : "public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException",
    "methodName" : "forOffsetHoursMinutes",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0714() throws Throwable {\n    int int0 = 204;\n    DateTimeZone.forOffsetHoursMinutes(0, 204);\n}",
    "testName" : "test0714"
  },
  "test66129" : {
    "methodSignature" : "public static DateTimeZone forOffsetHours(int hoursOffset) throws IllegalArgumentException",
    "methodName" : "forOffsetHours",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test66129() throws Throwable {\n    DateTimeZone.getNameProvider();\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    long long0 = (-47L);\n    dateTimeZone0.adjustOffset((-47L), false);\n    Locale locale0 = Locale.ITALIAN;\n    dateTimeZone0.getShortName((-47L), locale0);\n    dateTimeZone0.convertLocalToUTC((-47L), false);\n    UTCProvider uTCProvider0 = new UTCProvider();\n    dateTimeZone0.equals(uTCProvider0);\n    dateTimeZone0.getID();\n    JulianChronology.getInstance(dateTimeZone0);\n    DateTimeZone.forOffsetHours(1822);\n}",
    "testName" : "test66129"
  },
  "test1527" : {
    "methodSignature" : "public abstract int getOffset(long instant)",
    "methodName" : "getOffset",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1527() throws Throwable {\n    DateTimeZone.setProvider((Provider) null);\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    int int0 = dateTimeZone0.getOffset((-351L));\n}",
    "testName" : "test1527"
  },
  "test4990" : {
    "methodSignature" : "public String getShortName(long instant, Locale locale)",
    "methodName" : "getShortName",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4990() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    DateTimeUtils.setCurrentMillisSystem();\n    DateTimeZone.setDefault(dateTimeZone0);\n    dateTimeZone0.getNameKey(2660L);\n    Locale locale0 = Locale.SIMPLIFIED_CHINESE;\n    Locale locale1 = locale0.stripExtensions();\n    String string0 = dateTimeZone0.UTC.getShortName(2660L, locale1);\n}",
    "testName" : "test4990"
  },
  "test53101" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test53101() throws Throwable {\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.forOffsetMillis((-942));\n    ((DateTimeZone) fixedDateTimeZone0).writeReplace();\n    fixedDateTimeZone0.toString();\n}",
    "testName" : "test53101"
  },
  "test4991" : {
    "methodSignature" : "public final String getName(long instant)",
    "methodName" : "getName",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4991() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    DateTimeUtils.setCurrentMillisSystem();\n    DateTimeZone.setDefault(dateTimeZone0);\n    dateTimeZone0.getNameKey(2660L);\n    Locale locale0 = Locale.SIMPLIFIED_CHINESE;\n    Locale locale1 = locale0.stripExtensions();\n    String string0 = dateTimeZone0.UTC.getShortName(2660L, locale1);\n    dateTimeZone0.getName((-4462L));\n    String string1 = dateTimeZone0.getName(10800000L);\n}",
    "testName" : "test4991"
  },
  "test4076" : {
    "methodSignature" : "public static void setDefault(DateTimeZone zone) throws SecurityException",
    "methodName" : "setDefault",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4076() throws Throwable {\n    DateTimeZone.getProvider();\n    DateTimeZone.setDefault((DateTimeZone) null);\n}",
    "testName" : "test4076"
  },
  "test4888" : {
    "methodSignature" : "public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException",
    "methodName" : "forOffsetHoursMinutes",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4888() throws Throwable {\n    int int0 = 24;\n    int int1 = 3600000;\n    DateTimeZone.forOffsetHoursMinutes(24, 3600000);\n}",
    "testName" : "test4888"
  },
  "test60111" : {
    "methodSignature" : "public final String getShortName(long instant)",
    "methodName" : "getShortName",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test60111() throws Throwable {\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    DateTimeUtils.setCurrentMillisFixed(0L);\n    Locale locale0 = Locale.forLanguageTag(\"A_c*d}ih>cx\");\n    fixedDateTimeZone0.isFixed();\n    Locale locale1 = Locale.SIMPLIFIED_CHINESE;\n    locale0.getDisplayCountry(locale1);\n    fixedDateTimeZone0.getShortName(0L, locale0);\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);\n    dateTimeZone0.equals(\"A_c*d}ih>cx\");\n    DateTimeUtils.setCurrentMillisSystem();\n    fixedDateTimeZone0.getOffsetFromLocal(0L);\n    dateTimeZone0.getStandardOffset(0);\n    DateTimeUtils.setCurrentMillisOffset(0);\n    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetHours(0);\n    fixedDateTimeZone0.nextTransition((-1L));\n    DateTimeZone dateTimeZone2 = DateTimeZone.getDefault();\n    long long0 = dateTimeZone2.adjustOffset(0, false);\n    long long1 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, 365L);\n    fixedDateTimeZone0.toString();\n    DateTimeZone dateTimeZone3 = DateTimeZone.forOffsetHours(0);\n    dateTimeZone3.equals(\"\");\n    dateTimeZone3.toTimeZone();\n    DateTimeZone.setDefault(dateTimeZone3);\n    String string0 = dateTimeZone1.getShortName(2528L);\n}",
    "testName" : "test60111"
  },
  "test60110" : {
    "methodSignature" : "public long getMillisKeepLocal(DateTimeZone newZone, long oldInstant)",
    "methodName" : "getMillisKeepLocal",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test60110() throws Throwable {\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    DateTimeUtils.setCurrentMillisFixed(0L);\n    Locale locale0 = Locale.forLanguageTag(\"A_c*d}ih>cx\");\n    fixedDateTimeZone0.isFixed();\n    Locale locale1 = Locale.SIMPLIFIED_CHINESE;\n    locale0.getDisplayCountry(locale1);\n    fixedDateTimeZone0.getShortName(0L, locale0);\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);\n    dateTimeZone0.equals(\"A_c*d}ih>cx\");\n    DateTimeUtils.setCurrentMillisSystem();\n    fixedDateTimeZone0.getOffsetFromLocal(0L);\n    dateTimeZone0.getStandardOffset(0);\n    DateTimeUtils.setCurrentMillisOffset(0);\n    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetHours(0);\n    fixedDateTimeZone0.nextTransition((-1L));\n    DateTimeZone dateTimeZone2 = DateTimeZone.getDefault();\n    long long0 = dateTimeZone2.adjustOffset(0, false);\n    long long1 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, 365L);\n}",
    "testName" : "test60110"
  },
  "test2342" : {
    "methodSignature" : "public long convertLocalToUTC(long instantLocal, boolean strict)",
    "methodName" : "convertLocalToUTC",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2342() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(43);\n    long long0 = dateTimeZone0.convertLocalToUTC(2790L, false, (-4390L));\n    String string0 = dateTimeZone0.getID();\n    long long1 = dateTimeZone0.convertLocalToUTC(1L, false);\n}",
    "testName" : "test2342"
  },
  "test2341" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2341() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(43);\n    long long0 = dateTimeZone0.convertLocalToUTC(2790L, false, (-4390L));\n    String string0 = dateTimeZone0.getID();\n}",
    "testName" : "test2341"
  },
  "test1935" : {
    "methodSignature" : "public long convertLocalToUTC(long instantLocal, boolean strict)",
    "methodName" : "convertLocalToUTC",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1935() throws Throwable {\n    DateTimeZone.getProvider();\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(ethiopicChronology0, dateTimeZone0);\n    zonedChronology0.getDateTimeMillis(1, 1, 1, 1);\n    DateTimeZone dateTimeZone1 = zonedChronology0.getZone();\n    long long0 = dateTimeZone1.convertLocalToUTC((long) 1, true);\n}",
    "testName" : "test1935"
  },
  "test034" : {
    "methodSignature" : "public long adjustOffset(long instant, boolean earlierOrLater)",
    "methodName" : "adjustOffset",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test034() throws Throwable {\n    DateTimeZone.getAvailableIDs();\n    UTCProvider uTCProvider0 = new UTCProvider();\n    uTCProvider0.getAvailableIDs();\n    uTCProvider0.getAvailableIDs();\n    DateTimeZone.setProvider(uTCProvider0);\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2253));\n    long long0 = dateTimeZone0.adjustOffset(0L, false);\n}",
    "testName" : "test034"
  },
  "test1936" : {
    "methodSignature" : "public abstract long previousTransition(long instant)",
    "methodName" : "previousTransition",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1936() throws Throwable {\n    DateTimeZone.getProvider();\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(ethiopicChronology0, dateTimeZone0);\n    zonedChronology0.getDateTimeMillis(1, 1, 1, 1);\n    DateTimeZone dateTimeZone1 = zonedChronology0.getZone();\n    long long0 = dateTimeZone1.convertLocalToUTC((long) 1, true);\n    long long1 = dateTimeZone1.previousTransition(934L);\n}",
    "testName" : "test1936"
  },
  "test65122" : {
    "methodSignature" : "public String getShortName(long instant, Locale locale)",
    "methodName" : "getShortName",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test65122() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(60000);\n    Integer integer0 = new Integer(60000);\n    dateTimeZone1.UTC.previousTransition(100L);\n    UTCProvider uTCProvider0 = new UTCProvider();\n    uTCProvider0.getAvailableIDs();\n    uTCProvider0.getAvailableIDs();\n    DateTimeZone.setProvider(uTCProvider0);\n    Locale locale0 = Locale.US;\n    locale0.toLanguageTag();\n    String string0 = dateTimeZone0.getShortName((-922L), locale0);\n}",
    "testName" : "test65122"
  },
  "test65125" : {
    "methodSignature" : "public long convertLocalToUTC(long instantLocal, boolean strict)",
    "methodName" : "convertLocalToUTC",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test65125() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(60000);\n    Integer integer0 = new Integer(60000);\n    dateTimeZone1.UTC.previousTransition(100L);\n    UTCProvider uTCProvider0 = new UTCProvider();\n    uTCProvider0.getAvailableIDs();\n    uTCProvider0.getAvailableIDs();\n    DateTimeZone.setProvider(uTCProvider0);\n    Locale locale0 = Locale.US;\n    locale0.toLanguageTag();\n    String string0 = dateTimeZone0.getShortName((-922L), locale0);\n    long long0 = dateTimeZone0.convertUTCToLocal(0L);\n    long long1 = dateTimeZone0.convertLocalToUTC(1L, true);\n}",
    "testName" : "test65125"
  },
  "test65124" : {
    "methodSignature" : "public long convertUTCToLocal(long instantUTC)",
    "methodName" : "convertUTCToLocal",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test65124() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(60000);\n    Integer integer0 = new Integer(60000);\n    dateTimeZone1.UTC.previousTransition(100L);\n    UTCProvider uTCProvider0 = new UTCProvider();\n    uTCProvider0.getAvailableIDs();\n    uTCProvider0.getAvailableIDs();\n    DateTimeZone.setProvider(uTCProvider0);\n    Locale locale0 = Locale.US;\n    locale0.toLanguageTag();\n    String string0 = dateTimeZone0.getShortName((-922L), locale0);\n    long long0 = dateTimeZone0.convertUTCToLocal(0L);\n}",
    "testName" : "test65124"
  },
  "test2746" : {
    "methodSignature" : "public long adjustOffset(long instant, boolean earlierOrLater)",
    "methodName" : "adjustOffset",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2746() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);\n    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetHours(0);\n    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone1);\n    DateTimeZone dateTimeZone2 = zonedChronology0.getZone();\n    long long0 = dateTimeZone2.adjustOffset(0, false);\n}",
    "testName" : "test2746"
  },
  "test65127" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test65127() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(60000);\n    Integer integer0 = new Integer(60000);\n    dateTimeZone1.UTC.previousTransition(100L);\n    UTCProvider uTCProvider0 = new UTCProvider();\n    uTCProvider0.getAvailableIDs();\n    uTCProvider0.getAvailableIDs();\n    DateTimeZone.setProvider(uTCProvider0);\n    Locale locale0 = Locale.US;\n    locale0.toLanguageTag();\n    String string0 = dateTimeZone0.getShortName((-922L), locale0);\n    long long0 = dateTimeZone0.convertUTCToLocal(0L);\n    long long1 = dateTimeZone0.convertLocalToUTC(1L, true);\n    int int0 = dateTimeZone1.getStandardOffset(0L);\n    TimeZone timeZone0 = dateTimeZone1.toTimeZone();\n    DateTimeZone dateTimeZone2 = DateTimeZone.forTimeZone(timeZone0);\n    dateTimeZone1.toString();\n}",
    "testName" : "test65127"
  },
  "test65126" : {
    "methodSignature" : "public abstract int getStandardOffset(long instant)",
    "methodName" : "getStandardOffset",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test65126() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(60000);\n    Integer integer0 = new Integer(60000);\n    dateTimeZone1.UTC.previousTransition(100L);\n    UTCProvider uTCProvider0 = new UTCProvider();\n    uTCProvider0.getAvailableIDs();\n    uTCProvider0.getAvailableIDs();\n    DateTimeZone.setProvider(uTCProvider0);\n    Locale locale0 = Locale.US;\n    locale0.toLanguageTag();\n    String string0 = dateTimeZone0.getShortName((-922L), locale0);\n    long long0 = dateTimeZone0.convertUTCToLocal(0L);\n    long long1 = dateTimeZone0.convertLocalToUTC(1L, true);\n    int int0 = dateTimeZone1.getStandardOffset(0L);\n}",
    "testName" : "test65126"
  },
  "test2747" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2747() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);\n    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetHours(0);\n    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone1);\n    DateTimeZone dateTimeZone2 = zonedChronology0.getZone();\n    long long0 = dateTimeZone2.adjustOffset(0, false);\n    dateTimeZone2.toString();\n}",
    "testName" : "test2747"
  },
  "test65128" : {
    "methodSignature" : "public static DateTimeZone forTimeZone(TimeZone zone)",
    "methodName" : "forTimeZone",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test65128() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(60000);\n    Integer integer0 = new Integer(60000);\n    dateTimeZone1.UTC.previousTransition(100L);\n    UTCProvider uTCProvider0 = new UTCProvider();\n    uTCProvider0.getAvailableIDs();\n    uTCProvider0.getAvailableIDs();\n    DateTimeZone.setProvider(uTCProvider0);\n    Locale locale0 = Locale.US;\n    locale0.toLanguageTag();\n    String string0 = dateTimeZone0.getShortName((-922L), locale0);\n    long long0 = dateTimeZone0.convertUTCToLocal(0L);\n    long long1 = dateTimeZone0.convertLocalToUTC(1L, true);\n    int int0 = dateTimeZone1.getStandardOffset(0L);\n    TimeZone timeZone0 = dateTimeZone1.toTimeZone();\n    DateTimeZone dateTimeZone2 = DateTimeZone.forTimeZone(timeZone0);\n}",
    "testName" : "test65128"
  },
  "test3152" : {
    "methodSignature" : "public abstract int getStandardOffset(long instant)",
    "methodName" : "getStandardOffset",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3152() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(4, 4);\n    int int0 = dateTimeZone0.getStandardOffset(984L);\n}",
    "testName" : "test3152"
  },
  "test54102" : {
    "methodSignature" : "public static DateTimeZone forID(String id)",
    "methodName" : "forID",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test54102() throws Throwable {\n    String string0 = \"Adding time zone offset caused overflow\";\n    DateTimeZone.forID(\"Adding time zone offset caused overflow\");\n}",
    "testName" : "test54102"
  },
  "test2340" : {
    "methodSignature" : "public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC)",
    "methodName" : "convertLocalToUTC",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2340() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(43);\n    long long0 = dateTimeZone0.convertLocalToUTC(2790L, false, (-4390L));\n}",
    "testName" : "test2340"
  },
  "test3153" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3153() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(4, 4);\n    int int0 = dateTimeZone0.getStandardOffset(984L);\n    dateTimeZone0.toString();\n}",
    "testName" : "test3153"
  },
  "test3670" : {
    "methodSignature" : "public static LocalDateTime parse(String str)",
    "methodName" : "parse",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3670() throws Throwable {\n    ZoneOffset zoneOffset0 = ZoneOffset.MAX;\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    DateTimeZone.forTimeZone(timeZone0);\n    DateTimeUtils.setCurrentMillisOffset(10800000L);\n    LocalDateTime.parse(\"4|rmN$}!tZmIy~tl$c\");\n}",
    "testName" : "test3670"
  },
  "test4480" : {
    "methodSignature" : "public static NameProvider getNameProvider()",
    "methodName" : "getNameProvider",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4480() throws Throwable {\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    fixedDateTimeZone0.UTC.getStandardOffset((-1L));\n    fixedDateTimeZone0.UTC.toTimeZone();\n    Locale locale0 = Locale.CHINESE;\n    fixedDateTimeZone0.getName(2075L, locale0);\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    DateTimeUtils.setCurrentMillisFixed(13L);\n    dateTimeZone0.UTC.nextTransition(0);\n    fixedDateTimeZone0.convertLocalToUTC((long) 0, false);\n    NameProvider nameProvider0 = DateTimeZone.getNameProvider();\n}",
    "testName" : "test4480"
  },
  "test3567" : {
    "methodSignature" : "public long convertLocalToUTC(long instantLocal, boolean strict)",
    "methodName" : "convertLocalToUTC",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3567() throws Throwable {\n    TimeZone timeZone0 = TimeZone.getDefault();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);\n    dateTimeZone0.UTC.convertLocalToUTC(946L, true);\n    timeZone0.getDisplayName();\n    long long0 = dateTimeZone0.adjustOffset((-3000L), false);\n    dateTimeZone0.convertLocalToUTC(0L, false, 0L);\n    timeZone0.clone();\n    dateTimeZone0.nextTransition(0L);\n    dateTimeZone0.equals(timeZone0);\n    dateTimeZone0.previousTransition(10800000L);\n    long long1 = dateTimeZone0.convertUTCToLocal(1540L);\n    long long2 = dateTimeZone0.convertLocalToUTC(1000L, false);\n}",
    "testName" : "test3567"
  },
  "test63117" : {
    "methodSignature" : "public static NameProvider getNameProvider()",
    "methodName" : "getNameProvider",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test63117() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forID(\"America/Los_Angeles\");\n    String string0 = dateTimeZone0.UTC.getName(3600000L);\n    DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());\n    DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);\n    dateTimeZone0.UTC.writeReplace();\n    UTCProvider uTCProvider0 = new UTCProvider();\n    DateTimeZone.setProvider(uTCProvider0);\n    dateTimeZone0.isStandardOffset(0L);\n    DefaultNameProvider defaultNameProvider0 = new DefaultNameProvider();\n    DateTimeUtils.setCurrentMillisOffset(604800000L);\n    DateTimeZone.setNameProvider(defaultNameProvider0);\n    dateTimeZone0.toString();\n    dateTimeZone0.getShortName(0L);\n    long long0 = dateTimeZone0.UTC.convertLocalToUTC(0L, false);\n    defaultNameProvider0.getName((Locale) null, (String) null, \"America/Los_Angeles\");\n    String string1 = dateTimeZone0.getShortName(0L, (Locale) null);\n    defaultNameProvider0.getName((Locale) null, (String) null, \"America/Los_Angeles\");\n    dateTimeZone0.nextTransition(0L);\n    DateTimeZone.setNameProvider(defaultNameProvider0);\n    NameProvider nameProvider0 = DateTimeZone.getNameProvider();\n}",
    "testName" : "test63117"
  },
  "test3566" : {
    "methodSignature" : "public long convertUTCToLocal(long instantUTC)",
    "methodName" : "convertUTCToLocal",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3566() throws Throwable {\n    TimeZone timeZone0 = TimeZone.getDefault();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);\n    dateTimeZone0.UTC.convertLocalToUTC(946L, true);\n    timeZone0.getDisplayName();\n    long long0 = dateTimeZone0.adjustOffset((-3000L), false);\n    dateTimeZone0.convertLocalToUTC(0L, false, 0L);\n    timeZone0.clone();\n    dateTimeZone0.nextTransition(0L);\n    dateTimeZone0.equals(timeZone0);\n    dateTimeZone0.previousTransition(10800000L);\n    long long1 = dateTimeZone0.convertUTCToLocal(1540L);\n}",
    "testName" : "test3566"
  },
  "test63118" : {
    "methodSignature" : "public long convertUTCToLocal(long instantUTC)",
    "methodName" : "convertUTCToLocal",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test63118() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forID(\"America/Los_Angeles\");\n    String string0 = dateTimeZone0.UTC.getName(3600000L);\n    DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());\n    DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);\n    dateTimeZone0.UTC.writeReplace();\n    UTCProvider uTCProvider0 = new UTCProvider();\n    DateTimeZone.setProvider(uTCProvider0);\n    dateTimeZone0.isStandardOffset(0L);\n    DefaultNameProvider defaultNameProvider0 = new DefaultNameProvider();\n    DateTimeUtils.setCurrentMillisOffset(604800000L);\n    DateTimeZone.setNameProvider(defaultNameProvider0);\n    dateTimeZone0.toString();\n    dateTimeZone0.getShortName(0L);\n    long long0 = dateTimeZone0.UTC.convertLocalToUTC(0L, false);\n    defaultNameProvider0.getName((Locale) null, (String) null, \"America/Los_Angeles\");\n    String string1 = dateTimeZone0.getShortName(0L, (Locale) null);\n    defaultNameProvider0.getName((Locale) null, (String) null, \"America/Los_Angeles\");\n    dateTimeZone0.nextTransition(0L);\n    DateTimeZone.setNameProvider(defaultNameProvider0);\n    NameProvider nameProvider0 = DateTimeZone.getNameProvider();\n    long long1 = dateTimeZone0.convertUTCToLocal(0L);\n}",
    "testName" : "test63118"
  },
  "test3569" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3569() throws Throwable {\n    TimeZone timeZone0 = TimeZone.getDefault();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);\n    dateTimeZone0.UTC.convertLocalToUTC(946L, true);\n    timeZone0.getDisplayName();\n    long long0 = dateTimeZone0.adjustOffset((-3000L), false);\n    dateTimeZone0.convertLocalToUTC(0L, false, 0L);\n    timeZone0.clone();\n    dateTimeZone0.nextTransition(0L);\n    dateTimeZone0.equals(timeZone0);\n    dateTimeZone0.previousTransition(10800000L);\n    long long1 = dateTimeZone0.convertUTCToLocal(1540L);\n    long long2 = dateTimeZone0.convertLocalToUTC(1000L, false);\n    dateTimeZone0.isStandardOffset(1540L);\n    DateTimeZone.getDefault();\n    DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);\n    DateTimeZone dateTimeZone2 = DateTimeZone.forOffsetMillis(253);\n    dateTimeZone2.toString();\n}",
    "testName" : "test3569"
  },
  "test63119" : {
    "methodSignature" : "public abstract boolean isFixed()",
    "methodName" : "isFixed",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test63119() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forID(\"America/Los_Angeles\");\n    String string0 = dateTimeZone0.UTC.getName(3600000L);\n    DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());\n    DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);\n    dateTimeZone0.UTC.writeReplace();\n    UTCProvider uTCProvider0 = new UTCProvider();\n    DateTimeZone.setProvider(uTCProvider0);\n    dateTimeZone0.isStandardOffset(0L);\n    DefaultNameProvider defaultNameProvider0 = new DefaultNameProvider();\n    DateTimeUtils.setCurrentMillisOffset(604800000L);\n    DateTimeZone.setNameProvider(defaultNameProvider0);\n    dateTimeZone0.toString();\n    dateTimeZone0.getShortName(0L);\n    long long0 = dateTimeZone0.UTC.convertLocalToUTC(0L, false);\n    defaultNameProvider0.getName((Locale) null, (String) null, \"America/Los_Angeles\");\n    String string1 = dateTimeZone0.getShortName(0L, (Locale) null);\n    defaultNameProvider0.getName((Locale) null, (String) null, \"America/Los_Angeles\");\n    dateTimeZone0.nextTransition(0L);\n    DateTimeZone.setNameProvider(defaultNameProvider0);\n    NameProvider nameProvider0 = DateTimeZone.getNameProvider();\n    long long1 = dateTimeZone0.convertUTCToLocal(0L);\n    boolean boolean0 = dateTimeZone0.isFixed();\n}",
    "testName" : "test63119"
  },
  "test3568" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3568() throws Throwable {\n    TimeZone timeZone0 = TimeZone.getDefault();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);\n    dateTimeZone0.UTC.convertLocalToUTC(946L, true);\n    timeZone0.getDisplayName();\n    long long0 = dateTimeZone0.adjustOffset((-3000L), false);\n    dateTimeZone0.convertLocalToUTC(0L, false, 0L);\n    timeZone0.clone();\n    dateTimeZone0.nextTransition(0L);\n    dateTimeZone0.equals(timeZone0);\n    dateTimeZone0.previousTransition(10800000L);\n    long long1 = dateTimeZone0.convertUTCToLocal(1540L);\n    long long2 = dateTimeZone0.convertLocalToUTC(1000L, false);\n    dateTimeZone0.isStandardOffset(1540L);\n    DateTimeZone.getDefault();\n    DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);\n    dateTimeZone1.toString();\n}",
    "testName" : "test3568"
  },
  "test1022" : {
    "methodSignature" : "public ZoneInfoProvider(String resourcePath, ClassLoader loader) throws IOException",
    "methodName" : "ZoneInfoProvider",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1022() throws Throwable {\n    int int0 = 59;\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(59, 59);\n    dateTimeZone0.UTC.convertUTCToLocal(59);\n    DateTimeUtils.setCurrentMillisSystem();\n    dateTimeZone0.getOffsetFromLocal(59);\n    DateTimeUtils.setCurrentMillisSystem();\n    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(59);\n    dateTimeZone0.UTC.getNameKey(59L);\n    dateTimeZone1.UTC.isStandardOffset(0L);\n    dateTimeZone1.UTC.isFixed();\n    dateTimeZone1.UTC.getNameKey(59L);\n    long long0 = 338L;\n    ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();\n    ClassLoader classLoader1 = classLoader0.getParent();\n    ZoneInfoProvider zoneInfoProvider0 = null;\n    zoneInfoProvider0 = new ZoneInfoProvider(\"UTC\", classLoader1);\n}",
    "testName" : "test1022"
  },
  "test3565" : {
    "methodSignature" : "public long adjustOffset(long instant, boolean earlierOrLater)",
    "methodName" : "adjustOffset",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3565() throws Throwable {\n    TimeZone timeZone0 = TimeZone.getDefault();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);\n    dateTimeZone0.UTC.convertLocalToUTC(946L, true);\n    timeZone0.getDisplayName();\n    long long0 = dateTimeZone0.adjustOffset((-3000L), false);\n}",
    "testName" : "test3565"
  },
  "test023" : {
    "methodSignature" : "public static DateTimeZone forID(String id)",
    "methodName" : "forID",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test023() throws Throwable {\n    DateTimeZone.forID(\"-America/Denver\");\n}",
    "testName" : "test023"
  },
  "test1426" : {
    "methodSignature" : "public long nextTransition(long instant)",
    "methodName" : "nextTransition",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1426() throws Throwable {\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    fixedDateTimeZone0.UTC.getOffsetFromLocal(9223372036854775807L);\n    fixedDateTimeZone0.UTC.getShortName(9223372036854775807L, (Locale) null);\n    fixedDateTimeZone0.isStandardOffset(31083663600000L);\n    fixedDateTimeZone0.getOffset(10000000000000L);\n    fixedDateTimeZone0.getID();\n    long long0 = fixedDateTimeZone0.nextTransition(245L);\n}",
    "testName" : "test1426"
  },
  "test2239" : {
    "methodSignature" : "public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException",
    "methodName" : "forOffsetHoursMinutes",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2239() throws Throwable {\n    int int0 = (-884);\n    DateTimeZone.forOffsetHoursMinutes((-884), 1);\n}",
    "testName" : "test2239"
  },
  "test63114" : {
    "methodSignature" : "public final String getName(long instant)",
    "methodName" : "getName",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test63114() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forID(\"America/Los_Angeles\");\n    String string0 = dateTimeZone0.UTC.getName(3600000L);\n}",
    "testName" : "test63114"
  },
  "test0613" : {
    "methodSignature" : "public long convertLocalToUTC(long instantLocal, boolean strict)",
    "methodName" : "convertLocalToUTC",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0613() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    long long0 = 1796L;\n    DateTimeUtils.setCurrentMillisFixed(1796L);\n    boolean boolean0 = true;\n    dateTimeZone0.convertLocalToUTC(9223372036854775807L, true);\n}",
    "testName" : "test0613"
  },
  "test63115" : {
    "methodSignature" : "public long convertLocalToUTC(long instantLocal, boolean strict)",
    "methodName" : "convertLocalToUTC",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test63115() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forID(\"America/Los_Angeles\");\n    String string0 = dateTimeZone0.UTC.getName(3600000L);\n    DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());\n    DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);\n    dateTimeZone0.UTC.writeReplace();\n    UTCProvider uTCProvider0 = new UTCProvider();\n    DateTimeZone.setProvider(uTCProvider0);\n    dateTimeZone0.isStandardOffset(0L);\n    DefaultNameProvider defaultNameProvider0 = new DefaultNameProvider();\n    DateTimeUtils.setCurrentMillisOffset(604800000L);\n    DateTimeZone.setNameProvider(defaultNameProvider0);\n    dateTimeZone0.toString();\n    dateTimeZone0.getShortName(0L);\n    long long0 = dateTimeZone0.UTC.convertLocalToUTC(0L, false);\n}",
    "testName" : "test63115"
  },
  "test63116" : {
    "methodSignature" : "public String getShortName(long instant, Locale locale)",
    "methodName" : "getShortName",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test63116() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forID(\"America/Los_Angeles\");\n    String string0 = dateTimeZone0.UTC.getName(3600000L);\n    DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());\n    DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);\n    dateTimeZone0.UTC.writeReplace();\n    UTCProvider uTCProvider0 = new UTCProvider();\n    DateTimeZone.setProvider(uTCProvider0);\n    dateTimeZone0.isStandardOffset(0L);\n    DefaultNameProvider defaultNameProvider0 = new DefaultNameProvider();\n    DateTimeUtils.setCurrentMillisOffset(604800000L);\n    DateTimeZone.setNameProvider(defaultNameProvider0);\n    dateTimeZone0.toString();\n    dateTimeZone0.getShortName(0L);\n    long long0 = dateTimeZone0.UTC.convertLocalToUTC(0L, false);\n    defaultNameProvider0.getName((Locale) null, (String) null, \"America/Los_Angeles\");\n    String string1 = dateTimeZone0.getShortName(0L, (Locale) null);\n}",
    "testName" : "test63116"
  },
  "test3974" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3974() throws Throwable {\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();\n    dateTimeZone0.isFixed();\n    dateTimeZone0.getID();\n    dateTimeZone0.previousTransition(1);\n    long long0 = dateTimeZone0.convertLocalToUTC(2153L, true);\n    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(1);\n    long long1 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, 2153L);\n    dateTimeZone1.toString();\n}",
    "testName" : "test3974"
  },
  "test3973" : {
    "methodSignature" : "public long convertLocalToUTC(long instantLocal, boolean strict)",
    "methodName" : "convertLocalToUTC",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3973() throws Throwable {\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();\n    dateTimeZone0.isFixed();\n    dateTimeZone0.getID();\n    dateTimeZone0.previousTransition(1);\n    long long0 = dateTimeZone0.convertLocalToUTC(2153L, true);\n}",
    "testName" : "test3973"
  },
  "test2645" : {
    "methodSignature" : "public long adjustOffset(long instant, boolean earlierOrLater)",
    "methodName" : "adjustOffset",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2645() throws Throwable {\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    long long0 = fixedDateTimeZone0.adjustOffset(100000L, true);\n}",
    "testName" : "test2645"
  },
  "test1831" : {
    "methodSignature" : "public long adjustOffset(long instant, boolean earlierOrLater)",
    "methodName" : "adjustOffset",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1831() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(3);\n    long long0 = dateTimeZone0.adjustOffset((-1268L), true);\n}",
    "testName" : "test1831"
  },
  "test3975" : {
    "methodSignature" : "public long getMillisKeepLocal(DateTimeZone newZone, long oldInstant)",
    "methodName" : "getMillisKeepLocal",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3975() throws Throwable {\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();\n    dateTimeZone0.isFixed();\n    dateTimeZone0.getID();\n    dateTimeZone0.previousTransition(1);\n    long long0 = dateTimeZone0.convertLocalToUTC(2153L, true);\n    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(1);\n    long long1 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, 2153L);\n}",
    "testName" : "test3975"
  },
  "test4786" : {
    "methodSignature" : "public String getName(long instant, Locale locale)",
    "methodName" : "getName",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4786() throws Throwable {\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();\n    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);\n    DateTimeZone dateTimeZone1 = gJChronology0.getZone();\n    Locale locale0 = Locale.KOREAN;\n    String string0 = dateTimeZone1.getName(9223372036854775807L, locale0);\n}",
    "testName" : "test4786"
  },
  "test1832" : {
    "methodSignature" : "public String getName(long instant, Locale locale)",
    "methodName" : "getName",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1832() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(3);\n    long long0 = dateTimeZone0.adjustOffset((-1268L), true);\n    dateTimeZone0.getName((long) 3);\n    dateTimeZone0.UTC.getOffset(1157L);\n    DateTimeZone dateTimeZone1 = DateTimeZone.forID(\"+03:00\");\n    dateTimeZone0.convertUTCToLocal(0L);\n    dateTimeZone0.convertUTCToLocal(3);\n    Locale locale0 = Locale.CHINA;\n    String string0 = dateTimeZone0.getName(0L, locale0);\n}",
    "testName" : "test1832"
  },
  "test1833" : {
    "methodSignature" : "public long getMillisKeepLocal(DateTimeZone newZone, long oldInstant)",
    "methodName" : "getMillisKeepLocal",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1833() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(3);\n    long long0 = dateTimeZone0.adjustOffset((-1268L), true);\n    dateTimeZone0.getName((long) 3);\n    dateTimeZone0.UTC.getOffset(1157L);\n    DateTimeZone dateTimeZone1 = DateTimeZone.forID(\"+03:00\");\n    dateTimeZone0.convertUTCToLocal(0L);\n    dateTimeZone0.convertUTCToLocal(3);\n    Locale locale0 = Locale.CHINA;\n    String string0 = dateTimeZone0.getName(0L, locale0);\n    long long1 = dateTimeZone1.getMillisKeepLocal(dateTimeZone0, 1722L);\n}",
    "testName" : "test1833"
  },
  "test62113" : {
    "methodSignature" : "public static DateTimeZone forOffsetHours(int hoursOffset) throws IllegalArgumentException",
    "methodName" : "forOffsetHours",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test62113() throws Throwable {\n    int int0 = 3487;\n    DateTimeZone.forOffsetHours(3487);\n}",
    "testName" : "test62113"
  },
  "test1834" : {
    "methodSignature" : "public abstract int getOffset(long instant)",
    "methodName" : "getOffset",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1834() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(3);\n    long long0 = dateTimeZone0.adjustOffset((-1268L), true);\n    dateTimeZone0.getName((long) 3);\n    dateTimeZone0.UTC.getOffset(1157L);\n    DateTimeZone dateTimeZone1 = DateTimeZone.forID(\"+03:00\");\n    dateTimeZone0.convertUTCToLocal(0L);\n    dateTimeZone0.convertUTCToLocal(3);\n    Locale locale0 = Locale.CHINA;\n    String string0 = dateTimeZone0.getName(0L, locale0);\n    long long1 = dateTimeZone1.getMillisKeepLocal(dateTimeZone0, 1722L);\n    int int0 = dateTimeZone1.getOffset(0L);\n}",
    "testName" : "test1834"
  },
  "test048" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test048() throws Throwable {\n    TimeZone timeZone0 = TimeZone.getDefault();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);\n    DateMidnight dateMidnight0 = DateMidnight.now();\n    dateTimeZone0.getOffset((ReadableInstant) dateMidnight0);\n    dateMidnight0.getMillis();\n}",
    "testName" : "test048"
  },
  "test049" : {
    "methodSignature" : "public final String getShortName(long instant)",
    "methodName" : "getShortName",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test049() throws Throwable {\n    TimeZone timeZone0 = TimeZone.getDefault();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);\n    DateMidnight dateMidnight0 = DateMidnight.now();\n    dateTimeZone0.getOffset((ReadableInstant) dateMidnight0);\n    dateTimeZone0.getNameKey(408L);\n    dateTimeZone0.UTC.previousTransition(366L);\n    dateTimeZone0.toString();\n    dateTimeZone0.getStandardOffset(408L);\n    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(0);\n    DateTimeZone.getAvailableIDs();\n    String string0 = dateTimeZone1.getShortName(0L);\n}",
    "testName" : "test049"
  },
  "test5199" : {
    "methodSignature" : "public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException",
    "methodName" : "forOffsetHoursMinutes",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5199() throws Throwable {\n    int int0 = (-976);\n    DateTimeZone.forOffsetHoursMinutes((-976), (-976));\n}",
    "testName" : "test5199"
  },
  "test52100" : {
    "methodSignature" : "public static DateTimeZone forOffsetHours(int hoursOffset) throws IllegalArgumentException",
    "methodName" : "forOffsetHours",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test52100() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    dateTimeZone0.toTimeZone();\n    DateTimeZone.getDefault();\n    DateTimeZone.getDefault();\n    DateTimeZone.forOffsetHours((-4460));\n}",
    "testName" : "test52100"
  },
  "test3051" : {
    "methodSignature" : "public static DateTimeZone forID(String id)",
    "methodName" : "forID",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3051() throws Throwable {\n    TimeZone timeZone0 = TimeZone.getDefault();\n    DateTimeZone.forTimeZone(timeZone0);\n    DateTimeZone.forID(\"+&OxR7{L] |au,X\");\n}",
    "testName" : "test3051"
  },
  "test1325" : {
    "methodSignature" : "public boolean isLocalDateTimeGap(LocalDateTime localDateTime)",
    "methodName" : "isLocalDateTimeGap",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1325() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);\n    DateTimeZone.getDefault();\n    dateTimeZone0.nextTransition(31557600000L);\n    dateTimeZone0.hashCode();\n    DateTimeZone dateTimeZone1 = DateTimeZone.getDefault();\n    DateTimeZone dateTimeZone2 = DateTimeZone.forTimeZone((TimeZone) null);\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    DateMidnight dateMidnight0 = new DateMidnight(0L, (Chronology) gJChronology0);\n    DateMidnight dateMidnight1 = dateMidnight0.withZoneRetainFields(dateTimeZone2);\n    dateTimeZone1.getOffset((ReadableInstant) dateMidnight1);\n    dateTimeZone2.isLocalDateTimeGap((LocalDateTime) null);\n}",
    "testName" : "test1325"
  },
  "test2138" : {
    "methodSignature" : "public boolean isStandardOffset(long instant)",
    "methodName" : "isStandardOffset",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2138() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);\n    boolean boolean0 = dateTimeZone0.isStandardOffset(30L);\n}",
    "testName" : "test2138"
  },
  "test3464" : {
    "methodSignature" : "public int getOffsetFromLocal(long instantLocal)",
    "methodName" : "getOffsetFromLocal",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3464() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2363);\n    dateTimeZone0.hashCode();\n    String string0 = dateTimeZone0.toString();\n    dateTimeZone0.previousTransition(2596L);\n    long long0 = dateTimeZone0.convertUTCToLocal(100000000000L);\n    int int0 = dateTimeZone0.getOffsetFromLocal(1660L);\n}",
    "testName" : "test3464"
  },
  "test3463" : {
    "methodSignature" : "public long convertUTCToLocal(long instantUTC)",
    "methodName" : "convertUTCToLocal",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3463() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2363);\n    dateTimeZone0.hashCode();\n    String string0 = dateTimeZone0.toString();\n    dateTimeZone0.previousTransition(2596L);\n    long long0 = dateTimeZone0.convertUTCToLocal(100000000000L);\n}",
    "testName" : "test3463"
  },
  "test4278" : {
    "methodSignature" : "public static void setDefault(DateTimeZone zone) throws SecurityException",
    "methodName" : "setDefault",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4278() throws Throwable {\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();\n    DateTimeZone.forTimeZone((TimeZone) null);\n    dateTimeZone0.getStandardOffset((-257L));\n    dateTimeZone0.convertLocalToUTC((-1682L), true, 1658L);\n    DateTimeZone.setDefault((DateTimeZone) null);\n}",
    "testName" : "test4278"
  },
  "test60109" : {
    "methodSignature" : "public long adjustOffset(long instant, boolean earlierOrLater)",
    "methodName" : "adjustOffset",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test60109() throws Throwable {\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    DateTimeUtils.setCurrentMillisFixed(0L);\n    Locale locale0 = Locale.forLanguageTag(\"A_c*d}ih>cx\");\n    fixedDateTimeZone0.isFixed();\n    Locale locale1 = Locale.SIMPLIFIED_CHINESE;\n    locale0.getDisplayCountry(locale1);\n    fixedDateTimeZone0.getShortName(0L, locale0);\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);\n    dateTimeZone0.equals(\"A_c*d}ih>cx\");\n    DateTimeUtils.setCurrentMillisSystem();\n    fixedDateTimeZone0.getOffsetFromLocal(0L);\n    dateTimeZone0.getStandardOffset(0);\n    DateTimeUtils.setCurrentMillisOffset(0);\n    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetHours(0);\n    fixedDateTimeZone0.nextTransition((-1L));\n    DateTimeZone dateTimeZone2 = DateTimeZone.getDefault();\n    long long0 = dateTimeZone2.adjustOffset(0, false);\n}",
    "testName" : "test60109"
  },
  "test60108" : {
    "methodSignature" : "public static DateTimeZone getDefault()",
    "methodName" : "getDefault",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test60108() throws Throwable {\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    DateTimeUtils.setCurrentMillisFixed(0L);\n    Locale locale0 = Locale.forLanguageTag(\"A_c*d}ih>cx\");\n    fixedDateTimeZone0.isFixed();\n    Locale locale1 = Locale.SIMPLIFIED_CHINESE;\n    locale0.getDisplayCountry(locale1);\n    fixedDateTimeZone0.getShortName(0L, locale0);\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);\n    dateTimeZone0.equals(\"A_c*d}ih>cx\");\n    DateTimeUtils.setCurrentMillisSystem();\n    fixedDateTimeZone0.getOffsetFromLocal(0L);\n    dateTimeZone0.getStandardOffset(0);\n    DateTimeUtils.setCurrentMillisOffset(0);\n    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetHours(0);\n    fixedDateTimeZone0.nextTransition((-1L));\n    DateTimeZone dateTimeZone2 = DateTimeZone.getDefault();\n}",
    "testName" : "test60108"
  },
  "test1729" : {
    "methodSignature" : "public long getMillisKeepLocal(DateTimeZone newZone, long oldInstant)",
    "methodName" : "getMillisKeepLocal",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1729() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    UTCProvider uTCProvider0 = new UTCProvider();\n    uTCProvider0.getZone(\"(r\");\n    long long0 = dateTimeZone0.getMillisKeepLocal((DateTimeZone) null, (-657L));\n}",
    "testName" : "test1729"
  },
  "test037" : {
    "methodSignature" : "public boolean isStandardOffset(long instant)",
    "methodName" : "isStandardOffset",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test037() throws Throwable {\n    DateTimeZone.getAvailableIDs();\n    UTCProvider uTCProvider0 = new UTCProvider();\n    uTCProvider0.getAvailableIDs();\n    uTCProvider0.getAvailableIDs();\n    DateTimeZone.setProvider(uTCProvider0);\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2253));\n    long long0 = dateTimeZone0.adjustOffset(0L, false);\n    DateTimeZone.getProvider();\n    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis((-2253));\n    DateTimeZone dateTimeZone2 = DateTimeZone.forOffsetMillis(2000);\n    boolean boolean0 = dateTimeZone0.isStandardOffset(0L);\n}",
    "testName" : "test037"
  },
  "test035" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test035() throws Throwable {\n    DateTimeZone.getAvailableIDs();\n    UTCProvider uTCProvider0 = new UTCProvider();\n    uTCProvider0.getAvailableIDs();\n    uTCProvider0.getAvailableIDs();\n    DateTimeZone.setProvider(uTCProvider0);\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2253));\n    long long0 = dateTimeZone0.adjustOffset(0L, false);\n    DateTimeZone.getProvider();\n    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis((-2253));\n    dateTimeZone1.getID();\n}",
    "testName" : "test035"
  },
  "test036" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test036() throws Throwable {\n    DateTimeZone.getAvailableIDs();\n    UTCProvider uTCProvider0 = new UTCProvider();\n    uTCProvider0.getAvailableIDs();\n    uTCProvider0.getAvailableIDs();\n    DateTimeZone.setProvider(uTCProvider0);\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2253));\n    long long0 = dateTimeZone0.adjustOffset(0L, false);\n    DateTimeZone.getProvider();\n    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis((-2253));\n    DateTimeZone dateTimeZone2 = DateTimeZone.forOffsetMillis(2000);\n    dateTimeZone2.toString();\n}",
    "testName" : "test036"
  },
  "test3462" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3462() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2363);\n    dateTimeZone0.hashCode();\n    String string0 = dateTimeZone0.toString();\n}",
    "testName" : "test3462"
  },
  "test57105" : {
    "methodSignature" : "public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException",
    "methodName" : "forOffsetHoursMinutes",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test57105() throws Throwable {\n    FileSystemHandling.createFolder((EvoSuiteFile) null);\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    fixedDateTimeZone0.getOffset(36600010L);\n    TimeZone timeZone0 = TimeZone.getTimeZone(\"U=N<5e\");\n    DateTimeZone.forTimeZone(timeZone0);\n    fixedDateTimeZone0.UTC.getStandardOffset(0);\n    fixedDateTimeZone0.getOffsetFromLocal((-1204L));\n    DateTimeZone.setDefault(fixedDateTimeZone0);\n    FileSystemHandling fileSystemHandling0 = new FileSystemHandling();\n    DateTimeZone.forOffsetHoursMinutes((-230), 60);\n}",
    "testName" : "test57105"
  }
}