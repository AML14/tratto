org.joda.time.DateTimeZone,@Test(timeout = 4000)
public void test048() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
    DateMidnight dateMidnight0 = DateMidnight.now();
    dateTimeZone0.getOffset((ReadableInstant) dateMidnight0);
    dateMidnight0.getMillis();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.DateTimeZone,@Test(timeout = 4000)
public void test0512() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1));
    dateTimeZone0.toTimeZone();
    long long0 = (-918L);
    dateTimeZone0.convertLocalToUTC((-918L), true, (-1651L));
    DateTimeZone.forOffsetHours(1);
    DateTimeZone.forID(""America/Denver"");
    Locale locale0 = Locale.GERMANY;
    locale0.getUnicodeLocaleType(""America/Denver"");
},ERROR,java.nio.file.NoSuchFileException,/home/star_usit_group/tratto/experiment/generator/resources/defects4j/temp/Time_9b/src/main/java/java/util/Locale.java
org.joda.time.DateTimeZone,@Test(timeout = 4000)
public void test1022() throws Throwable {
    int int0 = 59;
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(59, 59);
    dateTimeZone0.UTC.convertUTCToLocal(59);
    DateTimeUtils.setCurrentMillisSystem();
    dateTimeZone0.getOffsetFromLocal(59);
    DateTimeUtils.setCurrentMillisSystem();
    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(59);
    dateTimeZone0.UTC.getNameKey(59L);
    dateTimeZone1.UTC.isStandardOffset(0L);
    dateTimeZone1.UTC.isFixed();
    dateTimeZone1.UTC.getNameKey(59L);
    long long0 = 338L;
    ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
    ClassLoader classLoader1 = classLoader0.getParent();
    ZoneInfoProvider zoneInfoProvider0 = null;
    zoneInfoProvider0 = new ZoneInfoProvider(""UTC"", classLoader1);
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.DateTimeZone,@Test(timeout = 4000)
public void test1426() throws Throwable {
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    fixedDateTimeZone0.UTC.getOffsetFromLocal(9223372036854775807L);
    fixedDateTimeZone0.UTC.getShortName(9223372036854775807L, (Locale) null);
    fixedDateTimeZone0.isStandardOffset(31083663600000L);
    fixedDateTimeZone0.getOffset(10000000000000L);
    fixedDateTimeZone0.getID();
    long long0 = fixedDateTimeZone0.nextTransition(245L);
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.DateTimeZone,@Test(timeout = 4000)
public void test2037() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forID(""UTC"");
    long long0 = 0L;
    Object object0 = new Object();
    dateTimeZone0.UTC.toTimeZone();
    LocalDateTime localDateTime0 = null;
    localDateTime0 = new LocalDateTime(object0, dateTimeZone0);
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.DateTimeZone,@Test(timeout = 4000)
public void test2949() throws Throwable {
    DateTime dateTime0 = new DateTime(498L);
    DateTime dateTime1 = dateTime0.minusDays(1);
    DateTime dateTime2 = dateTime1.withEarlierOffsetAtOverlap();
    GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) dateTime2, 1);
    DateTimeZone dateTimeZone0 = gJChronology0.getZone();
    dateTimeZone0.hashCode();
    dateTime2.getMillis();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.DateTimeZone,@Test(timeout = 4000)
public void test3670() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.MAX;
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    DateTimeZone.forTimeZone(timeZone0);
    DateTimeUtils.setCurrentMillisOffset(10800000L);
    LocalDateTime.parse(""4|rmN$}!tZmIy~tl$c"");
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.DateTimeZone,@Test(timeout = 4000)
public void test4177() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2186);
    dateTimeZone0.isLocalDateTimeGap((LocalDateTime) null);
    Set<String> set0 = DateTimeZone.getAvailableIDs();
    set0.size();
},ERROR,java.nio.file.NoSuchFileException,/home/star_usit_group/tratto/experiment/generator/resources/defects4j/temp/Time_9b/src/main/java/java/util/Set.java
org.joda.time.DateTimeZone,@Test(timeout = 4000)
public void test4379() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-674));
    dateTimeZone0.UTC.nextTransition(0L);
    DateTimeUtils.setCurrentMillisFixed((-1328L));
    DateTimeUtils.setCurrentMillisSystem();
    dateTimeZone0.getName((long) (-674), (Locale) null);
    int int0 = (-4253);
    int int1 = 57;
    SimpleTimeZone simpleTimeZone0 = null;
    simpleTimeZone0 = new SimpleTimeZone((-674), ""America/Los_Angeles"", (-1319), (-4253), 928, 928, 11, 1, 0, 11, 0, 459, 57);
},ERROR,java.nio.file.NoSuchFileException,/home/star_usit_group/tratto/experiment/generator/resources/defects4j/temp/Time_9b/src/main/java/java/util/SimpleTimeZone.java
org.joda.time.DateTimeZone,@Test(timeout = 4000)
public void test59107() throws Throwable {
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    LocalDateTime localDateTime0 = new LocalDateTime((-982L), (DateTimeZone) fixedDateTimeZone0);
    LocalDateTime localDateTime1 = localDateTime0.plusYears(46);
    FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
    FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""org.jodatime.chrono.BasicChronology$YearInfo"");
    Duration duration0 = Duration.millis(755L);
    LocalDateTime localDateTime2 = localDateTime1.withDurationAdded(duration0, 50);
    DurationFieldType durationFieldType0 = DurationFieldType.MONTHS_TYPE;
    LocalDateTime localDateTime3 = localDateTime2.withFieldAdded(durationFieldType0, 46);
    LocalDateTime localDateTime4 = localDateTime3.minusHours(50);
    localDateTime3.withMillisOfDay(2316);
    fixedDateTimeZone0.isLocalDateTimeGap(localDateTime4);
    fixedDateTimeZone0.adjustOffset(9223372036854775807L, false);
    DateTimeZone.getAvailableIDs();
    fixedDateTimeZone0.isLocalDateTimeGap(localDateTime3);
    DateTimeZone.getNameProvider();
    fixedDateTimeZone0.toTimeZone();
    Set<String> set0 = DateTimeZone.getAvailableIDs();
    set0.isEmpty();
},ERROR,java.nio.file.NoSuchFileException,/home/star_usit_group/tratto/experiment/generator/resources/defects4j/temp/Time_9b/src/main/java/java/util/Set.java
org.joda.time.DateTimeZone,@Test(timeout = 4000)
public void test61112() throws Throwable {
    int int0 = 1;
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
    Interval interval0 = new Interval((-272L), 10800000L);
    Duration duration0 = interval0.toDuration();
    dateTimeZone0.getNameKey((-352L));
    interval0.withEndMillis(1);
    DateTime dateTime0 = interval0.getEnd();
    dateTime0.withDayOfYear(1);
    dateTime0.getDayOfMonth();
    interval0.withDurationBeforeEnd(duration0);
    dateTime0.withZoneRetainFields(dateTimeZone0);
    dateTimeZone0.getOffset((ReadableInstant) dateTime0);
    DateTimeZone.getAvailableIDs();
    dateTimeZone0.convertUTCToLocal((-352L));
    dateTimeZone0.isStandardOffset((-1611L));
    dateTimeZone0.previousTransition(0L);
    dateTimeZone0.isFixed();
    DateTimeZone.getDefault();
    LocalDateTime.fromDateFields((Date) null);
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.DateTimeZone,@Test(timeout = 4000)
public void test64120() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetHours(0);
    DefaultNameProvider defaultNameProvider0 = new DefaultNameProvider();
    DateTimeZone.setNameProvider(defaultNameProvider0);
    dateTimeZone1.getStandardOffset(0);
    Locale locale0 = new Locale(""f (V"", "" - "", "" - "");
    dateTimeZone1.getName((long) 0, locale0);
    DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
    DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
    doReturn(910, 0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class), anyString(), anyInt());
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
    int int0 = 7678125;
    dateTimeZone1.getOffsetFromLocal(0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(7678125);
    Integer integer0 = new Integer(7678125);
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer0);
    dateTimeZone0.getShortName((long) 7678125);
    DateTimeZone.forOffsetMillis(910);
    DateTime dateTime0 = dateTimeFormatter2.parseDateTime(""America/Chicago"");
    dateTime0.minusMillis(2774);
    String string0 = ""^=Q+3q\\u==+CQ{fn<2"";
    dateTimeFormatter2.parseMutableDateTime(string0);
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
