{
  "test1213" : {
    "methodSignature" : "public long computeMillis()",
    "methodName" : "computeMillis",
    "className" : "org.joda.time.format.DateTimeParserBucket",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1213() throws Throwable {\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();\n    Locale locale0 = Locale.ITALY;\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0L, buddhistChronology0, locale0, (Integer) 1);\n    long long0 = dateTimeParserBucket0.computeMillis();\n}",
    "testName" : "test1213"
  },
  "test2224" : {
    "methodSignature" : "public int getOffset()",
    "methodName" : "getOffset",
    "className" : "org.joda.time.format.DateTimeParserBucket",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2224() throws Throwable {\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();\n    LenientChronology lenientChronology0 = LenientChronology.getInstance(ethiopicChronology0);\n    Chronology chronology0 = lenientChronology0.withZone((DateTimeZone) null);\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(606, chronology0, (Locale) null, (Integer) 1);\n    long long0 = dateTimeParserBucket0.computeMillis(true, \"\");\n    dateTimeParserBucket0.getOffset();\n}",
    "testName" : "test2224"
  },
  "test1011" : {
    "methodSignature" : "public long computeMillis(boolean resetFields, String text)",
    "methodName" : "computeMillis",
    "className" : "org.joda.time.format.DateTimeParserBucket",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1011() throws Throwable {\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_INDIAN;\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) fixedDateTimeZone0, islamicChronology_LeapYearPatternType0);\n    Locale locale0 = Locale.JAPANESE;\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-1211L), islamicChronology0, locale0, (Integer) 1, (-306));\n    long long0 = dateTimeParserBucket0.computeMillis(false, \"an,em\");\n}",
    "testName" : "test1011"
  },
  "test2223" : {
    "methodSignature" : "public long computeMillis(boolean resetFields, String text)",
    "methodName" : "computeMillis",
    "className" : "org.joda.time.format.DateTimeParserBucket",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2223() throws Throwable {\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();\n    LenientChronology lenientChronology0 = LenientChronology.getInstance(ethiopicChronology0);\n    Chronology chronology0 = lenientChronology0.withZone((DateTimeZone) null);\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(606, chronology0, (Locale) null, (Integer) 1);\n    long long0 = dateTimeParserBucket0.computeMillis(true, \"\");\n}",
    "testName" : "test2223"
  },
  "test3235" : {
    "methodSignature" : "public long computeMillis(boolean resetFields)",
    "methodName" : "computeMillis",
    "className" : "org.joda.time.format.DateTimeParserBucket",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3235() throws Throwable {\n    ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();\n    Locale locale0 = Locale.TAIWAN;\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-1120L), iSOChronology0, locale0, (Integer) null, (-3660));\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();\n    dateTimeParserBucket0.saveField(dateTimeFieldType0, \"org.joda.time.format.DateTimeFormatterBuilder$Composite\", locale0);\n    dateTimeParserBucket0.saveField(dateTimeFieldType0, \"org.joda.time.format.DateTimeFormatterBuilder$Composite\", locale0);\n    dateTimeParserBucket0.computeMillis(true);\n}",
    "testName" : "test3235"
  },
  "test033" : {
    "methodSignature" : "public long computeMillis(boolean resetFields, String text)",
    "methodName" : "computeMillis",
    "className" : "org.joda.time.format.DateTimeParserBucket",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033() throws Throwable {\n    ISOChronology iSOChronology0 = ISOChronology.getInstance();\n    Locale locale0 = Locale.CANADA_FRENCH;\n    Integer integer0 = new Integer(949);\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0L, iSOChronology0, locale0, integer0);\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();\n    dateTimeParserBucket0.saveField(dateTimeFieldType0, \"|\", locale0);\n    dateTimeParserBucket0.computeMillis(false, \"dLa;;DP\");\n}",
    "testName" : "test033"
  },
  "test2629" : {
    "methodSignature" : "public int getOffset()",
    "methodName" : "getOffset",
    "className" : "org.joda.time.format.DateTimeParserBucket",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2629() throws Throwable {\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);\n    Locale locale0 = Locale.ITALY;\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(2077L, ethiopicChronology0, locale0, (Integer) 1, 1);\n    dateTimeParserBucket0.setZone(dateTimeZone0);\n    dateTimeParserBucket0.getOffset();\n}",
    "testName" : "test2629"
  },
  "test078" : {
    "methodSignature" : "public int getOffset()",
    "methodName" : "getOffset",
    "className" : "org.joda.time.format.DateTimeParserBucket",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test078() throws Throwable {\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) fixedDateTimeZone0);\n    Locale locale0 = Locale.SIMPLIFIED_CHINESE;\n    Integer integer0 = new Integer((-72));\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0L, islamicChronology0, locale0, integer0);\n    dateTimeParserBucket0.getPivotYear();\n    dateTimeParserBucket0.getOffset();\n}",
    "testName" : "test078"
  },
  "test1617" : {
    "methodSignature" : "public void saveField(DateTimeFieldType fieldType, int value)",
    "methodName" : "saveField",
    "className" : "org.joda.time.format.DateTimeParserBucket",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1617() throws Throwable {\n    JulianChronology julianChronology0 = JulianChronology.getInstance();\n    Locale locale0 = Locale.TRADITIONAL_CHINESE;\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(912L, julianChronology0, locale0);\n    dateTimeParserBucket0.saveField((DateTimeFieldType) null, (-2428));\n}",
    "testName" : "test1617"
  },
  "test1415" : {
    "methodSignature" : "static int compareReverse(DurationField a, DurationField b)",
    "methodName" : "compareReverse",
    "className" : "org.joda.time.format.DateTimeParserBucket",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1415() throws Throwable {\n    MillisDurationField millisDurationField0 = (MillisDurationField) MillisDurationField.INSTANCE;\n    DurationFieldType durationFieldType0 = DurationFieldType.millis();\n    ScaledDurationField scaledDurationField0 = new ScaledDurationField(millisDurationField0, durationFieldType0, 606);\n    int int0 = DateTimeParserBucket.compareReverse(scaledDurationField0, millisDurationField0);\n}",
    "testName" : "test1415"
  },
  "test2426" : {
    "methodSignature" : "public long computeMillis(boolean resetFields, String text)",
    "methodName" : "computeMillis",
    "className" : "org.joda.time.format.DateTimeParserBucket",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2426() throws Throwable {\n    ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();\n    Locale locale0 = Locale.US;\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-1120L), iSOChronology0, locale0, (Integer) null, 32);\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();\n    dateTimeParserBucket0.saveField(dateTimeFieldType0, \"org.joda.time.format.DateTimeFormatterBuilder$Composite\", locale0);\n    dateTimeParserBucket0.computeMillis(true, \"America/Phoenix\");\n}",
    "testName" : "test2426"
  },
  "test2021" : {
    "methodSignature" : "static int compareReverse(DurationField a, DurationField b)",
    "methodName" : "compareReverse",
    "className" : "org.joda.time.format.DateTimeParserBucket",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2021() throws Throwable {\n    int int0 = DateTimeParserBucket.compareReverse((DurationField) null, (DurationField) null);\n}",
    "testName" : "test2021"
  },
  "test3033" : {
    "methodSignature" : "public long computeMillis(boolean resetFields)",
    "methodName" : "computeMillis",
    "className" : "org.joda.time.format.DateTimeParserBucket",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3033() throws Throwable {\n    ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();\n    Locale locale0 = Locale.TAIWAN;\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-1120L), iSOChronology0, locale0, (Integer) null, (-3660));\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();\n    dateTimeParserBucket0.saveField(dateTimeFieldType0, \"org.joda.time.format.DateTimeFormatterBuilder$Composite\", locale0);\n    DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.secondOfDay();\n    dateTimeParserBucket0.saveField(dateTimeFieldType1, \"org.joda.time.format.DateTimeFormatterBuilder$Composite\", locale0);\n    dateTimeParserBucket0.computeMillis(true);\n}",
    "testName" : "test3033"
  },
  "test4657" : {
    "methodSignature" : "public int getOffset()",
    "methodName" : "getOffset",
    "className" : "org.joda.time.format.DateTimeParserBucket",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4657() throws Throwable {\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();\n    Locale locale0 = Locale.ITALY;\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(2077L, ethiopicChronology0, locale0, (Integer) 1, 1);\n    dateTimeParserBucket0.getChronology();\n    dateTimeParserBucket0.getOffset();\n}",
    "testName" : "test4657"
  },
  "test3643" : {
    "methodSignature" : "public int getOffset()",
    "methodName" : "getOffset",
    "className" : "org.joda.time.format.DateTimeParserBucket",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3643() throws Throwable {\n    GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();\n    Locale locale0 = Locale.ENGLISH;\n    Integer integer0 = new Integer((-2347));\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1L, gregorianChronology0, locale0, integer0);\n    DateTimeParserBucket dateTimeParserBucket1 = new DateTimeParserBucket(1L, gregorianChronology0, locale0, (Integer) null, (-2347));\n    Object object0 = dateTimeParserBucket1.saveState();\n    boolean boolean0 = dateTimeParserBucket0.restoreState(object0);\n    dateTimeParserBucket1.getOffset();\n}",
    "testName" : "test3643"
  },
  "test2831" : {
    "methodSignature" : "public int getOffset()",
    "methodName" : "getOffset",
    "className" : "org.joda.time.format.DateTimeParserBucket",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2831() throws Throwable {\n    Integer integer0 = new Integer(0);\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0L, (Chronology) null, (Locale) null, integer0, 0);\n    dateTimeParserBucket0.getOffset();\n}",
    "testName" : "test2831"
  },
  "test4455" : {
    "methodSignature" : "public int getOffset()",
    "methodName" : "getOffset",
    "className" : "org.joda.time.format.DateTimeParserBucket",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4455() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);\n    Locale locale0 = Locale.UK;\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, buddhistChronology0, locale0, (Integer) 1, 1);\n    dateTimeParserBucket0.getPivotYear();\n    dateTimeParserBucket0.getOffset();\n}",
    "testName" : "test4455"
  },
  "test3642" : {
    "methodSignature" : "public boolean restoreState(Object savedState)",
    "methodName" : "restoreState",
    "className" : "org.joda.time.format.DateTimeParserBucket",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3642() throws Throwable {\n    GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();\n    Locale locale0 = Locale.ENGLISH;\n    Integer integer0 = new Integer((-2347));\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1L, gregorianChronology0, locale0, integer0);\n    DateTimeParserBucket dateTimeParserBucket1 = new DateTimeParserBucket(1L, gregorianChronology0, locale0, (Integer) null, (-2347));\n    Object object0 = dateTimeParserBucket1.saveState();\n    boolean boolean0 = dateTimeParserBucket0.restoreState(object0);\n}",
    "testName" : "test3642"
  },
  "test3641" : {
    "methodSignature" : "public Object saveState()",
    "methodName" : "saveState",
    "className" : "org.joda.time.format.DateTimeParserBucket",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3641() throws Throwable {\n    GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();\n    Locale locale0 = Locale.ENGLISH;\n    Integer integer0 = new Integer((-2347));\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1L, gregorianChronology0, locale0, integer0);\n    DateTimeParserBucket dateTimeParserBucket1 = new DateTimeParserBucket(1L, gregorianChronology0, locale0, (Integer) null, (-2347));\n    Object object0 = dateTimeParserBucket1.saveState();\n}",
    "testName" : "test3641"
  },
  "test067" : {
    "methodSignature" : "public int getOffset()",
    "methodName" : "getOffset",
    "className" : "org.joda.time.format.DateTimeParserBucket",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test067() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);\n    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);\n    Locale locale0 = Locale.JAPANESE;\n    Integer integer0 = new Integer(0);\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2289L), gregorianChronology0, locale0, integer0);\n    dateTimeParserBucket0.getPivotYear();\n    dateTimeParserBucket0.getOffset();\n}",
    "testName" : "test067"
  },
  "test3846" : {
    "methodSignature" : "public int getOffset()",
    "methodName" : "getOffset",
    "className" : "org.joda.time.format.DateTimeParserBucket",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3846() throws Throwable {\n    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();\n    Locale locale0 = Locale.KOREAN;\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(31449599966L, gregorianChronology0, locale0);\n    dateTimeParserBucket0.saveState();\n    Object object0 = dateTimeParserBucket0.saveState();\n    dateTimeParserBucket0.getOffset();\n}",
    "testName" : "test3846"
  },
  "test3847" : {
    "methodSignature" : "public Object saveState()",
    "methodName" : "saveState",
    "className" : "org.joda.time.format.DateTimeParserBucket",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3847() throws Throwable {\n    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();\n    Locale locale0 = Locale.KOREAN;\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(31449599966L, gregorianChronology0, locale0);\n    dateTimeParserBucket0.saveState();\n    Object object0 = dateTimeParserBucket0.saveState();\n}",
    "testName" : "test3847"
  },
  "test1819" : {
    "methodSignature" : "public long computeMillis()",
    "methodName" : "computeMillis",
    "className" : "org.joda.time.format.DateTimeParserBucket",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1819() throws Throwable {\n    Locale locale0 = Locale.PRC;\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-1321L), (Chronology) null, locale0);\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();\n    dateTimeParserBucket0.saveField(dateTimeFieldType0, (-2281));\n    dateTimeParserBucket0.computeMillis();\n}",
    "testName" : "test1819"
  },
  "test4253" : {
    "methodSignature" : "public int getOffset()",
    "methodName" : "getOffset",
    "className" : "org.joda.time.format.DateTimeParserBucket",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4253() throws Throwable {\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();\n    Locale locale0 = Locale.ITALY;\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(2077L, ethiopicChronology0, locale0, (Integer) 1, 1);\n    long long0 = dateTimeParserBucket0.computeMillis();\n    dateTimeParserBucket0.getOffset();\n}",
    "testName" : "test4253"
  },
  "test4252" : {
    "methodSignature" : "public long computeMillis()",
    "methodName" : "computeMillis",
    "className" : "org.joda.time.format.DateTimeParserBucket",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4252() throws Throwable {\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();\n    Locale locale0 = Locale.ITALY;\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(2077L, ethiopicChronology0, locale0, (Integer) 1, 1);\n    long long0 = dateTimeParserBucket0.computeMillis();\n}",
    "testName" : "test4252"
  },
  "test4050" : {
    "methodSignature" : "public int getOffset()",
    "methodName" : "getOffset",
    "className" : "org.joda.time.format.DateTimeParserBucket",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4050() throws Throwable {\n    GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();\n    Locale locale0 = Locale.JAPANESE;\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-1295L), gregorianChronology0, locale0);\n    Integer integer0 = new Integer(3462);\n    dateTimeParserBucket0.setPivotYear(integer0);\n    dateTimeParserBucket0.getOffset();\n}",
    "testName" : "test4050"
  },
  "test3336" : {
    "methodSignature" : "public long computeMillis(boolean resetFields, String text)",
    "methodName" : "computeMillis",
    "className" : "org.joda.time.format.DateTimeParserBucket",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3336() throws Throwable {\n    ISOChronology iSOChronology0 = ISOChronology.getInstance();\n    Locale locale0 = Locale.CANADA_FRENCH;\n    Integer integer0 = new Integer(949);\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0L, iSOChronology0, locale0, integer0);\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();\n    DateTimeField dateTimeField0 = buddhistChronology0.dayOfWeek();\n    dateTimeParserBucket0.saveField(dateTimeField0, 10);\n    dateTimeParserBucket0.saveField(dateTimeField0, 1);\n    dateTimeParserBucket0.computeMillis(false, \"dLa;;DP\");\n}",
    "testName" : "test3336"
  },
  "test1314" : {
    "methodSignature" : "public long computeMillis()",
    "methodName" : "computeMillis",
    "className" : "org.joda.time.format.DateTimeParserBucket",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1314() throws Throwable {\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();\n    DateTimeField dateTimeField0 = buddhistChronology0.secondOfDay();\n    Locale locale0 = Locale.ITALY;\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, buddhistChronology0, locale0, (Integer) 1);\n    dateTimeParserBucket0.saveField(dateTimeField0, 0);\n    long long0 = dateTimeParserBucket0.computeMillis();\n}",
    "testName" : "test1314"
  },
  "test2325" : {
    "methodSignature" : "public long computeMillis(boolean resetFields, String text)",
    "methodName" : "computeMillis",
    "className" : "org.joda.time.format.DateTimeParserBucket",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2325() throws Throwable {\n    Locale locale0 = Locale.FRANCE;\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(243L, (Chronology) null, locale0, (Integer) null, (-3230));\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();\n    DateTimeField dateTimeField0 = buddhistChronology0.secondOfMinute();\n    dateTimeParserBucket0.saveField(dateTimeField0, (-3230));\n    dateTimeParserBucket0.computeMillis(true, (String) null);\n}",
    "testName" : "test2325"
  },
  "test3134" : {
    "methodSignature" : "static int compareReverse(DurationField a, DurationField b)",
    "methodName" : "compareReverse",
    "className" : "org.joda.time.format.DateTimeParserBucket",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3134() throws Throwable {\n    DurationFieldType durationFieldType0 = DurationFieldType.weeks();\n    UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance(durationFieldType0);\n    int int0 = DateTimeParserBucket.compareReverse(unsupportedDurationField0, unsupportedDurationField0);\n}",
    "testName" : "test3134"
  },
  "test1112" : {
    "methodSignature" : "public long computeMillis(boolean resetFields)",
    "methodName" : "computeMillis",
    "className" : "org.joda.time.format.DateTimeParserBucket",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1112() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);\n    CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);\n    Chronology chronology0 = copticChronology0.withUTC();\n    Locale locale0 = new Locale(\"org.joda.time.DateTimeUtils$OffsetMillisProvider\", \"org.joda.time.DateTimeUtils$OffsetMillisProvider\");\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0L, chronology0, locale0);\n    long long0 = dateTimeParserBucket0.computeMillis(false);\n}",
    "testName" : "test1112"
  },
  "test011" : {
    "methodSignature" : "public static LocalDate parse(String str)",
    "methodName" : "parse",
    "className" : "org.joda.time.format.DateTimeParserBucket",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011() throws Throwable {\n    LocalDate.parse(\"43r]uw&4\");\n}",
    "testName" : "test011"
  },
  "test056" : {
    "methodSignature" : "public int getOffset()",
    "methodName" : "getOffset",
    "className" : "org.joda.time.format.DateTimeParserBucket",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test056() throws Throwable {\n    GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();\n    Locale locale0 = Locale.ITALIAN;\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2036L), gregorianChronology0, locale0);\n    dateTimeParserBucket0.getPivotYear();\n    dateTimeParserBucket0.getOffset();\n}",
    "testName" : "test056"
  },
  "test1718" : {
    "methodSignature" : "public long computeMillis(boolean resetFields, String text)",
    "methodName" : "computeMillis",
    "className" : "org.joda.time.format.DateTimeParserBucket",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1718() throws Throwable {\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();\n    Locale locale0 = Locale.JAPANESE;\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0L, ethiopicChronology0, locale0, (Integer) 1, 169200000);\n    dateTimeParserBucket0.saveField((DateTimeField) null, (-28800000));\n    dateTimeParserBucket0.computeMillis(false, \"z6G8<MyYn0=nBd\");\n}",
    "testName" : "test1718"
  },
  "test2528" : {
    "methodSignature" : "public long computeMillis(boolean resetFields, String text)",
    "methodName" : "computeMillis",
    "className" : "org.joda.time.format.DateTimeParserBucket",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2528() throws Throwable {\n    JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();\n    Locale locale0 = Locale.CANADA;\n    Integer integer0 = Integer.valueOf(0);\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0L, julianChronology0, locale0, integer0);\n    Object object0 = dateTimeParserBucket0.saveState();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();\n    DurationField durationField0 = buddhistChronology0.weekyears();\n    UnsupportedDateTimeField unsupportedDateTimeField0 = UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField0);\n    dateTimeParserBucket0.saveField((DateTimeField) unsupportedDateTimeField0, 0);\n    boolean boolean0 = dateTimeParserBucket0.restoreState(object0);\n    long long0 = dateTimeParserBucket0.computeMillis(true, \"1\");\n}",
    "testName" : "test2528"
  },
  "test1516" : {
    "methodSignature" : "public void saveField(DateTimeFieldType fieldType, String text, Locale locale)",
    "methodName" : "saveField",
    "className" : "org.joda.time.format.DateTimeParserBucket",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1516() throws Throwable {\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();\n    Locale locale0 = Locale.ITALY;\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0L, buddhistChronology0, locale0, (Integer) 1);\n    dateTimeParserBucket0.saveField((DateTimeFieldType) null, \"`2-T1=0IpZC7f>(iDw\", locale0);\n}",
    "testName" : "test1516"
  },
  "test2527" : {
    "methodSignature" : "public boolean restoreState(Object savedState)",
    "methodName" : "restoreState",
    "className" : "org.joda.time.format.DateTimeParserBucket",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2527() throws Throwable {\n    JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();\n    Locale locale0 = Locale.CANADA;\n    Integer integer0 = Integer.valueOf(0);\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0L, julianChronology0, locale0, integer0);\n    Object object0 = dateTimeParserBucket0.saveState();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();\n    DurationField durationField0 = buddhistChronology0.weekyears();\n    UnsupportedDateTimeField unsupportedDateTimeField0 = UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField0);\n    dateTimeParserBucket0.saveField((DateTimeField) unsupportedDateTimeField0, 0);\n    boolean boolean0 = dateTimeParserBucket0.restoreState(object0);\n}",
    "testName" : "test2527"
  },
  "test3539" : {
    "methodSignature" : "public int getOffset()",
    "methodName" : "getOffset",
    "className" : "org.joda.time.format.DateTimeParserBucket",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3539() throws Throwable {\n    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();\n    Locale locale0 = Locale.KOREAN;\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(31449599966L, gregorianChronology0, locale0);\n    DateTimeParserBucket.SavedState dateTimeParserBucket_SavedState0 = (DateTimeParserBucket.SavedState) dateTimeParserBucket0.saveState();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();\n    dateTimeParserBucket0.saveField(dateTimeFieldType0, \"&h-UNPsd[>x7o=S\", locale0);\n    boolean boolean0 = dateTimeParserBucket_SavedState0.restoreState(dateTimeParserBucket0);\n    long long0 = dateTimeParserBucket0.computeMillis(false);\n    dateTimeParserBucket0.getOffset();\n}",
    "testName" : "test3539"
  },
  "test2730" : {
    "methodSignature" : "public int getOffset()",
    "methodName" : "getOffset",
    "className" : "org.joda.time.format.DateTimeParserBucket",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2730() throws Throwable {\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();\n    Locale locale0 = Locale.ITALY;\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(2077L, ethiopicChronology0, locale0, (Integer) 1, 1);\n    TimeZone timeZone0 = TimeZone.getTimeZone(\"+01:00\");\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);\n    dateTimeParserBucket0.setZone(dateTimeZone0);\n    dateTimeParserBucket0.getOffset();\n}",
    "testName" : "test2730"
  },
  "test3745" : {
    "methodSignature" : "public int getOffset()",
    "methodName" : "getOffset",
    "className" : "org.joda.time.format.DateTimeParserBucket",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3745() throws Throwable {\n    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();\n    Locale locale0 = Locale.KOREAN;\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(31449599966L, gregorianChronology0, locale0);\n    boolean boolean0 = dateTimeParserBucket0.restoreState(gregorianChronology0);\n    dateTimeParserBucket0.getOffset();\n}",
    "testName" : "test3745"
  },
  "test4556" : {
    "methodSignature" : "public long computeMillis(boolean resetFields)",
    "methodName" : "computeMillis",
    "className" : "org.joda.time.format.DateTimeParserBucket",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4556() throws Throwable {\n    GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();\n    Locale locale0 = Locale.JAPANESE;\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-1295L), gregorianChronology0, locale0);\n    long long0 = dateTimeParserBucket0.computeMillis(true);\n}",
    "testName" : "test4556"
  },
  "test3744" : {
    "methodSignature" : "public boolean restoreState(Object savedState)",
    "methodName" : "restoreState",
    "className" : "org.joda.time.format.DateTimeParserBucket",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3744() throws Throwable {\n    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();\n    Locale locale0 = Locale.KOREAN;\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(31449599966L, gregorianChronology0, locale0);\n    boolean boolean0 = dateTimeParserBucket0.restoreState(gregorianChronology0);\n}",
    "testName" : "test3744"
  },
  "test3540" : {
    "methodSignature" : "public long computeMillis(boolean resetFields)",
    "methodName" : "computeMillis",
    "className" : "org.joda.time.format.DateTimeParserBucket",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3540() throws Throwable {\n    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();\n    Locale locale0 = Locale.KOREAN;\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(31449599966L, gregorianChronology0, locale0);\n    DateTimeParserBucket.SavedState dateTimeParserBucket_SavedState0 = (DateTimeParserBucket.SavedState) dateTimeParserBucket0.saveState();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();\n    dateTimeParserBucket0.saveField(dateTimeFieldType0, \"&h-UNPsd[>x7o=S\", locale0);\n    boolean boolean0 = dateTimeParserBucket_SavedState0.restoreState(dateTimeParserBucket0);\n    long long0 = dateTimeParserBucket0.computeMillis(false);\n}",
    "testName" : "test3540"
  },
  "test4354" : {
    "methodSignature" : "public int getOffset()",
    "methodName" : "getOffset",
    "className" : "org.joda.time.format.DateTimeParserBucket",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4354() throws Throwable {\n    JulianChronology julianChronology0 = JulianChronology.getInstance();\n    Locale locale0 = Locale.TRADITIONAL_CHINESE;\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(912L, julianChronology0, locale0);\n    int int0 = dateTimeParserBucket0.getOffset();\n}",
    "testName" : "test4354"
  },
  "test044" : {
    "methodSignature" : "public DateTimeZone getZone()",
    "methodName" : "getZone",
    "className" : "org.joda.time.format.DateTimeParserBucket",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044() throws Throwable {\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();\n    Locale locale0 = Locale.CHINESE;\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(24L, buddhistChronology0, locale0, (Integer) buddhistChronology0.BE, 1);\n    DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();\n}",
    "testName" : "test044"
  },
  "test3949" : {
    "methodSignature" : "public int getOffset()",
    "methodName" : "getOffset",
    "className" : "org.joda.time.format.DateTimeParserBucket",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3949() throws Throwable {\n    GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();\n    Locale locale0 = Locale.SIMPLIFIED_CHINESE;\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-1328L), gregorianChronology0, locale0);\n    DateTimeParserBucket.SavedState dateTimeParserBucket_SavedState0 = dateTimeParserBucket0.new SavedState();\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);\n    DateTimeField dateTimeField0 = buddhistChronology0.clockhourOfHalfday();\n    dateTimeParserBucket0.saveField(dateTimeField0, 1);\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();\n    boolean boolean0 = dateTimeParserBucket_SavedState0.restoreState(dateTimeParserBucket0);\n    dateTimeParserBucket0.saveField(dateTimeFieldType0, 3462);\n    dateTimeParserBucket0.getOffset();\n}",
    "testName" : "test3949"
  },
  "test045" : {
    "methodSignature" : "public int getOffset()",
    "methodName" : "getOffset",
    "className" : "org.joda.time.format.DateTimeParserBucket",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test045() throws Throwable {\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();\n    Locale locale0 = Locale.CHINESE;\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(24L, buddhistChronology0, locale0, (Integer) buddhistChronology0.BE, 1);\n    DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();\n    dateTimeParserBucket0.getOffset();\n}",
    "testName" : "test045"
  },
  "test089" : {
    "methodSignature" : "public int getOffset()",
    "methodName" : "getOffset",
    "className" : "org.joda.time.format.DateTimeParserBucket",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test089() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gJChronology0, dateTimeZone0);\n    LenientChronology lenientChronology0 = LenientChronology.getInstance(zonedChronology0);\n    Locale locale0 = Locale.ROOT;\n    Integer integer0 = new Integer(0);\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-45L), lenientChronology0, locale0, integer0, 0);\n    dateTimeParserBucket0.setOffset(959);\n    int int0 = dateTimeParserBucket0.getOffset();\n}",
    "testName" : "test089"
  },
  "test1920" : {
    "methodSignature" : "public long computeMillis()",
    "methodName" : "computeMillis",
    "className" : "org.joda.time.format.DateTimeParserBucket",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1920() throws Throwable {\n    ISOChronology iSOChronology0 = ISOChronology.getInstance();\n    Locale locale0 = Locale.CANADA_FRENCH;\n    Integer integer0 = new Integer(949);\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0L, iSOChronology0, locale0, integer0);\n    dateTimeParserBucket0.saveField((DateTimeField) null, 2933);\n    dateTimeParserBucket0.computeMillis();\n}",
    "testName" : "test1920"
  },
  "test2932" : {
    "methodSignature" : "static int compareReverse(DurationField a, DurationField b)",
    "methodName" : "compareReverse",
    "className" : "org.joda.time.format.DateTimeParserBucket",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2932() throws Throwable {\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();\n    DateTimeField dateTimeField0 = buddhistChronology0.year();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();\n    DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, dateTimeFieldType0);\n    DurationField durationField0 = delegatedDateTimeField0.getLeapDurationField();\n    DurationField durationField1 = buddhistChronology0.eras();\n    int int0 = DateTimeParserBucket.compareReverse(durationField0, durationField1);\n}",
    "testName" : "test2932"
  },
  "test0910" : {
    "methodSignature" : "public int getOffset()",
    "methodName" : "getOffset",
    "className" : "org.joda.time.format.DateTimeParserBucket",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0910() throws Throwable {\n    GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();\n    Locale locale0 = Locale.TAIWAN;\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-1328L), gregorianChronology0, locale0);\n    dateTimeParserBucket0.setOffset((-2297));\n    int int0 = dateTimeParserBucket0.getOffset();\n}",
    "testName" : "test0910"
  },
  "test4758" : {
    "methodSignature" : "public int getOffset()",
    "methodName" : "getOffset",
    "className" : "org.joda.time.format.DateTimeParserBucket",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4758() throws Throwable {\n    GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();\n    Locale locale0 = Locale.SIMPLIFIED_CHINESE;\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-1328L), gregorianChronology0, locale0);\n    DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();\n    dateTimeParserBucket0.getOffset();\n}",
    "testName" : "test4758"
  },
  "test4759" : {
    "methodSignature" : "public DateTimeZone getZone()",
    "methodName" : "getZone",
    "className" : "org.joda.time.format.DateTimeParserBucket",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4759() throws Throwable {\n    GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();\n    Locale locale0 = Locale.SIMPLIFIED_CHINESE;\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-1328L), gregorianChronology0, locale0);\n    DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();\n}",
    "testName" : "test4759"
  },
  "test4151" : {
    "methodSignature" : "public int getOffset()",
    "methodName" : "getOffset",
    "className" : "org.joda.time.format.DateTimeParserBucket",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4151() throws Throwable {\n    GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();\n    Locale locale0 = Locale.ENGLISH;\n    Integer integer0 = new Integer((-2347));\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1L, gregorianChronology0, locale0, integer0);\n    dateTimeParserBucket0.getLocale();\n    dateTimeParserBucket0.getOffset();\n}",
    "testName" : "test4151"
  }
}