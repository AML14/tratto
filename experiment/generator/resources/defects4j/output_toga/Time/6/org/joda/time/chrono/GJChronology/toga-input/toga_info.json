{
  "test1212" : {
    "methodSignature" : "protected void assemble(Fields fields)",
    "methodName" : "assemble",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1212() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstanceUTC();\n    gJChronology0.assemble((AssembledChronology.Fields) null);\n}",
    "testName" : "test1212"
  },
  "test3434" : {
    "methodSignature" : "public LocalDateTime(Object instant, Chronology chronology)",
    "methodName" : "LocalDateTime",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3434() throws Throwable {\n    MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) null);\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();\n    LocalDateTime localDateTime0 = new LocalDateTime(mutableDateTime0, buddhistChronology0);\n}",
    "testName" : "test3434"
  },
  "test4446" : {
    "methodSignature" : "public int getMinimumDaysInFirstWeek()",
    "methodName" : "getMinimumDaysInFirstWeek",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4446() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    long long0 = gJChronology0.gregorianToJulianByWeekyear(4);\n    gJChronology0.getMinimumDaysInFirstWeek();\n}",
    "testName" : "test4446"
  },
  "test2424" : {
    "methodSignature" : "public Instant getGregorianCutover()",
    "methodName" : "getGregorianCutover",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2424() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forID(\"America/Sao_Paulo\");\n    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);\n    gJChronology0.getGregorianCutover();\n}",
    "testName" : "test2424"
  },
  "test1010" : {
    "methodSignature" : "long gregorianToJulianByWeekyear(long instant)",
    "methodName" : "gregorianToJulianByWeekyear",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1010() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forID(\"America/Sao_Paulo\");\n    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);\n    gJChronology0.gregorianToJulianByWeekyear((-62135754750999L));\n}",
    "testName" : "test1010"
  },
  "test3232" : {
    "methodSignature" : "public long set(ReadablePartial partial, long instant)",
    "methodName" : "set",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3232() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstanceUTC();\n    LocalDateTime localDateTime0 = new LocalDateTime((-12219321178000L));\n    gJChronology0.set(localDateTime0, (-12219321178000L));\n}",
    "testName" : "test3232"
  },
  "test4445" : {
    "methodSignature" : "long gregorianToJulianByWeekyear(long instant)",
    "methodName" : "gregorianToJulianByWeekyear",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4445() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    long long0 = gJChronology0.gregorianToJulianByWeekyear(4);\n}",
    "testName" : "test4445"
  },
  "test2222" : {
    "methodSignature" : "public static synchronized GJChronology getInstance(DateTimeZone zone, ReadableInstant gregorianCutover, int minDaysInFirstWeek)",
    "methodName" : "getInstance",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2222() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1253);\n    MonthDay monthDay0 = MonthDay.now(dateTimeZone0);\n    LocalDate localDate0 = monthDay0.toLocalDate(0);\n    DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime();\n    GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0, 0);\n}",
    "testName" : "test2222"
  },
  "test033" : {
    "methodSignature" : "long julianToGregorianByYear(long instant)",
    "methodName" : "julianToGregorianByYear",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstanceUTC();\n    gJChronology0.julianToGregorianByYear(1209600004L);\n}",
    "testName" : "test033"
  },
  "test077" : {
    "methodSignature" : "long gregorianToJulianByWeekyear(long instant)",
    "methodName" : "gregorianToJulianByWeekyear",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077() throws Throwable {\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();\n    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();\n    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);\n    gJChronology0.gregorianToJulianByWeekyear((-62072525218914L));\n}",
    "testName" : "test077"
  },
  "test1616" : {
    "methodSignature" : "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth, int millisOfDay) throws IllegalArgumentException",
    "methodName" : "getDateTimeMillis",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1616() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstanceUTC();\n    gJChronology0.getDateTimeMillis(3, 4, 2, 4);\n}",
    "testName" : "test1616"
  },
  "test3838" : {
    "methodSignature" : "public boolean equals(Object obj)",
    "methodName" : "equals",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3838() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forID(\"America/Sao_Paulo\");\n    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);\n    gJChronology0.equals(dateTimeZone0);\n}",
    "testName" : "test3838"
  },
  "test2828" : {
    "methodSignature" : "public abstract int[] get(ReadablePeriod period, long startInstant, long endInstant)",
    "methodName" : "get",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2828() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstanceUTC();\n    Months months0 = Months.TEN;\n    Chronology chronology0 = gJChronology0.withZone((DateTimeZone) null);\n    chronology0.get((ReadablePeriod) months0, (-12219292800000L), 131327999333L);\n}",
    "testName" : "test2828"
  },
  "test1414" : {
    "methodSignature" : "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth, int hourOfDay, int minuteOfHour, int secondOfMinute, int millisOfSecond) throws IllegalArgumentException",
    "methodName" : "getDateTimeMillis",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1414() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstanceUTC();\n    gJChronology0.getDateTimeMillis((-1), 2, 2, 2, 5006, 5006, (-1));\n}",
    "testName" : "test1414"
  },
  "test3636" : {
    "methodSignature" : "public boolean equals(Object obj)",
    "methodName" : "equals",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3636() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    GJChronology gJChronology1 = GJChronology.getInstanceUTC();\n    gJChronology0.equals(gJChronology1);\n}",
    "testName" : "test3636"
  },
  "test4648" : {
    "methodSignature" : "public int getMinimumDaysInFirstWeek()",
    "methodName" : "getMinimumDaysInFirstWeek",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4648() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forID(\"America/Sao_Paulo\");\n    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);\n    GJChronology gJChronology1 = (GJChronology) gJChronology0.withUTC();\n    gJChronology1.getMinimumDaysInFirstWeek();\n}",
    "testName" : "test4648"
  },
  "test2626" : {
    "methodSignature" : "public long add(ReadablePeriod period, long instant, int scalar)",
    "methodName" : "add",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2626() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstanceUTC();\n    Months months0 = Months.TEN;\n    gJChronology0.add((ReadablePeriod) months0, (-667L), 4);\n}",
    "testName" : "test2626"
  },
  "test4649" : {
    "methodSignature" : "public Chronology withUTC()",
    "methodName" : "withUTC",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4649() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forID(\"America/Sao_Paulo\");\n    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);\n    GJChronology gJChronology1 = (GJChronology) gJChronology0.withUTC();\n}",
    "testName" : "test4649"
  },
  "test4242" : {
    "methodSignature" : "public int getMinimumDaysInFirstWeek()",
    "methodName" : "getMinimumDaysInFirstWeek",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4242() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    Months months0 = Months.TEN;\n    long long0 = gJChronology0.add((ReadablePeriod) months0, (-667L), (-797));\n    gJChronology0.getMinimumDaysInFirstWeek();\n}",
    "testName" : "test4242"
  },
  "test5056" : {
    "methodSignature" : "public int getMinimumDaysInFirstWeek()",
    "methodName" : "getMinimumDaysInFirstWeek",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5056() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    long long0 = gJChronology0.julianToGregorianByWeekyear(0);\n    gJChronology0.getMinimumDaysInFirstWeek();\n}",
    "testName" : "test5056"
  },
  "test3030" : {
    "methodSignature" : "public int[] get(ReadablePeriod period, long startInstant, long endInstant)",
    "methodName" : "get",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3030() throws Throwable {\n    MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) null);\n    Months months0 = Months.TEN;\n    DateTime dateTime0 = mutableDateTime0.toDateTime();\n    GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) dateTime0);\n    gJChronology0.get((ReadablePeriod) months0, (-12219292800000L), (-20958393600667L));\n}",
    "testName" : "test3030"
  },
  "test4243" : {
    "methodSignature" : "public long add(ReadablePeriod period, long instant, int scalar)",
    "methodName" : "add",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4243() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    Months months0 = Months.TEN;\n    long long0 = gJChronology0.add((ReadablePeriod) months0, (-667L), (-797));\n}",
    "testName" : "test4243"
  },
  "test5057" : {
    "methodSignature" : "long julianToGregorianByWeekyear(long instant)",
    "methodName" : "julianToGregorianByWeekyear",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5057() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    long long0 = gJChronology0.julianToGregorianByWeekyear(0);\n}",
    "testName" : "test5057"
  },
  "test2020" : {
    "methodSignature" : "public DateTimeZone getZone()",
    "methodName" : "getZone",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2020() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    gJChronology0.getZone();\n}",
    "testName" : "test2020"
  },
  "test4040" : {
    "methodSignature" : "public static GJChronology getInstance(DateTimeZone zone, long gregorianCutover, int minDaysInFirstWeek)",
    "methodName" : "getInstance",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4040() throws Throwable {\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (-12219292800000L), 1);\n}",
    "testName" : "test4040"
  },
  "test4853" : {
    "methodSignature" : "long julianToGregorianByYear(long instant)",
    "methodName" : "julianToGregorianByYear",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4853() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    long long0 = gJChronology0.julianToGregorianByYear(4);\n}",
    "testName" : "test4853"
  },
  "test4852" : {
    "methodSignature" : "public int getMinimumDaysInFirstWeek()",
    "methodName" : "getMinimumDaysInFirstWeek",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4852() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    long long0 = gJChronology0.julianToGregorianByYear(4);\n    gJChronology0.getMinimumDaysInFirstWeek();\n}",
    "testName" : "test4852"
  },
  "test022" : {
    "methodSignature" : "public static GJChronology getInstance(DateTimeZone zone, long gregorianCutover, int minDaysInFirstWeek)",
    "methodName" : "getInstance",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);\n    GJChronology.getInstance(dateTimeZone0, 3327L, 0);\n}",
    "testName" : "test022"
  },
  "test066" : {
    "methodSignature" : "long gregorianToJulianByYear(long instant)",
    "methodName" : "gregorianToJulianByYear",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066() throws Throwable {\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();\n    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();\n    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);\n    gJChronology0.gregorianToJulianByYear((-62072525218914L));\n}",
    "testName" : "test066"
  },
  "test1818" : {
    "methodSignature" : "public Chronology withZone(DateTimeZone zone)",
    "methodName" : "withZone",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1818() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forID(\"America/Sao_Paulo\");\n    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);\n    gJChronology0.withZone(dateTimeZone0);\n}",
    "testName" : "test1818"
  },
  "test4547" : {
    "methodSignature" : "public int getMinimumDaysInFirstWeek()",
    "methodName" : "getMinimumDaysInFirstWeek",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4547() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    gJChronology0.hashCode();\n    gJChronology0.getMinimumDaysInFirstWeek();\n}",
    "testName" : "test4547"
  },
  "test2323" : {
    "methodSignature" : "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth, int hourOfDay, int minuteOfHour, int secondOfMinute, int millisOfSecond) throws IllegalArgumentException",
    "methodName" : "getDateTimeMillis",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2323() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);\n    DateTime dateTime0 = DateTime.now();\n    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0, 1);\n    gJChronology0.getDateTimeMillis(315, 315, 1, 1, 0, 1, 0);\n}",
    "testName" : "test2323"
  },
  "test1313" : {
    "methodSignature" : "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth, int hourOfDay, int minuteOfHour, int secondOfMinute, int millisOfSecond) throws IllegalArgumentException",
    "methodName" : "getDateTimeMillis",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1313() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstanceUTC();\n    gJChronology0.getDateTimeMillis(9, 9, 9, 9, 9, 9, 9);\n}",
    "testName" : "test1313"
  },
  "test3535" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3535() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstanceUTC();\n    gJChronology0.toString();\n}",
    "testName" : "test3535"
  },
  "test2121" : {
    "methodSignature" : "public static synchronized GJChronology getInstance(DateTimeZone zone, ReadableInstant gregorianCutover, int minDaysInFirstWeek)",
    "methodName" : "getInstance",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2121() throws Throwable {\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) null, 0);\n}",
    "testName" : "test2121"
  },
  "test1111" : {
    "methodSignature" : "public static synchronized GJChronology getInstance(DateTimeZone zone, ReadableInstant gregorianCutover, int minDaysInFirstWeek)",
    "methodName" : "getInstance",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1111() throws Throwable {\n    TimeZone timeZone0 = TimeZone.getDefault();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);\n    DateTime dateTime0 = new DateTime(292278993, 1, 5, 1, 1, 1);\n    GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0, 5);\n}",
    "testName" : "test1111"
  },
  "test3333" : {
    "methodSignature" : "public long set(ReadablePartial partial, long instant)",
    "methodName" : "set",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3333() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstanceUTC();\n    LocalDateTime localDateTime0 = LocalDateTime.now();\n    gJChronology0.set(localDateTime0, (-79302582000000L));\n}",
    "testName" : "test3333"
  },
  "test4344" : {
    "methodSignature" : "public int getMinimumDaysInFirstWeek()",
    "methodName" : "getMinimumDaysInFirstWeek",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4344() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    StrictChronology.getInstance(gJChronology0);\n    gJChronology0.getMinimumDaysInFirstWeek();\n}",
    "testName" : "test4344"
  },
  "test011" : {
    "methodSignature" : "protected void assemble(Fields fields)",
    "methodName" : "assemble",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();\n    gJChronology0.assemble(assembledChronology_Fields0);\n}",
    "testName" : "test011"
  },
  "test055" : {
    "methodSignature" : "long julianToGregorianByWeekyear(long instant)",
    "methodName" : "julianToGregorianByWeekyear",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstanceUTC();\n    gJChronology0.julianToGregorianByWeekyear(31536000000L);\n}",
    "testName" : "test055"
  },
  "test099" : {
    "methodSignature" : "long gregorianToJulianByYear(long instant)",
    "methodName" : "gregorianToJulianByYear",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    gJChronology0.gregorianToJulianByYear(9223372036854775807L);\n}",
    "testName" : "test099"
  },
  "test2727" : {
    "methodSignature" : "public long add(ReadablePeriod period, long instant, int scalar)",
    "methodName" : "add",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2727() throws Throwable {\n    MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) null);\n    Months months0 = Months.TEN;\n    DateTime dateTime0 = mutableDateTime0.toDateTime();\n    GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) dateTime0);\n    gJChronology0.add((ReadablePeriod) months0, 392L, (-2578));\n}",
    "testName" : "test2727"
  },
  "test1717" : {
    "methodSignature" : "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth, int millisOfDay) throws IllegalArgumentException",
    "methodName" : "getDateTimeMillis",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1717() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstanceUTC();\n    gJChronology0.getDateTimeMillis(91, 2311, 91, 91);\n}",
    "testName" : "test1717"
  },
  "test3939" : {
    "methodSignature" : "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth, int millisOfDay) throws IllegalArgumentException",
    "methodName" : "getDateTimeMillis",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3939() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    gJChronology0.getDateTimeMillis(2597, 2, 2, 2597);\n}",
    "testName" : "test3939"
  },
  "test2525" : {
    "methodSignature" : "public int getMinimumDaysInFirstWeek()",
    "methodName" : "getMinimumDaysInFirstWeek",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2525() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forID(\"America/Sao_Paulo\");\n    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);\n    gJChronology0.getMinimumDaysInFirstWeek();\n}",
    "testName" : "test2525"
  },
  "test1515" : {
    "methodSignature" : "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth, int hourOfDay, int minuteOfHour, int secondOfMinute, int millisOfSecond) throws IllegalArgumentException",
    "methodName" : "getDateTimeMillis",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1515() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstanceUTC();\n    gJChronology0.getDateTimeMillis(0, 0, 0, 4, (-222), (-222), (-2839));\n}",
    "testName" : "test1515"
  },
  "test3737" : {
    "methodSignature" : "public boolean equals(Object obj)",
    "methodName" : "equals",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3737() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    gJChronology0.equals(gJChronology0);\n}",
    "testName" : "test3737"
  },
  "test4141" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4141() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forID(\"America/Sao_Paulo\");\n    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (-1076L), 1);\n    String string0 = gJChronology0.toString();\n}",
    "testName" : "test4141"
  },
  "test3131" : {
    "methodSignature" : "public LocalDate withWeekyear(int weekyear)",
    "methodName" : "withWeekyear",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3131() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstanceUTC();\n    LocalDate localDate0 = new LocalDate((Chronology) gJChronology0);\n    localDate0.withWeekyear(178);\n}",
    "testName" : "test3131"
  },
  "test4954" : {
    "methodSignature" : "public int[] get(ReadablePeriod period, long startInstant, long endInstant)",
    "methodName" : "get",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4954() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstanceUTC();\n    Months months0 = Months.TEN;\n    int[] intArray0 = gJChronology0.get((ReadablePeriod) months0, (long) 44481320, (-20958393600667L));\n}",
    "testName" : "test4954"
  },
  "test4955" : {
    "methodSignature" : "public int getMinimumDaysInFirstWeek()",
    "methodName" : "getMinimumDaysInFirstWeek",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4955() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstanceUTC();\n    Months months0 = Months.TEN;\n    int[] intArray0 = gJChronology0.get((ReadablePeriod) months0, (long) 44481320, (-20958393600667L));\n    gJChronology0.getMinimumDaysInFirstWeek();\n}",
    "testName" : "test4955"
  },
  "test4750" : {
    "methodSignature" : "long gregorianToJulianByYear(long instant)",
    "methodName" : "gregorianToJulianByYear",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4750() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    long long0 = gJChronology0.gregorianToJulianByYear(1280L);\n}",
    "testName" : "test4750"
  },
  "test4751" : {
    "methodSignature" : "public int getMinimumDaysInFirstWeek()",
    "methodName" : "getMinimumDaysInFirstWeek",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4751() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    long long0 = gJChronology0.gregorianToJulianByYear(1280L);\n    gJChronology0.getMinimumDaysInFirstWeek();\n}",
    "testName" : "test4751"
  },
  "test000" : {
    "methodSignature" : "public static GJChronology getInstance(DateTimeZone zone, long gregorianCutover, int minDaysInFirstWeek)",
    "methodName" : "getInstance",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    GJChronology.getInstance(dateTimeZone0, (-62064835199996L), (-809));\n}",
    "testName" : "test000"
  },
  "test044" : {
    "methodSignature" : "long julianToGregorianByWeekyear(long instant)",
    "methodName" : "julianToGregorianByWeekyear",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstanceUTC();\n    gJChronology0.julianToGregorianByWeekyear(1209600000L);\n}",
    "testName" : "test044"
  },
  "test088" : {
    "methodSignature" : "public Instant getGregorianCutover()",
    "methodName" : "getGregorianCutover",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 4, 4);\n    gJChronology0.getGregorianCutover();\n}",
    "testName" : "test088"
  },
  "test2929" : {
    "methodSignature" : "public int[] get(ReadablePeriod period, long startInstant, long endInstant)",
    "methodName" : "get",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2929() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstanceUTC();\n    Months months0 = Months.MAX_VALUE;\n    gJChronology0.get((ReadablePeriod) months0, (-2414L), 1583L);\n}",
    "testName" : "test2929"
  },
  "test1919" : {
    "methodSignature" : "public DateTimeZone getZone()",
    "methodName" : "getZone",
    "className" : "org.joda.time.chrono.GJChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1919() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstanceUTC();\n    gJChronology0.getZone();\n}",
    "testName" : "test1919"
  }
}