project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    // Undeclared exception!
    try {
        GJChronology.getInstance(dateTimeZone0, (-62064835199996L), (-809));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid min days in first week: -809
        //
        verifyException(""org.joda.time.chrono.JulianChronology"", e);
    }
}",0,
project,0,test011,"public void test011() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
    gJChronology0.assemble(assembledChronology_Fields0);
}",0,
project,0,test022,"public void test022() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
    // Undeclared exception!
    try {
        GJChronology.getInstance(dateTimeZone0, 3327L, 0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid min days in first week: 0
        //
        verifyException(""org.joda.time.chrono.JulianChronology"", e);
    }
}",0,
project,0,test033,"public void test033() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    gJChronology0.julianToGregorianByYear(1209600004L);
}",0,
project,0,test044,"public void test044() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    gJChronology0.julianToGregorianByWeekyear(1209600000L);
}",0,
project,0,test055,"public void test055() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    gJChronology0.julianToGregorianByWeekyear(31536000000L);
}",0,
project,0,test066,"public void test066() throws Throwable {
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
    gJChronology0.gregorianToJulianByYear((-62072525218914L));
}",0,
project,0,test077,"public void test077() throws Throwable {
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
    gJChronology0.gregorianToJulianByWeekyear((-62072525218914L));
}",0,
project,0,test088,"public void test088() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 4, 4);
    gJChronology0.getGregorianCutover();
}",0,
project,0,test099,"public void test099() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    // Undeclared exception!
    try {
        gJChronology0.gregorianToJulianByYear(9223372036854775807L);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value 292278994 for year must be in the range [-292269054,292272992]
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",0,
project,0,test1010,"public void test1010() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forID(""America/Sao_Paulo"");
    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
    // Undeclared exception!
    try {
        gJChronology0.gregorianToJulianByWeekyear((-62135754750999L));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value 0 for year is not supported
        //
        verifyException(""org.joda.time.field.SkipDateTimeField"", e);
    }
}",0,
project,0,test1111,"public void test1111() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
    DateTime dateTime0 = new DateTime(292278993, 1, 5, 1, 1, 1);
    // Undeclared exception!
    try {
        GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0, 5);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value 292278994 for weekyear must be in the range [-292275054,292278993]
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",0,
project,0,test1212,"public void test1212() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    // Undeclared exception!
    try {
        gJChronology0.assemble((AssembledChronology.Fields) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.chrono.GJChronology"", e);
    }
}",0,
project,0,test1313,"public void test1313() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    gJChronology0.getDateTimeMillis(9, 9, 9, 9, 9, 9, 9);
}",0,
project,0,test1414,"public void test1414() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    try {
        gJChronology0.getDateTimeMillis((-1), 2, 2, 2, 5006, 5006, (-1));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value 5006 for minuteOfHour must be in the range [0,59]
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",1,
project,0,test1515,"public void test1515() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    try {
        gJChronology0.getDateTimeMillis(0, 0, 0, 4, (-222), (-222), (-2839));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value -222 for minuteOfHour must be in the range [0,59]
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",1,
project,0,test1616,"public void test1616() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    gJChronology0.getDateTimeMillis(3, 4, 2, 4);
}",0,
project,0,test1717,"public void test1717() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    try {
        gJChronology0.getDateTimeMillis(91, 2311, 91, 91);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value 2311 for monthOfYear must be in the range [1,12]
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",0,
project,0,test1818,"public void test1818() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forID(""America/Sao_Paulo"");
    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
    gJChronology0.withZone(dateTimeZone0);
}",0,
project,0,test1919,"public void test1919() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    gJChronology0.getZone();
}",0,
project,0,test2020,"public void test2020() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    gJChronology0.getZone();
}",0,
project,0,test2121,"public void test2121() throws Throwable {
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    // Undeclared exception!
    try {
        GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) null, 0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid min days in first week: 0
        //
        verifyException(""org.joda.time.chrono.JulianChronology"", e);
    }
}",0,
project,0,test2222,"public void test2222() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1253);
    MonthDay monthDay0 = MonthDay.now(dateTimeZone0);
    LocalDate localDate0 = monthDay0.toLocalDate(0);
    DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime();
    // Undeclared exception!
    try {
        GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0, 0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid min days in first week: 0
        //
        verifyException(""org.joda.time.chrono.JulianChronology"", e);
    }
}",0,
project,0,test2323,"public void test2323() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
    DateTime dateTime0 = DateTime.now();
    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0, 1);
    try {
        gJChronology0.getDateTimeMillis(315, 315, 1, 1, 0, 1, 0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value 315 for monthOfYear must be in the range [1,12]
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",0,
project,0,test2424,"public void test2424() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forID(""America/Sao_Paulo"");
    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
    gJChronology0.getGregorianCutover();
}",0,
project,0,test2525,"public void test2525() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forID(""America/Sao_Paulo"");
    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
    gJChronology0.getMinimumDaysInFirstWeek();
}",0,
project,0,test2626,"public void test2626() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    Months months0 = Months.TEN;
    gJChronology0.add((ReadablePeriod) months0, (-667L), 4);
}",0,
project,0,test2727,"public void test2727() throws Throwable {
    MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) null);
    Months months0 = Months.TEN;
    DateTime dateTime0 = mutableDateTime0.toDateTime();
    GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) dateTime0);
    gJChronology0.add((ReadablePeriod) months0, 392L, (-2578));
}",0,
project,0,test2828,"public void test2828() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    Months months0 = Months.TEN;
    Chronology chronology0 = gJChronology0.withZone((DateTimeZone) null);
    chronology0.get((ReadablePeriod) months0, (-12219292800000L), 131327999333L);
}",0,
project,0,test2929,"public void test2929() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    Months months0 = Months.MAX_VALUE;
    gJChronology0.get((ReadablePeriod) months0, (-2414L), 1583L);
}",0,
project,0,test3030,"public void test3030() throws Throwable {
    MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) null);
    Months months0 = Months.TEN;
    DateTime dateTime0 = mutableDateTime0.toDateTime();
    GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) dateTime0);
    gJChronology0.get((ReadablePeriod) months0, (-12219292800000L), (-20958393600667L));
}",0,
project,0,test3131,"public void test3131() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    LocalDate localDate0 = new LocalDate((Chronology) gJChronology0);
    localDate0.withWeekyear(178);
}",0,
project,0,test3232,"public void test3232() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    LocalDateTime localDateTime0 = new LocalDateTime((-12219321178000L));
    // Undeclared exception!
    try {
        gJChronology0.set(localDateTime0, (-12219321178000L));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value 14 for dayOfMonth is not supported
        //
        verifyException(""org.joda.time.chrono.GJChronology$CutoverField"", e);
    }
}",0,
project,0,test3333,"public void test3333() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    LocalDateTime localDateTime0 = LocalDateTime.now();
    gJChronology0.set(localDateTime0, (-79302582000000L));
}",0,
project,0,test3434,"public void test3434() throws Throwable {
    MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) null);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    LocalDateTime localDateTime0 = new LocalDateTime(mutableDateTime0, buddhistChronology0);
}",0,
project,0,test3535,"public void test3535() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    gJChronology0.toString();
}",0,
project,0,test3636,"public void test3636() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    GJChronology gJChronology1 = GJChronology.getInstanceUTC();
    gJChronology0.equals(gJChronology1);
}",0,
project,0,test3737,"public void test3737() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    gJChronology0.equals(gJChronology0);
}",0,
project,0,test3838,"public void test3838() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forID(""America/Sao_Paulo"");
    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
    gJChronology0.equals(dateTimeZone0);
}",0,
project,0,test3939,"public void test3939() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    gJChronology0.getDateTimeMillis(2597, 2, 2, 2597);
}",0,
project,0,test4040,"public void test4040() throws Throwable {
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (-12219292800000L), 1);
}",0,
project,0,test4141,"public void test4141() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forID(""America/Sao_Paulo"");
    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (-1076L), 1);
    String string0 = gJChronology0.toString();
    assertEquals(""GJChronology[America/Sao_Paulo,cutover=1969-12-31T23:59:58.924Z,mdfw=1]"", string0);
}",0,
project,0,test4242,"public void test4242() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    Months months0 = Months.TEN;
    long long0 = gJChronology0.add((ReadablePeriod) months0, (-667L), (-797));
    assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
}",0,"assertEquals(0, gJChronology0.getMinimumDaysInFirstWeek())"
project,0,test4243,"public void test4243() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    Months months0 = Months.TEN;
    long long0 = gJChronology0.add((ReadablePeriod) months0, (-667L), (-797));
    assertEquals((-20958394022667L), long0);
}",0,"assertEquals(1, long0)"
project,0,test4344,"public void test4344() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    StrictChronology.getInstance(gJChronology0);
    assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
}",0,"assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek())"
project,0,test4445,"public void test4445() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    long long0 = gJChronology0.gregorianToJulianByWeekyear(4);
    assertEquals(1209600004L, long0);
}",0,"assertEquals(1, long0)"
project,0,test4446,"public void test4446() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    long long0 = gJChronology0.gregorianToJulianByWeekyear(4);
    assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
}",0,
project,0,test4547,"public void test4547() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    gJChronology0.hashCode();
    assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
}",0,"assertEquals(0, gJChronology0.getMinimumDaysInFirstWeek())"
project,0,test4648,"public void test4648() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forID(""America/Sao_Paulo"");
    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
    GJChronology gJChronology1 = (GJChronology) gJChronology0.withUTC();
    assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
}",0,
project,0,test4649,"public void test4649() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forID(""America/Sao_Paulo"");
    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
    GJChronology gJChronology1 = (GJChronology) gJChronology0.withUTC();
    assertNotSame(gJChronology1, gJChronology0);
}",0,
project,0,test4750,"public void test4750() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    long long0 = gJChronology0.gregorianToJulianByYear(1280L);
    assertEquals(1123201280L, long0);
}",0,"assertEquals(1, long0)"
project,0,test4751,"public void test4751() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    long long0 = gJChronology0.gregorianToJulianByYear(1280L);
    assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
}",0,"assertEquals(1, gJChronology0.getMinimumDaysInFirstWeek())"
project,0,test4852,"public void test4852() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    long long0 = gJChronology0.julianToGregorianByYear(4);
    assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
}",0,
project,0,test4853,"public void test4853() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    long long0 = gJChronology0.julianToGregorianByYear(4);
    assertEquals((-1123199996L), long0);
}",0,"assertEquals(1, long0)"
project,0,test4954,"public void test4954() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    Months months0 = Months.TEN;
    int[] intArray0 = gJChronology0.get((ReadablePeriod) months0, (long) 44481320, (-20958393600667L));
    assertArrayEquals(new int[] { (-7970) }, intArray0);
}",0,
project,0,test4955,"public void test4955() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    Months months0 = Months.TEN;
    int[] intArray0 = gJChronology0.get((ReadablePeriod) months0, (long) 44481320, (-20958393600667L));
    assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
}",0,"assertEquals(0, gJChronology0.getMinimumDaysInFirstWeek())"
project,0,test5056,"public void test5056() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    long long0 = gJChronology0.julianToGregorianByWeekyear(0);
    assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
}",0,
project,0,test5057,"public void test5057() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    long long0 = gJChronology0.julianToGregorianByWeekyear(0);
    assertEquals((-1209600000L), long0);
}",0,"assertEquals(1, long0)"
