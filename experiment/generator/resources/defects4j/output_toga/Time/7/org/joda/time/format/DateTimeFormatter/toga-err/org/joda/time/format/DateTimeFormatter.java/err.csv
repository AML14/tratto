org.joda.time.format.DateTimeFormatter,@Test(timeout = 4000)
public void test0011() throws Throwable {
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
    DateTimeFieldType.dayOfWeek();
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    EthiopicChronology.getInstance(dateTimeZone0);
    DateTimeZone.getDefault();
    StringWriter stringWriter0 = new StringWriter(0);
    StringWriter stringWriter1 = stringWriter0.append((CharSequence) ""CST"", 0, 0);
    StringWriter stringWriter2 = stringWriter1.append((CharSequence) ""CST"");
    stringWriter2.getBuffer();
},ERROR,java.nio.file.NoSuchFileException,/home/star_usit_group/tratto/experiment/generator/resources/defects4j/temp/Time_7b/src/main/java/java/io/StringWriter.java
org.joda.time.format.DateTimeFormatter,@Test(timeout = 4000)
public void test0022() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
    dateTimeFieldType0.getRangeDurationType();
    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);
    dateTimeFormatter0.withOffsetParsed();
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
    LocalDateTime localDateTime0 = new LocalDateTime(""org.joda.time.format.DateTimeFormatter"", ethiopicChronology0);
    localDateTime0.withHourOfDay(ethiopicChronology0.EE);
    int int0 = 0;
},ERROR,java.lang.IllegalStateException,[ERROR] - Unable to parse last statement as a MethodCallExpr or an ObjectCreationExpr statement.
org.joda.time.format.DateTimeFormatter,@Test(timeout = 4000)
public void test0077() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("""");
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
    Integer integer0 = new Integer(314);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
    dateTimeFormatter1.parseDateTime("""");
    StringBuffer stringBuffer0 = new StringBuffer("""");
    dateTimeFormatter0.printTo(stringBuffer0, 0L);
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = gJChronology0.getZone();
    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
    Chronology chronology0 = gregorianChronology0.withUTC();
    gJChronology0.withUTC();
    Locale locale0 = Locale.GERMANY;
    dateTimeFormatterBuilder_StringLiteral0.printTo(stringBuffer0, (long) 314, chronology0, 0, dateTimeZone0, locale0);
    CharArrayWriter charArrayWriter0 = new CharArrayWriter();
    dateTimeFormatter1.printTo((Writer) charArrayWriter0, (long) 0);
    dateTimeFormatter1.parseLocalDate("""");
    stringBuffer0.setLength((-2714));
},ERROR,java.nio.file.NoSuchFileException,/home/star_usit_group/tratto/experiment/generator/resources/defects4j/temp/Time_7b/src/main/java/java/lang/StringBuffer.java
org.joda.time.format.DateTimeFormatter,@Test(timeout = 4000)
public void test01010() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
    dateTimeFieldType0.getDurationType();
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2428, true);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
    Locale locale0 = Locale.JAPAN;
    dateTimeFormatter2.withLocale(locale0);
    ISOChronology iSOChronology0 = ISOChronology.getInstance();
    MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) iSOChronology0);
    Integer integer0 = new Integer(1);
    DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withChronology(iSOChronology0);
    DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withDefaultYear(2428);
    dateTimeFormatter3.withLocale(locale0);
    DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
    doReturn((-2806L)).when(dateTimeUtils_MillisProvider0).getMillis();
    DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    YearMonth yearMonth0 = new YearMonth((Chronology) iSOChronology0);
    dateTimeFormatter4.printTo(stringBuffer0, (ReadablePartial) yearMonth0);
    dateTimeFormatter2.getParser();
    dateTimeFormatter4.isPrinter();
    StringBuffer stringBuffer1 = new StringBuffer();
    dateTimeFormatter2.print((long) 2428);
    dateTimeFormatter3.withPivotYear((Integer) 0);
    dateTimeFormatter2.isParser();
    dateTimeFormatter2.print((ReadableInstant) mutableDateTime0);
    dateTimeFormatter2.parseInto(mutableDateTime0, ""9%IuGl:["", (-1881));
    long long0 = (-884L);
    System.setCurrentTimeMillis(long0);
},ERROR,java.util.NoSuchElementException,[ERROR] - Focal method not found. No candidate methods found in the original class, analyzing both the name and the number of parameters.
org.joda.time.format.DateTimeFormatter,@Test(timeout = 4000)
public void test01111() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
    int int0 = 3959;
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 3959, false);
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 3959, 1853);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_Fraction0);
    Integer integer0 = new Integer(1853);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
    Locale locale0 = Locale.JAPAN;
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
    DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear(1853);
    DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withZoneUTC();
    DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withDefaultYear(1853);
    String string0 = """";
    DateTime dateTime0 = dateTimeFormatter5.parseDateTime("""");
    dateTimeFormatter0.print((ReadableInstant) dateTime0);
    String string1 = """";
},ERROR,java.lang.IllegalStateException,[ERROR] - Unable to parse last statement as a MethodCallExpr or an ObjectCreationExpr statement.
org.joda.time.format.DateTimeFormatter,@Test(timeout = 4000)
public void test02020() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
    ZoneInfoProvider zoneInfoProvider0 = new ZoneInfoProvider(""r!nOfir>3qi9T!ms6"");
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.format.DateTimeFormatter,@Test(timeout = 4000)
public void test02626() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
    int int0 = 65;
    dateTimeFormatter0.withDefaultYear(65);
    StringWriter stringWriter0 = new StringWriter();
    stringWriter0.getBuffer();
    LocalDateTime localDateTime0 = LocalDateTime.parse("""");
    localDateTime0.withYear(int0);
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.format.DateTimeFormatter,@Test(timeout = 4000)
public void test03131() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, (-2697), true);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_UnpaddedNumber0);
    Locale locale0 = null;
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale((Locale) null);
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
    DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
    int int0 = 0;
    DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear(0);
    String string0 = null;
    dateTimeFormatter4.parseMutableDateTime((String) null);
    StringBuffer stringBuffer0 = new StringBuffer(string0);
    MockGregorianCalendar mockGregorianCalendar0 = null;
    mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
},ERROR,java.lang.ClassCastException,class com.github.javaparser.ast.expr.AssignExpr cannot be cast to class com.github.javaparser.ast.expr.MethodCallExpr (com.github.javaparser.ast.expr.AssignExpr and com.github.javaparser.ast.expr.MethodCallExpr are in unnamed module of loader 'app')
org.joda.time.format.DateTimeFormatter,@Test(timeout = 4000)
public void test03434() throws Throwable {
    DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('Q');
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
    Integer integer0 = new Integer((-2136));
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer0);
    MutableDateTime mutableDateTime0 = new MutableDateTime();
    dateTimeFormatter2.parseDateTime("""");
    mutableDateTime0.toMutableDateTime();
    String string0 = ""org.joda.time.format.DateTimeFormatter"";
    int int0 = (-103);
},ERROR,java.lang.IllegalStateException,[ERROR] - Unable to parse last statement as a MethodCallExpr or an ObjectCreationExpr statement.
org.joda.time.format.DateTimeFormatter,@Test(timeout = 4000)
public void test03535() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("""");
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
    int int0 = 314;
    Integer integer0 = new Integer(314);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
    dateTimeFormatter1.parseDateTime("""");
    int int1 = 0;
    StringBuffer stringBuffer0 = new StringBuffer(0);
    char char0 = 'e';
    dateTimeFormatter0.printTo(stringBuffer0, 0L);
    int int2 = (-2714);
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = gJChronology0.getZone();
    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
    Chronology chronology0 = gregorianChronology0.withUTC();
    Locale locale0 = Locale.GERMANY;
    dateTimeFormatterBuilder_StringLiteral0.printTo(stringBuffer0, (long) 314, chronology0, 0, dateTimeZone0, locale0);
    CharArrayWriter charArrayWriter0 = new CharArrayWriter((-1702));
    dateTimeFormatter1.printTo((Writer) charArrayWriter0, (long) int1);
    stringBuffer0.setLength(int2);
    JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
    YearMonth yearMonth0 = new YearMonth((Chronology) julianChronology0);
    int int3 = 1;
},ERROR,java.lang.IllegalStateException,[ERROR] - Unable to parse last statement as a MethodCallExpr or an ObjectCreationExpr statement.
org.joda.time.format.DateTimeFormatter,@Test(timeout = 4000)
public void test03939() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 47, true);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(47);
    Integer integer0 = new Integer(245);
    DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear(integer0);
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    dateTimeFormatter3.withZone(fixedDateTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer();
    LocalDateTime localDateTime0 = LocalDateTime.parse(""E+b^jb2^~g<$<4v!-u|"");
    int int0 = 1;
    LocalDateTime localDateTime1 = localDateTime0.plusDays(int0);
    LocalDate localDate0 = localDateTime1.toLocalDate();
    localDate0.toDateTimeAtCurrentTime((DateTimeZone) fixedDateTimeZone0);
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.format.DateTimeFormatter,@Test(timeout = 4000)
public void test04444() throws Throwable {
    DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('x');
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
    JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(julianChronology0);
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone(dateTimeZone0);
    dateTimeFormatter2.withZoneUTC();
    dateTimeFormatter2.parseMillis((String) null);
    dateTimeFormatter1.withZoneUTC();
    int int0 = 0;
    Integer integer0 = null;
    integer0 = new Integer(int0);
},ERROR,java.nio.file.NoSuchFileException,/home/star_usit_group/tratto/experiment/generator/resources/defects4j/temp/Time_7b/src/main/java/java/lang/Integer.java
org.joda.time.format.DateTimeFormatter,@Test(timeout = 4000)
public void test04747() throws Throwable {
    int int0 = 881;
    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(""bLQMgG;c\""d^(k#.2"", ""bLQMgG;c\""d^(k#.2"", true, 881, 881);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
    String string0 = ""minuend"";
    dateTimeFormatter0.parseLocalDateTime(""minuend"");
    int int1 = 0;
    int int2 = (-1156);
},ERROR,java.lang.IllegalStateException,[ERROR] - Unable to parse last statement as a MethodCallExpr or an ObjectCreationExpr statement.
org.joda.time.format.DateTimeFormatter,@Test(timeout = 4000)
public void test04848() throws Throwable {
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
    int int0 = 0;
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 0, true);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_TwoDigitYear0);
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    Chronology chronology0 = ethiopicChronology0.withZone(fixedDateTimeZone0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(chronology0);
    DateTimeZone.getDefault();
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(1);
    DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
    dateTimeFieldType0.getField(chronology0);
    dateTimeFormatter0.withDefaultYear(1);
    dateTimeFormatter3.isOffsetParsed();
    String string0 = ""CST"";
    dateTimeFormatter1.parseLocalTime(""CST"");
    StringWriter stringWriter0 = null;
    stringWriter0 = new StringWriter(int0);
},ERROR,java.nio.file.NoSuchFileException,/home/star_usit_group/tratto/experiment/generator/resources/defects4j/temp/Time_7b/src/main/java/java/io/StringWriter.java
org.joda.time.format.DateTimeFormatter,@Test(timeout = 4000)
public void test05050() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("""");
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
    dateTimeFormatter0.printTo((Appendable) null, (-1489L));
    dateTimeFormatter0.getParser();
    dateTimeFormatter0.getPrinter();
    int int0 = 45;
},ERROR,java.lang.IllegalStateException,[ERROR] - Unable to parse last statement as a MethodCallExpr or an ObjectCreationExpr statement.
org.joda.time.format.DateTimeFormatter,@Test(timeout = 4000)
public void test05454() throws Throwable {
    HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
    DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(0, hashMap0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);
    String string0 = ""CXo6F0%>FX7T#*Bk"";
    dateTimeFormatter0.parseMillis(""CXo6F0%>FX7T#*Bk"");
    int int0 = 3600;
},ERROR,java.lang.IllegalStateException,[ERROR] - Unable to parse last statement as a MethodCallExpr or an ObjectCreationExpr statement.
org.joda.time.format.DateTimeFormatter,@Test(timeout = 4000)
public void test05555() throws Throwable {
    HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>(0);
    DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(0, hashMap0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear((-1505));
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withLocale(locale0);
    int int0 = (-955);
    Integer integer0 = Integer.valueOf(""Instant must not be null"", (-955));
    dateTimeFormatter3.withPivotYear(integer0);
    long long0 = (-2836L);
    DateTimeUtils.setCurrentMillisOffset(long0);
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.format.DateTimeFormatter,@Test(timeout = 4000)
public void test05656() throws Throwable {
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
    int int0 = 0;
    Integer integer0 = new Integer(0);
    linkedList0.add((Object) dateTimeFormatter0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
    DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
    UTCProvider uTCProvider0 = new UTCProvider();
    uTCProvider0.getZone(""1o"");
    uTCProvider0.getAvailableIDs();
    DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withZone((DateTimeZone) null);
    Locale locale0 = new Locale(""{z>@Ha{CVQ}"", ""{z>@Ha{CVQ}"");
    DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withLocale(locale0);
    dateTimeFormatter5.getChronology();
    MockPrintWriter mockPrintWriter0 = new MockPrintWriter("""", ""nQxCZC`J>#[|NkNI|?"");
    dateTimeFormatter3.withLocale(locale0);
    DateTimeUtils.setCurrentMillisSystem();
    uTCProvider0.getAvailableIDs();
    char char0 = 'i';
},ERROR,java.lang.IllegalStateException,[ERROR] - Unable to parse last statement as a MethodCallExpr or an ObjectCreationExpr statement.
org.joda.time.format.DateTimeFormatter,@Test(timeout = 4000)
public void test06363() throws Throwable {
    DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('J');
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
    CopticChronology copticChronology0 = CopticChronology.getInstance();
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(copticChronology0);
    dateTimeFormatter1.getChronolgy();
    int int0 = 12740625;
    PipedWriter pipedWriter0 = new PipedWriter();
    DateTime dateTime0 = DateTime.parse("""");
    LimitChronology limitChronology0 = LimitChronology.getInstance(copticChronology0, dateTime0, dateTime0);
    limitChronology0.getUpperLimit();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.format.DateTimeFormatter,@Test(timeout = 4000)
public void test06767() throws Throwable {
    YearMonth yearMonth0 = new YearMonth(1294L);
    Partial partial0 = new Partial(yearMonth0);
    DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(fixedDateTimeZone0);
    ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
    Chronology chronology0 = iSOChronology0.withZone(fixedDateTimeZone0);
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(chronology0);
    DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
    dateTimeFormatter2.withZone(fixedDateTimeZone0);
    DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear((Integer) 0);
    Locale locale0 = Locale.ROOT;
    dateTimeFormatter4.withChronology(chronology0);
    dateTimeFormatter4.withLocale(locale0);
    dateTimeFormatter4.print((ReadablePartial) partial0);
    dateTimeFormatter0.getLocale();
    String string0 = null;
    File file0 = MockFile.createTempFile((String) null, ""1969-12"");
    MockPrintWriter mockPrintWriter0 = null;
    mockPrintWriter0 = new MockPrintWriter(file0);
},ERROR,java.lang.ClassCastException,class com.github.javaparser.ast.expr.AssignExpr cannot be cast to class com.github.javaparser.ast.expr.MethodCallExpr (com.github.javaparser.ast.expr.AssignExpr and com.github.javaparser.ast.expr.MethodCallExpr are in unnamed module of loader 'app')
org.joda.time.format.DateTimeFormatter,@Test(timeout = 4000)
public void test07171() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
    YearMonth yearMonth0 = YearMonth.now(dateTimeZone0);
    Partial partial0 = new Partial(yearMonth0);
    DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(964);
    String string0 = ""LSq`<^hD8=h^U> I"";
    String string1 = ""org.joda.time.chrono.AssembledChronology$Fields"";
    dateTimeFormatter1.printTo((StringBuffer) null, (long) 1);
    dateTimeFormatter1.parseLocalDateTime(string1);
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) string0);
    ReadableInstant readableInstant0 = null;
},ERROR,java.lang.IllegalStateException,[ERROR] - Unable to parse last statement as a MethodCallExpr or an ObjectCreationExpr statement.
org.joda.time.format.DateTimeFormatter,@Test(timeout = 4000)
public void test07474() throws Throwable {
    String string0 = ""8"";
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(""8"");
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
    int int0 = (-365);
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    dateTimeFormatter0.parseLocalTime(""8"");
    EthiopicChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (-365));
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.format.DateTimeFormatter,@Test(timeout = 4000)
public void test07878() throws Throwable {
    DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 3300);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormat_StyleFormatter0);
    Locale locale0 = Locale.JAPANESE;
    locale0.getDisplayVariant((Locale) null);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(3300);
    int int0 = (-5256);
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear((-5256));
    Integer integer0 = new Integer(3300);
    DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear(integer0);
    DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withOffsetParsed();
    dateTimeFormatter4.print((long) (-5256));
    String string0 = ""org.joda.time.format.DateTimeFormatter"";
    String string1 = """";
    File file0 = MockFile.createTempFile(string0, string1);
    MockPrintWriter mockPrintWriter0 = null;
    mockPrintWriter0 = new MockPrintWriter(file0);
},ERROR,java.lang.ClassCastException,class com.github.javaparser.ast.expr.AssignExpr cannot be cast to class com.github.javaparser.ast.expr.MethodCallExpr (com.github.javaparser.ast.expr.AssignExpr and com.github.javaparser.ast.expr.MethodCallExpr are in unnamed module of loader 'app')
org.joda.time.format.DateTimeFormatter,@Test(timeout = 4000)
public void test08282() throws Throwable {
    String string0 = ""Ct~G}d"";
    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
    Chronology chronology0 = null;
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""Ct~G}d"", 0, (-395), 1026, (-2405), (-395), 0, 0, 0);
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(chronology0, dateTimeZone0);
    DateTimeZone dateTimeZone1 = zonedChronology0.getZone();
    dateTimeFormatter2.withZone(dateTimeZone1);
    CharArrayWriter charArrayWriter0 = new CharArrayWriter();
    charArrayWriter0.append((CharSequence) string0);
},ERROR,java.nio.file.NoSuchFileException,/home/star_usit_group/tratto/experiment/generator/resources/defects4j/temp/Time_7b/src/main/java/java/io/CharArrayWriter.java
org.joda.time.format.DateTimeFormatter,@Test(timeout = 4000)
public void test08686() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
    int int0 = 115;
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 115, false);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_UnpaddedNumber0);
    FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""No instant converter found for type: "");
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(115);
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear(0);
    DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(115);
    Chronology chronology0 = ethiopicChronology0.withZone(dateTimeZone0);
    DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withChronology(chronology0);
    dateTimeFormatter4.withChronology(chronology0);
    Locale locale0 = Locale.FRENCH;
    dateTimeFormatter4.withLocale(locale0);
    Object object0 = new Object();
    DateTime dateTime0 = new DateTime(object0);
    DateTime dateTime1 = dateTime0.plusMonths(int0);
    DateTime dateTime2 = dateTime1.withMillis(int0);
    int int1 = 86400;
    dateTime2.minusYears(int1);
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.format.DateTimeFormatter,@Test(timeout = 4000)
public void test09191() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("""");
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
    String string0 = ""\\D7"";
    dateTimeFormatter0.parseLocalTime(""D7"");
    ReadablePartial readablePartial0 = null;
},ERROR,java.lang.IllegalStateException,[ERROR] - Unable to parse last statement as a MethodCallExpr or an ObjectCreationExpr statement.
org.joda.time.format.DateTimeFormatter,@Test(timeout = 4000)
public void test09292() throws Throwable {
    int int0 = 7;
    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(""^,"", """", false, 7, 7);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
    Integer integer0 = new Integer(2128);
    dateTimeFormatter0.withPivotYear(integer0);
    CharArrayWriter charArrayWriter0 = new CharArrayWriter();
    MonthDay monthDay0 = MonthDay.parse(""=1tR*"", dateTimeFormatter0);
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    int int1 = 0;
    MonthDay monthDay1 = monthDay0.withField(dateTimeFieldType0, int1);
    LocalDate localDate0 = monthDay1.toLocalDate(int0);
    localDate0.withMonthOfYear(int0);
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.format.DateTimeFormatter,@Test(timeout = 4000)
public void test09494() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("""");
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
    int int0 = 314;
    Integer integer0 = new Integer(314);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
    dateTimeFormatter1.parseDateTime(""QpP8c%-:L7(AO+/[;"");
    int int1 = 0;
    StringBuffer stringBuffer0 = null;
    stringBuffer0 = new StringBuffer(int1);
},ERROR,java.nio.file.NoSuchFileException,/home/star_usit_group/tratto/experiment/generator/resources/defects4j/temp/Time_7b/src/main/java/java/lang/StringBuffer.java
org.joda.time.format.DateTimeFormatter,@Test(timeout = 4000)
public void test09696() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
    Locale locale0 = Locale.TAIWAN;
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
    dateTimeFormatter1.withOffsetParsed();
    DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('k');
    DateTimeFormatter dateTimeFormatter2 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
    DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
    DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withZone((DateTimeZone) null);
    DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withPivotYear(6);
    DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter5.withDefaultYear(523);
    CharArrayWriter charArrayWriter0 = new CharArrayWriter();
    dateTimeFormatter6.printTo((Appendable) charArrayWriter0, (-28801249L));
    LocalDateTime localDateTime0 = LocalDateTime.now((DateTimeZone) null);
    Partial partial0 = new Partial(localDateTime0);
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
    int int0 = 3116;
    Partial partial1 = partial0.withField(dateTimeFieldType0, int0);
    ReadablePeriod readablePeriod0 = null;
    partial1.minus(readablePeriod0);
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.format.DateTimeFormatter,@Test(timeout = 4000)
public void test09797() throws Throwable {
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
    dateTimeFormatter0.print((-1L));
    int int0 = 0;
},ERROR,java.lang.IllegalStateException,[ERROR] - Unable to parse last statement as a MethodCallExpr or an ObjectCreationExpr statement.
org.joda.time.format.DateTimeFormatter,@Test(timeout = 4000)
public void test101101() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 560, true);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_TwoDigitYear0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
    String string0 = ""Z"";
    int int0 = 9;
    Integer integer0 = Integer.getInteger(""Z"", 9);
    dateTimeFieldType0.getRangeDurationType();
    StringBuffer stringBuffer0 = new StringBuffer();
    dateTimeFormatter0.printTo(stringBuffer0, 3L);
    dateTimeFormatter1.withPivotYear(integer0);
    int int1 = (-3298);
    long long0 = (-2492L);
    LocalDate localDate0 = null;
    localDate0 = new LocalDate(long0);
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.format.DateTimeFormatter,@Test(timeout = 4000)
public void test105105() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, (-2832), true);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_UnpaddedNumber0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-2568));
    Locale locale0 = Locale.GERMAN;
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
    DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZone(dateTimeZone0);
    DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withOffsetParsed();
    dateTimeFormatter4.withPivotYear((-2568));
    URI uRI0 = MockURI.aHttpURI;
    MockFile mockFile0 = new MockFile(uRI0);
    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
    int int0 = 59;
},ERROR,java.lang.IllegalStateException,[ERROR] - Unable to parse last statement as a MethodCallExpr or an ObjectCreationExpr statement.
org.joda.time.format.DateTimeFormatter,@Test(timeout = 4000)
public void test108108() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("""");
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
    int int0 = 314;
    Integer integer0 = new Integer(314);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
    dateTimeFormatter1.parseDateTime("""");
    int int1 = 0;
    StringBuffer stringBuffer0 = new StringBuffer(0);
    dateTimeFormatter0.printTo(stringBuffer0, 0L);
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = gJChronology0.getZone();
    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
    Chronology chronology0 = gregorianChronology0.withUTC();
    Locale locale0 = Locale.GERMANY;
    dateTimeFormatterBuilder_StringLiteral0.printTo(stringBuffer0, (long) 314, chronology0, 0, dateTimeZone0, locale0);
    CharArrayWriter charArrayWriter0 = new CharArrayWriter();
    dateTimeFormatter1.printTo((Writer) charArrayWriter0, (long) 0);
    stringBuffer0.setLength((-2714));
    JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
    YearMonth yearMonth0 = new YearMonth((Chronology) julianChronology0);
    int int2 = 1;
    int int3 = 0;
    PeriodType periodType0 = PeriodType.yearMonthDay();
    Period period0 = null;
    period0 = new Period(int2, int0, int1, int2, yearMonth0.MONTH_OF_YEAR, int3, yearMonth0.MONTH_OF_YEAR, yearMonth0.YEAR, periodType0);
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.format.DateTimeFormatter,@Test(timeout = 4000)
public void test109109() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("""");
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
    int int0 = 314;
    Integer integer0 = new Integer(314);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
    dateTimeFormatter1.parseDateTime("""");
    int int1 = 0;
    StringBuffer stringBuffer0 = new StringBuffer(0);
    dateTimeFormatter0.printTo(stringBuffer0, (-28800000L));
    int int2 = (-2714);
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = gJChronology0.getZone();
    GregorianChronology.getInstance(dateTimeZone0);
    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
    dateTimeFormatter0.parseMillis("""");
    Locale locale0 = Locale.GERMANY;
    dateTimeFormatterBuilder_StringLiteral0.printTo(stringBuffer0, (long) 314, (Chronology) gregorianChronology0, 0, dateTimeZone0, locale0);
    CharArrayWriter charArrayWriter0 = new CharArrayWriter((-1702));
    dateTimeFormatter1.printTo((Writer) charArrayWriter0, (long) int1);
    stringBuffer0.setLength(int2);
    JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
    YearMonth yearMonth0 = new YearMonth((Chronology) julianChronology0);
    int int3 = 1;
    int int4 = 0;
},ERROR,java.lang.IllegalStateException,[ERROR] - Unable to parse last statement as a MethodCallExpr or an ObjectCreationExpr statement.
org.joda.time.format.DateTimeFormatter,@Test(timeout = 4000)
public void test110110() throws Throwable {
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
    int int0 = 0;
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 0, true);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_TwoDigitYear0);
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    Chronology chronology0 = ethiopicChronology0.withZone(fixedDateTimeZone0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(chronology0);
    DateTimeZone.getDefault();
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(1);
    DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withZone(fixedDateTimeZone0);
    DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withOffsetParsed();
    dateTimeFieldType0.getField(chronology0);
    dateTimeFormatter0.withDefaultYear(1);
    dateTimeFormatter4.isOffsetParsed();
    String string0 = ""CST"";
    StringBuffer stringBuffer0 = new StringBuffer(2126);
    LocalTime localTime0 = new LocalTime((long) 1, dateTimeZone0);
    Period period0 = new Period(0L, 2126, (PeriodType) null);
    Period period1 = period0.minusHours(2131);
    LocalTime localTime1 = localTime0.minus(period1);
    dateTimeFormatter3.printTo(stringBuffer0, (ReadablePartial) localTime1);
    dateTimeFormatter1.parseLocalTime(string0);
    StringWriter stringWriter0 = new StringWriter(int0);
    int int1 = 0;
    StringWriter stringWriter1 = stringWriter0.append((CharSequence) string0, int0, int1);
    stringWriter1.append((CharSequence) string0);
},ERROR,java.nio.file.NoSuchFileException,/home/star_usit_group/tratto/experiment/generator/resources/defects4j/temp/Time_7b/src/main/java/java/io/StringWriter.java
org.joda.time.format.DateTimeFormatter,@Test(timeout = 4000)
public void test111111() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
    int int0 = (-1480);
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-1480), (-1480));
    dateTimeFieldType0.getDurationType();
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
    Locale locale0 = Locale.ENGLISH;
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
    dateTimeFormatter1.getParser();
    int int1 = 1953;
    dateTimeFormatter1.withPivotYear(1953);
    StringWriter stringWriter0 = new StringWriter();
    StringWriter stringWriter1 = stringWriter0.append('u');
    stringWriter1.getBuffer();
    LocalDateTime localDateTime0 = LocalDateTime.now((DateTimeZone) null);
    LocalDateTime localDateTime1 = localDateTime0.withWeekOfWeekyear(int0);
    localDateTime1.minusHours(int1);
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.format.DateTimeFormatter,@Test(timeout = 4000)
public void test112112() throws Throwable {
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
    int int0 = 0;
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 0, true);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_TwoDigitYear0);
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    Chronology chronology0 = ethiopicChronology0.withZone(fixedDateTimeZone0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(chronology0);
    DateTimeZone.getDefault();
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(1);
    DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
    dateTimeFieldType0.getField(chronology0);
    dateTimeFormatter0.withDefaultYear(1);
    dateTimeFormatter3.isOffsetParsed();
    StringBuffer stringBuffer0 = new StringBuffer("""");
    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""Parsing not supported"");
    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
    dateTimeFormatter2.printTo((Writer) mockPrintWriter0, (ReadableInstant) null);
    String string0 = """";
    LocalDate localDate0 = dateTimeFormatter1.parseLocalDate(string0);
    Locale locale0 = Locale.KOREAN;
    dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, (ReadablePartial) localDate0, locale0);
},ERROR,java.nio.file.NoSuchFileException,/home/star_usit_group/tratto/experiment/generator/resources/defects4j/temp/Time_7b/src/main/java/org/joda/time/format/DateTimeFormatterBuilder/TwoDigitYear.java
org.joda.time.format.DateTimeFormatter,@Test(timeout = 4000)
public void test113113() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
    dateTimeFieldType0.getDurationType();
    int int0 = 2428;
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2428, true);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
    FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
    Locale locale0 = Locale.JAPAN;
    DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withLocale(locale0);
    DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withDefaultYear(2428);
    ISOChronology iSOChronology0 = ISOChronology.getInstance();
    MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) iSOChronology0);
    dateTimeFormatter1.parseInto(mutableDateTime0, ""Multiplication overflows a long: "", 17887500);
    dateTimeFormatter3.print((ReadablePartial) null);
    DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withChronology(iSOChronology0);
    dateTimeFormatter5.withDefaultYear(int0);
    String string0 = """";
    dateTimeFormatter3.parseLocalDateTime(string0);
    dateTimeFormatter5.withLocale(locale0);
    DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
    DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.format.DateTimeFormatter,@Test(timeout = 4000)
public void test115115() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("""");
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
    int int0 = 314;
    Integer integer0 = new Integer(314);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
    dateTimeFormatter1.parseDateTime("""");
    int int1 = 0;
    StringBuffer stringBuffer0 = new StringBuffer(0);
    dateTimeFormatter0.printTo(stringBuffer0, 0L);
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = gJChronology0.getZone();
    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
    Chronology chronology0 = gregorianChronology0.withUTC();
    gJChronology0.withUTC();
    Locale locale0 = Locale.GERMANY;
    dateTimeFormatterBuilder_StringLiteral0.printTo(stringBuffer0, (long) 314, chronology0, 0, dateTimeZone0, locale0);
    CharArrayWriter charArrayWriter0 = new CharArrayWriter();
    dateTimeFormatter1.printTo((Writer) charArrayWriter0, (long) 0);
    dateTimeFormatter1.parseLocalDate("""");
    stringBuffer0.setLength((-2714));
    JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
    YearMonth yearMonth0 = new YearMonth((Chronology) julianChronology0);
    int int2 = 1;
    int int3 = 0;
    PeriodType periodType0 = PeriodType.yearMonthDay();
    Period period0 = new Period(int2, int0, int1, int2, yearMonth0.MONTH_OF_YEAR, int3, yearMonth0.MONTH_OF_YEAR, yearMonth0.YEAR, periodType0);
    period0.minusMillis(int3);
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.format.DateTimeFormatter,@Test(timeout = 4000)
public void test116116() throws Throwable {
    FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""Instant must not be null"");
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 2000, 2000);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(2147483573);
    CopticChronology copticChronology0 = CopticChronology.getInstance();
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(copticChronology0);
    MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) copticChronology0);
    MutableDateTime mutableDateTime1 = mutableDateTime0.toMutableDateTimeISO();
    dateTimeFormatter2.parseInto(mutableDateTime1, ""Instant must not be null"", (-403));
    dateTimeFormatter2.withZoneUTC();
    Integer integer0 = null;
    dateTimeFormatter0.withPivotYear(integer0);
    Writer writer0 = null;
    ReadableInstant readableInstant0 = null;
},ERROR,java.lang.IllegalStateException,[ERROR] - Unable to parse last statement as a MethodCallExpr or an ObjectCreationExpr statement.
org.joda.time.format.DateTimeFormatter,@Test(timeout = 4000)
public void test117117() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("""");
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
    int int0 = 314;
    Integer integer0 = new Integer(314);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
    dateTimeFormatter1.parseDateTime("""");
    int int1 = 0;
    StringBuffer stringBuffer0 = new StringBuffer(0);
    dateTimeFormatter0.printTo(stringBuffer0, 0L);
    GJChronology.getInstanceUTC();
    dateTimeFormatter0.parseLocalTime("""");
    Locale locale0 = Locale.GERMANY;
    CharArrayWriter charArrayWriter0 = new CharArrayWriter();
    dateTimeFormatter1.printTo((Writer) charArrayWriter0, (long) 0);
    stringBuffer0.setLength((-2714));
    JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
    YearMonth yearMonth0 = new YearMonth((Chronology) julianChronology0);
    int int2 = 1;
    int int3 = 0;
    PeriodType periodType0 = PeriodType.yearMonthDay();
    Period period0 = null;
    period0 = new Period(int2, int0, int1, int2, yearMonth0.MONTH_OF_YEAR, int3, yearMonth0.MONTH_OF_YEAR, yearMonth0.YEAR, periodType0);
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.format.DateTimeFormatter,@Test(timeout = 4000)
public void test118118() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
    dateTimeFieldType0.getDurationType();
    int int0 = 2428;
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2428, true);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
    Locale locale0 = Locale.JAPAN;
    DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withLocale(locale0);
    DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withDefaultYear(2428);
    ISOChronology iSOChronology0 = ISOChronology.getInstance();
    MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) iSOChronology0);
    dateTimeFormatter1.parseInto(mutableDateTime0, ""Multiplication overflows a long: "", 17887500);
    dateTimeFieldType0.getRangeDurationType();
    DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withChronology(iSOChronology0);
    dateTimeFormatter5.withDefaultYear(2428);
    String string0 = """";
    StringBuffer stringBuffer0 = new StringBuffer(0);
    dateTimeFormatter0.printTo(stringBuffer0, (ReadablePartial) null);
    dateTimeFormatter3.parseLocalDateTime(string0);
    dateTimeFormatter5.withLocale(locale0);
    DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
    DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.format.DateTimeFormatter,@Test(timeout = 4000)
public void test120120() throws Throwable {
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, (DateTimeParser) null);
    int int0 = (-1);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-1));
    Locale locale0 = Locale.UK;
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
    DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear((-1));
    DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withZoneUTC();
    DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withOffsetParsed();
    dateTimeFormatter4.parseDateTime(""[9"");
    String string0 = """";
    dateTimeFormatter5.parseLocalDate(string0);
    String string1 = ""j0G;3b~eDMs|Z"";
},ERROR,java.lang.IllegalStateException,[ERROR] - Unable to parse last statement as a MethodCallExpr or an ObjectCreationExpr statement.
org.joda.time.format.DateTimeFormatter,@Test(timeout = 4000)
public void test124124() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
    dateTimeFieldType0.getRangeDurationType();
    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
    LocalDateTime localDateTime0 = new LocalDateTime(""5+5&Nq'Q=6Y_YwNr8?b"", ethiopicChronology0);
    dateTimeFormatter1.withZoneUTC();
    localDateTime0.withHourOfDay(ethiopicChronology0.EE);
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.format.DateTimeFormatter,@Test(timeout = 4000)
public void test125125() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);
    dateTimeFormatter0.withOffsetParsed();
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
    LocalDateTime localDateTime0 = new LocalDateTime(""0.RJ~"", ethiopicChronology0);
    localDateTime0.withHourOfDay(ethiopicChronology0.EE);
    int int0 = 0;
},ERROR,java.lang.IllegalStateException,[ERROR] - Unable to parse last statement as a MethodCallExpr or an ObjectCreationExpr statement.
org.joda.time.format.DateTimeFormatter,@Test(timeout = 4000)
public void test126126() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
    dateTimeFieldType0.getRangeDurationType();
    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_TextField0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
    int int0 = 0;
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
    Locale locale0 = Locale.SIMPLIFIED_CHINESE;
    dateTimeFormatter2.withLocale(locale0);
    dateTimeFormatter2.isPrinter();
    dateTimeFormatter1.getPivotYear();
    dateTimeFormatter1.withOffsetParsed();
    StringBuffer stringBuffer0 = new StringBuffer("""");
    Map<String, String> map0 = ZoneId.SHORT_IDS;
    ZoneId zoneId0 = ZoneId.of(""Printing not supported"", map0);
    TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
    JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
    dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, (long) int0, (Chronology) julianChronology0, int0, dateTimeZone0, locale0);
},ERROR,java.nio.file.NoSuchFileException,/home/star_usit_group/tratto/experiment/generator/resources/defects4j/temp/Time_7b/src/main/java/org/joda/time/format/DateTimeFormatterBuilder/TextField.java
org.joda.time.format.DateTimeFormatter,@Test(timeout = 4000)
public void test130130() throws Throwable {
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
    int int0 = 0;
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 0, true);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_TwoDigitYear0);
    FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""RWM0zO.\""z$c2 "");
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    ethiopicChronology0.withZone(fixedDateTimeZone0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
    DateTimeZone.getDefault();
    dateTimeFormatter1.withPivotYear(1);
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withDefaultYear(1);
    StringWriter stringWriter0 = new StringWriter();
    StringWriter stringWriter1 = stringWriter0.append('$');
    LocalDate localDate0 = new LocalDate(1180L);
    LocalDate localDate1 = localDate0.withDayOfWeek(1);
    LocalDate localDate2 = localDate1.withYearOfCentury(1);
    dateTimeFormatter2.printTo((Writer) stringWriter1, (ReadablePartial) localDate2);
    dateTimeFormatter1.isOffsetParsed();
    String string0 = ""CST"";
    dateTimeFormatter1.parseLocalTime(string0);
    StringWriter stringWriter2 = new StringWriter(int0);
    int int1 = 0;
    stringWriter2.append((CharSequence) string0, int0, int1);
},ERROR,java.nio.file.NoSuchFileException,/home/star_usit_group/tratto/experiment/generator/resources/defects4j/temp/Time_7b/src/main/java/java/io/StringWriter.java
org.joda.time.format.DateTimeFormatter,@Test(timeout = 4000)
public void test132132() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 560, true);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_TwoDigitYear0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
    String string0 = ""Z"";
    Integer integer0 = Integer.getInteger(""Z"", 9);
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer0);
    int int0 = (-3298);
    DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear((-3298));
    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(""A?7j$Pw4iW<pkp`ma"");
    dateTimeFormatter2.printTo((Writer) mockPrintWriter0, (long) 9);
    int int1 = 832;
    String string1 = null;
    dateTimeFormatter3.parseDateTime(string1);
    dateTimeFormatter3.withPivotYear(integer0);
    int int2 = 1015;
},ERROR,java.lang.IllegalStateException,[ERROR] - Unable to parse last statement as a MethodCallExpr or an ObjectCreationExpr statement.
org.joda.time.format.DateTimeFormatter,@Test(timeout = 4000)
public void test136136() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("""");
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
    Integer integer0 = new Integer(275);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
    DateTime dateTime0 = dateTimeFormatter1.parseDateTime("""");
    StringBuffer stringBuffer0 = new StringBuffer("""");
    dateTimeFormatter0.printTo(stringBuffer0, 0L);
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = gJChronology0.getZone();
    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
    Chronology chronology0 = gregorianChronology0.withUTC();
    gJChronology0.withUTC();
    FileSystemHandling.appendLineToFile((EvoSuiteFile) null, """");
    Locale locale0 = Locale.GERMANY;
    dateTimeFormatterBuilder_StringLiteral0.printTo(stringBuffer0, (long) 275, chronology0, 0, dateTimeZone0, locale0);
    CharArrayWriter charArrayWriter0 = new CharArrayWriter();
    dateTimeFormatter1.printTo((Writer) charArrayWriter0, (long) 0);
    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""fPw\""fLMr^8p"");
    OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0);
    Weeks weeks0 = Weeks.MAX_VALUE;
    DateTime dateTime1 = dateTime0.minus((ReadablePeriod) weeks0);
    dateTimeFormatter1.printTo((Writer) outputStreamWriter0, (ReadableInstant) dateTime1);
    stringBuffer0.setLength((-2714));
},ERROR,java.nio.file.NoSuchFileException,/home/star_usit_group/tratto/experiment/generator/resources/defects4j/temp/Time_7b/src/main/java/java/lang/StringBuffer.java
org.joda.time.format.DateTimeFormatter,@Test(timeout = 4000)
public void test138138() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
    dateTimeFieldType0.getDurationType();
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2428, false);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
    Locale locale0 = Locale.JAPAN;
    DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withLocale(locale0);
    ISOChronology iSOChronology0 = ISOChronology.getInstance();
    MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) iSOChronology0);
    Integer integer0 = new Integer(1);
    DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter0.withChronology(iSOChronology0);
    DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withDefaultYear(2428);
    dateTimeFormatter4.withLocale(locale0);
    DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
    doReturn(165L).when(dateTimeUtils_MillisProvider0).getMillis();
    DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    YearMonth yearMonth0 = new YearMonth((Chronology) iSOChronology0);
    dateTimeFormatter5.printTo(stringBuffer0, (ReadablePartial) yearMonth0);
    dateTimeFormatter2.getParser();
    dateTimeFormatter5.isPrinter();
    StringBuffer stringBuffer1 = new StringBuffer();
    dateTimeFormatter2.print((long) 2428);
    dateTimeFormatter4.withPivotYear((Integer) 0);
    dateTimeFormatter2.withPivotYear(3);
    dateTimeFormatter2.isParser();
    dateTimeFormatter2.print((ReadableInstant) mutableDateTime0);
    String string0 = ""9%IuGl:["";
    int int0 = (-1881);
    dateTimeFormatter3.parseLocalDateTime(""14"");
    dateTimeFormatter5.withZoneUTC();
    dateTimeFormatter2.parseInto(mutableDateTime0, string0, int0);
    long long0 = (-884L);
    System.setCurrentTimeMillis(long0);
},ERROR,java.util.NoSuchElementException,[ERROR] - Focal method not found. No candidate methods found in the original class, analyzing both the name and the number of parameters.
org.joda.time.format.DateTimeFormatter,@Test(timeout = 4000)
public void test140140() throws Throwable {
    DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[6];
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
    dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
    dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
    DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.monthOfYear();
    dateTimeFieldTypeArray0[2] = dateTimeFieldType1;
    DateTimeFieldType.yearOfCentury();
    dateTimeFieldTypeArray0[3] = dateTimeFieldType0;
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    DurationField durationField0 = buddhistChronology0.hours();
    UnsupportedDateTimeField unsupportedDateTimeField0 = UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField0);
    DateTimeFieldType dateTimeFieldType2 = unsupportedDateTimeField0.getType();
    dateTimeFieldTypeArray0[4] = dateTimeFieldType2;
    DateTimeFieldType dateTimeFieldType3 = DateTimeFieldType.hourOfDay();
    dateTimeFieldTypeArray0[5] = dateTimeFieldType3;
    int[] intArray0 = new int[3];
    FileSystemHandling.shouldAllThrowIOExceptions();
    intArray0[0] = 1;
    intArray0[1] = 1;
    intArray0[2] = 1;
    DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(1, 1, (-1));
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormat_StyleFormatter0);
    Integer integer0 = new Integer(1);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear(1);
    DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
    DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withChronology(buddhistChronology0);
    Locale locale0 = Locale.CANADA;
    DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withLocale(locale0);
    StringBuffer stringBuffer0 = new StringBuffer(""gHht]{P>bzw^87h3`2"");
    dateTimeFormatter5.printTo(stringBuffer0, (ReadableInstant) null);
    ReadablePartial readablePartial0 = null;
    dateTimeFormatter5.print(readablePartial0);
    Partial partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, buddhistChronology0);
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.format.DateTimeFormatter,@Test(timeout = 4000)
public void test141141() throws Throwable {
    DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[6];
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
    dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
    dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
    DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.monthOfYear();
    dateTimeFieldTypeArray0[2] = dateTimeFieldType1;
    DateTimeFieldType.yearOfCentury();
    dateTimeFieldTypeArray0[3] = dateTimeFieldType0;
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    DurationField durationField0 = buddhistChronology0.hours();
    UnsupportedDateTimeField unsupportedDateTimeField0 = UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField0);
    DateTimeFieldType dateTimeFieldType2 = unsupportedDateTimeField0.getType();
    dateTimeFieldTypeArray0[4] = dateTimeFieldType2;
    DateTimeFieldType dateTimeFieldType3 = DateTimeFieldType.hourOfDay();
    dateTimeFieldTypeArray0[5] = dateTimeFieldType3;
    int[] intArray0 = new int[3];
    FileSystemHandling.shouldAllThrowIOExceptions();
    intArray0[0] = 1;
    intArray0[1] = 1;
    intArray0[2] = 1;
    DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(1, 1, (-1));
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormat_StyleFormatter0);
    Integer integer0 = new Integer((-2145318844));
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear(1);
    DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
    DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withChronology(buddhistChronology0);
    Locale locale0 = Locale.CANADA;
    StringBuffer stringBuffer0 = new StringBuffer(1);
    StringBuffer stringBuffer1 = new StringBuffer(stringBuffer0);
    dateTimeFormatter4.printTo(stringBuffer1, 918518400000L);
    DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withLocale(locale0);
    ReadablePartial readablePartial0 = null;
    dateTimeFormatter5.print(readablePartial0);
    Partial partial0 = null;
    partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, buddhistChronology0);
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.format.DateTimeFormatter,@Test(timeout = 4000)
public void test146146() throws Throwable {
    int int0 = 116;
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction((DateTimeFieldType) null, 116, 116);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
    Locale locale0 = Locale.FRENCH;
    locale0.stripExtensions();
    DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withLocale(locale0);
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    DateTimeUtils.setCurrentMillisFixed(116);
    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
    DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withChronology(gregorianChronology0);
    StringBuffer stringBuffer0 = new StringBuffer(2147483572);
    dateTimeFormatter4.printTo(stringBuffer0, (ReadableInstant) null);
    DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withDefaultYear(int0);
    dateTimeFormatter5.withChronology(gregorianChronology0);
    long long0 = 28806144L;
},ERROR,java.lang.IllegalStateException,[ERROR] - Unable to parse last statement as a MethodCallExpr or an ObjectCreationExpr statement.
org.joda.time.format.DateTimeFormatter,@Test(timeout = 4000)
public void test150150() throws Throwable {
    DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[14];
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
    dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
    dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
    DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.monthOfYear();
    dateTimeFieldTypeArray0[2] = dateTimeFieldType1;
    DateTimeFieldType.yearOfCentury();
    dateTimeFieldTypeArray0[3] = dateTimeFieldType0;
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.hourOfDay();
    dateTimeFieldTypeArray0[5] = dateTimeFieldType2;
    int[] intArray0 = new int[3];
    FileSystemHandling.shouldAllThrowIOExceptions();
    intArray0[0] = 1;
    intArray0[1] = 1;
    intArray0[2] = 1;
    DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(1, 1, (-1));
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormat_StyleFormatter0);
    Integer integer0 = new Integer((-2145318844));
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear(1);
    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(""Parsing not supported"");
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
    Locale.lookup(linkedList0, linkedHashSet0);
    Integer integer1 = Integer.getInteger(""Parsing not supported"", 2000);
    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(47813632L, buddhistChronology0, (Locale) null, integer1, 1);
    DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
    MutableDateTime mutableDateTime0 = new MutableDateTime((long) 1, dateTimeZone0);
    dateTimeFormatter2.printTo((Writer) mockPrintWriter0, (ReadableInstant) mutableDateTime0);
    DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
    DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withChronology(buddhistChronology0);
    Locale locale0 = Locale.CANADA;
    Locale locale1 = null;
    dateTimeFormatter4.withLocale(locale1);
    ReadablePartial readablePartial0 = null;
},ERROR,java.lang.IllegalStateException,[ERROR] - Unable to parse last statement as a MethodCallExpr or an ObjectCreationExpr statement.
