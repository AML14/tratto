/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 17 01:02:44 GMT 2023
 */
package org.joda.time.format;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.net.URI;
import java.nio.CharBuffer;
import java.time.DateTimeException;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeUtils;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationField;
import org.joda.time.DurationFieldType;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.MonthDay;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadWritableInstant;
import org.joda.time.ReadableDateTime;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.LimitChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.field.PreciseDurationField;
import org.joda.time.field.UnsupportedDateTimeField;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeFormatterBuilder;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimeParserBucket;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.tz.DefaultNameProvider;
import org.joda.time.tz.FixedDateTimeZone;
import org.joda.time.tz.NameProvider;
import org.joda.time.tz.UTCProvider;
import org.joda.time.tz.ZoneInfoProvider;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class DateTimeFormatter_ESTest extends DateTimeFormatter_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(0, (Map<String, DateTimeZone>) null);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);
        dateTimeFormatter0.getPivotYear();
        UTCProvider uTCProvider0 = new UTCProvider();
        ZoneId.getAvailableZoneIds();
        StringWriter stringWriter0 = new StringWriter(2275);
        stringWriter0.append('O');
        MutableDateTime.now();
        dateTimeFormatter0.parseMutableDateTime("O-Y1EtX /r)6t63A1{I");
        dateTimeFormatter0.withZoneUTC();
        String string0 = "";
        LocalTime localTime0 = dateTimeFormatter0.parseLocalTime(string0);
        dateTimeFormatter0.printTo((Appendable) stringWriter0, (ReadablePartial) localTime0);
        dateTimeFormatter0.getChronolgy();
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        DateTimeFieldType.dayOfWeek();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        EthiopicChronology.getInstance(dateTimeZone0);
        DateTimeZone.getDefault();
        StringWriter stringWriter0 = new StringWriter(0);
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) "CST", 0, 0);
        StringWriter stringWriter2 = stringWriter1.append((CharSequence) "CST");
        stringWriter2.getBuffer();
    }

    @Test(timeout = 4000)
    public void test0022() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        dateTimeFieldType0.getRangeDurationType();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);
        dateTimeFormatter0.withOffsetParsed();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
        LocalDateTime localDateTime0 = new LocalDateTime("org.joda.time.format.DateTimeFormatter", ethiopicChronology0);
        localDateTime0.withHourOfDay(ethiopicChronology0.EE);
        int int0 = 0;
    }

    @Test(timeout = 4000)
    public void test0033() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('.');
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        Integer integer0 = new Integer(3);
        DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear(integer0);
        DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withChronology((Chronology) null);
        DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
        DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
        dateTimeFormatter5.withZone(fixedDateTimeZone0);
        dateTimeFormatter5.isPrinter();
    }

    @Test(timeout = 4000)
    public void test0044() throws Throwable {
        DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[6];
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
        dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
        dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
        DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.monthOfYear();
        dateTimeFieldTypeArray0[2] = dateTimeFieldType1;
        dateTimeFieldTypeArray0[3] = dateTimeFieldType0;
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DurationField durationField0 = buddhistChronology0.hours();
        UnsupportedDateTimeField unsupportedDateTimeField0 = UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField0);
        DateTimeFieldType dateTimeFieldType2 = unsupportedDateTimeField0.getType();
        dateTimeFieldTypeArray0[4] = dateTimeFieldType2;
        DateTimeFieldType dateTimeFieldType3 = DateTimeFieldType.hourOfDay();
        dateTimeFieldTypeArray0[5] = dateTimeFieldType3;
        int[] intArray0 = new int[3];
        FileSystemHandling.shouldAllThrowIOExceptions();
        FileSystemHandling.shouldAllThrowIOExceptions();
        intArray0[0] = 1;
        intArray0[1] = 1;
        intArray0[2] = 1;
        DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(1, 1, (-1));
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormat_StyleFormatter0);
        Integer integer0 = new Integer((-2145318844));
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear(1);
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
        DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withChronology(buddhistChronology0);
        Locale locale0 = Locale.CANADA;
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        Integer.sum(1, (-1408));
        DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withLocale((Locale) null);
        dateTimeFormatter5.print((ReadablePartial) null);
        Partial partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, buddhistChronology0);
        dateTimeFormatter3.withPivotYear(intArray0[0]);
    }

    @Test(timeout = 4000)
    public void test0055() throws Throwable {
        FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Instant must not be null");
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 2000, 2000);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(2147483573);
        CopticChronology copticChronology0 = CopticChronology.getInstance();
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(copticChronology0);
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
        copticChronology0.withZone(dateTimeZone0);
        dateTimeFormatter2.withZoneUTC();
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withPivotYear((Integer) null);
        dateTimeFormatter3.printTo((Writer) null, (ReadableInstant) null);
        dateTimeFormatter0.withChronology(copticChronology0);
        dateTimeFormatter0.getParser();
    }

    @Test(timeout = 4000)
    public void test0066() throws Throwable {
        FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Instant must not be null");
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 2000, 2000);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_Fraction0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(2147483573);
        CopticChronology copticChronology0 = CopticChronology.getInstance();
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(copticChronology0);
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
        copticChronology0.withZone(dateTimeZone0);
        dateTimeFormatter2.withZoneUTC();
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withPivotYear((Integer) null);
        dateTimeFormatter3.printTo((Writer) null, (ReadableInstant) null);
        dateTimeFormatter0.withChronology(copticChronology0);
    }

    @Test(timeout = 4000)
    public void test0077() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        Integer integer0 = new Integer(314);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
        dateTimeFormatter1.parseDateTime("");
        StringBuffer stringBuffer0 = new StringBuffer("");
        dateTimeFormatter0.printTo(stringBuffer0, 0L);
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = gJChronology0.getZone();
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
        Chronology chronology0 = gregorianChronology0.withUTC();
        gJChronology0.withUTC();
        Locale locale0 = Locale.GERMANY;
        dateTimeFormatterBuilder_StringLiteral0.printTo(stringBuffer0, (long) 314, chronology0, 0, dateTimeZone0, locale0);
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        dateTimeFormatter1.printTo((Writer) charArrayWriter0, (long) 0);
        dateTimeFormatter1.parseLocalDate("");
        stringBuffer0.setLength((-2714));
    }

    @Test(timeout = 4000)
    public void test0088() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        Integer integer0 = new Integer(314);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        dateTimeFormatter1.parseDateTime("");
        StringBuffer stringBuffer0 = new StringBuffer(314);
        dateTimeFormatter0.printTo(stringBuffer0, (-2114L));
        DateTimeZone.getDefault();
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        dateTimeFormatter1.printTo((Writer) charArrayWriter0, (long) 314);
        LocalDate localDate0 = dateTimeFormatter1.parseLocalDate("");
        stringBuffer0.setLength(314);
        FileSystemHandling.shouldAllThrowIOExceptions();
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
        dateTimeFormatter1.isParser();
        dateTimeFormatter2.parseDateTime("");
        Locale locale0 = Locale.KOREA;
        dateTimeFormatterBuilder_StringLiteral0.printTo((Writer) charArrayWriter0, (ReadablePartial) localDate0, locale0);
        Chronology chronology0 = null;
        dateTimeFormatter0.parseDateTime("The datetime zone must not be null");
        LenientChronology lenientChronology0 = LenientChronology.getInstance(chronology0);
        dateTimeFormatter0.withChronology(lenientChronology0);
    }

    @Test(timeout = 4000)
    public void test0099() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, (-706), true);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_UnpaddedNumber0);
        dateTimeFormatter0.withZoneUTC();
        Locale locale0 = Locale.FRANCE;
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear((-706));
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear((-706));
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        Integer integer0 = new Integer((-706));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-706), gJChronology0, locale0, integer0, (-706));
        DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
        DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
        doReturn((long) (-706)).when(dateTimeUtils_MillisProvider0).getMillis();
        DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
        dateTimeParserBucket0.computeMillis();
        MutableDateTime mutableDateTime0 = new MutableDateTime(dateTimeZone0);
        dateTimeFormatter3.parseInto(mutableDateTime0, "6?OG.", (-706));
        System.setCurrentTimeMillis(4121L);
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("6?OG.", true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
        dateTimeFormatter1.printTo((Appendable) mockPrintWriter0, (long) 3);
    }

    @Test(timeout = 4000)
    public void test01010() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
        dateTimeFieldType0.getDurationType();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2428, true);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
        Locale locale0 = Locale.JAPAN;
        dateTimeFormatter2.withLocale(locale0);
        ISOChronology iSOChronology0 = ISOChronology.getInstance();
        MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) iSOChronology0);
        Integer integer0 = new Integer(1);
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withChronology(iSOChronology0);
        DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withDefaultYear(2428);
        dateTimeFormatter3.withLocale(locale0);
        DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
        doReturn((-2806L)).when(dateTimeUtils_MillisProvider0).getMillis();
        DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        YearMonth yearMonth0 = new YearMonth((Chronology) iSOChronology0);
        dateTimeFormatter4.printTo(stringBuffer0, (ReadablePartial) yearMonth0);
        dateTimeFormatter2.getParser();
        dateTimeFormatter4.isPrinter();
        StringBuffer stringBuffer1 = new StringBuffer();
        dateTimeFormatter2.print((long) 2428);
        dateTimeFormatter3.withPivotYear((Integer) 0);
        dateTimeFormatter2.isParser();
        dateTimeFormatter2.print((ReadableInstant) mutableDateTime0);
        dateTimeFormatter2.parseInto(mutableDateTime0, "9%IuGl:[", (-1881));
        long long0 = (-884L);
        System.setCurrentTimeMillis(long0);
    }

    @Test(timeout = 4000)
    public void test01111() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
        int int0 = 3959;
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 3959, false);
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 3959, 1853);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_Fraction0);
        Integer integer0 = new Integer(1853);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
        Locale locale0 = Locale.JAPAN;
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear(1853);
        DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withZoneUTC();
        DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withDefaultYear(1853);
        String string0 = "";
        DateTime dateTime0 = dateTimeFormatter5.parseDateTime("");
        dateTimeFormatter0.print((ReadableInstant) dateTime0);
        String string1 = "";
    }

    @Test(timeout = 4000)
    public void test01212() throws Throwable {
        FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(buddhistChronology0);
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
        byte[] byteArray0 = new byte[4];
        byteArray0[1] = (byte) 9;
        byteArray0[1] = (byte) 6;
        byteArray0[2] = (byte) 0;
        byteArray0[3] = (byte) (-83);
        FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
        DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear(1);
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        CharArrayWriter charArrayWriter1 = charArrayWriter0.append('X');
        dateTimeFormatter3.printTo((Writer) charArrayWriter1, (ReadablePartial) null);
        dateTimeFormatter2.getParser();
        String string0 = "";
        dateTimeFormatter4.parseLocalDate(string0);
        String string1 = "";
        dateTimeFormatter3.parseMutableDateTime(string1);
        String string2 = "";
        MutableDateTime mutableDateTime0 = MutableDateTime.parse(string2, dateTimeFormatter0);
        String string3 = "Ox\\M O:\\KqaO";
        dateTimeFormatter4.parseInto(mutableDateTime0, string3, byteArray0[2]);
        dateTimeFormatter0.printTo((Writer) charArrayWriter0, (ReadableInstant) mutableDateTime0);
    }

    @Test(timeout = 4000)
    public void test01313() throws Throwable {
        FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(buddhistChronology0);
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) 9;
        byteArray0[1] = (byte) 6;
        byteArray0[2] = (byte) 0;
        byteArray0[3] = (byte) (-83);
        FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
        DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear(1);
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        CharArrayWriter charArrayWriter1 = charArrayWriter0.append('X');
        dateTimeFormatter3.printTo((Writer) charArrayWriter1, (ReadablePartial) null);
        dateTimeFormatter2.getParser();
        String string0 = "";
        dateTimeFormatter4.parseLocalDate(string0);
        String string1 = "";
        MutableDateTime mutableDateTime0 = MutableDateTime.parse(string1, dateTimeFormatter0);
        String string2 = "Ox\\M O:\\KqaO";
        dateTimeFormatter4.parseInto(mutableDateTime0, string2, byteArray0[2]);
        dateTimeFormatter0.printTo((Writer) charArrayWriter0, (ReadableInstant) mutableDateTime0);
    }

    @Test(timeout = 4000)
    public void test01414() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 12, true, 12);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_PaddedNumber0, dateTimeFormatterBuilder_PaddedNumber0);
        TimeZone timeZone0 = TimeZone.getDefault();
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
        byte[] byteArray0 = new byte[1];
        FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withDefaultYear((-1483));
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
        Chronology chronology0 = ethiopicChronology0.withUTC();
        DateTimeUtils.setCurrentMillisOffset((-1483));
        DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withChronology(chronology0);
        dateTimeFormatter4.print((-61L));
        dateTimeFormatter1.parseMutableDateTime("000000000063");
        dateTimeFormatter3.isParser();
        dateTimeFormatter4.withOffsetParsed();
        DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withZone(dateTimeZone0);
        dateTimeFormatter5.parseMutableDateTime("000000000063");
        dateTimeFormatter5.parseMutableDateTime("000000000063");
        LocalTime localTime0 = LocalTime.now();
        dateTimeFormatter5.print((ReadablePartial) localTime0);
        dateTimeFormatter3.print((-28799686L));
    }

    @Test(timeout = 4000)
    public void test01515() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(0);
        FileSystemHandling.createFolder((EvoSuiteFile) null);
        dateTimeFormatter1.withDefaultYear(1470);
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone(fixedDateTimeZone0);
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        Integer integer0 = new Integer((-1101));
        Integer integer1 = Integer.getInteger("", integer0);
        Integer integer2 = Integer.getInteger("~C'u?aC}:-~", integer1);
        DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear(integer2);
        DateTimeUtils.setCurrentMillisOffset(0);
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withChronology(iSOChronology0);
        dateTimeFormatter5.getChronology();
        dateTimeFormatter0.isOffsetParsed();
        dateTimeFormatter5.withZoneUTC();
    }

    @Test(timeout = 4000)
    public void test01616() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('w');
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(gregorianChronology0);
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.joda.time.chrono.ZonedChronology$ZonedDurationField");
        DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear((-148));
        DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withZone((DateTimeZone) null);
        MutableDateTime mutableDateTime0 = MutableDateTime.now();
        MutableDateTime mutableDateTime1 = mutableDateTime0.toMutableDateTimeISO();
        dateTimeFormatter5.parseInto(mutableDateTime1, "", 3);
        dateTimeFormatter0.withZoneUTC();
    }

    @Test(timeout = 4000)
    public void test01717() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
        FileSystemHandling.createFolder((EvoSuiteFile) null);
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 190, false);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(190);
        Locale locale0 = Locale.TAIWAN;
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
        Integer integer0 = new Integer(190);
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear(integer0);
        DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear(190);
        DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withOffsetParsed();
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = gJChronology0.getZone();
        MutableDateTime mutableDateTime0 = new MutableDateTime(dateTimeZone0);
        mutableDateTime0.addSeconds((-2147483613));
        DateTimeUtils.setCurrentMillisSystem();
        dateTimeFormatter5.parseInto(mutableDateTime0, "LxePfoH9K{<P[QT>", 3);
        dateTimeFormatter1.parseLocalDateTime("LxePfoH9K{<P[QT>");
        String string0 = "uKt@8'1K2taE);:TEX";
        dateTimeFormatter2.parseLocalTime(string0);
        int int0 = 2000;
        dateTimeFormatter1.withDefaultYear(int0);
    }

    @Test(timeout = 4000)
    public void test01818() throws Throwable {
        ISOChronology iSOChronology0 = ISOChronology.getInstance();
        LocalDate localDate0 = new LocalDate((Chronology) iSOChronology0);
        Partial partial0 = new Partial(localDate0);
        DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
        MockPrintStream mockPrintStream0 = new MockPrintStream("w");
        Object[] objectArray0 = new Object[8];
        objectArray0[0] = (Object) "|";
        objectArray0[2] = (Object) "|";
        objectArray0[3] = (Object) "w";
        objectArray0[4] = (Object) localDate0;
        objectArray0[5] = (Object) "w";
        objectArray0[6] = (Object) dateTimeFormatter1;
        PrintStream printStream0 = mockPrintStream0.printf("|", objectArray0);
        dateTimeFormatter1.printTo((Appendable) printStream0, (ReadablePartial) partial0);
        dateTimeFormatter1.getChronology();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
        PrintWriter printWriter0 = mockPrintWriter0.append('Y');
        MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
        dateTimeFormatter1.printTo((Writer) mockPrintWriter1, (ReadablePartial) localDate0);
        MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
        dateTimeFormatter1.printTo((Appendable) printStream0, (ReadableInstant) mutableDateTime0);
        dateTimeFormatter1.parseLocalTime("w");
        String string0 = "";
        dateTimeFormatter0.parseLocalTime(string0);
        StringBuffer stringBuffer0 = null;
        dateTimeFormatter0.printTo(stringBuffer0, (ReadablePartial) partial0);
    }

    @Test(timeout = 4000)
    public void test01919() throws Throwable {
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, (DateTimeParser) null);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(ethiopicChronology0);
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        Locale locale0 = Locale.PRC;
        DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withLocale(locale0);
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
        DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withZone(dateTimeZone0);
        dateTimeFormatter5.parseMillis("org.joda.time.DateTimeZone.NameProvider");
    }

    @Test(timeout = 4000)
    public void test02020() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
        ZoneInfoProvider zoneInfoProvider0 = new ZoneInfoProvider("r!nOfir>3qi9T!ms6");
    }

    @Test(timeout = 4000)
    public void test02121() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("ZoneInfoMap");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
        StringBuffer stringBuffer0 = new StringBuffer();
        dateTimeFormatter1.printTo(stringBuffer0, 1L);
    }

    @Test(timeout = 4000)
    public void test02222() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, (-889), false);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_UnpaddedNumber0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        dateTimeFormatter1.getPivotYear();
    }

    @Test(timeout = 4000)
    public void test02323() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
        DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-2375), false);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(17);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        dateTimeFormatter1.withChronology(buddhistChronology0);
    }

    @Test(timeout = 4000)
    public void test02424() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('~');
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_CharacterLiteral0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
        Integer integer0 = new Integer(1207);
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer0);
        dateTimeFormatter2.getParser();
    }

    @Test(timeout = 4000)
    public void test02525() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);
        CopticChronology copticChronology0 = CopticChronology.getInstance();
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(copticChronology0);
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(1);
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withDefaultYear(1);
        Integer integer0 = new Integer(1);
        DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withPivotYear(integer0);
        dateTimeFormatter5.withChronology(copticChronology0);
    }

    @Test(timeout = 4000)
    public void test02626() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
        int int0 = 65;
        dateTimeFormatter0.withDefaultYear(65);
        StringWriter stringWriter0 = new StringWriter();
        stringWriter0.getBuffer();
        LocalDateTime localDateTime0 = LocalDateTime.parse("");
        localDateTime0.withYear(int0);
    }

    @Test(timeout = 4000)
    public void test02727() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 228, 228);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
        dateTimeFormatter0.getChronology();
    }

    @Test(timeout = 4000)
    public void test02828() throws Throwable {
        ISOChronology iSOChronology0 = ISOChronology.getInstance();
        LocalDate localDate0 = new LocalDate((Chronology) iSOChronology0);
        Partial partial0 = new Partial(localDate0);
        DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
        MockPrintStream mockPrintStream0 = new MockPrintStream("w");
        Object[] objectArray0 = new Object[8];
        objectArray0[0] = (Object) "|";
        objectArray0[1] = (Object) "w";
        objectArray0[2] = (Object) "|";
        objectArray0[3] = (Object) "w";
        objectArray0[4] = (Object) localDate0;
        objectArray0[5] = (Object) "w";
        objectArray0[6] = (Object) dateTimeFormatter1;
        objectArray0[7] = (Object) dateTimeFormatter1;
        PrintStream printStream0 = mockPrintStream0.printf("|", objectArray0);
        dateTimeFormatter1.printTo((Appendable) printStream0, (ReadablePartial) partial0);
        dateTimeFormatter1.getChronology();
        MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
        dateTimeFormatter1.printTo((Appendable) printStream0, (ReadableInstant) mutableDateTime0);
        dateTimeFormatter1.parseLocalTime("w");
        StringBuffer stringBuffer0 = null;
        dateTimeFormatter0.printTo(stringBuffer0, (ReadablePartial) partial0);
    }

    @Test(timeout = 4000)
    public void test02929() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('p');
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
        Integer integer0 = new Integer(15271875);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
        Locale locale0 = Locale.JAPAN;
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withLocale(locale0);
        dateTimeFormatter3.isParser();
        dateTimeFormatter0.withPivotYear(integer0);
    }

    @Test(timeout = 4000)
    public void test03030() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
        DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 1, false, 1);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_PaddedNumber0, dateTimeFormatterBuilder_PaddedNumber0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale((Locale) null);
        dateTimeFormatter1.withOffsetParsed();
        dateTimeFormatter1.parseLocalTime((String) null);
    }

    @Test(timeout = 4000)
    public void test03131() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, (-2697), true);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_UnpaddedNumber0);
        Locale locale0 = null;
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale((Locale) null);
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        int int0 = 0;
        DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear(0);
        String string0 = null;
        dateTimeFormatter4.parseMutableDateTime((String) null);
        StringBuffer stringBuffer0 = new StringBuffer(string0);
        MockGregorianCalendar mockGregorianCalendar0 = null;
        mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
    }

    @Test(timeout = 4000)
    public void test03232() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 0);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_Fraction0);
        Locale locale0 = Locale.UK;
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(0);
        int int0 = (-1);
        dateTimeFormatter1.withLocale(locale0);
        dateTimeFormatter0.withDefaultYear((-1));
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withDefaultYear((-1));
        DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withZoneUTC();
        UTCProvider uTCProvider0 = new UTCProvider();
        String string0 = "Parsing not supported";
        dateTimeFormatter0.parseMutableDateTime("Parsing not supported");
        DateTimeZone dateTimeZone0 = uTCProvider0.getZone(string0);
        DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withZone(dateTimeZone0);
        dateTimeFormatter5.print((long) int0);
    }

    @Test(timeout = 4000)
    public void test03333() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('.');
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(fixedDateTimeZone0);
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        Integer integer0 = new Integer(0);
        DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear(integer0);
        DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withChronology((Chronology) null);
        dateTimeFormatter5.withZone(fixedDateTimeZone0);
    }

    @Test(timeout = 4000)
    public void test03434() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('Q');
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
        Integer integer0 = new Integer((-2136));
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer0);
        MutableDateTime mutableDateTime0 = new MutableDateTime();
        dateTimeFormatter2.parseDateTime("");
        mutableDateTime0.toMutableDateTime();
        String string0 = "org.joda.time.format.DateTimeFormatter";
        int int0 = (-103);
    }

    @Test(timeout = 4000)
    public void test03535() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        int int0 = 314;
        Integer integer0 = new Integer(314);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
        dateTimeFormatter1.parseDateTime("");
        int int1 = 0;
        StringBuffer stringBuffer0 = new StringBuffer(0);
        char char0 = 'e';
        dateTimeFormatter0.printTo(stringBuffer0, 0L);
        int int2 = (-2714);
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = gJChronology0.getZone();
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
        Chronology chronology0 = gregorianChronology0.withUTC();
        Locale locale0 = Locale.GERMANY;
        dateTimeFormatterBuilder_StringLiteral0.printTo(stringBuffer0, (long) 314, chronology0, 0, dateTimeZone0, locale0);
        CharArrayWriter charArrayWriter0 = new CharArrayWriter((-1702));
        dateTimeFormatter1.printTo((Writer) charArrayWriter0, (long) int1);
        stringBuffer0.setLength(int2);
        JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
        YearMonth yearMonth0 = new YearMonth((Chronology) julianChronology0);
        int int3 = 1;
    }

    @Test(timeout = 4000)
    public void test03636() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
        DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, (-2392), true, (-5267));
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_PaddedNumber0, dateTimeFormatterBuilder_PaddedNumber0);
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
        Integer integer0 = new Integer(117);
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer0);
        dateTimeFormatter2.withDefaultYear(117);
    }

    @Test(timeout = 4000)
    public void test03737() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear(0);
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZone(dateTimeZone0);
        Integer integer0 = new Integer(0);
        DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear(integer0);
        dateTimeFormatter4.parseLocalTime("u]@Q");
    }

    @Test(timeout = 4000)
    public void test03838() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
        Locale locale0 = Locale.JAPAN;
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear(0);
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
        DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear((-6852));
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
        DateTime dateTime0 = new DateTime(1235, 0, (-6852), (-135), 1571, 0, 1687, gregorianChronology0);
        int int0 = (-816);
        DateTime dateTime1 = dateTime0.plusMillis(int0);
        int int1 = 0;
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(int1);
        DateTime dateTime2 = dateTime1.toDateTime(dateTimeZone0);
        dateTimeFormatter4.print((ReadableInstant) dateTime2);
    }

    @Test(timeout = 4000)
    public void test03939() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 47, true);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(47);
        Integer integer0 = new Integer(245);
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear(integer0);
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        dateTimeFormatter3.withZone(fixedDateTimeZone0);
        StringBuffer stringBuffer0 = new StringBuffer();
        LocalDateTime localDateTime0 = LocalDateTime.parse("E+b^jb2^~g<$<4v!-u|");
        int int0 = 1;
        LocalDateTime localDateTime1 = localDateTime0.plusDays(int0);
        LocalDate localDate0 = localDateTime1.toLocalDate();
        localDate0.toDateTimeAtCurrentTime((DateTimeZone) fixedDateTimeZone0);
    }

    @Test(timeout = 4000)
    public void test04040() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 2847, 2847);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(2847);
        Integer integer0 = new Integer(7593750);
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer0);
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        dateTimeFormatter3.print((long) 2847);
    }

    @Test(timeout = 4000)
    public void test04141() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
        DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
        PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 0L);
        UnsupportedDateTimeField unsupportedDateTimeField0 = UnsupportedDateTimeField.getInstance(dateTimeFieldType0, preciseDurationField0);
        DateTimeFieldType dateTimeFieldType1 = unsupportedDateTimeField0.getType();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType1, 1272, (-1425));
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
        dateTimeFormatter0.print(2450L);
    }

    @Test(timeout = 4000)
    public void test04242() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(0, (Map<String, DateTimeZone>) null);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);
        Locale locale0 = Locale.SIMPLIFIED_CHINESE;
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        Chronology chronology0 = buddhistChronology0.withUTC();
        dateTimeFormatter1.withChronology(chronology0);
        dateTimeFormatter1.parseMillis("Z*MA_Y|UT>`mbD");
    }

    @Test(timeout = 4000)
    public void test04343() throws Throwable {
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(0, hashMap0);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);
        Locale locale0 = Locale.JAPAN;
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-969));
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZone(dateTimeZone0);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
        DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withChronology(ethiopicChronology0);
        DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withPivotYear(0);
        dateTimeFormatter5.print((long) 0);
    }

    @Test(timeout = 4000)
    public void test04444() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('x');
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
        JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(julianChronology0);
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone(dateTimeZone0);
        dateTimeFormatter2.withZoneUTC();
        dateTimeFormatter2.parseMillis((String) null);
        dateTimeFormatter1.withZoneUTC();
        int int0 = 0;
        Integer integer0 = null;
        integer0 = new Integer(int0);
    }

    @Test(timeout = 4000)
    public void test04545() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology((Chronology) null);
        Integer integer0 = new Integer(0);
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer0);
        DateTimeUtils.setCurrentMillisOffset(0);
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        Locale locale0 = Locale.JAPAN;
        DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withLocale(locale0);
        dateTimeFormatter4.withPivotYear(23);
    }

    @Test(timeout = 4000)
    public void test04646() throws Throwable {
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-542), hashMap0);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear((-635));
        Locale locale0 = Locale.KOREAN;
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
        dateTimeFormatter2.parseLocalDate("=");
    }

    @Test(timeout = 4000)
    public void test04747() throws Throwable {
        int int0 = 881;
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("bLQMgG;c\"d^(k#.2", "bLQMgG;c\"d^(k#.2", true, 881, 881);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
        String string0 = "minuend";
        dateTimeFormatter0.parseLocalDateTime("minuend");
        int int1 = 0;
        int int2 = (-1156);
    }

    @Test(timeout = 4000)
    public void test04848() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
        int int0 = 0;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 0, true);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_TwoDigitYear0);
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        Chronology chronology0 = ethiopicChronology0.withZone(fixedDateTimeZone0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(chronology0);
        DateTimeZone.getDefault();
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(1);
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        dateTimeFieldType0.getField(chronology0);
        dateTimeFormatter0.withDefaultYear(1);
        dateTimeFormatter3.isOffsetParsed();
        String string0 = "CST";
        dateTimeFormatter1.parseLocalTime("CST");
        StringWriter stringWriter0 = null;
        stringWriter0 = new StringWriter(int0);
    }

    @Test(timeout = 4000)
    public void test04949() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, (-826), false);
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_TimeZoneId0);
        Locale locale0 = Locale.KOREAN;
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
        Instant instant0 = new Instant((long) (-826));
        Chronology chronology0 = instant0.getChronology();
        DateTime dateTime0 = new DateTime(0L);
        instant0.isBefore(dateTime0);
        LocalDateTime localDateTime0 = LocalDateTime.now(chronology0);
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withOffsetParsed();
        LocalDateTime localDateTime1 = localDateTime0.minusHours((-826));
        Integer integer0 = new Integer((-826));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-11L), chronology0, locale0, integer0, (-826));
        Integer.toUnsignedLong((-826));
        dateTimeParserBucket0.computeMillis(false);
        Integer.compare((-826), (-826));
        DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
        dateTimeFormatter3.withZone(dateTimeZone0);
        localDateTime1.toLocalDate();
        dateTimeFormatter2.print((ReadablePartial) localDateTime1);
        dateTimeFormatter2.print((ReadablePartial) localDateTime1);
        long long0 = 1L;
        dateTimeFormatter3.print(long0);
        dateTimeFormatter0.withChronology(chronology0);
    }

    @Test(timeout = 4000)
    public void test05050() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        dateTimeFormatter0.printTo((Appendable) null, (-1489L));
        dateTimeFormatter0.getParser();
        dateTimeFormatter0.getPrinter();
        int int0 = 45;
    }

    @Test(timeout = 4000)
    public void test05151() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, (-2180), false);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_UnpaddedNumber0);
        dateTimeFormatter0.withPivotYear((-2180));
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(fixedDateTimeZone0);
        dateTimeFormatter1.getZone();
    }

    @Test(timeout = 4000)
    public void test05252() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(12);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
        StringBuffer stringBuffer0 = new StringBuffer("rW;M,l*\"f");
        CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer0);
        PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) charBuffer0, (-2147483572), 1);
        long long0 = 0L;
        dateTimeFormatter3.printTo((Appendable) printWriter0, long0);
        dateTimeFormatter2.getParser();
    }

    @Test(timeout = 4000)
    public void test05353() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 1027, false);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_UnpaddedNumber0);
        dateTimeFormatter0.withDefaultYear(10080);
        int int0 = 292271022;
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(fixedDateTimeZone0);
        fixedDateTimeZone0.getName((long) 10080);
        String string0 = "5b`o@6e,FTZ0";
        MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime("5b`o@6e,FTZ0");
        String string1 = "org.joda.time.chrono.GJYearOfEraDateTimeField";
        int int1 = 0;
        dateTimeFormatter0.parseInto(mutableDateTime0, string1, int1);
    }

    @Test(timeout = 4000)
    public void test05454() throws Throwable {
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(0, hashMap0);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);
        String string0 = "CXo6F0%>FX7T#*Bk";
        dateTimeFormatter0.parseMillis("CXo6F0%>FX7T#*Bk");
        int int0 = 3600;
    }

    @Test(timeout = 4000)
    public void test05555() throws Throwable {
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>(0);
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(0, hashMap0);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear((-1505));
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withLocale(locale0);
        int int0 = (-955);
        Integer integer0 = Integer.valueOf("Instant must not be null", (-955));
        dateTimeFormatter3.withPivotYear(integer0);
        long long0 = (-2836L);
        DateTimeUtils.setCurrentMillisOffset(long0);
    }

    @Test(timeout = 4000)
    public void test05656() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
        int int0 = 0;
        Integer integer0 = new Integer(0);
        linkedList0.add((Object) dateTimeFormatter0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        UTCProvider uTCProvider0 = new UTCProvider();
        uTCProvider0.getZone("1o");
        uTCProvider0.getAvailableIDs();
        DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withZone((DateTimeZone) null);
        Locale locale0 = new Locale("{z>@Ha{CVQ}", "{z>@Ha{CVQ}");
        DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withLocale(locale0);
        dateTimeFormatter5.getChronology();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("", "nQxCZC`J>#[|NkNI|?");
        dateTimeFormatter3.withLocale(locale0);
        DateTimeUtils.setCurrentMillisSystem();
        uTCProvider0.getAvailableIDs();
        char char0 = 'i';
    }

    @Test(timeout = 4000)
    public void test05757() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(0);
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone(fixedDateTimeZone0);
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        Integer integer0 = new Integer((-1101));
        Integer integer1 = Integer.getInteger("", integer0);
        Integer integer2 = Integer.getInteger("~C'u?aC}:-~", integer1);
        DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear(integer2);
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withChronology(iSOChronology0);
        dateTimeFormatter5.getChronology();
    }

    @Test(timeout = 4000)
    public void test05858() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
        int int0 = 1;
        dateTimeFormatter0.withDefaultYear(1);
        String string0 = "(>TC|[5nkz p1^";
        dateTimeFormatter0.parseLocalTime("(>TC|[5nkz p1^");
    }

    @Test(timeout = 4000)
    public void test05959() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        linkedList0.add((Object) dateTimeFormatterBuilder_Composite0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(fixedDateTimeZone0);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
        Chronology chronology0 = buddhistChronology0.withZone(fixedDateTimeZone0);
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(chronology0);
        Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
        linkedList0.forEach(consumer0);
        DefaultNameProvider defaultNameProvider0 = new DefaultNameProvider();
        DateTimeZone.setNameProvider(defaultNameProvider0);
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withDefaultYear((-527));
        DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter1.withPivotYear(2000);
        Locale locale0 = Locale.TAIWAN;
        DateTimeZone.forTimeZone((TimeZone) null);
        DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withLocale(locale0);
        dateTimeFormatter5.getLocale();
        DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter1.withOffsetParsed();
        dateTimeFormatter0.getZone();
        dateTimeFormatter4.withPivotYear(1023);
        dateTimeFormatter6.isOffsetParsed();
        DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter3.withChronology(buddhistChronology0);
        dateTimeFormatter7.parseLocalDateTime("The datetime zone id '");
        String string0 = "VADxWbj";
        dateTimeFormatter7.parseMutableDateTime(string0);
        Writer writer0 = null;
        Instant instant0 = Instant.now();
        dateTimeFormatter1.printTo(writer0, (ReadableInstant) instant0);
    }

    @Test(timeout = 4000)
    public void test06060() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
        Locale locale0 = Locale.KOREAN;
        Integer integer0 = new Integer(1443);
        Integer integer1 = Integer.getInteger("Z'XETJC>(;)qj'x'.-", integer0);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1687L, (Chronology) null, locale0, integer1, 1443);
        dateTimeFormatterBuilder_TextField0.parseInto(dateTimeParserBucket0, "2yGA3&5>{Ut5h$c", (-974));
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear((-845));
        dateTimeFormatter2.getChronolgy();
    }

    @Test(timeout = 4000)
    public void test06161() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 256, 256);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(256);
        Integer integer0 = new Integer(256);
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer0);
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
        DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
        DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withZone(dateTimeZone0);
        Locale locale0 = Locale.ITALIAN;
        DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withLocale(locale0);
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        UTCProvider uTCProvider0 = new UTCProvider();
        Set<String> set0 = uTCProvider0.getAvailableIDs();
        Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
        dateTimeFormatter5.getDefaultYear();
        dateTimeFormatter5.getParser();
    }

    @Test(timeout = 4000)
    public void test06262() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("ik=evj=Ig");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
        Locale locale0 = Locale.CHINA;
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear((-1825));
        dateTimeFormatter3.isPrinter();
    }

    @Test(timeout = 4000)
    public void test06363() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('J');
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
        CopticChronology copticChronology0 = CopticChronology.getInstance();
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(copticChronology0);
        dateTimeFormatter1.getChronolgy();
        int int0 = 12740625;
        PipedWriter pipedWriter0 = new PipedWriter();
        DateTime dateTime0 = DateTime.parse("");
        LimitChronology limitChronology0 = LimitChronology.getInstance(copticChronology0, dateTime0, dateTime0);
        limitChronology0.getUpperLimit();
    }

    @Test(timeout = 4000)
    public void test06464() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('h');
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
        Integer integer0 = new Integer(3600000);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(ethiopicChronology0);
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear(3600000);
        DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withDefaultYear(0);
        Locale locale0 = Locale.SIMPLIFIED_CHINESE;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        UTCProvider uTCProvider0 = new UTCProvider();
        Set<String> set0 = uTCProvider0.getAvailableIDs();
        Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
        Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
        DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withLocale(locale0);
        dateTimeFormatter5.getDefaultYear();
    }

    @Test(timeout = 4000)
    public void test06565() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 623191204, false);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, (DateTimeParser) null);
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(fixedDateTimeZone0);
        dateTimeFieldType0.getRangeDurationType();
        fixedDateTimeZone0.getNameKey(623191204);
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear((-311));
        dateTimeFormatter2.getChronolgy();
        Integer integer0 = new Integer(623191204);
        dateTimeFormatter1.withPivotYear(integer0);
        dateTimeFormatter0.withOffsetParsed();
        String string0 = "Instant must not be null";
        StringBuffer stringBuffer0 = new StringBuffer("Instant must not be null");
        LocalDateTime localDateTime0 = new LocalDateTime((-1699L));
        LocalDateTime localDateTime1 = localDateTime0.withYearOfCentury(192);
        String string1 = "Parsing not supported";
        Locale locale0 = new Locale(string1, string1, string0);
        dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, (ReadablePartial) localDateTime1, locale0);
        dateTimeFormatter1.getLocale();
        dateTimeFormatter0.getChronology();
        dateTimeFormatter2.isOffsetParsed();
    }

    @Test(timeout = 4000)
    public void test06666() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
        DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 0, false);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear(1);
        DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withDefaultYear(1900);
        dateTimeFormatter4.parseDateTime((String) null);
        String string0 = "subtrahend";
        Locale locale0 = new Locale(string0);
        DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withLocale(locale0);
        dateTimeFormatter5.getDefaultYear();
        dateTimeFormatter2.getLocale();
    }

    @Test(timeout = 4000)
    public void test06767() throws Throwable {
        YearMonth yearMonth0 = new YearMonth(1294L);
        Partial partial0 = new Partial(yearMonth0);
        DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(fixedDateTimeZone0);
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        Chronology chronology0 = iSOChronology0.withZone(fixedDateTimeZone0);
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(chronology0);
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        dateTimeFormatter2.withZone(fixedDateTimeZone0);
        DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear((Integer) 0);
        Locale locale0 = Locale.ROOT;
        dateTimeFormatter4.withChronology(chronology0);
        dateTimeFormatter4.withLocale(locale0);
        dateTimeFormatter4.print((ReadablePartial) partial0);
        dateTimeFormatter0.getLocale();
        String string0 = null;
        File file0 = MockFile.createTempFile((String) null, "1969-12");
        MockPrintWriter mockPrintWriter0 = null;
        mockPrintWriter0 = new MockPrintWriter(file0);
    }

    @Test(timeout = 4000)
    public void test06868() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(buddhistChronology0);
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withDefaultYear((-2317));
        Integer.getInteger("$BxB)A)a^.Zjn.5If-E");
        DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear((Integer) null);
        Locale locale0 = new Locale("$BxB)A)a^.Zjn.5If-E", (String) null);
        DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withLocale(locale0);
        String string0 = null;
        dateTimeFormatter5.parseMutableDateTime(string0);
    }

    @Test(timeout = 4000)
    public void test06969() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
        DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, (-1313), false, (-1313));
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_PaddedNumber0, dateTimeFormatterBuilder_PaddedNumber0);
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        LimitChronology limitChronology0 = LimitChronology.getInstance(iSOChronology0, (ReadableDateTime) null, (ReadableDateTime) null);
        StrictChronology strictChronology0 = StrictChronology.getInstance(limitChronology0);
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(strictChronology0);
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withLocale((Locale) null);
        DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear((-1313));
        DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withOffsetParsed();
        dateTimeFormatter5.getPivotYear();
    }

    @Test(timeout = 4000)
    public void test07070() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(0, (Map<String, DateTimeZone>) null);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);
        dateTimeFormatter0.getPivotYear();
        UTCProvider uTCProvider0 = new UTCProvider();
        uTCProvider0.getAvailableIDs();
        uTCProvider0.getZone((String) null);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone((DateTimeZone) null);
        StringWriter stringWriter0 = new StringWriter(2275);
        StringWriter stringWriter1 = stringWriter0.append('O');
        StringBuffer stringBuffer0 = stringWriter1.getBuffer();
        MutableDateTime mutableDateTime0 = MutableDateTime.now();
        dateTimeFormatter1.printTo(stringBuffer0, (ReadableInstant) mutableDateTime0);
        dateTimeFormatter1.parseLocalTime((String) null);
        String string0 = "O-Y1EtX /r)6t63A1{I";
        dateTimeFormatter0.parseMutableDateTime(string0);
        String string1 = "";
        LocalTime localTime0 = dateTimeFormatter0.parseLocalTime(string1);
        dateTimeFormatter0.printTo((Appendable) stringWriter0, (ReadablePartial) localTime0);
    }

    @Test(timeout = 4000)
    public void test07171() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
        YearMonth yearMonth0 = YearMonth.now(dateTimeZone0);
        Partial partial0 = new Partial(yearMonth0);
        DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(964);
        String string0 = "LSq`<^hD8=h^U> I";
        String string1 = "org.joda.time.chrono.AssembledChronology$Fields";
        dateTimeFormatter1.printTo((StringBuffer) null, (long) 1);
        dateTimeFormatter1.parseLocalDateTime(string1);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) string0);
        ReadableInstant readableInstant0 = null;
    }

    @Test(timeout = 4000)
    public void test07272() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        MutableDateTime mutableDateTime0 = new MutableDateTime((-2785L));
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-1), 692);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(12);
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone(dateTimeZone0);
        dateTimeFormatter2.print((-2856L));
    }

    @Test(timeout = 4000)
    public void test07373() throws Throwable {
        int int0 = (-63);
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-63), hashMap0);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);
        int int1 = 694;
        Integer integer0 = new Integer(694);
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        Integer.toUnsignedLong(694);
        Writer writer0 = null;
        GJChronology.getInstance();
        int int2 = 2700;
        dateTimeFormatter0.printTo((Writer) null, 694L);
    }

    @Test(timeout = 4000)
    public void test07474() throws Throwable {
        String string0 = "8";
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("8");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        int int0 = (-365);
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        dateTimeFormatter0.parseLocalTime("8");
        EthiopicChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (-365));
    }

    @Test(timeout = 4000)
    public void test07575() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('.');
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        Integer integer0 = new Integer(3);
        DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear(integer0);
        Locale locale0 = Locale.KOREAN;
        dateTimeFormatter4.withLocale(locale0);
        DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withChronology((Chronology) null);
        dateTimeFormatter5.withZone(fixedDateTimeZone0);
        dateTimeFormatter5.getPivotYear();
    }

    @Test(timeout = 4000)
    public void test07676() throws Throwable {
        FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Instant must not be null");
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 2000, 2000);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(2147483573);
        CopticChronology copticChronology0 = CopticChronology.getInstance();
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(copticChronology0);
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
        DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withOffsetParsed();
        DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withPivotYear((Integer) null);
        dateTimeFormatter5.printTo((Writer) null, (ReadableInstant) null);
    }

    @Test(timeout = 4000)
    public void test07777() throws Throwable {
        DateTimeFieldType.weekOfWeekyear();
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("org.joda.time.JodaTimePermission");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        dateTimeFormatter0.parseLocalDateTime("org.joda.time.JodaTimePermission");
    }

    @Test(timeout = 4000)
    public void test07878() throws Throwable {
        DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 3300);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormat_StyleFormatter0);
        Locale locale0 = Locale.JAPANESE;
        locale0.getDisplayVariant((Locale) null);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(3300);
        int int0 = (-5256);
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear((-5256));
        Integer integer0 = new Integer(3300);
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear(integer0);
        DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withOffsetParsed();
        dateTimeFormatter4.print((long) (-5256));
        String string0 = "org.joda.time.format.DateTimeFormatter";
        String string1 = "";
        File file0 = MockFile.createTempFile(string0, string1);
        MockPrintWriter mockPrintWriter0 = null;
        mockPrintWriter0 = new MockPrintWriter(file0);
    }

    @Test(timeout = 4000)
    public void test07979() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("2VvSxU");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear((-3088));
        CopticChronology copticChronology0 = CopticChronology.getInstance();
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(copticChronology0);
        StringWriter stringWriter0 = new StringWriter();
        Object object0 = new Object();
        char[] charArray0 = new char[6];
        charArray0[0] = 'S';
        charArray0[1] = 'C';
        charArray0[2] = '{';
        charArray0[3] = 'H';
        charArray0[4] = '#';
        charArray0[5] = '5';
        MutableDateTime mutableDateTime0 = new MutableDateTime((long) (-1755), (Chronology) copticChronology0);
        dateTimeFormatter1.parseInto(mutableDateTime0, "2VvSxU", 4);
        stringWriter0.write(charArray0);
        MonthDay monthDay0 = new MonthDay(1, (-1755));
        dateTimeFormatter0.printTo((Appendable) stringWriter0, (ReadablePartial) monthDay0);
        Instant instant0 = new Instant(object0);
        Instant instant1 = instant0.withMillis(copticChronology0.AM);
        dateTimeFormatter2.printTo((Appendable) stringWriter0, (ReadableInstant) instant1);
    }

    @Test(timeout = 4000)
    public void test08080() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        dateTimeFieldType0.getRangeDurationType();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        EthiopicChronology.getInstance();
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
        Locale locale0 = Locale.SIMPLIFIED_CHINESE;
        dateTimeFormatter2.withLocale(locale0);
        dateTimeFormatter2.isPrinter();
        dateTimeFormatter1.getPivotYear();
        dateTimeFormatter1.withOffsetParsed();
        dateTimeFormatter2.getLocale();
        dateTimeFormatter2.parseInto((ReadWritableInstant) null, "", 1154);
    }

    @Test(timeout = 4000)
    public void test08181() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        dateTimeFormatter0.getParser();
        dateTimeFormatter0.getPrinter();
        DateTimeUtils.setCurrentMillisSystem();
        Integer integer0 = new Integer(45);
        dateTimeFormatter0.withPivotYear(integer0);
    }

    @Test(timeout = 4000)
    public void test08282() throws Throwable {
        String string0 = "Ct~G}d";
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
        Chronology chronology0 = null;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "Ct~G}d", 0, (-395), 1026, (-2405), (-395), 0, 0, 0);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(chronology0, dateTimeZone0);
        DateTimeZone dateTimeZone1 = zonedChronology0.getZone();
        dateTimeFormatter2.withZone(dateTimeZone1);
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        charArrayWriter0.append((CharSequence) string0);
    }

    @Test(timeout = 4000)
    public void test08383() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(0);
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone(fixedDateTimeZone0);
        dateTimeFormatter2.withOffsetParsed();
        String string0 = "";
        Integer integer0 = new Integer((-1101));
        Integer.getInteger("", integer0);
        ISOChronology.getInstanceUTC();
        dateTimeFormatter1.parseDateTime("25._0u");
        dateTimeFormatter2.isPrinter();
        dateTimeFormatter1.parseMillis(string0);
    }

    @Test(timeout = 4000)
    public void test08484() throws Throwable {
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_TextField0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(32);
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
        Integer integer0 = Integer.getInteger("ALL_IDS", 1894);
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear(integer0);
        DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withZoneUTC();
        DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withDefaultYear(2000);
        dateTimeFormatter5.parseDateTime((String) null);
    }

    @Test(timeout = 4000)
    public void test08585() throws Throwable {
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        Locale locale0 = Locale.JAPAN;
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-969));
        EthiopicChronology.getInstance(dateTimeZone0);
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('K');
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone(dateTimeZone0);
        dateTimeFormatter2.isParser();
        dateTimeFormatter0.withZoneUTC();
    }

    @Test(timeout = 4000)
    public void test08686() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
        int int0 = 115;
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 115, false);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_UnpaddedNumber0);
        FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "No instant converter found for type: ");
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(115);
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear(0);
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(115);
        Chronology chronology0 = ethiopicChronology0.withZone(dateTimeZone0);
        DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withChronology(chronology0);
        dateTimeFormatter4.withChronology(chronology0);
        Locale locale0 = Locale.FRENCH;
        dateTimeFormatter4.withLocale(locale0);
        Object object0 = new Object();
        DateTime dateTime0 = new DateTime(object0);
        DateTime dateTime1 = dateTime0.plusMonths(int0);
        DateTime dateTime2 = dateTime1.withMillis(int0);
        int int1 = 86400;
        dateTime2.minusYears(int1);
    }

    @Test(timeout = 4000)
    public void test08787() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(0);
        dateTimeFormatter1.withDefaultYear(1470);
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone(fixedDateTimeZone0);
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        Integer integer0 = new Integer((-1101));
        Integer integer1 = Integer.getInteger("", integer0);
        Integer integer2 = Integer.getInteger("~C'u?aC}:-~", integer1);
        DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear(integer2);
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withChronology(iSOChronology0);
        dateTimeFormatter5.getChronology();
        dateTimeFormatter0.isOffsetParsed();
    }

    @Test(timeout = 4000)
    public void test08888() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-2912));
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear((Integer) null);
        Locale locale0 = new Locale("ugN&'O");
        DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withLocale(locale0);
        DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withPivotYear((-35));
        DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter5.withOffsetParsed();
        dateTimeFormatter6.parseLocalDate((String) null);
        String string0 = "YB";
        dateTimeFormatter3.parseLocalDateTime(string0);
    }

    @Test(timeout = 4000)
    public void test08989() throws Throwable {
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, (DateTimeParser) null);
        Integer integer0 = new Integer((-1980));
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear((-641));
        dateTimeFormatter2.getPrinter();
    }

    @Test(timeout = 4000)
    public void test09090() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(0);
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
        FileSystemHandling.createFolder((EvoSuiteFile) null);
        Integer integer0 = new Integer((-1101));
        Integer.getInteger("", integer0);
        ISOChronology.getInstanceUTC();
        dateTimeFormatter2.getPivotYear();
        dateTimeFormatter0.withPivotYear((-1101));
        dateTimeFormatter0.parseMillis("");
    }

    @Test(timeout = 4000)
    public void test09191() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        String string0 = "\\D7";
        dateTimeFormatter0.parseLocalTime("D7");
        ReadablePartial readablePartial0 = null;
    }

    @Test(timeout = 4000)
    public void test09292() throws Throwable {
        int int0 = 7;
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("^,", "", false, 7, 7);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
        Integer integer0 = new Integer(2128);
        dateTimeFormatter0.withPivotYear(integer0);
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        MonthDay monthDay0 = MonthDay.parse("=1tR*", dateTimeFormatter0);
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        int int1 = 0;
        MonthDay monthDay1 = monthDay0.withField(dateTimeFieldType0, int1);
        LocalDate localDate0 = monthDay1.toLocalDate(int0);
        localDate0.withMonthOfYear(int0);
    }

    @Test(timeout = 4000)
    public void test09393() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, (-2180), false);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_UnpaddedNumber0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear((-2180));
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) null);
        Chronology chronology0 = ethiopicChronology0.withZone((DateTimeZone) null);
        dateTimeFormatter1.withChronology(chronology0);
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withZone(fixedDateTimeZone0);
        dateTimeFormatter2.withDefaultYear(409);
        dateTimeFormatter2.getZone();
    }

    @Test(timeout = 4000)
    public void test09494() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        int int0 = 314;
        Integer integer0 = new Integer(314);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
        dateTimeFormatter1.parseDateTime("QpP8c%-:L7(AO+/[;");
        int int1 = 0;
        StringBuffer stringBuffer0 = null;
        stringBuffer0 = new StringBuffer(int1);
    }

    @Test(timeout = 4000)
    public void test09595() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, (-706), true);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_UnpaddedNumber0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        Locale locale0 = Locale.FRANCE;
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
        DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear((-706));
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        Integer integer0 = new Integer(1411);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-706), gJChronology0, locale0, integer0, (-706));
        DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
        DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
        doReturn(0L).when(dateTimeUtils_MillisProvider0).getMillis();
        DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
        DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withZone(dateTimeZone0);
        dateTimeParserBucket0.computeMillis();
        MutableDateTime mutableDateTime0 = new MutableDateTime(dateTimeZone0);
        dateTimeFormatter5.parseInto(mutableDateTime0, "", (-706));
        System.setCurrentTimeMillis(4121L);
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("", true);
        boolean boolean0 = true;
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, boolean0);
        dateTimeFormatter2.printTo((Appendable) mockPrintWriter0, (long) mutableDateTime0.ROUND_HALF_FLOOR);
    }

    @Test(timeout = 4000)
    public void test09696() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
        Locale locale0 = Locale.TAIWAN;
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
        dateTimeFormatter1.withOffsetParsed();
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('k');
        DateTimeFormatter dateTimeFormatter2 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
        DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withZone((DateTimeZone) null);
        DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withPivotYear(6);
        DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter5.withDefaultYear(523);
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        dateTimeFormatter6.printTo((Appendable) charArrayWriter0, (-28801249L));
        LocalDateTime localDateTime0 = LocalDateTime.now((DateTimeZone) null);
        Partial partial0 = new Partial(localDateTime0);
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
        int int0 = 3116;
        Partial partial1 = partial0.withField(dateTimeFieldType0, int0);
        ReadablePeriod readablePeriod0 = null;
        partial1.minus(readablePeriod0);
    }

    @Test(timeout = 4000)
    public void test09797() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
        dateTimeFormatter0.print((-1L));
        int int0 = 0;
    }

    @Test(timeout = 4000)
    public void test09898() throws Throwable {
        FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Instant must not be null");
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 2000, 2000);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(2147483573);
        CopticChronology copticChronology0 = CopticChronology.getInstance();
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(copticChronology0);
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
        DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withZoneUTC();
        DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withPivotYear((Integer) null);
        dateTimeFormatter5.printTo((Writer) null, (ReadableInstant) null);
        dateTimeFormatter0.withZoneUTC();
    }

    @Test(timeout = 4000)
    public void test09999() throws Throwable {
        FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("kdD|M1)SX/EebKI#Cfr");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);
        Locale locale0 = Locale.KOREAN;
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear((-1));
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(9);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withChronology(buddhistChronology0);
        DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear((Integer) 1);
        DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withZone(dateTimeZone0);
        LocalTime localTime0 = new LocalTime((long) (-1), (Chronology) buddhistChronology0);
        dateTimeFormatter5.print((ReadablePartial) localTime0);
    }

    @Test(timeout = 4000)
    public void test100100() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(0, (Map<String, DateTimeZone>) null);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, (DateTimeParser) null);
        dateTimeFormatter0.getPivotYear();
        UTCProvider uTCProvider0 = new UTCProvider();
        uTCProvider0.getAvailableIDs();
        String string0 = null;
        uTCProvider0.getZone((String) null);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone((DateTimeZone) null);
        StringWriter stringWriter0 = new StringWriter(2275);
        StringWriter stringWriter1 = stringWriter0.append('O');
        StringBuffer stringBuffer0 = stringWriter1.getBuffer();
        MutableDateTime mutableDateTime0 = MutableDateTime.now();
        dateTimeFormatter1.printTo(stringBuffer0, (ReadableInstant) mutableDateTime0);
        dateTimeFormatter1.parseLocalTime(string0);
        String string1 = "O-Y1EtX /r)6t63A1{I";
        dateTimeFormatter0.parseMutableDateTime(string1);
        String string2 = "";
        dateTimeFormatter0.parseLocalTime(string2);
    }

    @Test(timeout = 4000)
    public void test101101() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 560, true);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_TwoDigitYear0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
        String string0 = "Z";
        int int0 = 9;
        Integer integer0 = Integer.getInteger("Z", 9);
        dateTimeFieldType0.getRangeDurationType();
        StringBuffer stringBuffer0 = new StringBuffer();
        dateTimeFormatter0.printTo(stringBuffer0, 3L);
        dateTimeFormatter1.withPivotYear(integer0);
        int int1 = (-3298);
        long long0 = (-2492L);
        LocalDate localDate0 = null;
        localDate0 = new LocalDate(long0);
    }

    @Test(timeout = 4000)
    public void test102102() throws Throwable {
        FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-974), hashMap0);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);
        Locale locale0 = Locale.SIMPLIFIED_CHINESE;
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
        List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
        Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0, locale_FilteringMode0);
        Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        List<Locale> list2 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list1, locale_FilteringMode1);
        Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        List<Locale> list3 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list2, locale_FilteringMode2);
        Locale.lookup(linkedList0, list3);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear((-974));
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
        dateTimeFormatter3.getPrinter();
    }

    @Test(timeout = 4000)
    public void test103103() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('.');
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        Integer integer0 = new Integer(3);
        DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear(integer0);
        Locale locale0 = Locale.KOREAN;
        StringBuffer stringBuffer0 = new StringBuffer();
        dateTimeFormatter2.printTo(stringBuffer0, (long) 3);
        dateTimeFormatter4.withLocale(locale0);
        ISOChronology iSOChronology0 = ISOChronology.getInstance();
        YearMonth yearMonth0 = YearMonth.now((Chronology) iSOChronology0);
        dateTimeFormatter2.printTo(stringBuffer0, (ReadablePartial) yearMonth0);
        DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withChronology((Chronology) null);
        dateTimeFormatter5.withZone(fixedDateTimeZone0);
        dateTimeFormatter5.getPivotYear();
        LocalDateTime localDateTime0 = new LocalDateTime((long) 3, (DateTimeZone) fixedDateTimeZone0);
        DateTime dateTime0 = localDateTime0.toDateTime();
        DateTime dateTime1 = dateTime0.withTime((-1), 1705, (-3716), (-3716));
        dateTimeFormatter0.print((ReadableInstant) dateTime1);
    }

    @Test(timeout = 4000)
    public void test104104() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, (-706), true);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_UnpaddedNumber0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        Locale locale0 = Locale.FRANCE;
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
        DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear((-706));
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        Integer integer0 = new Integer((-706));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-706), gJChronology0, locale0, integer0, (-706));
        DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
        DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
        doReturn((long) (-706)).when(dateTimeUtils_MillisProvider0).getMillis();
        DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
        dateTimeParserBucket0.computeMillis();
        MutableDateTime mutableDateTime0 = new MutableDateTime(dateTimeZone0);
        dateTimeFormatter4.parseInto(mutableDateTime0, "6?OG.", (-706));
        System.setCurrentTimeMillis(4121L);
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("6?OG.", true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
        dateTimeFormatter2.printTo((Appendable) mockPrintWriter0, (long) 3);
    }

    @Test(timeout = 4000)
    public void test105105() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, (-2832), true);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_UnpaddedNumber0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-2568));
        Locale locale0 = Locale.GERMAN;
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZone(dateTimeZone0);
        DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withOffsetParsed();
        dateTimeFormatter4.withPivotYear((-2568));
        URI uRI0 = MockURI.aHttpURI;
        MockFile mockFile0 = new MockFile(uRI0);
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
        int int0 = 59;
    }

    @Test(timeout = 4000)
    public void test106106() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
        dateTimeFieldType0.getDurationType();
        int int0 = 2428;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2428, true);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
        Locale locale0 = Locale.JAPAN;
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withLocale(locale0);
        DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withDefaultYear(2428);
        ISOChronology iSOChronology0 = ISOChronology.getInstance();
        MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) iSOChronology0);
        dateTimeFormatter1.parseInto(mutableDateTime0, "Multiplication overflows a long: ", 17887500);
        DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withChronology(iSOChronology0);
        dateTimeFormatter5.withDefaultYear(2428);
        dateTimeFormatter3.parseLocalDateTime("");
        dateTimeFormatter5.withLocale(locale0);
        DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
        DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
        dateTimeFormatter2.getParser();
    }

    @Test(timeout = 4000)
    public void test107107() throws Throwable {
        FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Instant must not be null");
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 2000, 2000);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(2147483573);
        CopticChronology copticChronology0 = CopticChronology.getInstance();
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(copticChronology0);
        dateTimeFormatter2.withZoneUTC();
        StringBuffer stringBuffer0 = new StringBuffer();
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
        Locale locale0 = Locale.GERMANY;
        dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, (long) 2147483573, (Chronology) copticChronology0, (-745), dateTimeZone0, locale0);
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withPivotYear((Integer) null);
        dateTimeFormatter3.printTo((Writer) null, (ReadableInstant) null);
    }

    @Test(timeout = 4000)
    public void test108108() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        int int0 = 314;
        Integer integer0 = new Integer(314);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
        dateTimeFormatter1.parseDateTime("");
        int int1 = 0;
        StringBuffer stringBuffer0 = new StringBuffer(0);
        dateTimeFormatter0.printTo(stringBuffer0, 0L);
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = gJChronology0.getZone();
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
        Chronology chronology0 = gregorianChronology0.withUTC();
        Locale locale0 = Locale.GERMANY;
        dateTimeFormatterBuilder_StringLiteral0.printTo(stringBuffer0, (long) 314, chronology0, 0, dateTimeZone0, locale0);
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        dateTimeFormatter1.printTo((Writer) charArrayWriter0, (long) 0);
        stringBuffer0.setLength((-2714));
        JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
        YearMonth yearMonth0 = new YearMonth((Chronology) julianChronology0);
        int int2 = 1;
        int int3 = 0;
        PeriodType periodType0 = PeriodType.yearMonthDay();
        Period period0 = null;
        period0 = new Period(int2, int0, int1, int2, yearMonth0.MONTH_OF_YEAR, int3, yearMonth0.MONTH_OF_YEAR, yearMonth0.YEAR, periodType0);
    }

    @Test(timeout = 4000)
    public void test109109() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        int int0 = 314;
        Integer integer0 = new Integer(314);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
        dateTimeFormatter1.parseDateTime("");
        int int1 = 0;
        StringBuffer stringBuffer0 = new StringBuffer(0);
        dateTimeFormatter0.printTo(stringBuffer0, (-28800000L));
        int int2 = (-2714);
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = gJChronology0.getZone();
        GregorianChronology.getInstance(dateTimeZone0);
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
        dateTimeFormatter0.parseMillis("");
        Locale locale0 = Locale.GERMANY;
        dateTimeFormatterBuilder_StringLiteral0.printTo(stringBuffer0, (long) 314, (Chronology) gregorianChronology0, 0, dateTimeZone0, locale0);
        CharArrayWriter charArrayWriter0 = new CharArrayWriter((-1702));
        dateTimeFormatter1.printTo((Writer) charArrayWriter0, (long) int1);
        stringBuffer0.setLength(int2);
        JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
        YearMonth yearMonth0 = new YearMonth((Chronology) julianChronology0);
        int int3 = 1;
        int int4 = 0;
    }

    @Test(timeout = 4000)
    public void test110110() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
        int int0 = 0;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 0, true);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_TwoDigitYear0);
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        Chronology chronology0 = ethiopicChronology0.withZone(fixedDateTimeZone0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(chronology0);
        DateTimeZone.getDefault();
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(1);
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withZone(fixedDateTimeZone0);
        DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withOffsetParsed();
        dateTimeFieldType0.getField(chronology0);
        dateTimeFormatter0.withDefaultYear(1);
        dateTimeFormatter4.isOffsetParsed();
        String string0 = "CST";
        StringBuffer stringBuffer0 = new StringBuffer(2126);
        LocalTime localTime0 = new LocalTime((long) 1, dateTimeZone0);
        Period period0 = new Period(0L, 2126, (PeriodType) null);
        Period period1 = period0.minusHours(2131);
        LocalTime localTime1 = localTime0.minus(period1);
        dateTimeFormatter3.printTo(stringBuffer0, (ReadablePartial) localTime1);
        dateTimeFormatter1.parseLocalTime(string0);
        StringWriter stringWriter0 = new StringWriter(int0);
        int int1 = 0;
        StringWriter stringWriter1 = stringWriter0.append((CharSequence) string0, int0, int1);
        stringWriter1.append((CharSequence) string0);
    }

    @Test(timeout = 4000)
    public void test111111() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
        int int0 = (-1480);
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-1480), (-1480));
        dateTimeFieldType0.getDurationType();
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
        Locale locale0 = Locale.ENGLISH;
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
        dateTimeFormatter1.getParser();
        int int1 = 1953;
        dateTimeFormatter1.withPivotYear(1953);
        StringWriter stringWriter0 = new StringWriter();
        StringWriter stringWriter1 = stringWriter0.append('u');
        stringWriter1.getBuffer();
        LocalDateTime localDateTime0 = LocalDateTime.now((DateTimeZone) null);
        LocalDateTime localDateTime1 = localDateTime0.withWeekOfWeekyear(int0);
        localDateTime1.minusHours(int1);
    }

    @Test(timeout = 4000)
    public void test112112() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
        int int0 = 0;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 0, true);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_TwoDigitYear0);
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        Chronology chronology0 = ethiopicChronology0.withZone(fixedDateTimeZone0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(chronology0);
        DateTimeZone.getDefault();
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(1);
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        dateTimeFieldType0.getField(chronology0);
        dateTimeFormatter0.withDefaultYear(1);
        dateTimeFormatter3.isOffsetParsed();
        StringBuffer stringBuffer0 = new StringBuffer("");
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Parsing not supported");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
        dateTimeFormatter2.printTo((Writer) mockPrintWriter0, (ReadableInstant) null);
        String string0 = "";
        LocalDate localDate0 = dateTimeFormatter1.parseLocalDate(string0);
        Locale locale0 = Locale.KOREAN;
        dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, (ReadablePartial) localDate0, locale0);
    }

    @Test(timeout = 4000)
    public void test113113() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
        dateTimeFieldType0.getDurationType();
        int int0 = 2428;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2428, true);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
        Locale locale0 = Locale.JAPAN;
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withLocale(locale0);
        DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withDefaultYear(2428);
        ISOChronology iSOChronology0 = ISOChronology.getInstance();
        MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) iSOChronology0);
        dateTimeFormatter1.parseInto(mutableDateTime0, "Multiplication overflows a long: ", 17887500);
        dateTimeFormatter3.print((ReadablePartial) null);
        DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withChronology(iSOChronology0);
        dateTimeFormatter5.withDefaultYear(int0);
        String string0 = "";
        dateTimeFormatter3.parseLocalDateTime(string0);
        dateTimeFormatter5.withLocale(locale0);
        DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
        DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
    }

    @Test(timeout = 4000)
    public void test114114() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("", "Q+S.Z", true, 1244, 1244);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
        Integer integer0 = new Integer(14);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
        dateTimeFormatter1.getDefaultYear();
        FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        Integer.compare(2000, (-2881));
        MonthDay monthDay0 = MonthDay.fromCalendarFields(calendar0);
        MonthDay monthDay1 = monthDay0.plusMonths(2147483603);
        dateTimeFormatter1.print((ReadablePartial) monthDay1);
        dateTimeFormatter0.getParser();
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
        dateTimeFormatter2.parseLocalDateTime("Instant must not be null");
        dateTimeFormatter2.print((long) monthDay1.MONTH_OF_YEAR);
    }

    @Test(timeout = 4000)
    public void test115115() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        int int0 = 314;
        Integer integer0 = new Integer(314);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
        dateTimeFormatter1.parseDateTime("");
        int int1 = 0;
        StringBuffer stringBuffer0 = new StringBuffer(0);
        dateTimeFormatter0.printTo(stringBuffer0, 0L);
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = gJChronology0.getZone();
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
        Chronology chronology0 = gregorianChronology0.withUTC();
        gJChronology0.withUTC();
        Locale locale0 = Locale.GERMANY;
        dateTimeFormatterBuilder_StringLiteral0.printTo(stringBuffer0, (long) 314, chronology0, 0, dateTimeZone0, locale0);
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        dateTimeFormatter1.printTo((Writer) charArrayWriter0, (long) 0);
        dateTimeFormatter1.parseLocalDate("");
        stringBuffer0.setLength((-2714));
        JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
        YearMonth yearMonth0 = new YearMonth((Chronology) julianChronology0);
        int int2 = 1;
        int int3 = 0;
        PeriodType periodType0 = PeriodType.yearMonthDay();
        Period period0 = new Period(int2, int0, int1, int2, yearMonth0.MONTH_OF_YEAR, int3, yearMonth0.MONTH_OF_YEAR, yearMonth0.YEAR, periodType0);
        period0.minusMillis(int3);
    }

    @Test(timeout = 4000)
    public void test116116() throws Throwable {
        FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Instant must not be null");
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 2000, 2000);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(2147483573);
        CopticChronology copticChronology0 = CopticChronology.getInstance();
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(copticChronology0);
        MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) copticChronology0);
        MutableDateTime mutableDateTime1 = mutableDateTime0.toMutableDateTimeISO();
        dateTimeFormatter2.parseInto(mutableDateTime1, "Instant must not be null", (-403));
        dateTimeFormatter2.withZoneUTC();
        Integer integer0 = null;
        dateTimeFormatter0.withPivotYear(integer0);
        Writer writer0 = null;
        ReadableInstant readableInstant0 = null;
    }

    @Test(timeout = 4000)
    public void test117117() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        int int0 = 314;
        Integer integer0 = new Integer(314);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        dateTimeFormatter1.parseDateTime("");
        int int1 = 0;
        StringBuffer stringBuffer0 = new StringBuffer(0);
        dateTimeFormatter0.printTo(stringBuffer0, 0L);
        GJChronology.getInstanceUTC();
        dateTimeFormatter0.parseLocalTime("");
        Locale locale0 = Locale.GERMANY;
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        dateTimeFormatter1.printTo((Writer) charArrayWriter0, (long) 0);
        stringBuffer0.setLength((-2714));
        JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
        YearMonth yearMonth0 = new YearMonth((Chronology) julianChronology0);
        int int2 = 1;
        int int3 = 0;
        PeriodType periodType0 = PeriodType.yearMonthDay();
        Period period0 = null;
        period0 = new Period(int2, int0, int1, int2, yearMonth0.MONTH_OF_YEAR, int3, yearMonth0.MONTH_OF_YEAR, yearMonth0.YEAR, periodType0);
    }

    @Test(timeout = 4000)
    public void test118118() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
        dateTimeFieldType0.getDurationType();
        int int0 = 2428;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2428, true);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
        Locale locale0 = Locale.JAPAN;
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withLocale(locale0);
        DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withDefaultYear(2428);
        ISOChronology iSOChronology0 = ISOChronology.getInstance();
        MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) iSOChronology0);
        dateTimeFormatter1.parseInto(mutableDateTime0, "Multiplication overflows a long: ", 17887500);
        dateTimeFieldType0.getRangeDurationType();
        DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withChronology(iSOChronology0);
        dateTimeFormatter5.withDefaultYear(2428);
        String string0 = "";
        StringBuffer stringBuffer0 = new StringBuffer(0);
        dateTimeFormatter0.printTo(stringBuffer0, (ReadablePartial) null);
        dateTimeFormatter3.parseLocalDateTime(string0);
        dateTimeFormatter5.withLocale(locale0);
        DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
        DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
    }

    @Test(timeout = 4000)
    public void test119119() throws Throwable {
        LocalTime localTime0 = LocalTime.MIDNIGHT;
        Partial partial0 = new Partial(localTime0);
        DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-1357));
        dateTimeFormatter1.print(31536000000L);
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
        dateTimeFormatter2.getDefaultYear();
    }

    @Test(timeout = 4000)
    public void test120120() throws Throwable {
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, (DateTimeParser) null);
        int int0 = (-1);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-1));
        Locale locale0 = Locale.UK;
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear((-1));
        DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withZoneUTC();
        DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withOffsetParsed();
        dateTimeFormatter4.parseDateTime("[9");
        String string0 = "";
        dateTimeFormatter5.parseLocalDate(string0);
        String string1 = "j0G;3b~eDMs|Z";
    }

    @Test(timeout = 4000)
    public void test121121() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('.');
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        Integer integer0 = new Integer(3);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(3);
        Locale locale0 = Locale.PRC;
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(3);
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
        Chronology chronology0 = islamicChronology0.withZone(dateTimeZone0);
        DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withChronology(chronology0);
        DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withZoneUTC();
        MutableDateTime mutableDateTime0 = MutableDateTime.now();
        DateTime dateTime0 = mutableDateTime0.toDateTime();
        DateTime dateTime1 = dateTime0.withDayOfYear(1);
        DateTime dateTime2 = dateTime1.plusMillis(0);
        DateTime dateTime3 = dateTime2.plusMinutes(1852);
        dateTimeFormatter5.print((ReadableInstant) dateTime3);
    }

    @Test(timeout = 4000)
    public void test122122() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        Integer integer0 = new Integer(314);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
        dateTimeFormatter1.parseDateTime("");
        StringBuffer stringBuffer0 = new StringBuffer(0);
        dateTimeFormatter0.printTo(stringBuffer0, 0L);
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = gJChronology0.getZone();
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
        Chronology chronology0 = gregorianChronology0.withUTC();
        gJChronology0.withUTC();
        Locale locale0 = Locale.GERMANY;
        dateTimeFormatterBuilder_StringLiteral0.printTo(stringBuffer0, (long) 314, chronology0, 0, dateTimeZone0, locale0);
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        dateTimeFormatter1.printTo((Writer) charArrayWriter0, (long) 0);
        dateTimeFormatter1.parseLocalDate("");
        stringBuffer0.setLength(0);
        dateTimeFormatter0.print((long) 0);
    }

    @Test(timeout = 4000)
    public void test123123() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
        dateTimeFieldType0.getDurationType();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2428, true);
        Locale locale0 = Locale.JAPAN;
        ISOChronology.getInstance();
        DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
        DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
        StringBuffer stringBuffer0 = new StringBuffer();
        Integer integer0 = new Integer(2428);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withDefaultYear(17);
        DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear(2041);
        dateTimeFormatter4.parseLocalDateTime((String) null);
    }

    @Test(timeout = 4000)
    public void test124124() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
        dateTimeFieldType0.getRangeDurationType();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
        LocalDateTime localDateTime0 = new LocalDateTime("5+5&Nq'Q=6Y_YwNr8?b", ethiopicChronology0);
        dateTimeFormatter1.withZoneUTC();
        localDateTime0.withHourOfDay(ethiopicChronology0.EE);
    }

    @Test(timeout = 4000)
    public void test125125() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);
        dateTimeFormatter0.withOffsetParsed();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
        LocalDateTime localDateTime0 = new LocalDateTime("0.RJ~", ethiopicChronology0);
        localDateTime0.withHourOfDay(ethiopicChronology0.EE);
        int int0 = 0;
    }

    @Test(timeout = 4000)
    public void test126126() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        dateTimeFieldType0.getRangeDurationType();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_TextField0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        int int0 = 0;
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
        Locale locale0 = Locale.SIMPLIFIED_CHINESE;
        dateTimeFormatter2.withLocale(locale0);
        dateTimeFormatter2.isPrinter();
        dateTimeFormatter1.getPivotYear();
        dateTimeFormatter1.withOffsetParsed();
        StringBuffer stringBuffer0 = new StringBuffer("");
        Map<String, String> map0 = ZoneId.SHORT_IDS;
        ZoneId zoneId0 = ZoneId.of("Printing not supported", map0);
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
        JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
        dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, (long) int0, (Chronology) julianChronology0, int0, dateTimeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test127127() throws Throwable {
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, (DateTimeParser) null);
        PipedWriter pipedWriter0 = new PipedWriter();
        LocalTime localTime0 = new LocalTime(0, 0, 0);
        LocalTime localTime1 = localTime0.minusSeconds(0);
        int int0 = (-605);
        localTime1.plusHours((-605));
        localTime1.getFieldType(0);
        LocalTime localTime2 = localTime1.withFields(localTime0);
        LocalTime localTime3 = localTime2.minusMinutes(1512);
        dateTimeFormatter0.printTo((Writer) pipedWriter0, (ReadablePartial) localTime3);
        String string0 = "-k[cc%:%@/z]&_";
        dateTimeFormatter0.parseDateTime(string0);
        String string1 = "HW|{3";
        dateTimeFormatter0.parseDateTime(string1);
    }

    @Test(timeout = 4000)
    public void test128128() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
        dateTimeFieldType0.getDurationType();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2428, true);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
        Locale locale0 = Locale.JAPAN;
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withDefaultYear(2428);
        ISOChronology iSOChronology0 = ISOChronology.getInstance();
        DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withChronology(iSOChronology0);
        DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withDefaultYear(2428);
        dateTimeFormatter4.withLocale(locale0);
        DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
        DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
        dateTimeFormatter2.getParser();
        dateTimeFormatter5.isPrinter();
        StringBuffer stringBuffer0 = new StringBuffer();
        dateTimeFormatter2.print((long) 2428);
        Integer integer0 = new Integer(2428);
        dateTimeFormatter4.withPivotYear(integer0);
        dateTimeFormatter2.isParser();
        dateTimeFormatter0.parseDateTime("5i{(v");
        dateTimeFormatter3.getParser();
    }

    @Test(timeout = 4000)
    public void test129129() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        Integer integer0 = new Integer(314);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
        dateTimeFormatter1.parseDateTime("");
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = gJChronology0.getZone();
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
        gregorianChronology0.withUTC();
        Locale locale0 = Locale.GERMANY;
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        dateTimeFormatter1.printTo((Writer) charArrayWriter0, (long) 0);
        dateTimeFormatter1.parseLocalDate("");
        dateTimeFormatter0.parseLocalDateTime("`wQX;fRQu");
    }

    @Test(timeout = 4000)
    public void test130130() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
        int int0 = 0;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 0, true);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_TwoDigitYear0);
        FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "RWM0zO.\"z$c2 ");
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        ethiopicChronology0.withZone(fixedDateTimeZone0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        DateTimeZone.getDefault();
        dateTimeFormatter1.withPivotYear(1);
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withDefaultYear(1);
        StringWriter stringWriter0 = new StringWriter();
        StringWriter stringWriter1 = stringWriter0.append('$');
        LocalDate localDate0 = new LocalDate(1180L);
        LocalDate localDate1 = localDate0.withDayOfWeek(1);
        LocalDate localDate2 = localDate1.withYearOfCentury(1);
        dateTimeFormatter2.printTo((Writer) stringWriter1, (ReadablePartial) localDate2);
        dateTimeFormatter1.isOffsetParsed();
        String string0 = "CST";
        dateTimeFormatter1.parseLocalTime(string0);
        StringWriter stringWriter2 = new StringWriter(int0);
        int int1 = 0;
        stringWriter2.append((CharSequence) string0, int0, int1);
    }

    @Test(timeout = 4000)
    public void test131131() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
        int int0 = 0;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 0, true);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_TwoDigitYear0);
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        dateTimeFieldType0.getRangeDurationType();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        ethiopicChronology0.withZone(fixedDateTimeZone0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        DateTimeZone.getDefault();
        dateTimeFormatter1.withPivotYear(1);
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withDefaultYear(1);
        MockFileWriter mockFileWriter0 = new MockFileWriter(".uUz1ti80");
        MutableDateTime mutableDateTime0 = new MutableDateTime((-28799686L), (Chronology) ethiopicChronology0);
        dateTimeFormatter0.parseInto(mutableDateTime0, (String) null, 3081);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
        long long0 = 86400000L;
        DateTime dateTime0 = new DateTime(long0);
        dateTimeFormatter2.printTo((Appendable) mockPrintWriter0, (ReadableInstant) dateTime0);
        dateTimeFormatter1.isOffsetParsed();
    }

    @Test(timeout = 4000)
    public void test132132() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 560, true);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_TwoDigitYear0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
        String string0 = "Z";
        Integer integer0 = Integer.getInteger("Z", 9);
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer0);
        int int0 = (-3298);
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear((-3298));
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("A?7j$Pw4iW<pkp`ma");
        dateTimeFormatter2.printTo((Writer) mockPrintWriter0, (long) 9);
        int int1 = 832;
        String string1 = null;
        dateTimeFormatter3.parseDateTime(string1);
        dateTimeFormatter3.withPivotYear(integer0);
        int int2 = 1015;
    }

    @Test(timeout = 4000)
    public void test133133() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        LinkedList<Object> linkedList1 = new LinkedList<Object>(linkedList0);
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList1);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
        Chronology chronology0 = null;
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology((Chronology) null);
        String string0 = "centuryOfEra";
        dateTimeFormatter1.parseMutableDateTime("centuryOfEra");
    }

    @Test(timeout = 4000)
    public void test134134() throws Throwable {
        FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Instant must not be null");
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 2013, 2013);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(2147483573);
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("lxR(=S/;M;|gxVBbzh");
        PrintWriter printWriter0 = mockPrintWriter0.append('D');
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
        Chronology chronology0 = gregorianChronology0.withUTC();
        LocalDateTime localDateTime0 = LocalDateTime.now(chronology0);
        Period period0 = new Period();
        Days days0 = period0.toStandardDays();
        LocalDateTime localDateTime1 = localDateTime0.plus((ReadablePeriod) days0);
        dateTimeFormatter0.printTo((Writer) printWriter0, (ReadablePartial) localDateTime1);
        DateTimeZone.forTimeZone(timeZone0);
        dateTimeFormatter0.withPivotYear((Integer) null);
        dateTimeFormatter1.print((-984L));
    }

    @Test(timeout = 4000)
    public void test135135() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('.');
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        Integer integer0 = new Integer(3);
        DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear(integer0);
        Chronology chronology0 = null;
        LocalDate localDate0 = new LocalDate(2325L, (Chronology) null);
        DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime((DateTimeZone) fixedDateTimeZone0);
        DateTime dateTime1 = dateTime0.toDateTimeISO();
        DateTime dateTime2 = dateTime1.withYearOfCentury(13);
        DateTime dateTime3 = dateTime2.withDayOfMonth(13);
        dateTimeFormatter4.printTo((Appendable) null, (ReadableInstant) dateTime3);
        DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withChronology(chronology0);
        DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
        DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
        dateTimeFormatter5.withZone(fixedDateTimeZone0);
        dateTimeFormatter5.isPrinter();
    }

    @Test(timeout = 4000)
    public void test136136() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        Integer integer0 = new Integer(275);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
        DateTime dateTime0 = dateTimeFormatter1.parseDateTime("");
        StringBuffer stringBuffer0 = new StringBuffer("");
        dateTimeFormatter0.printTo(stringBuffer0, 0L);
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = gJChronology0.getZone();
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
        Chronology chronology0 = gregorianChronology0.withUTC();
        gJChronology0.withUTC();
        FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
        Locale locale0 = Locale.GERMANY;
        dateTimeFormatterBuilder_StringLiteral0.printTo(stringBuffer0, (long) 275, chronology0, 0, dateTimeZone0, locale0);
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        dateTimeFormatter1.printTo((Writer) charArrayWriter0, (long) 0);
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("fPw\"fLMr^8p");
        OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0);
        Weeks weeks0 = Weeks.MAX_VALUE;
        DateTime dateTime1 = dateTime0.minus((ReadablePeriod) weeks0);
        dateTimeFormatter1.printTo((Writer) outputStreamWriter0, (ReadableInstant) dateTime1);
        stringBuffer0.setLength((-2714));
    }

    @Test(timeout = 4000)
    public void test137137() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, (-706), true);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_UnpaddedNumber0);
        dateTimeFormatter0.withZoneUTC();
        Locale locale0 = Locale.FRANCE;
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear((-706));
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear((-706));
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        Integer integer0 = new Integer((-706));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-706), gJChronology0, locale0, integer0, (-706));
        DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
        DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
        doReturn((long) (-706)).when(dateTimeUtils_MillisProvider0).getMillis();
        DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
        dateTimeParserBucket0.computeMillis();
        MutableDateTime mutableDateTime0 = new MutableDateTime(dateTimeZone0);
        dateTimeFormatter3.parseInto(mutableDateTime0, "6?OG.", (-706));
        mutableDateTime0.getZone();
        System.setCurrentTimeMillis(4121L);
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("6?OG.", true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
        dateTimeFormatter1.getPrinter();
        dateTimeFormatter1.printTo((Appendable) mockPrintWriter0, (long) 3);
    }

    @Test(timeout = 4000)
    public void test138138() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
        dateTimeFieldType0.getDurationType();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2428, false);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
        Locale locale0 = Locale.JAPAN;
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withLocale(locale0);
        ISOChronology iSOChronology0 = ISOChronology.getInstance();
        MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) iSOChronology0);
        Integer integer0 = new Integer(1);
        DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter0.withChronology(iSOChronology0);
        DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withDefaultYear(2428);
        dateTimeFormatter4.withLocale(locale0);
        DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
        doReturn(165L).when(dateTimeUtils_MillisProvider0).getMillis();
        DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        YearMonth yearMonth0 = new YearMonth((Chronology) iSOChronology0);
        dateTimeFormatter5.printTo(stringBuffer0, (ReadablePartial) yearMonth0);
        dateTimeFormatter2.getParser();
        dateTimeFormatter5.isPrinter();
        StringBuffer stringBuffer1 = new StringBuffer();
        dateTimeFormatter2.print((long) 2428);
        dateTimeFormatter4.withPivotYear((Integer) 0);
        dateTimeFormatter2.withPivotYear(3);
        dateTimeFormatter2.isParser();
        dateTimeFormatter2.print((ReadableInstant) mutableDateTime0);
        String string0 = "9%IuGl:[";
        int int0 = (-1881);
        dateTimeFormatter3.parseLocalDateTime("14");
        dateTimeFormatter5.withZoneUTC();
        dateTimeFormatter2.parseInto(mutableDateTime0, string0, int0);
        long long0 = (-884L);
        System.setCurrentTimeMillis(long0);
    }

    @Test(timeout = 4000)
    public void test139139() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 12, true, 12);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_PaddedNumber0, dateTimeFormatterBuilder_PaddedNumber0);
        TimeZone timeZone0 = TimeZone.getDefault();
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
        byte[] byteArray0 = new byte[1];
        FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withDefaultYear((-1483));
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
        Chronology chronology0 = ethiopicChronology0.withUTC();
        dateTimeFieldType0.getDurationType();
        DateTimeUtils.setCurrentMillisOffset((-1483));
        DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withChronology(chronology0);
        dateTimeFormatter4.print((-61L));
        dateTimeFormatter1.parseMutableDateTime("000000000063");
        dateTimeFormatter3.isParser();
        dateTimeFormatter4.withOffsetParsed();
        DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withZone(dateTimeZone0);
        dateTimeFormatter5.parseMutableDateTime("000000000063");
        dateTimeFormatter5.parseMutableDateTime("000000000063");
        LocalTime localTime0 = LocalTime.now();
        dateTimeFormatter5.print((ReadablePartial) localTime0);
    }

    @Test(timeout = 4000)
    public void test140140() throws Throwable {
        DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[6];
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
        dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
        dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
        DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.monthOfYear();
        dateTimeFieldTypeArray0[2] = dateTimeFieldType1;
        DateTimeFieldType.yearOfCentury();
        dateTimeFieldTypeArray0[3] = dateTimeFieldType0;
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DurationField durationField0 = buddhistChronology0.hours();
        UnsupportedDateTimeField unsupportedDateTimeField0 = UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField0);
        DateTimeFieldType dateTimeFieldType2 = unsupportedDateTimeField0.getType();
        dateTimeFieldTypeArray0[4] = dateTimeFieldType2;
        DateTimeFieldType dateTimeFieldType3 = DateTimeFieldType.hourOfDay();
        dateTimeFieldTypeArray0[5] = dateTimeFieldType3;
        int[] intArray0 = new int[3];
        FileSystemHandling.shouldAllThrowIOExceptions();
        intArray0[0] = 1;
        intArray0[1] = 1;
        intArray0[2] = 1;
        DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(1, 1, (-1));
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormat_StyleFormatter0);
        Integer integer0 = new Integer(1);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear(1);
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
        DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withChronology(buddhistChronology0);
        Locale locale0 = Locale.CANADA;
        DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withLocale(locale0);
        StringBuffer stringBuffer0 = new StringBuffer("gHht]{P>bzw^87h3`2");
        dateTimeFormatter5.printTo(stringBuffer0, (ReadableInstant) null);
        ReadablePartial readablePartial0 = null;
        dateTimeFormatter5.print(readablePartial0);
        Partial partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, buddhistChronology0);
    }

    @Test(timeout = 4000)
    public void test141141() throws Throwable {
        DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[6];
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
        dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
        dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
        DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.monthOfYear();
        dateTimeFieldTypeArray0[2] = dateTimeFieldType1;
        DateTimeFieldType.yearOfCentury();
        dateTimeFieldTypeArray0[3] = dateTimeFieldType0;
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DurationField durationField0 = buddhistChronology0.hours();
        UnsupportedDateTimeField unsupportedDateTimeField0 = UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField0);
        DateTimeFieldType dateTimeFieldType2 = unsupportedDateTimeField0.getType();
        dateTimeFieldTypeArray0[4] = dateTimeFieldType2;
        DateTimeFieldType dateTimeFieldType3 = DateTimeFieldType.hourOfDay();
        dateTimeFieldTypeArray0[5] = dateTimeFieldType3;
        int[] intArray0 = new int[3];
        FileSystemHandling.shouldAllThrowIOExceptions();
        intArray0[0] = 1;
        intArray0[1] = 1;
        intArray0[2] = 1;
        DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(1, 1, (-1));
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormat_StyleFormatter0);
        Integer integer0 = new Integer((-2145318844));
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear(1);
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
        DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withChronology(buddhistChronology0);
        Locale locale0 = Locale.CANADA;
        StringBuffer stringBuffer0 = new StringBuffer(1);
        StringBuffer stringBuffer1 = new StringBuffer(stringBuffer0);
        dateTimeFormatter4.printTo(stringBuffer1, 918518400000L);
        DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withLocale(locale0);
        ReadablePartial readablePartial0 = null;
        dateTimeFormatter5.print(readablePartial0);
        Partial partial0 = null;
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, buddhistChronology0);
    }

    @Test(timeout = 4000)
    public void test142142() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, (-706), true);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_UnpaddedNumber0);
        dateTimeFormatter0.withZoneUTC();
        Locale locale0 = Locale.FRANCE;
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear((-706));
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear((-706));
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        Integer integer0 = new Integer((-706));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-706), gJChronology0, locale0, integer0, (-706));
        DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
        DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
        doReturn((long) (-706)).when(dateTimeUtils_MillisProvider0).getMillis();
        DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
        dateTimeParserBucket0.computeMillis();
        MutableDateTime mutableDateTime0 = new MutableDateTime(dateTimeZone0);
        dateTimeFormatter3.parseInto(mutableDateTime0, "6?OG.", (-706));
        System.setCurrentTimeMillis(4121L);
        FileSystemHandling.shouldAllThrowIOExceptions();
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("6?OG.", true);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
        dateTimeFormatter0.print((ReadableInstant) mutableDateTime0);
        dateTimeFormatter1.printTo((Appendable) mockPrintWriter0, (long) mutableDateTime0.ROUND_HALF_FLOOR);
    }

    @Test(timeout = 4000)
    public void test143143() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 12, true, 12);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_PaddedNumber0, dateTimeFormatterBuilder_PaddedNumber0);
        TimeZone timeZone0 = TimeZone.getDefault();
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
        byte[] byteArray0 = new byte[1];
        FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withDefaultYear((-1483));
        EthiopicChronology.getInstance(dateTimeZone0);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0, 1);
        dateTimeFieldType0.getDurationType();
        DateTimeUtils.setCurrentMillisOffset((-1483));
        DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withChronology(ethiopicChronology0);
        dateTimeFormatter4.print((-61L));
        dateTimeFormatter1.parseMutableDateTime("000000000063");
        dateTimeFormatter3.isParser();
        dateTimeFormatter4.withOffsetParsed();
        DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withZone(dateTimeZone0);
        dateTimeFormatter5.parseMutableDateTime("000000000063");
        dateTimeFormatter5.parseMutableDateTime("000000000063");
        LocalTime localTime0 = LocalTime.now();
        dateTimeFormatter5.print((ReadablePartial) localTime0);
    }

    @Test(timeout = 4000)
    public void test144144() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
        Integer integer0 = new Integer(314);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
        DateTime dateTime0 = dateTimeFormatter1.parseDateTime("");
        StringBuffer stringBuffer0 = new StringBuffer(314);
        dateTimeFormatter0.printTo(stringBuffer0, 0L);
        DateTimeZone.getDefault();
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        dateTimeFormatter1.printTo((Writer) charArrayWriter0, (long) 314);
        dateTimeFormatter1.parseLocalDate("");
        stringBuffer0.setLength(314);
        dateTimeFormatter1.isParser();
        dateTimeFormatter1.print((ReadableInstant) dateTime0);
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
        dateTimeFormatter1.isParser();
        dateTimeFormatter2.parseDateTime("");
        LenientChronology lenientChronology0 = LenientChronology.getInstance((Chronology) null);
        dateTimeFormatter0.withChronology(lenientChronology0);
    }

    @Test(timeout = 4000)
    public void test145145() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
        DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 12, true, 12);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_PaddedNumber0, dateTimeFormatterBuilder_PaddedNumber0);
        TimeZone timeZone0 = TimeZone.getDefault();
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
        byte[] byteArray0 = new byte[1];
        FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withDefaultYear(2619);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
        Chronology chronology0 = ethiopicChronology0.withUTC();
        dateTimeFieldType0.getDurationType();
        DateTimeUtils.setCurrentMillisOffset(2619);
        DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withChronology(chronology0);
        dateTimeFormatter4.print((-61L));
        dateTimeFormatter1.parseMutableDateTime("000000000004");
        dateTimeFormatter3.isParser();
        dateTimeFormatter4.withOffsetParsed();
        DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withZone(dateTimeZone0);
        dateTimeFormatter5.parseMutableDateTime("000000000004");
        dateTimeFormatter5.parseMutableDateTime("000000000004");
        LocalTime localTime0 = LocalTime.now();
        dateTimeFormatter5.print((ReadablePartial) localTime0);
    }

    @Test(timeout = 4000)
    public void test146146() throws Throwable {
        int int0 = 116;
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction((DateTimeFieldType) null, 116, 116);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
        Locale locale0 = Locale.FRENCH;
        locale0.stripExtensions();
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withLocale(locale0);
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        DateTimeUtils.setCurrentMillisFixed(116);
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
        DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withChronology(gregorianChronology0);
        StringBuffer stringBuffer0 = new StringBuffer(2147483572);
        dateTimeFormatter4.printTo(stringBuffer0, (ReadableInstant) null);
        DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withDefaultYear(int0);
        dateTimeFormatter5.withChronology(gregorianChronology0);
        long long0 = 28806144L;
    }

    @Test(timeout = 4000)
    public void test147147() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(0);
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        dateTimeFormatter1.withOffsetParsed();
        FileSystemHandling.createFolder((EvoSuiteFile) null);
        Integer integer0 = new Integer((-1101));
        Integer integer1 = new Integer((-1101));
        ISOChronology.getInstanceUTC();
        Integer integer2 = new Integer(0);
        dateTimeFormatter0.withPivotYear((-1101));
        long long0 = new Integer(0);
        dateTimeFormatter0.parseLocalDate("Printing not supported");
    }

    @Test(timeout = 4000)
    public void test148148() throws Throwable {
        FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 2435, 3550);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_Fraction0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
        DateTime dateTime0 = new DateTime((-1044L));
        DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
        DateTime dateTime1 = dateTime0.withFieldAdded(durationFieldType0, 3550);
        dateTimeFormatter1.print((ReadableInstant) dateTime1);
    }

    @Test(timeout = 4000)
    public void test149149() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('{');
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(90);
        MutableDateTime mutableDateTime0 = MutableDateTime.now();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        MutableDateTime mutableDateTime1 = mutableDateTime0.toMutableDateTime(dateTimeZone0);
        PipedWriter pipedWriter0 = new PipedWriter();
        BufferedWriter bufferedWriter0 = new BufferedWriter(pipedWriter0, 1);
        LocalDateTime localDateTime0 = new LocalDateTime((-1656L));
        dateTimeFormatter1.printTo((Appendable) bufferedWriter0, (ReadablePartial) localDateTime0);
        String string0 = "";
        int int0 = (-2866);
        dateTimeFormatter1.parseInto(mutableDateTime1, string0, int0);
    }

    @Test(timeout = 4000)
    public void test150150() throws Throwable {
        DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[14];
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
        dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
        dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
        DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.monthOfYear();
        dateTimeFieldTypeArray0[2] = dateTimeFieldType1;
        DateTimeFieldType.yearOfCentury();
        dateTimeFieldTypeArray0[3] = dateTimeFieldType0;
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.hourOfDay();
        dateTimeFieldTypeArray0[5] = dateTimeFieldType2;
        int[] intArray0 = new int[3];
        FileSystemHandling.shouldAllThrowIOExceptions();
        intArray0[0] = 1;
        intArray0[1] = 1;
        intArray0[2] = 1;
        DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(1, 1, (-1));
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormat_StyleFormatter0);
        Integer integer0 = new Integer((-2145318844));
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
        DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear(1);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Parsing not supported");
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
        Locale.lookup(linkedList0, linkedHashSet0);
        Integer integer1 = Integer.getInteger("Parsing not supported", 2000);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(47813632L, buddhistChronology0, (Locale) null, integer1, 1);
        DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
        MutableDateTime mutableDateTime0 = new MutableDateTime((long) 1, dateTimeZone0);
        dateTimeFormatter2.printTo((Writer) mockPrintWriter0, (ReadableInstant) mutableDateTime0);
        DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
        DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withChronology(buddhistChronology0);
        Locale locale0 = Locale.CANADA;
        Locale locale1 = null;
        dateTimeFormatter4.withLocale(locale1);
        ReadablePartial readablePartial0 = null;
    }

    @Test(timeout = 4000)
    public void test151151() throws Throwable {
        ISOChronology iSOChronology0 = ISOChronology.getInstance();
        LocalDate localDate0 = new LocalDate((Chronology) iSOChronology0);
        Partial partial0 = new Partial(localDate0);
        DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
        MockPrintStream mockPrintStream0 = new MockPrintStream("w");
        Object[] objectArray0 = new Object[8];
        objectArray0[0] = (Object) "|";
        objectArray0[2] = (Object) "|";
        objectArray0[3] = (Object) "w";
        objectArray0[4] = (Object) localDate0;
        objectArray0[5] = (Object) "w";
        objectArray0[6] = (Object) dateTimeFormatter1;
        PrintStream printStream0 = mockPrintStream0.printf("|", objectArray0);
        dateTimeFormatter1.printTo((Appendable) printStream0, (ReadablePartial) partial0);
        dateTimeFormatter1.getChronology();
        MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
        dateTimeFormatter1.printTo((Appendable) printStream0, (ReadableInstant) mutableDateTime0);
        dateTimeFormatter0.printTo((StringBuffer) null, (ReadablePartial) partial0);
        dateTimeFormatter1.printTo((Appendable) mockPrintStream0, (long) mutableDateTime0.ROUND_HALF_FLOOR);
    }
}
