org.joda.time.DateTimeZone,@Test(timeout = 4000)
public void test077() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
    TimeZone timeZone0 = dateTimeZone0.UTC.toTimeZone();
    timeZone0.useDaylightTime();
},ERROR,java.nio.file.NoSuchFileException,/home/star_usit_group/tratto/experiment/generator/resources/defects4j/temp/Time_19b/src/main/java/java/util/TimeZone.java
org.joda.time.DateTimeZone,@Test(timeout = 4000)
public void test2836() throws Throwable {
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    boolean boolean0 = fixedDateTimeZone0.equals(fixedDateTimeZone0);
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.DateTimeZone,@Test(timeout = 4000)
public void test5367() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(7, 57);
    DateMidnight dateMidnight0 = DateMidnight.now(dateTimeZone0);
    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateMidnight0, 7);
    LocalDateTime localDateTime0 = new LocalDateTime((Chronology) gJChronology0);
    dateTimeZone0.isLocalDateTimeGap(localDateTime0);
    dateMidnight0.getMillis();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.DateTimeZone,@Test(timeout = 4000)
public void test86112() throws Throwable {
    Set<String> set0 = DateTimeZone.getAvailableIDs();
    set0.size();
},ERROR,java.nio.file.NoSuchFileException,/home/star_usit_group/tratto/experiment/generator/resources/defects4j/temp/Time_19b/src/main/java/java/util/Set.java
