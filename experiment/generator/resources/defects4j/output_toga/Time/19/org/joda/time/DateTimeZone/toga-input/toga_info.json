{
  "test1213" : {
    "methodSignature" : "public abstract long nextTransition(long instant)",
    "methodName" : "nextTransition",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1213() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    long long0 = dateTimeZone0.nextTransition(0L);\n}",
    "testName" : "test1213"
  },
  "test6989" : {
    "methodSignature" : "public static void setProvider(Provider provider) throws SecurityException",
    "methodName" : "setProvider",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6989() throws Throwable {\n    DateTimeZone.setProvider((Provider) null);\n}",
    "testName" : "test6989"
  },
  "test87113" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test87113() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(7, 57);\n    String string0 = dateTimeZone0.toString();\n}",
    "testName" : "test87113"
  },
  "test4962" : {
    "methodSignature" : "public static DateTimeZone forID(String id)",
    "methodName" : "forID",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4962() throws Throwable {\n    DateTimeZone.forID(\"hh!E!^m5qP\");\n}",
    "testName" : "test4962"
  },
  "test2025" : {
    "methodSignature" : "public final int getOffset(ReadableInstant instant)",
    "methodName" : "getOffset",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2025() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    Instant instant0 = new Instant();\n    int int0 = dateTimeZone0.getOffset((ReadableInstant) instant0);\n}",
    "testName" : "test2025"
  },
  "test5774" : {
    "methodSignature" : "public long getMillisKeepLocal(DateTimeZone newZone, long oldInstant)",
    "methodName" : "getMillisKeepLocal",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5774() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    dateTimeZone0.UTC.getMillisKeepLocal(dateTimeZone0, 9223372036854775807L);\n}",
    "testName" : "test5774"
  },
  "test82108" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test82108() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    DateTimeZone.setDefault(dateTimeZone0);\n    dateTimeZone0.getID();\n}",
    "testName" : "test82108"
  },
  "test1618" : {
    "methodSignature" : "public abstract int getStandardOffset(long instant)",
    "methodName" : "getStandardOffset",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1618() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);\n    int int0 = dateTimeZone0.getStandardOffset((-324L));\n}",
    "testName" : "test1618"
  },
  "test6584" : {
    "methodSignature" : "public final String getShortName(long instant)",
    "methodName" : "getShortName",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6584() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-356));\n    String string0 = dateTimeZone0.getShortName((long) (-356));\n}",
    "testName" : "test6584"
  },
  "test7396" : {
    "methodSignature" : "public static DateTimeZone getDefault()",
    "methodName" : "getDefault",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7396() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"`HAljM6#\");\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);\n    //  // Unstable assertion: assertNotNull(dateTimeZone0);\n    UTCProvider uTCProvider0 = new UTCProvider();\n    DateTimeZone.setProvider(uTCProvider0);\n    DateTimeZone dateTimeZone1 = DateTimeZone.getDefault();\n    //  // Unstable assertion: assertSame(dateTimeZone1, dateTimeZone0);\n}",
    "testName" : "test7396"
  },
  "test3243" : {
    "methodSignature" : "public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC)",
    "methodName" : "convertLocalToUTC",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3243() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);\n    long long0 = dateTimeZone0.UTC.convertLocalToUTC((-9223372036826397809L), false, (long) 0);\n}",
    "testName" : "test3243"
  },
  "test4456" : {
    "methodSignature" : "public String getShortName(long instant, Locale locale)",
    "methodName" : "getShortName",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4456() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2555);\n    Locale locale0 = Locale.CANADA;\n    String string0 = dateTimeZone0.getShortName((long) 2555, locale0);\n}",
    "testName" : "test4456"
  },
  "test2431" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2431() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);\n    dateTimeZone0.getNameKey(60000L);\n    dateTimeZone0.getID();\n}",
    "testName" : "test2431"
  },
  "test84110" : {
    "methodSignature" : "public static Provider getProvider()",
    "methodName" : "getProvider",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test84110() throws Throwable {\n    Provider provider0 = DateTimeZone.getProvider();\n}",
    "testName" : "test84110"
  },
  "test066" : {
    "methodSignature" : "public int hashCode()",
    "methodName" : "hashCode",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    dateTimeZone0.hashCode();\n}",
    "testName" : "test066"
  },
  "test3647" : {
    "methodSignature" : "public static DateTimeZone forOffsetHours(int hoursOffset) throws IllegalArgumentException",
    "methodName" : "forOffsetHours",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3647() throws Throwable {\n    DateTimeZone.forOffsetHours(60000);\n}",
    "testName" : "test3647"
  },
  "test2836" : {
    "methodSignature" : "public boolean equals(Object obj)",
    "methodName" : "equals",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2836() throws Throwable {\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    boolean boolean0 = fixedDateTimeZone0.equals(fixedDateTimeZone0);\n}",
    "testName" : "test2836"
  },
  "test5265" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5265() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(57);\n    long long0 = dateTimeZone0.UTC.adjustOffset(0, true);\n    dateTimeZone0.toString();\n}",
    "testName" : "test5265"
  },
  "test5266" : {
    "methodSignature" : "public long adjustOffset(long instant, boolean earlierOrLater)",
    "methodName" : "adjustOffset",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5266() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(57);\n    long long0 = dateTimeZone0.UTC.adjustOffset(0, true);\n}",
    "testName" : "test5266"
  },
  "test6077" : {
    "methodSignature" : "public int getOffsetFromLocal(long instantLocal)",
    "methodName" : "getOffsetFromLocal",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6077() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    int int0 = dateTimeZone0.getOffsetFromLocal(9223372036854775807L);\n}",
    "testName" : "test6077"
  },
  "test4051" : {
    "methodSignature" : "public long convertUTCToLocal(long instantUTC)",
    "methodName" : "convertUTCToLocal",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4051() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    long long0 = dateTimeZone0.UTC.convertUTCToLocal(1L);\n}",
    "testName" : "test4051"
  },
  "test6888" : {
    "methodSignature" : "public static void setNameProvider(NameProvider nameProvider) throws SecurityException",
    "methodName" : "setNameProvider",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6888() throws Throwable {\n    DateTimeZone.setNameProvider((NameProvider) null);\n}",
    "testName" : "test6888"
  },
  "test89115" : {
    "methodSignature" : "protected Object writeReplace() throws ObjectStreamException",
    "methodName" : "writeReplace",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test89115() throws Throwable {\n    CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone) DateTimeZone.getDefault();\n    Object object0 = ((DateTimeZone) cachedDateTimeZone0).writeReplace();\n}",
    "testName" : "test89115"
  },
  "test4860" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4860() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);\n    dateTimeZone0.UTC.isFixed();\n    dateTimeZone0.toString();\n}",
    "testName" : "test4860"
  },
  "test7699" : {
    "methodSignature" : "public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException",
    "methodName" : "forOffsetHoursMinutes",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7699() throws Throwable {\n    DateTimeZone.forOffsetHoursMinutes(0, 12720000);\n}",
    "testName" : "test7699"
  },
  "test1112" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1112() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(572, 1);\n    dateTimeZone0.nextTransition(0L);\n    dateTimeZone0.toString();\n}",
    "testName" : "test1112"
  },
  "test4861" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4861() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);\n    dateTimeZone0.UTC.isFixed();\n    dateTimeZone0.getID();\n}",
    "testName" : "test4861"
  },
  "test011" : {
    "methodSignature" : "public long convertLocalToUTC(long instantLocal, boolean strict)",
    "methodName" : "convertLocalToUTC",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    long long0 = dateTimeZone0.convertLocalToUTC((-21477600001L), true);\n}",
    "testName" : "test011"
  },
  "test1517" : {
    "methodSignature" : "public abstract int getStandardOffset(long instant)",
    "methodName" : "getStandardOffset",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1517() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(572, 1);\n    int int0 = dateTimeZone0.getStandardOffset(0L);\n}",
    "testName" : "test1517"
  },
  "test1516" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1516() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(572, 1);\n    int int0 = dateTimeZone0.getStandardOffset(0L);\n    dateTimeZone0.toString();\n}",
    "testName" : "test1516"
  },
  "test7293" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7293() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(12740625);\n    TimeZone timeZone0 = dateTimeZone0.toTimeZone();\n    DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);\n    dateTimeZone1.getID();\n}",
    "testName" : "test7293"
  },
  "test5672" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5672() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1168);\n    long long0 = dateTimeZone0.UTC.convertLocalToUTC(0L, false);\n    dateTimeZone0.toString();\n}",
    "testName" : "test5672"
  },
  "test5673" : {
    "methodSignature" : "public long convertLocalToUTC(long instantLocal, boolean strict)",
    "methodName" : "convertLocalToUTC",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5673() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1168);\n    long long0 = dateTimeZone0.UTC.convertLocalToUTC(0L, false);\n}",
    "testName" : "test5673"
  },
  "test6482" : {
    "methodSignature" : "public final String getName(long instant)",
    "methodName" : "getName",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6482() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    String string0 = dateTimeZone0.getName(9223372036854775807L);\n}",
    "testName" : "test6482"
  },
  "test7295" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7295() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(12740625);\n    TimeZone timeZone0 = dateTimeZone0.toTimeZone();\n    DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);\n    timeZone0.toString();\n}",
    "testName" : "test7295"
  },
  "test7294" : {
    "methodSignature" : "public static DateTimeZone forTimeZone(TimeZone zone)",
    "methodName" : "forTimeZone",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7294() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(12740625);\n    TimeZone timeZone0 = dateTimeZone0.toTimeZone();\n    DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);\n}",
    "testName" : "test7294"
  },
  "test3546" : {
    "methodSignature" : "public boolean isLocalDateTimeGap(LocalDateTime localDateTime)",
    "methodName" : "isLocalDateTimeGap",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3546() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    dateTimeZone0.isLocalDateTimeGap((LocalDateTime) null);\n}",
    "testName" : "test3546"
  },
  "test2330" : {
    "methodSignature" : "public abstract int getOffset(long instant)",
    "methodName" : "getOffset",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2330() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    int int0 = dateTimeZone0.getOffset(1173L);\n}",
    "testName" : "test2330"
  },
  "test4355" : {
    "methodSignature" : "public String getName(long instant, Locale locale)",
    "methodName" : "getName",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4355() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(57);\n    String string0 = dateTimeZone0.getName(3347L, (Locale) null);\n}",
    "testName" : "test4355"
  },
  "test000" : {
    "methodSignature" : "public long adjustOffset(long instant, boolean earlierOrLater)",
    "methodName" : "adjustOffset",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);\n    dateTimeZone0.adjustOffset(9223372036854775807L, true);\n}",
    "testName" : "test000"
  },
  "test088" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2988));\n    dateTimeZone0.UTC.previousTransition(0L);\n    dateTimeZone0.getID();\n}",
    "testName" : "test088"
  },
  "test1924" : {
    "methodSignature" : "public final int getOffset(ReadableInstant instant)",
    "methodName" : "getOffset",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1924() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2555);\n    GJChronology gJChronology0 = GJChronology.getInstanceUTC();\n    LocalTime localTime0 = new LocalTime((Object) null, gJChronology0);\n    DateTime dateTime0 = localTime0.toDateTimeToday(dateTimeZone0);\n    int int0 = dateTimeZone0.getOffset((ReadableInstant) dateTime0);\n}",
    "testName" : "test1924"
  },
  "test089" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test089() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2988));\n    dateTimeZone0.UTC.previousTransition(0L);\n    dateTimeZone0.toString();\n}",
    "testName" : "test089"
  },
  "test2735" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2735() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(1);\n    long long0 = dateTimeZone0.UTC.getMillisKeepLocal(dateTimeZone1, 1483L);\n    dateTimeZone1.toString();\n}",
    "testName" : "test2735"
  },
  "test2734" : {
    "methodSignature" : "public long getMillisKeepLocal(DateTimeZone newZone, long oldInstant)",
    "methodName" : "getMillisKeepLocal",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2734() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(1);\n    long long0 = dateTimeZone0.UTC.getMillisKeepLocal(dateTimeZone1, 1483L);\n}",
    "testName" : "test2734"
  },
  "test81107" : {
    "methodSignature" : "public static void setDefault(DateTimeZone zone) throws SecurityException",
    "methodName" : "setDefault",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test81107() throws Throwable {\n    DateTimeZone.setDefault((DateTimeZone) null);\n}",
    "testName" : "test81107"
  },
  "test1923" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1923() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2555);\n    GJChronology gJChronology0 = GJChronology.getInstanceUTC();\n    LocalTime localTime0 = new LocalTime((Object) null, gJChronology0);\n    DateTime dateTime0 = localTime0.toDateTimeToday(dateTimeZone0);\n    int int0 = dateTimeZone0.getOffset((ReadableInstant) dateTime0);\n    dateTimeZone0.toString();\n}",
    "testName" : "test1923"
  },
  "test4759" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4759() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes((-357), 1);\n    dateTimeZone0.toString();\n}",
    "testName" : "test4759"
  },
  "test3141" : {
    "methodSignature" : "public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC)",
    "methodName" : "convertLocalToUTC",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3141() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-3870));\n    long long0 = dateTimeZone0.convertLocalToUTC((long) (-3870), true, (long) (-3870));\n}",
    "testName" : "test3141"
  },
  "test78103" : {
    "methodSignature" : "public static DateTimeZone forID(String id)",
    "methodName" : "forID",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test78103() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forID(\"-07:00\");\n}",
    "testName" : "test78103"
  },
  "test78102" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test78102() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forID(\"-07:00\");\n    dateTimeZone0.toString();\n}",
    "testName" : "test78102"
  },
  "test5164" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5164() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    String string0 = dateTimeZone0.getID();\n}",
    "testName" : "test5164"
  },
  "test3142" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3142() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-3870));\n    long long0 = dateTimeZone0.convertLocalToUTC((long) (-3870), true, (long) (-3870));\n    dateTimeZone0.toString();\n}",
    "testName" : "test3142"
  },
  "test3039" : {
    "methodSignature" : "public static DateTimeZone forTimeZone(TimeZone zone)",
    "methodName" : "forTimeZone",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3039() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"`HAljM6#\");\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);\n}",
    "testName" : "test3039"
  },
  "test5976" : {
    "methodSignature" : "public long convertUTCToLocal(long instantUTC)",
    "methodName" : "convertUTCToLocal",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5976() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);\n    long long0 = dateTimeZone0.convertUTCToLocal(4478L);\n}",
    "testName" : "test5976"
  },
  "test1011" : {
    "methodSignature" : "public abstract long previousTransition(long instant)",
    "methodName" : "previousTransition",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1011() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    long long0 = dateTimeZone0.previousTransition(10800000L);\n}",
    "testName" : "test1011"
  },
  "test6787" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6787() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-28378000));\n    dateTimeZone0.getID();\n}",
    "testName" : "test6787"
  },
  "test3950" : {
    "methodSignature" : "public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC)",
    "methodName" : "convertLocalToUTC",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3950() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    dateTimeZone0.convertLocalToUTC(9223372036854775807L, false, 9223372036854775807L);\n}",
    "testName" : "test3950"
  },
  "test033" : {
    "methodSignature" : "public static DateTimeZone forTimeZone(TimeZone zone)",
    "methodName" : "forTimeZone",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    TimeZone timeZone0 = dateTimeZone0.toTimeZone();\n    DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);\n}",
    "testName" : "test033"
  },
  "test2229" : {
    "methodSignature" : "public abstract int getOffset(long instant)",
    "methodName" : "getOffset",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2229() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(682);\n    int int0 = dateTimeZone0.getOffset((long) 682);\n}",
    "testName" : "test2229"
  },
  "test1415" : {
    "methodSignature" : "public abstract boolean isFixed()",
    "methodName" : "isFixed",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1415() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    boolean boolean0 = dateTimeZone0.isFixed();\n}",
    "testName" : "test1415"
  },
  "test2228" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2228() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(682);\n    int int0 = dateTimeZone0.getOffset((long) 682);\n    dateTimeZone0.toString();\n}",
    "testName" : "test2228"
  },
  "test6380" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6380() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-356));\n    dateTimeZone0.UTC.getOffset((ReadableInstant) null);\n    dateTimeZone0.getID();\n}",
    "testName" : "test6380"
  },
  "test7192" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7192() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);\n    dateTimeZone0.toString();\n}",
    "testName" : "test7192"
  },
  "test7598" : {
    "methodSignature" : "public long adjustOffset(long instant, boolean earlierOrLater)",
    "methodName" : "adjustOffset",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7598() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);\n    long long0 = dateTimeZone0.UTC.adjustOffset((-324L), false);\n}",
    "testName" : "test7598"
  },
  "test77101" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test77101() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forID(\"+00:00\");\n    dateTimeZone0.toString();\n}",
    "testName" : "test77101"
  },
  "test5571" : {
    "methodSignature" : "public long getMillisKeepLocal(DateTimeZone newZone, long oldInstant)",
    "methodName" : "getMillisKeepLocal",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5571() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    long long0 = dateTimeZone0.getMillisKeepLocal((DateTimeZone) null, (-806L));\n}",
    "testName" : "test5571"
  },
  "test6381" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6381() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-356));\n    dateTimeZone0.UTC.getOffset((ReadableInstant) null);\n    dateTimeZone0.toString();\n}",
    "testName" : "test6381"
  },
  "test3445" : {
    "methodSignature" : "public long adjustOffset(long instant, boolean earlierOrLater)",
    "methodName" : "adjustOffset",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3445() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    long long0 = dateTimeZone0.adjustOffset(599L, true);\n}",
    "testName" : "test3445"
  },
  "test4658" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4658() throws Throwable {\n    TimeZone timeZone0 = TimeZone.getDefault();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);\n    dateTimeZone0.toString();\n}",
    "testName" : "test4658"
  },
  "test5469" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5469() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1168);\n    DateTimeZone dateTimeZone1 = DateTimeZone.getDefault();\n    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);\n    LocalDateTime localDateTime0 = new LocalDateTime((Chronology) gregorianChronology0);\n    boolean boolean0 = dateTimeZone1.isLocalDateTimeGap(localDateTime0);\n    dateTimeZone0.toString();\n}",
    "testName" : "test5469"
  },
  "test2633" : {
    "methodSignature" : "public long getMillisKeepLocal(DateTimeZone newZone, long oldInstant)",
    "methodName" : "getMillisKeepLocal",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2633() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    long long0 = dateTimeZone0.getMillisKeepLocal(dateTimeZone0, 0L);\n}",
    "testName" : "test2633"
  },
  "test88114" : {
    "methodSignature" : "public static DateTimeZone forTimeZone(TimeZone zone)",
    "methodName" : "forTimeZone",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test88114() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-356));\n    TimeZone timeZone0 = dateTimeZone0.toTimeZone();\n    DateTimeZone.forTimeZone(timeZone0);\n}",
    "testName" : "test88114"
  },
  "test6279" : {
    "methodSignature" : "public boolean isStandardOffset(long instant)",
    "methodName" : "isStandardOffset",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6279() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    boolean boolean0 = dateTimeZone0.isStandardOffset(9223372036854775807L);\n}",
    "testName" : "test6279"
  },
  "test022" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022() throws Throwable {\n    ZoneOffset zoneOffset0 = ZoneOffset.MIN;\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);\n    dateTimeZone0.toString();\n}",
    "testName" : "test022"
  },
  "test3849" : {
    "methodSignature" : "public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC)",
    "methodName" : "convertLocalToUTC",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3849() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    long long0 = dateTimeZone0.convertLocalToUTC((-806L), true, (-806L));\n}",
    "testName" : "test3849"
  },
  "test83109" : {
    "methodSignature" : "public static DateTimeZone getDefault()",
    "methodName" : "getDefault",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test83109() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    DateTimeZone dateTimeZone1 = DateTimeZone.getDefault();\n}",
    "testName" : "test83109"
  },
  "test1821" : {
    "methodSignature" : "public int getOffsetFromLocal(long instantLocal)",
    "methodName" : "getOffsetFromLocal",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1821() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3);\n    int int0 = dateTimeZone0.getOffsetFromLocal((-622L));\n}",
    "testName" : "test1821"
  },
  "test1822" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1822() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3);\n    int int0 = dateTimeZone0.getOffsetFromLocal((-622L));\n    dateTimeZone0.getID();\n}",
    "testName" : "test1822"
  },
  "test4253" : {
    "methodSignature" : "public String getName(long instant, Locale locale)",
    "methodName" : "getName",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4253() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    Locale locale0 = Locale.CHINESE;\n    String string0 = dateTimeZone0.getName(158L, locale0);\n}",
    "testName" : "test4253"
  },
  "test5063" : {
    "methodSignature" : "public abstract int getStandardOffset(long instant)",
    "methodName" : "getStandardOffset",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5063() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forID(\"WET\");\n    int int0 = dateTimeZone0.getStandardOffset(1804L);\n}",
    "testName" : "test5063"
  },
  "test3040" : {
    "methodSignature" : "public long convertUTCToLocal(long instantUTC)",
    "methodName" : "convertUTCToLocal",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3040() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"`HAljM6#\");\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);\n    long long0 = dateTimeZone0.convertUTCToLocal(0);\n}",
    "testName" : "test3040"
  },
  "test2126" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2126() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3);\n    dateTimeZone0.UTC.getOffset(3608960L);\n    dateTimeZone0.toString();\n}",
    "testName" : "test2126"
  },
  "test1314" : {
    "methodSignature" : "public abstract long nextTransition(long instant)",
    "methodName" : "nextTransition",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1314() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    long long0 = dateTimeZone0.UTC.nextTransition((-1714L));\n}",
    "testName" : "test1314"
  },
  "test2127" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2127() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3);\n    dateTimeZone0.UTC.getOffset(3608960L);\n    dateTimeZone0.getID();\n}",
    "testName" : "test2127"
  },
  "test5875" : {
    "methodSignature" : "public long convertUTCToLocal(long instantUTC)",
    "methodName" : "convertUTCToLocal",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5875() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);\n    dateTimeZone0.convertUTCToLocal(9223372036854775807L);\n}",
    "testName" : "test5875"
  },
  "test6686" : {
    "methodSignature" : "public static DateTimeZone forTimeZone(TimeZone zone)",
    "methodName" : "forTimeZone",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6686() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1585), \"user.timezone\");\n    DateTimeZone.forTimeZone(simpleTimeZone0);\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);\n}",
    "testName" : "test6686"
  },
  "test85111" : {
    "methodSignature" : "public static void setNameProvider(NameProvider nameProvider) throws SecurityException",
    "methodName" : "setNameProvider",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test85111() throws Throwable {\n    NameProvider nameProvider0 = DateTimeZone.getNameProvider();\n    DateTimeZone.setNameProvider(nameProvider0);\n}",
    "testName" : "test85111"
  },
  "test055" : {
    "methodSignature" : "public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException",
    "methodName" : "forOffsetHoursMinutes",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055() throws Throwable {\n    DateTimeZone.forOffsetHoursMinutes(0, (-2002));\n}",
    "testName" : "test055"
  },
  "test80106" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test80106() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forID(\"UTC\");\n    dateTimeZone0.getID();\n}",
    "testName" : "test80106"
  },
  "test7091" : {
    "methodSignature" : "public static DateTimeZone forOffsetMillis(int millisOffset)",
    "methodName" : "forOffsetMillis",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7091() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1168);\n    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(1168);\n}",
    "testName" : "test7091"
  },
  "test7090" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7090() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1168);\n    dateTimeZone0.toString();\n}",
    "testName" : "test7090"
  },
  "test6685" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6685() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1585), \"user.timezone\");\n    DateTimeZone.forTimeZone(simpleTimeZone0);\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);\n    dateTimeZone0.toString();\n}",
    "testName" : "test6685"
  },
  "test79104" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test79104() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forID(\"+07:57\");\n    dateTimeZone0.toString();\n}",
    "testName" : "test79104"
  },
  "test7497" : {
    "methodSignature" : "public abstract boolean isFixed()",
    "methodName" : "isFixed",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7497() throws Throwable {\n    TimeZone timeZone0 = TimeZone.getTimeZone(\"UTC\");\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);\n    dateTimeZone0.isFixed();\n}",
    "testName" : "test7497"
  },
  "test79105" : {
    "methodSignature" : "public static DateTimeZone forID(String id)",
    "methodName" : "forID",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test79105() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forID(\"+07:57\");\n}",
    "testName" : "test79105"
  },
  "test5470" : {
    "methodSignature" : "public boolean isLocalDateTimeGap(LocalDateTime localDateTime)",
    "methodName" : "isLocalDateTimeGap",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5470() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1168);\n    DateTimeZone dateTimeZone1 = DateTimeZone.getDefault();\n    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);\n    LocalDateTime localDateTime0 = new LocalDateTime((Chronology) gregorianChronology0);\n    boolean boolean0 = dateTimeZone1.isLocalDateTimeGap(localDateTime0);\n}",
    "testName" : "test5470"
  },
  "test2532" : {
    "methodSignature" : "public abstract String getNameKey(long instant)",
    "methodName" : "getNameKey",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2532() throws Throwable {\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();\n    String string0 = dateTimeZone0.getNameKey((-575L));\n}",
    "testName" : "test2532"
  },
  "test1720" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1720() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(550);\n    dateTimeZone0.UTC.getOffsetFromLocal(0L);\n    dateTimeZone0.getID();\n}",
    "testName" : "test1720"
  },
  "test4557" : {
    "methodSignature" : "public String getShortName(long instant, Locale locale)",
    "methodName" : "getShortName",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4557() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    String string0 = dateTimeZone0.getShortName(0L, (Locale) null);\n}",
    "testName" : "test4557"
  },
  "test5368" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5368() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(7, 57);\n    DateMidnight dateMidnight0 = DateMidnight.now(dateTimeZone0);\n    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateMidnight0, 7);\n    LocalDateTime localDateTime0 = new LocalDateTime((Chronology) gJChronology0);\n    dateTimeZone0.isLocalDateTimeGap(localDateTime0);\n    dateTimeZone0.toString();\n}",
    "testName" : "test5368"
  },
  "test3344" : {
    "methodSignature" : "public long convertLocalToUTC(long instantLocal, boolean strict)",
    "methodName" : "convertLocalToUTC",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3344() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    long long0 = dateTimeZone0.convertLocalToUTC((-4415L), true);\n}",
    "testName" : "test3344"
  },
  "test5367" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5367() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(7, 57);\n    DateMidnight dateMidnight0 = DateMidnight.now(dateTimeZone0);\n    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateMidnight0, 7);\n    LocalDateTime localDateTime0 = new LocalDateTime((Chronology) gJChronology0);\n    dateTimeZone0.isLocalDateTimeGap(localDateTime0);\n    dateMidnight0.getMillis();\n}",
    "testName" : "test5367"
  },
  "test77100" : {
    "methodSignature" : "public static DateTimeZone forID(String id)",
    "methodName" : "forID",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test77100() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forID(\"+00:00\");\n}",
    "testName" : "test77100"
  },
  "test044" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 59);\n    dateTimeZone0.getID();\n}",
    "testName" : "test044"
  },
  "test2937" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2937() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2442);\n    DefaultNameProvider defaultNameProvider0 = new DefaultNameProvider();\n    dateTimeZone0.UTC.equals(defaultNameProvider0);\n    dateTimeZone0.toString();\n}",
    "testName" : "test2937"
  },
  "test2938" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2938() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2442);\n    DefaultNameProvider defaultNameProvider0 = new DefaultNameProvider();\n    dateTimeZone0.UTC.equals(defaultNameProvider0);\n    dateTimeZone0.getID();\n}",
    "testName" : "test2938"
  },
  "test0910" : {
    "methodSignature" : "public abstract long previousTransition(long instant)",
    "methodName" : "previousTransition",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0910() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    long long0 = dateTimeZone0.UTC.previousTransition(1);\n}",
    "testName" : "test0910"
  },
  "test3748" : {
    "methodSignature" : "public long convertLocalToUTC(long instantLocal, boolean strict)",
    "methodName" : "convertLocalToUTC",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3748() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    dateTimeZone0.convertLocalToUTC(9223372036854775807L, false);\n}",
    "testName" : "test3748"
  },
  "test1719" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1719() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(550);\n    dateTimeZone0.UTC.getOffsetFromLocal(0L);\n    dateTimeZone0.toString();\n}",
    "testName" : "test1719"
  },
  "test6178" : {
    "methodSignature" : "public boolean isStandardOffset(long instant)",
    "methodName" : "isStandardOffset",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6178() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);\n    boolean boolean0 = dateTimeZone0.isStandardOffset(30128928L);\n}",
    "testName" : "test6178"
  },
  "test4152" : {
    "methodSignature" : "public int getOffsetFromLocal(long instantLocal)",
    "methodName" : "getOffsetFromLocal",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4152() throws Throwable {\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();\n    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();\n    int int0 = dateTimeZone0.getOffsetFromLocal(1);\n}",
    "testName" : "test4152"
  }
}