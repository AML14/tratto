project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test0011,"public void test0011() throws Throwable {
    LocalDateTime.parse(""h"");
}",0,
project,0,test0022,"public void test0022() throws Throwable {
    LocalDateTime localDateTime0 = new LocalDateTime((-169817918680L), (DateTimeZone) null);
    localDateTime0.toDate();
}",0,
project,0,test0033,"public void test0033() throws Throwable {
    LocalDateTime localDateTime0 = LocalDateTime.now();
    localDateTime0.year();
}",0,
project,0,test0044,"public void test0044() throws Throwable {
    LocalDateTime localDateTime0 = new LocalDateTime();
    localDateTime0.withFields(localDateTime0);
}",0,
project,0,test0066,"public void test0066() throws Throwable {
    LocalDateTime localDateTime0 = new LocalDateTime();
    localDateTime0.withWeekyear(32);
}",0,
project,0,test0077,"public void test0077() throws Throwable {
    LocalDateTime localDateTime0 = new LocalDateTime();
    LocalDateTime.Property localDateTime_Property0 = localDateTime0.secondOfMinute();
    localDateTime_Property0.isLeap();
}",0,
project,0,test0088,"public void test0088() throws Throwable {
    LocalDateTime localDateTime0 = new LocalDateTime();
    LocalDateTime.Property localDateTime_Property0 = localDateTime0.hourOfDay();
    MockDate mockDate0 = new MockDate();
    LocalDateTime localDateTime1 = localDateTime0.withFields(localDateTime0);
    LocalDateTime localDateTime2 = localDateTime_Property0.roundHalfFloorCopy();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
    dateTimeFieldType0.getRangeDurationType();
    localDateTime1.property(dateTimeFieldType0);
    System.setCurrentTimeMillis((-1L));
    localDateTime2.toDate();
}",0,
project,0,test0099,"public void test0099() throws Throwable {
    LocalDateTime localDateTime0 = new LocalDateTime();
    LocalDateTime.Property localDateTime_Property0 = localDateTime0.weekOfWeekyear();
    localDateTime_Property0.withMaximumValue();
    localDateTime_Property0.getMinimumValueOverall();
}",0,
project,0,test01111,"public void test01111() throws Throwable {
    LocalDateTime localDateTime0 = new LocalDateTime();
    LocalDateTime.Property localDateTime_Property0 = localDateTime0.monthOfYear();
    localDateTime_Property0.getMinimumValueOverall();
}",0,
project,0,test01313,"public void test01313() throws Throwable {
    int int0 = 0;
    LocalDateTime localDateTime0 = new LocalDateTime(0, 12, 0, 12, 12, 64);
    localDateTime0.withYearOfEra(int0);
    // Undeclared exception!
    try {
        localDateTime0.toLocalDate();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value 64 for secondOfMinute must be in the range [0,59]
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",0,
project,0,test01414,"public void test01414() throws Throwable {
    Calendar calendar0 = MockCalendar.getInstance();
    LocalDateTime.fromCalendarFields(calendar0);
}",0,
project,0,test01515,"public void test01515() throws Throwable {
    LocalDateTime localDateTime0 = LocalDateTime.now();
    DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
    localDateTime0.withFieldAdded(durationFieldType0, 15);
}",1,
project,0,test01616,"public void test01616() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
    LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
    DurationFieldType durationFieldType0 = DurationFieldType.minutes();
    LocalDateTime localDateTime1 = localDateTime0.withFieldAdded(durationFieldType0, 0);
    Seconds seconds0 = Seconds.ZERO;
    Duration duration0 = seconds0.toStandardDuration();
    localDateTime1.withDurationAdded(duration0, 0);
    localDateTime0.getLocalMillis();
    localDateTime1.getWeekyear();
}",0,
project,0,test01717,"public void test01717() throws Throwable {
    ISOChronology iSOChronology0 = ISOChronology.getInstance();
    LocalDateTime.now((Chronology) iSOChronology0);
}",0,
project,0,test01818,"public void test01818() throws Throwable {
    LocalDateTime localDateTime0 = LocalDateTime.now();
    localDateTime0.plusMillis(2895);
}",0,
project,0,test02020,"public void test02020() throws Throwable {
    LocalDateTime localDateTime0 = new LocalDateTime();
    LocalDate localDate0 = new LocalDate();
    localDateTime0.equals(localDate0);
    localDateTime0.toDate();
}",0,
project,0,test02121,"public void test02121() throws Throwable {
    LocalDateTime localDateTime0 = new LocalDateTime();
    localDateTime0.minusSeconds(1202);
}",0,
project,0,test02222,"public void test02222() throws Throwable {
    LocalDateTime localDateTime0 = new LocalDateTime();
    localDateTime0.withMillisOfSecond(32);
}",0,
project,0,test02323,"public void test02323() throws Throwable {
    LocalDateTime localDateTime0 = LocalDateTime.now();
    LocalDateTime localDateTime1 = localDateTime0.withDayOfWeek((-3077));
    // Undeclared exception!
    try {
        localDateTime1.toDate();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value -3077 for dayOfWeek must be in the range [1,7]
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",0,
project,0,test02424,"public void test02424() throws Throwable {
    LocalDateTime localDateTime0 = LocalDateTime.now();
    localDateTime0.withMonthOfYear(255);
    // Undeclared exception!
    try {
        localDateTime0.toDate();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value 255 for monthOfYear must be in the range [1,12]
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",0,
project,0,test02525,"public void test02525() throws Throwable {
    LocalDateTime localDateTime0 = new LocalDateTime();
    localDateTime0.getYearOfCentury();
    localDateTime0.toDate();
}",0,
project,0,test02626,"public void test02626() throws Throwable {
    LocalDateTime localDateTime0 = new LocalDateTime();
    LocalDate localDate0 = LocalDate.now();
    // Undeclared exception!
    try {
        localDateTime0.compareTo((ReadablePartial) localDate0);
        fail(""Expecting exception: ClassCastException"");
    } catch (ClassCastException e) {
        //
        // ReadablePartial objects must have matching field types
        //
        verifyException(""org.joda.time.base.AbstractPartial"", e);
    }
}",0,
project,0,test02727,"public void test02727() throws Throwable {
    LocalDateTime localDateTime0 = new LocalDateTime();
    localDateTime0.getCenturyOfEra();
    localDateTime0.toDate();
}",0,
project,0,test02828,"public void test02828() throws Throwable {
    LocalDateTime localDateTime0 = LocalDateTime.now();
    localDateTime0.withDayOfMonth(736);
    // Undeclared exception!
    try {
        DateTimeFieldType.halfdayOfDay();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value 736 for dayOfMonth must be in the range [1,28]
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",0,
project,0,test02929,"public void test02929() throws Throwable {
    LocalDateTime localDateTime0 = new LocalDateTime();
    localDateTime0.withYear(569);
    localDateTime0.toDate();
}",0,
project,0,test03030,"public void test03030() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
    LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
    LocalDateTime localDateTime1 = localDateTime0.minusHours(0);
    localDateTime1.toDate();
}",0,
project,0,test03232,"public void test03232() throws Throwable {
    LocalDateTime localDateTime0 = new LocalDateTime();
    localDateTime0.minusYears((-2147483598));
    // Undeclared exception!
    try {
        localDateTime0.toDate();
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // The calculation caused an overflow: 2014 + 2147483598
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",0,
project,0,test03333,"public void test03333() throws Throwable {
    LocalDateTime localDateTime0 = LocalDateTime.now();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
    localDateTime0.withField(dateTimeFieldType0, (-1502));
    localDateTime0.toDate();
}",0,
project,0,test03434,"public void test03434() throws Throwable {
    LocalDateTime localDateTime0 = new LocalDateTime();
    localDateTime0.getMillisOfDay();
    localDateTime0.toDate();
}",0,
project,0,test03535,"public void test03535() throws Throwable {
    LocalDateTime localDateTime0 = new LocalDateTime();
    localDateTime0.plusMinutes(1217);
}",0,
project,0,test03636,"public void test03636() throws Throwable {
    LocalDateTime localDateTime0 = new LocalDateTime();
    localDateTime0.withDate((-90), (-90), (-90));
}",0,
project,0,test03737,"public void test03737() throws Throwable {
    LocalDateTime localDateTime0 = LocalDateTime.now();
    localDateTime0.plusMillis(0);
    localDateTime0.toDate();
}",0,
project,0,test03838,"public void test03838() throws Throwable {
    LocalDateTime localDateTime0 = new LocalDateTime();
    localDateTime0.plusMonths(1480);
    localDateTime0.toDate();
}",0,
project,0,test03939,"public void test03939() throws Throwable {
    LocalDateTime localDateTime0 = new LocalDateTime(12, 12, 12, 5, 1);
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
    localDateTime0.property(dateTimeFieldType0);
}",1,
project,0,test04040,"public void test04040() throws Throwable {
    LocalDateTime localDateTime0 = new LocalDateTime(1418L);
    LocalDateTime localDateTime1 = localDateTime0.minusMillis(0);
    localDateTime1.toDate();
}",0,
project,0,test04141,"public void test04141() throws Throwable {
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    LocalDateTime localDateTime0 = null;
    try {
        localDateTime0 = new LocalDateTime(fixedDateTimeZone0, fixedDateTimeZone0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // No partial converter found for type: org.joda.time.tz.FixedDateTimeZone
        //
        verifyException(""org.joda.time.convert.ConverterManager"", e);
    }
}",0,
project,0,test04343,"public void test04343() throws Throwable {
    LocalDateTime localDateTime0 = LocalDateTime.now();
    LocalDateTime.Property localDateTime_Property0 = localDateTime0.yearOfCentury();
    localDateTime_Property0.getLeapAmount();
    Integer integer0 = new Integer(0);
    localDateTime_Property0.addWrapFieldToCopy(0);
    DateTimeFieldType.clockhourOfHalfday();
    Integer integer1 = new Integer(0);
    localDateTime0.toString(""org.joda.time.LocalDateTime$Property"");
}",0,
project,0,test04545,"public void test04545() throws Throwable {
    LocalDateTime localDateTime0 = new LocalDateTime();
    localDateTime0.plus((ReadableDuration) null);
    localDateTime0.toDate();
}",0,
project,0,test04646,"public void test04646() throws Throwable {
    LocalDateTime localDateTime0 = LocalDateTime.now();
    localDateTime0.minus((ReadableDuration) null);
    localDateTime0.toDate();
}",0,
project,0,test04747,"public void test04747() throws Throwable {
    LocalDateTime localDateTime0 = new LocalDateTime();
    localDateTime0.withTime(23034375, 23034375, 23034375, 23034375);
    // Undeclared exception!
    try {
        localDateTime0.toDate();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value 23034375 for hourOfDay must be in the range [0,23]
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",0,
project,0,test04848,"public void test04848() throws Throwable {
    LocalDateTime localDateTime0 = new LocalDateTime();
    localDateTime0.getFieldType(883);
    // Undeclared exception!
    try {
        localDateTime0.toDate();
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Invalid index: 883
        //
        verifyException(""org.joda.time.LocalDateTime"", e);
    }
}",0,
project,0,test04949,"public void test04949() throws Throwable {
    LocalDateTime localDateTime0 = new LocalDateTime();
    localDateTime0.getDayOfYear();
    LocalDateTime localDateTime1 = new LocalDateTime();
}",0,
project,0,test05050,"public void test05050() throws Throwable {
    LocalDateTime localDateTime0 = new LocalDateTime();
    MutablePeriod mutablePeriod0 = new MutablePeriod();
    localDateTime0.minus((ReadablePeriod) mutablePeriod0);
}",0,
project,0,test05151,"public void test05151() throws Throwable {
    LocalDateTime localDateTime0 = new LocalDateTime();
    localDateTime0.withHourOfDay(1000);
}",0,
project,0,test05252,"public void test05252() throws Throwable {
    LocalDateTime localDateTime0 = new LocalDateTime();
    localDateTime0.dayOfWeek();
}",0,
project,0,test05353,"public void test05353() throws Throwable {
    LocalDateTime localDateTime0 = new LocalDateTime();
    Locale locale0 = Locale.CHINESE;
    localDateTime0.toString(""|Er"", locale0);
    // Undeclared exception!
    try {
        localDateTime0.toDate();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: r
        //
        verifyException(""org.joda.time.format.DateTimeFormat"", e);
    }
}",0,
project,0,test05454,"public void test05454() throws Throwable {
    LocalDateTime localDateTime0 = LocalDateTime.now();
    localDateTime0.plus((ReadablePeriod) null);
    localDateTime0.toDate();
}",0,
project,0,test05555,"public void test05555() throws Throwable {
    LocalDateTime localDateTime0 = LocalDateTime.now();
    Weeks weeks0 = Weeks.ONE;
    Duration duration0 = weeks0.toStandardDuration();
    localDateTime0.plus((ReadableDuration) duration0);
    localDateTime0.toDate();
}",0,
project,0,test05757,"public void test05757() throws Throwable {
    LocalDateTime localDateTime0 = LocalDateTime.now();
    localDateTime0.minusHours(328);
}",0,
project,0,test05858,"public void test05858() throws Throwable {
    LocalDateTime localDateTime0 = LocalDateTime.now();
    localDateTime0.millisOfSecond();
}",0,
project,0,test05959,"public void test05959() throws Throwable {
    LocalDateTime localDateTime0 = new LocalDateTime();
    localDateTime0.getWeekyear();
}",0,
project,0,test06060,"public void test06060() throws Throwable {
    LocalDateTime localDateTime0 = LocalDateTime.now();
    localDateTime0.withYearOfEra(14);
}",0,
project,0,test06161,"public void test06161() throws Throwable {
    LocalDateTime localDateTime0 = LocalDateTime.now();
    localDateTime0.withEra(23118750);
    // Undeclared exception!
    try {
        localDateTime0.toDate();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value 23118750 for era must be in the range [0,1]
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",0,
project,0,test06262,"public void test06262() throws Throwable {
    LocalDateTime localDateTime0 = new LocalDateTime();
    localDateTime0.getValue(153);
    // Undeclared exception!
    try {
        localDateTime0.toDate();
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Invalid index: 153
        //
        verifyException(""org.joda.time.LocalDateTime"", e);
    }
}",0,
project,0,test06363,"public void test06363() throws Throwable {
    LocalDateTime localDateTime0 = new LocalDateTime();
    localDateTime0.weekyear();
}",0,
project,0,test06464,"public void test06464() throws Throwable {
    LocalDateTime localDateTime0 = LocalDateTime.now();
    localDateTime0.minusDays((-198));
}",0,
project,0,test06565,"public void test06565() throws Throwable {
    LocalDateTime localDateTime0 = new LocalDateTime();
    localDateTime0.withMillisOfDay(1008);
}",0,
project,0,test06666,"public void test06666() throws Throwable {
    LocalDateTime localDateTime0 = LocalDateTime.now();
    localDateTime0.minusMonths((-2147451595));
}",0,
project,0,test06767,"public void test06767() throws Throwable {
    LocalDateTime localDateTime0 = new LocalDateTime();
    localDateTime0.plusHours(40);
}",0,
project,0,test06868,"public void test06868() throws Throwable {
    LocalDateTime localDateTime0 = LocalDateTime.now();
    LocalDateTime localDateTime1 = localDateTime0.withWeekOfWeekyear(2390);
    // Undeclared exception!
    try {
        localDateTime1.toDate();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value 2390 for weekOfWeekyear must be in the range [1,52]
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",0,
project,0,test06969,"public void test06969() throws Throwable {
    LocalDateTime localDateTime0 = new LocalDateTime();
    localDateTime0.withYearOfCentury(1008);
}",0,
project,0,test07070,"public void test07070() throws Throwable {
    LocalDateTime localDateTime0 = new LocalDateTime();
    localDateTime0.toDateTime();
    localDateTime0.toDate();
}",0,
project,0,test07171,"public void test07171() throws Throwable {
    LocalDateTime localDateTime0 = new LocalDateTime();
    localDateTime0.dayOfYear();
}",0,
project,0,test07272,"public void test07272() throws Throwable {
    LocalDateTime localDateTime0 = new LocalDateTime();
    localDateTime0.withCenturyOfEra(1217);
    localDateTime0.toDate();
}",0,
project,0,test07474,"public void test07474() throws Throwable {
    LocalDateTime localDateTime0 = LocalDateTime.now();
    localDateTime0.toLocalDate();
}",0,
project,0,test07575,"public void test07575() throws Throwable {
    LocalDateTime localDateTime0 = LocalDateTime.now();
    localDateTime0.withMinuteOfHour((-665));
}",0,
project,0,test07676,"public void test07676() throws Throwable {
    LocalDateTime localDateTime0 = LocalDateTime.now();
    localDateTime0.era();
    localDateTime0.toDate();
}",0,
project,0,test07777,"public void test07777() throws Throwable {
    LocalDateTime localDateTime0 = new LocalDateTime();
    localDateTime0.yearOfEra();
}",0,
project,0,test07878,"public void test07878() throws Throwable {
    LocalDateTime localDateTime0 = LocalDateTime.now();
    localDateTime0.minusMinutes(23118750);
}",0,
project,0,test07979,"public void test07979() throws Throwable {
    LocalDateTime localDateTime0 = new LocalDateTime();
    localDateTime0.toLocalTime();
    localDateTime0.toDate();
}",0,
project,0,test08080,"public void test08080() throws Throwable {
    LocalDateTime localDateTime0 = new LocalDateTime();
    localDateTime0.hourOfDay();
    localDateTime0.toDate();
    LocalDateTime.Property localDateTime_Property0 = localDateTime0.year();
    localDateTime_Property0.setCopy(""{gmi"");
    // Undeclared exception!
    try {
        localDateTime_Property0.getLeapAmount();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value \""{gmi\"" for year is not supported
        //
        verifyException(""org.joda.time.field.BaseDateTimeField"", e);
    }
}",0,
project,0,test08181,"public void test08181() throws Throwable {
    LocalDateTime localDateTime0 = LocalDateTime.now();
    localDateTime0.plusSeconds((-4));
}",0,
project,0,test08282,"public void test08282() throws Throwable {
    LocalDateTime localDateTime0 = LocalDateTime.now();
    localDateTime0.getYearOfEra();
}",0,
project,0,test08383,"public void test08383() throws Throwable {
    LocalDateTime localDateTime0 = new LocalDateTime();
    localDateTime0.minusMillis((-376));
    localDateTime0.toDate();
}",0,
project,0,test08484,"public void test08484() throws Throwable {
    LocalDateTime localDateTime0 = new LocalDateTime();
    localDateTime0.getDayOfWeek();
}",0,
project,0,test08585,"public void test08585() throws Throwable {
    LocalDateTime localDateTime0 = LocalDateTime.now();
    localDateTime0.millisOfDay();
}",0,
project,0,test08686,"public void test08686() throws Throwable {
    LocalDateTime.now((DateTimeZone) null);
}",0,
project,0,test08787,"public void test08787() throws Throwable {
    LocalDateTime localDateTime0 = new LocalDateTime();
    localDateTime0.minusYears(0);
    localDateTime0.toDate();
}",0,
project,0,test08888,"public void test08888() throws Throwable {
    LocalDateTime localDateTime0 = new LocalDateTime();
    localDateTime0.minusWeeks(103);
    localDateTime0.toDate();
}",0,
project,0,test08989,"public void test08989() throws Throwable {
    LocalDateTime localDateTime0 = new LocalDateTime();
    LocalDateTime localDateTime1 = localDateTime0.withWeekyear((-1921));
    localDateTime1.toDate();
}",0,
project,0,test09090,"public void test09090() throws Throwable {
    LocalDateTime localDateTime0 = new LocalDateTime();
    localDateTime0.toString();
}",0,
project,0,test09191,"public void test09191() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) gJChronology0);
    localDateTime0.toDate();
}",0,
project,0,test09292,"public void test09292() throws Throwable {
    LocalDateTime localDateTime0 = new LocalDateTime();
    localDateTime0.dayOfMonth();
}",0,
project,0,test09393,"public void test09393() throws Throwable {
    LocalDateTime localDateTime0 = new LocalDateTime();
    localDateTime0.toLocalDate();
    localDateTime0.plusHours(0);
}",0,
project,0,test09494,"public void test09494() throws Throwable {
    LocalDateTime localDateTime0 = new LocalDateTime();
    LocalDateTime localDateTime1 = localDateTime0.plusSeconds(0);
    localDateTime1.toDate();
}",0,
project,0,test09595,"public void test09595() throws Throwable {
    LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields((Calendar) null);
    // Undeclared exception!
    try {
        localDateTime0.toDate();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The calendar must not be null
        //
        verifyException(""org.joda.time.LocalDateTime"", e);
    }
}",0,
project,0,test09696,"public void test09696() throws Throwable {
    LocalDateTime localDateTime0 = LocalDateTime.now();
    Locale locale0 = Locale.UK;
    localDateTime0.toString((String) null, locale0);
    localDateTime0.toDate();
}",0,
project,0,test09797,"public void test09797() throws Throwable {
    LocalDateTime localDateTime0 = LocalDateTime.now();
    localDateTime0.plusYears(0);
    localDateTime0.toDate();
}",0,
project,0,test09898,"public void test09898() throws Throwable {
    LocalDateTime localDateTime0 = new LocalDateTime();
    localDateTime0.property((DateTimeFieldType) null);
}",1,
project,0,test09999,"public void test09999() throws Throwable {
    LocalDateTime localDateTime0 = new LocalDateTime();
    localDateTime0.hourOfDay();
    localDateTime0.toDate();
    LocalDateTime.Property localDateTime_Property0 = localDateTime0.year();
    localDateTime_Property0.roundFloorCopy();
    LocalDateTime localDateTime1 = localDateTime_Property0.roundCeilingCopy();
    localDateTime0.withFields(localDateTime1);
    localDateTime0.toDate();
}",0,
project,0,test100100,"public void test100100() throws Throwable {
    LocalDateTime localDateTime0 = LocalDateTime.now();
    localDateTime0.toString(""Field must not be null"");
}",0,
project,0,test101101,"public void test101101() throws Throwable {
    LocalDateTime localDateTime0 = LocalDateTime.now();
    localDateTime0.monthOfYear();
}",0,
project,0,test103103,"public void test103103() throws Throwable {
    LocalDateTime localDateTime0 = new LocalDateTime();
    localDateTime0.plusWeeks(112);
    localDateTime0.toDate();
}",0,
project,0,test104104,"public void test104104() throws Throwable {
    LocalDateTime localDateTime0 = new LocalDateTime();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
    localDateTime0.property(dateTimeFieldType0);
}",1,
project,0,test105105,"public void test105105() throws Throwable {
    LocalDateTime localDateTime0 = new LocalDateTime(1991562380481320L);
}",1,
project,0,test106106,"public void test106106() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
    LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
    localDateTime0.toDate();
    localDateTime0.dayOfWeek();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
    ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
    Period period0 = new Period(1L, 1L, iSOChronology0);
    Period period1 = period0.plusMillis(0);
    Period period2 = period1.withMonths(0);
    LocalDateTime localDateTime1 = localDateTime0.withPeriodAdded(period2, 0);
    localDateTime1.property(dateTimeFieldType0);
}",1,
project,0,test107107,"public void test107107() throws Throwable {
    LocalDateTime localDateTime0 = LocalDateTime.now();
    localDateTime0.withDayOfYear(23118774);
    // Undeclared exception!
    try {
        localDateTime0.toDate();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value 23118774 for dayOfYear must be in the range [1,365]
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",0,
project,0,test108108,"public void test108108() throws Throwable {
    LocalDateTime localDateTime0 = LocalDateTime.now();
    LocalDateTime localDateTime1 = localDateTime0.withField((DateTimeFieldType) null, 12);
    localDateTime1.toDate();
}",0,
project,0,test111111,"public void test111111() throws Throwable {
    LocalDateTime localDateTime0 = LocalDateTime.now();
    LocalDateTime localDateTime1 = localDateTime0.minusMonths(0);
    localDateTime0.isAfter(localDateTime1);
    localDateTime0.toDate();
}",0,
project,0,test112112,"public void test112112() throws Throwable {
    LocalDateTime localDateTime0 = LocalDateTime.now();
    DurationFieldType durationFieldType0 = DurationFieldType.WEEKS_TYPE;
    localDateTime0.isSupported(durationFieldType0);
}",0,
project,0,test113113,"public void test113113() throws Throwable {
    LocalDateTime localDateTime0 = new LocalDateTime();
    localDateTime0.minuteOfHour();
}",0,
project,0,test114114,"public void test114114() throws Throwable {
    LocalDateTime localDateTime0 = LocalDateTime.now();
    LocalDateTime.Property localDateTime_Property0 = localDateTime0.centuryOfEra();
    Chronology chronology0 = localDateTime_Property0.getChronology();
    LocalDateTime.now(chronology0);
    localDateTime0.toDate();
}",0,
project,0,test115115,"public void test115115() throws Throwable {
    LocalDateTime localDateTime0 = new LocalDateTime();
    localDateTime0.get((DateTimeFieldType) null);
    // Undeclared exception!
    try {
        localDateTime0.getMillisOfDay();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The DateTimeFieldType must not be null
        //
        verifyException(""org.joda.time.LocalDateTime"", e);
    }
}",0,
project,0,test116116,"public void test116116() throws Throwable {
    LocalDateTime localDateTime0 = new LocalDateTime();
    localDateTime0.getWeekOfWeekyear();
    localDateTime0.toDate();
}",0,
project,0,test117117,"public void test117117() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    LocalDateTime localDateTime0 = new LocalDateTime((-29400194L), (Chronology) gJChronology0);
    LocalDateTime localDateTime1 = localDateTime0.minusSeconds(0);
    LocalDateTime localDateTime2 = localDateTime1.withWeekOfWeekyear(0);
    localDateTime2.toDate();
}",0,
project,0,test118118,"public void test118118() throws Throwable {
    DateTimeFieldType.weekyear();
    LocalDateTime localDateTime0 = new LocalDateTime((long) 0);
    LocalDateTime localDateTime1 = localDateTime0.plusWeeks(0);
    LocalDateTime.parse(""(%/GZG;C)v|9BXR7z"");
    localDateTime1.toDate();
}",0,
project,0,test119119,"public void test119119() throws Throwable {
    LocalDateTime localDateTime0 = new LocalDateTime();
    localDateTime0.minusWeeks(0);
    localDateTime0.dayOfWeek();
}",0,
project,0,test120120,"public void test120120() throws Throwable {
    LocalDateTime localDateTime0 = new LocalDateTime();
    localDateTime0.getEra();
}",0,
project,0,test121121,"public void test121121() throws Throwable {
    LocalDateTime localDateTime0 = LocalDateTime.now();
    localDateTime0.plusDays(0);
    MockDate mockDate0 = new MockDate();
    localDateTime0.toDate();
}",0,
project,0,test122122,"public void test122122() throws Throwable {
    LocalDateTime.fromDateFields((Date) null);
}",1,
project,0,test123123,"public void test123123() throws Throwable {
    LocalDateTime.now((Chronology) null);
}",0,
project,0,test124124,"public void test124124() throws Throwable {
    LocalDateTime localDateTime0 = new LocalDateTime();
    localDateTime0.isSupported((DurationFieldType) null);
    localDateTime0.toDate();
}",0,
project,0,test125125,"public void test125125() throws Throwable {
    LocalDateTime localDateTime0 = new LocalDateTime();
    localDateTime0.toString((String) null);
}",0,
project,0,test127127,"public void test127127() throws Throwable {
    LocalDateTime localDateTime0 = new LocalDateTime();
    localDateTime0.monthOfYear();
    localDateTime0.compareTo((ReadablePartial) localDateTime0);
}",0,
project,0,test128128,"public void test128128() throws Throwable {
    LocalDateTime localDateTime0 = LocalDateTime.now();
    LocalDateTime localDateTime1 = localDateTime0.plusMillis(1385);
    localDateTime0.compareTo((ReadablePartial) localDateTime1);
}",0,
project,0,test129129,"public void test129129() throws Throwable {
    LocalDateTime localDateTime0 = new LocalDateTime();
    localDateTime0.withFields((ReadablePartial) null);
    localDateTime0.toDate();
}",0,
project,0,test130130,"public void test130130() throws Throwable {
    LocalDateTime localDateTime0 = LocalDateTime.now();
    localDateTime0.isSupported((DateTimeFieldType) null);
}",0,
