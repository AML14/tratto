project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test0000,"public void test0000() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2973));
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
    LocalDate localDate0 = new LocalDate((Chronology) ethiopicChronology0);
    localDate0.minusDays((-2973));
}",0,
project,0,test0011,"public void test0011() throws Throwable {
    LocalDate localDate0 = LocalDate.now();
    localDate0.minusMonths((-1946));
}",0,
project,0,test0022,"public void test0022() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
    LocalDate localDate0 = new LocalDate(dateTimeZone0);
    localDate0.plusDays((-2082));
}",0,
project,0,test0033,"public void test0033() throws Throwable {
    LocalDate localDate0 = new LocalDate();
    localDate0.plusWeeks((-368));
}",0,
project,0,test0044,"public void test0044() throws Throwable {
    MockDate mockDate0 = new MockDate((-27), (-1320), 1900);
    LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
    localDate0.plusMonths((-21));
}",0,
project,0,test0055,"public void test0055() throws Throwable {
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    LocalDateTime localDateTime0 = new LocalDateTime(21600000L, (Chronology) buddhistChronology0);
    LocalDate localDate0 = new LocalDate(localDateTime0, (DateTimeZone) null);
    DurationFieldType durationFieldType0 = DurationFieldType.months();
    localDate0.withFieldAdded(durationFieldType0, 1);
}",1,
project,0,test0099,"public void test0099() throws Throwable {
    LocalDate localDate0 = new LocalDate();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
    localDate0.withField(dateTimeFieldType0, 2);
}",1,
project,0,test01010,"public void test01010() throws Throwable {
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
    LocalDate localDate0 = new LocalDate(dateTimeZone0);
    localDate0.withDayOfWeek(1);
}",0,
project,0,test01111,"public void test01111() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes((-87), 1);
    MonthDay monthDay0 = MonthDay.now(dateTimeZone0);
    LocalDate localDate0 = monthDay0.toLocalDate(1);
    LocalDate localDate1 = localDate0.minusYears((-2331));
    localDate1.toInterval(dateTimeZone0);
}",0,
project,0,test01212,"public void test01212() throws Throwable {
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
    LocalDate localDate0 = new LocalDate(0L, (Chronology) ethiopicChronology0);
    localDate0.toInterval((DateTimeZone) fixedDateTimeZone0);
}",0,
project,0,test01313,"public void test01313() throws Throwable {
    LocalDate localDate0 = new LocalDate();
    Days days0 = Days.MAX_VALUE;
    LocalDate localDate1 = localDate0.minus(days0);
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    localDate1.toInterval((DateTimeZone) fixedDateTimeZone0);
}",0,
project,0,test01414,"public void test01414() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    LocalDate localDate0 = new LocalDate(dateTimeZone0);
    LocalDate localDate1 = localDate0.withYear((-28800000));
    localDate1.toInterval();
}",0,
project,0,test01515,"public void test01515() throws Throwable {
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    LocalDate localDate0 = new LocalDate();
    LocalDate localDate1 = localDate0.withLocalMillis(21600000L);
    localDate1.toDateTimeAtStartOfDay((DateTimeZone) fixedDateTimeZone0);
}",0,
project,0,test01616,"public void test01616() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
    LocalDate localDate0 = new LocalDate(dateTimeZone0);
    localDate0.toDateTimeAtStartOfDay(dateTimeZone0);
}",0,
project,0,test01717,"public void test01717() throws Throwable {
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    LocalDateTime localDateTime0 = new LocalDateTime(21600000L, (Chronology) buddhistChronology0);
    LocalDate localDate0 = new LocalDate(localDateTime0, (DateTimeZone) null);
    LocalDate localDate1 = localDate0.minusMonths(1840);
    localDate1.toDateTimeAtStartOfDay();
}",0,
project,0,test01818,"public void test01818() throws Throwable {
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    Chronology chronology0 = ethiopicChronology0.withZone(fixedDateTimeZone0);
    LocalDate localDate0 = new LocalDate(0L, chronology0);
    localDate0.toDateTimeAtMidnight((DateTimeZone) fixedDateTimeZone0);
}",0,
project,0,test01919,"public void test01919() throws Throwable {
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    LocalDate localDate0 = LocalDate.now((DateTimeZone) fixedDateTimeZone0);
    localDate0.toDateTimeAtMidnight((DateTimeZone) fixedDateTimeZone0);
}",0,
project,0,test02020,"public void test02020() throws Throwable {
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    Chronology chronology0 = ethiopicChronology0.withZone(fixedDateTimeZone0);
    LocalDate localDate0 = new LocalDate(0L, chronology0);
    localDate0.toDateTimeAtMidnight();
}",0,
project,0,test02121,"public void test02121() throws Throwable {
    MockDate mockDate0 = new MockDate(0, (-1320), 1900);
    LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
    localDate0.toDateTimeAtCurrentTime(dateTimeZone0);
}",0,
project,0,test02222,"public void test02222() throws Throwable {
    LocalDate localDate0 = new LocalDate();
    LocalDate localDate1 = localDate0.withYear(40);
    localDate1.toDateTimeAtCurrentTime();
}",0,
project,0,test02323,"public void test02323() throws Throwable {
    LocalDate localDate0 = new LocalDate(1L);
    LocalTime localTime0 = new LocalTime(2, 41);
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2);
    localDate0.toDateTime(localTime0, dateTimeZone0);
}",1,
project,0,test02424,"public void test02424() throws Throwable {
    CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
    LocalDate localDate0 = LocalDate.now((Chronology) copticChronology0);
    LocalDate localDate1 = localDate0.withLocalMillis(0L);
    LocalDate localDate2 = localDate1.withDayOfMonth(1);
    LocalTime localTime0 = new LocalTime(3600000L, (Chronology) copticChronology0);
    localDate2.toDateTime(localTime0);
}",0,
project,0,test02525,"public void test02525() throws Throwable {
    ISOChronology iSOChronology0 = ISOChronology.getInstance();
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
    Chronology chronology0 = iSOChronology0.withUTC();
    LocalDate localDate0 = new LocalDate(0L, chronology0);
    localDate0.toDateMidnight(dateTimeZone0);
}",0,
project,0,test02626,"public void test02626() throws Throwable {
    LocalDate localDate0 = new LocalDate(1L);
    localDate0.toDateMidnight();
}",0,
project,0,test02727,"public void test02727() throws Throwable {
    LocalDate.parse(""2014-02-14"");
}",0,
project,0,test02828,"public void test02828() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    Calendar calendar0 = MockCalendar.getInstance(locale0);
    LocalDate localDate0 = LocalDate.fromCalendarFields(calendar0);
    LocalDate localDate1 = localDate0.plusYears((-3969));
    localDate1.getYear();
}",0,
project,0,test02929,"public void test02929() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    LocalDate localDate0 = new LocalDate(dateTimeZone0);
    LocalDate localDate1 = localDate0.withYear((-28800000));
    localDate1.getWeekyear();
}",0,
project,0,test03030,"public void test03030() throws Throwable {
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    Chronology chronology0 = ethiopicChronology0.withZone(fixedDateTimeZone0);
    LocalDate localDate0 = new LocalDate(0L, chronology0);
    localDate0.getLocalMillis();
}",0,
project,0,test03131,"public void test03131() throws Throwable {
    LocalDate localDate0 = new LocalDate();
    localDate0.getLocalMillis();
}",0,
project,0,test03232,"public void test03232() throws Throwable {
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
    LocalDate localDate0 = new LocalDate((-24L), (Chronology) ethiopicChronology0);
    localDate0.getLocalMillis();
}",0,
project,0,test03333,"public void test03333() throws Throwable {
    CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
    LocalDate localDate0 = LocalDate.now((Chronology) copticChronology0);
    localDate0.getField(1, (Chronology) copticChronology0);
}",1,
project,0,test03434,"public void test03434() throws Throwable {
    LocalDate localDate0 = new LocalDate();
    Days days0 = Days.MAX_VALUE;
    LocalDate localDate1 = localDate0.minus(days0);
    localDate1.getEra();
}",0,
project,0,test03535,"public void test03535() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes((-87), 1);
    MonthDay monthDay0 = MonthDay.now(dateTimeZone0);
    LocalDate localDate0 = monthDay0.toLocalDate(1);
    localDate0.getCenturyOfEra();
}",0,
project,0,test03636,"public void test03636() throws Throwable {
    LocalDate localDate0 = LocalDate.now();
    LocalDate localDate1 = localDate0.withYearOfCentury(0);
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
    localDate1.get(dateTimeFieldType0);
}",0,
project,0,test03737,"public void test03737() throws Throwable {
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-4001), 44, 44, 40, (-4001), 2);
    LocalDate localDate0 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
    // Undeclared exception!
    try {
        localDate0.withYearOfEra((-4001));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value -4001 for yearOfEra must be in the range [1,292278993]
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",0,
project,0,test03838,"public void test03838() throws Throwable {
    LocalDate localDate0 = new LocalDate();
    // Undeclared exception!
    try {
        localDate0.withYearOfCentury(1687);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value 1687 for yearOfCentury must be in the range [0,99]
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",0,
project,0,test03939,"public void test03939() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    LocalDate localDate0 = new LocalDate(0L, (Chronology) gJChronology0);
    // Undeclared exception!
    try {
        localDate0.withYear(0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value 0 for year is not supported
        //
        verifyException(""org.joda.time.chrono.JulianChronology"", e);
    }
}",0,
project,0,test04040,"public void test04040() throws Throwable {
    DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
    DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
    doReturn(87).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class), anyString(), anyInt());
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(islamicChronology0);
    LocalDate localDate0 = LocalDate.parse(""org.joda.time.field.PreciseDurationField"", dateTimeFormatter1);
    // Undeclared exception!
    try {
        localDate0.withWeekyear((-1320));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (IslamicChronology[UTC])
        //
        verifyException(""org.joda.time.chrono.LimitChronology"", e);
    }
}",0,
project,0,test04141,"public void test04141() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(3);
    LocalDate localDate0 = LocalDate.now(dateTimeZone0);
    // Undeclared exception!
    try {
        localDate0.withWeekOfWeekyear(0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value 0 for weekOfWeekyear must be in the range [1,52]
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",0,
project,0,test04242,"public void test04242() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    LocalDate localDate0 = new LocalDate(dateTimeZone0);
    JulianChronology julianChronology0 = JulianChronology.getInstance();
    Period period0 = new Period(0L, (Chronology) julianChronology0);
    Period period1 = period0.withMillis((-782));
    // Undeclared exception!
    try {
        localDate0.withPeriodAdded(period1, 10209375);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // Multiplication overflows an int: -782 * 10209375
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",0,
project,0,test04343,"public void test04343() throws Throwable {
    LocalDate localDate0 = new LocalDate();
    // Undeclared exception!
    try {
        localDate0.withMonthOfYear(20);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value 20 for monthOfYear must be in the range [1,12]
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",0,
project,0,test04444,"public void test04444() throws Throwable {
    DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
    DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
    doReturn(1761).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class), anyString(), anyInt());
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
    LocalDate localDate0 = LocalDate.parse(""WB]X}Vjj"", dateTimeFormatter0);
    // Undeclared exception!
    try {
        localDate0.withEra(2090);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value 2090 for era must be in the range [0,1]
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",0,
project,0,test04545,"public void test04545() throws Throwable {
    CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
    LocalDate localDate0 = new LocalDate((Chronology) copticChronology0);
    // Undeclared exception!
    try {
        localDate0.withDayOfYear(951);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value 951 for dayOfYear must be in the range [1,365]
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",0,
project,0,test04646,"public void test04646() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(37);
    LocalDate localDate0 = LocalDate.now(dateTimeZone0);
    // Undeclared exception!
    try {
        localDate0.withDayOfMonth((-108));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value -108 for dayOfMonth must be in the range [1,28]
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",0,
project,0,test04747,"public void test04747() throws Throwable {
    MockDate mockDate0 = new MockDate(0, (-1320), 1900);
    LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
    // Undeclared exception!
    try {
        localDate0.withCenturyOfEra((-2));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value -2 for centuryOfEra must be in the range [0,2922789]
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",0,
project,0,test04848,"public void test04848() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2973));
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
    LocalDate localDate0 = new LocalDate((Chronology) ethiopicChronology0);
    // Undeclared exception!
    try {
        localDate0.plusYears((-2973));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (EthiopicChronology[UTC])
        //
        verifyException(""org.joda.time.chrono.LimitChronology"", e);
    }
}",0,
project,0,test04949,"public void test04949() throws Throwable {
    LocalDate localDate0 = new LocalDate();
    Years years0 = Years.MAX_VALUE;
    // Undeclared exception!
    try {
        localDate0.plus(years0);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // The calculation caused an overflow: 2014 + 2147483647
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",0,
project,0,test05050,"public void test05050() throws Throwable {
    DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
    DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
    doReturn((-2147483646)).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class), anyString(), anyInt());
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
    // Undeclared exception!
    try {
        LocalDate.parse(""org.joda.time.field.PreciseDurationField"", dateTimeFormatter0);
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
    }
}",0,
project,0,test05151,"public void test05151() throws Throwable {
    // Undeclared exception!
    try {
        LocalDate.parse("">PN:7W}S(^"", (DateTimeFormatter) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.LocalDate"", e);
    }
}",0,
project,0,test05252,"public void test05252() throws Throwable {
    DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
    DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
    doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class), anyString(), anyInt());
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
    // Undeclared exception!
    try {
        LocalDate.parse(""WB]X}Vjj"", dateTimeFormatter0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid format: \""WB]X}Vjj\""
        //
        verifyException(""org.joda.time.format.DateTimeFormatter"", e);
    }
}",0,
project,0,test05353,"public void test05353() throws Throwable {
    // Undeclared exception!
    try {
        LocalDate.parse((String) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter"", e);
    }
}",0,
project,0,test05454,"public void test05454() throws Throwable {
    MockDate mockDate0 = new MockDate((-3620), 2587, 623191204, (-1688), 2477, 2587);
    LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
    // Undeclared exception!
    try {
        localDate0.minusYears(2147483639);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value -2145778905 for year must be in the range [-292275054,292278993]
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",0,
project,0,test05555,"public void test05555() throws Throwable {
    LocalDate localDate0 = new LocalDate();
    // Undeclared exception!
    try {
        localDate0.minusYears((-2147483646));
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // The calculation caused an overflow: 2014 + 2147483646
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",0,
project,0,test05656,"public void test05656() throws Throwable {
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
    LocalDate localDate0 = new LocalDate((Chronology) ethiopicChronology0);
    LocalDate localDate1 = localDate0.withWeekyear(1);
    // Undeclared exception!
    try {
        localDate1.minusWeeks(1900);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (EthiopicChronology[UTC])
        //
        verifyException(""org.joda.time.chrono.LimitChronology"", e);
    }
}",0,
project,0,test05757,"public void test05757() throws Throwable {
    LocalDate localDate0 = new LocalDate();
    Days days0 = Days.MIN_VALUE;
    // Undeclared exception!
    try {
        localDate0.minus(days0);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // Multiplication overflows an int: -2147483648 * -1
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",0,
project,0,test05858,"public void test05858() throws Throwable {
    Partial partial0 = new Partial();
    LocalDate localDate0 = null;
    try {
        localDate0 = new LocalDate(partial0, (DateTimeZone) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Field 'year' is not supported
        //
        verifyException(""org.joda.time.base.AbstractPartial"", e);
    }
}",0,
project,0,test05959,"public void test05959() throws Throwable {
    LocalDate localDate0 = null;
    try {
        localDate0 = new LocalDate(""eg1/`gL<X|%"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid format: \""eg1/`gL<X|%\""
        //
        verifyException(""org.joda.time.format.DateTimeFormatter"", e);
    }
}",0,
project,0,test06060,"public void test06060() throws Throwable {
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    LocalDate localDate0 = null;
    try {
        localDate0 = new LocalDate((-9223372036854775808L), (Chronology) buddhistChronology0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The instant is below the supported minimum of 0001-01-01T00:00:00.000Z (BuddhistChronology[UTC])
        //
        verifyException(""org.joda.time.chrono.LimitChronology"", e);
    }
}",0,
project,0,test06161,"public void test06161() throws Throwable {
    LocalDate localDate0 = null;
    try {
        localDate0 = new LocalDate(943, (-3028), (-1566), (Chronology) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value -3028 for monthOfYear must be in the range [1,12]
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",0,
project,0,test06262,"public void test06262() throws Throwable {
    LocalDate localDate0 = null;
    try {
        localDate0 = new LocalDate(0, 0, 0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value 0 for monthOfYear must be in the range [1,12]
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",1,
project,0,test06363,"public void test06363() throws Throwable {
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    LocalDateTime localDateTime0 = new LocalDateTime((long) (-2174), (Chronology) buddhistChronology0);
    LocalDate localDate0 = new LocalDate(localDateTime0, buddhistChronology0);
    localDate0.plusDays(3304);
}",0,
project,0,test06464,"public void test06464() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    LocalDate localDate0 = new LocalDate(dateTimeZone0);
    JulianChronology julianChronology0 = JulianChronology.getInstance();
    Period period0 = new Period(0L, (Chronology) julianChronology0);
    localDate0.withPeriodAdded(period0, 10209375);
}",0,
project,0,test06565,"public void test06565() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes((-87), 1);
    MonthDay monthDay0 = MonthDay.now(dateTimeZone0);
    LocalDate localDate0 = monthDay0.toLocalDate(1);
    localDate0.withPeriodAdded((ReadablePeriod) null, 247);
}",0,
project,0,test06666,"public void test06666() throws Throwable {
    CopticChronology copticChronology0 = CopticChronology.getInstance();
    LocalDate localDate0 = new LocalDate((Chronology) copticChronology0);
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-288));
    LocalTime localTime0 = new LocalTime((long) 1, dateTimeZone0);
    // Undeclared exception!
    try {
        localDate0.toDateTime(localTime0, dateTimeZone0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The chronology of the time does not match
        //
        verifyException(""org.joda.time.LocalDate"", e);
    }
}",0,
project,0,test06767,"public void test06767() throws Throwable {
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    LocalDate localDate0 = new LocalDate();
    LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) ethiopicChronology0);
    Date date0 = localDateTime0.toDate();
    LocalTime localTime0 = LocalTime.fromDateFields(date0);
    localDate0.toDateTime(localTime0, (DateTimeZone) fixedDateTimeZone0);
}",0,
project,0,test06868,"public void test06868() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
    LocalDate localDate0 = new LocalDate(dateTimeZone0);
    LocalDate localDate1 = localDate0.minusWeeks((-3165));
    localDate1.compareTo((ReadablePartial) localDate0);
}",0,
project,0,test06969,"public void test06969() throws Throwable {
    MockDate mockDate0 = new MockDate((-27), (-1320), 1900);
    LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
    LocalDate localDate1 = localDate0.plusMonths(3);
    LocalDate localDate2 = localDate0.plusMonths(3);
    localDate2.compareTo((ReadablePartial) localDate1);
}",0,
project,0,test07070,"public void test07070() throws Throwable {
    LocalDate localDate0 = new LocalDate();
    LocalTime localTime0 = new LocalTime((-2271L));
    // Undeclared exception!
    try {
        localDate0.compareTo((ReadablePartial) localTime0);
        fail(""Expecting exception: ClassCastException"");
    } catch (ClassCastException e) {
        //
        // ReadablePartial objects must have matching field types
        //
        verifyException(""org.joda.time.base.AbstractPartial"", e);
    }
}",0,
project,0,test07171,"public void test07171() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
    LocalDate localDate0 = new LocalDate(dateTimeZone0);
    LocalDate localDate1 = localDate0.minusWeeks((-3165));
    localDate0.compareTo((ReadablePartial) localDate1);
}",0,
project,0,test07272,"public void test07272() throws Throwable {
    MockDate mockDate0 = new MockDate((-27), (-1320), 1900);
    LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
    localDate0.compareTo((ReadablePartial) localDate0);
}",0,
project,0,test07373,"public void test07373() throws Throwable {
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
    LocalDate localDate0 = new LocalDate(0L, (Chronology) ethiopicChronology0);
    LocalDate.Property localDate_Property0 = localDate0.monthOfYear();
    LocalDate localDate1 = localDate_Property0.roundFloorCopy();
    localDate1.equals(localDate0);
}",0,
project,0,test07474,"public void test07474() throws Throwable {
    LocalDate localDate0 = LocalDate.now();
    DurationFieldType durationFieldType0 = DurationFieldType.SECONDS_TYPE;
    localDate0.isSupported(durationFieldType0);
}",0,
project,0,test07575,"public void test07575() throws Throwable {
    LocalDate localDate0 = new LocalDate();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
    localDate0.isSupported(dateTimeFieldType0);
}",0,
project,0,test07676,"public void test07676() throws Throwable {
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    LocalDateTime localDateTime0 = new LocalDateTime((long) (-2174), (Chronology) buddhistChronology0);
    LocalDate localDate0 = new LocalDate(localDateTime0, buddhistChronology0);
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
    localDate0.isSupported(dateTimeFieldType0);
}",0,
project,0,test07777,"public void test07777() throws Throwable {
    LocalDate localDate0 = new LocalDate();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
    localDate0.get(dateTimeFieldType0);
}",0,
project,0,test07878,"public void test07878() throws Throwable {
    DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
    DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
    doReturn(1761).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class), anyString(), anyInt());
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
    LocalDate localDate0 = LocalDate.parse(""WB]X}Vjj"", dateTimeFormatter0);
    localDate0.getValue(2);
}",0,
project,0,test07979,"public void test07979() throws Throwable {
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
    LocalDate localDate0 = new LocalDate(dateTimeZone0);
    localDate0.getValue(1);
}",1,
project,0,test08080,"public void test08080() throws Throwable {
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
    LocalDate localDate0 = new LocalDate(dateTimeZone0);
    localDate0.getDayOfMonth();
}",0,
project,0,test08181,"public void test08181() throws Throwable {
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
    StrictChronology strictChronology0 = StrictChronology.getInstance(ethiopicChronology0);
    LocalDate localDate0 = new LocalDate((long) (-1701), (Chronology) strictChronology0);
    localDate0.toDateTimeAtStartOfDay((DateTimeZone) null);
}",0,
project,0,test08282,"public void test08282() throws Throwable {
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    LocalDate localDate0 = new LocalDate((-24L), (Chronology) ethiopicChronology0);
    localDate0.toInterval((DateTimeZone) fixedDateTimeZone0);
}",0,
project,0,test08383,"public void test08383() throws Throwable {
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    LocalDateTime localDateTime0 = LocalDateTime.now((DateTimeZone) fixedDateTimeZone0);
    Date date0 = localDateTime0.toDate();
    LocalDate localDate0 = LocalDate.fromDateFields(date0);
    localDate0.toDateMidnight((DateTimeZone) fixedDateTimeZone0);
}",0,
project,0,test08484,"public void test08484() throws Throwable {
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
    StrictChronology strictChronology0 = StrictChronology.getInstance(iSOChronology0);
    LocalDate localDate0 = new LocalDate(2, 2, 2, strictChronology0);
}",0,
project,0,test08585,"public void test08585() throws Throwable {
    LocalDate localDate0 = new LocalDate();
    localDate0.getChronology();
}",0,
project,0,test08686,"public void test08686() throws Throwable {
    IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
    LocalDate localDate0 = new LocalDate((Chronology) islamicChronology0);
    localDate0.getMonthOfYear();
}",0,
project,0,test08787,"public void test08787() throws Throwable {
    DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, (DateTimeParser) null);
    // Undeclared exception!
    try {
        LocalDate.parse(""d4?"", dateTimeFormatter0);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // Parsing not supported
        //
        verifyException(""org.joda.time.format.DateTimeFormatter"", e);
    }
}",0,
project,0,test08888,"public void test08888() throws Throwable {
    LocalDate localDate0 = new LocalDate((DateTimeZone) null);
    localDate0.size();
}",0,
project,0,test08989,"public void test08989() throws Throwable {
    LocalDate localDate0 = new LocalDate();
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    localDate0.toDateTimeAtCurrentTime(dateTimeZone0);
}",0,
project,0,test09090,"public void test09090() throws Throwable {
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    LocalDate localDate0 = new LocalDate(0L, (Chronology) ethiopicChronology0);
    localDate0.toDateTimeAtMidnight((DateTimeZone) fixedDateTimeZone0);
}",0,
project,0,test09191,"public void test09191() throws Throwable {
    LocalDate localDate0 = new LocalDate(21, 8, 21);
}",1,
project,0,test09292,"public void test09292() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    LocalDate localDate0 = null;
    try {
        localDate0 = new LocalDate(gJChronology0, gJChronology0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // No partial converter found for type: org.joda.time.chrono.GJChronology
        //
        verifyException(""org.joda.time.convert.ConverterManager"", e);
    }
}",0,
project,0,test09393,"public void test09393() throws Throwable {
    LocalDate localDate0 = new LocalDate(1L);
    Locale locale0 = Locale.ROOT;
    localDate0.toString((String) null, locale0);
}",0,
project,0,test09494,"public void test09494() throws Throwable {
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
    LocalDate localDate0 = new LocalDate(0L, (Chronology) ethiopicChronology0);
    Locale locale0 = Locale.FRENCH;
    localDate0.toString(""4"", locale0);
}",0,
project,0,test09595,"public void test09595() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = gJChronology0.getZone();
    LocalDate localDate0 = new LocalDate((-1269L), dateTimeZone0);
    localDate0.toString((String) null);
}",0,
project,0,test09696,"public void test09696() throws Throwable {
    MockDate mockDate0 = new MockDate((-27), (-1320), 1900);
    LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
    // Undeclared exception!
    try {
        localDate0.toString(""org.joda.time.field.PreciseDurationField"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: o
        //
        verifyException(""org.joda.time.format.DateTimeFormat"", e);
    }
}",0,
project,0,test09797,"public void test09797() throws Throwable {
    LocalDate localDate0 = LocalDate.now();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
    // Undeclared exception!
    try {
        localDate0.property(dateTimeFieldType0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Field 'secondOfDay' is not supported
        //
        verifyException(""org.joda.time.LocalDate"", e);
    }
}",1,
project,0,test09898,"public void test09898() throws Throwable {
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(58, 58, (-2699));
    LocalDate localDate0 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
    // Undeclared exception!
    try {
        localDate0.property((DateTimeFieldType) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The DateTimeFieldType must not be null
        //
        verifyException(""org.joda.time.LocalDate"", e);
    }
}",1,
project,0,test09999,"public void test09999() throws Throwable {
    ISOChronology iSOChronology0 = ISOChronology.getInstance();
    DateTime dateTime0 = new DateTime((Chronology) iSOChronology0);
    LocalDate localDate0 = dateTime0.toLocalDate();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
    localDate0.property(dateTimeFieldType0);
}",1,
project,0,test100100,"public void test100100() throws Throwable {
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
    LocalDate localDate0 = new LocalDate((Chronology) buddhistChronology0);
    localDate0.minusDays(0);
}",0,
project,0,test101101,"public void test101101() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    LocalDate localDate0 = new LocalDate(dateTimeZone0);
    localDate0.minusDays(14);
}",0,
project,0,test102102,"public void test102102() throws Throwable {
    LocalDate localDate0 = new LocalDate();
    localDate0.minusWeeks(0);
}",0,
project,0,test103103,"public void test103103() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    LocalDate localDate0 = new LocalDate(dateTimeZone0);
    localDate0.minusMonths(0);
}",0,
project,0,test104104,"public void test104104() throws Throwable {
    LocalDate localDate0 = LocalDate.now();
    localDate0.minusYears(0);
}",0,
project,0,test105105,"public void test105105() throws Throwable {
    ISOChronology iSOChronology0 = ISOChronology.getInstance();
    LocalDate localDate0 = new LocalDate((Chronology) iSOChronology0);
    localDate0.plusDays(0);
}",0,
project,0,test106106,"public void test106106() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    LocalDate localDate0 = new LocalDate(dateTimeZone0);
    localDate0.plusWeeks(0);
}",0,
project,0,test107107,"public void test107107() throws Throwable {
    LocalDate localDate0 = new LocalDate(1L);
    localDate0.plusWeeks(51);
}",0,
project,0,test108108,"public void test108108() throws Throwable {
    CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
    LocalDate localDate0 = LocalDate.now((Chronology) copticChronology0);
    localDate0.plusMonths(0);
}",0,
project,0,test109109,"public void test109109() throws Throwable {
    CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
    LocalDate localDate0 = LocalDate.now((Chronology) copticChronology0);
    localDate0.plusYears(0);
}",0,
project,0,test110110,"public void test110110() throws Throwable {
    LocalDate localDate0 = new LocalDate(1L);
    localDate0.plusYears(2);
}",0,
project,0,test111111,"public void test111111() throws Throwable {
    CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
    LocalDate localDate0 = LocalDate.now((Chronology) copticChronology0);
    DateTime dateTime0 = DateTime.now((Chronology) copticChronology0);
    Hours hours0 = Hours.hoursBetween((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
    localDate0.withPeriodAdded(hours0, 0);
}",0,
project,0,test112112,"public void test112112() throws Throwable {
    LocalDate localDate0 = new LocalDate();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
    DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
    localDate0.withFieldAdded(durationFieldType0, 0);
}",0,
project,0,test113113,"public void test113113() throws Throwable {
    LocalDate localDate0 = LocalDate.now();
    DurationFieldType durationFieldType0 = DurationFieldType.WEEKYEARS_TYPE;
    LocalDate localDate1 = localDate0.withFieldAdded(durationFieldType0, (-2803));
    localDate1.toDateMidnight((DateTimeZone) null);
}",0,
project,0,test114114,"public void test114114() throws Throwable {
    LocalDate localDate0 = new LocalDate(0L);
    // Undeclared exception!
    try {
        localDate0.withFieldAdded((DurationFieldType) null, 2);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Field must not be null
        //
        verifyException(""org.joda.time.LocalDate"", e);
    }
}",1,
project,0,test115115,"public void test115115() throws Throwable {
    LocalDate localDate0 = new LocalDate();
    DurationFieldType durationFieldType0 = DurationFieldType.MILLIS_TYPE;
    // Undeclared exception!
    try {
        localDate0.withFieldAdded(durationFieldType0, 1900);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Field 'millis' is not supported
        //
        verifyException(""org.joda.time.LocalDate"", e);
    }
}",1,
project,0,test116116,"public void test116116() throws Throwable {
    ISOChronology iSOChronology0 = ISOChronology.getInstance();
    DateTime dateTime0 = new DateTime((Chronology) iSOChronology0);
    LocalDate localDate0 = dateTime0.toLocalDate();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
    // Undeclared exception!
    try {
        localDate0.withField(dateTimeFieldType0, (-1978));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Field 'clockhourOfDay' is not supported
        //
        verifyException(""org.joda.time.LocalDate"", e);
    }
}",1,
project,0,test117117,"public void test117117() throws Throwable {
    LocalDate localDate0 = new LocalDate(1L);
    // Undeclared exception!
    try {
        localDate0.withField((DateTimeFieldType) null, (-2857));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Field must not be null
        //
        verifyException(""org.joda.time.LocalDate"", e);
    }
}",1,
project,0,test118118,"public void test118118() throws Throwable {
    ISOChronology iSOChronology0 = ISOChronology.getInstance();
    DateTime dateTime0 = new DateTime((Chronology) iSOChronology0);
    LocalDate localDate0 = dateTime0.toLocalDate();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
    // Undeclared exception!
    try {
        localDate0.withField(dateTimeFieldType0, (-1978));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value -1978 for centuryOfEra must be in the range [0,2922789]
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",1,
project,0,test119119,"public void test119119() throws Throwable {
    LocalDate localDate0 = new LocalDate(1L);
    localDate0.withFields(localDate0);
}",0,
project,0,test120120,"public void test120120() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
    LocalDate localDate0 = new LocalDate(dateTimeZone0);
    GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
    LocalTime localTime0 = new LocalTime(3600L, (Chronology) gregorianChronology0);
    // Undeclared exception!
    try {
        localDate0.toDateTime(localTime0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The chronology of the time does not match
        //
        verifyException(""org.joda.time.LocalDate"", e);
    }
}",0,
project,0,test121121,"public void test121121() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(37);
    LocalDate localDate0 = LocalDate.now(dateTimeZone0);
    localDate0.toDateTime((LocalTime) null, dateTimeZone0);
}",1,
project,0,test122122,"public void test122122() throws Throwable {
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    LocalDate localDate0 = LocalDate.now((DateTimeZone) fixedDateTimeZone0);
    CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
    LocalDateTime localDateTime0 = new LocalDateTime((Chronology) copticChronology0);
    LocalTime localTime0 = new LocalTime(localDateTime0);
    // Undeclared exception!
    try {
        localDate0.toLocalDateTime(localTime0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The chronology of the time does not match
        //
        verifyException(""org.joda.time.LocalDate"", e);
    }
}",0,
project,0,test123123,"public void test123123() throws Throwable {
    IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
    LocalDate localDate0 = new LocalDate(100000000000000000L, (Chronology) islamicChronology0);
    // Undeclared exception!
    try {
        localDate0.toLocalDateTime((LocalTime) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The time must not be null
        //
        verifyException(""org.joda.time.LocalDate"", e);
    }
}",1,
project,0,test124124,"public void test124124() throws Throwable {
    CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
    LocalDate localDate0 = LocalDate.now((Chronology) copticChronology0);
    LocalTime localTime0 = new LocalTime(3600000L, (Chronology) copticChronology0);
    localDate0.toLocalDateTime(localTime0);
}",0,
project,0,test125125,"public void test125125() throws Throwable {
    LocalDate localDate0 = new LocalDate();
    localDate0.hashCode();
}",0,
project,0,test126126,"public void test126126() throws Throwable {
    LocalDate localDate0 = new LocalDate();
    Days days0 = Days.MAX_VALUE;
    LocalDate localDate1 = localDate0.minus(days0);
    localDate1.toDate();
}",0,
project,0,test127127,"public void test127127() throws Throwable {
    LocalDate localDate0 = new LocalDate();
    Integer integer0 = new Integer(5);
    localDate0.equals(integer0);
}",0,
project,0,test128128,"public void test128128() throws Throwable {
    LocalDate localDate0 = new LocalDate();
    localDate0.toDate();
}",0,
project,0,test130130,"public void test130130() throws Throwable {
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    LocalDate localDate0 = LocalDate.now((DateTimeZone) fixedDateTimeZone0);
    DurationFieldType durationFieldType0 = DurationFieldType.MONTHS_TYPE;
    boolean boolean0 = localDate0.isSupported(durationFieldType0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test131131,"public void test131131() throws Throwable {
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
    LocalDate localDate0 = new LocalDate(0L, (Chronology) ethiopicChronology0);
    boolean boolean0 = localDate0.isSupported((DurationFieldType) null);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test132132,"public void test132132() throws Throwable {
    CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
    LocalDate localDate0 = LocalDate.now((Chronology) copticChronology0);
    DateTime dateTime0 = DateTime.now((Chronology) copticChronology0);
    Hours hours0 = Hours.hoursBetween((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
    LocalDate localDate1 = localDate0.plus(hours0);
    assertSame(localDate1, localDate0);
}",0,
project,0,test133133,"public void test133133() throws Throwable {
    IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
    LocalDate localDate0 = new LocalDate((Chronology) islamicChronology0);
    boolean boolean0 = localDate0.isSupported((DateTimeFieldType) null);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test134134,"public void test134134() throws Throwable {
    LocalDate localDate0 = new LocalDate();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
    // Undeclared exception!
    try {
        localDate0.get(dateTimeFieldType0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Field 'secondOfDay' is not supported
        //
        verifyException(""org.joda.time.LocalDate"", e);
    }
}",0,
project,0,test135135,"public void test135135() throws Throwable {
    CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
    LocalDate localDate0 = LocalDate.now((Chronology) copticChronology0);
    // Undeclared exception!
    try {
        localDate0.get((DateTimeFieldType) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The DateTimeFieldType must not be null
        //
        verifyException(""org.joda.time.LocalDate"", e);
    }
}",0,
project,0,test136136,"public void test136136() throws Throwable {
    LocalDate localDate0 = new LocalDate();
    // Undeclared exception!
    try {
        localDate0.getValue(3);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Invalid index: 3
        //
        verifyException(""org.joda.time.LocalDate"", e);
    }
}",0,
project,0,test137137,"public void test137137() throws Throwable {
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
    LocalDate localDate0 = new LocalDate(0L, (Chronology) ethiopicChronology0);
    // Undeclared exception!
    try {
        localDate0.getField(62, (Chronology) ethiopicChronology0);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Invalid index: 62
        //
        verifyException(""org.joda.time.LocalDate"", e);
    }
}",1,
project,0,test138138,"public void test138138() throws Throwable {
    // Undeclared exception!
    try {
        LocalDate.fromDateFields((Date) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.joda.time.LocalDate"", e);
    }
}",1,
project,0,test139139,"public void test139139() throws Throwable {
    // Undeclared exception!
    try {
        LocalDate.fromCalendarFields((Calendar) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The calendar must not be null
        //
        verifyException(""org.joda.time.LocalDate"", e);
    }
}",0,
project,0,test140140,"public void test140140() throws Throwable {
    // Undeclared exception!
    try {
        LocalDate.now((Chronology) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // Chronology must not be null
        //
        verifyException(""org.joda.time.LocalDate"", e);
    }
}",0,
project,0,test141141,"public void test141141() throws Throwable {
    // Undeclared exception!
    try {
        LocalDate.now((DateTimeZone) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // Zone must not be null
        //
        verifyException(""org.joda.time.LocalDate"", e);
    }
}",1,
project,0,test145145,"public void test145145() throws Throwable {
    LocalDate localDate0 = new LocalDate();
    LocalDate.Property localDate_Property0 = localDate0.year();
    LocalDate localDate1 = localDate_Property0.getLocalDate();
    assertEquals(3, localDate1.size());
}",0,"assertEquals(0, localDate1.size())"
project,0,test150150,"public void test150150() throws Throwable {
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    LocalDateTime localDateTime0 = new LocalDateTime(21600000L, (Chronology) buddhistChronology0);
    LocalDate localDate0 = new LocalDate(localDateTime0, (DateTimeZone) null);
    Locale locale0 = Locale.CANADA_FRENCH;
    try {
        localDate0.toString(""14G/mB\""Y^M9;~k2RFk"", locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: B
        //
        verifyException(""org.joda.time.format.DateTimeFormat"", e);
    }
}",0,
project,0,test151151,"public void test151151() throws Throwable {
    LocalDate localDate0 = new LocalDate();
    int int0 = localDate0.getEra();
    assertEquals(1, int0);
}",0,"assertEquals(0, int0)"
project,0,test152152,"public void test152152() throws Throwable {
    LocalDate localDate0 = new LocalDate((Object) null);
    DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay();
    assertEquals(1392364800000L, dateTime0.getMillis());
}",0,"assertEquals(0, dateTime0.getMillis())"
project,0,test153153,"public void test153153() throws Throwable {
    LocalDate localDate0 = new LocalDate();
    int int0 = localDate0.getWeekOfWeekyear();
    assertEquals(7, int0);
}",0,
project,0,test154154,"public void test154154() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    LocalDate localDate0 = new LocalDate(dateTimeZone0);
    // Undeclared exception!
    try {
        localDate0.withDayOfWeek((-28800000));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value -28800000 for dayOfWeek must be in the range [1,7]
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",0,
project,0,test155155,"public void test155155() throws Throwable {
    CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
    LocalDate localDate0 = LocalDate.now((Chronology) copticChronology0);
    LocalTime localTime0 = new LocalTime(3600000L, (Chronology) copticChronology0);
    DateTime dateTime0 = localDate0.toDateTime(localTime0);
    assertEquals(1392368400000L, dateTime0.getMillis());
}",0,"assertEquals(0, dateTime0.getMillis())"
project,0,test156156,"public void test156156() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    LocalDate localDate0 = new LocalDate(dateTimeZone0);
    int int0 = localDate0.getYearOfEra();
    assertEquals(2014, int0);
}",0,
project,0,test157157,"public void test157157() throws Throwable {
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
    LocalDate localDate0 = new LocalDate(0L, (Chronology) ethiopicChronology0);
    LocalDate.Property localDate_Property0 = localDate0.era();
    assertNotNull(localDate_Property0);
}",0,
project,0,test158158,"public void test158158() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    LocalDate localDate0 = new LocalDate(dateTimeZone0);
    int int0 = localDate0.getWeekyear();
    assertEquals(2014, int0);
}",0,"assertEquals(1, int0)"
project,0,test159159,"public void test159159() throws Throwable {
    LocalDate localDate0 = new LocalDate((Object) null);
    LocalDate.Property localDate_Property0 = localDate0.dayOfWeek();
    assertNotNull(localDate_Property0);
}",0,
project,0,test160160,"public void test160160() throws Throwable {
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
    LocalDate localDate0 = new LocalDate(0L, (Chronology) ethiopicChronology0);
    int int0 = localDate0.getDayOfYear();
    assertEquals(112, int0);
}",0,"assertEquals(1, int0)"
project,0,test163163,"public void test163163() throws Throwable {
    LocalDate localDate0 = new LocalDate();
    LocalDate.Property localDate_Property0 = localDate0.weekyear();
    assertNotNull(localDate_Property0);
}",0,
project,0,test164164,"public void test164164() throws Throwable {
    LocalDate localDate0 = new LocalDate();
    LocalDate.Property localDate_Property0 = localDate0.dayOfMonth();
    assertNotNull(localDate_Property0);
}",0,
project,0,test165165,"public void test165165() throws Throwable {
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
    LocalDate localDate0 = new LocalDate(0L, (Chronology) ethiopicChronology0);
    int int0 = localDate0.getYearOfCentury();
    assertEquals(62, int0);
}",0,"assertEquals(0, int0)"
project,0,test166166,"public void test166166() throws Throwable {
    // Undeclared exception!
    try {
        LocalDate.parse(""k+4%tE`lkM32"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid format: \""k+4%tE`lkM32\""
        //
        verifyException(""org.joda.time.format.DateTimeFormatter"", e);
    }
}",0,
project,0,test167167,"public void test167167() throws Throwable {
    LocalDate localDate0 = new LocalDate();
    int int0 = localDate0.getCenturyOfEra();
    assertEquals(20, int0);
}",0,"assertEquals(0, int0)"
project,0,test168168,"public void test168168() throws Throwable {
    LocalDate localDate0 = new LocalDate();
    LocalDate.Property localDate_Property0 = localDate0.weekOfWeekyear();
    assertNotNull(localDate_Property0);
}",0,
project,0,test169169,"public void test169169() throws Throwable {
    LocalDate localDate0 = new LocalDate();
    int int0 = localDate0.getDayOfWeek();
    assertEquals(5, int0);
}",0,"assertEquals(0, int0)"
project,0,test170170,"public void test170170() throws Throwable {
    LocalDate localDate0 = new LocalDate();
    LocalDate localDate1 = localDate0.withWeekOfWeekyear(1);
    assertNotSame(localDate1, localDate0);
}",0,
project,0,test171171,"public void test171171() throws Throwable {
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
    LocalDate localDate0 = new LocalDate(0L, (Chronology) ethiopicChronology0);
    DateTime dateTime0 = localDate0.toDateTimeAtMidnight();
    assertEquals((-57600000L), dateTime0.getMillis());
}",0,"assertEquals(0, dateTime0.getMillis())"
project,0,test172172,"public void test172172() throws Throwable {
    LocalDate localDate0 = new LocalDate();
    LocalDate localDate1 = localDate0.withCenturyOfEra(14);
    assertNotSame(localDate1, localDate0);
}",0,
project,0,test173173,"public void test173173() throws Throwable {
    MockDate mockDate0 = new MockDate((-27), (-1320), 1900);
    LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
    LocalDate localDate1 = localDate0.withYearOfEra(5);
    assertNotSame(localDate1, localDate0);
}",0,
project,0,test174174,"public void test174174() throws Throwable {
    LocalDate localDate0 = new LocalDate();
    DateMidnight dateMidnight0 = localDate0.toDateMidnight();
    assertEquals(1392364800000L, dateMidnight0.getMillis());
}",0,"assertEquals(0, dateMidnight0.getMillis())"
project,0,test175175,"public void test175175() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    LocalDate localDate0 = new LocalDate(dateTimeZone0);
    int int0 = localDate0.getYear();
    assertEquals(2014, int0);
}",0,"assertEquals(0, int0)"
project,0,test176176,"public void test176176() throws Throwable {
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
    LocalDate localDate0 = new LocalDate(0L, (Chronology) ethiopicChronology0);
    LocalDate localDate1 = localDate0.withMonthOfYear(1);
    assertNotSame(localDate1, localDate0);
}",0,
project,0,test177177,"public void test177177() throws Throwable {
    LocalDate localDate0 = new LocalDate(1L);
    LocalDate localDate1 = localDate0.withDayOfYear(2);
    assertNotSame(localDate1, localDate0);
}",0,
project,0,test178178,"public void test178178() throws Throwable {
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    LocalDate localDate0 = LocalDate.now((DateTimeZone) fixedDateTimeZone0);
    DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime();
    assertEquals(3, localDate0.size());
}",0,"assertEquals(0, localDate0.size())"
project,0,test178179,"public void test178179() throws Throwable {
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    LocalDate localDate0 = LocalDate.now((DateTimeZone) fixedDateTimeZone0);
    DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime();
    assertEquals(1392409281320L, dateTime0.getMillis());
}",0,"assertEquals(0, dateTime0.getMillis())"
project,0,test179180,"public void test179180() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    LocalDate localDate0 = new LocalDate(dateTimeZone0);
    Interval interval0 = localDate0.toInterval();
    assertEquals(1392451200000L, interval0.getEndMillis());
}",0,"assertEquals(0, interval0.getEndMillis())"
project,0,test179181,"public void test179181() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    LocalDate localDate0 = new LocalDate(dateTimeZone0);
    Interval interval0 = localDate0.toInterval();
    assertEquals(1392364800000L, interval0.getStartMillis());
}",0,"assertEquals(0, interval0.getStartMillis())"
project,0,test181183,"public void test181183() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    LocalDate localDate0 = new LocalDate(dateTimeZone0);
    String string0 = localDate0.toString();
    assertEquals(""2014-02-14"", string0);
}",0,
project,0,test182184,"public void test182184() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    LocalDate localDate0 = new LocalDate(dateTimeZone0);
    LocalDate localDate1 = localDate0.withEra(0);
    assertNotSame(localDate1, localDate0);
}",0,
