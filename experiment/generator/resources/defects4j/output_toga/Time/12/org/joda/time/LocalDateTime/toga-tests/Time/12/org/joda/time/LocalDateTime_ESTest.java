/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 20 12:16:32 GMT 2023
 */
package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.joda.time.Chronology;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class LocalDateTime_ESTest extends LocalDateTime_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.toDate();
        LocalDateTime.Property localDateTime_Property0 = localDateTime0.year();
        localDateTime_Property0.getLeapAmount();
        localDateTime0.plusMonths(0);
        MockDate mockDate0 = new MockDate(0, 0, 0);
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        LocalDateTime.parse("h");
    }

    @Test(timeout = 4000)
    public void test0022() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime((-169817918680L), (DateTimeZone) null);
        localDateTime0.toDate();
    }

    @Test(timeout = 4000)
    public void test0033() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        localDateTime0.year();
    }

    @Test(timeout = 4000)
    public void test0044() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.withFields(localDateTime0);
    }

    @Test(timeout = 4000)
    public void test0055() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime((Object) null);
        LocalDateTime.Property localDateTime_Property0 = localDateTime0.centuryOfEra();
        Locale locale0 = Locale.KOREAN;
        localDateTime_Property0.getMaximumTextLength(locale0);
        LocalDateTime localDateTime1 = localDateTime_Property0.withMaximumValue();
        localDateTime0.year();
        LocalDateTime.Property localDateTime_Property1 = localDateTime1.yearOfCentury();
        localDateTime_Property1.roundHalfEvenCopy();
    }

    @Test(timeout = 4000)
    public void test0066() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.withWeekyear(32);
    }

    @Test(timeout = 4000)
    public void test0077() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        LocalDateTime.Property localDateTime_Property0 = localDateTime0.secondOfMinute();
        localDateTime_Property0.isLeap();
    }

    @Test(timeout = 4000)
    public void test0088() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        LocalDateTime.Property localDateTime_Property0 = localDateTime0.hourOfDay();
        MockDate mockDate0 = new MockDate();
        LocalDateTime localDateTime1 = localDateTime0.withFields(localDateTime0);
        LocalDateTime localDateTime2 = localDateTime_Property0.roundHalfFloorCopy();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        dateTimeFieldType0.getRangeDurationType();
        localDateTime1.property(dateTimeFieldType0);
        System.setCurrentTimeMillis((-1L));
        localDateTime2.toDate();
    }

    @Test(timeout = 4000)
    public void test0099() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        LocalDateTime.Property localDateTime_Property0 = localDateTime0.weekOfWeekyear();
        localDateTime_Property0.withMaximumValue();
        localDateTime_Property0.getMinimumValueOverall();
    }

    @Test(timeout = 4000)
    public void test01010() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        LocalDateTime.Property localDateTime_Property0 = localDateTime0.centuryOfEra();
        localDateTime_Property0.withMinimumValue();
        localDateTime_Property0.roundCeilingCopy();
    }

    @Test(timeout = 4000)
    public void test01111() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        LocalDateTime.Property localDateTime_Property0 = localDateTime0.monthOfYear();
        localDateTime_Property0.getMinimumValueOverall();
    }

    @Test(timeout = 4000)
    public void test01212() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.plusYears(688);
        MockDate mockDate0 = new MockDate();
    }

    @Test(timeout = 4000)
    public void test01313() throws Throwable {
        int int0 = 0;
        LocalDateTime localDateTime0 = new LocalDateTime(0, 12, 0, 12, 12, 64);
        localDateTime0.withYearOfEra(int0);
        localDateTime0.toLocalDate();
    }

    @Test(timeout = 4000)
    public void test01414() throws Throwable {
        Calendar calendar0 = MockCalendar.getInstance();
        LocalDateTime.fromCalendarFields(calendar0);
    }

    @Test(timeout = 4000)
    public void test01515() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
        localDateTime0.withFieldAdded(durationFieldType0, 15);
    }

    @Test(timeout = 4000)
    public void test01616() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
        LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
        DurationFieldType durationFieldType0 = DurationFieldType.minutes();
        LocalDateTime localDateTime1 = localDateTime0.withFieldAdded(durationFieldType0, 0);
        Seconds seconds0 = Seconds.ZERO;
        Duration duration0 = seconds0.toStandardDuration();
        localDateTime1.withDurationAdded(duration0, 0);
        localDateTime0.getLocalMillis();
        localDateTime1.getWeekyear();
    }

    @Test(timeout = 4000)
    public void test01717() throws Throwable {
        ISOChronology iSOChronology0 = ISOChronology.getInstance();
        LocalDateTime.now((Chronology) iSOChronology0);
    }

    @Test(timeout = 4000)
    public void test01818() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        localDateTime0.plusMillis(2895);
    }

    @Test(timeout = 4000)
    public void test01919() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.withSecondOfMinute(2);
        MockDate mockDate0 = new MockDate();
    }

    @Test(timeout = 4000)
    public void test02020() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        LocalDate localDate0 = new LocalDate();
        localDateTime0.equals(localDate0);
        localDateTime0.toDate();
    }

    @Test(timeout = 4000)
    public void test02121() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.minusSeconds(1202);
    }

    @Test(timeout = 4000)
    public void test02222() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.withMillisOfSecond(32);
    }

    @Test(timeout = 4000)
    public void test02323() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        LocalDateTime localDateTime1 = localDateTime0.withDayOfWeek((-3077));
        localDateTime1.toDate();
    }

    @Test(timeout = 4000)
    public void test02424() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        localDateTime0.withMonthOfYear(255);
        localDateTime0.toDate();
    }

    @Test(timeout = 4000)
    public void test02525() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.getYearOfCentury();
        localDateTime0.toDate();
    }

    @Test(timeout = 4000)
    public void test02626() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        LocalDate localDate0 = LocalDate.now();
        localDateTime0.compareTo((ReadablePartial) localDate0);
    }

    @Test(timeout = 4000)
    public void test02727() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.getCenturyOfEra();
        localDateTime0.toDate();
    }

    @Test(timeout = 4000)
    public void test02828() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        localDateTime0.withDayOfMonth(736);
        DateTimeFieldType.halfdayOfDay();
    }

    @Test(timeout = 4000)
    public void test02929() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.withYear(569);
        localDateTime0.toDate();
    }

    @Test(timeout = 4000)
    public void test03030() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
        LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
        LocalDateTime localDateTime1 = localDateTime0.minusHours(0);
        localDateTime1.toDate();
    }

    @Test(timeout = 4000)
    public void test03131() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        localDateTime0.minusMinutes(0);
        System.setCurrentTimeMillis((-4736L));
    }

    @Test(timeout = 4000)
    public void test03232() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.minusYears((-2147483598));
        localDateTime0.toDate();
    }

    @Test(timeout = 4000)
    public void test03333() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
        localDateTime0.withField(dateTimeFieldType0, (-1502));
        localDateTime0.toDate();
    }

    @Test(timeout = 4000)
    public void test03434() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.getMillisOfDay();
        localDateTime0.toDate();
    }

    @Test(timeout = 4000)
    public void test03535() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.plusMinutes(1217);
    }

    @Test(timeout = 4000)
    public void test03636() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.withDate((-90), (-90), (-90));
    }

    @Test(timeout = 4000)
    public void test03737() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        localDateTime0.plusMillis(0);
        localDateTime0.toDate();
    }

    @Test(timeout = 4000)
    public void test03838() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.plusMonths(1480);
        localDateTime0.toDate();
    }

    @Test(timeout = 4000)
    public void test03939() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime(12, 12, 12, 5, 1);
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        localDateTime0.property(dateTimeFieldType0);
    }

    @Test(timeout = 4000)
    public void test04040() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime(1418L);
        LocalDateTime localDateTime1 = localDateTime0.minusMillis(0);
        localDateTime1.toDate();
    }

    @Test(timeout = 4000)
    public void test04141() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        LocalDateTime localDateTime0 = null;
        localDateTime0 = new LocalDateTime(fixedDateTimeZone0, fixedDateTimeZone0);
    }

    @Test(timeout = 4000)
    public void test04242() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
        LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
        localDateTime0.minusDays(0);
        System.setCurrentTimeMillis(1381522881320L);
    }

    @Test(timeout = 4000)
    public void test04343() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        LocalDateTime.Property localDateTime_Property0 = localDateTime0.yearOfCentury();
        localDateTime_Property0.getLeapAmount();
        Integer integer0 = new Integer(0);
        localDateTime_Property0.addWrapFieldToCopy(0);
        DateTimeFieldType.clockhourOfHalfday();
        Integer integer1 = new Integer(0);
        localDateTime0.toString("org.joda.time.LocalDateTime$Property");
    }

    @Test(timeout = 4000)
    public void test04444() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        LocalDateTime.Property localDateTime_Property0 = localDateTime0.secondOfMinute();
        localDateTime_Property0.getLocalDateTime();
    }

    @Test(timeout = 4000)
    public void test04545() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.plus((ReadableDuration) null);
        localDateTime0.toDate();
    }

    @Test(timeout = 4000)
    public void test04646() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        localDateTime0.minus((ReadableDuration) null);
        localDateTime0.toDate();
    }

    @Test(timeout = 4000)
    public void test04747() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.withTime(23034375, 23034375, 23034375, 23034375);
        localDateTime0.toDate();
    }

    @Test(timeout = 4000)
    public void test04848() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.getFieldType(883);
        localDateTime0.toDate();
    }

    @Test(timeout = 4000)
    public void test04949() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.getDayOfYear();
        LocalDateTime localDateTime1 = new LocalDateTime();
    }

    @Test(timeout = 4000)
    public void test05050() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        MutablePeriod mutablePeriod0 = new MutablePeriod();
        localDateTime0.minus((ReadablePeriod) mutablePeriod0);
    }

    @Test(timeout = 4000)
    public void test05151() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.withHourOfDay(1000);
    }

    @Test(timeout = 4000)
    public void test05252() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.dayOfWeek();
    }

    @Test(timeout = 4000)
    public void test05353() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        Locale locale0 = Locale.CHINESE;
        localDateTime0.toString("|Er", locale0);
        localDateTime0.toDate();
    }

    @Test(timeout = 4000)
    public void test05454() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        localDateTime0.plus((ReadablePeriod) null);
        localDateTime0.toDate();
    }

    @Test(timeout = 4000)
    public void test05555() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        Weeks weeks0 = Weeks.ONE;
        Duration duration0 = weeks0.toStandardDuration();
        localDateTime0.plus((ReadableDuration) duration0);
        localDateTime0.toDate();
    }

    @Test(timeout = 4000)
    public void test05656() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.plusDays(878);
        LocalDateTime.Property localDateTime_Property0 = localDateTime0.hourOfDay();
        localDateTime_Property0.addToCopy(878);
    }

    @Test(timeout = 4000)
    public void test05757() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        localDateTime0.minusHours(328);
    }

    @Test(timeout = 4000)
    public void test05858() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        localDateTime0.millisOfSecond();
    }

    @Test(timeout = 4000)
    public void test05959() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.getWeekyear();
    }

    @Test(timeout = 4000)
    public void test06060() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        localDateTime0.withYearOfEra(14);
    }

    @Test(timeout = 4000)
    public void test06161() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        localDateTime0.withEra(23118750);
        localDateTime0.toDate();
    }

    @Test(timeout = 4000)
    public void test06262() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.getValue(153);
        localDateTime0.toDate();
    }

    @Test(timeout = 4000)
    public void test06363() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.weekyear();
    }

    @Test(timeout = 4000)
    public void test06464() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        localDateTime0.minusDays((-198));
    }

    @Test(timeout = 4000)
    public void test06565() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.withMillisOfDay(1008);
    }

    @Test(timeout = 4000)
    public void test06666() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        localDateTime0.minusMonths((-2147451595));
    }

    @Test(timeout = 4000)
    public void test06767() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.plusHours(40);
    }

    @Test(timeout = 4000)
    public void test06868() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        LocalDateTime localDateTime1 = localDateTime0.withWeekOfWeekyear(2390);
        localDateTime1.toDate();
    }

    @Test(timeout = 4000)
    public void test06969() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.withYearOfCentury(1008);
    }

    @Test(timeout = 4000)
    public void test07070() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.toDateTime();
        localDateTime0.toDate();
    }

    @Test(timeout = 4000)
    public void test07171() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.dayOfYear();
    }

    @Test(timeout = 4000)
    public void test07272() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.withCenturyOfEra(1217);
        localDateTime0.toDate();
    }

    @Test(timeout = 4000)
    public void test07373() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.equals(localDateTime0);
        System.setCurrentTimeMillis(404L);
    }

    @Test(timeout = 4000)
    public void test07474() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        localDateTime0.toLocalDate();
    }

    @Test(timeout = 4000)
    public void test07575() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        localDateTime0.withMinuteOfHour((-665));
    }

    @Test(timeout = 4000)
    public void test07676() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        localDateTime0.era();
        localDateTime0.toDate();
    }

    @Test(timeout = 4000)
    public void test07777() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.yearOfEra();
    }

    @Test(timeout = 4000)
    public void test07878() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        localDateTime0.minusMinutes(23118750);
    }

    @Test(timeout = 4000)
    public void test07979() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.toLocalTime();
        localDateTime0.toDate();
    }

    @Test(timeout = 4000)
    public void test08080() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.hourOfDay();
        localDateTime0.toDate();
        LocalDateTime.Property localDateTime_Property0 = localDateTime0.year();
        localDateTime_Property0.setCopy("{gmi");
        localDateTime_Property0.getLeapAmount();
    }

    @Test(timeout = 4000)
    public void test08181() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        localDateTime0.plusSeconds((-4));
    }

    @Test(timeout = 4000)
    public void test08282() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        localDateTime0.getYearOfEra();
    }

    @Test(timeout = 4000)
    public void test08383() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.minusMillis((-376));
        localDateTime0.toDate();
    }

    @Test(timeout = 4000)
    public void test08484() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.getDayOfWeek();
    }

    @Test(timeout = 4000)
    public void test08585() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        localDateTime0.millisOfDay();
    }

    @Test(timeout = 4000)
    public void test08686() throws Throwable {
        LocalDateTime.now((DateTimeZone) null);
    }

    @Test(timeout = 4000)
    public void test08787() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.minusYears(0);
        localDateTime0.toDate();
    }

    @Test(timeout = 4000)
    public void test08888() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.minusWeeks(103);
        localDateTime0.toDate();
    }

    @Test(timeout = 4000)
    public void test08989() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        LocalDateTime localDateTime1 = localDateTime0.withWeekyear((-1921));
        localDateTime1.toDate();
    }

    @Test(timeout = 4000)
    public void test09090() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.toString();
    }

    @Test(timeout = 4000)
    public void test09191() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) gJChronology0);
        localDateTime0.toDate();
    }

    @Test(timeout = 4000)
    public void test09292() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.dayOfMonth();
    }

    @Test(timeout = 4000)
    public void test09393() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.toLocalDate();
        localDateTime0.plusHours(0);
    }

    @Test(timeout = 4000)
    public void test09494() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        LocalDateTime localDateTime1 = localDateTime0.plusSeconds(0);
        localDateTime1.toDate();
    }

    @Test(timeout = 4000)
    public void test09595() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields((Calendar) null);
        localDateTime0.toDate();
    }

    @Test(timeout = 4000)
    public void test09696() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        Locale locale0 = Locale.UK;
        localDateTime0.toString((String) null, locale0);
        localDateTime0.toDate();
    }

    @Test(timeout = 4000)
    public void test09797() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        localDateTime0.plusYears(0);
        localDateTime0.toDate();
    }

    @Test(timeout = 4000)
    public void test09898() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.property((DateTimeFieldType) null);
    }

    @Test(timeout = 4000)
    public void test09999() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.hourOfDay();
        localDateTime0.toDate();
        LocalDateTime.Property localDateTime_Property0 = localDateTime0.year();
        localDateTime_Property0.roundFloorCopy();
        LocalDateTime localDateTime1 = localDateTime_Property0.roundCeilingCopy();
        localDateTime0.withFields(localDateTime1);
        localDateTime0.toDate();
    }

    @Test(timeout = 4000)
    public void test100100() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        localDateTime0.toString("Field must not be null");
    }

    @Test(timeout = 4000)
    public void test101101() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        localDateTime0.monthOfYear();
    }

    @Test(timeout = 4000)
    public void test102102() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.hourOfDay();
        localDateTime0.toDate();
        LocalDateTime.Property localDateTime_Property0 = localDateTime0.year();
        localDateTime_Property0.addToCopy(1392389541320L);
        localDateTime_Property0.roundCeilingCopy();
    }

    @Test(timeout = 4000)
    public void test103103() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.plusWeeks(112);
        localDateTime0.toDate();
    }

    @Test(timeout = 4000)
    public void test104104() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
        localDateTime0.property(dateTimeFieldType0);
    }

    @Test(timeout = 4000)
    public void test105105() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime(1991562380481320L);
    }

    @Test(timeout = 4000)
    public void test106106() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
        LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
        localDateTime0.toDate();
        localDateTime0.dayOfWeek();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
        ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
        Period period0 = new Period(1L, 1L, iSOChronology0);
        Period period1 = period0.plusMillis(0);
        Period period2 = period1.withMonths(0);
        LocalDateTime localDateTime1 = localDateTime0.withPeriodAdded(period2, 0);
        localDateTime1.property(dateTimeFieldType0);
    }

    @Test(timeout = 4000)
    public void test107107() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        localDateTime0.withDayOfYear(23118774);
        localDateTime0.toDate();
    }

    @Test(timeout = 4000)
    public void test108108() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        LocalDateTime localDateTime1 = localDateTime0.withField((DateTimeFieldType) null, 12);
        localDateTime1.toDate();
    }

    @Test(timeout = 4000)
    public void test109109() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
        LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
        localDateTime0.plusMinutes(0);
        System.setCurrentTimeMillis(1381522881320L);
    }

    @Test(timeout = 4000)
    public void test110110() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.hourOfDay();
        LocalDateTime.Property localDateTime_Property0 = localDateTime0.year();
        localDateTime_Property0.getLeapAmount();
        LocalDateTime localDateTime1 = localDateTime_Property0.roundCeilingCopy();
        localDateTime1.millisOfDay();
        localDateTime_Property0.roundHalfCeilingCopy();
    }

    @Test(timeout = 4000)
    public void test111111() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        LocalDateTime localDateTime1 = localDateTime0.minusMonths(0);
        localDateTime0.isAfter(localDateTime1);
        localDateTime0.toDate();
    }

    @Test(timeout = 4000)
    public void test112112() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        DurationFieldType durationFieldType0 = DurationFieldType.WEEKS_TYPE;
        localDateTime0.isSupported(durationFieldType0);
    }

    @Test(timeout = 4000)
    public void test113113() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.minuteOfHour();
    }

    @Test(timeout = 4000)
    public void test114114() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        LocalDateTime.Property localDateTime_Property0 = localDateTime0.centuryOfEra();
        Chronology chronology0 = localDateTime_Property0.getChronology();
        LocalDateTime.now(chronology0);
        localDateTime0.toDate();
    }

    @Test(timeout = 4000)
    public void test115115() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.get((DateTimeFieldType) null);
        localDateTime0.getMillisOfDay();
    }

    @Test(timeout = 4000)
    public void test116116() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.getWeekOfWeekyear();
        localDateTime0.toDate();
    }

    @Test(timeout = 4000)
    public void test117117() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        LocalDateTime localDateTime0 = new LocalDateTime((-29400194L), (Chronology) gJChronology0);
        LocalDateTime localDateTime1 = localDateTime0.minusSeconds(0);
        LocalDateTime localDateTime2 = localDateTime1.withWeekOfWeekyear(0);
        localDateTime2.toDate();
    }

    @Test(timeout = 4000)
    public void test118118() throws Throwable {
        DateTimeFieldType.weekyear();
        LocalDateTime localDateTime0 = new LocalDateTime((long) 0);
        LocalDateTime localDateTime1 = localDateTime0.plusWeeks(0);
        LocalDateTime.parse("(%/GZG;C)v|9BXR7z");
        localDateTime1.toDate();
    }

    @Test(timeout = 4000)
    public void test119119() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.minusWeeks(0);
        localDateTime0.dayOfWeek();
    }

    @Test(timeout = 4000)
    public void test120120() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.getEra();
    }

    @Test(timeout = 4000)
    public void test121121() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        localDateTime0.plusDays(0);
        MockDate mockDate0 = new MockDate();
        localDateTime0.toDate();
    }

    @Test(timeout = 4000)
    public void test122122() throws Throwable {
        LocalDateTime.fromDateFields((Date) null);
    }

    @Test(timeout = 4000)
    public void test123123() throws Throwable {
        LocalDateTime.now((Chronology) null);
    }

    @Test(timeout = 4000)
    public void test124124() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.isSupported((DurationFieldType) null);
        localDateTime0.toDate();
    }

    @Test(timeout = 4000)
    public void test125125() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.toString((String) null);
    }

    @Test(timeout = 4000)
    public void test126126() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        localDateTime0.withFieldAdded((DurationFieldType) null, 0);
        long long0 = 60000L;
        System.setCurrentTimeMillis(long0);
    }

    @Test(timeout = 4000)
    public void test127127() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.monthOfYear();
        localDateTime0.compareTo((ReadablePartial) localDateTime0);
    }

    @Test(timeout = 4000)
    public void test128128() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        LocalDateTime localDateTime1 = localDateTime0.plusMillis(1385);
        localDateTime0.compareTo((ReadablePartial) localDateTime1);
    }

    @Test(timeout = 4000)
    public void test129129() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        localDateTime0.withFields((ReadablePartial) null);
        localDateTime0.toDate();
    }

    @Test(timeout = 4000)
    public void test130130() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        localDateTime0.isSupported((DateTimeFieldType) null);
    }
}
