{
  "test124124" : {
    "methodSignature" : "public Date toDate()",
    "methodName" : "toDate",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test124124() throws Throwable {\n    LocalDateTime localDateTime0 = new LocalDateTime();\n    localDateTime0.isSupported((DurationFieldType) null);\n    localDateTime0.toDate();\n}",
    "testName" : "test124124"
  },
  "test0088" : {
    "methodSignature" : "public Date toDate()",
    "methodName" : "toDate",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0088() throws Throwable {\n    LocalDateTime localDateTime0 = new LocalDateTime();\n    LocalDateTime.Property localDateTime_Property0 = localDateTime0.hourOfDay();\n    MockDate mockDate0 = new MockDate();\n    LocalDateTime localDateTime1 = localDateTime0.withFields(localDateTime0);\n    LocalDateTime localDateTime2 = localDateTime_Property0.roundHalfFloorCopy();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();\n    dateTimeFieldType0.getRangeDurationType();\n    localDateTime1.property(dateTimeFieldType0);\n    System.setCurrentTimeMillis((-1L));\n    localDateTime2.toDate();\n}",
    "testName" : "test0088"
  },
  "test107107" : {
    "methodSignature" : "public Date toDate()",
    "methodName" : "toDate",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test107107() throws Throwable {\n    LocalDateTime localDateTime0 = LocalDateTime.now();\n    localDateTime0.withDayOfYear(23118774);\n    localDateTime0.toDate();\n}",
    "testName" : "test107107"
  },
  "test03636" : {
    "methodSignature" : "public LocalDateTime withDate(int year, int monthOfYear, int dayOfMonth)",
    "methodName" : "withDate",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03636() throws Throwable {\n    LocalDateTime localDateTime0 = new LocalDateTime();\n    localDateTime0.withDate((-90), (-90), (-90));\n}",
    "testName" : "test03636"
  },
  "test02424" : {
    "methodSignature" : "public Date toDate()",
    "methodName" : "toDate",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02424() throws Throwable {\n    LocalDateTime localDateTime0 = LocalDateTime.now();\n    localDateTime0.withMonthOfYear(255);\n    localDateTime0.toDate();\n}",
    "testName" : "test02424"
  },
  "test130130" : {
    "methodSignature" : "public boolean isSupported(DateTimeFieldType type)",
    "methodName" : "isSupported",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test130130() throws Throwable {\n    LocalDateTime localDateTime0 = LocalDateTime.now();\n    localDateTime0.isSupported((DateTimeFieldType) null);\n}",
    "testName" : "test130130"
  },
  "test04848" : {
    "methodSignature" : "public Date toDate()",
    "methodName" : "toDate",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04848() throws Throwable {\n    LocalDateTime localDateTime0 = new LocalDateTime();\n    localDateTime0.getFieldType(883);\n    localDateTime0.toDate();\n}",
    "testName" : "test04848"
  },
  "test06868" : {
    "methodSignature" : "public Date toDate()",
    "methodName" : "toDate",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06868() throws Throwable {\n    LocalDateTime localDateTime0 = LocalDateTime.now();\n    LocalDateTime localDateTime1 = localDateTime0.withWeekOfWeekyear(2390);\n    localDateTime1.toDate();\n}",
    "testName" : "test06868"
  },
  "test02828" : {
    "methodSignature" : "public static DateTimeFieldType halfdayOfDay()",
    "methodName" : "halfdayOfDay",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02828() throws Throwable {\n    LocalDateTime localDateTime0 = LocalDateTime.now();\n    localDateTime0.withDayOfMonth(736);\n    DateTimeFieldType.halfdayOfDay();\n}",
    "testName" : "test02828"
  },
  "test113113" : {
    "methodSignature" : "public Property minuteOfHour()",
    "methodName" : "minuteOfHour",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test113113() throws Throwable {\n    LocalDateTime localDateTime0 = new LocalDateTime();\n    localDateTime0.minuteOfHour();\n}",
    "testName" : "test113113"
  },
  "test01616" : {
    "methodSignature" : "public int getWeekyear()",
    "methodName" : "getWeekyear",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01616() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);\n    LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);\n    DurationFieldType durationFieldType0 = DurationFieldType.minutes();\n    LocalDateTime localDateTime1 = localDateTime0.withFieldAdded(durationFieldType0, 0);\n    Seconds seconds0 = Seconds.ZERO;\n    Duration duration0 = seconds0.toStandardDuration();\n    localDateTime1.withDurationAdded(duration0, 0);\n    localDateTime0.getLocalMillis();\n    localDateTime1.getWeekyear();\n}",
    "testName" : "test01616"
  },
  "test08484" : {
    "methodSignature" : "public int getDayOfWeek()",
    "methodName" : "getDayOfWeek",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08484() throws Throwable {\n    LocalDateTime localDateTime0 = new LocalDateTime();\n    localDateTime0.getDayOfWeek();\n}",
    "testName" : "test08484"
  },
  "test07272" : {
    "methodSignature" : "public Date toDate()",
    "methodName" : "toDate",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07272() throws Throwable {\n    LocalDateTime localDateTime0 = new LocalDateTime();\n    localDateTime0.withCenturyOfEra(1217);\n    localDateTime0.toDate();\n}",
    "testName" : "test07272"
  },
  "test04040" : {
    "methodSignature" : "public Date toDate()",
    "methodName" : "toDate",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04040() throws Throwable {\n    LocalDateTime localDateTime0 = new LocalDateTime(1418L);\n    LocalDateTime localDateTime1 = localDateTime0.minusMillis(0);\n    localDateTime1.toDate();\n}",
    "testName" : "test04040"
  },
  "test121121" : {
    "methodSignature" : "public Date toDate()",
    "methodName" : "toDate",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test121121() throws Throwable {\n    LocalDateTime localDateTime0 = LocalDateTime.now();\n    localDateTime0.plusDays(0);\n    MockDate mockDate0 = new MockDate();\n    localDateTime0.toDate();\n}",
    "testName" : "test121121"
  },
  "test0011" : {
    "methodSignature" : "public static LocalDateTime parse(String str)",
    "methodName" : "parse",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0011() throws Throwable {\n    LocalDateTime.parse(\"h\");\n}",
    "testName" : "test0011"
  },
  "test0099" : {
    "methodSignature" : "public int getMinimumValueOverall()",
    "methodName" : "getMinimumValueOverall",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0099() throws Throwable {\n    LocalDateTime localDateTime0 = new LocalDateTime();\n    LocalDateTime.Property localDateTime_Property0 = localDateTime0.weekOfWeekyear();\n    localDateTime_Property0.withMaximumValue();\n    localDateTime_Property0.getMinimumValueOverall();\n}",
    "testName" : "test0099"
  },
  "test09292" : {
    "methodSignature" : "public Property dayOfMonth()",
    "methodName" : "dayOfMonth",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test09292() throws Throwable {\n    LocalDateTime localDateTime0 = new LocalDateTime();\n    localDateTime0.dayOfMonth();\n}",
    "testName" : "test09292"
  },
  "test06060" : {
    "methodSignature" : "public LocalDateTime withYearOfEra(int yearOfEra)",
    "methodName" : "withYearOfEra",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06060() throws Throwable {\n    LocalDateTime localDateTime0 = LocalDateTime.now();\n    localDateTime0.withYearOfEra(14);\n}",
    "testName" : "test06060"
  },
  "test03232" : {
    "methodSignature" : "public Date toDate()",
    "methodName" : "toDate",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03232() throws Throwable {\n    LocalDateTime localDateTime0 = new LocalDateTime();\n    localDateTime0.minusYears((-2147483598));\n    localDateTime0.toDate();\n}",
    "testName" : "test03232"
  },
  "test08888" : {
    "methodSignature" : "public Date toDate()",
    "methodName" : "toDate",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08888() throws Throwable {\n    LocalDateTime localDateTime0 = new LocalDateTime();\n    localDateTime0.minusWeeks(103);\n    localDateTime0.toDate();\n}",
    "testName" : "test08888"
  },
  "test02020" : {
    "methodSignature" : "public Date toDate()",
    "methodName" : "toDate",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02020() throws Throwable {\n    LocalDateTime localDateTime0 = new LocalDateTime();\n    LocalDate localDate0 = new LocalDate();\n    localDateTime0.equals(localDate0);\n    localDateTime0.toDate();\n}",
    "testName" : "test02020"
  },
  "test07676" : {
    "methodSignature" : "public Date toDate()",
    "methodName" : "toDate",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07676() throws Throwable {\n    LocalDateTime localDateTime0 = LocalDateTime.now();\n    localDateTime0.era();\n    localDateTime0.toDate();\n}",
    "testName" : "test07676"
  },
  "test129129" : {
    "methodSignature" : "public Date toDate()",
    "methodName" : "toDate",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test129129() throws Throwable {\n    LocalDateTime localDateTime0 = new LocalDateTime();\n    localDateTime0.withFields((ReadablePartial) null);\n    localDateTime0.toDate();\n}",
    "testName" : "test129129"
  },
  "test05252" : {
    "methodSignature" : "public Property dayOfWeek()",
    "methodName" : "dayOfWeek",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05252() throws Throwable {\n    LocalDateTime localDateTime0 = new LocalDateTime();\n    localDateTime0.dayOfWeek();\n}",
    "testName" : "test05252"
  },
  "test09696" : {
    "methodSignature" : "public Date toDate()",
    "methodName" : "toDate",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test09696() throws Throwable {\n    LocalDateTime localDateTime0 = LocalDateTime.now();\n    Locale locale0 = Locale.UK;\n    localDateTime0.toString((String) null, locale0);\n    localDateTime0.toDate();\n}",
    "testName" : "test09696"
  },
  "test06464" : {
    "methodSignature" : "public LocalDateTime minusDays(int days)",
    "methodName" : "minusDays",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06464() throws Throwable {\n    LocalDateTime localDateTime0 = LocalDateTime.now();\n    localDateTime0.minusDays((-198));\n}",
    "testName" : "test06464"
  },
  "test08080" : {
    "methodSignature" : "public int getLeapAmount()",
    "methodName" : "getLeapAmount",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08080() throws Throwable {\n    LocalDateTime localDateTime0 = new LocalDateTime();\n    localDateTime0.hourOfDay();\n    localDateTime0.toDate();\n    LocalDateTime.Property localDateTime_Property0 = localDateTime0.year();\n    localDateTime_Property0.setCopy(\"{gmi\");\n    localDateTime_Property0.getLeapAmount();\n}",
    "testName" : "test08080"
  },
  "test118118" : {
    "methodSignature" : "public Date toDate()",
    "methodName" : "toDate",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test118118() throws Throwable {\n    DateTimeFieldType.weekyear();\n    LocalDateTime localDateTime0 = new LocalDateTime((long) 0);\n    LocalDateTime localDateTime1 = localDateTime0.plusWeeks(0);\n    LocalDateTime.parse(\"(%/GZG;C)v|9BXR7z\");\n    localDateTime1.toDate();\n}",
    "testName" : "test118118"
  },
  "test122122" : {
    "methodSignature" : "public static LocalDateTime fromDateFields(Date date)",
    "methodName" : "fromDateFields",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test122122() throws Throwable {\n    LocalDateTime.fromDateFields((Date) null);\n}",
    "testName" : "test122122"
  },
  "test0022" : {
    "methodSignature" : "public Date toDate()",
    "methodName" : "toDate",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0022() throws Throwable {\n    LocalDateTime localDateTime0 = new LocalDateTime((-169817918680L), (DateTimeZone) null);\n    localDateTime0.toDate();\n}",
    "testName" : "test0022"
  },
  "test105105" : {
    "methodSignature" : "public LocalDateTime(long instant)",
    "methodName" : "LocalDateTime",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test105105() throws Throwable {\n    LocalDateTime localDateTime0 = new LocalDateTime(1991562380481320L);\n}",
    "testName" : "test105105"
  },
  "test01313" : {
    "methodSignature" : "public LocalDate toLocalDate()",
    "methodName" : "toLocalDate",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01313() throws Throwable {\n    int int0 = 0;\n    LocalDateTime localDateTime0 = new LocalDateTime(0, 12, 0, 12, 12, 64);\n    localDateTime0.withYearOfEra(int0);\n    localDateTime0.toLocalDate();\n}",
    "testName" : "test01313"
  },
  "test06969" : {
    "methodSignature" : "public LocalDateTime withYearOfCentury(int yearOfCentury)",
    "methodName" : "withYearOfCentury",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06969() throws Throwable {\n    LocalDateTime localDateTime0 = new LocalDateTime();\n    localDateTime0.withYearOfCentury(1008);\n}",
    "testName" : "test06969"
  },
  "test03737" : {
    "methodSignature" : "public Date toDate()",
    "methodName" : "toDate",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03737() throws Throwable {\n    LocalDateTime localDateTime0 = LocalDateTime.now();\n    localDateTime0.plusMillis(0);\n    localDateTime0.toDate();\n}",
    "testName" : "test03737"
  },
  "test04545" : {
    "methodSignature" : "public Date toDate()",
    "methodName" : "toDate",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04545() throws Throwable {\n    LocalDateTime localDateTime0 = new LocalDateTime();\n    localDateTime0.plus((ReadableDuration) null);\n    localDateTime0.toDate();\n}",
    "testName" : "test04545"
  },
  "test08989" : {
    "methodSignature" : "public Date toDate()",
    "methodName" : "toDate",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08989() throws Throwable {\n    LocalDateTime localDateTime0 = new LocalDateTime();\n    LocalDateTime localDateTime1 = localDateTime0.withWeekyear((-1921));\n    localDateTime1.toDate();\n}",
    "testName" : "test08989"
  },
  "test02525" : {
    "methodSignature" : "public Date toDate()",
    "methodName" : "toDate",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02525() throws Throwable {\n    LocalDateTime localDateTime0 = new LocalDateTime();\n    localDateTime0.getYearOfCentury();\n    localDateTime0.toDate();\n}",
    "testName" : "test02525"
  },
  "test05757" : {
    "methodSignature" : "public LocalDateTime minusHours(int hours)",
    "methodName" : "minusHours",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05757() throws Throwable {\n    LocalDateTime localDateTime0 = LocalDateTime.now();\n    localDateTime0.minusHours(328);\n}",
    "testName" : "test05757"
  },
  "test01717" : {
    "methodSignature" : "public static LocalDateTime now(Chronology chronology)",
    "methodName" : "now",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01717() throws Throwable {\n    ISOChronology iSOChronology0 = ISOChronology.getInstance();\n    LocalDateTime.now((Chronology) iSOChronology0);\n}",
    "testName" : "test01717"
  },
  "test119119" : {
    "methodSignature" : "public Property dayOfWeek()",
    "methodName" : "dayOfWeek",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test119119() throws Throwable {\n    LocalDateTime localDateTime0 = new LocalDateTime();\n    localDateTime0.minusWeeks(0);\n    localDateTime0.dayOfWeek();\n}",
    "testName" : "test119119"
  },
  "test111111" : {
    "methodSignature" : "public Date toDate()",
    "methodName" : "toDate",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test111111() throws Throwable {\n    LocalDateTime localDateTime0 = LocalDateTime.now();\n    LocalDateTime localDateTime1 = localDateTime0.minusMonths(0);\n    localDateTime0.isAfter(localDateTime1);\n    localDateTime0.toDate();\n}",
    "testName" : "test111111"
  },
  "test04949" : {
    "methodSignature" : "public LocalDateTime()",
    "methodName" : "LocalDateTime",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04949() throws Throwable {\n    LocalDateTime localDateTime0 = new LocalDateTime();\n    localDateTime0.getDayOfYear();\n    LocalDateTime localDateTime1 = new LocalDateTime();\n}",
    "testName" : "test04949"
  },
  "test02929" : {
    "methodSignature" : "public Date toDate()",
    "methodName" : "toDate",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02929() throws Throwable {\n    LocalDateTime localDateTime0 = new LocalDateTime();\n    localDateTime0.withYear(569);\n    localDateTime0.toDate();\n}",
    "testName" : "test02929"
  },
  "test06161" : {
    "methodSignature" : "public Date toDate()",
    "methodName" : "toDate",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06161() throws Throwable {\n    LocalDateTime localDateTime0 = LocalDateTime.now();\n    localDateTime0.withEra(23118750);\n    localDateTime0.toDate();\n}",
    "testName" : "test06161"
  },
  "test09393" : {
    "methodSignature" : "public LocalDateTime plusHours(int hours)",
    "methodName" : "plusHours",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test09393() throws Throwable {\n    LocalDateTime localDateTime0 = new LocalDateTime();\n    localDateTime0.toLocalDate();\n    localDateTime0.plusHours(0);\n}",
    "testName" : "test09393"
  },
  "test0033" : {
    "methodSignature" : "public Property year()",
    "methodName" : "year",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0033() throws Throwable {\n    LocalDateTime localDateTime0 = LocalDateTime.now();\n    localDateTime0.year();\n}",
    "testName" : "test0033"
  },
  "test08181" : {
    "methodSignature" : "public LocalDateTime plusSeconds(int seconds)",
    "methodName" : "plusSeconds",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08181() throws Throwable {\n    LocalDateTime localDateTime0 = LocalDateTime.now();\n    localDateTime0.plusSeconds((-4));\n}",
    "testName" : "test08181"
  },
  "test07777" : {
    "methodSignature" : "public Property yearOfEra()",
    "methodName" : "yearOfEra",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07777() throws Throwable {\n    LocalDateTime localDateTime0 = new LocalDateTime();\n    localDateTime0.yearOfEra();\n}",
    "testName" : "test07777"
  },
  "test06565" : {
    "methodSignature" : "public LocalDateTime withMillisOfDay(int millis)",
    "methodName" : "withMillisOfDay",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06565() throws Throwable {\n    LocalDateTime localDateTime0 = new LocalDateTime();\n    localDateTime0.withMillisOfDay(1008);\n}",
    "testName" : "test06565"
  },
  "test03333" : {
    "methodSignature" : "public Date toDate()",
    "methodName" : "toDate",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03333() throws Throwable {\n    LocalDateTime localDateTime0 = LocalDateTime.now();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();\n    localDateTime0.withField(dateTimeFieldType0, (-1502));\n    localDateTime0.toDate();\n}",
    "testName" : "test03333"
  },
  "test127127" : {
    "methodSignature" : "public int compareTo(ReadablePartial partial)",
    "methodName" : "compareTo",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test127127() throws Throwable {\n    LocalDateTime localDateTime0 = new LocalDateTime();\n    localDateTime0.monthOfYear();\n    localDateTime0.compareTo((ReadablePartial) localDateTime0);\n}",
    "testName" : "test127127"
  },
  "test100100" : {
    "methodSignature" : "public String toString(String pattern)",
    "methodName" : "toString",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test100100() throws Throwable {\n    LocalDateTime localDateTime0 = LocalDateTime.now();\n    localDateTime0.toString(\"Field must not be null\");\n}",
    "testName" : "test100100"
  },
  "test04141" : {
    "methodSignature" : "public LocalDateTime(Object instant, DateTimeZone zone)",
    "methodName" : "LocalDateTime",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04141() throws Throwable {\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    LocalDateTime localDateTime0 = null;\n    localDateTime0 = new LocalDateTime(fixedDateTimeZone0, fixedDateTimeZone0);\n}",
    "testName" : "test04141"
  },
  "test09797" : {
    "methodSignature" : "public Date toDate()",
    "methodName" : "toDate",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test09797() throws Throwable {\n    LocalDateTime localDateTime0 = LocalDateTime.now();\n    localDateTime0.plusYears(0);\n    localDateTime0.toDate();\n}",
    "testName" : "test09797"
  },
  "test08585" : {
    "methodSignature" : "public Property millisOfDay()",
    "methodName" : "millisOfDay",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08585() throws Throwable {\n    LocalDateTime localDateTime0 = LocalDateTime.now();\n    localDateTime0.millisOfDay();\n}",
    "testName" : "test08585"
  },
  "test02121" : {
    "methodSignature" : "public LocalDateTime minusSeconds(int seconds)",
    "methodName" : "minusSeconds",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02121() throws Throwable {\n    LocalDateTime localDateTime0 = new LocalDateTime();\n    localDateTime0.minusSeconds(1202);\n}",
    "testName" : "test02121"
  },
  "test05353" : {
    "methodSignature" : "public Date toDate()",
    "methodName" : "toDate",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05353() throws Throwable {\n    LocalDateTime localDateTime0 = new LocalDateTime();\n    Locale locale0 = Locale.CHINESE;\n    localDateTime0.toString(\"|Er\", locale0);\n    localDateTime0.toDate();\n}",
    "testName" : "test05353"
  },
  "test108108" : {
    "methodSignature" : "public Date toDate()",
    "methodName" : "toDate",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test108108() throws Throwable {\n    LocalDateTime localDateTime0 = LocalDateTime.now();\n    LocalDateTime localDateTime1 = localDateTime0.withField((DateTimeFieldType) null, 12);\n    localDateTime1.toDate();\n}",
    "testName" : "test108108"
  },
  "test116116" : {
    "methodSignature" : "public Date toDate()",
    "methodName" : "toDate",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test116116() throws Throwable {\n    LocalDateTime localDateTime0 = new LocalDateTime();\n    localDateTime0.getWeekOfWeekyear();\n    localDateTime0.toDate();\n}",
    "testName" : "test116116"
  },
  "test0044" : {
    "methodSignature" : "public LocalDateTime withFields(ReadablePartial partial)",
    "methodName" : "withFields",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0044() throws Throwable {\n    LocalDateTime localDateTime0 = new LocalDateTime();\n    localDateTime0.withFields(localDateTime0);\n}",
    "testName" : "test0044"
  },
  "test120120" : {
    "methodSignature" : "public int getEra()",
    "methodName" : "getEra",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test120120() throws Throwable {\n    LocalDateTime localDateTime0 = new LocalDateTime();\n    localDateTime0.getEra();\n}",
    "testName" : "test120120"
  },
  "test103103" : {
    "methodSignature" : "public Date toDate()",
    "methodName" : "toDate",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test103103() throws Throwable {\n    LocalDateTime localDateTime0 = new LocalDateTime();\n    localDateTime0.plusWeeks(112);\n    localDateTime0.toDate();\n}",
    "testName" : "test103103"
  },
  "test128128" : {
    "methodSignature" : "public int compareTo(ReadablePartial partial)",
    "methodName" : "compareTo",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test128128() throws Throwable {\n    LocalDateTime localDateTime0 = LocalDateTime.now();\n    LocalDateTime localDateTime1 = localDateTime0.plusMillis(1385);\n    localDateTime0.compareTo((ReadablePartial) localDateTime1);\n}",
    "testName" : "test128128"
  },
  "test05858" : {
    "methodSignature" : "public Property millisOfSecond()",
    "methodName" : "millisOfSecond",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05858() throws Throwable {\n    LocalDateTime localDateTime0 = LocalDateTime.now();\n    localDateTime0.millisOfSecond();\n}",
    "testName" : "test05858"
  },
  "test03434" : {
    "methodSignature" : "public Date toDate()",
    "methodName" : "toDate",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03434() throws Throwable {\n    LocalDateTime localDateTime0 = new LocalDateTime();\n    localDateTime0.getMillisOfDay();\n    localDateTime0.toDate();\n}",
    "testName" : "test03434"
  },
  "test02626" : {
    "methodSignature" : "public int compareTo(ReadablePartial partial)",
    "methodName" : "compareTo",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02626() throws Throwable {\n    LocalDateTime localDateTime0 = new LocalDateTime();\n    LocalDate localDate0 = LocalDate.now();\n    localDateTime0.compareTo((ReadablePartial) localDate0);\n}",
    "testName" : "test02626"
  },
  "test04646" : {
    "methodSignature" : "public Date toDate()",
    "methodName" : "toDate",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04646() throws Throwable {\n    LocalDateTime localDateTime0 = LocalDateTime.now();\n    localDateTime0.minus((ReadableDuration) null);\n    localDateTime0.toDate();\n}",
    "testName" : "test04646"
  },
  "test07878" : {
    "methodSignature" : "public LocalDateTime minusMinutes(int minutes)",
    "methodName" : "minusMinutes",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07878() throws Throwable {\n    LocalDateTime localDateTime0 = LocalDateTime.now();\n    localDateTime0.minusMinutes(23118750);\n}",
    "testName" : "test07878"
  },
  "test01414" : {
    "methodSignature" : "public static LocalDateTime fromCalendarFields(Calendar calendar)",
    "methodName" : "fromCalendarFields",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01414() throws Throwable {\n    Calendar calendar0 = MockCalendar.getInstance();\n    LocalDateTime.fromCalendarFields(calendar0);\n}",
    "testName" : "test01414"
  },
  "test117117" : {
    "methodSignature" : "public Date toDate()",
    "methodName" : "toDate",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test117117() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstanceUTC();\n    LocalDateTime localDateTime0 = new LocalDateTime((-29400194L), (Chronology) gJChronology0);\n    LocalDateTime localDateTime1 = localDateTime0.minusSeconds(0);\n    LocalDateTime localDateTime2 = localDateTime1.withWeekOfWeekyear(0);\n    localDateTime2.toDate();\n}",
    "testName" : "test117117"
  },
  "test03838" : {
    "methodSignature" : "public Date toDate()",
    "methodName" : "toDate",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03838() throws Throwable {\n    LocalDateTime localDateTime0 = new LocalDateTime();\n    localDateTime0.plusMonths(1480);\n    localDateTime0.toDate();\n}",
    "testName" : "test03838"
  },
  "test01818" : {
    "methodSignature" : "public LocalDateTime plusMillis(int millis)",
    "methodName" : "plusMillis",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01818() throws Throwable {\n    LocalDateTime localDateTime0 = LocalDateTime.now();\n    localDateTime0.plusMillis(2895);\n}",
    "testName" : "test01818"
  },
  "test05050" : {
    "methodSignature" : "public LocalDateTime minus(ReadablePeriod period)",
    "methodName" : "minus",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05050() throws Throwable {\n    LocalDateTime localDateTime0 = new LocalDateTime();\n    MutablePeriod mutablePeriod0 = new MutablePeriod();\n    localDateTime0.minus((ReadablePeriod) mutablePeriod0);\n}",
    "testName" : "test05050"
  },
  "test09494" : {
    "methodSignature" : "public Date toDate()",
    "methodName" : "toDate",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test09494() throws Throwable {\n    LocalDateTime localDateTime0 = new LocalDateTime();\n    LocalDateTime localDateTime1 = localDateTime0.plusSeconds(0);\n    localDateTime1.toDate();\n}",
    "testName" : "test09494"
  },
  "test06262" : {
    "methodSignature" : "public Date toDate()",
    "methodName" : "toDate",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06262() throws Throwable {\n    LocalDateTime localDateTime0 = new LocalDateTime();\n    localDateTime0.getValue(153);\n    localDateTime0.toDate();\n}",
    "testName" : "test06262"
  },
  "test08282" : {
    "methodSignature" : "public int getYearOfEra()",
    "methodName" : "getYearOfEra",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08282() throws Throwable {\n    LocalDateTime localDateTime0 = LocalDateTime.now();\n    localDateTime0.getYearOfEra();\n}",
    "testName" : "test08282"
  },
  "test07070" : {
    "methodSignature" : "public Date toDate()",
    "methodName" : "toDate",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07070() throws Throwable {\n    LocalDateTime localDateTime0 = new LocalDateTime();\n    localDateTime0.toDateTime();\n    localDateTime0.toDate();\n}",
    "testName" : "test07070"
  },
  "test125125" : {
    "methodSignature" : "public String toString(String pattern)",
    "methodName" : "toString",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test125125() throws Throwable {\n    LocalDateTime localDateTime0 = new LocalDateTime();\n    localDateTime0.toString((String) null);\n}",
    "testName" : "test125125"
  },
  "test05454" : {
    "methodSignature" : "public Date toDate()",
    "methodName" : "toDate",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05454() throws Throwable {\n    LocalDateTime localDateTime0 = LocalDateTime.now();\n    localDateTime0.plus((ReadablePeriod) null);\n    localDateTime0.toDate();\n}",
    "testName" : "test05454"
  },
  "test09898" : {
    "methodSignature" : "public Property property(DateTimeFieldType fieldType)",
    "methodName" : "property",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test09898() throws Throwable {\n    LocalDateTime localDateTime0 = new LocalDateTime();\n    localDateTime0.property((DateTimeFieldType) null);\n}",
    "testName" : "test09898"
  },
  "test06666" : {
    "methodSignature" : "public LocalDateTime minusMonths(int months)",
    "methodName" : "minusMonths",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06666() throws Throwable {\n    LocalDateTime localDateTime0 = LocalDateTime.now();\n    localDateTime0.minusMonths((-2147451595));\n}",
    "testName" : "test06666"
  },
  "test03030" : {
    "methodSignature" : "public Date toDate()",
    "methodName" : "toDate",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03030() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);\n    LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);\n    LocalDateTime localDateTime1 = localDateTime0.minusHours(0);\n    localDateTime1.toDate();\n}",
    "testName" : "test03030"
  },
  "test08686" : {
    "methodSignature" : "public static LocalDateTime now(DateTimeZone zone)",
    "methodName" : "now",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08686() throws Throwable {\n    LocalDateTime.now((DateTimeZone) null);\n}",
    "testName" : "test08686"
  },
  "test02222" : {
    "methodSignature" : "public LocalDateTime withMillisOfSecond(int millis)",
    "methodName" : "withMillisOfSecond",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02222() throws Throwable {\n    LocalDateTime localDateTime0 = new LocalDateTime();\n    localDateTime0.withMillisOfSecond(32);\n}",
    "testName" : "test02222"
  },
  "test07474" : {
    "methodSignature" : "public LocalDate toLocalDate()",
    "methodName" : "toLocalDate",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07474() throws Throwable {\n    LocalDateTime localDateTime0 = LocalDateTime.now();\n    localDateTime0.toLocalDate();\n}",
    "testName" : "test07474"
  },
  "test106106" : {
    "methodSignature" : "public Property property(DateTimeFieldType fieldType)",
    "methodName" : "property",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test106106() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);\n    LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);\n    localDateTime0.toDate();\n    localDateTime0.dayOfWeek();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();\n    ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);\n    Period period0 = new Period(1L, 1L, iSOChronology0);\n    Period period1 = period0.plusMillis(0);\n    Period period2 = period1.withMonths(0);\n    LocalDateTime localDateTime1 = localDateTime0.withPeriodAdded(period2, 0);\n    localDateTime1.property(dateTimeFieldType0);\n}",
    "testName" : "test106106"
  },
  "test09090" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test09090() throws Throwable {\n    LocalDateTime localDateTime0 = new LocalDateTime();\n    localDateTime0.toString();\n}",
    "testName" : "test09090"
  },
  "test114114" : {
    "methodSignature" : "public Date toDate()",
    "methodName" : "toDate",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test114114() throws Throwable {\n    LocalDateTime localDateTime0 = LocalDateTime.now();\n    LocalDateTime.Property localDateTime_Property0 = localDateTime0.centuryOfEra();\n    Chronology chronology0 = localDateTime_Property0.getChronology();\n    LocalDateTime.now(chronology0);\n    localDateTime0.toDate();\n}",
    "testName" : "test114114"
  },
  "test0066" : {
    "methodSignature" : "public LocalDateTime withWeekyear(int weekyear)",
    "methodName" : "withWeekyear",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0066() throws Throwable {\n    LocalDateTime localDateTime0 = new LocalDateTime();\n    localDateTime0.withWeekyear(32);\n}",
    "testName" : "test0066"
  },
  "test101101" : {
    "methodSignature" : "public Property monthOfYear()",
    "methodName" : "monthOfYear",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test101101() throws Throwable {\n    LocalDateTime localDateTime0 = LocalDateTime.now();\n    localDateTime0.monthOfYear();\n}",
    "testName" : "test101101"
  },
  "test04747" : {
    "methodSignature" : "public Date toDate()",
    "methodName" : "toDate",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04747() throws Throwable {\n    LocalDateTime localDateTime0 = new LocalDateTime();\n    localDateTime0.withTime(23034375, 23034375, 23034375, 23034375);\n    localDateTime0.toDate();\n}",
    "testName" : "test04747"
  },
  "test02323" : {
    "methodSignature" : "public Date toDate()",
    "methodName" : "toDate",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02323() throws Throwable {\n    LocalDateTime localDateTime0 = LocalDateTime.now();\n    LocalDateTime localDateTime1 = localDateTime0.withDayOfWeek((-3077));\n    localDateTime1.toDate();\n}",
    "testName" : "test02323"
  },
  "test05959" : {
    "methodSignature" : "public int getWeekyear()",
    "methodName" : "getWeekyear",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05959() throws Throwable {\n    LocalDateTime localDateTime0 = new LocalDateTime();\n    localDateTime0.getWeekyear();\n}",
    "testName" : "test05959"
  },
  "test07979" : {
    "methodSignature" : "public Date toDate()",
    "methodName" : "toDate",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07979() throws Throwable {\n    LocalDateTime localDateTime0 = new LocalDateTime();\n    localDateTime0.toLocalTime();\n    localDateTime0.toDate();\n}",
    "testName" : "test07979"
  },
  "test01515" : {
    "methodSignature" : "public LocalDateTime withFieldAdded(DurationFieldType fieldType, int amount)",
    "methodName" : "withFieldAdded",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01515() throws Throwable {\n    LocalDateTime localDateTime0 = LocalDateTime.now();\n    DurationFieldType durationFieldType0 = DurationFieldType.weekyears();\n    localDateTime0.withFieldAdded(durationFieldType0, 15);\n}",
    "testName" : "test01515"
  },
  "test06767" : {
    "methodSignature" : "public LocalDateTime plusHours(int hours)",
    "methodName" : "plusHours",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06767() throws Throwable {\n    LocalDateTime localDateTime0 = new LocalDateTime();\n    localDateTime0.plusHours(40);\n}",
    "testName" : "test06767"
  },
  "test03535" : {
    "methodSignature" : "public LocalDateTime plusMinutes(int minutes)",
    "methodName" : "plusMinutes",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03535() throws Throwable {\n    LocalDateTime localDateTime0 = new LocalDateTime();\n    localDateTime0.plusMinutes(1217);\n}",
    "testName" : "test03535"
  },
  "test02727" : {
    "methodSignature" : "public Date toDate()",
    "methodName" : "toDate",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02727() throws Throwable {\n    LocalDateTime localDateTime0 = new LocalDateTime();\n    localDateTime0.getCenturyOfEra();\n    localDateTime0.toDate();\n}",
    "testName" : "test02727"
  },
  "test115115" : {
    "methodSignature" : "public int getMillisOfDay()",
    "methodName" : "getMillisOfDay",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test115115() throws Throwable {\n    LocalDateTime localDateTime0 = new LocalDateTime();\n    localDateTime0.get((DateTimeFieldType) null);\n    localDateTime0.getMillisOfDay();\n}",
    "testName" : "test115115"
  },
  "test03939" : {
    "methodSignature" : "public Property property(DateTimeFieldType fieldType)",
    "methodName" : "property",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03939() throws Throwable {\n    LocalDateTime localDateTime0 = new LocalDateTime(12, 12, 12, 5, 1);\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();\n    localDateTime0.property(dateTimeFieldType0);\n}",
    "testName" : "test03939"
  },
  "test09595" : {
    "methodSignature" : "public Date toDate()",
    "methodName" : "toDate",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test09595() throws Throwable {\n    LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields((Calendar) null);\n    localDateTime0.toDate();\n}",
    "testName" : "test09595"
  },
  "test08383" : {
    "methodSignature" : "public Date toDate()",
    "methodName" : "toDate",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08383() throws Throwable {\n    LocalDateTime localDateTime0 = new LocalDateTime();\n    localDateTime0.minusMillis((-376));\n    localDateTime0.toDate();\n}",
    "testName" : "test08383"
  },
  "test05151" : {
    "methodSignature" : "public LocalDateTime withHourOfDay(int hour)",
    "methodName" : "withHourOfDay",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05151() throws Throwable {\n    LocalDateTime localDateTime0 = new LocalDateTime();\n    localDateTime0.withHourOfDay(1000);\n}",
    "testName" : "test05151"
  },
  "test123123" : {
    "methodSignature" : "public static LocalDateTime now(Chronology chronology)",
    "methodName" : "now",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test123123() throws Throwable {\n    LocalDateTime.now((Chronology) null);\n}",
    "testName" : "test123123"
  },
  "test0077" : {
    "methodSignature" : "public boolean isLeap()",
    "methodName" : "isLeap",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0077() throws Throwable {\n    LocalDateTime localDateTime0 = new LocalDateTime();\n    LocalDateTime.Property localDateTime_Property0 = localDateTime0.secondOfMinute();\n    localDateTime_Property0.isLeap();\n}",
    "testName" : "test0077"
  },
  "test07171" : {
    "methodSignature" : "public Property dayOfYear()",
    "methodName" : "dayOfYear",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07171() throws Throwable {\n    LocalDateTime localDateTime0 = new LocalDateTime();\n    localDateTime0.dayOfYear();\n}",
    "testName" : "test07171"
  },
  "test04343" : {
    "methodSignature" : "public String toString(String pattern)",
    "methodName" : "toString",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04343() throws Throwable {\n    LocalDateTime localDateTime0 = LocalDateTime.now();\n    LocalDateTime.Property localDateTime_Property0 = localDateTime0.yearOfCentury();\n    localDateTime_Property0.getLeapAmount();\n    Integer integer0 = new Integer(0);\n    localDateTime_Property0.addWrapFieldToCopy(0);\n    DateTimeFieldType.clockhourOfHalfday();\n    Integer integer1 = new Integer(0);\n    localDateTime0.toString(\"org.joda.time.LocalDateTime$Property\");\n}",
    "testName" : "test04343"
  },
  "test09999" : {
    "methodSignature" : "public Date toDate()",
    "methodName" : "toDate",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test09999() throws Throwable {\n    LocalDateTime localDateTime0 = new LocalDateTime();\n    localDateTime0.hourOfDay();\n    localDateTime0.toDate();\n    LocalDateTime.Property localDateTime_Property0 = localDateTime0.year();\n    localDateTime_Property0.roundFloorCopy();\n    LocalDateTime localDateTime1 = localDateTime_Property0.roundCeilingCopy();\n    localDateTime0.withFields(localDateTime1);\n    localDateTime0.toDate();\n}",
    "testName" : "test09999"
  },
  "test104104" : {
    "methodSignature" : "public Property property(DateTimeFieldType fieldType)",
    "methodName" : "property",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test104104() throws Throwable {\n    LocalDateTime localDateTime0 = new LocalDateTime();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();\n    localDateTime0.property(dateTimeFieldType0);\n}",
    "testName" : "test104104"
  },
  "test08787" : {
    "methodSignature" : "public Date toDate()",
    "methodName" : "toDate",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08787() throws Throwable {\n    LocalDateTime localDateTime0 = new LocalDateTime();\n    localDateTime0.minusYears(0);\n    localDateTime0.toDate();\n}",
    "testName" : "test08787"
  },
  "test05555" : {
    "methodSignature" : "public Date toDate()",
    "methodName" : "toDate",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05555() throws Throwable {\n    LocalDateTime localDateTime0 = LocalDateTime.now();\n    Weeks weeks0 = Weeks.ONE;\n    Duration duration0 = weeks0.toStandardDuration();\n    localDateTime0.plus((ReadableDuration) duration0);\n    localDateTime0.toDate();\n}",
    "testName" : "test05555"
  },
  "test01111" : {
    "methodSignature" : "public int getMinimumValueOverall()",
    "methodName" : "getMinimumValueOverall",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01111() throws Throwable {\n    LocalDateTime localDateTime0 = new LocalDateTime();\n    LocalDateTime.Property localDateTime_Property0 = localDateTime0.monthOfYear();\n    localDateTime_Property0.getMinimumValueOverall();\n}",
    "testName" : "test01111"
  },
  "test06363" : {
    "methodSignature" : "public Property weekyear()",
    "methodName" : "weekyear",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06363() throws Throwable {\n    LocalDateTime localDateTime0 = new LocalDateTime();\n    localDateTime0.weekyear();\n}",
    "testName" : "test06363"
  },
  "test07575" : {
    "methodSignature" : "public LocalDateTime withMinuteOfHour(int minute)",
    "methodName" : "withMinuteOfHour",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07575() throws Throwable {\n    LocalDateTime localDateTime0 = LocalDateTime.now();\n    localDateTime0.withMinuteOfHour((-665));\n}",
    "testName" : "test07575"
  },
  "test09191" : {
    "methodSignature" : "public Date toDate()",
    "methodName" : "toDate",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test09191() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) gJChronology0);\n    localDateTime0.toDate();\n}",
    "testName" : "test09191"
  },
  "test112112" : {
    "methodSignature" : "public boolean isSupported(DurationFieldType type)",
    "methodName" : "isSupported",
    "className" : "org.joda.time.LocalDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test112112() throws Throwable {\n    LocalDateTime localDateTime0 = LocalDateTime.now();\n    DurationFieldType durationFieldType0 = DurationFieldType.WEEKS_TYPE;\n    localDateTime0.isSupported(durationFieldType0);\n}",
    "testName" : "test112112"
  }
}