{
  "test141141" : {
    "methodSignature" : "public static LocalDate now(DateTimeZone zone)",
    "methodName" : "now",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test141141() throws Throwable {\n    LocalDate.now((DateTimeZone) null);\n}",
    "testName" : "test141141"
  },
  "test166166" : {
    "methodSignature" : "public static LocalDate parse(String str)",
    "methodName" : "parse",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test166166() throws Throwable {\n    LocalDate.parse(\"k+4%tE`lkM32\");\n}",
    "testName" : "test166166"
  },
  "test124124" : {
    "methodSignature" : "public LocalDateTime toLocalDateTime(LocalTime time)",
    "methodName" : "toLocalDateTime",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test124124() throws Throwable {\n    CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();\n    LocalDate localDate0 = LocalDate.now((Chronology) copticChronology0);\n    LocalTime localTime0 = new LocalTime(3600000L, (Chronology) copticChronology0);\n    localDate0.toLocalDateTime(localTime0);\n}",
    "testName" : "test124124"
  },
  "test0000" : {
    "methodSignature" : "public LocalDate minusDays(int days)",
    "methodName" : "minusDays",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0000() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2973));\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);\n    LocalDate localDate0 = new LocalDate((Chronology) ethiopicChronology0);\n    localDate0.minusDays((-2973));\n}",
    "testName" : "test0000"
  },
  "test177177" : {
    "methodSignature" : "public LocalDate withDayOfYear(int dayOfYear)",
    "methodName" : "withDayOfYear",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test177177() throws Throwable {\n    LocalDate localDate0 = new LocalDate(1L);\n    LocalDate localDate1 = localDate0.withDayOfYear(2);\n}",
    "testName" : "test177177"
  },
  "test107107" : {
    "methodSignature" : "public LocalDate plusWeeks(int weeks)",
    "methodName" : "plusWeeks",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test107107() throws Throwable {\n    LocalDate localDate0 = new LocalDate(1L);\n    localDate0.plusWeeks(51);\n}",
    "testName" : "test107107"
  },
  "test03636" : {
    "methodSignature" : "public int get(DateTimeFieldType fieldType)",
    "methodName" : "get",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03636() throws Throwable {\n    LocalDate localDate0 = LocalDate.now();\n    LocalDate localDate1 = localDate0.withYearOfCentury(0);\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();\n    localDate1.get(dateTimeFieldType0);\n}",
    "testName" : "test03636"
  },
  "test155155" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test155155() throws Throwable {\n    CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();\n    LocalDate localDate0 = LocalDate.now((Chronology) copticChronology0);\n    LocalTime localTime0 = new LocalTime(3600000L, (Chronology) copticChronology0);\n    DateTime dateTime0 = localDate0.toDateTime(localTime0);\n    dateTime0.getMillis();\n}",
    "testName" : "test155155"
  },
  "test02424" : {
    "methodSignature" : "public DateTime toDateTime(LocalTime time)",
    "methodName" : "toDateTime",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02424() throws Throwable {\n    CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();\n    LocalDate localDate0 = LocalDate.now((Chronology) copticChronology0);\n    LocalDate localDate1 = localDate0.withLocalMillis(0L);\n    LocalDate localDate2 = localDate1.withDayOfMonth(1);\n    LocalTime localTime0 = new LocalTime(3600000L, (Chronology) copticChronology0);\n    localDate2.toDateTime(localTime0);\n}",
    "testName" : "test02424"
  },
  "test130130" : {
    "methodSignature" : "public boolean isSupported(DurationFieldType type)",
    "methodName" : "isSupported",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test130130() throws Throwable {\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    LocalDate localDate0 = LocalDate.now((DateTimeZone) fixedDateTimeZone0);\n    DurationFieldType durationFieldType0 = DurationFieldType.MONTHS_TYPE;\n    boolean boolean0 = localDate0.isSupported(durationFieldType0);\n}",
    "testName" : "test130130"
  },
  "test04848" : {
    "methodSignature" : "public LocalDate plusYears(int years)",
    "methodName" : "plusYears",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04848() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2973));\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);\n    LocalDate localDate0 = new LocalDate((Chronology) ethiopicChronology0);\n    localDate0.plusYears((-2973));\n}",
    "testName" : "test04848"
  },
  "test01212" : {
    "methodSignature" : "public Interval toInterval(DateTimeZone zone)",
    "methodName" : "toInterval",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01212() throws Throwable {\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();\n    LocalDate localDate0 = new LocalDate(0L, (Chronology) ethiopicChronology0);\n    localDate0.toInterval((DateTimeZone) fixedDateTimeZone0);\n}",
    "testName" : "test01212"
  },
  "test05656" : {
    "methodSignature" : "public LocalDate minusWeeks(int weeks)",
    "methodName" : "minusWeeks",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05656() throws Throwable {\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();\n    LocalDate localDate0 = new LocalDate((Chronology) ethiopicChronology0);\n    LocalDate localDate1 = localDate0.withWeekyear(1);\n    localDate1.minusWeeks(1900);\n}",
    "testName" : "test05656"
  },
  "test138138" : {
    "methodSignature" : "public static LocalDate fromDateFields(Date date)",
    "methodName" : "fromDateFields",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test138138() throws Throwable {\n    LocalDate.fromDateFields((Date) null);\n}",
    "testName" : "test138138"
  },
  "test06868" : {
    "methodSignature" : "public int compareTo(ReadablePartial partial)",
    "methodName" : "compareTo",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06868() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);\n    LocalDate localDate0 = new LocalDate(dateTimeZone0);\n    LocalDate localDate1 = localDate0.minusWeeks((-3165));\n    localDate1.compareTo((ReadablePartial) localDate0);\n}",
    "testName" : "test06868"
  },
  "test02828" : {
    "methodSignature" : "public int getYear()",
    "methodName" : "getYear",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02828() throws Throwable {\n    Locale locale0 = Locale.TRADITIONAL_CHINESE;\n    Calendar calendar0 = MockCalendar.getInstance(locale0);\n    LocalDate localDate0 = LocalDate.fromCalendarFields(calendar0);\n    LocalDate localDate1 = localDate0.plusYears((-3969));\n    localDate1.getYear();\n}",
    "testName" : "test02828"
  },
  "test113113" : {
    "methodSignature" : "public DateMidnight toDateMidnight(DateTimeZone zone)",
    "methodName" : "toDateMidnight",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test113113() throws Throwable {\n    LocalDate localDate0 = LocalDate.now();\n    DurationFieldType durationFieldType0 = DurationFieldType.WEEKYEARS_TYPE;\n    LocalDate localDate1 = localDate0.withFieldAdded(durationFieldType0, (-2803));\n    localDate1.toDateMidnight((DateTimeZone) null);\n}",
    "testName" : "test113113"
  },
  "test01616" : {
    "methodSignature" : "public DateTime toDateTimeAtStartOfDay(DateTimeZone zone)",
    "methodName" : "toDateTimeAtStartOfDay",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01616() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);\n    LocalDate localDate0 = new LocalDate(dateTimeZone0);\n    localDate0.toDateTimeAtStartOfDay(dateTimeZone0);\n}",
    "testName" : "test01616"
  },
  "test08484" : {
    "methodSignature" : "public LocalDate(int year, int monthOfYear, int dayOfMonth, Chronology chronology)",
    "methodName" : "LocalDate",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08484() throws Throwable {\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) fixedDateTimeZone0);\n    StrictChronology strictChronology0 = StrictChronology.getInstance(iSOChronology0);\n    LocalDate localDate0 = new LocalDate(2, 2, 2, strictChronology0);\n}",
    "testName" : "test08484"
  },
  "test07272" : {
    "methodSignature" : "public int compareTo(ReadablePartial partial)",
    "methodName" : "compareTo",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07272() throws Throwable {\n    MockDate mockDate0 = new MockDate((-27), (-1320), 1900);\n    LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);\n    localDate0.compareTo((ReadablePartial) localDate0);\n}",
    "testName" : "test07272"
  },
  "test04040" : {
    "methodSignature" : "public LocalDate withWeekyear(int weekyear)",
    "methodName" : "withWeekyear",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04040() throws Throwable {\n    DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());\n    DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());\n    doReturn(87).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class), anyString(), anyInt());\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(islamicChronology0);\n    LocalDate localDate0 = LocalDate.parse(\"org.joda.time.field.PreciseDurationField\", dateTimeFormatter1);\n    localDate0.withWeekyear((-1320));\n}",
    "testName" : "test04040"
  },
  "test121121" : {
    "methodSignature" : "public DateTime toDateTime(LocalTime time, DateTimeZone zone)",
    "methodName" : "toDateTime",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test121121() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(37);\n    LocalDate localDate0 = LocalDate.now(dateTimeZone0);\n    localDate0.toDateTime((LocalTime) null, dateTimeZone0);\n}",
    "testName" : "test121121"
  },
  "test0011" : {
    "methodSignature" : "public LocalDate minusMonths(int months)",
    "methodName" : "minusMonths",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0011() throws Throwable {\n    LocalDate localDate0 = LocalDate.now();\n    localDate0.minusMonths((-1946));\n}",
    "testName" : "test0011"
  },
  "test0099" : {
    "methodSignature" : "public LocalDate withField(DateTimeFieldType fieldType, int value)",
    "methodName" : "withField",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0099() throws Throwable {\n    LocalDate localDate0 = new LocalDate();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();\n    localDate0.withField(dateTimeFieldType0, 2);\n}",
    "testName" : "test0099"
  },
  "test09292" : {
    "methodSignature" : "public LocalDate(Object instant, Chronology chronology)",
    "methodName" : "LocalDate",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test09292() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    LocalDate localDate0 = null;\n    localDate0 = new LocalDate(gJChronology0, gJChronology0);\n}",
    "testName" : "test09292"
  },
  "test06060" : {
    "methodSignature" : "public LocalDate(long instant, Chronology chronology)",
    "methodName" : "LocalDate",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06060() throws Throwable {\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();\n    LocalDate localDate0 = null;\n    localDate0 = new LocalDate((-9223372036854775808L), (Chronology) buddhistChronology0);\n}",
    "testName" : "test06060"
  },
  "test03232" : {
    "methodSignature" : "protected long getLocalMillis()",
    "methodName" : "getLocalMillis",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03232() throws Throwable {\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();\n    LocalDate localDate0 = new LocalDate((-24L), (Chronology) ethiopicChronology0);\n    localDate0.getLocalMillis();\n}",
    "testName" : "test03232"
  },
  "test08888" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08888() throws Throwable {\n    LocalDate localDate0 = new LocalDate((DateTimeZone) null);\n    localDate0.size();\n}",
    "testName" : "test08888"
  },
  "test102102" : {
    "methodSignature" : "public LocalDate minusWeeks(int weeks)",
    "methodName" : "minusWeeks",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test102102() throws Throwable {\n    LocalDate localDate0 = new LocalDate();\n    localDate0.minusWeeks(0);\n}",
    "testName" : "test102102"
  },
  "test02020" : {
    "methodSignature" : "public DateTime toDateTimeAtMidnight()",
    "methodName" : "toDateTimeAtMidnight",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02020() throws Throwable {\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    Chronology chronology0 = ethiopicChronology0.withZone(fixedDateTimeZone0);\n    LocalDate localDate0 = new LocalDate(0L, chronology0);\n    localDate0.toDateTimeAtMidnight();\n}",
    "testName" : "test02020"
  },
  "test04444" : {
    "methodSignature" : "public LocalDate withEra(int era)",
    "methodName" : "withEra",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04444() throws Throwable {\n    DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());\n    DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());\n    doReturn(1761).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class), anyString(), anyInt());\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);\n    LocalDate localDate0 = LocalDate.parse(\"WB]X}Vjj\", dateTimeFormatter0);\n    localDate0.withEra(2090);\n}",
    "testName" : "test04444"
  },
  "test07676" : {
    "methodSignature" : "public boolean isSupported(DateTimeFieldType type)",
    "methodName" : "isSupported",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07676() throws Throwable {\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();\n    LocalDateTime localDateTime0 = new LocalDateTime((long) (-2174), (Chronology) buddhistChronology0);\n    LocalDate localDate0 = new LocalDate(localDateTime0, buddhistChronology0);\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();\n    localDate0.isSupported(dateTimeFieldType0);\n}",
    "testName" : "test07676"
  },
  "test05252" : {
    "methodSignature" : "public static LocalDate parse(String str, DateTimeFormatter formatter)",
    "methodName" : "parse",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05252() throws Throwable {\n    DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());\n    DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());\n    doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class), anyString(), anyInt());\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);\n    LocalDate.parse(\"WB]X}Vjj\", dateTimeFormatter0);\n}",
    "testName" : "test05252"
  },
  "test09696" : {
    "methodSignature" : "public String toString(String pattern)",
    "methodName" : "toString",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test09696() throws Throwable {\n    MockDate mockDate0 = new MockDate((-27), (-1320), 1900);\n    LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);\n    localDate0.toString(\"org.joda.time.field.PreciseDurationField\");\n}",
    "testName" : "test09696"
  },
  "test06464" : {
    "methodSignature" : "public LocalDate withPeriodAdded(ReadablePeriod period, int scalar)",
    "methodName" : "withPeriodAdded",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06464() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    LocalDate localDate0 = new LocalDate(dateTimeZone0);\n    JulianChronology julianChronology0 = JulianChronology.getInstance();\n    Period period0 = new Period(0L, (Chronology) julianChronology0);\n    localDate0.withPeriodAdded(period0, 10209375);\n}",
    "testName" : "test06464"
  },
  "test174174" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test174174() throws Throwable {\n    LocalDate localDate0 = new LocalDate();\n    DateMidnight dateMidnight0 = localDate0.toDateMidnight();\n    dateMidnight0.getMillis();\n}",
    "testName" : "test174174"
  },
  "test152152" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test152152() throws Throwable {\n    LocalDate localDate0 = new LocalDate((Object) null);\n    DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay();\n    dateTime0.getMillis();\n}",
    "testName" : "test152152"
  },
  "test110110" : {
    "methodSignature" : "public LocalDate plusYears(int years)",
    "methodName" : "plusYears",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test110110() throws Throwable {\n    LocalDate localDate0 = new LocalDate(1L);\n    localDate0.plusYears(2);\n}",
    "testName" : "test110110"
  },
  "test133133" : {
    "methodSignature" : "public boolean isSupported(DateTimeFieldType type)",
    "methodName" : "isSupported",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test133133() throws Throwable {\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();\n    LocalDate localDate0 = new LocalDate((Chronology) islamicChronology0);\n    boolean boolean0 = localDate0.isSupported((DateTimeFieldType) null);\n}",
    "testName" : "test133133"
  },
  "test08080" : {
    "methodSignature" : "public int getDayOfMonth()",
    "methodName" : "getDayOfMonth",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08080() throws Throwable {\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();\n    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();\n    LocalDate localDate0 = new LocalDate(dateTimeZone0);\n    localDate0.getDayOfMonth();\n}",
    "testName" : "test08080"
  },
  "test118118" : {
    "methodSignature" : "public LocalDate withField(DateTimeFieldType fieldType, int value)",
    "methodName" : "withField",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test118118() throws Throwable {\n    ISOChronology iSOChronology0 = ISOChronology.getInstance();\n    DateTime dateTime0 = new DateTime((Chronology) iSOChronology0);\n    LocalDate localDate0 = dateTime0.toLocalDate();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();\n    localDate0.withField(dateTimeFieldType0, (-1978));\n}",
    "testName" : "test118118"
  },
  "test163163" : {
    "methodSignature" : "public Property weekyear()",
    "methodName" : "weekyear",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test163163() throws Throwable {\n    LocalDate localDate0 = new LocalDate();\n    LocalDate.Property localDate_Property0 = localDate0.weekyear();\n}",
    "testName" : "test163163"
  },
  "test168168" : {
    "methodSignature" : "public Property weekOfWeekyear()",
    "methodName" : "weekOfWeekyear",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test168168() throws Throwable {\n    LocalDate localDate0 = new LocalDate();\n    LocalDate.Property localDate_Property0 = localDate0.weekOfWeekyear();\n}",
    "testName" : "test168168"
  },
  "test122122" : {
    "methodSignature" : "public LocalDateTime toLocalDateTime(LocalTime time)",
    "methodName" : "toLocalDateTime",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test122122() throws Throwable {\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    LocalDate localDate0 = LocalDate.now((DateTimeZone) fixedDateTimeZone0);\n    CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();\n    LocalDateTime localDateTime0 = new LocalDateTime((Chronology) copticChronology0);\n    LocalTime localTime0 = new LocalTime(localDateTime0);\n    localDate0.toLocalDateTime(localTime0);\n}",
    "testName" : "test122122"
  },
  "test0022" : {
    "methodSignature" : "public LocalDate plusDays(int days)",
    "methodName" : "plusDays",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0022() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);\n    LocalDate localDate0 = new LocalDate(dateTimeZone0);\n    localDate0.plusDays((-2082));\n}",
    "testName" : "test0022"
  },
  "test105105" : {
    "methodSignature" : "public LocalDate plusDays(int days)",
    "methodName" : "plusDays",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test105105() throws Throwable {\n    ISOChronology iSOChronology0 = ISOChronology.getInstance();\n    LocalDate localDate0 = new LocalDate((Chronology) iSOChronology0);\n    localDate0.plusDays(0);\n}",
    "testName" : "test105105"
  },
  "test171171" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test171171() throws Throwable {\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();\n    LocalDate localDate0 = new LocalDate(0L, (Chronology) ethiopicChronology0);\n    DateTime dateTime0 = localDate0.toDateTimeAtMidnight();\n    dateTime0.getMillis();\n}",
    "testName" : "test171171"
  },
  "test01313" : {
    "methodSignature" : "public Interval toInterval(DateTimeZone zone)",
    "methodName" : "toInterval",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01313() throws Throwable {\n    LocalDate localDate0 = new LocalDate();\n    Days days0 = Days.MAX_VALUE;\n    LocalDate localDate1 = localDate0.minus(days0);\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    localDate1.toInterval((DateTimeZone) fixedDateTimeZone0);\n}",
    "testName" : "test01313"
  },
  "test06969" : {
    "methodSignature" : "public int compareTo(ReadablePartial partial)",
    "methodName" : "compareTo",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06969() throws Throwable {\n    MockDate mockDate0 = new MockDate((-27), (-1320), 1900);\n    LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);\n    LocalDate localDate1 = localDate0.plusMonths(3);\n    LocalDate localDate2 = localDate0.plusMonths(3);\n    localDate2.compareTo((ReadablePartial) localDate1);\n}",
    "testName" : "test06969"
  },
  "test157157" : {
    "methodSignature" : "public Property era()",
    "methodName" : "era",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test157157() throws Throwable {\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();\n    LocalDate localDate0 = new LocalDate(0L, (Chronology) ethiopicChronology0);\n    LocalDate.Property localDate_Property0 = localDate0.era();\n}",
    "testName" : "test157157"
  },
  "test03737" : {
    "methodSignature" : "public LocalDate withYearOfEra(int yearOfEra)",
    "methodName" : "withYearOfEra",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03737() throws Throwable {\n    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-4001), 44, 44, 40, (-4001), 2);\n    LocalDate localDate0 = LocalDate.fromCalendarFields(mockGregorianCalendar0);\n    localDate0.withYearOfEra((-4001));\n}",
    "testName" : "test03737"
  },
  "test04545" : {
    "methodSignature" : "public LocalDate withDayOfYear(int dayOfYear)",
    "methodName" : "withDayOfYear",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04545() throws Throwable {\n    CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();\n    LocalDate localDate0 = new LocalDate((Chronology) copticChronology0);\n    localDate0.withDayOfYear(951);\n}",
    "testName" : "test04545"
  },
  "test08989" : {
    "methodSignature" : "public DateTime toDateTimeAtCurrentTime(DateTimeZone zone)",
    "methodName" : "toDateTimeAtCurrentTime",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08989() throws Throwable {\n    LocalDate localDate0 = new LocalDate();\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    localDate0.toDateTimeAtCurrentTime(dateTimeZone0);\n}",
    "testName" : "test08989"
  },
  "test132132" : {
    "methodSignature" : "public LocalDate plus(ReadablePeriod period)",
    "methodName" : "plus",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test132132() throws Throwable {\n    CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();\n    LocalDate localDate0 = LocalDate.now((Chronology) copticChronology0);\n    DateTime dateTime0 = DateTime.now((Chronology) copticChronology0);\n    Hours hours0 = Hours.hoursBetween((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);\n    LocalDate localDate1 = localDate0.plus(hours0);\n}",
    "testName" : "test132132"
  },
  "test02525" : {
    "methodSignature" : "public DateMidnight toDateMidnight(DateTimeZone zone)",
    "methodName" : "toDateMidnight",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02525() throws Throwable {\n    ISOChronology iSOChronology0 = ISOChronology.getInstance();\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();\n    Chronology chronology0 = iSOChronology0.withUTC();\n    LocalDate localDate0 = new LocalDate(0L, chronology0);\n    localDate0.toDateMidnight(dateTimeZone0);\n}",
    "testName" : "test02525"
  },
  "test05757" : {
    "methodSignature" : "public LocalDate minus(ReadablePeriod period)",
    "methodName" : "minus",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05757() throws Throwable {\n    LocalDate localDate0 = new LocalDate();\n    Days days0 = Days.MIN_VALUE;\n    localDate0.minus(days0);\n}",
    "testName" : "test05757"
  },
  "test01717" : {
    "methodSignature" : "public DateTime toDateTimeAtStartOfDay()",
    "methodName" : "toDateTimeAtStartOfDay",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01717() throws Throwable {\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();\n    LocalDateTime localDateTime0 = new LocalDateTime(21600000L, (Chronology) buddhistChronology0);\n    LocalDate localDate0 = new LocalDate(localDateTime0, (DateTimeZone) null);\n    LocalDate localDate1 = localDate0.minusMonths(1840);\n    localDate1.toDateTimeAtStartOfDay();\n}",
    "testName" : "test01717"
  },
  "test119119" : {
    "methodSignature" : "public LocalDate withFields(ReadablePartial partial)",
    "methodName" : "withFields",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test119119() throws Throwable {\n    LocalDate localDate0 = new LocalDate(1L);\n    localDate0.withFields(localDate0);\n}",
    "testName" : "test119119"
  },
  "test111111" : {
    "methodSignature" : "public LocalDate withPeriodAdded(ReadablePeriod period, int scalar)",
    "methodName" : "withPeriodAdded",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test111111() throws Throwable {\n    CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();\n    LocalDate localDate0 = LocalDate.now((Chronology) copticChronology0);\n    DateTime dateTime0 = DateTime.now((Chronology) copticChronology0);\n    Hours hours0 = Hours.hoursBetween((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);\n    localDate0.withPeriodAdded(hours0, 0);\n}",
    "testName" : "test111111"
  },
  "test04949" : {
    "methodSignature" : "public LocalDate plus(ReadablePeriod period)",
    "methodName" : "plus",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04949() throws Throwable {\n    LocalDate localDate0 = new LocalDate();\n    Years years0 = Years.MAX_VALUE;\n    localDate0.plus(years0);\n}",
    "testName" : "test04949"
  },
  "test160160" : {
    "methodSignature" : "public int getDayOfYear()",
    "methodName" : "getDayOfYear",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test160160() throws Throwable {\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();\n    LocalDate localDate0 = new LocalDate(0L, (Chronology) ethiopicChronology0);\n    int int0 = localDate0.getDayOfYear();\n}",
    "testName" : "test160160"
  },
  "test181183" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test181183() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    LocalDate localDate0 = new LocalDate(dateTimeZone0);\n    String string0 = localDate0.toString();\n}",
    "testName" : "test181183"
  },
  "test02929" : {
    "methodSignature" : "public int getWeekyear()",
    "methodName" : "getWeekyear",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02929() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    LocalDate localDate0 = new LocalDate(dateTimeZone0);\n    LocalDate localDate1 = localDate0.withYear((-28800000));\n    localDate1.getWeekyear();\n}",
    "testName" : "test02929"
  },
  "test06161" : {
    "methodSignature" : "public LocalDate(int year, int monthOfYear, int dayOfMonth, Chronology chronology)",
    "methodName" : "LocalDate",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06161() throws Throwable {\n    LocalDate localDate0 = null;\n    localDate0 = new LocalDate(943, (-3028), (-1566), (Chronology) null);\n}",
    "testName" : "test06161"
  },
  "test165165" : {
    "methodSignature" : "public int getYearOfCentury()",
    "methodName" : "getYearOfCentury",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test165165() throws Throwable {\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();\n    LocalDate localDate0 = new LocalDate(0L, (Chronology) ethiopicChronology0);\n    int int0 = localDate0.getYearOfCentury();\n}",
    "testName" : "test165165"
  },
  "test07373" : {
    "methodSignature" : "public boolean equals(Object partial)",
    "methodName" : "equals",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07373() throws Throwable {\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();\n    LocalDate localDate0 = new LocalDate(0L, (Chronology) ethiopicChronology0);\n    LocalDate.Property localDate_Property0 = localDate0.monthOfYear();\n    LocalDate localDate1 = localDate_Property0.roundFloorCopy();\n    localDate1.equals(localDate0);\n}",
    "testName" : "test07373"
  },
  "test09393" : {
    "methodSignature" : "public String toString(String pattern, Locale locale) throws IllegalArgumentException",
    "methodName" : "toString",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test09393() throws Throwable {\n    LocalDate localDate0 = new LocalDate(1L);\n    Locale locale0 = Locale.ROOT;\n    localDate0.toString((String) null, locale0);\n}",
    "testName" : "test09393"
  },
  "test0033" : {
    "methodSignature" : "public LocalDate plusWeeks(int weeks)",
    "methodName" : "plusWeeks",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0033() throws Throwable {\n    LocalDate localDate0 = new LocalDate();\n    localDate0.plusWeeks((-368));\n}",
    "testName" : "test0033"
  },
  "test08181" : {
    "methodSignature" : "public DateTime toDateTimeAtStartOfDay(DateTimeZone zone)",
    "methodName" : "toDateTimeAtStartOfDay",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08181() throws Throwable {\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();\n    StrictChronology strictChronology0 = StrictChronology.getInstance(ethiopicChronology0);\n    LocalDate localDate0 = new LocalDate((long) (-1701), (Chronology) strictChronology0);\n    localDate0.toDateTimeAtStartOfDay((DateTimeZone) null);\n}",
    "testName" : "test08181"
  },
  "test07777" : {
    "methodSignature" : "public int get(DateTimeFieldType fieldType)",
    "methodName" : "get",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07777() throws Throwable {\n    LocalDate localDate0 = new LocalDate();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();\n    localDate0.get(dateTimeFieldType0);\n}",
    "testName" : "test07777"
  },
  "test06565" : {
    "methodSignature" : "public LocalDate withPeriodAdded(ReadablePeriod period, int scalar)",
    "methodName" : "withPeriodAdded",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06565() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes((-87), 1);\n    MonthDay monthDay0 = MonthDay.now(dateTimeZone0);\n    LocalDate localDate0 = monthDay0.toLocalDate(1);\n    localDate0.withPeriodAdded((ReadablePeriod) null, 247);\n}",
    "testName" : "test06565"
  },
  "test03333" : {
    "methodSignature" : "protected DateTimeField getField(int index, Chronology chrono)",
    "methodName" : "getField",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03333() throws Throwable {\n    CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();\n    LocalDate localDate0 = LocalDate.now((Chronology) copticChronology0);\n    localDate0.getField(1, (Chronology) copticChronology0);\n}",
    "testName" : "test03333"
  },
  "test127127" : {
    "methodSignature" : "public boolean equals(Object partial)",
    "methodName" : "equals",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test127127() throws Throwable {\n    LocalDate localDate0 = new LocalDate();\n    Integer integer0 = new Integer(5);\n    localDate0.equals(integer0);\n}",
    "testName" : "test127127"
  },
  "test100100" : {
    "methodSignature" : "public LocalDate minusDays(int days)",
    "methodName" : "minusDays",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test100100() throws Throwable {\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();\n    LocalDate localDate0 = new LocalDate((Chronology) buddhistChronology0);\n    localDate0.minusDays(0);\n}",
    "testName" : "test100100"
  },
  "test04141" : {
    "methodSignature" : "public LocalDate withWeekOfWeekyear(int weekOfWeekyear)",
    "methodName" : "withWeekOfWeekyear",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04141() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(3);\n    LocalDate localDate0 = LocalDate.now(dateTimeZone0);\n    localDate0.withWeekOfWeekyear(0);\n}",
    "testName" : "test04141"
  },
  "test09797" : {
    "methodSignature" : "public Property property(DateTimeFieldType fieldType)",
    "methodName" : "property",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test09797() throws Throwable {\n    LocalDate localDate0 = LocalDate.now();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();\n    localDate0.property(dateTimeFieldType0);\n}",
    "testName" : "test09797"
  },
  "test176176" : {
    "methodSignature" : "public LocalDate withMonthOfYear(int monthOfYear)",
    "methodName" : "withMonthOfYear",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test176176() throws Throwable {\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();\n    LocalDate localDate0 = new LocalDate(0L, (Chronology) ethiopicChronology0);\n    LocalDate localDate1 = localDate0.withMonthOfYear(1);\n}",
    "testName" : "test176176"
  },
  "test08585" : {
    "methodSignature" : "public Chronology getChronology()",
    "methodName" : "getChronology",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08585() throws Throwable {\n    LocalDate localDate0 = new LocalDate();\n    localDate0.getChronology();\n}",
    "testName" : "test08585"
  },
  "test02121" : {
    "methodSignature" : "public DateTime toDateTimeAtCurrentTime(DateTimeZone zone)",
    "methodName" : "toDateTimeAtCurrentTime",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02121() throws Throwable {\n    MockDate mockDate0 = new MockDate(0, (-1320), 1900);\n    LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();\n    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();\n    localDate0.toDateTimeAtCurrentTime(dateTimeZone0);\n}",
    "testName" : "test02121"
  },
  "test05353" : {
    "methodSignature" : "public static LocalDate parse(String str)",
    "methodName" : "parse",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05353() throws Throwable {\n    LocalDate.parse((String) null);\n}",
    "testName" : "test05353"
  },
  "test108108" : {
    "methodSignature" : "public LocalDate plusMonths(int months)",
    "methodName" : "plusMonths",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test108108() throws Throwable {\n    CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();\n    LocalDate localDate0 = LocalDate.now((Chronology) copticChronology0);\n    localDate0.plusMonths(0);\n}",
    "testName" : "test108108"
  },
  "test154154" : {
    "methodSignature" : "public LocalDate withDayOfWeek(int dayOfWeek)",
    "methodName" : "withDayOfWeek",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test154154() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    LocalDate localDate0 = new LocalDate(dateTimeZone0);\n    localDate0.withDayOfWeek((-28800000));\n}",
    "testName" : "test154154"
  },
  "test135135" : {
    "methodSignature" : "public int get(DateTimeFieldType fieldType)",
    "methodName" : "get",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test135135() throws Throwable {\n    CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();\n    LocalDate localDate0 = LocalDate.now((Chronology) copticChronology0);\n    localDate0.get((DateTimeFieldType) null);\n}",
    "testName" : "test135135"
  },
  "test116116" : {
    "methodSignature" : "public LocalDate withField(DateTimeFieldType fieldType, int value)",
    "methodName" : "withField",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test116116() throws Throwable {\n    ISOChronology iSOChronology0 = ISOChronology.getInstance();\n    DateTime dateTime0 = new DateTime((Chronology) iSOChronology0);\n    LocalDate localDate0 = dateTime0.toLocalDate();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();\n    localDate0.withField(dateTimeFieldType0, (-1978));\n}",
    "testName" : "test116116"
  },
  "test0044" : {
    "methodSignature" : "public LocalDate plusMonths(int months)",
    "methodName" : "plusMonths",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0044() throws Throwable {\n    MockDate mockDate0 = new MockDate((-27), (-1320), 1900);\n    LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);\n    localDate0.plusMonths((-21));\n}",
    "testName" : "test0044"
  },
  "test145145" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test145145() throws Throwable {\n    LocalDate localDate0 = new LocalDate();\n    LocalDate.Property localDate_Property0 = localDate0.year();\n    LocalDate localDate1 = localDate_Property0.getLocalDate();\n    localDate1.size();\n}",
    "testName" : "test145145"
  },
  "test120120" : {
    "methodSignature" : "public DateTime toDateTime(LocalTime time)",
    "methodName" : "toDateTime",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test120120() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);\n    LocalDate localDate0 = new LocalDate(dateTimeZone0);\n    GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();\n    LocalTime localTime0 = new LocalTime(3600L, (Chronology) gregorianChronology0);\n    localDate0.toDateTime(localTime0);\n}",
    "testName" : "test120120"
  },
  "test103103" : {
    "methodSignature" : "public LocalDate minusMonths(int months)",
    "methodName" : "minusMonths",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test103103() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    LocalDate localDate0 = new LocalDate(dateTimeZone0);\n    localDate0.minusMonths(0);\n}",
    "testName" : "test103103"
  },
  "test128128" : {
    "methodSignature" : "public Date toDate()",
    "methodName" : "toDate",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test128128() throws Throwable {\n    LocalDate localDate0 = new LocalDate();\n    localDate0.toDate();\n}",
    "testName" : "test128128"
  },
  "test173173" : {
    "methodSignature" : "public LocalDate withYearOfEra(int yearOfEra)",
    "methodName" : "withYearOfEra",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test173173() throws Throwable {\n    MockDate mockDate0 = new MockDate((-27), (-1320), 1900);\n    LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);\n    LocalDate localDate1 = localDate0.withYearOfEra(5);\n}",
    "testName" : "test173173"
  },
  "test05858" : {
    "methodSignature" : "public LocalDate(Object instant, DateTimeZone zone)",
    "methodName" : "LocalDate",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05858() throws Throwable {\n    Partial partial0 = new Partial();\n    LocalDate localDate0 = null;\n    localDate0 = new LocalDate(partial0, (DateTimeZone) null);\n}",
    "testName" : "test05858"
  },
  "test151151" : {
    "methodSignature" : "public int getEra()",
    "methodName" : "getEra",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test151151() throws Throwable {\n    LocalDate localDate0 = new LocalDate();\n    int int0 = localDate0.getEra();\n}",
    "testName" : "test151151"
  },
  "test03434" : {
    "methodSignature" : "public int getEra()",
    "methodName" : "getEra",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03434() throws Throwable {\n    LocalDate localDate0 = new LocalDate();\n    Days days0 = Days.MAX_VALUE;\n    LocalDate localDate1 = localDate0.minus(days0);\n    localDate1.getEra();\n}",
    "testName" : "test03434"
  },
  "test02626" : {
    "methodSignature" : "public DateMidnight toDateMidnight()",
    "methodName" : "toDateMidnight",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02626() throws Throwable {\n    LocalDate localDate0 = new LocalDate(1L);\n    localDate0.toDateMidnight();\n}",
    "testName" : "test02626"
  },
  "test04646" : {
    "methodSignature" : "public LocalDate withDayOfMonth(int dayOfMonth)",
    "methodName" : "withDayOfMonth",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04646() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(37);\n    LocalDate localDate0 = LocalDate.now(dateTimeZone0);\n    localDate0.withDayOfMonth((-108));\n}",
    "testName" : "test04646"
  },
  "test07878" : {
    "methodSignature" : "public int getValue(int index)",
    "methodName" : "getValue",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07878() throws Throwable {\n    DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());\n    DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());\n    doReturn(1761).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class), anyString(), anyInt());\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);\n    LocalDate localDate0 = LocalDate.parse(\"WB]X}Vjj\", dateTimeFormatter0);\n    localDate0.getValue(2);\n}",
    "testName" : "test07878"
  },
  "test159159" : {
    "methodSignature" : "public Property dayOfWeek()",
    "methodName" : "dayOfWeek",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test159159() throws Throwable {\n    LocalDate localDate0 = new LocalDate((Object) null);\n    LocalDate.Property localDate_Property0 = localDate0.dayOfWeek();\n}",
    "testName" : "test159159"
  },
  "test01414" : {
    "methodSignature" : "public Interval toInterval()",
    "methodName" : "toInterval",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01414() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    LocalDate localDate0 = new LocalDate(dateTimeZone0);\n    LocalDate localDate1 = localDate0.withYear((-28800000));\n    localDate1.toInterval();\n}",
    "testName" : "test01414"
  },
  "test134134" : {
    "methodSignature" : "public int get(DateTimeFieldType fieldType)",
    "methodName" : "get",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test134134() throws Throwable {\n    LocalDate localDate0 = new LocalDate();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();\n    localDate0.get(dateTimeFieldType0);\n}",
    "testName" : "test134134"
  },
  "test117117" : {
    "methodSignature" : "public LocalDate withField(DateTimeFieldType fieldType, int value)",
    "methodName" : "withField",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test117117() throws Throwable {\n    LocalDate localDate0 = new LocalDate(1L);\n    localDate0.withField((DateTimeFieldType) null, (-2857));\n}",
    "testName" : "test117117"
  },
  "test03838" : {
    "methodSignature" : "public LocalDate withYearOfCentury(int yearOfCentury)",
    "methodName" : "withYearOfCentury",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03838() throws Throwable {\n    LocalDate localDate0 = new LocalDate();\n    localDate0.withYearOfCentury(1687);\n}",
    "testName" : "test03838"
  },
  "test01818" : {
    "methodSignature" : "public DateTime toDateTimeAtMidnight(DateTimeZone zone)",
    "methodName" : "toDateTimeAtMidnight",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01818() throws Throwable {\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    Chronology chronology0 = ethiopicChronology0.withZone(fixedDateTimeZone0);\n    LocalDate localDate0 = new LocalDate(0L, chronology0);\n    localDate0.toDateTimeAtMidnight((DateTimeZone) fixedDateTimeZone0);\n}",
    "testName" : "test01818"
  },
  "test05050" : {
    "methodSignature" : "public static LocalDate parse(String str, DateTimeFormatter formatter)",
    "methodName" : "parse",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05050() throws Throwable {\n    DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());\n    DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());\n    doReturn((-2147483646)).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class), anyString(), anyInt());\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);\n    LocalDate.parse(\"org.joda.time.field.PreciseDurationField\", dateTimeFormatter0);\n}",
    "testName" : "test05050"
  },
  "test09494" : {
    "methodSignature" : "public String toString(String pattern, Locale locale) throws IllegalArgumentException",
    "methodName" : "toString",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test09494() throws Throwable {\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();\n    LocalDate localDate0 = new LocalDate(0L, (Chronology) ethiopicChronology0);\n    Locale locale0 = Locale.FRENCH;\n    localDate0.toString(\"4\", locale0);\n}",
    "testName" : "test09494"
  },
  "test06262" : {
    "methodSignature" : "public LocalDate(int year, int monthOfYear, int dayOfMonth)",
    "methodName" : "LocalDate",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06262() throws Throwable {\n    LocalDate localDate0 = null;\n    localDate0 = new LocalDate(0, 0, 0);\n}",
    "testName" : "test06262"
  },
  "test140140" : {
    "methodSignature" : "public static LocalDate now(Chronology chronology)",
    "methodName" : "now",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test140140() throws Throwable {\n    LocalDate.now((Chronology) null);\n}",
    "testName" : "test140140"
  },
  "test167167" : {
    "methodSignature" : "public int getCenturyOfEra()",
    "methodName" : "getCenturyOfEra",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test167167() throws Throwable {\n    LocalDate localDate0 = new LocalDate();\n    int int0 = localDate0.getCenturyOfEra();\n}",
    "testName" : "test167167"
  },
  "test08282" : {
    "methodSignature" : "public Interval toInterval(DateTimeZone zone)",
    "methodName" : "toInterval",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08282() throws Throwable {\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    LocalDate localDate0 = new LocalDate((-24L), (Chronology) ethiopicChronology0);\n    localDate0.toInterval((DateTimeZone) fixedDateTimeZone0);\n}",
    "testName" : "test08282"
  },
  "test07070" : {
    "methodSignature" : "public int compareTo(ReadablePartial partial)",
    "methodName" : "compareTo",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07070() throws Throwable {\n    LocalDate localDate0 = new LocalDate();\n    LocalTime localTime0 = new LocalTime((-2271L));\n    localDate0.compareTo((ReadablePartial) localTime0);\n}",
    "testName" : "test07070"
  },
  "test125125" : {
    "methodSignature" : "public int hashCode()",
    "methodName" : "hashCode",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test125125() throws Throwable {\n    LocalDate localDate0 = new LocalDate();\n    localDate0.hashCode();\n}",
    "testName" : "test125125"
  },
  "test0055" : {
    "methodSignature" : "public LocalDate withFieldAdded(DurationFieldType fieldType, int amount)",
    "methodName" : "withFieldAdded",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0055() throws Throwable {\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();\n    LocalDateTime localDateTime0 = new LocalDateTime(21600000L, (Chronology) buddhistChronology0);\n    LocalDate localDate0 = new LocalDate(localDateTime0, (DateTimeZone) null);\n    DurationFieldType durationFieldType0 = DurationFieldType.months();\n    localDate0.withFieldAdded(durationFieldType0, 1);\n}",
    "testName" : "test0055"
  },
  "test05454" : {
    "methodSignature" : "public LocalDate minusYears(int years)",
    "methodName" : "minusYears",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05454() throws Throwable {\n    MockDate mockDate0 = new MockDate((-3620), 2587, 623191204, (-1688), 2477, 2587);\n    LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);\n    localDate0.minusYears(2147483639);\n}",
    "testName" : "test05454"
  },
  "test09898" : {
    "methodSignature" : "public Property property(DateTimeFieldType fieldType)",
    "methodName" : "property",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test09898() throws Throwable {\n    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(58, 58, (-2699));\n    LocalDate localDate0 = LocalDate.fromCalendarFields(mockGregorianCalendar0);\n    localDate0.property((DateTimeFieldType) null);\n}",
    "testName" : "test09898"
  },
  "test06666" : {
    "methodSignature" : "public DateTime toDateTime(LocalTime time, DateTimeZone zone)",
    "methodName" : "toDateTime",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06666() throws Throwable {\n    CopticChronology copticChronology0 = CopticChronology.getInstance();\n    LocalDate localDate0 = new LocalDate((Chronology) copticChronology0);\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-288));\n    LocalTime localTime0 = new LocalTime((long) 1, dateTimeZone0);\n    localDate0.toDateTime(localTime0, dateTimeZone0);\n}",
    "testName" : "test06666"
  },
  "test03030" : {
    "methodSignature" : "protected long getLocalMillis()",
    "methodName" : "getLocalMillis",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03030() throws Throwable {\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    Chronology chronology0 = ethiopicChronology0.withZone(fixedDateTimeZone0);\n    LocalDate localDate0 = new LocalDate(0L, chronology0);\n    localDate0.getLocalMillis();\n}",
    "testName" : "test03030"
  },
  "test08686" : {
    "methodSignature" : "public int getMonthOfYear()",
    "methodName" : "getMonthOfYear",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08686() throws Throwable {\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();\n    LocalDate localDate0 = new LocalDate((Chronology) islamicChronology0);\n    localDate0.getMonthOfYear();\n}",
    "testName" : "test08686"
  },
  "test178179" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test178179() throws Throwable {\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    LocalDate localDate0 = LocalDate.now((DateTimeZone) fixedDateTimeZone0);\n    DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime();\n    dateTime0.getMillis();\n}",
    "testName" : "test178179"
  },
  "test02222" : {
    "methodSignature" : "public DateTime toDateTimeAtCurrentTime()",
    "methodName" : "toDateTimeAtCurrentTime",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02222() throws Throwable {\n    LocalDate localDate0 = new LocalDate();\n    LocalDate localDate1 = localDate0.withYear(40);\n    localDate1.toDateTimeAtCurrentTime();\n}",
    "testName" : "test02222"
  },
  "test07474" : {
    "methodSignature" : "public boolean isSupported(DurationFieldType type)",
    "methodName" : "isSupported",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07474() throws Throwable {\n    LocalDate localDate0 = LocalDate.now();\n    DurationFieldType durationFieldType0 = DurationFieldType.SECONDS_TYPE;\n    localDate0.isSupported(durationFieldType0);\n}",
    "testName" : "test07474"
  },
  "test178178" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test178178() throws Throwable {\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    LocalDate localDate0 = LocalDate.now((DateTimeZone) fixedDateTimeZone0);\n    DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime();\n    localDate0.size();\n}",
    "testName" : "test178178"
  },
  "test04242" : {
    "methodSignature" : "public LocalDate withPeriodAdded(ReadablePeriod period, int scalar)",
    "methodName" : "withPeriodAdded",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04242() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    LocalDate localDate0 = new LocalDate(dateTimeZone0);\n    JulianChronology julianChronology0 = JulianChronology.getInstance();\n    Period period0 = new Period(0L, (Chronology) julianChronology0);\n    Period period1 = period0.withMillis((-782));\n    localDate0.withPeriodAdded(period1, 10209375);\n}",
    "testName" : "test04242"
  },
  "test106106" : {
    "methodSignature" : "public LocalDate plusWeeks(int weeks)",
    "methodName" : "plusWeeks",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test106106() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    LocalDate localDate0 = new LocalDate(dateTimeZone0);\n    localDate0.plusWeeks(0);\n}",
    "testName" : "test106106"
  },
  "test170170" : {
    "methodSignature" : "public LocalDate withWeekOfWeekyear(int weekOfWeekyear)",
    "methodName" : "withWeekOfWeekyear",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test170170() throws Throwable {\n    LocalDate localDate0 = new LocalDate();\n    LocalDate localDate1 = localDate0.withWeekOfWeekyear(1);\n}",
    "testName" : "test170170"
  },
  "test01010" : {
    "methodSignature" : "public LocalDate withDayOfWeek(int dayOfWeek)",
    "methodName" : "withDayOfWeek",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01010() throws Throwable {\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();\n    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();\n    LocalDate localDate0 = new LocalDate(dateTimeZone0);\n    localDate0.withDayOfWeek(1);\n}",
    "testName" : "test01010"
  },
  "test156156" : {
    "methodSignature" : "public int getYearOfEra()",
    "methodName" : "getYearOfEra",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test156156() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    LocalDate localDate0 = new LocalDate(dateTimeZone0);\n    int int0 = localDate0.getYearOfEra();\n}",
    "testName" : "test156156"
  },
  "test137137" : {
    "methodSignature" : "protected DateTimeField getField(int index, Chronology chrono)",
    "methodName" : "getField",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test137137() throws Throwable {\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();\n    LocalDate localDate0 = new LocalDate(0L, (Chronology) ethiopicChronology0);\n    localDate0.getField(62, (Chronology) ethiopicChronology0);\n}",
    "testName" : "test137137"
  },
  "test09090" : {
    "methodSignature" : "public DateTime toDateTimeAtMidnight(DateTimeZone zone)",
    "methodName" : "toDateTimeAtMidnight",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test09090() throws Throwable {\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    LocalDate localDate0 = new LocalDate(0L, (Chronology) ethiopicChronology0);\n    localDate0.toDateTimeAtMidnight((DateTimeZone) fixedDateTimeZone0);\n}",
    "testName" : "test09090"
  },
  "test114114" : {
    "methodSignature" : "public LocalDate withFieldAdded(DurationFieldType fieldType, int amount)",
    "methodName" : "withFieldAdded",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test114114() throws Throwable {\n    LocalDate localDate0 = new LocalDate(0L);\n    localDate0.withFieldAdded((DurationFieldType) null, 2);\n}",
    "testName" : "test114114"
  },
  "test182184" : {
    "methodSignature" : "public LocalDate withEra(int era)",
    "methodName" : "withEra",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test182184() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    LocalDate localDate0 = new LocalDate(dateTimeZone0);\n    LocalDate localDate1 = localDate0.withEra(0);\n}",
    "testName" : "test182184"
  },
  "test179180" : {
    "methodSignature" : "public long getEndMillis()",
    "methodName" : "getEndMillis",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test179180() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    LocalDate localDate0 = new LocalDate(dateTimeZone0);\n    Interval interval0 = localDate0.toInterval();\n    interval0.getEndMillis();\n}",
    "testName" : "test179180"
  },
  "test179181" : {
    "methodSignature" : "public long getStartMillis()",
    "methodName" : "getStartMillis",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test179181() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    LocalDate localDate0 = new LocalDate(dateTimeZone0);\n    Interval interval0 = localDate0.toInterval();\n    interval0.getStartMillis();\n}",
    "testName" : "test179181"
  },
  "test126126" : {
    "methodSignature" : "public Date toDate()",
    "methodName" : "toDate",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test126126() throws Throwable {\n    LocalDate localDate0 = new LocalDate();\n    Days days0 = Days.MAX_VALUE;\n    LocalDate localDate1 = localDate0.minus(days0);\n    localDate1.toDate();\n}",
    "testName" : "test126126"
  },
  "test101101" : {
    "methodSignature" : "public LocalDate minusDays(int days)",
    "methodName" : "minusDays",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test101101() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    LocalDate localDate0 = new LocalDate(dateTimeZone0);\n    localDate0.minusDays(14);\n}",
    "testName" : "test101101"
  },
  "test175175" : {
    "methodSignature" : "public int getYear()",
    "methodName" : "getYear",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test175175() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    LocalDate localDate0 = new LocalDate(dateTimeZone0);\n    int int0 = localDate0.getYear();\n}",
    "testName" : "test175175"
  },
  "test150150" : {
    "methodSignature" : "public String toString(String pattern, Locale locale) throws IllegalArgumentException",
    "methodName" : "toString",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test150150() throws Throwable {\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();\n    LocalDateTime localDateTime0 = new LocalDateTime(21600000L, (Chronology) buddhistChronology0);\n    LocalDate localDate0 = new LocalDate(localDateTime0, (DateTimeZone) null);\n    Locale locale0 = Locale.CANADA_FRENCH;\n    localDate0.toString(\"14G/mB\\\"Y^M9;~k2RFk\", locale0);\n}",
    "testName" : "test150150"
  },
  "test109109" : {
    "methodSignature" : "public LocalDate plusYears(int years)",
    "methodName" : "plusYears",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test109109() throws Throwable {\n    CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();\n    LocalDate localDate0 = LocalDate.now((Chronology) copticChronology0);\n    localDate0.plusYears(0);\n}",
    "testName" : "test109109"
  },
  "test04747" : {
    "methodSignature" : "public LocalDate withCenturyOfEra(int centuryOfEra)",
    "methodName" : "withCenturyOfEra",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04747() throws Throwable {\n    MockDate mockDate0 = new MockDate(0, (-1320), 1900);\n    LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);\n    localDate0.withCenturyOfEra((-2));\n}",
    "testName" : "test04747"
  },
  "test02323" : {
    "methodSignature" : "public DateTime toDateTime(LocalTime time, DateTimeZone zone)",
    "methodName" : "toDateTime",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02323() throws Throwable {\n    LocalDate localDate0 = new LocalDate(1L);\n    LocalTime localTime0 = new LocalTime(2, 41);\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2);\n    localDate0.toDateTime(localTime0, dateTimeZone0);\n}",
    "testName" : "test02323"
  },
  "test05959" : {
    "methodSignature" : "public LocalDate(Object instant)",
    "methodName" : "LocalDate",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05959() throws Throwable {\n    LocalDate localDate0 = null;\n    localDate0 = new LocalDate(\"eg1/`gL<X|%\");\n}",
    "testName" : "test05959"
  },
  "test153153" : {
    "methodSignature" : "public int getWeekOfWeekyear()",
    "methodName" : "getWeekOfWeekyear",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test153153() throws Throwable {\n    LocalDate localDate0 = new LocalDate();\n    int int0 = localDate0.getWeekOfWeekyear();\n}",
    "testName" : "test153153"
  },
  "test07979" : {
    "methodSignature" : "public int getValue(int index)",
    "methodName" : "getValue",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07979() throws Throwable {\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();\n    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();\n    LocalDate localDate0 = new LocalDate(dateTimeZone0);\n    localDate0.getValue(1);\n}",
    "testName" : "test07979"
  },
  "test136136" : {
    "methodSignature" : "public int getValue(int index)",
    "methodName" : "getValue",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test136136() throws Throwable {\n    LocalDate localDate0 = new LocalDate();\n    localDate0.getValue(3);\n}",
    "testName" : "test136136"
  },
  "test01515" : {
    "methodSignature" : "public DateTime toDateTimeAtStartOfDay(DateTimeZone zone)",
    "methodName" : "toDateTimeAtStartOfDay",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01515() throws Throwable {\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    LocalDate localDate0 = new LocalDate();\n    LocalDate localDate1 = localDate0.withLocalMillis(21600000L);\n    localDate1.toDateTimeAtStartOfDay((DateTimeZone) fixedDateTimeZone0);\n}",
    "testName" : "test01515"
  },
  "test06767" : {
    "methodSignature" : "public DateTime toDateTime(LocalTime time, DateTimeZone zone)",
    "methodName" : "toDateTime",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06767() throws Throwable {\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    LocalDate localDate0 = new LocalDate();\n    LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) ethiopicChronology0);\n    Date date0 = localDateTime0.toDate();\n    LocalTime localTime0 = LocalTime.fromDateFields(date0);\n    localDate0.toDateTime(localTime0, (DateTimeZone) fixedDateTimeZone0);\n}",
    "testName" : "test06767"
  },
  "test03535" : {
    "methodSignature" : "public int getCenturyOfEra()",
    "methodName" : "getCenturyOfEra",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03535() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes((-87), 1);\n    MonthDay monthDay0 = MonthDay.now(dateTimeZone0);\n    LocalDate localDate0 = monthDay0.toLocalDate(1);\n    localDate0.getCenturyOfEra();\n}",
    "testName" : "test03535"
  },
  "test02727" : {
    "methodSignature" : "public static LocalDate parse(String str)",
    "methodName" : "parse",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02727() throws Throwable {\n    LocalDate.parse(\"2014-02-14\");\n}",
    "testName" : "test02727"
  },
  "test115115" : {
    "methodSignature" : "public LocalDate withFieldAdded(DurationFieldType fieldType, int amount)",
    "methodName" : "withFieldAdded",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test115115() throws Throwable {\n    LocalDate localDate0 = new LocalDate();\n    DurationFieldType durationFieldType0 = DurationFieldType.MILLIS_TYPE;\n    localDate0.withFieldAdded(durationFieldType0, 1900);\n}",
    "testName" : "test115115"
  },
  "test01919" : {
    "methodSignature" : "public DateTime toDateTimeAtMidnight(DateTimeZone zone)",
    "methodName" : "toDateTimeAtMidnight",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01919() throws Throwable {\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    LocalDate localDate0 = LocalDate.now((DateTimeZone) fixedDateTimeZone0);\n    localDate0.toDateTimeAtMidnight((DateTimeZone) fixedDateTimeZone0);\n}",
    "testName" : "test01919"
  },
  "test164164" : {
    "methodSignature" : "public Property dayOfMonth()",
    "methodName" : "dayOfMonth",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test164164() throws Throwable {\n    LocalDate localDate0 = new LocalDate();\n    LocalDate.Property localDate_Property0 = localDate0.dayOfMonth();\n}",
    "testName" : "test164164"
  },
  "test03939" : {
    "methodSignature" : "public LocalDate withYear(int year)",
    "methodName" : "withYear",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03939() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    LocalDate localDate0 = new LocalDate(0L, (Chronology) gJChronology0);\n    localDate0.withYear(0);\n}",
    "testName" : "test03939"
  },
  "test09595" : {
    "methodSignature" : "public String toString(String pattern)",
    "methodName" : "toString",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test09595() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = gJChronology0.getZone();\n    LocalDate localDate0 = new LocalDate((-1269L), dateTimeZone0);\n    localDate0.toString((String) null);\n}",
    "testName" : "test09595"
  },
  "test169169" : {
    "methodSignature" : "public int getDayOfWeek()",
    "methodName" : "getDayOfWeek",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test169169() throws Throwable {\n    LocalDate localDate0 = new LocalDate();\n    int int0 = localDate0.getDayOfWeek();\n}",
    "testName" : "test169169"
  },
  "test08383" : {
    "methodSignature" : "public DateMidnight toDateMidnight(DateTimeZone zone)",
    "methodName" : "toDateMidnight",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08383() throws Throwable {\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    LocalDateTime localDateTime0 = LocalDateTime.now((DateTimeZone) fixedDateTimeZone0);\n    Date date0 = localDateTime0.toDate();\n    LocalDate localDate0 = LocalDate.fromDateFields(date0);\n    localDate0.toDateMidnight((DateTimeZone) fixedDateTimeZone0);\n}",
    "testName" : "test08383"
  },
  "test05151" : {
    "methodSignature" : "public static LocalDate parse(String str, DateTimeFormatter formatter)",
    "methodName" : "parse",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05151() throws Throwable {\n    LocalDate.parse(\">PN:7W}S(^\", (DateTimeFormatter) null);\n}",
    "testName" : "test05151"
  },
  "test123123" : {
    "methodSignature" : "public LocalDateTime toLocalDateTime(LocalTime time)",
    "methodName" : "toLocalDateTime",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test123123() throws Throwable {\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();\n    LocalDate localDate0 = new LocalDate(100000000000000000L, (Chronology) islamicChronology0);\n    localDate0.toLocalDateTime((LocalTime) null);\n}",
    "testName" : "test123123"
  },
  "test07171" : {
    "methodSignature" : "public int compareTo(ReadablePartial partial)",
    "methodName" : "compareTo",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07171() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);\n    LocalDate localDate0 = new LocalDate(dateTimeZone0);\n    LocalDate localDate1 = localDate0.minusWeeks((-3165));\n    localDate0.compareTo((ReadablePartial) localDate1);\n}",
    "testName" : "test07171"
  },
  "test04343" : {
    "methodSignature" : "public LocalDate withMonthOfYear(int monthOfYear)",
    "methodName" : "withMonthOfYear",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04343() throws Throwable {\n    LocalDate localDate0 = new LocalDate();\n    localDate0.withMonthOfYear(20);\n}",
    "testName" : "test04343"
  },
  "test09999" : {
    "methodSignature" : "public Property property(DateTimeFieldType fieldType)",
    "methodName" : "property",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test09999() throws Throwable {\n    ISOChronology iSOChronology0 = ISOChronology.getInstance();\n    DateTime dateTime0 = new DateTime((Chronology) iSOChronology0);\n    LocalDate localDate0 = dateTime0.toLocalDate();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();\n    localDate0.property(dateTimeFieldType0);\n}",
    "testName" : "test09999"
  },
  "test104104" : {
    "methodSignature" : "public LocalDate minusYears(int years)",
    "methodName" : "minusYears",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test104104() throws Throwable {\n    LocalDate localDate0 = LocalDate.now();\n    localDate0.minusYears(0);\n}",
    "testName" : "test104104"
  },
  "test08787" : {
    "methodSignature" : "public static LocalDate parse(String str, DateTimeFormatter formatter)",
    "methodName" : "parse",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08787() throws Throwable {\n    DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, (DateTimeParser) null);\n    LocalDate.parse(\"d4?\", dateTimeFormatter0);\n}",
    "testName" : "test08787"
  },
  "test05555" : {
    "methodSignature" : "public LocalDate minusYears(int years)",
    "methodName" : "minusYears",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05555() throws Throwable {\n    LocalDate localDate0 = new LocalDate();\n    localDate0.minusYears((-2147483646));\n}",
    "testName" : "test05555"
  },
  "test01111" : {
    "methodSignature" : "public Interval toInterval(DateTimeZone zone)",
    "methodName" : "toInterval",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01111() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes((-87), 1);\n    MonthDay monthDay0 = MonthDay.now(dateTimeZone0);\n    LocalDate localDate0 = monthDay0.toLocalDate(1);\n    LocalDate localDate1 = localDate0.minusYears((-2331));\n    localDate1.toInterval(dateTimeZone0);\n}",
    "testName" : "test01111"
  },
  "test06363" : {
    "methodSignature" : "public LocalDate plusDays(int days)",
    "methodName" : "plusDays",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06363() throws Throwable {\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();\n    LocalDateTime localDateTime0 = new LocalDateTime((long) (-2174), (Chronology) buddhistChronology0);\n    LocalDate localDate0 = new LocalDate(localDateTime0, buddhistChronology0);\n    localDate0.plusDays(3304);\n}",
    "testName" : "test06363"
  },
  "test03131" : {
    "methodSignature" : "protected long getLocalMillis()",
    "methodName" : "getLocalMillis",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03131() throws Throwable {\n    LocalDate localDate0 = new LocalDate();\n    localDate0.getLocalMillis();\n}",
    "testName" : "test03131"
  },
  "test07575" : {
    "methodSignature" : "public boolean isSupported(DateTimeFieldType type)",
    "methodName" : "isSupported",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07575() throws Throwable {\n    LocalDate localDate0 = new LocalDate();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();\n    localDate0.isSupported(dateTimeFieldType0);\n}",
    "testName" : "test07575"
  },
  "test172172" : {
    "methodSignature" : "public LocalDate withCenturyOfEra(int centuryOfEra)",
    "methodName" : "withCenturyOfEra",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test172172() throws Throwable {\n    LocalDate localDate0 = new LocalDate();\n    LocalDate localDate1 = localDate0.withCenturyOfEra(14);\n}",
    "testName" : "test172172"
  },
  "test158158" : {
    "methodSignature" : "public int getWeekyear()",
    "methodName" : "getWeekyear",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test158158() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    LocalDate localDate0 = new LocalDate(dateTimeZone0);\n    int int0 = localDate0.getWeekyear();\n}",
    "testName" : "test158158"
  },
  "test139139" : {
    "methodSignature" : "public static LocalDate fromCalendarFields(Calendar calendar)",
    "methodName" : "fromCalendarFields",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test139139() throws Throwable {\n    LocalDate.fromCalendarFields((Calendar) null);\n}",
    "testName" : "test139139"
  },
  "test131131" : {
    "methodSignature" : "public boolean isSupported(DurationFieldType type)",
    "methodName" : "isSupported",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test131131() throws Throwable {\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();\n    LocalDate localDate0 = new LocalDate(0L, (Chronology) ethiopicChronology0);\n    boolean boolean0 = localDate0.isSupported((DurationFieldType) null);\n}",
    "testName" : "test131131"
  },
  "test09191" : {
    "methodSignature" : "public LocalDate(int year, int monthOfYear, int dayOfMonth)",
    "methodName" : "LocalDate",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test09191() throws Throwable {\n    LocalDate localDate0 = new LocalDate(21, 8, 21);\n}",
    "testName" : "test09191"
  },
  "test112112" : {
    "methodSignature" : "public LocalDate withFieldAdded(DurationFieldType fieldType, int amount)",
    "methodName" : "withFieldAdded",
    "className" : "org.joda.time.LocalDate",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test112112() throws Throwable {\n    LocalDate localDate0 = new LocalDate();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();\n    DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();\n    localDate0.withFieldAdded(durationFieldType0, 0);\n}",
    "testName" : "test112112"
  }
}