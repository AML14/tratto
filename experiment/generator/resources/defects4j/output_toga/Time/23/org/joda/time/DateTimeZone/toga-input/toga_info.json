{
  "test4966" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4966() throws Throwable {\n    Integer integer0 = new Integer(0);\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes((int) integer0, 0);\n    dateTimeZone0.getID();\n}",
    "testName" : "test4966"
  },
  "test6989" : {
    "methodSignature" : "public boolean isStandardOffset(long instant)",
    "methodName" : "isStandardOffset",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6989() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    boolean boolean0 = dateTimeZone0.isStandardOffset(0L);\n}",
    "testName" : "test6989"
  },
  "test1214" : {
    "methodSignature" : "public abstract long previousTransition(long instant)",
    "methodName" : "previousTransition",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1214() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    long long0 = dateTimeZone0.previousTransition((-838L));\n}",
    "testName" : "test1214"
  },
  "test5775" : {
    "methodSignature" : "public boolean isLocalDateTimeGap(LocalDateTime localDateTime)",
    "methodName" : "isLocalDateTimeGap",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5775() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    dateTimeZone0.isLocalDateTimeGap((LocalDateTime) null);\n}",
    "testName" : "test5775"
  },
  "test87113" : {
    "methodSignature" : "public static Provider getProvider()",
    "methodName" : "getProvider",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test87113() throws Throwable {\n    Provider provider0 = DateTimeZone.getProvider();\n}",
    "testName" : "test87113"
  },
  "test2024" : {
    "methodSignature" : "public abstract int getStandardOffset(long instant)",
    "methodName" : "getStandardOffset",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2024() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    int int0 = dateTimeZone0.getStandardOffset((-1619L));\n}",
    "testName" : "test2024"
  },
  "test077" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forID(\"-00:00:02.895\");\n    dateTimeZone0.getID();\n}",
    "testName" : "test077"
  },
  "test82108" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test82108() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);\n    dateTimeZone0.toString();\n}",
    "testName" : "test82108"
  },
  "test1618" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1618() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 0);\n    dateTimeZone0.isFixed();\n    dateTimeZone0.toString();\n}",
    "testName" : "test1618"
  },
  "test6180" : {
    "methodSignature" : "public long convertLocalToUTC(long instantLocal, boolean strict)",
    "methodName" : "convertLocalToUTC",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6180() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    dateTimeZone0.convertLocalToUTC(9223372036854775807L, false);\n}",
    "testName" : "test6180"
  },
  "test6585" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6585() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);\n    long long0 = dateTimeZone0.convertUTCToLocal(0L);\n    dateTimeZone0.toString();\n}",
    "testName" : "test6585"
  },
  "test6584" : {
    "methodSignature" : "public long convertUTCToLocal(long instantUTC)",
    "methodName" : "convertUTCToLocal",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6584() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);\n    long long0 = dateTimeZone0.convertUTCToLocal(0L);\n}",
    "testName" : "test6584"
  },
  "test7394" : {
    "methodSignature" : "public static void setNameProvider(NameProvider nameProvider) throws SecurityException",
    "methodName" : "setNameProvider",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7394() throws Throwable {\n    DateTimeZone.setNameProvider((NameProvider) null);\n}",
    "testName" : "test7394"
  },
  "test5370" : {
    "methodSignature" : "public int hashCode()",
    "methodName" : "hashCode",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5370() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forID(\"Africa/Harare\");\n    dateTimeZone0.hashCode();\n}",
    "testName" : "test5370"
  },
  "test3646" : {
    "methodSignature" : "public long convertLocalToUTC(long instantLocal, boolean strict)",
    "methodName" : "convertLocalToUTC",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3646() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forID(\"Africa/Harare\");\n    long long0 = dateTimeZone0.convertLocalToUTC((long) 7200000, false);\n}",
    "testName" : "test3646"
  },
  "test2430" : {
    "methodSignature" : "public abstract int getOffset(long instant)",
    "methodName" : "getOffset",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2430() throws Throwable {\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();\n    int int0 = dateTimeZone0.UTC.getOffset(2332L);\n}",
    "testName" : "test2430"
  },
  "test5269" : {
    "methodSignature" : "public static DateTimeZone getDefault()",
    "methodName" : "getDefault",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5269() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    DateTimeZone dateTimeZone1 = DateTimeZone.getDefault();\n}",
    "testName" : "test5269"
  },
  "test4456" : {
    "methodSignature" : "public String getName(long instant, Locale locale)",
    "methodName" : "getName",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4456() throws Throwable {\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();\n    String string0 = dateTimeZone0.getName((long) 1, (Locale) null);\n}",
    "testName" : "test4456"
  },
  "test84110" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test84110() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    DateTimeZone.setDefault(dateTimeZone0);\n    dateTimeZone0.toString();\n}",
    "testName" : "test84110"
  },
  "test066" : {
    "methodSignature" : "public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException",
    "methodName" : "forOffsetHoursMinutes",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066() throws Throwable {\n    DateTimeZone.forOffsetHoursMinutes(0, (-1972));\n}",
    "testName" : "test066"
  },
  "test2835" : {
    "methodSignature" : "public String getNameKey(long instant)",
    "methodName" : "getNameKey",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2835() throws Throwable {\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    String string0 = fixedDateTimeZone0.getNameKey(2442L);\n}",
    "testName" : "test2835"
  },
  "test3240" : {
    "methodSignature" : "public abstract boolean equals(Object object)",
    "methodName" : "equals",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3240() throws Throwable {\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();\n    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();\n    boolean boolean0 = dateTimeZone0.equals(buddhistChronology0);\n}",
    "testName" : "test3240"
  },
  "test6079" : {
    "methodSignature" : "public long convertLocalToUTC(long instantLocal, boolean strict)",
    "methodName" : "convertLocalToUTC",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6079() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    dateTimeZone0.convertLocalToUTC(9223372036854775807L, true);\n}",
    "testName" : "test6079"
  },
  "test76101" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test76101() throws Throwable {\n    ZoneOffset zoneOffset0 = ZoneOffset.MAX;\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);\n    dateTimeZone0.getID();\n}",
    "testName" : "test76101"
  },
  "test4051" : {
    "methodSignature" : "public long getMillisKeepLocal(DateTimeZone newZone, long oldInstant)",
    "methodName" : "getMillisKeepLocal",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4051() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    long long0 = dateTimeZone0.getMillisKeepLocal(dateTimeZone0, 1061L);\n}",
    "testName" : "test4051"
  },
  "test90116" : {
    "methodSignature" : "public static DateTimeZone getDefault()",
    "methodName" : "getDefault",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test90116() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n}",
    "testName" : "test90116"
  },
  "test90117" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test90117() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    String string0 = dateTimeZone0.toString();\n}",
    "testName" : "test90117"
  },
  "test1113" : {
    "methodSignature" : "public abstract long previousTransition(long instant)",
    "methodName" : "previousTransition",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1113() throws Throwable {\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();\n    long long0 = dateTimeZone0.previousTransition(1);\n}",
    "testName" : "test1113"
  },
  "test3139" : {
    "methodSignature" : "public boolean equals(Object obj)",
    "methodName" : "equals",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3139() throws Throwable {\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    boolean boolean0 = fixedDateTimeZone0.equals(fixedDateTimeZone0);\n}",
    "testName" : "test3139"
  },
  "test4865" : {
    "methodSignature" : "public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException",
    "methodName" : "forOffsetHoursMinutes",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4865() throws Throwable {\n    DateTimeZone.forOffsetHoursMinutes((-1655), 44);\n}",
    "testName" : "test4865"
  },
  "test6888" : {
    "methodSignature" : "public int getOffsetFromLocal(long instantLocal)",
    "methodName" : "getOffsetFromLocal",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6888() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    int int0 = dateTimeZone0.getOffsetFromLocal(1654L);\n}",
    "testName" : "test6888"
  },
  "test5674" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5674() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);\n    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(690562340, 377, 1, 43, 1);\n    LocalDate localDate0 = LocalDate.fromCalendarFields(mockGregorianCalendar0);\n    LocalTime localTime0 = new LocalTime((-1019L));\n    LocalDateTime localDateTime0 = localDate0.toLocalDateTime(localTime0);\n    boolean boolean0 = dateTimeZone0.isLocalDateTimeGap(localDateTime0);\n    dateTimeZone0.toString();\n}",
    "testName" : "test5674"
  },
  "test011" : {
    "methodSignature" : "public int getOffsetFromLocal(long instantLocal)",
    "methodName" : "getOffsetFromLocal",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forID(\"Europe/Paris\");\n    int int0 = dateTimeZone0.getOffsetFromLocal(1L);\n}",
    "testName" : "test011"
  },
  "test099" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2364));\n    TimeZone timeZone0 = dateTimeZone0.toTimeZone();\n    dateTimeZone0.toString();\n}",
    "testName" : "test099"
  },
  "test1517" : {
    "methodSignature" : "public abstract long nextTransition(long instant)",
    "methodName" : "nextTransition",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1517() throws Throwable {\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    long long0 = fixedDateTimeZone0.UTC.nextTransition((-103L));\n}",
    "testName" : "test1517"
  },
  "test2328" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2328() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);\n    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 1738L, 1);\n    Instant instant0 = gJChronology0.getGregorianCutover();\n    int int0 = dateTimeZone0.getOffset((ReadableInstant) instant0);\n    dateTimeZone0.toString();\n}",
    "testName" : "test2328"
  },
  "test2329" : {
    "methodSignature" : "public final int getOffset(ReadableInstant instant)",
    "methodName" : "getOffset",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2329() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);\n    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 1738L, 1);\n    Instant instant0 = gJChronology0.getGregorianCutover();\n    int int0 = dateTimeZone0.getOffset((ReadableInstant) instant0);\n}",
    "testName" : "test2329"
  },
  "test7293" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7293() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1000);\n    dateTimeZone0.getID();\n}",
    "testName" : "test7293"
  },
  "test92120" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test92120() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);\n    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetHours(1);\n    dateTimeZone1.toString();\n}",
    "testName" : "test92120"
  },
  "test5673" : {
    "methodSignature" : "public boolean isLocalDateTimeGap(LocalDateTime localDateTime)",
    "methodName" : "isLocalDateTimeGap",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5673() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);\n    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(690562340, 377, 1, 43, 1);\n    LocalDate localDate0 = LocalDate.fromCalendarFields(mockGregorianCalendar0);\n    LocalTime localTime0 = new LocalTime((-1019L));\n    LocalDateTime localDateTime0 = localDate0.toLocalDateTime(localTime0);\n    boolean boolean0 = dateTimeZone0.isLocalDateTimeGap(localDateTime0);\n}",
    "testName" : "test5673"
  },
  "test6483" : {
    "methodSignature" : "public long convertUTCToLocal(long instantUTC)",
    "methodName" : "convertUTCToLocal",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6483() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    long long0 = dateTimeZone0.convertUTCToLocal(0L);\n}",
    "testName" : "test6483"
  },
  "test3545" : {
    "methodSignature" : "public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC)",
    "methodName" : "convertLocalToUTC",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3545() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = gJChronology0.getZone();\n    long long0 = dateTimeZone0.convertLocalToUTC((-9223372036854775808L), false, (-9223372036854775808L));\n}",
    "testName" : "test3545"
  },
  "test5168" : {
    "methodSignature" : "public static DateTimeZone getDefault()",
    "methodName" : "getDefault",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5168() throws Throwable {\n    UTCProvider uTCProvider0 = new UTCProvider();\n    DateTimeZone.setProvider(uTCProvider0);\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    //  // Unstable assertion: assertEquals(\"UTC\", dateTimeZone0.getID());\n}",
    "testName" : "test5168"
  },
  "test4355" : {
    "methodSignature" : "public String getName(long instant, Locale locale)",
    "methodName" : "getName",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4355() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1));\n    Locale locale0 = Locale.JAPANESE;\n    String string0 = dateTimeZone0.getName(0L, locale0);\n}",
    "testName" : "test4355"
  },
  "test000" : {
    "methodSignature" : "public DateTime toDateTimeAtCurrentTime()",
    "methodName" : "toDateTimeAtCurrentTime",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    DateTimeUtils.setCurrentMillisFixed(9223372036854775807L);\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) fixedDateTimeZone0);\n    YearMonthDay yearMonthDay0 = new YearMonthDay((Object) null, buddhistChronology0);\n    int[] intArray0 = new int[1];\n    YearMonthDay yearMonthDay1 = new YearMonthDay(yearMonthDay0, intArray0);\n    yearMonthDay1.toDateTimeAtCurrentTime();\n}",
    "testName" : "test000"
  },
  "test088" : {
    "methodSignature" : "public boolean isLocalDateTimeGap(LocalDateTime localDateTime)",
    "methodName" : "isLocalDateTimeGap",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());\n    DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());\n    doReturn(267).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class), anyString(), anyInt());\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);\n    LocalDateTime localDateTime0 = LocalDateTime.parse(\"UTC\", dateTimeFormatter0);\n    boolean boolean0 = dateTimeZone0.isLocalDateTimeGap(localDateTime0);\n}",
    "testName" : "test088"
  },
  "test2734" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2734() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);\n    dateTimeZone0.getNameKey(1738L);\n    dateTimeZone0.toString();\n}",
    "testName" : "test2734"
  },
  "test1922" : {
    "methodSignature" : "public abstract int getStandardOffset(long instant)",
    "methodName" : "getStandardOffset",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1922() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);\n    int int0 = dateTimeZone0.getStandardOffset(0L);\n}",
    "testName" : "test1922"
  },
  "test81107" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test81107() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forID(\"UTC\");\n    dateTimeZone0.toString();\n}",
    "testName" : "test81107"
  },
  "test1923" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1923() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);\n    int int0 = dateTimeZone0.getStandardOffset(0L);\n    dateTimeZone0.toString();\n}",
    "testName" : "test1923"
  },
  "test78103" : {
    "methodSignature" : "public static DateTimeZone forOffsetHours(int hoursOffset) throws IllegalArgumentException",
    "methodName" : "forOffsetHours",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test78103() throws Throwable {\n    DateTimeZone.forOffsetHours((-4432));\n}",
    "testName" : "test78103"
  },
  "test92119" : {
    "methodSignature" : "public static DateTimeZone forOffsetHours(int hoursOffset) throws IllegalArgumentException",
    "methodName" : "forOffsetHours",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test92119() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);\n    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetHours(1);\n}",
    "testName" : "test92119"
  },
  "test5977" : {
    "methodSignature" : "public long convertLocalToUTC(long instantLocal, boolean strict)",
    "methodName" : "convertLocalToUTC",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5977() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(567);\n    long long0 = dateTimeZone0.convertLocalToUTC(4998L, false);\n}",
    "testName" : "test5977"
  },
  "test3038" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3038() throws Throwable {\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();\n    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();\n    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetHours(1);\n    long long0 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, 0L);\n    dateTimeZone1.getID();\n}",
    "testName" : "test3038"
  },
  "test5978" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5978() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(567);\n    long long0 = dateTimeZone0.convertLocalToUTC(4998L, false);\n    dateTimeZone0.toString();\n}",
    "testName" : "test5978"
  },
  "test2227" : {
    "methodSignature" : "public final int getOffset(ReadableInstant instant)",
    "methodName" : "getOffset",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2227() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    Instant instant0 = new Instant(1223L);\n    int int0 = dateTimeZone0.UTC.getOffset((ReadableInstant) instant0);\n}",
    "testName" : "test2227"
  },
  "test1011" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1011() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1));\n    dateTimeZone0.UTC.previousTransition(0L);\n    dateTimeZone0.toString();\n}",
    "testName" : "test1011"
  },
  "test4764" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4764() throws Throwable {\n    TimeZone timeZone0 = TimeZone.getTimeZone(\"VST\");\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);\n    dateTimeZone0.toString();\n}",
    "testName" : "test4764"
  },
  "test6787" : {
    "methodSignature" : "public int getOffsetFromLocal(long instantLocal)",
    "methodName" : "getOffsetFromLocal",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6787() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    int int0 = dateTimeZone0.getOffsetFromLocal(9223372036854775807L);\n}",
    "testName" : "test6787"
  },
  "test1012" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1012() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1));\n    dateTimeZone0.UTC.previousTransition(0L);\n    dateTimeZone0.getID();\n}",
    "testName" : "test1012"
  },
  "test3037" : {
    "methodSignature" : "public long getMillisKeepLocal(DateTimeZone newZone, long oldInstant)",
    "methodName" : "getMillisKeepLocal",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3037() throws Throwable {\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();\n    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();\n    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetHours(1);\n    long long0 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, 0L);\n}",
    "testName" : "test3037"
  },
  "test3950" : {
    "methodSignature" : "public static DateTimeZone forTimeZone(TimeZone zone)",
    "methodName" : "forTimeZone",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3950() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(177, 0);\n    TimeZone timeZone0 = dateTimeZone0.toTimeZone();\n    DateTimeZone.forTimeZone(timeZone0);\n}",
    "testName" : "test3950"
  },
  "test7599" : {
    "methodSignature" : "public static DateTimeZone forID(String id)",
    "methodName" : "forID",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7599() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3072);\n    TimeZone timeZone0 = dateTimeZone0.toTimeZone();\n    DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);\n    DateTimeZone dateTimeZone2 = DateTimeZone.forID(\"+00:00\");\n}",
    "testName" : "test7599"
  },
  "test033" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-28378000), \"-08:00\");\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);\n    dateTimeZone0.toString();\n}",
    "testName" : "test033"
  },
  "test1416" : {
    "methodSignature" : "public abstract long nextTransition(long instant)",
    "methodName" : "nextTransition",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1416() throws Throwable {\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();\n    long long0 = dateTimeZone0.UTC.nextTransition(10800000L);\n}",
    "testName" : "test1416"
  },
  "test7192" : {
    "methodSignature" : "public String getShortName(long instant, Locale locale)",
    "methodName" : "getShortName",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7192() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);\n    Locale locale0 = new Locale(\"{%#:[8[Nb'1[RYD&d\", \"{%#:[8[Nb'1[RYD&d\");\n    String string0 = dateTimeZone0.getShortName(0L, locale0);\n}",
    "testName" : "test7192"
  },
  "test94123" : {
    "methodSignature" : "public final String getShortName(long instant)",
    "methodName" : "getShortName",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test94123() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    String string0 = dateTimeZone0.getShortName(0L);\n}",
    "testName" : "test94123"
  },
  "test7598" : {
    "methodSignature" : "public static DateTimeZone forTimeZone(TimeZone zone)",
    "methodName" : "forTimeZone",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7598() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3072);\n    TimeZone timeZone0 = dateTimeZone0.toTimeZone();\n    DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);\n}",
    "testName" : "test7598"
  },
  "test7597" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7597() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3072);\n    TimeZone timeZone0 = dateTimeZone0.toTimeZone();\n    DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);\n    dateTimeZone0.toString();\n}",
    "testName" : "test7597"
  },
  "test77102" : {
    "methodSignature" : "public static DateTimeZone forTimeZone(TimeZone zone)",
    "methodName" : "forTimeZone",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test77102() throws Throwable {\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    TimeZone timeZone0 = fixedDateTimeZone0.toTimeZone();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);\n}",
    "testName" : "test77102"
  },
  "test5572" : {
    "methodSignature" : "public long adjustOffset(long instant, boolean earlierOrLater)",
    "methodName" : "adjustOffset",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5572() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    long long0 = dateTimeZone0.adjustOffset(0L, true);\n}",
    "testName" : "test5572"
  },
  "test6382" : {
    "methodSignature" : "public long adjustOffset(long instant, boolean earlierOrLater)",
    "methodName" : "adjustOffset",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6382() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);\n    dateTimeZone0.adjustOffset(9223372036854775807L, false);\n}",
    "testName" : "test6382"
  },
  "test1820" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1820() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);\n    dateTimeZone0.UTC.getStandardOffset(1047L);\n    dateTimeZone0.getID();\n}",
    "testName" : "test1820"
  },
  "test2633" : {
    "methodSignature" : "public abstract int getOffset(long instant)",
    "methodName" : "getOffset",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2633() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    int int0 = dateTimeZone0.getOffset((-2461L));\n}",
    "testName" : "test2633"
  },
  "test88114" : {
    "methodSignature" : "public static void setNameProvider(NameProvider nameProvider) throws SecurityException",
    "methodName" : "setNameProvider",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test88114() throws Throwable {\n    NameProvider nameProvider0 = DateTimeZone.getNameProvider();\n    DateTimeZone.setNameProvider(nameProvider0);\n}",
    "testName" : "test88114"
  },
  "test3444" : {
    "methodSignature" : "public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC)",
    "methodName" : "convertLocalToUTC",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3444() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1129);\n    long long0 = dateTimeZone0.convertLocalToUTC((long) 1129, true, 465L);\n}",
    "testName" : "test3444"
  },
  "test3443" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3443() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1129);\n    long long0 = dateTimeZone0.convertLocalToUTC((long) 1129, true, 465L);\n    dateTimeZone0.toString();\n}",
    "testName" : "test3443"
  },
  "test022" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(Integer.MIN_VALUE);\n    dateTimeZone0.getID();\n}",
    "testName" : "test022"
  },
  "test3849" : {
    "methodSignature" : "public long adjustOffset(long instant, boolean earlierOrLater)",
    "methodName" : "adjustOffset",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3849() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forID(\"Europe/Paris\");\n    long long0 = dateTimeZone0.adjustOffset((-1331L), false);\n}",
    "testName" : "test3849"
  },
  "test83109" : {
    "methodSignature" : "public static void setDefault(DateTimeZone zone) throws SecurityException",
    "methodName" : "setDefault",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test83109() throws Throwable {\n    DateTimeZone.setDefault((DateTimeZone) null);\n}",
    "testName" : "test83109"
  },
  "test1821" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1821() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);\n    dateTimeZone0.UTC.getStandardOffset(1047L);\n    dateTimeZone0.toString();\n}",
    "testName" : "test1821"
  },
  "test4253" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4253() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);\n    long long0 = dateTimeZone0.convertLocalToUTC(10800000L, true, 0L);\n    dateTimeZone0.toString();\n}",
    "testName" : "test4253"
  },
  "test5067" : {
    "methodSignature" : "public static DateTimeZone forID(String id)",
    "methodName" : "forID",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5067() throws Throwable {\n    DateTimeZone.forID(\")*EX&Y5xR5N:H@oh9\");\n}",
    "testName" : "test5067"
  },
  "test4254" : {
    "methodSignature" : "public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC)",
    "methodName" : "convertLocalToUTC",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4254() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);\n    long long0 = dateTimeZone0.convertLocalToUTC(10800000L, true, 0L);\n}",
    "testName" : "test4254"
  },
  "test2126" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2126() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3072);\n    dateTimeZone0.UTC.getOffsetFromLocal((-3L));\n    dateTimeZone0.getID();\n}",
    "testName" : "test2126"
  },
  "test2125" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2125() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3072);\n    dateTimeZone0.UTC.getOffsetFromLocal((-3L));\n    dateTimeZone0.toString();\n}",
    "testName" : "test2125"
  },
  "test5876" : {
    "methodSignature" : "public long getMillisKeepLocal(DateTimeZone newZone, long oldInstant)",
    "methodName" : "getMillisKeepLocal",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5876() throws Throwable {\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();\n    long long0 = dateTimeZone0.getMillisKeepLocal((DateTimeZone) null, 51L);\n}",
    "testName" : "test5876"
  },
  "test4662" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4662() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3072);\n    TimeZone timeZone0 = dateTimeZone0.toTimeZone();\n    DateTimeZone.forTimeZone(timeZone0);\n    DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);\n    dateTimeZone0.toString();\n}",
    "testName" : "test4662"
  },
  "test4663" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4663() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3072);\n    TimeZone timeZone0 = dateTimeZone0.toTimeZone();\n    DateTimeZone.forTimeZone(timeZone0);\n    DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);\n    dateTimeZone1.toString();\n}",
    "testName" : "test4663"
  },
  "test6686" : {
    "methodSignature" : "public int getOffsetFromLocal(long instantLocal)",
    "methodName" : "getOffsetFromLocal",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6686() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forID(\"Africa/Harare\");\n    int int0 = dateTimeZone0.getOffsetFromLocal((-217L));\n}",
    "testName" : "test6686"
  },
  "test85111" : {
    "methodSignature" : "public static DateTimeZone forTimeZone(TimeZone zone)",
    "methodName" : "forTimeZone",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test85111() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone((TimeZone) null);\n}",
    "testName" : "test85111"
  },
  "test055" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(60, 59);\n    dateTimeZone0.toString();\n}",
    "testName" : "test055"
  },
  "test1315" : {
    "methodSignature" : "public abstract long nextTransition(long instant)",
    "methodName" : "nextTransition",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1315() throws Throwable {\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();\n    long long0 = dateTimeZone0.nextTransition(0L);\n}",
    "testName" : "test1315"
  },
  "test80106" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test80106() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forID(\"+00:00:01.350\");\n    dateTimeZone0.getID();\n}",
    "testName" : "test80106"
  },
  "test80105" : {
    "methodSignature" : "public static DateTimeZone forID(String id)",
    "methodName" : "forID",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test80105() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forID(\"+00:00:01.350\");\n}",
    "testName" : "test80105"
  },
  "test6281" : {
    "methodSignature" : "public MutableDateTime(int year, int monthOfYear, int dayOfMonth, int hourOfDay, int minuteOfHour, int secondOfMinute, int millisOfSecond, Chronology chronology)",
    "methodName" : "MutableDateTime",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6281() throws Throwable {\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();\n    MutableDateTime mutableDateTime0 = null;\n    mutableDateTime0 = new MutableDateTime(1, 0, 1, 0, 567, 1, 567, buddhistChronology0);\n}",
    "testName" : "test6281"
  },
  "test7091" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7091() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1));\n    int int0 = dateTimeZone0.getOffset((ReadableInstant) null);\n    dateTimeZone0.toString();\n}",
    "testName" : "test7091"
  },
  "test7090" : {
    "methodSignature" : "public final int getOffset(ReadableInstant instant)",
    "methodName" : "getOffset",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7090() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1));\n    int int0 = dateTimeZone0.getOffset((ReadableInstant) null);\n}",
    "testName" : "test7090"
  },
  "test4660" : {
    "methodSignature" : "public static DateTimeZone forTimeZone(TimeZone zone)",
    "methodName" : "forTimeZone",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4660() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3072);\n    TimeZone timeZone0 = dateTimeZone0.toTimeZone();\n    DateTimeZone.forTimeZone(timeZone0);\n    DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);\n}",
    "testName" : "test4660"
  },
  "test79104" : {
    "methodSignature" : "public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException",
    "methodName" : "forOffsetHoursMinutes",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test79104() throws Throwable {\n    DateTimeZone.forOffsetHoursMinutes(0, 12720000);\n}",
    "testName" : "test79104"
  },
  "test7495" : {
    "methodSignature" : "public static void setProvider(Provider provider) throws SecurityException",
    "methodName" : "setProvider",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7495() throws Throwable {\n    DateTimeZone.setProvider((Provider) null);\n}",
    "testName" : "test7495"
  },
  "test91118" : {
    "methodSignature" : "public final String getName(long instant)",
    "methodName" : "getName",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test91118() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(12740625);\n    String string0 = dateTimeZone0.getName((long) 12740625);\n}",
    "testName" : "test91118"
  },
  "test5471" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5471() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);\n    String string0 = dateTimeZone0.getID();\n}",
    "testName" : "test5471"
  },
  "test4558" : {
    "methodSignature" : "public String getShortName(long instant, Locale locale)",
    "methodName" : "getShortName",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4558() throws Throwable {\n    UTCProvider uTCProvider0 = new UTCProvider();\n    DateTimeZone dateTimeZone0 = uTCProvider0.getZone(\"UTC\");\n    String string0 = dateTimeZone0.getShortName((long) (-363), (Locale) null);\n}",
    "testName" : "test4558"
  },
  "test2532" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2532() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);\n    int int0 = dateTimeZone0.getOffset(0L);\n    dateTimeZone0.toString();\n}",
    "testName" : "test2532"
  },
  "test3342" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3342() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);\n    long long0 = dateTimeZone0.convertUTCToLocal(0L);\n    dateTimeZone0.toString();\n}",
    "testName" : "test3342"
  },
  "test2531" : {
    "methodSignature" : "public abstract int getOffset(long instant)",
    "methodName" : "getOffset",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2531() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);\n    int int0 = dateTimeZone0.getOffset(0L);\n}",
    "testName" : "test2531"
  },
  "test044" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 1);\n    dateTimeZone0.toString();\n}",
    "testName" : "test044"
  },
  "test2936" : {
    "methodSignature" : "public long getMillisKeepLocal(DateTimeZone newZone, long oldInstant)",
    "methodName" : "getMillisKeepLocal",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2936() throws Throwable {\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    long long0 = fixedDateTimeZone0.UTC.getMillisKeepLocal(fixedDateTimeZone0, 0L);\n}",
    "testName" : "test2936"
  },
  "test3747" : {
    "methodSignature" : "public long adjustOffset(long instant, boolean earlierOrLater)",
    "methodName" : "adjustOffset",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3747() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1295);\n    long long0 = dateTimeZone0.adjustOffset(1295, true);\n}",
    "testName" : "test3747"
  },
  "test3748" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3748() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1295);\n    long long0 = dateTimeZone0.adjustOffset(1295, true);\n    dateTimeZone0.toString();\n}",
    "testName" : "test3748"
  },
  "test1719" : {
    "methodSignature" : "public abstract boolean isFixed()",
    "methodName" : "isFixed",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1719() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    boolean boolean0 = dateTimeZone0.isFixed();\n}",
    "testName" : "test1719"
  },
  "test93121" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test93121() throws Throwable {\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.forOffsetMillis(12740625);\n    ((DateTimeZone) fixedDateTimeZone0).writeReplace();\n    fixedDateTimeZone0.toString();\n}",
    "testName" : "test93121"
  },
  "test3341" : {
    "methodSignature" : "public long convertUTCToLocal(long instantUTC)",
    "methodName" : "convertUTCToLocal",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3341() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);\n    long long0 = dateTimeZone0.convertUTCToLocal(0L);\n}",
    "testName" : "test3341"
  },
  "test4152" : {
    "methodSignature" : "public long convertLocalToUTC(long instantLocal, boolean strict)",
    "methodName" : "convertLocalToUTC",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4152() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    long long0 = dateTimeZone0.convertLocalToUTC(2779L, true);\n}",
    "testName" : "test4152"
  }
}