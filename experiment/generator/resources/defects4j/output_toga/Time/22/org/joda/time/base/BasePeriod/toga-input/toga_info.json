{
  "test1212" : {
    "methodSignature" : "public long getStandardHours()",
    "methodName" : "getStandardHours",
    "className" : "org.joda.time.base.BasePeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1212() throws Throwable {\n    GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();\n    DateMidnight dateMidnight0 = new DateMidnight((Chronology) gregorianChronology0);\n    MutablePeriod mutablePeriod0 = new MutablePeriod(dateMidnight0, (ReadableInstant) null);\n    Duration duration0 = mutablePeriod0.toDurationFrom((ReadableInstant) null);\n    duration0.getStandardHours();\n}",
    "testName" : "test1212"
  },
  "test2323" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "org.joda.time.base.BasePeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2323() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(528);\n    CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);\n    MutablePeriod mutablePeriod0 = new MutablePeriod((-3893L), (Chronology) copticChronology0);\n    mutablePeriod0.mergePeriod((ReadablePeriod) null);\n    mutablePeriod0.size();\n}",
    "testName" : "test2323"
  },
  "test3434" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.base.BasePeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3434() throws Throwable {\n    MutablePeriod mutablePeriod0 = new MutablePeriod();\n    Instant instant0 = new Instant((-2887L));\n    Duration duration0 = mutablePeriod0.toDurationTo(instant0);\n    duration0.getMillis();\n}",
    "testName" : "test3434"
  },
  "test1313" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.base.BasePeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1313() throws Throwable {\n    Period period0 = Period.millis((-115));\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);\n    ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);\n    YearMonthDay yearMonthDay0 = new YearMonthDay((Chronology) iSOChronology0);\n    DateMidnight dateMidnight0 = yearMonthDay0.toDateMidnight(dateTimeZone0);\n    Duration duration0 = period0.toDurationFrom(dateMidnight0);\n    duration0.getMillis();\n}",
    "testName" : "test1313"
  },
  "test2424" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "org.joda.time.base.BasePeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2424() throws Throwable {\n    PeriodType periodType0 = PeriodType.yearMonthDay();\n    MutablePeriod mutablePeriod0 = new MutablePeriod(1L, periodType0, (Chronology) null);\n    mutablePeriod0.setWeeks(0);\n    mutablePeriod0.size();\n}",
    "testName" : "test2424"
  },
  "test3535" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "org.joda.time.base.BasePeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3535() throws Throwable {\n    PeriodType periodType0 = PeriodType.yearMonthDay();\n    MutablePeriod mutablePeriod0 = new MutablePeriod(1L, periodType0, (Chronology) null);\n    mutablePeriod0.setValue(0, 0);\n    mutablePeriod0.size();\n}",
    "testName" : "test3535"
  },
  "test1010" : {
    "methodSignature" : "public long getStandardHours()",
    "methodName" : "getStandardHours",
    "className" : "org.joda.time.base.BasePeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1010() throws Throwable {\n    GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();\n    DateMidnight dateMidnight0 = new DateMidnight((Chronology) gregorianChronology0);\n    MutablePeriod mutablePeriod0 = new MutablePeriod(dateMidnight0, (ReadableInstant) null);\n    mutablePeriod0.setDays(1576);\n    Duration duration0 = mutablePeriod0.toDurationFrom((ReadableInstant) null);\n    duration0.getStandardHours();\n}",
    "testName" : "test1010"
  },
  "test2121" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "org.joda.time.base.BasePeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2121() throws Throwable {\n    MutablePeriod mutablePeriod0 = new MutablePeriod(0, (-679), 2, (-1017));\n    DateMidnight dateMidnight0 = new DateMidnight((long) (-679));\n    Interval interval0 = dateMidnight0.toInterval();\n    mutablePeriod0.add((ReadableInterval) interval0);\n    mutablePeriod0.size();\n}",
    "testName" : "test2121"
  },
  "test3232" : {
    "methodSignature" : "public void addDays(int days)",
    "methodName" : "addDays",
    "className" : "org.joda.time.base.BasePeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3232() throws Throwable {\n    PeriodType periodType0 = PeriodType.minutes();\n    MutablePeriod mutablePeriod0 = new MutablePeriod((Object) null, periodType0);\n    mutablePeriod0.addDays(2000);\n}",
    "testName" : "test3232"
  },
  "test1111" : {
    "methodSignature" : "public long getStandardSeconds()",
    "methodName" : "getStandardSeconds",
    "className" : "org.joda.time.base.BasePeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1111() throws Throwable {\n    Period period0 = Period.millis((-115));\n    Period period1 = period0.withDays((-115));\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);\n    ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);\n    YearMonthDay yearMonthDay0 = new YearMonthDay((Chronology) iSOChronology0);\n    DateMidnight dateMidnight0 = yearMonthDay0.toDateMidnight(dateTimeZone0);\n    Duration duration0 = period1.toDurationFrom(dateMidnight0);\n    duration0.getStandardSeconds();\n}",
    "testName" : "test1111"
  },
  "test2222" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "org.joda.time.base.BasePeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2222() throws Throwable {\n    Instant instant0 = new Instant();\n    MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();\n    MutablePeriod mutablePeriod0 = new MutablePeriod(mutableDateTime0, instant0);\n    mutablePeriod0.add((ReadablePeriod) null);\n    mutablePeriod0.size();\n}",
    "testName" : "test2222"
  },
  "test3333" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "org.joda.time.base.BasePeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3333() throws Throwable {\n    PeriodType periodType0 = PeriodType.yearMonthDay();\n    MutablePeriod mutablePeriod0 = new MutablePeriod(1L, periodType0, (Chronology) null);\n    mutablePeriod0.addMinutes(0);\n    mutablePeriod0.size();\n}",
    "testName" : "test3333"
  },
  "test011" : {
    "methodSignature" : "public void add(ReadablePeriod period)",
    "methodName" : "add",
    "className" : "org.joda.time.base.BasePeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    Period period0 = new Period((-1458L), (Chronology) gJChronology0);\n    PeriodType periodType0 = PeriodType.weeks();\n    MutablePeriod mutablePeriod0 = new MutablePeriod(100000000L, periodType0);\n    mutablePeriod0.add((ReadablePeriod) period0);\n}",
    "testName" : "test011"
  },
  "test033" : {
    "methodSignature" : "public void setMillis(int millis)",
    "methodName" : "setMillis",
    "className" : "org.joda.time.base.BasePeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033() throws Throwable {\n    Period period0 = new Period(0L);\n    Days days0 = period0.toStandardDays();\n    PeriodType periodType0 = days0.getPeriodType();\n    MutablePeriod mutablePeriod0 = new MutablePeriod(0L, 0L, periodType0);\n    mutablePeriod0.setMillis((-1808));\n}",
    "testName" : "test033"
  },
  "test055" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "org.joda.time.base.BasePeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055() throws Throwable {\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();\n    MutablePeriod mutablePeriod0 = new MutablePeriod((Object) null, islamicChronology0);\n    Months months0 = Months.ZERO;\n    PeriodType periodType0 = months0.getPeriodType();\n    Period period0 = new Period(mutablePeriod0, periodType0, islamicChronology0);\n    period0.size();\n}",
    "testName" : "test055"
  },
  "test077" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.base.BasePeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077() throws Throwable {\n    PeriodType periodType0 = PeriodType.standard();\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();\n    MutablePeriod mutablePeriod0 = new MutablePeriod(10000000000000L, periodType0, (Chronology) ethiopicChronology0);\n    mutablePeriod0.setPeriod(0L, (Chronology) ethiopicChronology0);\n    mutablePeriod0.addMonths((-499));\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);\n    LocalDate localDate0 = new LocalDate(dateTimeZone0);\n    DateMidnight dateMidnight0 = localDate0.toDateMidnight(dateTimeZone0);\n    Duration duration0 = mutablePeriod0.toDurationTo(dateMidnight0);\n    duration0.getMillis();\n}",
    "testName" : "test077"
  },
  "test099" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.base.BasePeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099() throws Throwable {\n    Period period0 = Period.millis((-978));\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    Instant instant0 = gJChronology0.getGregorianCutover();\n    Duration duration0 = period0.toDurationTo(instant0);\n    duration0.getMillis();\n}",
    "testName" : "test099"
  },
  "test1616" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.base.BasePeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1616() throws Throwable {\n    Period period0 = Period.hours(0);\n    PeriodType periodType0 = period0.getPeriodType();\n    periodType0.getName();\n}",
    "testName" : "test1616"
  },
  "test2727" : {
    "methodSignature" : "public void setWeeks(int weeks)",
    "methodName" : "setWeeks",
    "className" : "org.joda.time.base.BasePeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2727() throws Throwable {\n    TimeOfDay timeOfDay0 = new TimeOfDay();\n    PeriodType periodType0 = PeriodType.hours();\n    Period period0 = new Period(timeOfDay0, timeOfDay0, periodType0);\n    ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();\n    MutablePeriod mutablePeriod0 = new MutablePeriod(period0, iSOChronology0);\n    mutablePeriod0.setWeeks(2);\n}",
    "testName" : "test2727"
  },
  "test1717" : {
    "methodSignature" : "public int getValue(int index)",
    "methodName" : "getValue",
    "className" : "org.joda.time.base.BasePeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1717() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(528);\n    Duration duration0 = Duration.standardSeconds(0L);\n    MutableDateTime mutableDateTime0 = new MutableDateTime((-2456L), dateTimeZone0);\n    PeriodType periodType0 = PeriodType.yearMonthDayTime();\n    Period period0 = new Period(duration0, mutableDateTime0, periodType0);\n    period0.getValue(900);\n}",
    "testName" : "test1717"
  },
  "test2828" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "org.joda.time.base.BasePeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2828() throws Throwable {\n    LocalTime localTime0 = new LocalTime();\n    Period period0 = new Period(localTime0, localTime0);\n    period0.size();\n}",
    "testName" : "test2828"
  },
  "test1414" : {
    "methodSignature" : "public int getValue(int index)",
    "methodName" : "getValue",
    "className" : "org.joda.time.base.BasePeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1414() throws Throwable {\n    Days days0 = Days.THREE;\n    Period period0 = days0.toPeriod();\n    int int0 = period0.getValue(0);\n}",
    "testName" : "test1414"
  },
  "test2525" : {
    "methodSignature" : "public void mergePeriod(ReadablePeriod period)",
    "methodName" : "mergePeriod",
    "className" : "org.joda.time.base.BasePeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2525() throws Throwable {\n    Period period0 = Period.millis((-579));\n    PeriodType periodType0 = PeriodType.months();\n    Instant instant0 = new Instant((-2788L));\n    Chronology chronology0 = instant0.getChronology();\n    MutablePeriod mutablePeriod0 = new MutablePeriod((long) (-579), periodType0, chronology0);\n    mutablePeriod0.mergePeriod(period0);\n}",
    "testName" : "test2525"
  },
  "test3636" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.base.BasePeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3636() throws Throwable {\n    Instant instant0 = new Instant();\n    Duration duration0 = Duration.millis(0L);\n    Period period0 = new Period(instant0, duration0);\n    Duration duration1 = period0.toDurationFrom(instant0);\n    duration1.getMillis();\n}",
    "testName" : "test3636"
  },
  "test1515" : {
    "methodSignature" : "public int getValue(int index)",
    "methodName" : "getValue",
    "className" : "org.joda.time.base.BasePeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1515() throws Throwable {\n    MutablePeriod mutablePeriod0 = new MutablePeriod((-1), (-1), (-1), 142);\n    mutablePeriod0.setPeriod(142, 142, (-1), 1544, 0, 0, 60, (-1));\n    int int0 = mutablePeriod0.getValue(1);\n}",
    "testName" : "test1515"
  },
  "test2626" : {
    "methodSignature" : "public DurationFieldType getFieldType(int index)",
    "methodName" : "getFieldType",
    "className" : "org.joda.time.base.BasePeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2626() throws Throwable {\n    Period period0 = new Period((Object) null);\n    period0.getFieldType(291);\n}",
    "testName" : "test2626"
  },
  "test3030" : {
    "methodSignature" : "public Period(ReadablePartial start, ReadablePartial end)",
    "methodName" : "Period",
    "className" : "org.joda.time.base.BasePeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3030() throws Throwable {\n    Period period0 = null;\n    period0 = new Period((ReadablePartial) null, (ReadablePartial) null);\n}",
    "testName" : "test3030"
  },
  "test2020" : {
    "methodSignature" : "public void add(ReadablePeriod period)",
    "methodName" : "add",
    "className" : "org.joda.time.base.BasePeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2020() throws Throwable {\n    PeriodType periodType0 = PeriodType.yearMonthDay();\n    MutablePeriod mutablePeriod0 = new MutablePeriod(0L, periodType0, (Chronology) null);\n    Days days0 = Days.THREE;\n    Period period0 = days0.toPeriod();\n    Period period1 = period0.plusMinutes(903);\n    mutablePeriod0.add((ReadablePeriod) period1);\n}",
    "testName" : "test2020"
  },
  "test3131" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "org.joda.time.base.BasePeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3131() throws Throwable {\n    Period period0 = new Period((ReadableInstant) null, (ReadableInstant) null);\n    period0.size();\n}",
    "testName" : "test3131"
  },
  "test000" : {
    "methodSignature" : "public void setValue(int index, int value)",
    "methodName" : "setValue",
    "className" : "org.joda.time.base.BasePeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    MutablePeriod mutablePeriod0 = new MutablePeriod((-2880L));\n    mutablePeriod0.setValue(1204, 18);\n}",
    "testName" : "test000"
  },
  "test022" : {
    "methodSignature" : "public void addYears(int years)",
    "methodName" : "addYears",
    "className" : "org.joda.time.base.BasePeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022() throws Throwable {\n    Weeks weeks0 = Weeks.MIN_VALUE;\n    PeriodType periodType0 = weeks0.getPeriodType();\n    MutablePeriod mutablePeriod0 = new MutablePeriod(10000000000000000L, periodType0);\n    mutablePeriod0.addYears((-1375));\n}",
    "testName" : "test022"
  },
  "test044" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "org.joda.time.base.BasePeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044() throws Throwable {\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();\n    MutablePeriod mutablePeriod0 = new MutablePeriod((Object) null, islamicChronology0);\n    mutablePeriod0.setPeriod(885, 1, (-795), 1, 355, 1, 0, 514);\n    mutablePeriod0.size();\n}",
    "testName" : "test044"
  },
  "test066" : {
    "methodSignature" : "public Period(int years, int months, int weeks, int days, int hours, int minutes, int seconds, int millis, PeriodType type)",
    "methodName" : "Period",
    "className" : "org.joda.time.base.BasePeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066() throws Throwable {\n    Months months0 = Months.MIN_VALUE;\n    PeriodType periodType0 = months0.getPeriodType();\n    Period period0 = null;\n    period0 = new Period(0, 0, 0, 0, 725, 3216, 0, 0, periodType0);\n}",
    "testName" : "test066"
  },
  "test088" : {
    "methodSignature" : "public long getStandardSeconds()",
    "methodName" : "getStandardSeconds",
    "className" : "org.joda.time.base.BasePeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    DateTime dateTime0 = new DateTime((Chronology) gJChronology0);\n    Interval interval0 = new Interval((ReadablePeriod) null, dateTime0);\n    Period period0 = interval0.toPeriod();\n    Period period1 = period0.plusYears(1024);\n    Duration duration0 = period1.toDurationTo(dateTime0);\n    duration0.getStandardSeconds();\n}",
    "testName" : "test088"
  },
  "test1818" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.base.BasePeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1818() throws Throwable {\n    Period period0 = new Period(0L, (Chronology) null);\n    DurationFieldType durationFieldType0 = period0.getFieldType(0);\n    durationFieldType0.getName();\n}",
    "testName" : "test1818"
  },
  "test2929" : {
    "methodSignature" : "public Period(ReadablePartial start, ReadablePartial end)",
    "methodName" : "Period",
    "className" : "org.joda.time.base.BasePeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2929() throws Throwable {\n    LocalTime localTime0 = new LocalTime();\n    Period period0 = null;\n    period0 = new Period(localTime0, (ReadablePartial) null);\n}",
    "testName" : "test2929"
  },
  "test1919" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "org.joda.time.base.BasePeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1919() throws Throwable {\n    PeriodType periodType0 = PeriodType.yearDayTime();\n    Period period0 = new Period(0L, (-941L), periodType0);\n    int int0 = period0.size();\n}",
    "testName" : "test1919"
  }
}