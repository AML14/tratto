{
  "test2026" : {
    "methodSignature" : "public final int getOffset(ReadableInstant instant)",
    "methodName" : "getOffset",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2026() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    DateMidnight dateMidnight0 = new DateMidnight(dateTimeZone0);\n    int int0 = dateTimeZone0.getOffset((ReadableInstant) dateMidnight0);\n}",
    "testName" : "test2026"
  },
  "test82100" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test82100() throws Throwable {\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    String string0 = fixedDateTimeZone0.toString();\n}",
    "testName" : "test82100"
  },
  "test1214" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1214() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);\n    dateTimeZone0.nextTransition((-2180L));\n    dateTimeZone0.toString();\n}",
    "testName" : "test1214"
  },
  "test6986" : {
    "methodSignature" : "public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException",
    "methodName" : "forOffsetHoursMinutes",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6986() throws Throwable {\n    DateTimeZone.forOffsetHoursMinutes(89, 75);\n}",
    "testName" : "test6986"
  },
  "test2025" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2025() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    DateMidnight dateMidnight0 = new DateMidnight(dateTimeZone0);\n    int int0 = dateTimeZone0.getOffset((ReadableInstant) dateMidnight0);\n    dateMidnight0.getMillis();\n}",
    "testName" : "test2025"
  },
  "test4960" : {
    "methodSignature" : "public long convertLocalToUTC(long instantLocal, boolean strict)",
    "methodName" : "convertLocalToUTC",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4960() throws Throwable {\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();\n    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();\n    long long0 = dateTimeZone0.convertLocalToUTC(249L, false);\n}",
    "testName" : "test4960"
  },
  "test1618" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1618() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(3);\n    int int0 = dateTimeZone0.getStandardOffset(0L);\n    dateTimeZone0.toString();\n}",
    "testName" : "test1618"
  },
  "test1619" : {
    "methodSignature" : "public abstract int getStandardOffset(long instant)",
    "methodName" : "getStandardOffset",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1619() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(3);\n    int int0 = dateTimeZone0.getStandardOffset(0L);\n}",
    "testName" : "test1619"
  },
  "test7391" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7391() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forID(\"+00:00\");\n    dateTimeZone0.toString();\n}",
    "testName" : "test7391"
  },
  "test7390" : {
    "methodSignature" : "public static DateTimeZone forID(String id)",
    "methodName" : "forID",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7390() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forID(\"+00:00\");\n}",
    "testName" : "test7390"
  },
  "test068" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test068() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(549);\n    TimeZone timeZone0 = dateTimeZone0.toTimeZone();\n    dateTimeZone0.getID();\n}",
    "testName" : "test068"
  },
  "test5771" : {
    "methodSignature" : "public String getName(long instant, Locale locale)",
    "methodName" : "getName",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5771() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(24);\n    Locale locale0 = Locale.ROOT;\n    String string0 = dateTimeZone0.getName(877L, locale0);\n}",
    "testName" : "test5771"
  },
  "test7795" : {
    "methodSignature" : "public static DateTimeZone getDefault()",
    "methodName" : "getDefault",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7795() throws Throwable {\n    UTCProvider uTCProvider0 = new UTCProvider();\n    DateTimeZone.setProvider(uTCProvider0);\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    //  // Unstable assertion: assertEquals(\"UTC\", dateTimeZone0.getID());\n}",
    "testName" : "test7795"
  },
  "test6581" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6581() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);\n    dateTimeZone0.toString();\n}",
    "testName" : "test6581"
  },
  "test3645" : {
    "methodSignature" : "public long convertUTCToLocal(long instantUTC)",
    "methodName" : "convertUTCToLocal",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3645() throws Throwable {\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();\n    long long0 = dateTimeZone0.convertUTCToLocal(0L);\n}",
    "testName" : "test3645"
  },
  "test6479" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6479() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(24);\n    DateTimeZone dateTimeZone1 = DateTimeZone.forID(\"+00:00:00.024\");\n    dateTimeZone1.toString();\n}",
    "testName" : "test6479"
  },
  "test2431" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2431() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(3);\n    dateTimeZone0.getNameKey(918518400000L);\n    dateTimeZone0.toString();\n}",
    "testName" : "test2431"
  },
  "test4454" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4454() throws Throwable {\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();\n    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();\n    String string0 = dateTimeZone0.getID();\n}",
    "testName" : "test4454"
  },
  "test067" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test067() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(549);\n    TimeZone timeZone0 = dateTimeZone0.toTimeZone();\n    timeZone0.toString();\n}",
    "testName" : "test067"
  },
  "test4859" : {
    "methodSignature" : "public long convertLocalToUTC(long instantLocal, boolean strict)",
    "methodName" : "convertLocalToUTC",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4859() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    dateTimeZone0.convertLocalToUTC(9223372036854775807L, true);\n}",
    "testName" : "test4859"
  },
  "test0810" : {
    "methodSignature" : "public long previousTransition(long instant)",
    "methodName" : "previousTransition",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0810() throws Throwable {\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    long long0 = fixedDateTimeZone0.previousTransition(2189L);\n}",
    "testName" : "test0810"
  },
  "test2835" : {
    "methodSignature" : "public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC)",
    "methodName" : "convertLocalToUTC",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2835() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    long long0 = dateTimeZone0.UTC.convertLocalToUTC(0L, false, 0L);\n}",
    "testName" : "test2835"
  },
  "test3240" : {
    "methodSignature" : "public static DateTimeZone forOffsetHours(int hoursOffset) throws IllegalArgumentException",
    "methodName" : "forOffsetHours",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3240() throws Throwable {\n    DateTimeZone.forOffsetHours((-1585));\n}",
    "testName" : "test3240"
  },
  "test7289" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7289() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 1);\n    dateTimeZone0.getID();\n}",
    "testName" : "test7289"
  },
  "test5263" : {
    "methodSignature" : "public long getMillisKeepLocal(DateTimeZone newZone, long oldInstant)",
    "methodName" : "getMillisKeepLocal",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5263() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(24);\n    long long0 = dateTimeZone0.getMillisKeepLocal((DateTimeZone) null, (-580L));\n}",
    "testName" : "test5263"
  },
  "test5264" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5264() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(24);\n    long long0 = dateTimeZone0.getMillisKeepLocal((DateTimeZone) null, (-580L));\n    dateTimeZone0.toString();\n}",
    "testName" : "test5264"
  },
  "test6075" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6075() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-28378000));\n    dateTimeZone0.toString();\n}",
    "testName" : "test6075"
  },
  "test8098" : {
    "methodSignature" : "public static NameProvider getNameProvider()",
    "methodName" : "getNameProvider",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test8098() throws Throwable {\n    NameProvider nameProvider0 = DateTimeZone.getNameProvider();\n}",
    "testName" : "test8098"
  },
  "test4050" : {
    "methodSignature" : "public String getShortName(long instant, Locale locale)",
    "methodName" : "getShortName",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4050() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1778));\n    String string0 = dateTimeZone0.getShortName(793L, (Locale) null);\n}",
    "testName" : "test4050"
  },
  "test1113" : {
    "methodSignature" : "public abstract long nextTransition(long instant)",
    "methodName" : "nextTransition",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1113() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    long long0 = dateTimeZone0.nextTransition(637L);\n}",
    "testName" : "test1113"
  },
  "test3139" : {
    "methodSignature" : "public boolean isLocalDateTimeGap(LocalDateTime localDateTime)",
    "methodName" : "isLocalDateTimeGap",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3139() throws Throwable {\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();\n    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();\n    dateTimeZone0.isLocalDateTimeGap((LocalDateTime) null);\n}",
    "testName" : "test3139"
  },
  "test84103" : {
    "methodSignature" : "public static DateTimeZone forTimeZone(TimeZone zone)",
    "methodName" : "forTimeZone",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test84103() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-589));\n    TimeZone timeZone0 = dateTimeZone0.toTimeZone();\n    DateTimeZone.forTimeZone(timeZone0);\n}",
    "testName" : "test84103"
  },
  "test6885" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6885() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);\n    dateTimeZone0.getID();\n}",
    "testName" : "test6885"
  },
  "test1517" : {
    "methodSignature" : "public abstract int getStandardOffset(long instant)",
    "methodName" : "getStandardOffset",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1517() throws Throwable {\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();\n    int int0 = dateTimeZone0.getStandardOffset((-266L));\n}",
    "testName" : "test1517"
  },
  "test012" : {
    "methodSignature" : "public static DateTimeZone forTimeZone(TimeZone zone)",
    "methodName" : "forTimeZone",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test012() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    DateTimeZone dateTimeZone0 = gJChronology0.getZone();\n    TimeZone timeZone0 = dateTimeZone0.toTimeZone();\n    DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);\n    //  // Unstable assertion: assertNotSame(dateTimeZone1, dateTimeZone0);\n}",
    "testName" : "test012"
  },
  "test5670" : {
    "methodSignature" : "public final int getOffset(ReadableInstant instant)",
    "methodName" : "getOffset",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5670() throws Throwable {\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    DateMidnight dateMidnight0 = new DateMidnight(0L, (DateTimeZone) fixedDateTimeZone0);\n    int int0 = fixedDateTimeZone0.getOffset((ReadableInstant) dateMidnight0);\n}",
    "testName" : "test5670"
  },
  "test7694" : {
    "methodSignature" : "public static void setDefault(DateTimeZone zone) throws SecurityException",
    "methodName" : "setDefault",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7694() throws Throwable {\n    DateTimeZone.setDefault((DateTimeZone) null);\n}",
    "testName" : "test7694"
  },
  "test6480" : {
    "methodSignature" : "public static DateTimeZone forID(String id)",
    "methodName" : "forID",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6480() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(24);\n    DateTimeZone dateTimeZone1 = DateTimeZone.forID(\"+00:00:00.024\");\n}",
    "testName" : "test6480"
  },
  "test3544" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3544() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1841));\n    long long0 = dateTimeZone0.convertUTCToLocal(1);\n    dateTimeZone0.toString();\n}",
    "testName" : "test3544"
  },
  "test4757" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4757() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-3185));\n    long long0 = dateTimeZone0.convertLocalToUTC((long) (-3185), true);\n    dateTimeZone0.toString();\n}",
    "testName" : "test4757"
  },
  "test5568" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5568() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 2);\n    int int0 = dateTimeZone0.getOffset((ReadableInstant) null);\n    dateTimeZone0.toString();\n}",
    "testName" : "test5568"
  },
  "test5569" : {
    "methodSignature" : "public final int getOffset(ReadableInstant instant)",
    "methodName" : "getOffset",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5569() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 2);\n    int int0 = dateTimeZone0.getOffset((ReadableInstant) null);\n}",
    "testName" : "test5569"
  },
  "test2330" : {
    "methodSignature" : "public abstract int getOffset(long instant)",
    "methodName" : "getOffset",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2330() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    int int0 = dateTimeZone0.getOffset(162L);\n}",
    "testName" : "test2330"
  },
  "test3543" : {
    "methodSignature" : "public long convertUTCToLocal(long instantUTC)",
    "methodName" : "convertUTCToLocal",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3543() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1841));\n    long long0 = dateTimeZone0.convertUTCToLocal(1);\n}",
    "testName" : "test3543"
  },
  "test6378" : {
    "methodSignature" : "public static void setProvider(Provider provider) throws SecurityException",
    "methodName" : "setProvider",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6378() throws Throwable {\n    DateTimeZone.setProvider((Provider) null);\n}",
    "testName" : "test6378"
  },
  "test000" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    ZoneOffset zoneOffset0 = ZoneOffset.ofHours(1);\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);\n    dateTimeZone0.toString();\n}",
    "testName" : "test000"
  },
  "test1924" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1924() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);\n    int int0 = dateTimeZone0.getOffsetFromLocal(0L);\n    dateTimeZone0.getID();\n}",
    "testName" : "test1924"
  },
  "test001" : {
    "methodSignature" : "public static DateTimeZone forTimeZone(TimeZone zone)",
    "methodName" : "forTimeZone",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test001() throws Throwable {\n    ZoneOffset zoneOffset0 = ZoneOffset.ofHours(1);\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);\n}",
    "testName" : "test001"
  },
  "test3948" : {
    "methodSignature" : "public String getName(long instant, Locale locale)",
    "methodName" : "getName",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3948() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    String string0 = dateTimeZone0.getName(465L, (Locale) null);\n}",
    "testName" : "test3948"
  },
  "test2734" : {
    "methodSignature" : "public long convertUTCToLocal(long instantUTC)",
    "methodName" : "convertUTCToLocal",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2734() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);\n    long long0 = dateTimeZone0.convertUTCToLocal(15778800000L);\n}",
    "testName" : "test2734"
  },
  "test4758" : {
    "methodSignature" : "public long convertLocalToUTC(long instantLocal, boolean strict)",
    "methodName" : "convertLocalToUTC",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4758() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-3185));\n    long long0 = dateTimeZone0.convertLocalToUTC((long) (-3185), true);\n}",
    "testName" : "test4758"
  },
  "test1923" : {
    "methodSignature" : "public int getOffsetFromLocal(long instantLocal)",
    "methodName" : "getOffsetFromLocal",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1923() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);\n    int int0 = dateTimeZone0.getOffsetFromLocal(0L);\n}",
    "testName" : "test1923"
  },
  "test079" : {
    "methodSignature" : "public long previousTransition(long instant)",
    "methodName" : "previousTransition",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test079() throws Throwable {\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    long long0 = fixedDateTimeZone0.previousTransition(0L);\n}",
    "testName" : "test079"
  },
  "test4353" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4353() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forID(\"MST\");\n    dateTimeZone0.getID();\n}",
    "testName" : "test4353"
  },
  "test7188" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7188() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);\n    dateTimeZone0.getID();\n}",
    "testName" : "test7188"
  },
  "test5162" : {
    "methodSignature" : "public long getMillisKeepLocal(DateTimeZone newZone, long oldInstant)",
    "methodName" : "getMillisKeepLocal",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5162() throws Throwable {\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    long long0 = fixedDateTimeZone0.getMillisKeepLocal(dateTimeZone0, 9223372036854775807L);\n}",
    "testName" : "test5162"
  },
  "test3038" : {
    "methodSignature" : "public long convertLocalToUTC(long instantLocal, boolean strict)",
    "methodName" : "convertLocalToUTC",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3038() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);\n    long long0 = dateTimeZone0.convertLocalToUTC((long) 1, false);\n}",
    "testName" : "test3038"
  },
  "test5973" : {
    "methodSignature" : "public String getShortName(long instant, Locale locale)",
    "methodName" : "getShortName",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5973() throws Throwable {\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    Locale locale0 = Locale.ITALY;\n    String string0 = fixedDateTimeZone0.getShortName(0L, locale0);\n}",
    "testName" : "test5973"
  },
  "test7997" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7997() throws Throwable {\n    Provider provider0 = DateTimeZone.getProvider();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);\n    dateTimeZone0.equals(provider0);\n    dateTimeZone0.getID();\n}",
    "testName" : "test7997"
  },
  "test1012" : {
    "methodSignature" : "public abstract long nextTransition(long instant)",
    "methodName" : "nextTransition",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1012() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    long long0 = dateTimeZone0.UTC.nextTransition(0L);\n}",
    "testName" : "test1012"
  },
  "test3037" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3037() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);\n    long long0 = dateTimeZone0.convertLocalToUTC((long) 1, false);\n    dateTimeZone0.toString();\n}",
    "testName" : "test3037"
  },
  "test034" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test034() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forID(\"-08:00\");\n    dateTimeZone0.getID();\n}",
    "testName" : "test034"
  },
  "test2229" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2229() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1189);\n    int int0 = dateTimeZone0.getOffset(2587L);\n    dateTimeZone0.getID();\n}",
    "testName" : "test2229"
  },
  "test2228" : {
    "methodSignature" : "public abstract int getOffset(long instant)",
    "methodName" : "getOffset",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2228() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1189);\n    int int0 = dateTimeZone0.getOffset(2587L);\n}",
    "testName" : "test2228"
  },
  "test1416" : {
    "methodSignature" : "public abstract boolean isFixed()",
    "methodName" : "isFixed",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1416() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    boolean boolean0 = dateTimeZone0.isFixed();\n}",
    "testName" : "test1416"
  },
  "test6784" : {
    "methodSignature" : "public static DateTimeZone forTimeZone(TimeZone zone)",
    "methodName" : "forTimeZone",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6784() throws Throwable {\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    TimeZone timeZone0 = fixedDateTimeZone0.UTC.toTimeZone();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);\n}",
    "testName" : "test6784"
  },
  "test7593" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7593() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);\n    dateTimeZone0.toString();\n}",
    "testName" : "test7593"
  },
  "test83101" : {
    "methodSignature" : "public final String getName(long instant)",
    "methodName" : "getName",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test83101() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2831, \"hsZfnd<-{UF+T\");\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);\n    String string0 = dateTimeZone0.getName((long) 807);\n}",
    "testName" : "test83101"
  },
  "test2633" : {
    "methodSignature" : "public abstract boolean equals(Object object)",
    "methodName" : "equals",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2633() throws Throwable {\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();\n    boolean boolean0 = dateTimeZone0.equals(dateTimeZone0);\n}",
    "testName" : "test2633"
  },
  "test4656" : {
    "methodSignature" : "public boolean isLocalDateTimeGap(LocalDateTime localDateTime)",
    "methodName" : "isLocalDateTimeGap",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4656() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);\n    boolean boolean0 = dateTimeZone0.isLocalDateTimeGap(localDateTime0);\n}",
    "testName" : "test4656"
  },
  "test3442" : {
    "methodSignature" : "public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC)",
    "methodName" : "convertLocalToUTC",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3442() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    long long0 = dateTimeZone0.convertLocalToUTC(0L, false, 9223372036854775807L);\n}",
    "testName" : "test3442"
  },
  "test5467" : {
    "methodSignature" : "public boolean isStandardOffset(long instant)",
    "methodName" : "isStandardOffset",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5467() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    boolean boolean0 = dateTimeZone0.isStandardOffset(9223372036854775807L);\n}",
    "testName" : "test5467"
  },
  "test5466" : {
    "methodSignature" : "public static DateTimeZone getDefault()",
    "methodName" : "getDefault",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5466() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n}",
    "testName" : "test5466"
  },
  "test023" : {
    "methodSignature" : "public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException",
    "methodName" : "forOffsetHoursMinutes",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test023() throws Throwable {\n    DateTimeZone.forOffsetHoursMinutes((-621), 59);\n}",
    "testName" : "test023"
  },
  "test1822" : {
    "methodSignature" : "public int getOffsetFromLocal(long instantLocal)",
    "methodName" : "getOffsetFromLocal",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1822() throws Throwable {\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();\n    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();\n    int int0 = dateTimeZone0.UTC.getOffsetFromLocal(1);\n}",
    "testName" : "test1822"
  },
  "test3847" : {
    "methodSignature" : "public int getOffsetFromLocal(long instantLocal)",
    "methodName" : "getOffsetFromLocal",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3847() throws Throwable {\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();\n    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();\n    int int0 = dateTimeZone0.getOffsetFromLocal((-1L));\n}",
    "testName" : "test3847"
  },
  "test6277" : {
    "methodSignature" : "public static void setNameProvider(NameProvider nameProvider) throws SecurityException",
    "methodName" : "setNameProvider",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6277() throws Throwable {\n    DefaultNameProvider defaultNameProvider0 = new DefaultNameProvider();\n    DateTimeZone.setNameProvider(defaultNameProvider0);\n}",
    "testName" : "test6277"
  },
  "test4252" : {
    "methodSignature" : "public static DateTimeZone forID(String id)",
    "methodName" : "forID",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4252() throws Throwable {\n    DateTimeZone.forID(\"Eg&\");\n}",
    "testName" : "test4252"
  },
  "test7087" : {
    "methodSignature" : "public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException",
    "methodName" : "forOffsetHoursMinutes",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7087() throws Throwable {\n    DateTimeZone.forOffsetHoursMinutes(0, (-4177984));\n}",
    "testName" : "test7087"
  },
  "test5061" : {
    "methodSignature" : "public long convertUTCToLocal(long instantUTC)",
    "methodName" : "convertUTCToLocal",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5061() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(256);\n    dateTimeZone0.convertUTCToLocal(9223372036854775807L);\n}",
    "testName" : "test5061"
  },
  "test2127" : {
    "methodSignature" : "public abstract int getOffset(long instant)",
    "methodName" : "getOffset",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2127() throws Throwable {\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();\n    int int0 = dateTimeZone0.getOffset(0L);\n}",
    "testName" : "test2127"
  },
  "test5872" : {
    "methodSignature" : "public final String getShortName(long instant)",
    "methodName" : "getShortName",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5872() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(24);\n    String string0 = dateTimeZone0.getShortName(877L);\n}",
    "testName" : "test5872"
  },
  "test7896" : {
    "methodSignature" : "public static DateTimeZone getDefault()",
    "methodName" : "getDefault",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7896() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    DateTimeZone dateTimeZone1 = DateTimeZone.getDefault();\n}",
    "testName" : "test7896"
  },
  "test056" : {
    "methodSignature" : "public int hashCode()",
    "methodName" : "hashCode",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test056() throws Throwable {\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();\n    dateTimeZone0.hashCode();\n}",
    "testName" : "test056"
  },
  "test1315" : {
    "methodSignature" : "public abstract boolean isFixed()",
    "methodName" : "isFixed",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1315() throws Throwable {\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();\n    boolean boolean0 = dateTimeZone0.isFixed();\n}",
    "testName" : "test1315"
  },
  "test6683" : {
    "methodSignature" : "public static DateTimeZone forTimeZone(TimeZone zone)",
    "methodName" : "forTimeZone",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6683() throws Throwable {\n    ZoneOffset zoneOffset0 = ZoneOffset.MIN;\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    DateTimeZone.forTimeZone(timeZone0);\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);\n}",
    "testName" : "test6683"
  },
  "test6682" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6682() throws Throwable {\n    ZoneOffset zoneOffset0 = ZoneOffset.MIN;\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    DateTimeZone.forTimeZone(timeZone0);\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);\n    dateTimeZone0.toString();\n}",
    "testName" : "test6682"
  },
  "test7492" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7492() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forID(\"UTC\");\n    dateTimeZone0.getID();\n}",
    "testName" : "test7492"
  },
  "test2532" : {
    "methodSignature" : "public abstract String getNameKey(long instant)",
    "methodName" : "getNameKey",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2532() throws Throwable {\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();\n    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();\n    String string0 = dateTimeZone0.getNameKey((-2642L));\n}",
    "testName" : "test2532"
  },
  "test1720" : {
    "methodSignature" : "public abstract int getStandardOffset(long instant)",
    "methodName" : "getStandardOffset",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1720() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1314));\n    int int0 = dateTimeZone0.getStandardOffset((-1314));\n}",
    "testName" : "test1720"
  },
  "test1721" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1721() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1314));\n    int int0 = dateTimeZone0.getStandardOffset((-1314));\n    dateTimeZone0.toString();\n}",
    "testName" : "test1721"
  },
  "test85104" : {
    "methodSignature" : "protected Object writeReplace() throws ObjectStreamException",
    "methodName" : "writeReplace",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test85104() throws Throwable {\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    Object object0 = fixedDateTimeZone0.UTC.writeReplace();\n}",
    "testName" : "test85104"
  },
  "test4555" : {
    "methodSignature" : "public boolean isLocalDateTimeGap(LocalDateTime localDateTime)",
    "methodName" : "isLocalDateTimeGap",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4555() throws Throwable {\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    boolean boolean0 = fixedDateTimeZone0.UTC.isLocalDateTimeGap((LocalDateTime) null);\n}",
    "testName" : "test4555"
  },
  "test045" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test045() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    DateTimeZone.setDefault(dateTimeZone0);\n    dateTimeZone0.toString();\n}",
    "testName" : "test045"
  },
  "test2936" : {
    "methodSignature" : "public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC)",
    "methodName" : "convertLocalToUTC",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2936() throws Throwable {\n    UTCProvider uTCProvider0 = new UTCProvider();\n    DateTimeZone dateTimeZone0 = uTCProvider0.getZone(\"UTC\");\n    long long0 = dateTimeZone0.convertLocalToUTC((-1L), false, (-1L));\n}",
    "testName" : "test2936"
  },
  "test3746" : {
    "methodSignature" : "public int getOffsetFromLocal(long instantLocal)",
    "methodName" : "getOffsetFromLocal",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3746() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    int int0 = dateTimeZone0.getOffsetFromLocal(9223372036854775807L);\n}",
    "testName" : "test3746"
  },
  "test0911" : {
    "methodSignature" : "public abstract long previousTransition(long instant)",
    "methodName" : "previousTransition",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0911() throws Throwable {\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();\n    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();\n    long long0 = dateTimeZone0.previousTransition(1);\n}",
    "testName" : "test0911"
  },
  "test5365" : {
    "methodSignature" : "public boolean isStandardOffset(long instant)",
    "methodName" : "isStandardOffset",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5365() throws Throwable {\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    boolean boolean0 = fixedDateTimeZone0.isStandardOffset(1L);\n}",
    "testName" : "test5365"
  },
  "test3341" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3341() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(3);\n    dateTimeZone0.getMillisKeepLocal(dateTimeZone0, 0L);\n    dateTimeZone0.toString();\n}",
    "testName" : "test3341"
  },
  "test6176" : {
    "methodSignature" : "public static void setNameProvider(NameProvider nameProvider) throws SecurityException",
    "methodName" : "setNameProvider",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6176() throws Throwable {\n    DateTimeZone.setNameProvider((NameProvider) null);\n}",
    "testName" : "test6176"
  },
  "test4151" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4151() throws Throwable {\n    TimeZone timeZone0 = TimeZone.getTimeZone(\"-08:00\");\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);\n    dateTimeZone0.toString();\n}",
    "testName" : "test4151"
  }
}