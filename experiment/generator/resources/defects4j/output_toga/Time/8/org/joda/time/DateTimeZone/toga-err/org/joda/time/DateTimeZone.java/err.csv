org.joda.time.DateTimeZone,@Test(timeout = 4000)
public void test033() throws Throwable {
    String string0 = ""~S{E4n"";
    ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
    ZoneInfoProvider zoneInfoProvider0 = null;
    zoneInfoProvider0 = new ZoneInfoProvider(""~S{E4n"", classLoader0);
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.DateTimeZone,@Test(timeout = 4000)
public void test044() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    long long0 = 0L;
    String string0 = dateTimeZone0.UTC.getNameKey(0L);
    dateTimeZone0.convertLocalToUTC(0L, false);
    dateTimeZone0.UTC.convertUTCToLocal(0L);
    DateTimeZone.setDefault(dateTimeZone0);
    long long1 = 1459L;
    Locale locale0 = Locale.PRC;
    String string1 = dateTimeZone0.getName(1459L, locale0);
    locale0.getDisplayLanguage();
    dateTimeZone0.nextTransition((-1L));
    long long2 = 2552L;
    URI uRI0 = MockURI.create(""T]~]LIvezO*"");
    MockFile mockFile0 = new MockFile(uRI0);
    MockFile mockFile1 = new MockFile(mockFile0, string1);
    MockFile.createTempFile(string0, string1, (File) mockFile1);
},ERROR,java.util.NoSuchElementException,[ERROR] - Focal method not found. No candidate methods found in the original class, analyzing both the name and the number of parameters.
org.joda.time.DateTimeZone,@Test(timeout = 4000)
public void test055() throws Throwable {
    DateTimeZone.forOffsetMillis(0);
    DateTimeZone.forID(""k`"");
    DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
    DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.DateTimeZone,@Test(timeout = 4000)
public void test077() throws Throwable {
    String string0 = ""MIT"";
    ZoneOffset.of(""MIT"");
},ERROR,java.nio.file.NoSuchFileException,/home/star_usit_group/tratto/experiment/generator/resources/defects4j/temp/Time_8b/src/main/java/java/time/ZoneOffset.java
org.joda.time.DateTimeZone,@Test(timeout = 4000)
public void test2323() throws Throwable {
    DateTimeZone.getProvider();
    DateTimeZone.setDefault((DateTimeZone) null);
    int int0 = 578;
},ERROR,java.lang.IllegalStateException,[ERROR] - Unable to parse last statement as a MethodCallExpr or an ObjectCreationExpr statement.
org.joda.time.DateTimeZone,@Test(timeout = 4000)
public void test2626() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.MAX;
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    DateTimeZone.forTimeZone(timeZone0);
    DateTimeUtils.setCurrentMillisOffset(10800000L);
    LocalDateTime.parse(""4|rmN$}!tZmIy~tl$c"");
    ReadableDuration readableDuration0 = null;
    int int0 = 1;
},ERROR,java.lang.IllegalStateException,[ERROR] - Unable to parse last statement as a MethodCallExpr or an ObjectCreationExpr statement.
org.joda.time.DateTimeZone,@Test(timeout = 4000)
public void test3131() throws Throwable {
    DateTimeZone.forID(""z6gMi"");
    long long0 = (-1360L);
},ERROR,java.lang.IllegalStateException,[ERROR] - Unable to parse last statement as a MethodCallExpr or an ObjectCreationExpr statement.
org.joda.time.DateTimeZone,@Test(timeout = 4000)
public void test3535() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    DateTimeZone.forTimeZone(timeZone0);
    DateTimeZone.forID(""+&OxR7{L] |au,X"");
    long long0 = 2138L;
},ERROR,java.lang.IllegalStateException,[ERROR] - Unable to parse last statement as a MethodCallExpr or an ObjectCreationExpr statement.
org.joda.time.DateTimeZone,@Test(timeout = 4000)
public void test4545() throws Throwable {
    DateTimeZone.getNameProvider();
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    long long0 = (-47L);
    dateTimeZone0.adjustOffset((-47L), false);
    Locale locale0 = Locale.ITALIAN;
    dateTimeZone0.getShortName((-47L), locale0);
    dateTimeZone0.convertLocalToUTC((-47L), false);
    UTCProvider uTCProvider0 = new UTCProvider();
    dateTimeZone0.equals(uTCProvider0);
    dateTimeZone0.getID();
    JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetHours(1822);
    ZonedChronology.getInstance(julianChronology0, dateTimeZone1);
    ReadablePartial readablePartial0 = null;
},ERROR,java.lang.IllegalStateException,[ERROR] - Unable to parse last statement as a MethodCallExpr or an ObjectCreationExpr statement.
org.joda.time.DateTimeZone,@Test(timeout = 4000)
public void test5050() throws Throwable {
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    fixedDateTimeZone0.UTC.getOffsetFromLocal(9223372036854775807L);
    fixedDateTimeZone0.UTC.getShortName(9223372036854775807L, (Locale) null);
    fixedDateTimeZone0.isStandardOffset(31083663600000L);
    fixedDateTimeZone0.getOffset(10000000000000L);
    fixedDateTimeZone0.getID();
    fixedDateTimeZone0.nextTransition(245L);
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.DateTimeZone,@Test(timeout = 4000)
public void test5555() throws Throwable {
    int int0 = 204;
    DateTimeZone.forOffsetHoursMinutes(0, 204);
    DefaultNameProvider defaultNameProvider0 = null;
    defaultNameProvider0 = new DefaultNameProvider();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.DateTimeZone,@Test(timeout = 4000)
public void test5757() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    long long0 = 1796L;
    DateTimeUtils.setCurrentMillisFixed(1796L);
    boolean boolean0 = true;
    dateTimeZone0.convertLocalToUTC(9223372036854775807L, true);
    long long1 = 60L;
},ERROR,java.lang.IllegalStateException,[ERROR] - Unable to parse last statement as a MethodCallExpr or an ObjectCreationExpr statement.
org.joda.time.DateTimeZone,@Test(timeout = 4000)
public void test5858() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(23);
    DateTimeZone.setDefault(dateTimeZone0);
    dateTimeZone0.UTC.getStandardOffset(23);
    int int0 = 1;
    int int1 = 32;
    NameProvider nameProvider0 = DateTimeZone.getNameProvider();
    DateTimeZone.setNameProvider(nameProvider0);
    LocalDateTime localDateTime0 = new LocalDateTime(1, 1, 32, 32, 1265);
    BuddhistChronology.getInstance();
    int int2 = 435;
},ERROR,java.lang.IllegalStateException,[ERROR] - Unable to parse last statement as a MethodCallExpr or an ObjectCreationExpr statement.
