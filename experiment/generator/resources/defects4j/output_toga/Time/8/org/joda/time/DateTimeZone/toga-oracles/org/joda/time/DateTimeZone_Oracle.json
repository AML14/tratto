[ {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public boolean isStandardOffset(long instant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test000"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test011"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public static DateTimeZone getDefault()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test022"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public ZoneInfoProvider(String resourcePath, ClassLoader loader) throws IOException",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test033"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public static final void setCurrentMillisProvider(MillisProvider millisProvider) throws SecurityException",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test055"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public static DateTimeZone forOffsetHours(int hoursOffset) throws IllegalArgumentException",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test066"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public static DateTimeZone getDefault()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test088"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test099"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "protected Object writeReplace() throws ObjectStreamException",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test1010"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public final String getShortName(long instant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test1111"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public static DateTimeZone forOffsetHours(int hoursOffset) throws IllegalArgumentException",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test1212"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public long getMillisKeepLocal(DateTimeZone newZone, long oldInstant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test1313"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public abstract int getStandardOffset(long instant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test1414"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public final String getName(long instant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test1515"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public abstract boolean isFixed()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test1616"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public static DateTimeZone getDefault()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test1717"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test1818"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public abstract int getStandardOffset(long instant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test1919"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public static NameProvider getNameProvider()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test2020"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String toString()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test2121"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public static Set<String> getAvailableIDs()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test2222"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public abstract long nextTransition(long instant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test2424"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public static DateTimeZone forTimeZone(TimeZone zone)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test2525"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public abstract int getOffset(long instant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test2727"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public long adjustOffset(long instant, boolean earlierOrLater)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test2828"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public boolean isStandardOffset(long instant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test2929"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public final String getName(long instant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test3030"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public static DateTimeZone forOffsetHours(int hoursOffset) throws IllegalArgumentException",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test3232"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public long convertLocalToUTC(long instantLocal, boolean strict)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test3333"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public long adjustOffset(long instant, boolean earlierOrLater)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test3434"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public int hashCode()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test3636"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public long getMillisKeepLocal(DateTimeZone newZone, long oldInstant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test3737"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public abstract boolean equals(Object object)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test3838"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public long getMillisKeepLocal(DateTimeZone newZone, long oldInstant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test3939"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public final int getOffset(ReadableInstant instant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test4040"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public boolean isLocalDateTimeGap(LocalDateTime localDateTime)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test4141"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public boolean isLocalDateTimeGap(LocalDateTime localDateTime)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test4242"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public boolean isLocalDateTimeGap(LocalDateTime localDateTime)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test4343"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public int getOffsetFromLocal(long instantLocal)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test4444"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public long convertLocalToUTC(long instantLocal, boolean strict)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test4646"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public boolean isStandardOffset(long instant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test4747"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public int getOffsetFromLocal(long instantLocal)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test4848"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public long adjustOffset(long instant, boolean earlierOrLater)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test4949"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public long nextTransition(long instant)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test5050"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public boolean isLocalDateTimeGap(LocalDateTime localDateTime)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test5151"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public static DateTimeZone forOffsetHours(int hoursOffset) throws IllegalArgumentException",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test5252"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public static void setDefault(DateTimeZone zone) throws SecurityException",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test5353"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public static DateTimeZone forOffsetMillis(int millisOffset)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test5454"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public DefaultNameProvider()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test5555"
}, {
  "className" : "org.joda.time.DateTimeZone",
  "methodSignature" : "public String getName(long instant, Locale locale)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test5656"
} ]