project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.forOffsetMillis(86399999);
    Locale locale0 = Locale.GERMAN;
    fixedDateTimeZone0.UTC.getName(1202L, locale0);
    ((DateTimeZone) fixedDateTimeZone0).writeReplace();
    dateTimeZone0.getID();
    fixedDateTimeZone0.previousTransition((-2049L));
    DateTimeZone.getProvider();
    fixedDateTimeZone0.isStandardOffset((-2049L));
}",0,
project,0,test011,"public void test011() throws Throwable {
    int int0 = 2649;
    try {
        DateTimeZone.forOffsetHoursMinutes(2649, 2649);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Hours out of range: 2649
        //
        verifyException(""org.joda.time.DateTimeZone"", e);
    }
}",1,
project,0,test022,"public void test022() throws Throwable {
    DefaultNameProvider defaultNameProvider0 = new DefaultNameProvider();
    Locale locale0 = Locale.US;
    defaultNameProvider0.getName(locale0, ""org.joda.time.field.ScaledDurationField"", ""org.joda.time.field.ScaledDurationField"");
    DateTimeZone.setNameProvider(defaultNameProvider0);
    int int0 = 19;
    int int1 = 60000;
    DateTimeZone.forOffsetHoursMinutes(19, 60000);
    // Undeclared exception!
    try {
        DateTimeZone.getDefault();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Minutes out of range: 60000
        //
        verifyException(""org.joda.time.DateTimeZone"", e);
    }
}",0,
project,0,test033,"public void test033() throws Throwable {
    String string0 = ""~S{E4n"";
    ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
    ZoneInfoProvider zoneInfoProvider0 = null;
    try {
        zoneInfoProvider0 = new ZoneInfoProvider(""~S{E4n"", classLoader0);
        fail(""Expecting exception: IOException"");
    } catch (Throwable e) {
        //
        // Resource not found: \""~S{E4n/ZoneInfoMap\"" ClassLoader: sun.misc.Launcher$AppClassLoader@0000000001
        //
        verifyException(""org.joda.time.tz.ZoneInfoProvider"", e);
    }
}",0,
project,0,test055,"public void test055() throws Throwable {
    DateTimeZone.forOffsetMillis(0);
    DateTimeZone.forID(""k`"");
    DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
    // Undeclared exception!
    try {
        DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The datetime zone id 'k`' is not recognised
        //
        verifyException(""org.joda.time.DateTimeZone"", e);
    }
}",1,
project,0,test066,"public void test066() throws Throwable {
    int int0 = (-3740);
    try {
        DateTimeZone.forOffsetHours((-3740));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Hours out of range: -3740
        //
        verifyException(""org.joda.time.DateTimeZone"", e);
    }
}",1,
project,0,test088,"public void test088() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forID(""UTC"");
    DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
    DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
    dateTimeZone0.convertLocalToUTC(0L, false, 44L);
    dateTimeZone0.getID();
    DateTimeZone dateTimeZone1 = DateTimeZone.getDefault();
    DateTimeZone dateTimeZone2 = DateTimeZone.forOffsetMillis(834);
    Locale locale0 = Locale.PRC;
    dateTimeZone2.UTC.getShortName(44L, locale0);
    dateTimeZone1.convertLocalToUTC(0L, false);
    DateTimeZone.getProvider();
    dateTimeZone0.previousTransition((-2229L));
    DateTimeZone.setDefault(dateTimeZone1);
    dateTimeZone1.convertLocalToUTC(0L, false, 0L);
    dateTimeZone1.toTimeZone();
    dateTimeZone0.toTimeZone();
    DateTimeZone.getDefault();
}",0,
project,0,test099,"public void test099() throws Throwable {
    int int0 = 578;
    try {
        DateTimeZone.forOffsetHoursMinutes(578, 578);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Hours out of range: 578
        //
        verifyException(""org.joda.time.DateTimeZone"", e);
    }
}",0,
project,0,test1010,"public void test1010() throws Throwable {
    UTCProvider uTCProvider0 = new UTCProvider();
    uTCProvider0.getZone(""MST"");
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
    CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone) buddhistChronology0.getZone();
    ((DateTimeZone) cachedDateTimeZone0).writeReplace();
}",0,
project,0,test1111,"public void test1111() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
    DateMidnight dateMidnight0 = DateMidnight.now();
    dateTimeZone0.getOffset((ReadableInstant) dateMidnight0);
    dateTimeZone0.getNameKey(408L);
    dateTimeZone0.UTC.previousTransition(366L);
    dateTimeZone0.toString();
    dateTimeZone0.getStandardOffset(408L);
    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(0);
    DateTimeZone.getAvailableIDs();
    dateTimeZone1.getShortName(0L);
}",0,
project,0,test1212,"public void test1212() throws Throwable {
    int int0 = 578;
    try {
        DateTimeZone.forOffsetHours(578);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Hours out of range: 578
        //
        verifyException(""org.joda.time.DateTimeZone"", e);
    }
}",0,
project,0,test1313,"public void test1313() throws Throwable {
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
    dateTimeZone0.isFixed();
    dateTimeZone0.getID();
    dateTimeZone0.previousTransition(1);
    dateTimeZone0.convertLocalToUTC(2153L, true);
    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(1);
    dateTimeZone0.getMillisKeepLocal(dateTimeZone1, 2153L);
}",0,
project,0,test1414,"public void test1414() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    dateTimeZone0.UTC.convertLocalToUTC((long) 1, false, 1772L);
    dateTimeZone0.getMillisKeepLocal(fixedDateTimeZone0, 1);
    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(1);
    dateTimeZone1.UTC.getMillisKeepLocal(dateTimeZone0, (-28799999L));
    dateTimeZone0.toString();
    DateTimeZone.forID(""America/Los_Angeles"");
    DateTimeZone.getAvailableIDs();
    dateTimeZone0.getStandardOffset(0L);
}",0,
project,0,test1515,"public void test1515() throws Throwable {
    DateTimeZone.getAvailableIDs();
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    fixedDateTimeZone0.getName(1064L);
}",0,
project,0,test1616,"public void test1616() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-674));
    dateTimeZone0.UTC.nextTransition(0L);
    DateTimeUtils.setCurrentMillisFixed((-1328L));
    DateTimeUtils.setCurrentMillisSystem();
    dateTimeZone0.getName((long) (-674), (Locale) null);
    int int0 = (-4253);
    int int1 = 57;
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-674), ""America/Los_Angeles"", (-1319), (-4253), 928, 928, 11, 1, 0, 11, 0, 459, 57);
    int int2 = 2976;
    int int3 = 60;
    simpleTimeZone0.setEndRule(int2, int3, int1);
    DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(simpleTimeZone0);
    DateTimeZone dateTimeZone2 = DateTimeZone.forTimeZone(simpleTimeZone0);
    dateTimeZone1.isStandardOffset(int0);
    dateTimeZone1.isStandardOffset(int0);
    dateTimeZone2.isFixed();
}",0,
project,0,test1717,"public void test1717() throws Throwable {
    NameProvider nameProvider0 = DateTimeZone.getNameProvider();
    DateTimeZone.setNameProvider(nameProvider0);
    DateTimeZone.getDefault();
}",0,
project,0,test1818,"public void test1818() throws Throwable {
    int int0 = 24;
    int int1 = 1000;
    try {
        DateTimeZone.forOffsetHoursMinutes(24, 1000);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Hours out of range: 24
        //
        verifyException(""org.joda.time.DateTimeZone"", e);
    }
}",1,
project,0,test1919,"public void test1919() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    DateTimeUtils.setCurrentMillisSystem();
    DateTimeZone.setDefault(dateTimeZone0);
    dateTimeZone0.getNameKey(2660L);
    Locale locale0 = Locale.SIMPLIFIED_CHINESE;
    Locale locale1 = locale0.stripExtensions();
    dateTimeZone0.UTC.getShortName(2660L, locale1);
    dateTimeZone0.getName((-4462L));
    dateTimeZone0.getName(10800000L);
    dateTimeZone0.getShortName((-4462L));
    dateTimeZone0.isFixed();
    dateTimeZone0.isStandardOffset(2660L);
    dateTimeZone0.getStandardOffset(2660L);
}",0,
project,0,test2020,"public void test2020() throws Throwable {
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    fixedDateTimeZone0.UTC.getStandardOffset((-1L));
    fixedDateTimeZone0.UTC.toTimeZone();
    Locale locale0 = Locale.CHINESE;
    fixedDateTimeZone0.getName(2075L, locale0);
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    DateTimeUtils.setCurrentMillisFixed(13L);
    dateTimeZone0.UTC.nextTransition(0);
    fixedDateTimeZone0.convertLocalToUTC((long) 0, false);
    DateTimeZone.getNameProvider();
}",0,
project,0,test2121,"public void test2121() throws Throwable {
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
    DateTimeZone.forTimeZone((TimeZone) null);
    dateTimeZone0.getStandardOffset((-257L));
    dateTimeZone0.convertLocalToUTC((-1682L), true, 1658L);
    DateTimeZone.setDefault((DateTimeZone) null);
    long long0 = 0L;
    String string0 = ""S6C>.6qu=KV"";
    Locale locale0 = Locale.forLanguageTag(string0);
    dateTimeZone0.getName(long0, locale0);
    dateTimeZone0.toString();
}",0,
project,0,test2222,"public void test2222() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2186);
    dateTimeZone0.isLocalDateTimeGap((LocalDateTime) null);
    DateTimeZone.getAvailableIDs();
}",0,
project,0,test2424,"public void test2424() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""America/Denver"");
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
    dateTimeZone0.UTC.getNameKey(0L);
    dateTimeZone0.nextTransition(0L);
}",0,
project,0,test2525,"public void test2525() throws Throwable {
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
    dateTimeZone0.convertUTCToLocal(0L);
    Hours hours0 = Hours.SIX;
    PeriodType periodType0 = hours0.getPeriodType();
    Period period0 = new Period(0L, periodType0, (Chronology) buddhistChronology0);
    buddhistChronology0.get((ReadablePeriod) period0, (-1L));
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, ""/y<.b,"", 1, 1, 1, 0, 0, 1, 1, 1915, 1);
    DateTimeZone.forTimeZone(simpleTimeZone0);
}",0,
project,0,test2727,"public void test2727() throws Throwable {
    DateTimeZone.setProvider((Provider) null);
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    dateTimeZone0.getOffset((-351L));
}",0,
project,0,test2828,"public void test2828() throws Throwable {
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    fixedDateTimeZone0.adjustOffset(100000L, true);
}",0,
project,0,test2929,"public void test2929() throws Throwable {
    DateTimeZone.getAvailableIDs();
    UTCProvider uTCProvider0 = new UTCProvider();
    uTCProvider0.getAvailableIDs();
    uTCProvider0.getAvailableIDs();
    DateTimeZone.setProvider(uTCProvider0);
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2253));
    long long0 = dateTimeZone0.adjustOffset(0L, false);
    DateTimeZone.getProvider();
    DateTimeZone.forOffsetHoursMinutes((-2253), (-2253));
    int int0 = 2000;
    DateTimeZone.forOffsetMillis(int0);
    // Undeclared exception!
    try {
        dateTimeZone0.isStandardOffset(long0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Hours out of range: -2253
        //
        verifyException(""org.joda.time.DateTimeZone"", e);
    }
}",1,
project,0,test3030,"public void test3030() throws Throwable {
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
    dateTimeZone0.UTC.adjustOffset(1, true);
    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis((-216));
    Locale locale0 = Locale.CANADA;
    dateTimeZone0.getName(0L, locale0);
    Locale locale1 = Locale.FRANCE;
    dateTimeZone0.getName(0L, locale1);
    dateTimeZone0.convertLocalToUTC((-1107L), true);
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    dateTimeZone0.UTC.toTimeZone();
    DateTimeZone dateTimeZone2 = DateTimeZone.forTimeZone(timeZone0);
    LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone1);
    dateTimeZone2.UTC.isLocalDateTimeGap(localDateTime0);
    DateTimeZone.getAvailableIDs();
    dateTimeZone0.getShortName(0L);
    dateTimeZone2.previousTransition(0L);
    DateTimeZone dateTimeZone3 = DateTimeZone.forOffsetMillis((-1858));
    dateTimeZone3.UTC.getOffset((long) 1);
    UTCProvider uTCProvider0 = new UTCProvider();
    DateTimeZone.setProvider(uTCProvider0);
    dateTimeZone3.nextTransition(1L);
    DateTimeZone.getProvider();
    dateTimeZone2.getNameKey(1L);
    dateTimeZone0.isLocalDateTimeGap(localDateTime0);
    dateTimeZone1.getOffsetFromLocal(0L);
    DateTimeZone dateTimeZone4 = DateTimeZone.forTimeZone(timeZone0);
    dateTimeZone4.getName((long) (-1858));
}",0,
project,0,test3232,"public void test3232() throws Throwable {
    DateTimeZone.forOffsetHours(2);
}",0,
project,0,test3333,"public void test3333() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 50);
    dateTimeZone0.UTC.previousTransition((-1425L));
    int int0 = dateTimeZone0.UTC.getOffset(0L);
    dateTimeZone0.getStandardOffset(1420L);
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2082, ""a=fT}2ru86SS1=`2Po"", 578, 2082, 0, 1212, 6600000, 1212, 1, 2082, 0);
    OffsetTime offsetTime0 = MockOffsetTime.now();
    ZoneOffset zoneOffset0 = ZoneOffset.from(offsetTime0);
    simpleTimeZone0.toZoneId();
    TimeZone.getTimeZone((ZoneId) zoneOffset0);
    DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(simpleTimeZone0);
    long long0 = (-1L);
    dateTimeZone1.convertUTCToLocal(long0);
    boolean boolean0 = true;
    // Undeclared exception!
    try {
        dateTimeZone1.convertLocalToUTC((long) int0, boolean0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal start month 578
        //
        verifyException(""java.util.SimpleTimeZone"", e);
    }
}",0,
project,0,test3434,"public void test3434() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetHours(0);
    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone1);
    DateTimeZone dateTimeZone2 = zonedChronology0.getZone();
    dateTimeZone2.adjustOffset(0, false);
}",0,
project,0,test3636,"public void test3636() throws Throwable {
    DateTime dateTime0 = new DateTime(498L);
    DateTime dateTime1 = dateTime0.minusDays(1);
    DateTime dateTime2 = dateTime1.withEarlierOffsetAtOverlap();
    GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) dateTime2, 1);
    DateTimeZone dateTimeZone0 = gJChronology0.getZone();
    dateTimeZone0.hashCode();
}",0,
project,0,test3737,"public void test3737() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(10, 10);
    dateTimeZone0.hashCode();
    DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
    doReturn(0L).when(dateTimeUtils_MillisProvider0).getMillis();
    DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
    dateTimeZone0.getOffsetFromLocal(10);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
    DateMidnight dateMidnight0 = DateMidnight.now((Chronology) buddhistChronology0);
    DateMidnight dateMidnight1 = dateMidnight0.plusWeeks(265);
    dateMidnight1.getMillisOfSecond();
    dateTimeZone0.getOffset((ReadableInstant) dateMidnight1);
    dateTimeZone0.adjustOffset(21600000L, true);
    dateTimeZone0.getOffset(21600000L);
    dateTimeZone0.convertLocalToUTC((long) 10, true);
    DateTimeZone dateTimeZone1 = DateTimeZone.forID(""America/Denver"");
    dateTimeZone0.toString();
    long long0 = 10800000L;
    dateTimeZone1.convertLocalToUTC(10800000L, true, 10800000L);
    dateTimeZone1.getStandardOffset(10);
    dateTimeZone0.UTC.previousTransition(36000000L);
    int int0 = (-167);
    DateTimeZone.forOffsetHoursMinutes(1, (-167));
    dateTimeZone1.UTC.getShortName(long0);
    DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider1 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
    DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider1);
    long long1 = (-824L);
    // Undeclared exception!
    try {
        dateTimeZone1.getMillisKeepLocal(dateTimeZone0, long1);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Minutes out of range: -167
        //
        verifyException(""org.joda.time.DateTimeZone"", e);
    }
}",0,
project,0,test3838,"public void test3838() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
    DefaultNameProvider defaultNameProvider0 = new DefaultNameProvider();
    Locale locale0 = Locale.ENGLISH;
    defaultNameProvider0.getName(locale0, ""America/St_Johns"", ""=8,))}b`:-"");
    dateTimeZone0.equals(defaultNameProvider0);
}",0,
project,0,test3939,"public void test3939() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    NameProvider nameProvider0 = DateTimeZone.getNameProvider();
    DateTimeZone.setNameProvider(nameProvider0);
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    dateTimeZone0.getMillisKeepLocal(fixedDateTimeZone0, 1029L);
    DefaultNameProvider defaultNameProvider0 = new DefaultNameProvider();
    fixedDateTimeZone0.equals(defaultNameProvider0);
    long long0 = (-1422L);
    String string0 = ""Ve!CDbg19FKCi"";
    DateTimeZone.forID(""Ve!CDbg19FKCi"");
    // Undeclared exception!
    try {
        dateTimeZone0.getMillisKeepLocal(fixedDateTimeZone0, long0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The datetime zone id 'Ve!CDbg19FKCi' is not recognised
        //
        verifyException(""org.joda.time.DateTimeZone"", e);
    }
}",0,
project,0,test4040,"public void test4040() throws Throwable {
    DateTimeZone.getAvailableIDs();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1000);
    GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
    DateMidnight dateMidnight0 = new DateMidnight((Chronology) gJChronology0);
    Duration duration0 = Duration.parse((String) null);
    Duration duration1 = duration0.withDurationAdded(2629800000L, 1000);
    PeriodType periodType0 = PeriodType.standard();
    PeriodType periodType1 = periodType0.withMinutesRemoved();
    Period period0 = duration1.toPeriod(periodType1, (Chronology) gJChronology0);
    dateMidnight0.plus((ReadablePeriod) period0);
    dateTimeZone0.getOffset((ReadableInstant) dateMidnight0);
}",0,
project,0,test4141,"public void test4141() throws Throwable {
    int int0 = 1;
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
    Interval interval0 = new Interval((-272L), 10800000L);
    Duration duration0 = interval0.toDuration();
    dateTimeZone0.getNameKey((-352L));
    interval0.withEndMillis(1);
    DateTime dateTime0 = interval0.getEnd();
    dateTime0.withDayOfYear(1);
    int int1 = dateTime0.getDayOfMonth();
    interval0.withDurationBeforeEnd(duration0);
    dateTime0.withZoneRetainFields(dateTimeZone0);
    dateTimeZone0.getOffset((ReadableInstant) dateTime0);
    DateTimeZone.getAvailableIDs();
    dateTimeZone0.convertUTCToLocal((-352L));
    dateTimeZone0.isStandardOffset((-1611L));
    dateTimeZone0.previousTransition(0L);
    dateTimeZone0.isFixed();
    DateTimeZone.getDefault();
    LocalDateTime localDateTime0 = LocalDateTime.fromDateFields((Date) null);
    LocalDateTime localDateTime1 = localDateTime0.withYear(int1);
    LocalDateTime localDateTime2 = localDateTime1.minusSeconds(int0);
    int int2 = 4;
    LocalDateTime localDateTime3 = localDateTime2.minusMillis(int2);
    LocalDateTime localDateTime4 = localDateTime3.plusSeconds(int0);
    // Undeclared exception!
    try {
        dateTimeZone0.isLocalDateTimeGap(localDateTime4);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The date must not be null
        //
        verifyException(""org.joda.time.LocalDateTime"", e);
    }
}",0,
project,0,test4242,"public void test4242() throws Throwable {
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
    LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(lenientChronology0, fixedDateTimeZone0);
    DateTimeZone dateTimeZone0 = zonedChronology0.getZone();
    LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
    LocalDateTime localDateTime1 = localDateTime0.withMonthOfYear(1);
    dateTimeZone0.isLocalDateTimeGap(localDateTime1);
}",0,
project,0,test4343,"public void test4343() throws Throwable {
    Provider provider0 = DateTimeZone.getProvider();
    DateTimeZone.setProvider(provider0);
    ISOChronology iSOChronology0 = ISOChronology.getInstance();
    Chronology chronology0 = iSOChronology0.withUTC();
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = gJChronology0.getZone();
    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(chronology0, dateTimeZone0);
    DateTimeZone dateTimeZone1 = zonedChronology0.getZone();
    LocalTime localTime0 = LocalTime.now((Chronology) iSOChronology0);
    zonedChronology0.set(localTime0, 605L);
    dateTimeZone1.getName(605L);
    dateTimeZone0.getMillisKeepLocal(dateTimeZone1, 0L);
    DateTimeZone.forOffsetMillis((-970));
    dateTimeZone0.convertLocalToUTC(605L, true);
    dateTimeZone0.isLocalDateTimeGap((LocalDateTime) null);
}",0,
project,0,test4444,"public void test4444() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2363);
    dateTimeZone0.hashCode();
    dateTimeZone0.toString();
    dateTimeZone0.previousTransition(2596L);
    dateTimeZone0.convertUTCToLocal(100000000000L);
    dateTimeZone0.getOffsetFromLocal(1660L);
}",0,
project,0,test4646,"public void test4646() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(4);
    dateTimeZone1.UTC.previousTransition(100L);
    UTCProvider uTCProvider0 = new UTCProvider();
    uTCProvider0.getAvailableIDs();
    DateTimeZone.setProvider(uTCProvider0);
    Locale locale0 = Locale.FRENCH;
    locale0.toLanguageTag();
    dateTimeZone0.getShortName((-922L), locale0);
    dateTimeZone0.convertUTCToLocal(0L);
    dateTimeZone0.convertLocalToUTC(1777L, true);
}",0,
project,0,test4747,"public void test4747() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
    dateTimeZone0.isStandardOffset(30L);
}",0,
project,0,test4848,"public void test4848() throws Throwable {
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.forOffsetMillis((-23));
    ((DateTimeZone) fixedDateTimeZone0).writeReplace();
    CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone) DateTimeZone.getDefault();
    Locale locale0 = Locale.CANADA;
    Locale.Category locale_Category0 = Locale.Category.FORMAT;
    Locale.setDefault(locale_Category0, locale0);
    cachedDateTimeZone0.getShortName((long) (-23), locale0);
    cachedDateTimeZone0.getName((long) (-23));
    fixedDateTimeZone0.UTC.getMillisKeepLocal(cachedDateTimeZone0, (-2202L));
    FixedDateTimeZone fixedDateTimeZone1 = (FixedDateTimeZone) DateTimeZone.forOffsetHoursMinutes((-23), 2);
    fixedDateTimeZone0.equals(fixedDateTimeZone1);
    CachedDateTimeZone cachedDateTimeZone1 = (CachedDateTimeZone) DateTimeZone.getDefault();
    cachedDateTimeZone1.isFixed();
    cachedDateTimeZone0.getOffsetFromLocal(1068L);
}",0,
project,0,test4949,"public void test4949() throws Throwable {
    UTCProvider uTCProvider0 = new UTCProvider();
    DateTimeZone dateTimeZone0 = uTCProvider0.getZone(""UTC"");
    dateTimeZone0.nextTransition((-175L));
    dateTimeZone0.adjustOffset(3386L, true);
}",0,
project,0,test5050,"public void test5050() throws Throwable {
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    fixedDateTimeZone0.UTC.getOffsetFromLocal(9223372036854775807L);
    fixedDateTimeZone0.UTC.getShortName(9223372036854775807L, (Locale) null);
    fixedDateTimeZone0.isStandardOffset(31083663600000L);
    fixedDateTimeZone0.getOffset(10000000000000L);
    fixedDateTimeZone0.getID();
    fixedDateTimeZone0.nextTransition(245L);
}",0,
project,0,test5151,"public void test5151() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
    DateTimeZone.getDefault();
    dateTimeZone0.nextTransition(31557600000L);
    dateTimeZone0.hashCode();
    DateTimeZone dateTimeZone1 = DateTimeZone.getDefault();
    DateTimeZone dateTimeZone2 = DateTimeZone.forTimeZone((TimeZone) null);
    GJChronology gJChronology0 = GJChronology.getInstance();
    DateMidnight dateMidnight0 = new DateMidnight(0L, (Chronology) gJChronology0);
    DateMidnight dateMidnight1 = dateMidnight0.withZoneRetainFields(dateTimeZone2);
    dateTimeZone1.getOffset((ReadableInstant) dateMidnight1);
    dateTimeZone2.isLocalDateTimeGap((LocalDateTime) null);
}",0,
project,0,test5252,"public void test5252() throws Throwable {
    NameProvider nameProvider0 = null;
    DateTimeZone.setNameProvider((NameProvider) null);
    int int0 = 1139;
    try {
        DateTimeZone.forOffsetHours(1139);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Hours out of range: 1139
        //
        verifyException(""org.joda.time.DateTimeZone"", e);
    }
}",0,
project,0,test5353,"public void test5353() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    DateTimeUtils.setCurrentMillisFixed((-845L));
    dateTimeZone0.UTC.getStandardOffset(0L);
    dateTimeZone0.UTC.previousTransition(0L);
    JapaneseDate japaneseDate0 = MockJapaneseDate.now();
    dateTimeZone0.getShortName((-845L));
    dateTimeZone0.equals(japaneseDate0);
    dateTimeZone0.UTC.previousTransition((-845L));
    DateTimeZone.getDefault();
    DateTimeUtils.setCurrentMillisFixed((-2720L));
    dateTimeZone0.getNameKey((-128L));
    dateTimeZone0.getOffsetFromLocal(1687L);
    dateTimeZone0.convertLocalToUTC((long) (-28800000), false);
    dateTimeZone0.convertUTCToLocal((-28800000));
    Locale locale0 = Locale.UK;
    dateTimeZone0.getName((-2720L), locale0);
    DateTimeZone.setDefault(dateTimeZone0);
}",0,
project,0,test5454,"public void test5454() throws Throwable {
    int int0 = 86400000;
    // Undeclared exception!
    try {
        DateTimeZone.forOffsetMillis(86400000);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Millis out of range: 86400000
        //
        verifyException(""org.joda.time.DateTimeZone"", e);
    }
}",1,
project,0,test5555,"public void test5555() throws Throwable {
    int int0 = 204;
    DateTimeZone.forOffsetHoursMinutes(0, 204);
    DefaultNameProvider defaultNameProvider0 = null;
    try {
        defaultNameProvider0 = new DefaultNameProvider();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Minutes out of range: 204
        //
        verifyException(""org.joda.time.DateTimeZone"", e);
    }
}",0,
project,0,test5656,"public void test5656() throws Throwable {
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    fixedDateTimeZone0.UTC.convertLocalToUTC((-1066L), true);
    TimeZone timeZone0 = fixedDateTimeZone0.toTimeZone();
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
    DateTimeUtils.setCurrentMillisFixed((-1066L));
    dateTimeZone0.UTC.getName(2451L);
    dateTimeZone0.hashCode();
    fixedDateTimeZone0.previousTransition((-1066L));
    DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
    Locale locale0 = Locale.FRENCH;
    dateTimeZone1.UTC.getShortName(2451L, locale0);
    dateTimeZone1.UTC.getStandardOffset((-1L));
    DateTimeZone.getDefault();
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
    LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
    List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList1, (Collection<Locale>) linkedList2);
    List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList1, (Collection<Locale>) list0);
    Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
    Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list1, locale_FilteringMode0);
    dateTimeZone0.getOffsetFromLocal((-1066L));
    dateTimeZone0.convertLocalToUTC((-354L), true);
    dateTimeZone0.getName((long) 0, locale0);
}",0,
