{
  "test1212" : {
    "methodSignature" : "public static DateTimeZone forOffsetHours(int hoursOffset) throws IllegalArgumentException",
    "methodName" : "forOffsetHours",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1212() throws Throwable {\n    int int0 = 578;\n    DateTimeZone.forOffsetHours(578);\n}",
    "testName" : "test1212"
  },
  "test4646" : {
    "methodSignature" : "public long convertLocalToUTC(long instantLocal, boolean strict)",
    "methodName" : "convertLocalToUTC",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4646() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(4);\n    dateTimeZone1.UTC.previousTransition(100L);\n    UTCProvider uTCProvider0 = new UTCProvider();\n    uTCProvider0.getAvailableIDs();\n    DateTimeZone.setProvider(uTCProvider0);\n    Locale locale0 = Locale.FRENCH;\n    locale0.toLanguageTag();\n    dateTimeZone0.getShortName((-922L), locale0);\n    dateTimeZone0.convertUTCToLocal(0L);\n    dateTimeZone0.convertLocalToUTC(1777L, true);\n}",
    "testName" : "test4646"
  },
  "test3434" : {
    "methodSignature" : "public long adjustOffset(long instant, boolean earlierOrLater)",
    "methodName" : "adjustOffset",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3434() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);\n    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetHours(0);\n    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone1);\n    DateTimeZone dateTimeZone2 = zonedChronology0.getZone();\n    dateTimeZone2.adjustOffset(0, false);\n}",
    "testName" : "test3434"
  },
  "test5656" : {
    "methodSignature" : "public String getName(long instant, Locale locale)",
    "methodName" : "getName",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5656() throws Throwable {\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    fixedDateTimeZone0.UTC.convertLocalToUTC((-1066L), true);\n    TimeZone timeZone0 = fixedDateTimeZone0.toTimeZone();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);\n    DateTimeUtils.setCurrentMillisFixed((-1066L));\n    dateTimeZone0.UTC.getName(2451L);\n    dateTimeZone0.hashCode();\n    fixedDateTimeZone0.previousTransition((-1066L));\n    DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);\n    Locale locale0 = Locale.FRENCH;\n    dateTimeZone1.UTC.getShortName(2451L, locale0);\n    dateTimeZone1.UTC.getStandardOffset((-1L));\n    DateTimeZone.getDefault();\n    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();\n    LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();\n    LinkedList<Locale> linkedList2 = new LinkedList<Locale>();\n    List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList1, (Collection<Locale>) linkedList2);\n    List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList1, (Collection<Locale>) list0);\n    Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;\n    Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list1, locale_FilteringMode0);\n    dateTimeZone0.getOffsetFromLocal((-1066L));\n    dateTimeZone0.convertLocalToUTC((-354L), true);\n    dateTimeZone0.getName((long) 0, locale0);\n}",
    "testName" : "test5656"
  },
  "test2424" : {
    "methodSignature" : "public abstract long nextTransition(long instant)",
    "methodName" : "nextTransition",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2424() throws Throwable {\n    TimeZone timeZone0 = TimeZone.getTimeZone(\"America/Denver\");\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);\n    dateTimeZone0.UTC.getNameKey(0L);\n    dateTimeZone0.nextTransition(0L);\n}",
    "testName" : "test2424"
  },
  "test1010" : {
    "methodSignature" : "protected Object writeReplace() throws ObjectStreamException",
    "methodName" : "writeReplace",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1010() throws Throwable {\n    UTCProvider uTCProvider0 = new UTCProvider();\n    uTCProvider0.getZone(\"MST\");\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);\n    CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone) buddhistChronology0.getZone();\n    ((DateTimeZone) cachedDateTimeZone0).writeReplace();\n}",
    "testName" : "test1010"
  },
  "test4444" : {
    "methodSignature" : "public int getOffsetFromLocal(long instantLocal)",
    "methodName" : "getOffsetFromLocal",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4444() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2363);\n    dateTimeZone0.hashCode();\n    dateTimeZone0.toString();\n    dateTimeZone0.previousTransition(2596L);\n    dateTimeZone0.convertUTCToLocal(100000000000L);\n    dateTimeZone0.getOffsetFromLocal(1660L);\n}",
    "testName" : "test4444"
  },
  "test3232" : {
    "methodSignature" : "public static DateTimeZone forOffsetHours(int hoursOffset) throws IllegalArgumentException",
    "methodName" : "forOffsetHours",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3232() throws Throwable {\n    DateTimeZone.forOffsetHours(2);\n}",
    "testName" : "test3232"
  },
  "test5454" : {
    "methodSignature" : "public static DateTimeZone forOffsetMillis(int millisOffset)",
    "methodName" : "forOffsetMillis",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5454() throws Throwable {\n    int int0 = 86400000;\n    DateTimeZone.forOffsetMillis(86400000);\n}",
    "testName" : "test5454"
  },
  "test2222" : {
    "methodSignature" : "public static Set<String> getAvailableIDs()",
    "methodName" : "getAvailableIDs",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2222() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2186);\n    dateTimeZone0.isLocalDateTimeGap((LocalDateTime) null);\n    DateTimeZone.getAvailableIDs();\n}",
    "testName" : "test2222"
  },
  "test033" : {
    "methodSignature" : "public ZoneInfoProvider(String resourcePath, ClassLoader loader) throws IOException",
    "methodName" : "ZoneInfoProvider",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033() throws Throwable {\n    String string0 = \"~S{E4n\";\n    ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();\n    ZoneInfoProvider zoneInfoProvider0 = null;\n    zoneInfoProvider0 = new ZoneInfoProvider(\"~S{E4n\", classLoader0);\n}",
    "testName" : "test033"
  },
  "test1616" : {
    "methodSignature" : "public abstract boolean isFixed()",
    "methodName" : "isFixed",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1616() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-674));\n    dateTimeZone0.UTC.nextTransition(0L);\n    DateTimeUtils.setCurrentMillisFixed((-1328L));\n    DateTimeUtils.setCurrentMillisSystem();\n    dateTimeZone0.getName((long) (-674), (Locale) null);\n    int int0 = (-4253);\n    int int1 = 57;\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-674), \"America/Los_Angeles\", (-1319), (-4253), 928, 928, 11, 1, 0, 11, 0, 459, 57);\n    int int2 = 2976;\n    int int3 = 60;\n    simpleTimeZone0.setEndRule(int2, int3, int1);\n    DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(simpleTimeZone0);\n    DateTimeZone dateTimeZone2 = DateTimeZone.forTimeZone(simpleTimeZone0);\n    dateTimeZone1.isStandardOffset(int0);\n    dateTimeZone1.isStandardOffset(int0);\n    dateTimeZone2.isFixed();\n}",
    "testName" : "test1616"
  },
  "test3838" : {
    "methodSignature" : "public abstract boolean equals(Object object)",
    "methodName" : "equals",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3838() throws Throwable {\n    TimeZone timeZone0 = TimeZone.getDefault();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);\n    DefaultNameProvider defaultNameProvider0 = new DefaultNameProvider();\n    Locale locale0 = Locale.ENGLISH;\n    defaultNameProvider0.getName(locale0, \"America/St_Johns\", \"=8,))}b`:-\");\n    dateTimeZone0.equals(defaultNameProvider0);\n}",
    "testName" : "test3838"
  },
  "test2828" : {
    "methodSignature" : "public long adjustOffset(long instant, boolean earlierOrLater)",
    "methodName" : "adjustOffset",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2828() throws Throwable {\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    fixedDateTimeZone0.adjustOffset(100000L, true);\n}",
    "testName" : "test2828"
  },
  "test1414" : {
    "methodSignature" : "public abstract int getStandardOffset(long instant)",
    "methodName" : "getStandardOffset",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1414() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    dateTimeZone0.UTC.convertLocalToUTC((long) 1, false, 1772L);\n    dateTimeZone0.getMillisKeepLocal(fixedDateTimeZone0, 1);\n    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(1);\n    dateTimeZone1.UTC.getMillisKeepLocal(dateTimeZone0, (-28799999L));\n    dateTimeZone0.toString();\n    DateTimeZone.forID(\"America/Los_Angeles\");\n    DateTimeZone.getAvailableIDs();\n    dateTimeZone0.getStandardOffset(0L);\n}",
    "testName" : "test1414"
  },
  "test4848" : {
    "methodSignature" : "public int getOffsetFromLocal(long instantLocal)",
    "methodName" : "getOffsetFromLocal",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4848() throws Throwable {\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.forOffsetMillis((-23));\n    ((DateTimeZone) fixedDateTimeZone0).writeReplace();\n    CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone) DateTimeZone.getDefault();\n    Locale locale0 = Locale.CANADA;\n    Locale.Category locale_Category0 = Locale.Category.FORMAT;\n    Locale.setDefault(locale_Category0, locale0);\n    cachedDateTimeZone0.getShortName((long) (-23), locale0);\n    cachedDateTimeZone0.getName((long) (-23));\n    fixedDateTimeZone0.UTC.getMillisKeepLocal(cachedDateTimeZone0, (-2202L));\n    FixedDateTimeZone fixedDateTimeZone1 = (FixedDateTimeZone) DateTimeZone.forOffsetHoursMinutes((-23), 2);\n    fixedDateTimeZone0.equals(fixedDateTimeZone1);\n    CachedDateTimeZone cachedDateTimeZone1 = (CachedDateTimeZone) DateTimeZone.getDefault();\n    cachedDateTimeZone1.isFixed();\n    cachedDateTimeZone0.getOffsetFromLocal(1068L);\n}",
    "testName" : "test4848"
  },
  "test3636" : {
    "methodSignature" : "public int hashCode()",
    "methodName" : "hashCode",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3636() throws Throwable {\n    DateTime dateTime0 = new DateTime(498L);\n    DateTime dateTime1 = dateTime0.minusDays(1);\n    DateTime dateTime2 = dateTime1.withEarlierOffsetAtOverlap();\n    GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) dateTime2, 1);\n    DateTimeZone dateTimeZone0 = gJChronology0.getZone();\n    dateTimeZone0.hashCode();\n}",
    "testName" : "test3636"
  },
  "test4242" : {
    "methodSignature" : "public boolean isLocalDateTimeGap(LocalDateTime localDateTime)",
    "methodName" : "isLocalDateTimeGap",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4242() throws Throwable {\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) fixedDateTimeZone0);\n    LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);\n    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(lenientChronology0, fixedDateTimeZone0);\n    DateTimeZone dateTimeZone0 = zonedChronology0.getZone();\n    LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);\n    LocalDateTime localDateTime1 = localDateTime0.withMonthOfYear(1);\n    dateTimeZone0.isLocalDateTimeGap(localDateTime1);\n}",
    "testName" : "test4242"
  },
  "test3030" : {
    "methodSignature" : "public final String getName(long instant)",
    "methodName" : "getName",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3030() throws Throwable {\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();\n    dateTimeZone0.UTC.adjustOffset(1, true);\n    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis((-216));\n    Locale locale0 = Locale.CANADA;\n    dateTimeZone0.getName(0L, locale0);\n    Locale locale1 = Locale.FRANCE;\n    dateTimeZone0.getName(0L, locale1);\n    dateTimeZone0.convertLocalToUTC((-1107L), true);\n    TimeZone timeZone0 = TimeZone.getTimeZone(\"\");\n    dateTimeZone0.UTC.toTimeZone();\n    DateTimeZone dateTimeZone2 = DateTimeZone.forTimeZone(timeZone0);\n    LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone1);\n    dateTimeZone2.UTC.isLocalDateTimeGap(localDateTime0);\n    DateTimeZone.getAvailableIDs();\n    dateTimeZone0.getShortName(0L);\n    dateTimeZone2.previousTransition(0L);\n    DateTimeZone dateTimeZone3 = DateTimeZone.forOffsetMillis((-1858));\n    dateTimeZone3.UTC.getOffset((long) 1);\n    UTCProvider uTCProvider0 = new UTCProvider();\n    DateTimeZone.setProvider(uTCProvider0);\n    dateTimeZone3.nextTransition(1L);\n    DateTimeZone.getProvider();\n    dateTimeZone2.getNameKey(1L);\n    dateTimeZone0.isLocalDateTimeGap(localDateTime0);\n    dateTimeZone1.getOffsetFromLocal(0L);\n    DateTimeZone dateTimeZone4 = DateTimeZone.forTimeZone(timeZone0);\n    dateTimeZone4.getName((long) (-1858));\n}",
    "testName" : "test3030"
  },
  "test5252" : {
    "methodSignature" : "public static DateTimeZone forOffsetHours(int hoursOffset) throws IllegalArgumentException",
    "methodName" : "forOffsetHours",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5252() throws Throwable {\n    NameProvider nameProvider0 = null;\n    DateTimeZone.setNameProvider((NameProvider) null);\n    int int0 = 1139;\n    DateTimeZone.forOffsetHours(1139);\n}",
    "testName" : "test5252"
  },
  "test2020" : {
    "methodSignature" : "public static NameProvider getNameProvider()",
    "methodName" : "getNameProvider",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2020() throws Throwable {\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    fixedDateTimeZone0.UTC.getStandardOffset((-1L));\n    fixedDateTimeZone0.UTC.toTimeZone();\n    Locale locale0 = Locale.CHINESE;\n    fixedDateTimeZone0.getName(2075L, locale0);\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    DateTimeUtils.setCurrentMillisFixed(13L);\n    dateTimeZone0.UTC.nextTransition(0);\n    fixedDateTimeZone0.convertLocalToUTC((long) 0, false);\n    DateTimeZone.getNameProvider();\n}",
    "testName" : "test2020"
  },
  "test4040" : {
    "methodSignature" : "public final int getOffset(ReadableInstant instant)",
    "methodName" : "getOffset",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4040() throws Throwable {\n    DateTimeZone.getAvailableIDs();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1000);\n    GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);\n    DateMidnight dateMidnight0 = new DateMidnight((Chronology) gJChronology0);\n    Duration duration0 = Duration.parse((String) null);\n    Duration duration1 = duration0.withDurationAdded(2629800000L, 1000);\n    PeriodType periodType0 = PeriodType.standard();\n    PeriodType periodType1 = periodType0.withMinutesRemoved();\n    Period period0 = duration1.toPeriod(periodType1, (Chronology) gJChronology0);\n    dateMidnight0.plus((ReadablePeriod) period0);\n    dateTimeZone0.getOffset((ReadableInstant) dateMidnight0);\n}",
    "testName" : "test4040"
  },
  "test5050" : {
    "methodSignature" : "public long nextTransition(long instant)",
    "methodName" : "nextTransition",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5050() throws Throwable {\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    fixedDateTimeZone0.UTC.getOffsetFromLocal(9223372036854775807L);\n    fixedDateTimeZone0.UTC.getShortName(9223372036854775807L, (Locale) null);\n    fixedDateTimeZone0.isStandardOffset(31083663600000L);\n    fixedDateTimeZone0.getOffset(10000000000000L);\n    fixedDateTimeZone0.getID();\n    fixedDateTimeZone0.nextTransition(245L);\n}",
    "testName" : "test5050"
  },
  "test022" : {
    "methodSignature" : "public static DateTimeZone getDefault()",
    "methodName" : "getDefault",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022() throws Throwable {\n    DefaultNameProvider defaultNameProvider0 = new DefaultNameProvider();\n    Locale locale0 = Locale.US;\n    defaultNameProvider0.getName(locale0, \"org.joda.time.field.ScaledDurationField\", \"org.joda.time.field.ScaledDurationField\");\n    DateTimeZone.setNameProvider(defaultNameProvider0);\n    int int0 = 19;\n    int int1 = 60000;\n    DateTimeZone.forOffsetHoursMinutes(19, 60000);\n    DateTimeZone.getDefault();\n}",
    "testName" : "test022"
  },
  "test066" : {
    "methodSignature" : "public static DateTimeZone forOffsetHours(int hoursOffset) throws IllegalArgumentException",
    "methodName" : "forOffsetHours",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066() throws Throwable {\n    int int0 = (-3740);\n    DateTimeZone.forOffsetHours((-3740));\n}",
    "testName" : "test066"
  },
  "test1818" : {
    "methodSignature" : "public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException",
    "methodName" : "forOffsetHoursMinutes",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1818() throws Throwable {\n    int int0 = 24;\n    int int1 = 1000;\n    DateTimeZone.forOffsetHoursMinutes(24, 1000);\n}",
    "testName" : "test1818"
  },
  "test1313" : {
    "methodSignature" : "public long getMillisKeepLocal(DateTimeZone newZone, long oldInstant)",
    "methodName" : "getMillisKeepLocal",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1313() throws Throwable {\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();\n    dateTimeZone0.isFixed();\n    dateTimeZone0.getID();\n    dateTimeZone0.previousTransition(1);\n    dateTimeZone0.convertLocalToUTC(2153L, true);\n    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(1);\n    dateTimeZone0.getMillisKeepLocal(dateTimeZone1, 2153L);\n}",
    "testName" : "test1313"
  },
  "test5555" : {
    "methodSignature" : "public DefaultNameProvider()",
    "methodName" : "DefaultNameProvider",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5555() throws Throwable {\n    int int0 = 204;\n    DateTimeZone.forOffsetHoursMinutes(0, 204);\n    DefaultNameProvider defaultNameProvider0 = null;\n    defaultNameProvider0 = new DefaultNameProvider();\n}",
    "testName" : "test5555"
  },
  "test2121" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2121() throws Throwable {\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();\n    DateTimeZone.forTimeZone((TimeZone) null);\n    dateTimeZone0.getStandardOffset((-257L));\n    dateTimeZone0.convertLocalToUTC((-1682L), true, 1658L);\n    DateTimeZone.setDefault((DateTimeZone) null);\n    long long0 = 0L;\n    String string0 = \"S6C>.6qu=KV\";\n    Locale locale0 = Locale.forLanguageTag(string0);\n    dateTimeZone0.getName(long0, locale0);\n    dateTimeZone0.toString();\n}",
    "testName" : "test2121"
  },
  "test1111" : {
    "methodSignature" : "public final String getShortName(long instant)",
    "methodName" : "getShortName",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1111() throws Throwable {\n    TimeZone timeZone0 = TimeZone.getDefault();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);\n    DateMidnight dateMidnight0 = DateMidnight.now();\n    dateTimeZone0.getOffset((ReadableInstant) dateMidnight0);\n    dateTimeZone0.getNameKey(408L);\n    dateTimeZone0.UTC.previousTransition(366L);\n    dateTimeZone0.toString();\n    dateTimeZone0.getStandardOffset(408L);\n    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(0);\n    DateTimeZone.getAvailableIDs();\n    dateTimeZone1.getShortName(0L);\n}",
    "testName" : "test1111"
  },
  "test4343" : {
    "methodSignature" : "public boolean isLocalDateTimeGap(LocalDateTime localDateTime)",
    "methodName" : "isLocalDateTimeGap",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4343() throws Throwable {\n    Provider provider0 = DateTimeZone.getProvider();\n    DateTimeZone.setProvider(provider0);\n    ISOChronology iSOChronology0 = ISOChronology.getInstance();\n    Chronology chronology0 = iSOChronology0.withUTC();\n    GJChronology gJChronology0 = GJChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = gJChronology0.getZone();\n    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(chronology0, dateTimeZone0);\n    DateTimeZone dateTimeZone1 = zonedChronology0.getZone();\n    LocalTime localTime0 = LocalTime.now((Chronology) iSOChronology0);\n    zonedChronology0.set(localTime0, 605L);\n    dateTimeZone1.getName(605L);\n    dateTimeZone0.getMillisKeepLocal(dateTimeZone1, 0L);\n    DateTimeZone.forOffsetMillis((-970));\n    dateTimeZone0.convertLocalToUTC(605L, true);\n    dateTimeZone0.isLocalDateTimeGap((LocalDateTime) null);\n}",
    "testName" : "test4343"
  },
  "test3333" : {
    "methodSignature" : "public long convertLocalToUTC(long instantLocal, boolean strict)",
    "methodName" : "convertLocalToUTC",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3333() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 50);\n    dateTimeZone0.UTC.previousTransition((-1425L));\n    int int0 = dateTimeZone0.UTC.getOffset(0L);\n    dateTimeZone0.getStandardOffset(1420L);\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2082, \"a=fT}2ru86SS1=`2Po\", 578, 2082, 0, 1212, 6600000, 1212, 1, 2082, 0);\n    OffsetTime offsetTime0 = MockOffsetTime.now();\n    ZoneOffset zoneOffset0 = ZoneOffset.from(offsetTime0);\n    simpleTimeZone0.toZoneId();\n    TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(simpleTimeZone0);\n    long long0 = (-1L);\n    dateTimeZone1.convertUTCToLocal(long0);\n    boolean boolean0 = true;\n    dateTimeZone1.convertLocalToUTC((long) int0, boolean0);\n}",
    "testName" : "test3333"
  },
  "test011" : {
    "methodSignature" : "public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException",
    "methodName" : "forOffsetHoursMinutes",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011() throws Throwable {\n    int int0 = 2649;\n    DateTimeZone.forOffsetHoursMinutes(2649, 2649);\n}",
    "testName" : "test011"
  },
  "test055" : {
    "methodSignature" : "public static final void setCurrentMillisProvider(MillisProvider millisProvider) throws SecurityException",
    "methodName" : "setCurrentMillisProvider",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055() throws Throwable {\n    DateTimeZone.forOffsetMillis(0);\n    DateTimeZone.forID(\"k`\");\n    DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());\n    DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);\n}",
    "testName" : "test055"
  },
  "test099" : {
    "methodSignature" : "public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException",
    "methodName" : "forOffsetHoursMinutes",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099() throws Throwable {\n    int int0 = 578;\n    DateTimeZone.forOffsetHoursMinutes(578, 578);\n}",
    "testName" : "test099"
  },
  "test2727" : {
    "methodSignature" : "public abstract int getOffset(long instant)",
    "methodName" : "getOffset",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2727() throws Throwable {\n    DateTimeZone.setProvider((Provider) null);\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    dateTimeZone0.getOffset((-351L));\n}",
    "testName" : "test2727"
  },
  "test1717" : {
    "methodSignature" : "public static DateTimeZone getDefault()",
    "methodName" : "getDefault",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1717() throws Throwable {\n    NameProvider nameProvider0 = DateTimeZone.getNameProvider();\n    DateTimeZone.setNameProvider(nameProvider0);\n    DateTimeZone.getDefault();\n}",
    "testName" : "test1717"
  },
  "test4949" : {
    "methodSignature" : "public long adjustOffset(long instant, boolean earlierOrLater)",
    "methodName" : "adjustOffset",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4949() throws Throwable {\n    UTCProvider uTCProvider0 = new UTCProvider();\n    DateTimeZone dateTimeZone0 = uTCProvider0.getZone(\"UTC\");\n    dateTimeZone0.nextTransition((-175L));\n    dateTimeZone0.adjustOffset(3386L, true);\n}",
    "testName" : "test4949"
  },
  "test3939" : {
    "methodSignature" : "public long getMillisKeepLocal(DateTimeZone newZone, long oldInstant)",
    "methodName" : "getMillisKeepLocal",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3939() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    NameProvider nameProvider0 = DateTimeZone.getNameProvider();\n    DateTimeZone.setNameProvider(nameProvider0);\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    dateTimeZone0.getMillisKeepLocal(fixedDateTimeZone0, 1029L);\n    DefaultNameProvider defaultNameProvider0 = new DefaultNameProvider();\n    fixedDateTimeZone0.equals(defaultNameProvider0);\n    long long0 = (-1422L);\n    String string0 = \"Ve!CDbg19FKCi\";\n    DateTimeZone.forID(\"Ve!CDbg19FKCi\");\n    dateTimeZone0.getMillisKeepLocal(fixedDateTimeZone0, long0);\n}",
    "testName" : "test3939"
  },
  "test2525" : {
    "methodSignature" : "public static DateTimeZone forTimeZone(TimeZone zone)",
    "methodName" : "forTimeZone",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2525() throws Throwable {\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();\n    dateTimeZone0.convertUTCToLocal(0L);\n    Hours hours0 = Hours.SIX;\n    PeriodType periodType0 = hours0.getPeriodType();\n    Period period0 = new Period(0L, periodType0, (Chronology) buddhistChronology0);\n    buddhistChronology0.get((ReadablePeriod) period0, (-1L));\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, \"/y<.b,\", 1, 1, 1, 0, 0, 1, 1, 1915, 1);\n    DateTimeZone.forTimeZone(simpleTimeZone0);\n}",
    "testName" : "test2525"
  },
  "test1515" : {
    "methodSignature" : "public final String getName(long instant)",
    "methodName" : "getName",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1515() throws Throwable {\n    DateTimeZone.getAvailableIDs();\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    fixedDateTimeZone0.getName(1064L);\n}",
    "testName" : "test1515"
  },
  "test4747" : {
    "methodSignature" : "public boolean isStandardOffset(long instant)",
    "methodName" : "isStandardOffset",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4747() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);\n    dateTimeZone0.isStandardOffset(30L);\n}",
    "testName" : "test4747"
  },
  "test3737" : {
    "methodSignature" : "public long getMillisKeepLocal(DateTimeZone newZone, long oldInstant)",
    "methodName" : "getMillisKeepLocal",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3737() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(10, 10);\n    dateTimeZone0.hashCode();\n    DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());\n    doReturn(0L).when(dateTimeUtils_MillisProvider0).getMillis();\n    DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);\n    dateTimeZone0.getOffsetFromLocal(10);\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();\n    DateMidnight dateMidnight0 = DateMidnight.now((Chronology) buddhistChronology0);\n    DateMidnight dateMidnight1 = dateMidnight0.plusWeeks(265);\n    dateMidnight1.getMillisOfSecond();\n    dateTimeZone0.getOffset((ReadableInstant) dateMidnight1);\n    dateTimeZone0.adjustOffset(21600000L, true);\n    dateTimeZone0.getOffset(21600000L);\n    dateTimeZone0.convertLocalToUTC((long) 10, true);\n    DateTimeZone dateTimeZone1 = DateTimeZone.forID(\"America/Denver\");\n    dateTimeZone0.toString();\n    long long0 = 10800000L;\n    dateTimeZone1.convertLocalToUTC(10800000L, true, 10800000L);\n    dateTimeZone1.getStandardOffset(10);\n    dateTimeZone0.UTC.previousTransition(36000000L);\n    int int0 = (-167);\n    DateTimeZone.forOffsetHoursMinutes(1, (-167));\n    dateTimeZone1.UTC.getShortName(long0);\n    DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider1 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());\n    DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider1);\n    long long1 = (-824L);\n    dateTimeZone1.getMillisKeepLocal(dateTimeZone0, long1);\n}",
    "testName" : "test3737"
  },
  "test5353" : {
    "methodSignature" : "public static void setDefault(DateTimeZone zone) throws SecurityException",
    "methodName" : "setDefault",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5353() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    DateTimeUtils.setCurrentMillisFixed((-845L));\n    dateTimeZone0.UTC.getStandardOffset(0L);\n    dateTimeZone0.UTC.previousTransition(0L);\n    JapaneseDate japaneseDate0 = MockJapaneseDate.now();\n    dateTimeZone0.getShortName((-845L));\n    dateTimeZone0.equals(japaneseDate0);\n    dateTimeZone0.UTC.previousTransition((-845L));\n    DateTimeZone.getDefault();\n    DateTimeUtils.setCurrentMillisFixed((-2720L));\n    dateTimeZone0.getNameKey((-128L));\n    dateTimeZone0.getOffsetFromLocal(1687L);\n    dateTimeZone0.convertLocalToUTC((long) (-28800000), false);\n    dateTimeZone0.convertUTCToLocal((-28800000));\n    Locale locale0 = Locale.UK;\n    dateTimeZone0.getName((-2720L), locale0);\n    DateTimeZone.setDefault(dateTimeZone0);\n}",
    "testName" : "test5353"
  },
  "test4141" : {
    "methodSignature" : "public boolean isLocalDateTimeGap(LocalDateTime localDateTime)",
    "methodName" : "isLocalDateTimeGap",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4141() throws Throwable {\n    int int0 = 1;\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);\n    Interval interval0 = new Interval((-272L), 10800000L);\n    Duration duration0 = interval0.toDuration();\n    dateTimeZone0.getNameKey((-352L));\n    interval0.withEndMillis(1);\n    DateTime dateTime0 = interval0.getEnd();\n    dateTime0.withDayOfYear(1);\n    int int1 = dateTime0.getDayOfMonth();\n    interval0.withDurationBeforeEnd(duration0);\n    dateTime0.withZoneRetainFields(dateTimeZone0);\n    dateTimeZone0.getOffset((ReadableInstant) dateTime0);\n    DateTimeZone.getAvailableIDs();\n    dateTimeZone0.convertUTCToLocal((-352L));\n    dateTimeZone0.isStandardOffset((-1611L));\n    dateTimeZone0.previousTransition(0L);\n    dateTimeZone0.isFixed();\n    DateTimeZone.getDefault();\n    LocalDateTime localDateTime0 = LocalDateTime.fromDateFields((Date) null);\n    LocalDateTime localDateTime1 = localDateTime0.withYear(int1);\n    LocalDateTime localDateTime2 = localDateTime1.minusSeconds(int0);\n    int int2 = 4;\n    LocalDateTime localDateTime3 = localDateTime2.minusMillis(int2);\n    LocalDateTime localDateTime4 = localDateTime3.plusSeconds(int0);\n    dateTimeZone0.isLocalDateTimeGap(localDateTime4);\n}",
    "testName" : "test4141"
  },
  "test5151" : {
    "methodSignature" : "public boolean isLocalDateTimeGap(LocalDateTime localDateTime)",
    "methodName" : "isLocalDateTimeGap",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5151() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);\n    DateTimeZone.getDefault();\n    dateTimeZone0.nextTransition(31557600000L);\n    dateTimeZone0.hashCode();\n    DateTimeZone dateTimeZone1 = DateTimeZone.getDefault();\n    DateTimeZone dateTimeZone2 = DateTimeZone.forTimeZone((TimeZone) null);\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    DateMidnight dateMidnight0 = new DateMidnight(0L, (Chronology) gJChronology0);\n    DateMidnight dateMidnight1 = dateMidnight0.withZoneRetainFields(dateTimeZone2);\n    dateTimeZone1.getOffset((ReadableInstant) dateMidnight1);\n    dateTimeZone2.isLocalDateTimeGap((LocalDateTime) null);\n}",
    "testName" : "test5151"
  },
  "test000" : {
    "methodSignature" : "public boolean isStandardOffset(long instant)",
    "methodName" : "isStandardOffset",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.forOffsetMillis(86399999);\n    Locale locale0 = Locale.GERMAN;\n    fixedDateTimeZone0.UTC.getName(1202L, locale0);\n    ((DateTimeZone) fixedDateTimeZone0).writeReplace();\n    dateTimeZone0.getID();\n    fixedDateTimeZone0.previousTransition((-2049L));\n    DateTimeZone.getProvider();\n    fixedDateTimeZone0.isStandardOffset((-2049L));\n}",
    "testName" : "test000"
  },
  "test088" : {
    "methodSignature" : "public static DateTimeZone getDefault()",
    "methodName" : "getDefault",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forID(\"UTC\");\n    DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());\n    DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);\n    dateTimeZone0.convertLocalToUTC(0L, false, 44L);\n    dateTimeZone0.getID();\n    DateTimeZone dateTimeZone1 = DateTimeZone.getDefault();\n    DateTimeZone dateTimeZone2 = DateTimeZone.forOffsetMillis(834);\n    Locale locale0 = Locale.PRC;\n    dateTimeZone2.UTC.getShortName(44L, locale0);\n    dateTimeZone1.convertLocalToUTC(0L, false);\n    DateTimeZone.getProvider();\n    dateTimeZone0.previousTransition((-2229L));\n    DateTimeZone.setDefault(dateTimeZone1);\n    dateTimeZone1.convertLocalToUTC(0L, false, 0L);\n    dateTimeZone1.toTimeZone();\n    dateTimeZone0.toTimeZone();\n    DateTimeZone.getDefault();\n}",
    "testName" : "test088"
  },
  "test2929" : {
    "methodSignature" : "public boolean isStandardOffset(long instant)",
    "methodName" : "isStandardOffset",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2929() throws Throwable {\n    DateTimeZone.getAvailableIDs();\n    UTCProvider uTCProvider0 = new UTCProvider();\n    uTCProvider0.getAvailableIDs();\n    uTCProvider0.getAvailableIDs();\n    DateTimeZone.setProvider(uTCProvider0);\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2253));\n    long long0 = dateTimeZone0.adjustOffset(0L, false);\n    DateTimeZone.getProvider();\n    DateTimeZone.forOffsetHoursMinutes((-2253), (-2253));\n    int int0 = 2000;\n    DateTimeZone.forOffsetMillis(int0);\n    dateTimeZone0.isStandardOffset(long0);\n}",
    "testName" : "test2929"
  },
  "test1919" : {
    "methodSignature" : "public abstract int getStandardOffset(long instant)",
    "methodName" : "getStandardOffset",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1919() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    DateTimeUtils.setCurrentMillisSystem();\n    DateTimeZone.setDefault(dateTimeZone0);\n    dateTimeZone0.getNameKey(2660L);\n    Locale locale0 = Locale.SIMPLIFIED_CHINESE;\n    Locale locale1 = locale0.stripExtensions();\n    dateTimeZone0.UTC.getShortName(2660L, locale1);\n    dateTimeZone0.getName((-4462L));\n    dateTimeZone0.getName(10800000L);\n    dateTimeZone0.getShortName((-4462L));\n    dateTimeZone0.isFixed();\n    dateTimeZone0.isStandardOffset(2660L);\n    dateTimeZone0.getStandardOffset(2660L);\n}",
    "testName" : "test1919"
  }
}