org.joda.time.base.BaseSingleFieldPeriod,@Test(timeout = 4000)
public void test002() throws Throwable {
    Years years0 = Years.MIN_VALUE;
    Years years1 = Years.TWO;
    boolean boolean0 = years0.equals(years1);
    years1.getYears();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.base.BaseSingleFieldPeriod,@Test(timeout = 4000)
public void test035() throws Throwable {
    IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
    LocalTime localTime0 = new LocalTime(240L, (Chronology) islamicChronology0);
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
    DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
    LocalTime localTime1 = localTime0.withFieldAdded(durationFieldType0, 1);
    Days days0 = Days.daysBetween((ReadablePartial) localTime1, (ReadablePartial) localTime0);
    days0.getDays();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.base.BaseSingleFieldPeriod,@Test(timeout = 4000)
public void test046() throws Throwable {
    YearMonth yearMonth0 = YearMonth.now();
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
    StrictChronology strictChronology0 = StrictChronology.getInstance(ethiopicChronology0);
    LocalDateTime localDateTime0 = new LocalDateTime((Chronology) strictChronology0);
    Hours.hoursBetween((ReadablePartial) yearMonth0, (ReadablePartial) localDateTime0);
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.base.BaseSingleFieldPeriod,@Test(timeout = 4000)
public void test1012() throws Throwable {
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    LocalTime localTime0 = LocalTime.now((DateTimeZone) fixedDateTimeZone0);
    Years years0 = Years.yearsBetween((ReadablePartial) localTime0, (ReadablePartial) localTime0);
    PeriodType periodType0 = years0.getPeriodType();
    periodType0.getName();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.base.BaseSingleFieldPeriod,@Test(timeout = 4000)
public void test1113() throws Throwable {
    Minutes minutes0 = Minutes.THREE;
    DurationFieldType durationFieldType0 = minutes0.getFieldType();
    durationFieldType0.getName();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.base.BaseSingleFieldPeriod,@Test(timeout = 4000)
public void test2123() throws Throwable {
    Hours hours0 = Hours.FIVE;
    Hours hours1 = Hours.MIN_VALUE;
    int int0 = hours1.compareTo((BaseSingleFieldPeriod) hours0);
    hours0.getHours();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.base.BaseSingleFieldPeriod,@Test(timeout = 4000)
public void test2225() throws Throwable {
    Months months0 = Months.TWELVE;
    Months months1 = months0.dividedBy(667);
    int int0 = months0.compareTo((BaseSingleFieldPeriod) months1);
    months1.getMonths();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.base.BaseSingleFieldPeriod,@Test(timeout = 4000)
public void test2428() throws Throwable {
    LocalTime localTime0 = LocalTime.MIDNIGHT;
    Days days0 = Days.daysBetween((ReadablePartial) localTime0, (ReadablePartial) localTime0);
    int int0 = days0.compareTo((BaseSingleFieldPeriod) days0);
    days0.getDays();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.base.BaseSingleFieldPeriod,@Test(timeout = 4000)
public void test2732() throws Throwable {
    Period period0 = Period.hours(0);
    Weeks weeks0 = period0.toStandardWeeks();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
    ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(iSOChronology0, dateTimeZone0);
    Period period1 = new Period(weeks0, zonedChronology0);
    boolean boolean0 = weeks0.equals(period1);
    weeks0.getWeeks();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.base.BaseSingleFieldPeriod,@Test(timeout = 4000)
public void test2835() throws Throwable {
    Years years0 = Years.THREE;
    Years years1 = Years.TWO;
    boolean boolean0 = years0.equals(years1);
    years1.getYears();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.base.BaseSingleFieldPeriod,@Test(timeout = 4000)
public void test3038() throws Throwable {
    Days days0 = Days.FOUR;
    Seconds seconds0 = days0.toStandardSeconds();
    DurationFieldType durationFieldType0 = DurationFieldType.centuries();
    boolean boolean0 = seconds0.isSupported(durationFieldType0);
    seconds0.getSeconds();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.base.BaseSingleFieldPeriod,@Test(timeout = 4000)
public void test3040() throws Throwable {
    Days days0 = Days.FOUR;
    Seconds seconds0 = days0.toStandardSeconds();
    DurationFieldType durationFieldType0 = DurationFieldType.centuries();
    boolean boolean0 = seconds0.isSupported(durationFieldType0);
    days0.getDays();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.base.BaseSingleFieldPeriod,@Test(timeout = 4000)
public void test3545() throws Throwable {
    LocalTime localTime0 = new LocalTime(0, 0, 0);
    LocalDateTime localDateTime0 = new LocalDateTime((long) 0, (Chronology) null);
    Weeks.weeksBetween((ReadablePartial) localTime0, (ReadablePartial) localDateTime0);
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.base.BaseSingleFieldPeriod,@Test(timeout = 4000)
public void test3646() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
    LocalTime localTime0 = new LocalTime((-880L), dateTimeZone0);
    MonthDay monthDay0 = MonthDay.now();
    Days.daysBetween((ReadablePartial) localTime0, (ReadablePartial) monthDay0);
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.base.BaseSingleFieldPeriod,@Test(timeout = 4000)
public void test3949() throws Throwable {
    Seconds.secondsBetween((ReadablePartial) null, (ReadablePartial) null);
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.base.BaseSingleFieldPeriod,@Test(timeout = 4000)
public void test4151() throws Throwable {
    DateMidnight dateMidnight0 = new DateMidnight((DateTimeZone) null);
    Instant instant0 = dateMidnight0.toInstant();
    Seconds.secondsBetween((ReadableInstant) instant0, (ReadableInstant) null);
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.base.BaseSingleFieldPeriod,@Test(timeout = 4000)
public void test4353() throws Throwable {
    Years years0 = Years.ONE;
    years0.toMutablePeriod();
    years0.getYears();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.base.BaseSingleFieldPeriod,@Test(timeout = 4000)
public void test4456() throws Throwable {
    Years years0 = Years.ONE;
    years0.toPeriod();
    years0.getYears();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.base.BaseSingleFieldPeriod,@Test(timeout = 4000)
public void test4658() throws Throwable {
    Months months0 = Months.TWO;
    months0.hashCode();
    months0.getMonths();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
