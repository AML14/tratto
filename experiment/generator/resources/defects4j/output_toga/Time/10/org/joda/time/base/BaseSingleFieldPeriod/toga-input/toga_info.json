{
  "test2225" : {
    "methodSignature" : "public int getMonths()",
    "methodName" : "getMonths",
    "className" : "org.joda.time.base.BaseSingleFieldPeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2225() throws Throwable {\n    Months months0 = Months.TWELVE;\n    Months months1 = months0.dividedBy(667);\n    int int0 = months0.compareTo((BaseSingleFieldPeriod) months1);\n    months1.getMonths();\n}",
    "testName" : "test2225"
  },
  "test3039" : {
    "methodSignature" : "public boolean isSupported(DurationFieldType type)",
    "methodName" : "isSupported",
    "className" : "org.joda.time.base.BaseSingleFieldPeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3039() throws Throwable {\n    Days days0 = Days.FOUR;\n    Seconds seconds0 = days0.toStandardSeconds();\n    DurationFieldType durationFieldType0 = DurationFieldType.centuries();\n    boolean boolean0 = seconds0.isSupported(durationFieldType0);\n}",
    "testName" : "test3039"
  },
  "test3038" : {
    "methodSignature" : "public int getSeconds()",
    "methodName" : "getSeconds",
    "className" : "org.joda.time.base.BaseSingleFieldPeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3038() throws Throwable {\n    Days days0 = Days.FOUR;\n    Seconds seconds0 = days0.toStandardSeconds();\n    DurationFieldType durationFieldType0 = DurationFieldType.centuries();\n    boolean boolean0 = seconds0.isSupported(durationFieldType0);\n    seconds0.getSeconds();\n}",
    "testName" : "test3038"
  },
  "test1214" : {
    "methodSignature" : "public int get(DurationFieldType type)",
    "methodName" : "get",
    "className" : "org.joda.time.base.BaseSingleFieldPeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1214() throws Throwable {\n    Months months0 = Months.MIN_VALUE;\n    DurationFieldType durationFieldType0 = DurationFieldType.months();\n    int int0 = months0.get(durationFieldType0);\n}",
    "testName" : "test1214"
  },
  "test2226" : {
    "methodSignature" : "public int compareTo(BaseSingleFieldPeriod other)",
    "methodName" : "compareTo",
    "className" : "org.joda.time.base.BaseSingleFieldPeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2226() throws Throwable {\n    Months months0 = Months.TWELVE;\n    Months months1 = months0.dividedBy(667);\n    int int0 = months0.compareTo((BaseSingleFieldPeriod) months1);\n}",
    "testName" : "test2226"
  },
  "test2022" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "org.joda.time.base.BaseSingleFieldPeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2022() throws Throwable {\n    Months months0 = Months.TWELVE;\n    int int0 = months0.size();\n}",
    "testName" : "test2022"
  },
  "test1012" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.base.BaseSingleFieldPeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1012() throws Throwable {\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    LocalTime localTime0 = LocalTime.now((DateTimeZone) fixedDateTimeZone0);\n    Years years0 = Years.yearsBetween((ReadablePartial) localTime0, (ReadablePartial) localTime0);\n    PeriodType periodType0 = years0.getPeriodType();\n    periodType0.getName();\n}",
    "testName" : "test1012"
  },
  "test1618" : {
    "methodSignature" : "protected static int standardPeriodIn(ReadablePeriod period, long millisPerUnit)",
    "methodName" : "standardPeriodIn",
    "className" : "org.joda.time.base.BaseSingleFieldPeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1618() throws Throwable {\n    Hours hours0 = Hours.FIVE;\n    BaseSingleFieldPeriod.standardPeriodIn(hours0, 0L);\n}",
    "testName" : "test1618"
  },
  "test1416" : {
    "methodSignature" : "protected static int between(ReadableInstant start, ReadableInstant end, DurationFieldType field)",
    "methodName" : "between",
    "className" : "org.joda.time.base.BaseSingleFieldPeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1416() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);\n    DateTime dateTime0 = DateTime.now(dateTimeZone0);\n    DateTime dateTime1 = dateTime0.withYear(1);\n    DurationFieldType durationFieldType0 = DurationFieldType.halfdays();\n    int int0 = BaseSingleFieldPeriod.between(dateTime1, dateTime0, durationFieldType0);\n}",
    "testName" : "test1416"
  },
  "test2429" : {
    "methodSignature" : "public int compareTo(BaseSingleFieldPeriod other)",
    "methodName" : "compareTo",
    "className" : "org.joda.time.base.BaseSingleFieldPeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2429() throws Throwable {\n    LocalTime localTime0 = LocalTime.MIDNIGHT;\n    Days days0 = Days.daysBetween((ReadablePartial) localTime0, (ReadablePartial) localTime0);\n    int int0 = days0.compareTo((BaseSingleFieldPeriod) days0);\n}",
    "testName" : "test2429"
  },
  "test2428" : {
    "methodSignature" : "public int getDays()",
    "methodName" : "getDays",
    "className" : "org.joda.time.base.BaseSingleFieldPeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2428() throws Throwable {\n    LocalTime localTime0 = LocalTime.MIDNIGHT;\n    Days days0 = Days.daysBetween((ReadablePartial) localTime0, (ReadablePartial) localTime0);\n    int int0 = days0.compareTo((BaseSingleFieldPeriod) days0);\n    days0.getDays();\n}",
    "testName" : "test2428"
  },
  "test024" : {
    "methodSignature" : "public DurationFieldType getFieldType(int index)",
    "methodName" : "getFieldType",
    "className" : "org.joda.time.base.BaseSingleFieldPeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test024() throws Throwable {\n    Days days0 = Days.standardDaysIn((ReadablePeriod) null);\n    days0.getFieldType((-225));\n}",
    "testName" : "test024"
  },
  "test068" : {
    "methodSignature" : "protected static int standardPeriodIn(ReadablePeriod period, long millisPerUnit)",
    "methodName" : "standardPeriodIn",
    "className" : "org.joda.time.base.BaseSingleFieldPeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test068() throws Throwable {\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();\n    Interval interval0 = new Interval(2224L, 2224L, ethiopicChronology0);\n    Duration duration0 = interval0.toDuration();\n    Hours hours0 = duration0.toStandardHours();\n    Minutes minutes0 = hours0.toStandardMinutes();\n    int int0 = BaseSingleFieldPeriod.standardPeriodIn(minutes0, 1);\n}",
    "testName" : "test068"
  },
  "test2631" : {
    "methodSignature" : "public boolean equals(Object period)",
    "methodName" : "equals",
    "className" : "org.joda.time.base.BaseSingleFieldPeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2631() throws Throwable {\n    Years years0 = Years.ONE;\n    boolean boolean0 = years0.equals((Object) null);\n}",
    "testName" : "test2631"
  },
  "test4658" : {
    "methodSignature" : "public int getMonths()",
    "methodName" : "getMonths",
    "className" : "org.joda.time.base.BaseSingleFieldPeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4658() throws Throwable {\n    Months months0 = Months.TWO;\n    months0.hashCode();\n    months0.getMonths();\n}",
    "testName" : "test4658"
  },
  "test3646" : {
    "methodSignature" : "public static Days daysBetween(ReadablePartial start, ReadablePartial end)",
    "methodName" : "daysBetween",
    "className" : "org.joda.time.base.BaseSingleFieldPeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3646() throws Throwable {\n    TimeZone timeZone0 = TimeZone.getTimeZone(\"\");\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);\n    LocalTime localTime0 = new LocalTime((-880L), dateTimeZone0);\n    MonthDay monthDay0 = MonthDay.now();\n    Days.daysBetween((ReadablePartial) localTime0, (ReadablePartial) monthDay0);\n}",
    "testName" : "test3646"
  },
  "test1820" : {
    "methodSignature" : "public int compareTo(BaseSingleFieldPeriod other)",
    "methodName" : "compareTo",
    "className" : "org.joda.time.base.BaseSingleFieldPeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1820() throws Throwable {\n    Weeks weeks0 = Weeks.weeks(0);\n    weeks0.compareTo((BaseSingleFieldPeriod) null);\n}",
    "testName" : "test1820"
  },
  "test4455" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "org.joda.time.base.BaseSingleFieldPeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4455() throws Throwable {\n    Years years0 = Years.ONE;\n    years0.toPeriod();\n    years0.size();\n}",
    "testName" : "test4455"
  },
  "test4456" : {
    "methodSignature" : "public int getYears()",
    "methodName" : "getYears",
    "className" : "org.joda.time.base.BaseSingleFieldPeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4456() throws Throwable {\n    Years years0 = Years.ONE;\n    years0.toPeriod();\n    years0.getYears();\n}",
    "testName" : "test4456"
  },
  "test3444" : {
    "methodSignature" : "protected static int standardPeriodIn(ReadablePeriod period, long millisPerUnit)",
    "methodName" : "standardPeriodIn",
    "className" : "org.joda.time.base.BaseSingleFieldPeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3444() throws Throwable {\n    Years years0 = Years.years(4);\n    BaseSingleFieldPeriod.standardPeriodIn(years0, 4);\n}",
    "testName" : "test3444"
  },
  "test2834" : {
    "methodSignature" : "public boolean equals(Object period)",
    "methodName" : "equals",
    "className" : "org.joda.time.base.BaseSingleFieldPeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2834() throws Throwable {\n    Years years0 = Years.THREE;\n    Years years1 = Years.TWO;\n    boolean boolean0 = years0.equals(years1);\n    years1.equals((Object) years0);\n}",
    "testName" : "test2834"
  },
  "test0810" : {
    "methodSignature" : "public int getValue(int index)",
    "methodName" : "getValue",
    "className" : "org.joda.time.base.BaseSingleFieldPeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0810() throws Throwable {\n    Period period0 = new Period();\n    Weeks weeks0 = period0.toStandardWeeks();\n    int int0 = weeks0.getValue(0);\n}",
    "testName" : "test0810"
  },
  "test2836" : {
    "methodSignature" : "public boolean equals(Object period)",
    "methodName" : "equals",
    "className" : "org.joda.time.base.BaseSingleFieldPeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2836() throws Throwable {\n    Years years0 = Years.THREE;\n    Years years1 = Years.TWO;\n    boolean boolean0 = years0.equals(years1);\n}",
    "testName" : "test2836"
  },
  "test3848" : {
    "methodSignature" : "protected static int between(ReadablePartial start, ReadablePartial end, ReadablePeriod zeroInstance)",
    "methodName" : "between",
    "className" : "org.joda.time.base.BaseSingleFieldPeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3848() throws Throwable {\n    Seconds seconds0 = Seconds.ZERO;\n    LocalTime localTime0 = new LocalTime(0, 0, 0);\n    int int0 = BaseSingleFieldPeriod.between(localTime0, localTime0, seconds0);\n}",
    "testName" : "test3848"
  },
  "test2835" : {
    "methodSignature" : "public int getYears()",
    "methodName" : "getYears",
    "className" : "org.joda.time.base.BaseSingleFieldPeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2835() throws Throwable {\n    Years years0 = Years.THREE;\n    Years years1 = Years.TWO;\n    boolean boolean0 = years0.equals(years1);\n    years1.getYears();\n}",
    "testName" : "test2835"
  },
  "test013" : {
    "methodSignature" : "public int getValue(int index)",
    "methodName" : "getValue",
    "className" : "org.joda.time.base.BaseSingleFieldPeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test013() throws Throwable {\n    Minutes minutes0 = Minutes.ONE;\n    minutes0.getValue((-2693));\n}",
    "testName" : "test013"
  },
  "test057" : {
    "methodSignature" : "public boolean equals(Object period)",
    "methodName" : "equals",
    "className" : "org.joda.time.base.BaseSingleFieldPeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test057() throws Throwable {\n    Years years0 = Years.MAX_VALUE;\n    boolean boolean0 = years0.equals(years0);\n}",
    "testName" : "test057"
  },
  "test3242" : {
    "methodSignature" : "public int get(DurationFieldType type)",
    "methodName" : "get",
    "className" : "org.joda.time.base.BaseSingleFieldPeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3242() throws Throwable {\n    Minutes minutes0 = Minutes.parseMinutes(\"PT0S\");\n    Hours hours0 = Hours.SIX;\n    DurationFieldType durationFieldType0 = hours0.getFieldType(0);\n    int int0 = minutes0.get(durationFieldType0);\n}",
    "testName" : "test3242"
  },
  "test4252" : {
    "methodSignature" : "protected static int between(ReadableInstant start, ReadableInstant end, DurationFieldType field)",
    "methodName" : "between",
    "className" : "org.joda.time.base.BaseSingleFieldPeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4252() throws Throwable {\n    DurationFieldType durationFieldType0 = DurationFieldType.centuries();\n    BaseSingleFieldPeriod.between((ReadableInstant) null, (ReadableInstant) null, durationFieldType0);\n}",
    "testName" : "test4252"
  },
  "test3040" : {
    "methodSignature" : "public int getDays()",
    "methodName" : "getDays",
    "className" : "org.joda.time.base.BaseSingleFieldPeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3040() throws Throwable {\n    Days days0 = Days.FOUR;\n    Seconds seconds0 = days0.toStandardSeconds();\n    DurationFieldType durationFieldType0 = DurationFieldType.centuries();\n    boolean boolean0 = seconds0.isSupported(durationFieldType0);\n    days0.getDays();\n}",
    "testName" : "test3040"
  },
  "test4050" : {
    "methodSignature" : "public DurationFieldType getFieldType(int index)",
    "methodName" : "getFieldType",
    "className" : "org.joda.time.base.BaseSingleFieldPeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4050() throws Throwable {\n    Duration duration0 = Duration.ZERO;\n    DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());\n    DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());\n    doReturn(10080).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class), anyString(), anyInt());\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);\n    DateTime dateTime0 = dateTimeFormatter0.parseDateTime(\"ReadablePartial objects must be contiguous\");\n    Interval interval0 = duration0.toIntervalTo(dateTime0);\n    Weeks weeks0 = Weeks.weeksIn(interval0);\n    weeks0.getFieldType(10080);\n}",
    "testName" : "test4050"
  },
  "test1113" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.base.BaseSingleFieldPeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1113() throws Throwable {\n    Minutes minutes0 = Minutes.THREE;\n    DurationFieldType durationFieldType0 = minutes0.getFieldType();\n    durationFieldType0.getName();\n}",
    "testName" : "test1113"
  },
  "test2124" : {
    "methodSignature" : "public int compareTo(BaseSingleFieldPeriod other)",
    "methodName" : "compareTo",
    "className" : "org.joda.time.base.BaseSingleFieldPeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2124() throws Throwable {\n    Hours hours0 = Hours.FIVE;\n    Hours hours1 = Hours.MIN_VALUE;\n    int int0 = hours1.compareTo((BaseSingleFieldPeriod) hours0);\n}",
    "testName" : "test2124"
  },
  "test2123" : {
    "methodSignature" : "public int getHours()",
    "methodName" : "getHours",
    "className" : "org.joda.time.base.BaseSingleFieldPeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2123() throws Throwable {\n    Hours hours0 = Hours.FIVE;\n    Hours hours1 = Hours.MIN_VALUE;\n    int int0 = hours1.compareTo((BaseSingleFieldPeriod) hours0);\n    hours0.getHours();\n}",
    "testName" : "test2123"
  },
  "test1517" : {
    "methodSignature" : "protected static int between(ReadableInstant start, ReadableInstant end, DurationFieldType field)",
    "methodName" : "between",
    "className" : "org.joda.time.base.BaseSingleFieldPeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1517() throws Throwable {\n    LocalDate localDate0 = LocalDate.now();\n    DateMidnight dateMidnight0 = localDate0.toDateMidnight((DateTimeZone) null);\n    Instant instant0 = dateMidnight0.toInstant();\n    DateMidnight dateMidnight1 = dateMidnight0.withYearOfEra(27);\n    DurationFieldType durationFieldType0 = DurationFieldType.days();\n    int int0 = BaseSingleFieldPeriod.between(instant0, dateMidnight1, durationFieldType0);\n}",
    "testName" : "test1517"
  },
  "test1315" : {
    "methodSignature" : "protected static int between(ReadableInstant start, ReadableInstant end, DurationFieldType field)",
    "methodName" : "between",
    "className" : "org.joda.time.base.BaseSingleFieldPeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1315() throws Throwable {\n    LocalDate localDate0 = LocalDate.now();\n    DateMidnight dateMidnight0 = localDate0.toDateMidnight((DateTimeZone) null);\n    Instant instant0 = dateMidnight0.toInstant();\n    Weeks weeks0 = Weeks.weeksBetween((ReadableInstant) instant0, (ReadableInstant) dateMidnight0);\n    DurationFieldType durationFieldType0 = weeks0.getFieldType();\n    int int0 = BaseSingleFieldPeriod.between(dateMidnight0, instant0, durationFieldType0);\n}",
    "testName" : "test1315"
  },
  "test2327" : {
    "methodSignature" : "public int compareTo(BaseSingleFieldPeriod other)",
    "methodName" : "compareTo",
    "className" : "org.joda.time.base.BaseSingleFieldPeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2327() throws Throwable {\n    Weeks weeks0 = Weeks.weeks(0);\n    Hours hours0 = Hours.SIX;\n    weeks0.compareTo((BaseSingleFieldPeriod) hours0);\n}",
    "testName" : "test2327"
  },
  "test002" : {
    "methodSignature" : "public int getYears()",
    "methodName" : "getYears",
    "className" : "org.joda.time.base.BaseSingleFieldPeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test002() throws Throwable {\n    Years years0 = Years.MIN_VALUE;\n    Years years1 = Years.TWO;\n    boolean boolean0 = years0.equals(years1);\n    years1.getYears();\n}",
    "testName" : "test002"
  },
  "test046" : {
    "methodSignature" : "public static Hours hoursBetween(ReadablePartial start, ReadablePartial end)",
    "methodName" : "hoursBetween",
    "className" : "org.joda.time.base.BaseSingleFieldPeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test046() throws Throwable {\n    YearMonth yearMonth0 = YearMonth.now();\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();\n    StrictChronology strictChronology0 = StrictChronology.getInstance(ethiopicChronology0);\n    LocalDateTime localDateTime0 = new LocalDateTime((Chronology) strictChronology0);\n    Hours.hoursBetween((ReadablePartial) yearMonth0, (ReadablePartial) localDateTime0);\n}",
    "testName" : "test046"
  },
  "test3545" : {
    "methodSignature" : "public static Weeks weeksBetween(ReadablePartial start, ReadablePartial end)",
    "methodName" : "weeksBetween",
    "className" : "org.joda.time.base.BaseSingleFieldPeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3545() throws Throwable {\n    LocalTime localTime0 = new LocalTime(0, 0, 0);\n    LocalDateTime localDateTime0 = new LocalDateTime((long) 0, (Chronology) null);\n    Weeks.weeksBetween((ReadablePartial) localTime0, (ReadablePartial) localDateTime0);\n}",
    "testName" : "test3545"
  },
  "test2733" : {
    "methodSignature" : "public boolean equals(Object period)",
    "methodName" : "equals",
    "className" : "org.joda.time.base.BaseSingleFieldPeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2733() throws Throwable {\n    Period period0 = Period.hours(0);\n    Weeks weeks0 = period0.toStandardWeeks();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);\n    ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);\n    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(iSOChronology0, dateTimeZone0);\n    Period period1 = new Period(weeks0, zonedChronology0);\n    boolean boolean0 = weeks0.equals(period1);\n}",
    "testName" : "test2733"
  },
  "test2732" : {
    "methodSignature" : "public int getWeeks()",
    "methodName" : "getWeeks",
    "className" : "org.joda.time.base.BaseSingleFieldPeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2732() throws Throwable {\n    Period period0 = Period.hours(0);\n    Weeks weeks0 = period0.toStandardWeeks();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);\n    ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);\n    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(iSOChronology0, dateTimeZone0);\n    Period period1 = new Period(weeks0, zonedChronology0);\n    boolean boolean0 = weeks0.equals(period1);\n    weeks0.getWeeks();\n}",
    "testName" : "test2732"
  },
  "test4557" : {
    "methodSignature" : "protected static int standardPeriodIn(ReadablePeriod period, long millisPerUnit)",
    "methodName" : "standardPeriodIn",
    "className" : "org.joda.time.base.BaseSingleFieldPeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4557() throws Throwable {\n    Hours hours0 = Hours.FIVE;\n    int int0 = BaseSingleFieldPeriod.standardPeriodIn(hours0, (-1));\n}",
    "testName" : "test4557"
  },
  "test3343" : {
    "methodSignature" : "public int getValue(int index)",
    "methodName" : "getValue",
    "className" : "org.joda.time.base.BaseSingleFieldPeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3343() throws Throwable {\n    Months months0 = Months.ONE;\n    months0.getValue(599);\n}",
    "testName" : "test3343"
  },
  "test4354" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "org.joda.time.base.BaseSingleFieldPeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4354() throws Throwable {\n    Years years0 = Years.ONE;\n    years0.toMutablePeriod();\n    years0.size();\n}",
    "testName" : "test4354"
  },
  "test2530" : {
    "methodSignature" : "public boolean equals(Object period)",
    "methodName" : "equals",
    "className" : "org.joda.time.base.BaseSingleFieldPeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2530() throws Throwable {\n    LocalTime localTime0 = LocalTime.MIDNIGHT;\n    Days days0 = Days.daysBetween((ReadablePartial) localTime0, (ReadablePartial) localTime0);\n    Seconds seconds0 = Seconds.MAX_VALUE;\n    boolean boolean0 = days0.equals(seconds0);\n}",
    "testName" : "test2530"
  },
  "test000" : {
    "methodSignature" : "public boolean equals(Object period)",
    "methodName" : "equals",
    "className" : "org.joda.time.base.BaseSingleFieldPeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    Years years0 = Years.MIN_VALUE;\n    Years years1 = Years.TWO;\n    boolean boolean0 = years0.equals(years1);\n}",
    "testName" : "test000"
  },
  "test2937" : {
    "methodSignature" : "public boolean isSupported(DurationFieldType type)",
    "methodName" : "isSupported",
    "className" : "org.joda.time.base.BaseSingleFieldPeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2937() throws Throwable {\n    Months months0 = Months.TWELVE;\n    DurationFieldType durationFieldType0 = DurationFieldType.months();\n    boolean boolean0 = months0.isSupported(durationFieldType0);\n}",
    "testName" : "test2937"
  },
  "test3949" : {
    "methodSignature" : "public static Seconds secondsBetween(ReadablePartial start, ReadablePartial end)",
    "methodName" : "secondsBetween",
    "className" : "org.joda.time.base.BaseSingleFieldPeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3949() throws Throwable {\n    Seconds.secondsBetween((ReadablePartial) null, (ReadablePartial) null);\n}",
    "testName" : "test3949"
  },
  "test001" : {
    "methodSignature" : "public boolean equals(Object period)",
    "methodName" : "equals",
    "className" : "org.joda.time.base.BaseSingleFieldPeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test001() throws Throwable {\n    Years years0 = Years.MIN_VALUE;\n    Years years1 = Years.TWO;\n    boolean boolean0 = years0.equals(years1);\n    years1.equals((Object) years0);\n}",
    "testName" : "test001"
  },
  "test3747" : {
    "methodSignature" : "protected static int between(ReadablePartial start, ReadablePartial end, ReadablePeriod zeroInstance)",
    "methodName" : "between",
    "className" : "org.joda.time.base.BaseSingleFieldPeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3747() throws Throwable {\n    Seconds seconds0 = Seconds.ZERO;\n    LocalTime localTime0 = new LocalTime(0, 0, 0);\n    BaseSingleFieldPeriod.between(localTime0, (ReadablePartial) null, seconds0);\n}",
    "testName" : "test3747"
  },
  "test1921" : {
    "methodSignature" : "public int getValue(int index)",
    "methodName" : "getValue",
    "className" : "org.joda.time.base.BaseSingleFieldPeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1921() throws Throwable {\n    Months months0 = Months.MIN_VALUE;\n    int int0 = months0.getValue(0);\n}",
    "testName" : "test1921"
  },
  "test0911" : {
    "methodSignature" : "public int getValue(int index)",
    "methodName" : "getValue",
    "className" : "org.joda.time.base.BaseSingleFieldPeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0911() throws Throwable {\n    Years years0 = Years.THREE;\n    int int0 = years0.getValue(0);\n}",
    "testName" : "test0911"
  },
  "test1719" : {
    "methodSignature" : "protected static int standardPeriodIn(ReadablePeriod period, long millisPerUnit)",
    "methodName" : "standardPeriodIn",
    "className" : "org.joda.time.base.BaseSingleFieldPeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1719() throws Throwable {\n    Hours hours0 = Hours.MIN_VALUE;\n    BaseSingleFieldPeriod.standardPeriodIn(hours0, (-1));\n}",
    "testName" : "test1719"
  },
  "test035" : {
    "methodSignature" : "public int getDays()",
    "methodName" : "getDays",
    "className" : "org.joda.time.base.BaseSingleFieldPeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test035() throws Throwable {\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();\n    LocalTime localTime0 = new LocalTime(240L, (Chronology) islamicChronology0);\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();\n    DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();\n    LocalTime localTime1 = localTime0.withFieldAdded(durationFieldType0, 1);\n    Days days0 = Days.daysBetween((ReadablePartial) localTime1, (ReadablePartial) localTime0);\n    days0.getDays();\n}",
    "testName" : "test035"
  },
  "test079" : {
    "methodSignature" : "protected static int standardPeriodIn(ReadablePeriod period, long millisPerUnit)",
    "methodName" : "standardPeriodIn",
    "className" : "org.joda.time.base.BaseSingleFieldPeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test079() throws Throwable {\n    Minutes minutes0 = Minutes.TWO;\n    int int0 = BaseSingleFieldPeriod.standardPeriodIn(minutes0, 10L);\n}",
    "testName" : "test079"
  },
  "test3141" : {
    "methodSignature" : "public int get(DurationFieldType type)",
    "methodName" : "get",
    "className" : "org.joda.time.base.BaseSingleFieldPeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3141() throws Throwable {\n    Months months0 = Months.TWO;\n    DurationFieldType durationFieldType0 = DurationFieldType.months();\n    int int0 = months0.get(durationFieldType0);\n}",
    "testName" : "test3141"
  },
  "test4353" : {
    "methodSignature" : "public int getYears()",
    "methodName" : "getYears",
    "className" : "org.joda.time.base.BaseSingleFieldPeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4353() throws Throwable {\n    Years years0 = Years.ONE;\n    years0.toMutablePeriod();\n    years0.getYears();\n}",
    "testName" : "test4353"
  },
  "test4151" : {
    "methodSignature" : "public static Seconds secondsBetween(ReadableInstant start, ReadableInstant end)",
    "methodName" : "secondsBetween",
    "className" : "org.joda.time.base.BaseSingleFieldPeriod",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4151() throws Throwable {\n    DateMidnight dateMidnight0 = new DateMidnight((DateTimeZone) null);\n    Instant instant0 = dateMidnight0.toInstant();\n    Seconds.secondsBetween((ReadableInstant) instant0, (ReadableInstant) null);\n}",
    "testName" : "test4151"
  }
}