project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test0000,"public void test0000() throws Throwable {
    DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
    DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
    doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class), anyString(), anyInt());
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
    LocalDateTime localDateTime0 = LocalDateTime.parse("""", dateTimeFormatter0);
    Partial partial0 = new Partial(localDateTime0);
    DateTimeFieldType dateTimeFieldType0 = partial0.getFieldType(0);
    Partial partial1 = partial0.withField(dateTimeFieldType0, 0);
    boolean boolean0 = partial1.isMatch((ReadablePartial) partial0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test0011,"public void test0011() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
    Partial partial0 = new Partial(dateTimeFieldType0, 106);
    Instant instant0 = new Instant((Object) null);
    boolean boolean0 = partial0.isMatch((ReadableInstant) instant0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test0022,"public void test0022() throws Throwable {
    DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[7];
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
    dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
    dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
    DurationFieldType durationFieldType0 = dateTimeFieldTypeArray0[1].getDurationType();
    int[] intArray0 = new int[21];
    Partial partial0 = new Partial((Chronology) null, dateTimeFieldTypeArray0, intArray0);
    // Undeclared exception!
    try {
        partial0.withFieldAddWrapped(durationFieldType0, 86400);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test0033,"public void test0033() throws Throwable {
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
    DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[8];
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
    dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
    int[] intArray0 = new int[3];
    Partial partial0 = new Partial(buddhistChronology0, dateTimeFieldTypeArray0, intArray0);
    // Undeclared exception!
    try {
        partial0.without(dateTimeFieldTypeArray0[6]);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
    }
}",0,
project,0,test0077,"public void test0077() throws Throwable {
    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
    Partial partial0 = new Partial(gregorianChronology0);
    Partial.Property partial_Property0 = new Partial.Property(partial0, 1334);
    ReadablePartial readablePartial0 = partial_Property0.getReadablePartial();
    assertEquals(0, readablePartial0.size());
}",0,"assertEquals(1, readablePartial0.size())"
project,0,test0099,"public void test0099() throws Throwable {
    DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[5];
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
    dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
    DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
    Partial partial0 = new Partial(dateTimeFieldTypeArray0[0], 2390, (Chronology) null);
    Partial partial1 = partial0.withFieldAdded(durationFieldType0, 256);
    assertNotSame(partial1, partial0);
}",0,
project,0,test00910,"public void test00910() throws Throwable {
    DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[5];
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
    dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
    DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
    Partial partial0 = new Partial(dateTimeFieldTypeArray0[0], 2390, (Chronology) null);
    Partial partial1 = partial0.withFieldAdded(durationFieldType0, 256);
    assertFalse(partial1.equals((Object) partial0));
}",0,
project,0,test01011,"public void test01011() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
    CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
    Partial partial0 = new Partial(dateTimeFieldType0, 0, copticChronology0);
    Partial partial1 = partial0.with(dateTimeFieldType0, 1);
    assertEquals(1, partial1.size());
}",0,
project,0,test01112,"public void test01112() throws Throwable {
    Partial partial0 = new Partial();
    int int0 = partial0.size();
    assertEquals(0, int0);
}",0,"assertEquals(0, int0)"
project,0,test01213,"public void test01213() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
    ISOChronology iSOChronology0 = ISOChronology.getInstance();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-883));
    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(iSOChronology0, dateTimeZone0);
    Partial partial0 = new Partial(dateTimeFieldType0, (-883), zonedChronology0);
    Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
    Partial partial1 = partial_Property0.setCopy((-883));
    assertTrue(partial1.equals((Object) partial0));
}",0,
project,0,test01314,"public void test01314() throws Throwable {
    Partial partial0 = new Partial();
    Period period0 = Period.seconds(3198);
    Seconds seconds0 = Seconds.standardSecondsIn(period0);
    Partial partial1 = partial0.plus(seconds0);
    assertTrue(partial1.equals((Object) partial0));
}",0,
project,0,test01315,"public void test01315() throws Throwable {
    Partial partial0 = new Partial();
    Period period0 = Period.seconds(3198);
    Seconds seconds0 = Seconds.standardSecondsIn(period0);
    Partial partial1 = partial0.plus(seconds0);
    assertNotSame(partial1, partial0);
}",0,
project,0,test01416,"public void test01416() throws Throwable {
    Partial partial0 = new Partial();
    PeriodType periodType0 = PeriodType.hours();
    Period period0 = new Period(493L, periodType0);
    Partial partial1 = partial0.minus(period0);
    assertNotSame(partial1, partial0);
}",0,
project,0,test01417,"public void test01417() throws Throwable {
    Partial partial0 = new Partial();
    PeriodType periodType0 = PeriodType.hours();
    Period period0 = new Period(493L, periodType0);
    Partial partial1 = partial0.minus(period0);
    assertTrue(partial1.equals((Object) partial0));
}",0,
project,0,test01518,"public void test01518() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    Partial partial0 = new Partial(dateTimeFieldType0, 0);
    Days days0 = Days.ZERO;
    Minutes minutes0 = days0.toStandardMinutes();
    Weeks weeks0 = minutes0.toStandardWeeks();
    Partial partial1 = partial0.minus(weeks0);
    assertNotSame(partial1, partial0);
}",0,
project,0,test01519,"public void test01519() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    Partial partial0 = new Partial(dateTimeFieldType0, 0);
    Days days0 = Days.ZERO;
    Minutes minutes0 = days0.toStandardMinutes();
    Weeks weeks0 = minutes0.toStandardWeeks();
    Partial partial1 = partial0.minus(weeks0);
    assertTrue(partial1.equals((Object) partial0));
}",0,
project,0,test01620,"public void test01620() throws Throwable {
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    Partial partial0 = new Partial(buddhistChronology0);
    int[] intArray0 = partial0.getValues();
    assertEquals(0, intArray0.length);
}",0,
project,0,test01721,"public void test01721() throws Throwable {
    DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
    DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
    doReturn(52).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class), anyString(), anyInt());
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
    LocalDateTime localDateTime0 = LocalDateTime.parse("""", dateTimeFormatter0);
    Partial partial0 = new Partial(localDateTime0);
    int int0 = partial0.getValue(0);
    assertEquals(1970, int0);
}",1,
project,0,test01822,"public void test01822() throws Throwable {
    Partial partial0 = new Partial();
    DateTimeFieldType[] dateTimeFieldTypeArray0 = partial0.getFieldTypes();
    assertEquals(0, dateTimeFieldTypeArray0.length);
}",0,
project,0,test01923,"public void test01923() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
    Partial partial0 = new Partial(dateTimeFieldType0, 271);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
    DateTimeField dateTimeField0 = partial0.getField(0, (Chronology) buddhistChronology0);
    assertNotNull(dateTimeField0);
}",0,
project,0,test02024,"public void test02024() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[5];
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
    dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
    dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
    int[] intArray0 = new int[8];
    Partial partial0 = new Partial(gJChronology0, dateTimeFieldTypeArray0, intArray0);
    // Undeclared exception!
    try {
        partial0.without(dateTimeFieldType0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value 0 for weekOfWeekyear must not be smaller than 1
        //
        verifyException(""org.joda.time.chrono.BaseChronology"", e);
    }
}",0,
project,0,test02125,"public void test02125() throws Throwable {
    DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[7];
    int[] intArray0 = new int[21];
    Partial partial0 = new Partial((Chronology) null, dateTimeFieldTypeArray0, intArray0);
    // Undeclared exception!
    try {
        partial0.without(dateTimeFieldTypeArray0[0]);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.Partial"", e);
    }
}",0,
project,0,test02226,"public void test02226() throws Throwable {
    DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[9];
    int[] intArray0 = new int[5];
    Partial partial0 = new Partial((Chronology) null, dateTimeFieldTypeArray0, intArray0);
    Months months0 = Months.EIGHT;
    // Undeclared exception!
    try {
        partial0.withPeriodAdded(months0, 1000);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test02327,"public void test02327() throws Throwable {
    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
    DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[4];
    int[] intArray0 = new int[1];
    Partial partial0 = new Partial(gregorianChronology0, dateTimeFieldTypeArray0, intArray0);
    Minutes minutes0 = Minutes.minutesIn((ReadableInterval) null);
    DurationFieldType durationFieldType0 = minutes0.getFieldType();
    // Undeclared exception!
    try {
        partial0.withFieldAdded(durationFieldType0, 0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test02428,"public void test02428() throws Throwable {
    DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[20];
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
    dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
    DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.era();
    dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
    DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
    int[] intArray0 = new int[5];
    intArray0[1] = 105;
    Partial partial0 = new Partial((Chronology) null, dateTimeFieldTypeArray0, intArray0);
    // Undeclared exception!
    try {
        partial0.withFieldAddWrapped(durationFieldType0, (-1));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value 104 for era must be in the range [0,1]
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",0,
project,0,test02529,"public void test02529() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
    Partial partial0 = new Partial(dateTimeFieldType0, 0);
    DurationFieldType durationFieldType0 = DurationFieldType.millis();
    // Undeclared exception!
    try {
        partial0.withFieldAddWrapped(durationFieldType0, 3600);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Field 'millis' is not supported
        //
        verifyException(""org.joda.time.base.AbstractPartial"", e);
    }
}",0,
project,0,test02630,"public void test02630() throws Throwable {
    DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[9];
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
    dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
    dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
    dateTimeFieldTypeArray0[2] = dateTimeFieldTypeArray0[0];
    dateTimeFieldTypeArray0[3] = dateTimeFieldTypeArray0[2];
    DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.dayOfYear();
    dateTimeFieldTypeArray0[4] = dateTimeFieldType1;
    dateTimeFieldTypeArray0[5] = dateTimeFieldTypeArray0[4];
    DurationFieldType durationFieldType0 = dateTimeFieldType1.getRangeDurationType();
    int[] intArray0 = new int[5];
    Partial partial0 = new Partial((Chronology) null, dateTimeFieldTypeArray0, intArray0);
    // Undeclared exception!
    try {
        partial0.withFieldAddWrapped(durationFieldType0, (-1));
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 5
        //
        verifyException(""org.joda.time.field.BaseDateTimeField"", e);
    }
}",0,
project,0,test02731,"public void test02731() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
    Partial partial0 = new Partial(dateTimeFieldType0, 0);
    // Undeclared exception!
    try {
        partial0.withField(dateTimeFieldType0, 7593750);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value 7593750 for halfdayOfDay must be in the range [0,1]
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",0,
project,0,test02832,"public void test02832() throws Throwable {
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    StrictChronology strictChronology0 = StrictChronology.getInstance(buddhistChronology0);
    LenientChronology lenientChronology0 = LenientChronology.getInstance(strictChronology0);
    LocalDateTime localDateTime0 = new LocalDateTime(995, 482, 995, (-1346), 0, 1526, 2358, lenientChronology0);
    Partial partial0 = new Partial(localDateTime0);
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
    // Undeclared exception!
    try {
        partial0.withField(dateTimeFieldType0, 3);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Field 'halfdayOfDay' is not supported
        //
        verifyException(""org.joda.time.base.AbstractPartial"", e);
    }
}",0,
project,0,test02933,"public void test02933() throws Throwable {
    CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
    DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[4];
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
    dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
    int[] intArray0 = new int[1];
    Partial partial0 = new Partial(copticChronology0, dateTimeFieldTypeArray0, intArray0);
    // Undeclared exception!
    try {
        partial0.withField(dateTimeFieldType0, 1);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 1
        //
        verifyException(""org.joda.time.Partial"", e);
    }
}",0,
project,0,test03034,"public void test03034() throws Throwable {
    DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[4];
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
    dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
    DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.clockhourOfHalfday();
    dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
    int[] intArray0 = new int[8];
    Partial partial0 = new Partial((Chronology) null, dateTimeFieldTypeArray0, intArray0);
    // Undeclared exception!
    try {
        partial0.withChronologyRetainFields((Chronology) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value 0 for clockhourOfHalfday must not be smaller than 1
        //
        verifyException(""org.joda.time.chrono.BaseChronology"", e);
    }
}",0,
project,0,test03135,"public void test03135() throws Throwable {
    ISOChronology iSOChronology0 = ISOChronology.getInstance();
    DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[5];
    Partial partial0 = new Partial(iSOChronology0, dateTimeFieldTypeArray0, (int[]) null);
    // Undeclared exception!
    try {
        partial0.withChronologyRetainFields(iSOChronology0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.chrono.BaseChronology"", e);
    }
}",0,
project,0,test03236,"public void test03236() throws Throwable {
    DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[9];
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
    dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
    dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
    dateTimeFieldTypeArray0[2] = dateTimeFieldTypeArray0[0];
    dateTimeFieldTypeArray0[3] = dateTimeFieldTypeArray0[1];
    dateTimeFieldTypeArray0[4] = dateTimeFieldTypeArray0[0];
    dateTimeFieldTypeArray0[5] = dateTimeFieldTypeArray0[0];
    int[] intArray0 = new int[5];
    Partial partial0 = new Partial((Chronology) null, dateTimeFieldTypeArray0, intArray0);
    // Undeclared exception!
    try {
        partial0.with(dateTimeFieldTypeArray0[0], 3);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 5
        //
        verifyException(""org.joda.time.field.BaseDateTimeField"", e);
    }
}",0,
project,0,test03337,"public void test03337() throws Throwable {
    DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[7];
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
    dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
    dateTimeFieldTypeArray0[1] = dateTimeFieldTypeArray0[0];
    dateTimeFieldTypeArray0[2] = dateTimeFieldTypeArray0[0];
    int[] intArray0 = new int[2];
    Partial partial0 = new Partial((Chronology) null, dateTimeFieldTypeArray0, intArray0);
    // Undeclared exception!
    try {
        partial0.toStringList();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 2
        //
        verifyException(""org.joda.time.Partial"", e);
    }
}",0,
project,0,test03438,"public void test03438() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
    CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
    DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
    dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
    int[] intArray0 = new int[0];
    Partial partial0 = new Partial(copticChronology0, dateTimeFieldTypeArray0, intArray0);
    Locale locale0 = Locale.ITALY;
    // Undeclared exception!
    try {
        partial0.toString((String) null, locale0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 0
        //
        verifyException(""org.joda.time.Partial"", e);
    }
}",0,
project,0,test03539,"public void test03539() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
    Partial partial0 = new Partial(dateTimeFieldType0, 0);
    // Undeclared exception!
    try {
        partial0.toString(""The field type must not be null"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: T
        //
        verifyException(""org.joda.time.format.DateTimeFormat"", e);
    }
}",0,
project,0,test03640,"public void test03640() throws Throwable {
    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
    DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[4];
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
    dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
    dateTimeFieldTypeArray0[1] = dateTimeFieldTypeArray0[0];
    int[] intArray0 = new int[1];
    Partial partial0 = new Partial(gregorianChronology0, dateTimeFieldTypeArray0, intArray0);
    // Undeclared exception!
    try {
        partial0.toString();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 1
        //
        verifyException(""org.joda.time.Partial"", e);
    }
}",0,
project,0,test03741,"public void test03741() throws Throwable {
    Partial partial0 = new Partial();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
    // Undeclared exception!
    try {
        partial0.property(dateTimeFieldType0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Field 'minuteOfDay' is not supported
        //
        verifyException(""org.joda.time.base.AbstractPartial"", e);
    }
}",0,
project,0,test03842,"public void test03842() throws Throwable {
    GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
    int[] intArray0 = new int[8];
    Partial partial0 = new Partial(gregorianChronology0, (DateTimeFieldType[]) null, intArray0);
    Instant instant0 = new Instant();
    // Undeclared exception!
    try {
        partial0.isMatch((ReadableInstant) instant0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.Partial"", e);
    }
}",0,
project,0,test03943,"public void test03943() throws Throwable {
    Partial partial0 = new Partial();
    Partial partial1 = new Partial(partial0, (int[]) null);
    // Undeclared exception!
    try {
        partial1.getValues();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.Partial"", e);
    }
}",0,
project,0,test04044,"public void test04044() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
    DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[9];
    Partial partial0 = new Partial(ethiopicChronology0, dateTimeFieldTypeArray0, (int[]) null);
    // Undeclared exception!
    try {
        partial0.getValue(1);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.Partial"", e);
    }
}",1,
project,0,test04145,"public void test04145() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-857));
    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
    Partial partial0 = new Partial(gregorianChronology0);
    // Undeclared exception!
    try {
        partial0.getValue(2335);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 2335
        //
        verifyException(""org.joda.time.Partial"", e);
    }
}",1,
project,0,test04246,"public void test04246() throws Throwable {
    int[] intArray0 = new int[2];
    GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
    Partial partial0 = new Partial(gregorianChronology0, (DateTimeFieldType[]) null, intArray0);
    // Undeclared exception!
    try {
        partial0.getFieldTypes();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.Partial"", e);
    }
}",0,
project,0,test04347,"public void test04347() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
    CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
    Partial partial0 = new Partial(dateTimeFieldType0, 0, copticChronology0);
    // Undeclared exception!
    try {
        partial0.getFieldType(90);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test04448,"public void test04448() throws Throwable {
    JulianChronology julianChronology0 = JulianChronology.getInstance();
    int[] intArray0 = new int[3];
    Partial partial0 = new Partial(julianChronology0, (DateTimeFieldType[]) null, intArray0);
    // Undeclared exception!
    try {
        partial0.getField((-4493), (Chronology) julianChronology0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test04549,"public void test04549() throws Throwable {
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    Partial partial0 = new Partial(buddhistChronology0);
    // Undeclared exception!
    try {
        partial0.getField(238, (Chronology) buddhistChronology0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test04650,"public void test04650() throws Throwable {
    DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
    dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
    DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.weekyearOfCentury();
    dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
    int[] intArray0 = new int[2];
    intArray0[1] = 1095;
    Partial partial0 = null;
    try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value 1095 for weekyearOfCentury must not be larger than 99
        //
        verifyException(""org.joda.time.chrono.BaseChronology"", e);
    }
}",0,
project,0,test04751,"public void test04751() throws Throwable {
    JulianChronology julianChronology0 = JulianChronology.getInstance();
    MonthDay monthDay0 = new MonthDay((Chronology) julianChronology0);
    int[] intArray0 = new int[1];
    MonthDay monthDay1 = new MonthDay(monthDay0, intArray0);
    Partial partial0 = null;
    try {
        partial0 = new Partial(monthDay1);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 1
        //
        verifyException(""org.joda.time.base.BasePartial"", e);
    }
}",0,
project,0,test04852,"public void test04852() throws Throwable {
    int[] intArray0 = new int[6];
    Partial partial0 = null;
    try {
        partial0 = new Partial((Partial) null, intArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.Partial"", e);
    }
}",0,
project,0,test04953,"public void test04953() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
    ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
    Partial partial0 = null;
    try {
        partial0 = new Partial(dateTimeFieldType0, 0, iSOChronology0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value 0 for dayOfYear must not be smaller than 1
        //
        verifyException(""org.joda.time.chrono.BaseChronology"", e);
    }
}",0,
project,0,test05054,"public void test05054() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
    Partial partial0 = null;
    try {
        partial0 = new Partial(dateTimeFieldType0, (-965));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value -965 for minuteOfHour must not be smaller than 0
        //
        verifyException(""org.joda.time.chrono.BaseChronology"", e);
    }
}",0,
project,0,test05155,"public void test05155() throws Throwable {
    DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[7];
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
    dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
    dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
    dateTimeFieldTypeArray0[2] = dateTimeFieldType0;
    dateTimeFieldTypeArray0[3] = dateTimeFieldTypeArray0[1];
    dateTimeFieldTypeArray0[4] = dateTimeFieldTypeArray0[0];
    dateTimeFieldTypeArray0[5] = dateTimeFieldTypeArray0[0];
    dateTimeFieldTypeArray0[6] = dateTimeFieldTypeArray0[1];
    int[] intArray0 = new int[21];
    Partial partial0 = new Partial((Chronology) null, dateTimeFieldTypeArray0, intArray0);
    String string0 = partial0.toStringList();
    assertEquals(""[weekyearOfCentury=0, weekyearOfCentury=0, weekyearOfCentury=0, weekyearOfCentury=0, weekyearOfCentury=0, weekyearOfCentury=0, weekyearOfCentury=0]"", string0);
}",0,
project,0,test05256,"public void test05256() throws Throwable {
    DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[7];
    int[] intArray0 = new int[21];
    Partial partial0 = new Partial((Chronology) null, dateTimeFieldTypeArray0, intArray0);
    // Undeclared exception!
    try {
        partial0.toStringList();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.Partial"", e);
    }
}",0,
project,0,test05357,"public void test05357() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
    Partial partial0 = new Partial(dateTimeFieldType0, 0);
    String string0 = partial0.toString();
    assertEquals(""--00"", string0);
}",0,assertNotNull(string0)
project,0,test05458,"public void test05458() throws Throwable {
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[8];
    int[] intArray0 = new int[8];
    Partial partial0 = new Partial(buddhistChronology0, dateTimeFieldTypeArray0, intArray0);
    // Undeclared exception!
    try {
        partial0.toString();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.Partial"", e);
    }
}",0,
project,0,test05559,"public void test05559() throws Throwable {
    YearMonth yearMonth0 = new YearMonth((Object) null);
    Partial partial0 = new Partial(yearMonth0);
    DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
    assertTrue(dateTimeFormatter0.isPrinter());
}",0,assertTrue(dateTimeFormatter0.isPrinter())
project,0,test05660,"public void test05660() throws Throwable {
    Partial partial0 = new Partial();
    DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
    assertNull(dateTimeFormatter0);
}",0,
project,0,test05761,"public void test05761() throws Throwable {
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
    Months months0 = Months.NINE;
    Partial partial0 = new Partial(buddhistChronology0);
    Partial partial1 = partial0.withPeriodAdded(months0, 1);
    assertNotSame(partial1, partial0);
}",0,
project,0,test05762,"public void test05762() throws Throwable {
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
    Months months0 = Months.NINE;
    Partial partial0 = new Partial(buddhistChronology0);
    Partial partial1 = partial0.withPeriodAdded(months0, 1);
    assertTrue(partial1.equals((Object) partial0));
}",0,
project,0,test05863,"public void test05863() throws Throwable {
    DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[6];
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
    dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
    DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.yearOfCentury();
    dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
    dateTimeFieldTypeArray0[2] = dateTimeFieldType0;
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(543);
    ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
    dateTimeFieldTypeArray0[3] = dateTimeFieldTypeArray0[2];
    dateTimeFieldTypeArray0[4] = dateTimeFieldType0;
    dateTimeFieldTypeArray0[5] = dateTimeFieldTypeArray0[1];
    int[] intArray0 = new int[6];
    Partial partial0 = null;
    try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, iSOChronology0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Types array must be in order largest-smallest: yearOfCentury < weekyear
        //
        verifyException(""org.joda.time.Partial"", e);
    }
}",0,
project,0,test05964,"public void test05964() throws Throwable {
    DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[6];
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
    dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
    dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
    dateTimeFieldTypeArray0[2] = dateTimeFieldType0;
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(543);
    ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
    dateTimeFieldTypeArray0[3] = dateTimeFieldType0;
    dateTimeFieldTypeArray0[4] = dateTimeFieldTypeArray0[1];
    dateTimeFieldTypeArray0[5] = dateTimeFieldTypeArray0[2];
    int[] intArray0 = new int[6];
    Partial partial0 = null;
    try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, iSOChronology0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Types array must not contain duplicate: weekyear
        //
        verifyException(""org.joda.time.Partial"", e);
    }
}",0,
project,0,test06065,"public void test06065() throws Throwable {
    DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[6];
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
    dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
    DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.weekOfWeekyear();
    dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
    dateTimeFieldTypeArray0[2] = dateTimeFieldTypeArray0[0];
    dateTimeFieldTypeArray0[3] = dateTimeFieldTypeArray0[0];
    dateTimeFieldTypeArray0[4] = dateTimeFieldTypeArray0[3];
    dateTimeFieldTypeArray0[5] = dateTimeFieldType1;
    int[] intArray0 = new int[6];
    Partial partial0 = null;
    try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, (Chronology) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Types array must be in order largest-smallest: weekOfWeekyear < weekyear
        //
        verifyException(""org.joda.time.Partial"", e);
    }
}",0,
project,0,test06166,"public void test06166() throws Throwable {
    DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[1];
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
    dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
    int[] intArray0 = new int[1];
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    Partial partial0 = null;
    try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, gJChronology0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value 0 for weekyearOfCentury must not be smaller than 1
        //
        verifyException(""org.joda.time.chrono.BaseChronology"", e);
    }
}",0,
project,0,test06267,"public void test06267() throws Throwable {
    DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[3];
    int[] intArray0 = new int[3];
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
    Partial partial0 = null;
    try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, ethiopicChronology0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Types array must not contain null: index 0
        //
        verifyException(""org.joda.time.Partial"", e);
    }
}",0,
project,0,test06368,"public void test06368() throws Throwable {
    DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[0];
    int[] intArray0 = new int[3];
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
    Partial partial0 = null;
    try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, ethiopicChronology0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Values array must be the same length as the types array
        //
        verifyException(""org.joda.time.Partial"", e);
    }
}",0,
project,0,test06469,"public void test06469() throws Throwable {
    DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[1];
    Instant instant0 = Instant.now();
    Chronology chronology0 = instant0.getChronology();
    Partial partial0 = null;
    try {
        partial0 = new Partial(dateTimeFieldTypeArray0, (int[]) null, chronology0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Values array must not be null
        //
        verifyException(""org.joda.time.Partial"", e);
    }
}",0,
project,0,test06570,"public void test06570() throws Throwable {
    int[] intArray0 = new int[5];
    JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
    Partial partial0 = null;
    try {
        partial0 = new Partial((DateTimeFieldType[]) null, intArray0, julianChronology0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Types array must not be null
        //
        verifyException(""org.joda.time.Partial"", e);
    }
}",0,
project,0,test06671,"public void test06671() throws Throwable {
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
    Partial partial0 = null;
    try {
        partial0 = new Partial((DateTimeFieldType) null, 0, buddhistChronology0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The field type must not be null
        //
        verifyException(""org.joda.time.Partial"", e);
    }
}",0,
project,0,test06772,"public void test06772() throws Throwable {
    CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
    Partial partial0 = new Partial(copticChronology0);
    CopticChronology copticChronology1 = (CopticChronology) partial0.getChronology();
    assertEquals(1, CopticChronology.AM);
}",0,
project,0,test06873,"public void test06873() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
    Partial partial0 = new Partial(dateTimeFieldType0, 120);
    int int0 = partial0.size();
    assertEquals(1, int0);
}",0,"assertEquals(0, int0)"
project,0,test06974,"public void test06974() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
    Partial partial0 = new Partial(dateTimeFieldType0, 0);
    int int0 = partial0.getValue(0);
    assertEquals(0, int0);
}",1,
project,0,test07075,"public void test07075() throws Throwable {
    DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
    DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
    doReturn(52).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class), anyString(), anyInt());
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
    LocalDateTime localDateTime0 = LocalDateTime.parse("""", dateTimeFormatter0);
    Partial partial0 = new Partial(localDateTime0);
    int[] intArray0 = partial0.getValues();
    assertEquals(4, intArray0.length);
}",0,
project,0,test07176,"public void test07176() throws Throwable {
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
    Partial partial0 = new Partial(ethiopicChronology0);
    String string0 = partial0.toString((String) null, (Locale) null);
    assertEquals(""[]"", string0);
}",0,assertNotNull(string0)
project,0,test07277,"public void test07277() throws Throwable {
    DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[5];
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
    dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
    Partial partial0 = new Partial(dateTimeFieldTypeArray0[0], 2390, (Chronology) null);
    Locale locale0 = Locale.ITALY;
    // Undeclared exception!
    try {
        partial0.toString(""Cj;=GD8F8"", locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: j
        //
        verifyException(""org.joda.time.format.DateTimeFormat"", e);
    }
}",0,
project,0,test07378,"public void test07378() throws Throwable {
    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
    DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[4];
    int[] intArray0 = new int[1];
    Partial partial0 = new Partial(gregorianChronology0, dateTimeFieldTypeArray0, intArray0);
    String string0 = partial0.toString(""/"");
    assertEquals(""/"", string0);
}",0,
project,0,test07479,"public void test07479() throws Throwable {
    DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
    DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
    doReturn(52).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class), anyString(), anyInt());
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
    LocalDateTime localDateTime0 = LocalDateTime.parse("""", dateTimeFormatter0);
    Partial partial0 = new Partial(localDateTime0);
    DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
    assertNotNull(dateTimeFormatter1);
}",0,
project,0,test07480,"public void test07480() throws Throwable {
    DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
    DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
    doReturn(52).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class), anyString(), anyInt());
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
    LocalDateTime localDateTime0 = LocalDateTime.parse("""", dateTimeFormatter0);
    Partial partial0 = new Partial(localDateTime0);
    DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
    String string0 = partial0.toString();
    assertEquals(""[year=1970, monthOfYear=1, dayOfMonth=1, millisOfDay=0]"", string0);
}",0,
project,0,test07581,"public void test07581() throws Throwable {
    LocalTime localTime0 = LocalTime.MIDNIGHT;
    Partial partial0 = new Partial(localTime0);
    String string0 = partial0.toString((String) null);
    assertEquals(""00:00:00.000"", string0);
}",0,
project,0,test07682,"public void test07682() throws Throwable {
    DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[0];
    int[] intArray0 = new int[0];
    Partial partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
    String string0 = partial0.toString();
    assertEquals(""[]"", string0);
}",0,
project,0,test07783,"public void test07783() throws Throwable {
    DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
    DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
    doReturn(52).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class), anyString(), anyInt());
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
    LocalDateTime localDateTime0 = LocalDateTime.parse("""", dateTimeFormatter0);
    Partial partial0 = new Partial(localDateTime0);
    partial0.getFormatter();
    DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
    assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
}",0,
project,0,test07884,"public void test07884() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
    Partial partial0 = new Partial(dateTimeFieldType0, 44);
    boolean boolean0 = partial0.isMatch((ReadablePartial) partial0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test07985,"public void test07985() throws Throwable {
    MockDate mockDate0 = new MockDate(2066, 11, 2284, 91, 11);
    LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
    Partial partial0 = new Partial(localDate0);
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    Instant instant0 = gJChronology0.getGregorianCutover();
    boolean boolean0 = partial0.isMatch((ReadableInstant) instant0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test08086,"public void test08086() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
    Partial partial0 = new Partial(dateTimeFieldType0, 0);
    Instant instant0 = new Instant((long) 0);
    boolean boolean0 = partial0.isMatch((ReadableInstant) instant0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test08187,"public void test08187() throws Throwable {
    LocalTime localTime0 = new LocalTime(0L, (DateTimeZone) null);
    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) null);
    StrictChronology strictChronology0 = StrictChronology.getInstance(gregorianChronology0);
    Period period0 = new Period(0L, 0L, strictChronology0);
    Partial partial0 = new Partial(localTime0);
    Partial partial1 = partial0.plus(period0);
    assertNotSame(partial1, partial0);
}",0,
project,0,test08188,"public void test08188() throws Throwable {
    LocalTime localTime0 = new LocalTime(0L, (DateTimeZone) null);
    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) null);
    StrictChronology strictChronology0 = StrictChronology.getInstance(gregorianChronology0);
    Period period0 = new Period(0L, 0L, strictChronology0);
    Partial partial0 = new Partial(localTime0);
    Partial partial1 = partial0.plus(period0);
    assertTrue(partial1.equals((Object) partial0));
}",0,
project,0,test08289,"public void test08289() throws Throwable {
    Partial partial0 = new Partial();
    Hours hours0 = Hours.TWO;
    Partial partial1 = partial0.withPeriodAdded(hours0, 0);
    assertSame(partial1, partial0);
}",0,
project,0,test08390,"public void test08390() throws Throwable {
    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
    DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[4];
    int[] intArray0 = new int[1];
    Partial partial0 = new Partial(gregorianChronology0, dateTimeFieldTypeArray0, intArray0);
    Partial partial1 = partial0.withPeriodAdded((ReadablePeriod) null, (-1964));
    assertSame(partial1, partial0);
}",0,
project,0,test08491,"public void test08491() throws Throwable {
    DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[9];
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
    dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
    DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.era();
    dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
    DurationFieldType durationFieldType0 = dateTimeFieldTypeArray0[0].getRangeDurationType();
    int[] intArray0 = new int[5];
    Partial partial0 = new Partial((Chronology) null, dateTimeFieldTypeArray0, intArray0);
    Partial partial1 = partial0.withFieldAddWrapped(durationFieldType0, 0);
    assertSame(partial1, partial0);
}",0,
project,0,test08592,"public void test08592() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
    DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.dayOfYear();
    DurationFieldType durationFieldType0 = dateTimeFieldType1.getRangeDurationType();
    Partial partial0 = new Partial(dateTimeFieldType0, 3405, (Chronology) null);
    Partial partial1 = partial0.withFieldAddWrapped(durationFieldType0, (-1));
    assertNotSame(partial1, partial0);
}",0,
project,0,test08593,"public void test08593() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
    DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.dayOfYear();
    DurationFieldType durationFieldType0 = dateTimeFieldType1.getRangeDurationType();
    Partial partial0 = new Partial(dateTimeFieldType0, 3405, (Chronology) null);
    Partial partial1 = partial0.withFieldAddWrapped(durationFieldType0, (-1));
    assertFalse(partial1.equals((Object) partial0));
}",0,
project,0,test08694,"public void test08694() throws Throwable {
    DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[5];
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
    dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
    DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
    Partial partial0 = new Partial(dateTimeFieldTypeArray0[0], 1, (Chronology) null);
    Partial partial1 = partial0.withFieldAdded(durationFieldType0, 0);
    assertSame(partial1, partial0);
}",0,
project,0,test08795,"public void test08795() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
    DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
    Partial partial0 = new Partial(dateTimeFieldType0, 1, (Chronology) null);
    // Undeclared exception!
    try {
        partial0.withFieldAdded(durationFieldType0, (-603));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Maximum value exceeded for add
        //
        verifyException(""org.joda.time.field.BaseDateTimeField"", e);
    }
}",0,
project,0,test08896,"public void test08896() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
    Partial partial0 = new Partial(dateTimeFieldType0, 2881);
    Partial partial1 = partial0.withField(dateTimeFieldType0, 2881);
    assertSame(partial1, partial0);
}",0,
project,0,test08997,"public void test08997() throws Throwable {
    DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
    DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
    doReturn(52).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class), anyString(), anyInt());
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
    LocalDateTime localDateTime0 = LocalDateTime.parse("""", dateTimeFormatter0);
    Partial partial0 = new Partial(localDateTime0);
    DateTimeFieldType dateTimeFieldType0 = partial0.getFieldType(0);
    Partial partial1 = partial0.withField(dateTimeFieldType0, 0);
    boolean boolean0 = partial0.isMatch((ReadablePartial) partial1);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test09098,"public void test09098() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
    Partial partial0 = new Partial(dateTimeFieldType0, 2881);
    Partial partial1 = partial0.without(dateTimeFieldType0);
    assertEquals(0, partial1.size());
}",0,"assertEquals(0, partial1.size())"
project,0,test09199,"public void test09199() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
    Partial partial0 = new Partial(dateTimeFieldType0, 2881);
    DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.yearOfEra();
    Partial partial1 = partial0.without(dateTimeFieldType1);
    assertEquals(1, partial1.size());
}",0,
project,0,test092100,"public void test092100() throws Throwable {
    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
    DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[4];
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
    dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
    int[] intArray0 = new int[1];
    intArray0[0] = (-1964);
    Partial partial0 = new Partial(gregorianChronology0, dateTimeFieldTypeArray0, intArray0);
    Partial partial1 = partial0.with(dateTimeFieldType0, (-1964));
    assertSame(partial0, partial1);
}",0,
project,0,test093101,"public void test093101() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
    DateTime dateTime0 = new DateTime();
    LocalDate localDate0 = dateTime0.toLocalDate();
    Partial partial0 = new Partial(localDate0);
    // Undeclared exception!
    try {
        partial0.with(dateTimeFieldType0, 1);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.Partial"", e);
    }
}",0,
project,0,test094102,"public void test094102() throws Throwable {
    DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[5];
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
    dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
    DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.weekOfWeekyear();
    dateTimeFieldTypeArray0[3] = dateTimeFieldType1;
    Partial partial0 = new Partial(dateTimeFieldTypeArray0[0], 1, (Chronology) null);
    // Undeclared exception!
    try {
        partial0.with(dateTimeFieldTypeArray0[3], 543);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value 543 for weekOfWeekyear must not be larger than 53
        //
        verifyException(""org.joda.time.chrono.BaseChronology"", e);
    }
}",0,
project,0,test095103,"public void test095103() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
    Partial partial0 = new Partial();
    // Undeclared exception!
    try {
        partial0.with(dateTimeFieldType0, 8);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value 8 for era must not be larger than 1
        //
        verifyException(""org.joda.time.chrono.BaseChronology"", e);
    }
}",0,
project,0,test096104,"public void test096104() throws Throwable {
    Partial partial0 = new Partial();
    // Undeclared exception!
    try {
        partial0.with((DateTimeFieldType) null, 2355);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The field type must not be null
        //
        verifyException(""org.joda.time.Partial"", e);
    }
}",0,
project,0,test097105,"public void test097105() throws Throwable {
    MockDate mockDate0 = new MockDate(2066, 11, 2284, 91, 11);
    LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
    Partial partial0 = new Partial(localDate0);
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
    Partial partial1 = partial0.with(dateTimeFieldType0, 2066);
    assertEquals(4, partial1.size());
}",0,
project,0,test098106,"public void test098106() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
    Partial partial0 = new Partial(dateTimeFieldType0, 93);
    ISOChronology iSOChronology0 = ISOChronology.getInstance();
    Partial partial1 = partial0.withChronologyRetainFields(iSOChronology0);
    assertSame(partial1, partial0);
}",0,
project,0,test099107,"public void test099107() throws Throwable {
    Partial partial0 = new Partial();
    assertEquals(0, partial0.size());
}",0,"assertEquals(0, partial0.size())"
project,0,test099108,"public void test099108() throws Throwable {
    Partial partial0 = new Partial();
    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
    LenientChronology lenientChronology0 = LenientChronology.getInstance(gregorianChronology0);
    Partial partial1 = partial0.withChronologyRetainFields(lenientChronology0);
    assertNotSame(partial1, partial0);
}",0,
project,0,test100109,"public void test100109() throws Throwable {
    Partial partial0 = null;
    try {
        partial0 = new Partial((ReadablePartial) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The partial must not be null
        //
        verifyException(""org.joda.time.Partial"", e);
    }
}",0,
project,0,test101110,"public void test101110() throws Throwable {
    DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[6];
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
    dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
    DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.yearOfCentury();
    dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
    DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.dayOfYear();
    dateTimeFieldTypeArray0[2] = dateTimeFieldType2;
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(543);
    ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
    DateTimeFieldType dateTimeFieldType3 = DateTimeFieldType.dayOfWeek();
    dateTimeFieldTypeArray0[3] = dateTimeFieldType3;
    dateTimeFieldTypeArray0[4] = dateTimeFieldType3;
    dateTimeFieldTypeArray0[5] = dateTimeFieldTypeArray0[1];
    int[] intArray0 = new int[6];
    Partial partial0 = null;
    try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, iSOChronology0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Types array must not contain duplicate: dayOfWeek
        //
        verifyException(""org.joda.time.Partial"", e);
    }
}",0,
project,0,test102111,"public void test102111() throws Throwable {
    DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[9];
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
    dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
    DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.hourOfDay();
    dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
    dateTimeFieldTypeArray0[2] = dateTimeFieldType1;
    dateTimeFieldTypeArray0[3] = dateTimeFieldTypeArray0[0];
    dateTimeFieldTypeArray0[4] = dateTimeFieldTypeArray0[1];
    dateTimeFieldTypeArray0[5] = dateTimeFieldTypeArray0[4];
    dateTimeFieldTypeArray0[6] = dateTimeFieldType0;
    dateTimeFieldTypeArray0[7] = dateTimeFieldTypeArray0[5];
    dateTimeFieldTypeArray0[8] = dateTimeFieldTypeArray0[0];
    int[] intArray0 = new int[9];
    Partial partial0 = null;
    try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, (Chronology) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Types array must be in order largest-smallest: clockhourOfHalfday < hourOfDay
        //
        verifyException(""org.joda.time.Partial"", e);
    }
}",0,
project,0,test103112,"public void test103112() throws Throwable {
    DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[6];
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
    dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
    DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.yearOfCentury();
    dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
    dateTimeFieldTypeArray0[2] = dateTimeFieldType0;
    dateTimeFieldTypeArray0[3] = dateTimeFieldTypeArray0[2];
    dateTimeFieldTypeArray0[4] = dateTimeFieldTypeArray0[2];
    dateTimeFieldTypeArray0[5] = dateTimeFieldTypeArray0[0];
    int[] intArray0 = new int[6];
    Partial partial0 = null;
    try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Types array must be in order largest-smallest: yearOfCentury < weekyear
        //
        verifyException(""org.joda.time.Partial"", e);
    }
}",0,
project,0,test104113,"public void test104113() throws Throwable {
    DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
    dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
    DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.era();
    dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
    int[] intArray0 = new int[2];
    Partial partial0 = null;
    try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Types array must be in order largest-smallest: centuryOfEra < era
        //
        verifyException(""org.joda.time.Partial"", e);
    }
}",0,
project,0,test105114,"public void test105114() throws Throwable {
    DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
    dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
    DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.weekyearOfCentury();
    dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
    int[] intArray0 = new int[2];
    Partial partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
    assertEquals(2, partial0.size());
}",0,"assertEquals(0, partial0.size())"
project,0,test106115,"public void test106115() throws Throwable {
    DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[0];
    int[] intArray0 = new int[0];
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
    Partial partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, copticChronology0);
    // Undeclared exception!
    try {
        partial0.isMatch((ReadablePartial) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The partial must not be null
        //
        verifyException(""org.joda.time.Partial"", e);
    }
}",0,
project,0,test107116,"public void test107116() throws Throwable {
    Partial partial0 = null;
    try {
        partial0 = new Partial((DateTimeFieldType) null, 74);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The field type must not be null
        //
        verifyException(""org.joda.time.Partial"", e);
    }
}",1,
project,0,test111120,"public void test111120() throws Throwable {
    Partial partial0 = new Partial();
    Partial.Property partial_Property0 = new Partial.Property(partial0, (-447));
    Partial partial1 = partial_Property0.getPartial();
    assertEquals(0, partial1.size());
}",0,"assertEquals(0, partial1.size())"
project,0,test112121,"public void test112121() throws Throwable {
    DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
    DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
    doReturn(52).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class), anyString(), anyInt());
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
    LocalDateTime localDateTime0 = LocalDateTime.parse("""", dateTimeFormatter0);
    Partial partial0 = new Partial(localDateTime0);
    DateTimeFieldType[] dateTimeFieldTypeArray0 = partial0.getFieldTypes();
    assertEquals(4, dateTimeFieldTypeArray0.length);
}",0,
project,0,test113122,"public void test113122() throws Throwable {
    DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[5];
    int[] intArray0 = new int[5];
    Partial partial0 = new Partial((Chronology) null, dateTimeFieldTypeArray0, intArray0);
    Hours hours0 = Hours.SIX;
    Duration duration0 = hours0.toStandardDuration();
    MutableDateTime mutableDateTime0 = new MutableDateTime(0L, (Chronology) null);
    DateTime dateTime0 = mutableDateTime0.toDateTimeISO();
    PeriodType periodType0 = PeriodType.days();
    MutablePeriod mutablePeriod0 = new MutablePeriod(duration0, dateTime0, periodType0);
    // Undeclared exception!
    try {
        partial0.minus(mutablePeriod0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test116125,"public void test116125() throws Throwable {
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
    Partial partial0 = new Partial(buddhistChronology0, (DateTimeFieldType[]) null, (int[]) null);
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
    // Undeclared exception!
    try {
        partial0.property(dateTimeFieldType0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
