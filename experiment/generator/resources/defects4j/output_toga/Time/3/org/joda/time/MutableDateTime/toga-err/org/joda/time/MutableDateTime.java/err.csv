org.joda.time.MutableDateTime,@Test(timeout = 4000)
public void test0022() throws Throwable {
    MutableDateTime mutableDateTime0 = new MutableDateTime();
    mutableDateTime0.addSeconds(0);
    mutableDateTime0.getMillis();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.MutableDateTime,@Test(timeout = 4000)
public void test0033() throws Throwable {
    MutableDateTime mutableDateTime0 = new MutableDateTime();
    mutableDateTime0.addMinutes((-1886));
    mutableDateTime0.getMillis();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.MutableDateTime,@Test(timeout = 4000)
public void test0044() throws Throwable {
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
    MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) buddhistChronology0);
    mutableDateTime0.addDays(1);
    mutableDateTime0.getMillis();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.MutableDateTime,@Test(timeout = 4000)
public void test0055() throws Throwable {
    MutableDateTime mutableDateTime0 = new MutableDateTime((-373L));
    mutableDateTime0.addMonths(1);
    mutableDateTime0.getMillis();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.MutableDateTime,@Test(timeout = 4000)
public void test0066() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    Instant instant0 = gJChronology0.getGregorianCutover();
    MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
    mutableDateTime0.addWeekyears(3);
    mutableDateTime0.getMillis();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.MutableDateTime,@Test(timeout = 4000)
public void test0077() throws Throwable {
    MutableDateTime mutableDateTime0 = new MutableDateTime();
    mutableDateTime0.setWeekyear(3230);
    mutableDateTime0.getMillis();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.MutableDateTime,@Test(timeout = 4000)
public void test0088() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2558);
    MutableDateTime mutableDateTime0 = new MutableDateTime(0L, dateTimeZone0);
    MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.millisOfDay();
    Locale locale0 = Locale.PRC;
    mutableDateTime_Property0.set("""", locale0);
},ERROR,java.nio.file.NoSuchFileException,/home/star_usit_group/tratto/experiment/generator/resources/defects4j/temp/Time_3b/src/main/java/org/joda/time/MutableDateTime/Property.java
org.joda.time.MutableDateTime,@Test(timeout = 4000)
public void test0099() throws Throwable {
    MutableDateTime mutableDateTime0 = MutableDateTime.now();
    MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.era();
    long long0 = mutableDateTime_Property0.getMillis();
},ERROR,java.nio.file.NoSuchFileException,/home/star_usit_group/tratto/experiment/generator/resources/defects4j/temp/Time_3b/src/main/java/org/joda/time/MutableDateTime/Property.java
org.joda.time.MutableDateTime,@Test(timeout = 4000)
public void test01010() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    MutableDateTime mutableDateTime0 = new MutableDateTime((-1L), (Chronology) gJChronology0);
    MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.millisOfSecond();
    DateTimeField dateTimeField0 = mutableDateTime_Property0.getField();
},ERROR,java.nio.file.NoSuchFileException,/home/star_usit_group/tratto/experiment/generator/resources/defects4j/temp/Time_3b/src/main/java/org/joda/time/MutableDateTime/Property.java
org.joda.time.MutableDateTime,@Test(timeout = 4000)
public void test01213() throws Throwable {
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
    MutableDateTime mutableDateTime0 = new MutableDateTime((-52L), (Chronology) islamicChronology0);
    mutableDateTime0.setTime(1, 1, 1, 1);
    mutableDateTime0.getMillis();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.MutableDateTime,@Test(timeout = 4000)
public void test01314() throws Throwable {
    MutableDateTime mutableDateTime0 = MutableDateTime.now();
    mutableDateTime0.setSecondOfDay(2247);
    mutableDateTime0.getMillis();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.MutableDateTime,@Test(timeout = 4000)
public void test01415() throws Throwable {
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) fixedDateTimeZone0);
    mutableDateTime0.setMonthOfYear(4);
    mutableDateTime0.getMillis();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.MutableDateTime,@Test(timeout = 4000)
public void test01516() throws Throwable {
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
    MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) buddhistChronology0);
    mutableDateTime0.setDayOfMonth(1);
    mutableDateTime0.getMillis();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.MutableDateTime,@Test(timeout = 4000)
public void test01718() throws Throwable {
    DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
    DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
    doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class), anyString(), anyInt());
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(10125000);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
    MutableDateTime mutableDateTime0 = MutableDateTime.parse("""", dateTimeFormatter1);
    mutableDateTime0.getMillis();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.MutableDateTime,@Test(timeout = 4000)
public void test01819() throws Throwable {
    MutableDateTime mutableDateTime0 = MutableDateTime.parse(""2014-02-17T08:00:00.000Z"");
    mutableDateTime0.getMillis();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.MutableDateTime,@Test(timeout = 4000)
public void test02526() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
    MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) ethiopicChronology0);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
    DateTimeField dateTimeField0 = buddhistChronology0.weekOfWeekyear();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
    OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1, 1, 1);
    mutableDateTime0.setRounding((DateTimeField) offsetDateTimeField0, 1);
    mutableDateTime0.copy();
    mutableDateTime0.getMillis();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.MutableDateTime,@Test(timeout = 4000)
public void test04950() throws Throwable {
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) fixedDateTimeZone0);
    Period period0 = Period.weeks((-1140));
    mutableDateTime0.add((ReadablePeriod) period0, 0);
    mutableDateTime0.getMillis();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.MutableDateTime,@Test(timeout = 4000)
public void test05051() throws Throwable {
    MutableDateTime mutableDateTime0 = new MutableDateTime((-1399L));
    Duration duration0 = new Duration(0L, 3);
    mutableDateTime0.add((ReadableDuration) duration0, 5);
    mutableDateTime0.getMillis();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.MutableDateTime,@Test(timeout = 4000)
public void test05152() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    Instant instant0 = gJChronology0.getGregorianCutover();
    MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
    mutableDateTime0.setMillis((long) 60000);
    mutableDateTime0.getMillis();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.MutableDateTime,@Test(timeout = 4000)
public void test05354() throws Throwable {
    DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
    DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
    doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class), anyString(), anyInt());
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
    MutableDateTime mutableDateTime0 = MutableDateTime.parse("""", dateTimeFormatter0);
    mutableDateTime0.addMillis((-804));
    mutableDateTime0.getMillis();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.MutableDateTime,@Test(timeout = 4000)
public void test05556() throws Throwable {
    MutableDateTime mutableDateTime0 = new MutableDateTime((Object) null);
    mutableDateTime0.setWeekyear(0);
    mutableDateTime0.getMillis();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.MutableDateTime,@Test(timeout = 4000)
public void test05657() throws Throwable {
    Instant instant0 = new Instant();
    MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
    mutableDateTime0.add(1968L);
    mutableDateTime0.getMillis();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.MutableDateTime,@Test(timeout = 4000)
public void test06061() throws Throwable {
    MutableDateTime mutableDateTime0 = MutableDateTime.now();
    mutableDateTime0.setTime((ReadableInstant) null);
    mutableDateTime0.getMillis();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.MutableDateTime,@Test(timeout = 4000)
public void test06162() throws Throwable {
    MutableDateTime mutableDateTime0 = MutableDateTime.now();
    mutableDateTime0.setDate((ReadableInstant) mutableDateTime0);
    mutableDateTime0.getMillis();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.MutableDateTime,@Test(timeout = 4000)
public void test06263() throws Throwable {
    MutableDateTime mutableDateTime0 = MutableDateTime.now();
    mutableDateTime0.setDate((ReadableInstant) null);
    mutableDateTime0.getMillis();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.MutableDateTime,@Test(timeout = 4000)
public void test06465() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
    IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
    MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) islamicChronology0);
    DurationFieldType durationFieldType0 = DurationFieldType.DAYS_TYPE;
    mutableDateTime0.add(durationFieldType0, 1);
    mutableDateTime0.getMillis();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.MutableDateTime,@Test(timeout = 4000)
public void test06667() throws Throwable {
    MutableDateTime mutableDateTime0 = MutableDateTime.now();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
    mutableDateTime0.set(dateTimeFieldType0, 24);
    mutableDateTime0.getMillis();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.MutableDateTime,@Test(timeout = 4000)
public void test06768() throws Throwable {
    MutableDateTime mutableDateTime0 = new MutableDateTime();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(3, 2);
    CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0, 1);
    MutableDateTime mutableDateTime1 = mutableDateTime0.toMutableDateTime((Chronology) copticChronology0);
    mutableDateTime1.setZoneRetainFields((DateTimeZone) null);
    mutableDateTime1.getMillis();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.MutableDateTime,@Test(timeout = 4000)
public void test06869() throws Throwable {
    MutableDateTime mutableDateTime0 = MutableDateTime.now();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(5, 4);
    mutableDateTime0.setZone(dateTimeZone0);
    mutableDateTime0.setZoneRetainFields(dateTimeZone0);
    mutableDateTime0.getMillis();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.MutableDateTime,@Test(timeout = 4000)
public void test07374() throws Throwable {
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) fixedDateTimeZone0);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
    DateTimeField dateTimeField0 = buddhistChronology0.weekOfWeekyear();
    mutableDateTime0.setRounding(dateTimeField0, 4);
    mutableDateTime0.getMillis();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.MutableDateTime,@Test(timeout = 4000)
public void test07576() throws Throwable {
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) fixedDateTimeZone0);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
    DateTimeField dateTimeField0 = buddhistChronology0.monthOfYear();
    mutableDateTime0.setRounding(dateTimeField0, 2);
    mutableDateTime0.setMillis((long) 4);
    mutableDateTime0.getMillis();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.MutableDateTime,@Test(timeout = 4000)
public void test07677() throws Throwable {
    MutableDateTime mutableDateTime0 = MutableDateTime.now();
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
    DateTimeField dateTimeField0 = buddhistChronology0.dayOfMonth();
    mutableDateTime0.setRounding(dateTimeField0, 0);
    mutableDateTime0.getMillis();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.MutableDateTime,@Test(timeout = 4000)
public void test07981() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    MutableDateTime mutableDateTime0 = new MutableDateTime(dateTimeZone0);
    mutableDateTime0.setRounding((DateTimeField) null, (-1703));
    mutableDateTime0.getMillis();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.MutableDateTime,@Test(timeout = 4000)
public void test08588() throws Throwable {
    MutableDateTime mutableDateTime0 = new MutableDateTime();
    mutableDateTime0.setMinuteOfHour(2);
    mutableDateTime0.getMillis();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.MutableDateTime,@Test(timeout = 4000)
public void test08689() throws Throwable {
    MutableDateTime mutableDateTime0 = new MutableDateTime((-1399L));
    mutableDateTime0.addWeeks((-1269));
    mutableDateTime0.getMillis();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.MutableDateTime,@Test(timeout = 4000)
public void test08891() throws Throwable {
    MutableDateTime mutableDateTime0 = new MutableDateTime();
    mutableDateTime0.addMonths(0);
    mutableDateTime0.getMillis();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.MutableDateTime,@Test(timeout = 4000)
public void test08992() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
    IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
    MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) islamicChronology0);
    mutableDateTime0.setMillis((ReadableInstant) mutableDateTime0);
    mutableDateTime0.getMillis();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.MutableDateTime,@Test(timeout = 4000)
public void test09093() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
    MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) ethiopicChronology0);
    mutableDateTime0.setWeekOfWeekyear(1);
    mutableDateTime0.getMillis();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.MutableDateTime,@Test(timeout = 4000)
public void test09699() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
    IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
    MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) islamicChronology0);
    mutableDateTime0.setDayOfYear(5);
    mutableDateTime0.getMillis();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.MutableDateTime,@Test(timeout = 4000)
public void test097100() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
    IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
    MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) islamicChronology0);
    Duration duration0 = Duration.standardMinutes((-549L));
    mutableDateTime0.add((ReadableDuration) duration0);
    mutableDateTime0.getMillis();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.MutableDateTime,@Test(timeout = 4000)
public void test099102() throws Throwable {
    MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
    mutableDateTime0.setTime((long) 0);
    mutableDateTime0.getMillis();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.MutableDateTime,@Test(timeout = 4000)
public void test100103() throws Throwable {
    MutableDateTime mutableDateTime0 = MutableDateTime.now();
    mutableDateTime0.setHourOfDay(2);
    mutableDateTime0.getMillis();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.MutableDateTime,@Test(timeout = 4000)
public void test101104() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
    MutableDateTime mutableDateTime0 = new MutableDateTime(0L, dateTimeZone0);
    mutableDateTime0.setMillisOfSecond(143);
    mutableDateTime0.getMillis();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.MutableDateTime,@Test(timeout = 4000)
public void test103106() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
    MutableDateTime mutableDateTime0 = new MutableDateTime(0L, dateTimeZone0);
    mutableDateTime0.setMillisOfDay(2670);
    mutableDateTime0.getMillis();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.MutableDateTime,@Test(timeout = 4000)
public void test106109() throws Throwable {
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) fixedDateTimeZone0);
    mutableDateTime0.setDayOfWeek(4);
    mutableDateTime0.getMillis();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.MutableDateTime,@Test(timeout = 4000)
public void test108111() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
    IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
    MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) islamicChronology0);
    mutableDateTime0.setSecondOfMinute(0);
    mutableDateTime0.getMillis();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.MutableDateTime,@Test(timeout = 4000)
public void test109112() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
    IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
    MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) islamicChronology0);
    mutableDateTime0.setMinuteOfDay(0);
    mutableDateTime0.getMillis();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.MutableDateTime,@Test(timeout = 4000)
public void test110113() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
    IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
    MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) islamicChronology0);
    mutableDateTime0.setDate(5, 2, 4);
    mutableDateTime0.getMillis();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.MutableDateTime,@Test(timeout = 4000)
public void test112115() throws Throwable {
    MutableDateTime mutableDateTime0 = MutableDateTime.now();
    mutableDateTime0.addSeconds(1);
    mutableDateTime0.getMillis();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.MutableDateTime,@Test(timeout = 4000)
public void test113116() throws Throwable {
    MutableDateTime mutableDateTime0 = new MutableDateTime(2, 1, 5, 1, 5, 1, 1);
    mutableDateTime0.getMillis();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.MutableDateTime,@Test(timeout = 4000)
public void test114117() throws Throwable {
    MutableDateTime mutableDateTime0 = new MutableDateTime((Object) null, (Chronology) null);
    mutableDateTime0.getMillis();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.MutableDateTime,@Test(timeout = 4000)
public void test115118() throws Throwable {
    MutableDateTime mutableDateTime0 = MutableDateTime.now();
    mutableDateTime0.addHours((-553));
    mutableDateTime0.getMillis();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.MutableDateTime,@Test(timeout = 4000)
public void test117120() throws Throwable {
    MutableDateTime mutableDateTime0 = MutableDateTime.now();
    Minutes minutes0 = Minutes.ZERO;
    mutableDateTime0.add((ReadablePeriod) minutes0);
    mutableDateTime0.getMillis();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.MutableDateTime,@Test(timeout = 4000)
public void test120123() throws Throwable {
    MutableDateTime mutableDateTime0 = MutableDateTime.now();
    mutableDateTime0.addYears(529);
    mutableDateTime0.getMillis();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.MutableDateTime,@Test(timeout = 4000)
public void test128131() throws Throwable {
    MutableDateTime mutableDateTime0 = MutableDateTime.now();
    mutableDateTime0.addDays(0);
    mutableDateTime0.getMillis();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.MutableDateTime,@Test(timeout = 4000)
public void test130133() throws Throwable {
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
    MutableDateTime mutableDateTime0 = new MutableDateTime((-52L), (Chronology) islamicChronology0);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    DateTimeField dateTimeField0 = buddhistChronology0.weekOfWeekyear();
    mutableDateTime0.setRounding(dateTimeField0);
    int int0 = mutableDateTime0.getRoundingMode();
    mutableDateTime0.getMillis();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.MutableDateTime,@Test(timeout = 4000)
public void test131135() throws Throwable {
    MutableDateTime mutableDateTime0 = MutableDateTime.now();
    mutableDateTime0.setYear(529);
    mutableDateTime0.getMillis();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.MutableDateTime,@Test(timeout = 4000)
public void test133137() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    Instant instant0 = gJChronology0.getGregorianCutover();
    MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
    mutableDateTime0.addWeekyears(1);
    mutableDateTime0.getMillis();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.MutableDateTime,@Test(timeout = 4000)
public void test134138() throws Throwable {
    MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
    MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.minuteOfHour();
    MutableDateTime mutableDateTime1 = mutableDateTime_Property0.roundHalfCeiling();
},ERROR,java.nio.file.NoSuchFileException,/home/star_usit_group/tratto/experiment/generator/resources/defects4j/temp/Time_3b/src/main/java/org/joda/time/MutableDateTime/Property.java
org.joda.time.MutableDateTime,@Test(timeout = 4000)
public void test135139() throws Throwable {
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) fixedDateTimeZone0);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
    DateTimeField dateTimeField0 = buddhistChronology0.weekOfWeekyear();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
    DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 5);
    MutableDateTime.Property mutableDateTime_Property0 = new MutableDateTime.Property(mutableDateTime0, dividedDateTimeField0);
    mutableDateTime_Property0.addWrapField(1);
    mutableDateTime0.getMillis();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.MutableDateTime,@Test(timeout = 4000)
public void test136140() throws Throwable {
    MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
    MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.minuteOfHour();
    MutableDateTime mutableDateTime1 = mutableDateTime_Property0.roundHalfFloor();
},ERROR,java.nio.file.NoSuchFileException,/home/star_usit_group/tratto/experiment/generator/resources/defects4j/temp/Time_3b/src/main/java/org/joda/time/MutableDateTime/Property.java
org.joda.time.MutableDateTime,@Test(timeout = 4000)
public void test137141() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
    IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
    MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) islamicChronology0);
    MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.minuteOfDay();
    mutableDateTime_Property0.add((long) 4);
    mutableDateTime0.getMillis();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.MutableDateTime,@Test(timeout = 4000)
public void test138142() throws Throwable {
    MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
    MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.minuteOfHour();
    MutableDateTime mutableDateTime1 = mutableDateTime_Property0.set(0);
    mutableDateTime1.getMillis();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.MutableDateTime,@Test(timeout = 4000)
public void test139143() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
    IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
    MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) islamicChronology0);
    MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.minuteOfDay();
    mutableDateTime_Property0.add((-3169));
    mutableDateTime0.getMillis();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.MutableDateTime,@Test(timeout = 4000)
public void test140144() throws Throwable {
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
    MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) islamicChronology0);
    MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.era();
    mutableDateTime_Property0.set(""~6;u``3"");
},ERROR,java.nio.file.NoSuchFileException,/home/star_usit_group/tratto/experiment/generator/resources/defects4j/temp/Time_3b/src/main/java/org/joda/time/MutableDateTime/Property.java
org.joda.time.MutableDateTime,@Test(timeout = 4000)
public void test141145() throws Throwable {
    MutableDateTime mutableDateTime0 = new MutableDateTime(0L, (DateTimeZone) null);
    MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.yearOfEra();
    Chronology chronology0 = mutableDateTime_Property0.getChronology();
},ERROR,java.nio.file.NoSuchFileException,/home/star_usit_group/tratto/experiment/generator/resources/defects4j/temp/Time_3b/src/main/java/org/joda/time/MutableDateTime/Property.java
org.joda.time.MutableDateTime,@Test(timeout = 4000)
public void test142146() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) gJChronology0);
    MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.millisOfDay();
    MutableDateTime mutableDateTime1 = mutableDateTime_Property0.roundFloor();
    mutableDateTime1.getMillis();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.joda.time.MutableDateTime,@Test(timeout = 4000)
public void test143147() throws Throwable {
    MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
    MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.minuteOfHour();
    MutableDateTime mutableDateTime1 = mutableDateTime_Property0.roundCeiling();
},ERROR,java.nio.file.NoSuchFileException,/home/star_usit_group/tratto/experiment/generator/resources/defects4j/temp/Time_3b/src/main/java/org/joda/time/MutableDateTime/Property.java
org.joda.time.MutableDateTime,@Test(timeout = 4000)
public void test144148() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
    IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
    MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) islamicChronology0);
    MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.minuteOfDay();
    MutableDateTime mutableDateTime1 = mutableDateTime_Property0.getMutableDateTime();
},ERROR,java.nio.file.NoSuchFileException,/home/star_usit_group/tratto/experiment/generator/resources/defects4j/temp/Time_3b/src/main/java/org/joda/time/MutableDateTime/Property.java
org.joda.time.MutableDateTime,@Test(timeout = 4000)
public void test145149() throws Throwable {
    MutableDateTime mutableDateTime0 = new MutableDateTime(4294967295L);
    MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.dayOfWeek();
    mutableDateTime_Property0.roundHalfEven();
    mutableDateTime0.getMillis();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
