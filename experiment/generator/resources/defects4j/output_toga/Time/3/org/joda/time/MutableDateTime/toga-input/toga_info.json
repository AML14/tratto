{
  "test08891" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08891() throws Throwable {\n    MutableDateTime mutableDateTime0 = new MutableDateTime();\n    mutableDateTime0.addMonths(0);\n    mutableDateTime0.getMillis();\n}",
    "testName" : "test08891"
  },
  "test118121" : {
    "methodSignature" : "public Property centuryOfEra()",
    "methodName" : "centuryOfEra",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test118121() throws Throwable {\n    MutableDateTime mutableDateTime0 = MutableDateTime.now();\n    MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.centuryOfEra();\n}",
    "testName" : "test118121"
  },
  "test124127" : {
    "methodSignature" : "public Property weekOfWeekyear()",
    "methodName" : "weekOfWeekyear",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test124127() throws Throwable {\n    MutableDateTime mutableDateTime0 = new MutableDateTime(0L);\n    MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.weekOfWeekyear();\n}",
    "testName" : "test124127"
  },
  "test0000" : {
    "methodSignature" : "public void setDateTime(final int year, final int monthOfYear, final int dayOfMonth, final int hourOfDay, final int minuteOfHour, final int secondOfMinute, final int millisOfSecond)",
    "methodName" : "setDateTime",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0000() throws Throwable {\n    MutableDateTime mutableDateTime0 = new MutableDateTime();\n    mutableDateTime0.setDateTime(0, 0, (-1302), 5, (-1794), (-134), 2735);\n}",
    "testName" : "test0000"
  },
  "test02425" : {
    "methodSignature" : "public int getRoundingMode()",
    "methodName" : "getRoundingMode",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02425() throws Throwable {\n    TimeZone timeZone0 = TimeZone.getDefault();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);\n    MutableDateTime mutableDateTime0 = new MutableDateTime(0L, dateTimeZone0);\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);\n    DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();\n    mutableDateTime0.setRounding(dateTimeField0, 3);\n    mutableDateTime0.getRoundingField();\n    mutableDateTime0.getRoundingMode();\n}",
    "testName" : "test02425"
  },
  "test03637" : {
    "methodSignature" : "public void setDayOfYear(final int dayOfYear)",
    "methodName" : "setDayOfYear",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03637() throws Throwable {\n    MutableDateTime mutableDateTime0 = MutableDateTime.now();\n    mutableDateTime0.setDayOfYear(0);\n}",
    "testName" : "test03637"
  },
  "test01213" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01213() throws Throwable {\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) fixedDateTimeZone0);\n    MutableDateTime mutableDateTime0 = new MutableDateTime((-52L), (Chronology) islamicChronology0);\n    mutableDateTime0.setTime(1, 1, 1, 1);\n    mutableDateTime0.getMillis();\n}",
    "testName" : "test01213"
  },
  "test04849" : {
    "methodSignature" : "public MutableDateTime(int year, int monthOfYear, int dayOfMonth, int hourOfDay, int minuteOfHour, int secondOfMinute, int millisOfSecond)",
    "methodName" : "MutableDateTime",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04849() throws Throwable {\n    MutableDateTime mutableDateTime0 = null;\n    mutableDateTime0 = new MutableDateTime(58, 2034, 2034, 0, 64, (-2939), 0);\n}",
    "testName" : "test04849"
  },
  "test097100" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test097100() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);\n    IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);\n    MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) islamicChronology0);\n    Duration duration0 = Duration.standardMinutes((-549L));\n    mutableDateTime0.add((ReadableDuration) duration0);\n    mutableDateTime0.getMillis();\n}",
    "testName" : "test097100"
  },
  "test129132" : {
    "methodSignature" : "public void setChronology(Chronology chronology)",
    "methodName" : "setChronology",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test129132() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);\n    IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);\n    MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) islamicChronology0);\n    mutableDateTime0.setChronology(islamicChronology0);\n}",
    "testName" : "test129132"
  },
  "test05657" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05657() throws Throwable {\n    Instant instant0 = new Instant();\n    MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();\n    mutableDateTime0.add(1968L);\n    mutableDateTime0.getMillis();\n}",
    "testName" : "test05657"
  },
  "test130134" : {
    "methodSignature" : "public int getRoundingMode()",
    "methodName" : "getRoundingMode",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test130134() throws Throwable {\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();\n    MutableDateTime mutableDateTime0 = new MutableDateTime((-52L), (Chronology) islamicChronology0);\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();\n    DateTimeField dateTimeField0 = buddhistChronology0.weekOfWeekyear();\n    mutableDateTime0.setRounding(dateTimeField0);\n    int int0 = mutableDateTime0.getRoundingMode();\n}",
    "testName" : "test130134"
  },
  "test06869" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06869() throws Throwable {\n    MutableDateTime mutableDateTime0 = MutableDateTime.now();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(5, 4);\n    mutableDateTime0.setZone(dateTimeZone0);\n    mutableDateTime0.setZoneRetainFields(dateTimeZone0);\n    mutableDateTime0.getMillis();\n}",
    "testName" : "test06869"
  },
  "test130133" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test130133() throws Throwable {\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();\n    MutableDateTime mutableDateTime0 = new MutableDateTime((-52L), (Chronology) islamicChronology0);\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();\n    DateTimeField dateTimeField0 = buddhistChronology0.weekOfWeekyear();\n    mutableDateTime0.setRounding(dateTimeField0);\n    int int0 = mutableDateTime0.getRoundingMode();\n    mutableDateTime0.getMillis();\n}",
    "testName" : "test130133"
  },
  "test02829" : {
    "methodSignature" : "public void setWeekOfWeekyear(final int weekOfWeekyear)",
    "methodName" : "setWeekOfWeekyear",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02829() throws Throwable {\n    MutableDateTime mutableDateTime0 = new MutableDateTime();\n    mutableDateTime0.setWeekOfWeekyear(317);\n}",
    "testName" : "test02829"
  },
  "test01617" : {
    "methodSignature" : "public static MutableDateTime parse(String str, DateTimeFormatter formatter)",
    "methodName" : "parse",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01617() throws Throwable {\n    DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());\n    DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());\n    doReturn(236).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class), anyString(), anyInt());\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();\n    MutableDateTime mutableDateTime0 = MutableDateTime.parse(\"\", dateTimeFormatter1);\n}",
    "testName" : "test01617"
  },
  "test113116" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test113116() throws Throwable {\n    MutableDateTime mutableDateTime0 = new MutableDateTime(2, 1, 5, 1, 5, 1, 1);\n    mutableDateTime0.getMillis();\n}",
    "testName" : "test113116"
  },
  "test07273" : {
    "methodSignature" : "public int getRoundingMode()",
    "methodName" : "getRoundingMode",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07273() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstanceUTC();\n    Instant instant0 = gJChronology0.getGregorianCutover();\n    MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();\n    DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();\n    DateTimeField dateTimeField1 = LenientDateTimeField.getInstance(dateTimeField0, buddhistChronology0);\n    mutableDateTime0.setRounding(dateTimeField1, 5);\n    mutableDateTime0.getRoundingMode();\n}",
    "testName" : "test07273"
  },
  "test04041" : {
    "methodSignature" : "public void set(DateTimeFieldType type, int value)",
    "methodName" : "set",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04041() throws Throwable {\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) fixedDateTimeZone0);\n    MutableDateTime mutableDateTime0 = new MutableDateTime((-52L), (Chronology) islamicChronology0);\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();\n    mutableDateTime0.set(dateTimeFieldType0, (-3650));\n}",
    "testName" : "test04041"
  },
  "test121124" : {
    "methodSignature" : "public Object clone()",
    "methodName" : "clone",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test121124() throws Throwable {\n    MutableDateTime mutableDateTime0 = new MutableDateTime(0L);\n    MutableDateTime mutableDateTime1 = (MutableDateTime) mutableDateTime0.clone();\n}",
    "testName" : "test121124"
  },
  "test09295" : {
    "methodSignature" : "public Property monthOfYear()",
    "methodName" : "monthOfYear",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test09295() throws Throwable {\n    MutableDateTime mutableDateTime0 = new MutableDateTime(0L);\n    MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.monthOfYear();\n}",
    "testName" : "test09295"
  },
  "test0011" : {
    "methodSignature" : "public void setDateTime(final int year, final int monthOfYear, final int dayOfMonth, final int hourOfDay, final int minuteOfHour, final int secondOfMinute, final int millisOfSecond)",
    "methodName" : "setDateTime",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0011() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    MutableDateTime mutableDateTime0 = MutableDateTime.now(dateTimeZone0);\n    mutableDateTime0.setDateTime(1, (-529), 4, 1, 0, 2892, 0);\n}",
    "testName" : "test0011"
  },
  "test06061" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06061() throws Throwable {\n    MutableDateTime mutableDateTime0 = MutableDateTime.now();\n    mutableDateTime0.setTime((ReadableInstant) null);\n    mutableDateTime0.getMillis();\n}",
    "testName" : "test06061"
  },
  "test08083" : {
    "methodSignature" : "public static MutableDateTime now(Chronology chronology)",
    "methodName" : "now",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08083() throws Throwable {\n    MutableDateTime.now((Chronology) null);\n}",
    "testName" : "test08083"
  },
  "test02021" : {
    "methodSignature" : "public static MutableDateTime now(Chronology chronology)",
    "methodName" : "now",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02021() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);\n    CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0, 1);\n    DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());\n    doReturn(0L).when(dateTimeUtils_MillisProvider0).getMillis();\n    DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);\n    MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) copticChronology0);\n}",
    "testName" : "test02021"
  },
  "test07678" : {
    "methodSignature" : "public int getRoundingMode()",
    "methodName" : "getRoundingMode",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07678() throws Throwable {\n    MutableDateTime mutableDateTime0 = MutableDateTime.now();\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();\n    DateTimeField dateTimeField0 = buddhistChronology0.dayOfMonth();\n    mutableDateTime0.setRounding(dateTimeField0, 0);\n    mutableDateTime0.getRoundingMode();\n}",
    "testName" : "test07678"
  },
  "test03233" : {
    "methodSignature" : "public void setMinuteOfDay(final int minuteOfDay)",
    "methodName" : "setMinuteOfDay",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03233() throws Throwable {\n    MutableDateTime mutableDateTime0 = new MutableDateTime(0L);\n    mutableDateTime0.setMinuteOfDay((-395));\n}",
    "testName" : "test03233"
  },
  "test04445" : {
    "methodSignature" : "public static MutableDateTime parse(String str)",
    "methodName" : "parse",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04445() throws Throwable {\n    MutableDateTime.parse((String) null);\n}",
    "testName" : "test04445"
  },
  "test07677" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07677() throws Throwable {\n    MutableDateTime mutableDateTime0 = MutableDateTime.now();\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();\n    DateTimeField dateTimeField0 = buddhistChronology0.dayOfMonth();\n    mutableDateTime0.setRounding(dateTimeField0, 0);\n    mutableDateTime0.getMillis();\n}",
    "testName" : "test07677"
  },
  "test05253" : {
    "methodSignature" : "public MutableDateTime(Object instant, DateTimeZone zone)",
    "methodName" : "MutableDateTime",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05253() throws Throwable {\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();\n    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();\n    MutableDateTime mutableDateTime0 = new MutableDateTime((Object) null, dateTimeZone0);\n}",
    "testName" : "test05253"
  },
  "test138142" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test138142() throws Throwable {\n    MutableDateTime mutableDateTime0 = new MutableDateTime(0L);\n    MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.minuteOfHour();\n    MutableDateTime mutableDateTime1 = mutableDateTime_Property0.set(0);\n    mutableDateTime1.getMillis();\n}",
    "testName" : "test138142"
  },
  "test09699" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test09699() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);\n    IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);\n    MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) islamicChronology0);\n    mutableDateTime0.setDayOfYear(5);\n    mutableDateTime0.getMillis();\n}",
    "testName" : "test09699"
  },
  "test06465" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06465() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);\n    IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);\n    MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) islamicChronology0);\n    DurationFieldType durationFieldType0 = DurationFieldType.DAYS_TYPE;\n    mutableDateTime0.add(durationFieldType0, 1);\n    mutableDateTime0.getMillis();\n}",
    "testName" : "test06465"
  },
  "test08487" : {
    "methodSignature" : "public Property dayOfMonth()",
    "methodName" : "dayOfMonth",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08487() throws Throwable {\n    MutableDateTime mutableDateTime0 = new MutableDateTime((-1399L));\n    MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.dayOfMonth();\n}",
    "testName" : "test08487"
  },
  "test102105" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test102105() throws Throwable {\n    TimeZone timeZone0 = TimeZone.getDefault();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);\n    MutableDateTime mutableDateTime0 = new MutableDateTime(0L, dateTimeZone0);\n    String string0 = mutableDateTime0.toString();\n}",
    "testName" : "test102105"
  },
  "test02930" : {
    "methodSignature" : "public void setSecondOfMinute(final int secondOfMinute)",
    "methodName" : "setSecondOfMinute",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02930() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);\n    IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);\n    MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) islamicChronology0);\n    mutableDateTime0.setSecondOfMinute((-23));\n}",
    "testName" : "test02930"
  },
  "test110113" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test110113() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);\n    IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);\n    MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) islamicChronology0);\n    mutableDateTime0.setDate(5, 2, 4);\n    mutableDateTime0.getMillis();\n}",
    "testName" : "test110113"
  },
  "test133137" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test133137() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstanceUTC();\n    Instant instant0 = gJChronology0.getGregorianCutover();\n    MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();\n    mutableDateTime0.addWeekyears(1);\n    mutableDateTime0.getMillis();\n}",
    "testName" : "test133137"
  },
  "test107110" : {
    "methodSignature" : "public Property hourOfDay()",
    "methodName" : "hourOfDay",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test107110() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);\n    IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);\n    MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) islamicChronology0);\n    MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.hourOfDay();\n}",
    "testName" : "test107110"
  },
  "test122125" : {
    "methodSignature" : "public void setDate(final long instant)",
    "methodName" : "setDate",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test122125() throws Throwable {\n    MutableDateTime mutableDateTime0 = new MutableDateTime(0L);\n    mutableDateTime0.setDate(0L);\n}",
    "testName" : "test122125"
  },
  "test0022" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0022() throws Throwable {\n    MutableDateTime mutableDateTime0 = new MutableDateTime();\n    mutableDateTime0.addSeconds(0);\n    mutableDateTime0.getMillis();\n}",
    "testName" : "test0022"
  },
  "test04950" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04950() throws Throwable {\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) fixedDateTimeZone0);\n    Period period0 = Period.weeks((-1140));\n    mutableDateTime0.add((ReadablePeriod) period0, 0);\n    mutableDateTime0.getMillis();\n}",
    "testName" : "test04950"
  },
  "test137141" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test137141() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);\n    IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);\n    MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) islamicChronology0);\n    MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.minuteOfDay();\n    mutableDateTime_Property0.add((long) 4);\n    mutableDateTime0.getMillis();\n}",
    "testName" : "test137141"
  },
  "test08992" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08992() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);\n    IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);\n    MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) islamicChronology0);\n    mutableDateTime0.setMillis((ReadableInstant) mutableDateTime0);\n    mutableDateTime0.getMillis();\n}",
    "testName" : "test08992"
  },
  "test105108" : {
    "methodSignature" : "public int getRoundingMode()",
    "methodName" : "getRoundingMode",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test105108() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);\n    IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);\n    MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) islamicChronology0);\n    int int0 = mutableDateTime0.getRoundingMode();\n}",
    "testName" : "test105108"
  },
  "test06970" : {
    "methodSignature" : "public void setZone(DateTimeZone newZone)",
    "methodName" : "setZone",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06970() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);\n    IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);\n    MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) islamicChronology0);\n    mutableDateTime0.setZone(dateTimeZone0);\n}",
    "testName" : "test06970"
  },
  "test01314" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01314() throws Throwable {\n    MutableDateTime mutableDateTime0 = MutableDateTime.now();\n    mutableDateTime0.setSecondOfDay(2247);\n    mutableDateTime0.getMillis();\n}",
    "testName" : "test01314"
  },
  "test099102" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099102() throws Throwable {\n    MutableDateTime mutableDateTime0 = new MutableDateTime(0L);\n    mutableDateTime0.setTime((long) 0);\n    mutableDateTime0.getMillis();\n}",
    "testName" : "test099102"
  },
  "test127130" : {
    "methodSignature" : "public MutableDateTime(Object instant)",
    "methodName" : "MutableDateTime",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test127130() throws Throwable {\n    MutableDateTime mutableDateTime0 = null;\n    mutableDateTime0 = new MutableDateTime(\"(.s>>e\");\n}",
    "testName" : "test127130"
  },
  "test132136" : {
    "methodSignature" : "public void setSecondOfDay(final int secondOfDay)",
    "methodName" : "setSecondOfDay",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test132136() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstanceUTC();\n    MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) gJChronology0);\n    mutableDateTime0.setSecondOfDay(5062500);\n}",
    "testName" : "test132136"
  },
  "test03738" : {
    "methodSignature" : "public void setDayOfWeek(final int dayOfWeek)",
    "methodName" : "setDayOfWeek",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03738() throws Throwable {\n    MutableDateTime mutableDateTime0 = MutableDateTime.now();\n    mutableDateTime0.setDayOfWeek(7678125);\n}",
    "testName" : "test03738"
  },
  "test04546" : {
    "methodSignature" : "public static MutableDateTime parse(String str)",
    "methodName" : "parse",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04546() throws Throwable {\n    MutableDateTime.parse(\"\");\n}",
    "testName" : "test04546"
  },
  "test02526" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02526() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);\n    MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) ethiopicChronology0);\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();\n    DateTimeField dateTimeField0 = buddhistChronology0.weekOfWeekyear();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();\n    OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1, 1, 1);\n    mutableDateTime0.setRounding((DateTimeField) offsetDateTimeField0, 1);\n    mutableDateTime0.copy();\n    mutableDateTime0.getMillis();\n}",
    "testName" : "test02526"
  },
  "test05758" : {
    "methodSignature" : "public MutableDateTime(int year, int monthOfYear, int dayOfMonth, int hourOfDay, int minuteOfHour, int secondOfMinute, int millisOfSecond, DateTimeZone zone)",
    "methodName" : "MutableDateTime",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05758() throws Throwable {\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    MutableDateTime mutableDateTime0 = new MutableDateTime(5, 4, 1, 3, 0, 0, 4, fixedDateTimeZone0);\n}",
    "testName" : "test05758"
  },
  "test07779" : {
    "methodSignature" : "public void setRounding(DateTimeField field, int mode)",
    "methodName" : "setRounding",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07779() throws Throwable {\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) fixedDateTimeZone0);\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();\n    DateTimeField dateTimeField0 = buddhistChronology0.weekOfWeekyear();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();\n    DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 5);\n    mutableDateTime0.setRounding((DateTimeField) dividedDateTimeField0, 6);\n}",
    "testName" : "test07779"
  },
  "test01718" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01718() throws Throwable {\n    DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());\n    DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());\n    doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class), anyString(), anyInt());\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(10125000);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);\n    MutableDateTime mutableDateTime0 = MutableDateTime.parse(\"\", dateTimeFormatter1);\n    mutableDateTime0.getMillis();\n}",
    "testName" : "test01718"
  },
  "test111114" : {
    "methodSignature" : "public MutableDateTime(int year, int monthOfYear, int dayOfMonth, int hourOfDay, int minuteOfHour, int secondOfMinute, int millisOfSecond, DateTimeZone zone)",
    "methodName" : "MutableDateTime",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test111114() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);\n    MutableDateTime mutableDateTime0 = null;\n    mutableDateTime0 = new MutableDateTime(0, 4, 4, 0, 23118750, 0, 0, dateTimeZone0);\n}",
    "testName" : "test111114"
  },
  "test06162" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06162() throws Throwable {\n    MutableDateTime mutableDateTime0 = MutableDateTime.now();\n    mutableDateTime0.setDate((ReadableInstant) mutableDateTime0);\n    mutableDateTime0.getMillis();\n}",
    "testName" : "test06162"
  },
  "test07374" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07374() throws Throwable {\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) fixedDateTimeZone0);\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();\n    DateTimeField dateTimeField0 = buddhistChronology0.weekOfWeekyear();\n    mutableDateTime0.setRounding(dateTimeField0, 4);\n    mutableDateTime0.getMillis();\n}",
    "testName" : "test07374"
  },
  "test09396" : {
    "methodSignature" : "public MutableDateTime(Object instant, DateTimeZone zone)",
    "methodName" : "MutableDateTime",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test09396() throws Throwable {\n    CopticChronology copticChronology0 = CopticChronology.getInstance();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);\n    MutableDateTime mutableDateTime0 = null;\n    mutableDateTime0 = new MutableDateTime(copticChronology0, dateTimeZone0);\n}",
    "testName" : "test09396"
  },
  "test08184" : {
    "methodSignature" : "public static MutableDateTime now(DateTimeZone zone)",
    "methodName" : "now",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08184() throws Throwable {\n    MutableDateTime.now((DateTimeZone) null);\n}",
    "testName" : "test08184"
  },
  "test0033" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0033() throws Throwable {\n    MutableDateTime mutableDateTime0 = new MutableDateTime();\n    mutableDateTime0.addMinutes((-1886));\n    mutableDateTime0.getMillis();\n}",
    "testName" : "test0033"
  },
  "test06566" : {
    "methodSignature" : "public void set(DateTimeFieldType type, int value)",
    "methodName" : "set",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06566() throws Throwable {\n    MutableDateTime mutableDateTime0 = MutableDateTime.now();\n    mutableDateTime0.set((DateTimeFieldType) null, 0);\n}",
    "testName" : "test06566"
  },
  "test03334" : {
    "methodSignature" : "public void setMillisOfSecond(final int millisOfSecond)",
    "methodName" : "setMillisOfSecond",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03334() throws Throwable {\n    MutableDateTime mutableDateTime0 = MutableDateTime.now();\n    mutableDateTime0.setMillisOfSecond((-3015));\n}",
    "testName" : "test03334"
  },
  "test100103" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test100103() throws Throwable {\n    MutableDateTime mutableDateTime0 = MutableDateTime.now();\n    mutableDateTime0.setHourOfDay(2);\n    mutableDateTime0.getMillis();\n}",
    "testName" : "test100103"
  },
  "test04142" : {
    "methodSignature" : "public static MutableDateTime parse(String str, DateTimeFormatter formatter)",
    "methodName" : "parse",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04142() throws Throwable {\n    DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, (DateTimeParser) null);\n    MutableDateTime.parse(\"Field must not be null\", dateTimeFormatter0);\n}",
    "testName" : "test04142"
  },
  "test08588" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08588() throws Throwable {\n    MutableDateTime mutableDateTime0 = new MutableDateTime();\n    mutableDateTime0.setMinuteOfHour(2);\n    mutableDateTime0.getMillis();\n}",
    "testName" : "test08588"
  },
  "test02122" : {
    "methodSignature" : "public static MutableDateTime now(Chronology chronology)",
    "methodName" : "now",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02122() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(3, 2);\n    CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0, 1);\n    DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());\n    doReturn((long) 0, (-1L)).when(dateTimeUtils_MillisProvider0).getMillis();\n    DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);\n    MutableDateTime.now(dateTimeZone0);\n    MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) copticChronology0);\n}",
    "testName" : "test02122"
  },
  "test05354" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05354() throws Throwable {\n    DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());\n    DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());\n    doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class), anyString(), anyInt());\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);\n    MutableDateTime mutableDateTime0 = MutableDateTime.parse(\"\", dateTimeFormatter0);\n    mutableDateTime0.addMillis((-804));\n    mutableDateTime0.getMillis();\n}",
    "testName" : "test05354"
  },
  "test135139" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test135139() throws Throwable {\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) fixedDateTimeZone0);\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();\n    DateTimeField dateTimeField0 = buddhistChronology0.weekOfWeekyear();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();\n    DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 5);\n    MutableDateTime.Property mutableDateTime_Property0 = new MutableDateTime.Property(mutableDateTime0, dividedDateTimeField0);\n    mutableDateTime_Property0.addWrapField(1);\n    mutableDateTime0.getMillis();\n}",
    "testName" : "test135139"
  },
  "test116119" : {
    "methodSignature" : "public Property secondOfMinute()",
    "methodName" : "secondOfMinute",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test116119() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);\n    MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) ethiopicChronology0);\n    MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.secondOfMinute();\n}",
    "testName" : "test116119"
  },
  "test120123" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test120123() throws Throwable {\n    MutableDateTime mutableDateTime0 = MutableDateTime.now();\n    mutableDateTime0.addYears(529);\n    mutableDateTime0.getMillis();\n}",
    "testName" : "test120123"
  },
  "test07880" : {
    "methodSignature" : "public void setRounding(DateTimeField field, int mode)",
    "methodName" : "setRounding",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07880() throws Throwable {\n    TimeZone timeZone0 = TimeZone.getDefault();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);\n    MutableDateTime mutableDateTime0 = new MutableDateTime(0L, dateTimeZone0);\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);\n    DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();\n    mutableDateTime0.setRounding(dateTimeField0, (-901));\n}",
    "testName" : "test07880"
  },
  "test145149" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test145149() throws Throwable {\n    MutableDateTime mutableDateTime0 = new MutableDateTime(4294967295L);\n    MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.dayOfWeek();\n    mutableDateTime_Property0.roundHalfEven();\n    mutableDateTime0.getMillis();\n}",
    "testName" : "test145149"
  },
  "test0044" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0044() throws Throwable {\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();\n    MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) buddhistChronology0);\n    mutableDateTime0.addDays(1);\n    mutableDateTime0.getMillis();\n}",
    "testName" : "test0044"
  },
  "test139143" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test139143() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);\n    IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);\n    MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) islamicChronology0);\n    MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.minuteOfDay();\n    mutableDateTime_Property0.add((-3169));\n    mutableDateTime0.getMillis();\n}",
    "testName" : "test139143"
  },
  "test103106" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test103106() throws Throwable {\n    TimeZone timeZone0 = TimeZone.getDefault();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);\n    MutableDateTime mutableDateTime0 = new MutableDateTime(0L, dateTimeZone0);\n    mutableDateTime0.setMillisOfDay(2670);\n    mutableDateTime0.getMillis();\n}",
    "testName" : "test103106"
  },
  "test05859" : {
    "methodSignature" : "public Property property(DateTimeFieldType type)",
    "methodName" : "property",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05859() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) gJChronology0);\n    mutableDateTime0.property((DateTimeFieldType) null);\n}",
    "testName" : "test05859"
  },
  "test02627" : {
    "methodSignature" : "public MutableDateTime copy()",
    "methodName" : "copy",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02627() throws Throwable {\n    System.setCurrentTimeMillis(0L);\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    MutableDateTime mutableDateTime0 = MutableDateTime.now(dateTimeZone0);\n    MutableDateTime mutableDateTime1 = mutableDateTime0.copy();\n}",
    "testName" : "test02627"
  },
  "test03435" : {
    "methodSignature" : "public void setMillisOfDay(final int millisOfDay)",
    "methodName" : "setMillisOfDay",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03435() throws Throwable {\n    MutableDateTime mutableDateTime0 = new MutableDateTime();\n    mutableDateTime0.setMillisOfDay((-3739));\n}",
    "testName" : "test03435"
  },
  "test01415" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01415() throws Throwable {\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) fixedDateTimeZone0);\n    mutableDateTime0.setMonthOfYear(4);\n    mutableDateTime0.getMillis();\n}",
    "testName" : "test01415"
  },
  "test04647" : {
    "methodSignature" : "public void add(DurationFieldType type, int amount)",
    "methodName" : "add",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04647() throws Throwable {\n    MutableDateTime mutableDateTime0 = new MutableDateTime(0L, (DateTimeZone) null);\n    DurationFieldType durationFieldType0 = DurationFieldType.ERAS_TYPE;\n    mutableDateTime0.add(durationFieldType0, (-3966));\n}",
    "testName" : "test04647"
  },
  "test108111" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test108111() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);\n    IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);\n    MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) islamicChronology0);\n    mutableDateTime0.setSecondOfMinute(0);\n    mutableDateTime0.getMillis();\n}",
    "testName" : "test108111"
  },
  "test03839" : {
    "methodSignature" : "public void setDate(final ReadableInstant instant)",
    "methodName" : "setDate",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03839() throws Throwable {\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) fixedDateTimeZone0);\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();\n    MutableDateTime mutableDateTime1 = mutableDateTime0.toMutableDateTime((Chronology) islamicChronology0);\n    MutableDateTime mutableDateTime2 = MutableDateTime.parse(\"-473\");\n    mutableDateTime1.setDate((ReadableInstant) mutableDateTime2);\n}",
    "testName" : "test03839"
  },
  "test01819" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01819() throws Throwable {\n    MutableDateTime mutableDateTime0 = MutableDateTime.parse(\"2014-02-17T08:00:00.000Z\");\n    mutableDateTime0.getMillis();\n}",
    "testName" : "test01819"
  },
  "test05051" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05051() throws Throwable {\n    MutableDateTime mutableDateTime0 = new MutableDateTime((-1399L));\n    Duration duration0 = new Duration(0L, 3);\n    mutableDateTime0.add((ReadableDuration) duration0, 5);\n    mutableDateTime0.getMillis();\n}",
    "testName" : "test05051"
  },
  "test09497" : {
    "methodSignature" : "public Property weekyear()",
    "methodName" : "weekyear",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test09497() throws Throwable {\n    MutableDateTime mutableDateTime0 = new MutableDateTime();\n    MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.weekyear();\n}",
    "testName" : "test09497"
  },
  "test119122" : {
    "methodSignature" : "public void setWeekyear(final int weekyear)",
    "methodName" : "setWeekyear",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test119122() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(12);\n    IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);\n    MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) islamicChronology0);\n    mutableDateTime0.setWeekyear(0);\n}",
    "testName" : "test119122"
  },
  "test06263" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06263() throws Throwable {\n    MutableDateTime mutableDateTime0 = MutableDateTime.now();\n    mutableDateTime0.setDate((ReadableInstant) null);\n    mutableDateTime0.getMillis();\n}",
    "testName" : "test06263"
  },
  "test125128" : {
    "methodSignature" : "public DateTimeField getRoundingField()",
    "methodName" : "getRoundingField",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test125128() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);\n    IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);\n    MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) islamicChronology0);\n    DateTimeField dateTimeField0 = mutableDateTime0.getRoundingField();\n}",
    "testName" : "test125128"
  },
  "test08285" : {
    "methodSignature" : "public Property year()",
    "methodName" : "year",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08285() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);\n    MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) ethiopicChronology0);\n    MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.year();\n}",
    "testName" : "test08285"
  },
  "test07071" : {
    "methodSignature" : "public void add(ReadablePeriod period, int scalar)",
    "methodName" : "add",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07071() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);\n    IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);\n    MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) islamicChronology0);\n    mutableDateTime0.add((ReadablePeriod) null, 1);\n}",
    "testName" : "test07071"
  },
  "test0055" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0055() throws Throwable {\n    MutableDateTime mutableDateTime0 = new MutableDateTime((-373L));\n    mutableDateTime0.addMonths(1);\n    mutableDateTime0.getMillis();\n}",
    "testName" : "test0055"
  },
  "test05455" : {
    "methodSignature" : "public MutableDateTime(int year, int monthOfYear, int dayOfMonth, int hourOfDay, int minuteOfHour, int secondOfMinute, int millisOfSecond, Chronology chronology)",
    "methodName" : "MutableDateTime",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05455() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);\n    MutableDateTime mutableDateTime0 = new MutableDateTime(1899, 536, 1093, (-3307), (-606), 1, 722, lenientChronology0);\n}",
    "testName" : "test05455"
  },
  "test106109" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test106109() throws Throwable {\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) fixedDateTimeZone0);\n    mutableDateTime0.setDayOfWeek(4);\n    mutableDateTime0.getMillis();\n}",
    "testName" : "test106109"
  },
  "test06667" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06667() throws Throwable {\n    MutableDateTime mutableDateTime0 = MutableDateTime.now();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();\n    mutableDateTime0.set(dateTimeFieldType0, 24);\n    mutableDateTime0.getMillis();\n}",
    "testName" : "test06667"
  },
  "test08689" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08689() throws Throwable {\n    MutableDateTime mutableDateTime0 = new MutableDateTime((-1399L));\n    mutableDateTime0.addWeeks((-1269));\n    mutableDateTime0.getMillis();\n}",
    "testName" : "test08689"
  },
  "test02223" : {
    "methodSignature" : "public static MutableDateTime now()",
    "methodName" : "now",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02223() throws Throwable {\n    DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());\n    doReturn(0L).when(dateTimeUtils_MillisProvider0).getMillis();\n    DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);\n    MutableDateTime mutableDateTime0 = MutableDateTime.now();\n}",
    "testName" : "test02223"
  },
  "test07475" : {
    "methodSignature" : "public void setRounding(DateTimeField field, int mode)",
    "methodName" : "setRounding",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07475() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);\n    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);\n    MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) gregorianChronology0);\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();\n    MillisDurationField millisDurationField0 = (MillisDurationField) MillisDurationField.INSTANCE;\n    DurationFieldType durationFieldType0 = DurationFieldType.days();\n    DecoratedDurationField decoratedDurationField0 = new DecoratedDurationField(millisDurationField0, durationFieldType0);\n    ScaledDurationField scaledDurationField0 = new ScaledDurationField(decoratedDurationField0, durationFieldType0, (-984));\n    UnsupportedDateTimeField unsupportedDateTimeField0 = UnsupportedDateTimeField.getInstance(dateTimeFieldType0, scaledDurationField0);\n    mutableDateTime0.setRounding((DateTimeField) unsupportedDateTimeField0, 3);\n}",
    "testName" : "test07475"
  },
  "test03031" : {
    "methodSignature" : "public void setRounding(DateTimeField field, int mode)",
    "methodName" : "setRounding",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03031() throws Throwable {\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();\n    DateTimeField dateTimeField0 = buddhistChronology0.weekOfWeekyear();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();\n    DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 5);\n    MutableDateTime mutableDateTime0 = MutableDateTime.parse(\"-473\");\n    mutableDateTime0.setRounding((DateTimeField) dividedDateTimeField0, 3);\n}",
    "testName" : "test03031"
  },
  "test04243" : {
    "methodSignature" : "public static MutableDateTime parse(String str, DateTimeFormatter formatter)",
    "methodName" : "parse",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04243() throws Throwable {\n    MutableDateTime.parse(\"\", (DateTimeFormatter) null);\n}",
    "testName" : "test04243"
  },
  "test098101" : {
    "methodSignature" : "public Property secondOfDay()",
    "methodName" : "secondOfDay",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test098101() throws Throwable {\n    MutableDateTime mutableDateTime0 = MutableDateTime.now();\n    MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.secondOfDay();\n}",
    "testName" : "test098101"
  },
  "test03940" : {
    "methodSignature" : "public void setDate(final int year, final int monthOfYear, final int dayOfMonth)",
    "methodName" : "setDate",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03940() throws Throwable {\n    MutableDateTime mutableDateTime0 = new MutableDateTime(0L);\n    mutableDateTime0.setDate(292272984, 20, 5);\n}",
    "testName" : "test03940"
  },
  "test01920" : {
    "methodSignature" : "public static MutableDateTime now(DateTimeZone zone)",
    "methodName" : "now",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01920() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);\n    DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());\n    doReturn((-1823L)).when(dateTimeUtils_MillisProvider0).getMillis();\n    DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);\n    MutableDateTime mutableDateTime0 = MutableDateTime.now(dateTimeZone0);\n}",
    "testName" : "test01920"
  },
  "test09093" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test09093() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);\n    MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) ethiopicChronology0);\n    mutableDateTime0.setWeekOfWeekyear(1);\n    mutableDateTime0.getMillis();\n}",
    "testName" : "test09093"
  },
  "test114117" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test114117() throws Throwable {\n    MutableDateTime mutableDateTime0 = new MutableDateTime((Object) null, (Chronology) null);\n    mutableDateTime0.getMillis();\n}",
    "testName" : "test114117"
  },
  "test08790" : {
    "methodSignature" : "public MutableDateTime(int year, int monthOfYear, int dayOfMonth, int hourOfDay, int minuteOfHour, int secondOfMinute, int millisOfSecond, Chronology chronology)",
    "methodName" : "MutableDateTime",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08790() throws Throwable {\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();\n    MutableDateTime mutableDateTime0 = null;\n    mutableDateTime0 = new MutableDateTime(7678125, 7678125, 7678125, 7678125, 2180, 2180, 7678125, islamicChronology0);\n}",
    "testName" : "test08790"
  },
  "test0066" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0066() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstanceUTC();\n    Instant instant0 = gJChronology0.getGregorianCutover();\n    MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();\n    mutableDateTime0.addWeekyears(3);\n    mutableDateTime0.getMillis();\n}",
    "testName" : "test0066"
  },
  "test05960" : {
    "methodSignature" : "public Property property(DateTimeFieldType type)",
    "methodName" : "property",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05960() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);\n    IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);\n    MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) islamicChronology0);\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();\n    MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.property(dateTimeFieldType0);\n}",
    "testName" : "test05960"
  },
  "test07982" : {
    "methodSignature" : "public int getRoundingMode()",
    "methodName" : "getRoundingMode",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07982() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    MutableDateTime mutableDateTime0 = new MutableDateTime(dateTimeZone0);\n    mutableDateTime0.setRounding((DateTimeField) null, (-1703));\n    mutableDateTime0.getRoundingMode();\n}",
    "testName" : "test07982"
  },
  "test101104" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test101104() throws Throwable {\n    TimeZone timeZone0 = TimeZone.getDefault();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);\n    MutableDateTime mutableDateTime0 = new MutableDateTime(0L, dateTimeZone0);\n    mutableDateTime0.setMillisOfSecond(143);\n    mutableDateTime0.getMillis();\n}",
    "testName" : "test101104"
  },
  "test126129" : {
    "methodSignature" : "public Property yearOfCentury()",
    "methodName" : "yearOfCentury",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test126129() throws Throwable {\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) fixedDateTimeZone0);\n    MutableDateTime mutableDateTime0 = new MutableDateTime((-52L), (Chronology) islamicChronology0);\n    MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.yearOfCentury();\n}",
    "testName" : "test126129"
  },
  "test07981" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07981() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    MutableDateTime mutableDateTime0 = new MutableDateTime(dateTimeZone0);\n    mutableDateTime0.setRounding((DateTimeField) null, (-1703));\n    mutableDateTime0.getMillis();\n}",
    "testName" : "test07981"
  },
  "test04748" : {
    "methodSignature" : "public MutableDateTime(Object instant, Chronology chronology)",
    "methodName" : "MutableDateTime",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04748() throws Throwable {\n    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();\n    MutableDateTime mutableDateTime0 = null;\n    mutableDateTime0 = new MutableDateTime(gregorianChronology0, gregorianChronology0);\n}",
    "testName" : "test04748"
  },
  "test02324" : {
    "methodSignature" : "public int getRoundingMode()",
    "methodName" : "getRoundingMode",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02324() throws Throwable {\n    DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());\n    doReturn((-442L)).when(dateTimeUtils_MillisProvider0).getMillis();\n    DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);\n    MutableDateTime mutableDateTime0 = MutableDateTime.now();\n    mutableDateTime0.getRoundingMode();\n}",
    "testName" : "test02324"
  },
  "test01516" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01516() throws Throwable {\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();\n    MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) buddhistChronology0);\n    mutableDateTime0.setDayOfMonth(1);\n    mutableDateTime0.getMillis();\n}",
    "testName" : "test01516"
  },
  "test06768" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06768() throws Throwable {\n    MutableDateTime mutableDateTime0 = new MutableDateTime();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(3, 2);\n    CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0, 1);\n    MutableDateTime mutableDateTime1 = mutableDateTime0.toMutableDateTime((Chronology) copticChronology0);\n    mutableDateTime1.setZoneRetainFields((DateTimeZone) null);\n    mutableDateTime1.getMillis();\n}",
    "testName" : "test06768"
  },
  "test03536" : {
    "methodSignature" : "public void setHourOfDay(final int hourOfDay)",
    "methodName" : "setHourOfDay",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03536() throws Throwable {\n    MutableDateTime mutableDateTime0 = MutableDateTime.now();\n    mutableDateTime0.setHourOfDay(119);\n}",
    "testName" : "test03536"
  },
  "test02728" : {
    "methodSignature" : "public void setYear(final int year)",
    "methodName" : "setYear",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02728() throws Throwable {\n    MutableDateTime mutableDateTime0 = new MutableDateTime();\n    mutableDateTime0.setYear(352831696);\n}",
    "testName" : "test02728"
  },
  "test115118" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test115118() throws Throwable {\n    MutableDateTime mutableDateTime0 = MutableDateTime.now();\n    mutableDateTime0.addHours((-553));\n    mutableDateTime0.getMillis();\n}",
    "testName" : "test115118"
  },
  "test117120" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test117120() throws Throwable {\n    MutableDateTime mutableDateTime0 = MutableDateTime.now();\n    Minutes minutes0 = Minutes.ZERO;\n    mutableDateTime0.add((ReadablePeriod) minutes0);\n    mutableDateTime0.getMillis();\n}",
    "testName" : "test117120"
  },
  "test08386" : {
    "methodSignature" : "public Property dayOfYear()",
    "methodName" : "dayOfYear",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08386() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstanceUTC();\n    Instant instant0 = gJChronology0.getGregorianCutover();\n    MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();\n    MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.dayOfYear();\n}",
    "testName" : "test08386"
  },
  "test05152" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05152() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstanceUTC();\n    Instant instant0 = gJChronology0.getGregorianCutover();\n    MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();\n    mutableDateTime0.setMillis((long) 60000);\n    mutableDateTime0.getMillis();\n}",
    "testName" : "test05152"
  },
  "test123126" : {
    "methodSignature" : "public void setTime(final int hour, final int minuteOfHour, final int secondOfMinute, final int millisOfSecond)",
    "methodName" : "setTime",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test123126() throws Throwable {\n    MutableDateTime mutableDateTime0 = new MutableDateTime();\n    mutableDateTime0.setTime(5, 4, 124, 0);\n}",
    "testName" : "test123126"
  },
  "test142146" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test142146() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstanceUTC();\n    MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) gJChronology0);\n    MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.millisOfDay();\n    MutableDateTime mutableDateTime1 = mutableDateTime_Property0.roundFloor();\n    mutableDateTime1.getMillis();\n}",
    "testName" : "test142146"
  },
  "test0077" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0077() throws Throwable {\n    MutableDateTime mutableDateTime0 = new MutableDateTime();\n    mutableDateTime0.setWeekyear(3230);\n    mutableDateTime0.getMillis();\n}",
    "testName" : "test0077"
  },
  "test07172" : {
    "methodSignature" : "public void add(ReadableDuration duration, int scalar)",
    "methodName" : "add",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07172() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);\n    MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) ethiopicChronology0);\n    mutableDateTime0.add((ReadableDuration) null, 3346);\n}",
    "testName" : "test07172"
  },
  "test09194" : {
    "methodSignature" : "public void setMonthOfYear(final int monthOfYear)",
    "methodName" : "setMonthOfYear",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test09194() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstanceUTC();\n    Instant instant0 = gJChronology0.getGregorianCutover();\n    MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();\n    mutableDateTime0.setMonthOfYear(60000);\n}",
    "testName" : "test09194"
  },
  "test04344" : {
    "methodSignature" : "public static MutableDateTime parse(String str, DateTimeFormatter formatter)",
    "methodName" : "parse",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04344() throws Throwable {\n    DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());\n    DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());\n    doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class), anyString(), anyInt());\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);\n    MutableDateTime.parse(\";2=yI7!\", dateTimeFormatter0);\n}",
    "testName" : "test04344"
  },
  "test05556" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05556() throws Throwable {\n    MutableDateTime mutableDateTime0 = new MutableDateTime((Object) null);\n    mutableDateTime0.setWeekyear(0);\n    mutableDateTime0.getMillis();\n}",
    "testName" : "test05556"
  },
  "test06364" : {
    "methodSignature" : "public void add(DurationFieldType type, int amount)",
    "methodName" : "add",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06364() throws Throwable {\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) fixedDateTimeZone0);\n    MutableDateTime mutableDateTime0 = new MutableDateTime(1193L, (Chronology) buddhistChronology0);\n    mutableDateTime0.add((DurationFieldType) null, 4);\n}",
    "testName" : "test06364"
  },
  "test01111" : {
    "methodSignature" : "public void setZoneRetainFields(DateTimeZone newZone)",
    "methodName" : "setZoneRetainFields",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01111() throws Throwable {\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();\n    LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);\n    DateTimeZone dateTimeZone1 = buddhistChronology0.getZone();\n    Chronology chronology0 = lenientChronology0.withZone(dateTimeZone1);\n    MutableDateTime mutableDateTime0 = new MutableDateTime((-172L), chronology0);\n    mutableDateTime0.setZoneRetainFields(dateTimeZone1);\n}",
    "testName" : "test01111"
  },
  "test07576" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07576() throws Throwable {\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) fixedDateTimeZone0);\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();\n    DateTimeField dateTimeField0 = buddhistChronology0.monthOfYear();\n    mutableDateTime0.setRounding(dateTimeField0, 2);\n    mutableDateTime0.setMillis((long) 4);\n    mutableDateTime0.getMillis();\n}",
    "testName" : "test07576"
  },
  "test104107" : {
    "methodSignature" : "public void setDayOfMonth(final int dayOfMonth)",
    "methodName" : "setDayOfMonth",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test104107() throws Throwable {\n    MutableDateTime mutableDateTime0 = new MutableDateTime(4294967295L);\n    mutableDateTime0.setDayOfMonth(1947);\n}",
    "testName" : "test104107"
  },
  "test03132" : {
    "methodSignature" : "public void setMinuteOfHour(final int minuteOfHour)",
    "methodName" : "setMinuteOfHour",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03132() throws Throwable {\n    MutableDateTime mutableDateTime0 = new MutableDateTime();\n    mutableDateTime0.setMinuteOfHour(1257);\n}",
    "testName" : "test03132"
  },
  "test09598" : {
    "methodSignature" : "public MutableDateTime copy()",
    "methodName" : "copy",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test09598() throws Throwable {\n    MutableDateTime mutableDateTime0 = new MutableDateTime((-1399L));\n    MutableDateTime mutableDateTime1 = mutableDateTime0.copy();\n}",
    "testName" : "test09598"
  },
  "test131135" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test131135() throws Throwable {\n    MutableDateTime mutableDateTime0 = MutableDateTime.now();\n    mutableDateTime0.setYear(529);\n    mutableDateTime0.getMillis();\n}",
    "testName" : "test131135"
  },
  "test128131" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test128131() throws Throwable {\n    MutableDateTime mutableDateTime0 = MutableDateTime.now();\n    mutableDateTime0.addDays(0);\n    mutableDateTime0.getMillis();\n}",
    "testName" : "test128131"
  },
  "test109112" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test109112() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);\n    IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);\n    MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) islamicChronology0);\n    mutableDateTime0.setMinuteOfDay(0);\n    mutableDateTime0.getMillis();\n}",
    "testName" : "test109112"
  },
  "test112115" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.MutableDateTime",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test112115() throws Throwable {\n    MutableDateTime mutableDateTime0 = MutableDateTime.now();\n    mutableDateTime0.addSeconds(1);\n    mutableDateTime0.getMillis();\n}",
    "testName" : "test112115"
  }
}