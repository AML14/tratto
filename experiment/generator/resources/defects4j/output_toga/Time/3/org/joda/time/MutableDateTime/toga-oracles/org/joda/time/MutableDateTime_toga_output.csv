project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test0000,"public void test0000() throws Throwable {
    MutableDateTime mutableDateTime0 = new MutableDateTime();
    // Undeclared exception!
    try {
        mutableDateTime0.setDateTime(0, 0, (-1302), 5, (-1794), (-134), 2735);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value -1794 for minuteOfHour must be in the range [0,59]
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",0,
project,0,test0011,"public void test0011() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    MutableDateTime mutableDateTime0 = MutableDateTime.now(dateTimeZone0);
    // Undeclared exception!
    try {
        mutableDateTime0.setDateTime(1, (-529), 4, 1, 0, 2892, 0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value 2892 for secondOfMinute must be in the range [0,59]
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",1,
project,0,test0022,"public void test0022() throws Throwable {
    MutableDateTime mutableDateTime0 = new MutableDateTime();
    mutableDateTime0.addSeconds(0);
    assertEquals(1392409281320L, mutableDateTime0.getMillis());
}",0,"assertEquals(0, mutableDateTime0.getMillis())"
project,0,test0033,"public void test0033() throws Throwable {
    MutableDateTime mutableDateTime0 = new MutableDateTime();
    mutableDateTime0.addMinutes((-1886));
    assertEquals(1392296121320L, mutableDateTime0.getMillis());
}",0,"assertEquals(0, mutableDateTime0.getMillis())"
project,0,test0044,"public void test0044() throws Throwable {
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
    MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) buddhistChronology0);
    mutableDateTime0.addDays(1);
    assertEquals(1392495681320L, mutableDateTime0.getMillis());
}",0,
project,0,test0055,"public void test0055() throws Throwable {
    MutableDateTime mutableDateTime0 = new MutableDateTime((-373L));
    mutableDateTime0.addMonths(1);
    assertEquals(2678399627L, mutableDateTime0.getMillis());
}",0,"assertEquals(0, mutableDateTime0.getMillis())"
project,0,test0066,"public void test0066() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    Instant instant0 = gJChronology0.getGregorianCutover();
    MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
    mutableDateTime0.addWeekyears(3);
    assertEquals((-12124944000000L), mutableDateTime0.getMillis());
}",0,"assertEquals(0, mutableDateTime0.getMillis())"
project,0,test0077,"public void test0077() throws Throwable {
    MutableDateTime mutableDateTime0 = new MutableDateTime();
    mutableDateTime0.setWeekyear(3230);
    assertEquals(39765759681320L, mutableDateTime0.getMillis());
}",0,"assertEquals(0, mutableDateTime0.getMillis())"
project,0,test01111,"public void test01111() throws Throwable {
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
    LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
    DateTimeZone dateTimeZone1 = buddhistChronology0.getZone();
    Chronology chronology0 = lenientChronology0.withZone(dateTimeZone1);
    MutableDateTime mutableDateTime0 = new MutableDateTime((-172L), chronology0);
    mutableDateTime0.setZoneRetainFields(dateTimeZone1);
    assertSame(dateTimeZone1, dateTimeZone0);
}",0,
project,0,test01213,"public void test01213() throws Throwable {
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
    MutableDateTime mutableDateTime0 = new MutableDateTime((-52L), (Chronology) islamicChronology0);
    mutableDateTime0.setTime(1, 1, 1, 1);
    assertEquals((-82738999L), mutableDateTime0.getMillis());
}",0,
project,0,test01314,"public void test01314() throws Throwable {
    MutableDateTime mutableDateTime0 = MutableDateTime.now();
    mutableDateTime0.setSecondOfDay(2247);
    assertEquals(1392367047320L, mutableDateTime0.getMillis());
}",0,"assertEquals(0, mutableDateTime0.getMillis())"
project,0,test01415,"public void test01415() throws Throwable {
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) fixedDateTimeZone0);
    mutableDateTime0.setMonthOfYear(4);
    assertEquals(1397506881320L, mutableDateTime0.getMillis());
}",0,
project,0,test01516,"public void test01516() throws Throwable {
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
    MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) buddhistChronology0);
    mutableDateTime0.setDayOfMonth(1);
    assertEquals(1391286081320L, mutableDateTime0.getMillis());
}",0,"assertEquals(0, mutableDateTime0.getMillis())"
project,0,test01617,"public void test01617() throws Throwable {
    DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
    DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
    doReturn(236).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class), anyString(), anyInt());
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
    MutableDateTime mutableDateTime0 = MutableDateTime.parse("""", dateTimeFormatter1);
    assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
}",0,
project,0,test01718,"public void test01718() throws Throwable {
    DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
    DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
    doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class), anyString(), anyInt());
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(10125000);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
    MutableDateTime mutableDateTime0 = MutableDateTime.parse("""", dateTimeFormatter1);
    assertEquals((-10125000L), mutableDateTime0.getMillis());
}",0,"assertEquals(0, mutableDateTime0.getMillis())"
project,0,test01819,"public void test01819() throws Throwable {
    MutableDateTime mutableDateTime0 = MutableDateTime.parse(""2014-02-17T08:00:00.000Z"");
    assertEquals(1392624000000L, mutableDateTime0.getMillis());
}",0,"assertEquals(0, mutableDateTime0.getMillis())"
project,0,test01920,"public void test01920() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
    DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
    doReturn((-1823L)).when(dateTimeUtils_MillisProvider0).getMillis();
    DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
    MutableDateTime mutableDateTime0 = MutableDateTime.now(dateTimeZone0);
    assertEquals(2, MutableDateTime.ROUND_CEILING);
}",1,
project,0,test02021,"public void test02021() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
    CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0, 1);
    DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
    doReturn(0L).when(dateTimeUtils_MillisProvider0).getMillis();
    DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
    MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) copticChronology0);
    assertEquals(0, MutableDateTime.ROUND_NONE);
}",1,
project,0,test02122,"public void test02122() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(3, 2);
    CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0, 1);
    DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
    doReturn((long) 0, (-1L)).when(dateTimeUtils_MillisProvider0).getMillis();
    DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
    MutableDateTime.now(dateTimeZone0);
    MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) copticChronology0);
    assertEquals(0, MutableDateTime.ROUND_NONE);
}",1,
project,0,test02223,"public void test02223() throws Throwable {
    DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
    doReturn(0L).when(dateTimeUtils_MillisProvider0).getMillis();
    DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
    MutableDateTime mutableDateTime0 = MutableDateTime.now();
    assertEquals(2, MutableDateTime.ROUND_CEILING);
}",0,
project,0,test02324,"public void test02324() throws Throwable {
    DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
    doReturn((-442L)).when(dateTimeUtils_MillisProvider0).getMillis();
    DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
    MutableDateTime mutableDateTime0 = MutableDateTime.now();
    assertEquals(0, mutableDateTime0.getRoundingMode());
}",0,"assertEquals(0, mutableDateTime0.getRoundingMode())"
project,0,test02425,"public void test02425() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
    MutableDateTime mutableDateTime0 = new MutableDateTime(0L, dateTimeZone0);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
    DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
    mutableDateTime0.setRounding(dateTimeField0, 3);
    mutableDateTime0.getRoundingField();
    assertEquals(3, mutableDateTime0.getRoundingMode());
}",0,"assertEquals(0, mutableDateTime0.getRoundingMode())"
project,0,test02526,"public void test02526() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
    MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) ethiopicChronology0);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
    DateTimeField dateTimeField0 = buddhistChronology0.weekOfWeekyear();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
    OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1, 1, 1);
    mutableDateTime0.setRounding((DateTimeField) offsetDateTimeField0, 1);
    mutableDateTime0.copy();
    assertEquals(1392019200000L, mutableDateTime0.getMillis());
}",0,
project,0,test02627,"public void test02627() throws Throwable {
    System.setCurrentTimeMillis(0L);
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    MutableDateTime mutableDateTime0 = MutableDateTime.now(dateTimeZone0);
    MutableDateTime mutableDateTime1 = mutableDateTime0.copy();
    assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
}",0,
project,0,test02728,"public void test02728() throws Throwable {
    MutableDateTime mutableDateTime0 = new MutableDateTime();
    // Undeclared exception!
    try {
        mutableDateTime0.setYear(352831696);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value 352831696 for year must be in the range [-292275054,292278993]
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",1,
project,0,test02829,"public void test02829() throws Throwable {
    MutableDateTime mutableDateTime0 = new MutableDateTime();
    // Undeclared exception!
    try {
        mutableDateTime0.setWeekOfWeekyear(317);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value 317 for weekOfWeekyear must be in the range [1,52]
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",1,
project,0,test02930,"public void test02930() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
    IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
    MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) islamicChronology0);
    // Undeclared exception!
    try {
        mutableDateTime0.setSecondOfMinute((-23));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value -23 for secondOfMinute must be in the range [0,59]
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",0,
project,0,test03031,"public void test03031() throws Throwable {
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
    DateTimeField dateTimeField0 = buddhistChronology0.weekOfWeekyear();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
    DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 5);
    MutableDateTime mutableDateTime0 = MutableDateTime.parse(""-473"");
    // Undeclared exception!
    try {
        mutableDateTime0.setRounding((DateTimeField) dividedDateTimeField0, 3);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value 0 for weekOfWeekyear must be in the range [1,52]
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",1,
project,0,test03132,"public void test03132() throws Throwable {
    MutableDateTime mutableDateTime0 = new MutableDateTime();
    // Undeclared exception!
    try {
        mutableDateTime0.setMinuteOfHour(1257);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value 1257 for minuteOfHour must be in the range [0,59]
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",0,
project,0,test03233,"public void test03233() throws Throwable {
    MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
    // Undeclared exception!
    try {
        mutableDateTime0.setMinuteOfDay((-395));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value -395 for minuteOfDay must be in the range [0,1439]
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",1,
project,0,test03334,"public void test03334() throws Throwable {
    MutableDateTime mutableDateTime0 = MutableDateTime.now();
    // Undeclared exception!
    try {
        mutableDateTime0.setMillisOfSecond((-3015));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value -3015 for millisOfSecond must be in the range [0,999]
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",0,
project,0,test03435,"public void test03435() throws Throwable {
    MutableDateTime mutableDateTime0 = new MutableDateTime();
    // Undeclared exception!
    try {
        mutableDateTime0.setMillisOfDay((-3739));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value -3739 for millisOfDay must be in the range [0,86399999]
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",1,
project,0,test03536,"public void test03536() throws Throwable {
    MutableDateTime mutableDateTime0 = MutableDateTime.now();
    // Undeclared exception!
    try {
        mutableDateTime0.setHourOfDay(119);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value 119 for hourOfDay must be in the range [0,23]
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",1,
project,0,test03637,"public void test03637() throws Throwable {
    MutableDateTime mutableDateTime0 = MutableDateTime.now();
    // Undeclared exception!
    try {
        mutableDateTime0.setDayOfYear(0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value 0 for dayOfYear must be in the range [1,365]
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",1,
project,0,test03738,"public void test03738() throws Throwable {
    MutableDateTime mutableDateTime0 = MutableDateTime.now();
    // Undeclared exception!
    try {
        mutableDateTime0.setDayOfWeek(7678125);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value 7678125 for dayOfWeek must be in the range [1,7]
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",0,
project,0,test03839,"public void test03839() throws Throwable {
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) fixedDateTimeZone0);
    IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
    MutableDateTime mutableDateTime1 = mutableDateTime0.toMutableDateTime((Chronology) islamicChronology0);
    MutableDateTime mutableDateTime2 = MutableDateTime.parse(""-473"");
    // Undeclared exception!
    try {
        mutableDateTime1.setDate((ReadableInstant) mutableDateTime2);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The instant is below the supported minimum of 0001-01-01T00:00:00.000Z (IslamicChronology[UTC])
        //
        verifyException(""org.joda.time.chrono.LimitChronology"", e);
    }
}",0,
project,0,test03940,"public void test03940() throws Throwable {
    MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
    // Undeclared exception!
    try {
        mutableDateTime0.setDate(292272984, 20, 5);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value 20 for monthOfYear must be in the range [1,12]
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",0,
project,0,test04041,"public void test04041() throws Throwable {
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
    MutableDateTime mutableDateTime0 = new MutableDateTime((-52L), (Chronology) islamicChronology0);
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
    // Undeclared exception!
    try {
        mutableDateTime0.set(dateTimeFieldType0, (-3650));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value -3650 for secondOfDay must be in the range [0,86399]
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",1,
project,0,test04142,"public void test04142() throws Throwable {
    DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, (DateTimeParser) null);
    // Undeclared exception!
    try {
        MutableDateTime.parse(""Field must not be null"", dateTimeFormatter0);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // Parsing not supported
        //
        verifyException(""org.joda.time.format.DateTimeFormatter"", e);
    }
}",0,
project,0,test04243,"public void test04243() throws Throwable {
    // Undeclared exception!
    try {
        MutableDateTime.parse("""", (DateTimeFormatter) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.MutableDateTime"", e);
    }
}",0,
project,0,test04344,"public void test04344() throws Throwable {
    DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
    DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
    doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class), anyString(), anyInt());
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
    // Undeclared exception!
    try {
        MutableDateTime.parse("";2=yI7!"", dateTimeFormatter0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid format: \"";2=yI7!\""
        //
        verifyException(""org.joda.time.format.DateTimeFormatter"", e);
    }
}",0,
project,0,test04445,"public void test04445() throws Throwable {
    // Undeclared exception!
    try {
        MutableDateTime.parse((String) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral"", e);
    }
}",0,
project,0,test04546,"public void test04546() throws Throwable {
    // Undeclared exception!
    try {
        MutableDateTime.parse("""");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid format: \""\""
        //
        verifyException(""org.joda.time.format.DateTimeFormatter"", e);
    }
}",0,
project,0,test04647,"public void test04647() throws Throwable {
    MutableDateTime mutableDateTime0 = new MutableDateTime(0L, (DateTimeZone) null);
    DurationFieldType durationFieldType0 = DurationFieldType.ERAS_TYPE;
    // Undeclared exception!
    try {
        mutableDateTime0.add(durationFieldType0, (-3966));
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // eras field is unsupported
        //
        verifyException(""org.joda.time.field.UnsupportedDurationField"", e);
    }
}",1,
project,0,test04748,"public void test04748() throws Throwable {
    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
    MutableDateTime mutableDateTime0 = null;
    try {
        mutableDateTime0 = new MutableDateTime(gregorianChronology0, gregorianChronology0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // No instant converter found for type: org.joda.time.chrono.GregorianChronology
        //
        verifyException(""org.joda.time.convert.ConverterManager"", e);
    }
}",1,
project,0,test04849,"public void test04849() throws Throwable {
    MutableDateTime mutableDateTime0 = null;
    try {
        mutableDateTime0 = new MutableDateTime(58, 2034, 2034, 0, 64, (-2939), 0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value 64 for minuteOfHour must be in the range [0,59]
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",1,
project,0,test04950,"public void test04950() throws Throwable {
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) fixedDateTimeZone0);
    Period period0 = Period.weeks((-1140));
    mutableDateTime0.add((ReadablePeriod) period0, 0);
    assertEquals(1392409281320L, mutableDateTime0.getMillis());
}",0,
project,0,test05051,"public void test05051() throws Throwable {
    MutableDateTime mutableDateTime0 = new MutableDateTime((-1399L));
    Duration duration0 = new Duration(0L, 3);
    mutableDateTime0.add((ReadableDuration) duration0, 5);
    assertEquals((-1384L), mutableDateTime0.getMillis());
}",0,"assertEquals(0, mutableDateTime0.getMillis())"
project,0,test05152,"public void test05152() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    Instant instant0 = gJChronology0.getGregorianCutover();
    MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
    mutableDateTime0.setMillis((long) 60000);
    assertEquals(60000L, mutableDateTime0.getMillis());
}",0,"assertEquals(0, mutableDateTime0.getMillis())"
project,0,test05253,"public void test05253() throws Throwable {
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
    MutableDateTime mutableDateTime0 = new MutableDateTime((Object) null, dateTimeZone0);
    assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
}",1,
project,0,test05354,"public void test05354() throws Throwable {
    DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
    DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
    doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class), anyString(), anyInt());
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
    MutableDateTime mutableDateTime0 = MutableDateTime.parse("""", dateTimeFormatter0);
    mutableDateTime0.addMillis((-804));
    assertEquals(28799196L, mutableDateTime0.getMillis());
}",0,"assertEquals(0, mutableDateTime0.getMillis())"
project,0,test05455,"public void test05455() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
    MutableDateTime mutableDateTime0 = new MutableDateTime(1899, 536, 1093, (-3307), (-606), 1, 722, lenientChronology0);
    assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
}",0,
project,0,test05556,"public void test05556() throws Throwable {
    MutableDateTime mutableDateTime0 = new MutableDateTime((Object) null);
    mutableDateTime0.setWeekyear(0);
    assertEquals((-62162999140680L), mutableDateTime0.getMillis());
}",0,"assertEquals(0, mutableDateTime0.getMillis())"
project,0,test05657,"public void test05657() throws Throwable {
    Instant instant0 = new Instant();
    MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
    mutableDateTime0.add(1968L);
    assertEquals(1392409283288L, mutableDateTime0.getMillis());
}",0,"assertEquals(0, mutableDateTime0.getMillis())"
project,0,test05758,"public void test05758() throws Throwable {
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    MutableDateTime mutableDateTime0 = new MutableDateTime(5, 4, 1, 3, 0, 0, 4, fixedDateTimeZone0);
    assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
}",1,
project,0,test05859,"public void test05859() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstance();
    MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) gJChronology0);
    // Undeclared exception!
    try {
        mutableDateTime0.property((DateTimeFieldType) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The DateTimeFieldType must not be null
        //
        verifyException(""org.joda.time.MutableDateTime"", e);
    }
}",1,
project,0,test05960,"public void test05960() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
    IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
    MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) islamicChronology0);
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
    MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.property(dateTimeFieldType0);
    assertNotNull(mutableDateTime_Property0);
}",1,
project,0,test06061,"public void test06061() throws Throwable {
    MutableDateTime mutableDateTime0 = MutableDateTime.now();
    mutableDateTime0.setTime((ReadableInstant) null);
    assertEquals(1392409281320L, mutableDateTime0.getMillis());
}",0,"assertEquals(0, mutableDateTime0.getMillis())"
project,0,test06162,"public void test06162() throws Throwable {
    MutableDateTime mutableDateTime0 = MutableDateTime.now();
    mutableDateTime0.setDate((ReadableInstant) mutableDateTime0);
    assertEquals(1392409281320L, mutableDateTime0.getMillis());
}",0,"assertEquals(0, mutableDateTime0.getMillis())"
project,0,test06263,"public void test06263() throws Throwable {
    MutableDateTime mutableDateTime0 = MutableDateTime.now();
    mutableDateTime0.setDate((ReadableInstant) null);
    assertEquals(1392409281320L, mutableDateTime0.getMillis());
}",0,"assertEquals(0, mutableDateTime0.getMillis())"
project,0,test06364,"public void test06364() throws Throwable {
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
    MutableDateTime mutableDateTime0 = new MutableDateTime(1193L, (Chronology) buddhistChronology0);
    // Undeclared exception!
    try {
        mutableDateTime0.add((DurationFieldType) null, 4);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Field must not be null
        //
        verifyException(""org.joda.time.MutableDateTime"", e);
    }
}",1,
project,0,test06465,"public void test06465() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
    IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
    MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) islamicChronology0);
    DurationFieldType durationFieldType0 = DurationFieldType.DAYS_TYPE;
    mutableDateTime0.add(durationFieldType0, 1);
    assertEquals(1392495681320L, mutableDateTime0.getMillis());
}",0,
project,0,test06566,"public void test06566() throws Throwable {
    MutableDateTime mutableDateTime0 = MutableDateTime.now();
    // Undeclared exception!
    try {
        mutableDateTime0.set((DateTimeFieldType) null, 0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Field must not be null
        //
        verifyException(""org.joda.time.MutableDateTime"", e);
    }
}",0,
project,0,test06667,"public void test06667() throws Throwable {
    MutableDateTime mutableDateTime0 = MutableDateTime.now();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
    mutableDateTime0.set(dateTimeFieldType0, 24);
    assertEquals(1707942081320L, mutableDateTime0.getMillis());
}",0,
project,0,test06768,"public void test06768() throws Throwable {
    MutableDateTime mutableDateTime0 = new MutableDateTime();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(3, 2);
    CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0, 1);
    MutableDateTime mutableDateTime1 = mutableDateTime0.toMutableDateTime((Chronology) copticChronology0);
    mutableDateTime1.setZoneRetainFields((DateTimeZone) null);
    assertEquals(1392449001320L, mutableDateTime1.getMillis());
}",0,
project,0,test06869,"public void test06869() throws Throwable {
    MutableDateTime mutableDateTime0 = MutableDateTime.now();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(5, 4);
    mutableDateTime0.setZone(dateTimeZone0);
    mutableDateTime0.setZoneRetainFields(dateTimeZone0);
    assertEquals(1392409281320L, mutableDateTime0.getMillis());
}",0,
project,0,test06970,"public void test06970() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
    IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
    MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) islamicChronology0);
    mutableDateTime0.setZone(dateTimeZone0);
    assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
}",0,
project,0,test07071,"public void test07071() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
    IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
    MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) islamicChronology0);
    mutableDateTime0.add((ReadablePeriod) null, 1);
    assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
}",0,
project,0,test07172,"public void test07172() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
    MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) ethiopicChronology0);
    mutableDateTime0.add((ReadableDuration) null, 3346);
    assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
}",0,
project,0,test07273,"public void test07273() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    Instant instant0 = gJChronology0.getGregorianCutover();
    MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
    DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
    DateTimeField dateTimeField1 = LenientDateTimeField.getInstance(dateTimeField0, buddhistChronology0);
    mutableDateTime0.setRounding(dateTimeField1, 5);
    assertEquals(5, mutableDateTime0.getRoundingMode());
}",0,
project,0,test07374,"public void test07374() throws Throwable {
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) fixedDateTimeZone0);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
    DateTimeField dateTimeField0 = buddhistChronology0.weekOfWeekyear();
    mutableDateTime0.setRounding(dateTimeField0, 4);
    assertEquals(1392624000000L, mutableDateTime0.getMillis());
}",0,
project,0,test07475,"public void test07475() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
    MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) gregorianChronology0);
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
    MillisDurationField millisDurationField0 = (MillisDurationField) MillisDurationField.INSTANCE;
    DurationFieldType durationFieldType0 = DurationFieldType.days();
    DecoratedDurationField decoratedDurationField0 = new DecoratedDurationField(millisDurationField0, durationFieldType0);
    ScaledDurationField scaledDurationField0 = new ScaledDurationField(decoratedDurationField0, durationFieldType0, (-984));
    UnsupportedDateTimeField unsupportedDateTimeField0 = UnsupportedDateTimeField.getInstance(dateTimeFieldType0, scaledDurationField0);
    // Undeclared exception!
    try {
        mutableDateTime0.setRounding((DateTimeField) unsupportedDateTimeField0, 3);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // dayOfMonth field is unsupported
        //
        verifyException(""org.joda.time.field.UnsupportedDateTimeField"", e);
    }
}",1,
project,0,test07576,"public void test07576() throws Throwable {
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) fixedDateTimeZone0);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
    DateTimeField dateTimeField0 = buddhistChronology0.monthOfYear();
    mutableDateTime0.setRounding(dateTimeField0, 2);
    mutableDateTime0.setMillis((long) 4);
    assertEquals(28800000L, mutableDateTime0.getMillis());
}",0,"assertEquals(0, mutableDateTime0.getMillis())"
project,0,test07677,"public void test07677() throws Throwable {
    MutableDateTime mutableDateTime0 = MutableDateTime.now();
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
    DateTimeField dateTimeField0 = buddhistChronology0.dayOfMonth();
    mutableDateTime0.setRounding(dateTimeField0, 0);
    assertEquals(1392409281320L, mutableDateTime0.getMillis());
}",0,"assertEquals(0, mutableDateTime0.getMillis())"
project,0,test07678,"public void test07678() throws Throwable {
    MutableDateTime mutableDateTime0 = MutableDateTime.now();
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
    DateTimeField dateTimeField0 = buddhistChronology0.dayOfMonth();
    mutableDateTime0.setRounding(dateTimeField0, 0);
    assertEquals(0, mutableDateTime0.getRoundingMode());
}",0,"assertEquals(0, mutableDateTime0.getRoundingMode())"
project,0,test07779,"public void test07779() throws Throwable {
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) fixedDateTimeZone0);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
    DateTimeField dateTimeField0 = buddhistChronology0.weekOfWeekyear();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
    DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 5);
    // Undeclared exception!
    try {
        mutableDateTime0.setRounding((DateTimeField) dividedDateTimeField0, 6);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal rounding mode: 6
        //
        verifyException(""org.joda.time.MutableDateTime"", e);
    }
}",1,
project,0,test07880,"public void test07880() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
    MutableDateTime mutableDateTime0 = new MutableDateTime(0L, dateTimeZone0);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
    DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
    // Undeclared exception!
    try {
        mutableDateTime0.setRounding(dateTimeField0, (-901));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal rounding mode: -901
        //
        verifyException(""org.joda.time.MutableDateTime"", e);
    }
}",1,
project,0,test07981,"public void test07981() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    MutableDateTime mutableDateTime0 = new MutableDateTime(dateTimeZone0);
    mutableDateTime0.setRounding((DateTimeField) null, (-1703));
    assertEquals(1392409281320L, mutableDateTime0.getMillis());
}",0,"assertEquals(0, mutableDateTime0.getMillis())"
project,0,test07982,"public void test07982() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    MutableDateTime mutableDateTime0 = new MutableDateTime(dateTimeZone0);
    mutableDateTime0.setRounding((DateTimeField) null, (-1703));
    assertEquals(0, mutableDateTime0.getRoundingMode());
}",0,"assertEquals(0, mutableDateTime0.getRoundingMode())"
project,0,test08083,"public void test08083() throws Throwable {
    // Undeclared exception!
    try {
        MutableDateTime.now((Chronology) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // Chronology must not be null
        //
        verifyException(""org.joda.time.MutableDateTime"", e);
    }
}",0,
project,0,test08184,"public void test08184() throws Throwable {
    // Undeclared exception!
    try {
        MutableDateTime.now((DateTimeZone) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // Zone must not be null
        //
        verifyException(""org.joda.time.MutableDateTime"", e);
    }
}",1,
project,0,test08285,"public void test08285() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
    MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) ethiopicChronology0);
    MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.year();
    assertNotNull(mutableDateTime_Property0);
}",0,assertNotNull(mutableDateTime_Property0)
project,0,test08386,"public void test08386() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    Instant instant0 = gJChronology0.getGregorianCutover();
    MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
    MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.dayOfYear();
    assertNotNull(mutableDateTime_Property0);
}",0,assertNotNull(mutableDateTime_Property0)
project,0,test08487,"public void test08487() throws Throwable {
    MutableDateTime mutableDateTime0 = new MutableDateTime((-1399L));
    MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.dayOfMonth();
    assertNotNull(mutableDateTime_Property0);
}",0,assertNotNull(mutableDateTime_Property0)
project,0,test08588,"public void test08588() throws Throwable {
    MutableDateTime mutableDateTime0 = new MutableDateTime();
    mutableDateTime0.setMinuteOfHour(2);
    assertEquals(1392408141320L, mutableDateTime0.getMillis());
}",0,"assertEquals(0, mutableDateTime0.getMillis())"
project,0,test08689,"public void test08689() throws Throwable {
    MutableDateTime mutableDateTime0 = new MutableDateTime((-1399L));
    mutableDateTime0.addWeeks((-1269));
    assertEquals((-767494801399L), mutableDateTime0.getMillis());
}",0,"assertEquals(0, mutableDateTime0.getMillis())"
project,0,test08790,"public void test08790() throws Throwable {
    IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
    MutableDateTime mutableDateTime0 = null;
    try {
        mutableDateTime0 = new MutableDateTime(7678125, 7678125, 7678125, 7678125, 2180, 2180, 7678125, islamicChronology0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value 7678125 for hourOfDay must be in the range [0,23]
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",0,
project,0,test08891,"public void test08891() throws Throwable {
    MutableDateTime mutableDateTime0 = new MutableDateTime();
    mutableDateTime0.addMonths(0);
    assertEquals(1392409281320L, mutableDateTime0.getMillis());
}",0,"assertEquals(0, mutableDateTime0.getMillis())"
project,0,test08992,"public void test08992() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
    IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
    MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) islamicChronology0);
    mutableDateTime0.setMillis((ReadableInstant) mutableDateTime0);
    assertEquals(1392409281320L, mutableDateTime0.getMillis());
}",0,"assertEquals(0, mutableDateTime0.getMillis())"
project,0,test09093,"public void test09093() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
    MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) ethiopicChronology0);
    mutableDateTime0.setWeekOfWeekyear(1);
    assertEquals(1379100081320L, mutableDateTime0.getMillis());
}",0,
project,0,test09194,"public void test09194() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    Instant instant0 = gJChronology0.getGregorianCutover();
    MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
    // Undeclared exception!
    try {
        mutableDateTime0.setMonthOfYear(60000);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value 60000 for monthOfYear must be in the range [1,12]
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",1,
project,0,test09295,"public void test09295() throws Throwable {
    MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
    MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.monthOfYear();
    assertNotNull(mutableDateTime_Property0);
}",0,assertNotNull(mutableDateTime_Property0)
project,0,test09396,"public void test09396() throws Throwable {
    CopticChronology copticChronology0 = CopticChronology.getInstance();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
    MutableDateTime mutableDateTime0 = null;
    try {
        mutableDateTime0 = new MutableDateTime(copticChronology0, dateTimeZone0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // No instant converter found for type: org.joda.time.chrono.CopticChronology
        //
        verifyException(""org.joda.time.convert.ConverterManager"", e);
    }
}",1,
project,0,test09497,"public void test09497() throws Throwable {
    MutableDateTime mutableDateTime0 = new MutableDateTime();
    MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.weekyear();
    assertNotNull(mutableDateTime_Property0);
}",0,assertNotNull(mutableDateTime_Property0)
project,0,test09598,"public void test09598() throws Throwable {
    MutableDateTime mutableDateTime0 = new MutableDateTime((-1399L));
    MutableDateTime mutableDateTime1 = mutableDateTime0.copy();
    assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
}",1,
project,0,test09699,"public void test09699() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
    IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
    MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) islamicChronology0);
    mutableDateTime0.setDayOfYear(5);
    assertEquals(1384028481320L, mutableDateTime0.getMillis());
}",0,"assertEquals(0, mutableDateTime0.getMillis())"
project,0,test097100,"public void test097100() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
    IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
    MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) islamicChronology0);
    Duration duration0 = Duration.standardMinutes((-549L));
    mutableDateTime0.add((ReadableDuration) duration0);
    assertEquals(1392376341320L, mutableDateTime0.getMillis());
}",0,"assertEquals(0, mutableDateTime0.getMillis())"
project,0,test098101,"public void test098101() throws Throwable {
    MutableDateTime mutableDateTime0 = MutableDateTime.now();
    MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.secondOfDay();
    assertNotNull(mutableDateTime_Property0);
}",0,assertNotNull(mutableDateTime_Property0)
project,0,test099102,"public void test099102() throws Throwable {
    MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
    mutableDateTime0.setTime((long) 0);
    assertEquals((-57600000L), mutableDateTime0.getMillis());
}",0,
project,0,test100103,"public void test100103() throws Throwable {
    MutableDateTime mutableDateTime0 = MutableDateTime.now();
    mutableDateTime0.setHourOfDay(2);
    assertEquals(1392373281320L, mutableDateTime0.getMillis());
}",0,"assertEquals(0, mutableDateTime0.getMillis())"
project,0,test101104,"public void test101104() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
    MutableDateTime mutableDateTime0 = new MutableDateTime(0L, dateTimeZone0);
    mutableDateTime0.setMillisOfSecond(143);
    assertEquals(143L, mutableDateTime0.getMillis());
}",0,"assertEquals(0, mutableDateTime0.getMillis())"
project,0,test102105,"public void test102105() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
    MutableDateTime mutableDateTime0 = new MutableDateTime(0L, dateTimeZone0);
    String string0 = mutableDateTime0.toString();
    assertEquals(""1970-01-01T00:00:00.000Z"", string0);
}",0,
project,0,test103106,"public void test103106() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
    MutableDateTime mutableDateTime0 = new MutableDateTime(0L, dateTimeZone0);
    mutableDateTime0.setMillisOfDay(2670);
    assertEquals(2670L, mutableDateTime0.getMillis());
}",0,"assertEquals(0, mutableDateTime0.getMillis())"
project,0,test104107,"public void test104107() throws Throwable {
    MutableDateTime mutableDateTime0 = new MutableDateTime(4294967295L);
    // Undeclared exception!
    try {
        mutableDateTime0.setDayOfMonth(1947);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value 1947 for dayOfMonth must be in the range [1,28]
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",0,
project,0,test105108,"public void test105108() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
    IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
    MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) islamicChronology0);
    int int0 = mutableDateTime0.getRoundingMode();
    assertEquals(0, int0);
}",0,"assertEquals(0, int0)"
project,0,test106109,"public void test106109() throws Throwable {
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) fixedDateTimeZone0);
    mutableDateTime0.setDayOfWeek(4);
    assertEquals(1392322881320L, mutableDateTime0.getMillis());
}",0,"assertEquals(0, mutableDateTime0.getMillis())"
project,0,test107110,"public void test107110() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
    IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
    MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) islamicChronology0);
    MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.hourOfDay();
    assertNotNull(mutableDateTime_Property0);
}",0,
project,0,test108111,"public void test108111() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
    IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
    MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) islamicChronology0);
    mutableDateTime0.setSecondOfMinute(0);
    assertEquals(1392409260320L, mutableDateTime0.getMillis());
}",0,"assertEquals(0, mutableDateTime0.getMillis())"
project,0,test109112,"public void test109112() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
    IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
    MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) islamicChronology0);
    mutableDateTime0.setMinuteOfDay(0);
    assertEquals(1392336021320L, mutableDateTime0.getMillis());
}",0,
project,0,test110113,"public void test110113() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
    IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
    MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) islamicChronology0);
    mutableDateTime0.setDate(5, 2, 4);
    assertEquals((-42396233918680L), mutableDateTime0.getMillis());
}",0,"assertEquals(0, mutableDateTime0.getMillis())"
project,0,test111114,"public void test111114() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
    MutableDateTime mutableDateTime0 = null;
    try {
        mutableDateTime0 = new MutableDateTime(0, 4, 4, 0, 23118750, 0, 0, dateTimeZone0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value 23118750 for minuteOfHour must be in the range [0,59]
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",0,
project,0,test112115,"public void test112115() throws Throwable {
    MutableDateTime mutableDateTime0 = MutableDateTime.now();
    mutableDateTime0.addSeconds(1);
    assertEquals(1392409282320L, mutableDateTime0.getMillis());
}",0,
project,0,test113116,"public void test113116() throws Throwable {
    MutableDateTime mutableDateTime0 = new MutableDateTime(2, 1, 5, 1, 5, 1, 1);
    assertEquals((-62103682920999L), mutableDateTime0.getMillis());
}",0,"assertEquals(0, mutableDateTime0.getMillis())"
project,0,test114117,"public void test114117() throws Throwable {
    MutableDateTime mutableDateTime0 = new MutableDateTime((Object) null, (Chronology) null);
    assertEquals(1392409281320L, mutableDateTime0.getMillis());
}",0,"assertEquals(0, mutableDateTime0.getMillis())"
project,0,test115118,"public void test115118() throws Throwable {
    MutableDateTime mutableDateTime0 = MutableDateTime.now();
    mutableDateTime0.addHours((-553));
    assertEquals(1390418481320L, mutableDateTime0.getMillis());
}",0,"assertEquals(0, mutableDateTime0.getMillis())"
project,0,test116119,"public void test116119() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
    MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) ethiopicChronology0);
    MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.secondOfMinute();
    assertNotNull(mutableDateTime_Property0);
}",0,assertNotNull(mutableDateTime_Property0)
project,0,test117120,"public void test117120() throws Throwable {
    MutableDateTime mutableDateTime0 = MutableDateTime.now();
    Minutes minutes0 = Minutes.ZERO;
    mutableDateTime0.add((ReadablePeriod) minutes0);
    assertEquals(1392409281320L, mutableDateTime0.getMillis());
}",0,"assertEquals(0, mutableDateTime0.getMillis())"
project,0,test118121,"public void test118121() throws Throwable {
    MutableDateTime mutableDateTime0 = MutableDateTime.now();
    MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.centuryOfEra();
    assertNotNull(mutableDateTime_Property0);
}",0,assertNotNull(mutableDateTime_Property0)
project,0,test119122,"public void test119122() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(12);
    IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
    MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) islamicChronology0);
    // Undeclared exception!
    try {
        mutableDateTime0.setWeekyear(0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value 0 for weekyear must be in the range [1,292271022]
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",0,
project,0,test120123,"public void test120123() throws Throwable {
    MutableDateTime mutableDateTime0 = MutableDateTime.now();
    mutableDateTime0.addYears(529);
    assertEquals(18086012481320L, mutableDateTime0.getMillis());
}",0,"assertEquals(0, mutableDateTime0.getMillis())"
project,0,test121124,"public void test121124() throws Throwable {
    MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
    MutableDateTime mutableDateTime1 = (MutableDateTime) mutableDateTime0.clone();
    assertEquals(1, MutableDateTime.ROUND_FLOOR);
}",0,
project,0,test122125,"public void test122125() throws Throwable {
    MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
    mutableDateTime0.setDate(0L);
    assertEquals(0, MutableDateTime.ROUND_NONE);
}",1,
project,0,test123126,"public void test123126() throws Throwable {
    MutableDateTime mutableDateTime0 = new MutableDateTime();
    // Undeclared exception!
    try {
        mutableDateTime0.setTime(5, 4, 124, 0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value 124 for secondOfMinute must be in the range [0,59]
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",0,
project,0,test124127,"public void test124127() throws Throwable {
    MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
    MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.weekOfWeekyear();
    assertNotNull(mutableDateTime_Property0);
}",0,assertNotNull(mutableDateTime_Property0)
project,0,test125128,"public void test125128() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
    IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
    MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) islamicChronology0);
    DateTimeField dateTimeField0 = mutableDateTime0.getRoundingField();
    assertNull(dateTimeField0);
}",0,
project,0,test126129,"public void test126129() throws Throwable {
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
    MutableDateTime mutableDateTime0 = new MutableDateTime((-52L), (Chronology) islamicChronology0);
    MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.yearOfCentury();
    assertNotNull(mutableDateTime_Property0);
}",0,assertNotNull(mutableDateTime_Property0)
project,0,test127130,"public void test127130() throws Throwable {
    MutableDateTime mutableDateTime0 = null;
    try {
        mutableDateTime0 = new MutableDateTime(""(.s>>e"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid format: \""(.s>>e\""
        //
        verifyException(""org.joda.time.format.DateTimeFormatter"", e);
    }
}",0,
project,0,test128131,"public void test128131() throws Throwable {
    MutableDateTime mutableDateTime0 = MutableDateTime.now();
    mutableDateTime0.addDays(0);
    assertEquals(1392409281320L, mutableDateTime0.getMillis());
}",0,"assertEquals(0, mutableDateTime0.getMillis())"
project,0,test129132,"public void test129132() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
    IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
    MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) islamicChronology0);
    mutableDateTime0.setChronology(islamicChronology0);
    assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
}",0,
project,0,test130133,"public void test130133() throws Throwable {
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
    MutableDateTime mutableDateTime0 = new MutableDateTime((-52L), (Chronology) islamicChronology0);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    DateTimeField dateTimeField0 = buddhistChronology0.weekOfWeekyear();
    mutableDateTime0.setRounding(dateTimeField0);
    int int0 = mutableDateTime0.getRoundingMode();
    assertEquals((-259200000L), mutableDateTime0.getMillis());
}",0,"assertEquals(0, mutableDateTime0.getMillis())"
project,0,test130134,"public void test130134() throws Throwable {
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
    MutableDateTime mutableDateTime0 = new MutableDateTime((-52L), (Chronology) islamicChronology0);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    DateTimeField dateTimeField0 = buddhistChronology0.weekOfWeekyear();
    mutableDateTime0.setRounding(dateTimeField0);
    int int0 = mutableDateTime0.getRoundingMode();
    assertEquals(1, int0);
}",0,"assertEquals(0, int0)"
project,0,test131135,"public void test131135() throws Throwable {
    MutableDateTime mutableDateTime0 = MutableDateTime.now();
    mutableDateTime0.setYear(529);
    assertEquals((-45469655140680L), mutableDateTime0.getMillis());
}",0,"assertEquals(0, mutableDateTime0.getMillis())"
project,0,test132136,"public void test132136() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) gJChronology0);
    // Undeclared exception!
    try {
        mutableDateTime0.setSecondOfDay(5062500);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value 5062500 for secondOfDay must be in the range [0,86399]
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",1,
project,0,test133137,"public void test133137() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    Instant instant0 = gJChronology0.getGregorianCutover();
    MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
    mutableDateTime0.addWeekyears(1);
    assertEquals((-12187843200000L), mutableDateTime0.getMillis());
}",0,"assertEquals(0, mutableDateTime0.getMillis())"
project,0,test135139,"public void test135139() throws Throwable {
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) fixedDateTimeZone0);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
    DateTimeField dateTimeField0 = buddhistChronology0.weekOfWeekyear();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
    DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 5);
    MutableDateTime.Property mutableDateTime_Property0 = new MutableDateTime.Property(mutableDateTime0, dividedDateTimeField0);
    mutableDateTime_Property0.addWrapField(1);
    assertEquals(1395429681320L, mutableDateTime0.getMillis());
}",0,"assertEquals(0, mutableDateTime0.getMillis())"
project,0,test137141,"public void test137141() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
    IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
    MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) islamicChronology0);
    MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.minuteOfDay();
    mutableDateTime_Property0.add((long) 4);
    assertEquals(1392409521320L, mutableDateTime0.getMillis());
}",0,
project,0,test138142,"public void test138142() throws Throwable {
    MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
    MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.minuteOfHour();
    MutableDateTime mutableDateTime1 = mutableDateTime_Property0.set(0);
    assertEquals(0L, mutableDateTime1.getMillis());
}",0,
project,0,test139143,"public void test139143() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
    IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
    MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) islamicChronology0);
    MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.minuteOfDay();
    mutableDateTime_Property0.add((-3169));
    assertEquals(1392219141320L, mutableDateTime0.getMillis());
}",0,"assertEquals(0, mutableDateTime0.getMillis())"
project,0,test142146,"public void test142146() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) gJChronology0);
    MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.millisOfDay();
    MutableDateTime mutableDateTime1 = mutableDateTime_Property0.roundFloor();
    assertEquals(1392409281320L, mutableDateTime1.getMillis());
}",0,
project,0,test145149,"public void test145149() throws Throwable {
    MutableDateTime mutableDateTime0 = new MutableDateTime(4294967295L);
    MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.dayOfWeek();
    mutableDateTime_Property0.roundHalfEven();
    assertEquals(4262400000L, mutableDateTime0.getMillis());
}",0,"assertEquals(0, mutableDateTime0.getMillis())"
