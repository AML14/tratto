{
  "test2027" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2027() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);\n    int int0 = dateTimeZone0.getOffset(9972000000L);\n    dateTimeZone0.getID();\n}",
    "testName" : "test2027"
  },
  "test2940" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2940() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3409);\n    long long0 = dateTimeZone0.convertLocalToUTC((long) 3409, true, (-1531L));\n    dateTimeZone0.toString();\n}",
    "testName" : "test2940"
  },
  "test4966" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4966() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3409);\n    long long0 = dateTimeZone0.adjustOffset(3409, false);\n    dateTimeZone0.toString();\n}",
    "testName" : "test4966"
  },
  "test5777" : {
    "methodSignature" : "public long getMillisKeepLocal(DateTimeZone newZone, long oldInstant)",
    "methodName" : "getMillisKeepLocal",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5777() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(0);\n    long long0 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, 1673L);\n}",
    "testName" : "test5777"
  },
  "test2028" : {
    "methodSignature" : "public abstract int getOffset(long instant)",
    "methodName" : "getOffset",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2028() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);\n    int int0 = dateTimeZone0.getOffset(9972000000L);\n}",
    "testName" : "test2028"
  },
  "test2941" : {
    "methodSignature" : "public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC)",
    "methodName" : "convertLocalToUTC",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2941() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3409);\n    long long0 = dateTimeZone0.convertLocalToUTC((long) 3409, true, (-1531L));\n}",
    "testName" : "test2941"
  },
  "test87116" : {
    "methodSignature" : "public final String getShortName(long instant)",
    "methodName" : "getShortName",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test87116() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(57);\n    String string0 = dateTimeZone0.getShortName(4117L);\n}",
    "testName" : "test87116"
  },
  "test3751" : {
    "methodSignature" : "public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC)",
    "methodName" : "convertLocalToUTC",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3751() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    long long0 = dateTimeZone0.convertLocalToUTC((-806L), true, (-806L));\n}",
    "testName" : "test3751"
  },
  "test6587" : {
    "methodSignature" : "public static DateTimeZone forID(String id)",
    "methodName" : "forID",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6587() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"`HAljM6#\");\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);\n    DateTimeZone dateTimeZone1 = DateTimeZone.forID(\"+00:00\");\n}",
    "testName" : "test6587"
  },
  "test1216" : {
    "methodSignature" : "public abstract long nextTransition(long instant)",
    "methodName" : "nextTransition",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1216() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    long long0 = dateTimeZone0.nextTransition(0L);\n}",
    "testName" : "test1216"
  },
  "test4967" : {
    "methodSignature" : "public long adjustOffset(long instant, boolean earlierOrLater)",
    "methodName" : "adjustOffset",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4967() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3409);\n    long long0 = dateTimeZone0.adjustOffset(3409, false);\n}",
    "testName" : "test4967"
  },
  "test6181" : {
    "methodSignature" : "public int getOffsetFromLocal(long instantLocal)",
    "methodName" : "getOffsetFromLocal",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6181() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    int int0 = dateTimeZone0.getOffsetFromLocal(1L);\n}",
    "testName" : "test6181"
  },
  "test068" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test068() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(4);\n    dateTimeZone0.UTC.toTimeZone();\n    dateTimeZone0.toString();\n}",
    "testName" : "test068"
  },
  "test4561" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4561() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);\n    dateTimeZone0.UTC.isFixed();\n    dateTimeZone0.getID();\n}",
    "testName" : "test4561"
  },
  "test6586" : {
    "methodSignature" : "public static DateTimeZone forTimeZone(TimeZone zone)",
    "methodName" : "forTimeZone",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6586() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"`HAljM6#\");\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);\n}",
    "testName" : "test6586"
  },
  "test4562" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4562() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);\n    dateTimeZone0.UTC.isFixed();\n    dateTimeZone0.toString();\n}",
    "testName" : "test4562"
  },
  "test7399" : {
    "methodSignature" : "public static DateTimeZone forTimeZone(TimeZone zone)",
    "methodName" : "forTimeZone",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7399() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(12740625);\n    TimeZone timeZone0 = dateTimeZone0.toTimeZone();\n    DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);\n}",
    "testName" : "test7399"
  },
  "test5373" : {
    "methodSignature" : "public long convertLocalToUTC(long instantLocal, boolean strict)",
    "methodName" : "convertLocalToUTC",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5373() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);\n    dateTimeZone0.convertLocalToUTC(9223372036854775807L, true);\n}",
    "testName" : "test5373"
  },
  "test7398" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7398() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(12740625);\n    TimeZone timeZone0 = dateTimeZone0.toTimeZone();\n    DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);\n    dateTimeZone1.getID();\n}",
    "testName" : "test7398"
  },
  "test7397" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7397() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(12740625);\n    TimeZone timeZone0 = dateTimeZone0.toTimeZone();\n    DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);\n    timeZone0.toString();\n}",
    "testName" : "test7397"
  },
  "test1620" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1620() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(572, 1);\n    int int0 = dateTimeZone0.getStandardOffset(0L);\n    dateTimeZone0.getID();\n}",
    "testName" : "test1620"
  },
  "test2433" : {
    "methodSignature" : "public abstract String getNameKey(long instant)",
    "methodName" : "getNameKey",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2433() throws Throwable {\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();\n    String string0 = dateTimeZone0.getNameKey((-575L));\n}",
    "testName" : "test2433"
  },
  "test1621" : {
    "methodSignature" : "public abstract int getStandardOffset(long instant)",
    "methodName" : "getStandardOffset",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1621() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(572, 1);\n    int int0 = dateTimeZone0.getStandardOffset(0L);\n}",
    "testName" : "test1621"
  },
  "test3246" : {
    "methodSignature" : "public long adjustOffset(long instant, boolean earlierOrLater)",
    "methodName" : "adjustOffset",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3246() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    long long0 = dateTimeZone0.adjustOffset((-1L), true);\n}",
    "testName" : "test3246"
  },
  "test2838" : {
    "methodSignature" : "public long convertUTCToLocal(long instantUTC)",
    "methodName" : "convertUTCToLocal",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2838() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(572, 1);\n    long long0 = dateTimeZone0.convertUTCToLocal(1);\n}",
    "testName" : "test2838"
  },
  "test067" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test067() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(4);\n    dateTimeZone0.UTC.toTimeZone();\n    dateTimeZone0.getID();\n}",
    "testName" : "test067"
  },
  "test2839" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2839() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(572, 1);\n    long long0 = dateTimeZone0.convertUTCToLocal(1);\n    dateTimeZone0.getID();\n}",
    "testName" : "test2839"
  },
  "test0811" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0811() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2988));\n    dateTimeZone0.UTC.previousTransition(0L);\n    dateTimeZone0.toString();\n}",
    "testName" : "test0811"
  },
  "test0812" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0812() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2988));\n    dateTimeZone0.UTC.previousTransition(0L);\n    dateTimeZone0.getID();\n}",
    "testName" : "test0812"
  },
  "test6992" : {
    "methodSignature" : "public static void setProvider(Provider provider) throws SecurityException",
    "methodName" : "setProvider",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6992() throws Throwable {\n    DateTimeZone.setProvider((Provider) null);\n}",
    "testName" : "test6992"
  },
  "test4054" : {
    "methodSignature" : "public String getName(long instant, Locale locale)",
    "methodName" : "getName",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4054() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    Locale locale0 = Locale.PRC;\n    String string0 = dateTimeZone0.getName(10799996L, locale0);\n}",
    "testName" : "test4054"
  },
  "test76103" : {
    "methodSignature" : "public static DateTimeZone forOffsetHours(int hoursOffset) throws IllegalArgumentException",
    "methodName" : "forOffsetHours",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test76103() throws Throwable {\n    DateTimeZone.forOffsetHours((-2112));\n}",
    "testName" : "test76103"
  },
  "test1115" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1115() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(572, 1);\n    dateTimeZone0.nextTransition(0L);\n    dateTimeZone0.toString();\n}",
    "testName" : "test1115"
  },
  "test4865" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4865() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    String string0 = dateTimeZone0.getID();\n}",
    "testName" : "test4865"
  },
  "test5676" : {
    "methodSignature" : "public LocalDateTime()",
    "methodName" : "LocalDateTime",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5676() throws Throwable {\n    System.setCurrentTimeMillis((-9223372036854775808L));\n    LocalDateTime localDateTime0 = null;\n    localDateTime0 = new LocalDateTime();\n}",
    "testName" : "test5676"
  },
  "test3650" : {
    "methodSignature" : "public long convertLocalToUTC(long instantLocal, boolean strict)",
    "methodName" : "convertLocalToUTC",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3650() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    long long0 = dateTimeZone0.UTC.convertLocalToUTC(0L, true);\n}",
    "testName" : "test3650"
  },
  "test011" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 59);\n    dateTimeZone0.getID();\n}",
    "testName" : "test011"
  },
  "test1519" : {
    "methodSignature" : "public abstract int getStandardOffset(long instant)",
    "methodName" : "getStandardOffset",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1519() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forID(\"WET\");\n    int int0 = dateTimeZone0.getStandardOffset(1804L);\n}",
    "testName" : "test1519"
  },
  "test6080" : {
    "methodSignature" : "public int getOffsetFromLocal(long instantLocal)",
    "methodName" : "getOffsetFromLocal",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6080() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    int int0 = dateTimeZone0.getOffsetFromLocal(9223372036854775807L);\n}",
    "testName" : "test6080"
  },
  "test75102" : {
    "methodSignature" : "public abstract int getStandardOffset(long instant)",
    "methodName" : "getStandardOffset",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test75102() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);\n    int int0 = dateTimeZone0.getStandardOffset((-324L));\n}",
    "testName" : "test75102"
  },
  "test75101" : {
    "methodSignature" : "public static DateTimeZone forTimeZone(TimeZone zone)",
    "methodName" : "forTimeZone",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test75101() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);\n}",
    "testName" : "test75101"
  },
  "test4460" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4460() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes((-357), 1);\n    dateTimeZone0.toString();\n}",
    "testName" : "test4460"
  },
  "test6485" : {
    "methodSignature" : "public final String getName(long instant)",
    "methodName" : "getName",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6485() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    String string0 = dateTimeZone0.getName(9223372036854775807L);\n}",
    "testName" : "test6485"
  },
  "test5272" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5272() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(91);\n    long long0 = dateTimeZone0.convertLocalToUTC((long) 0, true);\n    dateTimeZone0.toString();\n}",
    "testName" : "test5272"
  },
  "test7296" : {
    "methodSignature" : "public static DateTimeZone getDefault()",
    "methodName" : "getDefault",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7296() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"`HAljM6#\");\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);\n    UTCProvider uTCProvider0 = new UTCProvider();\n    DateTimeZone.setProvider(uTCProvider0);\n    DateTimeZone dateTimeZone1 = DateTimeZone.getDefault();\n    //  // Unstable assertion: assertSame(dateTimeZone1, dateTimeZone0);\n}",
    "testName" : "test7296"
  },
  "test5271" : {
    "methodSignature" : "public long convertLocalToUTC(long instantLocal, boolean strict)",
    "methodName" : "convertLocalToUTC",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5271() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(91);\n    long long0 = dateTimeZone0.convertLocalToUTC((long) 0, true);\n}",
    "testName" : "test5271"
  },
  "test4358" : {
    "methodSignature" : "public String getShortName(long instant, Locale locale)",
    "methodName" : "getShortName",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4358() throws Throwable {\n    UTCProvider uTCProvider0 = new UTCProvider();\n    DateTimeZone dateTimeZone0 = uTCProvider0.getZone(\"UTC\");\n    String string0 = dateTimeZone0.getShortName((long) (-363), (Locale) null);\n}",
    "testName" : "test4358"
  },
  "test86114" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test86114() throws Throwable {\n    ZoneOffset zoneOffset0 = ZoneOffset.MIN;\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);\n    dateTimeZone0.toString();\n}",
    "testName" : "test86114"
  },
  "test86115" : {
    "methodSignature" : "public static DateTimeZone forTimeZone(TimeZone zone)",
    "methodName" : "forTimeZone",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test86115() throws Throwable {\n    ZoneOffset zoneOffset0 = ZoneOffset.MIN;\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);\n}",
    "testName" : "test86115"
  },
  "test3145" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3145() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(550);\n    long long0 = dateTimeZone0.UTC.adjustOffset(0L, false);\n    dateTimeZone0.toString();\n}",
    "testName" : "test3145"
  },
  "test3144" : {
    "methodSignature" : "public long adjustOffset(long instant, boolean earlierOrLater)",
    "methodName" : "adjustOffset",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3144() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(550);\n    long long0 = dateTimeZone0.UTC.adjustOffset(0L, false);\n}",
    "testName" : "test3144"
  },
  "test2332" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2332() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(4);\n    dateTimeZone0.getNameKey(9972000000L);\n    dateTimeZone0.toString();\n}",
    "testName" : "test2332"
  },
  "test000" : {
    "methodSignature" : "public static DateTimeZone forTimeZone(TimeZone zone)",
    "methodName" : "forTimeZone",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    TimeZone timeZone0 = dateTimeZone0.toTimeZone();\n    DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);\n}",
    "testName" : "test000"
  },
  "test1926" : {
    "methodSignature" : "public final int getOffset(ReadableInstant instant)",
    "methodName" : "getOffset",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1926() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    Instant instant0 = new Instant();\n    int int0 = dateTimeZone0.getOffset((ReadableInstant) instant0);\n}",
    "testName" : "test1926"
  },
  "test0710" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0710() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2988));\n    TimeZone timeZone0 = dateTimeZone0.toTimeZone();\n    dateTimeZone0.getID();\n}",
    "testName" : "test0710"
  },
  "test3549" : {
    "methodSignature" : "public long getMillisKeepLocal(DateTimeZone newZone, long oldInstant)",
    "methodName" : "getMillisKeepLocal",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3549() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    long long0 = dateTimeZone0.getMillisKeepLocal(dateTimeZone0, 0L);\n}",
    "testName" : "test3549"
  },
  "test81109" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test81109() throws Throwable {\n    TimeZone timeZone0 = TimeZone.getDefault();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);\n    DateTimeZone.setDefault(dateTimeZone0);\n    DateTimeZone dateTimeZone1 = DateTimeZone.forID((String) null);\n    dateTimeZone1.getID();\n}",
    "testName" : "test81109"
  },
  "test2737" : {
    "methodSignature" : "public long convertUTCToLocal(long instantUTC)",
    "methodName" : "convertUTCToLocal",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2737() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(572, \"ReadablePartial objects must be contiguous\");\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);\n    long long0 = dateTimeZone0.convertUTCToLocal(0L);\n}",
    "testName" : "test2737"
  },
  "test2736" : {
    "methodSignature" : "public static DateTimeZone forTimeZone(TimeZone zone)",
    "methodName" : "forTimeZone",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2736() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(572, \"ReadablePartial objects must be contiguous\");\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);\n}",
    "testName" : "test2736"
  },
  "test079" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test079() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2988));\n    TimeZone timeZone0 = dateTimeZone0.toTimeZone();\n    timeZone0.toString();\n}",
    "testName" : "test079"
  },
  "test78105" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test78105() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forID(\"-07:00\");\n    dateTimeZone0.toString();\n}",
    "testName" : "test78105"
  },
  "test6891" : {
    "methodSignature" : "public static void setNameProvider(NameProvider nameProvider) throws SecurityException",
    "methodName" : "setNameProvider",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6891() throws Throwable {\n    DefaultNameProvider defaultNameProvider0 = new DefaultNameProvider();\n    DateTimeZone.setNameProvider(defaultNameProvider0);\n}",
    "testName" : "test6891"
  },
  "test78106" : {
    "methodSignature" : "public static DateTimeZone forID(String id)",
    "methodName" : "forID",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test78106() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forID(\"-07:00\");\n}",
    "testName" : "test78106"
  },
  "test1014" : {
    "methodSignature" : "public long previousTransition(long instant)",
    "methodName" : "previousTransition",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1014() throws Throwable {\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    long long0 = fixedDateTimeZone0.previousTransition((-4403L));\n}",
    "testName" : "test1014"
  },
  "test83111" : {
    "methodSignature" : "public static NameProvider getNameProvider()",
    "methodName" : "getNameProvider",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test83111() throws Throwable {\n    NameProvider nameProvider0 = DateTimeZone.getNameProvider();\n}",
    "testName" : "test83111"
  },
  "test3953" : {
    "methodSignature" : "public long convertUTCToLocal(long instantUTC)",
    "methodName" : "convertUTCToLocal",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3953() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    long long0 = dateTimeZone0.convertUTCToLocal(5877L);\n}",
    "testName" : "test3953"
  },
  "test4764" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4764() throws Throwable {\n    DateTimeZone.getDefault();\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    dateTimeZone0.getID();\n}",
    "testName" : "test4764"
  },
  "test5575" : {
    "methodSignature" : "public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC)",
    "methodName" : "convertLocalToUTC",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5575() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    long long0 = dateTimeZone0.convertLocalToUTC(21859200000L, true, 10806818L);\n}",
    "testName" : "test5575"
  },
  "test033" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forID(\"+03:32:20.625\");\n    dateTimeZone0.getID();\n}",
    "testName" : "test033"
  },
  "test1418" : {
    "methodSignature" : "public abstract boolean isFixed()",
    "methodName" : "isFixed",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1418() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    boolean boolean0 = dateTimeZone0.isFixed();\n}",
    "testName" : "test1418"
  },
  "test034" : {
    "methodSignature" : "public static DateTimeZone forID(String id)",
    "methodName" : "forID",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test034() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forID(\"+03:32:20.625\");\n}",
    "testName" : "test034"
  },
  "test5979" : {
    "methodSignature" : "public int getOffsetFromLocal(long instantLocal)",
    "methodName" : "getOffsetFromLocal",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5979() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forID(\"CET\");\n    int int0 = dateTimeZone0.getOffsetFromLocal(423L);\n}",
    "testName" : "test5979"
  },
  "test7194" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7194() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);\n    long long0 = dateTimeZone0.convertLocalToUTC(10800000L, false);\n    dateTimeZone0.toString();\n}",
    "testName" : "test7194"
  },
  "test5170" : {
    "methodSignature" : "public long getMillisKeepLocal(DateTimeZone newZone, long oldInstant)",
    "methodName" : "getMillisKeepLocal",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5170() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forID(\"CET\");\n    long long0 = dateTimeZone0.UTC.getMillisKeepLocal((DateTimeZone) null, 2593L);\n}",
    "testName" : "test5170"
  },
  "test77104" : {
    "methodSignature" : "public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException",
    "methodName" : "forOffsetHoursMinutes",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test77104() throws Throwable {\n    DateTimeZone.forOffsetHoursMinutes(0, 12720000);\n}",
    "testName" : "test77104"
  },
  "test6383" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6383() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);\n    dateTimeZone0.UTC.getOffset((ReadableInstant) null);\n    dateTimeZone0.toString();\n}",
    "testName" : "test6383"
  },
  "test6384" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6384() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);\n    dateTimeZone0.UTC.getOffset((ReadableInstant) null);\n    dateTimeZone0.getID();\n}",
    "testName" : "test6384"
  },
  "test7195" : {
    "methodSignature" : "public long convertLocalToUTC(long instantLocal, boolean strict)",
    "methodName" : "convertLocalToUTC",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7195() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);\n    long long0 = dateTimeZone0.convertLocalToUTC(10800000L, false);\n}",
    "testName" : "test7195"
  },
  "test3448" : {
    "methodSignature" : "public static DateTimeZone forTimeZone(TimeZone zone)",
    "methodName" : "forTimeZone",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3448() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(177, 0);\n    TimeZone timeZone0 = dateTimeZone0.toTimeZone();\n    DateTimeZone.forTimeZone(timeZone0);\n}",
    "testName" : "test3448"
  },
  "test88117" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test88117() throws Throwable {\n    TimeZone timeZone0 = TimeZone.getDefault();\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.forTimeZone(timeZone0);\n    ((DateTimeZone) fixedDateTimeZone0).writeReplace();\n    fixedDateTimeZone0.getID();\n}",
    "testName" : "test88117"
  },
  "test4257" : {
    "methodSignature" : "public String getShortName(long instant, Locale locale)",
    "methodName" : "getShortName",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4257() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);\n    Locale locale0 = new Locale(\"xSp<QqI'HmDzP?\", \"L.$%ZG`>)m [Ad\");\n    String string0 = dateTimeZone0.getShortName((long) 1, locale0);\n}",
    "testName" : "test4257"
  },
  "test2231" : {
    "methodSignature" : "public abstract int getOffset(long instant)",
    "methodName" : "getOffset",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2231() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    int int0 = dateTimeZone0.getOffset(1173L);\n}",
    "testName" : "test2231"
  },
  "test5069" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5069() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(12740625);\n    LocalDateTime localDateTime0 = LocalDateTime.now();\n    dateTimeZone0.UTC.isLocalDateTimeGap(localDateTime0);\n    dateTimeZone0.getID();\n}",
    "testName" : "test5069"
  },
  "test022" : {
    "methodSignature" : "public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException",
    "methodName" : "forOffsetHoursMinutes",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022() throws Throwable {\n    DateTimeZone.forOffsetHoursMinutes(0, (-68703773));\n}",
    "testName" : "test022"
  },
  "test1825" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1825() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2555);\n    GJChronology gJChronology0 = GJChronology.getInstanceUTC();\n    LocalTime localTime0 = new LocalTime((Object) null, gJChronology0);\n    DateTime dateTime0 = localTime0.toDateTimeToday(dateTimeZone0);\n    int int0 = dateTimeZone0.getOffset((ReadableInstant) dateTime0);\n    dateTimeZone0.getID();\n}",
    "testName" : "test1825"
  },
  "test2635" : {
    "methodSignature" : "public abstract boolean equals(Object object)",
    "methodName" : "equals",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2635() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forID(\"CET\");\n    boolean boolean0 = dateTimeZone0.equals(\"CET\");\n}",
    "testName" : "test2635"
  },
  "test1824" : {
    "methodSignature" : "public final int getOffset(ReadableInstant instant)",
    "methodName" : "getOffset",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1824() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2555);\n    GJChronology gJChronology0 = GJChronology.getInstanceUTC();\n    LocalTime localTime0 = new LocalTime((Object) null, gJChronology0);\n    DateTime dateTime0 = localTime0.toDateTimeToday(dateTimeZone0);\n    int int0 = dateTimeZone0.getOffset((ReadableInstant) dateTime0);\n}",
    "testName" : "test1824"
  },
  "test3042" : {
    "methodSignature" : "public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC)",
    "methodName" : "convertLocalToUTC",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3042() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(572);\n    long long0 = dateTimeZone0.convertLocalToUTC((long) 572, true, (long) 572);\n}",
    "testName" : "test3042"
  },
  "test5068" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5068() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(12740625);\n    LocalDateTime localDateTime0 = LocalDateTime.now();\n    dateTimeZone0.UTC.isLocalDateTimeGap(localDateTime0);\n    dateTimeZone0.toString();\n}",
    "testName" : "test5068"
  },
  "test3043" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3043() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(572);\n    long long0 = dateTimeZone0.convertLocalToUTC((long) 572, true, (long) 572);\n    dateTimeZone0.getID();\n}",
    "testName" : "test3043"
  },
  "test6790" : {
    "methodSignature" : "public static void setNameProvider(NameProvider nameProvider) throws SecurityException",
    "methodName" : "setNameProvider",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6790() throws Throwable {\n    DateTimeZone.setNameProvider((NameProvider) null);\n}",
    "testName" : "test6790"
  },
  "test5878" : {
    "methodSignature" : "public boolean isLocalDateTimeGap(LocalDateTime localDateTime)",
    "methodName" : "isLocalDateTimeGap",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5878() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forID(\"CET\");\n    LocalDateTime localDateTime0 = new LocalDateTime((-3597407L));\n    LocalDateTime localDateTime1 = localDateTime0.withWeekyear(1285);\n    boolean boolean0 = dateTimeZone0.isLocalDateTimeGap(localDateTime1);\n}",
    "testName" : "test5878"
  },
  "test3852" : {
    "methodSignature" : "public long convertUTCToLocal(long instantUTC)",
    "methodName" : "convertUTCToLocal",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3852() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    long long0 = dateTimeZone0.convertUTCToLocal((-3433L));\n}",
    "testName" : "test3852"
  },
  "test85113" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test85113() throws Throwable {\n    TimeZone timeZone0 = TimeZone.getDefault();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);\n    String string0 = dateTimeZone0.toString();\n}",
    "testName" : "test85113"
  },
  "test6689" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6689() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-28378000));\n    dateTimeZone0.toString();\n}",
    "testName" : "test6689"
  },
  "test4663" : {
    "methodSignature" : "public static DateTimeZone forID(String id)",
    "methodName" : "forID",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4663() throws Throwable {\n    DateTimeZone.forID(\"hh!E!^m5qP\");\n}",
    "testName" : "test4663"
  },
  "test056" : {
    "methodSignature" : "public int hashCode()",
    "methodName" : "hashCode",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test056() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    dateTimeZone0.hashCode();\n}",
    "testName" : "test056"
  },
  "test80108" : {
    "methodSignature" : "public static void setDefault(DateTimeZone zone) throws SecurityException",
    "methodName" : "setDefault",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test80108() throws Throwable {\n    DateTimeZone.setDefault((DateTimeZone) null);\n}",
    "testName" : "test80108"
  },
  "test2129" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2129() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(4);\n    int int0 = dateTimeZone0.getOffset(9972000000L);\n    dateTimeZone0.getID();\n}",
    "testName" : "test2129"
  },
  "test1317" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1317() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-357));\n    dateTimeZone0.nextTransition((-357));\n    dateTimeZone0.toString();\n}",
    "testName" : "test1317"
  },
  "test7093" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7093() throws Throwable {\n    DateTimeZone.forOffsetMillis(12740625);\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(12740625);\n    dateTimeZone0.getID();\n}",
    "testName" : "test7093"
  },
  "test5474" : {
    "methodSignature" : "public long convertLocalToUTC(long instantLocal, boolean strict)",
    "methodName" : "convertLocalToUTC",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5474() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);\n    dateTimeZone0.convertLocalToUTC(9223372036854775807L, false);\n}",
    "testName" : "test5474"
  },
  "test79107" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test79107() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forID(\"UTC\");\n    dateTimeZone0.getID();\n}",
    "testName" : "test79107"
  },
  "test6282" : {
    "methodSignature" : "public boolean isStandardOffset(long instant)",
    "methodName" : "isStandardOffset",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6282() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    boolean boolean0 = dateTimeZone0.UTC.isStandardOffset(7L);\n}",
    "testName" : "test6282"
  },
  "test3347" : {
    "methodSignature" : "public boolean isLocalDateTimeGap(LocalDateTime localDateTime)",
    "methodName" : "isLocalDateTimeGap",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3347() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    dateTimeZone0.isLocalDateTimeGap((LocalDateTime) null);\n}",
    "testName" : "test3347"
  },
  "test82110" : {
    "methodSignature" : "public static Provider getProvider()",
    "methodName" : "getProvider",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test82110() throws Throwable {\n    Provider provider0 = DateTimeZone.getProvider();\n}",
    "testName" : "test82110"
  },
  "test2534" : {
    "methodSignature" : "public abstract boolean equals(Object object)",
    "methodName" : "equals",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2534() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(0);\n    boolean boolean0 = dateTimeZone0.UTC.equals(dateTimeZone1);\n}",
    "testName" : "test2534"
  },
  "test4156" : {
    "methodSignature" : "public String getName(long instant, Locale locale)",
    "methodName" : "getName",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4156() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(57);\n    String string0 = dateTimeZone0.getName(3347L, (Locale) null);\n}",
    "testName" : "test4156"
  },
  "test045" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test045() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);\n    DateTimeZone.setDefault(dateTimeZone0);\n    dateTimeZone0.toString();\n}",
    "testName" : "test045"
  },
  "test0913" : {
    "methodSignature" : "public abstract long previousTransition(long instant)",
    "methodName" : "previousTransition",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0913() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    long long0 = dateTimeZone0.UTC.previousTransition(1);\n}",
    "testName" : "test0913"
  },
  "test1722" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1722() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(550);\n    dateTimeZone0.UTC.getOffsetFromLocal(0L);\n    dateTimeZone0.getID();\n}",
    "testName" : "test1722"
  },
  "test1723" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1723() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(550);\n    dateTimeZone0.UTC.getOffsetFromLocal(0L);\n    dateTimeZone0.toString();\n}",
    "testName" : "test1723"
  },
  "test74100" : {
    "methodSignature" : "public abstract boolean isFixed()",
    "methodName" : "isFixed",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test74100() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(730, \"UTC\");\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);\n    dateTimeZone0.isFixed();\n}",
    "testName" : "test74100"
  },
  "test2130" : {
    "methodSignature" : "public abstract int getOffset(long instant)",
    "methodName" : "getOffset",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2130() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(4);\n    int int0 = dateTimeZone0.getOffset(9972000000L);\n}",
    "testName" : "test2130"
  }
}