{
  "test1212" : {
    "methodSignature" : "public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant)",
    "methodName" : "getDifferenceAsLong",
    "className" : "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1212() throws Throwable {\n    CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();\n    GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(copticChronology0);\n    long long0 = gJMonthOfYearDateTimeField0.getDifferenceAsLong(858L, 31083597720000L);\n}",
    "testName" : "test1212"
  },
  "test3435" : {
    "methodSignature" : "public long roundFloor(long instant)",
    "methodName" : "roundFloor",
    "className" : "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3435() throws Throwable {\n    GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();\n    BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(gregorianChronology0, 352831696);\n    long long0 = basicMonthOfYearDateTimeField0.roundFloor((-1353L));\n}",
    "testName" : "test3435"
  },
  "test4647" : {
    "methodSignature" : "public long add(long instant, long months)",
    "methodName" : "add",
    "className" : "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4647() throws Throwable {\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();\n    BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(ethiopicChronology0, 1);\n    basicMonthOfYearDateTimeField0.add((long) (byte) 39, 1000000000000000L);\n}",
    "testName" : "test4647"
  },
  "test2425" : {
    "methodSignature" : "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd)",
    "methodName" : "add",
    "className" : "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2425() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2290));\n    CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);\n    GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(copticChronology0);\n    LocalDate localDate0 = LocalDate.now();\n    gJMonthOfYearDateTimeField0.add((ReadablePartial) localDate0, 1, (int[]) null, (-2290));\n}",
    "testName" : "test2425"
  },
  "test5657" : {
    "methodSignature" : "public abstract boolean isSupported()",
    "methodName" : "isSupported",
    "className" : "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5657() throws Throwable {\n    JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();\n    BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(julianChronology0, 93);\n    DurationField durationField0 = basicMonthOfYearDateTimeField0.getLeapDurationField();\n    durationField0.isSupported();\n}",
    "testName" : "test5657"
  },
  "test1010" : {
    "methodSignature" : "public long remainder(long instant)",
    "methodName" : "remainder",
    "className" : "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1010() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(108);\n    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);\n    BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(gregorianChronology0, 1519);\n    long long0 = basicMonthOfYearDateTimeField0.remainder(0L);\n}",
    "testName" : "test1010"
  },
  "test3233" : {
    "methodSignature" : "public long add(long instant, int months)",
    "methodName" : "add",
    "className" : "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3233() throws Throwable {\n    JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();\n    GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(julianChronology0);\n    long long0 = gJMonthOfYearDateTimeField0.add((-1326L), (-1043));\n}",
    "testName" : "test3233"
  },
  "test4445" : {
    "methodSignature" : "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd)",
    "methodName" : "add",
    "className" : "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4445() throws Throwable {\n    CopticChronology copticChronology0 = CopticChronology.getInstance();\n    BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(copticChronology0, 1);\n    Partial partial0 = new Partial();\n    int[] intArray0 = new int[9];\n    int[] intArray1 = basicMonthOfYearDateTimeField0.add((ReadablePartial) partial0, 2144031101, intArray0, 1);\n}",
    "testName" : "test4445"
  },
  "test2223" : {
    "methodSignature" : "public int get(long instant)",
    "methodName" : "get",
    "className" : "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2223() throws Throwable {\n    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();\n    IslamicChronology islamicChronology0 = new IslamicChronology(gregorianChronology0, gregorianChronology0, (IslamicChronology.LeapYearPatternType) null);\n    BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(islamicChronology0, 70);\n    basicMonthOfYearDateTimeField0.get(1);\n}",
    "testName" : "test2223"
  },
  "test5455" : {
    "methodSignature" : "public boolean isLenient()",
    "methodName" : "isLenient",
    "className" : "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5455() throws Throwable {\n    JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();\n    BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(julianChronology0, 93);\n    boolean boolean0 = basicMonthOfYearDateTimeField0.isLenient();\n}",
    "testName" : "test5455"
  },
  "test033" : {
    "methodSignature" : "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd)",
    "methodName" : "add",
    "className" : "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);\n    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);\n    GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(gregorianChronology0);\n    LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);\n    int[] intArray0 = new int[8];\n    gJMonthOfYearDateTimeField0.add((ReadablePartial) localDateTime0, 1, intArray0, 1);\n}",
    "testName" : "test033"
  },
  "test077" : {
    "methodSignature" : "public long set(long instant, int month)",
    "methodName" : "set",
    "className" : "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);\n    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);\n    GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(gregorianChronology0);\n    long long0 = gJMonthOfYearDateTimeField0.set(0L, 1);\n}",
    "testName" : "test077"
  },
  "test3839" : {
    "methodSignature" : "public boolean isLeap(long instant)",
    "methodName" : "isLeap",
    "className" : "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3839() throws Throwable {\n    JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();\n    BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(julianChronology0, 93);\n    boolean boolean0 = basicMonthOfYearDateTimeField0.isLeap((-59245776000000L));\n}",
    "testName" : "test3839"
  },
  "test1617" : {
    "methodSignature" : "public long add(long instant, long months)",
    "methodName" : "add",
    "className" : "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1617() throws Throwable {\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();\n    CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0, 1);\n    GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(copticChronology0);\n    long long0 = gJMonthOfYearDateTimeField0.add(0L, 0L);\n}",
    "testName" : "test1617"
  },
  "test2829" : {
    "methodSignature" : "BasicMonthOfYearDateTimeField(BasicChronology chronology, int leapMonth)",
    "methodName" : "BasicMonthOfYearDateTimeField",
    "className" : "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2829() throws Throwable {\n    BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = null;\n    basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField((BasicChronology) null, 2028);\n}",
    "testName" : "test2829"
  },
  "test1414" : {
    "methodSignature" : "public long addWrapField(long instant, int months)",
    "methodName" : "addWrapField",
    "className" : "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1414() throws Throwable {\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);\n    BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(islamicChronology0, 0);\n    long long0 = basicMonthOfYearDateTimeField0.addWrapField(10000000L, 1);\n}",
    "testName" : "test1414"
  },
  "test3637" : {
    "methodSignature" : "public DurationField getRangeDurationField()",
    "methodName" : "getRangeDurationField",
    "className" : "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3637() throws Throwable {\n    GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();\n    BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(gregorianChronology0, 352831696);\n    DurationField durationField0 = basicMonthOfYearDateTimeField0.getRangeDurationField();\n}",
    "testName" : "test3637"
  },
  "test4849" : {
    "methodSignature" : "public long add(long instant, long months)",
    "methodName" : "add",
    "className" : "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4849() throws Throwable {\n    JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();\n    BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(julianChronology0, 1);\n    long long0 = basicMonthOfYearDateTimeField0.add((long) (-2017), (-2591999999L));\n}",
    "testName" : "test4849"
  },
  "test2627" : {
    "methodSignature" : "public long add(long instant, long months)",
    "methodName" : "add",
    "className" : "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2627() throws Throwable {\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();\n    IslamicChronology islamicChronology0 = new IslamicChronology(ethiopicChronology0, (Object) null, (IslamicChronology.LeapYearPatternType) null);\n    BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(islamicChronology0, 15356250);\n    basicMonthOfYearDateTimeField0.add((long) 1, 423L);\n}",
    "testName" : "test2627"
  },
  "test3031" : {
    "methodSignature" : "public long set(long instant, int month)",
    "methodName" : "set",
    "className" : "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3031() throws Throwable {\n    CopticChronology copticChronology0 = CopticChronology.getInstance();\n    BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(copticChronology0, 1);\n    long long0 = basicMonthOfYearDateTimeField0.set((long) 1, 1);\n}",
    "testName" : "test3031"
  },
  "test4243" : {
    "methodSignature" : "public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant)",
    "methodName" : "getDifferenceAsLong",
    "className" : "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4243() throws Throwable {\n    GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();\n    BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(gregorianChronology0, 1873);\n    long long0 = basicMonthOfYearDateTimeField0.getDifferenceAsLong((-1878L), (-2282));\n}",
    "testName" : "test4243"
  },
  "test2021" : {
    "methodSignature" : "public int getLeapAmount(long instant)",
    "methodName" : "getLeapAmount",
    "className" : "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2021() throws Throwable {\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();\n    IslamicChronology islamicChronology0 = new IslamicChronology(ethiopicChronology0, (Object) null, (IslamicChronology.LeapYearPatternType) null);\n    BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(islamicChronology0, 15356250);\n    basicMonthOfYearDateTimeField0.getLeapAmount(423L);\n}",
    "testName" : "test2021"
  },
  "test5253" : {
    "methodSignature" : "public long addWrapField(long instant, int months)",
    "methodName" : "addWrapField",
    "className" : "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5253() throws Throwable {\n    JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();\n    BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(julianChronology0, 93);\n    long long0 = basicMonthOfYearDateTimeField0.addWrapField((-59232556800000L), 1123);\n}",
    "testName" : "test5253"
  },
  "test4041" : {
    "methodSignature" : "public boolean isLeap(long instant)",
    "methodName" : "isLeap",
    "className" : "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4041() throws Throwable {\n    JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();\n    BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(julianChronology0, 93);\n    boolean boolean0 = basicMonthOfYearDateTimeField0.isLeap(93);\n}",
    "testName" : "test4041"
  },
  "test5051" : {
    "methodSignature" : "public long add(long instant, int months)",
    "methodName" : "add",
    "className" : "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5051() throws Throwable {\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();\n    BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(ethiopicChronology0, 1);\n    long long0 = basicMonthOfYearDateTimeField0.add(21260793600000L, (-1));\n}",
    "testName" : "test5051"
  },
  "test022" : {
    "methodSignature" : "public int getDifference(long minuendInstant, long subtrahendInstant)",
    "methodName" : "getDifference",
    "className" : "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022() throws Throwable {\n    CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();\n    GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(copticChronology0);\n    int int0 = gJMonthOfYearDateTimeField0.getDifference((-51322291200000L), (-85L));\n}",
    "testName" : "test022"
  },
  "test066" : {
    "methodSignature" : "public LocalDateTime minusMonths(int months)",
    "methodName" : "minusMonths",
    "className" : "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);\n    LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);\n    LocalDateTime localDateTime1 = localDateTime0.minusMonths(1);\n}",
    "testName" : "test066"
  },
  "test1819" : {
    "methodSignature" : "public long set(long instant, int month)",
    "methodName" : "set",
    "className" : "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1819() throws Throwable {\n    CopticChronology copticChronology0 = CopticChronology.getInstance();\n    BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(copticChronology0, (-84));\n    basicMonthOfYearDateTimeField0.set(0L, (-1));\n}",
    "testName" : "test1819"
  },
  "test2324" : {
    "methodSignature" : "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd)",
    "methodName" : "add",
    "className" : "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2324() throws Throwable {\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();\n    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();\n    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);\n    BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(gregorianChronology0, 1);\n    LocalTime localTime0 = new LocalTime((long) (-1657), dateTimeZone0);\n    int[] intArray0 = new int[3];\n    intArray0[0] = (-2982);\n    basicMonthOfYearDateTimeField0.add((ReadablePartial) localTime0, 2491, intArray0, (-889));\n}",
    "testName" : "test2324"
  },
  "test5758" : {
    "methodSignature" : "public long remainder(long instant)",
    "methodName" : "remainder",
    "className" : "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5758() throws Throwable {\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();\n    BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(ethiopicChronology0, 1);\n    long long0 = basicMonthOfYearDateTimeField0.remainder(1000000000000000L);\n}",
    "testName" : "test5758"
  },
  "test1313" : {
    "methodSignature" : "public long addWrapField(long instant, int months)",
    "methodName" : "addWrapField",
    "className" : "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1313() throws Throwable {\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);\n    BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(islamicChronology0, 0);\n    long long0 = basicMonthOfYearDateTimeField0.addWrapField((long) 0, 0);\n}",
    "testName" : "test1313"
  },
  "test3536" : {
    "methodSignature" : "public int get(long instant)",
    "methodName" : "get",
    "className" : "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3536() throws Throwable {\n    GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();\n    BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(gregorianChronology0, 352831696);\n    int int0 = basicMonthOfYearDateTimeField0.get((-4442L));\n}",
    "testName" : "test3536"
  },
  "test4546" : {
    "methodSignature" : "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd)",
    "methodName" : "add",
    "className" : "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4546() throws Throwable {\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();\n    GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(ethiopicChronology0);\n    DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();\n    dateTimeFieldTypeArray0[0] = dateTimeFieldType0;\n    DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.secondOfDay();\n    dateTimeFieldTypeArray0[1] = dateTimeFieldType1;\n    int[] intArray0 = new int[2];\n    Partial partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);\n    gJMonthOfYearDateTimeField0.add((ReadablePartial) partial0, 0, intArray0, 1);\n}",
    "testName" : "test4546"
  },
  "test2122" : {
    "methodSignature" : "public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant)",
    "methodName" : "getDifferenceAsLong",
    "className" : "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2122() throws Throwable {\n    TimeZone timeZone0 = TimeZone.getTimeZone(\"\");\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);\n    GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(islamicChronology0);\n    gJMonthOfYearDateTimeField0.getDifferenceAsLong((-9223372036854775808L), 1);\n}",
    "testName" : "test2122"
  },
  "test5556" : {
    "methodSignature" : "public int getMinimumValue()",
    "methodName" : "getMinimumValue",
    "className" : "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5556() throws Throwable {\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();\n    GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(islamicChronology0);\n    int int0 = gJMonthOfYearDateTimeField0.getMinimumValue();\n}",
    "testName" : "test5556"
  },
  "test1111" : {
    "methodSignature" : "public long remainder(long instant)",
    "methodName" : "remainder",
    "className" : "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1111() throws Throwable {\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();\n    BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(islamicChronology0, 1);\n    long long0 = basicMonthOfYearDateTimeField0.remainder((-59231164377600000L));\n}",
    "testName" : "test1111"
  },
  "test3334" : {
    "methodSignature" : "public long add(long instant, int months)",
    "methodName" : "add",
    "className" : "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3334() throws Throwable {\n    GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();\n    BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(gregorianChronology0, 352831696);\n    long long0 = basicMonthOfYearDateTimeField0.add((long) 352831696, 2145871423);\n}",
    "testName" : "test3334"
  },
  "test4344" : {
    "methodSignature" : "public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant)",
    "methodName" : "getDifferenceAsLong",
    "className" : "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4344() throws Throwable {\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();\n    BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(ethiopicChronology0, 1);\n    long long0 = basicMonthOfYearDateTimeField0.getDifferenceAsLong(21260102400000L, 2235);\n}",
    "testName" : "test4344"
  },
  "test011" : {
    "methodSignature" : "public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant)",
    "methodName" : "getDifferenceAsLong",
    "className" : "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011() throws Throwable {\n    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();\n    BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(gregorianChronology0, 292272992);\n    long long0 = basicMonthOfYearDateTimeField0.getDifferenceAsLong((byte) 63, 768603731673597461L);\n}",
    "testName" : "test011"
  },
  "test055" : {
    "methodSignature" : "public LocalDate plus(ReadablePeriod period)",
    "methodName" : "plus",
    "className" : "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055() throws Throwable {\n    Months months0 = Months.MAX_VALUE;\n    LocalDate localDate0 = LocalDate.now();\n    localDate0.plus(months0);\n}",
    "testName" : "test055"
  },
  "test099" : {
    "methodSignature" : "public long roundFloor(long instant)",
    "methodName" : "roundFloor",
    "className" : "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099() throws Throwable {\n    JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();\n    BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(julianChronology0, 93);\n    long long0 = basicMonthOfYearDateTimeField0.roundFloor(1555200012L);\n}",
    "testName" : "test099"
  },
  "test2728" : {
    "methodSignature" : "public long add(long instant, int months)",
    "methodName" : "add",
    "className" : "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2728() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstanceUTC();\n    Object object0 = new Object();\n    IslamicChronology islamicChronology0 = new IslamicChronology(gJChronology0, object0, (IslamicChronology.LeapYearPatternType) null);\n    BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(islamicChronology0, 1);\n    basicMonthOfYearDateTimeField0.add((long) 1, (-401));\n}",
    "testName" : "test2728"
  },
  "test1718" : {
    "methodSignature" : "public long add(long instant, int months)",
    "methodName" : "add",
    "className" : "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1718() throws Throwable {\n    JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();\n    BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(julianChronology0, 0);\n    long long0 = basicMonthOfYearDateTimeField0.add(0L, 0);\n}",
    "testName" : "test1718"
  },
  "test2526" : {
    "methodSignature" : "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd)",
    "methodName" : "add",
    "className" : "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2526() throws Throwable {\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();\n    GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(ethiopicChronology0);\n    int[] intArray0 = new int[3];\n    gJMonthOfYearDateTimeField0.add((ReadablePartial) null, 2808, intArray0, 2808);\n}",
    "testName" : "test2526"
  },
  "test1515" : {
    "methodSignature" : "public int getMinimumValue()",
    "methodName" : "getMinimumValue",
    "className" : "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1515() throws Throwable {\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) fixedDateTimeZone0);\n    BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(copticChronology0, (-1));\n    MonthDay monthDay0 = new MonthDay(1, 1);\n    basicMonthOfYearDateTimeField0.add((ReadablePartial) monthDay0, 1868, (int[]) null, 0);\n    basicMonthOfYearDateTimeField0.getMinimumValue();\n}",
    "testName" : "test1515"
  },
  "test3738" : {
    "methodSignature" : "public int getLeapAmount(long instant)",
    "methodName" : "getLeapAmount",
    "className" : "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3738() throws Throwable {\n    GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();\n    BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(gregorianChronology0, 352831696);\n    int int0 = basicMonthOfYearDateTimeField0.getLeapAmount(0L);\n}",
    "testName" : "test3738"
  },
  "test1516" : {
    "methodSignature" : "public int getMaximumValue()",
    "methodName" : "getMaximumValue",
    "className" : "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1516() throws Throwable {\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) fixedDateTimeZone0);\n    BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(copticChronology0, (-1));\n    MonthDay monthDay0 = new MonthDay(1, 1);\n    basicMonthOfYearDateTimeField0.add((ReadablePartial) monthDay0, 1868, (int[]) null, 0);\n    basicMonthOfYearDateTimeField0.getMaximumValue();\n}",
    "testName" : "test1516"
  },
  "test4748" : {
    "methodSignature" : "public long add(long instant, long months)",
    "methodName" : "add",
    "className" : "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4748() throws Throwable {\n    JulianChronology julianChronology0 = JulianChronology.getInstance();\n    BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(julianChronology0, 93);\n    basicMonthOfYearDateTimeField0.add((-59232556800000L), (-59232556800000L));\n}",
    "testName" : "test4748"
  },
  "test5354" : {
    "methodSignature" : "public int getMaximumValue()",
    "methodName" : "getMaximumValue",
    "className" : "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5354() throws Throwable {\n    JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();\n    BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(julianChronology0, 93);\n    int int0 = basicMonthOfYearDateTimeField0.getMaximumValue();\n}",
    "testName" : "test5354"
  },
  "test3132" : {
    "methodSignature" : "public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant)",
    "methodName" : "getDifferenceAsLong",
    "className" : "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3132() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);\n    GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(gregorianChronology0);\n    long long0 = gJMonthOfYearDateTimeField0.getDifferenceAsLong(1L, 1L);\n}",
    "testName" : "test3132"
  },
  "test4142" : {
    "methodSignature" : "public long set(long instant, int month)",
    "methodName" : "set",
    "className" : "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4142() throws Throwable {\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();\n    BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(ethiopicChronology0, 1);\n    long long0 = basicMonthOfYearDateTimeField0.set(21260793600000L, 13);\n}",
    "testName" : "test4142"
  },
  "test5152" : {
    "methodSignature" : "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd)",
    "methodName" : "add",
    "className" : "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5152() throws Throwable {\n    JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();\n    BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(julianChronology0, 93);\n    MockDate mockDate0 = new MockDate(2013265920, 93, 93);\n    LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);\n    int[] intArray0 = new int[0];\n    basicMonthOfYearDateTimeField0.add((ReadablePartial) localDateTime0, 2013265920, intArray0, 1048);\n}",
    "testName" : "test5152"
  },
  "test3940" : {
    "methodSignature" : "public int getLeapAmount(long instant)",
    "methodName" : "getLeapAmount",
    "className" : "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3940() throws Throwable {\n    CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();\n    BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(copticChronology0, 1);\n    int int0 = basicMonthOfYearDateTimeField0.getLeapAmount((-2500847999999L));\n}",
    "testName" : "test3940"
  },
  "test2930" : {
    "methodSignature" : "public boolean isLeap(long instant)",
    "methodName" : "isLeap",
    "className" : "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2930() throws Throwable {\n    CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();\n    BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(copticChronology0, 1);\n    boolean boolean0 = basicMonthOfYearDateTimeField0.isLeap((-2500847999999L));\n}",
    "testName" : "test2930"
  },
  "test4950" : {
    "methodSignature" : "public long add(long instant, long months)",
    "methodName" : "add",
    "className" : "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4950() throws Throwable {\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();\n    BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(ethiopicChronology0, 1);\n    long long0 = basicMonthOfYearDateTimeField0.add(2678397925L, 2678397925L);\n}",
    "testName" : "test4950"
  },
  "test000" : {
    "methodSignature" : "public int getLeapAmount(long instant)",
    "methodName" : "getLeapAmount",
    "className" : "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();\n    BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(copticChronology0, 1);\n    int int0 = basicMonthOfYearDateTimeField0.getLeapAmount(10000000000000L);\n}",
    "testName" : "test000"
  },
  "test044" : {
    "methodSignature" : "public long add(long instant, long months)",
    "methodName" : "add",
    "className" : "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044() throws Throwable {\n    JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();\n    GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(julianChronology0);\n    gJMonthOfYearDateTimeField0.add(1555201218L, (-9223372036854775808L));\n}",
    "testName" : "test044"
  },
  "test088" : {
    "methodSignature" : "public long roundFloor(long instant)",
    "methodName" : "roundFloor",
    "className" : "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);\n    GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(gregorianChronology0);\n    long long0 = gJMonthOfYearDateTimeField0.roundFloor(0L);\n}",
    "testName" : "test088"
  },
  "test1920" : {
    "methodSignature" : "public long remainder(long instant)",
    "methodName" : "remainder",
    "className" : "org.joda.time.chrono.BasicMonthOfYearDateTimeField",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1920() throws Throwable {\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null);\n    GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(islamicChronology0);\n    gJMonthOfYearDateTimeField0.remainder((-9223372036854775808L));\n}",
    "testName" : "test1920"
  }
}