project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
    BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(copticChronology0, 1);
    int int0 = basicMonthOfYearDateTimeField0.getLeapAmount(10000000000000L);
    assertEquals(0, int0);
}",0,"assertEquals(0, int0)"
project,0,test011,"public void test011() throws Throwable {
    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
    BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(gregorianChronology0, 292272992);
    long long0 = basicMonthOfYearDateTimeField0.getDifferenceAsLong((byte) 63, 768603731673597461L);
    assertEquals((-292272991L), long0);
}",0,
project,0,test022,"public void test022() throws Throwable {
    CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
    GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(copticChronology0);
    int int0 = gJMonthOfYearDateTimeField0.getDifference((-51322291200000L), (-85L));
    assertEquals((-21141), int0);
}",0,"assertEquals(1, int0)"
project,0,test033,"public void test033() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
    GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(gregorianChronology0);
    LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
    int[] intArray0 = new int[8];
    // Undeclared exception!
    try {
        gJMonthOfYearDateTimeField0.add((ReadablePartial) localDateTime0, 1, intArray0, 1);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value 0 for monthOfYear must be in the range [1,12]
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",0,
project,0,test044,"public void test044() throws Throwable {
    JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
    GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(julianChronology0);
    // Undeclared exception!
    try {
        gJMonthOfYearDateTimeField0.add(1555201218L, (-9223372036854775808L));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Magnitude of add amount is too large: -9223372036854775808
        //
        verifyException(""org.joda.time.chrono.BasicMonthOfYearDateTimeField"", e);
    }
}",1,
project,0,test055,"public void test055() throws Throwable {
    Months months0 = Months.MAX_VALUE;
    LocalDate localDate0 = LocalDate.now();
    // Undeclared exception!
    try {
        localDate0.plus(months0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 20
        //
        verifyException(""org.joda.time.chrono.BasicGJChronology"", e);
    }
}",0,
project,0,test066,"public void test066() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
    LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
    LocalDateTime localDateTime1 = localDateTime0.minusMonths(1);
    assertNotSame(localDateTime1, localDateTime0);
}",0,
project,0,test077,"public void test077() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
    GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(gregorianChronology0);
    long long0 = gJMonthOfYearDateTimeField0.set(0L, 1);
    assertEquals(0L, long0);
}",1,
project,0,test088,"public void test088() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
    GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(gregorianChronology0);
    long long0 = gJMonthOfYearDateTimeField0.roundFloor(0L);
    assertEquals(0L, long0);
}",0,"assertEquals(1, long0)"
project,0,test099,"public void test099() throws Throwable {
    JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
    BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(julianChronology0, 93);
    long long0 = basicMonthOfYearDateTimeField0.roundFloor(1555200012L);
    assertEquals(1123200000L, long0);
}",0,"assertEquals(0, long0)"
project,0,test1010,"public void test1010() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(108);
    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
    BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(gregorianChronology0, 1519);
    long long0 = basicMonthOfYearDateTimeField0.remainder(0L);
    assertEquals(0L, long0);
}",0,"assertEquals(1, long0)"
project,0,test1111,"public void test1111() throws Throwable {
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
    BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(islamicChronology0, 1);
    long long0 = basicMonthOfYearDateTimeField0.remainder((-59231164377600000L));
    assertEquals((-1123200000L), long0);
}",0,"assertEquals(1, long0)"
project,0,test1212,"public void test1212() throws Throwable {
    CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
    GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(copticChronology0);
    long long0 = gJMonthOfYearDateTimeField0.getDifferenceAsLong(858L, 31083597720000L);
    assertEquals((-12804L), long0);
}",0,
project,0,test1313,"public void test1313() throws Throwable {
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
    BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(islamicChronology0, 0);
    long long0 = basicMonthOfYearDateTimeField0.addWrapField((long) 0, 0);
    assertEquals(0L, long0);
}",0,"assertEquals(1, long0)"
project,0,test1414,"public void test1414() throws Throwable {
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
    BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(islamicChronology0, 0);
    long long0 = basicMonthOfYearDateTimeField0.addWrapField(10000000L, 1);
    assertEquals(2515600000L, long0);
}",0,"assertEquals(1, long0)"
project,0,test1515,"public void test1515() throws Throwable {
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
    BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(copticChronology0, (-1));
    MonthDay monthDay0 = new MonthDay(1, 1);
    basicMonthOfYearDateTimeField0.add((ReadablePartial) monthDay0, 1868, (int[]) null, 0);
    assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
}",0,"assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue())"
project,0,test1516,"public void test1516() throws Throwable {
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
    BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(copticChronology0, (-1));
    MonthDay monthDay0 = new MonthDay(1, 1);
    basicMonthOfYearDateTimeField0.add((ReadablePartial) monthDay0, 1868, (int[]) null, 0);
    assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
}",0,"assertEquals(0, basicMonthOfYearDateTimeField0.getMaximumValue())"
project,0,test1617,"public void test1617() throws Throwable {
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
    CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0, 1);
    GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(copticChronology0);
    long long0 = gJMonthOfYearDateTimeField0.add(0L, 0L);
    assertEquals(0L, long0);
}",1,
project,0,test1718,"public void test1718() throws Throwable {
    JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
    BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(julianChronology0, 0);
    long long0 = basicMonthOfYearDateTimeField0.add(0L, 0);
    assertEquals(0L, long0);
}",1,
project,0,test1819,"public void test1819() throws Throwable {
    CopticChronology copticChronology0 = CopticChronology.getInstance();
    BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(copticChronology0, (-84));
    // Undeclared exception!
    try {
        basicMonthOfYearDateTimeField0.set(0L, (-1));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value -1 for monthOfYear must be in the range [1,13]
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",0,
project,0,test1920,"public void test1920() throws Throwable {
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null);
    GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(islamicChronology0);
    // Undeclared exception!
    try {
        gJMonthOfYearDateTimeField0.remainder((-9223372036854775808L));
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // Year is too small: -301245869 < -292269337
        //
        verifyException(""org.joda.time.chrono.IslamicChronology"", e);
    }
}",0,
project,0,test2021,"public void test2021() throws Throwable {
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
    IslamicChronology islamicChronology0 = new IslamicChronology(ethiopicChronology0, (Object) null, (IslamicChronology.LeapYearPatternType) null);
    BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(islamicChronology0, 15356250);
    // Undeclared exception!
    try {
        basicMonthOfYearDateTimeField0.getLeapAmount(423L);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.chrono.IslamicChronology"", e);
    }
}",0,
project,0,test2122,"public void test2122() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
    GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(islamicChronology0);
    // Undeclared exception!
    try {
        gJMonthOfYearDateTimeField0.getDifferenceAsLong((-9223372036854775808L), 1);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // Year is too small: -301245869 < -292269337
        //
        verifyException(""org.joda.time.chrono.IslamicChronology"", e);
    }
}",0,
project,0,test2223,"public void test2223() throws Throwable {
    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
    IslamicChronology islamicChronology0 = new IslamicChronology(gregorianChronology0, gregorianChronology0, (IslamicChronology.LeapYearPatternType) null);
    BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(islamicChronology0, 70);
    // Undeclared exception!
    try {
        basicMonthOfYearDateTimeField0.get(1);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.chrono.IslamicChronology"", e);
    }
}",0,
project,0,test2324,"public void test2324() throws Throwable {
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
    BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(gregorianChronology0, 1);
    LocalTime localTime0 = new LocalTime((long) (-1657), dateTimeZone0);
    int[] intArray0 = new int[3];
    intArray0[0] = (-2982);
    // Undeclared exception!
    try {
        basicMonthOfYearDateTimeField0.add((ReadablePartial) localTime0, 2491, intArray0, (-889));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value -2982 for hourOfDay must be in the range [0,23]
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",0,
project,0,test2425,"public void test2425() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2290));
    CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
    GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(copticChronology0);
    LocalDate localDate0 = LocalDate.now();
    // Undeclared exception!
    try {
        gJMonthOfYearDateTimeField0.add((ReadablePartial) localDate0, 1, (int[]) null, (-2290));
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.chrono.BasicMonthOfYearDateTimeField"", e);
    }
}",0,
project,0,test2526,"public void test2526() throws Throwable {
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
    GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(ethiopicChronology0);
    int[] intArray0 = new int[3];
    // Undeclared exception!
    try {
        gJMonthOfYearDateTimeField0.add((ReadablePartial) null, 2808, intArray0, 2808);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Partial must not be null
        //
        verifyException(""org.joda.time.DateTimeUtils"", e);
    }
}",0,
project,0,test2627,"public void test2627() throws Throwable {
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
    IslamicChronology islamicChronology0 = new IslamicChronology(ethiopicChronology0, (Object) null, (IslamicChronology.LeapYearPatternType) null);
    BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(islamicChronology0, 15356250);
    // Undeclared exception!
    try {
        basicMonthOfYearDateTimeField0.add((long) 1, 423L);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.chrono.IslamicChronology"", e);
    }
}",1,
project,0,test2728,"public void test2728() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    Object object0 = new Object();
    IslamicChronology islamicChronology0 = new IslamicChronology(gJChronology0, object0, (IslamicChronology.LeapYearPatternType) null);
    BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(islamicChronology0, 1);
    // Undeclared exception!
    try {
        basicMonthOfYearDateTimeField0.add((long) 1, (-401));
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.chrono.IslamicChronology"", e);
    }
}",0,
project,0,test2829,"public void test2829() throws Throwable {
    BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = null;
    try {
        basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField((BasicChronology) null, 2028);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.chrono.BasicMonthOfYearDateTimeField"", e);
    }
}",0,
project,0,test2930,"public void test2930() throws Throwable {
    CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
    BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(copticChronology0, 1);
    boolean boolean0 = basicMonthOfYearDateTimeField0.isLeap((-2500847999999L));
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test3031,"public void test3031() throws Throwable {
    CopticChronology copticChronology0 = CopticChronology.getInstance();
    BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(copticChronology0, 1);
    long long0 = basicMonthOfYearDateTimeField0.set((long) 1, 1);
    assertEquals((-7775999999L), long0);
}",1,
project,0,test3132,"public void test3132() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
    GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(gregorianChronology0);
    long long0 = gJMonthOfYearDateTimeField0.getDifferenceAsLong(1L, 1L);
    assertEquals(0L, long0);
}",0,
project,0,test3233,"public void test3233() throws Throwable {
    JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
    GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(julianChronology0);
    long long0 = gJMonthOfYearDateTimeField0.add((-1326L), (-1043));
    assertEquals((-2742854401326L), long0);
}",1,
project,0,test3334,"public void test3334() throws Throwable {
    GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
    BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(gregorianChronology0, 352831696);
    long long0 = basicMonthOfYearDateTimeField0.add((long) 352831696, 2145871423);
    assertEquals(5643096791508031696L, long0);
}",1,
project,0,test3435,"public void test3435() throws Throwable {
    GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
    BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(gregorianChronology0, 352831696);
    long long0 = basicMonthOfYearDateTimeField0.roundFloor((-1353L));
    assertEquals((-2678400000L), long0);
}",0,"assertEquals(1, long0)"
project,0,test3536,"public void test3536() throws Throwable {
    GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
    BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(gregorianChronology0, 352831696);
    int int0 = basicMonthOfYearDateTimeField0.get((-4442L));
    assertEquals(12, int0);
}",0,"assertEquals(1, int0)"
project,0,test3637,"public void test3637() throws Throwable {
    GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
    BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(gregorianChronology0, 352831696);
    DurationField durationField0 = basicMonthOfYearDateTimeField0.getRangeDurationField();
    assertNotNull(durationField0);
}",0,
project,0,test3738,"public void test3738() throws Throwable {
    GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
    BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(gregorianChronology0, 352831696);
    int int0 = basicMonthOfYearDateTimeField0.getLeapAmount(0L);
    assertEquals(0, int0);
}",0,"assertEquals(1, int0)"
project,0,test3839,"public void test3839() throws Throwable {
    JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
    BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(julianChronology0, 93);
    boolean boolean0 = basicMonthOfYearDateTimeField0.isLeap((-59245776000000L));
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test3940,"public void test3940() throws Throwable {
    CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
    BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(copticChronology0, 1);
    int int0 = basicMonthOfYearDateTimeField0.getLeapAmount((-2500847999999L));
    assertEquals(1, int0);
}",0,"assertEquals(1, int0)"
project,0,test4041,"public void test4041() throws Throwable {
    JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
    BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(julianChronology0, 93);
    boolean boolean0 = basicMonthOfYearDateTimeField0.isLeap(93);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test4142,"public void test4142() throws Throwable {
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
    BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(ethiopicChronology0, 1);
    long long0 = basicMonthOfYearDateTimeField0.set(21260793600000L, 13);
    assertEquals(21291638400000L, long0);
}",0,
project,0,test4243,"public void test4243() throws Throwable {
    GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
    BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(gregorianChronology0, 1873);
    long long0 = basicMonthOfYearDateTimeField0.getDifferenceAsLong((-1878L), (-2282));
    assertEquals(0L, long0);
}",0,
project,0,test4344,"public void test4344() throws Throwable {
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
    BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(ethiopicChronology0, 1);
    long long0 = basicMonthOfYearDateTimeField0.getDifferenceAsLong(21260102400000L, 2235);
    assertEquals(8757L, long0);
}",0,
project,0,test4445,"public void test4445() throws Throwable {
    CopticChronology copticChronology0 = CopticChronology.getInstance();
    BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(copticChronology0, 1);
    Partial partial0 = new Partial();
    int[] intArray0 = new int[9];
    int[] intArray1 = basicMonthOfYearDateTimeField0.add((ReadablePartial) partial0, 2144031101, intArray0, 1);
    assertEquals(0, intArray1.length);
}",0,
project,0,test4546,"public void test4546() throws Throwable {
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
    GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(ethiopicChronology0);
    DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
    DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.secondOfDay();
    dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
    int[] intArray0 = new int[2];
    Partial partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
    gJMonthOfYearDateTimeField0.add((ReadablePartial) partial0, 0, intArray0, 1);
    assertArrayEquals(new int[] { 1, 0 }, intArray0);
}",0,
project,0,test4647,"public void test4647() throws Throwable {
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
    BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(ethiopicChronology0, 1);
    // Undeclared exception!
    try {
        basicMonthOfYearDateTimeField0.add((long) (byte) 39, 1000000000000000L);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Magnitude of add amount is too large: 1000000000000000
        //
        verifyException(""org.joda.time.chrono.BasicMonthOfYearDateTimeField"", e);
    }
}",1,
project,0,test4748,"public void test4748() throws Throwable {
    JulianChronology julianChronology0 = JulianChronology.getInstance();
    BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(julianChronology0, 93);
    // Undeclared exception!
    try {
        basicMonthOfYearDateTimeField0.add((-59232556800000L), (-59232556800000L));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Magnitude of add amount is too large: -59232556800000
        //
        verifyException(""org.joda.time.chrono.BasicMonthOfYearDateTimeField"", e);
    }
}",1,
project,0,test4849,"public void test4849() throws Throwable {
    JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
    BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(julianChronology0, 1);
    long long0 = basicMonthOfYearDateTimeField0.add((long) (-2017), (-2591999999L));
    assertEquals((-6816441597321602017L), long0);
}",1,
project,0,test4950,"public void test4950() throws Throwable {
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
    BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(ethiopicChronology0, 1);
    long long0 = basicMonthOfYearDateTimeField0.add(2678397925L, 2678397925L);
    assertEquals(6501831568502397925L, long0);
}",1,
project,0,test5051,"public void test5051() throws Throwable {
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
    BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(ethiopicChronology0, 1);
    long long0 = basicMonthOfYearDateTimeField0.add(21260793600000L, (-1));
    assertEquals(21260102400000L, long0);
}",1,
project,0,test5152,"public void test5152() throws Throwable {
    JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
    BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(julianChronology0, 93);
    MockDate mockDate0 = new MockDate(2013265920, 93, 93);
    LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
    int[] intArray0 = new int[0];
    // Undeclared exception!
    try {
        basicMonthOfYearDateTimeField0.add((ReadablePartial) localDateTime0, 2013265920, intArray0, 1048);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 0
        //
        verifyException(""org.joda.time.chrono.BasicMonthOfYearDateTimeField"", e);
    }
}",0,
project,0,test5253,"public void test5253() throws Throwable {
    JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
    BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(julianChronology0, 93);
    long long0 = basicMonthOfYearDateTimeField0.addWrapField((-59232556800000L), 1123);
    assertEquals((-59245776000000L), long0);
}",0,"assertEquals(1, long0)"
project,0,test5354,"public void test5354() throws Throwable {
    JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
    BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(julianChronology0, 93);
    int int0 = basicMonthOfYearDateTimeField0.getMaximumValue();
    assertEquals(12, int0);
}",0,"assertEquals(1, int0)"
project,0,test5455,"public void test5455() throws Throwable {
    JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
    BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(julianChronology0, 93);
    boolean boolean0 = basicMonthOfYearDateTimeField0.isLenient();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test5556,"public void test5556() throws Throwable {
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
    GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(islamicChronology0);
    int int0 = gJMonthOfYearDateTimeField0.getMinimumValue();
    assertEquals(1, int0);
}",0,"assertEquals(1, int0)"
project,0,test5657,"public void test5657() throws Throwable {
    JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
    BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(julianChronology0, 93);
    DurationField durationField0 = basicMonthOfYearDateTimeField0.getLeapDurationField();
    assertTrue(durationField0.isSupported());
}",0,assertFalse(durationField0.isSupported())
project,0,test5758,"public void test5758() throws Throwable {
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
    BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(ethiopicChronology0, 1);
    long long0 = basicMonthOfYearDateTimeField0.remainder(1000000000000000L);
    assertEquals(2080000000L, long0);
}",0,"assertEquals(1, long0)"
