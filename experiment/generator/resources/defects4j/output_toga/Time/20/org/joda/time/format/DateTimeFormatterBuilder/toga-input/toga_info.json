{
  "test071900" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendDecimal(DateTimeFieldType fieldType, int minDigits, int maxDigits)",
    "methodName" : "appendDecimal",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test071900() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();\n    dateTimeFormatterBuilder0.appendDecimal(dateTimeFieldType0, (-513), 65533);\n}",
    "testName" : "test071900"
  },
  "test0951123" : {
    "methodSignature" : "public static DateTimeZone forOffsetMillis(int millisOffset)",
    "methodName" : "forOffsetMillis",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0951123() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    LinkedList<Object> linkedList0 = new LinkedList<Object>();\n    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-511));\n}",
    "testName" : "test0951123"
  },
  "test00011" : {
    "methodSignature" : "public static GregorianChronology getInstance(DateTimeZone zone)",
    "methodName" : "getInstance",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00011() throws Throwable {\n    HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();\n    DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(2224, hashMap0);\n    StringBuffer stringBuffer0 = new StringBuffer(2224);\n    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) null);\n}",
    "testName" : "test00011"
  },
  "test00132" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendFractionOfSecond(int minDigits, int maxDigits)",
    "methodName" : "appendFractionOfSecond",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00132() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfSecond(1862, 10);\n}",
    "testName" : "test00132"
  },
  "test0951126" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0951126() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    LinkedList<Object> linkedList0 = new LinkedList<Object>();\n    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-511));\n    dateTimeZone0.toString();\n}",
    "testName" : "test0951126"
  },
  "test00254" : {
    "methodSignature" : "public static DateTimeFieldType millisOfSecond()",
    "methodName" : "millisOfSecond",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00254() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfHalfday(0);\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = (DateTimeFormatterBuilder.UnpaddedNumber) dateTimeFormatterBuilder1.toPrinter();\n    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[5];\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();\n}",
    "testName" : "test00254"
  },
  "test00372" : {
    "methodSignature" : "public static GJChronology getInstance()",
    "methodName" : "getInstance",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00372() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstance();\n}",
    "testName" : "test00372"
  },
  "test0951124" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0951124() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    LinkedList<Object> linkedList0 = new LinkedList<Object>();\n    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-511));\n    dateTimeZone0.getID();\n}",
    "testName" : "test0951124"
  },
  "test00131" : {
    "methodSignature" : "public DateTimeFormatterBuilder()",
    "methodName" : "DateTimeFormatterBuilder",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00131() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n}",
    "testName" : "test00131"
  },
  "test0951125" : {
    "methodSignature" : "public abstract boolean isFixed()",
    "methodName" : "isFixed",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0951125() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    LinkedList<Object> linkedList0 = new LinkedList<Object>();\n    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-511));\n    dateTimeZone0.isFixed();\n}",
    "testName" : "test0951125"
  },
  "test00246" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendClockhourOfHalfday(int minDigits)",
    "methodName" : "appendClockhourOfHalfday",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00246() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfHalfday(0);\n}",
    "testName" : "test00246"
  },
  "test058819" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendFractionOfSecond(int minDigits, int maxDigits)",
    "methodName" : "appendFractionOfSecond",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test058819() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    dateTimeFormatterBuilder0.appendFractionOfSecond(0, (-1861));\n}",
    "testName" : "test058819"
  },
  "test1692256" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendHalfdayOfDayText()",
    "methodName" : "appendHalfdayOfDayText",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1692256() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendHalfdayOfDayText();\n}",
    "testName" : "test1692256"
  },
  "test032669" : {
    "methodSignature" : "public abstract boolean isFixed()",
    "methodName" : "isFixed",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test032669() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();\n    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);\n    char[] charArray0 = new char[7];\n    CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);\n    StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);\n    dateTimeZone0.isFixed();\n}",
    "testName" : "test032669"
  },
  "test032668" : {
    "methodSignature" : "public static DateTimeZone forOffsetHours(int hoursOffset) throws IllegalArgumentException",
    "methodName" : "forOffsetHours",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test032668() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();\n    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);\n    char[] charArray0 = new char[7];\n    CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);\n    StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);\n}",
    "testName" : "test032668"
  },
  "test1772265" : {
    "methodSignature" : "public boolean canBuildPrinter()",
    "methodName" : "canBuildPrinter",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1772265() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    boolean boolean0 = dateTimeFormatterBuilder0.canBuildPrinter();\n}",
    "testName" : "test1772265"
  },
  "test032666" : {
    "methodSignature" : "public static BuddhistChronology getInstanceUTC()",
    "methodName" : "getInstanceUTC",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test032666() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();\n    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);\n    char[] charArray0 = new char[7];\n    CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);\n    StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();\n}",
    "testName" : "test032666"
  },
  "test1051348" : {
    "methodSignature" : "public static GJChronology getInstance(DateTimeZone zone)",
    "methodName" : "getInstance",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1051348() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(\"UTC(-`)=,c{y\", \"--ct(=6mk5'v\", true, 60000, 60000);\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);\n}",
    "testName" : "test1051348"
  },
  "test00249" : {
    "methodSignature" : "public DateTimePrinter toPrinter()",
    "methodName" : "toPrinter",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00249() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfHalfday(0);\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = (DateTimeFormatterBuilder.UnpaddedNumber) dateTimeFormatterBuilder1.toPrinter();\n}",
    "testName" : "test00249"
  },
  "test020327" : {
    "methodSignature" : "public int getOffset()",
    "methodName" : "getOffset",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test020327() throws Throwable {\n    Locale locale0 = Locale.TRADITIONAL_CHINESE;\n    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[3];\n    DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);\n    LenientChronology lenientChronology0 = LenientChronology.getInstance(buddhistChronology0);\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1043L, lenientChronology0, locale0, (Integer) 1, 155);\n    int int0 = dateTimeFormatterBuilder_MatchingParser0.parseInto(dateTimeParserBucket0, \"vRA@$:X}66xJ\", 23);\n    dateTimeParserBucket0.getOffset();\n}",
    "testName" : "test020327"
  },
  "test020328" : {
    "methodSignature" : "public Integer getOffsetInteger()",
    "methodName" : "getOffsetInteger",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test020328() throws Throwable {\n    Locale locale0 = Locale.TRADITIONAL_CHINESE;\n    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[3];\n    DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);\n    LenientChronology lenientChronology0 = LenientChronology.getInstance(buddhistChronology0);\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1043L, lenientChronology0, locale0, (Integer) 1, 155);\n    int int0 = dateTimeFormatterBuilder_MatchingParser0.parseInto(dateTimeParserBucket0, \"vRA@$:X}66xJ\", 23);\n    dateTimeParserBucket0.getOffsetInteger();\n}",
    "testName" : "test020328"
  },
  "test1201776" : {
    "methodSignature" : "public Integer getPivotYear()",
    "methodName" : "getPivotYear",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1201776() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();\n    Locale locale0 = Locale.TRADITIONAL_CHINESE;\n    ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();\n    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 275, true);\n    Integer integer0 = new Integer(275);\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(10, iSOChronology0, locale0, integer0, 1847);\n    dateTimeParserBucket0.getPivotYear();\n}",
    "testName" : "test1201776"
  },
  "test020329" : {
    "methodSignature" : "public Integer getPivotYear()",
    "methodName" : "getPivotYear",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test020329() throws Throwable {\n    Locale locale0 = Locale.TRADITIONAL_CHINESE;\n    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[3];\n    DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);\n    LenientChronology lenientChronology0 = LenientChronology.getInstance(buddhistChronology0);\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1043L, lenientChronology0, locale0, (Integer) 1, 155);\n    int int0 = dateTimeFormatterBuilder_MatchingParser0.parseInto(dateTimeParserBucket0, \"vRA@$:X}66xJ\", 23);\n    dateTimeParserBucket0.getPivotYear();\n}",
    "testName" : "test020329"
  },
  "test1201775" : {
    "methodSignature" : "public Integer getOffsetInteger()",
    "methodName" : "getOffsetInteger",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1201775() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();\n    Locale locale0 = Locale.TRADITIONAL_CHINESE;\n    ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();\n    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 275, true);\n    Integer integer0 = new Integer(275);\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(10, iSOChronology0, locale0, integer0, 1847);\n    dateTimeParserBucket0.getOffsetInteger();\n}",
    "testName" : "test1201775"
  },
  "test1201774" : {
    "methodSignature" : "public int getOffset()",
    "methodName" : "getOffset",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1201774() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();\n    Locale locale0 = Locale.TRADITIONAL_CHINESE;\n    ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();\n    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 275, true);\n    Integer integer0 = new Integer(275);\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(10, iSOChronology0, locale0, integer0, 1847);\n    dateTimeParserBucket0.getOffset();\n}",
    "testName" : "test1201774"
  },
  "test1382143" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendSignedDecimal(DateTimeFieldType fieldType, int minDigits, int maxDigits)",
    "methodName" : "appendSignedDecimal",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1382143() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    dateTimeFormatterBuilder0.appendSignedDecimal((DateTimeFieldType) null, 210, 210);\n}",
    "testName" : "test1382143"
  },
  "test067872" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test067872() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendText(dateTimeFieldType0);\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test067872"
  },
  "test005152" : {
    "methodSignature" : "public Instant(Object instant)",
    "methodName" : "Instant",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test005152() throws Throwable {\n    Instant instant0 = null;\n    instant0 = new Instant(\"DFdI~^pqIY$sv\");\n}",
    "testName" : "test005152"
  },
  "test080991" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendSecondOfMinute(int minDigits)",
    "methodName" : "appendSecondOfMinute",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test080991() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    dateTimeFormatterBuilder0.appendSecondOfMinute((-1310));\n}",
    "testName" : "test080991"
  },
  "test067871" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test067871() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendText(dateTimeFieldType0);\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test067871"
  },
  "test1302110" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendFractionOfMinute(int minDigits, int maxDigits)",
    "methodName" : "appendFractionOfMinute",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1302110() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    dateTimeFormatterBuilder0.appendFractionOfMinute(0, (-76));\n}",
    "testName" : "test1302110"
  },
  "test031589" : {
    "methodSignature" : "public abstract boolean isFixed()",
    "methodName" : "isFixed",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test031589() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();\n    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);\n    StringBuffer stringBuffer0 = new StringBuffer(\"56YZ0]vD<'tk9?n0L\");\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);\n    dateTimeZone0.isFixed();\n}",
    "testName" : "test031589"
  },
  "test031588" : {
    "methodSignature" : "public static DateTimeZone forOffsetHours(int hoursOffset) throws IllegalArgumentException",
    "methodName" : "forOffsetHours",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test031588() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();\n    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);\n    StringBuffer stringBuffer0 = new StringBuffer(\"56YZ0]vD<'tk9?n0L\");\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);\n}",
    "testName" : "test031588"
  },
  "test1111500" : {
    "methodSignature" : "public Integer getPivotYear()",
    "methodName" : "getPivotYear",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1111500() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));\n    CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();\n    Locale locale0 = Locale.KOREAN;\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-480), copticChronology0, locale0, (Integer) 1, (-1250));\n    int int0 = dateTimeFormatterBuilder_Fraction0.parseInto(dateTimeParserBucket0, \"];\", 99);\n    dateTimeParserBucket0.getPivotYear();\n}",
    "testName" : "test1111500"
  },
  "test1201767" : {
    "methodSignature" : "public DateTimeParserBucket(long instantLocal, Chronology chrono, Locale locale, Integer pivotYear, int defaultYear)",
    "methodName" : "DateTimeParserBucket",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1201767() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();\n    Locale locale0 = Locale.TRADITIONAL_CHINESE;\n    ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();\n    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 275, true);\n    Integer integer0 = new Integer(275);\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(10, iSOChronology0, locale0, integer0, 1847);\n}",
    "testName" : "test1201767"
  },
  "test031582" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test031582() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();\n    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test031582"
  },
  "test032671" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test032671() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();\n    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);\n    char[] charArray0 = new char[7];\n    CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);\n    StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);\n    dateTimeZone0.toString();\n}",
    "testName" : "test032671"
  },
  "test031581" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test031581() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();\n    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test031581"
  },
  "test032670" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test032670() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();\n    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);\n    char[] charArray0 = new char[7];\n    CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);\n    StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);\n    dateTimeZone0.getID();\n}",
    "testName" : "test032670"
  },
  "test1111501" : {
    "methodSignature" : "public int getOffset()",
    "methodName" : "getOffset",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1111501() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));\n    CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();\n    Locale locale0 = Locale.KOREAN;\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-480), copticChronology0, locale0, (Integer) 1, (-1250));\n    int int0 = dateTimeFormatterBuilder_Fraction0.parseInto(dateTimeParserBucket0, \"];\", 99);\n    dateTimeParserBucket0.getOffset();\n}",
    "testName" : "test1111501"
  },
  "test1852278" : {
    "methodSignature" : "public boolean canBuildParser()",
    "methodName" : "canBuildParser",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1852278() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    dateTimeFormatterBuilder0.appendDayOfWeekText();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTwoDigitYear(260, true);\n    boolean boolean0 = dateTimeFormatterBuilder1.canBuildParser();\n}",
    "testName" : "test1852278"
  },
  "test0961149" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0961149() throws Throwable {\n    CopticChronology copticChronology0 = CopticChronology.getInstance();\n    LinkedList<Object> linkedList0 = new LinkedList<Object>();\n    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);\n    StringBuffer stringBuffer0 = new StringBuffer(1);\n    GJChronology gJChronology0 = GJChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = gJChronology0.getZone();\n    dateTimeZone0.toString();\n}",
    "testName" : "test0961149"
  },
  "test1201762" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1201762() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();\n    Locale locale0 = Locale.TRADITIONAL_CHINESE;\n    ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();\n    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 275, true);\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test1201762"
  },
  "test1201761" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1201761() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();\n    Locale locale0 = Locale.TRADITIONAL_CHINESE;\n    ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();\n    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 275, true);\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test1201761"
  },
  "test1121523" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1121523() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 50);\n    StringBuffer stringBuffer0 = new StringBuffer();\n    PipedWriter pipedWriter0 = new PipedWriter();\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);\n    dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, (Writer) pipedWriter0, (long) 0, (Chronology) buddhistChronology0);\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test1121523"
  },
  "test1121522" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1121522() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 50);\n    StringBuffer stringBuffer0 = new StringBuffer();\n    PipedWriter pipedWriter0 = new PipedWriter();\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);\n    dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, (Writer) pipedWriter0, (long) 0, (Chronology) buddhistChronology0);\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test1121522"
  },
  "test1462174" : {
    "methodSignature" : "public DateTimeFormatterBuilder append(DateTimeParser parser)",
    "methodName" : "append",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1462174() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    dateTimeFormatterBuilder0.append((DateTimeParser) null);\n}",
    "testName" : "test1462174"
  },
  "test044789" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendCenturyOfEra(int minDigits, int maxDigits)",
    "methodName" : "appendCenturyOfEra",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044789() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendCenturyOfEra(366, 15356250);\n}",
    "testName" : "test044789"
  },
  "test068877" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendSignedDecimal(DateTimeFieldType fieldType, int minDigits, int maxDigits)",
    "methodName" : "appendSignedDecimal",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test068877() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();\n    dateTimeFormatterBuilder0.appendSignedDecimal(dateTimeFieldType0, (-3430), 0);\n}",
    "testName" : "test068877"
  },
  "test1121520" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1121520() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 50);\n    StringBuffer stringBuffer0 = new StringBuffer();\n    PipedWriter pipedWriter0 = new PipedWriter();\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);\n    dateTimeZone0.getID();\n}",
    "testName" : "test1121520"
  },
  "test1061372" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1061372() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(\"UTC(-`)=,c{y\", \"--ct(=6mk5'v\", true, 60000, 60000);\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);\n    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);\n    dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) charArrayWriter0, (-1291L), (Chronology) gJChronology0, 12825000, dateTimeZone0, (Locale) null);\n    dateTimeZone0.toString();\n}",
    "testName" : "test1061372"
  },
  "test1061373" : {
    "methodSignature" : "public abstract boolean isFixed()",
    "methodName" : "isFixed",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1061373() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(\"UTC(-`)=,c{y\", \"--ct(=6mk5'v\", true, 60000, 60000);\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);\n    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);\n    dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) charArrayWriter0, (-1291L), (Chronology) gJChronology0, 12825000, dateTimeZone0, (Locale) null);\n    dateTimeZone0.isFixed();\n}",
    "testName" : "test1061373"
  },
  "test1061371" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1061371() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(\"UTC(-`)=,c{y\", \"--ct(=6mk5'v\", true, 60000, 60000);\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);\n    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);\n    dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) charArrayWriter0, (-1291L), (Chronology) gJChronology0, 12825000, dateTimeZone0, (Locale) null);\n    dateTimeZone0.getID();\n}",
    "testName" : "test1061371"
  },
  "test1121529" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1121529() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 50);\n    StringBuffer stringBuffer0 = new StringBuffer();\n    PipedWriter pipedWriter0 = new PipedWriter();\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);\n    dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, (Writer) pipedWriter0, (long) 0, (Chronology) buddhistChronology0);\n    dateTimeZone0.getID();\n}",
    "testName" : "test1121529"
  },
  "test034749" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendSecondOfMinute(int minDigits)",
    "methodName" : "appendSecondOfMinute",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test034749() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendSecondOfMinute(34);\n}",
    "testName" : "test034749"
  },
  "test1121528" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1121528() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 50);\n    StringBuffer stringBuffer0 = new StringBuffer();\n    PipedWriter pipedWriter0 = new PipedWriter();\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);\n    dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, (Writer) pipedWriter0, (long) 0, (Chronology) buddhistChronology0);\n    dateTimeZone0.toString();\n}",
    "testName" : "test1121528"
  },
  "test031599" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test031599() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();\n    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);\n    StringBuffer stringBuffer0 = new StringBuffer(\"56YZ0]vD<'tk9?n0L\");\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);\n    YearMonth yearMonth0 = new YearMonth(dateTimeZone0);\n    yearMonth0.size();\n}",
    "testName" : "test031599"
  },
  "test0961150" : {
    "methodSignature" : "public abstract boolean isFixed()",
    "methodName" : "isFixed",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0961150() throws Throwable {\n    CopticChronology copticChronology0 = CopticChronology.getInstance();\n    LinkedList<Object> linkedList0 = new LinkedList<Object>();\n    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);\n    StringBuffer stringBuffer0 = new StringBuffer(1);\n    GJChronology gJChronology0 = GJChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = gJChronology0.getZone();\n    dateTimeZone0.isFixed();\n}",
    "testName" : "test0961150"
  },
  "test031598" : {
    "methodSignature" : "public int getYear()",
    "methodName" : "getYear",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test031598() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();\n    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);\n    StringBuffer stringBuffer0 = new StringBuffer(\"56YZ0]vD<'tk9?n0L\");\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);\n    YearMonth yearMonth0 = new YearMonth(dateTimeZone0);\n    yearMonth0.getYear();\n}",
    "testName" : "test031598"
  },
  "test1472182" : {
    "methodSignature" : "public DateTimeFormatterBuilder append(DateTimePrinter printer, DateTimeParser[] parsers)",
    "methodName" : "append",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1472182() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    LinkedList<Object> linkedList0 = new LinkedList<Object>();\n    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);\n    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];\n    dateTimeParserArray0[0] = (DateTimeParser) dateTimeFormatterBuilder_Composite0;\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append((DateTimePrinter) dateTimeFormatterBuilder_Composite0, dateTimeParserArray0);\n}",
    "testName" : "test1472182"
  },
  "test031597" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test031597() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();\n    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);\n    StringBuffer stringBuffer0 = new StringBuffer(\"56YZ0]vD<'tk9?n0L\");\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);\n    YearMonth yearMonth0 = new YearMonth(dateTimeZone0);\n    dateTimeZone0.getID();\n}",
    "testName" : "test031597"
  },
  "test031596" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test031596() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();\n    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);\n    StringBuffer stringBuffer0 = new StringBuffer(\"56YZ0]vD<'tk9?n0L\");\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);\n    YearMonth yearMonth0 = new YearMonth(dateTimeZone0);\n    dateTimeZone0.toString();\n}",
    "testName" : "test031596"
  },
  "test031595" : {
    "methodSignature" : "public abstract boolean isFixed()",
    "methodName" : "isFixed",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test031595() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();\n    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);\n    StringBuffer stringBuffer0 = new StringBuffer(\"56YZ0]vD<'tk9?n0L\");\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);\n    YearMonth yearMonth0 = new YearMonth(dateTimeZone0);\n    dateTimeZone0.isFixed();\n}",
    "testName" : "test031595"
  },
  "test032683" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test032683() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();\n    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);\n    char[] charArray0 = new char[7];\n    CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);\n    StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);\n    Locale locale0 = Locale.US;\n    dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, 2814L, (Chronology) buddhistChronology0, (-1858), dateTimeZone0, locale0);\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test032683"
  },
  "test032682" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test032682() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();\n    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);\n    char[] charArray0 = new char[7];\n    CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);\n    StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);\n    Locale locale0 = Locale.US;\n    dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, 2814L, (Chronology) buddhistChronology0, (-1858), dateTimeZone0, locale0);\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test032682"
  },
  "test031592" : {
    "methodSignature" : "public YearMonth(DateTimeZone zone)",
    "methodName" : "YearMonth",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test031592() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();\n    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);\n    StringBuffer stringBuffer0 = new StringBuffer(\"56YZ0]vD<'tk9?n0L\");\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);\n    YearMonth yearMonth0 = new YearMonth(dateTimeZone0);\n}",
    "testName" : "test031592"
  },
  "test031591" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test031591() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();\n    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);\n    StringBuffer stringBuffer0 = new StringBuffer(\"56YZ0]vD<'tk9?n0L\");\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);\n    dateTimeZone0.getID();\n}",
    "testName" : "test031591"
  },
  "test031590" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test031590() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();\n    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);\n    StringBuffer stringBuffer0 = new StringBuffer(\"56YZ0]vD<'tk9?n0L\");\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);\n    dateTimeZone0.toString();\n}",
    "testName" : "test031590"
  },
  "test1121514" : {
    "methodSignature" : "public static DateTimeZone getDefault()",
    "methodName" : "getDefault",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1121514() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 50);\n    StringBuffer stringBuffer0 = new StringBuffer();\n    PipedWriter pipedWriter0 = new PipedWriter();\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n}",
    "testName" : "test1121514"
  },
  "test1932287" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendTwoDigitYear(int pivot)",
    "methodName" : "appendTwoDigitYear",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1932287() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTwoDigitYear(0);\n}",
    "testName" : "test1932287"
  },
  "test0871013" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendMinuteOfHour(int minDigits)",
    "methodName" : "appendMinuteOfHour",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0871013() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMinuteOfHour(0);\n}",
    "testName" : "test0871013"
  },
  "test1121519" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1121519() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 50);\n    StringBuffer stringBuffer0 = new StringBuffer();\n    PipedWriter pipedWriter0 = new PipedWriter();\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);\n    dateTimeZone0.toString();\n}",
    "testName" : "test1121519"
  },
  "test1121517" : {
    "methodSignature" : "public static synchronized BuddhistChronology getInstance(DateTimeZone zone)",
    "methodName" : "getInstance",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1121517() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 50);\n    StringBuffer stringBuffer0 = new StringBuffer();\n    PipedWriter pipedWriter0 = new PipedWriter();\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);\n}",
    "testName" : "test1121517"
  },
  "test1121516" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1121516() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 50);\n    StringBuffer stringBuffer0 = new StringBuffer();\n    PipedWriter pipedWriter0 = new PipedWriter();\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    dateTimeZone0.getID();\n}",
    "testName" : "test1121516"
  },
  "test1121515" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1121515() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 50);\n    StringBuffer stringBuffer0 = new StringBuffer();\n    PipedWriter pipedWriter0 = new PipedWriter();\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    dateTimeZone0.toString();\n}",
    "testName" : "test1121515"
  },
  "test079987" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendHourOfDay(int minDigits)",
    "methodName" : "appendHourOfDay",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test079987() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendHourOfDay(10209375);\n}",
    "testName" : "test079987"
  },
  "test032699" : {
    "methodSignature" : "public abstract boolean isFixed()",
    "methodName" : "isFixed",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test032699() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();\n    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);\n    char[] charArray0 = new char[7];\n    CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);\n    StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);\n    Locale locale0 = Locale.US;\n    dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, 2814L, (Chronology) buddhistChronology0, (-1858), dateTimeZone0, locale0);\n    dateTimeZone0.isFixed();\n}",
    "testName" : "test032699"
  },
  "test0971184" : {
    "methodSignature" : "public Integer getOffsetInteger()",
    "methodName" : "getOffsetInteger",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0971184() throws Throwable {\n    Locale locale0 = Locale.TRADITIONAL_CHINESE;\n    ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();\n    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;\n    Integer integer0 = new Integer(9);\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(10, iSOChronology0, locale0, integer0, 9);\n    int int0 = dateTimeFormatterBuilder_TimeZoneId0.parseInto(dateTimeParserBucket0, \"vRA@$:X}66xJ\", 0);\n    dateTimeParserBucket0.getOffsetInteger();\n}",
    "testName" : "test0971184"
  },
  "test0971185" : {
    "methodSignature" : "public int getOffset()",
    "methodName" : "getOffset",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0971185() throws Throwable {\n    Locale locale0 = Locale.TRADITIONAL_CHINESE;\n    ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();\n    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;\n    Integer integer0 = new Integer(9);\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(10, iSOChronology0, locale0, integer0, 9);\n    int int0 = dateTimeFormatterBuilder_TimeZoneId0.parseInto(dateTimeParserBucket0, \"vRA@$:X}66xJ\", 0);\n    dateTimeParserBucket0.getOffset();\n}",
    "testName" : "test0971185"
  },
  "test0971183" : {
    "methodSignature" : "public Integer getPivotYear()",
    "methodName" : "getPivotYear",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0971183() throws Throwable {\n    Locale locale0 = Locale.TRADITIONAL_CHINESE;\n    ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();\n    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;\n    Integer integer0 = new Integer(9);\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(10, iSOChronology0, locale0, integer0, 9);\n    int int0 = dateTimeFormatterBuilder_TimeZoneId0.parseInto(dateTimeParserBucket0, \"vRA@$:X}66xJ\", 0);\n    dateTimeParserBucket0.getPivotYear();\n}",
    "testName" : "test0971183"
  },
  "test1782266" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendMillisOfSecond(int minDigits)",
    "methodName" : "appendMillisOfSecond",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1782266() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMillisOfSecond(574);\n}",
    "testName" : "test1782266"
  },
  "test0961146" : {
    "methodSignature" : "public static GJChronology getInstanceUTC()",
    "methodName" : "getInstanceUTC",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0961146() throws Throwable {\n    CopticChronology copticChronology0 = CopticChronology.getInstance();\n    LinkedList<Object> linkedList0 = new LinkedList<Object>();\n    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);\n    StringBuffer stringBuffer0 = new StringBuffer(1);\n    GJChronology gJChronology0 = GJChronology.getInstanceUTC();\n}",
    "testName" : "test0961146"
  },
  "test0961147" : {
    "methodSignature" : "public DateTimeZone getZone()",
    "methodName" : "getZone",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0961147() throws Throwable {\n    CopticChronology copticChronology0 = CopticChronology.getInstance();\n    LinkedList<Object> linkedList0 = new LinkedList<Object>();\n    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);\n    StringBuffer stringBuffer0 = new StringBuffer(1);\n    GJChronology gJChronology0 = GJChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = gJChronology0.getZone();\n}",
    "testName" : "test0961147"
  },
  "test0961148" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0961148() throws Throwable {\n    CopticChronology copticChronology0 = CopticChronology.getInstance();\n    LinkedList<Object> linkedList0 = new LinkedList<Object>();\n    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);\n    StringBuffer stringBuffer0 = new StringBuffer(1);\n    GJChronology gJChronology0 = GJChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = gJChronology0.getZone();\n    dateTimeZone0.getID();\n}",
    "testName" : "test0961148"
  },
  "test1372139" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendYear(int minDigits, int maxDigits)",
    "methodName" : "appendYear",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1372139() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendYear(5, 0);\n}",
    "testName" : "test1372139"
  },
  "test1121503" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1121503() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test1121503"
  },
  "test1121502" : {
    "methodSignature" : "public static DateTimeFieldType weekyear()",
    "methodName" : "weekyear",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1121502() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();\n}",
    "testName" : "test1121502"
  },
  "test027390" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test027390() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 84, false);\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test027390"
  },
  "test028484" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test028484() throws Throwable {\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);\n    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();\n    FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);\n    ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);\n    Charset charset0 = Charset.defaultCharset();\n    CharsetEncoder charsetEncoder0 = charset0.newEncoder();\n    OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);\n    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();\n    Locale locale0 = Locale.ITALY;\n    Integer integer0 = new Integer((-1816));\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gregorianChronology0, locale0, integer0, 0);\n    DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();\n    dateTimeZone0.toString();\n}",
    "testName" : "test028484"
  },
  "test027396" : {
    "methodSignature" : "public LocalTime(long instant, DateTimeZone zone)",
    "methodName" : "LocalTime",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test027396() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 84, false);\n    StringBuffer stringBuffer0 = new StringBuffer(58);\n    LocalTime localTime0 = new LocalTime((long) 84, (DateTimeZone) null);\n}",
    "testName" : "test027396"
  },
  "test028485" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test028485() throws Throwable {\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);\n    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();\n    FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);\n    ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);\n    Charset charset0 = Charset.defaultCharset();\n    CharsetEncoder charsetEncoder0 = charset0.newEncoder();\n    OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);\n    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();\n    Locale locale0 = Locale.ITALY;\n    Integer integer0 = new Integer((-1816));\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gregorianChronology0, locale0, integer0, 0);\n    DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();\n    dateTimeZone0.getID();\n}",
    "testName" : "test028485"
  },
  "test027397" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test027397() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 84, false);\n    StringBuffer stringBuffer0 = new StringBuffer(58);\n    LocalTime localTime0 = new LocalTime((long) 84, (DateTimeZone) null);\n    localTime0.size();\n}",
    "testName" : "test027397"
  },
  "test033712" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033712() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();\n    DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 2300, false, 85);\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test033712"
  },
  "test042781" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendDayOfWeek(int minDigits)",
    "methodName" : "appendDayOfWeek",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test042781() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfWeek(2139);\n}",
    "testName" : "test042781"
  },
  "test1031306" : {
    "methodSignature" : "public static DateTimeZone forOffsetMillis(int millisOffset)",
    "methodName" : "forOffsetMillis",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1031306() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(\"UTC(-`)=,c{y\", \"--ct(=6mk5'v\", false, 60000, 60000);\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);\n}",
    "testName" : "test1031306"
  },
  "test033713" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033713() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();\n    DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 2300, false, 85);\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test033713"
  },
  "test1031307" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1031307() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(\"UTC(-`)=,c{y\", \"--ct(=6mk5'v\", false, 60000, 60000);\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);\n    dateTimeZone0.getID();\n}",
    "testName" : "test1031307"
  },
  "test1031308" : {
    "methodSignature" : "public abstract boolean isFixed()",
    "methodName" : "isFixed",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1031308() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(\"UTC(-`)=,c{y\", \"--ct(=6mk5'v\", false, 60000, 60000);\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);\n    dateTimeZone0.isFixed();\n}",
    "testName" : "test1031308"
  },
  "test1041341" : {
    "methodSignature" : "public abstract boolean isFixed()",
    "methodName" : "isFixed",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1041341() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(\"UTC(-`)=,c{y\", \"--ct(=6mk5'v\", true, 60000, 60000);\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);\n    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);\n    dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) charArrayWriter0, (-1291L), (Chronology) gJChronology0, (-463), dateTimeZone0, (Locale) null);\n    dateTimeZone0.isFixed();\n}",
    "testName" : "test1041341"
  },
  "test1121507" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1121507() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 50);\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test1121507"
  },
  "test1211786" : {
    "methodSignature" : "public static ISOChronology getInstance()",
    "methodName" : "getInstance",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1211786() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();\n    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2300, false);\n    ISOChronology iSOChronology0 = ISOChronology.getInstance();\n}",
    "testName" : "test1211786"
  },
  "test028481" : {
    "methodSignature" : "public Integer getOffsetInteger()",
    "methodName" : "getOffsetInteger",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test028481() throws Throwable {\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);\n    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();\n    FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);\n    ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);\n    Charset charset0 = Charset.defaultCharset();\n    CharsetEncoder charsetEncoder0 = charset0.newEncoder();\n    OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);\n    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();\n    Locale locale0 = Locale.ITALY;\n    Integer integer0 = new Integer((-1816));\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gregorianChronology0, locale0, integer0, 0);\n    DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();\n    dateTimeParserBucket0.getOffsetInteger();\n}",
    "testName" : "test028481"
  },
  "test1031309" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1031309() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(\"UTC(-`)=,c{y\", \"--ct(=6mk5'v\", false, 60000, 60000);\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);\n    dateTimeZone0.toString();\n}",
    "testName" : "test1031309"
  },
  "test1121506" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1121506() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 50);\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test1121506"
  },
  "test028482" : {
    "methodSignature" : "public Integer getPivotYear()",
    "methodName" : "getPivotYear",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test028482() throws Throwable {\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);\n    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();\n    FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);\n    ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);\n    Charset charset0 = Charset.defaultCharset();\n    CharsetEncoder charsetEncoder0 = charset0.newEncoder();\n    OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);\n    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();\n    Locale locale0 = Locale.ITALY;\n    Integer integer0 = new Integer((-1816));\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gregorianChronology0, locale0, integer0, 0);\n    DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();\n    dateTimeParserBucket0.getPivotYear();\n}",
    "testName" : "test028482"
  },
  "test028483" : {
    "methodSignature" : "public int getOffset()",
    "methodName" : "getOffset",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test028483() throws Throwable {\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);\n    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();\n    FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);\n    ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);\n    Charset charset0 = Charset.defaultCharset();\n    CharsetEncoder charsetEncoder0 = charset0.newEncoder();\n    OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);\n    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();\n    Locale locale0 = Locale.ITALY;\n    Integer integer0 = new Integer((-1816));\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gregorianChronology0, locale0, integer0, 0);\n    DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();\n    dateTimeParserBucket0.getOffset();\n}",
    "testName" : "test028483"
  },
  "test1041340" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1041340() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(\"UTC(-`)=,c{y\", \"--ct(=6mk5'v\", true, 60000, 60000);\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);\n    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);\n    dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) charArrayWriter0, (-1291L), (Chronology) gJChronology0, (-463), dateTimeZone0, (Locale) null);\n    dateTimeZone0.getID();\n}",
    "testName" : "test1041340"
  },
  "test1121504" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1121504() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test1121504"
  },
  "test018270" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test018270() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();\n    DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 57, true, 1);\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test018270"
  },
  "test1131544" : {
    "methodSignature" : "public boolean isParser()",
    "methodName" : "isParser",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1131544() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();\n    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);\n    dateTimeFormatter0.isParser();\n}",
    "testName" : "test1131544"
  },
  "test018271" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test018271() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();\n    DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 57, true, 1);\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test018271"
  },
  "test1131543" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1131543() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();\n    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);\n    dateTimeFormatter0.getDefaultYear();\n}",
    "testName" : "test1131543"
  },
  "test1211794" : {
    "methodSignature" : "public DateTimeParserBucket(long instantLocal, Chronology chrono, Locale locale, Integer pivotYear, int defaultYear)",
    "methodName" : "DateTimeParserBucket",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1211794() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();\n    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2300, false);\n    ISOChronology iSOChronology0 = ISOChronology.getInstance();\n    Locale locale0 = Locale.ENGLISH;\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, iSOChronology0, locale0, (Integer) 1, 1);\n}",
    "testName" : "test1211794"
  },
  "test1131546" : {
    "methodSignature" : "public Integer getPivotYear()",
    "methodName" : "getPivotYear",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1131546() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();\n    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);\n    dateTimeFormatter0.getPivotYear();\n}",
    "testName" : "test1131546"
  },
  "test1131545" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1131545() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();\n    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);\n    dateTimeFormatter0.isOffsetParsed();\n}",
    "testName" : "test1131545"
  },
  "test1131540" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1131540() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();\n    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test1131540"
  },
  "test0971173" : {
    "methodSignature" : "public int getOffset()",
    "methodName" : "getOffset",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0971173() throws Throwable {\n    Locale locale0 = Locale.TRADITIONAL_CHINESE;\n    ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();\n    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;\n    Integer integer0 = new Integer(9);\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(10, iSOChronology0, locale0, integer0, 9);\n    dateTimeParserBucket0.getOffset();\n}",
    "testName" : "test0971173"
  },
  "test030565" : {
    "methodSignature" : "public DateTimeParserBucket(long instantLocal, Chronology chrono, Locale locale, Integer pivotYear, int defaultYear)",
    "methodName" : "DateTimeParserBucket",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test030565() throws Throwable {\n    HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();\n    DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-403), hashMap0);\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();\n    Locale locale0 = Locale.FRENCH;\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(48L, ethiopicChronology0, locale0, (Integer) null, (-403));\n}",
    "testName" : "test030565"
  },
  "test0971171" : {
    "methodSignature" : "public Integer getPivotYear()",
    "methodName" : "getPivotYear",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0971171() throws Throwable {\n    Locale locale0 = Locale.TRADITIONAL_CHINESE;\n    ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();\n    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;\n    Integer integer0 = new Integer(9);\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(10, iSOChronology0, locale0, integer0, 9);\n    dateTimeParserBucket0.getPivotYear();\n}",
    "testName" : "test0971171"
  },
  "test0971172" : {
    "methodSignature" : "public Integer getOffsetInteger()",
    "methodName" : "getOffsetInteger",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0971172() throws Throwable {\n    Locale locale0 = Locale.TRADITIONAL_CHINESE;\n    ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();\n    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;\n    Integer integer0 = new Integer(9);\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(10, iSOChronology0, locale0, integer0, 9);\n    dateTimeParserBucket0.getOffsetInteger();\n}",
    "testName" : "test0971172"
  },
  "test018276" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test018276() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();\n    DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 57, true, 1);\n    int int0 = dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength();\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test018276"
  },
  "test1131548" : {
    "methodSignature" : "public static LocalDate parse(String str, DateTimeFormatter formatter)",
    "methodName" : "parse",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1131548() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();\n    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);\n    LocalDate.parse(\"EET\", dateTimeFormatter0);\n}",
    "testName" : "test1131548"
  },
  "test018275" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test018275() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();\n    DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 57, true, 1);\n    int int0 = dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength();\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test018275"
  },
  "test0961135" : {
    "methodSignature" : "public static CopticChronology getInstance()",
    "methodName" : "getInstance",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0961135() throws Throwable {\n    CopticChronology copticChronology0 = CopticChronology.getInstance();\n}",
    "testName" : "test0961135"
  },
  "test1131547" : {
    "methodSignature" : "public boolean isPrinter()",
    "methodName" : "isPrinter",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1131547() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();\n    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);\n    dateTimeFormatter0.isPrinter();\n}",
    "testName" : "test1131547"
  },
  "test078983" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendWeekOfWeekyear(int minDigits)",
    "methodName" : "appendWeekOfWeekyear",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test078983() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendWeekOfWeekyear(122);\n}",
    "testName" : "test078983"
  },
  "test1762264" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendMonthOfYearShortText()",
    "methodName" : "appendMonthOfYearShortText",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1762264() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMonthOfYearShortText();\n}",
    "testName" : "test1762264"
  },
  "test1031310" : {
    "methodSignature" : "public static GJChronology getInstance(DateTimeZone zone)",
    "methodName" : "getInstance",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1031310() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(\"UTC(-`)=,c{y\", \"--ct(=6mk5'v\", false, 60000, 60000);\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);\n    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);\n}",
    "testName" : "test1031310"
  },
  "test1031311" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1031311() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(\"UTC(-`)=,c{y\", \"--ct(=6mk5'v\", false, 60000, 60000);\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);\n    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);\n    dateTimeZone0.getID();\n}",
    "testName" : "test1031311"
  },
  "test1031312" : {
    "methodSignature" : "public abstract boolean isFixed()",
    "methodName" : "isFixed",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1031312() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(\"UTC(-`)=,c{y\", \"--ct(=6mk5'v\", false, 60000, 60000);\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);\n    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);\n    dateTimeZone0.isFixed();\n}",
    "testName" : "test1031312"
  },
  "test1031313" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1031313() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(\"UTC(-`)=,c{y\", \"--ct(=6mk5'v\", false, 60000, 60000);\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);\n    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);\n    dateTimeZone0.toString();\n}",
    "testName" : "test1031313"
  },
  "test033721" : {
    "methodSignature" : "public static DateTimeZone forOffsetMillis(int millisOffset)",
    "methodName" : "forOffsetMillis",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033721() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();\n    DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 2300, false, 85);\n    StringBuffer stringBuffer0 = new StringBuffer(85);\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);\n}",
    "testName" : "test033721"
  },
  "test033722" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033722() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();\n    DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 2300, false, 85);\n    StringBuffer stringBuffer0 = new StringBuffer(85);\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);\n    dateTimeZone0.toString();\n}",
    "testName" : "test033722"
  },
  "test033723" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033723() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();\n    DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 2300, false, 85);\n    StringBuffer stringBuffer0 = new StringBuffer(85);\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);\n    dateTimeZone0.getID();\n}",
    "testName" : "test033723"
  },
  "test066862" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066862() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendShortText(dateTimeFieldType0);\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test066862"
  },
  "test033724" : {
    "methodSignature" : "public abstract boolean isFixed()",
    "methodName" : "isFixed",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033724() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();\n    DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 2300, false, 85);\n    StringBuffer stringBuffer0 = new StringBuffer(85);\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);\n    dateTimeZone0.isFixed();\n}",
    "testName" : "test033724"
  },
  "test066863" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066863() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendShortText(dateTimeFieldType0);\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test066863"
  },
  "test1031318" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1031318() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(\"UTC(-`)=,c{y\", \"--ct(=6mk5'v\", false, 60000, 60000);\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);\n    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);\n    dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) charArrayWriter0, (-1291L), (Chronology) gJChronology0, 4110, dateTimeZone0, (Locale) null);\n    dateTimeZone0.getID();\n}",
    "testName" : "test1031318"
  },
  "test1031319" : {
    "methodSignature" : "public abstract boolean isFixed()",
    "methodName" : "isFixed",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1031319() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(\"UTC(-`)=,c{y\", \"--ct(=6mk5'v\", false, 60000, 60000);\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);\n    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);\n    dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) charArrayWriter0, (-1291L), (Chronology) gJChronology0, 4110, dateTimeZone0, (Locale) null);\n    dateTimeZone0.isFixed();\n}",
    "testName" : "test1031319"
  },
  "test0971159" : {
    "methodSignature" : "public static ISOChronology getInstanceUTC()",
    "methodName" : "getInstanceUTC",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0971159() throws Throwable {\n    Locale locale0 = Locale.TRADITIONAL_CHINESE;\n    ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();\n}",
    "testName" : "test0971159"
  },
  "test033719" : {
    "methodSignature" : "public static EthiopicChronology getInstanceUTC()",
    "methodName" : "getInstanceUTC",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033719() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();\n    DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 2300, false, 85);\n    StringBuffer stringBuffer0 = new StringBuffer(85);\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();\n}",
    "testName" : "test033719"
  },
  "test1131535" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1131535() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();\n    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test1131535"
  },
  "test1131534" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1131534() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();\n    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test1131534"
  },
  "test0971164" : {
    "methodSignature" : "public DateTimeParserBucket(long instantLocal, Chronology chrono, Locale locale, Integer pivotYear, int defaultYear)",
    "methodName" : "DateTimeParserBucket",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0971164() throws Throwable {\n    Locale locale0 = Locale.TRADITIONAL_CHINESE;\n    ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();\n    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;\n    Integer integer0 = new Integer(9);\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(10, iSOChronology0, locale0, integer0, 9);\n}",
    "testName" : "test0971164"
  },
  "test030575" : {
    "methodSignature" : "public Integer getOffsetInteger()",
    "methodName" : "getOffsetInteger",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test030575() throws Throwable {\n    HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();\n    DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-403), hashMap0);\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();\n    Locale locale0 = Locale.FRENCH;\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(48L, ethiopicChronology0, locale0, (Integer) null, (-403));\n    dateTimeParserBucket0.getOffsetInteger();\n}",
    "testName" : "test030575"
  },
  "test032633" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test032633() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();\n    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test032633"
  },
  "test032632" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test032632() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();\n    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test032632"
  },
  "test018267" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test018267() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test018267"
  },
  "test030573" : {
    "methodSignature" : "public int getOffset()",
    "methodName" : "getOffset",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test030573() throws Throwable {\n    HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();\n    DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-403), hashMap0);\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();\n    Locale locale0 = Locale.FRENCH;\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(48L, ethiopicChronology0, locale0, (Integer) null, (-403));\n    dateTimeParserBucket0.getOffset();\n}",
    "testName" : "test030573"
  },
  "test018268" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test018268() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test018268"
  },
  "test030574" : {
    "methodSignature" : "public Integer getPivotYear()",
    "methodName" : "getPivotYear",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test030574() throws Throwable {\n    HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();\n    DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-403), hashMap0);\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();\n    Locale locale0 = Locale.FRENCH;\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(48L, ethiopicChronology0, locale0, (Integer) null, (-403));\n    dateTimeParserBucket0.getPivotYear();\n}",
    "testName" : "test030574"
  },
  "test018266" : {
    "methodSignature" : "public static DateTimeFieldType hourOfDay()",
    "methodName" : "hourOfDay",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test018266() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();\n}",
    "testName" : "test018266"
  },
  "test1392148" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendFixedDecimal(DateTimeFieldType fieldType, int numDigits)",
    "methodName" : "appendFixedDecimal",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1392148() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();\n    dateTimeFormatterBuilder0.appendFixedDecimal(dateTimeFieldType0, (-2123));\n}",
    "testName" : "test1392148"
  },
  "test1131539" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1131539() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();\n    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test1131539"
  },
  "test1131538" : {
    "methodSignature" : "public DateTimeFormatter(DateTimePrinter printer, DateTimeParser parser)",
    "methodName" : "DateTimeFormatter",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1131538() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();\n    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);\n}",
    "testName" : "test1131538"
  },
  "test1041329" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1041329() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(\"UTC(-`)=,c{y\", \"--ct(=6mk5'v\", true, 60000, 60000);\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);\n    dateTimeZone0.getID();\n}",
    "testName" : "test1041329"
  },
  "test0981194" : {
    "methodSignature" : "public static ISOChronology getInstanceUTC()",
    "methodName" : "getInstanceUTC",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0981194() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;\n    StringWriter stringWriter0 = new StringWriter();\n    StringBuffer stringBuffer0 = stringWriter0.getBuffer();\n    ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();\n}",
    "testName" : "test0981194"
  },
  "test1041327" : {
    "methodSignature" : "public static DateTimeZone forOffsetMillis(int millisOffset)",
    "methodName" : "forOffsetMillis",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1041327() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(\"UTC(-`)=,c{y\", \"--ct(=6mk5'v\", true, 60000, 60000);\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);\n}",
    "testName" : "test1041327"
  },
  "test0981195" : {
    "methodSignature" : "public static DateTimeZone getDefault()",
    "methodName" : "getDefault",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0981195() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;\n    StringWriter stringWriter0 = new StringWriter();\n    StringBuffer stringBuffer0 = stringWriter0.getBuffer();\n    ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n}",
    "testName" : "test0981195"
  },
  "test1041328" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1041328() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(\"UTC(-`)=,c{y\", \"--ct(=6mk5'v\", true, 60000, 60000);\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);\n    dateTimeZone0.toString();\n}",
    "testName" : "test1041328"
  },
  "test067867" : {
    "methodSignature" : "public DateTimeFormatterBuilder()",
    "methodName" : "DateTimeFormatterBuilder",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test067867() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n}",
    "testName" : "test067867"
  },
  "test0981196" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0981196() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;\n    StringWriter stringWriter0 = new StringWriter();\n    StringBuffer stringBuffer0 = stringWriter0.getBuffer();\n    ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    dateTimeZone0.toString();\n}",
    "testName" : "test0981196"
  },
  "test067868" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendText(DateTimeFieldType fieldType)",
    "methodName" : "appendText",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test067868() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendText(dateTimeFieldType0);\n}",
    "testName" : "test067868"
  },
  "test0981197" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0981197() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;\n    StringWriter stringWriter0 = new StringWriter();\n    StringBuffer stringBuffer0 = stringWriter0.getBuffer();\n    ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    dateTimeZone0.getID();\n}",
    "testName" : "test0981197"
  },
  "test033733" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033733() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();\n    DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 2300, false, 85);\n    StringBuffer stringBuffer0 = new StringBuffer(85);\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);\n    Locale locale0 = Locale.CHINESE;\n    dateTimeFormatterBuilder_PaddedNumber0.printTo(stringBuffer0, (long) 2300, (Chronology) ethiopicChronology0, (-1611), dateTimeZone0, locale0);\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test033733"
  },
  "test033734" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033734() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();\n    DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 2300, false, 85);\n    StringBuffer stringBuffer0 = new StringBuffer(85);\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);\n    Locale locale0 = Locale.CHINESE;\n    dateTimeFormatterBuilder_PaddedNumber0.printTo(stringBuffer0, (long) 2300, (Chronology) ethiopicChronology0, (-1611), dateTimeZone0, locale0);\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test033734"
  },
  "test1452172" : {
    "methodSignature" : "public DateTimeFormatterBuilder append(DateTimePrinter printer, DateTimeParser parser)",
    "methodName" : "append",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1452172() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('4');\n    dateTimeFormatterBuilder0.append((DateTimePrinter) null, (DateTimeParser) dateTimeFormatterBuilder_CharacterLiteral0);\n}",
    "testName" : "test1452172"
  },
  "test006153" : {
    "methodSignature" : "public Instant(Object instant)",
    "methodName" : "Instant",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test006153() throws Throwable {\n    Instant instant0 = null;\n    instant0 = new Instant(\"\");\n}",
    "testName" : "test006153"
  },
  "test033739" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033739() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();\n    DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 2300, false, 85);\n    StringBuffer stringBuffer0 = new StringBuffer(85);\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);\n    Locale locale0 = Locale.CHINESE;\n    dateTimeFormatterBuilder_PaddedNumber0.printTo(stringBuffer0, (long) 2300, (Chronology) ethiopicChronology0, (-1611), dateTimeZone0, locale0);\n    dateTimeZone0.toString();\n}",
    "testName" : "test033739"
  },
  "test1402156" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1402156() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFixedDecimal(dateTimeFieldType0, 2946);\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test1402156"
  },
  "test1402153" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendFixedDecimal(DateTimeFieldType fieldType, int numDigits)",
    "methodName" : "appendFixedDecimal",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1402153() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFixedDecimal(dateTimeFieldType0, 2946);\n}",
    "testName" : "test1402153"
  },
  "test1402157" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1402157() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFixedDecimal(dateTimeFieldType0, 2946);\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test1402157"
  },
  "test020302" : {
    "methodSignature" : "public static synchronized BuddhistChronology getInstance(DateTimeZone zone)",
    "methodName" : "getInstance",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test020302() throws Throwable {\n    Locale locale0 = Locale.TRADITIONAL_CHINESE;\n    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[3];\n    DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);\n}",
    "testName" : "test020302"
  },
  "test020304" : {
    "methodSignature" : "public static LenientChronology getInstance(Chronology base)",
    "methodName" : "getInstance",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test020304() throws Throwable {\n    Locale locale0 = Locale.TRADITIONAL_CHINESE;\n    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[3];\n    DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);\n    LenientChronology lenientChronology0 = LenientChronology.getInstance(buddhistChronology0);\n}",
    "testName" : "test020304"
  },
  "test1402151" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1402151() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test1402151"
  },
  "test020306" : {
    "methodSignature" : "public DateTimeParserBucket(long instantLocal, Chronology chrono, Locale locale, Integer pivotYear, int defaultYear)",
    "methodName" : "DateTimeParserBucket",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test020306() throws Throwable {\n    Locale locale0 = Locale.TRADITIONAL_CHINESE;\n    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[3];\n    DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);\n    LenientChronology lenientChronology0 = LenientChronology.getInstance(buddhistChronology0);\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1043L, lenientChronology0, locale0, (Integer) 1, 155);\n}",
    "testName" : "test020306"
  },
  "test1402152" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1402152() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test1402152"
  },
  "test1402150" : {
    "methodSignature" : "public static DateTimeFieldType clockhourOfDay()",
    "methodName" : "clockhourOfDay",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1402150() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();\n}",
    "testName" : "test1402150"
  },
  "test033740" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033740() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();\n    DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 2300, false, 85);\n    StringBuffer stringBuffer0 = new StringBuffer(85);\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);\n    Locale locale0 = Locale.CHINESE;\n    dateTimeFormatterBuilder_PaddedNumber0.printTo(stringBuffer0, (long) 2300, (Chronology) ethiopicChronology0, (-1611), dateTimeZone0, locale0);\n    dateTimeZone0.getID();\n}",
    "testName" : "test033740"
  },
  "test1041339" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1041339() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(\"UTC(-`)=,c{y\", \"--ct(=6mk5'v\", true, 60000, 60000);\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);\n    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);\n    dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) charArrayWriter0, (-1291L), (Chronology) gJChronology0, (-463), dateTimeZone0, (Locale) null);\n    dateTimeZone0.toString();\n}",
    "testName" : "test1041339"
  },
  "test033741" : {
    "methodSignature" : "public abstract boolean isFixed()",
    "methodName" : "isFixed",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033741() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();\n    DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 2300, false, 85);\n    StringBuffer stringBuffer0 = new StringBuffer(85);\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);\n    Locale locale0 = Locale.CHINESE;\n    dateTimeFormatterBuilder_PaddedNumber0.printTo(stringBuffer0, (long) 2300, (Chronology) ethiopicChronology0, (-1611), dateTimeZone0, locale0);\n    dateTimeZone0.isFixed();\n}",
    "testName" : "test033741"
  },
  "test1041334" : {
    "methodSignature" : "public abstract boolean isFixed()",
    "methodName" : "isFixed",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1041334() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(\"UTC(-`)=,c{y\", \"--ct(=6mk5'v\", true, 60000, 60000);\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);\n    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);\n    dateTimeZone0.isFixed();\n}",
    "testName" : "test1041334"
  },
  "test043785" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendClockhourOfDay(int minDigits)",
    "methodName" : "appendClockhourOfDay",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test043785() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfDay(65533);\n}",
    "testName" : "test043785"
  },
  "test1041332" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1041332() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(\"UTC(-`)=,c{y\", \"--ct(=6mk5'v\", true, 60000, 60000);\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);\n    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);\n    dateTimeZone0.toString();\n}",
    "testName" : "test1041332"
  },
  "test1041333" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1041333() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(\"UTC(-`)=,c{y\", \"--ct(=6mk5'v\", true, 60000, 60000);\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);\n    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);\n    dateTimeZone0.getID();\n}",
    "testName" : "test1041333"
  },
  "test1041330" : {
    "methodSignature" : "public abstract boolean isFixed()",
    "methodName" : "isFixed",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1041330() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(\"UTC(-`)=,c{y\", \"--ct(=6mk5'v\", true, 60000, 60000);\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);\n    dateTimeZone0.isFixed();\n}",
    "testName" : "test1041330"
  },
  "test1041331" : {
    "methodSignature" : "public static GJChronology getInstance(DateTimeZone zone)",
    "methodName" : "getInstance",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1041331() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(\"UTC(-`)=,c{y\", \"--ct(=6mk5'v\", true, 60000, 60000);\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);\n    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);\n}",
    "testName" : "test1041331"
  },
  "test057817" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendHourOfDay(int minDigits)",
    "methodName" : "appendHourOfDay",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test057817() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    dateTimeFormatterBuilder0.appendHourOfDay((-215));\n}",
    "testName" : "test057817"
  },
  "test0861011" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendFractionOfHour(int minDigits, int maxDigits)",
    "methodName" : "appendFractionOfHour",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0861011() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    dateTimeFormatterBuilder0.appendFractionOfHour((-1156), (-2589));\n}",
    "testName" : "test0861011"
  },
  "test020314" : {
    "methodSignature" : "public int getOffset()",
    "methodName" : "getOffset",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test020314() throws Throwable {\n    Locale locale0 = Locale.TRADITIONAL_CHINESE;\n    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[3];\n    DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);\n    LenientChronology lenientChronology0 = LenientChronology.getInstance(buddhistChronology0);\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1043L, lenientChronology0, locale0, (Integer) 1, 155);\n    dateTimeParserBucket0.getOffset();\n}",
    "testName" : "test020314"
  },
  "test020315" : {
    "methodSignature" : "public Integer getOffsetInteger()",
    "methodName" : "getOffsetInteger",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test020315() throws Throwable {\n    Locale locale0 = Locale.TRADITIONAL_CHINESE;\n    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[3];\n    DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);\n    LenientChronology lenientChronology0 = LenientChronology.getInstance(buddhistChronology0);\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1043L, lenientChronology0, locale0, (Integer) 1, 155);\n    dateTimeParserBucket0.getOffsetInteger();\n}",
    "testName" : "test020315"
  },
  "test020316" : {
    "methodSignature" : "public Integer getPivotYear()",
    "methodName" : "getPivotYear",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test020316() throws Throwable {\n    Locale locale0 = Locale.TRADITIONAL_CHINESE;\n    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[3];\n    DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);\n    LenientChronology lenientChronology0 = LenientChronology.getInstance(buddhistChronology0);\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1043L, lenientChronology0, locale0, (Integer) 1, 155);\n    dateTimeParserBucket0.getPivotYear();\n}",
    "testName" : "test020316"
  },
  "test1171647" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1171647() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();\n    Locale locale0 = Locale.ITALIAN;\n    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), true);\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test1171647"
  },
  "test041777" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendDayOfYear(int minDigits)",
    "methodName" : "appendDayOfYear",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test041777() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfYear(0);\n}",
    "testName" : "test041777"
  },
  "test1171648" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1171648() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();\n    Locale locale0 = Locale.ITALIAN;\n    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), true);\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test1171648"
  },
  "test004118" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test004118() throws Throwable {\n    StringBuffer stringBuffer0 = new StringBuffer();\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    dateTimeZone0.getID();\n}",
    "testName" : "test004118"
  },
  "test029537" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test029537() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();\n    StringBuffer stringBuffer0 = new StringBuffer(85);\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);\n    Locale locale0 = Locale.CHINESE;\n    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 65, true);\n    dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, (-5336536147L), (Chronology) ethiopicChronology0, 2526, dateTimeZone0, locale0);\n    dateTimeZone0.toString();\n}",
    "testName" : "test029537"
  },
  "test031616" : {
    "methodSignature" : "public abstract boolean isFixed()",
    "methodName" : "isFixed",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test031616() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();\n    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);\n    StringBuffer stringBuffer0 = new StringBuffer(\"56YZ0]vD<'tk9?n0L\");\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);\n    YearMonth yearMonth0 = new YearMonth(dateTimeZone0);\n    Locale locale0 = Locale.TAIWAN;\n    dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, (ReadablePartial) yearMonth0, locale0);\n    dateTimeZone0.isFixed();\n}",
    "testName" : "test031616"
  },
  "test004119" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test004119() throws Throwable {\n    StringBuffer stringBuffer0 = new StringBuffer();\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    dateTimeZone0.toString();\n}",
    "testName" : "test004119"
  },
  "test029538" : {
    "methodSignature" : "public abstract boolean isFixed()",
    "methodName" : "isFixed",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test029538() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();\n    StringBuffer stringBuffer0 = new StringBuffer(85);\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);\n    Locale locale0 = Locale.CHINESE;\n    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 65, true);\n    dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, (-5336536147L), (Chronology) ethiopicChronology0, 2526, dateTimeZone0, locale0);\n    dateTimeZone0.isFixed();\n}",
    "testName" : "test029538"
  },
  "test077977" : {
    "methodSignature" : "public boolean isPrinter()",
    "methodName" : "isPrinter",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077977() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(3600000, 1584, 3600000);\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append((DateTimeParser) dateTimeFormat_StyleFormatter0);\n    DateTimeFormatter dateTimeFormatter0 = dateTimeFormatterBuilder0.toFormatter();\n    dateTimeFormatter0.isPrinter();\n}",
    "testName" : "test077977"
  },
  "test1181687" : {
    "methodSignature" : "public static ISOChronology getInstanceUTC()",
    "methodName" : "getInstanceUTC",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1181687() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();\n    Locale locale0 = Locale.TRADITIONAL_CHINESE;\n    ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();\n}",
    "testName" : "test1181687"
  },
  "test029539" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test029539() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();\n    StringBuffer stringBuffer0 = new StringBuffer(85);\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);\n    Locale locale0 = Locale.CHINESE;\n    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 65, true);\n    dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, (-5336536147L), (Chronology) ethiopicChronology0, 2526, dateTimeZone0, locale0);\n    dateTimeZone0.getID();\n}",
    "testName" : "test029539"
  },
  "test004117" : {
    "methodSignature" : "public static DateTimeZone getDefault()",
    "methodName" : "getDefault",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test004117() throws Throwable {\n    StringBuffer stringBuffer0 = new StringBuffer();\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n}",
    "testName" : "test004117"
  },
  "test077975" : {
    "methodSignature" : "public DateTimeFormatter toFormatter()",
    "methodName" : "toFormatter",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077975() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(3600000, 1584, 3600000);\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append((DateTimeParser) dateTimeFormat_StyleFormatter0);\n    DateTimeFormatter dateTimeFormatter0 = dateTimeFormatterBuilder0.toFormatter();\n}",
    "testName" : "test077975"
  },
  "test029533" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test029533() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();\n    StringBuffer stringBuffer0 = new StringBuffer(85);\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);\n    Locale locale0 = Locale.CHINESE;\n    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 65, true);\n    dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, (-5336536147L), (Chronology) ethiopicChronology0, 2526, dateTimeZone0, locale0);\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test029533"
  },
  "test032701" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test032701() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();\n    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);\n    char[] charArray0 = new char[7];\n    CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);\n    StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);\n    Locale locale0 = Locale.US;\n    dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, 2814L, (Chronology) buddhistChronology0, (-1858), dateTimeZone0, locale0);\n    dateTimeZone0.toString();\n}",
    "testName" : "test032701"
  },
  "test029534" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test029534() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();\n    StringBuffer stringBuffer0 = new StringBuffer(85);\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);\n    Locale locale0 = Locale.CHINESE;\n    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 65, true);\n    dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, (-5336536147L), (Chronology) ethiopicChronology0, 2526, dateTimeZone0, locale0);\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test029534"
  },
  "test031611" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test031611() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();\n    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);\n    StringBuffer stringBuffer0 = new StringBuffer(\"56YZ0]vD<'tk9?n0L\");\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);\n    YearMonth yearMonth0 = new YearMonth(dateTimeZone0);\n    Locale locale0 = Locale.TAIWAN;\n    dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, (ReadablePartial) yearMonth0, locale0);\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test031611"
  },
  "test032700" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test032700() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();\n    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);\n    char[] charArray0 = new char[7];\n    CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);\n    StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);\n    Locale locale0 = Locale.US;\n    dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, 2814L, (Chronology) buddhistChronology0, (-1858), dateTimeZone0, locale0);\n    dateTimeZone0.getID();\n}",
    "testName" : "test032700"
  },
  "test031610" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test031610() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();\n    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);\n    StringBuffer stringBuffer0 = new StringBuffer(\"56YZ0]vD<'tk9?n0L\");\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);\n    YearMonth yearMonth0 = new YearMonth(dateTimeZone0);\n    Locale locale0 = Locale.TAIWAN;\n    dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, (ReadablePartial) yearMonth0, locale0);\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test031610"
  },
  "test077978" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077978() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(3600000, 1584, 3600000);\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append((DateTimeParser) dateTimeFormat_StyleFormatter0);\n    DateTimeFormatter dateTimeFormatter0 = dateTimeFormatterBuilder0.toFormatter();\n    dateTimeFormatter0.isOffsetParsed();\n}",
    "testName" : "test077978"
  },
  "test077979" : {
    "methodSignature" : "public Integer getPivotYear()",
    "methodName" : "getPivotYear",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077979() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(3600000, 1584, 3600000);\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append((DateTimeParser) dateTimeFormat_StyleFormatter0);\n    DateTimeFormatter dateTimeFormatter0 = dateTimeFormatterBuilder0.toFormatter();\n    dateTimeFormatter0.getPivotYear();\n}",
    "testName" : "test077979"
  },
  "test1181689" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1181689() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();\n    Locale locale0 = Locale.TRADITIONAL_CHINESE;\n    ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();\n    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 275, false);\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test1181689"
  },
  "test015241" : {
    "methodSignature" : "public Integer getPivotYear()",
    "methodName" : "getPivotYear",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test015241() throws Throwable {\n    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(\"&ac/\");\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);\n    Locale locale0 = Locale.GERMAN;\n    Integer integer0 = new Integer(0);\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1000L, lenientChronology0, locale0, integer0, 16);\n    dateTimeParserBucket0.getPivotYear();\n}",
    "testName" : "test015241"
  },
  "test015240" : {
    "methodSignature" : "public Integer getOffsetInteger()",
    "methodName" : "getOffsetInteger",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test015240() throws Throwable {\n    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(\"&ac/\");\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);\n    Locale locale0 = Locale.GERMAN;\n    Integer integer0 = new Integer(0);\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1000L, lenientChronology0, locale0, integer0, 16);\n    dateTimeParserBucket0.getOffsetInteger();\n}",
    "testName" : "test015240"
  },
  "test077970" : {
    "methodSignature" : "public DateTimeFormatterBuilder append(DateTimeParser parser)",
    "methodName" : "append",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077970() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(3600000, 1584, 3600000);\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append((DateTimeParser) dateTimeFormat_StyleFormatter0);\n}",
    "testName" : "test077970"
  },
  "test1171636" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1171636() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test1171636"
  },
  "test065854" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test065854() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFraction(dateTimeFieldType0, 1000, 100);\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test065854"
  },
  "test1171635" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1171635() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test1171635"
  },
  "test065853" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test065853() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFraction(dateTimeFieldType0, 1000, 100);\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test065853"
  },
  "test015239" : {
    "methodSignature" : "public int getOffset()",
    "methodName" : "getOffset",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test015239() throws Throwable {\n    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(\"&ac/\");\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);\n    Locale locale0 = Locale.GERMAN;\n    Integer integer0 = new Integer(0);\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1000L, lenientChronology0, locale0, integer0, 16);\n    dateTimeParserBucket0.getOffset();\n}",
    "testName" : "test015239"
  },
  "test1171637" : {
    "methodSignature" : "public static EthiopicChronology getInstanceUTC()",
    "methodName" : "getInstanceUTC",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1171637() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();\n}",
    "testName" : "test1171637"
  },
  "test1802268" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendSecondOfDay(int minDigits)",
    "methodName" : "appendSecondOfDay",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1802268() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    dateTimeFormatterBuilder0.appendSecondOfDay((-286));\n}",
    "testName" : "test1802268"
  },
  "test1171634" : {
    "methodSignature" : "public static DateTimeFieldType minuteOfDay()",
    "methodName" : "minuteOfDay",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1171634() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();\n}",
    "testName" : "test1171634"
  },
  "test1492198" : {
    "methodSignature" : "public DateTimeParser toParser()",
    "methodName" : "toParser",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1492198() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    dateTimeFormatterBuilder0.toParser();\n}",
    "testName" : "test1492198"
  },
  "test028454" : {
    "methodSignature" : "public static GregorianChronology getInstance()",
    "methodName" : "getInstance",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test028454() throws Throwable {\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);\n    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();\n    FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);\n    ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);\n    Charset charset0 = Charset.defaultCharset();\n    CharsetEncoder charsetEncoder0 = charset0.newEncoder();\n    OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);\n    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();\n}",
    "testName" : "test028454"
  },
  "test031619" : {
    "methodSignature" : "public int getYear()",
    "methodName" : "getYear",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test031619() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();\n    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);\n    StringBuffer stringBuffer0 = new StringBuffer(\"56YZ0]vD<'tk9?n0L\");\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);\n    YearMonth yearMonth0 = new YearMonth(dateTimeZone0);\n    Locale locale0 = Locale.TAIWAN;\n    dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, (ReadablePartial) yearMonth0, locale0);\n    yearMonth0.getYear();\n}",
    "testName" : "test031619"
  },
  "test065850" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendFraction(DateTimeFieldType fieldType, int minDigits, int maxDigits)",
    "methodName" : "appendFraction",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test065850() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFraction(dateTimeFieldType0, 1000, 100);\n}",
    "testName" : "test065850"
  },
  "test0931100" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0931100() throws Throwable {\n    LinkedList<Object> linkedList0 = new LinkedList<Object>();\n    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);\n    MockFileWriter mockFileWriter0 = new MockFileWriter(\"org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter\", false);\n    MockDate mockDate0 = new MockDate(26, 2, (-131), 1440, 26, (-131));\n    LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);\n    localDate0.size();\n}",
    "testName" : "test0931100"
  },
  "test031618" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test031618() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();\n    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);\n    StringBuffer stringBuffer0 = new StringBuffer(\"56YZ0]vD<'tk9?n0L\");\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);\n    YearMonth yearMonth0 = new YearMonth(dateTimeZone0);\n    Locale locale0 = Locale.TAIWAN;\n    dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, (ReadablePartial) yearMonth0, locale0);\n    dateTimeZone0.getID();\n}",
    "testName" : "test031618"
  },
  "test1161608" : {
    "methodSignature" : "public Partial(DateTimeFieldType type, int value, Chronology chronology)",
    "methodName" : "Partial",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1161608() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();\n    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2552, true);\n    StringBuffer stringBuffer0 = new StringBuffer();\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();\n    Partial partial0 = new Partial(dateTimeFieldType0, 2552, islamicChronology0);\n}",
    "testName" : "test1161608"
  },
  "test031617" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test031617() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();\n    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);\n    StringBuffer stringBuffer0 = new StringBuffer(\"56YZ0]vD<'tk9?n0L\");\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);\n    YearMonth yearMonth0 = new YearMonth(dateTimeZone0);\n    Locale locale0 = Locale.TAIWAN;\n    dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, (ReadablePartial) yearMonth0, locale0);\n    dateTimeZone0.toString();\n}",
    "testName" : "test031617"
  },
  "test1161606" : {
    "methodSignature" : "public static IslamicChronology getInstance()",
    "methodName" : "getInstance",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1161606() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();\n    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2552, true);\n    StringBuffer stringBuffer0 = new StringBuffer();\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();\n}",
    "testName" : "test1161606"
  },
  "test1181677" : {
    "methodSignature" : "public static DateTimeFieldType dayOfMonth()",
    "methodName" : "dayOfMonth",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1181677() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();\n}",
    "testName" : "test1181677"
  },
  "test055813" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendMillisOfSecond(int minDigits)",
    "methodName" : "appendMillisOfSecond",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055813() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    dateTimeFormatterBuilder0.appendMillisOfSecond((-504));\n}",
    "testName" : "test055813"
  },
  "test0891019" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendLiteral(char c)",
    "methodName" : "appendLiteral",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0891019() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendLiteral(';');\n}",
    "testName" : "test0891019"
  },
  "test1752263" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendMillisOfDay(int minDigits)",
    "methodName" : "appendMillisOfDay",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1752263() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    dateTimeFormatterBuilder0.appendMillisOfDay((-1));\n}",
    "testName" : "test1752263"
  },
  "test031621" : {
    "methodSignature" : "public int getMonthOfYear()",
    "methodName" : "getMonthOfYear",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test031621() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();\n    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);\n    StringBuffer stringBuffer0 = new StringBuffer(\"56YZ0]vD<'tk9?n0L\");\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);\n    YearMonth yearMonth0 = new YearMonth(dateTimeZone0);\n    Locale locale0 = Locale.TAIWAN;\n    dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, (ReadablePartial) yearMonth0, locale0);\n    yearMonth0.getMonthOfYear();\n}",
    "testName" : "test031621"
  },
  "test1161600" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1161600() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();\n    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2552, true);\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test1161600"
  },
  "test1181679" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1181679() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test1181679"
  },
  "test031620" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test031620() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();\n    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);\n    StringBuffer stringBuffer0 = new StringBuffer(\"56YZ0]vD<'tk9?n0L\");\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);\n    YearMonth yearMonth0 = new YearMonth(dateTimeZone0);\n    Locale locale0 = Locale.TAIWAN;\n    dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, (ReadablePartial) yearMonth0, locale0);\n    yearMonth0.size();\n}",
    "testName" : "test031620"
  },
  "test1181678" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1181678() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test1181678"
  },
  "test077980" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077980() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(3600000, 1584, 3600000);\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append((DateTimeParser) dateTimeFormat_StyleFormatter0);\n    DateTimeFormatter dateTimeFormatter0 = dateTimeFormatterBuilder0.toFormatter();\n    dateTimeFormatter0.getDefaultYear();\n}",
    "testName" : "test077980"
  },
  "test015232" : {
    "methodSignature" : "public DateTimeParserBucket(long instantLocal, Chronology chrono, Locale locale, Integer pivotYear, int defaultYear)",
    "methodName" : "DateTimeParserBucket",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test015232() throws Throwable {\n    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(\"&ac/\");\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);\n    Locale locale0 = Locale.GERMAN;\n    Integer integer0 = new Integer(0);\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1000L, lenientChronology0, locale0, integer0, 16);\n}",
    "testName" : "test015232"
  },
  "test065849" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test065849() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test065849"
  },
  "test077981" : {
    "methodSignature" : "public boolean isParser()",
    "methodName" : "isParser",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077981() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(3600000, 1584, 3600000);\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append((DateTimeParser) dateTimeFormat_StyleFormatter0);\n    DateTimeFormatter dateTimeFormatter0 = dateTimeFormatterBuilder0.toFormatter();\n    dateTimeFormatter0.isParser();\n}",
    "testName" : "test077981"
  },
  "test066857" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066857() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test066857"
  },
  "test066858" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066858() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test066858"
  },
  "test066859" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendShortText(DateTimeFieldType fieldType)",
    "methodName" : "appendShortText",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066859() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendShortText(dateTimeFieldType0);\n}",
    "testName" : "test066859"
  },
  "test1031320" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1031320() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(\"UTC(-`)=,c{y\", \"--ct(=6mk5'v\", false, 60000, 60000);\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);\n    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);\n    dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) charArrayWriter0, (-1291L), (Chronology) gJChronology0, 4110, dateTimeZone0, (Locale) null);\n    dateTimeZone0.toString();\n}",
    "testName" : "test1031320"
  },
  "test1171665" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1171665() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();\n    Locale locale0 = Locale.ITALIAN;\n    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), true);\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2889L), ethiopicChronology0, locale0, (Integer) 1, (-745));\n    int int0 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, \"US/Central\", 214);\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test1171665"
  },
  "test1252035" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1252035() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 11, true);\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    Locale locale0 = Locale.ENGLISH;\n    Integer integer0 = new Integer(11);\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(11, gJChronology0, locale0, integer0, 1103);\n    int int0 = dateTimeFormatterBuilder_UnpaddedNumber0.parseInto(dateTimeParserBucket0, \"--ct(=6mk5'v\", 1103);\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test1252035"
  },
  "test015222" : {
    "methodSignature" : "public static LenientChronology getInstance(Chronology base)",
    "methodName" : "getInstance",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test015222() throws Throwable {\n    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(\"&ac/\");\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);\n}",
    "testName" : "test015222"
  },
  "test1171664" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1171664() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();\n    Locale locale0 = Locale.ITALIAN;\n    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), true);\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2889L), ethiopicChronology0, locale0, (Integer) 1, (-745));\n    int int0 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, \"US/Central\", 214);\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test1171664"
  },
  "test066856" : {
    "methodSignature" : "public static DateTimeFieldType minuteOfDay()",
    "methodName" : "minuteOfDay",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066856() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();\n}",
    "testName" : "test066856"
  },
  "test1252034" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1252034() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 11, true);\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    Locale locale0 = Locale.ENGLISH;\n    Integer integer0 = new Integer(11);\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(11, gJChronology0, locale0, integer0, 1103);\n    int int0 = dateTimeFormatterBuilder_UnpaddedNumber0.parseInto(dateTimeParserBucket0, \"--ct(=6mk5'v\", 1103);\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test1252034"
  },
  "test1171661" : {
    "methodSignature" : "public Integer getOffsetInteger()",
    "methodName" : "getOffsetInteger",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1171661() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();\n    Locale locale0 = Locale.ITALIAN;\n    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), true);\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2889L), ethiopicChronology0, locale0, (Integer) 1, (-745));\n    dateTimeParserBucket0.getOffsetInteger();\n}",
    "testName" : "test1171661"
  },
  "test1171660" : {
    "methodSignature" : "public int getOffset()",
    "methodName" : "getOffset",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1171660() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();\n    Locale locale0 = Locale.ITALIAN;\n    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), true);\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2889L), ethiopicChronology0, locale0, (Integer) 1, (-745));\n    dateTimeParserBucket0.getOffset();\n}",
    "testName" : "test1171660"
  },
  "test028464" : {
    "methodSignature" : "public DateTimeParserBucket(long instantLocal, Chronology chrono, Locale locale, Integer pivotYear, int defaultYear)",
    "methodName" : "DateTimeParserBucket",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test028464() throws Throwable {\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);\n    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();\n    FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);\n    ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);\n    Charset charset0 = Charset.defaultCharset();\n    CharsetEncoder charsetEncoder0 = charset0.newEncoder();\n    OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);\n    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();\n    Locale locale0 = Locale.ITALY;\n    Integer integer0 = new Integer((-1816));\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gregorianChronology0, locale0, integer0, 0);\n}",
    "testName" : "test028464"
  },
  "test056815" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendHourOfHalfday(int minDigits)",
    "methodName" : "appendHourOfHalfday",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test056815() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    dateTimeFormatterBuilder0.appendHourOfHalfday((-674));\n}",
    "testName" : "test056815"
  },
  "test1161612" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1161612() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();\n    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2552, true);\n    StringBuffer stringBuffer0 = new StringBuffer();\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();\n    Partial partial0 = new Partial(dateTimeFieldType0, 2552, islamicChronology0);\n    partial0.size();\n}",
    "testName" : "test1161612"
  },
  "test1161611" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1161611() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();\n    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2552, true);\n    StringBuffer stringBuffer0 = new StringBuffer();\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();\n    Partial partial0 = new Partial(dateTimeFieldType0, 2552, islamicChronology0);\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test1161611"
  },
  "test1161610" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1161610() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();\n    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2552, true);\n    StringBuffer stringBuffer0 = new StringBuffer();\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();\n    Partial partial0 = new Partial(dateTimeFieldType0, 2552, islamicChronology0);\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test1161610"
  },
  "test015221" : {
    "methodSignature" : "public static GJChronology getInstance()",
    "methodName" : "getInstance",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test015221() throws Throwable {\n    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(\"&ac/\");\n    GJChronology gJChronology0 = GJChronology.getInstance();\n}",
    "testName" : "test015221"
  },
  "test1171659" : {
    "methodSignature" : "public Integer getPivotYear()",
    "methodName" : "getPivotYear",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1171659() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();\n    Locale locale0 = Locale.ITALIAN;\n    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), true);\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2889L), ethiopicChronology0, locale0, (Integer) 1, (-745));\n    dateTimeParserBucket0.getPivotYear();\n}",
    "testName" : "test1171659"
  },
  "test1252046" : {
    "methodSignature" : "public Integer getOffsetInteger()",
    "methodName" : "getOffsetInteger",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1252046() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 11, true);\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    Locale locale0 = Locale.ENGLISH;\n    Integer integer0 = new Integer(11);\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(11, gJChronology0, locale0, integer0, 1103);\n    int int0 = dateTimeFormatterBuilder_UnpaddedNumber0.parseInto(dateTimeParserBucket0, \"--ct(=6mk5'v\", 1103);\n    dateTimeParserBucket0.getOffsetInteger();\n}",
    "testName" : "test1252046"
  },
  "test1252044" : {
    "methodSignature" : "public int getOffset()",
    "methodName" : "getOffset",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1252044() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 11, true);\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    Locale locale0 = Locale.ENGLISH;\n    Integer integer0 = new Integer(11);\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(11, gJChronology0, locale0, integer0, 1103);\n    int int0 = dateTimeFormatterBuilder_UnpaddedNumber0.parseInto(dateTimeParserBucket0, \"--ct(=6mk5'v\", 1103);\n    dateTimeParserBucket0.getOffset();\n}",
    "testName" : "test1252044"
  },
  "test1252045" : {
    "methodSignature" : "public Integer getPivotYear()",
    "methodName" : "getPivotYear",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1252045() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 11, true);\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    Locale locale0 = Locale.ENGLISH;\n    Integer integer0 = new Integer(11);\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(11, gJChronology0, locale0, integer0, 1103);\n    int int0 = dateTimeFormatterBuilder_UnpaddedNumber0.parseInto(dateTimeParserBucket0, \"--ct(=6mk5'v\", 1103);\n    dateTimeParserBucket0.getPivotYear();\n}",
    "testName" : "test1252045"
  },
  "test028473" : {
    "methodSignature" : "public int getOffset()",
    "methodName" : "getOffset",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test028473() throws Throwable {\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);\n    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();\n    FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);\n    ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);\n    Charset charset0 = Charset.defaultCharset();\n    CharsetEncoder charsetEncoder0 = charset0.newEncoder();\n    OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);\n    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();\n    Locale locale0 = Locale.ITALY;\n    Integer integer0 = new Integer((-1816));\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gregorianChronology0, locale0, integer0, 0);\n    dateTimeParserBucket0.getOffset();\n}",
    "testName" : "test028473"
  },
  "test003110" : {
    "methodSignature" : "public Integer getOffsetInteger()",
    "methodName" : "getOffsetInteger",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test003110() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    Locale locale0 = Locale.CHINA;\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();\n    Integer integer0 = new Integer((-1027));\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(100, gJChronology0, locale0, integer0, 1440);\n    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);\n    int int0 = dateTimeFormatterBuilder_TextField0.parseInto(dateTimeParserBucket0, \"org.joda.time.format.DateTimeFormatterBuilder\", 1440);\n    dateTimeParserBucket0.getOffsetInteger();\n}",
    "testName" : "test003110"
  },
  "test027385" : {
    "methodSignature" : "public static DateTimeFieldType halfdayOfDay()",
    "methodName" : "halfdayOfDay",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test027385() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();\n}",
    "testName" : "test027385"
  },
  "test028474" : {
    "methodSignature" : "public DateTimeZone getZone()",
    "methodName" : "getZone",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test028474() throws Throwable {\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);\n    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();\n    FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);\n    ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);\n    Charset charset0 = Charset.defaultCharset();\n    CharsetEncoder charsetEncoder0 = charset0.newEncoder();\n    OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);\n    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();\n    Locale locale0 = Locale.ITALY;\n    Integer integer0 = new Integer((-1816));\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gregorianChronology0, locale0, integer0, 0);\n    DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();\n}",
    "testName" : "test028474"
  },
  "test027386" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test027386() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test027386"
  },
  "test027387" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test027387() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test027387"
  },
  "test1171651" : {
    "methodSignature" : "public DateTimeParserBucket(long instantLocal, Chronology chrono, Locale locale, Integer pivotYear, int defaultYear)",
    "methodName" : "DateTimeParserBucket",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1171651() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();\n    Locale locale0 = Locale.ITALIAN;\n    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), true);\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2889L), ethiopicChronology0, locale0, (Integer) 1, (-745));\n}",
    "testName" : "test1171651"
  },
  "test028471" : {
    "methodSignature" : "public Integer getOffsetInteger()",
    "methodName" : "getOffsetInteger",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test028471() throws Throwable {\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);\n    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();\n    FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);\n    ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);\n    Charset charset0 = Charset.defaultCharset();\n    CharsetEncoder charsetEncoder0 = charset0.newEncoder();\n    OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);\n    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();\n    Locale locale0 = Locale.ITALY;\n    Integer integer0 = new Integer((-1816));\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gregorianChronology0, locale0, integer0, 0);\n    dateTimeParserBucket0.getOffsetInteger();\n}",
    "testName" : "test028471"
  },
  "test028472" : {
    "methodSignature" : "public Integer getPivotYear()",
    "methodName" : "getPivotYear",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test028472() throws Throwable {\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);\n    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();\n    FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);\n    ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);\n    Charset charset0 = Charset.defaultCharset();\n    CharsetEncoder charsetEncoder0 = charset0.newEncoder();\n    OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);\n    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();\n    Locale locale0 = Locale.ITALY;\n    Integer integer0 = new Integer((-1816));\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gregorianChronology0, locale0, integer0, 0);\n    dateTimeParserBucket0.getPivotYear();\n}",
    "testName" : "test028472"
  },
  "test1211782" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1211782() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();\n    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2300, false);\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test1211782"
  },
  "test1322115" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1322115() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test1322115"
  },
  "test1161627" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1161627() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();\n    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2552, true);\n    StringBuffer stringBuffer0 = new StringBuffer();\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();\n    Partial partial0 = new Partial(dateTimeFieldType0, 2552, islamicChronology0);\n    Locale locale0 = Locale.FRANCE;\n    dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, (ReadablePartial) partial0, locale0);\n    partial0.size();\n}",
    "testName" : "test1161627"
  },
  "test1211783" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1211783() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();\n    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2300, false);\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test1211783"
  },
  "test1322114" : {
    "methodSignature" : "public static DateTimeFieldType secondOfDay()",
    "methodName" : "secondOfDay",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1322114() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();\n}",
    "testName" : "test1322114"
  },
  "test1322117" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendFixedSignedDecimal(DateTimeFieldType fieldType, int numDigits)",
    "methodName" : "appendFixedSignedDecimal",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1322117() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();\n    dateTimeFormatterBuilder0.appendFixedSignedDecimal(dateTimeFieldType0, 0);\n}",
    "testName" : "test1322117"
  },
  "test1322116" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1322116() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test1322116"
  },
  "test027389" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test027389() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 84, false);\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test027389"
  },
  "test030556" : {
    "methodSignature" : "public static EthiopicChronology getInstance()",
    "methodName" : "getInstance",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test030556() throws Throwable {\n    HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();\n    DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-403), hashMap0);\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();\n}",
    "testName" : "test030556"
  },
  "test003111" : {
    "methodSignature" : "public int getOffset()",
    "methodName" : "getOffset",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test003111() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    Locale locale0 = Locale.CHINA;\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();\n    Integer integer0 = new Integer((-1027));\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(100, gJChronology0, locale0, integer0, 1440);\n    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);\n    int int0 = dateTimeFormatterBuilder_TextField0.parseInto(dateTimeParserBucket0, \"org.joda.time.format.DateTimeFormatterBuilder\", 1440);\n    dateTimeParserBucket0.getOffset();\n}",
    "testName" : "test003111"
  },
  "test1161622" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1161622() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();\n    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2552, true);\n    StringBuffer stringBuffer0 = new StringBuffer();\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();\n    Partial partial0 = new Partial(dateTimeFieldType0, 2552, islamicChronology0);\n    Locale locale0 = Locale.FRANCE;\n    dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, (ReadablePartial) partial0, locale0);\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test1161622"
  },
  "test1161621" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1161621() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();\n    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2552, true);\n    StringBuffer stringBuffer0 = new StringBuffer();\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();\n    Partial partial0 = new Partial(dateTimeFieldType0, 2552, islamicChronology0);\n    Locale locale0 = Locale.FRANCE;\n    dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, (ReadablePartial) partial0, locale0);\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test1161621"
  },
  "test1181690" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1181690() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();\n    Locale locale0 = Locale.TRADITIONAL_CHINESE;\n    ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();\n    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 275, false);\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test1181690"
  },
  "test1181695" : {
    "methodSignature" : "public DateTimeParserBucket(long instantLocal, Chronology chrono, Locale locale, Integer pivotYear, int defaultYear)",
    "methodName" : "DateTimeParserBucket",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1181695() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();\n    Locale locale0 = Locale.TRADITIONAL_CHINESE;\n    ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();\n    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 275, false);\n    Integer integer0 = new Integer(275);\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(10, iSOChronology0, locale0, integer0, 1847);\n}",
    "testName" : "test1181695"
  },
  "test1221870" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1221870() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);\n    MockFile mockFile0 = new MockFile(\"US/MountainvRA@$:X}66xJ\", \"B@\\\"*wvnr^%9/\");\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();\n    LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);\n    YearMonth yearMonth0 = new YearMonth((long) 0, (Chronology) lenientChronology0);\n    Locale locale0 = Locale.KOREA;\n    dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) mockPrintWriter0, (ReadablePartial) yearMonth0, locale0);\n    yearMonth0.size();\n}",
    "testName" : "test1221870"
  },
  "test1252013" : {
    "methodSignature" : "public static GJChronology getInstance()",
    "methodName" : "getInstance",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1252013() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 11, true);\n    GJChronology gJChronology0 = GJChronology.getInstance();\n}",
    "testName" : "test1252013"
  },
  "test1682255" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendClockhourOfDay(int minDigits)",
    "methodName" : "appendClockhourOfDay",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1682255() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    dateTimeFormatterBuilder0.appendClockhourOfDay((-1988));\n}",
    "testName" : "test1682255"
  },
  "test076959" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test076959() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    Calendar calendar0 = MockCalendar.getInstance();\n    LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);\n    Partial partial0 = new Partial(localDateTime0);\n    DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append(dateTimeFormatter0);\n    localDateTime0.size();\n}",
    "testName" : "test076959"
  },
  "test076964" : {
    "methodSignature" : "public boolean isParser()",
    "methodName" : "isParser",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test076964() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    Calendar calendar0 = MockCalendar.getInstance();\n    LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);\n    Partial partial0 = new Partial(localDateTime0);\n    DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append(dateTimeFormatter0);\n    dateTimeFormatter0.isParser();\n}",
    "testName" : "test076964"
  },
  "test076965" : {
    "methodSignature" : "public Integer getPivotYear()",
    "methodName" : "getPivotYear",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test076965() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    Calendar calendar0 = MockCalendar.getInstance();\n    LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);\n    Partial partial0 = new Partial(localDateTime0);\n    DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append(dateTimeFormatter0);\n    dateTimeFormatter0.getPivotYear();\n}",
    "testName" : "test076965"
  },
  "test076962" : {
    "methodSignature" : "public boolean isPrinter()",
    "methodName" : "isPrinter",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test076962() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    Calendar calendar0 = MockCalendar.getInstance();\n    LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);\n    Partial partial0 = new Partial(localDateTime0);\n    DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append(dateTimeFormatter0);\n    dateTimeFormatter0.isPrinter();\n}",
    "testName" : "test076962"
  },
  "test076963" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test076963() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    Calendar calendar0 = MockCalendar.getInstance();\n    LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);\n    Partial partial0 = new Partial(localDateTime0);\n    DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append(dateTimeFormatter0);\n    dateTimeFormatter0.isOffsetParsed();\n}",
    "testName" : "test076963"
  },
  "test1221869" : {
    "methodSignature" : "public int getYear()",
    "methodName" : "getYear",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1221869() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);\n    MockFile mockFile0 = new MockFile(\"US/MountainvRA@$:X}66xJ\", \"B@\\\"*wvnr^%9/\");\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();\n    LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);\n    YearMonth yearMonth0 = new YearMonth((long) 0, (Chronology) lenientChronology0);\n    Locale locale0 = Locale.KOREA;\n    dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) mockPrintWriter0, (ReadablePartial) yearMonth0, locale0);\n    yearMonth0.getYear();\n}",
    "testName" : "test1221869"
  },
  "test054811" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendMinuteOfDay(int minDigits)",
    "methodName" : "appendMinuteOfDay",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test054811() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    dateTimeFormatterBuilder0.appendMinuteOfDay((-2801));\n}",
    "testName" : "test054811"
  },
  "test076960" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test076960() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    Calendar calendar0 = MockCalendar.getInstance();\n    LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);\n    Partial partial0 = new Partial(localDateTime0);\n    DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append(dateTimeFormatter0);\n    partial0.size();\n}",
    "testName" : "test076960"
  },
  "test076961" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test076961() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    Calendar calendar0 = MockCalendar.getInstance();\n    LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);\n    Partial partial0 = new Partial(localDateTime0);\n    DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append(dateTimeFormatter0);\n    dateTimeFormatter0.getDefaultYear();\n}",
    "testName" : "test076961"
  },
  "test064843" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test064843() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test064843"
  },
  "test064842" : {
    "methodSignature" : "public static DateTimeFieldType minuteOfHour()",
    "methodName" : "minuteOfHour",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test064842() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();\n}",
    "testName" : "test064842"
  },
  "test040773" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendFractionOfDay(int minDigits, int maxDigits)",
    "methodName" : "appendFractionOfDay",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test040773() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfDay(366, 366);\n}",
    "testName" : "test040773"
  },
  "test0881017" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendDayOfYear(int minDigits)",
    "methodName" : "appendDayOfYear",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0881017() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    dateTimeFormatterBuilder0.appendDayOfYear((-2001));\n}",
    "testName" : "test0881017"
  },
  "test1171676" : {
    "methodSignature" : "public Integer getOffsetInteger()",
    "methodName" : "getOffsetInteger",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1171676() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();\n    Locale locale0 = Locale.ITALIAN;\n    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), true);\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2889L), ethiopicChronology0, locale0, (Integer) 1, (-745));\n    int int0 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, \"US/Central\", 214);\n    dateTimeParserBucket0.getOffsetInteger();\n}",
    "testName" : "test1171676"
  },
  "test1171675" : {
    "methodSignature" : "public int getOffset()",
    "methodName" : "getOffset",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1171675() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();\n    Locale locale0 = Locale.ITALIAN;\n    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), true);\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2889L), ethiopicChronology0, locale0, (Integer) 1, (-745));\n    int int0 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, \"US/Central\", 214);\n    dateTimeParserBucket0.getOffset();\n}",
    "testName" : "test1171675"
  },
  "test064845" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendFraction(DateTimeFieldType fieldType, int minDigits, int maxDigits)",
    "methodName" : "appendFraction",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test064845() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();\n    dateTimeFormatterBuilder0.appendFraction(dateTimeFieldType0, (-594), (-594));\n}",
    "testName" : "test064845"
  },
  "test064844" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test064844() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test064844"
  },
  "test1252023" : {
    "methodSignature" : "public DateTimeParserBucket(long instantLocal, Chronology chrono, Locale locale, Integer pivotYear, int defaultYear)",
    "methodName" : "DateTimeParserBucket",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1252023() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 11, true);\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    Locale locale0 = Locale.ENGLISH;\n    Integer integer0 = new Integer(11);\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(11, gJChronology0, locale0, integer0, 1103);\n}",
    "testName" : "test1252023"
  },
  "test004141" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test004141() throws Throwable {\n    StringBuffer stringBuffer0 = new StringBuffer();\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    Locale locale0 = Locale.FRANCE;\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();\n    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 60, false);\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();\n    dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, 1757L, (Chronology) buddhistChronology0, 60, dateTimeZone0, locale0);\n    dateTimeZone0.toString();\n}",
    "testName" : "test004141"
  },
  "test1171674" : {
    "methodSignature" : "public Integer getPivotYear()",
    "methodName" : "getPivotYear",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1171674() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();\n    Locale locale0 = Locale.ITALIAN;\n    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), true);\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2889L), ethiopicChronology0, locale0, (Integer) 1, (-745));\n    int int0 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, \"US/Central\", 214);\n    dateTimeParserBucket0.getPivotYear();\n}",
    "testName" : "test1171674"
  },
  "test004140" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test004140() throws Throwable {\n    StringBuffer stringBuffer0 = new StringBuffer();\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    Locale locale0 = Locale.FRANCE;\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();\n    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 60, false);\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();\n    dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, 1757L, (Chronology) buddhistChronology0, 60, dateTimeZone0, locale0);\n    dateTimeZone0.getID();\n}",
    "testName" : "test004140"
  },
  "test004149" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test004149() throws Throwable {\n    StringBuffer stringBuffer0 = new StringBuffer();\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    Locale locale0 = Locale.FRANCE;\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();\n    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 60, false);\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();\n    dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, 1757L, (Chronology) buddhistChronology0, 60, dateTimeZone0, locale0);\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test004149"
  },
  "test004148" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test004148() throws Throwable {\n    StringBuffer stringBuffer0 = new StringBuffer();\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    Locale locale0 = Locale.FRANCE;\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();\n    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 60, false);\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();\n    dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, 1757L, (Chronology) buddhistChronology0, 60, dateTimeZone0, locale0);\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test004148"
  },
  "test1252031" : {
    "methodSignature" : "public Integer getPivotYear()",
    "methodName" : "getPivotYear",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1252031() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 11, true);\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    Locale locale0 = Locale.ENGLISH;\n    Integer integer0 = new Integer(11);\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(11, gJChronology0, locale0, integer0, 1103);\n    dateTimeParserBucket0.getPivotYear();\n}",
    "testName" : "test1252031"
  },
  "test1742262" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendTimeZoneOffset(String zeroOffsetPrintText, String zeroOffsetParseText, boolean showSeparators, int minFields, int maxFields)",
    "methodName" : "appendTimeZoneOffset",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1742262() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    dateTimeFormatterBuilder0.appendTimeZoneOffset(\"f\", \"pVYM$2rx\", false, 719482, (-945));\n}",
    "testName" : "test1742262"
  },
  "test1252032" : {
    "methodSignature" : "public Integer getOffsetInteger()",
    "methodName" : "getOffsetInteger",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1252032() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 11, true);\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    Locale locale0 = Locale.ENGLISH;\n    Integer integer0 = new Integer(11);\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(11, gJChronology0, locale0, integer0, 1103);\n    dateTimeParserBucket0.getOffsetInteger();\n}",
    "testName" : "test1252032"
  },
  "test1252030" : {
    "methodSignature" : "public int getOffset()",
    "methodName" : "getOffset",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1252030() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 11, true);\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    Locale locale0 = Locale.ENGLISH;\n    Integer integer0 = new Integer(11);\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(11, gJChronology0, locale0, integer0, 1103);\n    dateTimeParserBucket0.getOffset();\n}",
    "testName" : "test1252030"
  },
  "test029508" : {
    "methodSignature" : "public static DateTimeFieldType weekyearOfCentury()",
    "methodName" : "weekyearOfCentury",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test029508() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();\n}",
    "testName" : "test029508"
  },
  "test1221871" : {
    "methodSignature" : "public int getMonthOfYear()",
    "methodName" : "getMonthOfYear",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1221871() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);\n    MockFile mockFile0 = new MockFile(\"US/MountainvRA@$:X}66xJ\", \"B@\\\"*wvnr^%9/\");\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();\n    LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);\n    YearMonth yearMonth0 = new YearMonth((long) 0, (Chronology) lenientChronology0);\n    Locale locale0 = Locale.KOREA;\n    dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) mockPrintWriter0, (ReadablePartial) yearMonth0, locale0);\n    yearMonth0.getMonthOfYear();\n}",
    "testName" : "test1221871"
  },
  "test029509" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test029509() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test029509"
  },
  "test1972292" : {
    "methodSignature" : "public Instant(Object instant)",
    "methodName" : "Instant",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1972292() throws Throwable {\n    Instant instant0 = null;\n    instant0 = new Instant(\"kFdI~^pqIY}sv\");\n}",
    "testName" : "test1972292"
  },
  "test065848" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test065848() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test065848"
  },
  "test065847" : {
    "methodSignature" : "public static DateTimeFieldType secondOfMinute()",
    "methodName" : "secondOfMinute",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test065847() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();\n}",
    "testName" : "test065847"
  },
  "test00271" : {
    "methodSignature" : "public static Instant parse(String str, DateTimeFormatter formatter)",
    "methodName" : "parse",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00271() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfHalfday(0);\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = (DateTimeFormatterBuilder.UnpaddedNumber) dateTimeFormatterBuilder1.toPrinter();\n    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[5];\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 0);\n    dateTimeParserArray0[1] = (DateTimeParser) dateTimeFormatterBuilder_Fraction0;\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeParserArray0[1]);\n    Instant.parse(\"coIRk'*JYu\", dateTimeFormatter0);\n}",
    "testName" : "test00271"
  },
  "test00392" : {
    "methodSignature" : "public Integer getPivotYear()",
    "methodName" : "getPivotYear",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00392() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    Locale locale0 = Locale.CHINA;\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();\n    Integer integer0 = new Integer((-1027));\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(100, gJChronology0, locale0, integer0, 1440);\n    dateTimeParserBucket0.getPivotYear();\n}",
    "testName" : "test00392"
  },
  "test004132" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test004132() throws Throwable {\n    StringBuffer stringBuffer0 = new StringBuffer();\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    Locale locale0 = Locale.FRANCE;\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();\n    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 60, false);\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test004132"
  },
  "test076939" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test076939() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    Calendar calendar0 = MockCalendar.getInstance();\n    LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);\n    Partial partial0 = new Partial(localDateTime0);\n    partial0.size();\n}",
    "testName" : "test076939"
  },
  "test00393" : {
    "methodSignature" : "public Integer getOffsetInteger()",
    "methodName" : "getOffsetInteger",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00393() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    Locale locale0 = Locale.CHINA;\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();\n    Integer integer0 = new Integer((-1027));\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(100, gJChronology0, locale0, integer0, 1440);\n    dateTimeParserBucket0.getOffsetInteger();\n}",
    "testName" : "test00393"
  },
  "test00270" : {
    "methodSignature" : "public Integer getPivotYear()",
    "methodName" : "getPivotYear",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00270() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfHalfday(0);\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = (DateTimeFormatterBuilder.UnpaddedNumber) dateTimeFormatterBuilder1.toPrinter();\n    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[5];\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 0);\n    dateTimeParserArray0[1] = (DateTimeParser) dateTimeFormatterBuilder_Fraction0;\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeParserArray0[1]);\n    dateTimeFormatter0.getPivotYear();\n}",
    "testName" : "test00270"
  },
  "test004131" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test004131() throws Throwable {\n    StringBuffer stringBuffer0 = new StringBuffer();\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    Locale locale0 = Locale.FRANCE;\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();\n    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 60, false);\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test004131"
  },
  "test029510" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test029510() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test029510"
  },
  "test076938" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test076938() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    Calendar calendar0 = MockCalendar.getInstance();\n    LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);\n    Partial partial0 = new Partial(localDateTime0);\n    localDateTime0.size();\n}",
    "testName" : "test076938"
  },
  "test00396" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00396() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    Locale locale0 = Locale.CHINA;\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();\n    Integer integer0 = new Integer((-1027));\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(100, gJChronology0, locale0, integer0, 1440);\n    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test00396"
  },
  "test00397" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00397() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    Locale locale0 = Locale.CHINA;\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();\n    Integer integer0 = new Integer((-1027));\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(100, gJChronology0, locale0, integer0, 1440);\n    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test00397"
  },
  "test00394" : {
    "methodSignature" : "public int getOffset()",
    "methodName" : "getOffset",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00394() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    Locale locale0 = Locale.CHINA;\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();\n    Integer integer0 = new Integer((-1027));\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(100, gJChronology0, locale0, integer0, 1440);\n    dateTimeParserBucket0.getOffset();\n}",
    "testName" : "test00394"
  },
  "test00268" : {
    "methodSignature" : "public boolean isPrinter()",
    "methodName" : "isPrinter",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00268() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfHalfday(0);\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = (DateTimeFormatterBuilder.UnpaddedNumber) dateTimeFormatterBuilder1.toPrinter();\n    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[5];\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 0);\n    dateTimeParserArray0[1] = (DateTimeParser) dateTimeFormatterBuilder_Fraction0;\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeParserArray0[1]);\n    dateTimeFormatter0.isPrinter();\n}",
    "testName" : "test00268"
  },
  "test1812269" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendTimeZoneName()",
    "methodName" : "appendTimeZoneName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1812269() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneName();\n}",
    "testName" : "test1812269"
  },
  "test00269" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00269() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfHalfday(0);\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = (DateTimeFormatterBuilder.UnpaddedNumber) dateTimeFormatterBuilder1.toPrinter();\n    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[5];\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 0);\n    dateTimeParserArray0[1] = (DateTimeParser) dateTimeFormatterBuilder_Fraction0;\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeParserArray0[1]);\n    dateTimeFormatter0.getDefaultYear();\n}",
    "testName" : "test00269"
  },
  "test029516" : {
    "methodSignature" : "public static DateTimeZone forOffsetMillis(int millisOffset)",
    "methodName" : "forOffsetMillis",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test029516() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();\n    StringBuffer stringBuffer0 = new StringBuffer(85);\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);\n}",
    "testName" : "test029516"
  },
  "test00266" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00266() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfHalfday(0);\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = (DateTimeFormatterBuilder.UnpaddedNumber) dateTimeFormatterBuilder1.toPrinter();\n    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[5];\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 0);\n    dateTimeParserArray0[1] = (DateTimeParser) dateTimeFormatterBuilder_Fraction0;\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeParserArray0[1]);\n    dateTimeFormatter0.isOffsetParsed();\n}",
    "testName" : "test00266"
  },
  "test029517" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test029517() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();\n    StringBuffer stringBuffer0 = new StringBuffer(85);\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);\n    dateTimeZone0.toString();\n}",
    "testName" : "test029517"
  },
  "test076940" : {
    "methodSignature" : "public DateTimeFormatter getFormatter()",
    "methodName" : "getFormatter",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test076940() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    Calendar calendar0 = MockCalendar.getInstance();\n    LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);\n    Partial partial0 = new Partial(localDateTime0);\n    DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();\n}",
    "testName" : "test076940"
  },
  "test00267" : {
    "methodSignature" : "public boolean isParser()",
    "methodName" : "isParser",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00267() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfHalfday(0);\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = (DateTimeFormatterBuilder.UnpaddedNumber) dateTimeFormatterBuilder1.toPrinter();\n    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[5];\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 0);\n    dateTimeParserArray0[1] = (DateTimeParser) dateTimeFormatterBuilder_Fraction0;\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeParserArray0[1]);\n    dateTimeFormatter0.isParser();\n}",
    "testName" : "test00267"
  },
  "test029518" : {
    "methodSignature" : "public abstract boolean isFixed()",
    "methodName" : "isFixed",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test029518() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();\n    StringBuffer stringBuffer0 = new StringBuffer(85);\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);\n    dateTimeZone0.isFixed();\n}",
    "testName" : "test029518"
  },
  "test076946" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test076946() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    Calendar calendar0 = MockCalendar.getInstance();\n    LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);\n    Partial partial0 = new Partial(localDateTime0);\n    DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();\n    partial0.size();\n}",
    "testName" : "test076946"
  },
  "test076947" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test076947() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    Calendar calendar0 = MockCalendar.getInstance();\n    LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);\n    Partial partial0 = new Partial(localDateTime0);\n    DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();\n    dateTimeFormatter0.getDefaultYear();\n}",
    "testName" : "test076947"
  },
  "test004135" : {
    "methodSignature" : "public static BuddhistChronology getInstanceUTC()",
    "methodName" : "getInstanceUTC",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test004135() throws Throwable {\n    StringBuffer stringBuffer0 = new StringBuffer();\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    Locale locale0 = Locale.FRANCE;\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();\n    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 60, false);\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();\n}",
    "testName" : "test004135"
  },
  "test029514" : {
    "methodSignature" : "public static EthiopicChronology getInstanceUTC()",
    "methodName" : "getInstanceUTC",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test029514() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();\n    StringBuffer stringBuffer0 = new StringBuffer(85);\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();\n}",
    "testName" : "test029514"
  },
  "test076945" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test076945() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    Calendar calendar0 = MockCalendar.getInstance();\n    LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);\n    Partial partial0 = new Partial(localDateTime0);\n    DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();\n    localDateTime0.size();\n}",
    "testName" : "test076945"
  },
  "test029519" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test029519() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();\n    StringBuffer stringBuffer0 = new StringBuffer(85);\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);\n    dateTimeZone0.getID();\n}",
    "testName" : "test029519"
  },
  "test1312112" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendShortText(DateTimeFieldType fieldType)",
    "methodName" : "appendShortText",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1312112() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    dateTimeFormatterBuilder0.appendShortText((DateTimeFieldType) null);\n}",
    "testName" : "test1312112"
  },
  "test1482196" : {
    "methodSignature" : "public DateTimeFormatterBuilder append(DateTimePrinter printer, DateTimeParser[] parsers)",
    "methodName" : "append",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1482196() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    LinkedList<Object> linkedList0 = new LinkedList<Object>();\n    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);\n    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];\n    dateTimeFormatterBuilder0.append((DateTimePrinter) dateTimeFormatterBuilder_Composite0, dateTimeParserArray0);\n}",
    "testName" : "test1482196"
  },
  "test00381" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00381() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    Locale locale0 = Locale.CHINA;\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test00381"
  },
  "test00140" : {
    "methodSignature" : "public boolean canBuildPrinter()",
    "methodName" : "canBuildPrinter",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00140() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfSecond(1862, 10);\n    DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendTimeZoneOffset(\"vRAX$:X}6FxLJ\", true, 1862, 1862);\n    boolean boolean0 = dateTimeFormatterBuilder1.canBuildPrinter();\n}",
    "testName" : "test00140"
  },
  "test00382" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00382() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    Locale locale0 = Locale.CHINA;\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test00382"
  },
  "test076948" : {
    "methodSignature" : "public boolean isPrinter()",
    "methodName" : "isPrinter",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test076948() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    Calendar calendar0 = MockCalendar.getInstance();\n    LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);\n    Partial partial0 = new Partial(localDateTime0);\n    DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();\n    dateTimeFormatter0.isPrinter();\n}",
    "testName" : "test076948"
  },
  "test00380" : {
    "methodSignature" : "public static DateTimeFieldType weekOfWeekyear()",
    "methodName" : "weekOfWeekyear",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00380() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    Locale locale0 = Locale.CHINA;\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();\n}",
    "testName" : "test00380"
  },
  "test076949" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test076949() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    Calendar calendar0 = MockCalendar.getInstance();\n    LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);\n    Partial partial0 = new Partial(localDateTime0);\n    DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();\n    dateTimeFormatter0.isOffsetParsed();\n}",
    "testName" : "test076949"
  },
  "test00385" : {
    "methodSignature" : "public DateTimeParserBucket(long instantLocal, Chronology chrono, Locale locale, Integer pivotYear, int defaultYear)",
    "methodName" : "DateTimeParserBucket",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00385() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    Locale locale0 = Locale.CHINA;\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();\n    Integer integer0 = new Integer((-1027));\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(100, gJChronology0, locale0, integer0, 1440);\n}",
    "testName" : "test00385"
  },
  "test00262" : {
    "methodSignature" : "public DateTimeFormatter(DateTimePrinter printer, DateTimeParser parser)",
    "methodName" : "DateTimeFormatter",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00262() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfHalfday(0);\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = (DateTimeFormatterBuilder.UnpaddedNumber) dateTimeFormatterBuilder1.toPrinter();\n    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[5];\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 0);\n    dateTimeParserArray0[1] = (DateTimeParser) dateTimeFormatterBuilder_Fraction0;\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeParserArray0[1]);\n}",
    "testName" : "test00262"
  },
  "test1252009" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1252009() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 11, true);\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test1252009"
  },
  "test004129" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test004129() throws Throwable {\n    StringBuffer stringBuffer0 = new StringBuffer();\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    Locale locale0 = Locale.FRANCE;\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test004129"
  },
  "test1262047" : {
    "methodSignature" : "public static MonthDay parse(String str)",
    "methodName" : "parse",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1262047() throws Throwable {\n    MonthDay.parse(\"fVct(=6MK5'V\");\n}",
    "testName" : "test1262047"
  },
  "test00258" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00258() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfHalfday(0);\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = (DateTimeFormatterBuilder.UnpaddedNumber) dateTimeFormatterBuilder1.toPrinter();\n    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[5];\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 0);\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test00258"
  },
  "test00255" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00255() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfHalfday(0);\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = (DateTimeFormatterBuilder.UnpaddedNumber) dateTimeFormatterBuilder1.toPrinter();\n    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[5];\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test00255"
  },
  "test004127" : {
    "methodSignature" : "public static DateTimeFieldType hourOfHalfday()",
    "methodName" : "hourOfHalfday",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test004127() throws Throwable {\n    StringBuffer stringBuffer0 = new StringBuffer();\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    Locale locale0 = Locale.FRANCE;\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();\n}",
    "testName" : "test004127"
  },
  "test029528" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test029528() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();\n    StringBuffer stringBuffer0 = new StringBuffer(85);\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);\n    Locale locale0 = Locale.CHINESE;\n    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 65, true);\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test029528"
  },
  "test076951" : {
    "methodSignature" : "public Integer getPivotYear()",
    "methodName" : "getPivotYear",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test076951() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    Calendar calendar0 = MockCalendar.getInstance();\n    LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);\n    Partial partial0 = new Partial(localDateTime0);\n    DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();\n    dateTimeFormatter0.getPivotYear();\n}",
    "testName" : "test076951"
  },
  "test00135" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendTimeZoneOffset(String zeroOffsetText, boolean showSeparators, int minFields, int maxFields)",
    "methodName" : "appendTimeZoneOffset",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00135() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfSecond(1862, 10);\n    DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendTimeZoneOffset(\"vRAX$:X}6FxLJ\", true, 1862, 1862);\n}",
    "testName" : "test00135"
  },
  "test00256" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00256() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfHalfday(0);\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = (DateTimeFormatterBuilder.UnpaddedNumber) dateTimeFormatterBuilder1.toPrinter();\n    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[5];\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test00256"
  },
  "test004128" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test004128() throws Throwable {\n    StringBuffer stringBuffer0 = new StringBuffer();\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    Locale locale0 = Locale.FRANCE;\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test004128"
  },
  "test029529" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test029529() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();\n    StringBuffer stringBuffer0 = new StringBuffer(85);\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);\n    Locale locale0 = Locale.CHINESE;\n    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 65, true);\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test029529"
  },
  "test076952" : {
    "methodSignature" : "public DateTimeFormatterBuilder append(DateTimeFormatter formatter)",
    "methodName" : "append",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test076952() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    Calendar calendar0 = MockCalendar.getInstance();\n    LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);\n    Partial partial0 = new Partial(localDateTime0);\n    DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append(dateTimeFormatter0);\n}",
    "testName" : "test076952"
  },
  "test031600" : {
    "methodSignature" : "public int getMonthOfYear()",
    "methodName" : "getMonthOfYear",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test031600() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();\n    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);\n    StringBuffer stringBuffer0 = new StringBuffer(\"56YZ0]vD<'tk9?n0L\");\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);\n    YearMonth yearMonth0 = new YearMonth(dateTimeZone0);\n    yearMonth0.getMonthOfYear();\n}",
    "testName" : "test031600"
  },
  "test00259" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00259() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfHalfday(0);\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = (DateTimeFormatterBuilder.UnpaddedNumber) dateTimeFormatterBuilder1.toPrinter();\n    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[5];\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 0);\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test00259"
  },
  "test015252" : {
    "methodSignature" : "public Integer getOffsetInteger()",
    "methodName" : "getOffsetInteger",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test015252() throws Throwable {\n    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(\"&ac/\");\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);\n    Locale locale0 = Locale.GERMAN;\n    Integer integer0 = new Integer(0);\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1000L, lenientChronology0, locale0, integer0, 16);\n    int int0 = dateTimeFormatterBuilder_StringLiteral0.parseInto(dateTimeParserBucket0, \"9LwO4!^S6wB\", (-1054));\n    dateTimeParserBucket0.getOffsetInteger();\n}",
    "testName" : "test015252"
  },
  "test1272080" : {
    "methodSignature" : "public int getOffset()",
    "methodName" : "getOffset",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1272080() throws Throwable {\n    DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('');\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    Locale locale0 = Locale.UK;\n    Integer integer0 = new Integer(2049);\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2337L), gJChronology0, locale0, integer0, (-4));\n    int int0 = dateTimeFormatterBuilder_CharacterLiteral0.parseInto(dateTimeParserBucket0, \" 3.(:\", 116);\n    dateTimeParserBucket0.getOffset();\n}",
    "testName" : "test1272080"
  },
  "test015251" : {
    "methodSignature" : "public int getOffset()",
    "methodName" : "getOffset",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test015251() throws Throwable {\n    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(\"&ac/\");\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);\n    Locale locale0 = Locale.GERMAN;\n    Integer integer0 = new Integer(0);\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1000L, lenientChronology0, locale0, integer0, 16);\n    int int0 = dateTimeFormatterBuilder_StringLiteral0.parseInto(dateTimeParserBucket0, \"9LwO4!^S6wB\", (-1054));\n    dateTimeParserBucket0.getOffset();\n}",
    "testName" : "test015251"
  },
  "test1252010" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1252010() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 11, true);\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test1252010"
  },
  "test1272081" : {
    "methodSignature" : "public Integer getOffsetInteger()",
    "methodName" : "getOffsetInteger",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1272081() throws Throwable {\n    DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('');\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    Locale locale0 = Locale.UK;\n    Integer integer0 = new Integer(2049);\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2337L), gJChronology0, locale0, integer0, (-4));\n    int int0 = dateTimeFormatterBuilder_CharacterLiteral0.parseInto(dateTimeParserBucket0, \" 3.(:\", 116);\n    dateTimeParserBucket0.getOffsetInteger();\n}",
    "testName" : "test1272081"
  },
  "test015253" : {
    "methodSignature" : "public Integer getPivotYear()",
    "methodName" : "getPivotYear",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test015253() throws Throwable {\n    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(\"&ac/\");\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);\n    Locale locale0 = Locale.GERMAN;\n    Integer integer0 = new Integer(0);\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1000L, lenientChronology0, locale0, integer0, 16);\n    int int0 = dateTimeFormatterBuilder_StringLiteral0.parseInto(dateTimeParserBucket0, \"9LwO4!^S6wB\", (-1054));\n    dateTimeParserBucket0.getPivotYear();\n}",
    "testName" : "test015253"
  },
  "test076950" : {
    "methodSignature" : "public boolean isParser()",
    "methodName" : "isParser",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test076950() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    Calendar calendar0 = MockCalendar.getInstance();\n    LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);\n    Partial partial0 = new Partial(localDateTime0);\n    DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();\n    dateTimeFormatter0.isParser();\n}",
    "testName" : "test076950"
  },
  "test1272082" : {
    "methodSignature" : "public Integer getPivotYear()",
    "methodName" : "getPivotYear",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1272082() throws Throwable {\n    DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('');\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    Locale locale0 = Locale.UK;\n    Integer integer0 = new Integer(2049);\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2337L), gJChronology0, locale0, integer0, (-4));\n    int int0 = dateTimeFormatterBuilder_CharacterLiteral0.parseInto(dateTimeParserBucket0, \" 3.(:\", 116);\n    dateTimeParserBucket0.getPivotYear();\n}",
    "testName" : "test1272082"
  },
  "test038765" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendFractionOfMinute(int minDigits, int maxDigits)",
    "methodName" : "appendFractionOfMinute",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test038765() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfMinute(2224, 2);\n}",
    "testName" : "test038765"
  },
  "test0981210" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0981210() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;\n    StringWriter stringWriter0 = new StringWriter();\n    StringBuffer stringBuffer0 = stringWriter0.getBuffer();\n    ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    Locale locale0 = Locale.ENGLISH;\n    dateTimeFormatterBuilder_TimeZoneId0.printTo(stringBuffer0, (-1539L), (Chronology) iSOChronology0, (-2245), dateTimeZone0, locale0);\n    dateTimeZone0.toString();\n}",
    "testName" : "test0981210"
  },
  "test0981211" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0981211() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;\n    StringWriter stringWriter0 = new StringWriter();\n    StringBuffer stringBuffer0 = stringWriter0.getBuffer();\n    ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    Locale locale0 = Locale.ENGLISH;\n    dateTimeFormatterBuilder_TimeZoneId0.printTo(stringBuffer0, (-1539L), (Chronology) iSOChronology0, (-2245), dateTimeZone0, locale0);\n    dateTimeZone0.getID();\n}",
    "testName" : "test0981211"
  },
  "test063840" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendFraction(DateTimeFieldType fieldType, int minDigits, int maxDigits)",
    "methodName" : "appendFraction",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test063840() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();\n    dateTimeFormatterBuilder0.appendFraction(dateTimeFieldType0, 0, 0);\n}",
    "testName" : "test063840"
  },
  "test1272068" : {
    "methodSignature" : "public int getOffset()",
    "methodName" : "getOffset",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1272068() throws Throwable {\n    DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('');\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    Locale locale0 = Locale.UK;\n    Integer integer0 = new Integer(2049);\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2337L), gJChronology0, locale0, integer0, (-4));\n    dateTimeParserBucket0.getOffset();\n}",
    "testName" : "test1272068"
  },
  "test1272069" : {
    "methodSignature" : "public Integer getOffsetInteger()",
    "methodName" : "getOffsetInteger",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1272069() throws Throwable {\n    DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('');\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    Locale locale0 = Locale.UK;\n    Integer integer0 = new Integer(2049);\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2337L), gJChronology0, locale0, integer0, (-4));\n    dateTimeParserBucket0.getOffsetInteger();\n}",
    "testName" : "test1272069"
  },
  "test1221828" : {
    "methodSignature" : "public static IslamicChronology getInstance()",
    "methodName" : "getInstance",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1221828() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);\n    MockFile mockFile0 = new MockFile(\"US/MountainvRA@$:X}66xJ\", \"B@\\\"*wvnr^%9/\");\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();\n}",
    "testName" : "test1221828"
  },
  "test063838" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test063838() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test063838"
  },
  "test1221820" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1221820() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test1221820"
  },
  "test063839" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test063839() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test063839"
  },
  "test1272070" : {
    "methodSignature" : "public Integer getPivotYear()",
    "methodName" : "getPivotYear",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1272070() throws Throwable {\n    DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('');\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    Locale locale0 = Locale.UK;\n    Integer integer0 = new Integer(2049);\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2337L), gJChronology0, locale0, integer0, (-4));\n    dateTimeParserBucket0.getPivotYear();\n}",
    "testName" : "test1272070"
  },
  "test1221822" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1221822() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test1221822"
  },
  "test063837" : {
    "methodSignature" : "public static DateTimeFieldType dayOfMonth()",
    "methodName" : "dayOfMonth",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test063837() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();\n}",
    "testName" : "test063837"
  },
  "test1221823" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1221823() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test1221823"
  },
  "test1342128" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1342128() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFixedSignedDecimal(dateTimeFieldType0, 60000);\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test1342128"
  },
  "test1342127" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1342127() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFixedSignedDecimal(dateTimeFieldType0, 60000);\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test1342127"
  },
  "test076927" : {
    "methodSignature" : "public static LocalDateTime fromCalendarFields(Calendar calendar)",
    "methodName" : "fromCalendarFields",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test076927() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    Calendar calendar0 = MockCalendar.getInstance();\n    LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);\n}",
    "testName" : "test076927"
  },
  "test1342124" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendFixedSignedDecimal(DateTimeFieldType fieldType, int numDigits)",
    "methodName" : "appendFixedSignedDecimal",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1342124() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFixedSignedDecimal(dateTimeFieldType0, 60000);\n}",
    "testName" : "test1342124"
  },
  "test076932" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test076932() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    Calendar calendar0 = MockCalendar.getInstance();\n    LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);\n    localDateTime0.size();\n}",
    "testName" : "test076932"
  },
  "test1282096" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1282096() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();\n    DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 0, false, 7593750);\n    MockFileWriter mockFileWriter0 = new MockFileWriter(\"TkXj<+\", false);\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();\n    LocalDateTime localDateTime0 = new LocalDateTime(168L, (Chronology) buddhistChronology0);\n    localDateTime0.size();\n}",
    "testName" : "test1282096"
  },
  "test027405" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test027405() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 84, false);\n    StringBuffer stringBuffer0 = new StringBuffer(58);\n    LocalTime localTime0 = new LocalTime((long) 84, (DateTimeZone) null);\n    Locale locale0 = Locale.CHINA;\n    dateTimeFormatterBuilder_UnpaddedNumber0.printTo(stringBuffer0, (ReadablePartial) localTime0, locale0);\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test027405"
  },
  "test027406" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test027406() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 84, false);\n    StringBuffer stringBuffer0 = new StringBuffer(58);\n    LocalTime localTime0 = new LocalTime((long) 84, (DateTimeZone) null);\n    Locale locale0 = Locale.CHINA;\n    dateTimeFormatterBuilder_UnpaddedNumber0.printTo(stringBuffer0, (ReadablePartial) localTime0, locale0);\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test027406"
  },
  "test1221836" : {
    "methodSignature" : "public int getYear()",
    "methodName" : "getYear",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1221836() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);\n    MockFile mockFile0 = new MockFile(\"US/MountainvRA@$:X}66xJ\", \"B@\\\"*wvnr^%9/\");\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();\n    LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);\n    YearMonth yearMonth0 = new YearMonth((long) 0, (Chronology) lenientChronology0);\n    yearMonth0.getYear();\n}",
    "testName" : "test1221836"
  },
  "test076933" : {
    "methodSignature" : "public Partial(ReadablePartial partial)",
    "methodName" : "Partial",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test076933() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    Calendar calendar0 = MockCalendar.getInstance();\n    LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);\n    Partial partial0 = new Partial(localDateTime0);\n}",
    "testName" : "test076933"
  },
  "test1221837" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1221837() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);\n    MockFile mockFile0 = new MockFile(\"US/MountainvRA@$:X}66xJ\", \"B@\\\"*wvnr^%9/\");\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();\n    LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);\n    YearMonth yearMonth0 = new YearMonth((long) 0, (Chronology) lenientChronology0);\n    yearMonth0.size();\n}",
    "testName" : "test1221837"
  },
  "test1221838" : {
    "methodSignature" : "public int getMonthOfYear()",
    "methodName" : "getMonthOfYear",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1221838() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);\n    MockFile mockFile0 = new MockFile(\"US/MountainvRA@$:X}66xJ\", \"B@\\\"*wvnr^%9/\");\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();\n    LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);\n    YearMonth yearMonth0 = new YearMonth((long) 0, (Chronology) lenientChronology0);\n    yearMonth0.getMonthOfYear();\n}",
    "testName" : "test1221838"
  },
  "test0831001" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendDayOfWeekShortText()",
    "methodName" : "appendDayOfWeekShortText",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0831001() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfWeekShortText();\n}",
    "testName" : "test0831001"
  },
  "test1221832" : {
    "methodSignature" : "public YearMonth(long instant, Chronology chronology)",
    "methodName" : "YearMonth",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1221832() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);\n    MockFile mockFile0 = new MockFile(\"US/MountainvRA@$:X}66xJ\", \"B@\\\"*wvnr^%9/\");\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();\n    LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);\n    YearMonth yearMonth0 = new YearMonth((long) 0, (Chronology) lenientChronology0);\n}",
    "testName" : "test1221832"
  },
  "test1221830" : {
    "methodSignature" : "public static LenientChronology getInstance(Chronology base)",
    "methodName" : "getInstance",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1221830() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);\n    MockFile mockFile0 = new MockFile(\"US/MountainvRA@$:X}66xJ\", \"B@\\\"*wvnr^%9/\");\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();\n    LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);\n}",
    "testName" : "test1221830"
  },
  "test1272061" : {
    "methodSignature" : "public DateTimeParserBucket(long instantLocal, Chronology chrono, Locale locale, Integer pivotYear, int defaultYear)",
    "methodName" : "DateTimeParserBucket",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1272061() throws Throwable {\n    DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('');\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    Locale locale0 = Locale.UK;\n    Integer integer0 = new Integer(2049);\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2337L), gJChronology0, locale0, integer0, (-4));\n}",
    "testName" : "test1272061"
  },
  "test010176" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test010176() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);\n    int int0 = dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength();\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test010176"
  },
  "test1211805" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1211805() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();\n    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2300, false);\n    ISOChronology iSOChronology0 = ISOChronology.getInstance();\n    Locale locale0 = Locale.ENGLISH;\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, iSOChronology0, locale0, (Integer) 1, 1);\n    int int0 = dateTimeFormatterBuilder_FixedNumber0.parseInto(dateTimeParserBucket0, \"kFdI~^pqIY}sv\", 1);\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test1211805"
  },
  "test1211806" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1211806() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();\n    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2300, false);\n    ISOChronology iSOChronology0 = ISOChronology.getInstance();\n    Locale locale0 = Locale.ENGLISH;\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, iSOChronology0, locale0, (Integer) 1, 1);\n    int int0 = dateTimeFormatterBuilder_FixedNumber0.parseInto(dateTimeParserBucket0, \"kFdI~^pqIY}sv\", 1);\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test1211806"
  },
  "test010177" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test010177() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);\n    int int0 = dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength();\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test010177"
  },
  "test1211803" : {
    "methodSignature" : "public int getOffset()",
    "methodName" : "getOffset",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1211803() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();\n    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2300, false);\n    ISOChronology iSOChronology0 = ISOChronology.getInstance();\n    Locale locale0 = Locale.ENGLISH;\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, iSOChronology0, locale0, (Integer) 1, 1);\n    dateTimeParserBucket0.getOffset();\n}",
    "testName" : "test1211803"
  },
  "test1211801" : {
    "methodSignature" : "public Integer getOffsetInteger()",
    "methodName" : "getOffsetInteger",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1211801() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();\n    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2300, false);\n    ISOChronology iSOChronology0 = ISOChronology.getInstance();\n    Locale locale0 = Locale.ENGLISH;\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, iSOChronology0, locale0, (Integer) 1, 1);\n    dateTimeParserBucket0.getOffsetInteger();\n}",
    "testName" : "test1211801"
  },
  "test1211802" : {
    "methodSignature" : "public Integer getPivotYear()",
    "methodName" : "getPivotYear",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1211802() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();\n    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2300, false);\n    ISOChronology iSOChronology0 = ISOChronology.getInstance();\n    Locale locale0 = Locale.ENGLISH;\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, iSOChronology0, locale0, (Integer) 1, 1);\n    dateTimeParserBucket0.getPivotYear();\n}",
    "testName" : "test1211802"
  },
  "test1231892" : {
    "methodSignature" : "public static DateTimeZone forTimeZone(TimeZone zone)",
    "methodName" : "forTimeZone",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1231892() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"=(+MHG_'zofC_^5@|\", 10, 10, 0, 85, 10, 0, 10, 85);\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);\n}",
    "testName" : "test1231892"
  },
  "test1231898" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1231898() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"=(+MHG_'zofC_^5@|\", 10, 10, 0, 85, 10, 0, 10, 85);\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);\n    dateTimeZone0.toString();\n}",
    "testName" : "test1231898"
  },
  "test1021285" : {
    "methodSignature" : "public Integer getOffsetInteger()",
    "methodName" : "getOffsetInteger",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1021285() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(\"UTC(-`)=,c{y\", \"--ct(=6mk5'v\", true, 60000, 60000);\n    JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();\n    Locale locale0 = Locale.KOREA;\n    Integer integer0 = new Integer((-463));\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-874L), julianChronology0, locale0, integer0, 256);\n    dateTimeParserBucket0.getOffsetInteger();\n}",
    "testName" : "test1021285"
  },
  "test1231899" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1231899() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"=(+MHG_'zofC_^5@|\", 10, 10, 0, 85, 10, 0, 10, 85);\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);\n    dateTimeZone0.getID();\n}",
    "testName" : "test1231899"
  },
  "test1282092" : {
    "methodSignature" : "public static BuddhistChronology getInstanceUTC()",
    "methodName" : "getInstanceUTC",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1282092() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();\n    DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 0, false, 7593750);\n    MockFileWriter mockFileWriter0 = new MockFileWriter(\"TkXj<+\", false);\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();\n}",
    "testName" : "test1282092"
  },
  "test1282094" : {
    "methodSignature" : "public LocalDateTime(long instant, Chronology chronology)",
    "methodName" : "LocalDateTime",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1282094() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();\n    DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 0, false, 7593750);\n    MockFileWriter mockFileWriter0 = new MockFileWriter(\"TkXj<+\", false);\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();\n    LocalDateTime localDateTime0 = new LocalDateTime(168L, (Chronology) buddhistChronology0);\n}",
    "testName" : "test1282094"
  },
  "test028503" : {
    "methodSignature" : "public Integer getOffsetInteger()",
    "methodName" : "getOffsetInteger",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test028503() throws Throwable {\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);\n    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();\n    FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);\n    ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);\n    Charset charset0 = Charset.defaultCharset();\n    CharsetEncoder charsetEncoder0 = charset0.newEncoder();\n    OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);\n    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();\n    Locale locale0 = Locale.ITALY;\n    Integer integer0 = new Integer((-1816));\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gregorianChronology0, locale0, integer0, 0);\n    DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();\n    dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) outputStreamWriter0, (long) 0, (Chronology) gregorianChronology0, 0, dateTimeZone0, locale0);\n    dateTimeParserBucket0.getOffsetInteger();\n}",
    "testName" : "test028503"
  },
  "test028504" : {
    "methodSignature" : "public Integer getPivotYear()",
    "methodName" : "getPivotYear",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test028504() throws Throwable {\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);\n    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();\n    FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);\n    ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);\n    Charset charset0 = Charset.defaultCharset();\n    CharsetEncoder charsetEncoder0 = charset0.newEncoder();\n    OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);\n    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();\n    Locale locale0 = Locale.ITALY;\n    Integer integer0 = new Integer((-1816));\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gregorianChronology0, locale0, integer0, 0);\n    DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();\n    dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) outputStreamWriter0, (long) 0, (Chronology) gregorianChronology0, 0, dateTimeZone0, locale0);\n    dateTimeParserBucket0.getPivotYear();\n}",
    "testName" : "test028504"
  },
  "test1021278" : {
    "methodSignature" : "public DateTimeParserBucket(long instantLocal, Chronology chrono, Locale locale, Integer pivotYear, int defaultYear)",
    "methodName" : "DateTimeParserBucket",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1021278() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(\"UTC(-`)=,c{y\", \"--ct(=6mk5'v\", true, 60000, 60000);\n    JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();\n    Locale locale0 = Locale.KOREA;\n    Integer integer0 = new Integer((-463));\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-874L), julianChronology0, locale0, integer0, 256);\n}",
    "testName" : "test1021278"
  },
  "test1422161" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendDecimal(DateTimeFieldType fieldType, int minDigits, int maxDigits)",
    "methodName" : "appendDecimal",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1422161() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    dateTimeFormatterBuilder0.appendDecimal((DateTimeFieldType) null, 1, (-2317));\n}",
    "testName" : "test1422161"
  },
  "test028505" : {
    "methodSignature" : "public int getOffset()",
    "methodName" : "getOffset",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test028505() throws Throwable {\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);\n    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();\n    FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);\n    ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);\n    Charset charset0 = Charset.defaultCharset();\n    CharsetEncoder charsetEncoder0 = charset0.newEncoder();\n    OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);\n    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();\n    Locale locale0 = Locale.ITALY;\n    Integer integer0 = new Integer((-1816));\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gregorianChronology0, locale0, integer0, 0);\n    DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();\n    dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) outputStreamWriter0, (long) 0, (Chronology) gregorianChronology0, 0, dateTimeZone0, locale0);\n    dateTimeParserBucket0.getOffset();\n}",
    "testName" : "test028505"
  },
  "test1282088" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1282088() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();\n    DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 0, false, 7593750);\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test1282088"
  },
  "test028506" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test028506() throws Throwable {\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);\n    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();\n    FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);\n    ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);\n    Charset charset0 = Charset.defaultCharset();\n    CharsetEncoder charsetEncoder0 = charset0.newEncoder();\n    OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);\n    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();\n    Locale locale0 = Locale.ITALY;\n    Integer integer0 = new Integer((-1816));\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gregorianChronology0, locale0, integer0, 0);\n    DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();\n    dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) outputStreamWriter0, (long) 0, (Chronology) gregorianChronology0, 0, dateTimeZone0, locale0);\n    dateTimeZone0.toString();\n}",
    "testName" : "test028506"
  },
  "test1282087" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1282087() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();\n    DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 0, false, 7593750);\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test1282087"
  },
  "test027411" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test027411() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 84, false);\n    StringBuffer stringBuffer0 = new StringBuffer(58);\n    LocalTime localTime0 = new LocalTime((long) 84, (DateTimeZone) null);\n    Locale locale0 = Locale.CHINA;\n    dateTimeFormatterBuilder_UnpaddedNumber0.printTo(stringBuffer0, (ReadablePartial) localTime0, locale0);\n    localTime0.size();\n}",
    "testName" : "test027411"
  },
  "test1221849" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1221849() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);\n    MockFile mockFile0 = new MockFile(\"US/MountainvRA@$:X}66xJ\", \"B@\\\"*wvnr^%9/\");\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();\n    LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);\n    YearMonth yearMonth0 = new YearMonth((long) 0, (Chronology) lenientChronology0);\n    Locale locale0 = Locale.KOREA;\n    dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) mockPrintWriter0, (ReadablePartial) yearMonth0, locale0);\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test1221849"
  },
  "test010171" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test010171() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test010171"
  },
  "test028507" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test028507() throws Throwable {\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);\n    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();\n    FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);\n    ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);\n    Charset charset0 = Charset.defaultCharset();\n    CharsetEncoder charsetEncoder0 = charset0.newEncoder();\n    OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);\n    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();\n    Locale locale0 = Locale.ITALY;\n    Integer integer0 = new Integer((-1816));\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gregorianChronology0, locale0, integer0, 0);\n    DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();\n    dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) outputStreamWriter0, (long) 0, (Chronology) gregorianChronology0, 0, dateTimeZone0, locale0);\n    dateTimeZone0.getID();\n}",
    "testName" : "test028507"
  },
  "test1272051" : {
    "methodSignature" : "public static GJChronology getInstance()",
    "methodName" : "getInstance",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1272051() throws Throwable {\n    DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('');\n    GJChronology gJChronology0 = GJChronology.getInstance();\n}",
    "testName" : "test1272051"
  },
  "test010172" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test010172() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test010172"
  },
  "test010168" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test010168() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test010168"
  },
  "test1211816" : {
    "methodSignature" : "public Integer getPivotYear()",
    "methodName" : "getPivotYear",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1211816() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();\n    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2300, false);\n    ISOChronology iSOChronology0 = ISOChronology.getInstance();\n    Locale locale0 = Locale.ENGLISH;\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, iSOChronology0, locale0, (Integer) 1, 1);\n    int int0 = dateTimeFormatterBuilder_FixedNumber0.parseInto(dateTimeParserBucket0, \"kFdI~^pqIY}sv\", 1);\n    dateTimeParserBucket0.getPivotYear();\n}",
    "testName" : "test1211816"
  },
  "test010169" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test010169() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test010169"
  },
  "test039769" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendFractionOfHour(int minDigits, int maxDigits)",
    "methodName" : "appendFractionOfHour",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test039769() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfHour(5, (-309));\n}",
    "testName" : "test039769"
  },
  "test1211817" : {
    "methodSignature" : "public int getOffset()",
    "methodName" : "getOffset",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1211817() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();\n    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2300, false);\n    ISOChronology iSOChronology0 = ISOChronology.getInstance();\n    Locale locale0 = Locale.ENGLISH;\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, iSOChronology0, locale0, (Integer) 1, 1);\n    int int0 = dateTimeFormatterBuilder_FixedNumber0.parseInto(dateTimeParserBucket0, \"kFdI~^pqIY}sv\", 1);\n    dateTimeParserBucket0.getOffset();\n}",
    "testName" : "test1211817"
  },
  "test1892282" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendHourOfHalfday(int minDigits)",
    "methodName" : "appendHourOfHalfday",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1892282() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendHourOfHalfday(12825000);\n}",
    "testName" : "test1892282"
  },
  "test010167" : {
    "methodSignature" : "public static DateTimeFieldType yearOfCentury()",
    "methodName" : "yearOfCentury",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test010167() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();\n}",
    "testName" : "test010167"
  },
  "test1211815" : {
    "methodSignature" : "public Integer getOffsetInteger()",
    "methodName" : "getOffsetInteger",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1211815() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();\n    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2300, false);\n    ISOChronology iSOChronology0 = ISOChronology.getInstance();\n    Locale locale0 = Locale.ENGLISH;\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, iSOChronology0, locale0, (Integer) 1, 1);\n    int int0 = dateTimeFormatterBuilder_FixedNumber0.parseInto(dateTimeParserBucket0, \"kFdI~^pqIY}sv\", 1);\n    dateTimeParserBucket0.getOffsetInteger();\n}",
    "testName" : "test1211815"
  },
  "test053809" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendMinuteOfHour(int minDigits)",
    "methodName" : "appendMinuteOfHour",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test053809() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    dateTimeFormatterBuilder0.appendMinuteOfHour((-204));\n}",
    "testName" : "test053809"
  },
  "test1021268" : {
    "methodSignature" : "public static JulianChronology getInstanceUTC()",
    "methodName" : "getInstanceUTC",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1021268() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(\"UTC(-`)=,c{y\", \"--ct(=6mk5'v\", true, 60000, 60000);\n    JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();\n}",
    "testName" : "test1021268"
  },
  "test1221850" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1221850() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);\n    MockFile mockFile0 = new MockFile(\"US/MountainvRA@$:X}66xJ\", \"B@\\\"*wvnr^%9/\");\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();\n    LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);\n    YearMonth yearMonth0 = new YearMonth((long) 0, (Chronology) lenientChronology0);\n    Locale locale0 = Locale.KOREA;\n    dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) mockPrintWriter0, (ReadablePartial) yearMonth0, locale0);\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test1221850"
  },
  "test1081404" : {
    "methodSignature" : "public static DateTimeZone forOffsetMillis(int millisOffset)",
    "methodName" : "forOffsetMillis",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1081404() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(\"UTC(-`)=,c{y\", \"--ct(=6mk5'v\", true, 60000, 60000);\n    StringBuffer stringBuffer0 = new StringBuffer();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);\n}",
    "testName" : "test1081404"
  },
  "test1101457" : {
    "methodSignature" : "public Integer getOffsetInteger()",
    "methodName" : "getOffsetInteger",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1101457() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 20);\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(20);\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(20, buddhistChronology0, (Locale) null, (Integer) buddhistChronology0.BE, 0);\n    dateTimeParserBucket0.getOffsetInteger();\n}",
    "testName" : "test1101457"
  },
  "test1081405" : {
    "methodSignature" : "public abstract boolean isFixed()",
    "methodName" : "isFixed",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1081405() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(\"UTC(-`)=,c{y\", \"--ct(=6mk5'v\", true, 60000, 60000);\n    StringBuffer stringBuffer0 = new StringBuffer();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);\n    dateTimeZone0.isFixed();\n}",
    "testName" : "test1081405"
  },
  "test1101456" : {
    "methodSignature" : "public int getOffset()",
    "methodName" : "getOffset",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1101456() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 20);\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(20);\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(20, buddhistChronology0, (Locale) null, (Integer) buddhistChronology0.BE, 0);\n    dateTimeParserBucket0.getOffset();\n}",
    "testName" : "test1101456"
  },
  "test1101455" : {
    "methodSignature" : "public Integer getPivotYear()",
    "methodName" : "getPivotYear",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1101455() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 20);\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(20);\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(20, buddhistChronology0, (Locale) null, (Integer) buddhistChronology0.BE, 0);\n    dateTimeParserBucket0.getPivotYear();\n}",
    "testName" : "test1101455"
  },
  "test1101454" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1101454() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 20);\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(20);\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(20, buddhistChronology0, (Locale) null, (Integer) buddhistChronology0.BE, 0);\n    dateTimeZone0.toString();\n}",
    "testName" : "test1101454"
  },
  "test1021299" : {
    "methodSignature" : "public Integer getPivotYear()",
    "methodName" : "getPivotYear",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1021299() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(\"UTC(-`)=,c{y\", \"--ct(=6mk5'v\", true, 60000, 60000);\n    JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();\n    Locale locale0 = Locale.KOREA;\n    Integer integer0 = new Integer((-463));\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-874L), julianChronology0, locale0, integer0, 256);\n    int int0 = dateTimeFormatterBuilder_TimeZoneOffset0.parseInto(dateTimeParserBucket0, \"UTC(-`)=,c{y\", 60000);\n    dateTimeParserBucket0.getPivotYear();\n}",
    "testName" : "test1021299"
  },
  "test1241998" : {
    "methodSignature" : "public int getMonthOfYear()",
    "methodName" : "getMonthOfYear",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1241998() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);\n    CharBuffer charBuffer0 = CharBuffer.allocate(0);\n    StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);\n    MonthDay monthDay0 = new MonthDay();\n    Locale locale0 = Locale.GERMANY;\n    dateTimeFormatterBuilder_UnpaddedNumber0.printTo(stringBuffer0, (ReadablePartial) monthDay0, locale0);\n    monthDay0.getMonthOfYear();\n}",
    "testName" : "test1241998"
  },
  "test003107" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test003107() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    Locale locale0 = Locale.CHINA;\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();\n    Integer integer0 = new Integer((-1027));\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(100, gJChronology0, locale0, integer0, 1440);\n    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);\n    int int0 = dateTimeFormatterBuilder_TextField0.parseInto(dateTimeParserBucket0, \"org.joda.time.format.DateTimeFormatterBuilder\", 1440);\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test003107"
  },
  "test1021297" : {
    "methodSignature" : "public Integer getOffsetInteger()",
    "methodName" : "getOffsetInteger",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1021297() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(\"UTC(-`)=,c{y\", \"--ct(=6mk5'v\", true, 60000, 60000);\n    JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();\n    Locale locale0 = Locale.KOREA;\n    Integer integer0 = new Integer((-463));\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-874L), julianChronology0, locale0, integer0, 256);\n    int int0 = dateTimeFormatterBuilder_TimeZoneOffset0.parseInto(dateTimeParserBucket0, \"UTC(-`)=,c{y\", 60000);\n    dateTimeParserBucket0.getOffsetInteger();\n}",
    "testName" : "test1021297"
  },
  "test1021298" : {
    "methodSignature" : "public int getOffset()",
    "methodName" : "getOffset",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1021298() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(\"UTC(-`)=,c{y\", \"--ct(=6mk5'v\", true, 60000, 60000);\n    JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();\n    Locale locale0 = Locale.KOREA;\n    Integer integer0 = new Integer((-463));\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-874L), julianChronology0, locale0, integer0, 256);\n    int int0 = dateTimeFormatterBuilder_TimeZoneOffset0.parseInto(dateTimeParserBucket0, \"UTC(-`)=,c{y\", 60000);\n    dateTimeParserBucket0.getOffset();\n}",
    "testName" : "test1021298"
  },
  "test1081408" : {
    "methodSignature" : "public static GJChronology getInstance(DateTimeZone zone)",
    "methodName" : "getInstance",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1081408() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(\"UTC(-`)=,c{y\", \"--ct(=6mk5'v\", true, 60000, 60000);\n    StringBuffer stringBuffer0 = new StringBuffer();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);\n    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);\n}",
    "testName" : "test1081408"
  },
  "test1081409" : {
    "methodSignature" : "public abstract boolean isFixed()",
    "methodName" : "isFixed",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1081409() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(\"UTC(-`)=,c{y\", \"--ct(=6mk5'v\", true, 60000, 60000);\n    StringBuffer stringBuffer0 = new StringBuffer();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);\n    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);\n    dateTimeZone0.isFixed();\n}",
    "testName" : "test1081409"
  },
  "test1081406" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1081406() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(\"UTC(-`)=,c{y\", \"--ct(=6mk5'v\", true, 60000, 60000);\n    StringBuffer stringBuffer0 = new StringBuffer();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);\n    dateTimeZone0.getID();\n}",
    "testName" : "test1081406"
  },
  "test1081407" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1081407() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(\"UTC(-`)=,c{y\", \"--ct(=6mk5'v\", true, 60000, 60000);\n    StringBuffer stringBuffer0 = new StringBuffer();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);\n    dateTimeZone0.toString();\n}",
    "testName" : "test1081407"
  },
  "test1161599" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1161599() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();\n    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2552, true);\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test1161599"
  },
  "test1161597" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1161597() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test1161597"
  },
  "test1161596" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1161596() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test1161596"
  },
  "test1111499" : {
    "methodSignature" : "public Integer getOffsetInteger()",
    "methodName" : "getOffsetInteger",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1111499() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));\n    CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();\n    Locale locale0 = Locale.KOREAN;\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-480), copticChronology0, locale0, (Integer) 1, (-1250));\n    int int0 = dateTimeFormatterBuilder_Fraction0.parseInto(dateTimeParserBucket0, \"];\", 99);\n    dateTimeParserBucket0.getOffsetInteger();\n}",
    "testName" : "test1111499"
  },
  "test1161595" : {
    "methodSignature" : "public static DateTimeFieldType secondOfDay()",
    "methodName" : "secondOfDay",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1161595() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();\n}",
    "testName" : "test1161595"
  },
  "test003108" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test003108() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    Locale locale0 = Locale.CHINA;\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();\n    Integer integer0 = new Integer((-1027));\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(100, gJChronology0, locale0, integer0, 1440);\n    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);\n    int int0 = dateTimeFormatterBuilder_TextField0.parseInto(dateTimeParserBucket0, \"org.joda.time.format.DateTimeFormatterBuilder\", 1440);\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test003108"
  },
  "test1241996" : {
    "methodSignature" : "public int getDayOfMonth()",
    "methodName" : "getDayOfMonth",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1241996() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);\n    CharBuffer charBuffer0 = CharBuffer.allocate(0);\n    StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);\n    MonthDay monthDay0 = new MonthDay();\n    Locale locale0 = Locale.GERMANY;\n    dateTimeFormatterBuilder_UnpaddedNumber0.printTo(stringBuffer0, (ReadablePartial) monthDay0, locale0);\n    monthDay0.getDayOfMonth();\n}",
    "testName" : "test1241996"
  },
  "test003109" : {
    "methodSignature" : "public Integer getPivotYear()",
    "methodName" : "getPivotYear",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test003109() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    Locale locale0 = Locale.CHINA;\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();\n    Integer integer0 = new Integer((-1027));\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(100, gJChronology0, locale0, integer0, 1440);\n    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);\n    int int0 = dateTimeFormatterBuilder_TextField0.parseInto(dateTimeParserBucket0, \"org.joda.time.format.DateTimeFormatterBuilder\", 1440);\n    dateTimeParserBucket0.getPivotYear();\n}",
    "testName" : "test003109"
  },
  "test1241997" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1241997() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);\n    CharBuffer charBuffer0 = CharBuffer.allocate(0);\n    StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);\n    MonthDay monthDay0 = new MonthDay();\n    Locale locale0 = Locale.GERMANY;\n    dateTimeFormatterBuilder_UnpaddedNumber0.printTo(stringBuffer0, (ReadablePartial) monthDay0, locale0);\n    monthDay0.size();\n}",
    "testName" : "test1241997"
  },
  "test037761" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendMillisOfDay(int minDigits)",
    "methodName" : "appendMillisOfDay",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test037761() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMillisOfDay(329);\n}",
    "testName" : "test037761"
  },
  "test1502224" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1502224() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));\n    CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();\n    Locale locale0 = Locale.KOREAN;\n    MockFileWriter mockFileWriter0 = new MockFileWriter(\"V*5{`cp )y~EvNag\", false);\n    BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0);\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedWriter0, false);\n    LocalTime localTime0 = LocalTime.fromMillisOfDay((-4644L), (Chronology) copticChronology0);\n    dateTimeFormatterBuilder_Fraction0.printTo((Writer) mockPrintWriter0, (ReadablePartial) localTime0, locale0);\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test1502224"
  },
  "test1502223" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1502223() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));\n    CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();\n    Locale locale0 = Locale.KOREAN;\n    MockFileWriter mockFileWriter0 = new MockFileWriter(\"V*5{`cp )y~EvNag\", false);\n    BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0);\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedWriter0, false);\n    LocalTime localTime0 = LocalTime.fromMillisOfDay((-4644L), (Chronology) copticChronology0);\n    dateTimeFormatterBuilder_Fraction0.printTo((Writer) mockPrintWriter0, (ReadablePartial) localTime0, locale0);\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test1502223"
  },
  "test1502221" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1502221() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));\n    CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();\n    Locale locale0 = Locale.KOREAN;\n    MockFileWriter mockFileWriter0 = new MockFileWriter(\"V*5{`cp )y~EvNag\", false);\n    BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0);\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedWriter0, false);\n    LocalTime localTime0 = LocalTime.fromMillisOfDay((-4644L), (Chronology) copticChronology0);\n    localTime0.size();\n}",
    "testName" : "test1502221"
  },
  "test051805" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendOptional(DateTimeParser parser)",
    "methodName" : "appendOptional",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test051805() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    dateTimeFormatterBuilder0.appendOptional((DateTimeParser) null);\n}",
    "testName" : "test051805"
  },
  "test1081411" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1081411() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(\"UTC(-`)=,c{y\", \"--ct(=6mk5'v\", true, 60000, 60000);\n    StringBuffer stringBuffer0 = new StringBuffer();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);\n    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);\n    dateTimeZone0.toString();\n}",
    "testName" : "test1081411"
  },
  "test1081410" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1081410() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(\"UTC(-`)=,c{y\", \"--ct(=6mk5'v\", true, 60000, 60000);\n    StringBuffer stringBuffer0 = new StringBuffer();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);\n    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);\n    dateTimeZone0.getID();\n}",
    "testName" : "test1081410"
  },
  "test075920" : {
    "methodSignature" : "public DateTimeFormatterBuilder append(DateTimePrinter printer, DateTimeParser[] parsers)",
    "methodName" : "append",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test075920() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[8];\n    dateTimeFormatterBuilder0.append((DateTimePrinter) null, dateTimeParserArray0);\n}",
    "testName" : "test075920"
  },
  "test1021286" : {
    "methodSignature" : "public int getOffset()",
    "methodName" : "getOffset",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1021286() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(\"UTC(-`)=,c{y\", \"--ct(=6mk5'v\", true, 60000, 60000);\n    JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();\n    Locale locale0 = Locale.KOREA;\n    Integer integer0 = new Integer((-463));\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-874L), julianChronology0, locale0, integer0, 256);\n    dateTimeParserBucket0.getOffset();\n}",
    "testName" : "test1021286"
  },
  "test1021287" : {
    "methodSignature" : "public Integer getPivotYear()",
    "methodName" : "getPivotYear",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1021287() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(\"UTC(-`)=,c{y\", \"--ct(=6mk5'v\", true, 60000, 60000);\n    JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();\n    Locale locale0 = Locale.KOREA;\n    Integer integer0 = new Integer((-463));\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-874L), julianChronology0, locale0, integer0, 256);\n    dateTimeParserBucket0.getPivotYear();\n}",
    "testName" : "test1021287"
  },
  "test047797" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendWeekyear(int minDigits, int maxDigits)",
    "methodName" : "appendWeekyear",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test047797() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    dateTimeFormatterBuilder0.appendWeekyear(0, 0);\n}",
    "testName" : "test047797"
  },
  "test1151566" : {
    "methodSignature" : "public LocalDateTime(Object instant, Chronology chronology)",
    "methodName" : "LocalDateTime",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1151566() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    LocalDateTime localDateTime0 = new LocalDateTime((Object) null, gJChronology0);\n}",
    "testName" : "test1151566"
  },
  "test011190" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011190() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();\n    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-754), true);\n    int int0 = dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength();\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test011190"
  },
  "test1151567" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1151567() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    LocalDateTime localDateTime0 = new LocalDateTime((Object) null, gJChronology0);\n    localDateTime0.size();\n}",
    "testName" : "test1151567"
  },
  "test1241980" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1241980() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);\n    CharBuffer charBuffer0 = CharBuffer.allocate(0);\n    StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);\n    MonthDay monthDay0 = new MonthDay();\n    Locale locale0 = Locale.GERMANY;\n    dateTimeFormatterBuilder_UnpaddedNumber0.printTo(stringBuffer0, (ReadablePartial) monthDay0, locale0);\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test1241980"
  },
  "test1502219" : {
    "methodSignature" : "public static LocalTime fromMillisOfDay(long millisOfDay, Chronology chrono)",
    "methodName" : "fromMillisOfDay",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1502219() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));\n    CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();\n    Locale locale0 = Locale.KOREAN;\n    MockFileWriter mockFileWriter0 = new MockFileWriter(\"V*5{`cp )y~EvNag\", false);\n    BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0);\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedWriter0, false);\n    LocalTime localTime0 = LocalTime.fromMillisOfDay((-4644L), (Chronology) copticChronology0);\n}",
    "testName" : "test1502219"
  },
  "test014214" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test014214() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();\n    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);\n    int int0 = dateTimeFormatterBuilder_TextField0.estimatePrintedLength();\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test014214"
  },
  "test014215" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test014215() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();\n    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);\n    int int0 = dateTimeFormatterBuilder_TextField0.estimatePrintedLength();\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test014215"
  },
  "test011185" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011185() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();\n    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-754), true);\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test011185"
  },
  "test014210" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test014210() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();\n    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test014210"
  },
  "test1502233" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1502233() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));\n    CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();\n    Locale locale0 = Locale.KOREAN;\n    MockFileWriter mockFileWriter0 = new MockFileWriter(\"V*5{`cp )y~EvNag\", false);\n    BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0);\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedWriter0, false);\n    LocalTime localTime0 = LocalTime.fromMillisOfDay((-4644L), (Chronology) copticChronology0);\n    dateTimeFormatterBuilder_Fraction0.printTo((Writer) mockPrintWriter0, (ReadablePartial) localTime0, locale0);\n    localTime0.size();\n}",
    "testName" : "test1502233"
  },
  "test1111485" : {
    "methodSignature" : "public Integer getPivotYear()",
    "methodName" : "getPivotYear",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1111485() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));\n    CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();\n    Locale locale0 = Locale.KOREAN;\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-480), copticChronology0, locale0, (Integer) 1, (-1250));\n    dateTimeParserBucket0.getPivotYear();\n}",
    "testName" : "test1111485"
  },
  "test011189" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011189() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();\n    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-754), true);\n    int int0 = dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength();\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test011189"
  },
  "test1111484" : {
    "methodSignature" : "public Integer getOffsetInteger()",
    "methodName" : "getOffsetInteger",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1111484() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));\n    CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();\n    Locale locale0 = Locale.KOREAN;\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-480), copticChronology0, locale0, (Integer) 1, (-1250));\n    dateTimeParserBucket0.getOffsetInteger();\n}",
    "testName" : "test1111484"
  },
  "test052807" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendMonthOfYear(int minDigits)",
    "methodName" : "appendMonthOfYear",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test052807() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    dateTimeFormatterBuilder0.appendMonthOfYear((-2155));\n}",
    "testName" : "test052807"
  },
  "test1101435" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1101435() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test1101435"
  },
  "test1101434" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1101434() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test1101434"
  },
  "test074916" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendLiteral(String text)",
    "methodName" : "appendLiteral",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test074916() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendLiteral(\"org.joda.time.DateTime\");\n}",
    "testName" : "test074916"
  },
  "test1081424" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1081424() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(\"UTC(-`)=,c{y\", \"--ct(=6mk5'v\", true, 60000, 60000);\n    StringBuffer stringBuffer0 = new StringBuffer();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);\n    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);\n    Locale locale0 = Locale.ENGLISH;\n    dateTimeFormatterBuilder_TimeZoneOffset0.printTo(stringBuffer0, (-1051L), (Chronology) gJChronology0, 7678125, dateTimeZone0, locale0);\n    dateTimeZone0.getID();\n}",
    "testName" : "test1081424"
  },
  "test1101433" : {
    "methodSignature" : "public static DateTimeFieldType dayOfWeek()",
    "methodName" : "dayOfWeek",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1101433() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();\n}",
    "testName" : "test1101433"
  },
  "test1081425" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1081425() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(\"UTC(-`)=,c{y\", \"--ct(=6mk5'v\", true, 60000, 60000);\n    StringBuffer stringBuffer0 = new StringBuffer();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);\n    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);\n    Locale locale0 = Locale.ENGLISH;\n    dateTimeFormatterBuilder_TimeZoneOffset0.printTo(stringBuffer0, (-1051L), (Chronology) gJChronology0, 7678125, dateTimeZone0, locale0);\n    dateTimeZone0.toString();\n}",
    "testName" : "test1081425"
  },
  "test1081423" : {
    "methodSignature" : "public abstract boolean isFixed()",
    "methodName" : "isFixed",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1081423() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(\"UTC(-`)=,c{y\", \"--ct(=6mk5'v\", true, 60000, 60000);\n    StringBuffer stringBuffer0 = new StringBuffer();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);\n    GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);\n    Locale locale0 = Locale.ENGLISH;\n    dateTimeFormatterBuilder_TimeZoneOffset0.printTo(stringBuffer0, (-1051L), (Chronology) gJChronology0, 7678125, dateTimeZone0, locale0);\n    dateTimeZone0.isFixed();\n}",
    "testName" : "test1081423"
  },
  "test1101438" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1101438() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 20);\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test1101438"
  },
  "test1101437" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1101437() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 20);\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test1101437"
  },
  "test1151580" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1151580() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    LocalDateTime localDateTime0 = new LocalDateTime((Object) null, gJChronology0);\n    Locale locale0 = Locale.CHINA;\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();\n    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 65533, false);\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test1151580"
  },
  "test1101442" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1101442() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 20);\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(20);\n    dateTimeZone0.getID();\n}",
    "testName" : "test1101442"
  },
  "test1151575" : {
    "methodSignature" : "public static DateTimeFieldType secondOfMinute()",
    "methodName" : "secondOfMinute",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1151575() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    LocalDateTime localDateTime0 = new LocalDateTime((Object) null, gJChronology0);\n    Locale locale0 = Locale.CHINA;\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();\n}",
    "testName" : "test1151575"
  },
  "test048799" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendWeekOfWeekyear(int minDigits)",
    "methodName" : "appendWeekOfWeekyear",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test048799() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    dateTimeFormatterBuilder0.appendWeekOfWeekyear((-758));\n}",
    "testName" : "test048799"
  },
  "test1101441" : {
    "methodSignature" : "public static DateTimeZone forOffsetHours(int hoursOffset) throws IllegalArgumentException",
    "methodName" : "forOffsetHours",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1101441() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 20);\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(20);\n}",
    "testName" : "test1101441"
  },
  "test1151577" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1151577() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    LocalDateTime localDateTime0 = new LocalDateTime((Object) null, gJChronology0);\n    Locale locale0 = Locale.CHINA;\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test1151577"
  },
  "test1151576" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1151576() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    LocalDateTime localDateTime0 = new LocalDateTime((Object) null, gJChronology0);\n    Locale locale0 = Locale.CHINA;\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test1151576"
  },
  "test011180" : {
    "methodSignature" : "public static DateTimeFieldType hourOfHalfday()",
    "methodName" : "hourOfHalfday",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011180() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();\n}",
    "testName" : "test011180"
  },
  "test1111476" : {
    "methodSignature" : "public DateTimeParserBucket(long instantLocal, Chronology chrono, Locale locale, Integer pivotYear, int defaultYear)",
    "methodName" : "DateTimeParserBucket",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1111476() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));\n    CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();\n    Locale locale0 = Locale.KOREAN;\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-480), copticChronology0, locale0, (Integer) 1, (-1250));\n}",
    "testName" : "test1111476"
  },
  "test1151579" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1151579() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    LocalDateTime localDateTime0 = new LocalDateTime((Object) null, gJChronology0);\n    Locale locale0 = Locale.CHINA;\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();\n    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 65533, false);\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test1151579"
  },
  "test011184" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011184() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();\n    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-754), true);\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test011184"
  },
  "test011182" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011182() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test011182"
  },
  "test1832276" : {
    "methodSignature" : "public void clear()",
    "methodName" : "clear",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1832276() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    dateTimeFormatterBuilder0.clear();\n}",
    "testName" : "test1832276"
  },
  "test011181" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011181() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test011181"
  },
  "test1111490" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1111490() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));\n    CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();\n    Locale locale0 = Locale.KOREAN;\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-480), copticChronology0, locale0, (Integer) 1, (-1250));\n    int int0 = dateTimeFormatterBuilder_Fraction0.parseInto(dateTimeParserBucket0, \"];\", 99);\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test1111490"
  },
  "test014205" : {
    "methodSignature" : "public static DateTimeFieldType centuryOfEra()",
    "methodName" : "centuryOfEra",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test014205() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();\n}",
    "testName" : "test014205"
  },
  "test014206" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test014206() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test014206"
  },
  "test1001243" : {
    "methodSignature" : "public DateTimeParser toParser()",
    "methodName" : "toParser",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1001243() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneShortName((Map<String, DateTimeZone>) null);\n    DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTimeZoneName((Map<String, DateTimeZone>) null);\n    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = (DateTimeFormatterBuilder.Composite) dateTimeFormatterBuilder2.toParser();\n}",
    "testName" : "test1001243"
  },
  "test1101445" : {
    "methodSignature" : "public static synchronized BuddhistChronology getInstance(DateTimeZone zone)",
    "methodName" : "getInstance",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1101445() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 20);\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(20);\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);\n}",
    "testName" : "test1101445"
  },
  "test1101444" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1101444() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 20);\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(20);\n    dateTimeZone0.toString();\n}",
    "testName" : "test1101444"
  },
  "test1101443" : {
    "methodSignature" : "public abstract boolean isFixed()",
    "methodName" : "isFixed",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1101443() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 20);\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(20);\n    dateTimeZone0.isFixed();\n}",
    "testName" : "test1101443"
  },
  "test014207" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test014207() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test014207"
  },
  "test1101449" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1101449() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 20);\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(20);\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);\n    dateTimeZone0.toString();\n}",
    "testName" : "test1101449"
  },
  "test014209" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test014209() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();\n    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test014209"
  },
  "test1101448" : {
    "methodSignature" : "public abstract boolean isFixed()",
    "methodName" : "isFixed",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1101448() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 20);\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(20);\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);\n    dateTimeZone0.isFixed();\n}",
    "testName" : "test1101448"
  },
  "test1151591" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1151591() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    LocalDateTime localDateTime0 = new LocalDateTime((Object) null, gJChronology0);\n    Locale locale0 = Locale.CHINA;\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();\n    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 65533, false);\n    MockFileWriter mockFileWriter0 = new MockFileWriter(\"|54j#IjT\\u0006c;:M\", false);\n    dateTimeFormatterBuilder_TwoDigitYear0.printTo((Writer) mockFileWriter0, (ReadablePartial) localDateTime0, locale0);\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test1151591"
  },
  "test1101447" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1101447() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 20);\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(20);\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);\n    dateTimeZone0.getID();\n}",
    "testName" : "test1101447"
  },
  "test1221818" : {
    "methodSignature" : "public static DateTimeFieldType yearOfEra()",
    "methodName" : "yearOfEra",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1221818() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();\n}",
    "testName" : "test1221818"
  },
  "test1151584" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1151584() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    LocalDateTime localDateTime0 = new LocalDateTime((Object) null, gJChronology0);\n    Locale locale0 = Locale.CHINA;\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();\n    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 65533, false);\n    MockFileWriter mockFileWriter0 = new MockFileWriter(\"|54j#IjT\\u0006c;:M\", false);\n    dateTimeFormatterBuilder_TwoDigitYear0.printTo((Writer) mockFileWriter0, (ReadablePartial) localDateTime0, locale0);\n    localDateTime0.size();\n}",
    "testName" : "test1151584"
  },
  "test1221819" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1221819() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test1221819"
  },
  "test1101453" : {
    "methodSignature" : "public abstract boolean isFixed()",
    "methodName" : "isFixed",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1101453() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 20);\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(20);\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(20, buddhistChronology0, (Locale) null, (Integer) buddhistChronology0.BE, 0);\n    dateTimeZone0.isFixed();\n}",
    "testName" : "test1101453"
  },
  "test1001236" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendTimeZoneName(Map<String, DateTimeZone> parseLookup)",
    "methodName" : "appendTimeZoneName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1001236() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneShortName((Map<String, DateTimeZone>) null);\n    DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTimeZoneName((Map<String, DateTimeZone>) null);\n}",
    "testName" : "test1001236"
  },
  "test1101452" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1101452() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 20);\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(20);\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(20, buddhistChronology0, (Locale) null, (Integer) buddhistChronology0.BE, 0);\n    dateTimeZone0.getID();\n}",
    "testName" : "test1101452"
  },
  "test1001233" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendTimeZoneShortName(Map<String, DateTimeZone> parseLookup)",
    "methodName" : "appendTimeZoneShortName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1001233() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneShortName((Map<String, DateTimeZone>) null);\n}",
    "testName" : "test1001233"
  },
  "test1882281" : {
    "methodSignature" : "public boolean canBuildFormatter()",
    "methodName" : "canBuildFormatter",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1882281() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    boolean boolean0 = dateTimeFormatterBuilder0.canBuildFormatter();\n}",
    "testName" : "test1882281"
  },
  "test1101450" : {
    "methodSignature" : "public DateTimeParserBucket(long instantLocal, Chronology chrono, Locale locale, Integer pivotYear, int defaultYear)",
    "methodName" : "DateTimeParserBucket",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1101450() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 20);\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(20);\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(20, buddhistChronology0, (Locale) null, (Integer) buddhistChronology0.BE, 0);\n}",
    "testName" : "test1101450"
  },
  "test1111486" : {
    "methodSignature" : "public int getOffset()",
    "methodName" : "getOffset",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1111486() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));\n    CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();\n    Locale locale0 = Locale.KOREAN;\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-480), copticChronology0, locale0, (Integer) 1, (-1250));\n    dateTimeParserBucket0.getOffset();\n}",
    "testName" : "test1111486"
  },
  "test1332119" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendFixedSignedDecimal(DateTimeFieldType fieldType, int numDigits)",
    "methodName" : "appendFixedSignedDecimal",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1332119() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    dateTimeFormatterBuilder0.appendFixedSignedDecimal((DateTimeFieldType) null, 259);\n}",
    "testName" : "test1332119"
  },
  "test062835" : {
    "methodSignature" : "public DateTimeFormatterBuilder append(DateTimePrinter printer)",
    "methodName" : "append",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test062835() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    dateTimeFormatterBuilder0.append((DateTimePrinter) null);\n}",
    "testName" : "test062835"
  },
  "test1111489" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1111489() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));\n    CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();\n    Locale locale0 = Locale.KOREAN;\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-480), copticChronology0, locale0, (Integer) 1, (-1250));\n    int int0 = dateTimeFormatterBuilder_Fraction0.parseInto(dateTimeParserBucket0, \"];\", 99);\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test1111489"
  },
  "test1722259" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendYearOfCentury(int minDigits, int maxDigits)",
    "methodName" : "appendYearOfCentury",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1722259() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendYearOfCentury(5, 431);\n}",
    "testName" : "test1722259"
  },
  "test1141552" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1141552() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test1141552"
  },
  "test1141551" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1141551() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test1141551"
  },
  "test1141550" : {
    "methodSignature" : "public static DateTimeFieldType weekOfWeekyear()",
    "methodName" : "weekOfWeekyear",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1141550() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();\n}",
    "testName" : "test1141550"
  },
  "test1231911" : {
    "methodSignature" : "public LocalDate(Chronology chronology)",
    "methodName" : "LocalDate",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1231911() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"=(+MHG_'zofC_^5@|\", 10, 10, 0, 85, 10, 0, 10, 85);\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);\n    CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);\n    LocalDate localDate0 = new LocalDate((Chronology) copticChronology0);\n}",
    "testName" : "test1231911"
  },
  "test1141555" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1141555() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();\n    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test1141555"
  },
  "test1231918" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1231918() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"=(+MHG_'zofC_^5@|\", 10, 10, 0, 85, 10, 0, 10, 85);\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);\n    CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);\n    LocalDate localDate0 = new LocalDate((Chronology) copticChronology0);\n    dateTimeZone0.toString();\n}",
    "testName" : "test1231918"
  },
  "test1792267" : {
    "methodSignature" : "public boolean canBuildParser()",
    "methodName" : "canBuildParser",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1792267() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    boolean boolean0 = dateTimeFormatterBuilder0.canBuildParser();\n}",
    "testName" : "test1792267"
  },
  "test008158" : {
    "methodSignature" : "public static DateTimeFieldType yearOfCentury()",
    "methodName" : "yearOfCentury",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test008158() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();\n}",
    "testName" : "test008158"
  },
  "test1141554" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1141554() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();\n    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test1141554"
  },
  "test008159" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test008159() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test008159"
  },
  "test050803" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendPattern(String pattern)",
    "methodName" : "appendPattern",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test050803() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    dateTimeFormatterBuilder0.appendPattern((String) null);\n}",
    "testName" : "test050803"
  },
  "test1141558" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendOptional(DateTimeParser parser)",
    "methodName" : "appendOptional",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1141558() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();\n    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendOptional(dateTimeFormatterBuilder_TextField0);\n}",
    "testName" : "test1141558"
  },
  "test1231910" : {
    "methodSignature" : "public abstract boolean isFixed()",
    "methodName" : "isFixed",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1231910() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"=(+MHG_'zofC_^5@|\", 10, 10, 0, 85, 10, 0, 10, 85);\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);\n    CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);\n    dateTimeZone0.isFixed();\n}",
    "testName" : "test1231910"
  },
  "test019283" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test019283() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();\n    DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 45, true, 0);\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test019283"
  },
  "test1151592" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1151592() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    LocalDateTime localDateTime0 = new LocalDateTime((Object) null, gJChronology0);\n    Locale locale0 = Locale.CHINA;\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();\n    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 65533, false);\n    MockFileWriter mockFileWriter0 = new MockFileWriter(\"|54j#IjT\\u0006c;:M\", false);\n    dateTimeFormatterBuilder_TwoDigitYear0.printTo((Writer) mockFileWriter0, (ReadablePartial) localDateTime0, locale0);\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test1151592"
  },
  "test019280" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test019280() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test019280"
  },
  "test019281" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test019281() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test019281"
  },
  "test019288" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test019288() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();\n    DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 45, true, 0);\n    int int0 = dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength();\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test019288"
  },
  "test1231919" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1231919() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"=(+MHG_'zofC_^5@|\", 10, 10, 0, 85, 10, 0, 10, 85);\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);\n    CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);\n    LocalDate localDate0 = new LocalDate((Chronology) copticChronology0);\n    dateTimeZone0.getID();\n}",
    "testName" : "test1231919"
  },
  "test019289" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test019289() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();\n    DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 45, true, 0);\n    int int0 = dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength();\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test019289"
  },
  "test019284" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test019284() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();\n    DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 45, true, 0);\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test019284"
  },
  "test0901023" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendDayOfWeekText()",
    "methodName" : "appendDayOfWeekText",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0901023() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfWeekText();\n}",
    "testName" : "test0901023"
  },
  "test1141562" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1141562() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();\n    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendOptional(dateTimeFormatterBuilder_TextField0);\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test1141562"
  },
  "test1141561" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1141561() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();\n    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendOptional(dateTimeFormatterBuilder_TextField0);\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test1141561"
  },
  "test1231900" : {
    "methodSignature" : "public abstract boolean isFixed()",
    "methodName" : "isFixed",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1231900() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"=(+MHG_'zofC_^5@|\", 10, 10, 0, 85, 10, 0, 10, 85);\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);\n    dateTimeZone0.isFixed();\n}",
    "testName" : "test1231900"
  },
  "test1231901" : {
    "methodSignature" : "public static CopticChronology getInstance(DateTimeZone zone)",
    "methodName" : "getInstance",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1231901() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"=(+MHG_'zofC_^5@|\", 10, 10, 0, 85, 10, 0, 10, 85);\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);\n    CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);\n}",
    "testName" : "test1231901"
  },
  "test036757" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendPattern(String pattern)",
    "methodName" : "appendPattern",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test036757() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendPattern(\"\");\n}",
    "testName" : "test036757"
  },
  "test046795" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendYear(int minDigits, int maxDigits)",
    "methodName" : "appendYear",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test046795() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    dateTimeFormatterBuilder0.appendYear(0, 0);\n}",
    "testName" : "test046795"
  },
  "test019279" : {
    "methodSignature" : "public static DateTimeFieldType minuteOfHour()",
    "methodName" : "minuteOfHour",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test019279() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();\n}",
    "testName" : "test019279"
  },
  "test0901032" : {
    "methodSignature" : "public DateTimeFormatterBuilder append(DateTimePrinter printer)",
    "methodName" : "append",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0901032() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfWeekText();\n    LinkedList<Object> linkedList0 = new LinkedList<Object>();\n    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);\n    DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.append((DateTimePrinter) dateTimeFormatterBuilder_Composite0);\n}",
    "testName" : "test0901032"
  },
  "test1111467" : {
    "methodSignature" : "public static CopticChronology getInstanceUTC()",
    "methodName" : "getInstanceUTC",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1111467() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));\n    CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();\n}",
    "testName" : "test1111467"
  },
  "test1231908" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1231908() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"=(+MHG_'zofC_^5@|\", 10, 10, 0, 85, 10, 0, 10, 85);\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);\n    CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);\n    dateTimeZone0.toString();\n}",
    "testName" : "test1231908"
  },
  "test1231909" : {
    "methodSignature" : "public final String getID()",
    "methodName" : "getID",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1231909() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"=(+MHG_'zofC_^5@|\", 10, 10, 0, 85, 10, 0, 10, 85);\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);\n    CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);\n    dateTimeZone0.getID();\n}",
    "testName" : "test1231909"
  },
  "test1412159" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendYearOfEra(int minDigits, int maxDigits)",
    "methodName" : "appendYearOfEra",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1412159() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    dateTimeFormatterBuilder0.appendYearOfEra(0, 0);\n}",
    "testName" : "test1412159"
  },
  "test1712258" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendMinuteOfDay(int minDigits)",
    "methodName" : "appendMinuteOfDay",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1712258() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMinuteOfDay(16);\n}",
    "testName" : "test1712258"
  },
  "test1842277" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendPattern(String pattern)",
    "methodName" : "appendPattern",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1842277() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    dateTimeFormatterBuilder0.appendPattern(\"EU[\");\n}",
    "testName" : "test1842277"
  },
  "test1241979" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1241979() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);\n    CharBuffer charBuffer0 = CharBuffer.allocate(0);\n    StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);\n    MonthDay monthDay0 = new MonthDay();\n    Locale locale0 = Locale.GERMANY;\n    dateTimeFormatterBuilder_UnpaddedNumber0.printTo(stringBuffer0, (ReadablePartial) monthDay0, locale0);\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test1241979"
  },
  "test073911" : {
    "methodSignature" : "public static DateTimeFieldType monthOfYear()",
    "methodName" : "monthOfYear",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test073911() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();\n}",
    "testName" : "test073911"
  },
  "test0901042" : {
    "methodSignature" : "public boolean canBuildParser()",
    "methodName" : "canBuildParser",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0901042() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfWeekText();\n    LinkedList<Object> linkedList0 = new LinkedList<Object>();\n    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);\n    DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.append((DateTimePrinter) dateTimeFormatterBuilder_Composite0);\n    boolean boolean0 = dateTimeFormatterBuilder1.canBuildParser();\n}",
    "testName" : "test0901042"
  },
  "test0851007" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendTwoDigitWeekyear(int pivot, boolean lenientParse)",
    "methodName" : "appendTwoDigitWeekyear",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0851007() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTwoDigitWeekyear(11, true);\n}",
    "testName" : "test0851007"
  },
  "test070889" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test070889() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test070889"
  },
  "test061833" : {
    "methodSignature" : "public DateTimeFormatterBuilder append(DateTimePrinter printer, DateTimeParser[] parsers)",
    "methodName" : "append",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test061833() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();\n    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-754), true);\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[0];\n    dateTimeFormatterBuilder0.append((DateTimePrinter) dateTimeFormatterBuilder_TwoDigitYear0, dateTimeParserArray0);\n}",
    "testName" : "test061833"
  },
  "test070888" : {
    "methodSignature" : "public static DateTimeFieldType hourOfDay()",
    "methodName" : "hourOfDay",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test070888() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();\n}",
    "testName" : "test070888"
  },
  "test061832" : {
    "methodSignature" : "public DateTimeFormatterBuilder()",
    "methodName" : "DateTimeFormatterBuilder",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test061832() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();\n    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-754), true);\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n}",
    "testName" : "test061832"
  },
  "test073912" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test073912() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test073912"
  },
  "test073913" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test073913() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test073913"
  },
  "test082997" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendMonthOfYear(int minDigits)",
    "methodName" : "appendMonthOfYear",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test082997() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMonthOfYear(59);\n}",
    "testName" : "test082997"
  },
  "test073914" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendDecimal(DateTimeFieldType fieldType, int minDigits, int maxDigits)",
    "methodName" : "appendDecimal",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test073914() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();\n    dateTimeFormatterBuilder0.appendDecimal(dateTimeFieldType0, 0, 0);\n}",
    "testName" : "test073914"
  },
  "test1231920" : {
    "methodSignature" : "public abstract boolean isFixed()",
    "methodName" : "isFixed",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1231920() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"=(+MHG_'zofC_^5@|\", 10, 10, 0, 85, 10, 0, 10, 85);\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);\n    CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);\n    LocalDate localDate0 = new LocalDate((Chronology) copticChronology0);\n    dateTimeZone0.isFixed();\n}",
    "testName" : "test1231920"
  },
  "test1231921" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1231921() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"=(+MHG_'zofC_^5@|\", 10, 10, 0, 85, 10, 0, 10, 85);\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);\n    CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);\n    LocalDate localDate0 = new LocalDate((Chronology) copticChronology0);\n    localDate0.size();\n}",
    "testName" : "test1231921"
  },
  "test1241967" : {
    "methodSignature" : "public int getDayOfMonth()",
    "methodName" : "getDayOfMonth",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1241967() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);\n    CharBuffer charBuffer0 = CharBuffer.allocate(0);\n    StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);\n    MonthDay monthDay0 = new MonthDay();\n    monthDay0.getDayOfMonth();\n}",
    "testName" : "test1241967"
  },
  "test1241968" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1241968() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);\n    CharBuffer charBuffer0 = CharBuffer.allocate(0);\n    StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);\n    MonthDay monthDay0 = new MonthDay();\n    monthDay0.size();\n}",
    "testName" : "test1241968"
  },
  "test1241969" : {
    "methodSignature" : "public int getMonthOfYear()",
    "methodName" : "getMonthOfYear",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1241969() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);\n    CharBuffer charBuffer0 = CharBuffer.allocate(0);\n    StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);\n    MonthDay monthDay0 = new MonthDay();\n    monthDay0.getMonthOfYear();\n}",
    "testName" : "test1241969"
  },
  "test1912285" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendCenturyOfEra(int minDigits, int maxDigits)",
    "methodName" : "appendCenturyOfEra",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1912285() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    dateTimeFormatterBuilder0.appendCenturyOfEra((-457), (-457));\n}",
    "testName" : "test1912285"
  },
  "test1872280" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendMonthOfYearText()",
    "methodName" : "appendMonthOfYearText",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1872280() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMonthOfYearText();\n}",
    "testName" : "test1872280"
  },
  "test070895" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test070895() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDecimal(dateTimeFieldType0, 0, 13);\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test070895"
  },
  "test070894" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test070894() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDecimal(dateTimeFieldType0, 0, 13);\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test070894"
  },
  "test1442167" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendLiteral(String text)",
    "methodName" : "appendLiteral",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1442167() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    dateTimeFormatterBuilder0.appendLiteral((String) null);\n}",
    "testName" : "test1442167"
  },
  "test070891" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendDecimal(DateTimeFieldType fieldType, int minDigits, int maxDigits)",
    "methodName" : "appendDecimal",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test070891() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDecimal(dateTimeFieldType0, 0, 13);\n}",
    "testName" : "test070891"
  },
  "test070890" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test070890() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test070890"
  },
  "test1241964" : {
    "methodSignature" : "public MonthDay()",
    "methodName" : "MonthDay",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1241964() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);\n    CharBuffer charBuffer0 = CharBuffer.allocate(0);\n    StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);\n    MonthDay monthDay0 = new MonthDay();\n}",
    "testName" : "test1241964"
  },
  "test009164" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test009164() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test009164"
  },
  "test009165" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test009165() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test009165"
  },
  "test009166" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendFixedDecimal(DateTimeFieldType fieldType, int numDigits)",
    "methodName" : "appendFixedDecimal",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test009166() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();\n    dateTimeFormatterBuilder0.appendFixedDecimal(dateTimeFieldType0, 0);\n}",
    "testName" : "test009166"
  },
  "test1191731" : {
    "methodSignature" : "public int getOffset()",
    "methodName" : "getOffset",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1191731() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();\n    Locale locale0 = Locale.ITALIAN;\n    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), false);\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2889L), ethiopicChronology0, locale0, (Integer) 1, (-745));\n    dateTimeParserBucket0.getOffset();\n}",
    "testName" : "test1191731"
  },
  "test1191733" : {
    "methodSignature" : "public Integer getPivotYear()",
    "methodName" : "getPivotYear",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1191733() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();\n    Locale locale0 = Locale.ITALIAN;\n    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), false);\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2889L), ethiopicChronology0, locale0, (Integer) 1, (-745));\n    dateTimeParserBucket0.getPivotYear();\n}",
    "testName" : "test1191733"
  },
  "test1191732" : {
    "methodSignature" : "public Integer getOffsetInteger()",
    "methodName" : "getOffsetInteger",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1191732() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();\n    Locale locale0 = Locale.ITALIAN;\n    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), false);\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2889L), ethiopicChronology0, locale0, (Integer) 1, (-745));\n    dateTimeParserBucket0.getOffsetInteger();\n}",
    "testName" : "test1191732"
  },
  "test081993" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendDayOfMonth(int minDigits)",
    "methodName" : "appendDayOfMonth",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test081993() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfMonth(10209375);\n}",
    "testName" : "test081993"
  },
  "test009163" : {
    "methodSignature" : "public static DateTimeFieldType halfdayOfDay()",
    "methodName" : "halfdayOfDay",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test009163() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();\n}",
    "testName" : "test009163"
  },
  "test0921078" : {
    "methodSignature" : "public DateTimeParserBucket(long instantLocal, Chronology chrono, Locale locale, Integer pivotYear, int defaultYear)",
    "methodName" : "DateTimeParserBucket",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0921078() throws Throwable {\n    LinkedList<Object> linkedList0 = new LinkedList<Object>();\n    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);\n    CopticChronology copticChronology0 = CopticChronology.getInstance();\n    Locale locale0 = Locale.PRC;\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1393L, copticChronology0, locale0, (Integer) 1, (-4498));\n}",
    "testName" : "test0921078"
  },
  "test021334" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test021334() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test021334"
  },
  "test1191737" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1191737() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();\n    Locale locale0 = Locale.ITALIAN;\n    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), false);\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2889L), ethiopicChronology0, locale0, (Integer) 1, (-745));\n    int int0 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, \"US/Central\", 214);\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test1191737"
  },
  "test021335" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test021335() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test021335"
  },
  "test1191736" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1191736() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();\n    Locale locale0 = Locale.ITALIAN;\n    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), false);\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2889L), ethiopicChronology0, locale0, (Integer) 1, (-745));\n    int int0 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, \"US/Central\", 214);\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test1191736"
  },
  "test059821" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendDayOfMonth(int minDigits)",
    "methodName" : "appendDayOfMonth",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test059821() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    dateTimeFormatterBuilder0.appendDayOfMonth((-632));\n}",
    "testName" : "test059821"
  },
  "test021339" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test021339() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));\n    int int0 = dateTimeFormatterBuilder_Fraction0.estimatePrintedLength();\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test021339"
  },
  "test1191746" : {
    "methodSignature" : "public int getOffset()",
    "methodName" : "getOffset",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1191746() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();\n    Locale locale0 = Locale.ITALIAN;\n    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), false);\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2889L), ethiopicChronology0, locale0, (Integer) 1, (-745));\n    int int0 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, \"US/Central\", 214);\n    dateTimeParserBucket0.getOffset();\n}",
    "testName" : "test1191746"
  },
  "test1352130" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendWeekyear(int minDigits, int maxDigits)",
    "methodName" : "appendWeekyear",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1352130() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendWeekyear(1, 1);\n}",
    "testName" : "test1352130"
  },
  "test1862279" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendFractionOfDay(int minDigits, int maxDigits)",
    "methodName" : "appendFractionOfDay",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1862279() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    dateTimeFormatterBuilder0.appendFractionOfDay((-241), (-241));\n}",
    "testName" : "test1862279"
  },
  "test0841005" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendDayOfWeek(int minDigits)",
    "methodName" : "appendDayOfWeek",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0841005() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    dateTimeFormatterBuilder0.appendDayOfWeek((-1000));\n}",
    "testName" : "test0841005"
  },
  "test021340" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test021340() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));\n    int int0 = dateTimeFormatterBuilder_Fraction0.estimatePrintedLength();\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test021340"
  },
  "test1191748" : {
    "methodSignature" : "public Integer getPivotYear()",
    "methodName" : "getPivotYear",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1191748() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();\n    Locale locale0 = Locale.ITALIAN;\n    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), false);\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2889L), ethiopicChronology0, locale0, (Integer) 1, (-745));\n    int int0 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, \"US/Central\", 214);\n    dateTimeParserBucket0.getPivotYear();\n}",
    "testName" : "test1191748"
  },
  "test1191747" : {
    "methodSignature" : "public Integer getOffsetInteger()",
    "methodName" : "getOffsetInteger",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1191747() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();\n    Locale locale0 = Locale.ITALIAN;\n    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), false);\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2889L), ethiopicChronology0, locale0, (Integer) 1, (-745));\n    int int0 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, \"US/Central\", 214);\n    dateTimeParserBucket0.getOffsetInteger();\n}",
    "testName" : "test1191747"
  },
  "test1071384" : {
    "methodSignature" : "public static ISOChronology getInstanceUTC()",
    "methodName" : "getInstanceUTC",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1071384() throws Throwable {\n    StringBuffer stringBuffer0 = new StringBuffer();\n    Locale locale0 = Locale.TRADITIONAL_CHINESE;\n    ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();\n}",
    "testName" : "test1071384"
  },
  "test0921069" : {
    "methodSignature" : "public static CopticChronology getInstance()",
    "methodName" : "getInstance",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0921069() throws Throwable {\n    LinkedList<Object> linkedList0 = new LinkedList<Object>();\n    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);\n    CopticChronology copticChronology0 = CopticChronology.getInstance();\n}",
    "testName" : "test0921069"
  },
  "test0911048" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendFractionOfSecond(int minDigits, int maxDigits)",
    "methodName" : "appendFractionOfSecond",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0911048() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfSecond(1847, 10);\n}",
    "testName" : "test0911048"
  },
  "test035753" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendSecondOfDay(int minDigits)",
    "methodName" : "appendSecondOfDay",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test035753() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendSecondOfDay(6);\n}",
    "testName" : "test035753"
  },
  "test069886" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test069886() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendSignedDecimal(dateTimeFieldType0, 3600000, 1492);\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test069886"
  },
  "test069885" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test069885() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendSignedDecimal(dateTimeFieldType0, 3600000, 1492);\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test069885"
  },
  "test1181704" : {
    "methodSignature" : "public Integer getOffsetInteger()",
    "methodName" : "getOffsetInteger",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1181704() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();\n    Locale locale0 = Locale.TRADITIONAL_CHINESE;\n    ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();\n    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 275, false);\n    Integer integer0 = new Integer(275);\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(10, iSOChronology0, locale0, integer0, 1847);\n    dateTimeParserBucket0.getOffsetInteger();\n}",
    "testName" : "test1181704"
  },
  "test069882" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendSignedDecimal(DateTimeFieldType fieldType, int minDigits, int maxDigits)",
    "methodName" : "appendSignedDecimal",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test069882() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendSignedDecimal(dateTimeFieldType0, 3600000, 1492);\n}",
    "testName" : "test069882"
  },
  "test045793" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendYearOfCentury(int minDigits, int maxDigits)",
    "methodName" : "appendYearOfCentury",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test045793() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    dateTimeFormatterBuilder0.appendYearOfCentury((-2450), 2986);\n}",
    "testName" : "test045793"
  },
  "test069881" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test069881() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test069881"
  },
  "test1432163" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendLiteral(String text)",
    "methodName" : "appendLiteral",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1432163() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendLiteral(\"S\");\n}",
    "testName" : "test1432163"
  },
  "test1241932" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1241932() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test1241932"
  },
  "test069880" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test069880() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test069880"
  },
  "test1241934" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1241934() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test1241934"
  },
  "test1702257" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendTwoDigitWeekyear(int pivot)",
    "methodName" : "appendTwoDigitWeekyear",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1702257() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTwoDigitWeekyear(2946);\n}",
    "testName" : "test1702257"
  },
  "test1241935" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1241935() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test1241935"
  },
  "test1181703" : {
    "methodSignature" : "public int getOffset()",
    "methodName" : "getOffset",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1181703() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();\n    Locale locale0 = Locale.TRADITIONAL_CHINESE;\n    ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();\n    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 275, false);\n    Integer integer0 = new Integer(275);\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(10, iSOChronology0, locale0, integer0, 1847);\n    dateTimeParserBucket0.getOffset();\n}",
    "testName" : "test1181703"
  },
  "test1181702" : {
    "methodSignature" : "public Integer getPivotYear()",
    "methodName" : "getPivotYear",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1181702() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();\n    Locale locale0 = Locale.TRADITIONAL_CHINESE;\n    ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();\n    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 275, false);\n    Integer integer0 = new Integer(275);\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(10, iSOChronology0, locale0, integer0, 1847);\n    dateTimeParserBucket0.getPivotYear();\n}",
    "testName" : "test1181702"
  },
  "test049801" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendTimeZoneOffset(String zeroOffsetText, boolean showSeparators, int minFields, int maxFields)",
    "methodName" : "appendTimeZoneOffset",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test049801() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    dateTimeFormatterBuilder0.appendTimeZoneOffset((String) null, true, (-1293), 913);\n}",
    "testName" : "test049801"
  },
  "test060823" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendClockhourOfHalfday(int minDigits)",
    "methodName" : "appendClockhourOfHalfday",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test060823() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    dateTimeFormatterBuilder0.appendClockhourOfHalfday((-3258));\n}",
    "testName" : "test060823"
  },
  "test1191719" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1191719() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();\n    Locale locale0 = Locale.ITALIAN;\n    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), false);\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test1191719"
  },
  "test1241930" : {
    "methodSignature" : "public static DateTimeFieldType year()",
    "methodName" : "year",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1241930() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();\n}",
    "testName" : "test1241930"
  },
  "test1241931" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1241931() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test1241931"
  },
  "test072908" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test072908() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDecimal(dateTimeFieldType0, 1660, 0);\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test072908"
  },
  "test072909" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test072909() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDecimal(dateTimeFieldType0, 1660, 0);\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test072909"
  },
  "test0911058" : {
    "methodSignature" : "public boolean canBuildFormatter()",
    "methodName" : "canBuildFormatter",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0911058() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfSecond(1847, 10);\n    DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTimeZoneShortName();\n    boolean boolean0 = dateTimeFormatterBuilder1.canBuildFormatter();\n}",
    "testName" : "test0911058"
  },
  "test1191720" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1191720() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();\n    Locale locale0 = Locale.ITALIAN;\n    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), false);\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test1191720"
  },
  "test069879" : {
    "methodSignature" : "public static DateTimeFieldType clockhourOfHalfday()",
    "methodName" : "clockhourOfHalfday",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test069879() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();\n}",
    "testName" : "test069879"
  },
  "test1191723" : {
    "methodSignature" : "public DateTimeParserBucket(long instantLocal, Chronology chrono, Locale locale, Integer pivotYear, int defaultYear)",
    "methodName" : "DateTimeParserBucket",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1191723() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();\n    Locale locale0 = Locale.ITALIAN;\n    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), false);\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2889L), ethiopicChronology0, locale0, (Integer) 1, (-745));\n}",
    "testName" : "test1191723"
  },
  "test0911051" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendTimeZoneShortName()",
    "methodName" : "appendTimeZoneShortName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0911051() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfSecond(1847, 10);\n    DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTimeZoneShortName();\n}",
    "testName" : "test0911051"
  },
  "test1362135" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1362135() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test1362135"
  },
  "test1362134" : {
    "methodSignature" : "public static DateTimeFieldType millisOfSecond()",
    "methodName" : "millisOfSecond",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1362134() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();\n}",
    "testName" : "test1362134"
  },
  "test1362137" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendSignedDecimal(DateTimeFieldType fieldType, int minDigits, int maxDigits)",
    "methodName" : "appendSignedDecimal",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1362137() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();\n    dateTimeFormatterBuilder0.appendSignedDecimal(dateTimeFieldType0, 0, 0);\n}",
    "testName" : "test1362137"
  },
  "test008160" : {
    "methodSignature" : "public String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test008160() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();\n    dateTimeFieldType0.getName();\n}",
    "testName" : "test008160"
  },
  "test072905" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendDecimal(DateTimeFieldType fieldType, int minDigits, int maxDigits)",
    "methodName" : "appendDecimal",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test072905() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDecimal(dateTimeFieldType0, 1660, 0);\n}",
    "testName" : "test072905"
  },
  "test1362136" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1362136() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();\n    dateTimeFieldType0.toString();\n}",
    "testName" : "test1362136"
  },
  "test008161" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendFixedSignedDecimal(DateTimeFieldType fieldType, int numDigits)",
    "methodName" : "appendFixedSignedDecimal",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test008161() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();\n    dateTimeFormatterBuilder0.appendFixedSignedDecimal(dateTimeFieldType0, (-2537));\n}",
    "testName" : "test008161"
  },
  "test0921088" : {
    "methodSignature" : "public int getOffset()",
    "methodName" : "getOffset",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0921088() throws Throwable {\n    LinkedList<Object> linkedList0 = new LinkedList<Object>();\n    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);\n    CopticChronology copticChronology0 = CopticChronology.getInstance();\n    Locale locale0 = Locale.PRC;\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1393L, copticChronology0, locale0, (Integer) 1, (-4498));\n    dateTimeParserBucket0.getOffset();\n}",
    "testName" : "test0921088"
  },
  "test0921087" : {
    "methodSignature" : "public Integer getOffsetInteger()",
    "methodName" : "getOffsetInteger",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0921087() throws Throwable {\n    LinkedList<Object> linkedList0 = new LinkedList<Object>();\n    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);\n    CopticChronology copticChronology0 = CopticChronology.getInstance();\n    Locale locale0 = Locale.PRC;\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1393L, copticChronology0, locale0, (Integer) 1, (-4498));\n    dateTimeParserBucket0.getOffsetInteger();\n}",
    "testName" : "test0921087"
  },
  "test0921086" : {
    "methodSignature" : "public Integer getPivotYear()",
    "methodName" : "getPivotYear",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0921086() throws Throwable {\n    LinkedList<Object> linkedList0 = new LinkedList<Object>();\n    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);\n    CopticChronology copticChronology0 = CopticChronology.getInstance();\n    Locale locale0 = Locale.PRC;\n    DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1393L, copticChronology0, locale0, (Integer) 1, (-4498));\n    dateTimeParserBucket0.getPivotYear();\n}",
    "testName" : "test0921086"
  },
  "test1922286" : {
    "methodSignature" : "public DateTimeFormatterBuilder appendYearOfEra(int minDigits, int maxDigits)",
    "methodName" : "appendYearOfEra",
    "className" : "org.joda.time.format.DateTimeFormatterBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1922286() throws Throwable {\n    DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();\n    DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendYearOfEra(5, 574);\n}",
    "testName" : "test1922286"
  }
}