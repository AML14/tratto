focal_method,test_prefix,docstring
"public long getMillisKeepLocal(DateTimeZone newZone, long oldInstant) {
    if (newZone == null) {
        newZone = DateTimeZone.getDefault();
    }
    if (newZone == this) {
        return oldInstant;
    }
    long instantLocal = oldInstant + getOffset(oldInstant);
    return instantLocal - newZone.getOffsetFromLocal(instantLocal);
}","public void test000() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    dateTimeZone0.getMillisKeepLocal(dateTimeZone0, 9223372036854775773L);
}","/**
 * Gets the millisecond instant in another zone keeping the same local time.
 * <p>
 * The conversion is performed by converting the specified UTC millis to local
 * millis in this zone, then converting back to UTC millis in the new zone.
 *
 * @param newZone  the new zone, null means default
 * @param oldInstant  the UTC millisecond instant to convert
 * @return the UTC millisecond instant with the same local time in the new zone
 */"
"public static void setNameProvider(NameProvider nameProvider) throws SecurityException {
    SecurityManager sm = System.getSecurityManager();
    if (sm != null) {
        sm.checkPermission(new JodaTimePermission(""DateTimeZone.setNameProvider""));
    }
    setNameProvider0(nameProvider);
}","public void test011() throws Throwable {
    DateTimeZone.setNameProvider((NameProvider) null);
}","/**
 * Sets the name provider factory.
 * <p>
 * The name provider is a pluggable instance factory that supplies the
 * names of each DateTimeZone.
 *
 * @param nameProvider  provider to use, or null for default
 * @throws SecurityException if you do not have the permission DateTimeZone.setNameProvider
 * @throws IllegalArgumentException if the provider is invalid
 */"
"//-----------------------------------------------------------------------
/**
 * Gets a time zone instance for the specified time zone id.
 * <p>
 * The time zone id may be one of those returned by getAvailableIDs.
 * Short ids, as accepted by {@link java.util.TimeZone}, are not accepted.
 * All IDs must be specified in the long format.
 * The exception is UTC, which is an acceptable id.
 * <p>
 * Alternatively a locale independent, fixed offset, datetime zone can
 * be specified. The form <code>[+-]hh:mm</code> can be used.
 *
 * @param id  the ID of the datetime zone, null means default
 * @return the DateTimeZone object for the ID
 * @throws IllegalArgumentException if the ID is not recognised
 */
@FromString
public static DateTimeZone forID(String id) {
    if (id == null) {
        return getDefault();
    }
    if (id.equals(""UTC"")) {
        return DateTimeZone.UTC;
    }
    DateTimeZone zone = cProvider.getZone(id);
    if (zone != null) {
        return zone;
    }
    if (id.startsWith(""+"") || id.startsWith(""-"")) {
        int offset = parseOffset(id);
        if (offset == 0L) {
            return DateTimeZone.UTC;
        } else {
            id = printOffset(offset);
            return fixedOffsetZone(id, offset);
        }
    }
    throw new IllegalArgumentException(""The datetime zone id '"" + id + ""' is not recognised"");
}","public void test022() throws Throwable {
    DateTimeZone.forID((String) null);
}",""
"public final String getName(long instant) {
    return getName(instant, null);
}","public void test033() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    dateTimeZone0.getName(764L);
}","/**
 * Gets the long name of this datetime zone suitable for display using
 * the default locale.
 * <p>
 * If the name is not available for the locale, then this method returns a
 * string in the format <code>[+-]hh:mm</code>.
 *
 * @param instant  milliseconds from 1970-01-01T00:00:00Z to get the name for
 * @return the human-readable long name in the default locale
 */"
"public static DateTimeZone forOffsetHours(int hoursOffset) throws IllegalArgumentException {
    return forOffsetHoursMinutes(hoursOffset, 0);
}","public void test044() throws Throwable {
    DateTimeZone.forOffsetHours(57);
}","/**
 * Gets a time zone instance for the specified offset to UTC in hours.
 * This method assumes standard length hours.
 * <p>
 * This factory is a convenient way of constructing zones with a fixed offset.
 *
 * @param hoursOffset  the offset in hours from UTC
 * @return the DateTimeZone object for the offset
 * @throws IllegalArgumentException if the offset is too large or too small
 */"
"public static void setNameProvider(NameProvider nameProvider) throws SecurityException {
    SecurityManager sm = System.getSecurityManager();
    if (sm != null) {
        sm.checkPermission(new JodaTimePermission(""DateTimeZone.setNameProvider""));
    }
    setNameProvider0(nameProvider);
}","public void test055() throws Throwable {
    NameProvider nameProvider0 = DateTimeZone.getNameProvider();
    DateTimeZone.setNameProvider(nameProvider0);
}","/**
 * Sets the name provider factory.
 * <p>
 * The name provider is a pluggable instance factory that supplies the
 * names of each DateTimeZone.
 *
 * @param nameProvider  provider to use, or null for default
 * @throws SecurityException if you do not have the permission DateTimeZone.setNameProvider
 * @throws IllegalArgumentException if the provider is invalid
 */"
"public final String getShortName(long instant) {
    return getShortName(instant, null);
}","public void test066() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    dateTimeZone0.UTC.getShortName(764L);
}","/**
 * Gets the short name of this datetime zone suitable for display using
 * the default locale.
 * <p>
 * If the name is not available for the locale, then this method returns a
 * string in the format <code>[+-]hh:mm</code>.
 *
 * @param instant  milliseconds from 1970-01-01T00:00:00Z to get the name for
 * @return the human-readable short name in the default locale
 */"
"public String getName(long instant, Locale locale) {
    if (locale == null) {
        locale = Locale.getDefault();
    }
    String nameKey = getNameKey(instant);
    if (nameKey == null) {
        return iID;
    }
    String name = cNameProvider.getName(locale, iID, nameKey);
    if (name != null) {
        return name;
    }
    return printOffset(getOffset(instant));
}","public void test077() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    Locale locale0 = Locale.ITALY;
    dateTimeZone0.getName((-28378000L), locale0);
}","/**
 * Gets the long name of this datetime zone suitable for display using
 * the specified locale.
 * <p>
 * If the name is not available for the locale, then this method returns a
 * string in the format <code>[+-]hh:mm</code>.
 *
 * @param instant  milliseconds from 1970-01-01T00:00:00Z to get the name for
 * @param locale  the locale to get the name for
 * @return the human-readable long name in the specified locale
 */"
"public String toString() {
    return getID();
}","public void test088() throws Throwable {
    DateTimeZone.getDefault();
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    DefaultNameProvider defaultNameProvider0 = new DefaultNameProvider();
    DateTimeZone.setNameProvider(defaultNameProvider0);
    dateTimeZone0.toString();
}","/**
 * Gets the datetime zone as a string, which is simply its ID.
 * @return the id of the zone
 */"
"public static DateTimeZone forOffsetMillis(int millisOffset) {
    String id = printOffset(millisOffset);
    return fixedOffsetZone(id, millisOffset);
}","public void test099() throws Throwable {
    DateTimeZone.forOffsetMillis((-430));
}","/**
 * Gets a time zone instance for the specified offset to UTC in milliseconds.
 *
 * @param millisOffset  the offset in millis from UTC
 * @return the DateTimeZone object for the offset
 */"
"/**
 * Converts a local instant to a standard UTC instant with the same
 * local time. This conversion is used after performing a calculation
 * where the calculation was done using a simple local zone.
 *
 * @param instantLocal  the local instant to convert to UTC
 * @param strict  whether the conversion should reject non-existent local times
 * @return the UTC instant with the same local time,
 * @throws ArithmeticException if the result overflows a long
 * @throws IllegalArgumentException if the zone has no equivalent local time
 * @since 1.5
 */
public long convertLocalToUTC(long instantLocal, boolean strict) {
    // get the offset at instantLocal (first estimate)
    int offsetLocal = getOffset(instantLocal);
    // adjust instantLocal using the estimate and recalc the offset
    int offset = getOffset(instantLocal - offsetLocal);
    // if the offsets differ, we must be near a DST boundary
    if (offsetLocal != offset) {
        // if strict then always check if in DST gap
        // otherwise only check if zone in Western hemisphere (as the
        // value of offset is already correct for Eastern hemisphere)
        if (strict || offsetLocal < 0) {
            // determine if we are in the DST gap
            long nextLocal = nextTransition(instantLocal - offsetLocal);
            if (nextLocal == (instantLocal - offsetLocal)) {
                nextLocal = Long.MAX_VALUE;
            }
            long nextAdjusted = nextTransition(instantLocal - offset);
            if (nextAdjusted == (instantLocal - offset)) {
                nextAdjusted = Long.MAX_VALUE;
            }
            if (nextLocal != nextAdjusted) {
                // yes we are in the DST gap
                if (strict) {
                    // DST gap is not acceptable
                    throw new IllegalArgumentException(""Illegal instant due to time zone offset transition: "" + DateTimeFormat.forPattern(""yyyy-MM-dd'T'HH:mm:ss.SSS"").print(new Instant(instantLocal)) + "" ("" + getID() + "")"");
                } else {
                    // DST gap is acceptable, but for the Western hemisphere
                    // the offset is wrong and will result in local times
                    // before the cutover so use the offsetLocal instead
                    offset = offsetLocal;
                }
            }
        }
    }
    // check for overflow
    long instantUTC = instantLocal - offset;
    // If there is a sign change, but the two values have different signs...
    if ((instantLocal ^ instantUTC) < 0 && (instantLocal ^ offset) < 0) {
        throw new ArithmeticException(""Subtracting time zone offset caused overflow"");
    }
    return instantUTC;
}","public void test1010() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    dateTimeZone0.convertLocalToUTC(3600L, false);
}","/**
 * Converts a local instant to a standard UTC instant with the same
 * local time attempting to use the same offset as the original.
 * <p>
 * This conversion is used after performing a calculation
 * where the calculation was done using a simple local zone.
 * Whenever possible, the same offset as the original offset will be used.
 * This is most significant during a daylight savings overlap.
 *
 * @param instantLocal  the local instant to convert to UTC
 * @param strict  whether the conversion should reject non-existent local times
 * @param originalInstantUTC  the original instant that the calculation is based on
 * @return the UTC instant with the same local time,
 * @throws ArithmeticException if the result overflows a long
 * @throws IllegalArgumentException if the zone has no equivalent local time
 * @since 2.0
 */"
"public static DateTimeZone forTimeZone(TimeZone zone) {
    if (zone == null) {
        return getDefault();
    }
    final String id = zone.getID();
    if (id.equals(""UTC"")) {
        return DateTimeZone.UTC;
    }
    // Convert from old alias before consulting provider since they may differ.
    DateTimeZone dtz = null;
    String convId = getConvertedId(id);
    if (convId != null) {
        dtz = cProvider.getZone(convId);
    }
    if (dtz == null) {
        dtz = cProvider.getZone(id);
    }
    if (dtz != null) {
        return dtz;
    }
    // Support GMT+/-hh:mm formats
    if (convId == null) {
        convId = zone.getDisplayName();
        if (convId.startsWith(""GMT+"") || convId.startsWith(""GMT-"")) {
            convId = convId.substring(3);
            int offset = parseOffset(convId);
            if (offset == 0L) {
                return DateTimeZone.UTC;
            } else {
                convId = printOffset(offset);
                return fixedOffsetZone(convId, offset);
            }
        }
    }
    throw new IllegalArgumentException(""The datetime zone id '"" + id + ""' is not recognised"");
}","public void test1111() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    TimeZone timeZone0 = dateTimeZone0.toTimeZone();
    DateTimeZone.forTimeZone(timeZone0);
}","/**
 * Gets a time zone instance for a JDK TimeZone.
 * <p>
 * DateTimeZone only accepts a subset of the IDs from TimeZone. The
 * excluded IDs are the short three letter form (except UTC). This
 * method will attempt to convert between time zones created using the
 * short IDs and the full version.
 * <p>
 * This method is not designed to parse time zones with rules created by
 * applications using <code>SimpleTimeZone</code> directly.
 *
 * @param zone  the zone to convert, null means default
 * @return the DateTimeZone object for the zone
 * @throws IllegalArgumentException if the zone is not recognised
 */"
"public static DateTimeZone forTimeZone(TimeZone zone) {
    if (zone == null) {
        return getDefault();
    }
    final String id = zone.getID();
    if (id.equals(""UTC"")) {
        return DateTimeZone.UTC;
    }
    // Convert from old alias before consulting provider since they may differ.
    DateTimeZone dtz = null;
    String convId = getConvertedId(id);
    if (convId != null) {
        dtz = cProvider.getZone(convId);
    }
    if (dtz == null) {
        dtz = cProvider.getZone(id);
    }
    if (dtz != null) {
        return dtz;
    }
    // Support GMT+/-hh:mm formats
    if (convId == null) {
        convId = zone.getDisplayName();
        if (convId.startsWith(""GMT+"") || convId.startsWith(""GMT-"")) {
            convId = convId.substring(3);
            int offset = parseOffset(convId);
            if (offset == 0L) {
                return DateTimeZone.UTC;
            } else {
                convId = printOffset(offset);
                return fixedOffsetZone(convId, offset);
            }
        }
    }
    throw new IllegalArgumentException(""The datetime zone id '"" + id + ""' is not recognised"");
}","public void test1212() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    DateTimeZone.forTimeZone(timeZone0);
}","/**
 * Gets a time zone instance for a JDK TimeZone.
 * <p>
 * DateTimeZone only accepts a subset of the IDs from TimeZone. The
 * excluded IDs are the short three letter form (except UTC). This
 * method will attempt to convert between time zones created using the
 * short IDs and the full version.
 * <p>
 * This method is not designed to parse time zones with rules created by
 * applications using <code>SimpleTimeZone</code> directly.
 *
 * @param zone  the zone to convert, null means default
 * @return the DateTimeZone object for the zone
 * @throws IllegalArgumentException if the zone is not recognised
 */"
"public DateTimeZone getZone() {
    Chronology base;
    if ((base = iBase) != null) {
        return base.getZone();
    }
    return null;
}","public void test1313() throws Throwable {
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
    buddhistChronology0.getZone();
}",""
"//-----------------------------------------------------------------------
/**
 * Gets a time zone instance for the specified time zone id.
 * <p>
 * The time zone id may be one of those returned by getAvailableIDs.
 * Short ids, as accepted by {@link java.util.TimeZone}, are not accepted.
 * All IDs must be specified in the long format.
 * The exception is UTC, which is an acceptable id.
 * <p>
 * Alternatively a locale independent, fixed offset, datetime zone can
 * be specified. The form <code>[+-]hh:mm</code> can be used.
 *
 * @param id  the ID of the datetime zone, null means default
 * @return the DateTimeZone object for the ID
 * @throws IllegalArgumentException if the ID is not recognised
 */
@FromString
public static DateTimeZone forID(String id) {
    if (id == null) {
        return getDefault();
    }
    if (id.equals(""UTC"")) {
        return DateTimeZone.UTC;
    }
    DateTimeZone zone = cProvider.getZone(id);
    if (zone != null) {
        return zone;
    }
    if (id.startsWith(""+"") || id.startsWith(""-"")) {
        int offset = parseOffset(id);
        if (offset == 0L) {
            return DateTimeZone.UTC;
        } else {
            id = printOffset(offset);
            return fixedOffsetZone(id, offset);
        }
    }
    throw new IllegalArgumentException(""The datetime zone id '"" + id + ""' is not recognised"");
}","public void test1414() throws Throwable {
    DateTimeZone.forID(""Bm&Tg $?baRci+e3q"");
}",""
"public static Set<String> getAvailableIDs() {
    return cAvailableIDs;
}","public void test1515() throws Throwable {
    DateTimeZone.getDefault();
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    DateTimeZone.getAvailableIDs();
}","/**
 * Gets all the available IDs supported.
 *
 * @return an unmodifiable Set of String IDs
 */"
"public long convertUTCToLocal(long instantUTC) {
    int offset = getOffset(instantUTC);
    long instantLocal = instantUTC + offset;
    // If there is a sign change, but the two values have the same sign...
    if ((instantUTC ^ instantLocal) < 0 && (instantUTC ^ offset) >= 0) {
        throw new ArithmeticException(""Adding time zone offset caused overflow"");
    }
    return instantLocal;
}","public void test1616() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    DefaultNameProvider defaultNameProvider0 = new DefaultNameProvider();
    dateTimeZone0.convertUTCToLocal(1L);
}","/**
 * Converts a standard UTC instant to a local instant with the same
 * local time. This conversion is used before performing a calculation
 * so that the calculation can be done using a simple local zone.
 *
 * @param instantUTC  the UTC instant to convert to local
 * @return the local instant with the same local time
 * @throws ArithmeticException if the result overflows a long
 * @since 1.5
 */"
"public static void setProvider(Provider provider) throws SecurityException {
    SecurityManager sm = System.getSecurityManager();
    if (sm != null) {
        sm.checkPermission(new JodaTimePermission(""DateTimeZone.setProvider""));
    }
    setProvider0(provider);
}","public void test1717() throws Throwable {
    DateTimeZone.setProvider((Provider) null);
}","/**
 * Sets the zone provider factory.
 * <p>
 * The zone provider is a pluggable instance factory that supplies the
 * actual instances of DateTimeZone.
 *
 * @param provider  provider to use, or null for default
 * @throws SecurityException if you do not have the permission DateTimeZone.setProvider
 * @throws IllegalArgumentException if the provider is invalid
 */"
"//-----------------------------------------------------------------------
/**
 * Gets the default time zone.
 * <p>
 * The default time zone is derived from the system property {@code user.timezone}.
 * If that is {@code null} or is not a valid identifier, then the value of the
 * JDK {@code TimeZone} default is converted. If that fails, {@code UTC} is used.
 * <p>
 * NOTE: If the {@code java.util.TimeZone} default is updated <i>after</i> calling this
 * method, then the change will not be picked up here.
 *
 * @return the default datetime zone object
 */
public static DateTimeZone getDefault() {
    DateTimeZone zone = cDefault;
    if (zone == null) {
        synchronized (DateTimeZone.class) {
            zone = cDefault;
            if (zone == null) {
                DateTimeZone temp = null;
                try {
                    try {
                        String id = System.getProperty(""user.timezone"");
                        if (id != null) {
                            // null check avoids stack overflow
                            temp = forID(id);
                        }
                    } catch (RuntimeException ex) {
                        // ignored
                    }
                    if (temp == null) {
                        temp = forTimeZone(TimeZone.getDefault());
                    }
                } catch (IllegalArgumentException ex) {
                    // ignored
                }
                if (temp == null) {
                    temp = UTC;
                }
                cDefault = zone = temp;
            }
        }
    }
    return zone;
}","public void test1818() throws Throwable {
    UTCProvider uTCProvider0 = new UTCProvider();
    DateTimeZone.setProvider(uTCProvider0);
    DateTimeZone.getDefault();
}",""
"public static DateTimeZone forTimeZone(TimeZone zone) {
    if (zone == null) {
        return getDefault();
    }
    final String id = zone.getID();
    if (id.equals(""UTC"")) {
        return DateTimeZone.UTC;
    }
    // Convert from old alias before consulting provider since they may differ.
    DateTimeZone dtz = null;
    String convId = getConvertedId(id);
    if (convId != null) {
        dtz = cProvider.getZone(convId);
    }
    if (dtz == null) {
        dtz = cProvider.getZone(id);
    }
    if (dtz != null) {
        return dtz;
    }
    // Support GMT+/-hh:mm formats
    if (convId == null) {
        convId = zone.getDisplayName();
        if (convId.startsWith(""GMT+"") || convId.startsWith(""GMT-"")) {
            convId = convId.substring(3);
            int offset = parseOffset(convId);
            if (offset == 0L) {
                return DateTimeZone.UTC;
            } else {
                convId = printOffset(offset);
                return fixedOffsetZone(convId, offset);
            }
        }
    }
    throw new IllegalArgumentException(""The datetime zone id '"" + id + ""' is not recognised"");
}","public void test1919() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(45, ""w#c)d f}r[Td"");
    DateTimeZone.forTimeZone(simpleTimeZone0);
    DateTimeZone.forTimeZone(simpleTimeZone0);
}","/**
 * Gets a time zone instance for a JDK TimeZone.
 * <p>
 * DateTimeZone only accepts a subset of the IDs from TimeZone. The
 * excluded IDs are the short three letter form (except UTC). This
 * method will attempt to convert between time zones created using the
 * short IDs and the full version.
 * <p>
 * This method is not designed to parse time zones with rules created by
 * applications using <code>SimpleTimeZone</code> directly.
 *
 * @param zone  the zone to convert, null means default
 * @return the DateTimeZone object for the zone
 * @throws IllegalArgumentException if the zone is not recognised
 */"
"protected Object writeReplace() throws ObjectStreamException {
    return new Stub(iID);
}","public void test2020() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    dateTimeZone0.UTC.writeReplace();
}","/**
 * By default, when DateTimeZones are serialized, only a ""stub"" object
 * referring to the id is written out. When the stub is read in, it
 * replaces itself with a DateTimeZone object.
 * @return a stub object to go in the stream
 */"
"//-----------------------------------------------------------------------
/**
 * Gets the zone provider factory.
 * <p>
 * The zone provider is a pluggable instance factory that supplies the
 * actual instances of DateTimeZone.
 *
 * @return the provider
 */
public static Provider getProvider() {
    return cProvider;
}","public void test2121() throws Throwable {
    DateTimeZone.getProvider();
}",""
"public final String getName(long instant) {
    return getName(instant, null);
}","public void test2222() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(770);
    dateTimeZone0.getName((long) 770);
}","/**
 * Gets the long name of this datetime zone suitable for display using
 * the default locale.
 * <p>
 * If the name is not available for the locale, then this method returns a
 * string in the format <code>[+-]hh:mm</code>.
 *
 * @param instant  milliseconds from 1970-01-01T00:00:00Z to get the name for
 * @return the human-readable long name in the default locale
 */"
"public long convertUTCToLocal(long instantUTC) {
    int offset = getOffset(instantUTC);
    long instantLocal = instantUTC + offset;
    // If there is a sign change, but the two values have the same sign...
    if ((instantUTC ^ instantLocal) < 0 && (instantUTC ^ offset) >= 0) {
        throw new ArithmeticException(""Adding time zone offset caused overflow"");
    }
    return instantLocal;
}","public void test2323() throws Throwable {
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    fixedDateTimeZone0.isFixed();
    fixedDateTimeZone0.convertUTCToLocal((-31L));
}","/**
 * Converts a standard UTC instant to a local instant with the same
 * local time. This conversion is used before performing a calculation
 * so that the calculation can be done using a simple local zone.
 *
 * @param instantUTC  the UTC instant to convert to local
 * @return the local instant with the same local time
 * @throws ArithmeticException if the result overflows a long
 * @since 1.5
 */"
"public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {
    if (hoursOffset == 0 && minutesOffset == 0) {
        return DateTimeZone.UTC;
    }
    if (minutesOffset < 0 || minutesOffset > 59) {
        throw new IllegalArgumentException(""Minutes out of range: "" + minutesOffset);
    }
    int offset = 0;
    try {
        int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);
        if (hoursInMinutes < 0) {
            minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);
        } else {
            minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);
        }
        offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);
    } catch (ArithmeticException ex) {
        throw new IllegalArgumentException(""Offset is too large"");
    }
    return forOffsetMillis(offset);
}","public void test2424() throws Throwable {
    DateTimeZone.forOffsetHoursMinutes((-75837680), (-75837680));
}","/**
 * Gets a time zone instance for the specified offset to UTC in hours and minutes.
 * This method assumes 60 minutes in an hour, and standard length minutes.
 * <p>
 * This factory is a convenient way of constructing zones with a fixed offset.
 * The minutes value is always positive and in the range 0 to 59.
 * If constructed with the values (-2, 30), the resulting zone is '-02:30'.
 *
 * @param hoursOffset  the offset in hours from UTC
 * @param minutesOffset  the offset in minutes from UTC, must be between 0 and 59 inclusive
 * @return the DateTimeZone object for the offset
 * @throws IllegalArgumentException if the offset or minute is too large or too small
 */"
"public static DateTimeZone forOffsetHours(int hoursOffset) throws IllegalArgumentException {
    return forOffsetHoursMinutes(hoursOffset, 0);
}","public void test2525() throws Throwable {
    DateTimeZone.forOffsetHours((-347));
}","/**
 * Gets a time zone instance for the specified offset to UTC in hours.
 * This method assumes standard length hours.
 * <p>
 * This factory is a convenient way of constructing zones with a fixed offset.
 *
 * @param hoursOffset  the offset in hours from UTC
 * @return the DateTimeZone object for the offset
 * @throws IllegalArgumentException if the offset is too large or too small
 */"
"public int getOffsetFromLocal(long instantLocal) {
    // get the offset at instantLocal (first estimate)
    int offsetLocal = getOffset(instantLocal);
    // adjust instantLocal using the estimate and recalc the offset
    int offsetAdjusted = getOffset(instantLocal - offsetLocal);
    // if the offsets differ, we must be near a DST boundary
    if (offsetLocal != offsetAdjusted) {
        // we need to ensure that time is always after the DST gap
        // this happens naturally for positive offsets, but not for negative
        if ((offsetLocal - offsetAdjusted) < 0) {
            // if we just return offsetAdjusted then the time is pushed
            // back before the transition, whereas it should be
            // on or after the transition
            long nextLocal = nextTransition(instantLocal - offsetLocal);
            long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);
            if (nextLocal != nextAdjusted) {
                return offsetLocal;
            }
        }
    }
    return offsetAdjusted;
}","public void test2626() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    dateTimeZone0.getOffsetFromLocal(2348L);
}","/**
 * Gets the millisecond offset to subtract from local time to get UTC time.
 * This offset can be used to undo adding the offset obtained by getOffset.
 *
 * <pre>
 * millisLocal == millisUTC   + getOffset(millisUTC)
 * millisUTC   == millisLocal - getOffsetFromLocal(millisLocal)
 * </pre>
 *
 * NOTE: After calculating millisLocal, some error may be introduced. At
 * offset transitions (due to DST or other historical changes), ranges of
 * local times may map to different UTC times.
 * <p>
 * This method will return an offset suitable for calculating an instant
 * after any DST gap. For example, consider a zone with a cutover
 * from 01:00 to 01:59:<br />
 * Input: 00:00  Output: 00:00<br />
 * Input: 00:30  Output: 00:30<br />
 * Input: 01:00  Output: 02:00<br />
 * Input: 01:30  Output: 02:30<br />
 * Input: 02:00  Output: 02:00<br />
 * Input: 02:30  Output: 02:30<br />
 * <p>
 * NOTE: The behaviour of this method changed in v1.5, with the emphasis
 * on returning a consistent result later along the time-line (shown above).
 *
 * @param instantLocal  the millisecond instant, relative to this time zone, to
 * get the offset for
 * @return the millisecond offset to subtract from local time to get UTC time
 */"
"public static DateTimeZone forOffsetMillis(int millisOffset) {
    String id = printOffset(millisOffset);
    return fixedOffsetZone(id, millisOffset);
}","public void test2727() throws Throwable {
    DateTimeZone.forOffsetMillis(0);
}","/**
 * Gets a time zone instance for the specified offset to UTC in milliseconds.
 *
 * @param millisOffset  the offset in millis from UTC
 * @return the DateTimeZone object for the offset
 */"
"public String getShortName(long instant, Locale locale) {
    if (locale == null) {
        locale = Locale.getDefault();
    }
    String nameKey = getNameKey(instant);
    if (nameKey == null) {
        return iID;
    }
    String name = cNameProvider.getShortName(locale, iID, nameKey);
    if (name != null) {
        return name;
    }
    return printOffset(getOffset(instant));
}","public void test2828() throws Throwable {
    Locale locale0 = Locale.TAIWAN;
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    fixedDateTimeZone0.getShortName(0L, locale0);
}","/**
 * Gets the short name of this datetime zone suitable for display using
 * the specified locale.
 * <p>
 * If the name is not available for the locale, then this method returns a
 * string in the format <code>[+-]hh:mm</code>.
 *
 * @param instant  milliseconds from 1970-01-01T00:00:00Z to get the name for
 * @param locale  the locale to get the name for
 * @return the human-readable short name in the specified locale
 */"
"public static DateTimeZone forTimeZone(TimeZone zone) {
    if (zone == null) {
        return getDefault();
    }
    final String id = zone.getID();
    if (id.equals(""UTC"")) {
        return DateTimeZone.UTC;
    }
    // Convert from old alias before consulting provider since they may differ.
    DateTimeZone dtz = null;
    String convId = getConvertedId(id);
    if (convId != null) {
        dtz = cProvider.getZone(convId);
    }
    if (dtz == null) {
        dtz = cProvider.getZone(id);
    }
    if (dtz != null) {
        return dtz;
    }
    // Support GMT+/-hh:mm formats
    if (convId == null) {
        convId = zone.getDisplayName();
        if (convId.startsWith(""GMT+"") || convId.startsWith(""GMT-"")) {
            convId = convId.substring(3);
            int offset = parseOffset(convId);
            if (offset == 0L) {
                return DateTimeZone.UTC;
            } else {
                convId = printOffset(offset);
                return fixedOffsetZone(convId, offset);
            }
        }
    }
    throw new IllegalArgumentException(""The datetime zone id '"" + id + ""' is not recognised"");
}","public void test2929() throws Throwable {
    DateTimeZone.forTimeZone((TimeZone) null);
}","/**
 * Gets a time zone instance for a JDK TimeZone.
 * <p>
 * DateTimeZone only accepts a subset of the IDs from TimeZone. The
 * excluded IDs are the short three letter form (except UTC). This
 * method will attempt to convert between time zones created using the
 * short IDs and the full version.
 * <p>
 * This method is not designed to parse time zones with rules created by
 * applications using <code>SimpleTimeZone</code> directly.
 *
 * @param zone  the zone to convert, null means default
 * @return the DateTimeZone object for the zone
 * @throws IllegalArgumentException if the zone is not recognised
 */"
"public final String getShortName(long instant) {
    return getShortName(instant, null);
}","public void test3030() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    LocalDateTime localDateTime0 = new LocalDateTime(24L);
    dateTimeZone0.getShortName(24L);
}","/**
 * Gets the short name of this datetime zone suitable for display using
 * the default locale.
 * <p>
 * If the name is not available for the locale, then this method returns a
 * string in the format <code>[+-]hh:mm</code>.
 *
 * @param instant  milliseconds from 1970-01-01T00:00:00Z to get the name for
 * @return the human-readable short name in the default locale
 */"
"public int getOffsetFromLocal(long instantLocal) {
    // get the offset at instantLocal (first estimate)
    int offsetLocal = getOffset(instantLocal);
    // adjust instantLocal using the estimate and recalc the offset
    int offsetAdjusted = getOffset(instantLocal - offsetLocal);
    // if the offsets differ, we must be near a DST boundary
    if (offsetLocal != offsetAdjusted) {
        // we need to ensure that time is always after the DST gap
        // this happens naturally for positive offsets, but not for negative
        if ((offsetLocal - offsetAdjusted) < 0) {
            // if we just return offsetAdjusted then the time is pushed
            // back before the transition, whereas it should be
            // on or after the transition
            long nextLocal = nextTransition(instantLocal - offsetLocal);
            long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);
            if (nextLocal != nextAdjusted) {
                return offsetLocal;
            }
        }
    }
    return offsetAdjusted;
}","public void test3131() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    dateTimeZone0.getOffsetFromLocal(9223372036854775804L);
}","/**
 * Gets the millisecond offset to subtract from local time to get UTC time.
 * This offset can be used to undo adding the offset obtained by getOffset.
 *
 * <pre>
 * millisLocal == millisUTC   + getOffset(millisUTC)
 * millisUTC   == millisLocal - getOffsetFromLocal(millisLocal)
 * </pre>
 *
 * NOTE: After calculating millisLocal, some error may be introduced. At
 * offset transitions (due to DST or other historical changes), ranges of
 * local times may map to different UTC times.
 * <p>
 * This method will return an offset suitable for calculating an instant
 * after any DST gap. For example, consider a zone with a cutover
 * from 01:00 to 01:59:<br />
 * Input: 00:00  Output: 00:00<br />
 * Input: 00:30  Output: 00:30<br />
 * Input: 01:00  Output: 02:00<br />
 * Input: 01:30  Output: 02:30<br />
 * Input: 02:00  Output: 02:00<br />
 * Input: 02:30  Output: 02:30<br />
 * <p>
 * NOTE: The behaviour of this method changed in v1.5, with the emphasis
 * on returning a consistent result later along the time-line (shown above).
 *
 * @param instantLocal  the millisecond instant, relative to this time zone, to
 * get the offset for
 * @return the millisecond offset to subtract from local time to get UTC time
 */"
"//-----------------------------------------------------------------------
/**
 * Returns true if this time zone has no transitions.
 *
 * @return true if no transitions
 */
public abstract boolean isFixed();","public void test3232() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    dateTimeZone0.isStandardOffset(9223372036854775807L);
    dateTimeZone0.isFixed();
}",""
"public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {
    if (hoursOffset == 0 && minutesOffset == 0) {
        return DateTimeZone.UTC;
    }
    if (minutesOffset < 0 || minutesOffset > 59) {
        throw new IllegalArgumentException(""Minutes out of range: "" + minutesOffset);
    }
    int offset = 0;
    try {
        int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);
        if (hoursInMinutes < 0) {
            minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);
        } else {
            minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);
        }
        offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);
    } catch (ArithmeticException ex) {
        throw new IllegalArgumentException(""Offset is too large"");
    }
    return forOffsetMillis(offset);
}","public void test3333() throws Throwable {
    DateTimeZone.forOffsetHoursMinutes(60, 60);
}","/**
 * Gets a time zone instance for the specified offset to UTC in hours and minutes.
 * This method assumes 60 minutes in an hour, and standard length minutes.
 * <p>
 * This factory is a convenient way of constructing zones with a fixed offset.
 * The minutes value is always positive and in the range 0 to 59.
 * If constructed with the values (-2, 30), the resulting zone is '-02:30'.
 *
 * @param hoursOffset  the offset in hours from UTC
 * @param minutesOffset  the offset in minutes from UTC, must be between 0 and 59 inclusive
 * @return the DateTimeZone object for the offset
 * @throws IllegalArgumentException if the offset or minute is too large or too small
 */"
"public static void setDefault(DateTimeZone zone) throws SecurityException {
    SecurityManager sm = System.getSecurityManager();
    if (sm != null) {
        sm.checkPermission(new JodaTimePermission(""DateTimeZone.setDefault""));
    }
    if (zone == null) {
        throw new IllegalArgumentException(""The datetime zone must not be null"");
    }
    synchronized (DateTimeZone.class) {
        cDefault = zone;
    }
}","public void test3434() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    dateTimeZone0.UTC.isStandardOffset(1268L);
    DateTimeZone.setDefault(dateTimeZone0);
}","/**
 * Sets the default time zone.
 * <p>
 * NOTE: Calling this method does <i>not</i> set the {@code java.util.TimeZone} default.
 *
 * @param zone  the default datetime zone object, must not be null
 * @throws IllegalArgumentException if the zone is null
 * @throws SecurityException if the application has insufficient security rights
 */"
"public static DateTimeZone forTimeZone(TimeZone zone) {
    if (zone == null) {
        return getDefault();
    }
    final String id = zone.getID();
    if (id.equals(""UTC"")) {
        return DateTimeZone.UTC;
    }
    // Convert from old alias before consulting provider since they may differ.
    DateTimeZone dtz = null;
    String convId = getConvertedId(id);
    if (convId != null) {
        dtz = cProvider.getZone(convId);
    }
    if (dtz == null) {
        dtz = cProvider.getZone(id);
    }
    if (dtz != null) {
        return dtz;
    }
    // Support GMT+/-hh:mm formats
    if (convId == null) {
        convId = zone.getDisplayName();
        if (convId.startsWith(""GMT+"") || convId.startsWith(""GMT-"")) {
            convId = convId.substring(3);
            int offset = parseOffset(convId);
            if (offset == 0L) {
                return DateTimeZone.UTC;
            } else {
                convId = printOffset(offset);
                return fixedOffsetZone(convId, offset);
            }
        }
    }
    throw new IllegalArgumentException(""The datetime zone id '"" + id + ""' is not recognised"");
}","public void test3535() throws Throwable {
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    TimeZone timeZone0 = fixedDateTimeZone0.toTimeZone();
    DateTimeZone.forTimeZone(timeZone0);
}","/**
 * Gets a time zone instance for a JDK TimeZone.
 * <p>
 * DateTimeZone only accepts a subset of the IDs from TimeZone. The
 * excluded IDs are the short three letter form (except UTC). This
 * method will attempt to convert between time zones created using the
 * short IDs and the full version.
 * <p>
 * This method is not designed to parse time zones with rules created by
 * applications using <code>SimpleTimeZone</code> directly.
 *
 * @param zone  the zone to convert, null means default
 * @return the DateTimeZone object for the zone
 * @throws IllegalArgumentException if the zone is not recognised
 */"
"public static void setDefault(DateTimeZone zone) throws SecurityException {
    SecurityManager sm = System.getSecurityManager();
    if (sm != null) {
        sm.checkPermission(new JodaTimePermission(""DateTimeZone.setDefault""));
    }
    if (zone == null) {
        throw new IllegalArgumentException(""The datetime zone must not be null"");
    }
    synchronized (DateTimeZone.class) {
        cDefault = zone;
    }
}","public void test3636() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    DateTimeZone.setDefault(dateTimeZone0);
}","/**
 * Sets the default time zone.
 * <p>
 * NOTE: Calling this method does <i>not</i> set the {@code java.util.TimeZone} default.
 *
 * @param zone  the default datetime zone object, must not be null
 * @throws IllegalArgumentException if the zone is null
 * @throws SecurityException if the application has insufficient security rights
 */"
"/**
 * Converts a local instant to a standard UTC instant with the same
 * local time. This conversion is used after performing a calculation
 * where the calculation was done using a simple local zone.
 *
 * @param instantLocal  the local instant to convert to UTC
 * @param strict  whether the conversion should reject non-existent local times
 * @return the UTC instant with the same local time,
 * @throws ArithmeticException if the result overflows a long
 * @throws IllegalArgumentException if the zone has no equivalent local time
 * @since 1.5
 */
public long convertLocalToUTC(long instantLocal, boolean strict) {
    // get the offset at instantLocal (first estimate)
    int offsetLocal = getOffset(instantLocal);
    // adjust instantLocal using the estimate and recalc the offset
    int offset = getOffset(instantLocal - offsetLocal);
    // if the offsets differ, we must be near a DST boundary
    if (offsetLocal != offset) {
        // if strict then always check if in DST gap
        // otherwise only check if zone in Western hemisphere (as the
        // value of offset is already correct for Eastern hemisphere)
        if (strict || offsetLocal < 0) {
            // determine if we are in the DST gap
            long nextLocal = nextTransition(instantLocal - offsetLocal);
            if (nextLocal == (instantLocal - offsetLocal)) {
                nextLocal = Long.MAX_VALUE;
            }
            long nextAdjusted = nextTransition(instantLocal - offset);
            if (nextAdjusted == (instantLocal - offset)) {
                nextAdjusted = Long.MAX_VALUE;
            }
            if (nextLocal != nextAdjusted) {
                // yes we are in the DST gap
                if (strict) {
                    // DST gap is not acceptable
                    throw new IllegalArgumentException(""Illegal instant due to time zone offset transition: "" + DateTimeFormat.forPattern(""yyyy-MM-dd'T'HH:mm:ss.SSS"").print(new Instant(instantLocal)) + "" ("" + getID() + "")"");
                } else {
                    // DST gap is acceptable, but for the Western hemisphere
                    // the offset is wrong and will result in local times
                    // before the cutover so use the offsetLocal instead
                    offset = offsetLocal;
                }
            }
        }
    }
    // check for overflow
    long instantUTC = instantLocal - offset;
    // If there is a sign change, but the two values have different signs...
    if ((instantLocal ^ instantUTC) < 0 && (instantLocal ^ offset) < 0) {
        throw new ArithmeticException(""Subtracting time zone offset caused overflow"");
    }
    return instantUTC;
}","public void test3737() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    dateTimeZone0.convertLocalToUTC((-28377968L), false);
}","/**
 * Converts a local instant to a standard UTC instant with the same
 * local time attempting to use the same offset as the original.
 * <p>
 * This conversion is used after performing a calculation
 * where the calculation was done using a simple local zone.
 * Whenever possible, the same offset as the original offset will be used.
 * This is most significant during a daylight savings overlap.
 *
 * @param instantLocal  the local instant to convert to UTC
 * @param strict  whether the conversion should reject non-existent local times
 * @param originalInstantUTC  the original instant that the calculation is based on
 * @return the UTC instant with the same local time,
 * @throws ArithmeticException if the result overflows a long
 * @throws IllegalArgumentException if the zone has no equivalent local time
 * @since 2.0
 */"
"public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {
    if (hoursOffset == 0 && minutesOffset == 0) {
        return DateTimeZone.UTC;
    }
    if (minutesOffset < 0 || minutesOffset > 59) {
        throw new IllegalArgumentException(""Minutes out of range: "" + minutesOffset);
    }
    int offset = 0;
    try {
        int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);
        if (hoursInMinutes < 0) {
            minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);
        } else {
            minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);
        }
        offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);
    } catch (ArithmeticException ex) {
        throw new IllegalArgumentException(""Offset is too large"");
    }
    return forOffsetMillis(offset);
}","public void test3838() throws Throwable {
    DateTimeZone.forOffsetHoursMinutes(13, 13);
    DateTimeZone.forOffsetHoursMinutes(13, 13);
}","/**
 * Gets a time zone instance for the specified offset to UTC in hours and minutes.
 * This method assumes 60 minutes in an hour, and standard length minutes.
 * <p>
 * This factory is a convenient way of constructing zones with a fixed offset.
 * The minutes value is always positive and in the range 0 to 59.
 * If constructed with the values (-2, 30), the resulting zone is '-02:30'.
 *
 * @param hoursOffset  the offset in hours from UTC
 * @param minutesOffset  the offset in minutes from UTC, must be between 0 and 59 inclusive
 * @return the DateTimeZone object for the offset
 * @throws IllegalArgumentException if the offset or minute is too large or too small
 */"
"public static void setDefault(DateTimeZone zone) throws SecurityException {
    SecurityManager sm = System.getSecurityManager();
    if (sm != null) {
        sm.checkPermission(new JodaTimePermission(""DateTimeZone.setDefault""));
    }
    if (zone == null) {
        throw new IllegalArgumentException(""The datetime zone must not be null"");
    }
    synchronized (DateTimeZone.class) {
        cDefault = zone;
    }
}","public void test3939() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forID(""-[C!,</~4gjti"");
    // Undeclared exception!
    try {
        DateTimeZone.setDefault(dateTimeZone0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid format: \""-[C!,</~4gjti\"" is malformed at \""[C!,</~4gjti\""
        //
        verifyException(""org.joda.time.format.DateTimeFormatter"", e);
    }
}","/**
 * Sets the default time zone.
 * <p>
 * NOTE: Calling this method does <i>not</i> set the {@code java.util.TimeZone} default.
 *
 * @param zone  the default datetime zone object, must not be null
 * @throws IllegalArgumentException if the zone is null
 * @throws SecurityException if the application has insufficient security rights
 */"
"public final String getShortName(long instant) {
    return getShortName(instant, null);
}","public void test4040() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(13, 13);
    dateTimeZone0.getShortName((long) 13);
}","/**
 * Gets the short name of this datetime zone suitable for display using
 * the default locale.
 * <p>
 * If the name is not available for the locale, then this method returns a
 * string in the format <code>[+-]hh:mm</code>.
 *
 * @param instant  milliseconds from 1970-01-01T00:00:00Z to get the name for
 * @return the human-readable short name in the default locale
 */"
"public static void setDefault(DateTimeZone zone) throws SecurityException {
    SecurityManager sm = System.getSecurityManager();
    if (sm != null) {
        sm.checkPermission(new JodaTimePermission(""DateTimeZone.setDefault""));
    }
    if (zone == null) {
        throw new IllegalArgumentException(""The datetime zone must not be null"");
    }
    synchronized (DateTimeZone.class) {
        cDefault = zone;
    }
}","public void test4141() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forID(""+Ri"");
    // Undeclared exception!
    try {
        DateTimeZone.setDefault(dateTimeZone0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid format: \""+Ri\"" is malformed at \""Ri\""
        //
        verifyException(""org.joda.time.format.DateTimeFormatter"", e);
    }
}","/**
 * Sets the default time zone.
 * <p>
 * NOTE: Calling this method does <i>not</i> set the {@code java.util.TimeZone} default.
 *
 * @param zone  the default datetime zone object, must not be null
 * @throws IllegalArgumentException if the zone is null
 * @throws SecurityException if the application has insufficient security rights
 */"
"public static DateTimeZone forTimeZone(TimeZone zone) {
    if (zone == null) {
        return getDefault();
    }
    final String id = zone.getID();
    if (id.equals(""UTC"")) {
        return DateTimeZone.UTC;
    }
    // Convert from old alias before consulting provider since they may differ.
    DateTimeZone dtz = null;
    String convId = getConvertedId(id);
    if (convId != null) {
        dtz = cProvider.getZone(convId);
    }
    if (dtz == null) {
        dtz = cProvider.getZone(id);
    }
    if (dtz != null) {
        return dtz;
    }
    // Support GMT+/-hh:mm formats
    if (convId == null) {
        convId = zone.getDisplayName();
        if (convId.startsWith(""GMT+"") || convId.startsWith(""GMT-"")) {
            convId = convId.substring(3);
            int offset = parseOffset(convId);
            if (offset == 0L) {
                return DateTimeZone.UTC;
            } else {
                convId = printOffset(offset);
                return fixedOffsetZone(convId, offset);
            }
        }
    }
    throw new IllegalArgumentException(""The datetime zone id '"" + id + ""' is not recognised"");
}","public void test4242() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, """");
    DateTimeZone.forTimeZone(simpleTimeZone0);
}","/**
 * Gets a time zone instance for a JDK TimeZone.
 * <p>
 * DateTimeZone only accepts a subset of the IDs from TimeZone. The
 * excluded IDs are the short three letter form (except UTC). This
 * method will attempt to convert between time zones created using the
 * short IDs and the full version.
 * <p>
 * This method is not designed to parse time zones with rules created by
 * applications using <code>SimpleTimeZone</code> directly.
 *
 * @param zone  the zone to convert, null means default
 * @return the DateTimeZone object for the zone
 * @throws IllegalArgumentException if the zone is not recognised
 */"
"public static DateTimeZone forTimeZone(TimeZone zone) {
    if (zone == null) {
        return getDefault();
    }
    final String id = zone.getID();
    if (id.equals(""UTC"")) {
        return DateTimeZone.UTC;
    }
    // Convert from old alias before consulting provider since they may differ.
    DateTimeZone dtz = null;
    String convId = getConvertedId(id);
    if (convId != null) {
        dtz = cProvider.getZone(convId);
    }
    if (dtz == null) {
        dtz = cProvider.getZone(id);
    }
    if (dtz != null) {
        return dtz;
    }
    // Support GMT+/-hh:mm formats
    if (convId == null) {
        convId = zone.getDisplayName();
        if (convId.startsWith(""GMT+"") || convId.startsWith(""GMT-"")) {
            convId = convId.substring(3);
            int offset = parseOffset(convId);
            if (offset == 0L) {
                return DateTimeZone.UTC;
            } else {
                convId = printOffset(offset);
                return fixedOffsetZone(convId, offset);
            }
        }
    }
    throw new IllegalArgumentException(""The datetime zone id '"" + id + ""' is not recognised"");
}","public void test4343() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(29280000, ""-7"");
    DateTimeZone.forTimeZone(simpleTimeZone0);
}","/**
 * Gets a time zone instance for a JDK TimeZone.
 * <p>
 * DateTimeZone only accepts a subset of the IDs from TimeZone. The
 * excluded IDs are the short three letter form (except UTC). This
 * method will attempt to convert between time zones created using the
 * short IDs and the full version.
 * <p>
 * This method is not designed to parse time zones with rules created by
 * applications using <code>SimpleTimeZone</code> directly.
 *
 * @param zone  the zone to convert, null means default
 * @return the DateTimeZone object for the zone
 * @throws IllegalArgumentException if the zone is not recognised
 */"
"public static DateTimeZone forOffsetMillis(int millisOffset) {
    String id = printOffset(millisOffset);
    return fixedOffsetZone(id, millisOffset);
}","public void test4444() throws Throwable {
    DateTimeZone.forOffsetMillis(25);
}","/**
 * Gets a time zone instance for the specified offset to UTC in milliseconds.
 *
 * @param millisOffset  the offset in millis from UTC
 * @return the DateTimeZone object for the offset
 */"
"//-----------------------------------------------------------------------
/**
 * Gets a time zone instance for the specified time zone id.
 * <p>
 * The time zone id may be one of those returned by getAvailableIDs.
 * Short ids, as accepted by {@link java.util.TimeZone}, are not accepted.
 * All IDs must be specified in the long format.
 * The exception is UTC, which is an acceptable id.
 * <p>
 * Alternatively a locale independent, fixed offset, datetime zone can
 * be specified. The form <code>[+-]hh:mm</code> can be used.
 *
 * @param id  the ID of the datetime zone, null means default
 * @return the DateTimeZone object for the ID
 * @throws IllegalArgumentException if the ID is not recognised
 */
@FromString
public static DateTimeZone forID(String id) {
    if (id == null) {
        return getDefault();
    }
    if (id.equals(""UTC"")) {
        return DateTimeZone.UTC;
    }
    DateTimeZone zone = cProvider.getZone(id);
    if (zone != null) {
        return zone;
    }
    if (id.startsWith(""+"") || id.startsWith(""-"")) {
        int offset = parseOffset(id);
        if (offset == 0L) {
            return DateTimeZone.UTC;
        } else {
            id = printOffset(offset);
            return fixedOffsetZone(id, offset);
        }
    }
    throw new IllegalArgumentException(""The datetime zone id '"" + id + ""' is not recognised"");
}","public void test4545() throws Throwable {
    DateTimeZone.forID(""UTC"");
}",""
"public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {
    if (hoursOffset == 0 && minutesOffset == 0) {
        return DateTimeZone.UTC;
    }
    if (minutesOffset < 0 || minutesOffset > 59) {
        throw new IllegalArgumentException(""Minutes out of range: "" + minutesOffset);
    }
    int offset = 0;
    try {
        int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);
        if (hoursInMinutes < 0) {
            minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);
        } else {
            minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);
        }
        offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);
    } catch (ArithmeticException ex) {
        throw new IllegalArgumentException(""Offset is too large"");
    }
    return forOffsetMillis(offset);
}","public void test4646() throws Throwable {
    DateTimeZone.forOffsetHoursMinutes(0, 0);
}","/**
 * Gets a time zone instance for the specified offset to UTC in hours and minutes.
 * This method assumes 60 minutes in an hour, and standard length minutes.
 * <p>
 * This factory is a convenient way of constructing zones with a fixed offset.
 * The minutes value is always positive and in the range 0 to 59.
 * If constructed with the values (-2, 30), the resulting zone is '-02:30'.
 *
 * @param hoursOffset  the offset in hours from UTC
 * @param minutesOffset  the offset in minutes from UTC, must be between 0 and 59 inclusive
 * @return the DateTimeZone object for the offset
 * @throws IllegalArgumentException if the offset or minute is too large or too small
 */"
"//-----------------------------------------------------------------------
/**
 * Gets a time zone instance for the specified time zone id.
 * <p>
 * The time zone id may be one of those returned by getAvailableIDs.
 * Short ids, as accepted by {@link java.util.TimeZone}, are not accepted.
 * All IDs must be specified in the long format.
 * The exception is UTC, which is an acceptable id.
 * <p>
 * Alternatively a locale independent, fixed offset, datetime zone can
 * be specified. The form <code>[+-]hh:mm</code> can be used.
 *
 * @param id  the ID of the datetime zone, null means default
 * @return the DateTimeZone object for the ID
 * @throws IllegalArgumentException if the ID is not recognised
 */
@FromString
public static DateTimeZone forID(String id) {
    if (id == null) {
        return getDefault();
    }
    if (id.equals(""UTC"")) {
        return DateTimeZone.UTC;
    }
    DateTimeZone zone = cProvider.getZone(id);
    if (zone != null) {
        return zone;
    }
    if (id.startsWith(""+"") || id.startsWith(""-"")) {
        int offset = parseOffset(id);
        if (offset == 0L) {
            return DateTimeZone.UTC;
        } else {
            id = printOffset(offset);
            return fixedOffsetZone(id, offset);
        }
    }
    throw new IllegalArgumentException(""The datetime zone id '"" + id + ""' is not recognised"");
}","public void test4747() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    dateTimeZone0.getName(9223372036854775804L);
    DateTimeZone.forID(""-07:00"");
}",""
"/**
 * Converts a local instant to a standard UTC instant with the same
 * local time. This conversion is used after performing a calculation
 * where the calculation was done using a simple local zone.
 *
 * @param instantLocal  the local instant to convert to UTC
 * @param strict  whether the conversion should reject non-existent local times
 * @return the UTC instant with the same local time,
 * @throws ArithmeticException if the result overflows a long
 * @throws IllegalArgumentException if the zone has no equivalent local time
 * @since 1.5
 */
public long convertLocalToUTC(long instantLocal, boolean strict) {
    // get the offset at instantLocal (first estimate)
    int offsetLocal = getOffset(instantLocal);
    // adjust instantLocal using the estimate and recalc the offset
    int offset = getOffset(instantLocal - offsetLocal);
    // if the offsets differ, we must be near a DST boundary
    if (offsetLocal != offset) {
        // if strict then always check if in DST gap
        // otherwise only check if zone in Western hemisphere (as the
        // value of offset is already correct for Eastern hemisphere)
        if (strict || offsetLocal < 0) {
            // determine if we are in the DST gap
            long nextLocal = nextTransition(instantLocal - offsetLocal);
            if (nextLocal == (instantLocal - offsetLocal)) {
                nextLocal = Long.MAX_VALUE;
            }
            long nextAdjusted = nextTransition(instantLocal - offset);
            if (nextAdjusted == (instantLocal - offset)) {
                nextAdjusted = Long.MAX_VALUE;
            }
            if (nextLocal != nextAdjusted) {
                // yes we are in the DST gap
                if (strict) {
                    // DST gap is not acceptable
                    throw new IllegalArgumentException(""Illegal instant due to time zone offset transition: "" + DateTimeFormat.forPattern(""yyyy-MM-dd'T'HH:mm:ss.SSS"").print(new Instant(instantLocal)) + "" ("" + getID() + "")"");
                } else {
                    // DST gap is acceptable, but for the Western hemisphere
                    // the offset is wrong and will result in local times
                    // before the cutover so use the offsetLocal instead
                    offset = offsetLocal;
                }
            }
        }
    }
    // check for overflow
    long instantUTC = instantLocal - offset;
    // If there is a sign change, but the two values have different signs...
    if ((instantLocal ^ instantUTC) < 0 && (instantLocal ^ offset) < 0) {
        throw new ArithmeticException(""Subtracting time zone offset caused overflow"");
    }
    return instantUTC;
}","public void test4848() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forID(""+00:00"");
    dateTimeZone0.convertLocalToUTC((-4209L), true);
}","/**
 * Converts a local instant to a standard UTC instant with the same
 * local time attempting to use the same offset as the original.
 * <p>
 * This conversion is used after performing a calculation
 * where the calculation was done using a simple local zone.
 * Whenever possible, the same offset as the original offset will be used.
 * This is most significant during a daylight savings overlap.
 *
 * @param instantLocal  the local instant to convert to UTC
 * @param strict  whether the conversion should reject non-existent local times
 * @param originalInstantUTC  the original instant that the calculation is based on
 * @return the UTC instant with the same local time,
 * @throws ArithmeticException if the result overflows a long
 * @throws IllegalArgumentException if the zone has no equivalent local time
 * @since 2.0
 */"
"public static void setDefault(DateTimeZone zone) throws SecurityException {
    SecurityManager sm = System.getSecurityManager();
    if (sm != null) {
        sm.checkPermission(new JodaTimePermission(""DateTimeZone.setDefault""));
    }
    if (zone == null) {
        throw new IllegalArgumentException(""The datetime zone must not be null"");
    }
    synchronized (DateTimeZone.class) {
        cDefault = zone;
    }
}","public void test4949() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    dateTimeZone0.isLocalDateTimeGap((LocalDateTime) null);
    // Undeclared exception!
    try {
        DateTimeZone.setDefault(dateTimeZone0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.DateTimeZone"", e);
    }
}","/**
 * Sets the default time zone.
 * <p>
 * NOTE: Calling this method does <i>not</i> set the {@code java.util.TimeZone} default.
 *
 * @param zone  the default datetime zone object, must not be null
 * @throws IllegalArgumentException if the zone is null
 * @throws SecurityException if the application has insufficient security rights
 */"
"public static void setDefault(DateTimeZone zone) throws SecurityException {
    SecurityManager sm = System.getSecurityManager();
    if (sm != null) {
        sm.checkPermission(new JodaTimePermission(""DateTimeZone.setDefault""));
    }
    if (zone == null) {
        throw new IllegalArgumentException(""The datetime zone must not be null"");
    }
    synchronized (DateTimeZone.class) {
        cDefault = zone;
    }
}","public void test5050() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    dateTimeZone0.UTC.isLocalDateTimeGap((LocalDateTime) null);
    DateTimeZone.setDefault(dateTimeZone0);
}","/**
 * Sets the default time zone.
 * <p>
 * NOTE: Calling this method does <i>not</i> set the {@code java.util.TimeZone} default.
 *
 * @param zone  the default datetime zone object, must not be null
 * @throws IllegalArgumentException if the zone is null
 * @throws SecurityException if the application has insufficient security rights
 */"
"public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {
    if (hoursOffset == 0 && minutesOffset == 0) {
        return DateTimeZone.UTC;
    }
    if (minutesOffset < 0 || minutesOffset > 59) {
        throw new IllegalArgumentException(""Minutes out of range: "" + minutesOffset);
    }
    int offset = 0;
    try {
        int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);
        if (hoursInMinutes < 0) {
            minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);
        } else {
            minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);
        }
        offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);
    } catch (ArithmeticException ex) {
        throw new IllegalArgumentException(""Offset is too large"");
    }
    return forOffsetMillis(offset);
}","public void test5151() throws Throwable {
    DateTimeZone.forOffsetHoursMinutes(0, 2147483645);
}","/**
 * Gets a time zone instance for the specified offset to UTC in hours and minutes.
 * This method assumes 60 minutes in an hour, and standard length minutes.
 * <p>
 * This factory is a convenient way of constructing zones with a fixed offset.
 * The minutes value is always positive and in the range 0 to 59.
 * If constructed with the values (-2, 30), the resulting zone is '-02:30'.
 *
 * @param hoursOffset  the offset in hours from UTC
 * @param minutesOffset  the offset in minutes from UTC, must be between 0 and 59 inclusive
 * @return the DateTimeZone object for the offset
 * @throws IllegalArgumentException if the offset or minute is too large or too small
 */"
"public abstract long nextTransition(long instant);","public void test5252() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(13, 13);
    Instant instant0 = new Instant((long) 13);
    dateTimeZone0.UTC.getOffset((ReadableInstant) instant0);
    dateTimeZone0.getShortName((long) 13);
    dateTimeZone0.nextTransition(13);
}","/**
 * Advances the given instant to where the time zone offset or name changes.
 * If the instant returned is exactly the same as passed in, then
 * no changes occur after the given instant.
 *
 * @param instant  milliseconds from 1970-01-01T00:00:00Z
 * @return milliseconds from 1970-01-01T00:00:00Z
 */"
"public static void setDefault(DateTimeZone zone) throws SecurityException {
    SecurityManager sm = System.getSecurityManager();
    if (sm != null) {
        sm.checkPermission(new JodaTimePermission(""DateTimeZone.setDefault""));
    }
    if (zone == null) {
        throw new IllegalArgumentException(""The datetime zone must not be null"");
    }
    synchronized (DateTimeZone.class) {
        cDefault = zone;
    }
}","public void test5353() throws Throwable {
    DateTimeZone.setDefault((DateTimeZone) null);
}","/**
 * Sets the default time zone.
 * <p>
 * NOTE: Calling this method does <i>not</i> set the {@code java.util.TimeZone} default.
 *
 * @param zone  the default datetime zone object, must not be null
 * @throws IllegalArgumentException if the zone is null
 * @throws SecurityException if the application has insufficient security rights
 */"
"public final int getOffset(ReadableInstant instant) {
    if (instant == null) {
        return getOffset(DateTimeUtils.currentTimeMillis());
    }
    return getOffset(instant.getMillis());
}","public void test5454() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    dateTimeZone0.getOffset((ReadableInstant) null);
}","/**
 * Gets the millisecond offset to add to UTC to get local time.
 *
 * @param instant  instant to get the offset for, null means now
 * @return the millisecond offset to add to UTC to get local time
 */"
"public long getMillisKeepLocal(DateTimeZone newZone, long oldInstant) {
    if (newZone == null) {
        newZone = DateTimeZone.getDefault();
    }
    if (newZone == this) {
        return oldInstant;
    }
    long instantLocal = oldInstant + getOffset(oldInstant);
    return instantLocal - newZone.getOffsetFromLocal(instantLocal);
}","public void test5555() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    dateTimeZone0.UTC.getMillisKeepLocal((DateTimeZone) null, 9223372036854775807L);
}","/**
 * Gets the millisecond instant in another zone keeping the same local time.
 * <p>
 * The conversion is performed by converting the specified UTC millis to local
 * millis in this zone, then converting back to UTC millis in the new zone.
 *
 * @param newZone  the new zone, null means default
 * @param oldInstant  the UTC millisecond instant to convert
 * @return the UTC millisecond instant with the same local time in the new zone
 */"
"public final String getShortName(long instant) {
    return getShortName(instant, null);
}","public void test5656() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    dateTimeZone0.getShortName((-9223372036826397812L));
}","/**
 * Gets the short name of this datetime zone suitable for display using
 * the default locale.
 * <p>
 * If the name is not available for the locale, then this method returns a
 * string in the format <code>[+-]hh:mm</code>.
 *
 * @param instant  milliseconds from 1970-01-01T00:00:00Z to get the name for
 * @return the human-readable short name in the default locale
 */"
"public static DateTimeZone forTimeZone(TimeZone zone) {
    if (zone == null) {
        return getDefault();
    }
    final String id = zone.getID();
    if (id.equals(""UTC"")) {
        return DateTimeZone.UTC;
    }
    // Convert from old alias before consulting provider since they may differ.
    DateTimeZone dtz = null;
    String convId = getConvertedId(id);
    if (convId != null) {
        dtz = cProvider.getZone(convId);
    }
    if (dtz == null) {
        dtz = cProvider.getZone(id);
    }
    if (dtz != null) {
        return dtz;
    }
    // Support GMT+/-hh:mm formats
    if (convId == null) {
        convId = zone.getDisplayName();
        if (convId.startsWith(""GMT+"") || convId.startsWith(""GMT-"")) {
            convId = convId.substring(3);
            int offset = parseOffset(convId);
            if (offset == 0L) {
                return DateTimeZone.UTC;
            } else {
                convId = printOffset(offset);
                return fixedOffsetZone(convId, offset);
            }
        }
    }
    throw new IllegalArgumentException(""The datetime zone id '"" + id + ""' is not recognised"");
}","public void test5757() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2506, ""GMT-"");
    DateTimeZone.forTimeZone(simpleTimeZone0);
}","/**
 * Gets a time zone instance for a JDK TimeZone.
 * <p>
 * DateTimeZone only accepts a subset of the IDs from TimeZone. The
 * excluded IDs are the short three letter form (except UTC). This
 * method will attempt to convert between time zones created using the
 * short IDs and the full version.
 * <p>
 * This method is not designed to parse time zones with rules created by
 * applications using <code>SimpleTimeZone</code> directly.
 *
 * @param zone  the zone to convert, null means default
 * @return the DateTimeZone object for the zone
 * @throws IllegalArgumentException if the zone is not recognised
 */"
"/**
 * Converts a local instant to a standard UTC instant with the same
 * local time. This conversion is used after performing a calculation
 * where the calculation was done using a simple local zone.
 *
 * @param instantLocal  the local instant to convert to UTC
 * @param strict  whether the conversion should reject non-existent local times
 * @return the UTC instant with the same local time,
 * @throws ArithmeticException if the result overflows a long
 * @throws IllegalArgumentException if the zone has no equivalent local time
 * @since 1.5
 */
public long convertLocalToUTC(long instantLocal, boolean strict) {
    // get the offset at instantLocal (first estimate)
    int offsetLocal = getOffset(instantLocal);
    // adjust instantLocal using the estimate and recalc the offset
    int offset = getOffset(instantLocal - offsetLocal);
    // if the offsets differ, we must be near a DST boundary
    if (offsetLocal != offset) {
        // if strict then always check if in DST gap
        // otherwise only check if zone in Western hemisphere (as the
        // value of offset is already correct for Eastern hemisphere)
        if (strict || offsetLocal < 0) {
            // determine if we are in the DST gap
            long nextLocal = nextTransition(instantLocal - offsetLocal);
            if (nextLocal == (instantLocal - offsetLocal)) {
                nextLocal = Long.MAX_VALUE;
            }
            long nextAdjusted = nextTransition(instantLocal - offset);
            if (nextAdjusted == (instantLocal - offset)) {
                nextAdjusted = Long.MAX_VALUE;
            }
            if (nextLocal != nextAdjusted) {
                // yes we are in the DST gap
                if (strict) {
                    // DST gap is not acceptable
                    throw new IllegalArgumentException(""Illegal instant due to time zone offset transition: "" + DateTimeFormat.forPattern(""yyyy-MM-dd'T'HH:mm:ss.SSS"").print(new Instant(instantLocal)) + "" ("" + getID() + "")"");
                } else {
                    // DST gap is acceptable, but for the Western hemisphere
                    // the offset is wrong and will result in local times
                    // before the cutover so use the offsetLocal instead
                    offset = offsetLocal;
                }
            }
        }
    }
    // check for overflow
    long instantUTC = instantLocal - offset;
    // If there is a sign change, but the two values have different signs...
    if ((instantLocal ^ instantUTC) < 0 && (instantLocal ^ offset) < 0) {
        throw new ArithmeticException(""Subtracting time zone offset caused overflow"");
    }
    return instantUTC;
}","public void test5858() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    dateTimeZone0.convertLocalToUTC(9223372036854775807L, false);
}","/**
 * Converts a local instant to a standard UTC instant with the same
 * local time attempting to use the same offset as the original.
 * <p>
 * This conversion is used after performing a calculation
 * where the calculation was done using a simple local zone.
 * Whenever possible, the same offset as the original offset will be used.
 * This is most significant during a daylight savings overlap.
 *
 * @param instantLocal  the local instant to convert to UTC
 * @param strict  whether the conversion should reject non-existent local times
 * @param originalInstantUTC  the original instant that the calculation is based on
 * @return the UTC instant with the same local time,
 * @throws ArithmeticException if the result overflows a long
 * @throws IllegalArgumentException if the zone has no equivalent local time
 * @since 2.0
 */"
"/**
 * Converts a local instant to a standard UTC instant with the same
 * local time. This conversion is used after performing a calculation
 * where the calculation was done using a simple local zone.
 *
 * @param instantLocal  the local instant to convert to UTC
 * @param strict  whether the conversion should reject non-existent local times
 * @return the UTC instant with the same local time,
 * @throws ArithmeticException if the result overflows a long
 * @throws IllegalArgumentException if the zone has no equivalent local time
 * @since 1.5
 */
public long convertLocalToUTC(long instantLocal, boolean strict) {
    // get the offset at instantLocal (first estimate)
    int offsetLocal = getOffset(instantLocal);
    // adjust instantLocal using the estimate and recalc the offset
    int offset = getOffset(instantLocal - offsetLocal);
    // if the offsets differ, we must be near a DST boundary
    if (offsetLocal != offset) {
        // if strict then always check if in DST gap
        // otherwise only check if zone in Western hemisphere (as the
        // value of offset is already correct for Eastern hemisphere)
        if (strict || offsetLocal < 0) {
            // determine if we are in the DST gap
            long nextLocal = nextTransition(instantLocal - offsetLocal);
            if (nextLocal == (instantLocal - offsetLocal)) {
                nextLocal = Long.MAX_VALUE;
            }
            long nextAdjusted = nextTransition(instantLocal - offset);
            if (nextAdjusted == (instantLocal - offset)) {
                nextAdjusted = Long.MAX_VALUE;
            }
            if (nextLocal != nextAdjusted) {
                // yes we are in the DST gap
                if (strict) {
                    // DST gap is not acceptable
                    throw new IllegalArgumentException(""Illegal instant due to time zone offset transition: "" + DateTimeFormat.forPattern(""yyyy-MM-dd'T'HH:mm:ss.SSS"").print(new Instant(instantLocal)) + "" ("" + getID() + "")"");
                } else {
                    // DST gap is acceptable, but for the Western hemisphere
                    // the offset is wrong and will result in local times
                    // before the cutover so use the offsetLocal instead
                    offset = offsetLocal;
                }
            }
        }
    }
    // check for overflow
    long instantUTC = instantLocal - offset;
    // If there is a sign change, but the two values have different signs...
    if ((instantLocal ^ instantUTC) < 0 && (instantLocal ^ offset) < 0) {
        throw new ArithmeticException(""Subtracting time zone offset caused overflow"");
    }
    return instantUTC;
}","public void test5959() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    dateTimeZone0.convertLocalToUTC(9223372036854775807L, true);
}","/**
 * Converts a local instant to a standard UTC instant with the same
 * local time attempting to use the same offset as the original.
 * <p>
 * This conversion is used after performing a calculation
 * where the calculation was done using a simple local zone.
 * Whenever possible, the same offset as the original offset will be used.
 * This is most significant during a daylight savings overlap.
 *
 * @param instantLocal  the local instant to convert to UTC
 * @param strict  whether the conversion should reject non-existent local times
 * @param originalInstantUTC  the original instant that the calculation is based on
 * @return the UTC instant with the same local time,
 * @throws ArithmeticException if the result overflows a long
 * @throws IllegalArgumentException if the zone has no equivalent local time
 * @since 2.0
 */"
"public static DateTimeZone forTimeZone(TimeZone zone) {
    if (zone == null) {
        return getDefault();
    }
    final String id = zone.getID();
    if (id.equals(""UTC"")) {
        return DateTimeZone.UTC;
    }
    // Convert from old alias before consulting provider since they may differ.
    DateTimeZone dtz = null;
    String convId = getConvertedId(id);
    if (convId != null) {
        dtz = cProvider.getZone(convId);
    }
    if (dtz == null) {
        dtz = cProvider.getZone(id);
    }
    if (dtz != null) {
        return dtz;
    }
    // Support GMT+/-hh:mm formats
    if (convId == null) {
        convId = zone.getDisplayName();
        if (convId.startsWith(""GMT+"") || convId.startsWith(""GMT-"")) {
            convId = convId.substring(3);
            int offset = parseOffset(convId);
            if (offset == 0L) {
                return DateTimeZone.UTC;
            } else {
                convId = printOffset(offset);
                return fixedOffsetZone(convId, offset);
            }
        }
    }
    throw new IllegalArgumentException(""The datetime zone id '"" + id + ""' is not recognised"");
}","public void test6060() throws Throwable {
    UTCProvider uTCProvider0 = new UTCProvider();
    DateTimeZone.setProvider(uTCProvider0);
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(830, ""JST"");
    DateTimeZone.forTimeZone(simpleTimeZone0);
}","/**
 * Gets a time zone instance for a JDK TimeZone.
 * <p>
 * DateTimeZone only accepts a subset of the IDs from TimeZone. The
 * excluded IDs are the short three letter form (except UTC). This
 * method will attempt to convert between time zones created using the
 * short IDs and the full version.
 * <p>
 * This method is not designed to parse time zones with rules created by
 * applications using <code>SimpleTimeZone</code> directly.
 *
 * @param zone  the zone to convert, null means default
 * @return the DateTimeZone object for the zone
 * @throws IllegalArgumentException if the zone is not recognised
 */"
"public long convertUTCToLocal(long instantUTC) {
    int offset = getOffset(instantUTC);
    long instantLocal = instantUTC + offset;
    // If there is a sign change, but the two values have the same sign...
    if ((instantUTC ^ instantLocal) < 0 && (instantUTC ^ offset) >= 0) {
        throw new ArithmeticException(""Adding time zone offset caused overflow"");
    }
    return instantLocal;
}","public void test6161() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    dateTimeZone0.convertUTCToLocal((-9223372036829575809L));
}","/**
 * Converts a standard UTC instant to a local instant with the same
 * local time. This conversion is used before performing a calculation
 * so that the calculation can be done using a simple local zone.
 *
 * @param instantUTC  the UTC instant to convert to local
 * @return the local instant with the same local time
 * @throws ArithmeticException if the result overflows a long
 * @since 1.5
 */"
"/**
 * Converts a local instant to a standard UTC instant with the same
 * local time. This conversion is used after performing a calculation
 * where the calculation was done using a simple local zone.
 *
 * @param instantLocal  the local instant to convert to UTC
 * @param strict  whether the conversion should reject non-existent local times
 * @return the UTC instant with the same local time,
 * @throws ArithmeticException if the result overflows a long
 * @throws IllegalArgumentException if the zone has no equivalent local time
 * @since 1.5
 */
public long convertLocalToUTC(long instantLocal, boolean strict) {
    // get the offset at instantLocal (first estimate)
    int offsetLocal = getOffset(instantLocal);
    // adjust instantLocal using the estimate and recalc the offset
    int offset = getOffset(instantLocal - offsetLocal);
    // if the offsets differ, we must be near a DST boundary
    if (offsetLocal != offset) {
        // if strict then always check if in DST gap
        // otherwise only check if zone in Western hemisphere (as the
        // value of offset is already correct for Eastern hemisphere)
        if (strict || offsetLocal < 0) {
            // determine if we are in the DST gap
            long nextLocal = nextTransition(instantLocal - offsetLocal);
            if (nextLocal == (instantLocal - offsetLocal)) {
                nextLocal = Long.MAX_VALUE;
            }
            long nextAdjusted = nextTransition(instantLocal - offset);
            if (nextAdjusted == (instantLocal - offset)) {
                nextAdjusted = Long.MAX_VALUE;
            }
            if (nextLocal != nextAdjusted) {
                // yes we are in the DST gap
                if (strict) {
                    // DST gap is not acceptable
                    throw new IllegalArgumentException(""Illegal instant due to time zone offset transition: "" + DateTimeFormat.forPattern(""yyyy-MM-dd'T'HH:mm:ss.SSS"").print(new Instant(instantLocal)) + "" ("" + getID() + "")"");
                } else {
                    // DST gap is acceptable, but for the Western hemisphere
                    // the offset is wrong and will result in local times
                    // before the cutover so use the offsetLocal instead
                    offset = offsetLocal;
                }
            }
        }
    }
    // check for overflow
    long instantUTC = instantLocal - offset;
    // If there is a sign change, but the two values have different signs...
    if ((instantLocal ^ instantUTC) < 0 && (instantLocal ^ offset) < 0) {
        throw new ArithmeticException(""Subtracting time zone offset caused overflow"");
    }
    return instantUTC;
}","public void test6363() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""PRT"");
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
    dateTimeZone0.previousTransition(604800L);
    dateTimeZone0.convertLocalToUTC((-765399600001L), false);
}","/**
 * Converts a local instant to a standard UTC instant with the same
 * local time attempting to use the same offset as the original.
 * <p>
 * This conversion is used after performing a calculation
 * where the calculation was done using a simple local zone.
 * Whenever possible, the same offset as the original offset will be used.
 * This is most significant during a daylight savings overlap.
 *
 * @param instantLocal  the local instant to convert to UTC
 * @param strict  whether the conversion should reject non-existent local times
 * @param originalInstantUTC  the original instant that the calculation is based on
 * @return the UTC instant with the same local time,
 * @throws ArithmeticException if the result overflows a long
 * @throws IllegalArgumentException if the zone has no equivalent local time
 * @since 2.0
 */"
