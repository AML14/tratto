project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test011,"public void test011() throws Throwable {
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(ethiopicChronology0, dateTimeZone0);
    DateTimeField dateTimeField0 = zonedChronology0.centuryOfEra();
    long long0 = dateTimeField0.remainder(1);
    assertEquals(3660001L, long0);
}",0,
project,0,test022,"public void test022() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    DateMidnight dateMidnight0 = new DateMidnight((-2760L), dateTimeZone0);
    assertEquals((-57600000L), dateMidnight0.getMillis());
}",0,
project,0,test033,"public void test033() throws Throwable {
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
    DateTimeZone dateTimeZone0 = DateTimeZone.forID(""Asia/Shanghai"");
    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(ethiopicChronology0, dateTimeZone0);
    DateTimeField dateTimeField0 = zonedChronology0.secondOfMinute();
    int int0 = dateTimeField0.getDifference(0L, 60000L);
    assertEquals((-60), int0);
}",0,
project,0,test066,"public void test066() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""@LNr`+O6Q$"");
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gregorianChronology0, dateTimeZone0);
    DateTimeField dateTimeField0 = zonedChronology0.weekOfWeekyear();
    long long0 = dateTimeField0.add(0L, (long) 3);
    assertEquals(1814400000L, long0);
}",0,"assertEquals(1, long0)"
project,0,test088,"public void test088() throws Throwable {
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
    DateTimeZone dateTimeZone0 = DateTimeZone.forID(""Asia/Shanghai"");
    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(ethiopicChronology0, dateTimeZone0);
    DateTimeField dateTimeField0 = zonedChronology0.secondOfMinute();
    Locale locale0 = Locale.CHINESE;
    String string0 = dateTimeField0.getAsShortText((long) 1, locale0);
    assertEquals(""0"", string0);
}",0,
project,0,test099,"public void test099() throws Throwable {
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(ethiopicChronology0, dateTimeZone0);
    JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
    LocalTime localTime0 = new LocalTime((Chronology) julianChronology0);
    Period period0 = new Period(localTime0, localTime0);
    int[] intArray0 = zonedChronology0.get((ReadablePeriod) period0, (-18L), (-1L));
    assertArrayEquals(new int[] { 0, 0, 0, 0, 0, 0, 0, 17 }, intArray0);
}",0,
project,0,test1010,"public void test1010() throws Throwable {
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(ethiopicChronology0, dateTimeZone0);
    JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
    LocalTime localTime0 = new LocalTime((Chronology) julianChronology0);
    Period period0 = new Period(localTime0, localTime0);
    int[] intArray0 = zonedChronology0.get((ReadablePeriod) period0, 1L, (-1L));
    assertArrayEquals(new int[] { 0, 0, 0, 0, 0, 0, 0, (-2) }, intArray0);
}",0,
project,0,test1111,"public void test1111() throws Throwable {
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(julianChronology0, fixedDateTimeZone0);
    try {
        zonedChronology0.getDateTimeMillis(1, (-292275054), (-2303), 1, 0, (-292275054), 0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value -292275054 for secondOfMinute must be in the range [0,59]
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",0,
project,0,test1212,"public void test1212() throws Throwable {
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(iSOChronology0, fixedDateTimeZone0);
    try {
        zonedChronology0.getDateTimeMillis(5306, 0, 7, (-4616));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value -4616 for millisOfDay must be in the range [0,86400000]
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",0,
project,0,test1313,"public void test1313() throws Throwable {
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
    ZoneOffset zoneOffset0 = ZoneOffset.MIN;
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone0);
    DateTimeField dateTimeField0 = zonedChronology0.millisOfDay();
    long long0 = dateTimeField0.set(3214L, 1);
    assertEquals((-21599999L), long0);
}",0,"assertEquals(1, long0)"
project,0,test1414,"public void test1414() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2740);
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(ethiopicChronology0, dateTimeZone0);
    DurationField durationField0 = zonedChronology0.minutes();
    boolean boolean0 = durationField0.isPrecise();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test1616,"public void test1616() throws Throwable {
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gregorianChronology0, dateTimeZone0);
    DurationField durationField0 = zonedChronology0.years();
    int int0 = durationField0.getDifference(1, 0L);
    assertEquals(0, int0);
}",0,"assertEquals(0, int0)"
project,0,test1919,"public void test1919() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(886);
    JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(julianChronology0, dateTimeZone0);
    DateTimeField dateTimeField0 = zonedChronology0.hourOfHalfday();
    DurationField durationField0 = dateTimeField0.getRangeDurationField();
    assertEquals(""halfdays"", durationField0.getName());
}",0,assertNotNull(durationField0.getName())
project,0,test1920,"public void test1920() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(886);
    JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(julianChronology0, dateTimeZone0);
    DateTimeField dateTimeField0 = zonedChronology0.hourOfHalfday();
    DurationField durationField0 = dateTimeField0.getRangeDurationField();
    assertNotNull(durationField0);
}",0,assertNotNull(durationField0)
project,0,test2021,"public void test2021() throws Throwable {
    CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
    TimeZone timeZone0 = TimeZone.getTimeZone(""]H(%=&g"");
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(copticChronology0, dateTimeZone0);
    DateTimeField dateTimeField0 = zonedChronology0.dayOfMonth();
    int int0 = dateTimeField0.getMinimumValue();
    assertEquals(1, int0);
}",0,"assertEquals(0, int0)"
project,0,test2122,"public void test2122() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1765));
    CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(copticChronology0, dateTimeZone0);
    DateTimeField dateTimeField0 = zonedChronology0.secondOfMinute();
    DurationField durationField0 = dateTimeField0.getDurationField();
    assertEquals(""seconds"", durationField0.getName());
}",0,
project,0,test2123,"public void test2123() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1765));
    CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(copticChronology0, dateTimeZone0);
    DateTimeField dateTimeField0 = zonedChronology0.secondOfMinute();
    DurationField durationField0 = dateTimeField0.getDurationField();
    assertNotNull(durationField0);
}",0,
project,0,test2325,"public void test2325() throws Throwable {
    boolean boolean0 = ZonedChronology.useTimeArithmetic((DurationField) null);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test2426,"public void test2426() throws Throwable {
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(iSOChronology0, fixedDateTimeZone0);
    long long0 = zonedChronology0.getDateTimeMillis(1660L, 0, 0, 0, 0);
    assertEquals(0L, long0);
}",0,"assertEquals(1, long0)"
project,0,test2527,"public void test2527() throws Throwable {
    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
    LenientChronology lenientChronology0 = LenientChronology.getInstance(gregorianChronology0);
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(lenientChronology0, dateTimeZone0);
    long long0 = zonedChronology0.getDateTimeMillis(3155760000000L, 2147483061, (-1882), (-1529), (-1529));
    assertEquals(7734094603949471L, long0);
}",0,"assertEquals(1, long0)"
project,0,test2628,"public void test2628() throws Throwable {
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
    ZoneOffset zoneOffset0 = ZoneOffset.MIN;
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone0);
    long long0 = zonedChronology0.getDateTimeMillis(1, 1, 1, 0, 1, 1, 0);
    assertEquals((-42521522339000L), long0);
}",0,"assertEquals(1, long0)"
project,0,test2729,"public void test2729() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(buddhistChronology0, dateTimeZone0);
    long long0 = zonedChronology0.getDateTimeMillis(3864, 1, 1, 0);
    assertEquals(42633504000000L, long0);
}",0,"assertEquals(1, long0)"
project,0,test2830,"public void test2830() throws Throwable {
    IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
    LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(lenientChronology0, dateTimeZone0);
    long long0 = zonedChronology0.getDateTimeMillis(1, 1, 1, 1073741824);
    assertEquals((-42520513458176L), long0);
}",0,"assertEquals(1, long0)"
project,0,test2931,"public void test2931() throws Throwable {
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
    ZoneOffset zoneOffset0 = ZoneOffset.MIN;
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone0);
    try {
        zonedChronology0.getDateTimeMillis((long) 1, 4100, 0, 1, (-2673));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value 4100 for hourOfDay must be in the range [0,23]
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",0,
project,0,test3032,"public void test3032() throws Throwable {
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
    ZoneOffset zoneOffset0 = ZoneOffset.MIN;
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone0);
    DateTimeField dateTimeField0 = zonedChronology0.millisOfDay();
    long long0 = dateTimeField0.roundHalfFloor(10L);
    assertEquals(10L, long0);
}",0,"assertEquals(1, long0)"
project,0,test3133,"public void test3133() throws Throwable {
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
    DateTimeZone dateTimeZone0 = DateTimeZone.forID(""Asia/Shanghai"");
    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(ethiopicChronology0, dateTimeZone0);
    DateTimeField dateTimeField0 = zonedChronology0.secondOfMinute();
    long long0 = dateTimeField0.roundFloor(1);
    assertEquals(0L, long0);
}",0,"assertEquals(1, long0)"
project,0,test3234,"public void test3234() throws Throwable {
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
    ZoneOffset zoneOffset0 = ZoneOffset.MIN;
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone0);
    DateTimeField dateTimeField0 = zonedChronology0.millisOfDay();
    long long0 = dateTimeField0.getDifferenceAsLong(0L, 1107L);
    assertEquals((-1107L), long0);
}",0,"assertEquals(1, long0)"
project,0,test3335,"public void test3335() throws Throwable {
    CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
    TimeZone timeZone0 = TimeZone.getTimeZone(""]H(%=&g"");
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(copticChronology0, dateTimeZone0);
    DateTimeField dateTimeField0 = zonedChronology0.dayOfMonth();
    int int0 = dateTimeField0.getDifference(0, 30);
    assertEquals(0, int0);
}",0,"assertEquals(0, int0)"
project,0,test3537,"public void test3537() throws Throwable {
    GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
    IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_15_BASED;
    IslamicChronology islamicChronology0 = new IslamicChronology(gregorianChronology0, gregorianChronology0, islamicChronology_LeapYearPatternType0);
    StrictChronology strictChronology0 = StrictChronology.getInstance(islamicChronology0);
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(strictChronology0, dateTimeZone0);
    Chronology chronology0 = zonedChronology0.withUTC();
    assertSame(chronology0, strictChronology0);
}",0,
project,0,test3638,"public void test3638() throws Throwable {
    GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
    IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_15_BASED;
    IslamicChronology islamicChronology0 = new IslamicChronology(gregorianChronology0, gregorianChronology0, islamicChronology_LeapYearPatternType0);
    StrictChronology strictChronology0 = StrictChronology.getInstance(islamicChronology0);
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(strictChronology0, dateTimeZone0);
    DateTimeZone dateTimeZone1 = zonedChronology0.getZone();
    assertSame(dateTimeZone0, dateTimeZone1);
}",0,
project,0,test3941,"public void test3941() throws Throwable {
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
    ZoneOffset zoneOffset0 = ZoneOffset.MIN;
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone0);
    DateTimeField dateTimeField0 = zonedChronology0.millisOfDay();
    long long0 = dateTimeField0.addWrapField(10L, 1);
    assertEquals(11L, long0);
}",0,"assertEquals(1, long0)"
project,0,test4042,"public void test4042() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(23118750);
    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gJChronology0, dateTimeZone0);
    DateTimeField dateTimeField0 = zonedChronology0.monthOfYear();
    long long0 = dateTimeField0.addWrapField((long) 23118750, 23118750);
    assertEquals(15661518750L, long0);
}",0,"assertEquals(1, long0)"
project,0,test4143,"public void test4143() throws Throwable {
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
    ZoneOffset zoneOffset0 = ZoneOffset.MIN;
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone0);
    DateTimeField dateTimeField0 = zonedChronology0.millisOfDay();
    long long0 = dateTimeField0.add(1000L, 4);
    assertEquals(1004L, long0);
}",0,"assertEquals(1, long0)"
project,0,test4244,"public void test4244() throws Throwable {
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(ethiopicChronology0, dateTimeZone0);
    DateTimeField dateTimeField0 = zonedChronology0.centuryOfEra();
    long long0 = dateTimeField0.add((long) 0, 0);
    assertEquals(0L, long0);
}",0,"assertEquals(1, long0)"
project,0,test4547,"public void test4547() throws Throwable {
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(iSOChronology0, fixedDateTimeZone0);
    DurationField durationField0 = zonedChronology0.centuries();
    long long0 = durationField0.getDifferenceAsLong(0L, (-1278L));
    assertEquals(0L, long0);
}",0,"assertEquals(1, long0)"
project,0,test4648,"public void test4648() throws Throwable {
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(iSOChronology0, fixedDateTimeZone0);
    Weeks weeks0 = Weeks.weeks(2515);
    Duration duration0 = weeks0.toStandardDuration();
    Period period0 = duration0.toPeriod();
    long long0 = zonedChronology0.add((ReadablePeriod) period0, 0L, 1427);
    assertEquals(2170569744000000L, long0);
}",0,"assertEquals(1, long0)"
project,0,test4749,"public void test4749() throws Throwable {
    Weeks weeks0 = Weeks.weeks(2515);
    PeriodType periodType0 = weeks0.getPeriodType();
    Period period0 = new Period(0L, 816L, periodType0);
    assertEquals(1, period0.size());
}",0,"assertEquals(0, period0.size())"
project,0,test4951,"public void test4951() throws Throwable {
    GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
    IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_15_BASED;
    IslamicChronology islamicChronology0 = new IslamicChronology(gregorianChronology0, gregorianChronology0, islamicChronology_LeapYearPatternType0);
    StrictChronology strictChronology0 = StrictChronology.getInstance(islamicChronology0);
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(strictChronology0, dateTimeZone0);
    boolean boolean0 = zonedChronology0.equals((Object) null);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test5052,"public void test5052() throws Throwable {
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(buddhistChronology0, dateTimeZone0);
    AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
    zonedChronology0.assemble(assembledChronology_Fields0);
}",1,
project,0,test5153,"public void test5153() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
    ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(iSOChronology0, dateTimeZone0);
    Chronology chronology0 = zonedChronology0.withZone((DateTimeZone) null);
    chronology0.withZone(dateTimeZone0);
    assertNotSame(chronology0, zonedChronology0);
}",0,
project,0,test5254,"public void test5254() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone0);
    Chronology chronology0 = zonedChronology0.withZone(dateTimeZone0);
    assertSame(chronology0, zonedChronology0);
}",0,
project,0,test5355,"public void test5355() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    // Undeclared exception!
    try {
        ZonedChronology.getInstance((Chronology) null, dateTimeZone0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Must supply a chronology
        //
        verifyException(""org.joda.time.chrono.ZonedChronology"", e);
    }
}",1,
project,0,test5557,"public void test5557() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(buddhistChronology0, dateTimeZone0);
    DurationField durationField0 = zonedChronology0.years();
    long long0 = durationField0.getMillis((-302), 43200000L);
    assertEquals((-9530179200000L), long0);
}",0,"assertEquals(0, long0)"
project,0,test5658,"public void test5658() throws Throwable {
    GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
    IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_15_BASED;
    IslamicChronology islamicChronology0 = new IslamicChronology(gregorianChronology0, gregorianChronology0, islamicChronology_LeapYearPatternType0);
    StrictChronology strictChronology0 = StrictChronology.getInstance(islamicChronology0);
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(strictChronology0, dateTimeZone0);
    DurationField durationField0 = zonedChronology0.halfdays();
    long long0 = durationField0.getMillis(103507202396L, (long) 1);
    assertEquals(4471511143507200000L, long0);
}",0,"assertEquals(1, long0)"
project,0,test6062,"public void test6062() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone0);
    DateTimeField dateTimeField0 = zonedChronology0.minuteOfHour();
    LocalDateTime localDateTime0 = new LocalDateTime((Object) null);
    int[] intArray0 = new int[4];
    int int0 = dateTimeField0.getMinimumValue((ReadablePartial) localDateTime0, intArray0);
    assertEquals(0, int0);
}",0,"assertEquals(0, int0)"
project,0,test6163,"public void test6163() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone0);
    DateTimeField dateTimeField0 = zonedChronology0.minuteOfHour();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    String string0 = dateTimeField0.getAsText(1000000L, locale0);
    assertEquals(""16"", string0);
}",0,
project,0,test6264,"public void test6264() throws Throwable {
    CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(copticChronology0, fixedDateTimeZone0);
    DateTimeField dateTimeField0 = zonedChronology0.year();
    Locale locale0 = Locale.KOREA;
    long long0 = dateTimeField0.set((long) 1, ""7"", locale0);
    assertEquals((-52985231999999L), long0);
}",0,"assertEquals(1, long0)"
project,0,test6365,"public void test6365() throws Throwable {
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(ethiopicChronology0, dateTimeZone0);
    DateTimeField dateTimeField0 = zonedChronology0.centuryOfEra();
    JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
    LocalTime localTime0 = new LocalTime((Chronology) julianChronology0);
    int[] intArray0 = new int[2];
    int int0 = dateTimeField0.getMaximumValue((ReadablePartial) localTime0, intArray0);
    assertEquals(2922730, int0);
}",0,"assertEquals(0, int0)"
project,0,test6466,"public void test6466() throws Throwable {
    CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
    TimeZone timeZone0 = TimeZone.getTimeZone(""]H(%=&g"");
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(copticChronology0, dateTimeZone0);
    DateTimeField dateTimeField0 = zonedChronology0.dayOfMonth();
    LocalTime localTime0 = new LocalTime(dateTimeZone0);
    int int0 = dateTimeField0.getMaximumValue((ReadablePartial) localTime0);
    assertEquals(30, int0);
}",0,"assertEquals(1, int0)"
project,0,test6567,"public void test6567() throws Throwable {
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
    ZoneOffset zoneOffset0 = ZoneOffset.MIN;
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone0);
    DateTimeField dateTimeField0 = zonedChronology0.millisOfDay();
    int int0 = dateTimeField0.getMinimumValue((long) 1);
    assertEquals(0, int0);
}",0,"assertEquals(0, int0)"
project,0,test6668,"public void test6668() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gJChronology0, fixedDateTimeZone0);
    DateTimeField dateTimeField0 = zonedChronology0.yearOfCentury();
    SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(gJChronology0, dateTimeField0);
    DurationField durationField0 = skipDateTimeField0.getLeapDurationField();
    assertNull(durationField0);
}",0,assertNotNull(durationField0)
project,0,test6769,"public void test6769() throws Throwable {
    CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
    TimeZone timeZone0 = TimeZone.getTimeZone(""]H(%=&g"");
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(copticChronology0, dateTimeZone0);
    DateTimeField dateTimeField0 = zonedChronology0.dayOfMonth();
    GJYearOfEraDateTimeField gJYearOfEraDateTimeField0 = new GJYearOfEraDateTimeField(dateTimeField0, copticChronology0);
    DurationField durationField0 = gJYearOfEraDateTimeField0.getDurationField();
    assertNotNull(durationField0);
}",0,assertNotNull(durationField0)
project,0,test6770,"public void test6770() throws Throwable {
    CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
    TimeZone timeZone0 = TimeZone.getTimeZone(""]H(%=&g"");
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(copticChronology0, dateTimeZone0);
    DateTimeField dateTimeField0 = zonedChronology0.dayOfMonth();
    GJYearOfEraDateTimeField gJYearOfEraDateTimeField0 = new GJYearOfEraDateTimeField(dateTimeField0, copticChronology0);
    DurationField durationField0 = gJYearOfEraDateTimeField0.getDurationField();
    long long0 = durationField0.add((long) 30, 1);
    assertEquals(86400030L, long0);
}",0,"assertEquals(1, long0)"
project,0,test6972,"public void test6972() throws Throwable {
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(ethiopicChronology0, dateTimeZone0);
    DateTimeField dateTimeField0 = zonedChronology0.centuryOfEra();
    int int0 = dateTimeField0.getLeapAmount(0);
    assertEquals(0, int0);
}",0,"assertEquals(1, int0)"
project,0,test7073,"public void test7073() throws Throwable {
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(ethiopicChronology0, dateTimeZone0);
    DateTimeField dateTimeField0 = zonedChronology0.centuryOfEra();
    boolean boolean0 = dateTimeField0.isLenient();
    assertFalse(boolean0);
}",0,
project,0,test7275,"public void test7275() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone0);
    DateTimeField dateTimeField0 = zonedChronology0.minuteOfHour();
    SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(zonedChronology0, dateTimeField0, 0);
    DurationField durationField0 = skipDateTimeField0.getRangeDurationField();
    boolean boolean0 = ZonedChronology.useTimeArithmetic(durationField0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test7276,"public void test7276() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone0);
    DateTimeField dateTimeField0 = zonedChronology0.minuteOfHour();
    SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(zonedChronology0, dateTimeField0, 0);
    DurationField durationField0 = skipDateTimeField0.getRangeDurationField();
    boolean boolean0 = ZonedChronology.useTimeArithmetic(durationField0);
    assertEquals(""hours"", durationField0.getName());
}",0,assertNotNull(durationField0.getName())
project,0,test7377,"public void test7377() throws Throwable {
    CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
    TimeZone timeZone0 = TimeZone.getTimeZone(""]H(%=&g"");
    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(copticChronology0, dateTimeZone0);
    DateTimeField dateTimeField0 = zonedChronology0.dayOfMonth();
    Locale locale0 = Locale.GERMANY;
    String string0 = dateTimeField0.getAsText(0, locale0);
    assertEquals(""0"", string0);
}",0,
project,0,test7478,"public void test7478() throws Throwable {
    GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gJChronology0, fixedDateTimeZone0);
    DateTimeField dateTimeField0 = zonedChronology0.yearOfCentury();
    int int0 = dateTimeField0.getMaximumValue();
    assertEquals(100, int0);
}",0,"assertEquals(0, int0)"
project,0,test7579,"public void test7579() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone0);
    DateTimeField dateTimeField0 = zonedChronology0.minuteOfHour();
    boolean boolean0 = dateTimeField0.isLeap(0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test7680,"public void test7680() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone0);
    long long0 = zonedChronology0.getDateTimeMillis((long) 1, 0, 0, 1, 0);
    assertEquals((-57599000L), long0);
}",0,"assertEquals(1, long0)"
project,0,test7781,"public void test7781() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gregorianChronology0, dateTimeZone0);
    // Undeclared exception!
    try {
        ZonedChronology.getInstance(zonedChronology0, (DateTimeZone) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // DateTimeZone must not be null
        //
        verifyException(""org.joda.time.chrono.ZonedChronology"", e);
    }
}",1,
project,0,test7882,"public void test7882() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gregorianChronology0, dateTimeZone0);
    zonedChronology0.hashCode();
}",0,
project,0,test7983,"public void test7983() throws Throwable {
    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(ethiopicChronology0, dateTimeZone0);
    try {
        zonedChronology0.getDateTimeMillis(292272708, 1000, 292272708, 0, 292272708, 3122, 1000);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value 292272708 for minuteOfHour must be in the range [0,59]
        //
        verifyException(""org.joda.time.field.FieldUtils"", e);
    }
}",0,
project,0,test8084,"public void test8084() throws Throwable {
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(buddhistChronology0, dateTimeZone0);
    String string0 = zonedChronology0.toString();
    assertEquals(""ZonedChronology[BuddhistChronology[UTC], America/Los_Angeles]"", string0);
}",0,
