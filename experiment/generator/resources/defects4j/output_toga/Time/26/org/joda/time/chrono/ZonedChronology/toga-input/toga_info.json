{
  "test1212" : {
    "methodSignature" : "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth, int millisOfDay) throws IllegalArgumentException",
    "methodName" : "getDateTimeMillis",
    "className" : "org.joda.time.chrono.ZonedChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1212() throws Throwable {\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) fixedDateTimeZone0);\n    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(iSOChronology0, fixedDateTimeZone0);\n    zonedChronology0.getDateTimeMillis(5306, 0, 7, (-4616));\n}",
    "testName" : "test1212"
  },
  "test5658" : {
    "methodSignature" : "public abstract long getMillis(long value, long instant)",
    "methodName" : "getMillis",
    "className" : "org.joda.time.chrono.ZonedChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5658() throws Throwable {\n    GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();\n    IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_15_BASED;\n    IslamicChronology islamicChronology0 = new IslamicChronology(gregorianChronology0, gregorianChronology0, islamicChronology_LeapYearPatternType0);\n    StrictChronology strictChronology0 = StrictChronology.getInstance(islamicChronology0);\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);\n    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(strictChronology0, dateTimeZone0);\n    DurationField durationField0 = zonedChronology0.halfdays();\n    long long0 = durationField0.getMillis(103507202396L, (long) 1);\n}",
    "testName" : "test5658"
  },
  "test6668" : {
    "methodSignature" : "public DurationField getLeapDurationField()",
    "methodName" : "getLeapDurationField",
    "className" : "org.joda.time.chrono.ZonedChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6668() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstanceUTC();\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gJChronology0, fixedDateTimeZone0);\n    DateTimeField dateTimeField0 = zonedChronology0.yearOfCentury();\n    SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(gJChronology0, dateTimeField0);\n    DurationField durationField0 = skipDateTimeField0.getLeapDurationField();\n}",
    "testName" : "test6668"
  },
  "test1010" : {
    "methodSignature" : "public int[] get(ReadablePeriod period, long startInstant, long endInstant)",
    "methodName" : "get",
    "className" : "org.joda.time.chrono.ZonedChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1010() throws Throwable {\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);\n    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(ethiopicChronology0, dateTimeZone0);\n    JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);\n    LocalTime localTime0 = new LocalTime((Chronology) julianChronology0);\n    Period period0 = new Period(localTime0, localTime0);\n    int[] intArray0 = zonedChronology0.get((ReadablePeriod) period0, 1L, (-1L));\n}",
    "testName" : "test1010"
  },
  "test4244" : {
    "methodSignature" : "public abstract long add(long instant, int value)",
    "methodName" : "add",
    "className" : "org.joda.time.chrono.ZonedChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4244() throws Throwable {\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);\n    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(ethiopicChronology0, dateTimeZone0);\n    DateTimeField dateTimeField0 = zonedChronology0.centuryOfEra();\n    long long0 = dateTimeField0.add((long) 0, 0);\n}",
    "testName" : "test4244"
  },
  "test3234" : {
    "methodSignature" : "public abstract long getDifferenceAsLong(long minuendInstant, long subtrahendInstant)",
    "methodName" : "getDifferenceAsLong",
    "className" : "org.joda.time.chrono.ZonedChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3234() throws Throwable {\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();\n    ZoneOffset zoneOffset0 = ZoneOffset.MIN;\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);\n    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone0);\n    DateTimeField dateTimeField0 = zonedChronology0.millisOfDay();\n    long long0 = dateTimeField0.getDifferenceAsLong(0L, 1107L);\n}",
    "testName" : "test3234"
  },
  "test6466" : {
    "methodSignature" : "public abstract int getMaximumValue(ReadablePartial instant)",
    "methodName" : "getMaximumValue",
    "className" : "org.joda.time.chrono.ZonedChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6466() throws Throwable {\n    CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();\n    TimeZone timeZone0 = TimeZone.getTimeZone(\"]H(%=&g\");\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);\n    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(copticChronology0, dateTimeZone0);\n    DateTimeField dateTimeField0 = zonedChronology0.dayOfMonth();\n    LocalTime localTime0 = new LocalTime(dateTimeZone0);\n    int int0 = dateTimeField0.getMaximumValue((ReadablePartial) localTime0);\n}",
    "testName" : "test6466"
  },
  "test7478" : {
    "methodSignature" : "public abstract int getMaximumValue()",
    "methodName" : "getMaximumValue",
    "className" : "org.joda.time.chrono.ZonedChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7478() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstanceUTC();\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gJChronology0, fixedDateTimeZone0);\n    DateTimeField dateTimeField0 = zonedChronology0.yearOfCentury();\n    int int0 = dateTimeField0.getMaximumValue();\n}",
    "testName" : "test7478"
  },
  "test033" : {
    "methodSignature" : "public abstract int getDifference(long minuendInstant, long subtrahendInstant)",
    "methodName" : "getDifference",
    "className" : "org.joda.time.chrono.ZonedChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033() throws Throwable {\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forID(\"Asia/Shanghai\");\n    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(ethiopicChronology0, dateTimeZone0);\n    DateTimeField dateTimeField0 = zonedChronology0.secondOfMinute();\n    int int0 = dateTimeField0.getDifference(0L, 60000L);\n}",
    "testName" : "test033"
  },
  "test1616" : {
    "methodSignature" : "public abstract int getDifference(long minuendInstant, long subtrahendInstant)",
    "methodName" : "getDifference",
    "className" : "org.joda.time.chrono.ZonedChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1616() throws Throwable {\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();\n    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);\n    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gregorianChronology0, dateTimeZone0);\n    DurationField durationField0 = zonedChronology0.years();\n    int int0 = durationField0.getDifference(1, 0L);\n}",
    "testName" : "test1616"
  },
  "test2628" : {
    "methodSignature" : "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth, int hourOfDay, int minuteOfHour, int secondOfMinute, int millisOfSecond) throws IllegalArgumentException",
    "methodName" : "getDateTimeMillis",
    "className" : "org.joda.time.chrono.ZonedChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2628() throws Throwable {\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();\n    ZoneOffset zoneOffset0 = ZoneOffset.MIN;\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);\n    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone0);\n    long long0 = zonedChronology0.getDateTimeMillis(1, 1, 1, 0, 1, 1, 0);\n}",
    "testName" : "test2628"
  },
  "test1414" : {
    "methodSignature" : "public abstract boolean isPrecise()",
    "methodName" : "isPrecise",
    "className" : "org.joda.time.chrono.ZonedChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1414() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2740);\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);\n    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(ethiopicChronology0, dateTimeZone0);\n    DurationField durationField0 = zonedChronology0.minutes();\n    boolean boolean0 = durationField0.isPrecise();\n}",
    "testName" : "test1414"
  },
  "test2426" : {
    "methodSignature" : "public long getDateTimeMillis(long instant, int hourOfDay, int minuteOfHour, int secondOfMinute, int millisOfSecond) throws IllegalArgumentException",
    "methodName" : "getDateTimeMillis",
    "className" : "org.joda.time.chrono.ZonedChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2426() throws Throwable {\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) fixedDateTimeZone0);\n    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(iSOChronology0, fixedDateTimeZone0);\n    long long0 = zonedChronology0.getDateTimeMillis(1660L, 0, 0, 0, 0);\n}",
    "testName" : "test2426"
  },
  "test4648" : {
    "methodSignature" : "public long add(ReadablePeriod period, long instant, int scalar)",
    "methodName" : "add",
    "className" : "org.joda.time.chrono.ZonedChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4648() throws Throwable {\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) fixedDateTimeZone0);\n    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(iSOChronology0, fixedDateTimeZone0);\n    Weeks weeks0 = Weeks.weeks(2515);\n    Duration duration0 = weeks0.toStandardDuration();\n    Period period0 = duration0.toPeriod();\n    long long0 = zonedChronology0.add((ReadablePeriod) period0, 0L, 1427);\n}",
    "testName" : "test4648"
  },
  "test3638" : {
    "methodSignature" : "public DateTimeZone getZone()",
    "methodName" : "getZone",
    "className" : "org.joda.time.chrono.ZonedChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3638() throws Throwable {\n    GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();\n    IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_15_BASED;\n    IslamicChronology islamicChronology0 = new IslamicChronology(gregorianChronology0, gregorianChronology0, islamicChronology_LeapYearPatternType0);\n    StrictChronology strictChronology0 = StrictChronology.getInstance(islamicChronology0);\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);\n    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(strictChronology0, dateTimeZone0);\n    DateTimeZone dateTimeZone1 = zonedChronology0.getZone();\n}",
    "testName" : "test3638"
  },
  "test7073" : {
    "methodSignature" : "public abstract boolean isLenient()",
    "methodName" : "isLenient",
    "className" : "org.joda.time.chrono.ZonedChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7073() throws Throwable {\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);\n    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(ethiopicChronology0, dateTimeZone0);\n    DateTimeField dateTimeField0 = zonedChronology0.centuryOfEra();\n    boolean boolean0 = dateTimeField0.isLenient();\n}",
    "testName" : "test7073"
  },
  "test8084" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.chrono.ZonedChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test8084() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);\n    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(buddhistChronology0, dateTimeZone0);\n    String string0 = zonedChronology0.toString();\n}",
    "testName" : "test8084"
  },
  "test5254" : {
    "methodSignature" : "public Chronology withZone(DateTimeZone zone)",
    "methodName" : "withZone",
    "className" : "org.joda.time.chrono.ZonedChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5254() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);\n    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone0);\n    Chronology chronology0 = zonedChronology0.withZone(dateTimeZone0);\n}",
    "testName" : "test5254"
  },
  "test2021" : {
    "methodSignature" : "public abstract int getMinimumValue()",
    "methodName" : "getMinimumValue",
    "className" : "org.joda.time.chrono.ZonedChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2021() throws Throwable {\n    CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();\n    TimeZone timeZone0 = TimeZone.getTimeZone(\"]H(%=&g\");\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);\n    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(copticChronology0, dateTimeZone0);\n    DateTimeField dateTimeField0 = zonedChronology0.dayOfMonth();\n    int int0 = dateTimeField0.getMinimumValue();\n}",
    "testName" : "test2021"
  },
  "test4042" : {
    "methodSignature" : "public abstract long addWrapField(long instant, int value)",
    "methodName" : "addWrapField",
    "className" : "org.joda.time.chrono.ZonedChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4042() throws Throwable {\n    GJChronology gJChronology0 = GJChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(23118750);\n    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gJChronology0, dateTimeZone0);\n    DateTimeField dateTimeField0 = zonedChronology0.monthOfYear();\n    long long0 = dateTimeField0.addWrapField((long) 23118750, 23118750);\n}",
    "testName" : "test4042"
  },
  "test6264" : {
    "methodSignature" : "public abstract long set(long instant, String text, Locale locale)",
    "methodName" : "set",
    "className" : "org.joda.time.chrono.ZonedChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6264() throws Throwable {\n    CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(copticChronology0, fixedDateTimeZone0);\n    DateTimeField dateTimeField0 = zonedChronology0.year();\n    Locale locale0 = Locale.KOREA;\n    long long0 = dateTimeField0.set((long) 1, \"7\", locale0);\n}",
    "testName" : "test6264"
  },
  "test3032" : {
    "methodSignature" : "public abstract long roundHalfFloor(long instant)",
    "methodName" : "roundHalfFloor",
    "className" : "org.joda.time.chrono.ZonedChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3032() throws Throwable {\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();\n    ZoneOffset zoneOffset0 = ZoneOffset.MIN;\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);\n    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone0);\n    DateTimeField dateTimeField0 = zonedChronology0.millisOfDay();\n    long long0 = dateTimeField0.roundHalfFloor(10L);\n}",
    "testName" : "test3032"
  },
  "test7276" : {
    "methodSignature" : "public abstract String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.chrono.ZonedChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7276() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);\n    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone0);\n    DateTimeField dateTimeField0 = zonedChronology0.minuteOfHour();\n    SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(zonedChronology0, dateTimeField0, 0);\n    DurationField durationField0 = skipDateTimeField0.getRangeDurationField();\n    boolean boolean0 = ZonedChronology.useTimeArithmetic(durationField0);\n    durationField0.getName();\n}",
    "testName" : "test7276"
  },
  "test5052" : {
    "methodSignature" : "protected void assemble(Fields fields)",
    "methodName" : "assemble",
    "className" : "org.joda.time.chrono.ZonedChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5052() throws Throwable {\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);\n    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(buddhistChronology0, dateTimeZone0);\n    AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();\n    zonedChronology0.assemble(assembledChronology_Fields0);\n}",
    "testName" : "test5052"
  },
  "test7275" : {
    "methodSignature" : "static boolean useTimeArithmetic(DurationField field)",
    "methodName" : "useTimeArithmetic",
    "className" : "org.joda.time.chrono.ZonedChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7275() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);\n    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone0);\n    DateTimeField dateTimeField0 = zonedChronology0.minuteOfHour();\n    SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(zonedChronology0, dateTimeField0, 0);\n    DurationField durationField0 = skipDateTimeField0.getRangeDurationField();\n    boolean boolean0 = ZonedChronology.useTimeArithmetic(durationField0);\n}",
    "testName" : "test7275"
  },
  "test6062" : {
    "methodSignature" : "public abstract int getMinimumValue(ReadablePartial instant, int[] values)",
    "methodName" : "getMinimumValue",
    "className" : "org.joda.time.chrono.ZonedChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6062() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);\n    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone0);\n    DateTimeField dateTimeField0 = zonedChronology0.minuteOfHour();\n    LocalDateTime localDateTime0 = new LocalDateTime((Object) null);\n    int[] intArray0 = new int[4];\n    int int0 = dateTimeField0.getMinimumValue((ReadablePartial) localDateTime0, intArray0);\n}",
    "testName" : "test6062"
  },
  "test2830" : {
    "methodSignature" : "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth, int millisOfDay) throws IllegalArgumentException",
    "methodName" : "getDateTimeMillis",
    "className" : "org.joda.time.chrono.ZonedChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2830() throws Throwable {\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();\n    LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();\n    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(lenientChronology0, dateTimeZone0);\n    long long0 = zonedChronology0.getDateTimeMillis(1, 1, 1, 1073741824);\n}",
    "testName" : "test2830"
  },
  "test022" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.chrono.ZonedChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    DateMidnight dateMidnight0 = new DateMidnight((-2760L), dateTimeZone0);\n    dateMidnight0.getMillis();\n}",
    "testName" : "test022"
  },
  "test066" : {
    "methodSignature" : "public abstract long add(long instant, long value)",
    "methodName" : "add",
    "className" : "org.joda.time.chrono.ZonedChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066() throws Throwable {\n    TimeZone timeZone0 = TimeZone.getTimeZone(\"@LNr`+O6Q$\");\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);\n    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);\n    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gregorianChronology0, dateTimeZone0);\n    DateTimeField dateTimeField0 = zonedChronology0.weekOfWeekyear();\n    long long0 = dateTimeField0.add(0L, (long) 3);\n}",
    "testName" : "test066"
  },
  "test7882" : {
    "methodSignature" : "public int hashCode()",
    "methodName" : "hashCode",
    "className" : "org.joda.time.chrono.ZonedChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7882() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();\n    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gregorianChronology0, dateTimeZone0);\n    zonedChronology0.hashCode();\n}",
    "testName" : "test7882"
  },
  "test7680" : {
    "methodSignature" : "public long getDateTimeMillis(long instant, int hourOfDay, int minuteOfHour, int secondOfMinute, int millisOfSecond) throws IllegalArgumentException",
    "methodName" : "getDateTimeMillis",
    "className" : "org.joda.time.chrono.ZonedChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7680() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);\n    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone0);\n    long long0 = zonedChronology0.getDateTimeMillis((long) 1, 0, 0, 1, 0);\n}",
    "testName" : "test7680"
  },
  "test4547" : {
    "methodSignature" : "public abstract long getDifferenceAsLong(long minuendInstant, long subtrahendInstant)",
    "methodName" : "getDifferenceAsLong",
    "className" : "org.joda.time.chrono.ZonedChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4547() throws Throwable {\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) fixedDateTimeZone0);\n    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(iSOChronology0, fixedDateTimeZone0);\n    DurationField durationField0 = zonedChronology0.centuries();\n    long long0 = durationField0.getDifferenceAsLong(0L, (-1278L));\n}",
    "testName" : "test4547"
  },
  "test3335" : {
    "methodSignature" : "public abstract int getDifference(long minuendInstant, long subtrahendInstant)",
    "methodName" : "getDifference",
    "className" : "org.joda.time.chrono.ZonedChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3335() throws Throwable {\n    CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();\n    TimeZone timeZone0 = TimeZone.getTimeZone(\"]H(%=&g\");\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);\n    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(copticChronology0, dateTimeZone0);\n    DateTimeField dateTimeField0 = zonedChronology0.dayOfMonth();\n    int int0 = dateTimeField0.getDifference(0, 30);\n}",
    "testName" : "test3335"
  },
  "test6769" : {
    "methodSignature" : "public DurationField getDurationField()",
    "methodName" : "getDurationField",
    "className" : "org.joda.time.chrono.ZonedChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6769() throws Throwable {\n    CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();\n    TimeZone timeZone0 = TimeZone.getTimeZone(\"]H(%=&g\");\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);\n    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(copticChronology0, dateTimeZone0);\n    DateTimeField dateTimeField0 = zonedChronology0.dayOfMonth();\n    GJYearOfEraDateTimeField gJYearOfEraDateTimeField0 = new GJYearOfEraDateTimeField(dateTimeField0, copticChronology0);\n    DurationField durationField0 = gJYearOfEraDateTimeField0.getDurationField();\n}",
    "testName" : "test6769"
  },
  "test1313" : {
    "methodSignature" : "public abstract long set(long instant, int value)",
    "methodName" : "set",
    "className" : "org.joda.time.chrono.ZonedChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1313() throws Throwable {\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();\n    ZoneOffset zoneOffset0 = ZoneOffset.MIN;\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);\n    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone0);\n    DateTimeField dateTimeField0 = zonedChronology0.millisOfDay();\n    long long0 = dateTimeField0.set(3214L, 1);\n}",
    "testName" : "test1313"
  },
  "test5557" : {
    "methodSignature" : "public abstract long getMillis(int value, long instant)",
    "methodName" : "getMillis",
    "className" : "org.joda.time.chrono.ZonedChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5557() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);\n    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(buddhistChronology0, dateTimeZone0);\n    DurationField durationField0 = zonedChronology0.years();\n    long long0 = durationField0.getMillis((-302), 43200000L);\n}",
    "testName" : "test5557"
  },
  "test2325" : {
    "methodSignature" : "static boolean useTimeArithmetic(DurationField field)",
    "methodName" : "useTimeArithmetic",
    "className" : "org.joda.time.chrono.ZonedChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2325() throws Throwable {\n    boolean boolean0 = ZonedChronology.useTimeArithmetic((DurationField) null);\n}",
    "testName" : "test2325"
  },
  "test2122" : {
    "methodSignature" : "public abstract String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.chrono.ZonedChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2122() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1765));\n    CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);\n    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(copticChronology0, dateTimeZone0);\n    DateTimeField dateTimeField0 = zonedChronology0.secondOfMinute();\n    DurationField durationField0 = dateTimeField0.getDurationField();\n    durationField0.getName();\n}",
    "testName" : "test2122"
  },
  "test3133" : {
    "methodSignature" : "public abstract long roundFloor(long instant)",
    "methodName" : "roundFloor",
    "className" : "org.joda.time.chrono.ZonedChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3133() throws Throwable {\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forID(\"Asia/Shanghai\");\n    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(ethiopicChronology0, dateTimeZone0);\n    DateTimeField dateTimeField0 = zonedChronology0.secondOfMinute();\n    long long0 = dateTimeField0.roundFloor(1);\n}",
    "testName" : "test3133"
  },
  "test6567" : {
    "methodSignature" : "public abstract int getMinimumValue(long instant)",
    "methodName" : "getMinimumValue",
    "className" : "org.joda.time.chrono.ZonedChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6567() throws Throwable {\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();\n    ZoneOffset zoneOffset0 = ZoneOffset.MIN;\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);\n    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone0);\n    DateTimeField dateTimeField0 = zonedChronology0.millisOfDay();\n    int int0 = dateTimeField0.getMinimumValue((long) 1);\n}",
    "testName" : "test6567"
  },
  "test7579" : {
    "methodSignature" : "public abstract boolean isLeap(long instant)",
    "methodName" : "isLeap",
    "className" : "org.joda.time.chrono.ZonedChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7579() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);\n    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone0);\n    DateTimeField dateTimeField0 = zonedChronology0.minuteOfHour();\n    boolean boolean0 = dateTimeField0.isLeap(0);\n}",
    "testName" : "test7579"
  },
  "test1111" : {
    "methodSignature" : "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth, int hourOfDay, int minuteOfHour, int secondOfMinute, int millisOfSecond) throws IllegalArgumentException",
    "methodName" : "getDateTimeMillis",
    "className" : "org.joda.time.chrono.ZonedChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1111() throws Throwable {\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) fixedDateTimeZone0);\n    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(julianChronology0, fixedDateTimeZone0);\n    zonedChronology0.getDateTimeMillis(1, (-292275054), (-2303), 1, 0, (-292275054), 0);\n}",
    "testName" : "test1111"
  },
  "test5355" : {
    "methodSignature" : "public static ZonedChronology getInstance(Chronology base, DateTimeZone zone)",
    "methodName" : "getInstance",
    "className" : "org.joda.time.chrono.ZonedChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5355() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    ZonedChronology.getInstance((Chronology) null, dateTimeZone0);\n}",
    "testName" : "test5355"
  },
  "test2123" : {
    "methodSignature" : "public abstract DurationField getDurationField()",
    "methodName" : "getDurationField",
    "className" : "org.joda.time.chrono.ZonedChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2123() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1765));\n    CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);\n    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(copticChronology0, dateTimeZone0);\n    DateTimeField dateTimeField0 = zonedChronology0.secondOfMinute();\n    DurationField durationField0 = dateTimeField0.getDurationField();\n}",
    "testName" : "test2123"
  },
  "test011" : {
    "methodSignature" : "public abstract long remainder(long instant)",
    "methodName" : "remainder",
    "className" : "org.joda.time.chrono.ZonedChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011() throws Throwable {\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);\n    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(ethiopicChronology0, dateTimeZone0);\n    DateTimeField dateTimeField0 = zonedChronology0.centuryOfEra();\n    long long0 = dateTimeField0.remainder(1);\n}",
    "testName" : "test011"
  },
  "test099" : {
    "methodSignature" : "public int[] get(ReadablePeriod period, long startInstant, long endInstant)",
    "methodName" : "get",
    "className" : "org.joda.time.chrono.ZonedChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099() throws Throwable {\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);\n    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(ethiopicChronology0, dateTimeZone0);\n    JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);\n    LocalTime localTime0 = new LocalTime((Chronology) julianChronology0);\n    Period period0 = new Period(localTime0, localTime0);\n    int[] intArray0 = zonedChronology0.get((ReadablePeriod) period0, (-18L), (-1L));\n}",
    "testName" : "test099"
  },
  "test2729" : {
    "methodSignature" : "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth, int millisOfDay) throws IllegalArgumentException",
    "methodName" : "getDateTimeMillis",
    "className" : "org.joda.time.chrono.ZonedChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2729() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);\n    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(buddhistChronology0, dateTimeZone0);\n    long long0 = zonedChronology0.getDateTimeMillis(3864, 1, 1, 0);\n}",
    "testName" : "test2729"
  },
  "test4749" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "org.joda.time.chrono.ZonedChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4749() throws Throwable {\n    Weeks weeks0 = Weeks.weeks(2515);\n    PeriodType periodType0 = weeks0.getPeriodType();\n    Period period0 = new Period(0L, 816L, periodType0);\n    period0.size();\n}",
    "testName" : "test4749"
  },
  "test3537" : {
    "methodSignature" : "public Chronology withUTC()",
    "methodName" : "withUTC",
    "className" : "org.joda.time.chrono.ZonedChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3537() throws Throwable {\n    GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();\n    IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_15_BASED;\n    IslamicChronology islamicChronology0 = new IslamicChronology(gregorianChronology0, gregorianChronology0, islamicChronology_LeapYearPatternType0);\n    StrictChronology strictChronology0 = StrictChronology.getInstance(islamicChronology0);\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);\n    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(strictChronology0, dateTimeZone0);\n    Chronology chronology0 = zonedChronology0.withUTC();\n}",
    "testName" : "test3537"
  },
  "test2527" : {
    "methodSignature" : "public long getDateTimeMillis(long instant, int hourOfDay, int minuteOfHour, int secondOfMinute, int millisOfSecond) throws IllegalArgumentException",
    "methodName" : "getDateTimeMillis",
    "className" : "org.joda.time.chrono.ZonedChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2527() throws Throwable {\n    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();\n    LenientChronology lenientChronology0 = LenientChronology.getInstance(gregorianChronology0);\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);\n    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(lenientChronology0, dateTimeZone0);\n    long long0 = zonedChronology0.getDateTimeMillis(3155760000000L, 2147483061, (-1882), (-1529), (-1529));\n}",
    "testName" : "test2527"
  },
  "test4143" : {
    "methodSignature" : "public abstract long add(long instant, int value)",
    "methodName" : "add",
    "className" : "org.joda.time.chrono.ZonedChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4143() throws Throwable {\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();\n    ZoneOffset zoneOffset0 = ZoneOffset.MIN;\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);\n    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone0);\n    DateTimeField dateTimeField0 = zonedChronology0.millisOfDay();\n    long long0 = dateTimeField0.add(1000L, 4);\n}",
    "testName" : "test4143"
  },
  "test6365" : {
    "methodSignature" : "public abstract int getMaximumValue(ReadablePartial instant, int[] values)",
    "methodName" : "getMaximumValue",
    "className" : "org.joda.time.chrono.ZonedChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6365() throws Throwable {\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);\n    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(ethiopicChronology0, dateTimeZone0);\n    DateTimeField dateTimeField0 = zonedChronology0.centuryOfEra();\n    JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);\n    LocalTime localTime0 = new LocalTime((Chronology) julianChronology0);\n    int[] intArray0 = new int[2];\n    int int0 = dateTimeField0.getMaximumValue((ReadablePartial) localTime0, intArray0);\n}",
    "testName" : "test6365"
  },
  "test7377" : {
    "methodSignature" : "public abstract String getAsText(int fieldValue, Locale locale)",
    "methodName" : "getAsText",
    "className" : "org.joda.time.chrono.ZonedChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7377() throws Throwable {\n    CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();\n    TimeZone timeZone0 = TimeZone.getTimeZone(\"]H(%=&g\");\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);\n    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(copticChronology0, dateTimeZone0);\n    DateTimeField dateTimeField0 = zonedChronology0.dayOfMonth();\n    Locale locale0 = Locale.GERMANY;\n    String string0 = dateTimeField0.getAsText(0, locale0);\n}",
    "testName" : "test7377"
  },
  "test5153" : {
    "methodSignature" : "public abstract Chronology withZone(DateTimeZone zone)",
    "methodName" : "withZone",
    "className" : "org.joda.time.chrono.ZonedChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5153() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);\n    ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);\n    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(iSOChronology0, dateTimeZone0);\n    Chronology chronology0 = zonedChronology0.withZone((DateTimeZone) null);\n    chronology0.withZone(dateTimeZone0);\n}",
    "testName" : "test5153"
  },
  "test6163" : {
    "methodSignature" : "public abstract String getAsText(long instant, Locale locale)",
    "methodName" : "getAsText",
    "className" : "org.joda.time.chrono.ZonedChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6163() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);\n    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone0);\n    DateTimeField dateTimeField0 = zonedChronology0.minuteOfHour();\n    Locale locale0 = Locale.TRADITIONAL_CHINESE;\n    String string0 = dateTimeField0.getAsText(1000000L, locale0);\n}",
    "testName" : "test6163"
  },
  "test3941" : {
    "methodSignature" : "public abstract long addWrapField(long instant, int value)",
    "methodName" : "addWrapField",
    "className" : "org.joda.time.chrono.ZonedChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3941() throws Throwable {\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();\n    ZoneOffset zoneOffset0 = ZoneOffset.MIN;\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);\n    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone0);\n    DateTimeField dateTimeField0 = zonedChronology0.millisOfDay();\n    long long0 = dateTimeField0.addWrapField(10L, 1);\n}",
    "testName" : "test3941"
  },
  "test2931" : {
    "methodSignature" : "public long getDateTimeMillis(long instant, int hourOfDay, int minuteOfHour, int secondOfMinute, int millisOfSecond) throws IllegalArgumentException",
    "methodName" : "getDateTimeMillis",
    "className" : "org.joda.time.chrono.ZonedChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2931() throws Throwable {\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();\n    ZoneOffset zoneOffset0 = ZoneOffset.MIN;\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);\n    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone0);\n    zonedChronology0.getDateTimeMillis((long) 1, 4100, 0, 1, (-2673));\n}",
    "testName" : "test2931"
  },
  "test4951" : {
    "methodSignature" : "public boolean equals(Object obj)",
    "methodName" : "equals",
    "className" : "org.joda.time.chrono.ZonedChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4951() throws Throwable {\n    GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();\n    IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_15_BASED;\n    IslamicChronology islamicChronology0 = new IslamicChronology(gregorianChronology0, gregorianChronology0, islamicChronology_LeapYearPatternType0);\n    StrictChronology strictChronology0 = StrictChronology.getInstance(islamicChronology0);\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);\n    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(strictChronology0, dateTimeZone0);\n    boolean boolean0 = zonedChronology0.equals((Object) null);\n}",
    "testName" : "test4951"
  },
  "test6972" : {
    "methodSignature" : "public abstract int getLeapAmount(long instant)",
    "methodName" : "getLeapAmount",
    "className" : "org.joda.time.chrono.ZonedChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6972() throws Throwable {\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);\n    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(ethiopicChronology0, dateTimeZone0);\n    DateTimeField dateTimeField0 = zonedChronology0.centuryOfEra();\n    int int0 = dateTimeField0.getLeapAmount(0);\n}",
    "testName" : "test6972"
  },
  "test088" : {
    "methodSignature" : "public abstract String getAsShortText(long instant, Locale locale)",
    "methodName" : "getAsShortText",
    "className" : "org.joda.time.chrono.ZonedChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088() throws Throwable {\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forID(\"Asia/Shanghai\");\n    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(ethiopicChronology0, dateTimeZone0);\n    DateTimeField dateTimeField0 = zonedChronology0.secondOfMinute();\n    Locale locale0 = Locale.CHINESE;\n    String string0 = dateTimeField0.getAsShortText((long) 1, locale0);\n}",
    "testName" : "test088"
  },
  "test1920" : {
    "methodSignature" : "public abstract DurationField getRangeDurationField()",
    "methodName" : "getRangeDurationField",
    "className" : "org.joda.time.chrono.ZonedChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1920() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(886);\n    JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);\n    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(julianChronology0, dateTimeZone0);\n    DateTimeField dateTimeField0 = zonedChronology0.hourOfHalfday();\n    DurationField durationField0 = dateTimeField0.getRangeDurationField();\n}",
    "testName" : "test1920"
  },
  "test1919" : {
    "methodSignature" : "public abstract String getName()",
    "methodName" : "getName",
    "className" : "org.joda.time.chrono.ZonedChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1919() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(886);\n    JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);\n    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(julianChronology0, dateTimeZone0);\n    DateTimeField dateTimeField0 = zonedChronology0.hourOfHalfday();\n    DurationField durationField0 = dateTimeField0.getRangeDurationField();\n    durationField0.getName();\n}",
    "testName" : "test1919"
  },
  "test7983" : {
    "methodSignature" : "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth, int hourOfDay, int minuteOfHour, int secondOfMinute, int millisOfSecond) throws IllegalArgumentException",
    "methodName" : "getDateTimeMillis",
    "className" : "org.joda.time.chrono.ZonedChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7983() throws Throwable {\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);\n    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(ethiopicChronology0, dateTimeZone0);\n    zonedChronology0.getDateTimeMillis(292272708, 1000, 292272708, 0, 292272708, 3122, 1000);\n}",
    "testName" : "test7983"
  },
  "test6770" : {
    "methodSignature" : "public abstract long add(long instant, int value)",
    "methodName" : "add",
    "className" : "org.joda.time.chrono.ZonedChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6770() throws Throwable {\n    CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();\n    TimeZone timeZone0 = TimeZone.getTimeZone(\"]H(%=&g\");\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);\n    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(copticChronology0, dateTimeZone0);\n    DateTimeField dateTimeField0 = zonedChronology0.dayOfMonth();\n    GJYearOfEraDateTimeField gJYearOfEraDateTimeField0 = new GJYearOfEraDateTimeField(dateTimeField0, copticChronology0);\n    DurationField durationField0 = gJYearOfEraDateTimeField0.getDurationField();\n    long long0 = durationField0.add((long) 30, 1);\n}",
    "testName" : "test6770"
  },
  "test7781" : {
    "methodSignature" : "public static ZonedChronology getInstance(Chronology base, DateTimeZone zone)",
    "methodName" : "getInstance",
    "className" : "org.joda.time.chrono.ZonedChronology",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7781() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();\n    ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gregorianChronology0, dateTimeZone0);\n    ZonedChronology.getInstance(zonedChronology0, (DateTimeZone) null);\n}",
    "testName" : "test7781"
  }
}