{
  "test1212" : {
    "methodSignature" : "public static DateTimeZone forTimeZone(TimeZone zone)",
    "methodName" : "forTimeZone",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1212() throws Throwable {\n    TimeZone timeZone0 = TimeZone.getDefault();\n    DateTimeZone.forTimeZone(timeZone0);\n}",
    "testName" : "test1212"
  },
  "test4646" : {
    "methodSignature" : "public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException",
    "methodName" : "forOffsetHoursMinutes",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4646() throws Throwable {\n    DateTimeZone.forOffsetHoursMinutes(0, 0);\n}",
    "testName" : "test4646"
  },
  "test3434" : {
    "methodSignature" : "public static void setDefault(DateTimeZone zone) throws SecurityException",
    "methodName" : "setDefault",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3434() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    dateTimeZone0.UTC.isStandardOffset(1268L);\n    DateTimeZone.setDefault(dateTimeZone0);\n}",
    "testName" : "test3434"
  },
  "test5656" : {
    "methodSignature" : "public final String getShortName(long instant)",
    "methodName" : "getShortName",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5656() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    dateTimeZone0.getShortName((-9223372036826397812L));\n}",
    "testName" : "test5656"
  },
  "test2424" : {
    "methodSignature" : "public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException",
    "methodName" : "forOffsetHoursMinutes",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2424() throws Throwable {\n    DateTimeZone.forOffsetHoursMinutes((-75837680), (-75837680));\n}",
    "testName" : "test2424"
  },
  "test1010" : {
    "methodSignature" : "public long convertLocalToUTC(long instantLocal, boolean strict)",
    "methodName" : "convertLocalToUTC",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1010() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    dateTimeZone0.convertLocalToUTC(3600L, false);\n}",
    "testName" : "test1010"
  },
  "test4444" : {
    "methodSignature" : "public static DateTimeZone forOffsetMillis(int millisOffset)",
    "methodName" : "forOffsetMillis",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4444() throws Throwable {\n    DateTimeZone.forOffsetMillis(25);\n}",
    "testName" : "test4444"
  },
  "test3232" : {
    "methodSignature" : "public abstract boolean isFixed()",
    "methodName" : "isFixed",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3232() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    dateTimeZone0.isStandardOffset(9223372036854775807L);\n    dateTimeZone0.isFixed();\n}",
    "testName" : "test3232"
  },
  "test5454" : {
    "methodSignature" : "public final int getOffset(ReadableInstant instant)",
    "methodName" : "getOffset",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5454() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    dateTimeZone0.getOffset((ReadableInstant) null);\n}",
    "testName" : "test5454"
  },
  "test2222" : {
    "methodSignature" : "public final String getName(long instant)",
    "methodName" : "getName",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2222() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(770);\n    dateTimeZone0.getName((long) 770);\n}",
    "testName" : "test2222"
  },
  "test033" : {
    "methodSignature" : "public final String getName(long instant)",
    "methodName" : "getName",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    dateTimeZone0.getName(764L);\n}",
    "testName" : "test033"
  },
  "test077" : {
    "methodSignature" : "public String getName(long instant, Locale locale)",
    "methodName" : "getName",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    Locale locale0 = Locale.ITALY;\n    dateTimeZone0.getName((-28378000L), locale0);\n}",
    "testName" : "test077"
  },
  "test1616" : {
    "methodSignature" : "public long convertUTCToLocal(long instantUTC)",
    "methodName" : "convertUTCToLocal",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1616() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    DefaultNameProvider defaultNameProvider0 = new DefaultNameProvider();\n    dateTimeZone0.convertUTCToLocal(1L);\n}",
    "testName" : "test1616"
  },
  "test3838" : {
    "methodSignature" : "public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException",
    "methodName" : "forOffsetHoursMinutes",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3838() throws Throwable {\n    DateTimeZone.forOffsetHoursMinutes(13, 13);\n    DateTimeZone.forOffsetHoursMinutes(13, 13);\n}",
    "testName" : "test3838"
  },
  "test2828" : {
    "methodSignature" : "public String getShortName(long instant, Locale locale)",
    "methodName" : "getShortName",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2828() throws Throwable {\n    Locale locale0 = Locale.TAIWAN;\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    fixedDateTimeZone0.getShortName(0L, locale0);\n}",
    "testName" : "test2828"
  },
  "test1414" : {
    "methodSignature" : "public static DateTimeZone forID(String id)",
    "methodName" : "forID",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1414() throws Throwable {\n    DateTimeZone.forID(\"Bm&Tg $?baRci+e3q\");\n}",
    "testName" : "test1414"
  },
  "test4848" : {
    "methodSignature" : "public long convertLocalToUTC(long instantLocal, boolean strict)",
    "methodName" : "convertLocalToUTC",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4848() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forID(\"+00:00\");\n    dateTimeZone0.convertLocalToUTC((-4209L), true);\n}",
    "testName" : "test4848"
  },
  "test3636" : {
    "methodSignature" : "public static void setDefault(DateTimeZone zone) throws SecurityException",
    "methodName" : "setDefault",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3636() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    DateTimeZone.setDefault(dateTimeZone0);\n}",
    "testName" : "test3636"
  },
  "test5858" : {
    "methodSignature" : "public long convertLocalToUTC(long instantLocal, boolean strict)",
    "methodName" : "convertLocalToUTC",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5858() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    dateTimeZone0.convertLocalToUTC(9223372036854775807L, false);\n}",
    "testName" : "test5858"
  },
  "test2626" : {
    "methodSignature" : "public int getOffsetFromLocal(long instantLocal)",
    "methodName" : "getOffsetFromLocal",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2626() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    dateTimeZone0.getOffsetFromLocal(2348L);\n}",
    "testName" : "test2626"
  },
  "test6060" : {
    "methodSignature" : "public static DateTimeZone forTimeZone(TimeZone zone)",
    "methodName" : "forTimeZone",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6060() throws Throwable {\n    UTCProvider uTCProvider0 = new UTCProvider();\n    DateTimeZone.setProvider(uTCProvider0);\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(830, \"JST\");\n    DateTimeZone.forTimeZone(simpleTimeZone0);\n}",
    "testName" : "test6060"
  },
  "test4242" : {
    "methodSignature" : "public static DateTimeZone forTimeZone(TimeZone zone)",
    "methodName" : "forTimeZone",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4242() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, \"\");\n    DateTimeZone.forTimeZone(simpleTimeZone0);\n}",
    "testName" : "test4242"
  },
  "test3030" : {
    "methodSignature" : "public final String getShortName(long instant)",
    "methodName" : "getShortName",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3030() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    LocalDateTime localDateTime0 = new LocalDateTime(24L);\n    dateTimeZone0.getShortName(24L);\n}",
    "testName" : "test3030"
  },
  "test5252" : {
    "methodSignature" : "public abstract long nextTransition(long instant)",
    "methodName" : "nextTransition",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5252() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(13, 13);\n    Instant instant0 = new Instant((long) 13);\n    dateTimeZone0.UTC.getOffset((ReadableInstant) instant0);\n    dateTimeZone0.getShortName((long) 13);\n    dateTimeZone0.nextTransition(13);\n}",
    "testName" : "test5252"
  },
  "test2020" : {
    "methodSignature" : "protected Object writeReplace() throws ObjectStreamException",
    "methodName" : "writeReplace",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2020() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    dateTimeZone0.UTC.writeReplace();\n}",
    "testName" : "test2020"
  },
  "test4040" : {
    "methodSignature" : "public final String getShortName(long instant)",
    "methodName" : "getShortName",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4040() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(13, 13);\n    dateTimeZone0.getShortName((long) 13);\n}",
    "testName" : "test4040"
  },
  "test5050" : {
    "methodSignature" : "public static void setDefault(DateTimeZone zone) throws SecurityException",
    "methodName" : "setDefault",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5050() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    dateTimeZone0.UTC.isLocalDateTimeGap((LocalDateTime) null);\n    DateTimeZone.setDefault(dateTimeZone0);\n}",
    "testName" : "test5050"
  },
  "test022" : {
    "methodSignature" : "public static DateTimeZone forID(String id)",
    "methodName" : "forID",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022() throws Throwable {\n    DateTimeZone.forID((String) null);\n}",
    "testName" : "test022"
  },
  "test066" : {
    "methodSignature" : "public final String getShortName(long instant)",
    "methodName" : "getShortName",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    dateTimeZone0.UTC.getShortName(764L);\n}",
    "testName" : "test066"
  },
  "test1818" : {
    "methodSignature" : "public static DateTimeZone getDefault()",
    "methodName" : "getDefault",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1818() throws Throwable {\n    UTCProvider uTCProvider0 = new UTCProvider();\n    DateTimeZone.setProvider(uTCProvider0);\n    DateTimeZone.getDefault();\n}",
    "testName" : "test1818"
  },
  "test5757" : {
    "methodSignature" : "public static DateTimeZone forTimeZone(TimeZone zone)",
    "methodName" : "forTimeZone",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5757() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2506, \"GMT-\");\n    DateTimeZone.forTimeZone(simpleTimeZone0);\n}",
    "testName" : "test5757"
  },
  "test2323" : {
    "methodSignature" : "public long convertUTCToLocal(long instantUTC)",
    "methodName" : "convertUTCToLocal",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2323() throws Throwable {\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    fixedDateTimeZone0.isFixed();\n    fixedDateTimeZone0.convertUTCToLocal((-31L));\n}",
    "testName" : "test2323"
  },
  "test1313" : {
    "methodSignature" : "public DateTimeZone getZone()",
    "methodName" : "getZone",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1313() throws Throwable {\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();\n    buddhistChronology0.getZone();\n}",
    "testName" : "test1313"
  },
  "test4545" : {
    "methodSignature" : "public static DateTimeZone forID(String id)",
    "methodName" : "forID",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4545() throws Throwable {\n    DateTimeZone.forID(\"UTC\");\n}",
    "testName" : "test4545"
  },
  "test3535" : {
    "methodSignature" : "public static DateTimeZone forTimeZone(TimeZone zone)",
    "methodName" : "forTimeZone",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3535() throws Throwable {\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    TimeZone timeZone0 = fixedDateTimeZone0.toTimeZone();\n    DateTimeZone.forTimeZone(timeZone0);\n}",
    "testName" : "test3535"
  },
  "test5555" : {
    "methodSignature" : "public long getMillisKeepLocal(DateTimeZone newZone, long oldInstant)",
    "methodName" : "getMillisKeepLocal",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5555() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    dateTimeZone0.UTC.getMillisKeepLocal((DateTimeZone) null, 9223372036854775807L);\n}",
    "testName" : "test5555"
  },
  "test2121" : {
    "methodSignature" : "public static Provider getProvider()",
    "methodName" : "getProvider",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2121() throws Throwable {\n    DateTimeZone.getProvider();\n}",
    "testName" : "test2121"
  },
  "test1111" : {
    "methodSignature" : "public static DateTimeZone forTimeZone(TimeZone zone)",
    "methodName" : "forTimeZone",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1111() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    TimeZone timeZone0 = dateTimeZone0.toTimeZone();\n    DateTimeZone.forTimeZone(timeZone0);\n}",
    "testName" : "test1111"
  },
  "test4343" : {
    "methodSignature" : "public static DateTimeZone forTimeZone(TimeZone zone)",
    "methodName" : "forTimeZone",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4343() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(29280000, \"-7\");\n    DateTimeZone.forTimeZone(simpleTimeZone0);\n}",
    "testName" : "test4343"
  },
  "test3333" : {
    "methodSignature" : "public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException",
    "methodName" : "forOffsetHoursMinutes",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3333() throws Throwable {\n    DateTimeZone.forOffsetHoursMinutes(60, 60);\n}",
    "testName" : "test3333"
  },
  "test011" : {
    "methodSignature" : "public static void setNameProvider(NameProvider nameProvider) throws SecurityException",
    "methodName" : "setNameProvider",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011() throws Throwable {\n    DateTimeZone.setNameProvider((NameProvider) null);\n}",
    "testName" : "test011"
  },
  "test055" : {
    "methodSignature" : "public static void setNameProvider(NameProvider nameProvider) throws SecurityException",
    "methodName" : "setNameProvider",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055() throws Throwable {\n    NameProvider nameProvider0 = DateTimeZone.getNameProvider();\n    DateTimeZone.setNameProvider(nameProvider0);\n}",
    "testName" : "test055"
  },
  "test099" : {
    "methodSignature" : "public static DateTimeZone forOffsetMillis(int millisOffset)",
    "methodName" : "forOffsetMillis",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099() throws Throwable {\n    DateTimeZone.forOffsetMillis((-430));\n}",
    "testName" : "test099"
  },
  "test2727" : {
    "methodSignature" : "public static DateTimeZone forOffsetMillis(int millisOffset)",
    "methodName" : "forOffsetMillis",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2727() throws Throwable {\n    DateTimeZone.forOffsetMillis(0);\n}",
    "testName" : "test2727"
  },
  "test1717" : {
    "methodSignature" : "public static void setProvider(Provider provider) throws SecurityException",
    "methodName" : "setProvider",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1717() throws Throwable {\n    DateTimeZone.setProvider((Provider) null);\n}",
    "testName" : "test1717"
  },
  "test4949" : {
    "methodSignature" : "public static void setDefault(DateTimeZone zone) throws SecurityException",
    "methodName" : "setDefault",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4949() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    dateTimeZone0.isLocalDateTimeGap((LocalDateTime) null);\n    DateTimeZone.setDefault(dateTimeZone0);\n}",
    "testName" : "test4949"
  },
  "test3939" : {
    "methodSignature" : "public static void setDefault(DateTimeZone zone) throws SecurityException",
    "methodName" : "setDefault",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3939() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forID(\"-[C!,</~4gjti\");\n    DateTimeZone.setDefault(dateTimeZone0);\n}",
    "testName" : "test3939"
  },
  "test5959" : {
    "methodSignature" : "public long convertLocalToUTC(long instantLocal, boolean strict)",
    "methodName" : "convertLocalToUTC",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5959() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    dateTimeZone0.convertLocalToUTC(9223372036854775807L, true);\n}",
    "testName" : "test5959"
  },
  "test2525" : {
    "methodSignature" : "public static DateTimeZone forOffsetHours(int hoursOffset) throws IllegalArgumentException",
    "methodName" : "forOffsetHours",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2525() throws Throwable {\n    DateTimeZone.forOffsetHours((-347));\n}",
    "testName" : "test2525"
  },
  "test1515" : {
    "methodSignature" : "public static Set<String> getAvailableIDs()",
    "methodName" : "getAvailableIDs",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1515() throws Throwable {\n    DateTimeZone.getDefault();\n    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();\n    DateTimeZone.getAvailableIDs();\n}",
    "testName" : "test1515"
  },
  "test4747" : {
    "methodSignature" : "public static DateTimeZone forID(String id)",
    "methodName" : "forID",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4747() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    dateTimeZone0.getName(9223372036854775804L);\n    DateTimeZone.forID(\"-07:00\");\n}",
    "testName" : "test4747"
  },
  "test3737" : {
    "methodSignature" : "public long convertLocalToUTC(long instantLocal, boolean strict)",
    "methodName" : "convertLocalToUTC",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3737() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    dateTimeZone0.convertLocalToUTC((-28377968L), false);\n}",
    "testName" : "test3737"
  },
  "test5353" : {
    "methodSignature" : "public static void setDefault(DateTimeZone zone) throws SecurityException",
    "methodName" : "setDefault",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5353() throws Throwable {\n    DateTimeZone.setDefault((DateTimeZone) null);\n}",
    "testName" : "test5353"
  },
  "test4141" : {
    "methodSignature" : "public static void setDefault(DateTimeZone zone) throws SecurityException",
    "methodName" : "setDefault",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4141() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forID(\"+Ri\");\n    DateTimeZone.setDefault(dateTimeZone0);\n}",
    "testName" : "test4141"
  },
  "test6363" : {
    "methodSignature" : "public long convertLocalToUTC(long instantLocal, boolean strict)",
    "methodName" : "convertLocalToUTC",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6363() throws Throwable {\n    TimeZone timeZone0 = TimeZone.getTimeZone(\"PRT\");\n    DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);\n    dateTimeZone0.previousTransition(604800L);\n    dateTimeZone0.convertLocalToUTC((-765399600001L), false);\n}",
    "testName" : "test6363"
  },
  "test3131" : {
    "methodSignature" : "public int getOffsetFromLocal(long instantLocal)",
    "methodName" : "getOffsetFromLocal",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3131() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    dateTimeZone0.getOffsetFromLocal(9223372036854775804L);\n}",
    "testName" : "test3131"
  },
  "test5151" : {
    "methodSignature" : "public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException",
    "methodName" : "forOffsetHoursMinutes",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5151() throws Throwable {\n    DateTimeZone.forOffsetHoursMinutes(0, 2147483645);\n}",
    "testName" : "test5151"
  },
  "test6161" : {
    "methodSignature" : "public long convertUTCToLocal(long instantUTC)",
    "methodName" : "convertUTCToLocal",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6161() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    dateTimeZone0.convertUTCToLocal((-9223372036829575809L));\n}",
    "testName" : "test6161"
  },
  "test000" : {
    "methodSignature" : "public long getMillisKeepLocal(DateTimeZone newZone, long oldInstant)",
    "methodName" : "getMillisKeepLocal",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    dateTimeZone0.getMillisKeepLocal(dateTimeZone0, 9223372036854775773L);\n}",
    "testName" : "test000"
  },
  "test044" : {
    "methodSignature" : "public static DateTimeZone forOffsetHours(int hoursOffset) throws IllegalArgumentException",
    "methodName" : "forOffsetHours",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044() throws Throwable {\n    DateTimeZone.forOffsetHours(57);\n}",
    "testName" : "test044"
  },
  "test088" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088() throws Throwable {\n    DateTimeZone.getDefault();\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    DefaultNameProvider defaultNameProvider0 = new DefaultNameProvider();\n    DateTimeZone.setNameProvider(defaultNameProvider0);\n    dateTimeZone0.toString();\n}",
    "testName" : "test088"
  },
  "test2929" : {
    "methodSignature" : "public static DateTimeZone forTimeZone(TimeZone zone)",
    "methodName" : "forTimeZone",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2929() throws Throwable {\n    DateTimeZone.forTimeZone((TimeZone) null);\n}",
    "testName" : "test2929"
  },
  "test1919" : {
    "methodSignature" : "public static DateTimeZone forTimeZone(TimeZone zone)",
    "methodName" : "forTimeZone",
    "className" : "org.joda.time.DateTimeZone",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1919() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(45, \"w#c)d f}r[Td\");\n    DateTimeZone.forTimeZone(simpleTimeZone0);\n    DateTimeZone.forTimeZone(simpleTimeZone0);\n}",
    "testName" : "test1919"
  }
}