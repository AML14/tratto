project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test0000,"public void test0000() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(""~oxM[4"");
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);
    MutableDateTime mutableDateTime0 = dateTimeFormatter0.parseMutableDateTime(""~oxM[4"");
    assertFalse(dateTimeFormatter0.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter0.isOffsetParsed())
project,0,test0001,"public void test0001() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(""~oxM[4"");
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);
    MutableDateTime mutableDateTime0 = dateTimeFormatter0.parseMutableDateTime(""~oxM[4"");
    assertEquals(2000, dateTimeFormatter0.getDefaultYear());
}",0,
project,0,test0002,"public void test0002() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(""~oxM[4"");
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);
    MutableDateTime mutableDateTime0 = dateTimeFormatter0.parseMutableDateTime(""~oxM[4"");
    assertEquals(28800000L, mutableDateTime0.getMillis());
}",0,
project,0,test0013,"public void test0013() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(""~oxM[4"");
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);
    long long0 = dateTimeFormatter0.parseMillis(""~oxM[4"");
    assertEquals(2000, dateTimeFormatter0.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter0.getDefaultYear())"
project,0,test0014,"public void test0014() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(""~oxM[4"");
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);
    long long0 = dateTimeFormatter0.parseMillis(""~oxM[4"");
    assertFalse(dateTimeFormatter0.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter0.isOffsetParsed())
project,0,test0015,"public void test0015() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(""~oxM[4"");
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);
    long long0 = dateTimeFormatter0.parseMillis(""~oxM[4"");
    assertEquals(28800000L, long0);
}",1,
project,0,test0027,"public void test0027() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 1, false);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) fixedDateTimeZone0, 1);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(julianChronology0);
    StringWriter stringWriter0 = new StringWriter();
    dateTimeFormatter1.printTo((Writer) stringWriter0, 0L);
    assertFalse(dateTimeFormatter1.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter1.isOffsetParsed())
project,0,test0038,"public void test0038() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
    Partial partial0 = new Partial(dateTimeFieldType0, 1);
    DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
    StringBuffer stringBuffer0 = new StringBuffer();
    dateTimeFormatter0.printTo(stringBuffer0, (ReadablePartial) partial0);
    assertEquals(2000, dateTimeFormatter0.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter0.getDefaultYear())"
project,0,test0039,"public void test0039() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
    Partial partial0 = new Partial(dateTimeFieldType0, 1);
    DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
    StringBuffer stringBuffer0 = new StringBuffer();
    dateTimeFormatter0.printTo(stringBuffer0, (ReadablePartial) partial0);
    assertFalse(dateTimeFormatter0.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter0.isOffsetParsed())
project,0,test00410,"public void test00410() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
    StringBuffer stringBuffer0 = new StringBuffer(0);
    MockDate mockDate0 = new MockDate();
    YearMonth yearMonth0 = YearMonth.fromDateFields(mockDate0);
    dateTimeFormatter0.printTo((Appendable) stringBuffer0, (ReadablePartial) yearMonth0);
    assertEquals(2000, dateTimeFormatter0.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter0.getDefaultYear())"
project,0,test00411,"public void test00411() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
    StringBuffer stringBuffer0 = new StringBuffer(0);
    MockDate mockDate0 = new MockDate();
    YearMonth yearMonth0 = YearMonth.fromDateFields(mockDate0);
    dateTimeFormatter0.printTo((Appendable) stringBuffer0, (ReadablePartial) yearMonth0);
    assertFalse(dateTimeFormatter0.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter0.isOffsetParsed())
project,0,test00512,"public void test00512() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 24, 0);
    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];
    StringWriter stringWriter0 = new StringWriter();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 0);
    DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_MatchingParser0);
    MutableDateTime mutableDateTime0 = new MutableDateTime();
    DateTime dateTime0 = mutableDateTime0.toDateTime(dateTimeZone0);
    dateTimeFormatter0.printTo((Appendable) stringWriter0, (ReadableInstant) dateTime0);
    assertEquals(2000, dateTimeFormatter0.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter0.getDefaultYear())"
project,0,test00513,"public void test00513() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 24, 0);
    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];
    StringWriter stringWriter0 = new StringWriter();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 0);
    DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_MatchingParser0);
    MutableDateTime mutableDateTime0 = new MutableDateTime();
    DateTime dateTime0 = mutableDateTime0.toDateTime(dateTimeZone0);
    dateTimeFormatter0.printTo((Appendable) stringWriter0, (ReadableInstant) dateTime0);
    assertFalse(dateTimeFormatter0.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter0.isOffsetParsed())
project,0,test00614,"public void test00614() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
    MockPrintStream mockPrintStream0 = new MockPrintStream(""America/Los_Angeles"");
    dateTimeFormatter0.printTo((Appendable) mockPrintStream0, (long) 0);
    assertFalse(dateTimeFormatter0.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter0.isOffsetParsed())
project,0,test00615,"public void test00615() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
    MockPrintStream mockPrintStream0 = new MockPrintStream(""America/Los_Angeles"");
    dateTimeFormatter0.printTo((Appendable) mockPrintStream0, (long) 0);
    assertEquals(2000, dateTimeFormatter0.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter0.getDefaultYear())"
project,0,test00716,"public void test00716() throws Throwable {
    HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
    DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(929, hashMap0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(191);
    CharArrayWriter charArrayWriter0 = new CharArrayWriter(3600);
    DateMidnight dateMidnight0 = new DateMidnight(4294967295L, dateTimeZone0);
    dateTimeFormatter0.printTo((Writer) charArrayWriter0, (ReadableInstant) dateMidnight0);
    assertFalse(dateTimeFormatter0.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter0.isOffsetParsed())
project,0,test00717,"public void test00717() throws Throwable {
    HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
    DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(929, hashMap0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(191);
    CharArrayWriter charArrayWriter0 = new CharArrayWriter(3600);
    DateMidnight dateMidnight0 = new DateMidnight(4294967295L, dateTimeZone0);
    dateTimeFormatter0.printTo((Writer) charArrayWriter0, (ReadableInstant) dateMidnight0);
    assertEquals(2000, dateTimeFormatter0.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter0.getDefaultYear())"
project,0,test00819,"public void test00819() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 1, false);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
    StringWriter stringWriter0 = new StringWriter();
    dateTimeFormatter0.printTo((Writer) stringWriter0, 0L);
    assertEquals(2000, dateTimeFormatter0.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter0.getDefaultYear())"
project,0,test00920,"public void test00920() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 24, 0);
    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];
    DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_MatchingParser0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
    assertEquals(0, dateTimeFormatter2.getDefaultYear());
}",0,
project,0,test00921,"public void test00921() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 24, 0);
    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];
    DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_MatchingParser0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
    assertFalse(dateTimeFormatter2.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter2.isOffsetParsed())
project,0,test00922,"public void test00922() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 24, 0);
    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];
    DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_MatchingParser0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
    assertFalse(dateTimeFormatter0.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter0.isOffsetParsed())
project,0,test00923,"public void test00923() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 24, 0);
    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];
    DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_MatchingParser0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
    assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
}",0,
project,0,test00924,"public void test00924() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 24, 0);
    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];
    DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_MatchingParser0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
    assertEquals(2000, dateTimeFormatter0.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter0.getDefaultYear())"
project,0,test01025,"public void test01025() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 24, 0);
    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];
    DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_MatchingParser0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-10));
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
    assertEquals(2000, dateTimeFormatter0.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter0.getDefaultYear())"
project,0,test01026,"public void test01026() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 24, 0);
    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];
    DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_MatchingParser0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-10));
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
    assertFalse(dateTimeFormatter1.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter1.isOffsetParsed())
project,0,test01027,"public void test01027() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 24, 0);
    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];
    DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_MatchingParser0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-10));
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
    assertEquals((-10), dateTimeFormatter2.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter2.getDefaultYear())"
project,0,test01028,"public void test01028() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 24, 0);
    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];
    DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_MatchingParser0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-10));
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
    assertEquals((-10), dateTimeFormatter1.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter1.getDefaultYear())"
project,0,test01029,"public void test01029() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 24, 0);
    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];
    DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_MatchingParser0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-10));
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
    assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
}",0,
project,0,test01030,"public void test01030() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 24, 0);
    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];
    DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_MatchingParser0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-10));
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
    assertFalse(dateTimeFormatter2.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter2.isOffsetParsed())
project,0,test01131,"public void test01131() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("""");
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone((DateTimeZone) null);
    assertEquals(2000, dateTimeFormatter2.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter2.getDefaultYear())"
project,0,test01132,"public void test01132() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("""");
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone((DateTimeZone) null);
    assertTrue(dateTimeFormatter2.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter2.isOffsetParsed())
project,0,test01133,"public void test01133() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("""");
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone((DateTimeZone) null);
    assertFalse(dateTimeFormatter0.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter0.isOffsetParsed())
project,0,test01234,"public void test01234() throws Throwable {
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone(dateTimeZone0);
    assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
}",1,
project,0,test01235,"public void test01235() throws Throwable {
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone(dateTimeZone0);
    assertEquals(0, dateTimeFormatter2.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter2.getDefaultYear())"
project,0,test01236,"public void test01236() throws Throwable {
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone(dateTimeZone0);
    assertFalse(dateTimeFormatter0.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter0.isOffsetParsed())
project,0,test01237,"public void test01237() throws Throwable {
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone(dateTimeZone0);
    assertFalse(dateTimeFormatter2.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter2.isOffsetParsed())
project,0,test01238,"public void test01238() throws Throwable {
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone(dateTimeZone0);
    assertEquals(2000, dateTimeFormatter0.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter0.getDefaultYear())"
project,0,test01339,"public void test01339() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-1544), (-1542));
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-2754));
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone(dateTimeZone0);
    assertEquals((-2754), dateTimeFormatter2.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter2.getDefaultYear())"
project,0,test01340,"public void test01340() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-1544), (-1542));
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-2754));
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone(dateTimeZone0);
    assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
}",0,
project,0,test01341,"public void test01341() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-1544), (-1542));
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-2754));
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone(dateTimeZone0);
    assertFalse(dateTimeFormatter1.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter1.isOffsetParsed())
project,0,test01342,"public void test01342() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-1544), (-1542));
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-2754));
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone(dateTimeZone0);
    assertEquals(2000, dateTimeFormatter0.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter0.getDefaultYear())"
project,0,test01343,"public void test01343() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-1544), (-1542));
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-2754));
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone(dateTimeZone0);
    assertFalse(dateTimeFormatter2.isOffsetParsed());
}",0,assertFalse(dateTimeFormatter2.isOffsetParsed())
project,0,test01344,"public void test01344() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-1544), (-1542));
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-2754));
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone(dateTimeZone0);
    assertEquals((-2754), dateTimeFormatter1.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter1.getDefaultYear())"
project,0,test01445,"public void test01445() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("""");
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear((Integer) islamicChronology0.AH);
    assertEquals(2000, dateTimeFormatter1.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter1.getDefaultYear())"
project,0,test01446,"public void test01446() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("""");
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear((Integer) islamicChronology0.AH);
    assertFalse(dateTimeFormatter0.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter0.isOffsetParsed())
project,0,test01447,"public void test01447() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("""");
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear((Integer) islamicChronology0.AH);
    assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
}",0,
project,0,test01448,"public void test01448() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("""");
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear((Integer) islamicChronology0.AH);
    assertEquals(2000, dateTimeFormatter2.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter2.getDefaultYear())"
project,0,test01449,"public void test01449() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("""");
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear((Integer) islamicChronology0.AH);
    assertTrue(dateTimeFormatter1.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter1.isOffsetParsed())
project,0,test01550,"public void test01550() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(222);
    Integer integer0 = new Integer(222);
    DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear(integer0);
    assertFalse(dateTimeFormatter1.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter1.isOffsetParsed())
project,0,test01551,"public void test01551() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(222);
    Integer integer0 = new Integer(222);
    DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear(integer0);
    assertSame(dateTimeFormatter3, dateTimeFormatter2);
}",0,
project,0,test01552,"public void test01552() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(222);
    Integer integer0 = new Integer(222);
    DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear(integer0);
    assertEquals(0, dateTimeFormatter3.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter3.getDefaultYear())"
project,0,test01554,"public void test01554() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(222);
    Integer integer0 = new Integer(222);
    DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear(integer0);
    assertEquals(2000, dateTimeFormatter0.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter0.getDefaultYear())"
project,0,test01655,"public void test01655() throws Throwable {
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction((DateTimeFieldType) null, 19, 19);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(19, 19);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-5299));
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear((Integer) buddhistChronology0.BE);
    assertFalse(dateTimeFormatter1.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter1.isOffsetParsed())
project,0,test01656,"public void test01656() throws Throwable {
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction((DateTimeFieldType) null, 19, 19);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(19, 19);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-5299));
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear((Integer) buddhistChronology0.BE);
    assertEquals((-5299), dateTimeFormatter2.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter2.getDefaultYear())"
project,0,test01657,"public void test01657() throws Throwable {
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction((DateTimeFieldType) null, 19, 19);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(19, 19);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-5299));
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear((Integer) buddhistChronology0.BE);
    assertEquals(2000, dateTimeFormatter0.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter0.getDefaultYear())"
project,0,test01658,"public void test01658() throws Throwable {
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction((DateTimeFieldType) null, 19, 19);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(19, 19);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-5299));
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear((Integer) buddhistChronology0.BE);
    assertEquals((-5299), dateTimeFormatter1.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter1.getDefaultYear())"
project,0,test01659,"public void test01659() throws Throwable {
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction((DateTimeFieldType) null, 19, 19);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(19, 19);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-5299));
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear((Integer) buddhistChronology0.BE);
    assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
}",0,
project,0,test01760,"public void test01760() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(4);
    assertTrue(dateTimeFormatter1.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter1.isOffsetParsed())
project,0,test01761,"public void test01761() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(4);
    assertEquals(2000, dateTimeFormatter2.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter2.getDefaultYear())"
project,0,test01762,"public void test01762() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(4);
    assertEquals(4, (int) dateTimeFormatter2.getPivotYear());
}",0,
project,0,test01763,"public void test01763() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(4);
    assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
}",0,
project,0,test01764,"public void test01764() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(4);
    assertEquals(2000, dateTimeFormatter1.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter1.getDefaultYear())"
project,0,test01765,"public void test01765() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(4);
    assertFalse(dateTimeFormatter0.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter0.isOffsetParsed())
project,0,test01866,"public void test01866() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 24, 0);
    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];
    DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_MatchingParser0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-10));
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(0);
    assertEquals(0, (int) dateTimeFormatter2.getPivotYear());
}",0,
project,0,test01867,"public void test01867() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 24, 0);
    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];
    DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_MatchingParser0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-10));
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(0);
    assertEquals((-10), dateTimeFormatter1.getDefaultYear());
}",0,
project,0,test01868,"public void test01868() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 24, 0);
    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];
    DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_MatchingParser0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-10));
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(0);
    assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
}",0,
project,0,test01869,"public void test01869() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 24, 0);
    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];
    DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_MatchingParser0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-10));
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(0);
    assertEquals(2000, dateTimeFormatter0.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter0.getDefaultYear())"
project,0,test01870,"public void test01870() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 24, 0);
    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];
    DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_MatchingParser0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-10));
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(0);
    assertEquals((-10), dateTimeFormatter2.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter2.getDefaultYear())"
project,0,test01871,"public void test01871() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 24, 0);
    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];
    DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_MatchingParser0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-10));
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(0);
    assertFalse(dateTimeFormatter1.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter1.isOffsetParsed())
project,0,test01972,"public void test01972() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 24, 0);
    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];
    DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_MatchingParser0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
    assertEquals(2000, dateTimeFormatter0.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter0.getDefaultYear())"
project,0,test01973,"public void test01973() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 24, 0);
    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];
    DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_MatchingParser0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
    assertTrue(dateTimeFormatter2.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter2.isOffsetParsed())
project,0,test01974,"public void test01974() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 24, 0);
    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];
    DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_MatchingParser0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
    assertEquals(0, dateTimeFormatter2.getDefaultYear());
}",0,
project,0,test01975,"public void test01975() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 24, 0);
    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];
    DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_MatchingParser0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
    assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
}",0,
project,0,test02076,"public void test02076() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 24, 0);
    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];
    DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_MatchingParser0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-10));
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
    assertEquals(2000, dateTimeFormatter0.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter0.getDefaultYear())"
project,0,test02077,"public void test02077() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 24, 0);
    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];
    DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_MatchingParser0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-10));
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
    assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
}",0,
project,0,test02078,"public void test02078() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 24, 0);
    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];
    DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_MatchingParser0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-10));
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
    assertEquals((-10), dateTimeFormatter1.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter1.getDefaultYear())"
project,0,test02079,"public void test02079() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 24, 0);
    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];
    DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_MatchingParser0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-10));
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
    assertEquals((-10), dateTimeFormatter2.getDefaultYear());
}",0,
project,0,test02080,"public void test02080() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 24, 0);
    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];
    DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_MatchingParser0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-10));
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
    assertTrue(dateTimeFormatter2.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter2.isOffsetParsed())
project,0,test02181,"public void test02181() throws Throwable {
    HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
    DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(331, hashMap0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);
    Locale locale0 = Locale.ENGLISH;
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
    assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
}",0,
project,0,test02182,"public void test02182() throws Throwable {
    HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
    DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(331, hashMap0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);
    Locale locale0 = Locale.ENGLISH;
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
    assertFalse(dateTimeFormatter1.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter1.isOffsetParsed())
project,0,test02183,"public void test02183() throws Throwable {
    HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
    DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(331, hashMap0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);
    Locale locale0 = Locale.ENGLISH;
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
    assertEquals(0, dateTimeFormatter2.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter2.getDefaultYear())"
project,0,test02184,"public void test02184() throws Throwable {
    HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
    DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(331, hashMap0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);
    Locale locale0 = Locale.ENGLISH;
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
    assertEquals(2000, dateTimeFormatter0.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter0.getDefaultYear())"
project,0,test02285,"public void test02285() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 20503125, false);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, (DateTimeParser) null);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-13));
    Locale locale0 = Locale.JAPAN;
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
    assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
}",0,
project,0,test02286,"public void test02286() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 20503125, false);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, (DateTimeParser) null);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-13));
    Locale locale0 = Locale.JAPAN;
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
    assertEquals((-13), dateTimeFormatter1.getDefaultYear());
}",0,
project,0,test02287,"public void test02287() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 20503125, false);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, (DateTimeParser) null);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-13));
    Locale locale0 = Locale.JAPAN;
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
    assertEquals(2000, dateTimeFormatter0.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter0.getDefaultYear())"
project,0,test02288,"public void test02288() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 20503125, false);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, (DateTimeParser) null);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-13));
    Locale locale0 = Locale.JAPAN;
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
    assertFalse(dateTimeFormatter1.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter1.isOffsetParsed())
project,0,test02289,"public void test02289() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 20503125, false);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, (DateTimeParser) null);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-13));
    Locale locale0 = Locale.JAPAN;
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
    assertEquals((-13), dateTimeFormatter2.getDefaultYear());
}",0,
project,0,test02390,"public void test02390() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 2147483582, (-5530));
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear(16);
    assertFalse(dateTimeFormatter0.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter0.isOffsetParsed())
project,0,test02391,"public void test02391() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 2147483582, (-5530));
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear(16);
    assertTrue(dateTimeFormatter1.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter1.isOffsetParsed())
project,0,test02392,"public void test02392() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 2147483582, (-5530));
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear(16);
    assertEquals(16, dateTimeFormatter2.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter2.getDefaultYear())"
project,0,test02393,"public void test02393() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 2147483582, (-5530));
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear(16);
    assertEquals(2000, dateTimeFormatter1.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter1.getDefaultYear())"
project,0,test02494,"public void test02494() throws Throwable {
    DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 6);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, (DateTimeParser) null);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(buddhistChronology0);
    assertFalse(dateTimeFormatter0.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter0.isOffsetParsed())
project,0,test02495,"public void test02495() throws Throwable {
    DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 6);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, (DateTimeParser) null);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(buddhistChronology0);
    assertEquals(2000, dateTimeFormatter1.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter1.getDefaultYear())"
project,0,test02496,"public void test02496() throws Throwable {
    DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 6);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, (DateTimeParser) null);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(buddhistChronology0);
    assertTrue(dateTimeFormatter1.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter1.isOffsetParsed())
project,0,test02497,"public void test02497() throws Throwable {
    DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 6);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, (DateTimeParser) null);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(buddhistChronology0);
    assertEquals(2000, dateTimeFormatter2.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter2.getDefaultYear())"
project,0,test02498,"public void test02498() throws Throwable {
    DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 6);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, (DateTimeParser) null);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(buddhistChronology0);
    assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
}",0,
project,0,test02599,"public void test02599() throws Throwable {
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_Composite0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
    IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(islamicChronology0);
    assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
}",0,
project,0,test025100,"public void test025100() throws Throwable {
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_Composite0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
    IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(islamicChronology0);
    assertEquals(2000, dateTimeFormatter0.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter0.getDefaultYear())"
project,0,test025101,"public void test025101() throws Throwable {
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_Composite0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
    IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(islamicChronology0);
    assertFalse(dateTimeFormatter1.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter1.isOffsetParsed())
project,0,test025102,"public void test025102() throws Throwable {
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_Composite0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
    IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(islamicChronology0);
    assertEquals(0, dateTimeFormatter2.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter2.getDefaultYear())"
project,0,test026103,"public void test026103() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 20503125, false);
    JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) null);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, (DateTimeParser) null);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-13));
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(julianChronology0);
    assertEquals((-13), dateTimeFormatter2.getDefaultYear());
}",0,
project,0,test026104,"public void test026104() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 20503125, false);
    JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) null);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, (DateTimeParser) null);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-13));
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(julianChronology0);
    assertEquals(2000, dateTimeFormatter0.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter0.getDefaultYear())"
project,0,test026105,"public void test026105() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 20503125, false);
    JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) null);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, (DateTimeParser) null);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-13));
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(julianChronology0);
    assertEquals((-13), dateTimeFormatter1.getDefaultYear());
}",0,
project,0,test026106,"public void test026106() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 20503125, false);
    JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) null);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, (DateTimeParser) null);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-13));
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(julianChronology0);
    assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
}",0,
project,0,test026107,"public void test026107() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 20503125, false);
    JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) null);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, (DateTimeParser) null);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-13));
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(julianChronology0);
    assertFalse(dateTimeFormatter1.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter1.isOffsetParsed())
project,0,test027108,"public void test027108() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
    LocalDate localDate0 = LocalDate.now(dateTimeZone0);
    dateTimeFormatter0.print((ReadablePartial) localDate0);
    assertEquals(2000, dateTimeFormatter0.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter0.getDefaultYear())"
project,0,test027109,"public void test027109() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
    LocalDate localDate0 = LocalDate.now(dateTimeZone0);
    dateTimeFormatter0.print((ReadablePartial) localDate0);
    assertFalse(dateTimeFormatter0.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter0.isOffsetParsed())
project,0,test028110,"public void test028110() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("""");
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
    LocalDateTime localDateTime0 = LocalDateTime.now();
    dateTimeFormatter0.print((ReadablePartial) localDateTime0);
    assertEquals(2000, dateTimeFormatter0.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter0.getDefaultYear())"
project,0,test028111,"public void test028111() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("""");
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
    LocalDateTime localDateTime0 = LocalDateTime.now();
    dateTimeFormatter0.print((ReadablePartial) localDateTime0);
    assertFalse(dateTimeFormatter0.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter0.isOffsetParsed())
project,0,test029112,"public void test029112() throws Throwable {
    HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
    DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(929, hashMap0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);
    DateTime dateTime0 = DateTime.now();
    dateTimeFormatter0.print((ReadableInstant) dateTime0);
    assertEquals(2000, dateTimeFormatter0.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter0.getDefaultYear())"
project,0,test029113,"public void test029113() throws Throwable {
    HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
    DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(929, hashMap0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);
    DateTime dateTime0 = DateTime.now();
    dateTimeFormatter0.print((ReadableInstant) dateTime0);
    assertFalse(dateTimeFormatter0.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter0.isOffsetParsed())
project,0,test030114,"public void test030114() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
    String string0 = dateTimeFormatter0.print(24L);
    assertFalse(dateTimeFormatter0.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter0.isOffsetParsed())
project,0,test030115,"public void test030115() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
    String string0 = dateTimeFormatter0.print(24L);
    assertEquals(""America/Los_Angeles"", string0);
}",0,
project,0,test030116,"public void test030116() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
    String string0 = dateTimeFormatter0.print(24L);
    assertEquals(2000, dateTimeFormatter0.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter0.getDefaultYear())"
project,0,test031117,"public void test031117() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(929, (Map<String, DateTimeZone>) null);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);
    dateTimeFormatter0.print(0L);
    assertEquals(2000, dateTimeFormatter0.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter0.getDefaultYear())"
project,0,test031118,"public void test031118() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(929, (Map<String, DateTimeZone>) null);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);
    dateTimeFormatter0.print(0L);
    assertFalse(dateTimeFormatter0.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter0.isOffsetParsed())
project,0,test032119,"public void test032119() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("""");
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
    MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime("""");
    assertEquals(2000, dateTimeFormatter1.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter1.getDefaultYear())"
project,0,test032120,"public void test032120() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("""");
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
    MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime("""");
    assertEquals(0L, mutableDateTime0.getMillis());
}",0,"assertEquals(0, mutableDateTime0.getMillis())"
project,0,test032121,"public void test032121() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("""");
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
    MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime("""");
    assertFalse(dateTimeFormatter1.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter1.isOffsetParsed())
project,0,test032122,"public void test032122() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("""");
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
    MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime("""");
    assertFalse(dateTimeFormatter0.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter0.isOffsetParsed())
project,0,test033123,"public void test033123() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("""", """", false, 191, 20587500);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
    long long0 = dateTimeFormatter0.parseMillis("""");
    assertEquals(0L, long0);
}",0,"assertEquals(1, long0)"
project,0,test033124,"public void test033124() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("""", """", false, 191, 20587500);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
    long long0 = dateTimeFormatter0.parseMillis("""");
    assertFalse(dateTimeFormatter0.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter0.isOffsetParsed())
project,0,test033125,"public void test033125() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("""", """", false, 191, 20587500);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
    long long0 = dateTimeFormatter0.parseMillis("""");
    assertEquals(2000, dateTimeFormatter0.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter0.getDefaultYear())"
project,0,test034126,"public void test034126() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(""k9<{u8vhJc,4\"""");
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
    dateTimeFormatter0.parseLocalDate(""k9<{u8vhJc,4\"""");
    assertEquals(2000, dateTimeFormatter0.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter0.getDefaultYear())"
project,0,test034127,"public void test034127() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(""k9<{u8vhJc,4\"""");
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
    dateTimeFormatter0.parseLocalDate(""k9<{u8vhJc,4\"""");
    assertFalse(dateTimeFormatter0.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter0.isOffsetParsed())
project,0,test035128,"public void test035128() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("""");
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);
    MutableDateTime mutableDateTime0 = dateTimeFormatter0.parseMutableDateTime("""");
    int int0 = dateTimeFormatter0.parseInto(mutableDateTime0, ""The partial must not be null"", (-1));
    assertEquals(2000, dateTimeFormatter0.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter0.getDefaultYear())"
project,0,test035129,"public void test035129() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("""");
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);
    MutableDateTime mutableDateTime0 = dateTimeFormatter0.parseMutableDateTime("""");
    int int0 = dateTimeFormatter0.parseInto(mutableDateTime0, ""The partial must not be null"", (-1));
    assertEquals(0, int0);
}",0,
project,0,test035130,"public void test035130() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("""");
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);
    MutableDateTime mutableDateTime0 = dateTimeFormatter0.parseMutableDateTime("""");
    int int0 = dateTimeFormatter0.parseInto(mutableDateTime0, ""The partial must not be null"", (-1));
    assertFalse(dateTimeFormatter0.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter0.isOffsetParsed())
project,0,test035131,"public void test035131() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("""");
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);
    MutableDateTime mutableDateTime0 = dateTimeFormatter0.parseMutableDateTime("""");
    int int0 = dateTimeFormatter0.parseInto(mutableDateTime0, ""The partial must not be null"", (-1));
    assertEquals(28800000L, mutableDateTime0.getMillis());
}",0,
project,0,test036132,"public void test036132() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
    DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 2280, false, 0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_PaddedNumber0, dateTimeFormatterBuilder_PaddedNumber0);
    DateTime dateTime0 = dateTimeFormatter0.parseDateTime(""19"");
    assertEquals((-2208960000000L), dateTime0.getMillis());
}",0,"assertEquals(0, dateTime0.getMillis())"
project,0,test036133,"public void test036133() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
    DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 2280, false, 0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_PaddedNumber0, dateTimeFormatterBuilder_PaddedNumber0);
    DateTime dateTime0 = dateTimeFormatter0.parseDateTime(""19"");
    assertFalse(dateTimeFormatter0.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter0.isOffsetParsed())
project,0,test036134,"public void test036134() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
    DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 2280, false, 0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_PaddedNumber0, dateTimeFormatterBuilder_PaddedNumber0);
    DateTime dateTime0 = dateTimeFormatter0.parseDateTime(""19"");
    assertEquals(2000, dateTimeFormatter0.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter0.getDefaultYear())"
project,0,test037135,"public void test037135() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-631), false);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_FixedNumber0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
    boolean boolean0 = dateTimeFormatter1.isOffsetParsed();
    assertEquals(2000, dateTimeFormatter1.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter1.getDefaultYear())"
project,0,test037136,"public void test037136() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-631), false);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_FixedNumber0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
    boolean boolean0 = dateTimeFormatter1.isOffsetParsed();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test037137,"public void test037137() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-631), false);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_FixedNumber0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
    boolean boolean0 = dateTimeFormatter1.isOffsetParsed();
    assertFalse(dateTimeFormatter0.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter0.isOffsetParsed())
project,0,test038138,"public void test038138() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("""");
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);
    dateTimeFormatter0.getPrinter();
    assertEquals(2000, dateTimeFormatter0.getDefaultYear());
}",0,"assertEquals(1, dateTimeFormatter0.getDefaultYear())"
project,0,test038139,"public void test038139() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("""");
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);
    dateTimeFormatter0.getPrinter();
    assertFalse(dateTimeFormatter0.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter0.isOffsetParsed())
project,0,test039140,"public void test039140() throws Throwable {
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
    dateTimeFormatter0.getPrinter();
    assertFalse(dateTimeFormatter0.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter0.isOffsetParsed())
project,0,test039141,"public void test039141() throws Throwable {
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
    dateTimeFormatter0.getPrinter();
    assertEquals(2000, dateTimeFormatter0.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter0.getDefaultYear())"
project,0,test040142,"public void test040142() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-696), true);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
    dateTimeFormatter0.getPrinter();
    assertFalse(dateTimeFormatter0.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter0.isOffsetParsed())
project,0,test040143,"public void test040143() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-696), true);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
    dateTimeFormatter0.getPrinter();
    assertEquals(2000, dateTimeFormatter0.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter0.getDefaultYear())"
project,0,test041144,"public void test041144() throws Throwable {
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction((DateTimeFieldType) null, 19, 19);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(19);
    Integer integer0 = dateTimeFormatter1.getPivotYear();
    assertFalse(dateTimeFormatter1.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter1.isOffsetParsed())
project,0,test041145,"public void test041145() throws Throwable {
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction((DateTimeFieldType) null, 19, 19);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(19);
    Integer integer0 = dateTimeFormatter1.getPivotYear();
    assertEquals(2000, dateTimeFormatter1.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter1.getDefaultYear())"
project,0,test041146,"public void test041146() throws Throwable {
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction((DateTimeFieldType) null, 19, 19);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(19);
    Integer integer0 = dateTimeFormatter1.getPivotYear();
    assertEquals(19, (int) integer0);
}",0,
project,0,test042148,"public void test042148() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 1, false);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
    Integer integer0 = Integer.valueOf((-9));
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
    Integer integer1 = dateTimeFormatter1.getPivotYear();
    assertFalse(dateTimeFormatter1.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter1.isOffsetParsed())
project,0,test042149,"public void test042149() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 1, false);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
    Integer integer0 = Integer.valueOf((-9));
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
    Integer integer1 = dateTimeFormatter1.getPivotYear();
    assertNotNull(integer1);
}",0,
project,0,test042150,"public void test042150() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 1, false);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
    Integer integer0 = Integer.valueOf((-9));
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
    Integer integer1 = dateTimeFormatter1.getPivotYear();
    assertEquals(2000, dateTimeFormatter1.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter1.getDefaultYear())"
project,0,test043151,"public void test043151() throws Throwable {
    DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('/');
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, (DateTimeParser) null);
    dateTimeFormatter0.getParser();
    assertEquals(2000, dateTimeFormatter0.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter0.getDefaultYear())"
project,0,test043152,"public void test043152() throws Throwable {
    DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('/');
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, (DateTimeParser) null);
    dateTimeFormatter0.getParser();
    assertFalse(dateTimeFormatter0.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter0.isOffsetParsed())
project,0,test044153,"public void test044153() throws Throwable {
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
    dateTimeFormatter0.getParser();
    assertFalse(dateTimeFormatter0.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter0.isOffsetParsed())
project,0,test044154,"public void test044154() throws Throwable {
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
    dateTimeFormatter0.getParser();
    assertEquals(2000, dateTimeFormatter0.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter0.getDefaultYear())"
project,0,test045155,"public void test045155() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-1038), (-1038));
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
    dateTimeFormatter0.getParser();
    assertFalse(dateTimeFormatter0.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter0.isOffsetParsed())
project,0,test045156,"public void test045156() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-1038), (-1038));
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
    dateTimeFormatter0.getParser();
    assertEquals(2000, dateTimeFormatter0.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter0.getDefaultYear())"
project,0,test046157,"public void test046157() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
    Locale locale0 = Locale.JAPANESE;
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
    Locale locale1 = dateTimeFormatter1.getLocale();
    assertNotNull(locale1);
}",0,"assertEquals(locale0, locale1)"
project,0,test046158,"public void test046158() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
    Locale locale0 = Locale.JAPANESE;
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
    Locale locale1 = dateTimeFormatter1.getLocale();
    assertFalse(dateTimeFormatter1.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter1.isOffsetParsed())
project,0,test046159,"public void test046159() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
    Locale locale0 = Locale.JAPANESE;
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
    Locale locale1 = dateTimeFormatter1.getLocale();
    assertEquals(2000, dateTimeFormatter1.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter1.getDefaultYear())"
project,0,test047160,"public void test047160() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-1544), (-1542));
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-2754));
    int int0 = dateTimeFormatter1.getDefaultYear();
    assertFalse(dateTimeFormatter1.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter1.isOffsetParsed())
project,0,test047161,"public void test047161() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-1544), (-1542));
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-2754));
    int int0 = dateTimeFormatter1.getDefaultYear();
    assertEquals(2000, dateTimeFormatter0.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter0.getDefaultYear())"
project,0,test047162,"public void test047162() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-1544), (-1542));
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-2754));
    int int0 = dateTimeFormatter1.getDefaultYear();
    assertEquals((-2754), int0);
}",0,"assertEquals(1, int0)"
project,0,test048163,"public void test048163() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-631), false);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_FixedNumber0);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(buddhistChronology0);
    Chronology chronology0 = dateTimeFormatter1.getChronology();
    assertNotNull(chronology0);
}",0,assertNotNull(chronology0)
project,0,test048164,"public void test048164() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-631), false);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_FixedNumber0);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(buddhistChronology0);
    Chronology chronology0 = dateTimeFormatter1.getChronology();
    assertEquals(2000, dateTimeFormatter1.getDefaultYear());
}",0,
project,0,test048165,"public void test048165() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-631), false);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_FixedNumber0);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(buddhistChronology0);
    Chronology chronology0 = dateTimeFormatter1.getChronology();
    assertFalse(dateTimeFormatter1.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter1.isOffsetParsed())
project,0,test049166,"public void test049166() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-631), false);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_FixedNumber0);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(buddhistChronology0);
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
    Locale locale0 = Locale.GERMAN;
    DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withLocale(locale0);
    Chronology chronology0 = dateTimeFormatter3.getChronolgy();
    assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
}",0,
project,0,test049168,"public void test049168() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-631), false);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_FixedNumber0);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(buddhistChronology0);
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
    Locale locale0 = Locale.GERMAN;
    DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withLocale(locale0);
    Chronology chronology0 = dateTimeFormatter3.getChronolgy();
    assertTrue(dateTimeFormatter3.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter3.isOffsetParsed())
project,0,test049169,"public void test049169() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-631), false);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_FixedNumber0);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(buddhistChronology0);
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
    Locale locale0 = Locale.GERMAN;
    DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withLocale(locale0);
    Chronology chronology0 = dateTimeFormatter3.getChronolgy();
    assertFalse(dateTimeFormatter0.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter0.isOffsetParsed())
project,0,test049170,"public void test049170() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-631), false);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_FixedNumber0);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(buddhistChronology0);
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
    Locale locale0 = Locale.GERMAN;
    DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withLocale(locale0);
    Chronology chronology0 = dateTimeFormatter3.getChronolgy();
    assertEquals(2000, dateTimeFormatter3.getDefaultYear());
}",0,
project,0,test050171,"public void test050171() throws Throwable {
    StringBuffer stringBuffer0 = new StringBuffer(719527);
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 20503125, false);
    JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) null);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, (DateTimeParser) null);
    YearMonth yearMonth0 = new YearMonth((-28800926L), (Chronology) julianChronology0);
    // Undeclared exception!
    dateTimeFormatter0.printTo(stringBuffer0, (ReadablePartial) yearMonth0);
}",1,
project,0,test051172,"public void test051172() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-631), false);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_FixedNumber0);
    StringBuffer stringBuffer0 = new StringBuffer();
    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(65);
    LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
    // Undeclared exception!
    try {
        dateTimeFormatter0.printTo(stringBuffer0, (ReadablePartial) localDateTime0);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // Printing not supported
        //
        verifyException(""org.joda.time.format.DateTimeFormatter"", e);
    }
}",0,
project,0,test052173,"public void test052173() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("""");
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);
    MutableDateTime mutableDateTime0 = dateTimeFormatter0.parseMutableDateTime("""");
    // Undeclared exception!
    try {
        dateTimeFormatter0.printTo((StringBuffer) null, (ReadableInstant) mutableDateTime0);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // Printing not supported
        //
        verifyException(""org.joda.time.format.DateTimeFormatter"", e);
    }
}",0,
project,0,test053174,"public void test053174() throws Throwable {
    StringBuffer stringBuffer0 = new StringBuffer(719527);
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 20503125, false);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, (DateTimeParser) null);
    // Undeclared exception!
    dateTimeFormatter0.printTo(stringBuffer0, 59737472L);
}",0,
project,0,test054175,"public void test054175() throws Throwable {
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
    StringBuffer stringBuffer0 = new StringBuffer(""5/=("");
    // Undeclared exception!
    try {
        dateTimeFormatter0.printTo(stringBuffer0, 1089L);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.format.DateTimeFormatterBuilder$Composite"", e);
    }
}",0,
project,0,test055176,"public void test055176() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);
    // Undeclared exception!
    try {
        dateTimeFormatter0.printTo((StringBuffer) null, (-2065L));
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.format.DateTimeFormatterBuilder$TextField"", e);
    }
}",0,
project,0,test056177,"public void test056177() throws Throwable {
    DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 1665);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormat_StyleFormatter0);
    StringWriter stringWriter0 = new StringWriter();
    StringBuffer stringBuffer0 = stringWriter0.getBuffer();
    // Undeclared exception!
    try {
        dateTimeFormatter0.printTo(stringBuffer0, (long) 1665);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // No datetime pattern for locale: en
        //
        verifyException(""org.joda.time.format.DateTimeFormat$StyleFormatter"", e);
    }
}",0,
project,0,test057178,"public void test057178() throws Throwable {
    StringBuffer stringBuffer0 = new StringBuffer(719527);
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 20503125, false);
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, (DateTimeParser) null);
    LocalTime localTime0 = new LocalTime((long) 20503125, dateTimeZone0);
    // Undeclared exception!
    dateTimeFormatter0.printTo((Appendable) stringBuffer0, (ReadablePartial) localTime0);
}",0,
project,0,test058179,"public void test058179() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (byte) 89, (byte) 89);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_Fraction0);
    MockFileWriter mockFileWriter0 = new MockFileWriter("" %.4|+"");
    // Undeclared exception!
    try {
        dateTimeFormatter0.printTo((Appendable) mockFileWriter0, (ReadablePartial) null);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // Printing not supported
        //
        verifyException(""org.joda.time.format.DateTimeFormatter"", e);
    }
}",0,
project,0,test059180,"public void test059180() throws Throwable {
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_Composite0);
    CharArrayWriter charArrayWriter0 = new CharArrayWriter();
    // Undeclared exception!
    try {
        dateTimeFormatter0.printTo((Appendable) charArrayWriter0, (ReadableInstant) null);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // Printing not supported
        //
        verifyException(""org.joda.time.format.DateTimeFormatter"", e);
    }
}",0,
project,0,test060181,"public void test060181() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("""");
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);
    CharBuffer charBuffer0 = CharBuffer.allocate(2000);
    // Undeclared exception!
    try {
        dateTimeFormatter0.printTo((Appendable) charBuffer0, (long) 1);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // Printing not supported
        //
        verifyException(""org.joda.time.format.DateTimeFormatter"", e);
    }
}",0,
project,0,test061182,"public void test061182() throws Throwable {
    DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter((-748), 1029, 1029);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormat_StyleFormatter0);
    CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
    // Undeclared exception!
    try {
        dateTimeFormatter0.printTo((Appendable) charArrayWriter0, 1338L);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // No datetime pattern for locale: en
        //
        verifyException(""org.joda.time.format.DateTimeFormat$StyleFormatter"", e);
    }
}",0,
project,0,test062183,"public void test062183() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("""");
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);
    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
    StringWriter stringWriter0 = new StringWriter(1);
    LocalDate localDate0 = new LocalDate((Chronology) islamicChronology0);
    // Undeclared exception!
    try {
        dateTimeFormatter0.printTo((Writer) stringWriter0, (ReadablePartial) localDate0);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // Printing not supported
        //
        verifyException(""org.joda.time.format.DateTimeFormatter"", e);
    }
}",0,
project,0,test063184,"public void test063184() throws Throwable {
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
    BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0, 2534);
    // Undeclared exception!
    try {
        dateTimeFormatter0.printTo((Writer) bufferedWriter0, (-25271661L));
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.format.DateTimeFormatterBuilder$Composite"", e);
    }
}",0,
project,0,test064185,"public void test064185() throws Throwable {
    DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('+');
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
    // Undeclared exception!
    try {
        dateTimeFormatter0.printTo((Writer) null, 3600000L);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral"", e);
    }
}",0,
project,0,test065186,"public void test065186() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-631), false);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_FixedNumber0);
    Locale locale0 = Locale.GERMAN;
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
    Date date0 = mockGregorianCalendar0.getGregorianChange();
    MonthDay monthDay0 = MonthDay.fromDateFields(date0);
    // Undeclared exception!
    try {
        dateTimeFormatter0.print((ReadablePartial) monthDay0);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // Printing not supported
        //
        verifyException(""org.joda.time.format.DateTimeFormatter"", e);
    }
}",0,
project,0,test066187,"public void test066187() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral((String) null);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
    LocalDate localDate0 = LocalDate.now();
    // Undeclared exception!
    try {
        dateTimeFormatter0.print((ReadablePartial) localDate0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.format.DateTimeFormatterBuilder$StringLiteral"", e);
    }
}",0,
project,0,test067188,"public void test067188() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-1150), false);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) buddhistChronology0);
    // Undeclared exception!
    try {
        dateTimeFormatter0.print((ReadablePartial) localDateTime0);
        fail(""Expecting exception: NegativeArraySizeException"");
    } catch (NegativeArraySizeException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.lang.AbstractStringBuilder"", e);
    }
}",0,
project,0,test068189,"public void test068189() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
    DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 2146327844, true, 2146327844);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_PaddedNumber0, dateTimeFormatterBuilder_PaddedNumber0);
    DateMidnight dateMidnight0 = new DateMidnight((long) 4317);
    // Undeclared exception!
    dateTimeFormatter0.print((ReadableInstant) dateMidnight0);
}",0,
project,0,test069190,"public void test069190() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("""");
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);
    MutableDateTime mutableDateTime0 = dateTimeFormatter0.parseMutableDateTime("""");
    // Undeclared exception!
    try {
        dateTimeFormatter0.print((ReadableInstant) mutableDateTime0);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // Printing not supported
        //
        verifyException(""org.joda.time.format.DateTimeFormatter"", e);
    }
}",0,
project,0,test070191,"public void test070191() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 24, (-37));
    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];
    DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_MatchingParser0);
    // Undeclared exception!
    try {
        dateTimeFormatter0.print((ReadableInstant) null);
        fail(""Expecting exception: NegativeArraySizeException"");
    } catch (NegativeArraySizeException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.lang.AbstractStringBuilder"", e);
    }
}",0,
project,0,test071192,"public void test071192() throws Throwable {
    DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(122, 122, 122);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormat_StyleFormatter0);
    DateTime dateTime0 = new DateTime();
    // Undeclared exception!
    try {
        dateTimeFormatter0.print((ReadableInstant) dateTime0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // No datetime pattern for locale: en
        //
        verifyException(""org.joda.time.format.DateTimeFormat$StyleFormatter"", e);
    }
}",0,
project,0,test072193,"public void test072193() throws Throwable {
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_Composite0);
    // Undeclared exception!
    try {
        dateTimeFormatter0.print((long) 2771);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // Printing not supported
        //
        verifyException(""org.joda.time.format.DateTimeFormatter"", e);
    }
}",0,
project,0,test073194,"public void test073194() throws Throwable {
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction((DateTimeFieldType) null, 0, 0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
    // Undeclared exception!
    try {
        dateTimeFormatter0.print(2043L);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.format.DateTimeFormatterBuilder$Fraction"", e);
    }
}",0,
project,0,test074195,"public void test074195() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 2147483582, (-5530));
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
    // Undeclared exception!
    try {
        dateTimeFormatter0.print((long) 16);
        fail(""Expecting exception: NegativeArraySizeException"");
    } catch (NegativeArraySizeException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.lang.AbstractStringBuilder"", e);
    }
}",0,
project,0,test075196,"public void test075196() throws Throwable {
    DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(1789, 0, 0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormat_StyleFormatter0);
    // Undeclared exception!
    try {
        dateTimeFormatter0.print((-1L));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal date style 1789
        //
        verifyException(""java.text.DateFormat"", e);
    }
}",0,
project,0,test076197,"public void test076197() throws Throwable {
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
    // Undeclared exception!
    try {
        dateTimeFormatter0.parseMutableDateTime(""h"");
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.format.DateTimeFormatterBuilder$Composite"", e);
    }
}",0,
project,0,test077198,"public void test077198() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 13, false);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
    // Undeclared exception!
    try {
        dateTimeFormatter0.parseMutableDateTime((String) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter"", e);
    }
}",0,
project,0,test078199,"public void test078199() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 20503125, false);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, (DateTimeParser) null);
    // Undeclared exception!
    try {
        dateTimeFormatter0.parseMillis(""org.joda.time.base.AbstractDuration"");
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // Parsing not supported
        //
        verifyException(""org.joda.time.format.DateTimeFormatter"", e);
    }
}",0,
project,0,test079200,"public void test079200() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(929, (Map<String, DateTimeZone>) null);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);
    // Undeclared exception!
    try {
        dateTimeFormatter0.parseMillis("""");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName"", e);
    }
}",1,
project,0,test080201,"public void test080201() throws Throwable {
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_Composite0);
    // Undeclared exception!
    try {
        dateTimeFormatter0.parseLocalTime(""(n"");
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.format.DateTimeFormatterBuilder$Composite"", e);
    }
}",1,
project,0,test081202,"public void test081202() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);
    // Undeclared exception!
    try {
        dateTimeFormatter0.parseLocalTime(""h)\""Zj\""#2k}rK"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid format: \""h)\""Zj\""#2k}rK\""
        //
        verifyException(""org.joda.time.format.DateTimeFormatter"", e);
    }
}",1,
project,0,test082203,"public void test082203() throws Throwable {
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_Composite0);
    // Undeclared exception!
    try {
        dateTimeFormatter0.parseLocalDateTime("" instant,"");
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.format.DateTimeFormatterBuilder$Composite"", e);
    }
}",0,
project,0,test083204,"public void test083204() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 20, true);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
    // Undeclared exception!
    try {
        dateTimeFormatter0.parseLocalDateTime((String) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear"", e);
    }
}",0,
project,0,test084205,"public void test084205() throws Throwable {
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_Composite0);
    // Undeclared exception!
    try {
        dateTimeFormatter0.parseLocalDate(""H"");
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.format.DateTimeFormatterBuilder$Composite"", e);
    }
}",1,
project,0,test085206,"public void test085206() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("""");
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);
    // Undeclared exception!
    try {
        dateTimeFormatter0.parseLocalDate((String) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.format.DateTimeFormatterBuilder$StringLiteral"", e);
    }
}",0,
project,0,test086207,"public void test086207() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
    MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) null);
    // Undeclared exception!
    try {
        dateTimeFormatter0.parseInto(mutableDateTime0, "")!K"", 5);
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
    }
}",0,
project,0,test087208,"public void test087208() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-631), false);
    MutableDateTime mutableDateTime0 = new MutableDateTime((long) 2000, (Chronology) null);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
    // Undeclared exception!
    try {
        dateTimeFormatter0.parseInto(mutableDateTime0, (String) null, (-1958));
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter"", e);
    }
}",0,
project,0,test088209,"public void test088209() throws Throwable {
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
    // Undeclared exception!
    try {
        dateTimeFormatter0.parseDateTime(""Printing not supported"");
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.format.DateTimeFormatterBuilder$Composite"", e);
    }
}",1,
project,0,test089210,"public void test089210() throws Throwable {
    HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
    DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(592, hashMap0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);
    // Undeclared exception!
    try {
        dateTimeFormatter0.parseDateTime((String) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName"", e);
    }
}",1,
project,0,test090211,"public void test090211() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("""");
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
    dateTimeFormatter0.parseLocalDateTime("""");
    assertEquals(2000, dateTimeFormatter0.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter0.getDefaultYear())"
project,0,test090212,"public void test090212() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("""");
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
    dateTimeFormatter0.parseLocalDateTime("""");
    assertFalse(dateTimeFormatter0.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter0.isOffsetParsed())
project,0,test091213,"public void test091213() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 1900, 39);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
    // Undeclared exception!
    try {
        dateTimeFormatter0.parseLocalDateTime(""0XA#n\"".,NH[{~R}r"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid format: \""0XA#n\"".,NH[{~R}r\"" is malformed at \""XA#n\"".,NH[{~R}r\""
        //
        verifyException(""org.joda.time.format.DateTimeFormatter"", e);
    }
}",0,
project,0,test092214,"public void test092214() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);
    LocalDate localDate0 = LocalDate.now();
    // Undeclared exception!
    try {
        dateTimeFormatter0.printTo((StringBuffer) null, (ReadablePartial) localDate0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.format.DateTimeFormatterBuilder$TextField"", e);
    }
}",0,
project,0,test093215,"public void test093215() throws Throwable {
    DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter((-2147483562), (-1035), 2147483603);
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormatterBuilder_Composite0);
    // Undeclared exception!
    try {
        dateTimeFormatter0.printTo((StringBuffer) null, (ReadablePartial) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The partial must not be null
        //
        verifyException(""org.joda.time.format.DateTimeFormatter"", e);
    }
}",0,
project,0,test094216,"public void test094216() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 13, false);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(13);
    Integer integer0 = new Integer((-572));
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer0);
    assertEquals(2000, dateTimeFormatter1.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter1.getDefaultYear())"
project,0,test094217,"public void test094217() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 13, false);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(13);
    Integer integer0 = new Integer((-572));
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer0);
    assertEquals(13, (int) dateTimeFormatter1.getPivotYear());
}",0,
project,0,test094218,"public void test094218() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 13, false);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(13);
    Integer integer0 = new Integer((-572));
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer0);
    assertFalse(dateTimeFormatter1.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter1.isOffsetParsed())
project,0,test094219,"public void test094219() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 13, false);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(13);
    Integer integer0 = new Integer((-572));
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer0);
    assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
}",0,
project,0,test095221,"public void test095221() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
    StringBuffer stringBuffer0 = new StringBuffer(0);
    Instant instant0 = Instant.now();
    dateTimeFormatter0.printTo(stringBuffer0, (ReadableInstant) instant0);
    assertEquals(2000, dateTimeFormatter0.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter0.getDefaultYear())"
project,0,test096222,"public void test096222() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 1, false);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
    dateTimeFormatter0.getParser();
    assertEquals(2000, dateTimeFormatter0.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter0.getDefaultYear())"
project,0,test096223,"public void test096223() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 1, false);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
    dateTimeFormatter0.getParser();
    assertFalse(dateTimeFormatter0.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter0.isOffsetParsed())
project,0,test097224,"public void test097224() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2147483627, false);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
    // Undeclared exception!
    dateTimeFormatter0.print(1L);
}",0,
project,0,test099227,"public void test099227() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
    dateTimeFormatter0.getPrinter();
    assertEquals(2000, dateTimeFormatter0.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter0.getDefaultYear())"
project,0,test099228,"public void test099228() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
    dateTimeFormatter0.getPrinter();
    assertFalse(dateTimeFormatter0.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter0.isOffsetParsed())
project,0,test100229,"public void test100229() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);
    // Undeclared exception!
    try {
        dateTimeFormatter0.print((ReadablePartial) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The partial must not be null
        //
        verifyException(""org.joda.time.format.DateTimeFormatter"", e);
    }
}",0,
project,0,test101230,"public void test101230() throws Throwable {
    HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
    DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(929, hashMap0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);
    dateTimeFormatter0.getLocale();
    assertFalse(dateTimeFormatter0.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter0.isOffsetParsed())
project,0,test101231,"public void test101231() throws Throwable {
    HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
    DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(929, hashMap0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);
    dateTimeFormatter0.getLocale();
    assertEquals(2000, dateTimeFormatter0.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter0.getDefaultYear())"
project,0,test102232,"public void test102232() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 20503125, false);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, (DateTimeParser) null);
    // Undeclared exception!
    try {
        dateTimeFormatter0.parseInto((ReadWritableInstant) null, "":t"", 270);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // Parsing not supported
        //
        verifyException(""org.joda.time.format.DateTimeFormatter"", e);
    }
}",0,
project,0,test103233,"public void test103233() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("""");
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
    MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime("""");
    assertEquals(28800000L, mutableDateTime0.getMillis());
}",0,"assertEquals(0, mutableDateTime0.getMillis())"
project,0,test103234,"public void test103234() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("""");
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
    MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime("""");
    assertFalse(dateTimeFormatter0.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter0.isOffsetParsed())
project,0,test103235,"public void test103235() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("""");
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
    MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime("""");
    assertFalse(dateTimeFormatter1.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter1.isOffsetParsed())
project,0,test103236,"public void test103236() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("""");
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
    MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime("""");
    assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
}",0,
project,0,test103237,"public void test103237() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("""");
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
    MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime("""");
    assertEquals(2000, dateTimeFormatter1.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter1.getDefaultYear())"
project,0,test104238,"public void test104238() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("""");
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
    MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime("""");
    assertFalse(dateTimeFormatter0.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter0.isOffsetParsed())
project,0,test104239,"public void test104239() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("""");
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
    MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime("""");
    assertEquals(28800000L, mutableDateTime0.getMillis());
}",0,"assertEquals(0, mutableDateTime0.getMillis())"
project,0,test104240,"public void test104240() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("""");
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
    MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime("""");
    assertTrue(dateTimeFormatter1.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter1.isOffsetParsed())
project,0,test104241,"public void test104241() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("""");
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
    MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime("""");
    assertEquals(2000, dateTimeFormatter1.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter1.getDefaultYear())"
project,0,test105242,"public void test105242() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("""");
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);
    // Undeclared exception!
    try {
        dateTimeFormatter0.parseMutableDateTime(""]f]VFRlp%._{{.<q8<"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid format: \""]f]VFRlp%._{{.<q8<\""
        //
        verifyException(""org.joda.time.format.DateTimeFormatter"", e);
    }
}",0,
project,0,test106243,"public void test106243() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-631), false);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_FixedNumber0);
    // Undeclared exception!
    try {
        dateTimeFormatter0.parseMutableDateTime(""wm3$+) RGKCU!k"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid format: \""wm3$+) RGKCU!k\""
        //
        verifyException(""org.joda.time.format.DateTimeFormatter"", e);
    }
}",0,
project,0,test107244,"public void test107244() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("""");
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
    DateTime dateTime0 = dateTimeFormatter1.parseDateTime("""");
    assertFalse(dateTimeFormatter1.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter1.isOffsetParsed())
project,0,test107245,"public void test107245() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("""");
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
    DateTime dateTime0 = dateTimeFormatter1.parseDateTime("""");
    assertFalse(dateTimeFormatter0.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter0.isOffsetParsed())
project,0,test107246,"public void test107246() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("""");
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
    DateTime dateTime0 = dateTimeFormatter1.parseDateTime("""");
    assertEquals(0L, dateTime0.getMillis());
}",0,
project,0,test107247,"public void test107247() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("""");
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
    DateTime dateTime0 = dateTimeFormatter1.parseDateTime("""");
    assertEquals(2000, dateTimeFormatter1.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter1.getDefaultYear())"
project,0,test108248,"public void test108248() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("""");
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
    DateTime dateTime0 = dateTimeFormatter1.parseDateTime("""");
    assertEquals(2000, dateTimeFormatter1.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter1.getDefaultYear())"
project,0,test108249,"public void test108249() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("""");
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
    DateTime dateTime0 = dateTimeFormatter1.parseDateTime("""");
    assertEquals(28800000L, dateTime0.getMillis());
}",0,"assertEquals(0, dateTime0.getMillis())"
project,0,test108250,"public void test108250() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("""");
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
    DateTime dateTime0 = dateTimeFormatter1.parseDateTime("""");
    assertFalse(dateTimeFormatter0.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter0.isOffsetParsed())
project,0,test108251,"public void test108251() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("""");
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
    DateTime dateTime0 = dateTimeFormatter1.parseDateTime("""");
    assertTrue(dateTimeFormatter1.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter1.isOffsetParsed())
project,0,test109252,"public void test109252() throws Throwable {
    HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
    DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(592, hashMap0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_TimeZoneName0);
    // Undeclared exception!
    try {
        dateTimeFormatter0.parseDateTime(""]L7^x"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid format: \""]L7^x\""
        //
        verifyException(""org.joda.time.format.DateTimeFormatter"", e);
    }
}",1,
project,0,test110253,"public void test110253() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(""i@,+Nw"", """", false, 5, 5);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
    dateTimeFormatter0.parseLocalDateTime("""");
    assertFalse(dateTimeFormatter0.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter0.isOffsetParsed())
project,0,test110254,"public void test110254() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(""i@,+Nw"", """", false, 5, 5);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
    dateTimeFormatter0.parseLocalDateTime("""");
    assertEquals(2000, dateTimeFormatter0.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter0.getDefaultYear())"
project,0,test111255,"public void test111255() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("""");
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);
    dateTimeFormatter0.parseLocalTime("""");
    assertFalse(dateTimeFormatter0.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter0.isOffsetParsed())
project,0,test111256,"public void test111256() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("""");
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);
    dateTimeFormatter0.parseLocalTime("""");
    assertEquals(2000, dateTimeFormatter0.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter0.getDefaultYear())"
project,0,test112257,"public void test112257() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_UnpaddedNumber0);
    // Undeclared exception!
    try {
        dateTimeFormatter0.parseLocalDateTime(""cn"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid format: \""cn\""
        //
        verifyException(""org.joda.time.format.DateTimeFormatter"", e);
    }
}",0,
project,0,test113258,"public void test113258() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("""");
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);
    // Undeclared exception!
    try {
        dateTimeFormatter0.parseMillis(""nUJUkqCh6"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid format: \""nUJUkqCh6\""
        //
        verifyException(""org.joda.time.format.DateTimeFormatter"", e);
    }
}",0,
project,0,test114259,"public void test114259() throws Throwable {
    HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
    DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(929, hashMap0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);
    // Undeclared exception!
    try {
        dateTimeFormatter0.parseMillis("""");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid format: \""\""
        //
        verifyException(""org.joda.time.format.DateTimeFormatter"", e);
    }
}",0,
project,0,test115260,"public void test115260() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("""");
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
    MutableDateTime mutableDateTime0 = dateTimeFormatter0.parseMutableDateTime("""");
    int int0 = dateTimeFormatter1.parseInto(mutableDateTime0, """", (-2147483572));
    assertEquals(28800000L, mutableDateTime0.getMillis());
}",0,"assertEquals(0, mutableDateTime0.getMillis())"
project,0,test115261,"public void test115261() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("""");
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
    MutableDateTime mutableDateTime0 = dateTimeFormatter0.parseMutableDateTime("""");
    int int0 = dateTimeFormatter1.parseInto(mutableDateTime0, """", (-2147483572));
    assertEquals(2000, dateTimeFormatter1.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter1.getDefaultYear())"
project,0,test115262,"public void test115262() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("""");
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
    MutableDateTime mutableDateTime0 = dateTimeFormatter0.parseMutableDateTime("""");
    int int0 = dateTimeFormatter1.parseInto(mutableDateTime0, """", (-2147483572));
    assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
}",0,
project,0,test115263,"public void test115263() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("""");
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
    MutableDateTime mutableDateTime0 = dateTimeFormatter0.parseMutableDateTime("""");
    int int0 = dateTimeFormatter1.parseInto(mutableDateTime0, """", (-2147483572));
    assertFalse(dateTimeFormatter1.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter1.isOffsetParsed())
project,0,test115264,"public void test115264() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("""");
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
    MutableDateTime mutableDateTime0 = dateTimeFormatter0.parseMutableDateTime("""");
    int int0 = dateTimeFormatter1.parseInto(mutableDateTime0, """", (-2147483572));
    assertFalse(dateTimeFormatter0.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter0.isOffsetParsed())
project,0,test116266,"public void test116266() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-631), false);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_FixedNumber0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
    MutableDateTime mutableDateTime0 = new MutableDateTime((long) 2000, (Chronology) null);
    int int0 = dateTimeFormatter1.parseInto(mutableDateTime0, ""wm3$+) RGKCU!k"", 65);
    assertTrue(dateTimeFormatter1.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter1.isOffsetParsed())
project,0,test116267,"public void test116267() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-631), false);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_FixedNumber0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
    MutableDateTime mutableDateTime0 = new MutableDateTime((long) 2000, (Chronology) null);
    int int0 = dateTimeFormatter1.parseInto(mutableDateTime0, ""wm3$+) RGKCU!k"", 65);
    assertEquals(2000, dateTimeFormatter1.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter1.getDefaultYear())"
project,0,test116268,"public void test116268() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-631), false);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_FixedNumber0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
    MutableDateTime mutableDateTime0 = new MutableDateTime((long) 2000, (Chronology) null);
    int int0 = dateTimeFormatter1.parseInto(mutableDateTime0, ""wm3$+) RGKCU!k"", 65);
    assertEquals((-66), int0);
}",0,
project,0,test116269,"public void test116269() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-631), false);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_FixedNumber0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
    MutableDateTime mutableDateTime0 = new MutableDateTime((long) 2000, (Chronology) null);
    int int0 = dateTimeFormatter1.parseInto(mutableDateTime0, ""wm3$+) RGKCU!k"", 65);
    assertEquals(2000L, mutableDateTime0.getMillis());
}",0,
project,0,test116270,"public void test116270() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-631), false);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_FixedNumber0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
    MutableDateTime mutableDateTime0 = new MutableDateTime((long) 2000, (Chronology) null);
    int int0 = dateTimeFormatter1.parseInto(mutableDateTime0, ""wm3$+) RGKCU!k"", 65);
    assertFalse(dateTimeFormatter0.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter0.isOffsetParsed())
project,0,test117271,"public void test117271() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 1, false);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
    // Undeclared exception!
    try {
        dateTimeFormatter0.parseInto((ReadWritableInstant) null, ""$[EY F5L9K-zf"", (-9));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Instant must not be null
        //
        verifyException(""org.joda.time.format.DateTimeFormatter"", e);
    }
}",0,
project,0,test118272,"public void test118272() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
    DateMidnight dateMidnight0 = new DateMidnight((long) 1900, (Chronology) null);
    // Undeclared exception!
    try {
        dateTimeFormatter0.printTo((Writer) null, (ReadableInstant) dateMidnight0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId"", e);
    }
}",0,
project,0,test119273,"public void test119273() throws Throwable {
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
    MockFile mockFile0 = new MockFile("""", ""/0YOV(t"");
    MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
    // Undeclared exception!
    try {
        dateTimeFormatter0.printTo((Writer) mockFileWriter0, (ReadablePartial) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The partial must not be null
        //
        verifyException(""org.joda.time.format.DateTimeFormatter"", e);
    }
}",1,
project,0,test120274,"public void test120274() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(""y&wP.N_\""3T.(S(5 F\""'"");
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
    CharArrayWriter charArrayWriter0 = new CharArrayWriter();
    ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
    LocalTime localTime0 = LocalTime.fromMillisOfDay((-12L), (Chronology) iSOChronology0);
    dateTimeFormatter0.printTo((Writer) charArrayWriter0, (ReadablePartial) localTime0);
    assertEquals(2000, dateTimeFormatter0.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter0.getDefaultYear())"
project,0,test120275,"public void test120275() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(""y&wP.N_\""3T.(S(5 F\""'"");
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
    CharArrayWriter charArrayWriter0 = new CharArrayWriter();
    ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
    LocalTime localTime0 = LocalTime.fromMillisOfDay((-12L), (Chronology) iSOChronology0);
    dateTimeFormatter0.printTo((Writer) charArrayWriter0, (ReadablePartial) localTime0);
    assertFalse(dateTimeFormatter0.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter0.isOffsetParsed())
project,0,test121276,"public void test121276() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (byte) 73, (byte) 73);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
    MockFileWriter mockFileWriter0 = new MockFileWriter(""The partial must not be null"");
    // Undeclared exception!
    try {
        dateTimeFormatter0.printTo((Appendable) mockFileWriter0, (ReadablePartial) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The partial must not be null
        //
        verifyException(""org.joda.time.format.DateTimeFormatter"", e);
    }
}",0,
project,0,test122277,"public void test122277() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 20503125, false);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, (DateTimeParser) null);
    Integer integer0 = Integer.valueOf((-1227));
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear((-1227));
    assertSame(dateTimeFormatter2, dateTimeFormatter1);
}",0,
project,0,test122278,"public void test122278() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 20503125, false);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, (DateTimeParser) null);
    Integer integer0 = Integer.valueOf((-1227));
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear((-1227));
    assertEquals(2000, dateTimeFormatter2.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter2.getDefaultYear())"
project,0,test122279,"public void test122279() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 20503125, false);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, (DateTimeParser) null);
    Integer integer0 = Integer.valueOf((-1227));
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear((-1227));
    assertFalse(dateTimeFormatter2.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter2.isOffsetParsed())
project,0,test123281,"public void test123281() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 20503125, false);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, (DateTimeParser) null);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone(fixedDateTimeZone0);
    assertFalse(dateTimeFormatter0.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter0.isOffsetParsed())
project,0,test123282,"public void test123282() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 20503125, false);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, (DateTimeParser) null);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone(fixedDateTimeZone0);
    assertFalse(dateTimeFormatter2.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter2.isOffsetParsed())
project,0,test123283,"public void test123283() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 20503125, false);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, (DateTimeParser) null);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone(fixedDateTimeZone0);
    assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
}",1,
project,0,test123284,"public void test123284() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 20503125, false);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, (DateTimeParser) null);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone(fixedDateTimeZone0);
    assertEquals(2000, dateTimeFormatter2.getDefaultYear());
}",0,
project,0,test124285,"public void test124285() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("""");
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology((Chronology) null);
    assertEquals(2000, dateTimeFormatter1.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter1.getDefaultYear())"
project,0,test124286,"public void test124286() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("""");
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology((Chronology) null);
    assertSame(dateTimeFormatter1, dateTimeFormatter0);
}",0,
project,0,test124287,"public void test124287() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("""");
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology((Chronology) null);
    assertFalse(dateTimeFormatter1.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter1.isOffsetParsed())
project,0,test125288,"public void test125288() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
    assertEquals(2000, dateTimeFormatter2.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter2.getDefaultYear())"
project,0,test125289,"public void test125289() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
    assertFalse(dateTimeFormatter0.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter0.isOffsetParsed())
project,0,test125290,"public void test125290() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
    assertSame(dateTimeFormatter2, dateTimeFormatter1);
}",0,
project,0,test125291,"public void test125291() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
    assertTrue(dateTimeFormatter2.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter2.isOffsetParsed())
project,0,test126292,"public void test126292() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale((Locale) null);
    assertFalse(dateTimeFormatter1.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter1.isOffsetParsed())
project,0,test126293,"public void test126293() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale((Locale) null);
    assertSame(dateTimeFormatter1, dateTimeFormatter0);
}",0,
project,0,test126294,"public void test126294() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale((Locale) null);
    assertEquals(2000, dateTimeFormatter1.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter1.getDefaultYear())"
project,0,test127295,"public void test127295() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
    boolean boolean0 = dateTimeFormatter0.isParser();
    assertFalse(dateTimeFormatter0.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter0.isOffsetParsed())
project,0,test127296,"public void test127296() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
    boolean boolean0 = dateTimeFormatter0.isParser();
    assertEquals(2000, dateTimeFormatter0.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter0.getDefaultYear())"
project,0,test127297,"public void test127297() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
    boolean boolean0 = dateTimeFormatter0.isParser();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test128298,"public void test128298() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 20503125, false);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, (DateTimeParser) null);
    boolean boolean0 = dateTimeFormatter0.isParser();
    assertEquals(2000, dateTimeFormatter0.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter0.getDefaultYear())"
project,0,test128299,"public void test128299() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 20503125, false);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, (DateTimeParser) null);
    boolean boolean0 = dateTimeFormatter0.isParser();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test128300,"public void test128300() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 20503125, false);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, (DateTimeParser) null);
    boolean boolean0 = dateTimeFormatter0.isParser();
    assertFalse(dateTimeFormatter0.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter0.isOffsetParsed())
project,0,test129301,"public void test129301() throws Throwable {
    HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
    DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(592, hashMap0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);
    boolean boolean0 = dateTimeFormatter0.isPrinter();
    assertEquals(2000, dateTimeFormatter0.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter0.getDefaultYear())"
project,0,test129302,"public void test129302() throws Throwable {
    HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
    DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(592, hashMap0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);
    boolean boolean0 = dateTimeFormatter0.isPrinter();
    assertFalse(dateTimeFormatter0.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter0.isOffsetParsed())
project,0,test129303,"public void test129303() throws Throwable {
    HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
    DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(592, hashMap0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);
    boolean boolean0 = dateTimeFormatter0.isPrinter();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test130304,"public void test130304() throws Throwable {
    HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
    DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(592, hashMap0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_TimeZoneName0);
    boolean boolean0 = dateTimeFormatter0.isPrinter();
    assertFalse(dateTimeFormatter0.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter0.isOffsetParsed())
project,0,test130305,"public void test130305() throws Throwable {
    HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
    DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(592, hashMap0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_TimeZoneName0);
    boolean boolean0 = dateTimeFormatter0.isPrinter();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test130306,"public void test130306() throws Throwable {
    HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
    DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(592, hashMap0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_TimeZoneName0);
    boolean boolean0 = dateTimeFormatter0.isPrinter();
    assertEquals(2000, dateTimeFormatter0.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter0.getDefaultYear())"
project,0,test131307,"public void test131307() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
    dateTimeFormatter0.getZone();
    assertEquals(2000, dateTimeFormatter0.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter0.getDefaultYear())"
project,0,test131308,"public void test131308() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
    dateTimeFormatter0.getZone();
    assertFalse(dateTimeFormatter0.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter0.isOffsetParsed())
project,0,test132309,"public void test132309() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
    dateTimeFormatter0.getPivotYear();
    assertEquals(2000, dateTimeFormatter0.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter0.getDefaultYear())"
project,0,test132310,"public void test132310() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
    dateTimeFormatter0.getPivotYear();
    assertFalse(dateTimeFormatter0.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter0.isOffsetParsed())
project,0,test133311,"public void test133311() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
    dateTimeFormatter0.getChronolgy();
    assertFalse(dateTimeFormatter0.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter0.isOffsetParsed())
project,0,test133312,"public void test133312() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
    dateTimeFormatter0.getChronolgy();
    assertEquals(2000, dateTimeFormatter0.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter0.getDefaultYear())"
project,0,test134313,"public void test134313() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
    DateTimeZone dateTimeZone0 = dateTimeFormatter1.getZone();
    assertEquals(2000, dateTimeFormatter1.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter1.getDefaultYear())"
project,0,test134314,"public void test134314() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
    DateTimeZone dateTimeZone0 = dateTimeFormatter1.getZone();
    assertFalse(dateTimeFormatter0.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter0.isOffsetParsed())
project,0,test134315,"public void test134315() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
    DateTimeZone dateTimeZone0 = dateTimeFormatter1.getZone();
    assertNotNull(dateTimeZone0);
}",0,assertNotNull(dateTimeZone0)
project,0,test134316,"public void test134316() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
    DateTimeZone dateTimeZone0 = dateTimeFormatter1.getZone();
    assertFalse(dateTimeFormatter1.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter1.isOffsetParsed())
project,0,test135317,"public void test135317() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
    Instant instant0 = new Instant((-1L));
    // Undeclared exception!
    try {
        dateTimeFormatter0.printTo((Appendable) null, (ReadableInstant) instant0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.format.DateTimeFormatter"", e);
    }
}",0,
project,0,test136318,"public void test136318() throws Throwable {
    HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
    DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-477), hashMap0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);
    int int0 = dateTimeFormatter0.getDefaultYear();
    assertEquals(2000, int0);
}",0,"assertEquals(0, int0)"
project,0,test136319,"public void test136319() throws Throwable {
    HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
    DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-477), hashMap0);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);
    int int0 = dateTimeFormatter0.getDefaultYear();
    assertFalse(dateTimeFormatter0.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter0.isOffsetParsed())
project,0,test137320,"public void test137320() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);
    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    LocalDate localDate0 = LocalDate.now(dateTimeZone0);
    // Undeclared exception!
    try {
        dateTimeFormatter0.printTo((Appendable) null, (ReadablePartial) localDate0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.format.DateTimeFormatter"", e);
    }
}",0,
project,0,test138321,"public void test138321() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
    // Undeclared exception!
    try {
        dateTimeFormatter0.printTo((Appendable) null, (long) 1900);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.format.DateTimeFormatter"", e);
    }
}",0,
project,0,test139322,"public void test139322() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 1, false);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
    boolean boolean0 = dateTimeFormatter0.isOffsetParsed();
    assertEquals(2000, dateTimeFormatter0.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter0.getDefaultYear())"
project,0,test139323,"public void test139323() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 1, false);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
    boolean boolean0 = dateTimeFormatter0.isOffsetParsed();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test140324,"public void test140324() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
    DateMidnight dateMidnight0 = new DateMidnight((long) 1900, (Chronology) null);
    String string0 = dateTimeFormatter0.print((ReadableInstant) dateMidnight0);
    assertEquals(""America/Los_Angeles"", string0);
}",0,
project,0,test140325,"public void test140325() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
    DateMidnight dateMidnight0 = new DateMidnight((long) 1900, (Chronology) null);
    String string0 = dateTimeFormatter0.print((ReadableInstant) dateMidnight0);
    assertEquals(2000, dateTimeFormatter0.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter0.getDefaultYear())"
project,0,test140326,"public void test140326() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
    DateMidnight dateMidnight0 = new DateMidnight((long) 1900, (Chronology) null);
    String string0 = dateTimeFormatter0.print((ReadableInstant) dateMidnight0);
    assertFalse(dateTimeFormatter0.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter0.isOffsetParsed())
project,0,test141327,"public void test141327() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-631), false);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_FixedNumber0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(2000);
    assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
}",0,
project,0,test141328,"public void test141328() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-631), false);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_FixedNumber0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(2000);
    assertFalse(dateTimeFormatter1.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter1.isOffsetParsed())
project,0,test141329,"public void test141329() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-631), false);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_FixedNumber0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(2000);
    assertEquals(2000, dateTimeFormatter1.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter1.getDefaultYear())"
project,0,test141330,"public void test141330() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-631), false);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_FixedNumber0);
    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(2000);
    assertEquals(2000, (int) dateTimeFormatter1.getPivotYear());
}",0,
project,0,test142331,"public void test142331() throws Throwable {
    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("""");
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);
    MutableDateTime mutableDateTime0 = dateTimeFormatter0.parseMutableDateTime("""");
    // Undeclared exception!
    try {
        dateTimeFormatter0.printTo((Writer) null, (ReadableInstant) mutableDateTime0);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // Printing not supported
        //
        verifyException(""org.joda.time.format.DateTimeFormatter"", e);
    }
}",0,
project,0,test143332,"public void test143332() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
    PipedWriter pipedWriter0 = new PipedWriter();
    try {
        dateTimeFormatter0.printTo((Writer) pipedWriter0, 1L);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Pipe not connected
        //
        verifyException(""java.io.PipedWriter"", e);
    }
}",0,
project,0,test144333,"public void test144333() throws Throwable {
    // Undeclared exception!
    try {
        MutableDateTime.parse(""6`'Jp"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid format: \""6`'Jp\"" is malformed at \""`'Jp\""
        //
        verifyException(""org.joda.time.format.DateTimeFormatter"", e);
    }
}",0,
project,0,test145334,"public void test145334() throws Throwable {
    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(""i@,+Nw"", """", false, 5, 5);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
    // Undeclared exception!
    try {
        dateTimeFormatter0.parseLocalDate(""org.joda.time.field.DividedDateTimeField"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid format: \""org.joda.time.field.DividedDateT...\""
        //
        verifyException(""org.joda.time.format.DateTimeFormatter"", e);
    }
}",1,
project,0,test146335,"public void test146335() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);
    // Undeclared exception!
    try {
        dateTimeFormatter0.parseLocalTime((String) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.joda.time.format.DateTimeFormatterBuilder$TextField"", e);
    }
}",0,
project,0,test147336,"public void test147336() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 20, true);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
    dateTimeFormatter0.getChronology();
    assertEquals(2000, dateTimeFormatter0.getDefaultYear());
}",0,"assertEquals(0, dateTimeFormatter0.getDefaultYear())"
project,0,test147337,"public void test147337() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 20, true);
    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
    dateTimeFormatter0.getChronology();
    assertFalse(dateTimeFormatter0.isOffsetParsed());
}",0,assertTrue(dateTimeFormatter0.isOffsetParsed())
