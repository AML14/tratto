{
  "test0002" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0002() throws Throwable {\n    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(\"~oxM[4\");\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);\n    MutableDateTime mutableDateTime0 = dateTimeFormatter0.parseMutableDateTime(\"~oxM[4\");\n    mutableDateTime0.getMillis();\n}",
    "testName" : "test0002"
  },
  "test0000" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0000() throws Throwable {\n    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(\"~oxM[4\");\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);\n    MutableDateTime mutableDateTime0 = dateTimeFormatter0.parseMutableDateTime(\"~oxM[4\");\n    dateTimeFormatter0.isOffsetParsed();\n}",
    "testName" : "test0000"
  },
  "test0001" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0001() throws Throwable {\n    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(\"~oxM[4\");\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);\n    MutableDateTime mutableDateTime0 = dateTimeFormatter0.parseMutableDateTime(\"~oxM[4\");\n    dateTimeFormatter0.getDefaultYear();\n}",
    "testName" : "test0001"
  },
  "test01343" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01343() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-1544), (-1542));\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-2754));\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone(dateTimeZone0);\n    dateTimeFormatter2.isOffsetParsed();\n}",
    "testName" : "test01343"
  },
  "test01342" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01342() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-1544), (-1542));\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-2754));\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone(dateTimeZone0);\n    dateTimeFormatter0.getDefaultYear();\n}",
    "testName" : "test01342"
  },
  "test01341" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01341() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-1544), (-1542));\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-2754));\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone(dateTimeZone0);\n    dateTimeFormatter1.isOffsetParsed();\n}",
    "testName" : "test01341"
  },
  "test104239" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test104239() throws Throwable {\n    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(\"\");\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();\n    MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime(\"\");\n    mutableDateTime0.getMillis();\n}",
    "testName" : "test104239"
  },
  "test01340" : {
    "methodSignature" : "public DateTimeFormatter withZone(DateTimeZone zone)",
    "methodName" : "withZone",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01340() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-1544), (-1542));\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-2754));\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone(dateTimeZone0);\n}",
    "testName" : "test01340"
  },
  "test104238" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test104238() throws Throwable {\n    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(\"\");\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();\n    MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime(\"\");\n    dateTimeFormatter0.isOffsetParsed();\n}",
    "testName" : "test104238"
  },
  "test125290" : {
    "methodSignature" : "public DateTimeFormatter withOffsetParsed()",
    "methodName" : "withOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test125290() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();\n}",
    "testName" : "test125290"
  },
  "test00921" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00921() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 24, 0);\n    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];\n    DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_MatchingParser0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();\n    dateTimeFormatter2.isOffsetParsed();\n}",
    "testName" : "test00921"
  },
  "test00922" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00922() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 24, 0);\n    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];\n    DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_MatchingParser0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();\n    dateTimeFormatter0.isOffsetParsed();\n}",
    "testName" : "test00922"
  },
  "test01339" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01339() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-1544), (-1542));\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-2754));\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone(dateTimeZone0);\n    dateTimeFormatter2.getDefaultYear();\n}",
    "testName" : "test01339"
  },
  "test00920" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00920() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 24, 0);\n    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];\n    DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_MatchingParser0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();\n    dateTimeFormatter2.getDefaultYear();\n}",
    "testName" : "test00920"
  },
  "test00923" : {
    "methodSignature" : "public DateTimeFormatter withZoneUTC()",
    "methodName" : "withZoneUTC",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00923() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 24, 0);\n    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];\n    DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_MatchingParser0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();\n}",
    "testName" : "test00923"
  },
  "test00924" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00924() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 24, 0);\n    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];\n    DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_MatchingParser0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();\n    dateTimeFormatter0.getDefaultYear();\n}",
    "testName" : "test00924"
  },
  "test035131" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test035131() throws Throwable {\n    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(\"\");\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);\n    MutableDateTime mutableDateTime0 = dateTimeFormatter0.parseMutableDateTime(\"\");\n    int int0 = dateTimeFormatter0.parseInto(mutableDateTime0, \"The partial must not be null\", (-1));\n    mutableDateTime0.getMillis();\n}",
    "testName" : "test035131"
  },
  "test035130" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test035130() throws Throwable {\n    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(\"\");\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);\n    MutableDateTime mutableDateTime0 = dateTimeFormatter0.parseMutableDateTime(\"\");\n    int int0 = dateTimeFormatter0.parseInto(mutableDateTime0, \"The partial must not be null\", (-1));\n    dateTimeFormatter0.isOffsetParsed();\n}",
    "testName" : "test035130"
  },
  "test125291" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test125291() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();\n    dateTimeFormatter2.isOffsetParsed();\n}",
    "testName" : "test125291"
  },
  "test0013" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0013() throws Throwable {\n    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(\"~oxM[4\");\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);\n    long long0 = dateTimeFormatter0.parseMillis(\"~oxM[4\");\n    dateTimeFormatter0.getDefaultYear();\n}",
    "testName" : "test0013"
  },
  "test0014" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0014() throws Throwable {\n    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(\"~oxM[4\");\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);\n    long long0 = dateTimeFormatter0.parseMillis(\"~oxM[4\");\n    dateTimeFormatter0.isOffsetParsed();\n}",
    "testName" : "test0014"
  },
  "test0015" : {
    "methodSignature" : "public long parseMillis(String text)",
    "methodName" : "parseMillis",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0015() throws Throwable {\n    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(\"~oxM[4\");\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);\n    long long0 = dateTimeFormatter0.parseMillis(\"~oxM[4\");\n}",
    "testName" : "test0015"
  },
  "test094219" : {
    "methodSignature" : "public DateTimeFormatter withPivotYear(Integer pivotYear)",
    "methodName" : "withPivotYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test094219() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();\n    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 13, false);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(13);\n    Integer integer0 = new Integer((-572));\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer0);\n}",
    "testName" : "test094219"
  },
  "test041146" : {
    "methodSignature" : "public Integer getPivotYear()",
    "methodName" : "getPivotYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test041146() throws Throwable {\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction((DateTimeFieldType) null, 19, 19);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(19);\n    Integer integer0 = dateTimeFormatter1.getPivotYear();\n}",
    "testName" : "test041146"
  },
  "test094218" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test094218() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();\n    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 13, false);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(13);\n    Integer integer0 = new Integer((-572));\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer0);\n    dateTimeFormatter1.isOffsetParsed();\n}",
    "testName" : "test094218"
  },
  "test120275" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test120275() throws Throwable {\n    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(\"y&wP.N_\\\"3T.(S(5 F\\\"'\");\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();\n    LocalTime localTime0 = LocalTime.fromMillisOfDay((-12L), (Chronology) iSOChronology0);\n    dateTimeFormatter0.printTo((Writer) charArrayWriter0, (ReadablePartial) localTime0);\n    dateTimeFormatter0.isOffsetParsed();\n}",
    "testName" : "test120275"
  },
  "test125289" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test125289() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();\n    dateTimeFormatter0.isOffsetParsed();\n}",
    "testName" : "test125289"
  },
  "test120274" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test120274() throws Throwable {\n    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(\"y&wP.N_\\\"3T.(S(5 F\\\"'\");\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();\n    LocalTime localTime0 = LocalTime.fromMillisOfDay((-12L), (Chronology) iSOChronology0);\n    dateTimeFormatter0.printTo((Writer) charArrayWriter0, (ReadablePartial) localTime0);\n    dateTimeFormatter0.getDefaultYear();\n}",
    "testName" : "test120274"
  },
  "test125288" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test125288() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();\n    dateTimeFormatter2.getDefaultYear();\n}",
    "testName" : "test125288"
  },
  "test062183" : {
    "methodSignature" : "public void printTo(Writer out, ReadablePartial partial) throws IOException",
    "methodName" : "printTo",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test062183() throws Throwable {\n    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(\"\");\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();\n    StringWriter stringWriter0 = new StringWriter(1);\n    LocalDate localDate0 = new LocalDate((Chronology) islamicChronology0);\n    dateTimeFormatter0.printTo((Writer) stringWriter0, (ReadablePartial) localDate0);\n}",
    "testName" : "test062183"
  },
  "test041145" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test041145() throws Throwable {\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction((DateTimeFieldType) null, 19, 19);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(19);\n    Integer integer0 = dateTimeFormatter1.getPivotYear();\n    dateTimeFormatter1.getDefaultYear();\n}",
    "testName" : "test041145"
  },
  "test046159" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test046159() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);\n    Locale locale0 = Locale.JAPANESE;\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);\n    Locale locale1 = dateTimeFormatter1.getLocale();\n    dateTimeFormatter1.getDefaultYear();\n}",
    "testName" : "test046159"
  },
  "test041144" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test041144() throws Throwable {\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction((DateTimeFieldType) null, 19, 19);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(19);\n    Integer integer0 = dateTimeFormatter1.getPivotYear();\n    dateTimeFormatter1.isOffsetParsed();\n}",
    "testName" : "test041144"
  },
  "test046158" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test046158() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);\n    Locale locale0 = Locale.JAPANESE;\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);\n    Locale locale1 = dateTimeFormatter1.getLocale();\n    dateTimeFormatter1.isOffsetParsed();\n}",
    "testName" : "test046158"
  },
  "test046157" : {
    "methodSignature" : "public Locale getLocale()",
    "methodName" : "getLocale",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test046157() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);\n    Locale locale0 = Locale.JAPANESE;\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);\n    Locale locale1 = dateTimeFormatter1.getLocale();\n}",
    "testName" : "test046157"
  },
  "test01446" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01446() throws Throwable {\n    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(\"\");\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear((Integer) islamicChronology0.AH);\n    dateTimeFormatter0.isOffsetParsed();\n}",
    "testName" : "test01446"
  },
  "test104240" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test104240() throws Throwable {\n    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(\"\");\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();\n    MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime(\"\");\n    dateTimeFormatter1.isOffsetParsed();\n}",
    "testName" : "test104240"
  },
  "test01445" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01445() throws Throwable {\n    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(\"\");\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear((Integer) islamicChronology0.AH);\n    dateTimeFormatter1.getDefaultYear();\n}",
    "testName" : "test01445"
  },
  "test025102" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test025102() throws Throwable {\n    LinkedList<Object> linkedList0 = new LinkedList<Object>();\n    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_Composite0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);\n    IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(islamicChronology0);\n    dateTimeFormatter2.getDefaultYear();\n}",
    "testName" : "test025102"
  },
  "test025101" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test025101() throws Throwable {\n    LinkedList<Object> linkedList0 = new LinkedList<Object>();\n    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_Composite0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);\n    IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(islamicChronology0);\n    dateTimeFormatter1.isOffsetParsed();\n}",
    "testName" : "test025101"
  },
  "test025100" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test025100() throws Throwable {\n    LinkedList<Object> linkedList0 = new LinkedList<Object>();\n    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_Composite0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);\n    IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(islamicChronology0);\n    dateTimeFormatter0.getDefaultYear();\n}",
    "testName" : "test025100"
  },
  "test01449" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01449() throws Throwable {\n    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(\"\");\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear((Integer) islamicChronology0.AH);\n    dateTimeFormatter1.isOffsetParsed();\n}",
    "testName" : "test01449"
  },
  "test01448" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01448() throws Throwable {\n    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(\"\");\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear((Integer) islamicChronology0.AH);\n    dateTimeFormatter2.getDefaultYear();\n}",
    "testName" : "test01448"
  },
  "test01447" : {
    "methodSignature" : "public DateTimeFormatter withPivotYear(Integer pivotYear)",
    "methodName" : "withPivotYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01447() throws Throwable {\n    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(\"\");\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstance();\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear((Integer) islamicChronology0.AH);\n}",
    "testName" : "test01447"
  },
  "test104241" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test104241() throws Throwable {\n    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(\"\");\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();\n    MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime(\"\");\n    dateTimeFormatter1.getDefaultYear();\n}",
    "testName" : "test104241"
  },
  "test130304" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test130304() throws Throwable {\n    HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();\n    DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(592, hashMap0);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_TimeZoneName0);\n    boolean boolean0 = dateTimeFormatter0.isPrinter();\n    dateTimeFormatter0.isOffsetParsed();\n}",
    "testName" : "test130304"
  },
  "test051172" : {
    "methodSignature" : "public void printTo(StringBuffer buf, ReadablePartial partial)",
    "methodName" : "printTo",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test051172() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();\n    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-631), false);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_FixedNumber0);\n    StringBuffer stringBuffer0 = new StringBuffer();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(65);\n    LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);\n    dateTimeFormatter0.printTo(stringBuffer0, (ReadablePartial) localDateTime0);\n}",
    "testName" : "test051172"
  },
  "test109252" : {
    "methodSignature" : "public DateTime parseDateTime(String text)",
    "methodName" : "parseDateTime",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test109252() throws Throwable {\n    HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();\n    DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(592, hashMap0);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_TimeZoneName0);\n    dateTimeFormatter0.parseDateTime(\"]L7^x\");\n}",
    "testName" : "test109252"
  },
  "test074195" : {
    "methodSignature" : "public String print(long instant)",
    "methodName" : "print",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test074195() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 2147483582, (-5530));\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);\n    dateTimeFormatter0.print((long) 16);\n}",
    "testName" : "test074195"
  },
  "test130306" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test130306() throws Throwable {\n    HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();\n    DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(592, hashMap0);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_TimeZoneName0);\n    boolean boolean0 = dateTimeFormatter0.isPrinter();\n    dateTimeFormatter0.getDefaultYear();\n}",
    "testName" : "test130306"
  },
  "test135317" : {
    "methodSignature" : "public void printTo(Appendable appendable, ReadableInstant instant) throws IOException",
    "methodName" : "printTo",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test135317() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);\n    Instant instant0 = new Instant((-1L));\n    dateTimeFormatter0.printTo((Appendable) null, (ReadableInstant) instant0);\n}",
    "testName" : "test135317"
  },
  "test130305" : {
    "methodSignature" : "public boolean isPrinter()",
    "methodName" : "isPrinter",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test130305() throws Throwable {\n    HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();\n    DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(592, hashMap0);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_TimeZoneName0);\n    boolean boolean0 = dateTimeFormatter0.isPrinter();\n}",
    "testName" : "test130305"
  },
  "test0027" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0027() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();\n    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 1, false);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) fixedDateTimeZone0, 1);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(julianChronology0);\n    StringWriter stringWriter0 = new StringWriter();\n    dateTimeFormatter1.printTo((Writer) stringWriter0, 0L);\n    dateTimeFormatter1.isOffsetParsed();\n}",
    "testName" : "test0027"
  },
  "test088209" : {
    "methodSignature" : "public DateTime parseDateTime(String text)",
    "methodName" : "parseDateTime",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088209() throws Throwable {\n    LinkedList<Object> linkedList0 = new LinkedList<Object>();\n    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);\n    dateTimeFormatter0.parseDateTime(\"Printing not supported\");\n}",
    "testName" : "test088209"
  },
  "test121276" : {
    "methodSignature" : "public void printTo(Appendable appendable, ReadablePartial partial) throws IOException",
    "methodName" : "printTo",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test121276() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (byte) 73, (byte) 73);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);\n    MockFileWriter mockFileWriter0 = new MockFileWriter(\"The partial must not be null\");\n    dateTimeFormatter0.printTo((Appendable) mockFileWriter0, (ReadablePartial) null);\n}",
    "testName" : "test121276"
  },
  "test063184" : {
    "methodSignature" : "public void printTo(Writer out, long instant) throws IOException",
    "methodName" : "printTo",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test063184() throws Throwable {\n    LinkedList<Object> linkedList0 = new LinkedList<Object>();\n    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);\n    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);\n    BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0, 2534);\n    dateTimeFormatter0.printTo((Writer) bufferedWriter0, (-25271661L));\n}",
    "testName" : "test063184"
  },
  "test139323" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test139323() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();\n    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 1, false);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);\n    boolean boolean0 = dateTimeFormatter0.isOffsetParsed();\n}",
    "testName" : "test139323"
  },
  "test139322" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test139322() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();\n    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 1, false);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);\n    boolean boolean0 = dateTimeFormatter0.isOffsetParsed();\n    dateTimeFormatter0.getDefaultYear();\n}",
    "testName" : "test139322"
  },
  "test134313" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test134313() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();\n    DateTimeZone dateTimeZone0 = dateTimeFormatter1.getZone();\n    dateTimeFormatter1.getDefaultYear();\n}",
    "testName" : "test134313"
  },
  "test01554" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01554() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(222);\n    Integer integer0 = new Integer(222);\n    DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear(integer0);\n    dateTimeFormatter0.getDefaultYear();\n}",
    "testName" : "test01554"
  },
  "test134315" : {
    "methodSignature" : "public DateTimeZone getZone()",
    "methodName" : "getZone",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test134315() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();\n    DateTimeZone dateTimeZone0 = dateTimeFormatter1.getZone();\n}",
    "testName" : "test134315"
  },
  "test031118" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test031118() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(929, (Map<String, DateTimeZone>) null);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);\n    dateTimeFormatter0.print(0L);\n    dateTimeFormatter0.isOffsetParsed();\n}",
    "testName" : "test031118"
  },
  "test134314" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test134314() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();\n    DateTimeZone dateTimeZone0 = dateTimeFormatter1.getZone();\n    dateTimeFormatter0.isOffsetParsed();\n}",
    "testName" : "test134314"
  },
  "test031117" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test031117() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(929, (Map<String, DateTimeZone>) null);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);\n    dateTimeFormatter0.print(0L);\n    dateTimeFormatter0.getDefaultYear();\n}",
    "testName" : "test031117"
  },
  "test073194" : {
    "methodSignature" : "public String print(long instant)",
    "methodName" : "print",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test073194() throws Throwable {\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction((DateTimeFieldType) null, 0, 0);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);\n    dateTimeFormatter0.print(2043L);\n}",
    "testName" : "test073194"
  },
  "test094217" : {
    "methodSignature" : "public Integer getPivotYear()",
    "methodName" : "getPivotYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test094217() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();\n    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 13, false);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(13);\n    Integer integer0 = new Integer((-572));\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer0);\n    dateTimeFormatter1.getPivotYear();\n}",
    "testName" : "test094217"
  },
  "test094216" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test094216() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();\n    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 13, false);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(13);\n    Integer integer0 = new Integer((-572));\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer0);\n    dateTimeFormatter1.getDefaultYear();\n}",
    "testName" : "test094216"
  },
  "test099228" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099228() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);\n    dateTimeFormatter0.getPrinter();\n    dateTimeFormatter0.isOffsetParsed();\n}",
    "testName" : "test099228"
  },
  "test134316" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test134316() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();\n    DateTimeZone dateTimeZone0 = dateTimeFormatter1.getZone();\n    dateTimeFormatter1.isOffsetParsed();\n}",
    "testName" : "test134316"
  },
  "test052173" : {
    "methodSignature" : "public void printTo(StringBuffer buf, ReadableInstant instant)",
    "methodName" : "printTo",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test052173() throws Throwable {\n    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(\"\");\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);\n    MutableDateTime mutableDateTime0 = dateTimeFormatter0.parseMutableDateTime(\"\");\n    dateTimeFormatter0.printTo((StringBuffer) null, (ReadableInstant) mutableDateTime0);\n}",
    "testName" : "test052173"
  },
  "test099227" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099227() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);\n    dateTimeFormatter0.getPrinter();\n    dateTimeFormatter0.getDefaultYear();\n}",
    "testName" : "test099227"
  },
  "test036134" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test036134() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();\n    DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 2280, false, 0);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_PaddedNumber0, dateTimeFormatterBuilder_PaddedNumber0);\n    DateTime dateTime0 = dateTimeFormatter0.parseDateTime(\"19\");\n    dateTimeFormatter0.getDefaultYear();\n}",
    "testName" : "test036134"
  },
  "test115260" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test115260() throws Throwable {\n    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(\"\");\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);\n    MutableDateTime mutableDateTime0 = dateTimeFormatter0.parseMutableDateTime(\"\");\n    int int0 = dateTimeFormatter1.parseInto(mutableDateTime0, \"\", (-2147483572));\n    mutableDateTime0.getMillis();\n}",
    "testName" : "test115260"
  },
  "test145334" : {
    "methodSignature" : "public LocalDate parseLocalDate(String text)",
    "methodName" : "parseLocalDate",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test145334() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(\"i@,+Nw\", \"\", false, 5, 5);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);\n    dateTimeFormatter0.parseLocalDate(\"org.joda.time.field.DividedDateTimeField\");\n}",
    "testName" : "test145334"
  },
  "test036133" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test036133() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();\n    DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 2280, false, 0);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_PaddedNumber0, dateTimeFormatterBuilder_PaddedNumber0);\n    DateTime dateTime0 = dateTimeFormatter0.parseDateTime(\"19\");\n    dateTimeFormatter0.isOffsetParsed();\n}",
    "testName" : "test036133"
  },
  "test115262" : {
    "methodSignature" : "public int parseInto(ReadWritableInstant instant, String text, int position)",
    "methodName" : "parseInto",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test115262() throws Throwable {\n    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(\"\");\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);\n    MutableDateTime mutableDateTime0 = dateTimeFormatter0.parseMutableDateTime(\"\");\n    int int0 = dateTimeFormatter1.parseInto(mutableDateTime0, \"\", (-2147483572));\n}",
    "testName" : "test115262"
  },
  "test0038" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0038() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();\n    Partial partial0 = new Partial(dateTimeFieldType0, 1);\n    DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();\n    StringBuffer stringBuffer0 = new StringBuffer();\n    dateTimeFormatter0.printTo(stringBuffer0, (ReadablePartial) partial0);\n    dateTimeFormatter0.getDefaultYear();\n}",
    "testName" : "test0038"
  },
  "test100229" : {
    "methodSignature" : "public String print(ReadablePartial partial)",
    "methodName" : "print",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test100229() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();\n    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);\n    dateTimeFormatter0.print((ReadablePartial) null);\n}",
    "testName" : "test100229"
  },
  "test115261" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test115261() throws Throwable {\n    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(\"\");\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);\n    MutableDateTime mutableDateTime0 = dateTimeFormatter0.parseMutableDateTime(\"\");\n    int int0 = dateTimeFormatter1.parseInto(mutableDateTime0, \"\", (-2147483572));\n    dateTimeFormatter1.getDefaultYear();\n}",
    "testName" : "test115261"
  },
  "test115264" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test115264() throws Throwable {\n    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(\"\");\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);\n    MutableDateTime mutableDateTime0 = dateTimeFormatter0.parseMutableDateTime(\"\");\n    int int0 = dateTimeFormatter1.parseInto(mutableDateTime0, \"\", (-2147483572));\n    dateTimeFormatter0.isOffsetParsed();\n}",
    "testName" : "test115264"
  },
  "test115263" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test115263() throws Throwable {\n    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(\"\");\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);\n    MutableDateTime mutableDateTime0 = dateTimeFormatter0.parseMutableDateTime(\"\");\n    int int0 = dateTimeFormatter1.parseInto(mutableDateTime0, \"\", (-2147483572));\n    dateTimeFormatter1.isOffsetParsed();\n}",
    "testName" : "test115263"
  },
  "test02080" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02080() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 24, 0);\n    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];\n    DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_MatchingParser0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-10));\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();\n    dateTimeFormatter2.isOffsetParsed();\n}",
    "testName" : "test02080"
  },
  "test129303" : {
    "methodSignature" : "public boolean isPrinter()",
    "methodName" : "isPrinter",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test129303() throws Throwable {\n    HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();\n    DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(592, hashMap0);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);\n    boolean boolean0 = dateTimeFormatter0.isPrinter();\n}",
    "testName" : "test129303"
  },
  "test140325" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test140325() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);\n    DateMidnight dateMidnight0 = new DateMidnight((long) 1900, (Chronology) null);\n    String string0 = dateTimeFormatter0.print((ReadableInstant) dateMidnight0);\n    dateTimeFormatter0.getDefaultYear();\n}",
    "testName" : "test140325"
  },
  "test083204" : {
    "methodSignature" : "public LocalDateTime parseLocalDateTime(String text)",
    "methodName" : "parseLocalDateTime",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test083204() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();\n    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 20, true);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);\n    dateTimeFormatter0.parseLocalDateTime((String) null);\n}",
    "testName" : "test083204"
  },
  "test140324" : {
    "methodSignature" : "public String print(ReadableInstant instant)",
    "methodName" : "print",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test140324() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);\n    DateMidnight dateMidnight0 = new DateMidnight((long) 1900, (Chronology) null);\n    String string0 = dateTimeFormatter0.print((ReadableInstant) dateMidnight0);\n}",
    "testName" : "test140324"
  },
  "test0039" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0039() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();\n    Partial partial0 = new Partial(dateTimeFieldType0, 1);\n    DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();\n    StringBuffer stringBuffer0 = new StringBuffer();\n    dateTimeFormatter0.printTo(stringBuffer0, (ReadablePartial) partial0);\n    dateTimeFormatter0.isOffsetParsed();\n}",
    "testName" : "test0039"
  },
  "test01552" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01552() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(222);\n    Integer integer0 = new Integer(222);\n    DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear(integer0);\n    dateTimeFormatter3.getDefaultYear();\n}",
    "testName" : "test01552"
  },
  "test01551" : {
    "methodSignature" : "public DateTimeFormatter withPivotYear(Integer pivotYear)",
    "methodName" : "withPivotYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01551() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(222);\n    Integer integer0 = new Integer(222);\n    DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear(integer0);\n}",
    "testName" : "test01551"
  },
  "test140326" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test140326() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);\n    DateMidnight dateMidnight0 = new DateMidnight((long) 1900, (Chronology) null);\n    String string0 = dateTimeFormatter0.print((ReadableInstant) dateMidnight0);\n    dateTimeFormatter0.isOffsetParsed();\n}",
    "testName" : "test140326"
  },
  "test01550" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01550() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(222);\n    Integer integer0 = new Integer(222);\n    DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear(integer0);\n    dateTimeFormatter1.isOffsetParsed();\n}",
    "testName" : "test01550"
  },
  "test068189" : {
    "methodSignature" : "public String print(ReadableInstant instant)",
    "methodName" : "print",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test068189() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();\n    DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 2146327844, true, 2146327844);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_PaddedNumber0, dateTimeFormatterBuilder_PaddedNumber0);\n    DateMidnight dateMidnight0 = new DateMidnight((long) 4317);\n    // Undeclared exception!\n    dateTimeFormatter0.print((ReadableInstant) dateMidnight0);\n}",
    "testName" : "test068189"
  },
  "test110254" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test110254() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(\"i@,+Nw\", \"\", false, 5, 5);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);\n    dateTimeFormatter0.parseLocalDateTime(\"\");\n    dateTimeFormatter0.getDefaultYear();\n}",
    "testName" : "test110254"
  },
  "test110253" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test110253() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(\"i@,+Nw\", \"\", false, 5, 5);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);\n    dateTimeFormatter0.parseLocalDateTime(\"\");\n    dateTimeFormatter0.isOffsetParsed();\n}",
    "testName" : "test110253"
  },
  "test129302" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test129302() throws Throwable {\n    HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();\n    DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(592, hashMap0);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);\n    boolean boolean0 = dateTimeFormatter0.isPrinter();\n    dateTimeFormatter0.isOffsetParsed();\n}",
    "testName" : "test129302"
  },
  "test129301" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test129301() throws Throwable {\n    HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();\n    DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(592, hashMap0);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);\n    boolean boolean0 = dateTimeFormatter0.isPrinter();\n    dateTimeFormatter0.getDefaultYear();\n}",
    "testName" : "test129301"
  },
  "test057178" : {
    "methodSignature" : "public void printTo(Appendable appendable, ReadablePartial partial) throws IOException",
    "methodName" : "printTo",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test057178() throws Throwable {\n    StringBuffer stringBuffer0 = new StringBuffer(719527);\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();\n    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 20503125, false);\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, (DateTimeParser) null);\n    LocalTime localTime0 = new LocalTime((long) 20503125, dateTimeZone0);\n    // Undeclared exception!\n    dateTimeFormatter0.printTo((Appendable) stringBuffer0, (ReadablePartial) localTime0);\n}",
    "testName" : "test057178"
  },
  "test036132" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test036132() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();\n    DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 2280, false, 0);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_PaddedNumber0, dateTimeFormatterBuilder_PaddedNumber0);\n    DateTime dateTime0 = dateTimeFormatter0.parseDateTime(\"19\");\n    dateTime0.getMillis();\n}",
    "testName" : "test036132"
  },
  "test116266" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test116266() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();\n    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-631), false);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_FixedNumber0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();\n    MutableDateTime mutableDateTime0 = new MutableDateTime((long) 2000, (Chronology) null);\n    int int0 = dateTimeFormatter1.parseInto(mutableDateTime0, \"wm3$+) RGKCU!k\", 65);\n    dateTimeFormatter1.isOffsetParsed();\n}",
    "testName" : "test116266"
  },
  "test116267" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test116267() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();\n    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-631), false);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_FixedNumber0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();\n    MutableDateTime mutableDateTime0 = new MutableDateTime((long) 2000, (Chronology) null);\n    int int0 = dateTimeFormatter1.parseInto(mutableDateTime0, \"wm3$+) RGKCU!k\", 65);\n    dateTimeFormatter1.getDefaultYear();\n}",
    "testName" : "test116267"
  },
  "test034126" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test034126() throws Throwable {\n    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(\"k9<{u8vhJc,4\\\"\");\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);\n    dateTimeFormatter0.parseLocalDate(\"k9<{u8vhJc,4\\\"\");\n    dateTimeFormatter0.getDefaultYear();\n}",
    "testName" : "test034126"
  },
  "test034127" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test034127() throws Throwable {\n    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(\"k9<{u8vhJc,4\\\"\");\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);\n    dateTimeFormatter0.parseLocalDate(\"k9<{u8vhJc,4\\\"\");\n    dateTimeFormatter0.isOffsetParsed();\n}",
    "testName" : "test034127"
  },
  "test02076" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02076() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 24, 0);\n    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];\n    DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_MatchingParser0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-10));\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();\n    dateTimeFormatter0.getDefaultYear();\n}",
    "testName" : "test02076"
  },
  "test061182" : {
    "methodSignature" : "public void printTo(Appendable appendable, long instant) throws IOException",
    "methodName" : "printTo",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test061182() throws Throwable {\n    DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter((-748), 1029, 1029);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormat_StyleFormatter0);\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);\n    dateTimeFormatter0.printTo((Appendable) charArrayWriter0, 1338L);\n}",
    "testName" : "test061182"
  },
  "test082203" : {
    "methodSignature" : "public LocalDateTime parseLocalDateTime(String text)",
    "methodName" : "parseLocalDateTime",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test082203() throws Throwable {\n    LinkedList<Object> linkedList0 = new LinkedList<Object>();\n    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_Composite0);\n    dateTimeFormatter0.parseLocalDateTime(\" instant,\");\n}",
    "testName" : "test082203"
  },
  "test02079" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02079() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 24, 0);\n    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];\n    DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_MatchingParser0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-10));\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();\n    dateTimeFormatter2.getDefaultYear();\n}",
    "testName" : "test02079"
  },
  "test02078" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02078() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 24, 0);\n    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];\n    DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_MatchingParser0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-10));\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();\n    dateTimeFormatter1.getDefaultYear();\n}",
    "testName" : "test02078"
  },
  "test02077" : {
    "methodSignature" : "public DateTimeFormatter withOffsetParsed()",
    "methodName" : "withOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02077() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 24, 0);\n    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];\n    DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_MatchingParser0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-10));\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();\n}",
    "testName" : "test02077"
  },
  "test01655" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01655() throws Throwable {\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction((DateTimeFieldType) null, 19, 19);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(19, 19);\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-5299));\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear((Integer) buddhistChronology0.BE);\n    dateTimeFormatter1.isOffsetParsed();\n}",
    "testName" : "test01655"
  },
  "test01659" : {
    "methodSignature" : "public DateTimeFormatter withPivotYear(Integer pivotYear)",
    "methodName" : "withPivotYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01659() throws Throwable {\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction((DateTimeFieldType) null, 19, 19);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(19, 19);\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-5299));\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear((Integer) buddhistChronology0.BE);\n}",
    "testName" : "test01659"
  },
  "test01658" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01658() throws Throwable {\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction((DateTimeFieldType) null, 19, 19);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(19, 19);\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-5299));\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear((Integer) buddhistChronology0.BE);\n    dateTimeFormatter1.getDefaultYear();\n}",
    "testName" : "test01658"
  },
  "test01657" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01657() throws Throwable {\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction((DateTimeFieldType) null, 19, 19);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(19, 19);\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-5299));\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear((Integer) buddhistChronology0.BE);\n    dateTimeFormatter0.getDefaultYear();\n}",
    "testName" : "test01657"
  },
  "test01656" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01656() throws Throwable {\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction((DateTimeFieldType) null, 19, 19);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(19, 19);\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-5299));\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear((Integer) buddhistChronology0.BE);\n    dateTimeFormatter2.getDefaultYear();\n}",
    "testName" : "test01656"
  },
  "test105242" : {
    "methodSignature" : "public MutableDateTime parseMutableDateTime(String text)",
    "methodName" : "parseMutableDateTime",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test105242() throws Throwable {\n    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(\"\");\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);\n    dateTimeFormatter0.parseMutableDateTime(\"]f]VFRlp%._{{.<q8<\");\n}",
    "testName" : "test105242"
  },
  "test050171" : {
    "methodSignature" : "public void printTo(StringBuffer buf, ReadablePartial partial)",
    "methodName" : "printTo",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test050171() throws Throwable {\n    StringBuffer stringBuffer0 = new StringBuffer(719527);\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();\n    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 20503125, false);\n    JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) null);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, (DateTimeParser) null);\n    YearMonth yearMonth0 = new YearMonth((-28800926L), (Chronology) julianChronology0);\n    // Undeclared exception!\n    dateTimeFormatter0.printTo(stringBuffer0, (ReadablePartial) yearMonth0);\n}",
    "testName" : "test050171"
  },
  "test131307" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test131307() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);\n    dateTimeFormatter0.getZone();\n    dateTimeFormatter0.getDefaultYear();\n}",
    "testName" : "test131307"
  },
  "test116268" : {
    "methodSignature" : "public int parseInto(ReadWritableInstant instant, String text, int position)",
    "methodName" : "parseInto",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test116268() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();\n    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-631), false);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_FixedNumber0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();\n    MutableDateTime mutableDateTime0 = new MutableDateTime((long) 2000, (Chronology) null);\n    int int0 = dateTimeFormatter1.parseInto(mutableDateTime0, \"wm3$+) RGKCU!k\", 65);\n}",
    "testName" : "test116268"
  },
  "test131308" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test131308() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);\n    dateTimeFormatter0.getZone();\n    dateTimeFormatter0.isOffsetParsed();\n}",
    "testName" : "test131308"
  },
  "test111255" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test111255() throws Throwable {\n    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(\"\");\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);\n    dateTimeFormatter0.parseLocalTime(\"\");\n    dateTimeFormatter0.isOffsetParsed();\n}",
    "testName" : "test111255"
  },
  "test116269" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test116269() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();\n    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-631), false);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_FixedNumber0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();\n    MutableDateTime mutableDateTime0 = new MutableDateTime((long) 2000, (Chronology) null);\n    int int0 = dateTimeFormatter1.parseInto(mutableDateTime0, \"wm3$+) RGKCU!k\", 65);\n    mutableDateTime0.getMillis();\n}",
    "testName" : "test116269"
  },
  "test111256" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test111256() throws Throwable {\n    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(\"\");\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);\n    dateTimeFormatter0.parseLocalTime(\"\");\n    dateTimeFormatter0.getDefaultYear();\n}",
    "testName" : "test111256"
  },
  "test136318" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test136318() throws Throwable {\n    HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();\n    DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-477), hashMap0);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);\n    int int0 = dateTimeFormatter0.getDefaultYear();\n}",
    "testName" : "test136318"
  },
  "test136319" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test136319() throws Throwable {\n    HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();\n    DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-477), hashMap0);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);\n    int int0 = dateTimeFormatter0.getDefaultYear();\n    dateTimeFormatter0.isOffsetParsed();\n}",
    "testName" : "test136319"
  },
  "test147337" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test147337() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();\n    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 20, true);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);\n    dateTimeFormatter0.getChronology();\n    dateTimeFormatter0.isOffsetParsed();\n}",
    "testName" : "test147337"
  },
  "test147336" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test147336() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();\n    DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 20, true);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);\n    dateTimeFormatter0.getChronology();\n    dateTimeFormatter0.getDefaultYear();\n}",
    "testName" : "test147336"
  },
  "test02182" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02182() throws Throwable {\n    HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();\n    DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(331, hashMap0);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);\n    Locale locale0 = Locale.ENGLISH;\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);\n    dateTimeFormatter1.isOffsetParsed();\n}",
    "testName" : "test02182"
  },
  "test02181" : {
    "methodSignature" : "public DateTimeFormatter withLocale(Locale locale)",
    "methodName" : "withLocale",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02181() throws Throwable {\n    HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();\n    DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(331, hashMap0);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);\n    Locale locale0 = Locale.ENGLISH;\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);\n}",
    "testName" : "test02181"
  },
  "test049170" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test049170() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();\n    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-631), false);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_FixedNumber0);\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(buddhistChronology0);\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();\n    Locale locale0 = Locale.GERMAN;\n    DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withLocale(locale0);\n    Chronology chronology0 = dateTimeFormatter3.getChronolgy();\n    dateTimeFormatter3.getDefaultYear();\n}",
    "testName" : "test049170"
  },
  "test066187" : {
    "methodSignature" : "public String print(ReadablePartial partial)",
    "methodName" : "print",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066187() throws Throwable {\n    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral((String) null);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);\n    LocalDate localDate0 = LocalDate.now();\n    dateTimeFormatter0.print((ReadablePartial) localDate0);\n}",
    "testName" : "test066187"
  },
  "test02184" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02184() throws Throwable {\n    HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();\n    DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(331, hashMap0);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);\n    Locale locale0 = Locale.ENGLISH;\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);\n    dateTimeFormatter0.getDefaultYear();\n}",
    "testName" : "test02184"
  },
  "test02183" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02183() throws Throwable {\n    HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();\n    DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(331, hashMap0);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);\n    Locale locale0 = Locale.ENGLISH;\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);\n    dateTimeFormatter2.getDefaultYear();\n}",
    "testName" : "test02183"
  },
  "test01765" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01765() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();\n    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(4);\n    dateTimeFormatter0.isOffsetParsed();\n}",
    "testName" : "test01765"
  },
  "test126292" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test126292() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale((Locale) null);\n    dateTimeFormatter1.isOffsetParsed();\n}",
    "testName" : "test126292"
  },
  "test01764" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01764() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();\n    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(4);\n    dateTimeFormatter1.getDefaultYear();\n}",
    "testName" : "test01764"
  },
  "test126293" : {
    "methodSignature" : "public DateTimeFormatter withLocale(Locale locale)",
    "methodName" : "withLocale",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test126293() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale((Locale) null);\n}",
    "testName" : "test126293"
  },
  "test01763" : {
    "methodSignature" : "public DateTimeFormatter withPivotYear(int pivotYear)",
    "methodName" : "withPivotYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01763() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();\n    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(4);\n}",
    "testName" : "test01763"
  },
  "test126294" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test126294() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale((Locale) null);\n    dateTimeFormatter1.getDefaultYear();\n}",
    "testName" : "test126294"
  },
  "test01762" : {
    "methodSignature" : "public Integer getPivotYear()",
    "methodName" : "getPivotYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01762() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();\n    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(4);\n    dateTimeFormatter2.getPivotYear();\n}",
    "testName" : "test01762"
  },
  "test078199" : {
    "methodSignature" : "public long parseMillis(String text)",
    "methodName" : "parseMillis",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test078199() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();\n    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 20503125, false);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, (DateTimeParser) null);\n    dateTimeFormatter0.parseMillis(\"org.joda.time.base.AbstractDuration\");\n}",
    "testName" : "test078199"
  },
  "test039141" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test039141() throws Throwable {\n    LinkedList<Object> linkedList0 = new LinkedList<Object>();\n    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);\n    dateTimeFormatter0.getPrinter();\n    dateTimeFormatter0.getDefaultYear();\n}",
    "testName" : "test039141"
  },
  "test039140" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test039140() throws Throwable {\n    LinkedList<Object> linkedList0 = new LinkedList<Object>();\n    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);\n    dateTimeFormatter0.getPrinter();\n    dateTimeFormatter0.isOffsetParsed();\n}",
    "testName" : "test039140"
  },
  "test093215" : {
    "methodSignature" : "public void printTo(StringBuffer buf, ReadablePartial partial)",
    "methodName" : "printTo",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test093215() throws Throwable {\n    DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter((-2147483562), (-1035), 2147483603);\n    LinkedList<Object> linkedList0 = new LinkedList<Object>();\n    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormatterBuilder_Composite0);\n    dateTimeFormatter0.printTo((StringBuffer) null, (ReadablePartial) null);\n}",
    "testName" : "test093215"
  },
  "test055176" : {
    "methodSignature" : "public void printTo(StringBuffer buf, long instant)",
    "methodName" : "printTo",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055176() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();\n    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);\n    dateTimeFormatter0.printTo((StringBuffer) null, (-2065L));\n}",
    "testName" : "test055176"
  },
  "test146335" : {
    "methodSignature" : "public LocalTime parseLocalTime(String text)",
    "methodName" : "parseLocalTime",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test146335() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();\n    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);\n    dateTimeFormatter0.parseLocalTime((String) null);\n}",
    "testName" : "test146335"
  },
  "test040142" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test040142() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();\n    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-696), true);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);\n    dateTimeFormatter0.getPrinter();\n    dateTimeFormatter0.isOffsetParsed();\n}",
    "testName" : "test040142"
  },
  "test029112" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test029112() throws Throwable {\n    HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();\n    DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(929, hashMap0);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);\n    DateTime dateTime0 = DateTime.now();\n    dateTimeFormatter0.print((ReadableInstant) dateTime0);\n    dateTimeFormatter0.getDefaultYear();\n}",
    "testName" : "test029112"
  },
  "test029113" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test029113() throws Throwable {\n    HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();\n    DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(929, hashMap0);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);\n    DateTime dateTime0 = DateTime.now();\n    dateTimeFormatter0.print((ReadableInstant) dateTime0);\n    dateTimeFormatter0.isOffsetParsed();\n}",
    "testName" : "test029113"
  },
  "test040143" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test040143() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();\n    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-696), true);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);\n    dateTimeFormatter0.getPrinter();\n    dateTimeFormatter0.getDefaultYear();\n}",
    "testName" : "test040143"
  },
  "test01761" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01761() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();\n    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(4);\n    dateTimeFormatter2.getDefaultYear();\n}",
    "testName" : "test01761"
  },
  "test045156" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test045156() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-1038), (-1038));\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);\n    dateTimeFormatter0.getParser();\n    dateTimeFormatter0.getDefaultYear();\n}",
    "testName" : "test045156"
  },
  "test141329" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test141329() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();\n    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-631), false);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_FixedNumber0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(2000);\n    dateTimeFormatter1.getDefaultYear();\n}",
    "testName" : "test141329"
  },
  "test01760" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01760() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();\n    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(4);\n    dateTimeFormatter1.isOffsetParsed();\n}",
    "testName" : "test01760"
  },
  "test045155" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test045155() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-1038), (-1038));\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);\n    dateTimeFormatter0.getParser();\n    dateTimeFormatter0.isOffsetParsed();\n}",
    "testName" : "test045155"
  },
  "test067188" : {
    "methodSignature" : "public String print(ReadablePartial partial)",
    "methodName" : "print",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test067188() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();\n    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-1150), false);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();\n    LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) buddhistChronology0);\n    dateTimeFormatter0.print((ReadablePartial) localDateTime0);\n}",
    "testName" : "test067188"
  },
  "test141327" : {
    "methodSignature" : "public DateTimeFormatter withPivotYear(int pivotYear)",
    "methodName" : "withPivotYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test141327() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();\n    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-631), false);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_FixedNumber0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(2000);\n}",
    "testName" : "test141327"
  },
  "test141328" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test141328() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();\n    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-631), false);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_FixedNumber0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(2000);\n    dateTimeFormatter1.isOffsetParsed();\n}",
    "testName" : "test141328"
  },
  "test127295" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test127295() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);\n    boolean boolean0 = dateTimeFormatter0.isParser();\n    dateTimeFormatter0.isOffsetParsed();\n}",
    "testName" : "test127295"
  },
  "test127296" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test127296() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);\n    boolean boolean0 = dateTimeFormatter0.isParser();\n    dateTimeFormatter0.getDefaultYear();\n}",
    "testName" : "test127296"
  },
  "test127297" : {
    "methodSignature" : "public boolean isParser()",
    "methodName" : "isParser",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test127297() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);\n    boolean boolean0 = dateTimeFormatter0.isParser();\n}",
    "testName" : "test127297"
  },
  "test077198" : {
    "methodSignature" : "public MutableDateTime parseMutableDateTime(String text)",
    "methodName" : "parseMutableDateTime",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077198() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();\n    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 13, false);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);\n    dateTimeFormatter0.parseMutableDateTime((String) null);\n}",
    "testName" : "test077198"
  },
  "test056177" : {
    "methodSignature" : "public void printTo(StringBuffer buf, long instant)",
    "methodName" : "printTo",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test056177() throws Throwable {\n    DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 1665);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormat_StyleFormatter0);\n    StringWriter stringWriter0 = new StringWriter();\n    StringBuffer stringBuffer0 = stringWriter0.getBuffer();\n    dateTimeFormatter0.printTo(stringBuffer0, (long) 1665);\n}",
    "testName" : "test056177"
  },
  "test122278" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test122278() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();\n    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 20503125, false);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, (DateTimeParser) null);\n    Integer integer0 = Integer.valueOf((-1227));\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear((-1227));\n    dateTimeFormatter2.getDefaultYear();\n}",
    "testName" : "test122278"
  },
  "test122279" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test122279() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();\n    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 20503125, false);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, (DateTimeParser) null);\n    Integer integer0 = Integer.valueOf((-1227));\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear((-1227));\n    dateTimeFormatter2.isOffsetParsed();\n}",
    "testName" : "test122279"
  },
  "test087208" : {
    "methodSignature" : "public int parseInto(ReadWritableInstant instant, String text, int position)",
    "methodName" : "parseInto",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test087208() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();\n    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-631), false);\n    MutableDateTime mutableDateTime0 = new MutableDateTime((long) 2000, (Chronology) null);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);\n    dateTimeFormatter0.parseInto(mutableDateTime0, (String) null, (-1958));\n}",
    "testName" : "test087208"
  },
  "test122277" : {
    "methodSignature" : "public DateTimeFormatter withPivotYear(int pivotYear)",
    "methodName" : "withPivotYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test122277() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();\n    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 20503125, false);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, (DateTimeParser) null);\n    Integer integer0 = Integer.valueOf((-1227));\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear((-1227));\n}",
    "testName" : "test122277"
  },
  "test035128" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test035128() throws Throwable {\n    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(\"\");\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);\n    MutableDateTime mutableDateTime0 = dateTimeFormatter0.parseMutableDateTime(\"\");\n    int int0 = dateTimeFormatter0.parseInto(mutableDateTime0, \"The partial must not be null\", (-1));\n    dateTimeFormatter0.getDefaultYear();\n}",
    "testName" : "test035128"
  },
  "test141330" : {
    "methodSignature" : "public Integer getPivotYear()",
    "methodName" : "getPivotYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test141330() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();\n    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-631), false);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_FixedNumber0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(2000);\n    dateTimeFormatter1.getPivotYear();\n}",
    "testName" : "test141330"
  },
  "test02285" : {
    "methodSignature" : "public DateTimeFormatter withLocale(Locale locale)",
    "methodName" : "withLocale",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02285() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();\n    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 20503125, false);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, (DateTimeParser) null);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-13));\n    Locale locale0 = Locale.JAPAN;\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);\n}",
    "testName" : "test02285"
  },
  "test035129" : {
    "methodSignature" : "public int parseInto(ReadWritableInstant instant, String text, int position)",
    "methodName" : "parseInto",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test035129() throws Throwable {\n    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(\"\");\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);\n    MutableDateTime mutableDateTime0 = dateTimeFormatter0.parseMutableDateTime(\"\");\n    int int0 = dateTimeFormatter0.parseInto(mutableDateTime0, \"The partial must not be null\", (-1));\n}",
    "testName" : "test035129"
  },
  "test101231" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test101231() throws Throwable {\n    HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();\n    DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(929, hashMap0);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);\n    dateTimeFormatter0.getLocale();\n    dateTimeFormatter0.getDefaultYear();\n}",
    "testName" : "test101231"
  },
  "test01871" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01871() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 24, 0);\n    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];\n    DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_MatchingParser0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-10));\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(0);\n    dateTimeFormatter1.isOffsetParsed();\n}",
    "testName" : "test01871"
  },
  "test02289" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02289() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();\n    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 20503125, false);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, (DateTimeParser) null);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-13));\n    Locale locale0 = Locale.JAPAN;\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);\n    dateTimeFormatter2.getDefaultYear();\n}",
    "testName" : "test02289"
  },
  "test01870" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01870() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 24, 0);\n    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];\n    DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_MatchingParser0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-10));\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(0);\n    dateTimeFormatter2.getDefaultYear();\n}",
    "testName" : "test01870"
  },
  "test02288" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02288() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();\n    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 20503125, false);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, (DateTimeParser) null);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-13));\n    Locale locale0 = Locale.JAPAN;\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);\n    dateTimeFormatter1.isOffsetParsed();\n}",
    "testName" : "test02288"
  },
  "test116270" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test116270() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();\n    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-631), false);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_FixedNumber0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();\n    MutableDateTime mutableDateTime0 = new MutableDateTime((long) 2000, (Chronology) null);\n    int int0 = dateTimeFormatter1.parseInto(mutableDateTime0, \"wm3$+) RGKCU!k\", 65);\n    dateTimeFormatter0.isOffsetParsed();\n}",
    "testName" : "test116270"
  },
  "test02287" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02287() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();\n    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 20503125, false);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, (DateTimeParser) null);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-13));\n    Locale locale0 = Locale.JAPAN;\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);\n    dateTimeFormatter0.getDefaultYear();\n}",
    "testName" : "test02287"
  },
  "test02286" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02286() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();\n    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 20503125, false);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, (DateTimeParser) null);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-13));\n    Locale locale0 = Locale.JAPAN;\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);\n    dateTimeFormatter1.getDefaultYear();\n}",
    "testName" : "test02286"
  },
  "test00411" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00411() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);\n    StringBuffer stringBuffer0 = new StringBuffer(0);\n    MockDate mockDate0 = new MockDate();\n    YearMonth yearMonth0 = YearMonth.fromDateFields(mockDate0);\n    dateTimeFormatter0.printTo((Appendable) stringBuffer0, (ReadablePartial) yearMonth0);\n    dateTimeFormatter0.isOffsetParsed();\n}",
    "testName" : "test00411"
  },
  "test106243" : {
    "methodSignature" : "public MutableDateTime parseMutableDateTime(String text)",
    "methodName" : "parseMutableDateTime",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test106243() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();\n    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-631), false);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_FixedNumber0);\n    dateTimeFormatter0.parseMutableDateTime(\"wm3$+) RGKCU!k\");\n}",
    "testName" : "test106243"
  },
  "test00410" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00410() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);\n    StringBuffer stringBuffer0 = new StringBuffer(0);\n    MockDate mockDate0 = new MockDate();\n    YearMonth yearMonth0 = YearMonth.fromDateFields(mockDate0);\n    dateTimeFormatter0.printTo((Appendable) stringBuffer0, (ReadablePartial) yearMonth0);\n    dateTimeFormatter0.getDefaultYear();\n}",
    "testName" : "test00410"
  },
  "test01868" : {
    "methodSignature" : "public DateTimeFormatter withPivotYear(int pivotYear)",
    "methodName" : "withPivotYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01868() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 24, 0);\n    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];\n    DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_MatchingParser0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-10));\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(0);\n}",
    "testName" : "test01868"
  },
  "test030115" : {
    "methodSignature" : "public String print(long instant)",
    "methodName" : "print",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test030115() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);\n    String string0 = dateTimeFormatter0.print(24L);\n}",
    "testName" : "test030115"
  },
  "test01867" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01867() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 24, 0);\n    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];\n    DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_MatchingParser0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-10));\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(0);\n    dateTimeFormatter1.getDefaultYear();\n}",
    "testName" : "test01867"
  },
  "test030116" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test030116() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);\n    String string0 = dateTimeFormatter0.print(24L);\n    dateTimeFormatter0.getDefaultYear();\n}",
    "testName" : "test030116"
  },
  "test01866" : {
    "methodSignature" : "public Integer getPivotYear()",
    "methodName" : "getPivotYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01866() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 24, 0);\n    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];\n    DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_MatchingParser0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-10));\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(0);\n    dateTimeFormatter2.getPivotYear();\n}",
    "testName" : "test01866"
  },
  "test101230" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test101230() throws Throwable {\n    HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();\n    DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(929, hashMap0);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);\n    dateTimeFormatter0.getLocale();\n    dateTimeFormatter0.isOffsetParsed();\n}",
    "testName" : "test101230"
  },
  "test030114" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test030114() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);\n    String string0 = dateTimeFormatter0.print(24L);\n    dateTimeFormatter0.isOffsetParsed();\n}",
    "testName" : "test030114"
  },
  "test072193" : {
    "methodSignature" : "public String print(long instant)",
    "methodName" : "print",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test072193() throws Throwable {\n    LinkedList<Object> linkedList0 = new LinkedList<Object>();\n    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_Composite0);\n    dateTimeFormatter0.print((long) 2771);\n}",
    "testName" : "test072193"
  },
  "test01869" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01869() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 24, 0);\n    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];\n    DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_MatchingParser0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-10));\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(0);\n    dateTimeFormatter0.getDefaultYear();\n}",
    "testName" : "test01869"
  },
  "test02391" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02391() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 2147483582, (-5530));\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear(16);\n    dateTimeFormatter1.isOffsetParsed();\n}",
    "testName" : "test02391"
  },
  "test02390" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02390() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 2147483582, (-5530));\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear(16);\n    dateTimeFormatter0.isOffsetParsed();\n}",
    "testName" : "test02390"
  },
  "test086207" : {
    "methodSignature" : "public int parseInto(ReadWritableInstant instant, String text, int position)",
    "methodName" : "parseInto",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test086207() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);\n    MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) null);\n    dateTimeFormatter0.parseInto(mutableDateTime0, \")!K\", 5);\n}",
    "testName" : "test086207"
  },
  "test059180" : {
    "methodSignature" : "public void printTo(Appendable appendable, ReadableInstant instant) throws IOException",
    "methodName" : "printTo",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test059180() throws Throwable {\n    LinkedList<Object> linkedList0 = new LinkedList<Object>();\n    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_Composite0);\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    dateTimeFormatter0.printTo((Appendable) charArrayWriter0, (ReadableInstant) null);\n}",
    "testName" : "test059180"
  },
  "test137320" : {
    "methodSignature" : "public void printTo(Appendable appendable, ReadablePartial partial) throws IOException",
    "methodName" : "printTo",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test137320() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();\n    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    LocalDate localDate0 = LocalDate.now(dateTimeZone0);\n    dateTimeFormatter0.printTo((Appendable) null, (ReadablePartial) localDate0);\n}",
    "testName" : "test137320"
  },
  "test065186" : {
    "methodSignature" : "public String print(ReadablePartial partial)",
    "methodName" : "print",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test065186() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();\n    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-631), false);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_FixedNumber0);\n    Locale locale0 = Locale.GERMAN;\n    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);\n    Date date0 = mockGregorianCalendar0.getGregorianChange();\n    MonthDay monthDay0 = MonthDay.fromDateFields(date0);\n    dateTimeFormatter0.print((ReadablePartial) monthDay0);\n}",
    "testName" : "test065186"
  },
  "test02393" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02393() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 2147483582, (-5530));\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear(16);\n    dateTimeFormatter1.getDefaultYear();\n}",
    "testName" : "test02393"
  },
  "test02392" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02392() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 2147483582, (-5530));\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withDefaultYear(16);\n    dateTimeFormatter2.getDefaultYear();\n}",
    "testName" : "test02392"
  },
  "test117271" : {
    "methodSignature" : "public int parseInto(ReadWritableInstant instant, String text, int position)",
    "methodName" : "parseInto",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test117271() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();\n    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 1, false);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);\n    dateTimeFormatter0.parseInto((ReadWritableInstant) null, \"$[EY F5L9K-zf\", (-9));\n}",
    "testName" : "test117271"
  },
  "test043151" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test043151() throws Throwable {\n    DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('/');\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, (DateTimeParser) null);\n    dateTimeFormatter0.getParser();\n    dateTimeFormatter0.getDefaultYear();\n}",
    "testName" : "test043151"
  },
  "test043152" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test043152() throws Throwable {\n    DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('/');\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, (DateTimeParser) null);\n    dateTimeFormatter0.getParser();\n    dateTimeFormatter0.isOffsetParsed();\n}",
    "testName" : "test043152"
  },
  "test01974" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01974() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 24, 0);\n    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];\n    DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_MatchingParser0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();\n    dateTimeFormatter2.getDefaultYear();\n}",
    "testName" : "test01974"
  },
  "test132310" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test132310() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);\n    dateTimeFormatter0.getPivotYear();\n    dateTimeFormatter0.isOffsetParsed();\n}",
    "testName" : "test132310"
  },
  "test01973" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01973() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 24, 0);\n    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];\n    DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_MatchingParser0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();\n    dateTimeFormatter2.isOffsetParsed();\n}",
    "testName" : "test01973"
  },
  "test01972" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01972() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 24, 0);\n    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];\n    DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_MatchingParser0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();\n    dateTimeFormatter0.getDefaultYear();\n}",
    "testName" : "test01972"
  },
  "test071192" : {
    "methodSignature" : "public String print(ReadableInstant instant)",
    "methodName" : "print",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test071192() throws Throwable {\n    DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(122, 122, 122);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormat_StyleFormatter0);\n    DateTime dateTime0 = new DateTime();\n    dateTimeFormatter0.print((ReadableInstant) dateTime0);\n}",
    "testName" : "test071192"
  },
  "test01975" : {
    "methodSignature" : "public DateTimeFormatter withOffsetParsed()",
    "methodName" : "withOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01975() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 24, 0);\n    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];\n    DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_MatchingParser0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();\n}",
    "testName" : "test01975"
  },
  "test092214" : {
    "methodSignature" : "public void printTo(StringBuffer buf, ReadablePartial partial)",
    "methodName" : "printTo",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test092214() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();\n    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);\n    LocalDate localDate0 = LocalDate.now();\n    dateTimeFormatter0.printTo((StringBuffer) null, (ReadablePartial) localDate0);\n}",
    "testName" : "test092214"
  },
  "test054175" : {
    "methodSignature" : "public void printTo(StringBuffer buf, long instant)",
    "methodName" : "printTo",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test054175() throws Throwable {\n    LinkedList<Object> linkedList0 = new LinkedList<Object>();\n    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);\n    StringBuffer stringBuffer0 = new StringBuffer(\"5/=(\");\n    dateTimeFormatter0.printTo(stringBuffer0, 1089L);\n}",
    "testName" : "test054175"
  },
  "test097224" : {
    "methodSignature" : "public String print(long instant)",
    "methodName" : "print",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test097224() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();\n    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2147483627, false);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);\n    // Undeclared exception!\n    dateTimeFormatter0.print(1L);\n}",
    "testName" : "test097224"
  },
  "test038138" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test038138() throws Throwable {\n    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(\"\");\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);\n    dateTimeFormatter0.getPrinter();\n    dateTimeFormatter0.getDefaultYear();\n}",
    "testName" : "test038138"
  },
  "test033123" : {
    "methodSignature" : "public long parseMillis(String text)",
    "methodName" : "parseMillis",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033123() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(\"\", \"\", false, 191, 20587500);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);\n    long long0 = dateTimeFormatter0.parseMillis(\"\");\n}",
    "testName" : "test033123"
  },
  "test033124" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033124() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(\"\", \"\", false, 191, 20587500);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);\n    long long0 = dateTimeFormatter0.parseMillis(\"\");\n    dateTimeFormatter0.isOffsetParsed();\n}",
    "testName" : "test033124"
  },
  "test033125" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033125() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(\"\", \"\", false, 191, 20587500);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);\n    long long0 = dateTimeFormatter0.parseMillis(\"\");\n    dateTimeFormatter0.getDefaultYear();\n}",
    "testName" : "test033125"
  },
  "test038139" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test038139() throws Throwable {\n    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(\"\");\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);\n    dateTimeFormatter0.getPrinter();\n    dateTimeFormatter0.isOffsetParsed();\n}",
    "testName" : "test038139"
  },
  "test143332" : {
    "methodSignature" : "public void printTo(Writer out, long instant) throws IOException",
    "methodName" : "printTo",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test143332() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);\n    PipedWriter pipedWriter0 = new PipedWriter();\n    dateTimeFormatter0.printTo((Writer) pipedWriter0, 1L);\n}",
    "testName" : "test143332"
  },
  "test081202" : {
    "methodSignature" : "public LocalTime parseLocalTime(String text)",
    "methodName" : "parseLocalTime",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test081202() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();\n    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);\n    dateTimeFormatter0.parseLocalTime(\"h)\\\"Zj\\\"#2k}rK\");\n}",
    "testName" : "test081202"
  },
  "test048163" : {
    "methodSignature" : "public Chronology getChronology()",
    "methodName" : "getChronology",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test048163() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();\n    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-631), false);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_FixedNumber0);\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(buddhistChronology0);\n    Chronology chronology0 = dateTimeFormatter1.getChronology();\n}",
    "testName" : "test048163"
  },
  "test048164" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test048164() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();\n    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-631), false);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_FixedNumber0);\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(buddhistChronology0);\n    Chronology chronology0 = dateTimeFormatter1.getChronology();\n    dateTimeFormatter1.getDefaultYear();\n}",
    "testName" : "test048164"
  },
  "test048165" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test048165() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();\n    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-631), false);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_FixedNumber0);\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(buddhistChronology0);\n    Chronology chronology0 = dateTimeFormatter1.getChronology();\n    dateTimeFormatter1.isOffsetParsed();\n}",
    "testName" : "test048165"
  },
  "test00512" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00512() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 24, 0);\n    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];\n    StringWriter stringWriter0 = new StringWriter();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 0);\n    DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_MatchingParser0);\n    MutableDateTime mutableDateTime0 = new MutableDateTime();\n    DateTime dateTime0 = mutableDateTime0.toDateTime(dateTimeZone0);\n    dateTimeFormatter0.printTo((Appendable) stringWriter0, (ReadableInstant) dateTime0);\n    dateTimeFormatter0.getDefaultYear();\n}",
    "testName" : "test00512"
  },
  "test00513" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00513() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 24, 0);\n    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];\n    StringWriter stringWriter0 = new StringWriter();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 0);\n    DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_MatchingParser0);\n    MutableDateTime mutableDateTime0 = new MutableDateTime();\n    DateTime dateTime0 = mutableDateTime0.toDateTime(dateTimeZone0);\n    dateTimeFormatter0.printTo((Appendable) stringWriter0, (ReadableInstant) dateTime0);\n    dateTimeFormatter0.isOffsetParsed();\n}",
    "testName" : "test00513"
  },
  "test112257" : {
    "methodSignature" : "public LocalDateTime parseLocalDateTime(String text)",
    "methodName" : "parseLocalDateTime",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test112257() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();\n    DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeFormatterBuilder_UnpaddedNumber0);\n    dateTimeFormatter0.parseLocalDateTime(\"cn\");\n}",
    "testName" : "test112257"
  },
  "test142331" : {
    "methodSignature" : "public void printTo(Writer out, ReadableInstant instant) throws IOException",
    "methodName" : "printTo",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test142331() throws Throwable {\n    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(\"\");\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);\n    MutableDateTime mutableDateTime0 = dateTimeFormatter0.parseMutableDateTime(\"\");\n    dateTimeFormatter0.printTo((Writer) null, (ReadableInstant) mutableDateTime0);\n}",
    "testName" : "test142331"
  },
  "test02494" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02494() throws Throwable {\n    DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 6);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, (DateTimeParser) null);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(buddhistChronology0);\n    dateTimeFormatter0.isOffsetParsed();\n}",
    "testName" : "test02494"
  },
  "test080201" : {
    "methodSignature" : "public LocalTime parseLocalTime(String text)",
    "methodName" : "parseLocalTime",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test080201() throws Throwable {\n    LinkedList<Object> linkedList0 = new LinkedList<Object>();\n    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_Composite0);\n    dateTimeFormatter0.parseLocalTime(\"(n\");\n}",
    "testName" : "test080201"
  },
  "test102232" : {
    "methodSignature" : "public int parseInto(ReadWritableInstant instant, String text, int position)",
    "methodName" : "parseInto",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test102232() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();\n    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 20503125, false);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, (DateTimeParser) null);\n    dateTimeFormatter0.parseInto((ReadWritableInstant) null, \":t\", 270);\n}",
    "testName" : "test102232"
  },
  "test02498" : {
    "methodSignature" : "public DateTimeFormatter withChronology(Chronology chrono)",
    "methodName" : "withChronology",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02498() throws Throwable {\n    DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 6);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, (DateTimeParser) null);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(buddhistChronology0);\n}",
    "testName" : "test02498"
  },
  "test02497" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02497() throws Throwable {\n    DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 6);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, (DateTimeParser) null);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(buddhistChronology0);\n    dateTimeFormatter2.getDefaultYear();\n}",
    "testName" : "test02497"
  },
  "test02496" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02496() throws Throwable {\n    DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 6);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, (DateTimeParser) null);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(buddhistChronology0);\n    dateTimeFormatter1.isOffsetParsed();\n}",
    "testName" : "test02496"
  },
  "test02495" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02495() throws Throwable {\n    DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(0, 0, 6);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, (DateTimeParser) null);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(buddhistChronology0);\n    dateTimeFormatter1.getDefaultYear();\n}",
    "testName" : "test02495"
  },
  "test049166" : {
    "methodSignature" : "public Chronology getChronolgy()",
    "methodName" : "getChronolgy",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test049166() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();\n    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-631), false);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_FixedNumber0);\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(buddhistChronology0);\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();\n    Locale locale0 = Locale.GERMAN;\n    DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withLocale(locale0);\n    Chronology chronology0 = dateTimeFormatter3.getChronolgy();\n}",
    "testName" : "test049166"
  },
  "test049169" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test049169() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();\n    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-631), false);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_FixedNumber0);\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(buddhistChronology0);\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();\n    Locale locale0 = Locale.GERMAN;\n    DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withLocale(locale0);\n    Chronology chronology0 = dateTimeFormatter3.getChronolgy();\n    dateTimeFormatter0.isOffsetParsed();\n}",
    "testName" : "test049169"
  },
  "test107244" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test107244() throws Throwable {\n    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(\"\");\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();\n    DateTime dateTime0 = dateTimeFormatter1.parseDateTime(\"\");\n    dateTimeFormatter1.isOffsetParsed();\n}",
    "testName" : "test107244"
  },
  "test049168" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test049168() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();\n    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-631), false);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_FixedNumber0);\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(buddhistChronology0);\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();\n    Locale locale0 = Locale.GERMAN;\n    DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withLocale(locale0);\n    Chronology chronology0 = dateTimeFormatter3.getChronolgy();\n    dateTimeFormatter3.isOffsetParsed();\n}",
    "testName" : "test049168"
  },
  "test107245" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test107245() throws Throwable {\n    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(\"\");\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();\n    DateTime dateTime0 = dateTimeFormatter1.parseDateTime(\"\");\n    dateTimeFormatter0.isOffsetParsed();\n}",
    "testName" : "test107245"
  },
  "test107246" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test107246() throws Throwable {\n    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(\"\");\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();\n    DateTime dateTime0 = dateTimeFormatter1.parseDateTime(\"\");\n    dateTime0.getMillis();\n}",
    "testName" : "test107246"
  },
  "test107247" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test107247() throws Throwable {\n    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(\"\");\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();\n    DateTime dateTime0 = dateTimeFormatter1.parseDateTime(\"\");\n    dateTimeFormatter1.getDefaultYear();\n}",
    "testName" : "test107247"
  },
  "test113258" : {
    "methodSignature" : "public long parseMillis(String text)",
    "methodName" : "parseMillis",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test113258() throws Throwable {\n    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(\"\");\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);\n    dateTimeFormatter0.parseMillis(\"nUJUkqCh6\");\n}",
    "testName" : "test113258"
  },
  "test028110" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test028110() throws Throwable {\n    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(\"\");\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);\n    LocalDateTime localDateTime0 = LocalDateTime.now();\n    dateTimeFormatter0.print((ReadablePartial) localDateTime0);\n    dateTimeFormatter0.getDefaultYear();\n}",
    "testName" : "test028110"
  },
  "test01030" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01030() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 24, 0);\n    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];\n    DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_MatchingParser0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-10));\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();\n    dateTimeFormatter2.isOffsetParsed();\n}",
    "testName" : "test01030"
  },
  "test028111" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test028111() throws Throwable {\n    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(\"\");\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);\n    LocalDateTime localDateTime0 = LocalDateTime.now();\n    dateTimeFormatter0.print((ReadablePartial) localDateTime0);\n    dateTimeFormatter0.isOffsetParsed();\n}",
    "testName" : "test028111"
  },
  "test060181" : {
    "methodSignature" : "public void printTo(Appendable appendable, long instant) throws IOException",
    "methodName" : "printTo",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test060181() throws Throwable {\n    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(\"\");\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);\n    CharBuffer charBuffer0 = CharBuffer.allocate(2000);\n    dateTimeFormatter0.printTo((Appendable) charBuffer0, (long) 1);\n}",
    "testName" : "test060181"
  },
  "test044154" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044154() throws Throwable {\n    LinkedList<Object> linkedList0 = new LinkedList<Object>();\n    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);\n    dateTimeFormatter0.getParser();\n    dateTimeFormatter0.getDefaultYear();\n}",
    "testName" : "test044154"
  },
  "test044153" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044153() throws Throwable {\n    LinkedList<Object> linkedList0 = new LinkedList<Object>();\n    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);\n    dateTimeFormatter0.getParser();\n    dateTimeFormatter0.isOffsetParsed();\n}",
    "testName" : "test044153"
  },
  "test01028" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01028() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 24, 0);\n    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];\n    DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_MatchingParser0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-10));\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();\n    dateTimeFormatter1.getDefaultYear();\n}",
    "testName" : "test01028"
  },
  "test01027" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01027() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 24, 0);\n    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];\n    DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_MatchingParser0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-10));\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();\n    dateTimeFormatter2.getDefaultYear();\n}",
    "testName" : "test01027"
  },
  "test096222" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test096222() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();\n    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 1, false);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);\n    dateTimeFormatter0.getParser();\n    dateTimeFormatter0.getDefaultYear();\n}",
    "testName" : "test096222"
  },
  "test01026" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01026() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 24, 0);\n    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];\n    DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_MatchingParser0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-10));\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();\n    dateTimeFormatter1.isOffsetParsed();\n}",
    "testName" : "test01026"
  },
  "test02599" : {
    "methodSignature" : "public DateTimeFormatter withChronology(Chronology chrono)",
    "methodName" : "withChronology",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02599() throws Throwable {\n    LinkedList<Object> linkedList0 = new LinkedList<Object>();\n    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_Composite0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);\n    IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(islamicChronology0);\n}",
    "testName" : "test02599"
  },
  "test01025" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01025() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 24, 0);\n    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];\n    DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_MatchingParser0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-10));\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();\n    dateTimeFormatter0.getDefaultYear();\n}",
    "testName" : "test01025"
  },
  "test128299" : {
    "methodSignature" : "public boolean isParser()",
    "methodName" : "isParser",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test128299() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();\n    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 20503125, false);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, (DateTimeParser) null);\n    boolean boolean0 = dateTimeFormatter0.isParser();\n}",
    "testName" : "test128299"
  },
  "test00614" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00614() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);\n    MockPrintStream mockPrintStream0 = new MockPrintStream(\"America/Los_Angeles\");\n    dateTimeFormatter0.printTo((Appendable) mockPrintStream0, (long) 0);\n    dateTimeFormatter0.isOffsetParsed();\n}",
    "testName" : "test00614"
  },
  "test128298" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test128298() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();\n    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 20503125, false);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, (DateTimeParser) null);\n    boolean boolean0 = dateTimeFormatter0.isParser();\n    dateTimeFormatter0.getDefaultYear();\n}",
    "testName" : "test128298"
  },
  "test01029" : {
    "methodSignature" : "public DateTimeFormatter withZoneUTC()",
    "methodName" : "withZoneUTC",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01029() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 24, 0);\n    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];\n    DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_MatchingParser0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-10));\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();\n}",
    "testName" : "test01029"
  },
  "test076197" : {
    "methodSignature" : "public MutableDateTime parseMutableDateTime(String text)",
    "methodName" : "parseMutableDateTime",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test076197() throws Throwable {\n    LinkedList<Object> linkedList0 = new LinkedList<Object>();\n    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);\n    dateTimeFormatter0.parseMutableDateTime(\"h\");\n}",
    "testName" : "test076197"
  },
  "test123284" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test123284() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();\n    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 20503125, false);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, (DateTimeParser) null);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone(fixedDateTimeZone0);\n    dateTimeFormatter2.getDefaultYear();\n}",
    "testName" : "test123284"
  },
  "test00615" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00615() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);\n    MockPrintStream mockPrintStream0 = new MockPrintStream(\"America/Los_Angeles\");\n    dateTimeFormatter0.printTo((Appendable) mockPrintStream0, (long) 0);\n    dateTimeFormatter0.getDefaultYear();\n}",
    "testName" : "test00615"
  },
  "test123283" : {
    "methodSignature" : "public DateTimeFormatter withZone(DateTimeZone zone)",
    "methodName" : "withZone",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test123283() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();\n    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 20503125, false);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, (DateTimeParser) null);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone(fixedDateTimeZone0);\n}",
    "testName" : "test123283"
  },
  "test132309" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test132309() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);\n    dateTimeFormatter0.getPivotYear();\n    dateTimeFormatter0.getDefaultYear();\n}",
    "testName" : "test132309"
  },
  "test123282" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test123282() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();\n    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 20503125, false);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, (DateTimeParser) null);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone(fixedDateTimeZone0);\n    dateTimeFormatter2.isOffsetParsed();\n}",
    "testName" : "test123282"
  },
  "test123281" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test123281() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();\n    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 20503125, false);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, (DateTimeParser) null);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone(fixedDateTimeZone0);\n    dateTimeFormatter0.isOffsetParsed();\n}",
    "testName" : "test123281"
  },
  "test091213" : {
    "methodSignature" : "public LocalDateTime parseLocalDateTime(String text)",
    "methodName" : "parseLocalDateTime",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test091213() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 1900, 39);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);\n    dateTimeFormatter0.parseLocalDateTime(\"0XA#n\\\".,NH[{~R}r\");\n}",
    "testName" : "test091213"
  },
  "test096223" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test096223() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();\n    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 1, false);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);\n    dateTimeFormatter0.getParser();\n    dateTimeFormatter0.isOffsetParsed();\n}",
    "testName" : "test096223"
  },
  "test042148" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test042148() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();\n    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 1, false);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);\n    Integer integer0 = Integer.valueOf((-9));\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);\n    Integer integer1 = dateTimeFormatter1.getPivotYear();\n    dateTimeFormatter1.isOffsetParsed();\n}",
    "testName" : "test042148"
  },
  "test042149" : {
    "methodSignature" : "public Integer getPivotYear()",
    "methodName" : "getPivotYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test042149() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();\n    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 1, false);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);\n    Integer integer0 = Integer.valueOf((-9));\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);\n    Integer integer1 = dateTimeFormatter1.getPivotYear();\n}",
    "testName" : "test042149"
  },
  "test124287" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test124287() throws Throwable {\n    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(\"\");\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology((Chronology) null);\n    dateTimeFormatter1.isOffsetParsed();\n}",
    "testName" : "test124287"
  },
  "test144333" : {
    "methodSignature" : "public static MutableDateTime parse(String str)",
    "methodName" : "parse",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test144333() throws Throwable {\n    MutableDateTime.parse(\"6`'Jp\");\n}",
    "testName" : "test144333"
  },
  "test047160" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test047160() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-1544), (-1542));\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-2754));\n    int int0 = dateTimeFormatter1.getDefaultYear();\n    dateTimeFormatter1.isOffsetParsed();\n}",
    "testName" : "test047160"
  },
  "test047161" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test047161() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-1544), (-1542));\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-2754));\n    int int0 = dateTimeFormatter1.getDefaultYear();\n    dateTimeFormatter0.getDefaultYear();\n}",
    "testName" : "test047161"
  },
  "test047162" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test047162() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-1544), (-1542));\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-2754));\n    int int0 = dateTimeFormatter1.getDefaultYear();\n}",
    "testName" : "test047162"
  },
  "test026104" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test026104() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();\n    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 20503125, false);\n    JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) null);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, (DateTimeParser) null);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-13));\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(julianChronology0);\n    dateTimeFormatter0.getDefaultYear();\n}",
    "testName" : "test026104"
  },
  "test026103" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test026103() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();\n    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 20503125, false);\n    JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) null);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, (DateTimeParser) null);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-13));\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(julianChronology0);\n    dateTimeFormatter2.getDefaultYear();\n}",
    "testName" : "test026103"
  },
  "test026107" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test026107() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();\n    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 20503125, false);\n    JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) null);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, (DateTimeParser) null);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-13));\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(julianChronology0);\n    dateTimeFormatter1.isOffsetParsed();\n}",
    "testName" : "test026107"
  },
  "test026106" : {
    "methodSignature" : "public DateTimeFormatter withChronology(Chronology chrono)",
    "methodName" : "withChronology",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test026106() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();\n    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 20503125, false);\n    JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) null);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, (DateTimeParser) null);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-13));\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(julianChronology0);\n}",
    "testName" : "test026106"
  },
  "test026105" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test026105() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();\n    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 20503125, false);\n    JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) null);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, (DateTimeParser) null);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-13));\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(julianChronology0);\n    dateTimeFormatter1.getDefaultYear();\n}",
    "testName" : "test026105"
  },
  "test124286" : {
    "methodSignature" : "public DateTimeFormatter withChronology(Chronology chrono)",
    "methodName" : "withChronology",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test124286() throws Throwable {\n    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(\"\");\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology((Chronology) null);\n}",
    "testName" : "test124286"
  },
  "test124285" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test124285() throws Throwable {\n    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(\"\");\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology((Chronology) null);\n    dateTimeFormatter1.getDefaultYear();\n}",
    "testName" : "test124285"
  },
  "test075196" : {
    "methodSignature" : "public String print(long instant)",
    "methodName" : "print",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test075196() throws Throwable {\n    DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(1789, 0, 0);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormat_StyleFormatter0, dateTimeFormat_StyleFormatter0);\n    dateTimeFormatter0.print((-1L));\n}",
    "testName" : "test075196"
  },
  "test058179" : {
    "methodSignature" : "public void printTo(Appendable appendable, ReadablePartial partial) throws IOException",
    "methodName" : "printTo",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test058179() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (byte) 89, (byte) 89);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_Fraction0);\n    MockFileWriter mockFileWriter0 = new MockFileWriter(\" %.4|+\");\n    dateTimeFormatter0.printTo((Appendable) mockFileWriter0, (ReadablePartial) null);\n}",
    "testName" : "test058179"
  },
  "test103235" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test103235() throws Throwable {\n    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(\"\");\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);\n    MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime(\"\");\n    dateTimeFormatter1.isOffsetParsed();\n}",
    "testName" : "test103235"
  },
  "test103236" : {
    "methodSignature" : "public MutableDateTime parseMutableDateTime(String text)",
    "methodName" : "parseMutableDateTime",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test103236() throws Throwable {\n    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(\"\");\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);\n    MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime(\"\");\n}",
    "testName" : "test103236"
  },
  "test085206" : {
    "methodSignature" : "public LocalDate parseLocalDate(String text)",
    "methodName" : "parseLocalDate",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test085206() throws Throwable {\n    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(\"\");\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);\n    dateTimeFormatter0.parseLocalDate((String) null);\n}",
    "testName" : "test085206"
  },
  "test103233" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test103233() throws Throwable {\n    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(\"\");\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);\n    MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime(\"\");\n    mutableDateTime0.getMillis();\n}",
    "testName" : "test103233"
  },
  "test103234" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test103234() throws Throwable {\n    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(\"\");\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);\n    MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime(\"\");\n    dateTimeFormatter0.isOffsetParsed();\n}",
    "testName" : "test103234"
  },
  "test118272" : {
    "methodSignature" : "public void printTo(Writer out, ReadableInstant instant) throws IOException",
    "methodName" : "printTo",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test118272() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);\n    DateMidnight dateMidnight0 = new DateMidnight((long) 1900, (Chronology) null);\n    dateTimeFormatter0.printTo((Writer) null, (ReadableInstant) dateMidnight0);\n}",
    "testName" : "test118272"
  },
  "test01133" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01133() throws Throwable {\n    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(\"\");\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone((DateTimeZone) null);\n    dateTimeFormatter0.isOffsetParsed();\n}",
    "testName" : "test01133"
  },
  "test042150" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test042150() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();\n    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 1, false);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);\n    Integer integer0 = Integer.valueOf((-9));\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);\n    Integer integer1 = dateTimeFormatter1.getPivotYear();\n    dateTimeFormatter1.getDefaultYear();\n}",
    "testName" : "test042150"
  },
  "test108249" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test108249() throws Throwable {\n    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(\"\");\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();\n    DateTime dateTime0 = dateTimeFormatter1.parseDateTime(\"\");\n    dateTime0.getMillis();\n}",
    "testName" : "test108249"
  },
  "test01132" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01132() throws Throwable {\n    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(\"\");\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone((DateTimeZone) null);\n    dateTimeFormatter2.isOffsetParsed();\n}",
    "testName" : "test01132"
  },
  "test103237" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test103237() throws Throwable {\n    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(\"\");\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);\n    MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime(\"\");\n    dateTimeFormatter1.getDefaultYear();\n}",
    "testName" : "test103237"
  },
  "test01131" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01131() throws Throwable {\n    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(\"\");\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone((DateTimeZone) null);\n    dateTimeFormatter2.getDefaultYear();\n}",
    "testName" : "test01131"
  },
  "test108248" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test108248() throws Throwable {\n    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(\"\");\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();\n    DateTime dateTime0 = dateTimeFormatter1.parseDateTime(\"\");\n    dateTimeFormatter1.getDefaultYear();\n}",
    "testName" : "test108248"
  },
  "test032119" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test032119() throws Throwable {\n    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(\"\");\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();\n    MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime(\"\");\n    dateTimeFormatter1.getDefaultYear();\n}",
    "testName" : "test032119"
  },
  "test070191" : {
    "methodSignature" : "public String print(ReadableInstant instant)",
    "methodName" : "print",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test070191() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 24, (-37));\n    DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];\n    DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_MatchingParser0);\n    dateTimeFormatter0.print((ReadableInstant) null);\n}",
    "testName" : "test070191"
  },
  "test00716" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00716() throws Throwable {\n    HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();\n    DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(929, hashMap0);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(191);\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter(3600);\n    DateMidnight dateMidnight0 = new DateMidnight(4294967295L, dateTimeZone0);\n    dateTimeFormatter0.printTo((Writer) charArrayWriter0, (ReadableInstant) dateMidnight0);\n    dateTimeFormatter0.isOffsetParsed();\n}",
    "testName" : "test00716"
  },
  "test00717" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00717() throws Throwable {\n    HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();\n    DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(929, hashMap0);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(191);\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter(3600);\n    DateMidnight dateMidnight0 = new DateMidnight(4294967295L, dateTimeZone0);\n    dateTimeFormatter0.printTo((Writer) charArrayWriter0, (ReadableInstant) dateMidnight0);\n    dateTimeFormatter0.getDefaultYear();\n}",
    "testName" : "test00717"
  },
  "test079200" : {
    "methodSignature" : "public long parseMillis(String text)",
    "methodName" : "parseMillis",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test079200() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(929, (Map<String, DateTimeZone>) null);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);\n    dateTimeFormatter0.parseMillis(\"\");\n}",
    "testName" : "test079200"
  },
  "test037136" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test037136() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();\n    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-631), false);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_FixedNumber0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();\n    boolean boolean0 = dateTimeFormatter1.isOffsetParsed();\n}",
    "testName" : "test037136"
  },
  "test037137" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test037137() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();\n    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-631), false);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_FixedNumber0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();\n    boolean boolean0 = dateTimeFormatter1.isOffsetParsed();\n    dateTimeFormatter0.isOffsetParsed();\n}",
    "testName" : "test037137"
  },
  "test037135" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test037135() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();\n    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-631), false);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_FixedNumber0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();\n    boolean boolean0 = dateTimeFormatter1.isOffsetParsed();\n    dateTimeFormatter1.getDefaultYear();\n}",
    "testName" : "test037135"
  },
  "test084205" : {
    "methodSignature" : "public LocalDate parseLocalDate(String text)",
    "methodName" : "parseLocalDate",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test084205() throws Throwable {\n    LinkedList<Object> linkedList0 = new LinkedList<Object>();\n    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_Composite0);\n    dateTimeFormatter0.parseLocalDate(\"H\");\n}",
    "testName" : "test084205"
  },
  "test089210" : {
    "methodSignature" : "public DateTime parseDateTime(String text)",
    "methodName" : "parseDateTime",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test089210() throws Throwable {\n    HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();\n    DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(592, hashMap0);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);\n    dateTimeFormatter0.parseDateTime((String) null);\n}",
    "testName" : "test089210"
  },
  "test119273" : {
    "methodSignature" : "public void printTo(Writer out, ReadablePartial partial) throws IOException",
    "methodName" : "printTo",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test119273() throws Throwable {\n    LinkedList<Object> linkedList0 = new LinkedList<Object>();\n    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);\n    MockFile mockFile0 = new MockFile(\"\", \"/0YOV(t\");\n    MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);\n    dateTimeFormatter0.printTo((Writer) mockFileWriter0, (ReadablePartial) null);\n}",
    "testName" : "test119273"
  },
  "test01237" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01237() throws Throwable {\n    LinkedList<Object> linkedList0 = new LinkedList<Object>();\n    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone(dateTimeZone0);\n    dateTimeFormatter2.isOffsetParsed();\n}",
    "testName" : "test01237"
  },
  "test01236" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01236() throws Throwable {\n    LinkedList<Object> linkedList0 = new LinkedList<Object>();\n    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone(dateTimeZone0);\n    dateTimeFormatter0.isOffsetParsed();\n}",
    "testName" : "test01236"
  },
  "test01235" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01235() throws Throwable {\n    LinkedList<Object> linkedList0 = new LinkedList<Object>();\n    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone(dateTimeZone0);\n    dateTimeFormatter2.getDefaultYear();\n}",
    "testName" : "test01235"
  },
  "test095221" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test095221() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);\n    StringBuffer stringBuffer0 = new StringBuffer(0);\n    Instant instant0 = Instant.now();\n    dateTimeFormatter0.printTo(stringBuffer0, (ReadableInstant) instant0);\n    dateTimeFormatter0.getDefaultYear();\n}",
    "testName" : "test095221"
  },
  "test01234" : {
    "methodSignature" : "public DateTimeFormatter withZone(DateTimeZone zone)",
    "methodName" : "withZone",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01234() throws Throwable {\n    LinkedList<Object> linkedList0 = new LinkedList<Object>();\n    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone(dateTimeZone0);\n}",
    "testName" : "test01234"
  },
  "test01238" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01238() throws Throwable {\n    LinkedList<Object> linkedList0 = new LinkedList<Object>();\n    DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(0);\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone(dateTimeZone0);\n    dateTimeFormatter0.getDefaultYear();\n}",
    "testName" : "test01238"
  },
  "test128300" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test128300() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();\n    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 20503125, false);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, (DateTimeParser) null);\n    boolean boolean0 = dateTimeFormatter0.isParser();\n    dateTimeFormatter0.isOffsetParsed();\n}",
    "testName" : "test128300"
  },
  "test108251" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test108251() throws Throwable {\n    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(\"\");\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();\n    DateTime dateTime0 = dateTimeFormatter1.parseDateTime(\"\");\n    dateTimeFormatter1.isOffsetParsed();\n}",
    "testName" : "test108251"
  },
  "test032122" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test032122() throws Throwable {\n    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(\"\");\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();\n    MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime(\"\");\n    dateTimeFormatter0.isOffsetParsed();\n}",
    "testName" : "test032122"
  },
  "test108250" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test108250() throws Throwable {\n    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(\"\");\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();\n    DateTime dateTime0 = dateTimeFormatter1.parseDateTime(\"\");\n    dateTimeFormatter0.isOffsetParsed();\n}",
    "testName" : "test108250"
  },
  "test032121" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test032121() throws Throwable {\n    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(\"\");\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();\n    MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime(\"\");\n    dateTimeFormatter1.isOffsetParsed();\n}",
    "testName" : "test032121"
  },
  "test032120" : {
    "methodSignature" : "public long getMillis()",
    "methodName" : "getMillis",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test032120() throws Throwable {\n    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(\"\");\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();\n    MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime(\"\");\n    mutableDateTime0.getMillis();\n}",
    "testName" : "test032120"
  },
  "test090212" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test090212() throws Throwable {\n    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(\"\");\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);\n    dateTimeFormatter0.parseLocalDateTime(\"\");\n    dateTimeFormatter0.isOffsetParsed();\n}",
    "testName" : "test090212"
  },
  "test090211" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test090211() throws Throwable {\n    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(\"\");\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);\n    dateTimeFormatter0.parseLocalDateTime(\"\");\n    dateTimeFormatter0.getDefaultYear();\n}",
    "testName" : "test090211"
  },
  "test064185" : {
    "methodSignature" : "public void printTo(Writer out, long instant) throws IOException",
    "methodName" : "printTo",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test064185() throws Throwable {\n    DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('+');\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);\n    dateTimeFormatter0.printTo((Writer) null, 3600000L);\n}",
    "testName" : "test064185"
  },
  "test138321" : {
    "methodSignature" : "public void printTo(Appendable appendable, long instant) throws IOException",
    "methodName" : "printTo",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test138321() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);\n    dateTimeFormatter0.printTo((Appendable) null, (long) 1900);\n}",
    "testName" : "test138321"
  },
  "test133312" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test133312() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);\n    dateTimeFormatter0.getChronolgy();\n    dateTimeFormatter0.getDefaultYear();\n}",
    "testName" : "test133312"
  },
  "test133311" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test133311() throws Throwable {\n    DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);\n    dateTimeFormatter0.getChronolgy();\n    dateTimeFormatter0.isOffsetParsed();\n}",
    "testName" : "test133311"
  },
  "test027108" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test027108() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();\n    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);\n    LocalDate localDate0 = LocalDate.now(dateTimeZone0);\n    dateTimeFormatter0.print((ReadablePartial) localDate0);\n    dateTimeFormatter0.getDefaultYear();\n}",
    "testName" : "test027108"
  },
  "test01344" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01344() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();\n    DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-1544), (-1542));\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);\n    DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear((-2754));\n    DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();\n    DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone(dateTimeZone0);\n    dateTimeFormatter1.getDefaultYear();\n}",
    "testName" : "test01344"
  },
  "test027109" : {
    "methodSignature" : "public boolean isOffsetParsed()",
    "methodName" : "isOffsetParsed",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test027109() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();\n    DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);\n    LocalDate localDate0 = LocalDate.now(dateTimeZone0);\n    dateTimeFormatter0.print((ReadablePartial) localDate0);\n    dateTimeFormatter0.isOffsetParsed();\n}",
    "testName" : "test027109"
  },
  "test069190" : {
    "methodSignature" : "public String print(ReadableInstant instant)",
    "methodName" : "print",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test069190() throws Throwable {\n    DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(\"\");\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeFormatterBuilder_StringLiteral0);\n    MutableDateTime mutableDateTime0 = dateTimeFormatter0.parseMutableDateTime(\"\");\n    dateTimeFormatter0.print((ReadableInstant) mutableDateTime0);\n}",
    "testName" : "test069190"
  },
  "test00819" : {
    "methodSignature" : "public int getDefaultYear()",
    "methodName" : "getDefaultYear",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00819() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();\n    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 1, false);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);\n    StringWriter stringWriter0 = new StringWriter();\n    dateTimeFormatter0.printTo((Writer) stringWriter0, 0L);\n    dateTimeFormatter0.getDefaultYear();\n}",
    "testName" : "test00819"
  },
  "test114259" : {
    "methodSignature" : "public long parseMillis(String text)",
    "methodName" : "parseMillis",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test114259() throws Throwable {\n    HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();\n    DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(929, hashMap0);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);\n    dateTimeFormatter0.parseMillis(\"\");\n}",
    "testName" : "test114259"
  },
  "test053174" : {
    "methodSignature" : "public void printTo(StringBuffer buf, long instant)",
    "methodName" : "printTo",
    "className" : "org.joda.time.format.DateTimeFormatter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test053174() throws Throwable {\n    StringBuffer stringBuffer0 = new StringBuffer(719527);\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();\n    DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 20503125, false);\n    DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, (DateTimeParser) null);\n    // Undeclared exception!\n    dateTimeFormatter0.printTo(stringBuffer0, 59737472L);\n}",
    "testName" : "test053174"
  }
}