{
  "test2224" : {
    "methodSignature" : "public Partial with(DateTimeFieldType fieldType, int value)",
    "methodName" : "with",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2224() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();\n    Partial partial0 = new Partial(dateTimeFieldType0, 0);\n    DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.year();\n    partial0.with(dateTimeFieldType1, 255);\n}",
    "testName" : "test2224"
  },
  "test3335" : {
    "methodSignature" : "public Partial without(DateTimeFieldType fieldType)",
    "methodName" : "without",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3335() throws Throwable {\n    Partial partial0 = new Partial();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();\n    Partial partial1 = partial0.without(dateTimeFieldType0);\n}",
    "testName" : "test3335"
  },
  "test4548" : {
    "methodSignature" : "public DateTimeFormatter getFormatter()",
    "methodName" : "getFormatter",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4548() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();\n    Partial partial0 = new Partial(dateTimeFieldType0, 0);\n    Locale locale0 = Locale.CANADA_FRENCH;\n    partial0.toString((String) null, locale0);\n    DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();\n}",
    "testName" : "test4548"
  },
  "test2325" : {
    "methodSignature" : "public Partial(DateTimeFieldType[] types, int[] values, Chronology chronology)",
    "methodName" : "Partial",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2325() throws Throwable {\n    DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[8];\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();\n    dateTimeFieldTypeArray0[0] = dateTimeFieldType0;\n    DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.dayOfYear();\n    dateTimeFieldTypeArray0[1] = dateTimeFieldType1;\n    dateTimeFieldTypeArray0[2] = dateTimeFieldTypeArray0[0];\n    dateTimeFieldTypeArray0[3] = dateTimeFieldType0;\n    dateTimeFieldTypeArray0[4] = dateTimeFieldTypeArray0[2];\n    dateTimeFieldTypeArray0[5] = dateTimeFieldTypeArray0[2];\n    dateTimeFieldTypeArray0[6] = dateTimeFieldType0;\n    dateTimeFieldTypeArray0[7] = dateTimeFieldTypeArray0[4];\n    int[] intArray0 = new int[8];\n    FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;\n    IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_INDIAN;\n    IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) fixedDateTimeZone0, islamicChronology_LeapYearPatternType0);\n    Partial partial0 = null;\n    partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, islamicChronology0);\n}",
    "testName" : "test2325"
  },
  "test3436" : {
    "methodSignature" : "public Partial withField(DateTimeFieldType fieldType, int value)",
    "methodName" : "withField",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3436() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();\n    Partial partial0 = new Partial(dateTimeFieldType0, 0);\n    partial0.withField(dateTimeFieldType0, (-3596));\n}",
    "testName" : "test3436"
  },
  "test4447" : {
    "methodSignature" : "public boolean isMatch(ReadablePartial partial)",
    "methodName" : "isMatch",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4447() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();\n    Partial partial0 = new Partial(dateTimeFieldType0, 91);\n    LocalDate localDate0 = new LocalDate();\n    boolean boolean0 = partial0.isMatch((ReadablePartial) localDate0);\n}",
    "testName" : "test4447"
  },
  "test2022" : {
    "methodSignature" : "public Partial(DateTimeFieldType[] types, int[] values, Chronology chronology)",
    "methodName" : "Partial",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2022() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();\n    DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[5];\n    DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.dayOfWeek();\n    dateTimeFieldTypeArray0[0] = dateTimeFieldType1;\n    dateTimeFieldTypeArray0[1] = dateTimeFieldType0;\n    dateTimeFieldTypeArray0[2] = dateTimeFieldType0;\n    dateTimeFieldTypeArray0[3] = dateTimeFieldType0;\n    dateTimeFieldTypeArray0[4] = dateTimeFieldType0;\n    int[] intArray0 = new int[5];\n    CopticChronology copticChronology0 = CopticChronology.getInstance();\n    Partial partial0 = null;\n    partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, copticChronology0);\n}",
    "testName" : "test2022"
  },
  "test3133" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3133() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();\n    Partial partial0 = new Partial(dateTimeFieldType0, 8);\n    DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.year();\n    Partial partial1 = partial0.with(dateTimeFieldType1, 8);\n    partial1.size();\n}",
    "testName" : "test3133"
  },
  "test4346" : {
    "methodSignature" : "public boolean isMatch(ReadablePartial partial)",
    "methodName" : "isMatch",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4346() throws Throwable {\n    Partial partial0 = new Partial();\n    partial0.isMatch((ReadablePartial) null);\n}",
    "testName" : "test4346"
  },
  "test2123" : {
    "methodSignature" : "public Partial with(DateTimeFieldType fieldType, int value)",
    "methodName" : "with",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2123() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();\n    DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.weekyear();\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();\n    DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[3];\n    dateTimeFieldTypeArray0[0] = dateTimeFieldType1;\n    dateTimeFieldTypeArray0[1] = dateTimeFieldType0;\n    dateTimeFieldTypeArray0[2] = dateTimeFieldType1;\n    int[] intArray0 = new int[4];\n    Partial partial0 = new Partial(buddhistChronology0, dateTimeFieldTypeArray0, intArray0);\n    DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.halfdayOfDay();\n    partial0.with(dateTimeFieldType2, 1);\n}",
    "testName" : "test2123"
  },
  "test3234" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3234() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();\n    Partial partial0 = new Partial(dateTimeFieldType0, 0);\n    Partial partial1 = partial0.with(dateTimeFieldType0, 37);\n    partial1.size();\n}",
    "testName" : "test3234"
  },
  "test4245" : {
    "methodSignature" : "public boolean isMatch(ReadablePartial partial)",
    "methodName" : "isMatch",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4245() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();\n    Partial partial0 = new Partial(dateTimeFieldType0, 15);\n    boolean boolean0 = partial0.isMatch((ReadablePartial) partial0);\n}",
    "testName" : "test4245"
  },
  "test011" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011() throws Throwable {\n    Partial partial0 = new Partial();\n    partial0.size();\n}",
    "testName" : "test011"
  },
  "test1517" : {
    "methodSignature" : "public Partial(DateTimeFieldType[] types, int[] values, Chronology chronology)",
    "methodName" : "Partial",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1517() throws Throwable {\n    DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[1];\n    JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();\n    LenientChronology lenientChronology0 = LenientChronology.getInstance(julianChronology0);\n    Partial partial0 = null;\n    partial0 = new Partial(dateTimeFieldTypeArray0, (int[]) null, lenientChronology0);\n}",
    "testName" : "test1517"
  },
  "test012" : {
    "methodSignature" : "public Partial plus(ReadablePeriod period)",
    "methodName" : "plus",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test012() throws Throwable {\n    Partial partial0 = new Partial();\n    Minutes minutes0 = Minutes.minutes(20);\n    Weeks weeks0 = minutes0.toStandardWeeks();\n    Partial partial1 = partial0.plus(weeks0);\n}",
    "testName" : "test012"
  },
  "test2628" : {
    "methodSignature" : "public Partial withChronologyRetainFields(Chronology newChronology)",
    "methodName" : "withChronologyRetainFields",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2628() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();\n    Partial partial0 = new Partial(dateTimeFieldType0, 0);\n    ISOChronology iSOChronology0 = ISOChronology.getInstance();\n    Partial partial1 = partial0.withChronologyRetainFields(iSOChronology0);\n}",
    "testName" : "test2628"
  },
  "test3739" : {
    "methodSignature" : "public Partial withFieldAddWrapped(DurationFieldType fieldType, int amount)",
    "methodName" : "withFieldAddWrapped",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3739() throws Throwable {\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);\n    JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);\n    DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();\n    dateTimeFieldTypeArray0[0] = dateTimeFieldType0;\n    DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.minuteOfHour();\n    int[] intArray0 = new int[9];\n    DurationFieldType durationFieldType0 = dateTimeFieldType1.getRangeDurationType();\n    Partial partial0 = new Partial(julianChronology0, dateTimeFieldTypeArray0, intArray0);\n    Partial partial1 = partial0.withFieldAddWrapped(durationFieldType0, 0);\n}",
    "testName" : "test3739"
  },
  "test1618" : {
    "methodSignature" : "public Partial(DateTimeFieldType[] types, int[] values, Chronology chronology)",
    "methodName" : "Partial",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1618() throws Throwable {\n    DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[1];\n    int[] intArray0 = new int[0];\n    DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(35);\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);\n    Partial partial0 = null;\n    partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, ethiopicChronology0);\n}",
    "testName" : "test1618"
  },
  "test2729" : {
    "methodSignature" : "public Partial with(DateTimeFieldType fieldType, int value)",
    "methodName" : "with",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2729() throws Throwable {\n    Partial partial0 = new Partial();\n    partial0.with((DateTimeFieldType) null, 256);\n}",
    "testName" : "test2729"
  },
  "test1315" : {
    "methodSignature" : "public Partial(DateTimeFieldType type, int value)",
    "methodName" : "Partial",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1315() throws Throwable {\n    Partial partial0 = null;\n    partial0 = new Partial((DateTimeFieldType) null, (-101));\n}",
    "testName" : "test1315"
  },
  "test2426" : {
    "methodSignature" : "public Partial(ReadablePartial partial)",
    "methodName" : "Partial",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2426() throws Throwable {\n    Partial partial0 = null;\n    partial0 = new Partial((ReadablePartial) null);\n}",
    "testName" : "test2426"
  },
  "test3537" : {
    "methodSignature" : "public Partial withFieldAdded(DurationFieldType fieldType, int amount)",
    "methodName" : "withFieldAdded",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3537() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();\n    DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[5];\n    dateTimeFieldTypeArray0[0] = dateTimeFieldType0;\n    int[] intArray0 = new int[0];\n    Partial partial0 = new Partial((Chronology) null, dateTimeFieldTypeArray0, intArray0);\n    DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();\n    partial0.withFieldAdded(durationFieldType0, 333);\n}",
    "testName" : "test3537"
  },
  "test1416" : {
    "methodSignature" : "public Partial(DateTimeFieldType[] types, int[] values)",
    "methodName" : "Partial",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1416() throws Throwable {\n    int[] intArray0 = new int[0];\n    Partial partial0 = null;\n    partial0 = new Partial((DateTimeFieldType[]) null, intArray0);\n}",
    "testName" : "test1416"
  },
  "test2527" : {
    "methodSignature" : "public Partial withChronologyRetainFields(Chronology newChronology)",
    "methodName" : "withChronologyRetainFields",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2527() throws Throwable {\n    Partial partial0 = new Partial();\n    GJChronology gJChronology0 = GJChronology.getInstance();\n    Partial partial1 = partial0.withChronologyRetainFields(gJChronology0);\n}",
    "testName" : "test2527"
  },
  "test3638" : {
    "methodSignature" : "public Partial withFieldAdded(DurationFieldType fieldType, int amount)",
    "methodName" : "withFieldAdded",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3638() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();\n    Partial partial0 = new Partial(dateTimeFieldType0, 0);\n    DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();\n    Partial partial1 = partial0.withFieldAdded(durationFieldType0, 0);\n}",
    "testName" : "test3638"
  },
  "test4649" : {
    "methodSignature" : "public String toString(String pattern)",
    "methodName" : "toString",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4649() throws Throwable {\n    Partial partial0 = new Partial();\n    String string0 = partial0.toString((String) null);\n}",
    "testName" : "test4649"
  },
  "test024" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test024() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();\n    Partial partial0 = new Partial(dateTimeFieldType0, 23);\n    Partial partial1 = partial0.without(dateTimeFieldType0);\n    partial1.size();\n}",
    "testName" : "test024"
  },
  "test046" : {
    "methodSignature" : "public Partial minus(ReadablePeriod period)",
    "methodName" : "minus",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test046() throws Throwable {\n    Partial partial0 = new Partial();\n    Partial partial1 = partial0.minus((ReadablePeriod) null);\n}",
    "testName" : "test046"
  },
  "test4144" : {
    "methodSignature" : "public boolean isMatch(ReadableInstant instant)",
    "methodName" : "isMatch",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4144() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();\n    Partial partial0 = new Partial(dateTimeFieldType0, 8);\n    Instant instant0 = new Instant();\n    boolean boolean0 = partial0.isMatch((ReadableInstant) instant0);\n}",
    "testName" : "test4144"
  },
  "test3032" : {
    "methodSignature" : "public Partial with(DateTimeFieldType fieldType, int value)",
    "methodName" : "with",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3032() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();\n    DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.dayOfMonth();\n    GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (-1L), 2);\n    DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[4];\n    dateTimeFieldTypeArray0[0] = dateTimeFieldType0;\n    int[] intArray0 = new int[2];\n    Partial partial0 = new Partial(gJChronology0, dateTimeFieldTypeArray0, intArray0);\n    partial0.with(dateTimeFieldType1, (-460));\n}",
    "testName" : "test3032"
  },
  "test4043" : {
    "methodSignature" : "public boolean isMatch(ReadableInstant instant)",
    "methodName" : "isMatch",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4043() throws Throwable {\n    Instant instant0 = new Instant();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();\n    Partial partial0 = new Partial(dateTimeFieldType0, 8, (Chronology) null);\n    boolean boolean0 = partial0.isMatch((ReadableInstant) instant0);\n}",
    "testName" : "test4043"
  },
  "test5154" : {
    "methodSignature" : "public String toString(String pattern, Locale locale)",
    "methodName" : "toString",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5154() throws Throwable {\n    Partial partial0 = new Partial();\n    Locale locale0 = Locale.CANADA_FRENCH;\n    partial0.toString(\"A0P\", locale0);\n}",
    "testName" : "test5154"
  },
  "test5053" : {
    "methodSignature" : "public String toString(String pattern)",
    "methodName" : "toString",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5053() throws Throwable {\n    Partial partial0 = new Partial();\n    partial0.toString(\"Vh|w2kb2{.\\\"W9\");\n}",
    "testName" : "test5053"
  },
  "test2830" : {
    "methodSignature" : "public Partial with(DateTimeFieldType fieldType, int value)",
    "methodName" : "with",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2830() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();\n    Partial partial0 = new Partial(dateTimeFieldType0, 0);\n    Partial partial1 = partial0.with(dateTimeFieldType0, 0);\n}",
    "testName" : "test2830"
  },
  "test3941" : {
    "methodSignature" : "public boolean equals(Object partial)",
    "methodName" : "equals",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3941() throws Throwable {\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();\n    LocalDateTime localDateTime0 = new LocalDateTime((Chronology) ethiopicChronology0);\n    Partial partial0 = new Partial(localDateTime0);\n    Days days0 = Days.SEVEN;\n    Partial partial1 = partial0.withPeriodAdded(days0, 1);\n    partial1.equals((Object) partial0);\n}",
    "testName" : "test3941"
  },
  "test2931" : {
    "methodSignature" : "public Partial with(DateTimeFieldType fieldType, int value)",
    "methodName" : "with",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2931() throws Throwable {\n    Partial partial0 = new Partial();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();\n    partial0.with(dateTimeFieldType0, 1375);\n}",
    "testName" : "test2931"
  },
  "test4952" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4952() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();\n    Partial partial0 = new Partial(dateTimeFieldType0, 0);\n    Locale locale0 = Locale.UK;\n    partial0.toString((String) null, locale0);\n    String string0 = partial0.toString();\n}",
    "testName" : "test4952"
  },
  "test1820" : {
    "methodSignature" : "public Partial with(DateTimeFieldType fieldType, int value)",
    "methodName" : "with",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1820() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();\n    Partial partial0 = new Partial(dateTimeFieldType0, 23);\n    DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.weekyearOfCentury();\n    partial0.with(dateTimeFieldType1, 23);\n}",
    "testName" : "test1820"
  },
  "test3942" : {
    "methodSignature" : "public Partial withPeriodAdded(ReadablePeriod period, int scalar)",
    "methodName" : "withPeriodAdded",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3942() throws Throwable {\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();\n    LocalDateTime localDateTime0 = new LocalDateTime((Chronology) ethiopicChronology0);\n    Partial partial0 = new Partial(localDateTime0);\n    Days days0 = Days.SEVEN;\n    Partial partial1 = partial0.withPeriodAdded(days0, 1);\n}",
    "testName" : "test3942"
  },
  "test4851" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4851() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();\n    Partial partial0 = new Partial(dateTimeFieldType0, 1647);\n    String string0 = partial0.toString();\n}",
    "testName" : "test4851"
  },
  "test3840" : {
    "methodSignature" : "public Partial withPeriodAdded(ReadablePeriod period, int scalar)",
    "methodName" : "withPeriodAdded",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3840() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();\n    Hours hours0 = Hours.FIVE;\n    Partial partial0 = new Partial(dateTimeFieldType0, 0);\n    Partial partial1 = partial0.withPeriodAdded(hours0, 0);\n}",
    "testName" : "test3840"
  },
  "test4750" : {
    "methodSignature" : "public String toString(String pattern, Locale locale)",
    "methodName" : "toString",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4750() throws Throwable {\n    EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();\n    LocalDateTime localDateTime0 = new LocalDateTime((Chronology) ethiopicChronology0);\n    Partial partial0 = new Partial(localDateTime0);\n    Locale locale0 = Locale.CANADA_FRENCH;\n    String string0 = partial0.toString((String) null, locale0);\n}",
    "testName" : "test4750"
  },
  "test000" : {
    "methodSignature" : "public Partial(DateTimeFieldType[] types, int[] values)",
    "methodName" : "Partial",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[1];\n    int[] intArray0 = new int[1];\n    Partial partial0 = null;\n    partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);\n}",
    "testName" : "test000"
  },
  "test1921" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1921() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();\n    Partial partial0 = new Partial(dateTimeFieldType0, 23);\n    DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.yearOfEra();\n    Partial partial1 = partial0.with(dateTimeFieldType1, 23);\n    partial1.size();\n}",
    "testName" : "test1921"
  },
  "test1719" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1719() throws Throwable {\n    ISOChronology iSOChronology0 = ISOChronology.getInstance();\n    DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[0];\n    int[] intArray0 = new int[0];\n    Partial partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, iSOChronology0);\n    partial0.size();\n}",
    "testName" : "test1719"
  },
  "test013" : {
    "methodSignature" : "public boolean equals(Object partial)",
    "methodName" : "equals",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test013() throws Throwable {\n    Partial partial0 = new Partial();\n    Minutes minutes0 = Minutes.minutes(20);\n    Weeks weeks0 = minutes0.toStandardWeeks();\n    Partial partial1 = partial0.plus(weeks0);\n    partial1.equals((Object) partial0);\n}",
    "testName" : "test013"
  },
  "test035" : {
    "methodSignature" : "public Partial withField(DateTimeFieldType fieldType, int value)",
    "methodName" : "withField",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test035() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();\n    Partial partial0 = new Partial(dateTimeFieldType0, 0);\n    Partial partial1 = partial0.withField(dateTimeFieldType0, 0);\n}",
    "testName" : "test035"
  },
  "test057" : {
    "methodSignature" : "public DateTimeFieldType[] getFieldTypes()",
    "methodName" : "getFieldTypes",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test057() throws Throwable {\n    Partial partial0 = new Partial();\n    DateTimeFieldType[] dateTimeFieldTypeArray0 = partial0.getFieldTypes();\n}",
    "testName" : "test057"
  }
}