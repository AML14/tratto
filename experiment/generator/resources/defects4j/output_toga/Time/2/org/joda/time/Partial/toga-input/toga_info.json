{
  "test1212" : {
    "methodSignature" : "public Partial withFieldAddWrapped(DurationFieldType fieldType, int amount)",
    "methodName" : "withFieldAddWrapped",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1212() throws Throwable {\n    Partial partial0 = new Partial();\n    DurationFieldType durationFieldType0 = DurationFieldType.HALFDAYS_TYPE;\n    DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[0];\n    int[] intArray0 = new int[0];\n    Partial partial1 = new Partial(dateTimeFieldTypeArray0, intArray0);\n    DurationFieldType durationFieldType1 = DurationFieldType.hours();\n    partial0.withFieldAddWrapped(durationFieldType1, 2416);\n}",
    "testName" : "test1212"
  },
  "test4646" : {
    "methodSignature" : "public Partial(DateTimeFieldType type, int value)",
    "methodName" : "Partial",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4646() throws Throwable {\n    DurationFieldType.months();\n    Partial partial0 = new Partial((DateTimeFieldType) null, 168);\n}",
    "testName" : "test4646"
  },
  "test3434" : {
    "methodSignature" : "public Partial(ReadablePartial partial)",
    "methodName" : "Partial",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3434() throws Throwable {\n    Days days0 = Days.SIX;\n    Partial partial0 = new Partial((ReadablePartial) null);\n}",
    "testName" : "test3434"
  },
  "test5656" : {
    "methodSignature" : "public static DurationFieldType hours()",
    "methodName" : "hours",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5656() throws Throwable {\n    DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];\n    dateTimeFieldTypeArray0[1] = dateTimeFieldTypeArray0[0];\n    int[] intArray0 = new int[2];\n    intArray0[1] = 0;\n    Partial partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);\n    DurationFieldType.hours();\n}",
    "testName" : "test5656"
  },
  "test1010" : {
    "methodSignature" : "public Partial(DateTimeFieldType type, int value)",
    "methodName" : "Partial",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1010() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();\n    Partial partial0 = new Partial(dateTimeFieldType0, 0);\n}",
    "testName" : "test1010"
  },
  "test3232" : {
    "methodSignature" : "public Partial without(DateTimeFieldType fieldType)",
    "methodName" : "without",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3232() throws Throwable {\n    Partial partial0 = new Partial();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();\n    partial0.without(dateTimeFieldType0);\n}",
    "testName" : "test3232"
  },
  "test6666" : {
    "methodSignature" : "public Partial(DateTimeFieldType[] types, int[] values, Chronology chronology)",
    "methodName" : "Partial",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6666() throws Throwable {\n    long long0 = 1017L;\n    System.setCurrentTimeMillis(1017L);\n    DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[3];\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();\n    dateTimeFieldTypeArray0[0] = dateTimeFieldType0;\n    DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.year();\n    dateTimeFieldTypeArray0[1] = dateTimeFieldType1;\n    DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.dayOfMonth();\n    dateTimeFieldTypeArray0[2] = dateTimeFieldType2;\n    int[] intArray0 = new int[3];\n    int int0 = 32;\n    int int1 = (-1892);\n    intArray0[1] = (-1892);\n    int int2 = 1552;\n    intArray0[2] = 1552;\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();\n    Partial partial0 = null;\n    partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, buddhistChronology0);\n}",
    "testName" : "test6666"
  },
  "test5454" : {
    "methodSignature" : "public Partial with(DateTimeFieldType fieldType, int value)",
    "methodName" : "with",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5454() throws Throwable {\n    LocalDateTime localDateTime0 = new LocalDateTime();\n    Partial partial0 = new Partial(localDateTime0);\n    MutablePeriod mutablePeriod0 = new MutablePeriod(2629800000L, 2629800000L);\n    Partial partial1 = new Partial();\n    DateTimeFieldType.hourOfDay();\n    Partial partial2 = new Partial(partial0);\n    DateTimeFieldType.hourOfDay();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();\n    partial2.with(dateTimeFieldType0, 529);\n}",
    "testName" : "test5454"
  },
  "test2222" : {
    "methodSignature" : "public Partial withChronologyRetainFields(Chronology newChronology)",
    "methodName" : "withChronologyRetainFields",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2222() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();\n    Partial partial0 = new Partial(dateTimeFieldType0, 0);\n    ISOChronology iSOChronology0 = ISOChronology.getInstance();\n    partial0.withChronologyRetainFields(iSOChronology0);\n}",
    "testName" : "test2222"
  },
  "test033" : {
    "methodSignature" : "public static DateTimeFieldType year()",
    "methodName" : "year",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033() throws Throwable {\n    LocalDateTime localDateTime0 = new LocalDateTime();\n    Partial partial0 = new Partial(localDateTime0);\n    Partial partial1 = new Partial(partial0);\n    DateTimeFieldType.year();\n}",
    "testName" : "test033"
  },
  "test1616" : {
    "methodSignature" : "public String toString(String pattern, Locale locale)",
    "methodName" : "toString",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1616() throws Throwable {\n    Partial partial0 = new Partial();\n    Locale locale0 = new Locale(\"Types array must not contain null: index \");\n    partial0.toString(\"Types array must not contain null: index \", locale0);\n}",
    "testName" : "test1616"
  },
  "test3838" : {
    "methodSignature" : "public Partial with(DateTimeFieldType fieldType, int value)",
    "methodName" : "with",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3838() throws Throwable {\n    LocalDateTime localDateTime0 = new LocalDateTime();\n    Partial partial0 = new Partial(localDateTime0);\n    MutableDateTime mutableDateTime0 = new MutableDateTime(1272L);\n    partial0.isMatch((ReadableInstant) mutableDateTime0);\n    Months months0 = Months.FOUR;\n    months0.minus(3);\n    Partial partial1 = partial0.withPeriodAdded(months0, 529);\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();\n    partial1.with(dateTimeFieldType0, 529);\n}",
    "testName" : "test3838"
  },
  "test2828" : {
    "methodSignature" : "public boolean isMatch(ReadableInstant instant)",
    "methodName" : "isMatch",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2828() throws Throwable {\n    ZoneId zoneId0 = ZoneId.systemDefault();\n    ZonedDateTime zonedDateTime0 = MockZonedDateTime.now(zoneId0);\n    GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);\n    LocalDate localDate0 = LocalDate.fromCalendarFields(gregorianCalendar0);\n    Partial partial0 = new Partial(localDate0);\n    partial0.isMatch((ReadableInstant) null);\n}",
    "testName" : "test2828"
  },
  "test1414" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1414() throws Throwable {\n    Partial partial0 = new Partial();\n    Hours hours0 = Hours.THREE;\n    hours0.toString();\n    Partial partial1 = partial0.plus(hours0);\n    partial1.toString();\n}",
    "testName" : "test1414"
  },
  "test4848" : {
    "methodSignature" : "public Partial with(DateTimeFieldType fieldType, int value)",
    "methodName" : "with",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4848() throws Throwable {\n    Partial partial0 = new Partial();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();\n    partial0.with(dateTimeFieldType0, 58);\n}",
    "testName" : "test4848"
  },
  "test5858" : {
    "methodSignature" : "public Partial(DateTimeFieldType[] types, int[] values)",
    "methodName" : "Partial",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5858() throws Throwable {\n    Partial partial0 = new Partial();\n    DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();\n    dateTimeFieldTypeArray0[0] = dateTimeFieldType0;\n    DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.secondOfDay();\n    dateTimeFieldTypeArray0[1] = dateTimeFieldType1;\n    int[] intArray0 = new int[2];\n    int int0 = 0;\n    intArray0[1] = 0;\n    Partial partial1 = null;\n    partial1 = new Partial(dateTimeFieldTypeArray0, intArray0);\n}",
    "testName" : "test5858"
  },
  "test6060" : {
    "methodSignature" : "public Partial withFieldAdded(DurationFieldType fieldType, int amount)",
    "methodName" : "withFieldAdded",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6060() throws Throwable {\n    LocalDateTime localDateTime0 = new LocalDateTime();\n    Partial partial0 = new Partial(localDateTime0);\n    DateTimeFieldType.hourOfDay();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();\n    DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();\n    partial0.withFieldAdded(durationFieldType0, (-1527));\n}",
    "testName" : "test6060"
  },
  "test4242" : {
    "methodSignature" : "public Partial(DateTimeFieldType[] types, int[] values, Chronology chronology)",
    "methodName" : "Partial",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4242() throws Throwable {\n    DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[0];\n    Partial partial0 = new Partial(dateTimeFieldTypeArray0, (int[]) null, (Chronology) null);\n}",
    "testName" : "test4242"
  },
  "test3030" : {
    "methodSignature" : "public Partial withPeriodAdded(ReadablePeriod period, int scalar)",
    "methodName" : "withPeriodAdded",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3030() throws Throwable {\n    Partial partial0 = new Partial();\n    partial0.withPeriodAdded((ReadablePeriod) null, 23034375);\n}",
    "testName" : "test3030"
  },
  "test5252" : {
    "methodSignature" : "public static DurationFieldType hours()",
    "methodName" : "hours",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5252() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();\n    DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];\n    dateTimeFieldTypeArray0[0] = dateTimeFieldType0;\n    dateTimeFieldTypeArray0[1] = dateTimeFieldType0;\n    int[] intArray0 = new int[2];\n    intArray0[1] = 0;\n    Partial partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);\n    DurationFieldType.hours();\n}",
    "testName" : "test5252"
  },
  "test2020" : {
    "methodSignature" : "public Partial without(DateTimeFieldType fieldType)",
    "methodName" : "without",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2020() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();\n    Partial partial0 = new Partial(dateTimeFieldType0, 0);\n    Partial partial1 = new Partial();\n    partial0.without(dateTimeFieldType0);\n}",
    "testName" : "test2020"
  },
  "test4040" : {
    "methodSignature" : "public Partial with(DateTimeFieldType fieldType, int value)",
    "methodName" : "with",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4040() throws Throwable {\n    LocalDateTime localDateTime0 = new LocalDateTime();\n    Partial partial0 = new Partial(localDateTime0);\n    DateTimeFieldType.dayOfYear();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();\n    partial0.with(dateTimeFieldType0, 1);\n}",
    "testName" : "test4040"
  },
  "test6262" : {
    "methodSignature" : "public Partial with(DateTimeFieldType fieldType, int value)",
    "methodName" : "with",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6262() throws Throwable {\n    LocalDateTime localDateTime0 = new LocalDateTime();\n    Partial partial0 = new Partial(localDateTime0);\n    MutablePeriod mutablePeriod0 = new MutablePeriod(2629800000L, 2629800000L);\n    partial0.isEqual(partial0);\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();\n    DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();\n    partial0.withFieldAdded(durationFieldType0, 0);\n    partial0.withFieldAddWrapped(durationFieldType0, (-454));\n    partial0.with(dateTimeFieldType0, (-1422));\n}",
    "testName" : "test6262"
  },
  "test5050" : {
    "methodSignature" : "public boolean isMatch(ReadablePartial partial)",
    "methodName" : "isMatch",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5050() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();\n    Partial partial0 = new Partial(dateTimeFieldType0, 0);\n    LocalDateTime localDateTime0 = LocalDateTime.now();\n    partial0.isMatch((ReadablePartial) localDateTime0);\n}",
    "testName" : "test5050"
  },
  "test1818" : {
    "methodSignature" : "public boolean isMatch(ReadablePartial partial)",
    "methodName" : "isMatch",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1818() throws Throwable {\n    Partial partial0 = new Partial();\n    LocalDateTime localDateTime0 = LocalDateTime.now();\n    partial0.isMatch((ReadablePartial) localDateTime0);\n}",
    "testName" : "test1818"
  },
  "test1313" : {
    "methodSignature" : "public Partial(DateTimeFieldType[] types, int[] values)",
    "methodName" : "Partial",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1313() throws Throwable {\n    int int0 = 0;\n    DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];\n    int[] intArray0 = new int[0];\n    Partial partial0 = null;\n    partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);\n}",
    "testName" : "test1313"
  },
  "test4545" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4545() throws Throwable {\n    LocalDateTime localDateTime0 = new LocalDateTime();\n    MutablePeriod mutablePeriod0 = new MutablePeriod(2629800000L, 2629800000L);\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();\n    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();\n    dateTimeFieldType0.isSupported(buddhistChronology0);\n    Partial partial0 = new Partial(dateTimeFieldType0, 20);\n    Partial partial1 = partial0.plus(mutablePeriod0);\n    partial1.getFormatter();\n    partial1.toString();\n}",
    "testName" : "test4545"
  },
  "test3535" : {
    "methodSignature" : "public Partial with(DateTimeFieldType fieldType, int value)",
    "methodName" : "with",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3535() throws Throwable {\n    Months months0 = Months.FOUR;\n    Partial partial0 = new Partial();\n    partial0.with((DateTimeFieldType) null, 2351);\n}",
    "testName" : "test3535"
  },
  "test5555" : {
    "methodSignature" : "public Partial(DateTimeFieldType[] types, int[] values)",
    "methodName" : "Partial",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5555() throws Throwable {\n    Days days0 = Days.MAX_VALUE;\n    DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[4];\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();\n    dateTimeFieldTypeArray0[0] = dateTimeFieldType0;\n    DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.secondOfMinute();\n    dateTimeFieldTypeArray0[1] = dateTimeFieldType1;\n    DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.centuryOfEra();\n    dateTimeFieldTypeArray0[2] = dateTimeFieldType2;\n    DateTimeFieldType dateTimeFieldType3 = DateTimeFieldType.yearOfCentury();\n    dateTimeFieldTypeArray0[3] = dateTimeFieldType3;\n    int[] intArray0 = new int[4];\n    Partial partial0 = null;\n    partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);\n}",
    "testName" : "test5555"
  },
  "test1111" : {
    "methodSignature" : "public Partial with(DateTimeFieldType fieldType, int value)",
    "methodName" : "with",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1111() throws Throwable {\n    Partial partial0 = new Partial();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();\n    partial0.with(dateTimeFieldType0, 1792);\n}",
    "testName" : "test1111"
  },
  "test6565" : {
    "methodSignature" : "public Partial with(DateTimeFieldType fieldType, int value)",
    "methodName" : "with",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6565() throws Throwable {\n    LocalDateTime localDateTime0 = new LocalDateTime();\n    Partial partial0 = new Partial(localDateTime0);\n    DateTimeFieldType.dayOfYear();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();\n    partial0.with(dateTimeFieldType0, 2307);\n}",
    "testName" : "test6565"
  },
  "test011" : {
    "methodSignature" : "public Partial minus(ReadablePeriod period)",
    "methodName" : "minus",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011() throws Throwable {\n    Partial partial0 = new Partial();\n    Days days0 = Days.MAX_VALUE;\n    partial0.minus(days0);\n}",
    "testName" : "test011"
  },
  "test055" : {
    "methodSignature" : "public boolean isSupported(DateTimeFieldType type)",
    "methodName" : "isSupported",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();\n    LocalDateTime localDateTime0 = LocalDateTime.now();\n    Partial partial0 = new Partial(localDateTime0);\n    partial0.isSupported(dateTimeFieldType0);\n}",
    "testName" : "test055"
  },
  "test099" : {
    "methodSignature" : "public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException",
    "methodName" : "setCurrentMillisFixed",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099() throws Throwable {\n    long long0 = 0L;\n    LocalTime localTime0 = new LocalTime(0L);\n    Partial partial0 = new Partial(localTime0);\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();\n    Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);\n    int int0 = 5;\n    partial_Property0.setCopy(5);\n    Locale locale0 = Locale.SIMPLIFIED_CHINESE;\n    partial_Property0.setCopy(\"\", locale0);\n    DateTimeUtils.setCurrentMillisFixed(long0);\n}",
    "testName" : "test099"
  },
  "test2727" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2727() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();\n    Partial partial0 = new Partial(dateTimeFieldType0, 0);\n    DurationFieldType.months();\n    partial0.toString();\n}",
    "testName" : "test2727"
  },
  "test1717" : {
    "methodSignature" : "public Partial with(DateTimeFieldType fieldType, int value)",
    "methodName" : "with",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1717() throws Throwable {\n    Partial partial0 = new Partial();\n    partial0.getFieldTypes();\n    ISOChronology.getInstance();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();\n    partial0.with(dateTimeFieldType0, (-2135));\n}",
    "testName" : "test1717"
  },
  "test4949" : {
    "methodSignature" : "public Partial withPeriodAdded(ReadablePeriod period, int scalar)",
    "methodName" : "withPeriodAdded",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4949() throws Throwable {\n    Partial partial0 = new Partial();\n    Days days0 = Days.MIN_VALUE;\n    partial0.withPeriodAdded(days0, 0);\n}",
    "testName" : "test4949"
  },
  "test3939" : {
    "methodSignature" : "public Partial with(DateTimeFieldType fieldType, int value)",
    "methodName" : "with",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3939() throws Throwable {\n    LocalDateTime localDateTime0 = new LocalDateTime();\n    Partial partial0 = new Partial(localDateTime0);\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();\n    partial0.with(dateTimeFieldType0, 1509);\n}",
    "testName" : "test3939"
  },
  "test5959" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5959() throws Throwable {\n    MutablePeriod mutablePeriod0 = new MutablePeriod(0L, 2629800000L);\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();\n    Partial partial0 = new Partial(dateTimeFieldType0, 1);\n    partial0.plus(mutablePeriod0);\n    DateTimeFieldType.hourOfDay();\n    Partial partial1 = new Partial(partial0);\n    DateTimeZone.getDefault();\n    DateTimeFieldType.hourOfDay();\n    DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.dayOfYear();\n    Partial partial2 = partial0.with(dateTimeFieldType1, 58);\n    Hours hours0 = Hours.TWO;\n    partial2.toString();\n}",
    "testName" : "test5959"
  },
  "test2525" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2525() throws Throwable {\n    LocalDateTime localDateTime0 = new LocalDateTime();\n    Partial partial0 = new Partial(localDateTime0);\n    DateTimeFieldType.dayOfYear();\n    partial0.toString();\n}",
    "testName" : "test2525"
  },
  "test1515" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1515() throws Throwable {\n    Partial partial0 = new Partial();\n    partial0.toString();\n}",
    "testName" : "test1515"
  },
  "test3737" : {
    "methodSignature" : "public boolean isMatch(ReadablePartial partial)",
    "methodName" : "isMatch",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3737() throws Throwable {\n    ZoneId zoneId0 = ZoneId.systemDefault();\n    ZonedDateTime zonedDateTime0 = MockZonedDateTime.now(zoneId0);\n    GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);\n    LocalDate localDate0 = LocalDate.fromCalendarFields(gregorianCalendar0);\n    localDate0.getDayOfYear();\n    Locale locale0 = Locale.GERMAN;\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();\n    Partial partial0 = new Partial(dateTimeFieldType0, 45);\n    Partial.Property partial_Property0 = new Partial.Property(partial0, 1852);\n    partial_Property0.addWrapFieldToCopy(123);\n    partial0.isMatch((ReadablePartial) localDate0);\n}",
    "testName" : "test3737"
  },
  "test4141" : {
    "methodSignature" : "public Partial with(DateTimeFieldType fieldType, int value)",
    "methodName" : "with",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4141() throws Throwable {\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();\n    Partial partial0 = new Partial(dateTimeFieldType0, 0);\n    partial0.with(dateTimeFieldType0, 0);\n}",
    "testName" : "test4141"
  },
  "test6363" : {
    "methodSignature" : "public Partial with(DateTimeFieldType fieldType, int value)",
    "methodName" : "with",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6363() throws Throwable {\n    LocalDateTime localDateTime0 = new LocalDateTime();\n    Partial partial0 = new Partial(localDateTime0);\n    MutablePeriod mutablePeriod0 = new MutablePeriod(2629800000L, 2629800000L);\n    partial0.isEqual(partial0);\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();\n    DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();\n    int int0 = 20;\n    Partial partial1 = partial0.withFieldAddWrapped(durationFieldType0, 0);\n    DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.weekyearOfCentury();\n    partial0.with(dateTimeFieldType1, 20);\n    partial1.with(dateTimeFieldType1, int0);\n}",
    "testName" : "test6363"
  },
  "test3131" : {
    "methodSignature" : "public DateTimeFormatter getFormatter()",
    "methodName" : "getFormatter",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3131() throws Throwable {\n    ZoneId zoneId0 = ZoneId.systemDefault();\n    ZonedDateTime zonedDateTime0 = MockZonedDateTime.now(zoneId0);\n    GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);\n    LocalDate localDate0 = LocalDate.fromCalendarFields(gregorianCalendar0);\n    localDate0.getDayOfYear();\n    Partial partial0 = new Partial(localDate0);\n    partial0.getValues();\n    partial0.toString();\n    partial0.getFormatter();\n}",
    "testName" : "test3131"
  },
  "test5151" : {
    "methodSignature" : "public Partial with(DateTimeFieldType fieldType, int value)",
    "methodName" : "with",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5151() throws Throwable {\n    LocalDateTime localDateTime0 = new LocalDateTime();\n    Partial partial0 = new Partial(localDateTime0);\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();\n    partial0.with(dateTimeFieldType0, 529);\n}",
    "testName" : "test5151"
  },
  "test6161" : {
    "methodSignature" : "public static DateTimeFieldType weekyearOfCentury()",
    "methodName" : "weekyearOfCentury",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6161() throws Throwable {\n    LocalDateTime localDateTime0 = new LocalDateTime();\n    Partial partial0 = new Partial(localDateTime0);\n    MutablePeriod mutablePeriod0 = new MutablePeriod(2629800000L, 2629800000L);\n    partial0.isEqual(partial0);\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();\n    DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();\n    partial0.withFieldAddWrapped(durationFieldType0, (-454));\n    DateTimeFieldType.weekyearOfCentury();\n}",
    "testName" : "test6161"
  },
  "test000" : {
    "methodSignature" : "public Partial(ReadablePartial partial)",
    "methodName" : "Partial",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    Partial partial0 = new Partial();\n    Partial partial1 = new Partial(partial0);\n}",
    "testName" : "test000"
  },
  "test044" : {
    "methodSignature" : "public int[] getValues()",
    "methodName" : "getValues",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044() throws Throwable {\n    Partial partial0 = new Partial();\n    partial0.getValues();\n}",
    "testName" : "test044"
  },
  "test088" : {
    "methodSignature" : "public Property property(DateTimeFieldType type)",
    "methodName" : "property",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088() throws Throwable {\n    Partial partial0 = new Partial();\n    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();\n    partial0.property(dateTimeFieldType0);\n}",
    "testName" : "test088"
  },
  "test2929" : {
    "methodSignature" : "public boolean isMatch(ReadableInstant instant)",
    "methodName" : "isMatch",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2929() throws Throwable {\n    Partial partial0 = new Partial();\n    partial0.isMatch((ReadableInstant) null);\n}",
    "testName" : "test2929"
  },
  "test1919" : {
    "methodSignature" : "public boolean isMatch(ReadablePartial partial)",
    "methodName" : "isMatch",
    "className" : "org.joda.time.Partial",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1919() throws Throwable {\n    DateTimeFieldType.millisOfSecond();\n    LocalDateTime localDateTime0 = LocalDateTime.now();\n    Partial partial0 = new Partial(localDateTime0);\n    partial0.isMatch((ReadablePartial) localDateTime0);\n}",
    "testName" : "test1919"
  }
}