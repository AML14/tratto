project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    Partial partial0 = new Partial();
    Partial partial1 = new Partial(partial0);
}",0,
project,0,test011,"public void test011() throws Throwable {
    Partial partial0 = new Partial();
    Days days0 = Days.MAX_VALUE;
    partial0.minus(days0);
}",0,
project,0,test033,"public void test033() throws Throwable {
    LocalDateTime localDateTime0 = new LocalDateTime();
    Partial partial0 = new Partial(localDateTime0);
    Partial partial1 = new Partial(partial0);
    DateTimeFieldType.year();
}",0,
project,0,test044,"public void test044() throws Throwable {
    Partial partial0 = new Partial();
    partial0.getValues();
}",0,
project,0,test055,"public void test055() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
    LocalDateTime localDateTime0 = LocalDateTime.now();
    Partial partial0 = new Partial(localDateTime0);
    partial0.isSupported(dateTimeFieldType0);
}",0,
project,0,test088,"public void test088() throws Throwable {
    Partial partial0 = new Partial();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
    // Undeclared exception!
    try {
        partial0.property(dateTimeFieldType0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Field 'minuteOfHour' is not supported
        //
        verifyException(""org.joda.time.base.AbstractPartial"", e);
    }
}",0,
project,0,test099,"public void test099() throws Throwable {
    long long0 = 0L;
    LocalTime localTime0 = new LocalTime(0L);
    Partial partial0 = new Partial(localTime0);
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
    int int0 = 5;
    partial_Property0.setCopy(5);
    Locale locale0 = Locale.SIMPLIFIED_CHINESE;
    partial_Property0.setCopy("""", locale0);
    // Undeclared exception!
    try {
        DateTimeUtils.setCurrentMillisFixed(long0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Value \""\"" for hourOfDay is not supported
        //
        verifyException(""org.joda.time.field.BaseDateTimeField"", e);
    }
}",1,
project,0,test1010,"public void test1010() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
    Partial partial0 = new Partial(dateTimeFieldType0, 0);
}",0,
project,0,test1111,"public void test1111() throws Throwable {
    Partial partial0 = new Partial();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
    partial0.with(dateTimeFieldType0, 1792);
}",0,
project,0,test1212,"public void test1212() throws Throwable {
    Partial partial0 = new Partial();
    DurationFieldType durationFieldType0 = DurationFieldType.HALFDAYS_TYPE;
    DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[0];
    int[] intArray0 = new int[0];
    Partial partial1 = new Partial(dateTimeFieldTypeArray0, intArray0);
    DurationFieldType durationFieldType1 = DurationFieldType.hours();
    partial0.withFieldAddWrapped(durationFieldType1, 2416);
}",0,
project,0,test1313,"public void test1313() throws Throwable {
    int int0 = 0;
    DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
    int[] intArray0 = new int[0];
    Partial partial0 = null;
    try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Values array must be the same length as the types array
        //
        verifyException(""org.joda.time.Partial"", e);
    }
}",0,
project,0,test1414,"public void test1414() throws Throwable {
    Partial partial0 = new Partial();
    Hours hours0 = Hours.THREE;
    hours0.toString();
    Partial partial1 = partial0.plus(hours0);
    partial1.toString();
}",0,
project,0,test1515,"public void test1515() throws Throwable {
    Partial partial0 = new Partial();
    partial0.toString();
}",0,
project,0,test1616,"public void test1616() throws Throwable {
    Partial partial0 = new Partial();
    Locale locale0 = new Locale(""Types array must not contain null: index "");
    partial0.toString(""Types array must not contain null: index "", locale0);
}",0,
project,0,test1717,"public void test1717() throws Throwable {
    Partial partial0 = new Partial();
    partial0.getFieldTypes();
    ISOChronology.getInstance();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
    partial0.with(dateTimeFieldType0, (-2135));
}",0,
project,0,test1818,"public void test1818() throws Throwable {
    Partial partial0 = new Partial();
    LocalDateTime localDateTime0 = LocalDateTime.now();
    partial0.isMatch((ReadablePartial) localDateTime0);
}",0,
project,0,test1919,"public void test1919() throws Throwable {
    DateTimeFieldType.millisOfSecond();
    LocalDateTime localDateTime0 = LocalDateTime.now();
    Partial partial0 = new Partial(localDateTime0);
    partial0.isMatch((ReadablePartial) localDateTime0);
}",1,
project,0,test2020,"public void test2020() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
    Partial partial0 = new Partial(dateTimeFieldType0, 0);
    Partial partial1 = new Partial();
    partial0.without(dateTimeFieldType0);
}",0,
project,0,test2222,"public void test2222() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
    Partial partial0 = new Partial(dateTimeFieldType0, 0);
    ISOChronology iSOChronology0 = ISOChronology.getInstance();
    partial0.withChronologyRetainFields(iSOChronology0);
}",0,
project,0,test2525,"public void test2525() throws Throwable {
    LocalDateTime localDateTime0 = new LocalDateTime();
    Partial partial0 = new Partial(localDateTime0);
    DateTimeFieldType.dayOfYear();
    partial0.toString();
}",0,
project,0,test2727,"public void test2727() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
    Partial partial0 = new Partial(dateTimeFieldType0, 0);
    DurationFieldType.months();
    partial0.toString();
}",0,
project,0,test2828,"public void test2828() throws Throwable {
    ZoneId zoneId0 = ZoneId.systemDefault();
    ZonedDateTime zonedDateTime0 = MockZonedDateTime.now(zoneId0);
    GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
    LocalDate localDate0 = LocalDate.fromCalendarFields(gregorianCalendar0);
    Partial partial0 = new Partial(localDate0);
    partial0.isMatch((ReadableInstant) null);
}",0,
project,0,test2929,"public void test2929() throws Throwable {
    Partial partial0 = new Partial();
    partial0.isMatch((ReadableInstant) null);
}",0,
project,0,test3030,"public void test3030() throws Throwable {
    Partial partial0 = new Partial();
    partial0.withPeriodAdded((ReadablePeriod) null, 23034375);
}",0,
project,0,test3131,"public void test3131() throws Throwable {
    ZoneId zoneId0 = ZoneId.systemDefault();
    ZonedDateTime zonedDateTime0 = MockZonedDateTime.now(zoneId0);
    GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
    LocalDate localDate0 = LocalDate.fromCalendarFields(gregorianCalendar0);
    localDate0.getDayOfYear();
    Partial partial0 = new Partial(localDate0);
    partial0.getValues();
    partial0.toString();
    partial0.getFormatter();
}",0,
project,0,test3232,"public void test3232() throws Throwable {
    Partial partial0 = new Partial();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
    partial0.without(dateTimeFieldType0);
}",0,
project,0,test3434,"public void test3434() throws Throwable {
    Days days0 = Days.SIX;
    Partial partial0 = new Partial((ReadablePartial) null);
}",0,
project,0,test3535,"public void test3535() throws Throwable {
    Months months0 = Months.FOUR;
    Partial partial0 = new Partial();
    partial0.with((DateTimeFieldType) null, 2351);
}",0,
project,0,test3737,"public void test3737() throws Throwable {
    ZoneId zoneId0 = ZoneId.systemDefault();
    ZonedDateTime zonedDateTime0 = MockZonedDateTime.now(zoneId0);
    GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
    LocalDate localDate0 = LocalDate.fromCalendarFields(gregorianCalendar0);
    localDate0.getDayOfYear();
    Locale locale0 = Locale.GERMAN;
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
    Partial partial0 = new Partial(dateTimeFieldType0, 45);
    Partial.Property partial_Property0 = new Partial.Property(partial0, 1852);
    partial_Property0.addWrapFieldToCopy(123);
    partial0.isMatch((ReadablePartial) localDate0);
}",0,
project,0,test3838,"public void test3838() throws Throwable {
    LocalDateTime localDateTime0 = new LocalDateTime();
    Partial partial0 = new Partial(localDateTime0);
    MutableDateTime mutableDateTime0 = new MutableDateTime(1272L);
    partial0.isMatch((ReadableInstant) mutableDateTime0);
    Months months0 = Months.FOUR;
    months0.minus(3);
    Partial partial1 = partial0.withPeriodAdded(months0, 529);
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
    partial1.with(dateTimeFieldType0, 529);
}",0,
project,0,test3939,"public void test3939() throws Throwable {
    LocalDateTime localDateTime0 = new LocalDateTime();
    Partial partial0 = new Partial(localDateTime0);
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    partial0.with(dateTimeFieldType0, 1509);
}",0,
project,0,test4040,"public void test4040() throws Throwable {
    LocalDateTime localDateTime0 = new LocalDateTime();
    Partial partial0 = new Partial(localDateTime0);
    DateTimeFieldType.dayOfYear();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
    partial0.with(dateTimeFieldType0, 1);
}",0,
project,0,test4141,"public void test4141() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
    Partial partial0 = new Partial(dateTimeFieldType0, 0);
    partial0.with(dateTimeFieldType0, 0);
}",0,
project,0,test4242,"public void test4242() throws Throwable {
    DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[0];
    Partial partial0 = new Partial(dateTimeFieldTypeArray0, (int[]) null, (Chronology) null);
}",0,
project,0,test4545,"public void test4545() throws Throwable {
    LocalDateTime localDateTime0 = new LocalDateTime();
    MutablePeriod mutablePeriod0 = new MutablePeriod(2629800000L, 2629800000L);
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
    dateTimeFieldType0.isSupported(buddhistChronology0);
    Partial partial0 = new Partial(dateTimeFieldType0, 20);
    Partial partial1 = partial0.plus(mutablePeriod0);
    partial1.getFormatter();
    partial1.toString();
}",0,
project,0,test4646,"public void test4646() throws Throwable {
    DurationFieldType.months();
    Partial partial0 = new Partial((DateTimeFieldType) null, 168);
}",1,
project,0,test4848,"public void test4848() throws Throwable {
    Partial partial0 = new Partial();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
    partial0.with(dateTimeFieldType0, 58);
}",0,
project,0,test4949,"public void test4949() throws Throwable {
    Partial partial0 = new Partial();
    Days days0 = Days.MIN_VALUE;
    partial0.withPeriodAdded(days0, 0);
}",0,
project,0,test5050,"public void test5050() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
    Partial partial0 = new Partial(dateTimeFieldType0, 0);
    LocalDateTime localDateTime0 = LocalDateTime.now();
    partial0.isMatch((ReadablePartial) localDateTime0);
}",0,
project,0,test5151,"public void test5151() throws Throwable {
    LocalDateTime localDateTime0 = new LocalDateTime();
    Partial partial0 = new Partial(localDateTime0);
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
    partial0.with(dateTimeFieldType0, 529);
}",0,
project,0,test5252,"public void test5252() throws Throwable {
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
    DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
    dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
    dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
    int[] intArray0 = new int[2];
    intArray0[1] = 0;
    Partial partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
    // Undeclared exception!
    try {
        DurationFieldType.hours();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Types array must not contain duplicate: millisOfSecond and millisOfSecond
        //
        verifyException(""org.joda.time.Partial"", e);
    }
}",0,
project,0,test5454,"public void test5454() throws Throwable {
    LocalDateTime localDateTime0 = new LocalDateTime();
    Partial partial0 = new Partial(localDateTime0);
    MutablePeriod mutablePeriod0 = new MutablePeriod(2629800000L, 2629800000L);
    Partial partial1 = new Partial();
    DateTimeFieldType.hourOfDay();
    Partial partial2 = new Partial(partial0);
    DateTimeFieldType.hourOfDay();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
    partial2.with(dateTimeFieldType0, 529);
}",0,
project,0,test5555,"public void test5555() throws Throwable {
    Days days0 = Days.MAX_VALUE;
    DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[4];
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
    dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
    DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.secondOfMinute();
    dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
    DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.centuryOfEra();
    dateTimeFieldTypeArray0[2] = dateTimeFieldType2;
    DateTimeFieldType dateTimeFieldType3 = DateTimeFieldType.yearOfCentury();
    dateTimeFieldTypeArray0[3] = dateTimeFieldType3;
    int[] intArray0 = new int[4];
    Partial partial0 = null;
    try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Types array must be in order largest-smallest: secondOfMinute < centuryOfEra
        //
        verifyException(""org.joda.time.Partial"", e);
    }
}",0,
project,0,test5656,"public void test5656() throws Throwable {
    DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
    dateTimeFieldTypeArray0[1] = dateTimeFieldTypeArray0[0];
    int[] intArray0 = new int[2];
    intArray0[1] = 0;
    Partial partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
    // Undeclared exception!
    try {
        DurationFieldType.hours();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Types array must not contain null: index 0
        //
        verifyException(""org.joda.time.Partial"", e);
    }
}",0,
project,0,test5858,"public void test5858() throws Throwable {
    Partial partial0 = new Partial();
    DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
    dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
    DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.secondOfDay();
    dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
    int[] intArray0 = new int[2];
    int int0 = 0;
    intArray0[1] = 0;
    Partial partial1 = null;
    try {
        partial1 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Types array must be in order largest-smallest: secondOfMinute < secondOfDay
        //
        verifyException(""org.joda.time.Partial"", e);
    }
}",0,
project,0,test5959,"public void test5959() throws Throwable {
    MutablePeriod mutablePeriod0 = new MutablePeriod(0L, 2629800000L);
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
    Partial partial0 = new Partial(dateTimeFieldType0, 1);
    partial0.plus(mutablePeriod0);
    DateTimeFieldType.hourOfDay();
    Partial partial1 = new Partial(partial0);
    DateTimeZone.getDefault();
    DateTimeFieldType.hourOfDay();
    DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.dayOfYear();
    Partial partial2 = partial0.with(dateTimeFieldType1, 58);
    Hours hours0 = Hours.TWO;
    partial2.toString();
}",0,
project,0,test6060,"public void test6060() throws Throwable {
    LocalDateTime localDateTime0 = new LocalDateTime();
    Partial partial0 = new Partial(localDateTime0);
    DateTimeFieldType.hourOfDay();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
    DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
    partial0.withFieldAdded(durationFieldType0, (-1527));
}",0,
project,0,test6161,"public void test6161() throws Throwable {
    LocalDateTime localDateTime0 = new LocalDateTime();
    Partial partial0 = new Partial(localDateTime0);
    MutablePeriod mutablePeriod0 = new MutablePeriod(2629800000L, 2629800000L);
    partial0.isEqual(partial0);
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
    partial0.withFieldAddWrapped(durationFieldType0, (-454));
    DateTimeFieldType.weekyearOfCentury();
}",0,
project,0,test6262,"public void test6262() throws Throwable {
    LocalDateTime localDateTime0 = new LocalDateTime();
    Partial partial0 = new Partial(localDateTime0);
    MutablePeriod mutablePeriod0 = new MutablePeriod(2629800000L, 2629800000L);
    partial0.isEqual(partial0);
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
    partial0.withFieldAdded(durationFieldType0, 0);
    partial0.withFieldAddWrapped(durationFieldType0, (-454));
    partial0.with(dateTimeFieldType0, (-1422));
}",0,
project,0,test6363,"public void test6363() throws Throwable {
    LocalDateTime localDateTime0 = new LocalDateTime();
    Partial partial0 = new Partial(localDateTime0);
    MutablePeriod mutablePeriod0 = new MutablePeriod(2629800000L, 2629800000L);
    partial0.isEqual(partial0);
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
    int int0 = 20;
    Partial partial1 = partial0.withFieldAddWrapped(durationFieldType0, 0);
    DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.weekyearOfCentury();
    partial0.with(dateTimeFieldType1, 20);
    partial1.with(dateTimeFieldType1, int0);
}",0,
project,0,test6565,"public void test6565() throws Throwable {
    LocalDateTime localDateTime0 = new LocalDateTime();
    Partial partial0 = new Partial(localDateTime0);
    DateTimeFieldType.dayOfYear();
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
    partial0.with(dateTimeFieldType0, 2307);
}",0,
project,0,test6666,"public void test6666() throws Throwable {
    long long0 = 1017L;
    System.setCurrentTimeMillis(1017L);
    DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[3];
    DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
    dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
    DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.year();
    dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
    DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.dayOfMonth();
    dateTimeFieldTypeArray0[2] = dateTimeFieldType2;
    int[] intArray0 = new int[3];
    int int0 = 32;
    int int1 = (-1892);
    intArray0[1] = (-1892);
    int int2 = 1552;
    intArray0[2] = 1552;
    BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    Partial partial0 = null;
    try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, buddhistChronology0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Types array must be in order largest-smallest: yearOfEra < year
        //
        verifyException(""org.joda.time.Partial"", e);
    }
}",0,
