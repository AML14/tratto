/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 20 11:58:09 GMT 2023
 */
package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.OffsetTime;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.util.GregorianCalendar;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.evosuite.runtime.mock.java.time.MockOffsetTime;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeUtils;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class Partial_ESTest extends Partial_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Partial partial0 = new Partial();
        Partial partial1 = new Partial(partial0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Partial partial0 = new Partial();
        Days days0 = Days.MAX_VALUE;
        partial0.minus(days0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Partial partial0 = new Partial();
        partial0.size();
        DateTimeUtils.setCurrentMillisSystem();
        Partial.Property partial_Property0 = new Partial.Property(partial0, (-1187));
        partial_Property0.withMinimumValue();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        Partial partial0 = new Partial(localDateTime0);
        Partial partial1 = new Partial(partial0);
        DateTimeFieldType.year();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Partial partial0 = new Partial();
        partial0.getValues();
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
        LocalDateTime localDateTime0 = LocalDateTime.now();
        Partial partial0 = new Partial(localDateTime0);
        partial0.isSupported(dateTimeFieldType0);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        long long0 = 0L;
        LocalTime localTime0 = new LocalTime(0L);
        Partial partial0 = new Partial(localTime0);
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
        String string0 = "";
        localTime0.getFields();
        int int0 = 5;
        partial_Property0.setCopy(5);
        partial_Property0.setCopy("");
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
        Partial partial0 = new Partial(dateTimeFieldType0, 0);
        ISOChronology.getInstance();
        Partial.Property partial_Property0 = new Partial.Property(partial0, 0);
        partial_Property0.withMaximumValue();
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Partial partial0 = new Partial();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        partial0.property(dateTimeFieldType0);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        long long0 = 0L;
        LocalTime localTime0 = new LocalTime(0L);
        Partial partial0 = new Partial(localTime0);
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
        int int0 = 5;
        partial_Property0.setCopy(5);
        Locale locale0 = Locale.SIMPLIFIED_CHINESE;
        partial_Property0.setCopy("", locale0);
        DateTimeUtils.setCurrentMillisFixed(long0);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
        Partial partial0 = new Partial(dateTimeFieldType0, 0);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        Partial partial0 = new Partial();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        partial0.with(dateTimeFieldType0, 1792);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        Partial partial0 = new Partial();
        DurationFieldType durationFieldType0 = DurationFieldType.HALFDAYS_TYPE;
        DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[0];
        int[] intArray0 = new int[0];
        Partial partial1 = new Partial(dateTimeFieldTypeArray0, intArray0);
        DurationFieldType durationFieldType1 = DurationFieldType.hours();
        partial0.withFieldAddWrapped(durationFieldType1, 2416);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        int int0 = 0;
        DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
        int[] intArray0 = new int[0];
        Partial partial0 = null;
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        Partial partial0 = new Partial();
        Hours hours0 = Hours.THREE;
        hours0.toString();
        Partial partial1 = partial0.plus(hours0);
        partial1.toString();
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        Partial partial0 = new Partial();
        partial0.toString();
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        Partial partial0 = new Partial();
        Locale locale0 = new Locale("Types array must not contain null: index ");
        partial0.toString("Types array must not contain null: index ", locale0);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        Partial partial0 = new Partial();
        partial0.getFieldTypes();
        ISOChronology.getInstance();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
        partial0.with(dateTimeFieldType0, (-2135));
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        Partial partial0 = new Partial();
        LocalDateTime localDateTime0 = LocalDateTime.now();
        partial0.isMatch((ReadablePartial) localDateTime0);
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        DateTimeFieldType.millisOfSecond();
        LocalDateTime localDateTime0 = LocalDateTime.now();
        Partial partial0 = new Partial(localDateTime0);
        partial0.isMatch((ReadablePartial) localDateTime0);
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
        Partial partial0 = new Partial(dateTimeFieldType0, 0);
        Partial partial1 = new Partial();
        partial0.without(dateTimeFieldType0);
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        Partial partial0 = new Partial();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
        dateTimeFieldType0.getField((Chronology) null);
        dateTimeFieldType0.getDurationType();
        int int0 = 0;
        Partial partial1 = partial0.with(dateTimeFieldType0, 0);
        partial0.getFormatter();
        PeriodType periodType0 = PeriodType.yearWeekDay();
        MutablePeriod mutablePeriod0 = new MutablePeriod(periodType0);
        partial1.withField(dateTimeFieldType0, 0);
        partial1.toString("hTk8lFI937DI?D)B#");
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        LocalDate localDate0 = new LocalDate((long) int0, dateTimeZone0);
        int int1 = 8;
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
        Partial partial0 = new Partial(dateTimeFieldType0, 0);
        ISOChronology iSOChronology0 = ISOChronology.getInstance();
        partial0.withChronologyRetainFields(iSOChronology0);
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        Partial partial0 = new Partial();
        Days days0 = Days.SIX;
        int[] intArray0 = new int[0];
        Partial partial1 = new Partial((DateTimeFieldType[]) null, intArray0);
        int int0 = 34;
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        Partial partial0 = new Partial(localDateTime0);
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
        partial0.withField(dateTimeFieldType0, 41);
        int int0 = 529;
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        Partial partial0 = new Partial(localDateTime0);
        DateTimeFieldType.dayOfYear();
        partial0.toString();
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        Days days0 = Days.MAX_VALUE;
        Partial partial0 = new Partial();
        partial0.toString("");
        Seconds seconds0 = null;
        seconds0 = Seconds.ZERO;
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
        Partial partial0 = new Partial(dateTimeFieldType0, 0);
        DurationFieldType.months();
        partial0.toString();
    }

    @Test(timeout = 4000)
    public void test2828() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        ZonedDateTime zonedDateTime0 = MockZonedDateTime.now(zoneId0);
        GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
        LocalDate localDate0 = LocalDate.fromCalendarFields(gregorianCalendar0);
        Partial partial0 = new Partial(localDate0);
        partial0.isMatch((ReadableInstant) null);
    }

    @Test(timeout = 4000)
    public void test2929() throws Throwable {
        Partial partial0 = new Partial();
        partial0.isMatch((ReadableInstant) null);
    }

    @Test(timeout = 4000)
    public void test3030() throws Throwable {
        Partial partial0 = new Partial();
        partial0.withPeriodAdded((ReadablePeriod) null, 23034375);
    }

    @Test(timeout = 4000)
    public void test3131() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        ZonedDateTime zonedDateTime0 = MockZonedDateTime.now(zoneId0);
        GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
        LocalDate localDate0 = LocalDate.fromCalendarFields(gregorianCalendar0);
        localDate0.getDayOfYear();
        Partial partial0 = new Partial(localDate0);
        partial0.getValues();
        partial0.toString();
        partial0.getFormatter();
    }

    @Test(timeout = 4000)
    public void test3232() throws Throwable {
        Partial partial0 = new Partial();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        partial0.without(dateTimeFieldType0);
    }

    @Test(timeout = 4000)
    public void test3333() throws Throwable {
        Partial partial0 = new Partial();
        JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
        partial0.withChronologyRetainFields(julianChronology0);
        Days days0 = Days.MAX_VALUE;
    }

    @Test(timeout = 4000)
    public void test3434() throws Throwable {
        Days days0 = Days.SIX;
        Partial partial0 = new Partial((ReadablePartial) null);
    }

    @Test(timeout = 4000)
    public void test3535() throws Throwable {
        Months months0 = Months.FOUR;
        Partial partial0 = new Partial();
        partial0.with((DateTimeFieldType) null, 2351);
    }

    @Test(timeout = 4000)
    public void test3636() throws Throwable {
        OffsetTime offsetTime0 = MockOffsetTime.now();
        ZoneId.from(offsetTime0);
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
        Partial partial0 = new Partial(dateTimeFieldType0, (-1));
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
        CopticChronology.getInstanceUTC();
        MutablePeriod mutablePeriod0 = new MutablePeriod((long) (-1), (Chronology) gregorianChronology0);
        Partial partial1 = partial0.withPeriodAdded(mutablePeriod0, (-1));
        Partial.Property partial_Property0 = new Partial.Property(partial1, 4);
        partial_Property0.getPartial();
        partial_Property0.addToCopy(1);
        long long0 = (-5012L);
        System.setCurrentTimeMillis(long0);
    }

    @Test(timeout = 4000)
    public void test3737() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        ZonedDateTime zonedDateTime0 = MockZonedDateTime.now(zoneId0);
        GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
        LocalDate localDate0 = LocalDate.fromCalendarFields(gregorianCalendar0);
        localDate0.getDayOfYear();
        Locale locale0 = Locale.GERMAN;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
        Partial partial0 = new Partial(dateTimeFieldType0, 45);
        Partial.Property partial_Property0 = new Partial.Property(partial0, 1852);
        partial_Property0.addWrapFieldToCopy(123);
        partial0.isMatch((ReadablePartial) localDate0);
    }

    @Test(timeout = 4000)
    public void test3838() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        Partial partial0 = new Partial(localDateTime0);
        MutableDateTime mutableDateTime0 = new MutableDateTime(1272L);
        partial0.isMatch((ReadableInstant) mutableDateTime0);
        Months months0 = Months.FOUR;
        months0.minus(3);
        Partial partial1 = partial0.withPeriodAdded(months0, 529);
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
        partial1.with(dateTimeFieldType0, 529);
    }

    @Test(timeout = 4000)
    public void test3939() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        Partial partial0 = new Partial(localDateTime0);
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        partial0.with(dateTimeFieldType0, 1509);
    }

    @Test(timeout = 4000)
    public void test4040() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        Partial partial0 = new Partial(localDateTime0);
        DateTimeFieldType.dayOfYear();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
        partial0.with(dateTimeFieldType0, 1);
    }

    @Test(timeout = 4000)
    public void test4141() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
        Partial partial0 = new Partial(dateTimeFieldType0, 0);
        partial0.with(dateTimeFieldType0, 0);
    }

    @Test(timeout = 4000)
    public void test4242() throws Throwable {
        DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[0];
        Partial partial0 = new Partial(dateTimeFieldTypeArray0, (int[]) null, (Chronology) null);
    }

    @Test(timeout = 4000)
    public void test4343() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        ZonedDateTime zonedDateTime0 = MockZonedDateTime.now(zoneId0);
        GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
        LocalDate localDate0 = LocalDate.fromCalendarFields(gregorianCalendar0);
        zoneId0.getId();
        Partial partial0 = new Partial(localDate0);
        Partial.Property partial_Property0 = new Partial.Property(partial0, 1219);
        partial_Property0.get();
    }

    @Test(timeout = 4000)
    public void test4444() throws Throwable {
        Partial partial0 = new Partial();
        partial0.toString((String) null);
        Days days0 = Days.MAX_VALUE;
    }

    @Test(timeout = 4000)
    public void test4545() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        MutablePeriod mutablePeriod0 = new MutablePeriod(2629800000L, 2629800000L);
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
        dateTimeFieldType0.isSupported(buddhistChronology0);
        Partial partial0 = new Partial(dateTimeFieldType0, 20);
        Partial partial1 = partial0.plus(mutablePeriod0);
        partial1.getFormatter();
        partial1.toString();
    }

    @Test(timeout = 4000)
    public void test4646() throws Throwable {
        DurationFieldType.months();
        Partial partial0 = new Partial((DateTimeFieldType) null, 168);
    }

    @Test(timeout = 4000)
    public void test4747() throws Throwable {
        ISOChronology iSOChronology0 = ISOChronology.getInstance();
        DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[0];
        int[] intArray0 = new int[0];
        Partial partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, iSOChronology0);
        Days days0 = Days.FOUR;
    }

    @Test(timeout = 4000)
    public void test4848() throws Throwable {
        Partial partial0 = new Partial();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
        partial0.with(dateTimeFieldType0, 58);
    }

    @Test(timeout = 4000)
    public void test4949() throws Throwable {
        Partial partial0 = new Partial();
        Days days0 = Days.MIN_VALUE;
        partial0.withPeriodAdded(days0, 0);
    }

    @Test(timeout = 4000)
    public void test5050() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
        Partial partial0 = new Partial(dateTimeFieldType0, 0);
        LocalDateTime localDateTime0 = LocalDateTime.now();
        partial0.isMatch((ReadablePartial) localDateTime0);
    }

    @Test(timeout = 4000)
    public void test5151() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        Partial partial0 = new Partial(localDateTime0);
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
        partial0.with(dateTimeFieldType0, 529);
    }

    @Test(timeout = 4000)
    public void test5252() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
        DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
        dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
        dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
        int[] intArray0 = new int[2];
        intArray0[1] = 0;
        Partial partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        DurationFieldType.hours();
    }

    @Test(timeout = 4000)
    public void test5353() throws Throwable {
        Partial partial0 = new Partial();
        Locale locale0 = Locale.GERMANY;
        partial0.toString((String) null, locale0);
        Days days0 = Days.SEVEN;
        System.setCurrentTimeMillis(1L);
    }

    @Test(timeout = 4000)
    public void test5454() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        Partial partial0 = new Partial(localDateTime0);
        MutablePeriod mutablePeriod0 = new MutablePeriod(2629800000L, 2629800000L);
        Partial partial1 = new Partial();
        DateTimeFieldType.hourOfDay();
        Partial partial2 = new Partial(partial0);
        DateTimeFieldType.hourOfDay();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
        partial2.with(dateTimeFieldType0, 529);
    }

    @Test(timeout = 4000)
    public void test5555() throws Throwable {
        Days days0 = Days.MAX_VALUE;
        DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[4];
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
        dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
        DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.secondOfMinute();
        dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
        DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.centuryOfEra();
        dateTimeFieldTypeArray0[2] = dateTimeFieldType2;
        DateTimeFieldType dateTimeFieldType3 = DateTimeFieldType.yearOfCentury();
        dateTimeFieldTypeArray0[3] = dateTimeFieldType3;
        int[] intArray0 = new int[4];
        Partial partial0 = null;
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
    }

    @Test(timeout = 4000)
    public void test5656() throws Throwable {
        DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
        dateTimeFieldTypeArray0[1] = dateTimeFieldTypeArray0[0];
        int[] intArray0 = new int[2];
        intArray0[1] = 0;
        Partial partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        DurationFieldType.hours();
    }

    @Test(timeout = 4000)
    public void test5757() throws Throwable {
        Days days0 = Days.SIX;
        Partial partial0 = new Partial();
        partial0.isMatch((ReadablePartial) null);
        int int0 = 28265625;
    }

    @Test(timeout = 4000)
    public void test5858() throws Throwable {
        Partial partial0 = new Partial();
        DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
        dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
        DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.secondOfDay();
        dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
        int[] intArray0 = new int[2];
        int int0 = 0;
        intArray0[1] = 0;
        Partial partial1 = null;
        partial1 = new Partial(dateTimeFieldTypeArray0, intArray0);
    }

    @Test(timeout = 4000)
    public void test5959() throws Throwable {
        MutablePeriod mutablePeriod0 = new MutablePeriod(0L, 2629800000L);
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
        Partial partial0 = new Partial(dateTimeFieldType0, 1);
        partial0.plus(mutablePeriod0);
        DateTimeFieldType.hourOfDay();
        Partial partial1 = new Partial(partial0);
        DateTimeZone.getDefault();
        DateTimeFieldType.hourOfDay();
        DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.dayOfYear();
        Partial partial2 = partial0.with(dateTimeFieldType1, 58);
        Hours hours0 = Hours.TWO;
        partial2.toString();
    }

    @Test(timeout = 4000)
    public void test6060() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        Partial partial0 = new Partial(localDateTime0);
        DateTimeFieldType.hourOfDay();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
        DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
        partial0.withFieldAdded(durationFieldType0, (-1527));
    }

    @Test(timeout = 4000)
    public void test6161() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        Partial partial0 = new Partial(localDateTime0);
        MutablePeriod mutablePeriod0 = new MutablePeriod(2629800000L, 2629800000L);
        partial0.isEqual(partial0);
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
        partial0.withFieldAddWrapped(durationFieldType0, (-454));
        DateTimeFieldType.weekyearOfCentury();
    }

    @Test(timeout = 4000)
    public void test6262() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        Partial partial0 = new Partial(localDateTime0);
        MutablePeriod mutablePeriod0 = new MutablePeriod(2629800000L, 2629800000L);
        partial0.isEqual(partial0);
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
        partial0.withFieldAdded(durationFieldType0, 0);
        partial0.withFieldAddWrapped(durationFieldType0, (-454));
        partial0.with(dateTimeFieldType0, (-1422));
    }

    @Test(timeout = 4000)
    public void test6363() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        Partial partial0 = new Partial(localDateTime0);
        MutablePeriod mutablePeriod0 = new MutablePeriod(2629800000L, 2629800000L);
        partial0.isEqual(partial0);
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
        int int0 = 20;
        Partial partial1 = partial0.withFieldAddWrapped(durationFieldType0, 0);
        DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.weekyearOfCentury();
        partial0.with(dateTimeFieldType1, 20);
        partial1.with(dateTimeFieldType1, int0);
    }

    @Test(timeout = 4000)
    public void test6464() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        Partial partial0 = new Partial(localDateTime0);
        MutablePeriod mutablePeriod0 = new MutablePeriod(2629800000L, 2629800000L);
        Partial partial1 = partial0.plus(mutablePeriod0);
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
        DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.clockhourOfDay();
        int int0 = (-4543);
        DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[3];
        dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
        dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
        dateTimeFieldTypeArray0[2] = dateTimeFieldType0;
        int[] intArray0 = new int[3];
        intArray0[0] = (-4543);
        intArray0[1] = (-1);
        intArray0[2] = (-4543);
        Partial partial2 = new Partial(dateTimeFieldTypeArray0, intArray0);
        partial1.withPeriodAdded(mutablePeriod0, int0);
        System.setCurrentTimeMillis(intArray0[1]);
    }

    @Test(timeout = 4000)
    public void test6565() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime();
        Partial partial0 = new Partial(localDateTime0);
        DateTimeFieldType.dayOfYear();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
        partial0.with(dateTimeFieldType0, 2307);
    }

    @Test(timeout = 4000)
    public void test6666() throws Throwable {
        long long0 = 1017L;
        System.setCurrentTimeMillis(1017L);
        DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[3];
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
        DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.year();
        dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
        DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.dayOfMonth();
        dateTimeFieldTypeArray0[2] = dateTimeFieldType2;
        int[] intArray0 = new int[3];
        int int0 = 32;
        int int1 = (-1892);
        intArray0[1] = (-1892);
        int int2 = 1552;
        intArray0[2] = 1552;
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        Partial partial0 = null;
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, buddhistChronology0);
    }
}
