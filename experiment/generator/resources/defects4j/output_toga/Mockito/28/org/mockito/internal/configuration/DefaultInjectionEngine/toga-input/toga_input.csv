focal_method,test_prefix,docstring
"public void injectMocksOnFields(Set<Field> injectMocksFields, Set<Object> mocks, Object testClassInstance) {
    for (Field field : injectMocksFields) {
        Set<Object> mocksToBeInjected = new HashSet<Object>(mocks);
        Object injectMocksFieldInstance = null;
        try {
            injectMocksFieldInstance = new FieldInitializer(testClassInstance, field).initialize();
        } catch (MockitoException e) {
            new Reporter().cannotInitializeForInjectMocksAnnotation(field.getName(), e);
        }
        // for each field in the class hierarchy
        Class<?> fieldClass = injectMocksFieldInstance.getClass();
        while (fieldClass != Object.class) {
            injectMockCandidate(fieldClass, mocksToBeInjected, injectMocksFieldInstance);
            fieldClass = fieldClass.getSuperclass();
        }
    }
}","public void test11() throws Throwable {
    LinkedHashSet<Field> linkedHashSet0 = new LinkedHashSet<Field>();
    LinkedHashSet<Object> linkedHashSet1 = new LinkedHashSet<Object>();
    linkedHashSet0.add((Field) null);
    DefaultInjectionEngine defaultInjectionEngine0 = new DefaultInjectionEngine();
    // Undeclared exception!
    try {
        defaultInjectionEngine0.injectMocksOnFields(linkedHashSet0, linkedHashSet1, (Object) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.mockito.internal.util.reflection.AccessibilityChanger"", e);
    }
}","/**
 * Inject mocks in injectMocksFields, and initialize them if needed.
 *
 * <p>
 * <u>Algorithm :<br></u>
 * for each field annotated by @InjectMocks
 *   <ul>
 *   <li>copy mocks set
 *   <li>initialize field annotated by @InjectMocks
 *   <li>for each field in @InjectMocks type ordered from sub-type to super-type
 *     <ul>
 *     <li>find mock candidate by type
 *     <li>if more than *one* candidate find mock candidate on name
 *     <li>if one mock candidate then
 *       <ul>
 *       <li>set mock by property setter if possible
 *       <li>else set mock by field injection
 *       </ul>
 *     <li>remove mock from mocks copy (mocks are just injected once)
 *     <li>else don't fail, user will then provide dependencies
 *     </ul>
 *   </ul>
 * </p>
 *
 * @param injectMocksFields Fields annotated by @InjectMocks
 * @param mocks Mocks
 * @param testClassInstance The test class instance
 */"
