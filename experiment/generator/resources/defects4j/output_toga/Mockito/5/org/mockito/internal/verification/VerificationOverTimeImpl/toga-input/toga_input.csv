focal_method,test_prefix,docstring
"public long getDuration() {
    return durationMillis;
}","public void test00() throws Throwable {
    VerificationOverTimeImpl verificationOverTimeImpl0 = new VerificationOverTimeImpl(2093L, 2093L, (VerificationMode) null, true);
    long long0 = verificationOverTimeImpl0.getDuration();
    assertEquals(2093L, long0);
}",""
"public long getPollingPeriod() {
    return pollingPeriodMillis;
}","public void test01() throws Throwable {
    VerificationOverTimeImpl verificationOverTimeImpl0 = new VerificationOverTimeImpl(2093L, 2093L, (VerificationMode) null, true);
    long long0 = verificationOverTimeImpl0.getDuration();
    assertEquals(2093L, verificationOverTimeImpl0.getPollingPeriod());
}",""
"public long getPollingPeriod() {
    return pollingPeriodMillis;
}","public void test12() throws Throwable {
    VerificationOverTimeImpl verificationOverTimeImpl0 = new VerificationOverTimeImpl((-1L), (-1L), (VerificationMode) null, false);
    verificationOverTimeImpl0.getDelegate();
    assertEquals((-1L), verificationOverTimeImpl0.getPollingPeriod());
}",""
"public long getDuration() {
    return durationMillis;
}","public void test13() throws Throwable {
    VerificationOverTimeImpl verificationOverTimeImpl0 = new VerificationOverTimeImpl((-1L), (-1L), (VerificationMode) null, false);
    verificationOverTimeImpl0.getDelegate();
    assertEquals((-1L), verificationOverTimeImpl0.getDuration());
}",""
"public long getPollingPeriod() {
    return pollingPeriodMillis;
}","public void test24() throws Throwable {
    VerificationOverTimeImpl verificationOverTimeImpl0 = new VerificationOverTimeImpl((-968L), (-968L), (VerificationMode) null, false);
    long long0 = verificationOverTimeImpl0.getPollingPeriod();
    assertEquals((-968L), long0);
}",""
"public long getDuration() {
    return durationMillis;
}","public void test25() throws Throwable {
    VerificationOverTimeImpl verificationOverTimeImpl0 = new VerificationOverTimeImpl((-968L), (-968L), (VerificationMode) null, false);
    long long0 = verificationOverTimeImpl0.getPollingPeriod();
    assertEquals((-968L), verificationOverTimeImpl0.getDuration());
}",""
"public void verify(VerificationData data) {
    AssertionError error = null;
    timer.start();
    while (timer.isCounting()) {
        try {
            delegate.verify(data);
            if (returnOnSuccess) {
                return;
            } else {
                error = null;
            }
        } catch (MockitoAssertionError e) {
            error = handleVerifyException(e);
        } catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {
            error = handleVerifyException(e);
        }
    }
    if (error != null) {
        throw error;
    }
}","public void test36() throws Throwable {
    After after0 = new After(0L, (-1257L), (VerificationMode) null);
    VerificationOverTimeImpl verificationOverTimeImpl0 = new VerificationOverTimeImpl(0L, 0L, after0, false);
    // Undeclared exception!
    verificationOverTimeImpl0.verify((VerificationData) null);
}","/**
 * Verify the given ongoing verification data, and confirm that it satisfies the delegate verification mode
 * before the full duration has passed.
 *
 * In practice, this polls the delegate verification mode until it is satisfied. If it is not satisfied once
 * the full duration has passed, the last error returned by the delegate verification mode will be thrown
 * here in turn. This may be thrown early if the delegate is unsatisfied and the verification mode is known
 * to never recover from this situation (e.g. {@link AtMost}).
 *
 * If it is satisfied before the full duration has passed, behaviour is dependent on the returnOnSuccess parameter
 * given in the constructor. If true, this verification mode is immediately satisfied once the delegate is. If
 * false, this verification mode is not satisfied until the delegate is satisfied and the full time has passed.
 *
 * @throws MockitoAssertionError if the delegate verification mode does not succeed before the timeout
 */"
"public void verify(VerificationData data) {
    AssertionError error = null;
    timer.start();
    while (timer.isCounting()) {
        try {
            delegate.verify(data);
            if (returnOnSuccess) {
                return;
            } else {
                error = null;
            }
        } catch (MockitoAssertionError e) {
            error = handleVerifyException(e);
        } catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {
            error = handleVerifyException(e);
        }
    }
    if (error != null) {
        throw error;
    }
}","public void test47() throws Throwable {
    VerificationOverTimeImpl verificationOverTimeImpl0 = new VerificationOverTimeImpl(360L, 360L, (VerificationMode) null, true);
    // Undeclared exception!
    try {
        verificationOverTimeImpl0.verify((VerificationData) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.mockito.internal.verification.VerificationOverTimeImpl"", e);
    }
}","/**
 * Verify the given ongoing verification data, and confirm that it satisfies the delegate verification mode
 * before the full duration has passed.
 *
 * In practice, this polls the delegate verification mode until it is satisfied. If it is not satisfied once
 * the full duration has passed, the last error returned by the delegate verification mode will be thrown
 * here in turn. This may be thrown early if the delegate is unsatisfied and the verification mode is known
 * to never recover from this situation (e.g. {@link AtMost}).
 *
 * If it is satisfied before the full duration has passed, behaviour is dependent on the returnOnSuccess parameter
 * given in the constructor. If true, this verification mode is immediately satisfied once the delegate is. If
 * false, this verification mode is not satisfied until the delegate is satisfied and the full time has passed.
 *
 * @throws MockitoAssertionError if the delegate verification mode does not succeed before the timeout
 */"
"protected boolean canRecoverFromFailure(VerificationMode verificationMode) {
    return !(verificationMode instanceof AtMost || verificationMode instanceof NoMoreInteractions);
}","public void test58() throws Throwable {
    AtMost atMost0 = new AtMost(37);
    Timer timer0 = new Timer(37);
    VerificationOverTimeImpl verificationOverTimeImpl0 = new VerificationOverTimeImpl(0L, 0L, atMost0, false, timer0);
    boolean boolean0 = verificationOverTimeImpl0.canRecoverFromFailure(atMost0);
    assertFalse(boolean0);
}",""
"protected boolean canRecoverFromFailure(VerificationMode verificationMode) {
    return !(verificationMode instanceof AtMost || verificationMode instanceof NoMoreInteractions);
}","public void test69() throws Throwable {
    Timer timer0 = new Timer(0L);
    VerificationOverTimeImpl verificationOverTimeImpl0 = new VerificationOverTimeImpl(0L, 0L, (VerificationMode) null, false, timer0);
    boolean boolean0 = verificationOverTimeImpl0.canRecoverFromFailure((VerificationMode) null);
    assertTrue(boolean0);
}",""
"protected boolean canRecoverFromFailure(VerificationMode verificationMode) {
    return !(verificationMode instanceof AtMost || verificationMode instanceof NoMoreInteractions);
}","public void test710() throws Throwable {
    NoMoreInteractions noMoreInteractions0 = new NoMoreInteractions();
    Timer timer0 = new Timer(0L);
    VerificationOverTimeImpl verificationOverTimeImpl0 = new VerificationOverTimeImpl(0L, 0L, noMoreInteractions0, true, timer0);
    boolean boolean0 = verificationOverTimeImpl0.canRecoverFromFailure(noMoreInteractions0);
    assertFalse(boolean0);
}",""
