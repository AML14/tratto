project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test00,"public void test00() throws Throwable {
    MockUtil mockUtil0 = new MockUtil();
    Class<Object> class0 = Object.class;
    MockSettingsImpl mockSettingsImpl0 = new MockSettingsImpl();
    // Undeclared exception!
    try {
        mockUtil0.createMock(class0, mockSettingsImpl0);
        fail(""Expecting exception: IncompatibleClassChangeError"");
    } catch (IncompatibleClassChangeError e) {
        //
        // Expected non-static field org.mockito.cglib.proxy.Enhancer.serialVersionUID
        //
        verifyException(""org.mockito.cglib.proxy.Enhancer"", e);
    }
}",0,
project,0,test11,"public void test11() throws Throwable {
    MockUtil mockUtil0 = new MockUtil();
    // Undeclared exception!
    try {
        mockUtil0.getMockName(mockUtil0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
    }
}",0,
project,0,test22,"public void test22() throws Throwable {
    MockUtil mockUtil0 = new MockUtil();
    MockSettingsImpl mockSettingsImpl0 = new MockSettingsImpl();
    // Undeclared exception!
    try {
        mockUtil0.resetMock(mockSettingsImpl0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
    }
}",0,
project,0,test33,"public void test33() throws Throwable {
    MockUtil mockUtil0 = new MockUtil();
    Class<Object> class0 = Object.class;
    MockSettingsImpl mockSettingsImpl0 = new MockSettingsImpl();
    mockSettingsImpl0.serializable();
    // Undeclared exception!
    try {
        mockUtil0.createMock(class0, mockSettingsImpl0);
        fail(""Expecting exception: IncompatibleClassChangeError"");
    } catch (IncompatibleClassChangeError e) {
        //
        // Expected non-static field org.mockito.cglib.proxy.Enhancer.serialVersionUID
        //
        verifyException(""org.mockito.cglib.proxy.Enhancer"", e);
    }
}",0,
project,0,test44,"public void test44() throws Throwable {
    MockUtil mockUtil0 = new MockUtil();
    Class<Object> class0 = Object.class;
    MockSettingsImpl mockSettingsImpl0 = new MockSettingsImpl();
    Class<Annotation>[] classArray0 = (Class<Annotation>[]) Array.newInstance(Class.class, 1);
    mockSettingsImpl0.serializable();
    Class<Annotation> class1 = Annotation.class;
    classArray0[0] = class1;
    mockSettingsImpl0.extraInterfaces(classArray0);
    // Undeclared exception!
    try {
        mockUtil0.createMock(class0, mockSettingsImpl0);
        fail(""Expecting exception: IncompatibleClassChangeError"");
    } catch (IncompatibleClassChangeError e) {
        //
        // Expected non-static field org.mockito.cglib.proxy.Enhancer.serialVersionUID
        //
        verifyException(""org.mockito.cglib.proxy.Enhancer"", e);
    }
}",0,
project,0,test55,"public void test55() throws Throwable {
    MockUtil mockUtil0 = new MockUtil();
    Class<Object> class0 = Object.class;
    MockSettingsImpl mockSettingsImpl0 = new MockSettingsImpl();
    Class<Annotation>[] classArray0 = (Class<Annotation>[]) Array.newInstance(Class.class, 1);
    Class<Annotation> class1 = Annotation.class;
    classArray0[0] = class1;
    mockSettingsImpl0.extraInterfaces(classArray0);
    // Undeclared exception!
    try {
        mockUtil0.createMock(class0, mockSettingsImpl0);
        fail(""Expecting exception: IncompatibleClassChangeError"");
    } catch (IncompatibleClassChangeError e) {
        //
        // Expected non-static field org.mockito.cglib.proxy.Enhancer.serialVersionUID
        //
        verifyException(""org.mockito.cglib.proxy.Enhancer"", e);
    }
}",0,
project,0,test66,"public void test66() throws Throwable {
    MockUtil mockUtil0 = new MockUtil();
    // Undeclared exception!
    try {
        mockUtil0.resetMock((MockSettingsImpl) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
    }
}",0,
project,0,test77,"public void test77() throws Throwable {
    MockUtil mockUtil0 = new MockUtil();
    boolean boolean0 = mockUtil0.isMock((Object) null);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test88,"public void test88() throws Throwable {
    MockUtil mockUtil0 = new MockUtil();
    boolean boolean0 = mockUtil0.isMock(mockUtil0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
