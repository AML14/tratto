focal_method,test_prefix,docstring
"public static float floatThat(Matcher<Float> matcher) {
    return reportMatcher(matcher).returnZero();
}","public void test000() throws Throwable {
    Float float0 = new Float(0.0);
    Matcher<Float> matcher0 = Is.is(float0);
    float float1 = Matchers.floatThat(matcher0);
    assertEquals(0.0F, float1, 0.01F);
}","/**
 * Allows creating custom <code>Float</code> argument matchers.
 * <p>
 * See examples in javadoc for {@link Matchers} class
 *
 * @param matcher decides whether argument matches
 * @return <code>0</code>.
 */"
"public static <T> T argThat(Matcher<T> matcher) {
    return reportMatcher(matcher).<T>returnNull();
}","public void test011() throws Throwable {
    String[] stringArray0 = new String[8];
    Matcher<String> matcher0 = IsIn.isIn(stringArray0);
    AnyOf<String> anyOf0 = AnyOf.anyOf(matcher0, (Matcher<? super String>) matcher0, (Matcher<? super String>) matcher0, (Matcher<? super String>) matcher0, (Matcher<? super String>) matcher0, (Matcher<? super String>) matcher0);
    String string0 = Matchers.argThat((Matcher<String>) anyOf0);
    assertNull(string0);
}","/**
 * Allows creating custom argument matchers.
 * <p>
 * In rare cases when the parameter is a primitive then you <b>*must*</b> use relevant intThat(), floatThat(), etc. method.
 * This way you will avoid <code>NullPointerException</code> during auto-unboxing.
 * <p>
 * See examples in javadoc for {@link ArgumentMatcher} class
 *
 * @param matcher decides whether argument matches
 * @return <code>null</code>.
 */"
"public static Object isNotNull() {
    return notNull();
}","public void test033() throws Throwable {
    Object object0 = Matchers.isNotNull();
    assertNull(object0);
}","/**
 * Not <code>null</code> argument.
 * <p>
 * alias to {@link Matchers#notNull()}
 * <p>
 * See examples in javadoc for {@link Matchers} class
 *
 * @return <code>null</code>.
 */"
"public static char eq(char value) {
    return reportMatcher(new Equals(value)).returnChar();
}","public void test044() throws Throwable {
    char char0 = Matchers.eq('h');
    assertEquals('\u0000', char0);
}","/**
 * <code>char</code> argument that is equal to the given value.
 * <p>
 * See examples in javadoc for {@link Matchers} class
 *
 * @param value
 *            the given value.
 * @return <code>0</code>.
 */"
"public static boolean booleanThat(Matcher<Boolean> matcher) {
    return reportMatcher(matcher).returnFalse();
}","public void test055() throws Throwable {
    Boolean boolean0 = Boolean.TRUE;
    Matcher<Boolean> matcher0 = SamePropertyValuesAs.samePropertyValuesAs(boolean0);
    boolean boolean1 = Matchers.booleanThat(matcher0);
    assertFalse(boolean1);
}","/**
 * Allows creating custom <code>Boolean</code> argument matchers.
 * <p>
 * See examples in javadoc for {@link Matchers} class
 *
 * @param matcher decides whether argument matches
 * @return <code>false</code>.
 */"
"public static double doubleThat(Matcher<Double> matcher) {
    return reportMatcher(matcher).returnZero();
}","public void test066() throws Throwable {
    Double double0 = new Double(0);
    Matcher<Double> matcher0 = OrderingComparison.greaterThan(double0);
    double double1 = Matchers.doubleThat(matcher0);
    assertEquals(0.0, double1, 0.01);
}","/**
 * Allows creating custom <code>Double</code> argument matchers.
 * <p>
 * See examples in javadoc for {@link Matchers} class
 *
 * @param matcher decides whether argument matches
 * @return <code>0</code>.
 */"
"public static int eq(int value) {
    return reportMatcher(new Equals(value)).returnZero();
}","public void test077() throws Throwable {
    int int0 = Matchers.eq(587);
    assertEquals(0, int0);
}","/**
 * <code>int</code> argument that is equal to the given value.
 * <p>
 * See examples in javadoc for {@link Matchers} class
 *
 * @param value
 *            the given value.
 * @return <code>0</code>.
 */"
"public static int intThat(Matcher<Integer> matcher) {
    return reportMatcher(matcher).returnZero();
}","public void test088() throws Throwable {
    Matcher<Integer> matcher0 = HasProperty.hasProperty("""");
    int int0 = Matchers.intThat(matcher0);
    assertEquals(0, int0);
}","/**
 * Allows creating custom <code>Integer</code> argument matchers.
 * <p>
 * See examples in javadoc for {@link Matchers} class
 *
 * @param matcher decides whether argument matches
 * @return <code>0</code>.
 */"
"public static byte byteThat(Matcher<Byte> matcher) {
    return reportMatcher(matcher).returnZero();
}","public void test099() throws Throwable {
    Byte byte0 = new Byte((byte) 82);
    Matcher<Byte> matcher0 = OrderingComparison.lessThanOrEqualTo(byte0);
    byte byte1 = Matchers.byteThat(matcher0);
    assertEquals((byte) 0, byte1);
}","/**
 * Allows creating custom <code>Byte</code> argument matchers.
 * <p>
 * See examples in javadoc for {@link Matchers} class
 *
 * @param matcher decides whether argument matches
 * @return <code>0</code>.
 */"
"public static long longThat(Matcher<Long> matcher) {
    return reportMatcher(matcher).returnZero();
}","public void test1010() throws Throwable {
    Long long0 = new Long(0L);
    Matcher<Long> matcher0 = OrderingComparison.lessThanOrEqualTo(long0);
    Is<Long> is0 = new Is<Long>(matcher0);
    long long1 = Matchers.longThat(is0);
    assertEquals(0L, long1);
}","/**
 * Allows creating custom <code>Long</code> argument matchers.
 * <p>
 * See examples in javadoc for {@link Matchers} class
 *
 * @param matcher decides whether argument matches
 * @return <code>0</code>.
 */"
"public static Object isNull() {
    return reportMatcher(Null.NULL).returnNull();
}","public void test1212() throws Throwable {
    Object object0 = Matchers.isNull();
    assertNull(object0);
}","/**
 * <code>null</code> argument.
 * <p>
 * See examples in javadoc for {@link Matchers} class
 *
 * @return <code>null</code>.
 */"
"public static char anyChar() {
    return reportMatcher(Any.ANY).returnChar();
}","public void test1313() throws Throwable {
    char char0 = Matchers.anyChar();
    assertEquals('\u0000', char0);
}","/**
 * Any <code>char</code>, <code>Character</code> or <code>null</code>.
 * <p>
 * This method <b>*doesn't do any type checks*</b>, it is only there to avoid casting
 * in your code. This might however change (type checks could be added) in a
 * future major release.
 * <p>
 * See examples in javadoc for {@link Matchers} class
 *
 * @return <code>0</code>.
 */"
"public static <T> T any(Class<T> clazz) {
    return (T) reportMatcher(Any.ANY).returnFor(clazz);
}","public void test1414() throws Throwable {
    Class<Boolean> class0 = Boolean.class;
    Boolean boolean0 = Matchers.any(class0);
    assertFalse(boolean0);
}","/**
 * Any kind object, not necessary of the given class.
 * The class argument is provided only to avoid casting.
 * <p>
 * Sometimes looks better than <code>anyObject()</code> - especially when explicit casting is required
 * <p>
 * Alias to {@link Matchers#anyObject()}
 * <p>
 * This method <b>*doesn't do any type checks*</b>, it is only there to avoid casting
 * in your code. This might however change (type checks could be added) in a
 * future major release.
 * <p>
 * See examples in javadoc for {@link Matchers} class
 *
 * @param clazz The type to avoid casting
 * @return <code>null</code>.
 */"
"public static String endsWith(String suffix) {
    return reportMatcher(new EndsWith(suffix)).returnString();
}","public void test1515() throws Throwable {
    String string0 = Matchers.endsWith("""");
    assertEquals("""", string0);
}","/**
 * <code>String</code> argument that ends with the given suffix.
 * <p>
 * See examples in javadoc for {@link Matchers} class
 *
 * @param suffix
 *            the suffix.
 * @return empty String ("""").
 */"
"public static <T> Collection<T> anyCollectionOf(Class<T> clazz) {
    return (Collection) reportMatcher(Any.ANY).returnList();
}","public void test1616() throws Throwable {
    Class<String> class0 = String.class;
    Collection<String> collection0 = Matchers.anyCollectionOf(class0);
    assertNotNull(collection0);
}","/**
 * Generic friendly alias to {@link Matchers#anyCollection()}.
 * It's an alternative to &#064;SuppressWarnings(""unchecked"") to keep code clean of compiler warnings.
 * <p>
 * Any <code>Collection</code> or <code>null</code>.
 * <p>
 * This method <b>*doesn't do any type checks*</b>, it is only there to avoid casting
 * in your code. This might however change (type checks could be added) in a
 * future major release.
 * <p>
 * See examples in javadoc for {@link Matchers} class
 *
 * @param clazz Type owned by the collection to avoid casting
 * @return empty Collection.
 */"
"public static String contains(String substring) {
    return reportMatcher(new Contains(substring)).returnString();
}","public void test1717() throws Throwable {
    String string0 = Matchers.contains(""'=9;*DF1.$ZP'MG){4"");
    assertEquals("""", string0);
}","/**
 * <code>String</code> argument that contains the given substring.
 * <p>
 * See examples in javadoc for {@link Matchers} class
 *
 * @param substring
 *            the substring.
 * @return empty String ("""").
 */"
"public static Collection anyCollection() {
    return reportMatcher(Any.ANY).returnList();
}","public void test1818() throws Throwable {
    Collection collection0 = Matchers.anyCollection();
    assertNotNull(collection0);
}","/**
 * Any <code>Collection</code> or <code>null</code>.
 * <p>
 * This method <b>*dones't do any type checks*</b>, it is only there to avoid casting
 * in your code. This might however change (type checks could be added) in a
 * future major release.
 * <p>
 * See examples in javadoc for {@link Matchers} class
 *
 * @return empty Collection.
 */"
"public static String startsWith(String prefix) {
    return reportMatcher(new StartsWith(prefix)).returnString();
}","public void test2020() throws Throwable {
    String string0 = Matchers.startsWith((String) null);
    assertEquals("""", string0);
}","/**
 * <code>String</code> argument that starts with the given prefix.
 * <p>
 * See examples in javadoc for {@link Matchers} class
 *
 * @param prefix
 *            the prefix.
 * @return empty String ("""").
 */"
"public static String anyString() {
    return reportMatcher(Any.ANY).returnString();
}","public void test2121() throws Throwable {
    String string0 = Matchers.anyString();
    assertEquals("""", string0);
}","/**
 * Any <code>String</code> or <code>null</code>.
 * <p>
 * This method <b>*doesn't do any type checks*</b>, it is only there to avoid casting
 * in your code. This might however change (type checks could be added) in a
 * future major release.
 * <p>
 * See examples in javadoc for {@link Matchers} class
 *
 * @return empty String ("""")
 */"
"public static short eq(short value) {
    return reportMatcher(new Equals(value)).returnZero();
}","public void test2222() throws Throwable {
    short short0 = Matchers.eq((short) 0);
    assertEquals((short) 0, short0);
}","/**
 * <code>short</code> argument that is equal to the given value.
 * <p>
 * See examples in javadoc for {@link Matchers} class
 *
 * @param value
 *            the given value.
 * @return <code>0</code>.
 */"
"public static <T> T refEq(T value, String... excludeFields) {
    return reportMatcher(new ReflectionEquals(value, excludeFields)).<T>returnNull();
}","public void test2323() throws Throwable {
    String[] stringArray0 = new String[0];
    Object object0 = Matchers.refEq((Object) """", stringArray0);
    assertNull(object0);
}","/**
 * Object argument that is reflection-equal to the given value with support for excluding
 * selected fields from a class.
 * <p>
 * This matcher can be used when equals() is not implemented on compared objects.
 * Matcher uses java reflection API to compare fields of wanted and actual object.
 * <p>
 * Works similarly to EqualsBuilder.reflectionEquals(this, other, exlucdeFields) from
 * apache commons library.
 * <p>
 * <b>Warning</b> The equality check is shallow!
 * <p>
 * See examples in javadoc for {@link Matchers} class
 *
 * @param value
 *            the given value.
 * @param excludeFields
 *            fields to exclude, if field does not exist it is ignored.
 * @return <code>null</code>.
 */"
"public static <T> T anyVararg() {
    return (T) reportMatcher(AnyVararg.ANY_VARARG).returnNull();
}","public void test2424() throws Throwable {
    String string0 = Matchers.anyVararg();
    assertNull(string0);
}","/**
 * Any vararg, meaning any number and values of arguments.
 * <p>
 * Example:
 * <pre class=""code""><code class=""java"">
 *   //verification:
 *   mock.foo(1, 2);
 *   mock.foo(1, 2, 3, 4);
 *
 *   verify(mock, times(2)).foo(anyVararg());
 *
 *   //stubbing:
 *   when(mock.foo(anyVararg()).thenReturn(100);
 *
 *   //prints 100
 *   System.out.println(mock.foo(1, 2));
 *   //also prints 100
 *   System.out.println(mock.foo(1, 2, 3, 4));
 * </code></pre>
 * See examples in javadoc for {@link Matchers} class
 *
 * @return <code>null</code>.
 */"
"public static short shortThat(Matcher<Short> matcher) {
    return reportMatcher(matcher).returnZero();
}","public void test2525() throws Throwable {
    Class<Short> class0 = Short.class;
    Matcher<Short> matcher0 = IsNull.notNullValue(class0);
    short short0 = Matchers.shortThat(matcher0);
    assertEquals((short) 0, short0);
}","/**
 * Allows creating custom <code>Short</code> argument matchers.
 * <p>
 * See examples in javadoc for {@link Matchers} class
 *
 * @param matcher decides whether argument matches
 * @return <code>0</code>.
 */"
"public static <T> T any() {
    return (T) anyObject();
}","public void test2626() throws Throwable {
    String string0 = Matchers.any();
    assertNull(string0);
}","/**
 * Any object or <code>null</code>.
 * <p>
 * Shorter alias to {@link Matchers#anyObject()}
 * <p>
 * This method <b>*doesn't do any type checks*</b>, it is only there to avoid casting
 * in your code. This might however change (type checks could be added) in a
 * future major release.
 * <p>
 * See examples in javadoc for {@link Matchers} class
 *
 * @return <code>null</code>.
 */"
"public static byte eq(byte value) {
    return reportMatcher(new Equals(value)).returnZero();
}","public void test2727() throws Throwable {
    byte byte0 = Matchers.eq((byte) 9);
    assertEquals((byte) 0, byte0);
}","/**
 * <code>byte</code> argument that is equal to the given value.
 * <p>
 * See examples in javadoc for {@link Matchers} class
 *
 * @param value
 *            the given value.
 * @return <code>0</code>.
 */"
"public static int anyInt() {
    return reportMatcher(Any.ANY).returnZero();
}","public void test2828() throws Throwable {
    int int0 = Matchers.anyInt();
    assertEquals(0, int0);
}","/**
 * Any int, Integer or <code>null</code>.
 * <p>
 * This method <b>*doesn't do any type checks*</b>, it is only there to avoid casting
 * in your code. This might however change (type checks could be added) in a
 * future major release.
 * <p>
 * See examples in javadoc for {@link Matchers} class
 *
 * @return <code>0</code>.
 */"
"public static <T> T isA(Class<T> clazz) {
    return reportMatcher(new InstanceOf(clazz)).<T>returnFor(clazz);
}","public void test2929() throws Throwable {
    Class<Short> class0 = Short.class;
    Short short0 = Matchers.isA(class0);
    assertEquals((short) 0, (short) short0);
}","/**
 * <code>Object</code> argument that implements the given class.
 * <p>
 * See examples in javadoc for {@link Matchers} class
 *
 * @param <T>
 *            the accepted type.
 * @param clazz
 *            the class of the accepted type.
 * @return <code>null</code>.
 */"
"public static char charThat(Matcher<Character> matcher) {
    return reportMatcher(matcher).returnChar();
}","public void test3030() throws Throwable {
    IsAnything<Character> isAnything0 = new IsAnything<Character>(""notNull()"");
    char char0 = Matchers.charThat(isAnything0);
    assertEquals('\u0000', char0);
}","/**
 * Allows creating custom <code>Character</code> argument matchers.
 * <p>
 * See examples in javadoc for {@link Matchers} class
 *
 * @param matcher decides whether argument matches
 * @return <code>0</code>.
 */"
"public static byte anyByte() {
    return reportMatcher(Any.ANY).returnZero();
}","public void test3131() throws Throwable {
    byte byte0 = Matchers.anyByte();
    assertEquals((byte) 0, byte0);
}","/**
 * Any <code>byte</code>, <code>Byte</code> or <code>null</code>.
 * <p>
 * This method <b>*doesn't do any type checks*</b>, it is only there to avoid casting
 * in your code. This might however change (type checks could be added) in a
 * future major release.
 * <p>
 * See examples in javadoc for {@link Matchers} class
 *
 * @return <code>0</code>.
 */"
"public static String matches(String regex) {
    return reportMatcher(new Matches(regex)).returnString();
}","public void test3333() throws Throwable {
    String string0 = Matchers.matches(""n=wm`]6"");
    assertEquals("""", string0);
}","/**
 * <code>String</code> argument that matches the given regular expression.
 * <p>
 * See examples in javadoc for {@link Matchers} class
 *
 * @param regex
 *            the regular expression.
 * @return empty String ("""").
 */"
"public static float eq(float value) {
    return reportMatcher(new Equals(value)).returnZero();
}","public void test3434() throws Throwable {
    float float0 = Matchers.eq((-2720.677F));
    assertEquals(0.0F, float0, 0.01F);
}","/**
 * <code>float</code> argument that is equal to the given value.
 * <p>
 * See examples in javadoc for {@link Matchers} class
 *
 * @param value
 *            the given value.
 * @return <code>0</code>.
 */"
"public static long anyLong() {
    return reportMatcher(Any.ANY).returnZero();
}","public void test3636() throws Throwable {
    long long0 = Matchers.anyLong();
    assertEquals(0L, long0);
}","/**
 * Any <code>long</code>, <code>Long</code> or <code>null</code>.
 * <p>
 * This method <b>*doesn't do any type checks*</b>, it is only there to avoid casting
 * in your code. This might however change (type checks could be added) in a
 * future major release.
 * <p>
 * See examples in javadoc for {@link Matchers} class
 *
 * @return <code>0</code>.
 */"
"public static double eq(double value) {
    return reportMatcher(new Equals(value)).returnZero();
}","public void test3737() throws Throwable {
    double double0 = Matchers.eq((-2955.331419504));
    assertEquals(0.0, double0, 0.01);
}","/**
 * <code>double</code> argument that is equal to the given value.
 * <p>
 * See examples in javadoc for {@link Matchers} class
 *
 * @param value
 *            the given value.
 * @return <code>0</code>.
 */"
"public static short anyShort() {
    return reportMatcher(Any.ANY).returnZero();
}","public void test3838() throws Throwable {
    short short0 = Matchers.anyShort();
    assertEquals((short) 0, short0);
}","/**
 * Any <code>short</code>, <code>Short</code> or <code>null</code>.
 * <p>
 * This method <b>*doesn't do any type checks*</b>, it is only there to avoid casting
 * in your code. This might however change (type checks could be added) in a
 * future major release.
 * <p>
 * See examples in javadoc for {@link Matchers} class
 *
 * @return <code>0</code>.
 */"
"public static boolean anyBoolean() {
    return reportMatcher(Any.ANY).returnFalse();
}","public void test3939() throws Throwable {
    boolean boolean0 = Matchers.anyBoolean();
    assertFalse(boolean0);
}","/**
 * Any <code>boolean</code>, <code>Boolean</code> or <code>null</code>.
 * <p>
 * This method <b>*doesn't do any type checks*</b>, it is only there to avoid casting
 * in your code. This might however change (type checks could be added) in a
 * future major release.
 * <p>
 * See examples in javadoc for {@link Matchers} class
 *
 * @return <code>false</code>.
 */"
"public static float anyFloat() {
    return reportMatcher(Any.ANY).returnZero();
}","public void test4040() throws Throwable {
    float float0 = Matchers.anyFloat();
    assertEquals(0.0F, float0, 0.01F);
}","/**
 * Any <code>float</code>, <code>Float</code> or <code>null</code>.
 * <p>
 * This method <b>*doesn't do any type checks*</b>, it is only there to avoid casting
 * in your code. This might however change (type checks could be added) in a
 * future major release.
 * <p>
 * See examples in javadoc for {@link Matchers} class
 *
 * @return <code>0</code>.
 */"
"public static double anyDouble() {
    return reportMatcher(Any.ANY).returnZero();
}","public void test4141() throws Throwable {
    double double0 = Matchers.anyDouble();
    assertEquals(0.0, double0, 0.01);
}","/**
 * Any <code>double</code>, <code>Double</code> or <code>null</code>.
 * <p>
 * This method <b>*doesn't do any type checks*</b>, it is only there to avoid casting
 * in your code. This might however change (type checks could be added) in a
 * future major release.
 * <p>
 * See examples in javadoc for {@link Matchers} class
 *
 * @return <code>0</code>.
 */"
"public static long eq(long value) {
    return reportMatcher(new Equals(value)).returnZero();
}","public void test4242() throws Throwable {
    long long0 = Matchers.eq(0L);
    assertEquals(0L, long0);
}","/**
 * <code>long</code> argument that is equal to the given value.
 * <p>
 * See examples in javadoc for {@link Matchers} class
 *
 * @param value
 *            the given value.
 * @return <code>0</code>.
 */"
"public static <T> T isNotNull(Class<T> clazz) {
    return notNull(clazz);
}","public void test4343() throws Throwable {
    Class<Integer> class0 = Integer.class;
    Integer integer0 = Matchers.isNotNull(class0);
    assertNull(integer0);
}","/**
 * Not <code>null</code> argument, not necessary of the given class.
 * The class argument is provided to avoid casting.
 * <p>
 * alias to {@link Matchers#notNull(Class)}
 * <p>
 * See examples in javadoc for {@link Matchers} class
 *
 * @param clazz Type to avoid casting
 * @return <code>null</code>.
 */"
"public static <T> T isNull(Class<T> clazz) {
    return (T) reportMatcher(Null.NULL).returnNull();
}","public void test4747() throws Throwable {
    Class<Integer> class0 = Integer.class;
    Integer integer0 = Matchers.isNull(class0);
    assertNull(integer0);
}","/**
 * <code>null</code> argument.
 * The class argument is provided to avoid casting.
 * <p>
 * See examples in javadoc for {@link Matchers} class
 *
 * @param clazz Type to avoid casting
 * @return <code>null</code>.
 */"
"public static boolean eq(boolean value) {
    return reportMatcher(new Equals(value)).returnFalse();
}","public void test4949() throws Throwable {
    boolean boolean0 = Matchers.eq(true);
    assertFalse(boolean0);
}","/**
 * <code>boolean</code> argument that is equal to the given value.
 * <p>
 * See examples in javadoc for {@link Matchers} class
 *
 * @param value
 *            the given value.
 * @return <code>0</code>.
 */"
