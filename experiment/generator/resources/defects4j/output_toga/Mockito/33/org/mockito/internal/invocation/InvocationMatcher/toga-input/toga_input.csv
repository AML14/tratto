focal_method,test_prefix,docstring
"public boolean hasSimilarMethod(Invocation candidate) {
    String wantedMethodName = getMethod().getName();
    String currentMethodName = candidate.getMethod().getName();
    final boolean methodNameEquals = wantedMethodName.equals(currentMethodName);
    final boolean isUnverified = !candidate.isVerified();
    final boolean mockIsTheSame = getInvocation().getMock() == candidate.getMock();
    final boolean methodEquals = hasSameMethod(candidate);
    if (!methodNameEquals || !isUnverified || !mockIsTheSame) {
        return false;
    }
    final boolean overloadedButSameArgs = !methodEquals && safelyArgumentsMatch(candidate.getArguments());
    return !overloadedButSameArgs;
}","public void test000() throws Throwable {
    Invocation invocation0 = mock(Invocation.class, new ViolatedAssumptionAnswer());
    doReturn((List) null).when(invocation0).argumentsToMatchers();
    doReturn((Method) null).when(invocation0).getMethod();
    InvocationMatcher invocationMatcher0 = new InvocationMatcher(invocation0);
    // Undeclared exception!
    try {
        invocationMatcher0.hasSimilarMethod(invocation0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.mockito.internal.invocation.InvocationMatcher"", e);
    }
}","/**
 * similar means the same method name, same mock, unverified
 * and: if arguments are the same cannot be overloaded
 */"
"public boolean matches(Invocation actual) {
    return invocation.getMock().equals(actual.getMock()) && hasSameMethod(actual) && new ArgumentsComparator().argumentsMatch(this, actual);
}","public void test011() throws Throwable {
    Integer integer0 = new Integer(19);
    Invocation invocation0 = mock(Invocation.class, new ViolatedAssumptionAnswer());
    doReturn((List) null).when(invocation0).argumentsToMatchers();
    doReturn((Method) null, (Method) null).when(invocation0).getMethod();
    doReturn(integer0, integer0).when(invocation0).getMock();
    InvocationMatcher invocationMatcher0 = new InvocationMatcher(invocation0);
    // Undeclared exception!
    try {
        invocationMatcher0.matches(invocation0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.mockito.internal.invocation.InvocationMatcher"", e);
    }
}",""
"public String toString(PrintSettings printSettings) {
    return invocation.toString(matchers, printSettings);
}","public void test022() throws Throwable {
    Invocation invocation0 = mock(Invocation.class, new ViolatedAssumptionAnswer());
    doReturn((List) null).when(invocation0).argumentsToMatchers();
    doReturn((String) null).when(invocation0).toString(anyList(), any(org.mockito.internal.reporting.PrintSettings.class));
    InvocationMatcher invocationMatcher0 = new InvocationMatcher(invocation0);
    PrintSettings printSettings0 = new PrintSettings();
    String string0 = invocationMatcher0.toString(printSettings0);
    assertNull(string0);
}",""
"public StubbedInvocationMatcher(InvocationMatcher invocation, Answer answer) {
    super(invocation.getInvocation(), invocation.getMatchers());
    this.answers.add(answer);
}","public void test033() throws Throwable {
    Invocation invocation0 = mock(Invocation.class, new ViolatedAssumptionAnswer());
    doReturn((List) null, (List) null).when(invocation0).argumentsToMatchers();
    doReturn((String) null).when(invocation0).toString();
    InvocationMatcher invocationMatcher0 = new InvocationMatcher(invocation0);
    StubbedInvocationMatcher stubbedInvocationMatcher0 = null;
    try {
        stubbedInvocationMatcher0 = new StubbedInvocationMatcher(invocationMatcher0, (Answer) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.concurrent.ConcurrentLinkedQueue"", e);
    }
}",""
"public String toString() {
    return invocation.toString(matchers, new PrintSettings());
}","public void test044() throws Throwable {
    Invocation invocation0 = mock(Invocation.class, new ViolatedAssumptionAnswer());
    doReturn((List) null).when(invocation0).argumentsToMatchers();
    doReturn((String) null).when(invocation0).toString(anyList(), any(org.mockito.internal.reporting.PrintSettings.class));
    InvocationMatcher invocationMatcher0 = new InvocationMatcher(invocation0);
    String string0 = invocationMatcher0.toString();
    assertNull(string0);
}",""
"public Location getLocation() {
    return invocation.getLocation();
}","public void test055() throws Throwable {
    Invocation invocation0 = mock(Invocation.class, new ViolatedAssumptionAnswer());
    doReturn((List) null).when(invocation0).argumentsToMatchers();
    doReturn((Location) null).when(invocation0).getLocation();
    InvocationMatcher invocationMatcher0 = new InvocationMatcher(invocation0);
    Location location0 = invocationMatcher0.getLocation();
    assertNull(location0);
}",""
"public InvocationMatcher(Invocation invocation, List<Matcher> matchers) {
    this.invocation = invocation;
    if (matchers.isEmpty()) {
        this.matchers = invocation.argumentsToMatchers();
    } else {
        this.matchers = matchers;
    }
}","public void test066() throws Throwable {
    MockitoMethod mockitoMethod0 = mock(MockitoMethod.class, new ViolatedAssumptionAnswer());
    doReturn(true).when(mockitoMethod0).isVarArgs();
    Object[] objectArray0 = new Object[7];
    Invocation invocation0 = new Invocation((Object) null, mockitoMethod0, objectArray0, 4078, (RealMethod) null);
    List<Matcher> list0 = (List<Matcher>) invocation0.argumentsToMatchers();
    InvocationMatcher invocationMatcher0 = new InvocationMatcher(invocation0, list0);
}",""
"public boolean matches(Invocation actual) {
    return invocation.getMock().equals(actual.getMock()) && hasSameMethod(actual) && new ArgumentsComparator().argumentsMatch(this, actual);
}","public void test077() throws Throwable {
    Integer integer0 = new Integer(61);
    Invocation invocation0 = mock(Invocation.class, new ViolatedAssumptionAnswer());
    doReturn(integer0).when(invocation0).getMock();
    Charset charset0 = Charset.defaultCharset();
    Set<String> set0 = charset0.aliases();
    StringContainsInOrder stringContainsInOrder0 = new StringContainsInOrder(set0);
    Invocation invocation1 = mock(Invocation.class, new ViolatedAssumptionAnswer());
    doReturn((List) null).when(invocation1).argumentsToMatchers();
    doReturn(stringContainsInOrder0).when(invocation1).getMock();
    InvocationMatcher invocationMatcher0 = new InvocationMatcher(invocation1);
    boolean boolean0 = invocationMatcher0.matches(invocation0);
    assertFalse(boolean0);
}",""
"public boolean isVerified() {
    return verified;
}","public void test088() throws Throwable {
    MockitoMethod mockitoMethod0 = mock(MockitoMethod.class, new ViolatedAssumptionAnswer());
    doReturn(true).when(mockitoMethod0).isVarArgs();
    Object[] objectArray0 = new Object[7];
    Invocation invocation0 = new Invocation(mockitoMethod0, mockitoMethod0, objectArray0, 4070, (RealMethod) null);
    InvocationMatcher invocationMatcher0 = new InvocationMatcher(invocation0);
    invocationMatcher0.captureArgumentsFrom(invocation0);
    assertFalse(invocation0.isVerified());
}",""
"public static List<InvocationMatcher> createFrom(List<Invocation> invocations) {
    LinkedList<InvocationMatcher> out = new LinkedList<InvocationMatcher>();
    for (Invocation i : invocations) {
        out.add(new InvocationMatcher(i));
    }
    return out;
}","public void test1010() throws Throwable {
    Vector<Invocation> vector0 = new Vector<Invocation>();
    vector0.add((Invocation) null);
    // Undeclared exception!
    try {
        InvocationMatcher.createFrom(vector0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.mockito.internal.invocation.InvocationMatcher"", e);
    }
}",""
