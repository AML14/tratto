focal_method,test_prefix,docstring
"public static float floatThat(Matcher<Float> matcher) {
    return reportMatcher(matcher).returnZero();
}","public void test000() throws Throwable {
    Matcher<Float> matcher0 = HasToString.hasToString(""org.mockito.Matchers"");
    float float0 = Matchers.floatThat(matcher0);
    assertEquals(0.0F, float0, 0.01F);
}","/**
 * Allows creating custom argument matchers.
 * <p>
 * See examples in javadoc for {@link Matchers} class
 *
 * @param matcher decides whether argument matches
 * @return <code>0</code>.
 */"
"public static <T> T argThat(Matcher<T> matcher) {
    return reportMatcher(matcher).<T>returnNull();
}","public void test011() throws Throwable {
    Matcher<Object> matcher0 = Is.is((Object) ""x"");
    Matcher<Character> matcher1 = AllOf.allOf((Matcher<? super Character>) matcher0, (Matcher<? super Character>) matcher0, (Matcher<? super Character>) matcher0, (Matcher<? super Character>) matcher0);
    Matcher<SelfDescribing> matcher2 = IsSame.sameInstance((SelfDescribing) matcher1);
    SelfDescribing selfDescribing0 = Matchers.argThat(matcher2);
    assertNull(selfDescribing0);
}","/**
 * Allows creating custom argument matchers.
 * <p>
 * See examples in javadoc for {@link ArgumentMatcher} class
 *
 * @param matcher decides whether argument matches
 * @return <code>null</code>.
 */"
"public static Object isNotNull() {
    return notNull();
}","public void test022() throws Throwable {
    Object object0 = Matchers.isNotNull();
    assertNull(object0);
}","/**
 * not null argument.
 * <p>
 * alias to {@link Matchers#notNull()}
 * <p>
 * See examples in javadoc for {@link Matchers} class
 *
 * @return <code>null</code>.
 */"
"public static char eq(char value) {
    return reportMatcher(new Equals(value)).returnChar();
}","public void test044() throws Throwable {
    char char0 = Matchers.eq('\u0000');
    assertEquals('\u0000', char0);
}","/**
 * char argument that is equal to the given value.
 * <p>
 * See examples in javadoc for {@link Matchers} class
 *
 * @param value
 *            the given value.
 * @return <code>0</code>.
 */"
"public static boolean booleanThat(Matcher<Boolean> matcher) {
    return reportMatcher(matcher).returnFalse();
}","public void test055() throws Throwable {
    IsAnything<Boolean> isAnything0 = new IsAnything<Boolean>();
    boolean boolean0 = Matchers.booleanThat(isAnything0);
    assertFalse(boolean0);
}","/**
 * Allows creating custom argument matchers.
 * <p>
 * See examples in javadoc for {@link Matchers} class
 *
 * @param matcher decides whether argument matches
 * @return <code>false</code>.
 */"
"public static double doubleThat(Matcher<Double> matcher) {
    return reportMatcher(matcher).returnZero();
}","public void test066() throws Throwable {
    HasProperty<Object> hasProperty0 = new HasProperty<Object>("""");
    CombinableMatcher<Double> combinableMatcher0 = new CombinableMatcher<Double>(hasProperty0);
    double double0 = Matchers.doubleThat(combinableMatcher0);
    assertEquals(0.0, double0, 0.01);
}","/**
 * Allows creating custom argument matchers.
 * <p>
 * See examples in javadoc for {@link Matchers} class
 *
 * @param matcher decides whether argument matches
 * @return <code>0</code>.
 */"
"public static int eq(int value) {
    return reportMatcher(new Equals(value)).returnZero();
}","public void test077() throws Throwable {
    int int0 = Matchers.eq(0);
    assertEquals(0, int0);
}","/**
 * int argument that is equal to the given value.
 * <p>
 * See examples in javadoc for {@link Matchers} class
 *
 * @param value
 *            the given value.
 * @return <code>0</code>.
 */"
"public static int intThat(Matcher<Integer> matcher) {
    return reportMatcher(matcher).returnZero();
}","public void test088() throws Throwable {
    int int0 = Matchers.intThat((Matcher<Integer>) null);
    assertEquals(0, int0);
}","/**
 * Allows creating custom argument matchers.
 * <p>
 * See examples in javadoc for {@link Matchers} class
 *
 * @param matcher decides whether argument matches
 * @return <code>0</code>.
 */"
"public static byte byteThat(Matcher<Byte> matcher) {
    return reportMatcher(matcher).returnZero();
}","public void test099() throws Throwable {
    Byte byte0 = new Byte((byte) (-95));
    Matcher<Byte> matcher0 = OrderingComparison.lessThanOrEqualTo(byte0);
    byte byte1 = Matchers.byteThat(matcher0);
    assertEquals((byte) 0, byte1);
}","/**
 * Allows creating custom argument matchers.
 * <p>
 * See examples in javadoc for {@link Matchers} class
 *
 * @param matcher decides whether argument matches
 * @return <code>0</code>.
 */"
"public static long longThat(Matcher<Long> matcher) {
    return reportMatcher(matcher).returnZero();
}","public void test1010() throws Throwable {
    Long long0 = new Long(0L);
    Matcher<Long> matcher0 = IsSame.theInstance(long0);
    long long1 = Matchers.longThat(matcher0);
    assertEquals(0L, long1);
}","/**
 * Allows creating custom argument matchers.
 * <p>
 * See examples in javadoc for {@link Matchers} class
 *
 * @param matcher decides whether argument matches
 * @return <code>0</code>.
 */"
"public static Object isNull() {
    return reportMatcher(Null.NULL).returnNull();
}","public void test1111() throws Throwable {
    Object object0 = Matchers.isNull();
    assertNull(object0);
}","/**
 * null argument.
 * <p>
 * See examples in javadoc for {@link Matchers} class
 *
 * @return <code>null</code>.
 */"
"public static char anyChar() {
    return reportMatcher(Any.ANY).returnChar();
}","public void test1212() throws Throwable {
    char char0 = Matchers.anyChar();
    assertEquals('\u0000', char0);
}","/**
 * any char, Character or null.
 * <p>
 * See examples in javadoc for {@link Matchers} class
 *
 * @return <code>0</code>.
 */"
"public static <T> T any(Class<T> clazz) {
    return (T) anyObject();
}","public void test1313() throws Throwable {
    Class<Object> class0 = Object.class;
    Object object0 = Matchers.any(class0);
    assertNull(object0);
}","/**
 * any kind object, not necessary of the given class.
 * The class argument is provided only to avoid casting.
 * <p>
 * Sometimes looks better than anyObject() - especially when explicit casting is required
 * <p>
 * Alias to {@link Matchers#anyObject()}
 * <p>
 * See examples in javadoc for {@link Matchers} class
 *
 * @return <code>null</code>.
 */"
"public static String endsWith(String suffix) {
    return reportMatcher(new EndsWith(suffix)).returnString();
}","public void test1414() throws Throwable {
    String string0 = Matchers.endsWith(""kyF;97;"");
    assertEquals("""", string0);
}","/**
 * String argument that ends with the given suffix.
 * <p>
 * See examples in javadoc for {@link Matchers} class
 *
 * @param suffix
 *            the suffix.
 * @return empty String ("""").
 */"
"public static <T> Collection<T> anyCollectionOf(Class<T> clazz) {
    return (Collection) reportMatcher(Any.ANY).returnList();
}","public void test1515() throws Throwable {
    Class<Byte> class0 = Byte.class;
    Collection<Byte> collection0 = Matchers.anyCollectionOf(class0);
    assertNotNull(collection0);
}","/**
 * generic friendly alias to {@link Matchers#anyCollection()}.
 * It's an alternative to &#064;SuppressWarnings(""unchecked"") to keep code clean of compiler warnings.
 * <p>
 * any Collection or null.
 * <p>
 * See examples in javadoc for {@link Matchers} class
 *
 * @return empty Collection.
 */"
"public static String contains(String substring) {
    return reportMatcher(new Contains(substring)).returnString();
}","public void test1616() throws Throwable {
    String string0 = Matchers.contains("""");
    assertEquals("""", string0);
}","/**
 * String argument that contains the given substring.
 * <p>
 * See examples in javadoc for {@link Matchers} class
 *
 * @param substring
 *            the substring.
 * @return empty String ("""").
 */"
"public static Collection anyCollection() {
    return reportMatcher(Any.ANY).returnList();
}","public void test1717() throws Throwable {
    Collection collection0 = Matchers.anyCollection();
    assertNotNull(collection0);
}","/**
 * any Collection or null.
 * <p>
 * See examples in javadoc for {@link Matchers} class
 *
 * @return empty Collection.
 */"
"public static String startsWith(String prefix) {
    return reportMatcher(new StartsWith(prefix)).returnString();
}","public void test1919() throws Throwable {
    String string0 = Matchers.startsWith("""");
    assertEquals("""", string0);
}","/**
 * String argument that starts with the given prefix.
 * <p>
 * See examples in javadoc for {@link Matchers} class
 *
 * @param prefix
 *            the prefix.
 * @return empty String ("""").
 */"
"public static String anyString() {
    return reportMatcher(Any.ANY).returnString();
}","public void test2020() throws Throwable {
    String string0 = Matchers.anyString();
    assertEquals("""", string0);
}","/**
 * any String or null.
 * <p>
 * See examples in javadoc for {@link Matchers} class
 *
 * @return empty String ("""")
 */"
"public static short eq(short value) {
    return reportMatcher(new Equals(value)).returnZero();
}","public void test2121() throws Throwable {
    short short0 = Matchers.eq((short) 13);
    assertEquals((short) 0, short0);
}","/**
 * short argument that is equal to the given value.
 * <p>
 * See examples in javadoc for {@link Matchers} class
 *
 * @param value
 *            the given value.
 * @return <code>0</code>.
 */"
"public static <T> T refEq(T value, String... excludeFields) {
    return reportMatcher(new ReflectionEquals(value, excludeFields)).<T>returnNull();
}","public void test2222() throws Throwable {
    Character character0 = new Character('\""');
    Character character1 = Matchers.refEq(character0, (String[]) null);
    assertNull(character1);
}","/**
 * Object argument that is reflection-equal to the given value with support for excluding
 * selected fields from a class.
 * <p>
 * This matcher can be used when equals() is not implemented on compared objects.
 * Matcher uses java reflection API to compare fields of wanted and actual object.
 * <p>
 * Works similarly to EqualsBuilder.reflectionEquals(this, other, exlucdeFields) from
 * apache commons library.
 * <p>
 * See examples in javadoc for {@link Matchers} class
 *
 * @param value
 *            the given value.
 * @param excludeFields
 *            fields to exclude, if field does not exist it is ignored.
 * @return <code>null</code>.
 */"
"//TODO: after 1.8 check out Jay Fields' idea on any() matcher
/**
 * Any vararg, meaning any number and values of arguments.
 * <p>
 * Example:
 * <pre>
 *   //verification:
 *   mock.foo(1, 2);
 *   mock.foo(1, 2, 3, 4);
 *
 *   verify(mock, times(2)).foo(anyVararg());
 *
 *   //stubbing:
 *   when(mock.foo(anyVararg()).thenReturn(100);
 *
 *   //prints 100
 *   System.out.println(mock.foo(1, 2));
 *   //also prints 100
 *   System.out.println(mock.foo(1, 2, 3, 4));
 * </pre>
 * See examples in javadoc for {@link Matchers} class
 *
 * @return <code>null</code>.
 */
public static <T> T anyVararg() {
    return (T) reportMatcher(AnyVararg.ANY_VARARG).returnNull();
}","public void test2323() throws Throwable {
    Boolean boolean0 = Matchers.anyVararg();
    assertNull(boolean0);
}",""
"public static short shortThat(Matcher<Short> matcher) {
    return reportMatcher(matcher).returnZero();
}","public void test2424() throws Throwable {
    IsNull<Short> isNull0 = new IsNull<Short>();
    CombinableMatcher<Short> combinableMatcher0 = new CombinableMatcher<Short>(isNull0);
    short short0 = Matchers.shortThat(combinableMatcher0);
    assertEquals((short) 0, short0);
}","/**
 * Allows creating custom argument matchers.
 * <p>
 * See examples in javadoc for {@link Matchers} class
 *
 * @param matcher decides whether argument matches
 * @return <code>0</code>.
 */"
"public static byte eq(byte value) {
    return reportMatcher(new Equals(value)).returnZero();
}","public void test2525() throws Throwable {
    byte byte0 = Matchers.eq((byte) 0);
    assertEquals((byte) 0, byte0);
}","/**
 * byte argument that is equal to the given value.
 * <p>
 * See examples in javadoc for {@link Matchers} class
 *
 * @param value
 *            the given value.
 * @return <code>0</code>.
 */"
"public static int anyInt() {
    return reportMatcher(Any.ANY).returnZero();
}","public void test2626() throws Throwable {
    int int0 = Matchers.anyInt();
    assertEquals(0, int0);
}","/**
 * any int, Integer or null.
 * <p>
 * See examples in javadoc for {@link Matchers} class
 *
 * @return <code>0</code>.
 */"
"public static <T> T isA(Class<T> clazz) {
    return reportMatcher(new InstanceOf(clazz)).<T>returnNull();
}","public void test2727() throws Throwable {
    Class<Object> class0 = Object.class;
    Object object0 = Matchers.isA(class0);
    assertNull(object0);
}","/**
 * Object argument that implements the given class.
 * <p>
 * See examples in javadoc for {@link Matchers} class
 *
 * @param <T>
 *            the accepted type.
 * @param clazz
 *            the class of the accepted type.
 * @return <code>null</code>.
 */"
"public static char charThat(Matcher<Character> matcher) {
    return reportMatcher(matcher).returnChar();
}","public void test2828() throws Throwable {
    char char0 = Matchers.charThat((Matcher<Character>) null);
    assertEquals('\u0000', char0);
}","/**
 * Allows creating custom argument matchers.
 * <p>
 * See examples in javadoc for {@link Matchers} class
 *
 * @param matcher decides whether argument matches
 * @return <code>0</code>.
 */"
"public static byte anyByte() {
    return reportMatcher(Any.ANY).returnZero();
}","public void test2929() throws Throwable {
    byte byte0 = Matchers.anyByte();
    assertEquals((byte) 0, byte0);
}","/**
 * any byte, Byte or null
 * <p>
 * See examples in javadoc for {@link Matchers} class
 *
 * @return <code>0</code>.
 */"
"public static <T> T same(T value) {
    return reportMatcher(new Same(value)).<T>returnNull();
}","public void test3030() throws Throwable {
    RoundingMode roundingMode0 = RoundingMode.HALF_EVEN;
    Matchers.same(roundingMode0);
}","/**
 * Object argument that is the same as the given value.
 * <p>
 * See examples in javadoc for {@link Matchers} class
 *
 * @param <T>
 *            the type of the object, it is passed through to prevent casts.
 * @param value
 *            the given value.
 * @return <code>null</code>.
 */"
"public static String matches(String regex) {
    return reportMatcher(new Matches(regex)).returnString();
}","public void test3131() throws Throwable {
    String string0 = Matchers.matches("""");
    assertEquals("""", string0);
}","/**
 * String argument that matches the given regular expression.
 * <p>
 * See examples in javadoc for {@link Matchers} class
 *
 * @param regex
 *            the regular expression.
 * @return empty String ("""").
 */"
"public static float eq(float value) {
    return reportMatcher(new Equals(value)).returnZero();
}","public void test3232() throws Throwable {
    float float0 = Matchers.eq(0.0F);
    assertEquals(0.0F, float0, 0.01F);
}","/**
 * float argument that is equal to the given value.
 * <p>
 * See examples in javadoc for {@link Matchers} class
 *
 * @param value
 *            the given value.
 * @return <code>0</code>.
 */"
"public static <T> T eq(T value) {
    return reportMatcher(new Equals(value)).<T>returnNull();
}","public void test3333() throws Throwable {
    IsAnything<Boolean> isAnything0 = new IsAnything<Boolean>();
    Object object0 = Matchers.eq((Object) isAnything0);
    assertNull(object0);
}","/**
 * Object argument that is equal to the given value.
 * <p>
 * See examples in javadoc for {@link Matchers} class
 *
 * @param value
 *            the given value.
 * @return <code>null</code>.
 */"
"public static long anyLong() {
    return reportMatcher(Any.ANY).returnZero();
}","public void test3434() throws Throwable {
    long long0 = Matchers.anyLong();
    assertEquals(0L, long0);
}","/**
 * any long, Long or null.
 * <p>
 * See examples in javadoc for {@link Matchers} class
 *
 * @return <code>0</code>.
 */"
"public static double eq(double value) {
    return reportMatcher(new Equals(value)).returnZero();
}","public void test3535() throws Throwable {
    double double0 = Matchers.eq((-1.0));
    assertEquals(0.0, double0, 0.01);
}","/**
 * double argument that is equal to the given value.
 * <p>
 * See examples in javadoc for {@link Matchers} class
 *
 * @param value
 *            the given value.
 * @return <code>0</code>.
 */"
"public static short anyShort() {
    return reportMatcher(Any.ANY).returnZero();
}","public void test3636() throws Throwable {
    short short0 = Matchers.anyShort();
    assertEquals((short) 0, short0);
}","/**
 * any short, Short or null.
 * <p>
 * See examples in javadoc for {@link Matchers} class
 *
 * @return <code>0</code>.
 */"
"public static boolean anyBoolean() {
    return reportMatcher(Any.ANY).returnFalse();
}","public void test3737() throws Throwable {
    boolean boolean0 = Matchers.anyBoolean();
    assertFalse(boolean0);
}","/**
 * any boolean, Boolean or null.
 * <p>
 * See examples in javadoc for {@link Matchers} class
 *
 * @return <code>false</code>.
 */"
"public static float anyFloat() {
    return reportMatcher(Any.ANY).returnZero();
}","public void test3838() throws Throwable {
    float float0 = Matchers.anyFloat();
    assertEquals(0.0F, float0, 0.01F);
}","/**
 * any float, Float or null.
 * <p>
 * See examples in javadoc for {@link Matchers} class
 *
 * @return <code>0</code>.
 */"
"public static double anyDouble() {
    return reportMatcher(Any.ANY).returnZero();
}","public void test3939() throws Throwable {
    double double0 = Matchers.anyDouble();
    assertEquals(0.0, double0, 0.01);
}","/**
 * any double, Double or null.
 * <p>
 * See examples in javadoc for {@link Matchers} class
 *
 * @return <code>0</code>.
 */"
"public static long eq(long value) {
    return reportMatcher(new Equals(value)).returnZero();
}","public void test4040() throws Throwable {
    long long0 = Matchers.eq((long) 0);
    assertEquals(0L, long0);
}","/**
 * long argument that is equal to the given value.
 * <p>
 * See examples in javadoc for {@link Matchers} class
 *
 * @param value
 *            the given value.
 * @return <code>0</code>.
 */"
"public static <T> T any() {
    return (T) anyObject();
}","public void test4444() throws Throwable {
    Byte byte0 = Matchers.any();
    assertNull(byte0);
}","/**
 * any object or null
 * <p>
 * Shorter alias to {@link Matchers#anyObject()}
 * <p>
 * See examples in javadoc for {@link Matchers} class
 *
 * @return <code>null</code>.
 */"
"public static boolean eq(boolean value) {
    return reportMatcher(new Equals(value)).returnFalse();
}","public void test4646() throws Throwable {
    boolean boolean0 = Matchers.eq(false);
    assertFalse(boolean0);
}","/**
 * boolean argument that is equal to the given value.
 * <p>
 * See examples in javadoc for {@link Matchers} class
 *
 * @param value
 *            the given value.
 * @return <code>0</code>.
 */"
