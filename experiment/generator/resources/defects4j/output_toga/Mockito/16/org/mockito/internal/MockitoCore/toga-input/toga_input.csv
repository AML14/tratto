focal_method,test_prefix,docstring
"public <T> VoidMethodStubbable<T> stubVoid(T mock) {
    MockHandlerInterface<T> handler = mockUtil.getMockHandler(mock);
    mockingProgress.stubbingStarted();
    return handler.voidMethodStubbable(mock);
}","public void test000() throws Throwable {
    MockitoCore mockitoCore0 = new MockitoCore();
    // Undeclared exception!
    try {
        mockitoCore0.stubVoid((Object) ""K,8K\""(:g&z4VhOoB"");
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
    }
}",""
"@Deprecated
public <T> DeprecatedOngoingStubbing<T> stub(T methodCall) {
    mockingProgress.stubbingStarted();
    return (DeprecatedOngoingStubbing) stub();
}","public void test011() throws Throwable {
    MockitoCore mockitoCore0 = new MockitoCore();
    // Undeclared exception!
    try {
        mockitoCore0.stub(""Long"");
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
    }
}",""
"public <T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) {
    return mock(classToMock, mockSettings);
}","public void test022() throws Throwable {
    MockitoCore mockitoCore0 = new MockitoCore();
    Class<MockSettingsImpl> class0 = MockSettingsImpl.class;
    MockSettingsImpl mockSettingsImpl0 = new MockSettingsImpl();
    // Undeclared exception!
    try {
        mockitoCore0.mock(class0, (MockSettings) mockSettingsImpl0, true);
        fail(""Expecting exception: IncompatibleClassChangeError"");
    } catch (IncompatibleClassChangeError e) {
        //
        // Expected non-static field org.mockito.cglib.proxy.Enhancer.serialVersionUID
        //
        verifyException(""org.mockito.cglib.proxy.Enhancer"", e);
    }
}",""
"public Stubber doAnswer(Answer answer) {
    mockingProgress.stubbingStarted();
    mockingProgress.resetOngoingStubbing();
    return new StubberImpl().doAnswer(answer);
}","public void test033() throws Throwable {
    MockitoCore mockitoCore0 = new MockitoCore();
    ClonesArguments clonesArguments0 = new ClonesArguments();
    Stubber stubber0 = mockitoCore0.doAnswer(clonesArguments0);
    assertNotNull(stubber0);
}",""
"public <T> OngoingStubbing<T> when(T methodCall) {
    mockingProgress.stubbingStarted();
    return (OngoingStubbing) stub();
}","public void test044() throws Throwable {
    MockitoCore mockitoCore0 = new MockitoCore();
    Object object0 = new Object();
    // Undeclared exception!
    try {
        mockitoCore0.when(object0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
    }
}",""
"public Invocation getLastInvocation() {
    OngoingStubbingImpl ongoingStubbing = ((OngoingStubbingImpl) mockingProgress.pullOngoingStubbing());
    List<Invocation> allInvocations = ongoingStubbing.getRegisteredInvocations();
    return allInvocations.get(allInvocations.size() - 1);
}","public void test055() throws Throwable {
    MockitoCore mockitoCore0 = new MockitoCore();
    // Undeclared exception!
    try {
        mockitoCore0.getLastInvocation();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.mockito.internal.MockitoCore"", e);
    }
}","/**
 * For testing purposes only. Is not the part of main API.
 * @return last invocation
 */"
"public void validateMockitoUsage() {
    mockingProgress.validateState();
}","public void test066() throws Throwable {
    MockitoCore mockitoCore0 = new MockitoCore();
    mockitoCore0.validateMockitoUsage();
}",""
"public IOngoingStubbing stub() {
    IOngoingStubbing stubbing = mockingProgress.pullOngoingStubbing();
    if (stubbing == null) {
        mockingProgress.reset();
        reporter.missingMethodInvocation();
    }
    return stubbing;
}","public void test077() throws Throwable {
    MockitoCore mockitoCore0 = new MockitoCore();
    // Undeclared exception!
    try {
        mockitoCore0.stub();
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
    }
}",""
"public <T> T verify(T mock, VerificationMode mode) {
    if (mock == null) {
        reporter.nullPassedToVerify();
    } else if (!mockUtil.isMock(mock)) {
        reporter.notAMockPassedToVerify();
    }
    mockingProgress.verificationStarted(mode);
    return mock;
}","public void test088() throws Throwable {
    Only only0 = new Only();
    MockitoCore mockitoCore0 = new MockitoCore();
    // Undeclared exception!
    try {
        mockitoCore0.verify((Object) only0, (VerificationMode) only0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
    }
}",""
"public <T> T verify(T mock, VerificationMode mode) {
    if (mock == null) {
        reporter.nullPassedToVerify();
    } else if (!mockUtil.isMock(mock)) {
        reporter.notAMockPassedToVerify();
    }
    mockingProgress.verificationStarted(mode);
    return mock;
}","public void test099() throws Throwable {
    MockitoCore mockitoCore0 = new MockitoCore();
    // Undeclared exception!
    try {
        mockitoCore0.verify((Object) null, (VerificationMode) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
    }
}",""
"public <T> void reset(T... mocks) {
    mockingProgress.validateState();
    mockingProgress.reset();
    mockingProgress.resetOngoingStubbing();
    for (T m : mocks) {
        mockUtil.resetMock(m);
    }
}","public void test1010() throws Throwable {
    MockitoCore mockitoCore0 = new MockitoCore();
    Invocation[] invocationArray0 = new Invocation[0];
    mockitoCore0.reset(invocationArray0);
}",""
"public <T> void reset(T... mocks) {
    mockingProgress.validateState();
    mockingProgress.reset();
    mockingProgress.resetOngoingStubbing();
    for (T m : mocks) {
        mockUtil.resetMock(m);
    }
}","public void test1111() throws Throwable {
    MockitoCore mockitoCore0 = new MockitoCore();
    Invocation[] invocationArray0 = new Invocation[1];
    // Undeclared exception!
    try {
        mockitoCore0.reset(invocationArray0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
    }
}",""
"public void verifyNoMoreInteractions(Object... mocks) {
    assertMocksNotEmpty(mocks);
    mockingProgress.validateState();
    for (Object mock : mocks) {
        try {
            if (mock == null) {
                reporter.nullPassedToVerifyNoMoreInteractions();
            }
            mockUtil.getMockHandler(mock).verifyNoMoreInteractions();
        } catch (NotAMockException e) {
            reporter.notAMockPassedToVerifyNoMoreInteractions();
        }
    }
}","public void test1212() throws Throwable {
    MockitoCore mockitoCore0 = new MockitoCore();
    Object[] objectArray0 = new Object[1];
    // Undeclared exception!
    try {
        mockitoCore0.verifyNoMoreInteractions(objectArray0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
    }
}",""
"public void verifyNoMoreInteractions(Object... mocks) {
    assertMocksNotEmpty(mocks);
    mockingProgress.validateState();
    for (Object mock : mocks) {
        try {
            if (mock == null) {
                reporter.nullPassedToVerifyNoMoreInteractions();
            }
            mockUtil.getMockHandler(mock).verifyNoMoreInteractions();
        } catch (NotAMockException e) {
            reporter.notAMockPassedToVerifyNoMoreInteractions();
        }
    }
}","public void test1313() throws Throwable {
    MockitoCore mockitoCore0 = new MockitoCore();
    Object[] objectArray0 = new Object[2];
    objectArray0[0] = (Object) mockitoCore0;
    // Undeclared exception!
    try {
        mockitoCore0.verifyNoMoreInteractions(objectArray0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
    }
}",""
"public void verifyNoMoreInteractions(Object... mocks) {
    assertMocksNotEmpty(mocks);
    mockingProgress.validateState();
    for (Object mock : mocks) {
        try {
            if (mock == null) {
                reporter.nullPassedToVerifyNoMoreInteractions();
            }
            mockUtil.getMockHandler(mock).verifyNoMoreInteractions();
        } catch (NotAMockException e) {
            reporter.notAMockPassedToVerifyNoMoreInteractions();
        }
    }
}","public void test1414() throws Throwable {
    MockitoCore mockitoCore0 = new MockitoCore();
    // Undeclared exception!
    try {
        mockitoCore0.verifyNoMoreInteractions((Object[]) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
    }
}",""
"public void verifyNoMoreInteractions(Object... mocks) {
    assertMocksNotEmpty(mocks);
    mockingProgress.validateState();
    for (Object mock : mocks) {
        try {
            if (mock == null) {
                reporter.nullPassedToVerifyNoMoreInteractions();
            }
            mockUtil.getMockHandler(mock).verifyNoMoreInteractions();
        } catch (NotAMockException e) {
            reporter.notAMockPassedToVerifyNoMoreInteractions();
        }
    }
}","public void test1515() throws Throwable {
    MockitoCore mockitoCore0 = new MockitoCore();
    Object[] objectArray0 = new Object[0];
    // Undeclared exception!
    try {
        mockitoCore0.verifyNoMoreInteractions(objectArray0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
    }
}",""
"public InOrder inOrder(Object... mocks) {
    if (mocks == null || mocks.length == 0) {
        reporter.mocksHaveToBePassedWhenCreatingInOrder();
    }
    for (Object mock : mocks) {
        if (mock == null) {
            reporter.nullPassedWhenCreatingInOrder();
        } else if (!mockUtil.isMock(mock)) {
            reporter.notAMockPassedWhenCreatingInOrder();
        }
    }
    return new InOrderImpl(Arrays.asList(mocks));
}","public void test1616() throws Throwable {
    MockitoCore mockitoCore0 = new MockitoCore();
    // Undeclared exception!
    try {
        mockitoCore0.inOrder((Object[]) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
    }
}",""
"public InOrder inOrder(Object... mocks) {
    if (mocks == null || mocks.length == 0) {
        reporter.mocksHaveToBePassedWhenCreatingInOrder();
    }
    for (Object mock : mocks) {
        if (mock == null) {
            reporter.nullPassedWhenCreatingInOrder();
        } else if (!mockUtil.isMock(mock)) {
            reporter.notAMockPassedWhenCreatingInOrder();
        }
    }
    return new InOrderImpl(Arrays.asList(mocks));
}","public void test1717() throws Throwable {
    MockitoCore mockitoCore0 = new MockitoCore();
    Object[] objectArray0 = new Object[2];
    // Undeclared exception!
    try {
        mockitoCore0.inOrder(objectArray0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
    }
}",""
"public InOrder inOrder(Object... mocks) {
    if (mocks == null || mocks.length == 0) {
        reporter.mocksHaveToBePassedWhenCreatingInOrder();
    }
    for (Object mock : mocks) {
        if (mock == null) {
            reporter.nullPassedWhenCreatingInOrder();
        } else if (!mockUtil.isMock(mock)) {
            reporter.notAMockPassedWhenCreatingInOrder();
        }
    }
    return new InOrderImpl(Arrays.asList(mocks));
}","public void test1818() throws Throwable {
    MockitoCore mockitoCore0 = new MockitoCore();
    Object[] objectArray0 = new Object[0];
    // Undeclared exception!
    try {
        mockitoCore0.inOrder(objectArray0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
    }
}",""
"public InOrder inOrder(Object... mocks) {
    if (mocks == null || mocks.length == 0) {
        reporter.mocksHaveToBePassedWhenCreatingInOrder();
    }
    for (Object mock : mocks) {
        if (mock == null) {
            reporter.nullPassedWhenCreatingInOrder();
        } else if (!mockUtil.isMock(mock)) {
            reporter.notAMockPassedWhenCreatingInOrder();
        }
    }
    return new InOrderImpl(Arrays.asList(mocks));
}","public void test1919() throws Throwable {
    MockitoCore mockitoCore0 = new MockitoCore();
    Object[] objectArray0 = new Object[2];
    objectArray0[0] = (Object) mockitoCore0;
    // Undeclared exception!
    try {
        mockitoCore0.inOrder(objectArray0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
    }
}",""
