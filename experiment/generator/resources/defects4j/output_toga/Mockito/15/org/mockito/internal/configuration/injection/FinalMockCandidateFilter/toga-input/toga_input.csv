focal_method,test_prefix,docstring
"public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, final Object fieldInstance) {
    if (mocks.size() == 1) {
        final Object matchingMock = mocks.iterator().next();
        return new OngoingInjecter() {

            public boolean thenInject() {
                try {
                    new FieldSetter(fieldInstance, field).set(matchingMock);
                } catch (Exception e) {
                    throw new MockitoException(""Problems injecting dependency in "" + field.getName(), e);
                }
                return true;
            }
        };
    }
    return new OngoingInjecter() {

        public boolean thenInject() {
            return false;
        }
    };
}","public void test00() throws Throwable {
    FinalMockCandidateFilter finalMockCandidateFilter0 = new FinalMockCandidateFilter();
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    OngoingInjecter ongoingInjecter0 = finalMockCandidateFilter0.filterCandidate(linkedList0, (Field) null, (Object) null);
    assertNotNull(ongoingInjecter0);
}",""
"public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, final Object fieldInstance) {
    if (mocks.size() == 1) {
        final Object matchingMock = mocks.iterator().next();
        return new OngoingInjecter() {

            public boolean thenInject() {
                try {
                    new FieldSetter(fieldInstance, field).set(matchingMock);
                } catch (Exception e) {
                    throw new MockitoException(""Problems injecting dependency in "" + field.getName(), e);
                }
                return true;
            }
        };
    }
    return new OngoingInjecter() {

        public boolean thenInject() {
            return false;
        }
    };
}","public void test11() throws Throwable {
    FinalMockCandidateFilter finalMockCandidateFilter0 = new FinalMockCandidateFilter();
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    linkedList0.add((Object) finalMockCandidateFilter0);
    OngoingInjecter ongoingInjecter0 = finalMockCandidateFilter0.filterCandidate(linkedList0, (Field) null, (Object) null);
    assertNotNull(ongoingInjecter0);
}",""
