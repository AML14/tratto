focal_method,test_prefix,docstring
"public int getPlatform() {
    return platform;
}","public void test000() throws Throwable {
    File file0 = MockFile.createTempFile(""o-x|mHfp\""v."", ""o-x|mHfp\""v."");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(file0, ""q6rJNg*TJ}"");
    zipArchiveEntry0.setPlatform(8);
    int int0 = zipArchiveEntry0.getUnixMode();
    assertEquals(8, zipArchiveEntry0.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"public int getUnixMode() {
    return platform != PLATFORM_UNIX ? 0 : (int) ((getExternalAttributes() >> SHORT_SHIFT) & SHORT_MASK);
}","public void test001() throws Throwable {
    File file0 = MockFile.createTempFile(""o-x|mHfp\""v."", ""o-x|mHfp\""v."");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(file0, ""q6rJNg*TJ}"");
    zipArchiveEntry0.setPlatform(8);
    int int0 = zipArchiveEntry0.getUnixMode();
    assertEquals(0, int0);
}","/**
 * Unix permission.
 * @return the unix permissions
 */"
"public int getMethod() {
    return method;
}","public void test012() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""IGdv~XX,hFq@<!N vp"");
    zipArchiveEntry0.setMethod(40960);
    boolean boolean0 = zipArchiveEntry0.isSupportedCompressionMethod();
    assertEquals(40960, zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 */"
"public boolean isSupportedCompressionMethod() {
    return method == STORED || method == DEFLATED;
}","public void test013() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""IGdv~XX,hFq@<!N vp"");
    zipArchiveEntry0.setMethod(40960);
    boolean boolean0 = zipArchiveEntry0.isSupportedCompressionMethod();
    assertFalse(boolean0);
}","/**
 * Checks whether the compression method of this entry is supported,
 * i.e. whether the content of this entry can be accessed.
 *
 * @since Commons Compress 1.1
 * @see <a href=""https://issues.apache.org/jira/browse/COMPRESS-93""
 *         >COMPRESS-93</a>
 * @return <code>true</code> if the compression method is known
 *         and supported, <code>false</code> otherwise
 */"
"public int getMethod() {
    return method;
}","public void test024() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setMethod(806);
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry((ZipEntry) zipArchiveEntry0);
    assertEquals(806, zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test025() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setMethod(806);
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry((ZipEntry) zipArchiveEntry0);
    assertEquals(0L, zipArchiveEntry1.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"public int getMethod() {
    return method;
}","public void test036() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""e~>HA< 'A5 q/"");
    zipArchiveEntry0.isDirectory();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test037() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""e~>HA< 'A5 q/"");
    zipArchiveEntry0.isDirectory();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"public int getPlatform() {
    return platform;
}","public void test038() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""e~>HA< 'A5 q/"");
    zipArchiveEntry0.isDirectory();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test039() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""e~>HA< 'A5 q/"");
    zipArchiveEntry0.isDirectory();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"public int getPlatform() {
    return platform;
}","public void test0410() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setUnixMode(32768);
    int int0 = zipArchiveEntry0.getUnixMode();
    assertEquals(3, zipArchiveEntry0.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"public int getUnixMode() {
    return platform != PLATFORM_UNIX ? 0 : (int) ((getExternalAttributes() >> SHORT_SHIFT) & SHORT_MASK);
}","public void test0411() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setUnixMode(32768);
    int int0 = zipArchiveEntry0.getUnixMode();
    assertEquals(32768, int0);
}","/**
 * Unix permission.
 * @return the unix permissions
 */"
"public int getUnixMode() {
    return platform != PLATFORM_UNIX ? 0 : (int) ((getExternalAttributes() >> SHORT_SHIFT) & SHORT_MASK);
}","public void test0512() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setUnixMode(14);
    int int0 = zipArchiveEntry0.getPlatform();
    assertEquals(14, zipArchiveEntry0.getUnixMode());
}","/**
 * Unix permission.
 * @return the unix permissions
 */"
"public int getPlatform() {
    return platform;
}","public void test0513() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setUnixMode(14);
    int int0 = zipArchiveEntry0.getPlatform();
    assertEquals(3, int0);
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"public int getPlatform() {
    return platform;
}","public void test0614() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setPlatform((-1014));
    int int0 = zipArchiveEntry0.getPlatform();
    assertEquals((-1014), int0);
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"public int getMethod() {
    return method;
}","public void test0715() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    zipArchiveEntry0.getName();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test0716() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    zipArchiveEntry0.getName();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test0717() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    zipArchiveEntry0.getName();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"public int getPlatform() {
    return platform;
}","public void test0718() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    zipArchiveEntry0.getName();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"public int getMethod() {
    return method;
}","public void test0819() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""FATAL: UTF-8 encoding not supported."");
    assertEquals((-1), zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 */"
"public int getMethod() {
    return method;
}","public void test0820() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""FATAL: UTF-8 encoding not supported."");
    zipArchiveEntry0.setMethod(0);
    int int0 = zipArchiveEntry0.getMethod();
    assertEquals(0, int0);
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 */"
"public int getMethod() {
    return method;
}","public void test0921() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""IGdv~XX,hFq@<!N vp"");
    zipArchiveEntry0.setMethod(40960);
    int int0 = zipArchiveEntry0.getMethod();
    assertEquals(40960, int0);
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test1022() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    zipArchiveEntry0.setInternalAttributes((-7));
    int int0 = zipArchiveEntry0.getInternalAttributes();
    assertEquals((-7), int0);
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"public ZipExtraField getExtraField(ZipShort type) {
    if (extraFields != null) {
        return (ZipExtraField) extraFields.get(type);
    }
    return null;
}","public void test1123() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""FATAL: UTF-8 encoding not supported."");
    byte[] byteArray0 = new byte[5];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    ZipShort zipShort0 = new ZipShort(byteArray0);
    ZipExtraField zipExtraField0 = zipArchiveEntry0.getExtraField(zipShort0);
    assertNotNull(zipExtraField0);
}","/**
 * Looks up an extra field by its header id.
 *
 * @return null if no such field exists.
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test1124() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""FATAL: UTF-8 encoding not supported."");
    byte[] byteArray0 = new byte[5];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    ZipShort zipShort0 = new ZipShort(byteArray0);
    ZipExtraField zipExtraField0 = zipArchiveEntry0.getExtraField(zipShort0);
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"public int getPlatform() {
    return platform;
}","public void test1125() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""FATAL: UTF-8 encoding not supported."");
    byte[] byteArray0 = new byte[5];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    ZipShort zipShort0 = new ZipShort(byteArray0);
    ZipExtraField zipExtraField0 = zipArchiveEntry0.getExtraField(zipShort0);
    assertEquals(0, zipArchiveEntry0.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test1126() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""FATAL: UTF-8 encoding not supported."");
    byte[] byteArray0 = new byte[5];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    ZipShort zipShort0 = new ZipShort(byteArray0);
    ZipExtraField zipExtraField0 = zipArchiveEntry0.getExtraField(zipShort0);
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"public int getMethod() {
    return method;
}","public void test1127() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""FATAL: UTF-8 encoding not supported."");
    byte[] byteArray0 = new byte[5];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    ZipShort zipShort0 = new ZipShort(byteArray0);
    ZipExtraField zipExtraField0 = zipArchiveEntry0.getExtraField(zipShort0);
    assertEquals((-1), zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test1228() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""ZIP compression method can not be negative: "");
    zipArchiveEntry0.setUnixMode(1042);
    long long0 = zipArchiveEntry0.getExternalAttributes();
    assertEquals(68288513L, long0);
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"public int getPlatform() {
    return platform;
}","public void test1329() throws Throwable {
    MockFile mockFile0 = new MockFile(""SP{RQD."", ""(]9X:N+hD"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""(]9X:N+hD"");
    zipArchiveEntry0.setUnixMode((-877));
    long long0 = zipArchiveEntry0.getExternalAttributes();
    assertEquals(3, zipArchiveEntry0.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test1330() throws Throwable {
    MockFile mockFile0 = new MockFile(""SP{RQD."", ""(]9X:N+hD"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""(]9X:N+hD"");
    zipArchiveEntry0.setUnixMode((-877));
    long long0 = zipArchiveEntry0.getExternalAttributes();
    assertEquals((-57475072L), long0);
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"public int getMethod() {
    return method;
}","public void test1431() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    ZipExtraField[] zipExtraFieldArray0 = new ZipExtraField[1];
    byte[] byteArray0 = new byte[4];
    UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField("""", byteArray0);
    zipExtraFieldArray0[0] = (ZipExtraField) unicodePathExtraField0;
    zipArchiveEntry0.setExtraFields(zipExtraFieldArray0);
    byte[] byteArray1 = zipArchiveEntry0.getCentralDirectoryExtra();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 */"
"public int getPlatform() {
    return platform;
}","public void test1432() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    ZipExtraField[] zipExtraFieldArray0 = new ZipExtraField[1];
    byte[] byteArray0 = new byte[4];
    UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField("""", byteArray0);
    zipExtraFieldArray0[0] = (ZipExtraField) unicodePathExtraField0;
    zipArchiveEntry0.setExtraFields(zipExtraFieldArray0);
    byte[] byteArray1 = zipArchiveEntry0.getCentralDirectoryExtra();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"public byte[] getCentralDirectoryExtra() {
    return ExtraFieldUtils.mergeCentralDirectoryData(getExtraFields());
}","public void test1433() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    ZipExtraField[] zipExtraFieldArray0 = new ZipExtraField[1];
    byte[] byteArray0 = new byte[4];
    UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField("""", byteArray0);
    zipExtraFieldArray0[0] = (ZipExtraField) unicodePathExtraField0;
    zipArchiveEntry0.setExtraFields(zipExtraFieldArray0);
    byte[] byteArray1 = zipArchiveEntry0.getCentralDirectoryExtra();
    assertEquals(9, byteArray1.length);
}","/**
 * Retrieves the extra data for the central directory.
 * @return the central directory extra data
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test1434() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    ZipExtraField[] zipExtraFieldArray0 = new ZipExtraField[1];
    byte[] byteArray0 = new byte[4];
    UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField("""", byteArray0);
    zipExtraFieldArray0[0] = (ZipExtraField) unicodePathExtraField0;
    zipArchiveEntry0.setExtraFields(zipExtraFieldArray0);
    byte[] byteArray1 = zipArchiveEntry0.getCentralDirectoryExtra();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"public void setExtra(byte[] extra) throws RuntimeException {
    try {
        ZipExtraField[] local = ExtraFieldUtils.parse(extra, true);
        mergeExtraFields(local, true);
    } catch (ZipException e) {
        throw new RuntimeException(e.getMessage(), e);
    }
}","public void test1535() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    byte[] byteArray0 = new byte[4];
    byteArray0[2] = (byte) 5;
    try {
        zipArchiveEntry0.setExtra(byteArray0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // data starting at 0 is in unknown format
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveEntry"", e);
    }
}","/**
 * Throws an Exception if extra data cannot be parsed into extra fields.
 * @param extra an array of bytes to be parsed into extra fields
 * @throws RuntimeException if the bytes cannot be parsed
 * @throws RuntimeException on error
 */"
"public void setExtra(byte[] extra) throws RuntimeException {
    try {
        ZipExtraField[] local = ExtraFieldUtils.parse(extra, true);
        mergeExtraFields(local, true);
    } catch (ZipException e) {
        throw new RuntimeException(e.getMessage(), e);
    }
}","public void test1636() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    try {
        zipArchiveEntry0.setExtra((byte[]) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ExtraFieldUtils"", e);
    }
}","/**
 * Throws an Exception if extra data cannot be parsed into extra fields.
 * @param extra an array of bytes to be parsed into extra fields
 * @throws RuntimeException if the bytes cannot be parsed
 * @throws RuntimeException on error
 */"
"public void setCentralDirectoryExtra(byte[] b) {
    try {
        ZipExtraField[] central = ExtraFieldUtils.parse(b, false);
        mergeExtraFields(central, false);
    } catch (ZipException e) {
        throw new RuntimeException(e.getMessage(), e);
    }
}","public void test1737() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""/"");
    byte[] byteArray0 = new byte[6];
    byteArray0[2] = (byte) 50;
    // Undeclared exception!
    try {
        zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // data starting at 0 is in unknown format
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveEntry"", e);
    }
}","/**
 * Sets the central directory part of extra fields.
 */"
"public void setCentralDirectoryExtra(byte[] b) {
    try {
        ZipExtraField[] central = ExtraFieldUtils.parse(b, false);
        mergeExtraFields(central, false);
    } catch (ZipException e) {
        throw new RuntimeException(e.getMessage(), e);
    }
}","public void test1838() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    // Undeclared exception!
    try {
        zipArchiveEntry0.setCentralDirectoryExtra((byte[]) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ExtraFieldUtils"", e);
    }
}","/**
 * Sets the central directory part of extra fields.
 */"
"public void addExtraField(ZipExtraField ze) {
    if (extraFields == null) {
        extraFields = new LinkedHashMap();
    }
    extraFields.put(ze.getHeaderId(), ze);
    setExtra();
}","public void test1939() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""8$vE!0<"");
    // Undeclared exception!
    try {
        zipArchiveEntry0.addExtraField((ZipExtraField) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveEntry"", e);
    }
}","/**
 * Adds an extra fields - replacing an already present extra field
 * of the same type.
 *
 * <p>If no extra field of the same type exists, the field will be
 * added as last field.</p>
 * @param ze an extra field
 */"
"public void addAsFirstExtraField(ZipExtraField ze) {
    LinkedHashMap copy = extraFields;
    extraFields = new LinkedHashMap();
    extraFields.put(ze.getHeaderId(), ze);
    if (copy != null) {
        copy.remove(ze.getHeaderId());
        extraFields.putAll(copy);
    }
    setExtra();
}","public void test2040() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    UnrecognizedExtraField unrecognizedExtraField0 = new UnrecognizedExtraField();
    // Undeclared exception!
    try {
        zipArchiveEntry0.addAsFirstExtraField(unrecognizedExtraField0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.zip.UnrecognizedExtraField"", e);
    }
}","/**
 * Adds an extra fields - replacing an already present extra field
 * of the same type.
 *
 * <p>The new extra field will be the first one.</p>
 * @param ze an extra field
 */"
"public ZipArchiveEntry(ZipArchiveEntry entry) throws ZipException {
    this((java.util.zip.ZipEntry) entry);
    setInternalAttributes(entry.getInternalAttributes());
    setExternalAttributes(entry.getExternalAttributes());
    setExtraFields(entry.getExtraFields());
}","public void test2141() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = null;
    try {
        zipArchiveEntry0 = new ZipArchiveEntry((ZipArchiveEntry) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // entry
        //
        verifyException(""java.util.Objects"", e);
    }
}","/**
 * Creates a new zip entry with fields taken from the specified zip entry.
 * @param entry the entry to get fields from
 * @throws ZipException on error
 */"
"public ZipArchiveEntry(java.util.zip.ZipEntry entry) throws ZipException {
    super(entry);
    setName(entry.getName());
    byte[] extra = entry.getExtra();
    if (extra != null) {
        setExtraFields(ExtraFieldUtils.parse(extra));
    } else {
        // initializes extra data to an empty byte array
        setExtra();
    }
    setMethod(entry.getMethod());
}","public void test2242() throws Throwable {
    ZipEntry zipEntry0 = new ZipEntry("",k$prN"");
    byte[] byteArray0 = new byte[7];
    byteArray0[2] = (byte) (-115);
    zipEntry0.setExtra(byteArray0);
    ZipArchiveEntry zipArchiveEntry0 = null;
    try {
        zipArchiveEntry0 = new ZipArchiveEntry(zipEntry0);
        fail(""Expecting exception: ZipException"");
    } catch (Throwable e) {
        //
        // data starting at 0 is in unknown format
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ExtraFieldUtils"", e);
    }
}","/**
 * Creates a new zip entry with fields taken from the specified zip entry.
 * @param entry the entry to get fields from
 * @throws ZipException on error
 */"
"public ZipArchiveEntry(java.util.zip.ZipEntry entry) throws ZipException {
    super(entry);
    setName(entry.getName());
    byte[] extra = entry.getExtra();
    if (extra != null) {
        setExtraFields(ExtraFieldUtils.parse(extra));
    } else {
        // initializes extra data to an empty byte array
        setExtra();
    }
    setMethod(entry.getMethod());
}","public void test2343() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = null;
    try {
        zipArchiveEntry0 = new ZipArchiveEntry((ZipEntry) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // entry
        //
        verifyException(""java.util.Objects"", e);
    }
}","/**
 * Creates a new zip entry with fields taken from the specified zip entry.
 * @param entry the entry to get fields from
 * @throws ZipException on error
 */"
"public ZipArchiveEntry(String name) {
    super(name);
}","public void test2444() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = null;
    try {
        zipArchiveEntry0 = new ZipArchiveEntry((String) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // name
        //
        verifyException(""java.util.Objects"", e);
    }
}","/**
 * Creates a new zip entry with the specified name.
 * @param name the name of the entry
 */"
"public ZipArchiveEntry(File inputFile, String entryName) {
    this(inputFile.isDirectory() && !entryName.endsWith(""/"") ? entryName + ""/"" : entryName);
    if (inputFile.isFile()) {
        setSize(inputFile.length());
    }
    setTime(inputFile.lastModified());
    // TODO are there any other fields we can set here?
}","public void test2545() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = null;
    try {
        zipArchiveEntry0 = new ZipArchiveEntry((File) null, """");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveEntry"", e);
    }
}",""
"public int getPlatform() {
    return platform;
}","public void test2646() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    zipArchiveEntry0.setName(""OQU]yU7X\""eO)`"");
    zipArchiveEntry0.getName();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"public int getMethod() {
    return method;
}","public void test2647() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    zipArchiveEntry0.setName(""OQU]yU7X\""eO)`"");
    zipArchiveEntry0.getName();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test2648() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    zipArchiveEntry0.setName(""OQU]yU7X\""eO)`"");
    zipArchiveEntry0.getName();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test2649() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    zipArchiveEntry0.setName(""OQU]yU7X\""eO)`"");
    zipArchiveEntry0.getName();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test2750() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""<0[Kf[K"");
    AsiExtraField asiExtraField0 = new AsiExtraField();
    ZipShort zipShort0 = asiExtraField0.getCentralDirectoryLength();
    byte[] byteArray0 = new byte[2];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    zipArchiveEntry0.getExtraField(zipShort0);
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"public int getMethod() {
    return method;
}","public void test2751() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""<0[Kf[K"");
    AsiExtraField asiExtraField0 = new AsiExtraField();
    ZipShort zipShort0 = asiExtraField0.getCentralDirectoryLength();
    byte[] byteArray0 = new byte[2];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    zipArchiveEntry0.getExtraField(zipShort0);
    assertEquals((-1), zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test2752() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""<0[Kf[K"");
    AsiExtraField asiExtraField0 = new AsiExtraField();
    ZipShort zipShort0 = asiExtraField0.getCentralDirectoryLength();
    byte[] byteArray0 = new byte[2];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    zipArchiveEntry0.getExtraField(zipShort0);
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"public int getPlatform() {
    return platform;
}","public void test2753() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""<0[Kf[K"");
    AsiExtraField asiExtraField0 = new AsiExtraField();
    ZipShort zipShort0 = asiExtraField0.getCentralDirectoryLength();
    byte[] byteArray0 = new byte[2];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    zipArchiveEntry0.getExtraField(zipShort0);
    assertEquals(0, zipArchiveEntry0.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"public int getPlatform() {
    return platform;
}","public void test2854() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[0];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    AsiExtraField asiExtraField0 = new AsiExtraField();
    zipArchiveEntry0.addExtraField(asiExtraField0);
    assertEquals(0, zipArchiveEntry0.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test2855() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[0];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    AsiExtraField asiExtraField0 = new AsiExtraField();
    zipArchiveEntry0.addExtraField(asiExtraField0);
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"public int getMethod() {
    return method;
}","public void test2856() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[0];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    AsiExtraField asiExtraField0 = new AsiExtraField();
    zipArchiveEntry0.addExtraField(asiExtraField0);
    assertEquals((-1), zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test2857() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[0];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    AsiExtraField asiExtraField0 = new AsiExtraField();
    zipArchiveEntry0.addExtraField(asiExtraField0);
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"public int getMethod() {
    return method;
}","public void test2958() throws Throwable {
    File file0 = MockFile.createTempFile(""o-x|mHfp\""v."", ""o-x|mHfp\""v."");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(file0, ""q6rJNg*TJ}"");
    zipArchiveEntry0.getExtraFields();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 */"
"public int getPlatform() {
    return platform;
}","public void test2959() throws Throwable {
    File file0 = MockFile.createTempFile(""o-x|mHfp\""v."", ""o-x|mHfp\""v."");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(file0, ""q6rJNg*TJ}"");
    zipArchiveEntry0.getExtraFields();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test2961() throws Throwable {
    File file0 = MockFile.createTempFile(""o-x|mHfp\""v."", ""o-x|mHfp\""v."");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(file0, ""q6rJNg*TJ}"");
    zipArchiveEntry0.getExtraFields();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test2962() throws Throwable {
    File file0 = MockFile.createTempFile(""o-x|mHfp\""v."", ""o-x|mHfp\""v."");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(file0, ""q6rJNg*TJ}"");
    zipArchiveEntry0.getExtraFields();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"public void setExtraFields(ZipExtraField[] fields) {
    extraFields = new LinkedHashMap();
    for (int i = 0; i < fields.length; i++) {
        extraFields.put(fields[i].getHeaderId(), fields[i]);
    }
    setExtra();
}","public void test3063() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""org.apache.commons.compress.archivers.zip.AsiExtraField"");
    ZipExtraField[] zipExtraFieldArray0 = new ZipExtraField[4];
    JarMarker jarMarker0 = JarMarker.getInstance();
    zipExtraFieldArray0[0] = (ZipExtraField) jarMarker0;
    UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField();
    zipExtraFieldArray0[1] = (ZipExtraField) unicodePathExtraField0;
    UnrecognizedExtraField unrecognizedExtraField0 = new UnrecognizedExtraField();
    zipExtraFieldArray0[2] = (ZipExtraField) unrecognizedExtraField0;
    zipExtraFieldArray0[3] = (ZipExtraField) unicodePathExtraField0;
    // Undeclared exception!
    try {
        zipArchiveEntry0.setExtraFields(zipExtraFieldArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField"", e);
    }
}","/**
 * Replaces all currently attached extra fields with the new array.
 * @param fields an array of extra fields
 */"
"public void setMethod(int method) {
    if (method < 0) {
        throw new IllegalArgumentException(""ZIP compression method can not be negative: "" + method);
    }
    this.method = method;
}","public void test3164() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""ZIP compression method can not be negative: "");
    // Undeclared exception!
    try {
        zipArchiveEntry0.setMethod((-1));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // ZIP compression method can not be negative: -1
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveEntry"", e);
    }
}","/**
 * Sets the compression method of this entry.
 *
 * @param method compression method
 */"
"public ZipArchiveEntry(java.util.zip.ZipEntry entry) throws ZipException {
    super(entry);
    setName(entry.getName());
    byte[] extra = entry.getExtra();
    if (extra != null) {
        setExtraFields(ExtraFieldUtils.parse(extra));
    } else {
        // initializes extra data to an empty byte array
        setExtra();
    }
    setMethod(entry.getMethod());
}","public void test3265() throws Throwable {
    MockFile mockFile0 = new MockFile(""<;),L'&}K,+BhbF+"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, """");
    ZipArchiveEntry zipArchiveEntry1 = null;
    try {
        zipArchiveEntry1 = new ZipArchiveEntry((ZipEntry) zipArchiveEntry0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // ZIP compression method can not be negative: -1
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveEntry"", e);
    }
}","/**
 * Creates a new zip entry with fields taken from the specified zip entry.
 * @param entry the entry to get fields from
 * @throws ZipException on error
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test3366() throws Throwable {
    MockFile mockFile0 = new MockFile("";=oe3*p[O~S"", """");
    String string0 = ""Q+3q\\u==+CQ{"";
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, string0);
    boolean boolean0 = zipArchiveEntry0.isDirectory();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"public int getMethod() {
    return method;
}","public void test3367() throws Throwable {
    MockFile mockFile0 = new MockFile("";=oe3*p[O~S"", """");
    String string0 = ""Q+3q\\u==+CQ{"";
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, string0);
    boolean boolean0 = zipArchiveEntry0.isDirectory();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 */"
"public boolean isDirectory() {
    return getName().endsWith(""/"");
}","public void test3368() throws Throwable {
    MockFile mockFile0 = new MockFile("";=oe3*p[O~S"", """");
    String string0 = ""Q+3q\\u==+CQ{"";
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, string0);
    boolean boolean0 = zipArchiveEntry0.isDirectory();
    assertFalse(boolean0);
}","/**
 * Is this entry a directory?
 * @return true if the entry is a directory
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test3369() throws Throwable {
    MockFile mockFile0 = new MockFile("";=oe3*p[O~S"", """");
    String string0 = ""Q+3q\\u==+CQ{"";
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, string0);
    boolean boolean0 = zipArchiveEntry0.isDirectory();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"public int getPlatform() {
    return platform;
}","public void test3370() throws Throwable {
    MockFile mockFile0 = new MockFile("";=oe3*p[O~S"", """");
    String string0 = ""Q+3q\\u==+CQ{"";
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, string0);
    boolean boolean0 = zipArchiveEntry0.isDirectory();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test3472() throws Throwable {
    File file0 = MockFile.createTempFile("";6:/"", (String) null);
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(file0, "";6:/"");
    int int0 = zipArchiveEntry0.getMethod();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test3473() throws Throwable {
    File file0 = MockFile.createTempFile("";6:/"", (String) null);
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(file0, "";6:/"");
    int int0 = zipArchiveEntry0.getMethod();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"public int getMethod() {
    return method;
}","public void test3474() throws Throwable {
    File file0 = MockFile.createTempFile("";6:/"", (String) null);
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(file0, "";6:/"");
    int int0 = zipArchiveEntry0.getMethod();
    assertEquals((-1), int0);
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 */"
"public int getPlatform() {
    return platform;
}","public void test3476() throws Throwable {
    File file0 = MockFile.createTempFile("";6:/"", (String) null);
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(file0, "";6:/"");
    int int0 = zipArchiveEntry0.getMethod();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test3578() throws Throwable {
    MockFile mockFile0 = new MockFile(""SP{RQD."", ""(]9X:N+hD"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""(]9X:N+hD"");
    long long0 = zipArchiveEntry0.getExternalAttributes();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"public int getPlatform() {
    return platform;
}","public void test3579() throws Throwable {
    MockFile mockFile0 = new MockFile(""SP{RQD."", ""(]9X:N+hD"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""(]9X:N+hD"");
    long long0 = zipArchiveEntry0.getExternalAttributes();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test3580() throws Throwable {
    MockFile mockFile0 = new MockFile(""SP{RQD."", ""(]9X:N+hD"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""(]9X:N+hD"");
    long long0 = zipArchiveEntry0.getExternalAttributes();
    assertEquals(0L, long0);
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"public int getMethod() {
    return method;
}","public void test3581() throws Throwable {
    MockFile mockFile0 = new MockFile(""SP{RQD."", ""(]9X:N+hD"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""(]9X:N+hD"");
    long long0 = zipArchiveEntry0.getExternalAttributes();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test3682() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test3683() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    zipArchiveEntry0.setExternalAttributes(1L);
    assertEquals(1L, zipArchiveEntry0.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"public boolean isSupportedCompressionMethod() {
    return method == STORED || method == DEFLATED;
}","public void test3784() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setMethod(0);
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(zipArchiveEntry0);
    assertTrue(zipArchiveEntry0.isSupportedCompressionMethod());
}","/**
 * Checks whether the compression method of this entry is supported,
 * i.e. whether the content of this entry can be accessed.
 *
 * @since Commons Compress 1.1
 * @see <a href=""https://issues.apache.org/jira/browse/COMPRESS-93""
 *         >COMPRESS-93</a>
 * @return <code>true</code> if the compression method is known
 *         and supported, <code>false</code> otherwise
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test3785() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setMethod(0);
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(zipArchiveEntry0);
    assertEquals(0, zipArchiveEntry1.getInternalAttributes());
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test3886() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    int int0 = zipArchiveEntry0.getInternalAttributes();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"public int getMethod() {
    return method;
}","public void test3887() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    int int0 = zipArchiveEntry0.getInternalAttributes();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test3888() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    int int0 = zipArchiveEntry0.getInternalAttributes();
    assertEquals(0, int0);
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"public int getPlatform() {
    return platform;
}","public void test3889() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    int int0 = zipArchiveEntry0.getInternalAttributes();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"/* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj == null || getClass() != obj.getClass()) {
        return false;
    }
    ZipArchiveEntry other = (ZipArchiveEntry) obj;
    if (name == null) {
        if (other.name != null) {
            return false;
        }
    } else if (!name.equals(other.name)) {
        return false;
    }
    return true;
}","public void test3990() throws Throwable {
    File file0 = MockFile.createTempFile(""o-x|mHfp\""v."", ""o-x|mHfp\""v."");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(file0, ""q6rJNg*TJ}"");
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(""o-x|mHfp\""v."");
    zipArchiveEntry0.setName(""o-x|mHfp\""v."");
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertFalse(zipArchiveEntry1.equals((Object) zipArchiveEntry0));
}",""
"/* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj == null || getClass() != obj.getClass()) {
        return false;
    }
    ZipArchiveEntry other = (ZipArchiveEntry) obj;
    if (name == null) {
        if (other.name != null) {
            return false;
        }
    } else if (!name.equals(other.name)) {
        return false;
    }
    return true;
}","public void test3991() throws Throwable {
    File file0 = MockFile.createTempFile(""o-x|mHfp\""v."", ""o-x|mHfp\""v."");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(file0, ""q6rJNg*TJ}"");
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(""o-x|mHfp\""v."");
    zipArchiveEntry0.setName(""o-x|mHfp\""v."");
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertFalse(boolean0);
}",""
"public int getMethod() {
    return method;
}","public void test4092() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    zipArchiveEntry0.setName(""OQU]yU7X\""eO)`"");
    ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
    boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
    assertEquals((-1), zipArchiveEntry1.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 */"
"public int getPlatform() {
    return platform;
}","public void test4093() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    zipArchiveEntry0.setName(""OQU]yU7X\""eO)`"");
    ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
    boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
    assertEquals(0, zipArchiveEntry1.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test4094() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    zipArchiveEntry0.setName(""OQU]yU7X\""eO)`"");
    ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
    boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
    assertEquals(0L, zipArchiveEntry1.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test4095() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    zipArchiveEntry0.setName(""OQU]yU7X\""eO)`"");
    ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
    boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
    assertEquals(0, zipArchiveEntry1.getInternalAttributes());
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"/* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj == null || getClass() != obj.getClass()) {
        return false;
    }
    ZipArchiveEntry other = (ZipArchiveEntry) obj;
    if (name == null) {
        if (other.name != null) {
            return false;
        }
    } else if (!name.equals(other.name)) {
        return false;
    }
    return true;
}","public void test4096() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    zipArchiveEntry0.setName(""OQU]yU7X\""eO)`"");
    ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
    boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
    assertTrue(boolean0);
}",""
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test4197() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""xAb"");
    boolean boolean0 = zipArchiveEntry0.equals(""xAb"");
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"public int getPlatform() {
    return platform;
}","public void test4198() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""xAb"");
    boolean boolean0 = zipArchiveEntry0.equals(""xAb"");
    assertEquals(0, zipArchiveEntry0.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test4199() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""xAb"");
    boolean boolean0 = zipArchiveEntry0.equals(""xAb"");
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"/* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj == null || getClass() != obj.getClass()) {
        return false;
    }
    ZipArchiveEntry other = (ZipArchiveEntry) obj;
    if (name == null) {
        if (other.name != null) {
            return false;
        }
    } else if (!name.equals(other.name)) {
        return false;
    }
    return true;
}","public void test41100() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""xAb"");
    boolean boolean0 = zipArchiveEntry0.equals(""xAb"");
    assertFalse(boolean0);
}",""
"public int getMethod() {
    return method;
}","public void test41101() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""xAb"");
    boolean boolean0 = zipArchiveEntry0.equals(""xAb"");
    assertEquals((-1), zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test42102() throws Throwable {
    MockFile mockFile0 = new MockFile(""RpDq=nVV^Jw!@s0)m1"", ""RpDq=nVV^Jw!@s0)m1"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""RpDq=nVV^Jw!@s0)m1"");
    boolean boolean0 = zipArchiveEntry0.equals((Object) null);
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test42104() throws Throwable {
    MockFile mockFile0 = new MockFile(""RpDq=nVV^Jw!@s0)m1"", ""RpDq=nVV^Jw!@s0)m1"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""RpDq=nVV^Jw!@s0)m1"");
    boolean boolean0 = zipArchiveEntry0.equals((Object) null);
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"/* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj == null || getClass() != obj.getClass()) {
        return false;
    }
    ZipArchiveEntry other = (ZipArchiveEntry) obj;
    if (name == null) {
        if (other.name != null) {
            return false;
        }
    } else if (!name.equals(other.name)) {
        return false;
    }
    return true;
}","public void test42105() throws Throwable {
    MockFile mockFile0 = new MockFile(""RpDq=nVV^Jw!@s0)m1"", ""RpDq=nVV^Jw!@s0)m1"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""RpDq=nVV^Jw!@s0)m1"");
    boolean boolean0 = zipArchiveEntry0.equals((Object) null);
    assertFalse(boolean0);
}",""
"public int getMethod() {
    return method;
}","public void test42106() throws Throwable {
    MockFile mockFile0 = new MockFile(""RpDq=nVV^Jw!@s0)m1"", ""RpDq=nVV^Jw!@s0)m1"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""RpDq=nVV^Jw!@s0)m1"");
    boolean boolean0 = zipArchiveEntry0.equals((Object) null);
    assertEquals((-1), zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 */"
"public int getPlatform() {
    return platform;
}","public void test42107() throws Throwable {
    MockFile mockFile0 = new MockFile(""RpDq=nVV^Jw!@s0)m1"", ""RpDq=nVV^Jw!@s0)m1"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""RpDq=nVV^Jw!@s0)m1"");
    boolean boolean0 = zipArchiveEntry0.equals((Object) null);
    assertEquals(0, zipArchiveEntry0.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test43108() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry0);
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"public int getMethod() {
    return method;
}","public void test43109() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry0);
    assertEquals((-1), zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test43110() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry0);
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"/* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj == null || getClass() != obj.getClass()) {
        return false;
    }
    ZipArchiveEntry other = (ZipArchiveEntry) obj;
    if (name == null) {
        if (other.name != null) {
            return false;
        }
    } else if (!name.equals(other.name)) {
        return false;
    }
    return true;
}","public void test43111() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry0);
    assertTrue(boolean0);
}",""
"public int getPlatform() {
    return platform;
}","public void test43112() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry0);
    assertEquals(0, zipArchiveEntry0.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test44113() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    zipArchiveEntry0.setName(""OQU]yU7X\""eO)`"");
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
    assertEquals(0L, zipArchiveEntry1.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"/* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj == null || getClass() != obj.getClass()) {
        return false;
    }
    ZipArchiveEntry other = (ZipArchiveEntry) obj;
    if (name == null) {
        if (other.name != null) {
            return false;
        }
    } else if (!name.equals(other.name)) {
        return false;
    }
    return true;
}","public void test44114() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    zipArchiveEntry0.setName(""OQU]yU7X\""eO)`"");
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
    assertFalse(boolean0);
}",""
"public int getMethod() {
    return method;
}","public void test44115() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    zipArchiveEntry0.setName(""OQU]yU7X\""eO)`"");
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
    assertEquals((-1), zipArchiveEntry1.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 */"
"public int getPlatform() {
    return platform;
}","public void test44116() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    zipArchiveEntry0.setName(""OQU]yU7X\""eO)`"");
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
    assertEquals(0, zipArchiveEntry1.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test44117() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    zipArchiveEntry0.setName(""OQU]yU7X\""eO)`"");
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
    assertEquals(0, zipArchiveEntry1.getInternalAttributes());
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test45118() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[10];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test46119() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[4];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    zipArchiveEntry0.setExtra(byteArray0);
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"public int getPlatform() {
    return platform;
}","public void test46120() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[4];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    zipArchiveEntry0.setExtra(byteArray0);
    assertEquals(0, zipArchiveEntry0.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"public int getMethod() {
    return method;
}","public void test46121() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[4];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    zipArchiveEntry0.setExtra(byteArray0);
    assertEquals((-1), zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test47122() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    zipArchiveEntry0.setName(""OQU]yU7X\""eO)`"");
    zipArchiveEntry0.hashCode();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test47123() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    zipArchiveEntry0.setName(""OQU]yU7X\""eO)`"");
    zipArchiveEntry0.hashCode();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"public int getMethod() {
    return method;
}","public void test47124() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    zipArchiveEntry0.setName(""OQU]yU7X\""eO)`"");
    zipArchiveEntry0.hashCode();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 */"
"public int getPlatform() {
    return platform;
}","public void test47125() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    zipArchiveEntry0.setName(""OQU]yU7X\""eO)`"");
    zipArchiveEntry0.hashCode();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"public int getMethod() {
    return method;
}","public void test48126() throws Throwable {
    MockFile mockFile0 = new MockFile(""RpDq=nVV^Jw!@s0)m1"", ""RpDq=nVV^Jw!@s0)m1"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""RpDq=nVV^Jw!@s0)m1"");
    byte[] byteArray0 = new byte[3];
    UnicodeCommentExtraField unicodeCommentExtraField0 = new UnicodeCommentExtraField(""RpDq=nVV^Jw!@s0)m1"", byteArray0);
    zipArchiveEntry0.getExtraField(unicodeCommentExtraField0.UCOM_ID);
    assertEquals((-1), zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test48127() throws Throwable {
    MockFile mockFile0 = new MockFile(""RpDq=nVV^Jw!@s0)m1"", ""RpDq=nVV^Jw!@s0)m1"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""RpDq=nVV^Jw!@s0)m1"");
    byte[] byteArray0 = new byte[3];
    UnicodeCommentExtraField unicodeCommentExtraField0 = new UnicodeCommentExtraField(""RpDq=nVV^Jw!@s0)m1"", byteArray0);
    zipArchiveEntry0.getExtraField(unicodeCommentExtraField0.UCOM_ID);
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test48128() throws Throwable {
    MockFile mockFile0 = new MockFile(""RpDq=nVV^Jw!@s0)m1"", ""RpDq=nVV^Jw!@s0)m1"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""RpDq=nVV^Jw!@s0)m1"");
    byte[] byteArray0 = new byte[3];
    UnicodeCommentExtraField unicodeCommentExtraField0 = new UnicodeCommentExtraField(""RpDq=nVV^Jw!@s0)m1"", byteArray0);
    zipArchiveEntry0.getExtraField(unicodeCommentExtraField0.UCOM_ID);
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"public int getPlatform() {
    return platform;
}","public void test48130() throws Throwable {
    MockFile mockFile0 = new MockFile(""RpDq=nVV^Jw!@s0)m1"", ""RpDq=nVV^Jw!@s0)m1"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""RpDq=nVV^Jw!@s0)m1"");
    byte[] byteArray0 = new byte[3];
    UnicodeCommentExtraField unicodeCommentExtraField0 = new UnicodeCommentExtraField(""RpDq=nVV^Jw!@s0)m1"", byteArray0);
    zipArchiveEntry0.getExtraField(unicodeCommentExtraField0.UCOM_ID);
    assertEquals(0, zipArchiveEntry0.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"public void removeExtraField(ZipShort type) {
    if (extraFields == null) {
        throw new java.util.NoSuchElementException();
    }
    if (extraFields.remove(type) == null) {
        throw new java.util.NoSuchElementException();
    }
    setExtra();
}","public void test49131() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[4];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    AsiExtraField asiExtraField0 = new AsiExtraField();
    ZipShort zipShort0 = asiExtraField0.getHeaderId();
    // Undeclared exception!
    try {
        zipArchiveEntry0.removeExtraField(zipShort0);
        fail(""Expecting exception: NoSuchElementException"");
    } catch (NoSuchElementException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveEntry"", e);
    }
}","/**
 * Remove an extra fields.
 * @param type the type of extra field to remove
 */"
"public void removeExtraField(ZipShort type) {
    if (extraFields == null) {
        throw new java.util.NoSuchElementException();
    }
    if (extraFields.remove(type) == null) {
        throw new java.util.NoSuchElementException();
    }
    setExtra();
}","public void test50132() throws Throwable {
    MockFile mockFile0 = new MockFile(""RpDq=nVV^Jw!@s0)m1"", ""RpDq=nVV^Jw!@s0)m1"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""RpDq=nVV^Jw!@s0)m1"");
    byte[] byteArray0 = new byte[3];
    UnicodeCommentExtraField unicodeCommentExtraField0 = new UnicodeCommentExtraField(""RpDq=nVV^Jw!@s0)m1"", byteArray0);
    // Undeclared exception!
    try {
        zipArchiveEntry0.removeExtraField(unicodeCommentExtraField0.UCOM_ID);
        fail(""Expecting exception: NoSuchElementException"");
    } catch (NoSuchElementException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveEntry"", e);
    }
}","/**
 * Remove an extra fields.
 * @param type the type of extra field to remove
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test51133() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""FATAL: UTF-8 encoding not supported."");
    byte[] byteArray0 = new byte[5];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    ZipShort zipShort0 = new ZipShort(byteArray0);
    zipArchiveEntry0.removeExtraField(zipShort0);
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test51134() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""FATAL: UTF-8 encoding not supported."");
    byte[] byteArray0 = new byte[5];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    ZipShort zipShort0 = new ZipShort(byteArray0);
    zipArchiveEntry0.removeExtraField(zipShort0);
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"public int getMethod() {
    return method;
}","public void test51135() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""FATAL: UTF-8 encoding not supported."");
    byte[] byteArray0 = new byte[5];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    ZipShort zipShort0 = new ZipShort(byteArray0);
    zipArchiveEntry0.removeExtraField(zipShort0);
    assertEquals((-1), zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 */"
"public int getPlatform() {
    return platform;
}","public void test51136() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""FATAL: UTF-8 encoding not supported."");
    byte[] byteArray0 = new byte[5];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    ZipShort zipShort0 = new ZipShort(byteArray0);
    zipArchiveEntry0.removeExtraField(zipShort0);
    assertEquals(0, zipArchiveEntry0.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test52137() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    byte[] byteArray0 = zipArchiveEntry0.getLocalFileDataExtra();
    ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
    UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField(""OQU]yU7X\""eO)`"", byteArray0);
    zipArchiveEntry1.addAsFirstExtraField(unicodePathExtraField0);
    assertEquals(0L, zipArchiveEntry1.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test52138() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    byte[] byteArray0 = zipArchiveEntry0.getLocalFileDataExtra();
    ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
    UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField(""OQU]yU7X\""eO)`"", byteArray0);
    zipArchiveEntry1.addAsFirstExtraField(unicodePathExtraField0);
    assertEquals(0, zipArchiveEntry1.getInternalAttributes());
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"public void addAsFirstExtraField(ZipExtraField ze) {
    LinkedHashMap copy = extraFields;
    extraFields = new LinkedHashMap();
    extraFields.put(ze.getHeaderId(), ze);
    if (copy != null) {
        copy.remove(ze.getHeaderId());
        extraFields.putAll(copy);
    }
    setExtra();
}","public void test52139() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    byte[] byteArray0 = zipArchiveEntry0.getLocalFileDataExtra();
    ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
    UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField(""OQU]yU7X\""eO)`"", byteArray0);
    zipArchiveEntry1.addAsFirstExtraField(unicodePathExtraField0);
    assertEquals(0, byteArray0.length);
}","/**
 * Adds an extra fields - replacing an already present extra field
 * of the same type.
 *
 * <p>The new extra field will be the first one.</p>
 * @param ze an extra field
 */"
"public int getMethod() {
    return method;
}","public void test52140() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    byte[] byteArray0 = zipArchiveEntry0.getLocalFileDataExtra();
    ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
    UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField(""OQU]yU7X\""eO)`"", byteArray0);
    zipArchiveEntry1.addAsFirstExtraField(unicodePathExtraField0);
    assertEquals((-1), zipArchiveEntry1.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test53141() throws Throwable {
    File file0 = MockFile.createTempFile(""o-x|mHfp\""v."", ""o-x|mHfp\""v."");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(file0, ""q6rJNg*TJ}"");
    AsiExtraField asiExtraField0 = new AsiExtraField();
    zipArchiveEntry0.addAsFirstExtraField(asiExtraField0);
    zipArchiveEntry0.getExtraFields();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test53142() throws Throwable {
    File file0 = MockFile.createTempFile(""o-x|mHfp\""v."", ""o-x|mHfp\""v."");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(file0, ""q6rJNg*TJ}"");
    AsiExtraField asiExtraField0 = new AsiExtraField();
    zipArchiveEntry0.addAsFirstExtraField(asiExtraField0);
    zipArchiveEntry0.getExtraFields();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"public int getMethod() {
    return method;
}","public void test53143() throws Throwable {
    File file0 = MockFile.createTempFile(""o-x|mHfp\""v."", ""o-x|mHfp\""v."");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(file0, ""q6rJNg*TJ}"");
    AsiExtraField asiExtraField0 = new AsiExtraField();
    zipArchiveEntry0.addAsFirstExtraField(asiExtraField0);
    zipArchiveEntry0.getExtraFields();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 */"
"public int getPlatform() {
    return platform;
}","public void test53144() throws Throwable {
    File file0 = MockFile.createTempFile(""o-x|mHfp\""v."", ""o-x|mHfp\""v."");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(file0, ""q6rJNg*TJ}"");
    AsiExtraField asiExtraField0 = new AsiExtraField();
    zipArchiveEntry0.addAsFirstExtraField(asiExtraField0);
    zipArchiveEntry0.getExtraFields();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"public int getPlatform() {
    return platform;
}","public void test54146() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""ZIP compression method can not be negative: "");
    JarMarker jarMarker0 = JarMarker.getInstance();
    zipArchiveEntry0.addExtraField(jarMarker0);
    zipArchiveEntry0.getLocalFileDataExtra();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"public int getMethod() {
    return method;
}","public void test54147() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""ZIP compression method can not be negative: "");
    JarMarker jarMarker0 = JarMarker.getInstance();
    zipArchiveEntry0.addExtraField(jarMarker0);
    zipArchiveEntry0.getLocalFileDataExtra();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test54148() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""ZIP compression method can not be negative: "");
    JarMarker jarMarker0 = JarMarker.getInstance();
    zipArchiveEntry0.addExtraField(jarMarker0);
    zipArchiveEntry0.getLocalFileDataExtra();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test54149() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""ZIP compression method can not be negative: "");
    JarMarker jarMarker0 = JarMarker.getInstance();
    zipArchiveEntry0.addExtraField(jarMarker0);
    zipArchiveEntry0.getLocalFileDataExtra();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"public int getMethod() {
    return method;
}","public void test55150() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""FATAL: UTF-8 encoding not supported."");
    byte[] byteArray0 = new byte[5];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    byteArray0[1] = (byte) (-5);
    zipArchiveEntry0.setExtra(byteArray0);
    assertEquals((-1), zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test55151() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""FATAL: UTF-8 encoding not supported."");
    byte[] byteArray0 = new byte[5];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    byteArray0[1] = (byte) (-5);
    zipArchiveEntry0.setExtra(byteArray0);
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test55152() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""FATAL: UTF-8 encoding not supported."");
    byte[] byteArray0 = new byte[5];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    byteArray0[1] = (byte) (-5);
    zipArchiveEntry0.setExtra(byteArray0);
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"public int getPlatform() {
    return platform;
}","public void test55153() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""FATAL: UTF-8 encoding not supported."");
    byte[] byteArray0 = new byte[5];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    byteArray0[1] = (byte) (-5);
    zipArchiveEntry0.setExtra(byteArray0);
    assertEquals(0, zipArchiveEntry0.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test56155() throws Throwable {
    File file0 = MockFile.createTempFile(""o-x|mHfp\""v."", ""o-x|mHfp\""v."");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(file0, ""q6rJNg*TJ}"");
    int int0 = zipArchiveEntry0.getUnixMode();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"public int getPlatform() {
    return platform;
}","public void test56156() throws Throwable {
    File file0 = MockFile.createTempFile(""o-x|mHfp\""v."", ""o-x|mHfp\""v."");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(file0, ""q6rJNg*TJ}"");
    int int0 = zipArchiveEntry0.getUnixMode();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"public int getUnixMode() {
    return platform != PLATFORM_UNIX ? 0 : (int) ((getExternalAttributes() >> SHORT_SHIFT) & SHORT_MASK);
}","public void test56157() throws Throwable {
    File file0 = MockFile.createTempFile(""o-x|mHfp\""v."", ""o-x|mHfp\""v."");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(file0, ""q6rJNg*TJ}"");
    int int0 = zipArchiveEntry0.getUnixMode();
    assertEquals(0, int0);
}","/**
 * Unix permission.
 * @return the unix permissions
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test56158() throws Throwable {
    File file0 = MockFile.createTempFile(""o-x|mHfp\""v."", ""o-x|mHfp\""v."");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(file0, ""q6rJNg*TJ}"");
    int int0 = zipArchiveEntry0.getUnixMode();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"public int getMethod() {
    return method;
}","public void test56159() throws Throwable {
    File file0 = MockFile.createTempFile(""o-x|mHfp\""v."", ""o-x|mHfp\""v."");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(file0, ""q6rJNg*TJ}"");
    int int0 = zipArchiveEntry0.getUnixMode();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 */"
"public int getPlatform() {
    return platform;
}","public void test57160() throws Throwable {
    MockFile mockFile0 = new MockFile(""] for UniCode path extra data."", ""] for UniCode path extra data."");
    mockFile0.mkdirs();
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""] for UniCode path extra data."");
    zipArchiveEntry0.setUnixMode(3);
    assertEquals(3, zipArchiveEntry0.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"public int getMethod() {
    return method;
}","public void test58161() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""FATAL: UTF-8 encoding not supported."");
    boolean boolean0 = zipArchiveEntry0.isSupportedCompressionMethod();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 */"
"public int getPlatform() {
    return platform;
}","public void test58162() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""FATAL: UTF-8 encoding not supported."");
    boolean boolean0 = zipArchiveEntry0.isSupportedCompressionMethod();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test58163() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""FATAL: UTF-8 encoding not supported."");
    boolean boolean0 = zipArchiveEntry0.isSupportedCompressionMethod();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test58164() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""FATAL: UTF-8 encoding not supported."");
    boolean boolean0 = zipArchiveEntry0.isSupportedCompressionMethod();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"public boolean isSupportedCompressionMethod() {
    return method == STORED || method == DEFLATED;
}","public void test58165() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""FATAL: UTF-8 encoding not supported."");
    boolean boolean0 = zipArchiveEntry0.isSupportedCompressionMethod();
    assertFalse(boolean0);
}","/**
 * Checks whether the compression method of this entry is supported,
 * i.e. whether the content of this entry can be accessed.
 *
 * @since Commons Compress 1.1
 * @see <a href=""https://issues.apache.org/jira/browse/COMPRESS-93""
 *         >COMPRESS-93</a>
 * @return <code>true</code> if the compression method is known
 *         and supported, <code>false</code> otherwise
 */"
"public int getMethod() {
    return method;
}","public void test59166() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 */"
"public int getMethod() {
    return method;
}","public void test59167() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setMethod(0);
    boolean boolean0 = zipArchiveEntry0.isSupportedCompressionMethod();
    assertEquals(0, zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 */"
"public boolean isSupportedCompressionMethod() {
    return method == STORED || method == DEFLATED;
}","public void test59168() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setMethod(0);
    boolean boolean0 = zipArchiveEntry0.isSupportedCompressionMethod();
    assertTrue(boolean0);
}","/**
 * Checks whether the compression method of this entry is supported,
 * i.e. whether the content of this entry can be accessed.
 *
 * @since Commons Compress 1.1
 * @see <a href=""https://issues.apache.org/jira/browse/COMPRESS-93""
 *         >COMPRESS-93</a>
 * @return <code>true</code> if the compression method is known
 *         and supported, <code>false</code> otherwise
 */"
"/* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj == null || getClass() != obj.getClass()) {
        return false;
    }
    ZipArchiveEntry other = (ZipArchiveEntry) obj;
    if (name == null) {
        if (other.name != null) {
            return false;
        }
    } else if (!name.equals(other.name)) {
        return false;
    }
    return true;
}","public void test60169() throws Throwable {
    MockFile mockFile0 = new MockFile("""", """");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/"");
    ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertTrue(boolean0);
}",""
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test60170() throws Throwable {
    MockFile mockFile0 = new MockFile("""", """");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/"");
    ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertEquals(0, zipArchiveEntry1.getInternalAttributes());
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test60171() throws Throwable {
    MockFile mockFile0 = new MockFile("""", """");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/"");
    ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertEquals(0L, zipArchiveEntry1.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"public int getMethod() {
    return method;
}","public void test60173() throws Throwable {
    MockFile mockFile0 = new MockFile("""", """");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/"");
    ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertEquals((-1), zipArchiveEntry1.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 */"
"public ZipArchiveEntry(java.util.zip.ZipEntry entry) throws ZipException {
    super(entry);
    setName(entry.getName());
    byte[] extra = entry.getExtra();
    if (extra != null) {
        setExtraFields(ExtraFieldUtils.parse(extra));
    } else {
        // initializes extra data to an empty byte array
        setExtra();
    }
    setMethod(entry.getMethod());
}","public void test61175() throws Throwable {
    MockFile mockFile0 = new MockFile("""", """");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, """");
    zipArchiveEntry0.setExtra();
    ZipArchiveEntry zipArchiveEntry1 = null;
    try {
        zipArchiveEntry1 = new ZipArchiveEntry((ZipEntry) zipArchiveEntry0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // ZIP compression method can not be negative: -1
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveEntry"", e);
    }
}","/**
 * Creates a new zip entry with fields taken from the specified zip entry.
 * @param entry the entry to get fields from
 * @throws ZipException on error
 */"
"public int getPlatform() {
    return platform;
}","public void test62176() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""xAb"");
    int int0 = zipArchiveEntry0.getPlatform();
    assertEquals(0, int0);
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test62177() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""xAb"");
    int int0 = zipArchiveEntry0.getPlatform();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"public int getMethod() {
    return method;
}","public void test62178() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""xAb"");
    int int0 = zipArchiveEntry0.getPlatform();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test62179() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""xAb"");
    int int0 = zipArchiveEntry0.getPlatform();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"public byte[] getLocalFileDataExtra() {
    byte[] extra = getExtra();
    return extra != null ? extra : new byte[0];
}","public void test63180() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    byte[] byteArray0 = zipArchiveEntry0.getLocalFileDataExtra();
    assertNotNull(byteArray0);
}","/**
 * Retrieves the extra data for the local file data.
 * @return the extra data for local file
 */"
"public void setCentralDirectoryExtra(byte[] b) {
    try {
        ZipExtraField[] central = ExtraFieldUtils.parse(b, false);
        mergeExtraFields(central, false);
    } catch (ZipException e) {
        throw new RuntimeException(e.getMessage(), e);
    }
}","public void test63181() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    byte[] byteArray0 = zipArchiveEntry0.getLocalFileDataExtra();
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    assertEquals(0, byteArray0.length);
}","/**
 * Sets the central directory part of extra fields.
 */"
"public int getMethod() {
    return method;
}","public void test63182() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    byte[] byteArray0 = zipArchiveEntry0.getLocalFileDataExtra();
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
    assertEquals((-1), zipArchiveEntry1.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test63183() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    byte[] byteArray0 = zipArchiveEntry0.getLocalFileDataExtra();
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
    assertEquals(0L, zipArchiveEntry1.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test63184() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    byte[] byteArray0 = zipArchiveEntry0.getLocalFileDataExtra();
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
    assertEquals(0, zipArchiveEntry1.getInternalAttributes());
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"public int getPlatform() {
    return platform;
}","public void test63185() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    byte[] byteArray0 = zipArchiveEntry0.getLocalFileDataExtra();
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
    assertEquals(0, zipArchiveEntry1.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test64186() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    zipArchiveEntry0.setInternalAttributes(841);
    int int0 = zipArchiveEntry0.getInternalAttributes();
    assertEquals(841, int0);
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test65187() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    byte[] byteArray0 = zipArchiveEntry0.getCentralDirectoryExtra();
    zipArchiveEntry0.setExtra(byteArray0);
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test65188() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    byte[] byteArray0 = zipArchiveEntry0.getCentralDirectoryExtra();
    zipArchiveEntry0.setExtra(byteArray0);
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"public int getMethod() {
    return method;
}","public void test65189() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    byte[] byteArray0 = zipArchiveEntry0.getCentralDirectoryExtra();
    zipArchiveEntry0.setExtra(byteArray0);
    assertEquals((-1), zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 */"
"public int getPlatform() {
    return platform;
}","public void test65190() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    byte[] byteArray0 = zipArchiveEntry0.getCentralDirectoryExtra();
    zipArchiveEntry0.setExtra(byteArray0);
    assertEquals(0, zipArchiveEntry0.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test66191() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""ZIP compression method can not be negative: "");
    zipArchiveEntry0.getLastModifiedDate();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"public int getPlatform() {
    return platform;
}","public void test66192() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""ZIP compression method can not be negative: "");
    zipArchiveEntry0.getLastModifiedDate();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"public int getMethod() {
    return method;
}","public void test66193() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""ZIP compression method can not be negative: "");
    zipArchiveEntry0.getLastModifiedDate();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test66194() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""ZIP compression method can not be negative: "");
    zipArchiveEntry0.getLastModifiedDate();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"public ZipArchiveEntry(ZipArchiveEntry entry) throws ZipException {
    this((java.util.zip.ZipEntry) entry);
    setInternalAttributes(entry.getInternalAttributes());
    setExternalAttributes(entry.getExternalAttributes());
    setExtraFields(entry.getExtraFields());
}","public void test67195() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = null;
    try {
        zipArchiveEntry1 = new ZipArchiveEntry(zipArchiveEntry0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // ZIP compression method can not be negative: -1
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveEntry"", e);
    }
}","/**
 * Creates a new zip entry with fields taken from the specified zip entry.
 * @param entry the entry to get fields from
 * @throws ZipException on error
 */"
