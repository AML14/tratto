project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    File file0 = MockFile.createTempFile(""o-x|mHfp\""v."", ""o-x|mHfp\""v."");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(file0, ""q6rJNg*TJ}"");
    zipArchiveEntry0.setPlatform(8);
    int int0 = zipArchiveEntry0.getUnixMode();
    assertEquals(8, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test001,"public void test001() throws Throwable {
    File file0 = MockFile.createTempFile(""o-x|mHfp\""v."", ""o-x|mHfp\""v."");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(file0, ""q6rJNg*TJ}"");
    zipArchiveEntry0.setPlatform(8);
    int int0 = zipArchiveEntry0.getUnixMode();
    assertEquals(0, int0);
}",0,"assertEquals(0, int0)"
project,0,test012,"public void test012() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""IGdv~XX,hFq@<!N vp"");
    zipArchiveEntry0.setMethod(40960);
    boolean boolean0 = zipArchiveEntry0.isSupportedCompressionMethod();
    assertEquals(40960, zipArchiveEntry0.getMethod());
}",0,
project,0,test013,"public void test013() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""IGdv~XX,hFq@<!N vp"");
    zipArchiveEntry0.setMethod(40960);
    boolean boolean0 = zipArchiveEntry0.isSupportedCompressionMethod();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test024,"public void test024() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setMethod(806);
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry((ZipEntry) zipArchiveEntry0);
    assertEquals(806, zipArchiveEntry0.getMethod());
}",0,
project,0,test025,"public void test025() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setMethod(806);
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry((ZipEntry) zipArchiveEntry0);
    assertEquals(0L, zipArchiveEntry1.getExternalAttributes());
}",0,
project,0,test036,"public void test036() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""e~>HA< 'A5 q/"");
    zipArchiveEntry0.isDirectory();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test037,"public void test037() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""e~>HA< 'A5 q/"");
    zipArchiveEntry0.isDirectory();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,
project,0,test038,"public void test038() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""e~>HA< 'A5 q/"");
    zipArchiveEntry0.isDirectory();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,
project,0,test039,"public void test039() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""e~>HA< 'A5 q/"");
    zipArchiveEntry0.isDirectory();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,
project,0,test0410,"public void test0410() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setUnixMode(32768);
    int int0 = zipArchiveEntry0.getUnixMode();
    assertEquals(3, zipArchiveEntry0.getPlatform());
}",0,
project,0,test0411,"public void test0411() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setUnixMode(32768);
    int int0 = zipArchiveEntry0.getUnixMode();
    assertEquals(32768, int0);
}",0,"assertEquals(0, int0)"
project,0,test0512,"public void test0512() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setUnixMode(14);
    int int0 = zipArchiveEntry0.getPlatform();
    assertEquals(14, zipArchiveEntry0.getUnixMode());
}",0,
project,0,test0513,"public void test0513() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setUnixMode(14);
    int int0 = zipArchiveEntry0.getPlatform();
    assertEquals(3, int0);
}",0,"assertEquals(0, int0)"
project,0,test0614,"public void test0614() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setPlatform((-1014));
    int int0 = zipArchiveEntry0.getPlatform();
    assertEquals((-1014), int0);
}",0,"assertEquals(0, int0)"
project,0,test0715,"public void test0715() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    zipArchiveEntry0.getName();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test0716,"public void test0716() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    zipArchiveEntry0.getName();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getExternalAttributes())"
project,0,test0717,"public void test0717() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    zipArchiveEntry0.getName();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getInternalAttributes())"
project,0,test0718,"public void test0718() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    zipArchiveEntry0.getName();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test0819,"public void test0819() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""FATAL: UTF-8 encoding not supported."");
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test0820,"public void test0820() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""FATAL: UTF-8 encoding not supported."");
    zipArchiveEntry0.setMethod(0);
    int int0 = zipArchiveEntry0.getMethod();
    assertEquals(0, int0);
}",0,
project,0,test0921,"public void test0921() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""IGdv~XX,hFq@<!N vp"");
    zipArchiveEntry0.setMethod(40960);
    int int0 = zipArchiveEntry0.getMethod();
    assertEquals(40960, int0);
}",0,"assertEquals(0, int0)"
project,0,test1022,"public void test1022() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    zipArchiveEntry0.setInternalAttributes((-7));
    int int0 = zipArchiveEntry0.getInternalAttributes();
    assertEquals((-7), int0);
}",0,"assertEquals(0, int0)"
project,0,test1123,"public void test1123() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""FATAL: UTF-8 encoding not supported."");
    byte[] byteArray0 = new byte[5];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    ZipShort zipShort0 = new ZipShort(byteArray0);
    ZipExtraField zipExtraField0 = zipArchiveEntry0.getExtraField(zipShort0);
    assertNotNull(zipExtraField0);
}",0,assertNotNull(zipExtraField0)
project,0,test1124,"public void test1124() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""FATAL: UTF-8 encoding not supported."");
    byte[] byteArray0 = new byte[5];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    ZipShort zipShort0 = new ZipShort(byteArray0);
    ZipExtraField zipExtraField0 = zipArchiveEntry0.getExtraField(zipShort0);
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getInternalAttributes())"
project,0,test1125,"public void test1125() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""FATAL: UTF-8 encoding not supported."");
    byte[] byteArray0 = new byte[5];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    ZipShort zipShort0 = new ZipShort(byteArray0);
    ZipExtraField zipExtraField0 = zipArchiveEntry0.getExtraField(zipShort0);
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test1126,"public void test1126() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""FATAL: UTF-8 encoding not supported."");
    byte[] byteArray0 = new byte[5];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    ZipShort zipShort0 = new ZipShort(byteArray0);
    ZipExtraField zipExtraField0 = zipArchiveEntry0.getExtraField(zipShort0);
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getExternalAttributes())"
project,0,test1127,"public void test1127() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""FATAL: UTF-8 encoding not supported."");
    byte[] byteArray0 = new byte[5];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    ZipShort zipShort0 = new ZipShort(byteArray0);
    ZipExtraField zipExtraField0 = zipArchiveEntry0.getExtraField(zipShort0);
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test1228,"public void test1228() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""ZIP compression method can not be negative: "");
    zipArchiveEntry0.setUnixMode(1042);
    long long0 = zipArchiveEntry0.getExternalAttributes();
    assertEquals(68288513L, long0);
}",0,"assertEquals(1, long0)"
project,0,test1329,"public void test1329() throws Throwable {
    MockFile mockFile0 = new MockFile(""SP{RQD."", ""(]9X:N+hD"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""(]9X:N+hD"");
    zipArchiveEntry0.setUnixMode((-877));
    long long0 = zipArchiveEntry0.getExternalAttributes();
    assertEquals(3, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test1330,"public void test1330() throws Throwable {
    MockFile mockFile0 = new MockFile(""SP{RQD."", ""(]9X:N+hD"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""(]9X:N+hD"");
    zipArchiveEntry0.setUnixMode((-877));
    long long0 = zipArchiveEntry0.getExternalAttributes();
    assertEquals((-57475072L), long0);
}",0,"assertEquals(1, long0)"
project,0,test1431,"public void test1431() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    ZipExtraField[] zipExtraFieldArray0 = new ZipExtraField[1];
    byte[] byteArray0 = new byte[4];
    UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField("""", byteArray0);
    zipExtraFieldArray0[0] = (ZipExtraField) unicodePathExtraField0;
    zipArchiveEntry0.setExtraFields(zipExtraFieldArray0);
    byte[] byteArray1 = zipArchiveEntry0.getCentralDirectoryExtra();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,
project,0,test1432,"public void test1432() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    ZipExtraField[] zipExtraFieldArray0 = new ZipExtraField[1];
    byte[] byteArray0 = new byte[4];
    UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField("""", byteArray0);
    zipExtraFieldArray0[0] = (ZipExtraField) unicodePathExtraField0;
    zipArchiveEntry0.setExtraFields(zipExtraFieldArray0);
    byte[] byteArray1 = zipArchiveEntry0.getCentralDirectoryExtra();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,
project,0,test1433,"public void test1433() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    ZipExtraField[] zipExtraFieldArray0 = new ZipExtraField[1];
    byte[] byteArray0 = new byte[4];
    UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField("""", byteArray0);
    zipExtraFieldArray0[0] = (ZipExtraField) unicodePathExtraField0;
    zipArchiveEntry0.setExtraFields(zipExtraFieldArray0);
    byte[] byteArray1 = zipArchiveEntry0.getCentralDirectoryExtra();
    assertEquals(9, byteArray1.length);
}",0,
project,0,test1434,"public void test1434() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    ZipExtraField[] zipExtraFieldArray0 = new ZipExtraField[1];
    byte[] byteArray0 = new byte[4];
    UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField("""", byteArray0);
    zipExtraFieldArray0[0] = (ZipExtraField) unicodePathExtraField0;
    zipArchiveEntry0.setExtraFields(zipExtraFieldArray0);
    byte[] byteArray1 = zipArchiveEntry0.getCentralDirectoryExtra();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,
project,0,test1535,"public void test1535() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    byte[] byteArray0 = new byte[4];
    byteArray0[2] = (byte) 5;
    try {
        zipArchiveEntry0.setExtra(byteArray0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // data starting at 0 is in unknown format
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveEntry"", e);
    }
}",0,
project,0,test1636,"public void test1636() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    try {
        zipArchiveEntry0.setExtra((byte[]) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ExtraFieldUtils"", e);
    }
}",1,
project,0,test1737,"public void test1737() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""/"");
    byte[] byteArray0 = new byte[6];
    byteArray0[2] = (byte) 50;
    // Undeclared exception!
    try {
        zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // data starting at 0 is in unknown format
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveEntry"", e);
    }
}",1,
project,0,test1838,"public void test1838() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    // Undeclared exception!
    try {
        zipArchiveEntry0.setCentralDirectoryExtra((byte[]) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ExtraFieldUtils"", e);
    }
}",0,
project,0,test1939,"public void test1939() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""8$vE!0<"");
    // Undeclared exception!
    try {
        zipArchiveEntry0.addExtraField((ZipExtraField) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveEntry"", e);
    }
}",0,
project,0,test2040,"public void test2040() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    UnrecognizedExtraField unrecognizedExtraField0 = new UnrecognizedExtraField();
    // Undeclared exception!
    try {
        zipArchiveEntry0.addAsFirstExtraField(unrecognizedExtraField0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.zip.UnrecognizedExtraField"", e);
    }
}",0,
project,0,test2141,"public void test2141() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = null;
    try {
        zipArchiveEntry0 = new ZipArchiveEntry((ZipArchiveEntry) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // entry
        //
        verifyException(""java.util.Objects"", e);
    }
}",0,
project,0,test2242,"public void test2242() throws Throwable {
    ZipEntry zipEntry0 = new ZipEntry("",k$prN"");
    byte[] byteArray0 = new byte[7];
    byteArray0[2] = (byte) (-115);
    zipEntry0.setExtra(byteArray0);
    ZipArchiveEntry zipArchiveEntry0 = null;
    try {
        zipArchiveEntry0 = new ZipArchiveEntry(zipEntry0);
        fail(""Expecting exception: ZipException"");
    } catch (Throwable e) {
        //
        // data starting at 0 is in unknown format
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ExtraFieldUtils"", e);
    }
}",0,
project,0,test2343,"public void test2343() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = null;
    try {
        zipArchiveEntry0 = new ZipArchiveEntry((ZipEntry) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // entry
        //
        verifyException(""java.util.Objects"", e);
    }
}",0,
project,0,test2444,"public void test2444() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = null;
    try {
        zipArchiveEntry0 = new ZipArchiveEntry((String) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // name
        //
        verifyException(""java.util.Objects"", e);
    }
}",0,
project,0,test2545,"public void test2545() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = null;
    try {
        zipArchiveEntry0 = new ZipArchiveEntry((File) null, """");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveEntry"", e);
    }
}",0,
project,0,test2646,"public void test2646() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    zipArchiveEntry0.setName(""OQU]yU7X\""eO)`"");
    zipArchiveEntry0.getName();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test2647,"public void test2647() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    zipArchiveEntry0.setName(""OQU]yU7X\""eO)`"");
    zipArchiveEntry0.getName();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test2648,"public void test2648() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    zipArchiveEntry0.setName(""OQU]yU7X\""eO)`"");
    zipArchiveEntry0.getName();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,
project,0,test2649,"public void test2649() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    zipArchiveEntry0.setName(""OQU]yU7X\""eO)`"");
    zipArchiveEntry0.getName();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,
project,0,test2750,"public void test2750() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""<0[Kf[K"");
    AsiExtraField asiExtraField0 = new AsiExtraField();
    ZipShort zipShort0 = asiExtraField0.getCentralDirectoryLength();
    byte[] byteArray0 = new byte[2];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    zipArchiveEntry0.getExtraField(zipShort0);
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getInternalAttributes())"
project,0,test2751,"public void test2751() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""<0[Kf[K"");
    AsiExtraField asiExtraField0 = new AsiExtraField();
    ZipShort zipShort0 = asiExtraField0.getCentralDirectoryLength();
    byte[] byteArray0 = new byte[2];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    zipArchiveEntry0.getExtraField(zipShort0);
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test2752,"public void test2752() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""<0[Kf[K"");
    AsiExtraField asiExtraField0 = new AsiExtraField();
    ZipShort zipShort0 = asiExtraField0.getCentralDirectoryLength();
    byte[] byteArray0 = new byte[2];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    zipArchiveEntry0.getExtraField(zipShort0);
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getExternalAttributes())"
project,0,test2753,"public void test2753() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""<0[Kf[K"");
    AsiExtraField asiExtraField0 = new AsiExtraField();
    ZipShort zipShort0 = asiExtraField0.getCentralDirectoryLength();
    byte[] byteArray0 = new byte[2];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    zipArchiveEntry0.getExtraField(zipShort0);
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test2854,"public void test2854() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[0];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    AsiExtraField asiExtraField0 = new AsiExtraField();
    zipArchiveEntry0.addExtraField(asiExtraField0);
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test2855,"public void test2855() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[0];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    AsiExtraField asiExtraField0 = new AsiExtraField();
    zipArchiveEntry0.addExtraField(asiExtraField0);
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getInternalAttributes())"
project,0,test2856,"public void test2856() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[0];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    AsiExtraField asiExtraField0 = new AsiExtraField();
    zipArchiveEntry0.addExtraField(asiExtraField0);
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test2857,"public void test2857() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[0];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    AsiExtraField asiExtraField0 = new AsiExtraField();
    zipArchiveEntry0.addExtraField(asiExtraField0);
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getExternalAttributes())"
project,0,test2958,"public void test2958() throws Throwable {
    File file0 = MockFile.createTempFile(""o-x|mHfp\""v."", ""o-x|mHfp\""v."");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(file0, ""q6rJNg*TJ}"");
    zipArchiveEntry0.getExtraFields();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test2959,"public void test2959() throws Throwable {
    File file0 = MockFile.createTempFile(""o-x|mHfp\""v."", ""o-x|mHfp\""v."");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(file0, ""q6rJNg*TJ}"");
    zipArchiveEntry0.getExtraFields();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test2961,"public void test2961() throws Throwable {
    File file0 = MockFile.createTempFile(""o-x|mHfp\""v."", ""o-x|mHfp\""v."");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(file0, ""q6rJNg*TJ}"");
    zipArchiveEntry0.getExtraFields();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getExternalAttributes())"
project,0,test2962,"public void test2962() throws Throwable {
    File file0 = MockFile.createTempFile(""o-x|mHfp\""v."", ""o-x|mHfp\""v."");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(file0, ""q6rJNg*TJ}"");
    zipArchiveEntry0.getExtraFields();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getInternalAttributes())"
project,0,test3063,"public void test3063() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""org.apache.commons.compress.archivers.zip.AsiExtraField"");
    ZipExtraField[] zipExtraFieldArray0 = new ZipExtraField[4];
    JarMarker jarMarker0 = JarMarker.getInstance();
    zipExtraFieldArray0[0] = (ZipExtraField) jarMarker0;
    UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField();
    zipExtraFieldArray0[1] = (ZipExtraField) unicodePathExtraField0;
    UnrecognizedExtraField unrecognizedExtraField0 = new UnrecognizedExtraField();
    zipExtraFieldArray0[2] = (ZipExtraField) unrecognizedExtraField0;
    zipExtraFieldArray0[3] = (ZipExtraField) unicodePathExtraField0;
    // Undeclared exception!
    try {
        zipArchiveEntry0.setExtraFields(zipExtraFieldArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField"", e);
    }
}",0,
project,0,test3164,"public void test3164() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""ZIP compression method can not be negative: "");
    // Undeclared exception!
    try {
        zipArchiveEntry0.setMethod((-1));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // ZIP compression method can not be negative: -1
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveEntry"", e);
    }
}",1,
project,0,test3265,"public void test3265() throws Throwable {
    MockFile mockFile0 = new MockFile(""<;),L'&}K,+BhbF+"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, """");
    ZipArchiveEntry zipArchiveEntry1 = null;
    try {
        zipArchiveEntry1 = new ZipArchiveEntry((ZipEntry) zipArchiveEntry0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // ZIP compression method can not be negative: -1
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveEntry"", e);
    }
}",0,
project,0,test3366,"public void test3366() throws Throwable {
    MockFile mockFile0 = new MockFile("";=oe3*p[O~S"", """");
    String string0 = ""Q+3q\\u==+CQ{"";
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, string0);
    boolean boolean0 = zipArchiveEntry0.isDirectory();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getExternalAttributes())"
project,0,test3367,"public void test3367() throws Throwable {
    MockFile mockFile0 = new MockFile("";=oe3*p[O~S"", """");
    String string0 = ""Q+3q\\u==+CQ{"";
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, string0);
    boolean boolean0 = zipArchiveEntry0.isDirectory();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test3368,"public void test3368() throws Throwable {
    MockFile mockFile0 = new MockFile("";=oe3*p[O~S"", """");
    String string0 = ""Q+3q\\u==+CQ{"";
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, string0);
    boolean boolean0 = zipArchiveEntry0.isDirectory();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test3369,"public void test3369() throws Throwable {
    MockFile mockFile0 = new MockFile("";=oe3*p[O~S"", """");
    String string0 = ""Q+3q\\u==+CQ{"";
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, string0);
    boolean boolean0 = zipArchiveEntry0.isDirectory();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getInternalAttributes())"
project,0,test3370,"public void test3370() throws Throwable {
    MockFile mockFile0 = new MockFile("";=oe3*p[O~S"", """");
    String string0 = ""Q+3q\\u==+CQ{"";
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, string0);
    boolean boolean0 = zipArchiveEntry0.isDirectory();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test3472,"public void test3472() throws Throwable {
    File file0 = MockFile.createTempFile("";6:/"", (String) null);
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(file0, "";6:/"");
    int int0 = zipArchiveEntry0.getMethod();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,
project,0,test3473,"public void test3473() throws Throwable {
    File file0 = MockFile.createTempFile("";6:/"", (String) null);
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(file0, "";6:/"");
    int int0 = zipArchiveEntry0.getMethod();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,
project,0,test3474,"public void test3474() throws Throwable {
    File file0 = MockFile.createTempFile("";6:/"", (String) null);
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(file0, "";6:/"");
    int int0 = zipArchiveEntry0.getMethod();
    assertEquals((-1), int0);
}",0,"assertEquals(0, int0)"
project,0,test3476,"public void test3476() throws Throwable {
    File file0 = MockFile.createTempFile("";6:/"", (String) null);
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(file0, "";6:/"");
    int int0 = zipArchiveEntry0.getMethod();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test3578,"public void test3578() throws Throwable {
    MockFile mockFile0 = new MockFile(""SP{RQD."", ""(]9X:N+hD"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""(]9X:N+hD"");
    long long0 = zipArchiveEntry0.getExternalAttributes();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getInternalAttributes())"
project,0,test3579,"public void test3579() throws Throwable {
    MockFile mockFile0 = new MockFile(""SP{RQD."", ""(]9X:N+hD"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""(]9X:N+hD"");
    long long0 = zipArchiveEntry0.getExternalAttributes();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,
project,0,test3580,"public void test3580() throws Throwable {
    MockFile mockFile0 = new MockFile(""SP{RQD."", ""(]9X:N+hD"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""(]9X:N+hD"");
    long long0 = zipArchiveEntry0.getExternalAttributes();
    assertEquals(0L, long0);
}",0,"assertEquals(1, long0)"
project,0,test3581,"public void test3581() throws Throwable {
    MockFile mockFile0 = new MockFile(""SP{RQD."", ""(]9X:N+hD"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""(]9X:N+hD"");
    long long0 = zipArchiveEntry0.getExternalAttributes();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test3682,"public void test3682() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getExternalAttributes())"
project,0,test3683,"public void test3683() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    zipArchiveEntry0.setExternalAttributes(1L);
    assertEquals(1L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(1, zipArchiveEntry0.getExternalAttributes())"
project,0,test3784,"public void test3784() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setMethod(0);
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(zipArchiveEntry0);
    assertTrue(zipArchiveEntry0.isSupportedCompressionMethod());
}",0,assertTrue(zipArchiveEntry0.isSupportedCompressionMethod())
project,0,test3785,"public void test3785() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setMethod(0);
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(zipArchiveEntry0);
    assertEquals(0, zipArchiveEntry1.getInternalAttributes());
}",0,
project,0,test3886,"public void test3886() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    int int0 = zipArchiveEntry0.getInternalAttributes();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,
project,0,test3887,"public void test3887() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    int int0 = zipArchiveEntry0.getInternalAttributes();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test3888,"public void test3888() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    int int0 = zipArchiveEntry0.getInternalAttributes();
    assertEquals(0, int0);
}",0,"assertEquals(0, int0)"
project,0,test3889,"public void test3889() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    int int0 = zipArchiveEntry0.getInternalAttributes();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test3990,"public void test3990() throws Throwable {
    File file0 = MockFile.createTempFile(""o-x|mHfp\""v."", ""o-x|mHfp\""v."");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(file0, ""q6rJNg*TJ}"");
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(""o-x|mHfp\""v."");
    zipArchiveEntry0.setName(""o-x|mHfp\""v."");
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertFalse(zipArchiveEntry1.equals((Object) zipArchiveEntry0));
}",0,
project,0,test3991,"public void test3991() throws Throwable {
    File file0 = MockFile.createTempFile(""o-x|mHfp\""v."", ""o-x|mHfp\""v."");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(file0, ""q6rJNg*TJ}"");
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(""o-x|mHfp\""v."");
    zipArchiveEntry0.setName(""o-x|mHfp\""v."");
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test4092,"public void test4092() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    zipArchiveEntry0.setName(""OQU]yU7X\""eO)`"");
    ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
    boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
    assertEquals((-1), zipArchiveEntry1.getMethod());
}",0,
project,0,test4093,"public void test4093() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    zipArchiveEntry0.setName(""OQU]yU7X\""eO)`"");
    ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
    boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
    assertEquals(0, zipArchiveEntry1.getPlatform());
}",0,"assertEquals(1, zipArchiveEntry1.getPlatform())"
project,0,test4094,"public void test4094() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    zipArchiveEntry0.setName(""OQU]yU7X\""eO)`"");
    ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
    boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
    assertEquals(0L, zipArchiveEntry1.getExternalAttributes());
}",0,
project,0,test4095,"public void test4095() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    zipArchiveEntry0.setName(""OQU]yU7X\""eO)`"");
    ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
    boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
    assertEquals(0, zipArchiveEntry1.getInternalAttributes());
}",0,
project,0,test4096,"public void test4096() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    zipArchiveEntry0.setName(""OQU]yU7X\""eO)`"");
    ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
    boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test4197,"public void test4197() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""xAb"");
    boolean boolean0 = zipArchiveEntry0.equals(""xAb"");
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getExternalAttributes())"
project,0,test4198,"public void test4198() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""xAb"");
    boolean boolean0 = zipArchiveEntry0.equals(""xAb"");
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test4199,"public void test4199() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""xAb"");
    boolean boolean0 = zipArchiveEntry0.equals(""xAb"");
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,
project,0,test41100,"public void test41100() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""xAb"");
    boolean boolean0 = zipArchiveEntry0.equals(""xAb"");
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test41101,"public void test41101() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""xAb"");
    boolean boolean0 = zipArchiveEntry0.equals(""xAb"");
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test42102,"public void test42102() throws Throwable {
    MockFile mockFile0 = new MockFile(""RpDq=nVV^Jw!@s0)m1"", ""RpDq=nVV^Jw!@s0)m1"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""RpDq=nVV^Jw!@s0)m1"");
    boolean boolean0 = zipArchiveEntry0.equals((Object) null);
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getExternalAttributes())"
project,0,test42104,"public void test42104() throws Throwable {
    MockFile mockFile0 = new MockFile(""RpDq=nVV^Jw!@s0)m1"", ""RpDq=nVV^Jw!@s0)m1"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""RpDq=nVV^Jw!@s0)m1"");
    boolean boolean0 = zipArchiveEntry0.equals((Object) null);
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,
project,0,test42105,"public void test42105() throws Throwable {
    MockFile mockFile0 = new MockFile(""RpDq=nVV^Jw!@s0)m1"", ""RpDq=nVV^Jw!@s0)m1"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""RpDq=nVV^Jw!@s0)m1"");
    boolean boolean0 = zipArchiveEntry0.equals((Object) null);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test42106,"public void test42106() throws Throwable {
    MockFile mockFile0 = new MockFile(""RpDq=nVV^Jw!@s0)m1"", ""RpDq=nVV^Jw!@s0)m1"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""RpDq=nVV^Jw!@s0)m1"");
    boolean boolean0 = zipArchiveEntry0.equals((Object) null);
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test42107,"public void test42107() throws Throwable {
    MockFile mockFile0 = new MockFile(""RpDq=nVV^Jw!@s0)m1"", ""RpDq=nVV^Jw!@s0)m1"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""RpDq=nVV^Jw!@s0)m1"");
    boolean boolean0 = zipArchiveEntry0.equals((Object) null);
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test43108,"public void test43108() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry0);
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,
project,0,test43109,"public void test43109() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry0);
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,
project,0,test43110,"public void test43110() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry0);
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,
project,0,test43111,"public void test43111() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test43112,"public void test43112() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry0);
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test44113,"public void test44113() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    zipArchiveEntry0.setName(""OQU]yU7X\""eO)`"");
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
    assertEquals(0L, zipArchiveEntry1.getExternalAttributes());
}",0,
project,0,test44114,"public void test44114() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    zipArchiveEntry0.setName(""OQU]yU7X\""eO)`"");
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test44115,"public void test44115() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    zipArchiveEntry0.setName(""OQU]yU7X\""eO)`"");
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
    assertEquals((-1), zipArchiveEntry1.getMethod());
}",0,
project,0,test44116,"public void test44116() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    zipArchiveEntry0.setName(""OQU]yU7X\""eO)`"");
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
    assertEquals(0, zipArchiveEntry1.getPlatform());
}",0,"assertEquals(1, zipArchiveEntry1.getPlatform())"
project,0,test44117,"public void test44117() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    zipArchiveEntry0.setName(""OQU]yU7X\""eO)`"");
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
    assertEquals(0, zipArchiveEntry1.getInternalAttributes());
}",0,
project,0,test45118,"public void test45118() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[10];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getExternalAttributes())"
project,0,test46119,"public void test46119() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[4];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    zipArchiveEntry0.setExtra(byteArray0);
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getInternalAttributes())"
project,0,test46120,"public void test46120() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[4];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    zipArchiveEntry0.setExtra(byteArray0);
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(1, zipArchiveEntry0.getPlatform())"
project,0,test46121,"public void test46121() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[4];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    zipArchiveEntry0.setExtra(byteArray0);
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(1, zipArchiveEntry0.getMethod())"
project,0,test47122,"public void test47122() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    zipArchiveEntry0.setName(""OQU]yU7X\""eO)`"");
    zipArchiveEntry0.hashCode();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getExternalAttributes())"
project,0,test47123,"public void test47123() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    zipArchiveEntry0.setName(""OQU]yU7X\""eO)`"");
    zipArchiveEntry0.hashCode();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,
project,0,test47124,"public void test47124() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    zipArchiveEntry0.setName(""OQU]yU7X\""eO)`"");
    zipArchiveEntry0.hashCode();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test47125,"public void test47125() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    zipArchiveEntry0.setName(""OQU]yU7X\""eO)`"");
    zipArchiveEntry0.hashCode();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test48126,"public void test48126() throws Throwable {
    MockFile mockFile0 = new MockFile(""RpDq=nVV^Jw!@s0)m1"", ""RpDq=nVV^Jw!@s0)m1"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""RpDq=nVV^Jw!@s0)m1"");
    byte[] byteArray0 = new byte[3];
    UnicodeCommentExtraField unicodeCommentExtraField0 = new UnicodeCommentExtraField(""RpDq=nVV^Jw!@s0)m1"", byteArray0);
    zipArchiveEntry0.getExtraField(unicodeCommentExtraField0.UCOM_ID);
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test48127,"public void test48127() throws Throwable {
    MockFile mockFile0 = new MockFile(""RpDq=nVV^Jw!@s0)m1"", ""RpDq=nVV^Jw!@s0)m1"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""RpDq=nVV^Jw!@s0)m1"");
    byte[] byteArray0 = new byte[3];
    UnicodeCommentExtraField unicodeCommentExtraField0 = new UnicodeCommentExtraField(""RpDq=nVV^Jw!@s0)m1"", byteArray0);
    zipArchiveEntry0.getExtraField(unicodeCommentExtraField0.UCOM_ID);
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getInternalAttributes())"
project,0,test48128,"public void test48128() throws Throwable {
    MockFile mockFile0 = new MockFile(""RpDq=nVV^Jw!@s0)m1"", ""RpDq=nVV^Jw!@s0)m1"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""RpDq=nVV^Jw!@s0)m1"");
    byte[] byteArray0 = new byte[3];
    UnicodeCommentExtraField unicodeCommentExtraField0 = new UnicodeCommentExtraField(""RpDq=nVV^Jw!@s0)m1"", byteArray0);
    zipArchiveEntry0.getExtraField(unicodeCommentExtraField0.UCOM_ID);
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getExternalAttributes())"
project,0,test48130,"public void test48130() throws Throwable {
    MockFile mockFile0 = new MockFile(""RpDq=nVV^Jw!@s0)m1"", ""RpDq=nVV^Jw!@s0)m1"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""RpDq=nVV^Jw!@s0)m1"");
    byte[] byteArray0 = new byte[3];
    UnicodeCommentExtraField unicodeCommentExtraField0 = new UnicodeCommentExtraField(""RpDq=nVV^Jw!@s0)m1"", byteArray0);
    zipArchiveEntry0.getExtraField(unicodeCommentExtraField0.UCOM_ID);
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test49131,"public void test49131() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[4];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    AsiExtraField asiExtraField0 = new AsiExtraField();
    ZipShort zipShort0 = asiExtraField0.getHeaderId();
    // Undeclared exception!
    try {
        zipArchiveEntry0.removeExtraField(zipShort0);
        fail(""Expecting exception: NoSuchElementException"");
    } catch (NoSuchElementException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveEntry"", e);
    }
}",1,
project,0,test50132,"public void test50132() throws Throwable {
    MockFile mockFile0 = new MockFile(""RpDq=nVV^Jw!@s0)m1"", ""RpDq=nVV^Jw!@s0)m1"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""RpDq=nVV^Jw!@s0)m1"");
    byte[] byteArray0 = new byte[3];
    UnicodeCommentExtraField unicodeCommentExtraField0 = new UnicodeCommentExtraField(""RpDq=nVV^Jw!@s0)m1"", byteArray0);
    // Undeclared exception!
    try {
        zipArchiveEntry0.removeExtraField(unicodeCommentExtraField0.UCOM_ID);
        fail(""Expecting exception: NoSuchElementException"");
    } catch (NoSuchElementException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveEntry"", e);
    }
}",1,
project,0,test51133,"public void test51133() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""FATAL: UTF-8 encoding not supported."");
    byte[] byteArray0 = new byte[5];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    ZipShort zipShort0 = new ZipShort(byteArray0);
    zipArchiveEntry0.removeExtraField(zipShort0);
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getExternalAttributes())"
project,0,test51134,"public void test51134() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""FATAL: UTF-8 encoding not supported."");
    byte[] byteArray0 = new byte[5];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    ZipShort zipShort0 = new ZipShort(byteArray0);
    zipArchiveEntry0.removeExtraField(zipShort0);
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getInternalAttributes())"
project,0,test51135,"public void test51135() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""FATAL: UTF-8 encoding not supported."");
    byte[] byteArray0 = new byte[5];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    ZipShort zipShort0 = new ZipShort(byteArray0);
    zipArchiveEntry0.removeExtraField(zipShort0);
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test51136,"public void test51136() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""FATAL: UTF-8 encoding not supported."");
    byte[] byteArray0 = new byte[5];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    ZipShort zipShort0 = new ZipShort(byteArray0);
    zipArchiveEntry0.removeExtraField(zipShort0);
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test52137,"public void test52137() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    byte[] byteArray0 = zipArchiveEntry0.getLocalFileDataExtra();
    ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
    UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField(""OQU]yU7X\""eO)`"", byteArray0);
    zipArchiveEntry1.addAsFirstExtraField(unicodePathExtraField0);
    assertEquals(0L, zipArchiveEntry1.getExternalAttributes());
}",0,
project,0,test52138,"public void test52138() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    byte[] byteArray0 = zipArchiveEntry0.getLocalFileDataExtra();
    ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
    UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField(""OQU]yU7X\""eO)`"", byteArray0);
    zipArchiveEntry1.addAsFirstExtraField(unicodePathExtraField0);
    assertEquals(0, zipArchiveEntry1.getInternalAttributes());
}",0,
project,0,test52139,"public void test52139() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    byte[] byteArray0 = zipArchiveEntry0.getLocalFileDataExtra();
    ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
    UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField(""OQU]yU7X\""eO)`"", byteArray0);
    zipArchiveEntry1.addAsFirstExtraField(unicodePathExtraField0);
    assertEquals(0, byteArray0.length);
}",0,
project,0,test52140,"public void test52140() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    byte[] byteArray0 = zipArchiveEntry0.getLocalFileDataExtra();
    ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
    UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField(""OQU]yU7X\""eO)`"", byteArray0);
    zipArchiveEntry1.addAsFirstExtraField(unicodePathExtraField0);
    assertEquals((-1), zipArchiveEntry1.getMethod());
}",0,
project,0,test53141,"public void test53141() throws Throwable {
    File file0 = MockFile.createTempFile(""o-x|mHfp\""v."", ""o-x|mHfp\""v."");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(file0, ""q6rJNg*TJ}"");
    AsiExtraField asiExtraField0 = new AsiExtraField();
    zipArchiveEntry0.addAsFirstExtraField(asiExtraField0);
    zipArchiveEntry0.getExtraFields();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getInternalAttributes())"
project,0,test53142,"public void test53142() throws Throwable {
    File file0 = MockFile.createTempFile(""o-x|mHfp\""v."", ""o-x|mHfp\""v."");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(file0, ""q6rJNg*TJ}"");
    AsiExtraField asiExtraField0 = new AsiExtraField();
    zipArchiveEntry0.addAsFirstExtraField(asiExtraField0);
    zipArchiveEntry0.getExtraFields();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getExternalAttributes())"
project,0,test53143,"public void test53143() throws Throwable {
    File file0 = MockFile.createTempFile(""o-x|mHfp\""v."", ""o-x|mHfp\""v."");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(file0, ""q6rJNg*TJ}"");
    AsiExtraField asiExtraField0 = new AsiExtraField();
    zipArchiveEntry0.addAsFirstExtraField(asiExtraField0);
    zipArchiveEntry0.getExtraFields();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,
project,0,test53144,"public void test53144() throws Throwable {
    File file0 = MockFile.createTempFile(""o-x|mHfp\""v."", ""o-x|mHfp\""v."");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(file0, ""q6rJNg*TJ}"");
    AsiExtraField asiExtraField0 = new AsiExtraField();
    zipArchiveEntry0.addAsFirstExtraField(asiExtraField0);
    zipArchiveEntry0.getExtraFields();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test54146,"public void test54146() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""ZIP compression method can not be negative: "");
    JarMarker jarMarker0 = JarMarker.getInstance();
    zipArchiveEntry0.addExtraField(jarMarker0);
    zipArchiveEntry0.getLocalFileDataExtra();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test54147,"public void test54147() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""ZIP compression method can not be negative: "");
    JarMarker jarMarker0 = JarMarker.getInstance();
    zipArchiveEntry0.addExtraField(jarMarker0);
    zipArchiveEntry0.getLocalFileDataExtra();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test54148,"public void test54148() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""ZIP compression method can not be negative: "");
    JarMarker jarMarker0 = JarMarker.getInstance();
    zipArchiveEntry0.addExtraField(jarMarker0);
    zipArchiveEntry0.getLocalFileDataExtra();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,
project,0,test54149,"public void test54149() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""ZIP compression method can not be negative: "");
    JarMarker jarMarker0 = JarMarker.getInstance();
    zipArchiveEntry0.addExtraField(jarMarker0);
    zipArchiveEntry0.getLocalFileDataExtra();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,
project,0,test55150,"public void test55150() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""FATAL: UTF-8 encoding not supported."");
    byte[] byteArray0 = new byte[5];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    byteArray0[1] = (byte) (-5);
    zipArchiveEntry0.setExtra(byteArray0);
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test55151,"public void test55151() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""FATAL: UTF-8 encoding not supported."");
    byte[] byteArray0 = new byte[5];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    byteArray0[1] = (byte) (-5);
    zipArchiveEntry0.setExtra(byteArray0);
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getExternalAttributes())"
project,0,test55152,"public void test55152() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""FATAL: UTF-8 encoding not supported."");
    byte[] byteArray0 = new byte[5];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    byteArray0[1] = (byte) (-5);
    zipArchiveEntry0.setExtra(byteArray0);
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getInternalAttributes())"
project,0,test55153,"public void test55153() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""FATAL: UTF-8 encoding not supported."");
    byte[] byteArray0 = new byte[5];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    byteArray0[1] = (byte) (-5);
    zipArchiveEntry0.setExtra(byteArray0);
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test56155,"public void test56155() throws Throwable {
    File file0 = MockFile.createTempFile(""o-x|mHfp\""v."", ""o-x|mHfp\""v."");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(file0, ""q6rJNg*TJ}"");
    int int0 = zipArchiveEntry0.getUnixMode();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getInternalAttributes())"
project,0,test56156,"public void test56156() throws Throwable {
    File file0 = MockFile.createTempFile(""o-x|mHfp\""v."", ""o-x|mHfp\""v."");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(file0, ""q6rJNg*TJ}"");
    int int0 = zipArchiveEntry0.getUnixMode();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test56157,"public void test56157() throws Throwable {
    File file0 = MockFile.createTempFile(""o-x|mHfp\""v."", ""o-x|mHfp\""v."");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(file0, ""q6rJNg*TJ}"");
    int int0 = zipArchiveEntry0.getUnixMode();
    assertEquals(0, int0);
}",0,"assertEquals(1, int0)"
project,0,test56158,"public void test56158() throws Throwable {
    File file0 = MockFile.createTempFile(""o-x|mHfp\""v."", ""o-x|mHfp\""v."");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(file0, ""q6rJNg*TJ}"");
    int int0 = zipArchiveEntry0.getUnixMode();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getExternalAttributes())"
project,0,test56159,"public void test56159() throws Throwable {
    File file0 = MockFile.createTempFile(""o-x|mHfp\""v."", ""o-x|mHfp\""v."");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(file0, ""q6rJNg*TJ}"");
    int int0 = zipArchiveEntry0.getUnixMode();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test57160,"public void test57160() throws Throwable {
    MockFile mockFile0 = new MockFile(""] for UniCode path extra data."", ""] for UniCode path extra data."");
    mockFile0.mkdirs();
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""] for UniCode path extra data."");
    zipArchiveEntry0.setUnixMode(3);
    assertEquals(3, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test58161,"public void test58161() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""FATAL: UTF-8 encoding not supported."");
    boolean boolean0 = zipArchiveEntry0.isSupportedCompressionMethod();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test58162,"public void test58162() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""FATAL: UTF-8 encoding not supported."");
    boolean boolean0 = zipArchiveEntry0.isSupportedCompressionMethod();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,
project,0,test58163,"public void test58163() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""FATAL: UTF-8 encoding not supported."");
    boolean boolean0 = zipArchiveEntry0.isSupportedCompressionMethod();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getInternalAttributes())"
project,0,test58164,"public void test58164() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""FATAL: UTF-8 encoding not supported."");
    boolean boolean0 = zipArchiveEntry0.isSupportedCompressionMethod();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getExternalAttributes())"
project,0,test58165,"public void test58165() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""FATAL: UTF-8 encoding not supported."");
    boolean boolean0 = zipArchiveEntry0.isSupportedCompressionMethod();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test59166,"public void test59166() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test59167,"public void test59167() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setMethod(0);
    boolean boolean0 = zipArchiveEntry0.isSupportedCompressionMethod();
    assertEquals(0, zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test59168,"public void test59168() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setMethod(0);
    boolean boolean0 = zipArchiveEntry0.isSupportedCompressionMethod();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test60169,"public void test60169() throws Throwable {
    MockFile mockFile0 = new MockFile("""", """");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/"");
    ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test60170,"public void test60170() throws Throwable {
    MockFile mockFile0 = new MockFile("""", """");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/"");
    ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertEquals(0, zipArchiveEntry1.getInternalAttributes());
}",0,"assertEquals(1, zipArchiveEntry1.getInternalAttributes())"
project,0,test60171,"public void test60171() throws Throwable {
    MockFile mockFile0 = new MockFile("""", """");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/"");
    ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertEquals(0L, zipArchiveEntry1.getExternalAttributes());
}",0,"assertEquals(1, zipArchiveEntry1.getExternalAttributes())"
project,0,test60173,"public void test60173() throws Throwable {
    MockFile mockFile0 = new MockFile("""", """");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ""/"");
    ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
    boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    assertEquals((-1), zipArchiveEntry1.getMethod());
}",0,"assertEquals(0, zipArchiveEntry1.getMethod())"
project,0,test61175,"public void test61175() throws Throwable {
    MockFile mockFile0 = new MockFile("""", """");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, """");
    zipArchiveEntry0.setExtra();
    ZipArchiveEntry zipArchiveEntry1 = null;
    try {
        zipArchiveEntry1 = new ZipArchiveEntry((ZipEntry) zipArchiveEntry0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // ZIP compression method can not be negative: -1
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveEntry"", e);
    }
}",0,
project,0,test62176,"public void test62176() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""xAb"");
    int int0 = zipArchiveEntry0.getPlatform();
    assertEquals(0, int0);
}",0,"assertEquals(0, int0)"
project,0,test62177,"public void test62177() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""xAb"");
    int int0 = zipArchiveEntry0.getPlatform();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getInternalAttributes())"
project,0,test62178,"public void test62178() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""xAb"");
    int int0 = zipArchiveEntry0.getPlatform();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,
project,0,test62179,"public void test62179() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""xAb"");
    int int0 = zipArchiveEntry0.getPlatform();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getExternalAttributes())"
project,0,test63180,"public void test63180() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    byte[] byteArray0 = zipArchiveEntry0.getLocalFileDataExtra();
    assertNotNull(byteArray0);
}",0,
project,0,test63181,"public void test63181() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    byte[] byteArray0 = zipArchiveEntry0.getLocalFileDataExtra();
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    assertEquals(0, byteArray0.length);
}",0,
project,0,test63182,"public void test63182() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    byte[] byteArray0 = zipArchiveEntry0.getLocalFileDataExtra();
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
    assertEquals((-1), zipArchiveEntry1.getMethod());
}",0,
project,0,test63183,"public void test63183() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    byte[] byteArray0 = zipArchiveEntry0.getLocalFileDataExtra();
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
    assertEquals(0L, zipArchiveEntry1.getExternalAttributes());
}",0,
project,0,test63184,"public void test63184() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    byte[] byteArray0 = zipArchiveEntry0.getLocalFileDataExtra();
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
    assertEquals(0, zipArchiveEntry1.getInternalAttributes());
}",0,
project,0,test63185,"public void test63185() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    byte[] byteArray0 = zipArchiveEntry0.getLocalFileDataExtra();
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
    assertEquals(0, zipArchiveEntry1.getPlatform());
}",0,"assertEquals(1, zipArchiveEntry1.getPlatform())"
project,0,test64186,"public void test64186() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    zipArchiveEntry0.setInternalAttributes(841);
    int int0 = zipArchiveEntry0.getInternalAttributes();
    assertEquals(841, int0);
}",0,"assertEquals(0, int0)"
project,0,test65187,"public void test65187() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    byte[] byteArray0 = zipArchiveEntry0.getCentralDirectoryExtra();
    zipArchiveEntry0.setExtra(byteArray0);
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,
project,0,test65188,"public void test65188() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    byte[] byteArray0 = zipArchiveEntry0.getCentralDirectoryExtra();
    zipArchiveEntry0.setExtra(byteArray0);
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getInternalAttributes())"
project,0,test65189,"public void test65189() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    byte[] byteArray0 = zipArchiveEntry0.getCentralDirectoryExtra();
    zipArchiveEntry0.setExtra(byteArray0);
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test65190,"public void test65190() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""OQU]yU7X\""eO)`"");
    byte[] byteArray0 = zipArchiveEntry0.getCentralDirectoryExtra();
    zipArchiveEntry0.setExtra(byteArray0);
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,
project,0,test66191,"public void test66191() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""ZIP compression method can not be negative: "");
    zipArchiveEntry0.getLastModifiedDate();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getInternalAttributes())"
project,0,test66192,"public void test66192() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""ZIP compression method can not be negative: "");
    zipArchiveEntry0.getLastModifiedDate();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,
project,0,test66193,"public void test66193() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""ZIP compression method can not be negative: "");
    zipArchiveEntry0.getLastModifiedDate();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,
project,0,test66194,"public void test66194() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""ZIP compression method can not be negative: "");
    zipArchiveEntry0.getLastModifiedDate();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getExternalAttributes())"
project,0,test67195,"public void test67195() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = null;
    try {
        zipArchiveEntry1 = new ZipArchiveEntry(zipArchiveEntry0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // ZIP compression method can not be negative: -1
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveEntry"", e);
    }
}",0,
