project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("" is not a concrete class"");
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry("" is not a concrete class"");
    zipArchiveEntry1.setExternalAttributes(638L);
    zipArchiveEntry0.equals(zipArchiveEntry1);
}",0,
project,0,test011,"public void test011() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("" is not a concrete class"");
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry("" is not a concrete class"");
    zipArchiveEntry1.setUnixMode((byte) 2);
    zipArchiveEntry0.equals(zipArchiveEntry1);
}",0,
project,0,test022,"public void test022() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("" is not a concrete class"");
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry("" is not a concrete class"");
    zipArchiveEntry1.setInternalAttributes((-591));
    zipArchiveEntry0.equals(zipArchiveEntry1);
}",0,
project,0,test033,"public void test033() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("" is not a concrete class"");
    zipArchiveEntry0.setTime((-117L));
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry("" is not a concrete class"");
    zipArchiveEntry0.equals(zipArchiveEntry1);
}",0,
project,0,test044,"public void test044() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setPlatform((-2736));
    zipArchiveEntry0.setName("" - "");
}",0,
project,0,test055,"public void test055() throws Throwable {
    MockFile mockFile0 = new MockFile(""0jM8;"", """");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, """");
    zipArchiveEntry0.setUnixMode((-539));
    zipArchiveEntry0.getUnixMode();
}",0,
project,0,test066,"public void test066() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    zipArchiveEntry0.setPlatform(16);
    zipArchiveEntry0.getUnixMode();
}",0,
project,0,test077,"public void test077() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""%r/8&E).&ivm/"");
    zipArchiveEntry0.setName("""");
}",1,
project,0,test088,"public void test088() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""%r8&E).&ivm"");
    zipArchiveEntry0.equals(zipArchiveEntry0);
}",0,
project,0,test099,"public void test099() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    zipArchiveEntry0.isDirectory();
}",0,
project,0,test1010,"public void test1010() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&8{b(W'LqVf"", ""KS!!0%&{&8{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, """");
    zipArchiveEntry0.getSize();
}",0,
project,0,test1111,"public void test1111() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("" is not a concrete class"");
    zipArchiveEntry0.setSize(628L);
    zipArchiveEntry0.getSize();
}",0,
project,0,test1212,"public void test1212() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setPlatform((-2736));
    zipArchiveEntry0.getPlatform();
}",0,
project,0,test1313,"public void test1313() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""GQ?+REZy+?"");
    zipArchiveEntry0.setMethod(0);
    zipArchiveEntry0.getMethod();
}",0,
project,0,test1414,"public void test1414() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setMethod(1594);
    zipArchiveEntry0.getMethod();
}",0,
project,0,test1515,"public void test1515() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[8];
    zipArchiveEntry0.setExtra(byteArray0);
    zipArchiveEntry0.getLocalFileDataExtra();
}",0,
project,0,test1616,"public void test1616() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setInternalAttributes((byte) 1);
    zipArchiveEntry0.getInternalAttributes();
}",0,
project,0,test1717,"public void test1717() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setInternalAttributes((-457));
    zipArchiveEntry0.getInternalAttributes();
}",0,
project,0,test1818,"public void test1818() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""Error parsing extra fields for entry: "");
    GeneralPurposeBit generalPurposeBit0 = zipArchiveEntry0.getGeneralPurposeBit();
    generalPurposeBit0.useStrongEncryption(true);
    zipArchiveEntry0.getGeneralPurposeBit();
}",0,
project,0,test1919,"public void test1919() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""Error parsing extra fields for entry: "");
    GeneralPurposeBit generalPurposeBit0 = zipArchiveEntry0.getGeneralPurposeBit();
    generalPurposeBit0.useDataDescriptor(true);
    zipArchiveEntry0.getGeneralPurposeBit();
}",0,
project,0,test2020,"public void test2020() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("" is not a concrete class"");
    AsiExtraField asiExtraField0 = new AsiExtraField();
    zipArchiveEntry0.addAsFirstExtraField(asiExtraField0);
    zipArchiveEntry0.getExtraFields();
}",0,
project,0,test2121,"public void test2121() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setExternalAttributes(134695760L);
    zipArchiveEntry0.getExternalAttributes();
}",0,
project,0,test2222,"public void test2222() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setExternalAttributes((-1L));
    zipArchiveEntry0.getExternalAttributes();
}",0,
project,0,test2323,"public void test2323() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[5];
    zipArchiveEntry0.setExtra(byteArray0);
    zipArchiveEntry0.getCentralDirectoryExtra();
}",0,
project,0,test2424,"public void test2424() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    try {
        zipArchiveEntry0.setExtra((byte[]) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ExtraFieldUtils"", e);
    }
}",0,
project,0,test2525,"public void test2525() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    // Undeclared exception!
    try {
        zipArchiveEntry0.setCentralDirectoryExtra((byte[]) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ExtraFieldUtils"", e);
    }
}",0,
project,0,test2626,"public void test2626() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""GQ?+REZy+?"");
    // Undeclared exception!
    try {
        zipArchiveEntry0.addExtraField((ZipExtraField) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveEntry"", e);
    }
}",0,
project,0,test2727,"public void test2727() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField();
    ZipEightByteInteger zipEightByteInteger0 = new ZipEightByteInteger(0);
    zip64ExtendedInformationExtraField0.setSize(zipEightByteInteger0);
    // Undeclared exception!
    try {
        zipArchiveEntry0.addExtraField(zip64ExtendedInformationExtraField0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Zip64 extended information must contain both size values in the local file header.
        //
        verifyException(""org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField"", e);
    }
}",0,
project,0,test2828,"public void test2828() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = null;
    try {
        zipArchiveEntry0 = new ZipArchiveEntry((ZipArchiveEntry) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // entry
        //
        verifyException(""java.util.Objects"", e);
    }
}",0,
project,0,test2929,"public void test2929() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = null;
    try {
        zipArchiveEntry0 = new ZipArchiveEntry((ZipEntry) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // entry
        //
        verifyException(""java.util.Objects"", e);
    }
}",0,
project,0,test3030,"public void test3030() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = null;
    try {
        zipArchiveEntry0 = new ZipArchiveEntry((String) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // name
        //
        verifyException(""java.util.Objects"", e);
    }
}",0,
project,0,test3131,"public void test3131() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = null;
    try {
        zipArchiveEntry0 = new ZipArchiveEntry((File) null, ""s1aT[?@{%;&56t6i`d"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveEntry"", e);
    }
}",0,
project,0,test3232,"public void test3232() throws Throwable {
    File file0 = MockFile.createTempFile(""Su<m;p%NHpo4"", ""Su<m;p%NHpo4"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(file0, ""Su<m;p%NHpo4"");
    zipArchiveEntry0.getName();
}",0,
project,0,test3333,"public void test3333() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[5];
    byteArray0[2] = (byte) (-92);
    zipArchiveEntry0.setExtra(byteArray0);
    zipArchiveEntry0.getExtraFields(true);
}",0,
project,0,test3434,"public void test3434() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField();
    zipArchiveEntry0.addExtraField(zip64ExtendedInformationExtraField0);
    zipArchiveEntry0.getExtraFields(true);
}",0,
project,0,test3535,"public void test3535() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""Error parsing extra fields for entry: "");
    zipArchiveEntry0.getExtraFields(true);
}",0,
project,0,test3636,"public void test3636() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""'s no-arg constructor is not public"");
    zipArchiveEntry0.getExtraFields(false);
}",0,
project,0,test3737,"public void test3737() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""GQ?+REZy+?"");
    byte[] byteArray0 = new byte[8];
    zipArchiveEntry0.setExtra(byteArray0);
    zipArchiveEntry0.getExtraFields(false);
}",0,
project,0,test3838,"public void test3838() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipExtraField[] zipExtraFieldArray0 = new ZipExtraField[6];
    UnparseableExtraFieldData unparseableExtraFieldData0 = new UnparseableExtraFieldData();
    zipExtraFieldArray0[0] = (ZipExtraField) unparseableExtraFieldData0;
    // Undeclared exception!
    try {
        zipArchiveEntry0.setExtraFields(zipExtraFieldArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveEntry"", e);
    }
}",0,
project,0,test3939,"public void test3939() throws Throwable {
    MockFile mockFile0 = new MockFile(""aFu6!"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, """");
    ZipExtraField[] zipExtraFieldArray0 = new ZipExtraField[0];
    zipArchiveEntry0.setExtraFields(zipExtraFieldArray0);
}",0,
project,0,test4040,"public void test4040() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    // Undeclared exception!
    try {
        zipArchiveEntry0.setMethod((-1));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // ZIP compression method can not be negative: -1
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveEntry"", e);
    }
}",1,
project,0,test4141,"public void test4141() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""invalid entry size"");
    ZipArchiveEntry zipArchiveEntry1 = null;
    try {
        zipArchiveEntry1 = new ZipArchiveEntry((ZipEntry) zipArchiveEntry0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // ZIP compression method can not be negative: -1
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveEntry"", e);
    }
}",0,
project,0,test4242,"public void test4242() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.getSize();
}",0,
project,0,test4343,"public void test4343() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""%r8&E).&ivm"");
    zipArchiveEntry0.getMethod();
}",0,
project,0,test4444,"public void test4444() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""F=mS7\"".s@);//"");
    zipArchiveEntry0.isDirectory();
}",0,
project,0,test4545,"public void test4545() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""F]L0WvI+um]W6"");
    zipArchiveEntry0.getExternalAttributes();
}",0,
project,0,test4646,"public void test4646() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.getPlatform();
}",0,
project,0,test4747,"public void test4747() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.getInternalAttributes();
}",0,
project,0,test4848,"public void test4848() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("" is not a concrete class"");
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry("" is not a concrete class"");
    byte[] byteArray0 = new byte[5];
    zipArchiveEntry1.setComment("" is not a concrete class"");
    byteArray0[3] = (byte) 62;
    zipArchiveEntry0.setComment("" is not a concrete class"");
    GeneralPurposeBit generalPurposeBit0 = GeneralPurposeBit.parse(byteArray0, 3);
    zipArchiveEntry1.setGeneralPurposeBit(generalPurposeBit0);
    zipArchiveEntry0.equals(zipArchiveEntry1);
}",0,
project,0,test4949,"public void test4949() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("" is not a concrete class"");
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry("" is not a concrete class"");
    byte[] byteArray0 = new byte[9];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    zipArchiveEntry0.equals(zipArchiveEntry1);
}",0,
project,0,test5050,"public void test5050() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("" is not a concrete class"");
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry("" is not a concrete class"");
    zipArchiveEntry0.setCompressedSize((byte) 40);
    zipArchiveEntry0.equals(zipArchiveEntry1);
}",0,
project,0,test5151,"public void test5151() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("" is not a concrete class"");
    zipArchiveEntry0.setCrc(2107L);
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry("" is not a concrete class"");
    zipArchiveEntry0.equals(zipArchiveEntry1);
}",0,
project,0,test5252,"public void test5252() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("" is not a concrete class"");
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry("" is not a concrete class"");
    zipArchiveEntry1.setSize(5661L);
    zipArchiveEntry0.equals(zipArchiveEntry1);
}",0,
project,0,test5353,"public void test5353() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("" is not a concrete class"");
    zipArchiveEntry0.setMethod(11);
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry("" is not a concrete class"");
    zipArchiveEntry0.equals(zipArchiveEntry1);
}",0,
project,0,test5454,"public void test5454() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("" is not a concrete class"");
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry("" is not a concrete class"");
    zipArchiveEntry1.setExternalAttributes((byte) (-10));
    zipArchiveEntry0.equals(zipArchiveEntry1);
}",0,
project,0,test5555,"public void test5555() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("" is not a concrete class"");
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry("" is not a concrete class"");
    zipArchiveEntry0.setUnixMode((byte) 40);
    zipArchiveEntry0.equals(zipArchiveEntry1);
}",0,
project,0,test5656,"public void test5656() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("" is not a concrete class"");
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry("" is not a concrete class"");
    zipArchiveEntry1.setInternalAttributes(243);
    zipArchiveEntry0.equals(zipArchiveEntry1);
}",0,
project,0,test5757,"public void test5757() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("" is not a concrete class"");
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry("" is not a concrete class"");
    TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
    FileTime fileTime0 = FileTime.from((long) 3, timeUnit0);
    zipArchiveEntry0.setLastModifiedTime(fileTime0);
    zipArchiveEntry0.equals(zipArchiveEntry1);
}",0,
project,0,test5858,"public void test5858() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("" is not a concrete class"");
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry("" is not a concrete class"");
    zipArchiveEntry1.setComment("" is not a concrete class"");
    zipArchiveEntry0.setComment("" is not a concrete class"");
    zipArchiveEntry0.equals(zipArchiveEntry1);
}",0,
project,0,test5959,"public void test5959() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("" is not a concrete class"");
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry("" is not a concrete class"");
    zipArchiveEntry1.setComment("" is not a concrete class"");
    zipArchiveEntry0.equals(zipArchiveEntry1);
}",0,
project,0,test6060,"public void test6060() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("" is not a concrete class"");
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry("" is not a concrete class"");
    zipArchiveEntry0.setComment("" is not a concrete class"");
    zipArchiveEntry0.equals(zipArchiveEntry1);
}",0,
project,0,test6161,"public void test6161() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(""."");
    zipArchiveEntry0.equals(zipArchiveEntry1);
}",0,
project,0,test6262,"public void test6262() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    UnparseableExtraFieldData unparseableExtraFieldData0 = new UnparseableExtraFieldData();
    zipArchiveEntry0.equals(unparseableExtraFieldData0);
}",0,
project,0,test6363,"public void test6363() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.equals((Object) null);
}",0,
project,0,test6464,"public void test6464() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[8];
    zipArchiveEntry0.setExtra(byteArray0);
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
}",0,
project,0,test6565,"public void test6565() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[5];
    byteArray0[2] = (byte) (-92);
    zipArchiveEntry0.setExtra(byteArray0);
    zipArchiveEntry0.setExtra(byteArray0);
}",0,
project,0,test6666,"public void test6666() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[3];
    zipArchiveEntry0.setName(""d)^AT0^G"", byteArray0);
    zipArchiveEntry0.getRawName();
}",0,
project,0,test6767,"public void test6767() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.getRawName();
}",0,
project,0,test6868,"public void test6868() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    // Undeclared exception!
    try {
        zipArchiveEntry0.setSize((-524L));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // invalid entry size
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveEntry"", e);
    }
}",1,
project,0,test6969,"public void test6969() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""%]\"""");
    byte[] byteArray0 = zipArchiveEntry0.getLocalFileDataExtra();
    zipArchiveEntry0.setUnixMode(310);
    zipArchiveEntry0.setName(""%]\"""", byteArray0);
}",0,
project,0,test7070,"public void test7070() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[0];
    zipArchiveEntry0.setName((String) null, byteArray0);
    zipArchiveEntry0.getName();
}",0,
project,0,test7171,"public void test7171() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&8{b(W'LqVf"", ""KS!!0%&{&8{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, """");
    zipArchiveEntry0.setExtra();
    zipArchiveEntry0.getLocalFileDataExtra();
}",0,
project,0,test7272,"public void test7272() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[5];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    zipArchiveEntry0.getExtraField((ZipShort) null);
}",0,
project,0,test7373,"public void test7373() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&8{b(W'LqVf"", ""KS!!0%&{&8{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, """");
    JarMarker jarMarker0 = new JarMarker();
    ZipShort zipShort0 = jarMarker0.getHeaderId();
    zipArchiveEntry0.getExtraField(zipShort0);
}",0,
project,0,test7474,"public void test7474() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("" is not a concrete class"");
    // Undeclared exception!
    try {
        zipArchiveEntry0.removeUnparseableExtraFieldData();
        fail(""Expecting exception: NoSuchElementException"");
    } catch (NoSuchElementException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveEntry"", e);
    }
}",1,
project,0,test7575,"public void test7575() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[5];
    byteArray0[2] = (byte) (-92);
    zipArchiveEntry0.setExtra(byteArray0);
    zipArchiveEntry0.removeUnparseableExtraFieldData();
    zipArchiveEntry0.setExtra(byteArray0);
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test7676,"public void test7676() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&8{b(W'LqVf"", ""KS!!0%&{&8{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, """");
    JarMarker jarMarker0 = new JarMarker();
    ZipShort zipShort0 = jarMarker0.getHeaderId();
    // Undeclared exception!
    try {
        zipArchiveEntry0.removeExtraField(zipShort0);
        fail(""Expecting exception: NoSuchElementException"");
    } catch (NoSuchElementException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveEntry"", e);
    }
}",1,
project,0,test7777,"public void test7777() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[5];
    byteArray0[2] = (byte) (-92);
    zipArchiveEntry0.setExtra(byteArray0);
    UnparseableExtraFieldData unparseableExtraFieldData0 = zipArchiveEntry0.getUnparseableExtraFieldData();
    ZipShort zipShort0 = unparseableExtraFieldData0.getHeaderId();
    // Undeclared exception!
    try {
        zipArchiveEntry0.removeExtraField(zipShort0);
        fail(""Expecting exception: NoSuchElementException"");
    } catch (NoSuchElementException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveEntry"", e);
    }
}",1,
project,0,test7878,"public void test7878() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    JarMarker jarMarker0 = new JarMarker();
    zipArchiveEntry0.addExtraField(jarMarker0);
    zipArchiveEntry0.addAsFirstExtraField(jarMarker0);
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test7879,"public void test7879() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    JarMarker jarMarker0 = new JarMarker();
    zipArchiveEntry0.addExtraField(jarMarker0);
    zipArchiveEntry0.addAsFirstExtraField(jarMarker0);
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getInternalAttributes())"
project,0,test7880,"public void test7880() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    JarMarker jarMarker0 = new JarMarker();
    zipArchiveEntry0.addExtraField(jarMarker0);
    zipArchiveEntry0.addAsFirstExtraField(jarMarker0);
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test7881,"public void test7881() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    JarMarker jarMarker0 = new JarMarker();
    zipArchiveEntry0.addExtraField(jarMarker0);
    zipArchiveEntry0.addAsFirstExtraField(jarMarker0);
    assertEquals((-1L), zipArchiveEntry0.getSize());
}",0,"assertEquals(0, zipArchiveEntry0.getSize())"
project,0,test7882,"public void test7882() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    JarMarker jarMarker0 = new JarMarker();
    zipArchiveEntry0.addExtraField(jarMarker0);
    zipArchiveEntry0.addAsFirstExtraField(jarMarker0);
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getExternalAttributes())"
project,0,test7983,"public void test7983() throws Throwable {
    MockFile mockFile0 = new MockFile("""", """");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, """");
    JarMarker jarMarker0 = new JarMarker();
    zipArchiveEntry0.addAsFirstExtraField(jarMarker0);
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test7984,"public void test7984() throws Throwable {
    MockFile mockFile0 = new MockFile("""", """");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, """");
    JarMarker jarMarker0 = new JarMarker();
    zipArchiveEntry0.addAsFirstExtraField(jarMarker0);
    assertEquals((-1L), zipArchiveEntry0.getSize());
}",0,"assertEquals(0, zipArchiveEntry0.getSize())"
project,0,test7985,"public void test7985() throws Throwable {
    MockFile mockFile0 = new MockFile("""", """");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, """");
    JarMarker jarMarker0 = new JarMarker();
    zipArchiveEntry0.addAsFirstExtraField(jarMarker0);
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,
project,0,test7986,"public void test7986() throws Throwable {
    MockFile mockFile0 = new MockFile("""", """");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, """");
    JarMarker jarMarker0 = new JarMarker();
    zipArchiveEntry0.addAsFirstExtraField(jarMarker0);
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,
project,0,test7987,"public void test7987() throws Throwable {
    MockFile mockFile0 = new MockFile("""", """");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, """");
    JarMarker jarMarker0 = new JarMarker();
    zipArchiveEntry0.addAsFirstExtraField(jarMarker0);
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getInternalAttributes())"
project,0,test8088,"public void test8088() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""%]\"""");
    byte[] byteArray0 = zipArchiveEntry0.getCentralDirectoryExtra();
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField();
    zipArchiveEntry0.addExtraField(zip64ExtendedInformationExtraField0);
    assertEquals((-1L), zipArchiveEntry0.getSize());
}",0,"assertEquals(0, zipArchiveEntry0.getSize())"
project,0,test8089,"public void test8089() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""%]\"""");
    byte[] byteArray0 = zipArchiveEntry0.getCentralDirectoryExtra();
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField();
    zipArchiveEntry0.addExtraField(zip64ExtendedInformationExtraField0);
    assertEquals(""%]\"""", zipArchiveEntry0.getName());
}",0,assertNotNull(zipArchiveEntry0.getName())
project,0,test8090,"public void test8090() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""%]\"""");
    byte[] byteArray0 = zipArchiveEntry0.getCentralDirectoryExtra();
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField();
    zipArchiveEntry0.addExtraField(zip64ExtendedInformationExtraField0);
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,
project,0,test8091,"public void test8091() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""%]\"""");
    byte[] byteArray0 = zipArchiveEntry0.getCentralDirectoryExtra();
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField();
    zipArchiveEntry0.addExtraField(zip64ExtendedInformationExtraField0);
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test8092,"public void test8092() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""%]\"""");
    byte[] byteArray0 = zipArchiveEntry0.getCentralDirectoryExtra();
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField();
    zipArchiveEntry0.addExtraField(zip64ExtendedInformationExtraField0);
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(1, zipArchiveEntry0.getPlatform())"
project,0,test8193,"public void test8193() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[5];
    byteArray0[2] = (byte) (-4);
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    UnparseableExtraFieldData unparseableExtraFieldData0 = zipArchiveEntry0.getUnparseableExtraFieldData();
    assertNotNull(unparseableExtraFieldData0);
}",0,assertNotNull(unparseableExtraFieldData0)
project,0,test8194,"public void test8194() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[5];
    byteArray0[2] = (byte) (-4);
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    UnparseableExtraFieldData unparseableExtraFieldData0 = zipArchiveEntry0.getUnparseableExtraFieldData();
    zipArchiveEntry0.addExtraField(unparseableExtraFieldData0);
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",1,
project,0,test8195,"public void test8195() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[5];
    byteArray0[2] = (byte) (-4);
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    UnparseableExtraFieldData unparseableExtraFieldData0 = zipArchiveEntry0.getUnparseableExtraFieldData();
    zipArchiveEntry0.addExtraField(unparseableExtraFieldData0);
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getExternalAttributes())"
project,0,test8196,"public void test8196() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[5];
    byteArray0[2] = (byte) (-4);
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    UnparseableExtraFieldData unparseableExtraFieldData0 = zipArchiveEntry0.getUnparseableExtraFieldData();
    zipArchiveEntry0.addExtraField(unparseableExtraFieldData0);
    assertEquals((-1L), zipArchiveEntry0.getSize());
}",0,"assertEquals(0, zipArchiveEntry0.getSize())"
project,0,test8197,"public void test8197() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[5];
    byteArray0[2] = (byte) (-4);
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    UnparseableExtraFieldData unparseableExtraFieldData0 = zipArchiveEntry0.getUnparseableExtraFieldData();
    zipArchiveEntry0.addExtraField(unparseableExtraFieldData0);
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(1, zipArchiveEntry0.getPlatform())"
project,0,test8298,"public void test8298() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    UnparseableExtraFieldData unparseableExtraFieldData0 = new UnparseableExtraFieldData();
    // Undeclared exception!
    try {
        zipArchiveEntry0.addAsFirstExtraField(unparseableExtraFieldData0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ExtraFieldUtils"", e);
    }
}",0,
project,0,test8399,"public void test8399() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    int int0 = zipArchiveEntry0.getUnixMode();
    assertEquals((-1L), zipArchiveEntry0.getSize());
}",0,"assertEquals(0, zipArchiveEntry0.getSize())"
project,0,test83100,"public void test83100() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    int int0 = zipArchiveEntry0.getUnixMode();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getExternalAttributes())"
project,0,test83101,"public void test83101() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    int int0 = zipArchiveEntry0.getUnixMode();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,
project,0,test83102,"public void test83102() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    int int0 = zipArchiveEntry0.getUnixMode();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test83103,"public void test83103() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    int int0 = zipArchiveEntry0.getUnixMode();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(1, zipArchiveEntry0.getInternalAttributes())"
project,0,test83104,"public void test83104() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    int int0 = zipArchiveEntry0.getUnixMode();
    assertEquals(0, int0);
}",0,"assertEquals(0, int0)"
project,0,test84105,"public void test84105() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "" is not a concrete class/"");
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(1, zipArchiveEntry0.getPlatform())"
project,0,test84106,"public void test84106() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "" is not a concrete class/"");
    assertEquals((-1L), zipArchiveEntry0.getSize());
}",0,
project,0,test84107,"public void test84107() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "" is not a concrete class/"");
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getInternalAttributes())"
project,0,test84108,"public void test84108() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "" is not a concrete class/"");
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getExternalAttributes())"
project,0,test84109,"public void test84109() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "" is not a concrete class/"");
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test85110,"public void test85110() throws Throwable {
    MockFile mockFile0 = new MockFile("""", """");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, """");
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test85111,"public void test85111() throws Throwable {
    MockFile mockFile0 = new MockFile("""", """");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, """");
    zipArchiveEntry0.setMethod(0);
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(zipArchiveEntry0);
    assertEquals(0, zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test86112,"public void test86112() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    byte[] byteArray0 = zipArchiveEntry0.getCentralDirectoryExtra();
    zipArchiveEntry0.setExtra(byteArray0);
    ZipArchiveEntry zipArchiveEntry1 = null;
    try {
        zipArchiveEntry1 = new ZipArchiveEntry((ZipEntry) zipArchiveEntry0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // ZIP compression method can not be negative: -1
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveEntry"", e);
    }
}",0,
project,0,test87113,"public void test87113() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    GeneralPurposeBit generalPurposeBit0 = zipArchiveEntry0.getGeneralPurposeBit();
    generalPurposeBit0.useUTF8ForNames(true);
    zipArchiveEntry0.getGeneralPurposeBit();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getExternalAttributes())"
project,0,test87114,"public void test87114() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    GeneralPurposeBit generalPurposeBit0 = zipArchiveEntry0.getGeneralPurposeBit();
    generalPurposeBit0.useUTF8ForNames(true);
    zipArchiveEntry0.getGeneralPurposeBit();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test87115,"public void test87115() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    GeneralPurposeBit generalPurposeBit0 = zipArchiveEntry0.getGeneralPurposeBit();
    generalPurposeBit0.useUTF8ForNames(true);
    zipArchiveEntry0.getGeneralPurposeBit();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,
project,0,test87116,"public void test87116() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    GeneralPurposeBit generalPurposeBit0 = zipArchiveEntry0.getGeneralPurposeBit();
    generalPurposeBit0.useUTF8ForNames(true);
    zipArchiveEntry0.getGeneralPurposeBit();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getInternalAttributes())"
project,0,test87117,"public void test87117() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    GeneralPurposeBit generalPurposeBit0 = zipArchiveEntry0.getGeneralPurposeBit();
    generalPurposeBit0.useUTF8ForNames(true);
    zipArchiveEntry0.getGeneralPurposeBit();
    assertEquals((-1L), zipArchiveEntry0.getSize());
}",0,"assertEquals(0, zipArchiveEntry0.getSize())"
project,0,test88118,"public void test88118() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.getUnparseableExtraFieldData();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getExternalAttributes())"
project,0,test88119,"public void test88119() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.getUnparseableExtraFieldData();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test88120,"public void test88120() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.getUnparseableExtraFieldData();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getInternalAttributes())"
project,0,test88121,"public void test88121() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.getUnparseableExtraFieldData();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test88122,"public void test88122() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.getUnparseableExtraFieldData();
    assertEquals((-1L), zipArchiveEntry0.getSize());
}",0,"assertEquals(0, zipArchiveEntry0.getSize())"
project,0,test89123,"public void test89123() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.hashCode();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,
project,0,test89124,"public void test89124() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.hashCode();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test89125,"public void test89125() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.hashCode();
    assertEquals((-1L), zipArchiveEntry0.getSize());
}",0,"assertEquals(0, zipArchiveEntry0.getSize())"
project,0,test89126,"public void test89126() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.hashCode();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test89127,"public void test89127() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.hashCode();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getInternalAttributes())"
project,0,test90128,"public void test90128() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""%]\"""");
    byte[] byteArray0 = zipArchiveEntry0.getCentralDirectoryExtra();
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    zipArchiveEntry0.getExtraFields();
    assertEquals((-1L), zipArchiveEntry0.getSize());
}",0,"assertEquals(0, zipArchiveEntry0.getSize())"
project,0,test90129,"public void test90129() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""%]\"""");
    byte[] byteArray0 = zipArchiveEntry0.getCentralDirectoryExtra();
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    zipArchiveEntry0.getExtraFields();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(1, zipArchiveEntry0.getInternalAttributes())"
project,0,test90130,"public void test90130() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""%]\"""");
    byte[] byteArray0 = zipArchiveEntry0.getCentralDirectoryExtra();
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    zipArchiveEntry0.getExtraFields();
    assertEquals(""%]\"""", zipArchiveEntry0.getName());
}",0,assertNotNull(zipArchiveEntry0.getName())
project,0,test90131,"public void test90131() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""%]\"""");
    byte[] byteArray0 = zipArchiveEntry0.getCentralDirectoryExtra();
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    zipArchiveEntry0.getExtraFields();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,"assertEquals(0, zipArchiveEntry0.getPlatform())"
project,0,test90132,"public void test90132() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""%]\"""");
    byte[] byteArray0 = zipArchiveEntry0.getCentralDirectoryExtra();
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    zipArchiveEntry0.getExtraFields();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getExternalAttributes())"
project,0,test90133,"public void test90133() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""%]\"""");
    byte[] byteArray0 = zipArchiveEntry0.getCentralDirectoryExtra();
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    zipArchiveEntry0.getExtraFields();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test91134,"public void test91134() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("" is not a concrete class"");
    zipArchiveEntry0.getLastModifiedDate();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}",0,"assertEquals(0, zipArchiveEntry0.getMethod())"
project,0,test91135,"public void test91135() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("" is not a concrete class"");
    zipArchiveEntry0.getLastModifiedDate();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}",0,"assertEquals(0, zipArchiveEntry0.getExternalAttributes())"
project,0,test91136,"public void test91136() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("" is not a concrete class"");
    zipArchiveEntry0.getLastModifiedDate();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}",0,"assertEquals(1, zipArchiveEntry0.getInternalAttributes())"
project,0,test91137,"public void test91137() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("" is not a concrete class"");
    zipArchiveEntry0.getLastModifiedDate();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}",0,
project,0,test91138,"public void test91138() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("" is not a concrete class"");
    zipArchiveEntry0.getLastModifiedDate();
    assertEquals((-1L), zipArchiveEntry0.getSize());
}",0,"assertEquals(0, zipArchiveEntry0.getSize())"
project,0,test92139,"public void test92139() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("" is not a concrete class"");
    ZipArchiveEntry zipArchiveEntry1 = null;
    try {
        zipArchiveEntry1 = new ZipArchiveEntry(zipArchiveEntry0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // ZIP compression method can not be negative: -1
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveEntry"", e);
    }
}",0,
project,0,test93140,"public void test93140() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
    assertEquals(0, zipArchiveEntry1.getPlatform());
}",0,"assertEquals(1, zipArchiveEntry1.getPlatform())"
project,0,test93141,"public void test93141() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
    assertEquals(0, zipArchiveEntry1.getInternalAttributes());
}",0,
project,0,test93142,"public void test93142() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
    assertEquals((-1), zipArchiveEntry1.getMethod());
}",0,
project,0,test93143,"public void test93143() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
    assertEquals(0L, zipArchiveEntry1.getExternalAttributes());
}",0,
project,0,test93144,"public void test93144() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
    assertNotSame(zipArchiveEntry1, zipArchiveEntry0);
}",0,
project,0,test93145,"public void test93145() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
    assertEquals((-1L), zipArchiveEntry1.getSize());
}",0,
project,0,test94146,"public void test94146() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""%r/8&E).&ivm/"");
    zipArchiveEntry0.setUnixMode(1865);
    int int0 = zipArchiveEntry0.getPlatform();
    assertEquals(1865, zipArchiveEntry0.getUnixMode());
}",0,"assertEquals(0, zipArchiveEntry0.getUnixMode())"
project,0,test94147,"public void test94147() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""%r/8&E).&ivm/"");
    zipArchiveEntry0.setUnixMode(1865);
    int int0 = zipArchiveEntry0.getPlatform();
    assertEquals(3, int0);
}",0,"assertEquals(0, int0)"
