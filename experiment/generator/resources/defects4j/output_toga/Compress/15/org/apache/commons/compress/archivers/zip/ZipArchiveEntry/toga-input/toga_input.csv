focal_method,test_prefix,docstring
"/* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
@Override
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj == null || getClass() != obj.getClass()) {
        return false;
    }
    ZipArchiveEntry other = (ZipArchiveEntry) obj;
    String myName = getName();
    String otherName = other.getName();
    if (myName == null) {
        if (otherName != null) {
            return false;
        }
    } else if (!myName.equals(otherName)) {
        return false;
    }
    String myComment = getComment();
    String otherComment = other.getComment();
    if (myComment == null) {
        if (otherComment != null) {
            return false;
        }
    } else if (!myComment.equals(otherComment)) {
        return false;
    }
    return getTime() == other.getTime() && getInternalAttributes() == other.getInternalAttributes() && getPlatform() == other.getPlatform() && getExternalAttributes() == other.getExternalAttributes() && getMethod() == other.getMethod() && getSize() == other.getSize() && getCrc() == other.getCrc() && getCompressedSize() == other.getCompressedSize() && Arrays.equals(getCentralDirectoryExtra(), other.getCentralDirectoryExtra()) && Arrays.equals(getLocalFileDataExtra(), other.getLocalFileDataExtra()) && gpb.equals(other.gpb);
}","public void test000() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("" is not a concrete class"");
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry("" is not a concrete class"");
    zipArchiveEntry1.setExternalAttributes(638L);
    zipArchiveEntry0.equals(zipArchiveEntry1);
}",""
"/* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
@Override
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj == null || getClass() != obj.getClass()) {
        return false;
    }
    ZipArchiveEntry other = (ZipArchiveEntry) obj;
    String myName = getName();
    String otherName = other.getName();
    if (myName == null) {
        if (otherName != null) {
            return false;
        }
    } else if (!myName.equals(otherName)) {
        return false;
    }
    String myComment = getComment();
    String otherComment = other.getComment();
    if (myComment == null) {
        if (otherComment != null) {
            return false;
        }
    } else if (!myComment.equals(otherComment)) {
        return false;
    }
    return getTime() == other.getTime() && getInternalAttributes() == other.getInternalAttributes() && getPlatform() == other.getPlatform() && getExternalAttributes() == other.getExternalAttributes() && getMethod() == other.getMethod() && getSize() == other.getSize() && getCrc() == other.getCrc() && getCompressedSize() == other.getCompressedSize() && Arrays.equals(getCentralDirectoryExtra(), other.getCentralDirectoryExtra()) && Arrays.equals(getLocalFileDataExtra(), other.getLocalFileDataExtra()) && gpb.equals(other.gpb);
}","public void test011() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("" is not a concrete class"");
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry("" is not a concrete class"");
    zipArchiveEntry1.setUnixMode((byte) 2);
    zipArchiveEntry0.equals(zipArchiveEntry1);
}",""
"/* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
@Override
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj == null || getClass() != obj.getClass()) {
        return false;
    }
    ZipArchiveEntry other = (ZipArchiveEntry) obj;
    String myName = getName();
    String otherName = other.getName();
    if (myName == null) {
        if (otherName != null) {
            return false;
        }
    } else if (!myName.equals(otherName)) {
        return false;
    }
    String myComment = getComment();
    String otherComment = other.getComment();
    if (myComment == null) {
        if (otherComment != null) {
            return false;
        }
    } else if (!myComment.equals(otherComment)) {
        return false;
    }
    return getTime() == other.getTime() && getInternalAttributes() == other.getInternalAttributes() && getPlatform() == other.getPlatform() && getExternalAttributes() == other.getExternalAttributes() && getMethod() == other.getMethod() && getSize() == other.getSize() && getCrc() == other.getCrc() && getCompressedSize() == other.getCompressedSize() && Arrays.equals(getCentralDirectoryExtra(), other.getCentralDirectoryExtra()) && Arrays.equals(getLocalFileDataExtra(), other.getLocalFileDataExtra()) && gpb.equals(other.gpb);
}","public void test022() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("" is not a concrete class"");
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry("" is not a concrete class"");
    zipArchiveEntry1.setInternalAttributes((-591));
    zipArchiveEntry0.equals(zipArchiveEntry1);
}",""
"/* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
@Override
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj == null || getClass() != obj.getClass()) {
        return false;
    }
    ZipArchiveEntry other = (ZipArchiveEntry) obj;
    String myName = getName();
    String otherName = other.getName();
    if (myName == null) {
        if (otherName != null) {
            return false;
        }
    } else if (!myName.equals(otherName)) {
        return false;
    }
    String myComment = getComment();
    String otherComment = other.getComment();
    if (myComment == null) {
        if (otherComment != null) {
            return false;
        }
    } else if (!myComment.equals(otherComment)) {
        return false;
    }
    return getTime() == other.getTime() && getInternalAttributes() == other.getInternalAttributes() && getPlatform() == other.getPlatform() && getExternalAttributes() == other.getExternalAttributes() && getMethod() == other.getMethod() && getSize() == other.getSize() && getCrc() == other.getCrc() && getCompressedSize() == other.getCompressedSize() && Arrays.equals(getCentralDirectoryExtra(), other.getCentralDirectoryExtra()) && Arrays.equals(getLocalFileDataExtra(), other.getLocalFileDataExtra()) && gpb.equals(other.gpb);
}","public void test033() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("" is not a concrete class"");
    zipArchiveEntry0.setTime((-117L));
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry("" is not a concrete class"");
    zipArchiveEntry0.equals(zipArchiveEntry1);
}",""
"protected void setName(String name) {
    if (name != null && getPlatform() == PLATFORM_FAT && name.indexOf(""/"") == -1) {
        name = name.replace('\\', '/');
    }
    this.name = name;
}","public void test044() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setPlatform((-2736));
    zipArchiveEntry0.setName("" - "");
}","/**
 * Set the name of the entry.
 * @param name the name to use
 */"
"public int getUnixMode() {
    return platform != PLATFORM_UNIX ? 0 : (int) ((getExternalAttributes() >> SHORT_SHIFT) & SHORT_MASK);
}","public void test055() throws Throwable {
    MockFile mockFile0 = new MockFile(""0jM8;"", """");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, """");
    zipArchiveEntry0.setUnixMode((-539));
    zipArchiveEntry0.getUnixMode();
}","/**
 * Unix permission.
 * @return the unix permissions
 */"
"public int getUnixMode() {
    return platform != PLATFORM_UNIX ? 0 : (int) ((getExternalAttributes() >> SHORT_SHIFT) & SHORT_MASK);
}","public void test066() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    zipArchiveEntry0.setPlatform(16);
    zipArchiveEntry0.getUnixMode();
}","/**
 * Unix permission.
 * @return the unix permissions
 */"
"protected void setName(String name) {
    if (name != null && getPlatform() == PLATFORM_FAT && name.indexOf(""/"") == -1) {
        name = name.replace('\\', '/');
    }
    this.name = name;
}","public void test077() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""%r/8&E).&ivm/"");
    zipArchiveEntry0.setName("""");
}","/**
 * Set the name of the entry.
 * @param name the name to use
 */"
"/* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
@Override
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj == null || getClass() != obj.getClass()) {
        return false;
    }
    ZipArchiveEntry other = (ZipArchiveEntry) obj;
    String myName = getName();
    String otherName = other.getName();
    if (myName == null) {
        if (otherName != null) {
            return false;
        }
    } else if (!myName.equals(otherName)) {
        return false;
    }
    String myComment = getComment();
    String otherComment = other.getComment();
    if (myComment == null) {
        if (otherComment != null) {
            return false;
        }
    } else if (!myComment.equals(otherComment)) {
        return false;
    }
    return getTime() == other.getTime() && getInternalAttributes() == other.getInternalAttributes() && getPlatform() == other.getPlatform() && getExternalAttributes() == other.getExternalAttributes() && getMethod() == other.getMethod() && getSize() == other.getSize() && getCrc() == other.getCrc() && getCompressedSize() == other.getCompressedSize() && Arrays.equals(getCentralDirectoryExtra(), other.getCentralDirectoryExtra()) && Arrays.equals(getLocalFileDataExtra(), other.getLocalFileDataExtra()) && gpb.equals(other.gpb);
}","public void test088() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""%r8&E).&ivm"");
    zipArchiveEntry0.equals(zipArchiveEntry0);
}",""
"@Override
public boolean isDirectory() {
    return getName().endsWith(""/"");
}","public void test099() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    zipArchiveEntry0.isDirectory();
}","/**
 * Is this entry a directory?
 * @return true if the entry is a directory
 */"
"@Override
public long getSize() {
    return size;
}","public void test1010() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&8{b(W'LqVf"", ""KS!!0%&{&8{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, """");
    zipArchiveEntry0.getSize();
}","/**
 * Gets the uncompressed size of the entry data.
 * @return the entry size
 */"
"@Override
public long getSize() {
    return size;
}","public void test1111() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("" is not a concrete class"");
    zipArchiveEntry0.setSize(628L);
    zipArchiveEntry0.getSize();
}","/**
 * Gets the uncompressed size of the entry data.
 * @return the entry size
 */"
"public int getPlatform() {
    return platform;
}","public void test1212() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setPlatform((-2736));
    zipArchiveEntry0.getPlatform();
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"@Override
public int getMethod() {
    return method;
}","public void test1313() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""GQ?+REZy+?"");
    zipArchiveEntry0.setMethod(0);
    zipArchiveEntry0.getMethod();
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 *
 * @since 1.1
 */"
"@Override
public int getMethod() {
    return method;
}","public void test1414() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setMethod(1594);
    zipArchiveEntry0.getMethod();
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 *
 * @since 1.1
 */"
"public byte[] getLocalFileDataExtra() {
    byte[] extra = getExtra();
    return extra != null ? extra : new byte[0];
}","public void test1515() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[8];
    zipArchiveEntry0.setExtra(byteArray0);
    zipArchiveEntry0.getLocalFileDataExtra();
}","/**
 * Retrieves the extra data for the local file data.
 * @return the extra data for local file
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test1616() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setInternalAttributes((byte) 1);
    zipArchiveEntry0.getInternalAttributes();
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test1717() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setInternalAttributes((-457));
    zipArchiveEntry0.getInternalAttributes();
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"public GeneralPurposeBit getGeneralPurposeBit() {
    return gpb;
}","public void test1818() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""Error parsing extra fields for entry: "");
    GeneralPurposeBit generalPurposeBit0 = zipArchiveEntry0.getGeneralPurposeBit();
    generalPurposeBit0.useStrongEncryption(true);
    zipArchiveEntry0.getGeneralPurposeBit();
}","/**
 * The ""general purpose bit"" field.
 * @since 1.1
 */"
"public GeneralPurposeBit getGeneralPurposeBit() {
    return gpb;
}","public void test1919() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""Error parsing extra fields for entry: "");
    GeneralPurposeBit generalPurposeBit0 = zipArchiveEntry0.getGeneralPurposeBit();
    generalPurposeBit0.useDataDescriptor(true);
    zipArchiveEntry0.getGeneralPurposeBit();
}","/**
 * The ""general purpose bit"" field.
 * @since 1.1
 */"
"public ZipExtraField[] getExtraFields() {
    return getExtraFields(false);
}","public void test2020() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("" is not a concrete class"");
    AsiExtraField asiExtraField0 = new AsiExtraField();
    zipArchiveEntry0.addAsFirstExtraField(asiExtraField0);
    zipArchiveEntry0.getExtraFields();
}","/**
 * Retrieves all extra fields that have been parsed successfully.
 * @return an array of the extra fields
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test2121() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setExternalAttributes(134695760L);
    zipArchiveEntry0.getExternalAttributes();
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test2222() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setExternalAttributes((-1L));
    zipArchiveEntry0.getExternalAttributes();
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"public byte[] getCentralDirectoryExtra() {
    return ExtraFieldUtils.mergeCentralDirectoryData(getExtraFields(true));
}","public void test2323() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[5];
    zipArchiveEntry0.setExtra(byteArray0);
    zipArchiveEntry0.getCentralDirectoryExtra();
}","/**
 * Retrieves the extra data for the central directory.
 * @return the central directory extra data
 */"
"@Override
public void setExtra(byte[] extra) throws RuntimeException {
    try {
        ZipExtraField[] local = ExtraFieldUtils.parse(extra, true, ExtraFieldUtils.UnparseableExtraField.READ);
        mergeExtraFields(local, true);
    } catch (ZipException e) {
        // actually this is not possible as of Commons Compress 1.1
        throw new RuntimeException(""Error parsing extra fields for entry: "" + getName() + "" - "" + e.getMessage(), e);
    }
}","public void test2424() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    try {
        zipArchiveEntry0.setExtra((byte[]) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ExtraFieldUtils"", e);
    }
}","/**
 * Parses the given bytes as extra field data and consumes any
 * unparseable data as an {@link UnparseableExtraFieldData}
 * instance.
 * @param extra an array of bytes to be parsed into extra fields
 * @throws RuntimeException if the bytes cannot be parsed
 * @throws RuntimeException on error
 */"
"public void setCentralDirectoryExtra(byte[] b) {
    try {
        ZipExtraField[] central = ExtraFieldUtils.parse(b, false, ExtraFieldUtils.UnparseableExtraField.READ);
        mergeExtraFields(central, false);
    } catch (ZipException e) {
        throw new RuntimeException(e.getMessage(), e);
    }
}","public void test2525() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    // Undeclared exception!
    try {
        zipArchiveEntry0.setCentralDirectoryExtra((byte[]) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ExtraFieldUtils"", e);
    }
}","/**
 * Sets the central directory part of extra fields.
 */"
"public void addExtraField(ZipExtraField ze) {
    if (ze instanceof UnparseableExtraFieldData) {
        unparseableExtra = (UnparseableExtraFieldData) ze;
    } else {
        if (extraFields == null) {
            extraFields = new LinkedHashMap<ZipShort, ZipExtraField>();
        }
        extraFields.put(ze.getHeaderId(), ze);
    }
    setExtra();
}","public void test2626() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""GQ?+REZy+?"");
    // Undeclared exception!
    try {
        zipArchiveEntry0.addExtraField((ZipExtraField) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveEntry"", e);
    }
}","/**
 * Adds an extra field - replacing an already present extra field
 * of the same type.
 *
 * <p>If no extra field of the same type exists, the field will be
 * added as last field.</p>
 * @param ze an extra field
 */"
"public void addExtraField(ZipExtraField ze) {
    if (ze instanceof UnparseableExtraFieldData) {
        unparseableExtra = (UnparseableExtraFieldData) ze;
    } else {
        if (extraFields == null) {
            extraFields = new LinkedHashMap<ZipShort, ZipExtraField>();
        }
        extraFields.put(ze.getHeaderId(), ze);
    }
    setExtra();
}","public void test2727() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField();
    ZipEightByteInteger zipEightByteInteger0 = new ZipEightByteInteger(0);
    zip64ExtendedInformationExtraField0.setSize(zipEightByteInteger0);
    // Undeclared exception!
    try {
        zipArchiveEntry0.addExtraField(zip64ExtendedInformationExtraField0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Zip64 extended information must contain both size values in the local file header.
        //
        verifyException(""org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField"", e);
    }
}","/**
 * Adds an extra field - replacing an already present extra field
 * of the same type.
 *
 * <p>If no extra field of the same type exists, the field will be
 * added as last field.</p>
 * @param ze an extra field
 */"
"public ZipArchiveEntry(ZipArchiveEntry entry) throws ZipException {
    this((java.util.zip.ZipEntry) entry);
    setInternalAttributes(entry.getInternalAttributes());
    setExternalAttributes(entry.getExternalAttributes());
    setExtraFields(entry.getExtraFields(true));
}","public void test2828() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = null;
    try {
        zipArchiveEntry0 = new ZipArchiveEntry((ZipArchiveEntry) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // entry
        //
        verifyException(""java.util.Objects"", e);
    }
}","/**
 * Creates a new zip entry with fields taken from the specified zip entry.
 *
 * <p>Assumes the entry represents a directory if and only if the
 * name ends with a forward slash ""/"".</p>
 *
 * @param entry the entry to get fields from
 * @throws ZipException on error
 */"
"public ZipArchiveEntry(java.util.zip.ZipEntry entry) throws ZipException {
    super(entry);
    setName(entry.getName());
    byte[] extra = entry.getExtra();
    if (extra != null) {
        setExtraFields(ExtraFieldUtils.parse(extra, true, ExtraFieldUtils.UnparseableExtraField.READ));
    } else {
        // initializes extra data to an empty byte array
        setExtra();
    }
    setMethod(entry.getMethod());
    this.size = entry.getSize();
}","public void test2929() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = null;
    try {
        zipArchiveEntry0 = new ZipArchiveEntry((ZipEntry) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // entry
        //
        verifyException(""java.util.Objects"", e);
    }
}","/**
 * Creates a new zip entry with fields taken from the specified zip entry.
 *
 * <p>Assumes the entry represents a directory if and only if the
 * name ends with a forward slash ""/"".</p>
 *
 * @param entry the entry to get fields from
 * @throws ZipException on error
 */"
"public ZipArchiveEntry(String name) {
    super(name);
    setName(name);
}","public void test3030() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = null;
    try {
        zipArchiveEntry0 = new ZipArchiveEntry((String) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // name
        //
        verifyException(""java.util.Objects"", e);
    }
}","/**
 * Creates a new zip entry with the specified name.
 *
 * <p>Assumes the entry represents a directory if and only if the
 * name ends with a forward slash ""/"".</p>
 *
 * @param name the name of the entry
 */"
"public ZipArchiveEntry(File inputFile, String entryName) {
    this(inputFile.isDirectory() && !entryName.endsWith(""/"") ? entryName + ""/"" : entryName);
    if (inputFile.isFile()) {
        setSize(inputFile.length());
    }
    setTime(inputFile.lastModified());
    // TODO are there any other fields we can set here?
}","public void test3131() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = null;
    try {
        zipArchiveEntry0 = new ZipArchiveEntry((File) null, ""s1aT[?@{%;&56t6i`d"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveEntry"", e);
    }
}","/**
 * Creates a new zip entry taking some information from the given
 * file and using the provided name.
 *
 * <p>The name will be adjusted to end with a forward slash ""/"" if
 * the file is a directory.  If the file is not a directory a
 * potential trailing forward slash will be stripped from the
 * entry name.</p>
 */"
"@Override
public String getName() {
    return name == null ? super.getName() : name;
}","public void test3232() throws Throwable {
    File file0 = MockFile.createTempFile(""Su<m;p%NHpo4"", ""Su<m;p%NHpo4"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(file0, ""Su<m;p%NHpo4"");
    zipArchiveEntry0.getName();
}","/**
 * Get the name of the entry.
 * @return the entry name
 */"
"public ZipExtraField[] getExtraFields(boolean includeUnparseable) {
    if (extraFields == null) {
        return !includeUnparseable || unparseableExtra == null ? new ZipExtraField[0] : new ZipExtraField[] { unparseableExtra };
    }
    List<ZipExtraField> result = new ArrayList<ZipExtraField>(extraFields.values());
    if (includeUnparseable && unparseableExtra != null) {
        result.add(unparseableExtra);
    }
    return result.toArray(new ZipExtraField[0]);
}","public void test3333() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[5];
    byteArray0[2] = (byte) (-92);
    zipArchiveEntry0.setExtra(byteArray0);
    zipArchiveEntry0.getExtraFields(true);
}","/**
 * Retrieves extra fields.
 * @param includeUnparseable whether to also return unparseable
 * extra fields as {@link UnparseableExtraFieldData} if such data
 * exists.
 * @return an array of the extra fields
 *
 * @since 1.1
 */"
"public ZipExtraField[] getExtraFields(boolean includeUnparseable) {
    if (extraFields == null) {
        return !includeUnparseable || unparseableExtra == null ? new ZipExtraField[0] : new ZipExtraField[] { unparseableExtra };
    }
    List<ZipExtraField> result = new ArrayList<ZipExtraField>(extraFields.values());
    if (includeUnparseable && unparseableExtra != null) {
        result.add(unparseableExtra);
    }
    return result.toArray(new ZipExtraField[0]);
}","public void test3434() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField();
    zipArchiveEntry0.addExtraField(zip64ExtendedInformationExtraField0);
    zipArchiveEntry0.getExtraFields(true);
}","/**
 * Retrieves extra fields.
 * @param includeUnparseable whether to also return unparseable
 * extra fields as {@link UnparseableExtraFieldData} if such data
 * exists.
 * @return an array of the extra fields
 *
 * @since 1.1
 */"
"public ZipExtraField[] getExtraFields(boolean includeUnparseable) {
    if (extraFields == null) {
        return !includeUnparseable || unparseableExtra == null ? new ZipExtraField[0] : new ZipExtraField[] { unparseableExtra };
    }
    List<ZipExtraField> result = new ArrayList<ZipExtraField>(extraFields.values());
    if (includeUnparseable && unparseableExtra != null) {
        result.add(unparseableExtra);
    }
    return result.toArray(new ZipExtraField[0]);
}","public void test3535() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""Error parsing extra fields for entry: "");
    zipArchiveEntry0.getExtraFields(true);
}","/**
 * Retrieves extra fields.
 * @param includeUnparseable whether to also return unparseable
 * extra fields as {@link UnparseableExtraFieldData} if such data
 * exists.
 * @return an array of the extra fields
 *
 * @since 1.1
 */"
"public ZipExtraField[] getExtraFields(boolean includeUnparseable) {
    if (extraFields == null) {
        return !includeUnparseable || unparseableExtra == null ? new ZipExtraField[0] : new ZipExtraField[] { unparseableExtra };
    }
    List<ZipExtraField> result = new ArrayList<ZipExtraField>(extraFields.values());
    if (includeUnparseable && unparseableExtra != null) {
        result.add(unparseableExtra);
    }
    return result.toArray(new ZipExtraField[0]);
}","public void test3636() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""'s no-arg constructor is not public"");
    zipArchiveEntry0.getExtraFields(false);
}","/**
 * Retrieves extra fields.
 * @param includeUnparseable whether to also return unparseable
 * extra fields as {@link UnparseableExtraFieldData} if such data
 * exists.
 * @return an array of the extra fields
 *
 * @since 1.1
 */"
"public ZipExtraField[] getExtraFields(boolean includeUnparseable) {
    if (extraFields == null) {
        return !includeUnparseable || unparseableExtra == null ? new ZipExtraField[0] : new ZipExtraField[] { unparseableExtra };
    }
    List<ZipExtraField> result = new ArrayList<ZipExtraField>(extraFields.values());
    if (includeUnparseable && unparseableExtra != null) {
        result.add(unparseableExtra);
    }
    return result.toArray(new ZipExtraField[0]);
}","public void test3737() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""GQ?+REZy+?"");
    byte[] byteArray0 = new byte[8];
    zipArchiveEntry0.setExtra(byteArray0);
    zipArchiveEntry0.getExtraFields(false);
}","/**
 * Retrieves extra fields.
 * @param includeUnparseable whether to also return unparseable
 * extra fields as {@link UnparseableExtraFieldData} if such data
 * exists.
 * @return an array of the extra fields
 *
 * @since 1.1
 */"
"public void setExtraFields(ZipExtraField[] fields) {
    extraFields = new LinkedHashMap<ZipShort, ZipExtraField>();
    for (ZipExtraField field : fields) {
        if (field instanceof UnparseableExtraFieldData) {
            unparseableExtra = (UnparseableExtraFieldData) field;
        } else {
            extraFields.put(field.getHeaderId(), field);
        }
    }
    setExtra();
}","public void test3838() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipExtraField[] zipExtraFieldArray0 = new ZipExtraField[6];
    UnparseableExtraFieldData unparseableExtraFieldData0 = new UnparseableExtraFieldData();
    zipExtraFieldArray0[0] = (ZipExtraField) unparseableExtraFieldData0;
    // Undeclared exception!
    try {
        zipArchiveEntry0.setExtraFields(zipExtraFieldArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveEntry"", e);
    }
}","/**
 * Replaces all currently attached extra fields with the new array.
 * @param fields an array of extra fields
 */"
"public void setExtraFields(ZipExtraField[] fields) {
    extraFields = new LinkedHashMap<ZipShort, ZipExtraField>();
    for (ZipExtraField field : fields) {
        if (field instanceof UnparseableExtraFieldData) {
            unparseableExtra = (UnparseableExtraFieldData) field;
        } else {
            extraFields.put(field.getHeaderId(), field);
        }
    }
    setExtra();
}","public void test3939() throws Throwable {
    MockFile mockFile0 = new MockFile(""aFu6!"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, """");
    ZipExtraField[] zipExtraFieldArray0 = new ZipExtraField[0];
    zipArchiveEntry0.setExtraFields(zipExtraFieldArray0);
}","/**
 * Replaces all currently attached extra fields with the new array.
 * @param fields an array of extra fields
 */"
"@Override
public void setMethod(int method) {
    if (method < 0) {
        throw new IllegalArgumentException(""ZIP compression method can not be negative: "" + method);
    }
    this.method = method;
}","public void test4040() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    // Undeclared exception!
    try {
        zipArchiveEntry0.setMethod((-1));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // ZIP compression method can not be negative: -1
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveEntry"", e);
    }
}","/**
 * Sets the compression method of this entry.
 *
 * @param method compression method
 *
 * @since 1.1
 */"
"public ZipArchiveEntry(java.util.zip.ZipEntry entry) throws ZipException {
    super(entry);
    setName(entry.getName());
    byte[] extra = entry.getExtra();
    if (extra != null) {
        setExtraFields(ExtraFieldUtils.parse(extra, true, ExtraFieldUtils.UnparseableExtraField.READ));
    } else {
        // initializes extra data to an empty byte array
        setExtra();
    }
    setMethod(entry.getMethod());
    this.size = entry.getSize();
}","public void test4141() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""invalid entry size"");
    ZipArchiveEntry zipArchiveEntry1 = null;
    try {
        zipArchiveEntry1 = new ZipArchiveEntry((ZipEntry) zipArchiveEntry0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // ZIP compression method can not be negative: -1
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveEntry"", e);
    }
}","/**
 * Creates a new zip entry with fields taken from the specified zip entry.
 *
 * <p>Assumes the entry represents a directory if and only if the
 * name ends with a forward slash ""/"".</p>
 *
 * @param entry the entry to get fields from
 * @throws ZipException on error
 */"
"@Override
public long getSize() {
    return size;
}","public void test4242() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.getSize();
}","/**
 * Gets the uncompressed size of the entry data.
 * @return the entry size
 */"
"@Override
public int getMethod() {
    return method;
}","public void test4343() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""%r8&E).&ivm"");
    zipArchiveEntry0.getMethod();
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 *
 * @since 1.1
 */"
"@Override
public boolean isDirectory() {
    return getName().endsWith(""/"");
}","public void test4444() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""F=mS7\"".s@);//"");
    zipArchiveEntry0.isDirectory();
}","/**
 * Is this entry a directory?
 * @return true if the entry is a directory
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test4545() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""F]L0WvI+um]W6"");
    zipArchiveEntry0.getExternalAttributes();
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"public int getPlatform() {
    return platform;
}","public void test4646() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.getPlatform();
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test4747() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.getInternalAttributes();
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"/* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
@Override
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj == null || getClass() != obj.getClass()) {
        return false;
    }
    ZipArchiveEntry other = (ZipArchiveEntry) obj;
    String myName = getName();
    String otherName = other.getName();
    if (myName == null) {
        if (otherName != null) {
            return false;
        }
    } else if (!myName.equals(otherName)) {
        return false;
    }
    String myComment = getComment();
    String otherComment = other.getComment();
    if (myComment == null) {
        if (otherComment != null) {
            return false;
        }
    } else if (!myComment.equals(otherComment)) {
        return false;
    }
    return getTime() == other.getTime() && getInternalAttributes() == other.getInternalAttributes() && getPlatform() == other.getPlatform() && getExternalAttributes() == other.getExternalAttributes() && getMethod() == other.getMethod() && getSize() == other.getSize() && getCrc() == other.getCrc() && getCompressedSize() == other.getCompressedSize() && Arrays.equals(getCentralDirectoryExtra(), other.getCentralDirectoryExtra()) && Arrays.equals(getLocalFileDataExtra(), other.getLocalFileDataExtra()) && gpb.equals(other.gpb);
}","public void test4848() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("" is not a concrete class"");
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry("" is not a concrete class"");
    byte[] byteArray0 = new byte[5];
    zipArchiveEntry1.setComment("" is not a concrete class"");
    byteArray0[3] = (byte) 62;
    zipArchiveEntry0.setComment("" is not a concrete class"");
    GeneralPurposeBit generalPurposeBit0 = GeneralPurposeBit.parse(byteArray0, 3);
    zipArchiveEntry1.setGeneralPurposeBit(generalPurposeBit0);
    zipArchiveEntry0.equals(zipArchiveEntry1);
}",""
"/* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
@Override
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj == null || getClass() != obj.getClass()) {
        return false;
    }
    ZipArchiveEntry other = (ZipArchiveEntry) obj;
    String myName = getName();
    String otherName = other.getName();
    if (myName == null) {
        if (otherName != null) {
            return false;
        }
    } else if (!myName.equals(otherName)) {
        return false;
    }
    String myComment = getComment();
    String otherComment = other.getComment();
    if (myComment == null) {
        if (otherComment != null) {
            return false;
        }
    } else if (!myComment.equals(otherComment)) {
        return false;
    }
    return getTime() == other.getTime() && getInternalAttributes() == other.getInternalAttributes() && getPlatform() == other.getPlatform() && getExternalAttributes() == other.getExternalAttributes() && getMethod() == other.getMethod() && getSize() == other.getSize() && getCrc() == other.getCrc() && getCompressedSize() == other.getCompressedSize() && Arrays.equals(getCentralDirectoryExtra(), other.getCentralDirectoryExtra()) && Arrays.equals(getLocalFileDataExtra(), other.getLocalFileDataExtra()) && gpb.equals(other.gpb);
}","public void test4949() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("" is not a concrete class"");
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry("" is not a concrete class"");
    byte[] byteArray0 = new byte[9];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    zipArchiveEntry0.equals(zipArchiveEntry1);
}",""
"/* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
@Override
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj == null || getClass() != obj.getClass()) {
        return false;
    }
    ZipArchiveEntry other = (ZipArchiveEntry) obj;
    String myName = getName();
    String otherName = other.getName();
    if (myName == null) {
        if (otherName != null) {
            return false;
        }
    } else if (!myName.equals(otherName)) {
        return false;
    }
    String myComment = getComment();
    String otherComment = other.getComment();
    if (myComment == null) {
        if (otherComment != null) {
            return false;
        }
    } else if (!myComment.equals(otherComment)) {
        return false;
    }
    return getTime() == other.getTime() && getInternalAttributes() == other.getInternalAttributes() && getPlatform() == other.getPlatform() && getExternalAttributes() == other.getExternalAttributes() && getMethod() == other.getMethod() && getSize() == other.getSize() && getCrc() == other.getCrc() && getCompressedSize() == other.getCompressedSize() && Arrays.equals(getCentralDirectoryExtra(), other.getCentralDirectoryExtra()) && Arrays.equals(getLocalFileDataExtra(), other.getLocalFileDataExtra()) && gpb.equals(other.gpb);
}","public void test5050() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("" is not a concrete class"");
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry("" is not a concrete class"");
    zipArchiveEntry0.setCompressedSize((byte) 40);
    zipArchiveEntry0.equals(zipArchiveEntry1);
}",""
"/* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
@Override
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj == null || getClass() != obj.getClass()) {
        return false;
    }
    ZipArchiveEntry other = (ZipArchiveEntry) obj;
    String myName = getName();
    String otherName = other.getName();
    if (myName == null) {
        if (otherName != null) {
            return false;
        }
    } else if (!myName.equals(otherName)) {
        return false;
    }
    String myComment = getComment();
    String otherComment = other.getComment();
    if (myComment == null) {
        if (otherComment != null) {
            return false;
        }
    } else if (!myComment.equals(otherComment)) {
        return false;
    }
    return getTime() == other.getTime() && getInternalAttributes() == other.getInternalAttributes() && getPlatform() == other.getPlatform() && getExternalAttributes() == other.getExternalAttributes() && getMethod() == other.getMethod() && getSize() == other.getSize() && getCrc() == other.getCrc() && getCompressedSize() == other.getCompressedSize() && Arrays.equals(getCentralDirectoryExtra(), other.getCentralDirectoryExtra()) && Arrays.equals(getLocalFileDataExtra(), other.getLocalFileDataExtra()) && gpb.equals(other.gpb);
}","public void test5151() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("" is not a concrete class"");
    zipArchiveEntry0.setCrc(2107L);
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry("" is not a concrete class"");
    zipArchiveEntry0.equals(zipArchiveEntry1);
}",""
"/* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
@Override
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj == null || getClass() != obj.getClass()) {
        return false;
    }
    ZipArchiveEntry other = (ZipArchiveEntry) obj;
    String myName = getName();
    String otherName = other.getName();
    if (myName == null) {
        if (otherName != null) {
            return false;
        }
    } else if (!myName.equals(otherName)) {
        return false;
    }
    String myComment = getComment();
    String otherComment = other.getComment();
    if (myComment == null) {
        if (otherComment != null) {
            return false;
        }
    } else if (!myComment.equals(otherComment)) {
        return false;
    }
    return getTime() == other.getTime() && getInternalAttributes() == other.getInternalAttributes() && getPlatform() == other.getPlatform() && getExternalAttributes() == other.getExternalAttributes() && getMethod() == other.getMethod() && getSize() == other.getSize() && getCrc() == other.getCrc() && getCompressedSize() == other.getCompressedSize() && Arrays.equals(getCentralDirectoryExtra(), other.getCentralDirectoryExtra()) && Arrays.equals(getLocalFileDataExtra(), other.getLocalFileDataExtra()) && gpb.equals(other.gpb);
}","public void test5252() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("" is not a concrete class"");
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry("" is not a concrete class"");
    zipArchiveEntry1.setSize(5661L);
    zipArchiveEntry0.equals(zipArchiveEntry1);
}",""
"/* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
@Override
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj == null || getClass() != obj.getClass()) {
        return false;
    }
    ZipArchiveEntry other = (ZipArchiveEntry) obj;
    String myName = getName();
    String otherName = other.getName();
    if (myName == null) {
        if (otherName != null) {
            return false;
        }
    } else if (!myName.equals(otherName)) {
        return false;
    }
    String myComment = getComment();
    String otherComment = other.getComment();
    if (myComment == null) {
        if (otherComment != null) {
            return false;
        }
    } else if (!myComment.equals(otherComment)) {
        return false;
    }
    return getTime() == other.getTime() && getInternalAttributes() == other.getInternalAttributes() && getPlatform() == other.getPlatform() && getExternalAttributes() == other.getExternalAttributes() && getMethod() == other.getMethod() && getSize() == other.getSize() && getCrc() == other.getCrc() && getCompressedSize() == other.getCompressedSize() && Arrays.equals(getCentralDirectoryExtra(), other.getCentralDirectoryExtra()) && Arrays.equals(getLocalFileDataExtra(), other.getLocalFileDataExtra()) && gpb.equals(other.gpb);
}","public void test5353() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("" is not a concrete class"");
    zipArchiveEntry0.setMethod(11);
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry("" is not a concrete class"");
    zipArchiveEntry0.equals(zipArchiveEntry1);
}",""
"/* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
@Override
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj == null || getClass() != obj.getClass()) {
        return false;
    }
    ZipArchiveEntry other = (ZipArchiveEntry) obj;
    String myName = getName();
    String otherName = other.getName();
    if (myName == null) {
        if (otherName != null) {
            return false;
        }
    } else if (!myName.equals(otherName)) {
        return false;
    }
    String myComment = getComment();
    String otherComment = other.getComment();
    if (myComment == null) {
        if (otherComment != null) {
            return false;
        }
    } else if (!myComment.equals(otherComment)) {
        return false;
    }
    return getTime() == other.getTime() && getInternalAttributes() == other.getInternalAttributes() && getPlatform() == other.getPlatform() && getExternalAttributes() == other.getExternalAttributes() && getMethod() == other.getMethod() && getSize() == other.getSize() && getCrc() == other.getCrc() && getCompressedSize() == other.getCompressedSize() && Arrays.equals(getCentralDirectoryExtra(), other.getCentralDirectoryExtra()) && Arrays.equals(getLocalFileDataExtra(), other.getLocalFileDataExtra()) && gpb.equals(other.gpb);
}","public void test5454() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("" is not a concrete class"");
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry("" is not a concrete class"");
    zipArchiveEntry1.setExternalAttributes((byte) (-10));
    zipArchiveEntry0.equals(zipArchiveEntry1);
}",""
"/* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
@Override
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj == null || getClass() != obj.getClass()) {
        return false;
    }
    ZipArchiveEntry other = (ZipArchiveEntry) obj;
    String myName = getName();
    String otherName = other.getName();
    if (myName == null) {
        if (otherName != null) {
            return false;
        }
    } else if (!myName.equals(otherName)) {
        return false;
    }
    String myComment = getComment();
    String otherComment = other.getComment();
    if (myComment == null) {
        if (otherComment != null) {
            return false;
        }
    } else if (!myComment.equals(otherComment)) {
        return false;
    }
    return getTime() == other.getTime() && getInternalAttributes() == other.getInternalAttributes() && getPlatform() == other.getPlatform() && getExternalAttributes() == other.getExternalAttributes() && getMethod() == other.getMethod() && getSize() == other.getSize() && getCrc() == other.getCrc() && getCompressedSize() == other.getCompressedSize() && Arrays.equals(getCentralDirectoryExtra(), other.getCentralDirectoryExtra()) && Arrays.equals(getLocalFileDataExtra(), other.getLocalFileDataExtra()) && gpb.equals(other.gpb);
}","public void test5555() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("" is not a concrete class"");
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry("" is not a concrete class"");
    zipArchiveEntry0.setUnixMode((byte) 40);
    zipArchiveEntry0.equals(zipArchiveEntry1);
}",""
"/* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
@Override
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj == null || getClass() != obj.getClass()) {
        return false;
    }
    ZipArchiveEntry other = (ZipArchiveEntry) obj;
    String myName = getName();
    String otherName = other.getName();
    if (myName == null) {
        if (otherName != null) {
            return false;
        }
    } else if (!myName.equals(otherName)) {
        return false;
    }
    String myComment = getComment();
    String otherComment = other.getComment();
    if (myComment == null) {
        if (otherComment != null) {
            return false;
        }
    } else if (!myComment.equals(otherComment)) {
        return false;
    }
    return getTime() == other.getTime() && getInternalAttributes() == other.getInternalAttributes() && getPlatform() == other.getPlatform() && getExternalAttributes() == other.getExternalAttributes() && getMethod() == other.getMethod() && getSize() == other.getSize() && getCrc() == other.getCrc() && getCompressedSize() == other.getCompressedSize() && Arrays.equals(getCentralDirectoryExtra(), other.getCentralDirectoryExtra()) && Arrays.equals(getLocalFileDataExtra(), other.getLocalFileDataExtra()) && gpb.equals(other.gpb);
}","public void test5656() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("" is not a concrete class"");
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry("" is not a concrete class"");
    zipArchiveEntry1.setInternalAttributes(243);
    zipArchiveEntry0.equals(zipArchiveEntry1);
}",""
"/* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
@Override
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj == null || getClass() != obj.getClass()) {
        return false;
    }
    ZipArchiveEntry other = (ZipArchiveEntry) obj;
    String myName = getName();
    String otherName = other.getName();
    if (myName == null) {
        if (otherName != null) {
            return false;
        }
    } else if (!myName.equals(otherName)) {
        return false;
    }
    String myComment = getComment();
    String otherComment = other.getComment();
    if (myComment == null) {
        if (otherComment != null) {
            return false;
        }
    } else if (!myComment.equals(otherComment)) {
        return false;
    }
    return getTime() == other.getTime() && getInternalAttributes() == other.getInternalAttributes() && getPlatform() == other.getPlatform() && getExternalAttributes() == other.getExternalAttributes() && getMethod() == other.getMethod() && getSize() == other.getSize() && getCrc() == other.getCrc() && getCompressedSize() == other.getCompressedSize() && Arrays.equals(getCentralDirectoryExtra(), other.getCentralDirectoryExtra()) && Arrays.equals(getLocalFileDataExtra(), other.getLocalFileDataExtra()) && gpb.equals(other.gpb);
}","public void test5757() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("" is not a concrete class"");
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry("" is not a concrete class"");
    TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
    FileTime fileTime0 = FileTime.from((long) 3, timeUnit0);
    zipArchiveEntry0.setLastModifiedTime(fileTime0);
    zipArchiveEntry0.equals(zipArchiveEntry1);
}",""
"/* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
@Override
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj == null || getClass() != obj.getClass()) {
        return false;
    }
    ZipArchiveEntry other = (ZipArchiveEntry) obj;
    String myName = getName();
    String otherName = other.getName();
    if (myName == null) {
        if (otherName != null) {
            return false;
        }
    } else if (!myName.equals(otherName)) {
        return false;
    }
    String myComment = getComment();
    String otherComment = other.getComment();
    if (myComment == null) {
        if (otherComment != null) {
            return false;
        }
    } else if (!myComment.equals(otherComment)) {
        return false;
    }
    return getTime() == other.getTime() && getInternalAttributes() == other.getInternalAttributes() && getPlatform() == other.getPlatform() && getExternalAttributes() == other.getExternalAttributes() && getMethod() == other.getMethod() && getSize() == other.getSize() && getCrc() == other.getCrc() && getCompressedSize() == other.getCompressedSize() && Arrays.equals(getCentralDirectoryExtra(), other.getCentralDirectoryExtra()) && Arrays.equals(getLocalFileDataExtra(), other.getLocalFileDataExtra()) && gpb.equals(other.gpb);
}","public void test5858() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("" is not a concrete class"");
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry("" is not a concrete class"");
    zipArchiveEntry1.setComment("" is not a concrete class"");
    zipArchiveEntry0.setComment("" is not a concrete class"");
    zipArchiveEntry0.equals(zipArchiveEntry1);
}",""
"/* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
@Override
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj == null || getClass() != obj.getClass()) {
        return false;
    }
    ZipArchiveEntry other = (ZipArchiveEntry) obj;
    String myName = getName();
    String otherName = other.getName();
    if (myName == null) {
        if (otherName != null) {
            return false;
        }
    } else if (!myName.equals(otherName)) {
        return false;
    }
    String myComment = getComment();
    String otherComment = other.getComment();
    if (myComment == null) {
        if (otherComment != null) {
            return false;
        }
    } else if (!myComment.equals(otherComment)) {
        return false;
    }
    return getTime() == other.getTime() && getInternalAttributes() == other.getInternalAttributes() && getPlatform() == other.getPlatform() && getExternalAttributes() == other.getExternalAttributes() && getMethod() == other.getMethod() && getSize() == other.getSize() && getCrc() == other.getCrc() && getCompressedSize() == other.getCompressedSize() && Arrays.equals(getCentralDirectoryExtra(), other.getCentralDirectoryExtra()) && Arrays.equals(getLocalFileDataExtra(), other.getLocalFileDataExtra()) && gpb.equals(other.gpb);
}","public void test5959() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("" is not a concrete class"");
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry("" is not a concrete class"");
    zipArchiveEntry1.setComment("" is not a concrete class"");
    zipArchiveEntry0.equals(zipArchiveEntry1);
}",""
"/* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
@Override
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj == null || getClass() != obj.getClass()) {
        return false;
    }
    ZipArchiveEntry other = (ZipArchiveEntry) obj;
    String myName = getName();
    String otherName = other.getName();
    if (myName == null) {
        if (otherName != null) {
            return false;
        }
    } else if (!myName.equals(otherName)) {
        return false;
    }
    String myComment = getComment();
    String otherComment = other.getComment();
    if (myComment == null) {
        if (otherComment != null) {
            return false;
        }
    } else if (!myComment.equals(otherComment)) {
        return false;
    }
    return getTime() == other.getTime() && getInternalAttributes() == other.getInternalAttributes() && getPlatform() == other.getPlatform() && getExternalAttributes() == other.getExternalAttributes() && getMethod() == other.getMethod() && getSize() == other.getSize() && getCrc() == other.getCrc() && getCompressedSize() == other.getCompressedSize() && Arrays.equals(getCentralDirectoryExtra(), other.getCentralDirectoryExtra()) && Arrays.equals(getLocalFileDataExtra(), other.getLocalFileDataExtra()) && gpb.equals(other.gpb);
}","public void test6060() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("" is not a concrete class"");
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry("" is not a concrete class"");
    zipArchiveEntry0.setComment("" is not a concrete class"");
    zipArchiveEntry0.equals(zipArchiveEntry1);
}",""
"/* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
@Override
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj == null || getClass() != obj.getClass()) {
        return false;
    }
    ZipArchiveEntry other = (ZipArchiveEntry) obj;
    String myName = getName();
    String otherName = other.getName();
    if (myName == null) {
        if (otherName != null) {
            return false;
        }
    } else if (!myName.equals(otherName)) {
        return false;
    }
    String myComment = getComment();
    String otherComment = other.getComment();
    if (myComment == null) {
        if (otherComment != null) {
            return false;
        }
    } else if (!myComment.equals(otherComment)) {
        return false;
    }
    return getTime() == other.getTime() && getInternalAttributes() == other.getInternalAttributes() && getPlatform() == other.getPlatform() && getExternalAttributes() == other.getExternalAttributes() && getMethod() == other.getMethod() && getSize() == other.getSize() && getCrc() == other.getCrc() && getCompressedSize() == other.getCompressedSize() && Arrays.equals(getCentralDirectoryExtra(), other.getCentralDirectoryExtra()) && Arrays.equals(getLocalFileDataExtra(), other.getLocalFileDataExtra()) && gpb.equals(other.gpb);
}","public void test6161() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(""."");
    zipArchiveEntry0.equals(zipArchiveEntry1);
}",""
"/* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
@Override
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj == null || getClass() != obj.getClass()) {
        return false;
    }
    ZipArchiveEntry other = (ZipArchiveEntry) obj;
    String myName = getName();
    String otherName = other.getName();
    if (myName == null) {
        if (otherName != null) {
            return false;
        }
    } else if (!myName.equals(otherName)) {
        return false;
    }
    String myComment = getComment();
    String otherComment = other.getComment();
    if (myComment == null) {
        if (otherComment != null) {
            return false;
        }
    } else if (!myComment.equals(otherComment)) {
        return false;
    }
    return getTime() == other.getTime() && getInternalAttributes() == other.getInternalAttributes() && getPlatform() == other.getPlatform() && getExternalAttributes() == other.getExternalAttributes() && getMethod() == other.getMethod() && getSize() == other.getSize() && getCrc() == other.getCrc() && getCompressedSize() == other.getCompressedSize() && Arrays.equals(getCentralDirectoryExtra(), other.getCentralDirectoryExtra()) && Arrays.equals(getLocalFileDataExtra(), other.getLocalFileDataExtra()) && gpb.equals(other.gpb);
}","public void test6262() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    UnparseableExtraFieldData unparseableExtraFieldData0 = new UnparseableExtraFieldData();
    zipArchiveEntry0.equals(unparseableExtraFieldData0);
}",""
"/* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
@Override
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj == null || getClass() != obj.getClass()) {
        return false;
    }
    ZipArchiveEntry other = (ZipArchiveEntry) obj;
    String myName = getName();
    String otherName = other.getName();
    if (myName == null) {
        if (otherName != null) {
            return false;
        }
    } else if (!myName.equals(otherName)) {
        return false;
    }
    String myComment = getComment();
    String otherComment = other.getComment();
    if (myComment == null) {
        if (otherComment != null) {
            return false;
        }
    } else if (!myComment.equals(otherComment)) {
        return false;
    }
    return getTime() == other.getTime() && getInternalAttributes() == other.getInternalAttributes() && getPlatform() == other.getPlatform() && getExternalAttributes() == other.getExternalAttributes() && getMethod() == other.getMethod() && getSize() == other.getSize() && getCrc() == other.getCrc() && getCompressedSize() == other.getCompressedSize() && Arrays.equals(getCentralDirectoryExtra(), other.getCentralDirectoryExtra()) && Arrays.equals(getLocalFileDataExtra(), other.getLocalFileDataExtra()) && gpb.equals(other.gpb);
}","public void test6363() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.equals((Object) null);
}",""
"public void setCentralDirectoryExtra(byte[] b) {
    try {
        ZipExtraField[] central = ExtraFieldUtils.parse(b, false, ExtraFieldUtils.UnparseableExtraField.READ);
        mergeExtraFields(central, false);
    } catch (ZipException e) {
        throw new RuntimeException(e.getMessage(), e);
    }
}","public void test6464() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[8];
    zipArchiveEntry0.setExtra(byteArray0);
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
}","/**
 * Sets the central directory part of extra fields.
 */"
"@Override
public void setExtra(byte[] extra) throws RuntimeException {
    try {
        ZipExtraField[] local = ExtraFieldUtils.parse(extra, true, ExtraFieldUtils.UnparseableExtraField.READ);
        mergeExtraFields(local, true);
    } catch (ZipException e) {
        // actually this is not possible as of Commons Compress 1.1
        throw new RuntimeException(""Error parsing extra fields for entry: "" + getName() + "" - "" + e.getMessage(), e);
    }
}","public void test6565() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[5];
    byteArray0[2] = (byte) (-92);
    zipArchiveEntry0.setExtra(byteArray0);
    zipArchiveEntry0.setExtra(byteArray0);
}","/**
 * Parses the given bytes as extra field data and consumes any
 * unparseable data as an {@link UnparseableExtraFieldData}
 * instance.
 * @param extra an array of bytes to be parsed into extra fields
 * @throws RuntimeException if the bytes cannot be parsed
 * @throws RuntimeException on error
 */"
"public byte[] getRawName() {
    if (rawName != null) {
        byte[] b = new byte[rawName.length];
        System.arraycopy(rawName, 0, b, 0, rawName.length);
        return b;
    }
    return null;
}","public void test6666() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[3];
    zipArchiveEntry0.setName(""d)^AT0^G"", byteArray0);
    zipArchiveEntry0.getRawName();
}","/**
 * Returns the raw bytes that made up the name before it has been
 * converted using the configured or guessed encoding.
 *
 * <p>This method will return null if this instance has not been
 * read from an archive.</p>
 *
 * @since 1.2
 */"
"public byte[] getRawName() {
    if (rawName != null) {
        byte[] b = new byte[rawName.length];
        System.arraycopy(rawName, 0, b, 0, rawName.length);
        return b;
    }
    return null;
}","public void test6767() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.getRawName();
}","/**
 * Returns the raw bytes that made up the name before it has been
 * converted using the configured or guessed encoding.
 *
 * <p>This method will return null if this instance has not been
 * read from an archive.</p>
 *
 * @since 1.2
 */"
"@Override
public void setSize(long size) {
    if (size < 0) {
        throw new IllegalArgumentException(""invalid entry size"");
    }
    this.size = size;
}","public void test6868() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    // Undeclared exception!
    try {
        zipArchiveEntry0.setSize((-524L));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // invalid entry size
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveEntry"", e);
    }
}","/**
 * Sets the uncompressed size of the entry data.
 * @param size the uncompressed size in bytes
 * @exception IllegalArgumentException if the specified size is less
 *            than 0
 */"
"protected void setName(String name, byte[] rawName) {
    setName(name);
    this.rawName = rawName;
}","public void test6969() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""%]\"""");
    byte[] byteArray0 = zipArchiveEntry0.getLocalFileDataExtra();
    zipArchiveEntry0.setUnixMode(310);
    zipArchiveEntry0.setName(""%]\"""", byteArray0);
}","/**
 * Sets the name using the raw bytes and the string created from
 * it by guessing or using the configured encoding.
 * @param name the name to use created from the raw bytes using
 * the guessed or configured encoding
 * @param rawName the bytes originally read as name from the
 * archive
 * @since 1.2
 */"
"@Override
public String getName() {
    return name == null ? super.getName() : name;
}","public void test7070() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[0];
    zipArchiveEntry0.setName((String) null, byteArray0);
    zipArchiveEntry0.getName();
}","/**
 * Get the name of the entry.
 * @return the entry name
 */"
"public byte[] getLocalFileDataExtra() {
    byte[] extra = getExtra();
    return extra != null ? extra : new byte[0];
}","public void test7171() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&8{b(W'LqVf"", ""KS!!0%&{&8{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, """");
    zipArchiveEntry0.setExtra();
    zipArchiveEntry0.getLocalFileDataExtra();
}","/**
 * Retrieves the extra data for the local file data.
 * @return the extra data for local file
 */"
"public ZipExtraField getExtraField(ZipShort type) {
    if (extraFields != null) {
        return extraFields.get(type);
    }
    return null;
}","public void test7272() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[5];
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    zipArchiveEntry0.getExtraField((ZipShort) null);
}","/**
 * Looks up an extra field by its header id.
 *
 * @return null if no such field exists.
 */"
"public ZipExtraField getExtraField(ZipShort type) {
    if (extraFields != null) {
        return extraFields.get(type);
    }
    return null;
}","public void test7373() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&8{b(W'LqVf"", ""KS!!0%&{&8{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, """");
    JarMarker jarMarker0 = new JarMarker();
    ZipShort zipShort0 = jarMarker0.getHeaderId();
    zipArchiveEntry0.getExtraField(zipShort0);
}","/**
 * Looks up an extra field by its header id.
 *
 * @return null if no such field exists.
 */"
"public void removeUnparseableExtraFieldData() {
    if (unparseableExtra == null) {
        throw new java.util.NoSuchElementException();
    }
    unparseableExtra = null;
    setExtra();
}","public void test7474() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("" is not a concrete class"");
    // Undeclared exception!
    try {
        zipArchiveEntry0.removeUnparseableExtraFieldData();
        fail(""Expecting exception: NoSuchElementException"");
    } catch (NoSuchElementException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveEntry"", e);
    }
}","/**
 * Removes unparseable extra field data.
 *
 * @since 1.1
 */"
"public int getPlatform() {
    return platform;
}","public void test7575() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[5];
    byteArray0[2] = (byte) (-92);
    zipArchiveEntry0.setExtra(byteArray0);
    zipArchiveEntry0.removeUnparseableExtraFieldData();
    zipArchiveEntry0.setExtra(byteArray0);
    assertEquals(0, zipArchiveEntry0.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"public void removeExtraField(ZipShort type) {
    if (extraFields == null) {
        throw new java.util.NoSuchElementException();
    }
    if (extraFields.remove(type) == null) {
        throw new java.util.NoSuchElementException();
    }
    setExtra();
}","public void test7676() throws Throwable {
    MockFile mockFile0 = new MockFile(""KS!!0%&{&8{b(W'LqVf"", ""KS!!0%&{&8{b(W'LqVf"");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, """");
    JarMarker jarMarker0 = new JarMarker();
    ZipShort zipShort0 = jarMarker0.getHeaderId();
    // Undeclared exception!
    try {
        zipArchiveEntry0.removeExtraField(zipShort0);
        fail(""Expecting exception: NoSuchElementException"");
    } catch (NoSuchElementException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveEntry"", e);
    }
}","/**
 * Remove an extra field.
 * @param type the type of extra field to remove
 */"
"public void removeExtraField(ZipShort type) {
    if (extraFields == null) {
        throw new java.util.NoSuchElementException();
    }
    if (extraFields.remove(type) == null) {
        throw new java.util.NoSuchElementException();
    }
    setExtra();
}","public void test7777() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[5];
    byteArray0[2] = (byte) (-92);
    zipArchiveEntry0.setExtra(byteArray0);
    UnparseableExtraFieldData unparseableExtraFieldData0 = zipArchiveEntry0.getUnparseableExtraFieldData();
    ZipShort zipShort0 = unparseableExtraFieldData0.getHeaderId();
    // Undeclared exception!
    try {
        zipArchiveEntry0.removeExtraField(zipShort0);
        fail(""Expecting exception: NoSuchElementException"");
    } catch (NoSuchElementException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveEntry"", e);
    }
}","/**
 * Remove an extra field.
 * @param type the type of extra field to remove
 */"
"@Override
public int getMethod() {
    return method;
}","public void test7878() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    JarMarker jarMarker0 = new JarMarker();
    zipArchiveEntry0.addExtraField(jarMarker0);
    zipArchiveEntry0.addAsFirstExtraField(jarMarker0);
    assertEquals((-1), zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 *
 * @since 1.1
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test7879() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    JarMarker jarMarker0 = new JarMarker();
    zipArchiveEntry0.addExtraField(jarMarker0);
    zipArchiveEntry0.addAsFirstExtraField(jarMarker0);
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"public int getPlatform() {
    return platform;
}","public void test7880() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    JarMarker jarMarker0 = new JarMarker();
    zipArchiveEntry0.addExtraField(jarMarker0);
    zipArchiveEntry0.addAsFirstExtraField(jarMarker0);
    assertEquals(0, zipArchiveEntry0.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"@Override
public long getSize() {
    return size;
}","public void test7881() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    JarMarker jarMarker0 = new JarMarker();
    zipArchiveEntry0.addExtraField(jarMarker0);
    zipArchiveEntry0.addAsFirstExtraField(jarMarker0);
    assertEquals((-1L), zipArchiveEntry0.getSize());
}","/**
 * Gets the uncompressed size of the entry data.
 * @return the entry size
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test7882() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    JarMarker jarMarker0 = new JarMarker();
    zipArchiveEntry0.addExtraField(jarMarker0);
    zipArchiveEntry0.addAsFirstExtraField(jarMarker0);
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"public int getPlatform() {
    return platform;
}","public void test7983() throws Throwable {
    MockFile mockFile0 = new MockFile("""", """");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, """");
    JarMarker jarMarker0 = new JarMarker();
    zipArchiveEntry0.addAsFirstExtraField(jarMarker0);
    assertEquals(0, zipArchiveEntry0.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"@Override
public long getSize() {
    return size;
}","public void test7984() throws Throwable {
    MockFile mockFile0 = new MockFile("""", """");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, """");
    JarMarker jarMarker0 = new JarMarker();
    zipArchiveEntry0.addAsFirstExtraField(jarMarker0);
    assertEquals((-1L), zipArchiveEntry0.getSize());
}","/**
 * Gets the uncompressed size of the entry data.
 * @return the entry size
 */"
"@Override
public int getMethod() {
    return method;
}","public void test7985() throws Throwable {
    MockFile mockFile0 = new MockFile("""", """");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, """");
    JarMarker jarMarker0 = new JarMarker();
    zipArchiveEntry0.addAsFirstExtraField(jarMarker0);
    assertEquals((-1), zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 *
 * @since 1.1
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test7986() throws Throwable {
    MockFile mockFile0 = new MockFile("""", """");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, """");
    JarMarker jarMarker0 = new JarMarker();
    zipArchiveEntry0.addAsFirstExtraField(jarMarker0);
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test7987() throws Throwable {
    MockFile mockFile0 = new MockFile("""", """");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, """");
    JarMarker jarMarker0 = new JarMarker();
    zipArchiveEntry0.addAsFirstExtraField(jarMarker0);
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"@Override
public long getSize() {
    return size;
}","public void test8088() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""%]\"""");
    byte[] byteArray0 = zipArchiveEntry0.getCentralDirectoryExtra();
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField();
    zipArchiveEntry0.addExtraField(zip64ExtendedInformationExtraField0);
    assertEquals((-1L), zipArchiveEntry0.getSize());
}","/**
 * Gets the uncompressed size of the entry data.
 * @return the entry size
 */"
"@Override
public String getName() {
    return name == null ? super.getName() : name;
}","public void test8089() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""%]\"""");
    byte[] byteArray0 = zipArchiveEntry0.getCentralDirectoryExtra();
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField();
    zipArchiveEntry0.addExtraField(zip64ExtendedInformationExtraField0);
    assertEquals(""%]\"""", zipArchiveEntry0.getName());
}","/**
 * Get the name of the entry.
 * @return the entry name
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test8090() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""%]\"""");
    byte[] byteArray0 = zipArchiveEntry0.getCentralDirectoryExtra();
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField();
    zipArchiveEntry0.addExtraField(zip64ExtendedInformationExtraField0);
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"@Override
public int getMethod() {
    return method;
}","public void test8091() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""%]\"""");
    byte[] byteArray0 = zipArchiveEntry0.getCentralDirectoryExtra();
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField();
    zipArchiveEntry0.addExtraField(zip64ExtendedInformationExtraField0);
    assertEquals((-1), zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 *
 * @since 1.1
 */"
"public int getPlatform() {
    return platform;
}","public void test8092() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""%]\"""");
    byte[] byteArray0 = zipArchiveEntry0.getCentralDirectoryExtra();
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField();
    zipArchiveEntry0.addExtraField(zip64ExtendedInformationExtraField0);
    assertEquals(0, zipArchiveEntry0.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"public UnparseableExtraFieldData getUnparseableExtraFieldData() {
    return unparseableExtra;
}","public void test8193() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[5];
    byteArray0[2] = (byte) (-4);
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    UnparseableExtraFieldData unparseableExtraFieldData0 = zipArchiveEntry0.getUnparseableExtraFieldData();
    assertNotNull(unparseableExtraFieldData0);
}","/**
 * Looks up extra field data that couldn't be parsed correctly.
 *
 * @return null if no such field exists.
 *
 * @since 1.1
 */"
"@Override
public int getMethod() {
    return method;
}","public void test8194() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[5];
    byteArray0[2] = (byte) (-4);
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    UnparseableExtraFieldData unparseableExtraFieldData0 = zipArchiveEntry0.getUnparseableExtraFieldData();
    zipArchiveEntry0.addExtraField(unparseableExtraFieldData0);
    assertEquals((-1), zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 *
 * @since 1.1
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test8195() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[5];
    byteArray0[2] = (byte) (-4);
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    UnparseableExtraFieldData unparseableExtraFieldData0 = zipArchiveEntry0.getUnparseableExtraFieldData();
    zipArchiveEntry0.addExtraField(unparseableExtraFieldData0);
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"@Override
public long getSize() {
    return size;
}","public void test8196() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[5];
    byteArray0[2] = (byte) (-4);
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    UnparseableExtraFieldData unparseableExtraFieldData0 = zipArchiveEntry0.getUnparseableExtraFieldData();
    zipArchiveEntry0.addExtraField(unparseableExtraFieldData0);
    assertEquals((-1L), zipArchiveEntry0.getSize());
}","/**
 * Gets the uncompressed size of the entry data.
 * @return the entry size
 */"
"public int getPlatform() {
    return platform;
}","public void test8197() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    byte[] byteArray0 = new byte[5];
    byteArray0[2] = (byte) (-4);
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    UnparseableExtraFieldData unparseableExtraFieldData0 = zipArchiveEntry0.getUnparseableExtraFieldData();
    zipArchiveEntry0.addExtraField(unparseableExtraFieldData0);
    assertEquals(0, zipArchiveEntry0.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"public void addAsFirstExtraField(ZipExtraField ze) {
    if (ze instanceof UnparseableExtraFieldData) {
        unparseableExtra = (UnparseableExtraFieldData) ze;
    } else {
        LinkedHashMap<ZipShort, ZipExtraField> copy = extraFields;
        extraFields = new LinkedHashMap<ZipShort, ZipExtraField>();
        extraFields.put(ze.getHeaderId(), ze);
        if (copy != null) {
            copy.remove(ze.getHeaderId());
            extraFields.putAll(copy);
        }
    }
    setExtra();
}","public void test8298() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    UnparseableExtraFieldData unparseableExtraFieldData0 = new UnparseableExtraFieldData();
    // Undeclared exception!
    try {
        zipArchiveEntry0.addAsFirstExtraField(unparseableExtraFieldData0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ExtraFieldUtils"", e);
    }
}","/**
 * Adds an extra field - replacing an already present extra field
 * of the same type.
 *
 * <p>The new extra field will be the first one.</p>
 * @param ze an extra field
 */"
"@Override
public long getSize() {
    return size;
}","public void test8399() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    int int0 = zipArchiveEntry0.getUnixMode();
    assertEquals((-1L), zipArchiveEntry0.getSize());
}","/**
 * Gets the uncompressed size of the entry data.
 * @return the entry size
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test83100() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    int int0 = zipArchiveEntry0.getUnixMode();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"public int getPlatform() {
    return platform;
}","public void test83101() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    int int0 = zipArchiveEntry0.getUnixMode();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"@Override
public int getMethod() {
    return method;
}","public void test83102() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    int int0 = zipArchiveEntry0.getUnixMode();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 *
 * @since 1.1
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test83103() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    int int0 = zipArchiveEntry0.getUnixMode();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"public int getUnixMode() {
    return platform != PLATFORM_UNIX ? 0 : (int) ((getExternalAttributes() >> SHORT_SHIFT) & SHORT_MASK);
}","public void test83104() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    int int0 = zipArchiveEntry0.getUnixMode();
    assertEquals(0, int0);
}","/**
 * Unix permission.
 * @return the unix permissions
 */"
"public int getPlatform() {
    return platform;
}","public void test84105() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "" is not a concrete class/"");
    assertEquals(0, zipArchiveEntry0.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"@Override
public long getSize() {
    return size;
}","public void test84106() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "" is not a concrete class/"");
    assertEquals((-1L), zipArchiveEntry0.getSize());
}","/**
 * Gets the uncompressed size of the entry data.
 * @return the entry size
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test84107() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "" is not a concrete class/"");
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test84108() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "" is not a concrete class/"");
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"@Override
public int getMethod() {
    return method;
}","public void test84109() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "" is not a concrete class/"");
    assertEquals((-1), zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 *
 * @since 1.1
 */"
"@Override
public int getMethod() {
    return method;
}","public void test85110() throws Throwable {
    MockFile mockFile0 = new MockFile("""", """");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, """");
    assertEquals((-1), zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 *
 * @since 1.1
 */"
"@Override
public int getMethod() {
    return method;
}","public void test85111() throws Throwable {
    MockFile mockFile0 = new MockFile("""", """");
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, """");
    zipArchiveEntry0.setMethod(0);
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(zipArchiveEntry0);
    assertEquals(0, zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 *
 * @since 1.1
 */"
"public ZipArchiveEntry(java.util.zip.ZipEntry entry) throws ZipException {
    super(entry);
    setName(entry.getName());
    byte[] extra = entry.getExtra();
    if (extra != null) {
        setExtraFields(ExtraFieldUtils.parse(extra, true, ExtraFieldUtils.UnparseableExtraField.READ));
    } else {
        // initializes extra data to an empty byte array
        setExtra();
    }
    setMethod(entry.getMethod());
    this.size = entry.getSize();
}","public void test86112() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("""");
    byte[] byteArray0 = zipArchiveEntry0.getCentralDirectoryExtra();
    zipArchiveEntry0.setExtra(byteArray0);
    ZipArchiveEntry zipArchiveEntry1 = null;
    try {
        zipArchiveEntry1 = new ZipArchiveEntry((ZipEntry) zipArchiveEntry0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // ZIP compression method can not be negative: -1
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveEntry"", e);
    }
}","/**
 * Creates a new zip entry with fields taken from the specified zip entry.
 *
 * <p>Assumes the entry represents a directory if and only if the
 * name ends with a forward slash ""/"".</p>
 *
 * @param entry the entry to get fields from
 * @throws ZipException on error
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test87113() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    GeneralPurposeBit generalPurposeBit0 = zipArchiveEntry0.getGeneralPurposeBit();
    generalPurposeBit0.useUTF8ForNames(true);
    zipArchiveEntry0.getGeneralPurposeBit();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"@Override
public int getMethod() {
    return method;
}","public void test87114() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    GeneralPurposeBit generalPurposeBit0 = zipArchiveEntry0.getGeneralPurposeBit();
    generalPurposeBit0.useUTF8ForNames(true);
    zipArchiveEntry0.getGeneralPurposeBit();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 *
 * @since 1.1
 */"
"public int getPlatform() {
    return platform;
}","public void test87115() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    GeneralPurposeBit generalPurposeBit0 = zipArchiveEntry0.getGeneralPurposeBit();
    generalPurposeBit0.useUTF8ForNames(true);
    zipArchiveEntry0.getGeneralPurposeBit();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test87116() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    GeneralPurposeBit generalPurposeBit0 = zipArchiveEntry0.getGeneralPurposeBit();
    generalPurposeBit0.useUTF8ForNames(true);
    zipArchiveEntry0.getGeneralPurposeBit();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"@Override
public long getSize() {
    return size;
}","public void test87117() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    GeneralPurposeBit generalPurposeBit0 = zipArchiveEntry0.getGeneralPurposeBit();
    generalPurposeBit0.useUTF8ForNames(true);
    zipArchiveEntry0.getGeneralPurposeBit();
    assertEquals((-1L), zipArchiveEntry0.getSize());
}","/**
 * Gets the uncompressed size of the entry data.
 * @return the entry size
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test88118() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.getUnparseableExtraFieldData();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"@Override
public int getMethod() {
    return method;
}","public void test88119() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.getUnparseableExtraFieldData();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 *
 * @since 1.1
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test88120() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.getUnparseableExtraFieldData();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"public int getPlatform() {
    return platform;
}","public void test88121() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.getUnparseableExtraFieldData();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"@Override
public long getSize() {
    return size;
}","public void test88122() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.getUnparseableExtraFieldData();
    assertEquals((-1L), zipArchiveEntry0.getSize());
}","/**
 * Gets the uncompressed size of the entry data.
 * @return the entry size
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test89123() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.hashCode();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"public int getPlatform() {
    return platform;
}","public void test89124() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.hashCode();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"@Override
public long getSize() {
    return size;
}","public void test89125() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.hashCode();
    assertEquals((-1L), zipArchiveEntry0.getSize());
}","/**
 * Gets the uncompressed size of the entry data.
 * @return the entry size
 */"
"@Override
public int getMethod() {
    return method;
}","public void test89126() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.hashCode();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 *
 * @since 1.1
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test89127() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.hashCode();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"@Override
public long getSize() {
    return size;
}","public void test90128() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""%]\"""");
    byte[] byteArray0 = zipArchiveEntry0.getCentralDirectoryExtra();
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    zipArchiveEntry0.getExtraFields();
    assertEquals((-1L), zipArchiveEntry0.getSize());
}","/**
 * Gets the uncompressed size of the entry data.
 * @return the entry size
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test90129() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""%]\"""");
    byte[] byteArray0 = zipArchiveEntry0.getCentralDirectoryExtra();
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    zipArchiveEntry0.getExtraFields();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"@Override
public String getName() {
    return name == null ? super.getName() : name;
}","public void test90130() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""%]\"""");
    byte[] byteArray0 = zipArchiveEntry0.getCentralDirectoryExtra();
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    zipArchiveEntry0.getExtraFields();
    assertEquals(""%]\"""", zipArchiveEntry0.getName());
}","/**
 * Get the name of the entry.
 * @return the entry name
 */"
"public int getPlatform() {
    return platform;
}","public void test90131() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""%]\"""");
    byte[] byteArray0 = zipArchiveEntry0.getCentralDirectoryExtra();
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    zipArchiveEntry0.getExtraFields();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test90132() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""%]\"""");
    byte[] byteArray0 = zipArchiveEntry0.getCentralDirectoryExtra();
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    zipArchiveEntry0.getExtraFields();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"@Override
public int getMethod() {
    return method;
}","public void test90133() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""%]\"""");
    byte[] byteArray0 = zipArchiveEntry0.getCentralDirectoryExtra();
    zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    zipArchiveEntry0.getExtraFields();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 *
 * @since 1.1
 */"
"@Override
public int getMethod() {
    return method;
}","public void test91134() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("" is not a concrete class"");
    zipArchiveEntry0.getLastModifiedDate();
    assertEquals((-1), zipArchiveEntry0.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 *
 * @since 1.1
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test91135() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("" is not a concrete class"");
    zipArchiveEntry0.getLastModifiedDate();
    assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test91136() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("" is not a concrete class"");
    zipArchiveEntry0.getLastModifiedDate();
    assertEquals(0, zipArchiveEntry0.getInternalAttributes());
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"public int getPlatform() {
    return platform;
}","public void test91137() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("" is not a concrete class"");
    zipArchiveEntry0.getLastModifiedDate();
    assertEquals(0, zipArchiveEntry0.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"@Override
public long getSize() {
    return size;
}","public void test91138() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("" is not a concrete class"");
    zipArchiveEntry0.getLastModifiedDate();
    assertEquals((-1L), zipArchiveEntry0.getSize());
}","/**
 * Gets the uncompressed size of the entry data.
 * @return the entry size
 */"
"public ZipArchiveEntry(ZipArchiveEntry entry) throws ZipException {
    this((java.util.zip.ZipEntry) entry);
    setInternalAttributes(entry.getInternalAttributes());
    setExternalAttributes(entry.getExternalAttributes());
    setExtraFields(entry.getExtraFields(true));
}","public void test92139() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("" is not a concrete class"");
    ZipArchiveEntry zipArchiveEntry1 = null;
    try {
        zipArchiveEntry1 = new ZipArchiveEntry(zipArchiveEntry0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // ZIP compression method can not be negative: -1
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveEntry"", e);
    }
}","/**
 * Creates a new zip entry with fields taken from the specified zip entry.
 *
 * <p>Assumes the entry represents a directory if and only if the
 * name ends with a forward slash ""/"".</p>
 *
 * @param entry the entry to get fields from
 * @throws ZipException on error
 */"
"public int getPlatform() {
    return platform;
}","public void test93140() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
    assertEquals(0, zipArchiveEntry1.getPlatform());
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
"public int getInternalAttributes() {
    return internalAttributes;
}","public void test93141() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
    assertEquals(0, zipArchiveEntry1.getInternalAttributes());
}","/**
 * Retrieves the internal file attributes.
 *
 * @return the internal file attributes
 */"
"@Override
public int getMethod() {
    return method;
}","public void test93142() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
    assertEquals((-1), zipArchiveEntry1.getMethod());
}","/**
 * Returns the compression method of this entry, or -1 if the
 * compression method has not been specified.
 *
 * @return compression method
 *
 * @since 1.1
 */"
"public long getExternalAttributes() {
    return externalAttributes;
}","public void test93143() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
    assertEquals(0L, zipArchiveEntry1.getExternalAttributes());
}","/**
 * Retrieves the external file attributes.
 * @return the external file attributes
 */"
"@Override
public Object clone() {
    ZipArchiveEntry e = (ZipArchiveEntry) super.clone();
    e.setInternalAttributes(getInternalAttributes());
    e.setExternalAttributes(getExternalAttributes());
    e.setExtraFields(getExtraFields(true));
    return e;
}","public void test93144() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
    assertNotSame(zipArchiveEntry1, zipArchiveEntry0);
}","/**
 * Overwrite clone.
 * @return a cloned copy of this ZipArchiveEntry
 */"
"@Override
public long getSize() {
    return size;
}","public void test93145() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
    assertEquals((-1L), zipArchiveEntry1.getSize());
}","/**
 * Gets the uncompressed size of the entry data.
 * @return the entry size
 */"
"public int getUnixMode() {
    return platform != PLATFORM_UNIX ? 0 : (int) ((getExternalAttributes() >> SHORT_SHIFT) & SHORT_MASK);
}","public void test94146() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""%r/8&E).&ivm/"");
    zipArchiveEntry0.setUnixMode(1865);
    int int0 = zipArchiveEntry0.getPlatform();
    assertEquals(1865, zipArchiveEntry0.getUnixMode());
}","/**
 * Unix permission.
 * @return the unix permissions
 */"
"public int getPlatform() {
    return platform;
}","public void test94147() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(""%r/8&E).&ivm/"");
    zipArchiveEntry0.setUnixMode(1865);
    int int0 = zipArchiveEntry0.getPlatform();
    assertEquals(3, int0);
}","/**
 * Platform specification to put into the &quot;version made
 * by&quot; part of the central file header.
 *
 * @return PLATFORM_FAT unless {@link #setUnixMode setUnixMode}
 * has been called, in which case PLATORM_UNIX will be returned.
 */"
