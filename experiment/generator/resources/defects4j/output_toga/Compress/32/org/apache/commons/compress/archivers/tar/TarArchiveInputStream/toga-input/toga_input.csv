focal_method,test_prefix,docstring
"public static boolean matches(byte[] signature, int length) {
    if (length < TarConstants.VERSION_OFFSET + TarConstants.VERSIONLEN) {
        return false;
    }
    if (ArchiveUtils.matchAsciiBuffer(TarConstants.MAGIC_POSIX, signature, TarConstants.MAGIC_OFFSET, TarConstants.MAGICLEN) && ArchiveUtils.matchAsciiBuffer(TarConstants.VERSION_POSIX, signature, TarConstants.VERSION_OFFSET, TarConstants.VERSIONLEN)) {
        return true;
    }
    if (ArchiveUtils.matchAsciiBuffer(TarConstants.MAGIC_GNU, signature, TarConstants.MAGIC_OFFSET, TarConstants.MAGICLEN) && (ArchiveUtils.matchAsciiBuffer(TarConstants.VERSION_GNU_SPACE, signature, TarConstants.VERSION_OFFSET, TarConstants.VERSIONLEN) || ArchiveUtils.matchAsciiBuffer(TarConstants.VERSION_GNU_ZERO, signature, TarConstants.VERSION_OFFSET, TarConstants.VERSIONLEN))) {
        return true;
    }
    // COMPRESS-107 - recognise Ant tar files
    if (ArchiveUtils.matchAsciiBuffer(TarConstants.MAGIC_ANT, signature, TarConstants.MAGIC_OFFSET, TarConstants.MAGICLEN) && ArchiveUtils.matchAsciiBuffer(TarConstants.VERSION_ANT, signature, TarConstants.VERSION_OFFSET, TarConstants.VERSIONLEN)) {
        return true;
    }
    return false;
}","public void test00() throws Throwable {
    // Undeclared exception!
    try {
        TarArchiveInputStream.matches((byte[]) null, 6854);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.utils.ArchiveUtils"", e);
    }
}","/**
 * Checks if the signature matches what is expected for a tar file.
 *
 * @param signature
 *            the bytes to check
 * @param length
 *            the number of bytes to check
 * @return true, if this stream is a tar archive stream, false otherwise
 */"
"public int getRecordSize() {
    return recordSize;
}","public void test11() throws Throwable {
    PipedInputStream pipedInputStream0 = new PipedInputStream();
    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(pipedInputStream0, ""Gx"");
    tarArchiveInputStream0.getCurrentEntry();
    assertEquals(512, tarArchiveInputStream0.getRecordSize());
}","/**
 * Get the record size being used by this stream's buffer.
 *
 * @return The TarBuffer record size.
 */"
"public int getRecordSize() {
    return recordSize;
}","public void test22() throws Throwable {
    PipedInputStream pipedInputStream0 = new PipedInputStream();
    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(pipedInputStream0, ""Gx"");
    MockFile mockFile0 = new MockFile("";(G3~{dE,6nC?1<"", "",`mr"");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
    tarArchiveInputStream0.setCurrentEntry(tarArchiveEntry0);
    tarArchiveInputStream0.getCurrentEntry();
    assertEquals(512, tarArchiveInputStream0.getRecordSize());
}","/**
 * Get the record size being used by this stream's buffer.
 *
 * @return The TarBuffer record size.
 */"
"public TarArchiveInputStream(InputStream is, int blockSize, int recordSize, String encoding) {
    this.is = is;
    this.hasHitEOF = false;
    this.encoding = encoding;
    this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);
    this.recordSize = recordSize;
    this.blockSize = blockSize;
}","public void test33() throws Throwable {
    PipedInputStream pipedInputStream0 = new PipedInputStream();
    TarArchiveInputStream tarArchiveInputStream0 = null;
    try {
        tarArchiveInputStream0 = new TarArchiveInputStream(pipedInputStream0, (-1501), 10240, ""]V2X(Mp)"");
        fail(""Expecting exception: IllegalCharsetNameException"");
    } catch (IllegalCharsetNameException e) {
        //
        // ]V2X(Mp)
        //
        verifyException(""java.nio.charset.Charset"", e);
    }
}","/**
 * Constructor for TarInputStream.
 * @param is the input stream to use
 * @param blockSize the block size to use
 * @param recordSize the record size to use
 * @param encoding name of the encoding to use for file names
 * @since 1.4
 */"
