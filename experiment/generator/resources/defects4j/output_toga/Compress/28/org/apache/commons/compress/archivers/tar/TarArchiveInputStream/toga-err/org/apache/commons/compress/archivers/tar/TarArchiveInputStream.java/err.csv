org.apache.commons.compress.archivers.tar.TarArchiveInputStream,@Test(timeout = 4000)
public void test000() throws Throwable {
    PipedInputStream pipedInputStream0 = null;
    pipedInputStream0 = new PipedInputStream((-2007));
},ERROR,java.nio.file.NoSuchFileException,/home/star_usit_group/tratto/experiment/generator/resources/defects4j/temp/Compress_28b/src/main/java/java/io/PipedInputStream.java
org.apache.commons.compress.archivers.tar.TarArchiveInputStream,@Test(timeout = 4000)
public void test022() throws Throwable {
    Enumeration<ByteArrayInputStream> enumeration0 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
    doReturn(false).when(enumeration0).hasMoreElements();
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
    sequenceInputStream0.available();
    int int0 = (-2350);
    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(sequenceInputStream0, (-2350));
    String string0 = ""C6<v;\""na3/E/)"";
    byte byte0 = (byte) (-79);
    long long0 = 3L;
    byte[] byteArray0 = new byte[3];
    byteArray0[0] = (byte) (-79);
    byteArray0[1] = (byte) (-79);
    byteArray0[2] = (byte) (-79);
    TarArchiveEntry tarArchiveEntry0 = null;
    tarArchiveEntry0 = new TarArchiveEntry(byteArray0);
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.apache.commons.compress.archivers.tar.TarArchiveInputStream,@Test(timeout = 4000)
public void test036() throws Throwable {
    byte[] byteArray0 = new byte[2];
    byteArray0[0] = (byte) (-25);
    byteArray0[1] = (byte) (-78);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 200, (byte) (-78));
    byteArrayInputStream0.skip((byte) (-25));
    byteArrayInputStream0.close();
    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(byteArrayInputStream0, 0);
    tarArchiveInputStream0.getNextEntry();
    tarArchiveInputStream0.getNextEntry();
    byte[] byteArray1 = tarArchiveInputStream0.getLongNameData();
    tarArchiveInputStream0.getNextEntry();
    tarArchiveInputStream0.parsePaxHeaders(byteArrayInputStream0);
    tarArchiveInputStream0.markSupported();
    int int0 = tarArchiveInputStream0.read(byteArray0, 0, (int) (byte) (-78));
    boolean boolean0 = tarArchiveInputStream0.isEOFRecord(byteArray0);
    int int1 = tarArchiveInputStream0.getRecordSize();
    tarArchiveInputStream0.getBytesRead();
},WARNING,java.lang.IllegalStateException,[WARNING] - The last statement of the test is part of another class with respect to the class under test. Check if the focal method is correct.
org.apache.commons.compress.archivers.tar.TarArchiveInputStream,@Test(timeout = 4000)
public void test048() throws Throwable {
    byte[] byteArray0 = new byte[4];
    byteArray0[0] = (byte) 1;
    byteArray0[1] = (byte) 0;
    byteArray0[2] = (byte) 112;
    byteArray0[3] = (byte) 0;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    byteArrayInputStream0.close();
    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(byteArrayInputStream0);
    tarArchiveInputStream0.close();
    byteArrayInputStream0.skip((-2190L));
    URI uRI0 = MockURI.aFTPURI;
    MockFile mockFile0 = null;
    mockFile0 = new MockFile(uRI0);
},ERROR,java.lang.ClassCastException,class com.github.javaparser.ast.expr.AssignExpr cannot be cast to class com.github.javaparser.ast.expr.MethodCallExpr (com.github.javaparser.ast.expr.AssignExpr and com.github.javaparser.ast.expr.MethodCallExpr are in unnamed module of loader 'app')
org.apache.commons.compress.archivers.tar.TarArchiveInputStream,@Test(timeout = 4000)
public void test1217() throws Throwable {
    Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
    doReturn(false).when(enumeration0).hasMoreElements();
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(sequenceInputStream0);
    byte[] byteArray0 = new byte[9];
    byteArray0[0] = (byte) 98;
    byteArray0[1] = (byte) 0;
    byteArray0[2] = (byte) 122;
    byteArray0[3] = (byte) 20;
    byteArray0[4] = (byte) 42;
    byteArray0[5] = (byte) 3;
    byteArray0[6] = (byte) 0;
    byteArray0[7] = (byte) 0;
    byteArray0[8] = (byte) 11;
    int int0 = tarArchiveInputStream0.read(byteArray0);
},ERROR,java.nio.file.NoSuchFileException,/home/star_usit_group/tratto/experiment/generator/resources/defects4j/temp/Compress_28b/src/main/java/java/io/InputStream.java
