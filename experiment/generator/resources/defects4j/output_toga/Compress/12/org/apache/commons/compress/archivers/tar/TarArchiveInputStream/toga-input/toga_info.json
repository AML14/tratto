{
  "test1212" : {
    "methodSignature" : "public static boolean matches(byte[] signature, int length)",
    "methodName" : "matches",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1212() throws Throwable {\n    byte[] byteArray0 = new byte[0];\n    TarArchiveInputStream.matches(byteArray0, 1811);\n}",
    "testName" : "test1212"
  },
  "test2323" : {
    "methodSignature" : "protected final TarArchiveEntry getCurrentEntry()",
    "methodName" : "getCurrentEntry",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2323() throws Throwable {\n    byte[] byteArray0 = new byte[2];\n    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-126), 1039);\n    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);\n    BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0, 2599);\n    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(bufferedInputStream0, 2599);\n    TarArchiveEntry tarArchiveEntry0 = tarArchiveInputStream0.getCurrentEntry();\n}",
    "testName" : "test2323"
  },
  "test1313" : {
    "methodSignature" : "public boolean canReadEntryData(ArchiveEntry ae)",
    "methodName" : "canReadEntryData",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1313() throws Throwable {\n    byte[] byteArray0 = new byte[2];\n    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-126), 1039);\n    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);\n    BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0, 2599);\n    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(bufferedInputStream0, 2599);\n    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(\"?mXq[jk3\");\n    boolean boolean0 = tarArchiveInputStream0.canReadEntryData(zipArchiveEntry0);\n}",
    "testName" : "test1313"
  },
  "test2424" : {
    "methodSignature" : "public ArchiveEntry getNextEntry() throws IOException",
    "methodName" : "getNextEntry",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2424() throws Throwable {\n    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream((InputStream) null);\n    tarArchiveInputStream0.getNextEntry();\n}",
    "testName" : "test2424"
  },
  "test1010" : {
    "methodSignature" : "public int read(byte[] buf, int offset, int numToRead) throws IOException",
    "methodName" : "read",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1010() throws Throwable {\n    FileDescriptor fileDescriptor0 = new FileDescriptor();\n    MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);\n    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(mockFileInputStream0);\n    byte[] byteArray0 = new byte[5];\n    int int0 = tarArchiveInputStream0.read(byteArray0, 0, (int) (byte) 40);\n}",
    "testName" : "test1010"
  },
  "test2121" : {
    "methodSignature" : "public int available() throws IOException",
    "methodName" : "available",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2121() throws Throwable {\n    File file0 = MockFile.createTempFile(\"^/\\\"jW {GAaT0/\", \"ZipEightByteInteger value: \");\n    MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);\n    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(mockFileInputStream0, 679, 679);\n    int int0 = tarArchiveInputStream0.available();\n}",
    "testName" : "test2121"
  },
  "test1111" : {
    "methodSignature" : "public static boolean matches(byte[] signature, int length)",
    "methodName" : "matches",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1111() throws Throwable {\n    byte[] byteArray0 = new byte[2];\n    boolean boolean0 = TarArchiveInputStream.matches(byteArray0, (byte) 67);\n}",
    "testName" : "test1111"
  },
  "test2222" : {
    "methodSignature" : "public ArchiveEntry getNextEntry() throws IOException",
    "methodName" : "getNextEntry",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2222() throws Throwable {\n    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream((InputStream) null);\n    tarArchiveInputStream0.setAtEOF(true);\n    ArchiveEntry archiveEntry0 = tarArchiveInputStream0.getNextEntry();\n}",
    "testName" : "test2222"
  },
  "test011" : {
    "methodSignature" : "protected final boolean isAtEOF()",
    "methodName" : "isAtEOF",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011() throws Throwable {\n    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream((InputStream) null);\n    tarArchiveInputStream0.setAtEOF(true);\n    boolean boolean0 = tarArchiveInputStream0.isAtEOF();\n}",
    "testName" : "test011"
  },
  "test033" : {
    "methodSignature" : "Map<String, String> parsePaxHeaders(Reader br) throws IOException",
    "methodName" : "parsePaxHeaders",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033() throws Throwable {\n    byte[] byteArray0 = new byte[6];\n    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 65, 0);\n    PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, (byte) 59);\n    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(pushbackInputStream0, 65, (-1052));\n    tarArchiveInputStream0.parsePaxHeaders((Reader) null);\n}",
    "testName" : "test033"
  },
  "test055" : {
    "methodSignature" : "public TarArchiveEntry getNextTarEntry() throws IOException",
    "methodName" : "getNextTarEntry",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055() throws Throwable {\n    PipedInputStream pipedInputStream0 = new PipedInputStream();\n    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(pipedInputStream0);\n    tarArchiveInputStream0.getNextTarEntry();\n}",
    "testName" : "test055"
  },
  "test077" : {
    "methodSignature" : "public TarArchiveInputStream(InputStream is, int blockSize, int recordSize)",
    "methodName" : "TarArchiveInputStream",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077() throws Throwable {\n    Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());\n    doReturn(false).when(enumeration0).hasMoreElements();\n    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);\n    TarArchiveInputStream tarArchiveInputStream0 = null;\n    tarArchiveInputStream0 = new TarArchiveInputStream(sequenceInputStream0, (-2880), (-2880));\n}",
    "testName" : "test077"
  },
  "test099" : {
    "methodSignature" : "public TarArchiveInputStream(InputStream is, int blockSize)",
    "methodName" : "TarArchiveInputStream",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099() throws Throwable {\n    TarArchiveInputStream tarArchiveInputStream0 = null;\n    tarArchiveInputStream0 = new TarArchiveInputStream((InputStream) null, (-257));\n}",
    "testName" : "test099"
  },
  "test1616" : {
    "methodSignature" : "public int available() throws IOException",
    "methodName" : "available",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1616() throws Throwable {\n    File file0 = MockFile.createTempFile(\"^/\\\"jW {GAaT0/\", \"ZipEightByteInteger value: \");\n    MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);\n    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(mockFileInputStream0, 679, 679);\n    tarArchiveInputStream0.getNextTarEntry();\n    tarArchiveInputStream0.getNextTarEntry();\n    mockFileInputStream0.available();\n}",
    "testName" : "test1616"
  },
  "test2727" : {
    "methodSignature" : "public int getRecordSize()",
    "methodName" : "getRecordSize",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2727() throws Throwable {\n    File file0 = MockFile.createTempFile(\"^/\\\"jW {GAaT0/\", \"ZipEightByteInteger value: \");\n    MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);\n    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(mockFileInputStream0, 679, 679);\n    int int0 = tarArchiveInputStream0.getRecordSize();\n}",
    "testName" : "test2727"
  },
  "test1717" : {
    "methodSignature" : "public TarArchiveEntry getNextTarEntry() throws IOException",
    "methodName" : "getNextTarEntry",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1717() throws Throwable {\n    byte[] byteArray0 = new byte[2];\n    byteArray0[0] = (byte) 7;\n    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);\n    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(byteArrayInputStream0, 108, (byte) 7);\n    tarArchiveInputStream0.getNextTarEntry();\n}",
    "testName" : "test1717"
  },
  "test2828" : {
    "methodSignature" : "public int available() throws IOException",
    "methodName" : "available",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2828() throws Throwable {\n    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream((InputStream) null);\n    tarArchiveInputStream0.reset();\n    tarArchiveInputStream0.available();\n}",
    "testName" : "test2828"
  },
  "test2525" : {
    "methodSignature" : "public String getGroupName()",
    "methodName" : "getGroupName",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2525() throws Throwable {\n    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream((InputStream) null);\n    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(\"{LO[+G`'|8EET1\", false);\n    tarArchiveInputStream0.setCurrentEntry(tarArchiveEntry0);\n    tarArchiveEntry0.getGroupName();\n}",
    "testName" : "test2525"
  },
  "test2626" : {
    "methodSignature" : "public int available() throws IOException",
    "methodName" : "available",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2626() throws Throwable {\n    File file0 = MockFile.createTempFile(\"^/\\\"jW {GAaT0/\", \"ZipEightByteInteger value: \");\n    MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);\n    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(mockFileInputStream0, 679, 679);\n    tarArchiveInputStream0.close();\n    tarArchiveInputStream0.available();\n}",
    "testName" : "test2626"
  },
  "test2020" : {
    "methodSignature" : "public long skip(long numToSkip) throws IOException",
    "methodName" : "skip",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2020() throws Throwable {\n    byte[] byteArray0 = new byte[2];\n    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);\n    BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);\n    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(bufferedInputStream0, 715);\n    long long0 = tarArchiveInputStream0.skip((byte) (-72));\n}",
    "testName" : "test2020"
  },
  "test000" : {
    "methodSignature" : "public long skip(long numToSkip) throws IOException",
    "methodName" : "skip",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    File file0 = MockFile.createTempFile(\"input buffer is closed\", \"input buffer is closed\");\n    MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);\n    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(mockFileInputStream0, 0);\n    long long0 = tarArchiveInputStream0.skip(0);\n}",
    "testName" : "test000"
  },
  "test022" : {
    "methodSignature" : "public int getRecordSize()",
    "methodName" : "getRecordSize",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022() throws Throwable {\n    PipedInputStream pipedInputStream0 = new PipedInputStream(891);\n    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(pipedInputStream0, 891, (-1356));\n    int int0 = tarArchiveInputStream0.getRecordSize();\n}",
    "testName" : "test022"
  },
  "test044" : {
    "methodSignature" : "Map<String, String> parsePaxHeaders(Reader br) throws IOException",
    "methodName" : "parsePaxHeaders",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044() throws Throwable {\n    byte[] byteArray0 = new byte[8];\n    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-103), (-2820));\n    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(byteArrayInputStream0);\n    PipedReader pipedReader0 = new PipedReader();\n    tarArchiveInputStream0.parsePaxHeaders(pipedReader0);\n}",
    "testName" : "test044"
  },
  "test066" : {
    "methodSignature" : "public ArchiveEntry getNextEntry() throws IOException",
    "methodName" : "getNextEntry",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066() throws Throwable {\n    File file0 = MockFile.createTempFile(\"input buffer is closed\", \"input buffer is closed\");\n    MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);\n    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(mockFileInputStream0, 0);\n    tarArchiveInputStream0.getNextEntry();\n}",
    "testName" : "test066"
  },
  "test088" : {
    "methodSignature" : "public TarArchiveInputStream(InputStream is, int blockSize, int recordSize)",
    "methodName" : "TarArchiveInputStream",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088() throws Throwable {\n    byte[] byteArray0 = new byte[2];\n    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);\n    TarArchiveInputStream tarArchiveInputStream0 = null;\n    tarArchiveInputStream0 = new TarArchiveInputStream(byteArrayInputStream0, 0, (byte) 0);\n}",
    "testName" : "test088"
  },
  "test1818" : {
    "methodSignature" : "public long skip(long numToSkip) throws IOException",
    "methodName" : "skip",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1818() throws Throwable {\n    byte[] byteArray0 = new byte[4];\n    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);\n    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(byteArrayInputStream0);\n    long long0 = tarArchiveInputStream0.skip(2147483647L);\n}",
    "testName" : "test1818"
  },
  "test2929" : {
    "methodSignature" : "protected final boolean isAtEOF()",
    "methodName" : "isAtEOF",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2929() throws Throwable {\n    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream((InputStream) null);\n    boolean boolean0 = tarArchiveInputStream0.isAtEOF();\n}",
    "testName" : "test2929"
  },
  "test1919" : {
    "methodSignature" : "public long skip(long numToSkip) throws IOException",
    "methodName" : "skip",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1919() throws Throwable {\n    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream((InputStream) null);\n    long long0 = tarArchiveInputStream0.skip(1933L);\n}",
    "testName" : "test1919"
  }
}