{
  "test2323" : {
    "methodSignature" : "public void close() throws IOException",
    "methodName" : "close",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2323() throws Throwable {\n    byte[] byteArray0 = new byte[4];\n    FileSystemHandling.appendLineToFile((EvoSuiteFile) null, \"\");\n    byteArray0[0] = (byte) (-78);\n    byteArray0[1] = (byte) (-28);\n    byteArray0[2] = (byte) 57;\n    FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);\n    byteArray0[3] = (byte) 0;\n    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);\n    byteArrayInputStream0.mark((byte) (-28));\n    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0, \"UTF8\", false, true);\n    zipArchiveInputStream0.getNextEntry();\n    zipArchiveInputStream0.close();\n    zipArchiveInputStream0.markSupported();\n    zipArchiveInputStream0.close();\n}",
    "testName" : "test2323"
  },
  "test1313" : {
    "methodSignature" : "public void close() throws IOException",
    "methodName" : "close",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1313() throws Throwable {\n    byte[] byteArray0 = new byte[9];\n    byteArray0[0] = (byte) 100;\n    byteArray0[1] = (byte) (-19);\n    byteArray0[2] = (byte) 0;\n    byteArray0[3] = (byte) (-56);\n    byteArray0[4] = (byte) (-80);\n    byteArray0[5] = (byte) 0;\n    byteArray0[6] = (byte) (-101);\n    byteArray0[7] = (byte) 2;\n    byteArray0[8] = (byte) 0;\n    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (-1));\n    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);\n    zipArchiveInputStream0.close();\n}",
    "testName" : "test1313"
  },
  "test2424" : {
    "methodSignature" : "public long skip(final long value) throws IOException",
    "methodName" : "skip",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2424() throws Throwable {\n    byte[] byteArray0 = new byte[9];\n    byteArray0[0] = (byte) 63;\n    byteArray0[1] = (byte) (-69);\n    byteArray0[2] = (byte) 0;\n    byteArray0[3] = (byte) (-40);\n    byteArray0[4] = (byte) 0;\n    byteArray0[5] = (byte) 0;\n    byteArray0[6] = (byte) 0;\n    byteArray0[7] = (byte) 107;\n    byteArray0[8] = (byte) 0;\n    ZipArchiveInputStream.matches(byteArray0, (byte) 0);\n    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);\n    zipArchiveInputStream0.skip(0L);\n}",
    "testName" : "test2424"
  },
  "test1010" : {
    "methodSignature" : "public int read(final byte[] buffer, final int offset, final int length) throws IOException",
    "methodName" : "read",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1010() throws Throwable {\n    PipedInputStream pipedInputStream0 = new PipedInputStream();\n    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0);\n    MockFile mockFile0 = new MockFile((File) null, \"\");\n    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, \"\");\n    SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(\"\", \" ~aM\", 18);\n    SQLDataException sQLDataException0 = new SQLDataException(sQLNonTransientConnectionException0);\n    MockIOException mockIOException0 = new MockIOException(\"\", sQLDataException0);\n    zipArchiveEntry0.equals(mockIOException0);\n    zipArchiveInputStream0.canReadEntryData(zipArchiveEntry0);\n    byte[] byteArray0 = null;\n    int int0 = zipArchiveInputStream0.read();\n    zipArchiveInputStream0.read((byte[]) null, 3811, (-1927));\n    int int1 = 1870;\n    zipArchiveInputStream0.reset();\n    zipArchiveInputStream0.mark(int1);\n    long long0 = 255L;\n    zipArchiveInputStream0.skip(long0);\n    zipArchiveInputStream0.close();\n    int int2 = (-1494);\n    zipArchiveInputStream0.read(byteArray0, int0, int2);\n}",
    "testName" : "test1010"
  },
  "test1111" : {
    "methodSignature" : "public ArchiveEntry getNextEntry() throws IOException",
    "methodName" : "getNextEntry",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1111() throws Throwable {\n    PipedInputStream pipedInputStream0 = new PipedInputStream(611);\n    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0, (String) null, false);\n    ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(zipArchiveInputStream0, \"\", false, true);\n    zipArchiveInputStream1.getNextEntry();\n}",
    "testName" : "test1111"
  },
  "test2222" : {
    "methodSignature" : "public ArchiveEntry getNextEntry() throws IOException",
    "methodName" : "getNextEntry",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2222() throws Throwable {\n    PipedInputStream pipedInputStream0 = new PipedInputStream(17);\n    pipedInputStream0.skip((-45L));\n    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0);\n    zipArchiveInputStream0.getNextEntry();\n}",
    "testName" : "test2222"
  },
  "test000" : {
    "methodSignature" : "public ArchiveEntry getNextEntry() throws IOException",
    "methodName" : "getNextEntry",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    byte[] byteArray0 = new byte[9];\n    byteArray0[0] = (byte) 2;\n    byteArray0[1] = (byte) 46;\n    byteArray0[2] = (byte) 18;\n    byteArray0[3] = (byte) 0;\n    byteArray0[4] = (byte) 21;\n    byteArray0[5] = (byte) (-10);\n    byteArray0[6] = (byte) (-10);\n    byteArray0[7] = (byte) 49;\n    byteArray0[8] = (byte) (-70);\n    ZipArchiveInputStream.matches(byteArray0, (-1076));\n    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);\n    byteArrayInputStream0.reset();\n    byteArrayInputStream0.read();\n    byteArrayInputStream0.mark(15);\n    byteArrayInputStream0.mark(8192);\n    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);\n    zipArchiveInputStream0.read(byteArray0, (int) (byte) 46, (int) (byte) 46);\n    ZipArchiveInputStream.matches(byteArray0, (byte) 21);\n    zipArchiveInputStream0.getNextEntry();\n}",
    "testName" : "test000"
  },
  "test011" : {
    "methodSignature" : "public ZipArchiveEntry getNextZipEntry() throws IOException",
    "methodName" : "getNextZipEntry",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011() throws Throwable {\n    Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());\n    doReturn(false, false).when(enumeration0).hasMoreElements();\n    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);\n    sequenceInputStream0.mark(0);\n    BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);\n    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(bufferedInputStream0, \"UTF8\");\n    sequenceInputStream0.read((byte[]) null, 46, 46);\n    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(\"N856\");\n    zipArchiveInputStream0.canReadEntryData(tarArchiveEntry0);\n    zipArchiveInputStream0.skip(16877);\n    byte[] byteArray0 = new byte[7];\n    byteArray0[0] = (byte) 83;\n    byteArray0[1] = (byte) 15;\n    byteArray0[2] = (byte) (-50);\n    byteArray0[3] = (byte) 99;\n    byteArray0[4] = (byte) 120;\n    byteArray0[5] = (byte) 0;\n    byteArray0[6] = (byte) (-5);\n    ZipArchiveInputStream.matches(byteArray0, (byte) (-50));\n    zipArchiveInputStream0.close();\n    zipArchiveInputStream0.skip((byte) (-5));\n    zipArchiveInputStream0.getNextZipEntry();\n}",
    "testName" : "test011"
  },
  "test022" : {
    "methodSignature" : "public void addExtraField(final ZipExtraField ze)",
    "methodName" : "addExtraField",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022() throws Throwable {\n    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(\"unsupported feature method '\");\n    AsiExtraField asiExtraField0 = new AsiExtraField();\n    zipArchiveEntry0.addExtraField(asiExtraField0);\n}",
    "testName" : "test022"
  },
  "test044" : {
    "methodSignature" : "public boolean canReadEntryData(final ArchiveEntry ae)",
    "methodName" : "canReadEntryData",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044() throws Throwable {\n    byte[] byteArray0 = new byte[7];\n    byteArray0[0] = (byte) (-103);\n    byteArray0[2] = (byte) 82;\n    byteArray0[2] = (byte) 10;\n    byteArray0[3] = (byte) 3;\n    byteArray0[4] = (byte) 80;\n    byteArray0[5] = (byte) 90;\n    byteArray0[6] = (byte) 123;\n    ZipArchiveInputStream.matches(byteArray0, 98496370);\n    byte[] byteArray1 = new byte[3];\n    byteArray1[0] = (byte) 123;\n    byteArray1[1] = (byte) 82;\n    byteArray1[2] = (byte) 90;\n    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);\n    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);\n    byteArrayInputStream0.mark((-419));\n    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(\"Z:P[Q\", (byte) 118, false);\n    zipArchiveInputStream0.canReadEntryData(tarArchiveEntry0);\n    zipArchiveInputStream0.getNextZipEntry();\n    byteArrayInputStream0.read(byteArray0, 512, (int) (byte) 0);\n    byteArrayInputStream0.read();\n    long long0 = 0L;\n    zipArchiveInputStream0.skip(long0);\n    zipArchiveInputStream0.canReadEntryData(tarArchiveEntry0);\n}",
    "testName" : "test044"
  },
  "test055" : {
    "methodSignature" : "public boolean canReadEntryData(final ArchiveEntry ae)",
    "methodName" : "canReadEntryData",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055() throws Throwable {\n    byte[] byteArray0 = new byte[7];\n    byteArray0[0] = (byte) (-103);\n    byteArray0[1] = (byte) 82;\n    byteArray0[2] = (byte) 0;\n    byteArray0[3] = (byte) 3;\n    byteArray0[4] = (byte) 80;\n    byteArray0[5] = (byte) 90;\n    byteArray0[6] = (byte) 123;\n    ZipArchiveInputStream.matches(byteArray0, 98496370);\n    byte[] byteArray1 = new byte[3];\n    byteArray1[0] = (byte) 123;\n    byteArray1[1] = (byte) 82;\n    byteArray1[2] = (byte) 90;\n    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);\n    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);\n    zipArchiveInputStream0.skip((byte) 90);\n    byteArrayInputStream0.mark((-419));\n    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(\"Z:P[Q\", (byte) 118, false);\n    zipArchiveInputStream0.canReadEntryData(tarArchiveEntry0);\n    zipArchiveInputStream0.close();\n    zipArchiveInputStream0.getNextZipEntry();\n    int int0 = 512;\n    zipArchiveInputStream0.read(byteArray0, 16877, (int) (byte) 82);\n    byteArrayInputStream0.read(byteArray0, int0, (int) byteArray0[1]);\n    byteArrayInputStream0.read();\n    long long0 = 0L;\n    zipArchiveInputStream0.skip(long0);\n    zipArchiveInputStream0.canReadEntryData(tarArchiveEntry0);\n}",
    "testName" : "test055"
  },
  "test088" : {
    "methodSignature" : "public boolean canReadEntryData(final ArchiveEntry ae)",
    "methodName" : "canReadEntryData",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088() throws Throwable {\n    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);\n    ZipArchiveEntry zipArchiveEntry0 = zipArchiveInputStream0.getNextZipEntry();\n    zipArchiveInputStream0.canReadEntryData(zipArchiveEntry0);\n}",
    "testName" : "test088"
  },
  "test099" : {
    "methodSignature" : "public ZipArchiveEntry getNextZipEntry() throws IOException",
    "methodName" : "getNextZipEntry",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099() throws Throwable {\n    PipedInputStream pipedInputStream0 = new PipedInputStream(18);\n    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0, \"alphaSize\");\n    ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(zipArchiveInputStream0, \"alphaSize\", true, false);\n    ZipArchiveInputStream zipArchiveInputStream2 = new ZipArchiveInputStream(zipArchiveInputStream1, \"alphaSize\", false);\n    ZipArchiveInputStream zipArchiveInputStream3 = new ZipArchiveInputStream(zipArchiveInputStream2);\n    zipArchiveInputStream3.getNextZipEntry();\n}",
    "testName" : "test099"
  },
  "test1616" : {
    "methodSignature" : "public static boolean matches(final byte[] signature, final int length)",
    "methodName" : "matches",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1616() throws Throwable {\n    byte[] byteArray0 = new byte[7];\n    byteArray0[0] = (byte) 65;\n    byteArray0[1] = (byte) (-125);\n    byteArray0[2] = (byte) 26;\n    byteArray0[3] = (byte) 55;\n    byteArray0[4] = (byte) 16;\n    byteArray0[5] = (byte) 0;\n    byteArray0[6] = (byte) 52;\n    ZipArchiveInputStream.matches(byteArray0, (byte) 52);\n}",
    "testName" : "test1616"
  },
  "test1717" : {
    "methodSignature" : "public long skip(final long value) throws IOException",
    "methodName" : "skip",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1717() throws Throwable {\n    PipedInputStream pipedInputStream0 = new PipedInputStream(2568);\n    int int0 = 1400;\n    BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 1400);\n    bufferedInputStream0.markSupported();\n    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(bufferedInputStream0, \"\", true);\n    zipArchiveInputStream0.getNextZipEntry();\n    ZipArchiveEntry zipArchiveEntry0 = zipArchiveInputStream0.getNextZipEntry();\n    zipArchiveInputStream0.skip(zipArchiveEntry0.PLATFORM_FAT);\n}",
    "testName" : "test1717"
  },
  "test1414" : {
    "methodSignature" : "public static boolean matches(final byte[] signature, final int length)",
    "methodName" : "matches",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1414() throws Throwable {\n    PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 3048);\n    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pushbackInputStream0, (String) null, false);\n    byte[] byteArray0 = new byte[5];\n    byteArray0[0] = (byte) (-38);\n    byteArray0[1] = (byte) 62;\n    byteArray0[2] = (byte) (-83);\n    byteArray0[3] = (byte) 41;\n    zipArchiveInputStream0.mark(3207);\n    byteArray0[4] = (byte) 76;\n    zipArchiveInputStream0.canReadEntryData((ArchiveEntry) null);\n    int int0 = 20;\n    zipArchiveInputStream0.read(byteArray0, 20, (int) (byte) (-83));\n    zipArchiveInputStream0.skip(3048);\n    zipArchiveInputStream0.skip(3048);\n    zipArchiveInputStream0.getNextEntry();\n    zipArchiveInputStream0.close();\n    zipArchiveInputStream0.read(byteArray0, int0, (int) byteArray0[4]);\n    long long0 = 0L;\n    zipArchiveInputStream0.skip(long0);\n    zipArchiveInputStream0.getNextEntry();\n    zipArchiveInputStream0.getNextZipEntry();\n    zipArchiveInputStream0.getNextEntry();\n    int int1 = 3191;\n    ZipArchiveInputStream.matches(byteArray0, int1);\n}",
    "testName" : "test1414"
  },
  "test2525" : {
    "methodSignature" : "public long skip(final long value) throws IOException",
    "methodName" : "skip",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2525() throws Throwable {\n    PipedInputStream pipedInputStream0 = new PipedInputStream(128);\n    PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);\n    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pushbackInputStream0, \"BZLIB\", false, false);\n    DataInputStream dataInputStream0 = new DataInputStream(zipArchiveInputStream0);\n    ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(dataInputStream0, (String) null, false);\n    zipArchiveInputStream1.skip(16L);\n}",
    "testName" : "test2525"
  },
  "test1818" : {
    "methodSignature" : "public void close() throws IOException",
    "methodName" : "close",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1818() throws Throwable {\n    PipedInputStream pipedInputStream0 = new PipedInputStream();\n    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0);\n    byte[] byteArray0 = new byte[1];\n    byteArray0[0] = (byte) 54;\n    zipArchiveInputStream0.read(byteArray0, (int) (byte) 54, (int) (byte) 54);\n    zipArchiveInputStream0.getNextZipEntry();\n    zipArchiveInputStream0.close();\n}",
    "testName" : "test1818"
  },
  "test2929" : {
    "methodSignature" : "public ZipArchiveEntry getNextZipEntry() throws IOException",
    "methodName" : "getNextZipEntry",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2929() throws Throwable {\n    PipedInputStream pipedInputStream0 = new PipedInputStream();\n    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0);\n    byte[] byteArray0 = new byte[1];\n    byteArray0[0] = (byte) 54;\n    zipArchiveInputStream0.close();\n    zipArchiveInputStream0.read(byteArray0, (int) (byte) 54, (int) (byte) 54);\n    zipArchiveInputStream0.getNextZipEntry();\n}",
    "testName" : "test2929"
  },
  "test1919" : {
    "methodSignature" : "public static boolean matches(final byte[] signature, final int length)",
    "methodName" : "matches",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1919() throws Throwable {\n    byte[] byteArray0 = null;\n    int int0 = 45;\n    ZipArchiveInputStream.matches((byte[]) null, 45);\n}",
    "testName" : "test1919"
  },
  "test3030" : {
    "methodSignature" : "public ZipArchiveEntry getNextZipEntry() throws IOException",
    "methodName" : "getNextZipEntry",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3030() throws Throwable {\n    Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());\n    doReturn(false, true).when(enumeration0).hasMoreElements();\n    doReturn((Object) null).when(enumeration0).nextElement();\n    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);\n    sequenceInputStream0.mark(0);\n    BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);\n    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(bufferedInputStream0, \"UTF8\");\n    sequenceInputStream0.read((byte[]) null, 46, 46);\n    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(\"N856\");\n    zipArchiveInputStream0.canReadEntryData(tarArchiveEntry0);\n    zipArchiveInputStream0.skip(16877);\n    byte[] byteArray0 = new byte[7];\n    byteArray0[0] = (byte) 83;\n    byteArray0[1] = (byte) 15;\n    byteArray0[2] = (byte) (-50);\n    byteArray0[3] = (byte) 99;\n    byteArray0[4] = (byte) 120;\n    byteArray0[5] = (byte) 0;\n    byteArray0[6] = (byte) (-5);\n    ZipArchiveInputStream.matches(byteArray0, (byte) (-50));\n    zipArchiveInputStream0.close();\n    zipArchiveInputStream0.skip(byteArray0[6]);\n    zipArchiveInputStream0.getNextZipEntry();\n}",
    "testName" : "test3030"
  },
  "test2020" : {
    "methodSignature" : "public void close() throws IOException",
    "methodName" : "close",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2020() throws Throwable {\n    byte[] byteArray0 = new byte[8];\n    byteArray0[0] = (byte) 119;\n    byteArray0[1] = (byte) 0;\n    byteArray0[2] = (byte) 41;\n    byteArray0[3] = (byte) (-76);\n    byteArray0[4] = (byte) (-104);\n    byteArray0[5] = (byte) 0;\n    byteArray0[6] = (byte) 85;\n    byteArray0[7] = (byte) 123;\n    ZipArchiveInputStream.matches(byteArray0, 1447);\n    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);\n    byteArrayInputStream0.markSupported();\n    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0, \"\");\n    zipArchiveInputStream0.markSupported();\n    zipArchiveInputStream0.getNextZipEntry();\n    zipArchiveInputStream0.close();\n}",
    "testName" : "test2020"
  },
  "test3131" : {
    "methodSignature" : "public static boolean matches(final byte[] signature, final int length)",
    "methodName" : "matches",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3131() throws Throwable {\n    FileSystemHandling.shouldAllThrowIOExceptions();\n    byte[] byteArray0 = new byte[0];\n    int int0 = 2181;\n    ZipArchiveInputStream.matches(byteArray0, 2181);\n}",
    "testName" : "test3131"
  }
}