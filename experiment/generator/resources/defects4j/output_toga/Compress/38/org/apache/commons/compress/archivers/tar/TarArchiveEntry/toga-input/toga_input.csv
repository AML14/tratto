focal_method,test_prefix,docstring
"public int getMode() {
    return mode;
}","public void test0000() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""ustar "", (byte) 76, false);
    boolean boolean0 = tarArchiveEntry0.isFIFO();
    assertEquals(33188, tarArchiveEntry0.getMode());
}","/**
 * Get this entry's mode.
 *
 * @return This entry's mode.
 */"
"public boolean isGNULongNameEntry() {
    return linkFlag == LF_GNUTYPE_LONGNAME;
}","public void test0001() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""ustar "", (byte) 76, false);
    boolean boolean0 = tarArchiveEntry0.isFIFO();
    assertTrue(tarArchiveEntry0.isGNULongNameEntry());
}","/**
 * Indicate if this entry is a GNU long name block
 *
 * @return true if this is a long name extension provided by GNU tar
 */"
"public boolean isFIFO() {
    return linkFlag == LF_FIFO;
}","public void test0002() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""ustar "", (byte) 76, false);
    boolean boolean0 = tarArchiveEntry0.isFIFO();
    assertFalse(boolean0);
}","/**
 * Check if this is a FIFO (pipe) entry.
 *
 * @since 1.2
 * @return whether this is a FIFO entry
 */"
"@Deprecated
public int getUserId() {
    return (int) (userId & 0xffffffff);
}","public void test0003() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""ustar "", (byte) 76, false);
    boolean boolean0 = tarArchiveEntry0.isFIFO();
    assertEquals(0, tarArchiveEntry0.getUserId());
}","/**
 * Get this entry's user id.
 *
 * @return This entry's user id.
 * @deprecated use #getLongUserId instead as user ids can be
 * bigger than {@link Integer#MAX_VALUE}
 */"
"@Override
public String getName() {
    return name;
}","public void test0004() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""ustar "", (byte) 76, false);
    boolean boolean0 = tarArchiveEntry0.isFIFO();
    assertEquals(""ustar "", tarArchiveEntry0.getName());
}","/**
 * Get this entry's name.
 *
 * @return This entry's name.
 */"
"@Deprecated
public int getGroupId() {
    return (int) (groupId & 0xffffffff);
}","public void test0015() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, ""Minor device number is out of range: "");
    tarArchiveEntry0.isBlockDevice();
    assertEquals(0, tarArchiveEntry0.getGroupId());
}","/**
 * Get this entry's group id.
 *
 * @return This entry's group id.
 * @deprecated use #getLongGroupId instead as group ids can be
 * bigger than {@link Integer#MAX_VALUE}
 */"
"@Override
public long getSize() {
    return size;
}","public void test0016() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, ""Minor device number is out of range: "");
    tarArchiveEntry0.isBlockDevice();
    assertEquals(0L, tarArchiveEntry0.getSize());
}","/**
 * Get this entry's file size.
 *
 * @return This entry's file size.
 */"
"public int getDevMajor() {
    return devMajor;
}","public void test0017() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, ""Minor device number is out of range: "");
    tarArchiveEntry0.isBlockDevice();
    assertEquals(0, tarArchiveEntry0.getDevMajor());
}","/**
 * Get this entry's major device number.
 *
 * @return This entry's major device number.
 * @since 1.4
 */"
"@Override
public String getName() {
    return name;
}","public void test0018() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, ""Minor device number is out of range: "");
    tarArchiveEntry0.isBlockDevice();
    assertEquals(""Minor device number is out of range: /"", tarArchiveEntry0.getName());
}","/**
 * Get this entry's name.
 *
 * @return This entry's name.
 */"
"@Deprecated
public int getUserId() {
    return (int) (userId & 0xffffffff);
}","public void test0019() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, ""Minor device number is out of range: "");
    tarArchiveEntry0.isBlockDevice();
    assertEquals(0, tarArchiveEntry0.getUserId());
}","/**
 * Get this entry's user id.
 *
 * @return This entry's user id.
 * @deprecated use #getLongUserId instead as user ids can be
 * bigger than {@link Integer#MAX_VALUE}
 */"
"@Override
public String getName() {
    return name;
}","public void test00210() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""SCHILY.realsize"");
    boolean boolean0 = tarArchiveEntry0.isCharacterDevice();
    assertEquals(""SCHILY.realsize"", tarArchiveEntry0.getName());
}","/**
 * Get this entry's name.
 *
 * @return This entry's name.
 */"
"public boolean isCharacterDevice() {
    return linkFlag == LF_CHR;
}","public void test00211() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""SCHILY.realsize"");
    boolean boolean0 = tarArchiveEntry0.isCharacterDevice();
    assertFalse(boolean0);
}","/**
 * Check if this is a character device entry.
 *
 * @since 1.2
 * @return whether this is a character device
 */"
"@Override
public boolean isDirectory() {
    if (file != null) {
        return file.isDirectory();
    }
    if (linkFlag == LF_DIR) {
        return true;
    }
    if (getName().endsWith(""/"")) {
        return true;
    }
    return false;
}","public void test00212() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""SCHILY.realsize"");
    boolean boolean0 = tarArchiveEntry0.isCharacterDevice();
    assertFalse(tarArchiveEntry0.isDirectory());
}","/**
 * Return whether or not this entry represents a directory.
 *
 * @return True if this entry is a directory.
 */"
"@Override
public long getSize() {
    return size;
}","public void test00213() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""SCHILY.realsize"");
    boolean boolean0 = tarArchiveEntry0.isCharacterDevice();
    assertEquals(0L, tarArchiveEntry0.getSize());
}","/**
 * Get this entry's file size.
 *
 * @return This entry's file size.
 */"
"public boolean isLink() {
    return linkFlag == LF_LINK;
}","public void test00214() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""SCHILY.realsize"");
    boolean boolean0 = tarArchiveEntry0.isCharacterDevice();
    assertFalse(tarArchiveEntry0.isLink());
}","/**
 * Check if this is a link entry.
 *
 * @since 1.2
 * @return whether this is a link entry
 */"
"public int getDevMajor() {
    return devMajor;
}","public void test00215() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""SCHILY.realsize"");
    boolean boolean0 = tarArchiveEntry0.isCharacterDevice();
    assertEquals(0, tarArchiveEntry0.getDevMajor());
}","/**
 * Get this entry's major device number.
 *
 * @return This entry's major device number.
 * @since 1.4
 */"
"public int getMode() {
    return mode;
}","public void test00216() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""SCHILY.realsize"");
    boolean boolean0 = tarArchiveEntry0.isCharacterDevice();
    assertEquals(33188, tarArchiveEntry0.getMode());
}","/**
 * Get this entry's mode.
 *
 * @return This entry's mode.
 */"
"public long getLongUserId() {
    return userId;
}","public void test00217() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""SCHILY.realsize"");
    boolean boolean0 = tarArchiveEntry0.isCharacterDevice();
    assertEquals(0L, tarArchiveEntry0.getLongUserId());
}","/**
 * Get this entry's user id.
 *
 * @return This entry's user id.
 * @since 1.10
 */"
"public boolean isGNULongLinkEntry() {
    return linkFlag == LF_GNUTYPE_LONGLINK;
}","public void test00318() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000"", (byte) 82);
    tarArchiveEntry0.isLink();
    assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
}","/**
 * Indicate if this entry is a GNU long linkname block
 *
 * @return true if this is a long name extension provided by GNU tar
 */"
"@Override
public String getName() {
    return name;
}","public void test00319() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000"", (byte) 82);
    tarArchiveEntry0.isLink();
    assertEquals(""\u0000\u0000"", tarArchiveEntry0.getName());
}","/**
 * Get this entry's name.
 *
 * @return This entry's name.
 */"
"public long getLongUserId() {
    return userId;
}","public void test00320() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000"", (byte) 82);
    tarArchiveEntry0.isLink();
    assertEquals(0L, tarArchiveEntry0.getLongUserId());
}","/**
 * Get this entry's user id.
 *
 * @return This entry's user id.
 * @since 1.10
 */"
"public int getMode() {
    return mode;
}","public void test00321() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000"", (byte) 82);
    tarArchiveEntry0.isLink();
    assertEquals(33188, tarArchiveEntry0.getMode());
}","/**
 * Get this entry's mode.
 *
 * @return This entry's mode.
 */"
"public boolean isBlockDevice() {
    return linkFlag == LF_BLK;
}","public void test00322() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000"", (byte) 82);
    tarArchiveEntry0.isLink();
    assertFalse(tarArchiveEntry0.isBlockDevice());
}","/**
 * Check if this is a block device entry.
 *
 * @since 1.2
 * @return whether this is a block device
 */"
"public boolean isSymbolicLink() {
    return linkFlag == LF_SYMLINK;
}","public void test00423() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, """");
    boolean boolean0 = tarArchiveEntry0.isSymbolicLink();
    assertFalse(boolean0);
}","/**
 * Check if this is a symbolic link entry.
 *
 * @since 1.2
 * @return whether this is a symbolic link
 */"
"@Override
public long getSize() {
    return size;
}","public void test00424() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, """");
    boolean boolean0 = tarArchiveEntry0.isSymbolicLink();
    assertEquals(0L, tarArchiveEntry0.getSize());
}","/**
 * Get this entry's file size.
 *
 * @return This entry's file size.
 */"
"@Deprecated
public int getGroupId() {
    return (int) (groupId & 0xffffffff);
}","public void test00425() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, """");
    boolean boolean0 = tarArchiveEntry0.isSymbolicLink();
    assertEquals(0, tarArchiveEntry0.getGroupId());
}","/**
 * Get this entry's group id.
 *
 * @return This entry's group id.
 * @deprecated use #getLongGroupId instead as group ids can be
 * bigger than {@link Integer#MAX_VALUE}
 */"
"public long getLongUserId() {
    return userId;
}","public void test00426() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, """");
    boolean boolean0 = tarArchiveEntry0.isSymbolicLink();
    assertEquals(0L, tarArchiveEntry0.getLongUserId());
}","/**
 * Get this entry's user id.
 *
 * @return This entry's user id.
 * @since 1.10
 */"
"public int getMode() {
    return mode;
}","public void test00427() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, """");
    boolean boolean0 = tarArchiveEntry0.isSymbolicLink();
    assertEquals(16877, tarArchiveEntry0.getMode());
}","/**
 * Get this entry's mode.
 *
 * @return This entry's mode.
 */"
"@Override
public String getName() {
    return name;
}","public void test00428() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, """");
    boolean boolean0 = tarArchiveEntry0.isSymbolicLink();
    assertEquals(""/"", tarArchiveEntry0.getName());
}","/**
 * Get this entry's name.
 *
 * @return This entry's name.
 */"
"public boolean isGlobalPaxHeader() {
    return linkFlag == LF_PAX_GLOBAL_EXTENDED_HEADER;
}","public void test00529() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""Z$$4i|&L\""`qI8p"");
    boolean boolean0 = tarArchiveEntry0.isGlobalPaxHeader();
    assertFalse(boolean0);
}","/**
 * Check if this is a Pax header.
 *
 * @return {@code true} if this is a Pax header.
 *
 * @since 1.1
 */"
"@Override
public String getName() {
    return name;
}","public void test00530() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""Z$$4i|&L\""`qI8p"");
    boolean boolean0 = tarArchiveEntry0.isGlobalPaxHeader();
    assertEquals(""Z$$4i|&L\""`qI8p"", tarArchiveEntry0.getName());
}","/**
 * Get this entry's name.
 *
 * @return This entry's name.
 */"
"public int getMode() {
    return mode;
}","public void test00531() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""Z$$4i|&L\""`qI8p"");
    boolean boolean0 = tarArchiveEntry0.isGlobalPaxHeader();
    assertEquals(33188, tarArchiveEntry0.getMode());
}","/**
 * Get this entry's mode.
 *
 * @return This entry's mode.
 */"
"public long getLongGroupId() {
    return groupId;
}","public void test00532() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""Z$$4i|&L\""`qI8p"");
    boolean boolean0 = tarArchiveEntry0.isGlobalPaxHeader();
    assertEquals(0L, tarArchiveEntry0.getLongGroupId());
}","/**
 * Get this entry's group id.
 *
 * @since 1.10
 * @return This entry's group id.
 */"
"@Override
public long getSize() {
    return size;
}","public void test00533() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""Z$$4i|&L\""`qI8p"");
    boolean boolean0 = tarArchiveEntry0.isGlobalPaxHeader();
    assertEquals(0L, tarArchiveEntry0.getSize());
}","/**
 * Get this entry's file size.
 *
 * @return This entry's file size.
 */"
"public boolean isGNULongNameEntry() {
    return linkFlag == LF_GNUTYPE_LONGNAME;
}","public void test00634() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""ustar "", (byte) 76, false);
    boolean boolean0 = tarArchiveEntry0.isPaxHeader();
    assertTrue(tarArchiveEntry0.isGNULongNameEntry());
}","/**
 * Indicate if this entry is a GNU long name block
 *
 * @return true if this is a long name extension provided by GNU tar
 */"
"public int getDevMajor() {
    return devMajor;
}","public void test00635() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""ustar "", (byte) 76, false);
    boolean boolean0 = tarArchiveEntry0.isPaxHeader();
    assertEquals(0, tarArchiveEntry0.getDevMajor());
}","/**
 * Get this entry's major device number.
 *
 * @return This entry's major device number.
 * @since 1.4
 */"
"public int getMode() {
    return mode;
}","public void test00636() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""ustar "", (byte) 76, false);
    boolean boolean0 = tarArchiveEntry0.isPaxHeader();
    assertEquals(33188, tarArchiveEntry0.getMode());
}","/**
 * Get this entry's mode.
 *
 * @return This entry's mode.
 */"
"@Override
public String getName() {
    return name;
}","public void test00637() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""ustar "", (byte) 76, false);
    boolean boolean0 = tarArchiveEntry0.isPaxHeader();
    assertEquals(""ustar "", tarArchiveEntry0.getName());
}","/**
 * Get this entry's name.
 *
 * @return This entry's name.
 */"
"public boolean isPaxHeader() {
    return linkFlag == LF_PAX_EXTENDED_HEADER_LC || linkFlag == LF_PAX_EXTENDED_HEADER_UC;
}","public void test00638() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""ustar "", (byte) 76, false);
    boolean boolean0 = tarArchiveEntry0.isPaxHeader();
    assertFalse(boolean0);
}","/**
 * Check if this is a Pax header.
 *
 * @return {@code true} if this is a Pax header.
 *
 * @since 1.1
 */"
"public long getLongUserId() {
    return userId;
}","public void test00639() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""ustar "", (byte) 76, false);
    boolean boolean0 = tarArchiveEntry0.isPaxHeader();
    assertEquals(0L, tarArchiveEntry0.getLongUserId());
}","/**
 * Get this entry's user id.
 *
 * @return This entry's user id.
 * @since 1.10
 */"
"public int getMode() {
    return mode;
}","public void test00740() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000"", (byte) 82, true);
    boolean boolean0 = tarArchiveEntry0.isGNULongNameEntry();
    assertEquals(33188, tarArchiveEntry0.getMode());
}","/**
 * Get this entry's mode.
 *
 * @return This entry's mode.
 */"
"public boolean isGNULongNameEntry() {
    return linkFlag == LF_GNUTYPE_LONGNAME;
}","public void test00741() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000"", (byte) 82, true);
    boolean boolean0 = tarArchiveEntry0.isGNULongNameEntry();
    assertFalse(boolean0);
}","/**
 * Indicate if this entry is a GNU long name block
 *
 * @return true if this is a long name extension provided by GNU tar
 */"
"public int getDevMinor() {
    return devMinor;
}","public void test00742() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000"", (byte) 82, true);
    boolean boolean0 = tarArchiveEntry0.isGNULongNameEntry();
    assertEquals(0, tarArchiveEntry0.getDevMinor());
}","/**
 * Get this entry's minor device number.
 *
 * @return This entry's minor device number.
 * @since 1.4
 */"
"public boolean isFIFO() {
    return linkFlag == LF_FIFO;
}","public void test00743() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000"", (byte) 82, true);
    boolean boolean0 = tarArchiveEntry0.isGNULongNameEntry();
    assertFalse(tarArchiveEntry0.isFIFO());
}","/**
 * Check if this is a FIFO (pipe) entry.
 *
 * @since 1.2
 * @return whether this is a FIFO entry
 */"
"public boolean isCharacterDevice() {
    return linkFlag == LF_CHR;
}","public void test00744() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000"", (byte) 82, true);
    boolean boolean0 = tarArchiveEntry0.isGNULongNameEntry();
    assertFalse(tarArchiveEntry0.isCharacterDevice());
}","/**
 * Check if this is a character device entry.
 *
 * @since 1.2
 * @return whether this is a character device
 */"
"@Override
public boolean isDirectory() {
    if (file != null) {
        return file.isDirectory();
    }
    if (linkFlag == LF_DIR) {
        return true;
    }
    if (getName().endsWith(""/"")) {
        return true;
    }
    return false;
}","public void test00745() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000"", (byte) 82, true);
    boolean boolean0 = tarArchiveEntry0.isGNULongNameEntry();
    assertFalse(tarArchiveEntry0.isDirectory());
}","/**
 * Return whether or not this entry represents a directory.
 *
 * @return True if this entry is a directory.
 */"
"public boolean isBlockDevice() {
    return linkFlag == LF_BLK;
}","public void test00746() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000"", (byte) 82, true);
    boolean boolean0 = tarArchiveEntry0.isGNULongNameEntry();
    assertFalse(tarArchiveEntry0.isBlockDevice());
}","/**
 * Check if this is a block device entry.
 *
 * @since 1.2
 * @return whether this is a block device
 */"
"@Deprecated
public int getGroupId() {
    return (int) (groupId & 0xffffffff);
}","public void test00747() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000"", (byte) 82, true);
    boolean boolean0 = tarArchiveEntry0.isGNULongNameEntry();
    assertEquals(0, tarArchiveEntry0.getGroupId());
}","/**
 * Get this entry's group id.
 *
 * @return This entry's group id.
 * @deprecated use #getLongGroupId instead as group ids can be
 * bigger than {@link Integer#MAX_VALUE}
 */"
"public boolean isOldGNUSparse() {
    return linkFlag == LF_GNUTYPE_SPARSE;
}","public void test00748() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000"", (byte) 82, true);
    boolean boolean0 = tarArchiveEntry0.isGNULongNameEntry();
    assertFalse(tarArchiveEntry0.isOldGNUSparse());
}","/**
 * Indicate if this entry is a GNU or star sparse block using the
 * oldgnu format.
 *
 * @return true if this is a sparse extension provided by GNU tar or star
 * @since 1.11
 */"
"@Override
public String getName() {
    return name;
}","public void test00749() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000"", (byte) 82, true);
    boolean boolean0 = tarArchiveEntry0.isGNULongNameEntry();
    assertEquals(""\u0000\u0000"", tarArchiveEntry0.getName());
}","/**
 * Get this entry's name.
 *
 * @return This entry's name.
 */"
"public long getLongUserId() {
    return userId;
}","public void test00750() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000"", (byte) 82, true);
    boolean boolean0 = tarArchiveEntry0.isGNULongNameEntry();
    assertEquals(0L, tarArchiveEntry0.getLongUserId());
}","/**
 * Get this entry's user id.
 *
 * @return This entry's user id.
 * @since 1.10
 */"
"public int getDevMajor() {
    return devMajor;
}","public void test00851() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""Length "");
    boolean boolean0 = tarArchiveEntry0.isGNULongLinkEntry();
    assertEquals(0, tarArchiveEntry0.getDevMajor());
}","/**
 * Get this entry's major device number.
 *
 * @return This entry's major device number.
 * @since 1.4
 */"
"public int getDevMinor() {
    return devMinor;
}","public void test00852() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""Length "");
    boolean boolean0 = tarArchiveEntry0.isGNULongLinkEntry();
    assertEquals(0, tarArchiveEntry0.getDevMinor());
}","/**
 * Get this entry's minor device number.
 *
 * @return This entry's minor device number.
 * @since 1.4
 */"
"public int getMode() {
    return mode;
}","public void test00853() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""Length "");
    boolean boolean0 = tarArchiveEntry0.isGNULongLinkEntry();
    assertEquals(33188, tarArchiveEntry0.getMode());
}","/**
 * Get this entry's mode.
 *
 * @return This entry's mode.
 */"
"@Override
public long getSize() {
    return size;
}","public void test00854() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""Length "");
    boolean boolean0 = tarArchiveEntry0.isGNULongLinkEntry();
    assertEquals(0L, tarArchiveEntry0.getSize());
}","/**
 * Get this entry's file size.
 *
 * @return This entry's file size.
 */"
"@Override
public boolean isDirectory() {
    if (file != null) {
        return file.isDirectory();
    }
    if (linkFlag == LF_DIR) {
        return true;
    }
    if (getName().endsWith(""/"")) {
        return true;
    }
    return false;
}","public void test00855() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""Length "");
    boolean boolean0 = tarArchiveEntry0.isGNULongLinkEntry();
    assertFalse(tarArchiveEntry0.isDirectory());
}","/**
 * Return whether or not this entry represents a directory.
 *
 * @return True if this entry is a directory.
 */"
"public boolean isGNULongLinkEntry() {
    return linkFlag == LF_GNUTYPE_LONGLINK;
}","public void test00856() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""Length "");
    boolean boolean0 = tarArchiveEntry0.isGNULongLinkEntry();
    assertFalse(boolean0);
}","/**
 * Indicate if this entry is a GNU long linkname block
 *
 * @return true if this is a long name extension provided by GNU tar
 */"
"@Override
public String getName() {
    return name;
}","public void test00857() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""Length "");
    boolean boolean0 = tarArchiveEntry0.isGNULongLinkEntry();
    assertEquals(""Length "", tarArchiveEntry0.getName());
}","/**
 * Get this entry's name.
 *
 * @return This entry's name.
 */"
"public boolean isPaxHeader() {
    return linkFlag == LF_PAX_EXTENDED_HEADER_LC || linkFlag == LF_PAX_EXTENDED_HEADER_UC;
}","public void test00958() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    tarArchiveEntry0.setDevMinor(0);
    assertFalse(tarArchiveEntry0.isPaxHeader());
}","/**
 * Check if this is a Pax header.
 *
 * @return {@code true} if this is a Pax header.
 *
 * @since 1.1
 */"
"@Override
public long getSize() {
    return size;
}","public void test00959() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    tarArchiveEntry0.setDevMinor(0);
    assertEquals(0L, tarArchiveEntry0.getSize());
}","/**
 * Get this entry's file size.
 *
 * @return This entry's file size.
 */"
"@Override
public boolean isDirectory() {
    if (file != null) {
        return file.isDirectory();
    }
    if (linkFlag == LF_DIR) {
        return true;
    }
    if (getName().endsWith(""/"")) {
        return true;
    }
    return false;
}","public void test00960() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    tarArchiveEntry0.setDevMinor(0);
    assertFalse(tarArchiveEntry0.isDirectory());
}","/**
 * Return whether or not this entry represents a directory.
 *
 * @return True if this entry is a directory.
 */"
"@Override
public String getName() {
    return name;
}","public void test00961() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    tarArchiveEntry0.setDevMinor(0);
    assertEquals("""", tarArchiveEntry0.getName());
}","/**
 * Get this entry's name.
 *
 * @return This entry's name.
 */"
"public long getLongUserId() {
    return userId;
}","public void test00962() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    tarArchiveEntry0.setDevMinor(0);
    assertEquals(0L, tarArchiveEntry0.getLongUserId());
}","/**
 * Get this entry's user id.
 *
 * @return This entry's user id.
 * @since 1.10
 */"
"public boolean isFIFO() {
    return linkFlag == LF_FIFO;
}","public void test00963() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    tarArchiveEntry0.setDevMinor(0);
    assertFalse(tarArchiveEntry0.isFIFO());
}","/**
 * Check if this is a FIFO (pipe) entry.
 *
 * @since 1.2
 * @return whether this is a FIFO entry
 */"
"public boolean isSymbolicLink() {
    return linkFlag == LF_SYMLINK;
}","public void test00964() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    tarArchiveEntry0.setDevMinor(0);
    assertFalse(tarArchiveEntry0.isSymbolicLink());
}","/**
 * Check if this is a symbolic link entry.
 *
 * @since 1.2
 * @return whether this is a symbolic link
 */"
"public boolean isGlobalPaxHeader() {
    return linkFlag == LF_PAX_GLOBAL_EXTENDED_HEADER;
}","public void test00965() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    tarArchiveEntry0.setDevMinor(0);
    assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
}","/**
 * Check if this is a Pax header.
 *
 * @return {@code true} if this is a Pax header.
 *
 * @since 1.1
 */"
"public int getMode() {
    return mode;
}","public void test00966() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    tarArchiveEntry0.setDevMinor(0);
    assertEquals(33188, tarArchiveEntry0.getMode());
}","/**
 * Get this entry's mode.
 *
 * @return This entry's mode.
 */"
"public int getDevMinor() {
    return devMinor;
}","public void test00967() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    tarArchiveEntry0.setDevMinor(0);
    assertEquals(0, tarArchiveEntry0.getDevMinor());
}","/**
 * Get this entry's minor device number.
 *
 * @return This entry's minor device number.
 * @since 1.4
 */"
"public long getLongGroupId() {
    return groupId;
}","public void test00968() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    tarArchiveEntry0.setDevMinor(0);
    assertEquals(0L, tarArchiveEntry0.getLongGroupId());
}","/**
 * Get this entry's group id.
 *
 * @since 1.10
 * @return This entry's group id.
 */"
"@Override
public long getSize() {
    return size;
}","public void test01069() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", false);
    tarArchiveEntry0.setSize(0L);
    assertEquals(0L, tarArchiveEntry0.getSize());
}","/**
 * Get this entry's file size.
 *
 * @return This entry's file size.
 */"
"@Override
public boolean isDirectory() {
    if (file != null) {
        return file.isDirectory();
    }
    if (linkFlag == LF_DIR) {
        return true;
    }
    if (getName().endsWith(""/"")) {
        return true;
    }
    return false;
}","public void test01070() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", false);
    tarArchiveEntry0.setSize(0L);
    assertFalse(tarArchiveEntry0.isDirectory());
}","/**
 * Return whether or not this entry represents a directory.
 *
 * @return True if this entry is a directory.
 */"
"@Override
public String getName() {
    return name;
}","public void test01071() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", false);
    tarArchiveEntry0.setSize(0L);
    assertEquals("""", tarArchiveEntry0.getName());
}","/**
 * Get this entry's name.
 *
 * @return This entry's name.
 */"
"public long getLongUserId() {
    return userId;
}","public void test01072() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", false);
    tarArchiveEntry0.setSize(0L);
    assertEquals(0L, tarArchiveEntry0.getLongUserId());
}","/**
 * Get this entry's user id.
 *
 * @return This entry's user id.
 * @since 1.10
 */"
"public int getDevMinor() {
    return devMinor;
}","public void test01073() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", false);
    tarArchiveEntry0.setSize(0L);
    assertEquals(0, tarArchiveEntry0.getDevMinor());
}","/**
 * Get this entry's minor device number.
 *
 * @return This entry's minor device number.
 * @since 1.4
 */"
"public int getDevMajor() {
    return devMajor;
}","public void test01074() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", false);
    tarArchiveEntry0.setSize(0L);
    assertEquals(0, tarArchiveEntry0.getDevMajor());
}","/**
 * Get this entry's major device number.
 *
 * @return This entry's major device number.
 * @since 1.4
 */"
"public int getMode() {
    return mode;
}","public void test01075() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", false);
    tarArchiveEntry0.setSize(0L);
    assertEquals(33188, tarArchiveEntry0.getMode());
}","/**
 * Get this entry's mode.
 *
 * @return This entry's mode.
 */"
"public boolean isSparse() {
    return isGNUSparse() || isStarSparse();
}","public void test01176() throws Throwable {
    MockFile mockFile0 = new MockFile((File) null, ""GNU.sparse.realsize"");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, ""GNU.sparse.realsize"");
    HashMap<String, String> hashMap0 = new HashMap<String, String>();
    tarArchiveEntry0.fillStarSparseData(hashMap0);
    boolean boolean0 = tarArchiveEntry0.isStarSparse();
    assertTrue(tarArchiveEntry0.isSparse());
}","/**
 * Check whether this is a sparse entry.
 *
 * @return whether this is a sparse entry
 * @since 1.11
 */"
"public boolean isStarSparse() {
    return starSparse;
}","public void test01177() throws Throwable {
    MockFile mockFile0 = new MockFile((File) null, ""GNU.sparse.realsize"");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, ""GNU.sparse.realsize"");
    HashMap<String, String> hashMap0 = new HashMap<String, String>();
    tarArchiveEntry0.fillStarSparseData(hashMap0);
    boolean boolean0 = tarArchiveEntry0.isStarSparse();
    assertTrue(boolean0);
}","/**
 * Indicate if this entry is a star sparse block using PAX headers.
 *
 * @return true if this is a sparse extension provided by star
 * @since 1.11
 */"
"@Override
public String getName() {
    return name;
}","public void test01278() throws Throwable {
    File file0 = MockFile.createTempFile("" byte binary number"", "" byte binary number"");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
    TarArchiveEntry tarArchiveEntry1 = new TarArchiveEntry(file0, "", "");
    boolean boolean0 = tarArchiveEntry0.isDescendent(tarArchiveEntry1);
    assertEquals(""var/folders/vv/c7q6vm8920vc7d5p_87011w40000gn/T/ byte binary number0 byte binary number"", tarArchiveEntry0.getName());
}","/**
 * Get this entry's name.
 *
 * @return This entry's name.
 */"
"public boolean isDescendent(final TarArchiveEntry desc) {
    return desc.getName().startsWith(getName());
}","public void test01279() throws Throwable {
    File file0 = MockFile.createTempFile("" byte binary number"", "" byte binary number"");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
    TarArchiveEntry tarArchiveEntry1 = new TarArchiveEntry(file0, "", "");
    boolean boolean0 = tarArchiveEntry0.isDescendent(tarArchiveEntry1);
    assertFalse(boolean0);
}","/**
 * Determine if the given entry is a descendant of this entry.
 * Descendancy is determined by the name of the descendant
 * starting with this entry's name.
 *
 * @param desc Entry to be checked as a descendent of this.
 * @return True if entry is a descendant of this.
 */"
"public int getDevMinor() {
    return devMinor;
}","public void test01280() throws Throwable {
    File file0 = MockFile.createTempFile("" byte binary number"", "" byte binary number"");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
    TarArchiveEntry tarArchiveEntry1 = new TarArchiveEntry(file0, "", "");
    boolean boolean0 = tarArchiveEntry0.isDescendent(tarArchiveEntry1);
    assertEquals(0, tarArchiveEntry1.getDevMinor());
}","/**
 * Get this entry's minor device number.
 *
 * @return This entry's minor device number.
 * @since 1.4
 */"
"@Deprecated
public int getGroupId() {
    return (int) (groupId & 0xffffffff);
}","public void test01281() throws Throwable {
    File file0 = MockFile.createTempFile("" byte binary number"", "" byte binary number"");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
    TarArchiveEntry tarArchiveEntry1 = new TarArchiveEntry(file0, "", "");
    boolean boolean0 = tarArchiveEntry0.isDescendent(tarArchiveEntry1);
    assertEquals(0, tarArchiveEntry1.getGroupId());
}","/**
 * Get this entry's group id.
 *
 * @return This entry's group id.
 * @deprecated use #getLongGroupId instead as group ids can be
 * bigger than {@link Integer#MAX_VALUE}
 */"
"public long getLongUserId() {
    return userId;
}","public void test01282() throws Throwable {
    File file0 = MockFile.createTempFile("" byte binary number"", "" byte binary number"");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
    TarArchiveEntry tarArchiveEntry1 = new TarArchiveEntry(file0, "", "");
    boolean boolean0 = tarArchiveEntry0.isDescendent(tarArchiveEntry1);
    assertEquals(0L, tarArchiveEntry1.getLongUserId());
}","/**
 * Get this entry's user id.
 *
 * @return This entry's user id.
 * @since 1.10
 */"
"public String getUserName() {
    return userName;
}","public void test01383() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("":'^od||M },BT6w"");
    tarArchiveEntry0.setUserName("":'^od||M },BT6w"");
    tarArchiveEntry0.getUserName();
    assertEquals("":'^od||M },BT6w"", tarArchiveEntry0.getUserName());
}","/**
 * Get this entry's user name.
 *
 * @return This entry's user name.
 */"
"public long getLongGroupId() {
    return groupId;
}","public void test01484() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", "", (byte) (-28), true);
    tarArchiveEntry0.setIds(32, (byte) (-28));
    int int0 = tarArchiveEntry0.getUserId();
    assertEquals((-28L), tarArchiveEntry0.getLongGroupId());
}","/**
 * Get this entry's group id.
 *
 * @since 1.10
 * @return This entry's group id.
 */"
"@Deprecated
public int getUserId() {
    return (int) (userId & 0xffffffff);
}","public void test01485() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", "", (byte) (-28), true);
    tarArchiveEntry0.setIds(32, (byte) (-28));
    int int0 = tarArchiveEntry0.getUserId();
    assertEquals(32, int0);
}","/**
 * Get this entry's user id.
 *
 * @return This entry's user id.
 * @deprecated use #getLongUserId instead as user ids can be
 * bigger than {@link Integer#MAX_VALUE}
 */"
"@Deprecated
public int getUserId() {
    return (int) (userId & 0xffffffff);
}","public void test01586() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""`711./t<5S"", (byte) (-28), true);
    tarArchiveEntry0.setIds((-2431), (byte) (-28));
    int int0 = tarArchiveEntry0.getUserId();
    assertEquals((-2431), int0);
}","/**
 * Get this entry's user id.
 *
 * @return This entry's user id.
 * @deprecated use #getLongUserId instead as user ids can be
 * bigger than {@link Integer#MAX_VALUE}
 */"
"@Override
public long getSize() {
    return size;
}","public void test01687() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    tarArchiveEntry0.setSize(2104L);
    long long0 = tarArchiveEntry0.getSize();
    assertEquals(2104L, long0);
}","/**
 * Get this entry's file size.
 *
 * @return This entry's file size.
 */"
"public boolean isCharacterDevice() {
    return linkFlag == LF_CHR;
}","public void test01788() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) 4);
    String string0 = tarArchiveEntry0.getName();
    assertFalse(tarArchiveEntry0.isCharacterDevice());
}","/**
 * Check if this is a character device entry.
 *
 * @since 1.2
 * @return whether this is a character device
 */"
"@Override
public long getSize() {
    return size;
}","public void test01789() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) 4);
    String string0 = tarArchiveEntry0.getName();
    assertEquals(0L, tarArchiveEntry0.getSize());
}","/**
 * Get this entry's file size.
 *
 * @return This entry's file size.
 */"
"public boolean isGNULongLinkEntry() {
    return linkFlag == LF_GNUTYPE_LONGLINK;
}","public void test01790() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) 4);
    String string0 = tarArchiveEntry0.getName();
    assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
}","/**
 * Indicate if this entry is a GNU long linkname block
 *
 * @return true if this is a long name extension provided by GNU tar
 */"
"@Override
public boolean isDirectory() {
    if (file != null) {
        return file.isDirectory();
    }
    if (linkFlag == LF_DIR) {
        return true;
    }
    if (getName().endsWith(""/"")) {
        return true;
    }
    return false;
}","public void test01791() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) 4);
    String string0 = tarArchiveEntry0.getName();
    assertFalse(tarArchiveEntry0.isDirectory());
}","/**
 * Return whether or not this entry represents a directory.
 *
 * @return True if this entry is a directory.
 */"
"public long getLongUserId() {
    return userId;
}","public void test01792() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) 4);
    String string0 = tarArchiveEntry0.getName();
    assertEquals(0L, tarArchiveEntry0.getLongUserId());
}","/**
 * Get this entry's user id.
 *
 * @return This entry's user id.
 * @since 1.10
 */"
"@Override
public String getName() {
    return name;
}","public void test01793() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) 4);
    String string0 = tarArchiveEntry0.getName();
    assertEquals("""", string0);
}","/**
 * Get this entry's name.
 *
 * @return This entry's name.
 */"
"public boolean isFIFO() {
    return linkFlag == LF_FIFO;
}","public void test01794() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) 4);
    String string0 = tarArchiveEntry0.getName();
    assertFalse(tarArchiveEntry0.isFIFO());
}","/**
 * Check if this is a FIFO (pipe) entry.
 *
 * @since 1.2
 * @return whether this is a FIFO entry
 */"
"public int getMode() {
    return mode;
}","public void test01795() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) 4);
    String string0 = tarArchiveEntry0.getName();
    assertEquals(33188, tarArchiveEntry0.getMode());
}","/**
 * Get this entry's mode.
 *
 * @return This entry's mode.
 */"
"public long getLongGroupId() {
    return groupId;
}","public void test01796() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) 4);
    String string0 = tarArchiveEntry0.getName();
    assertEquals(0L, tarArchiveEntry0.getLongGroupId());
}","/**
 * Get this entry's group id.
 *
 * @since 1.10
 * @return This entry's group id.
 */"
"public int getMode() {
    return mode;
}","public void test01897() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"");
    assertEquals(33188, tarArchiveEntry0.getMode());
}","/**
 * Get this entry's mode.
 *
 * @return This entry's mode.
 */"
"public int getMode() {
    return mode;
}","public void test01898() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"");
    tarArchiveEntry0.setMode(0);
    int int0 = tarArchiveEntry0.getMode();
    assertEquals(0, int0);
}","/**
 * Get this entry's mode.
 *
 * @return This entry's mode.
 */"
"public int getMode() {
    return mode;
}","public void test01999() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"", true);
    tarArchiveEntry0.setMode((-3501));
    int int0 = tarArchiveEntry0.getMode();
    assertEquals((-3501), int0);
}","/**
 * Get this entry's mode.
 *
 * @return This entry's mode.
 */"
"public long getLongUserId() {
    return userId;
}","public void test020100() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"");
    tarArchiveEntry0.setIds(33188, 0);
    long long0 = tarArchiveEntry0.getLongUserId();
    assertEquals(33188L, long0);
}","/**
 * Get this entry's user id.
 *
 * @return This entry's user id.
 * @since 1.10
 */"
"public long getLongGroupId() {
    return groupId;
}","public void test021101() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"", true);
    tarArchiveEntry0.setIds((-3501), 4098);
    long long0 = tarArchiveEntry0.getLongUserId();
    assertEquals(4098L, tarArchiveEntry0.getLongGroupId());
}","/**
 * Get this entry's group id.
 *
 * @since 1.10
 * @return This entry's group id.
 */"
"public long getLongUserId() {
    return userId;
}","public void test021102() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"", true);
    tarArchiveEntry0.setIds((-3501), 4098);
    long long0 = tarArchiveEntry0.getLongUserId();
    assertEquals((-3501L), long0);
}","/**
 * Get this entry's user id.
 *
 * @return This entry's user id.
 * @since 1.10
 */"
"public long getLongGroupId() {
    return groupId;
}","public void test022103() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"");
    tarArchiveEntry0.setGroupId(508);
    long long0 = tarArchiveEntry0.getLongGroupId();
    assertEquals(508L, long0);
}","/**
 * Get this entry's group id.
 *
 * @since 1.10
 * @return This entry's group id.
 */"
"public long getLongGroupId() {
    return groupId;
}","public void test023104() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""p$"");
    tarArchiveEntry0.setIds(1, (-2506));
    long long0 = tarArchiveEntry0.getLongGroupId();
    assertEquals((-2506L), long0);
}","/**
 * Get this entry's group id.
 *
 * @since 1.10
 * @return This entry's group id.
 */"
"public String getLinkName() {
    return linkName;
}","public void test024105() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""ustar\u0000"", (byte) (-41));
    assertEquals("""", tarArchiveEntry0.getLinkName());
}","/**
 * Get this entry's link name.
 *
 * @return This entry's link name.
 */"
"public String getLinkName() {
    return linkName;
}","public void test024106() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""ustar\u0000"", (byte) (-41));
    tarArchiveEntry0.setLinkName(""ustar\u0000"");
    String string0 = tarArchiveEntry0.getLinkName();
    assertEquals(""ustar\u0000"", string0);
}","/**
 * Get this entry's link name.
 *
 * @return This entry's link name.
 */"
"public String getGroupName() {
    return groupName;
}","public void test025107() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, ""Minor device number is out of range: "");
    tarArchiveEntry0.setNames(""uh=IXCm.X*%"", "" exceeds maximum signed long"");
    tarArchiveEntry0.getGroupName();
    assertEquals("" exceeds maximum signed long"", tarArchiveEntry0.getGroupName());
}","/**
 * Get this entry's group name.
 *
 * @return This entry's group name.
 */"
"@Deprecated
public int getGroupId() {
    return (int) (groupId & 0xffffffff);
}","public void test026108() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"", true);
    tarArchiveEntry0.setIds((-3501), 4098);
    int int0 = tarArchiveEntry0.getGroupId();
    assertEquals(4098, int0);
}","/**
 * Get this entry's group id.
 *
 * @return This entry's group id.
 * @deprecated use #getLongGroupId instead as group ids can be
 * bigger than {@link Integer#MAX_VALUE}
 */"
"public long getLongGroupId() {
    return groupId;
}","public void test027109() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""Cs#"");
    tarArchiveEntry0.setGroupId((-1850L));
    int int0 = tarArchiveEntry0.getGroupId();
    assertEquals((-1850L), tarArchiveEntry0.getLongGroupId());
}","/**
 * Get this entry's group id.
 *
 * @since 1.10
 * @return This entry's group id.
 */"
"@Deprecated
public int getGroupId() {
    return (int) (groupId & 0xffffffff);
}","public void test027110() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""Cs#"");
    tarArchiveEntry0.setGroupId((-1850L));
    int int0 = tarArchiveEntry0.getGroupId();
    assertEquals((-1850), int0);
}","/**
 * Get this entry's group id.
 *
 * @return This entry's group id.
 * @deprecated use #getLongGroupId instead as group ids can be
 * bigger than {@link Integer#MAX_VALUE}
 */"
"public int getMode() {
    return mode;
}","public void test028111() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"", true);
    tarArchiveEntry0.getFile();
    assertEquals(33188, tarArchiveEntry0.getMode());
}","/**
 * Get this entry's mode.
 *
 * @return This entry's mode.
 */"
"@Override
public String getName() {
    return name;
}","public void test028112() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"", true);
    tarArchiveEntry0.getFile();
    assertEquals(""6+\""|M&Us47]k"", tarArchiveEntry0.getName());
}","/**
 * Get this entry's name.
 *
 * @return This entry's name.
 */"
"@Override
public boolean isDirectory() {
    if (file != null) {
        return file.isDirectory();
    }
    if (linkFlag == LF_DIR) {
        return true;
    }
    if (getName().endsWith(""/"")) {
        return true;
    }
    return false;
}","public void test028113() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"", true);
    tarArchiveEntry0.getFile();
    assertFalse(tarArchiveEntry0.isDirectory());
}","/**
 * Return whether or not this entry represents a directory.
 *
 * @return True if this entry is a directory.
 */"
"@Deprecated
public int getUserId() {
    return (int) (userId & 0xffffffff);
}","public void test028114() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"", true);
    tarArchiveEntry0.getFile();
    assertEquals(0, tarArchiveEntry0.getUserId());
}","/**
 * Get this entry's user id.
 *
 * @return This entry's user id.
 * @deprecated use #getLongUserId instead as user ids can be
 * bigger than {@link Integer#MAX_VALUE}
 */"
"@Override
public long getSize() {
    return size;
}","public void test028115() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"", true);
    tarArchiveEntry0.getFile();
    assertEquals(0L, tarArchiveEntry0.getSize());
}","/**
 * Get this entry's file size.
 *
 * @return This entry's file size.
 */"
"@Deprecated
public int getGroupId() {
    return (int) (groupId & 0xffffffff);
}","public void test028116() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"", true);
    tarArchiveEntry0.getFile();
    assertEquals(0, tarArchiveEntry0.getGroupId());
}","/**
 * Get this entry's group id.
 *
 * @return This entry's group id.
 * @deprecated use #getLongGroupId instead as group ids can be
 * bigger than {@link Integer#MAX_VALUE}
 */"
"@Override
public long getSize() {
    return size;
}","public void test029117() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, ""Minor device number is out of range: "");
    tarArchiveEntry0.getFile();
    assertEquals(0L, tarArchiveEntry0.getSize());
}","/**
 * Get this entry's file size.
 *
 * @return This entry's file size.
 */"
"@Deprecated
public int getGroupId() {
    return (int) (groupId & 0xffffffff);
}","public void test029118() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, ""Minor device number is out of range: "");
    tarArchiveEntry0.getFile();
    assertEquals(0, tarArchiveEntry0.getGroupId());
}","/**
 * Get this entry's group id.
 *
 * @return This entry's group id.
 * @deprecated use #getLongGroupId instead as group ids can be
 * bigger than {@link Integer#MAX_VALUE}
 */"
"public long getLongUserId() {
    return userId;
}","public void test029119() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, ""Minor device number is out of range: "");
    tarArchiveEntry0.getFile();
    assertEquals(0L, tarArchiveEntry0.getLongUserId());
}","/**
 * Get this entry's user id.
 *
 * @return This entry's user id.
 * @since 1.10
 */"
"@Override
public String getName() {
    return name;
}","public void test029120() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, ""Minor device number is out of range: "");
    tarArchiveEntry0.getFile();
    assertEquals(""Minor device number is out of range: /"", tarArchiveEntry0.getName());
}","/**
 * Get this entry's name.
 *
 * @return This entry's name.
 */"
"public int getMode() {
    return mode;
}","public void test029121() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, ""Minor device number is out of range: "");
    tarArchiveEntry0.getFile();
    assertEquals(16877, tarArchiveEntry0.getMode());
}","/**
 * Get this entry's mode.
 *
 * @return This entry's mode.
 */"
"@Override
public String getName() {
    return name;
}","public void test030122() throws Throwable {
    MockFile mockFile0 = new MockFile(""XJG&E"");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, ""XJG&E"");
    tarArchiveEntry0.getFile();
    assertEquals(""XJG&E"", tarArchiveEntry0.getName());
}","/**
 * Get this entry's name.
 *
 * @return This entry's name.
 */"
"@Deprecated
public int getUserId() {
    return (int) (userId & 0xffffffff);
}","public void test030123() throws Throwable {
    MockFile mockFile0 = new MockFile(""XJG&E"");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, ""XJG&E"");
    tarArchiveEntry0.getFile();
    assertEquals(0, tarArchiveEntry0.getUserId());
}","/**
 * Get this entry's user id.
 *
 * @return This entry's user id.
 * @deprecated use #getLongUserId instead as user ids can be
 * bigger than {@link Integer#MAX_VALUE}
 */"
"public int getDevMinor() {
    return devMinor;
}","public void test030124() throws Throwable {
    MockFile mockFile0 = new MockFile(""XJG&E"");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, ""XJG&E"");
    tarArchiveEntry0.getFile();
    assertEquals(0, tarArchiveEntry0.getDevMinor());
}","/**
 * Get this entry's minor device number.
 *
 * @return This entry's minor device number.
 * @since 1.4
 */"
"public long getLongGroupId() {
    return groupId;
}","public void test030125() throws Throwable {
    MockFile mockFile0 = new MockFile(""XJG&E"");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, ""XJG&E"");
    tarArchiveEntry0.getFile();
    assertEquals(0L, tarArchiveEntry0.getLongGroupId());
}","/**
 * Get this entry's group id.
 *
 * @since 1.10
 * @return This entry's group id.
 */"
"public int getDevMajor() {
    return devMajor;
}","public void test030126() throws Throwable {
    MockFile mockFile0 = new MockFile(""XJG&E"");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, ""XJG&E"");
    tarArchiveEntry0.getFile();
    assertEquals(0, tarArchiveEntry0.getDevMajor());
}","/**
 * Get this entry's major device number.
 *
 * @return This entry's major device number.
 * @since 1.4
 */"
"public int getDevMinor() {
    return devMinor;
}","public void test031127() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""SCHILY.realsize"");
    tarArchiveEntry0.setDevMinor(9561);
    int int0 = tarArchiveEntry0.getDevMinor();
    assertEquals(9561, int0);
}","/**
 * Get this entry's minor device number.
 *
 * @return This entry's minor device number.
 * @since 1.4
 */"
"public int getDevMajor() {
    return devMajor;
}","public void test032128() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""");
    tarArchiveEntry0.setDevMajor(180);
    int int0 = tarArchiveEntry0.getDevMajor();
    assertEquals(180, int0);
}","/**
 * Get this entry's major device number.
 *
 * @return This entry's major device number.
 * @since 1.4
 */"
"public int getDevMinor() {
    return devMinor;
}","public void test033129() throws Throwable {
    File file0 = MockFile.createTempFile("" byte binary number"", "" byte binary number"");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
    TarArchiveEntry tarArchiveEntry1 = new TarArchiveEntry(file0, "", "");
    boolean boolean0 = tarArchiveEntry0.equals(tarArchiveEntry1);
    assertEquals(0, tarArchiveEntry1.getDevMinor());
}","/**
 * Get this entry's minor device number.
 *
 * @return This entry's minor device number.
 * @since 1.4
 */"
"public int getDevMajor() {
    return devMajor;
}","public void test033130() throws Throwable {
    File file0 = MockFile.createTempFile("" byte binary number"", "" byte binary number"");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
    TarArchiveEntry tarArchiveEntry1 = new TarArchiveEntry(file0, "", "");
    boolean boolean0 = tarArchiveEntry0.equals(tarArchiveEntry1);
    assertEquals(0, tarArchiveEntry1.getDevMajor());
}","/**
 * Get this entry's major device number.
 *
 * @return This entry's major device number.
 * @since 1.4
 */"
"@Override
public String getName() {
    return name;
}","public void test033131() throws Throwable {
    File file0 = MockFile.createTempFile("" byte binary number"", "" byte binary number"");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
    TarArchiveEntry tarArchiveEntry1 = new TarArchiveEntry(file0, "", "");
    boolean boolean0 = tarArchiveEntry0.equals(tarArchiveEntry1);
    assertEquals(""var/folders/vv/c7q6vm8920vc7d5p_87011w40000gn/T/ byte binary number0 byte binary number"", tarArchiveEntry0.getName());
}","/**
 * Get this entry's name.
 *
 * @return This entry's name.
 */"
"public boolean equals(final TarArchiveEntry it) {
    return getName().equals(it.getName());
}","public void test033132() throws Throwable {
    File file0 = MockFile.createTempFile("" byte binary number"", "" byte binary number"");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
    TarArchiveEntry tarArchiveEntry1 = new TarArchiveEntry(file0, "", "");
    boolean boolean0 = tarArchiveEntry0.equals(tarArchiveEntry1);
    assertFalse(boolean0);
}","/**
 * Determine if the two entries are equal. Equality is determined
 * by the header names being equal.
 *
 * @param it Entry to be checked for equality.
 * @return True if the entries are equal.
 */"
"@Deprecated
public int getUserId() {
    return (int) (userId & 0xffffffff);
}","public void test033133() throws Throwable {
    File file0 = MockFile.createTempFile("" byte binary number"", "" byte binary number"");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
    TarArchiveEntry tarArchiveEntry1 = new TarArchiveEntry(file0, "", "");
    boolean boolean0 = tarArchiveEntry0.equals(tarArchiveEntry1);
    assertEquals(0, tarArchiveEntry1.getUserId());
}","/**
 * Get this entry's user id.
 *
 * @return This entry's user id.
 * @deprecated use #getLongUserId instead as user ids can be
 * bigger than {@link Integer#MAX_VALUE}
 */"
"public long getLongGroupId() {
    return groupId;
}","public void test033134() throws Throwable {
    File file0 = MockFile.createTempFile("" byte binary number"", "" byte binary number"");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
    TarArchiveEntry tarArchiveEntry1 = new TarArchiveEntry(file0, "", "");
    boolean boolean0 = tarArchiveEntry0.equals(tarArchiveEntry1);
    assertEquals(0L, tarArchiveEntry1.getLongGroupId());
}","/**
 * Get this entry's group id.
 *
 * @since 1.10
 * @return This entry's group id.
 */"
"public void writeEntryHeader(final byte[] outbuf, final ZipEncoding encoding, final boolean starMode) throws IOException {
    int offset = 0;
    offset = TarUtils.formatNameBytes(name, outbuf, offset, NAMELEN, encoding);
    offset = writeEntryHeaderField(mode, outbuf, offset, MODELEN, starMode);
    offset = writeEntryHeaderField(userId, outbuf, offset, UIDLEN, starMode);
    offset = writeEntryHeaderField(groupId, outbuf, offset, GIDLEN, starMode);
    offset = writeEntryHeaderField(size, outbuf, offset, SIZELEN, starMode);
    offset = writeEntryHeaderField(modTime, outbuf, offset, MODTIMELEN, starMode);
    final int csOffset = offset;
    for (int c = 0; c < CHKSUMLEN; ++c) {
        outbuf[offset++] = (byte) ' ';
    }
    outbuf[offset++] = linkFlag;
    offset = TarUtils.formatNameBytes(linkName, outbuf, offset, NAMELEN, encoding);
    offset = TarUtils.formatNameBytes(magic, outbuf, offset, MAGICLEN);
    offset = TarUtils.formatNameBytes(version, outbuf, offset, VERSIONLEN);
    offset = TarUtils.formatNameBytes(userName, outbuf, offset, UNAMELEN, encoding);
    offset = TarUtils.formatNameBytes(groupName, outbuf, offset, GNAMELEN, encoding);
    offset = writeEntryHeaderField(devMajor, outbuf, offset, DEVLEN, starMode);
    offset = writeEntryHeaderField(devMinor, outbuf, offset, DEVLEN, starMode);
    while (offset < outbuf.length) {
        outbuf[offset++] = 0;
    }
    final long chk = TarUtils.computeCheckSum(outbuf);
    TarUtils.formatCheckSumOctalBytes(chk, outbuf, csOffset, CHKSUMLEN);
}","public void test034135() throws Throwable {
    MockFile mockFile0 = new MockFile("""", """");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
    byte[] byteArray0 = new byte[9];
    ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect((byte) 54);
    ZipEncoding zipEncoding0 = mock(ZipEncoding.class, new ViolatedAssumptionAnswer());
    doReturn(byteBuffer0).when(zipEncoding0).encode(anyString());
    // Undeclared exception!
    try {
        tarArchiveEntry0.writeEntryHeader(byteArray0, zipEncoding0, false);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.nio.ByteBuffer"", e);
    }
}","/**
 * Write an entry's header information to a header buffer.
 *
 * @param outbuf The tar entry header buffer to fill in.
 * @param encoding encoding to use when writing the file name.
 * @param starMode whether to use the star/GNU tar/BSD tar
 * extension for numeric fields if their value doesn't fit in the
 * maximum size of standard tar archives
 * @since 1.4
 * @throws IOException on error
 */"
"public void writeEntryHeader(final byte[] outbuf, final ZipEncoding encoding, final boolean starMode) throws IOException {
    int offset = 0;
    offset = TarUtils.formatNameBytes(name, outbuf, offset, NAMELEN, encoding);
    offset = writeEntryHeaderField(mode, outbuf, offset, MODELEN, starMode);
    offset = writeEntryHeaderField(userId, outbuf, offset, UIDLEN, starMode);
    offset = writeEntryHeaderField(groupId, outbuf, offset, GIDLEN, starMode);
    offset = writeEntryHeaderField(size, outbuf, offset, SIZELEN, starMode);
    offset = writeEntryHeaderField(modTime, outbuf, offset, MODTIMELEN, starMode);
    final int csOffset = offset;
    for (int c = 0; c < CHKSUMLEN; ++c) {
        outbuf[offset++] = (byte) ' ';
    }
    outbuf[offset++] = linkFlag;
    offset = TarUtils.formatNameBytes(linkName, outbuf, offset, NAMELEN, encoding);
    offset = TarUtils.formatNameBytes(magic, outbuf, offset, MAGICLEN);
    offset = TarUtils.formatNameBytes(version, outbuf, offset, VERSIONLEN);
    offset = TarUtils.formatNameBytes(userName, outbuf, offset, UNAMELEN, encoding);
    offset = TarUtils.formatNameBytes(groupName, outbuf, offset, GNAMELEN, encoding);
    offset = writeEntryHeaderField(devMajor, outbuf, offset, DEVLEN, starMode);
    offset = writeEntryHeaderField(devMinor, outbuf, offset, DEVLEN, starMode);
    while (offset < outbuf.length) {
        outbuf[offset++] = 0;
    }
    final long chk = TarUtils.computeCheckSum(outbuf);
    TarUtils.formatCheckSumOctalBytes(chk, outbuf, csOffset, CHKSUMLEN);
}","public void test035136() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""ustar "", (byte) 76, false);
    ZipEncoding zipEncoding0 = mock(ZipEncoding.class, new ViolatedAssumptionAnswer());
    doReturn((ByteBuffer) null).when(zipEncoding0).encode(anyString());
    // Undeclared exception!
    try {
        tarArchiveEntry0.writeEntryHeader((byte[]) null, zipEncoding0, true);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarUtils"", e);
    }
}","/**
 * Write an entry's header information to a header buffer.
 *
 * @param outbuf The tar entry header buffer to fill in.
 * @param encoding encoding to use when writing the file name.
 * @param starMode whether to use the star/GNU tar/BSD tar
 * extension for numeric fields if their value doesn't fit in the
 * maximum size of standard tar archives
 * @since 1.4
 * @throws IOException on error
 */"
"public void writeEntryHeader(final byte[] outbuf, final ZipEncoding encoding, final boolean starMode) throws IOException {
    int offset = 0;
    offset = TarUtils.formatNameBytes(name, outbuf, offset, NAMELEN, encoding);
    offset = writeEntryHeaderField(mode, outbuf, offset, MODELEN, starMode);
    offset = writeEntryHeaderField(userId, outbuf, offset, UIDLEN, starMode);
    offset = writeEntryHeaderField(groupId, outbuf, offset, GIDLEN, starMode);
    offset = writeEntryHeaderField(size, outbuf, offset, SIZELEN, starMode);
    offset = writeEntryHeaderField(modTime, outbuf, offset, MODTIMELEN, starMode);
    final int csOffset = offset;
    for (int c = 0; c < CHKSUMLEN; ++c) {
        outbuf[offset++] = (byte) ' ';
    }
    outbuf[offset++] = linkFlag;
    offset = TarUtils.formatNameBytes(linkName, outbuf, offset, NAMELEN, encoding);
    offset = TarUtils.formatNameBytes(magic, outbuf, offset, MAGICLEN);
    offset = TarUtils.formatNameBytes(version, outbuf, offset, VERSIONLEN);
    offset = TarUtils.formatNameBytes(userName, outbuf, offset, UNAMELEN, encoding);
    offset = TarUtils.formatNameBytes(groupName, outbuf, offset, GNAMELEN, encoding);
    offset = writeEntryHeaderField(devMajor, outbuf, offset, DEVLEN, starMode);
    offset = writeEntryHeaderField(devMinor, outbuf, offset, DEVLEN, starMode);
    while (offset < outbuf.length) {
        outbuf[offset++] = 0;
    }
    final long chk = TarUtils.computeCheckSum(outbuf);
    TarUtils.formatCheckSumOctalBytes(chk, outbuf, csOffset, CHKSUMLEN);
}","public void test036137() throws Throwable {
    String string0 = ""4(7z< exM*tBz6;Us"";
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""4(7z< exM*tBz6;Us"", true);
    byte[] byteArray0 = new byte[7];
    byteArray0[0] = (byte) (-31);
    byteArray0[1] = (byte) 21;
    byte byte0 = (byte) 75;
    byteArray0[2] = (byte) 75;
    byteArray0[3] = (byte) 0;
    tarArchiveEntry0.setUserId((int) (byte) (-31));
    byteArray0[4] = (byte) 0;
    byteArray0[5] = (byte) 51;
    HashMap<String, String> hashMap0 = new HashMap<String, String>();
    tarArchiveEntry0.fillStarSparseData(hashMap0);
    byteArray0[6] = (byte) (-92);
    ByteBuffer byteBuffer0 = ByteBuffer.allocate(1000);
    ZipEncoding zipEncoding0 = mock(ZipEncoding.class, new ViolatedAssumptionAnswer());
    doReturn(byteBuffer0, (ByteBuffer) null).when(zipEncoding0).encode(anyString());
    // Undeclared exception!
    try {
        tarArchiveEntry0.writeEntryHeader(byteArray0, zipEncoding0, true);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarUtils"", e);
    }
}","/**
 * Write an entry's header information to a header buffer.
 *
 * @param outbuf The tar entry header buffer to fill in.
 * @param encoding encoding to use when writing the file name.
 * @param starMode whether to use the star/GNU tar/BSD tar
 * extension for numeric fields if their value doesn't fit in the
 * maximum size of standard tar archives
 * @since 1.4
 * @throws IOException on error
 */"
"public void writeEntryHeader(final byte[] outbuf) {
    try {
        writeEntryHeader(outbuf, TarUtils.DEFAULT_ENCODING, false);
    } catch (final IOException ex) {
        try {
            writeEntryHeader(outbuf, TarUtils.FALLBACK_ENCODING, false);
        } catch (final IOException ex2) {
            // impossible
            throw new RuntimeException(ex2);
        }
    }
}","public void test037138() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""@&<5ZiR]4;W"", (byte) 103);
    // Undeclared exception!
    try {
        tarArchiveEntry0.writeEntryHeader((byte[]) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
    }
}","/**
 * Write an entry's header information to a header buffer.
 *
 * <p>This method does not use the star/GNU tar/BSD tar extensions.</p>
 *
 * @param outbuf The tar entry header buffer to fill in.
 */"
"public void setName(final String name) {
    this.name = normalizeFileName(name, this.preserveLeadingSlashes);
}","public void test038139() throws Throwable {
    File file0 = MockFile.createTempFile("" byte binary number"", "" byte binary number"");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
    // Undeclared exception!
    try {
        tarArchiveEntry0.setName((String) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarArchiveEntry"", e);
    }
}","/**
 * Set this entry's name.
 *
 * @param name This entry's new name.
 */"
"public void setModTime(final Date time) {
    modTime = time.getTime() / MILLIS_PER_SECOND;
}","public void test039140() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""Z;R"", (byte) (-47), false);
    // Undeclared exception!
    try {
        tarArchiveEntry0.setModTime((Date) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarArchiveEntry"", e);
    }
}","/**
 * Set this entry's modification time.
 *
 * @param time This entry's new modification time.
 */"
"public void parseTarHeader(final byte[] header, final ZipEncoding encoding) throws IOException {
    parseTarHeader(header, encoding, false);
}","public void test040141() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-95));
    byte[] byteArray0 = new byte[3];
    ZipEncoding zipEncoding0 = mock(ZipEncoding.class, new ViolatedAssumptionAnswer());
    // Undeclared exception!
    try {
        tarArchiveEntry0.parseTarHeader(byteArray0, zipEncoding0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 99
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarUtils"", e);
    }
}","/**
 * Parse an entry's header information from a header buffer.
 *
 * @param header The tar entry header buffer to get information from.
 * @param encoding encoding to use for file names
 * @since 1.4
 * @throws IllegalArgumentException if any of the numeric fields
 * have an invalid format
 * @throws IOException on error
 */"
"public void parseTarHeader(final byte[] header) {
    try {
        parseTarHeader(header, TarUtils.DEFAULT_ENCODING);
    } catch (final IOException ex) {
        try {
            parseTarHeader(header, TarUtils.DEFAULT_ENCODING, true);
        } catch (final IOException ex2) {
            // not really possible
            throw new RuntimeException(ex2);
        }
    }
}","public void test041142() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""TmT"");
    // Undeclared exception!
    try {
        tarArchiveEntry0.parseTarHeader((byte[]) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarUtils"", e);
    }
}","/**
 * Parse an entry's header information from a header buffer.
 *
 * @param header The tar entry header buffer to get information from.
 * @throws IllegalArgumentException if any of the numeric fields have an invalid format
 */"
"public boolean isDescendent(final TarArchiveEntry desc) {
    return desc.getName().startsWith(getName());
}","public void test042143() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    // Undeclared exception!
    try {
        tarArchiveEntry0.isDescendent((TarArchiveEntry) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarArchiveEntry"", e);
    }
}","/**
 * Determine if the given entry is a descendant of this entry.
 * Descendancy is determined by the name of the descendant
 * starting with this entry's name.
 *
 * @param desc Entry to be checked as a descendent of this.
 * @return True if entry is a descendant of this.
 */"
"void fillStarSparseData(final Map<String, String> headers) {
    starSparse = true;
    if (headers.containsKey(""SCHILY.realsize"")) {
        realSize = Long.parseLong(headers.get(""SCHILY.realsize""));
    }
}","public void test043144() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", false);
    // Undeclared exception!
    try {
        tarArchiveEntry0.fillStarSparseData((Map<String, String>) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
    }
}",""
"void fillGNUSparse1xData(final Map<String, String> headers) {
    paxGNUSparse = true;
    realSize = Integer.parseInt(headers.get(""GNU.sparse.realsize""));
    name = headers.get(""GNU.sparse.name"");
}","public void test044145() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""g9fN-2"");
    // Undeclared exception!
    try {
        tarArchiveEntry0.fillGNUSparse1xData((Map<String, String>) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarArchiveEntry"", e);
    }
}",""
"void fillGNUSparse0xData(final Map<String, String> headers) {
    paxGNUSparse = true;
    realSize = Integer.parseInt(headers.get(""GNU.sparse.size""));
    if (headers.containsKey(""GNU.sparse.name"")) {
        // version 0.1
        name = headers.get(""GNU.sparse.name"");
    }
}","public void test045146() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) 112, false);
    HashMap<String, String> hashMap0 = new HashMap<String, String>();
    // Undeclared exception!
    try {
        tarArchiveEntry0.fillGNUSparse0xData(hashMap0);
        fail(""Expecting exception: NumberFormatException"");
    } catch (NumberFormatException e) {
        //
        // null
        //
        verifyException(""java.lang.Integer"", e);
    }
}",""
"void fillGNUSparse0xData(final Map<String, String> headers) {
    paxGNUSparse = true;
    realSize = Integer.parseInt(headers.get(""GNU.sparse.size""));
    if (headers.containsKey(""GNU.sparse.name"")) {
        // version 0.1
        name = headers.get(""GNU.sparse.name"");
    }
}","public void test046147() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) 90, true);
    // Undeclared exception!
    try {
        tarArchiveEntry0.fillGNUSparse0xData((Map<String, String>) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarArchiveEntry"", e);
    }
}",""
"public TarArchiveEntry(final byte[] headerBuf, final ZipEncoding encoding) throws IOException {
    this();
    parseTarHeader(headerBuf, encoding);
}","public void test047148() throws Throwable {
    byte[] byteArray0 = new byte[2];
    TarArchiveEntry tarArchiveEntry0 = null;
    try {
        tarArchiveEntry0 = new TarArchiveEntry(byteArray0, (ZipEncoding) null);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 99
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarUtils"", e);
    }
}","/**
 * Construct an entry from an archive's header bytes. File is set
 * to null.
 *
 * @param headerBuf The header bytes from a tar archive entry.
 * @param encoding encoding to use for file names
 * @since 1.4
 * @throws IllegalArgumentException if any of the numeric fields have an invalid format
 * @throws IOException on error
 */"
"public TarArchiveEntry(final byte[] headerBuf) {
    this();
    parseTarHeader(headerBuf);
}","public void test048149() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = null;
    try {
        tarArchiveEntry0 = new TarArchiveEntry((byte[]) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarUtils"", e);
    }
}","/**
 * Construct an entry from an archive's header bytes. File is set
 * to null.
 *
 * @param headerBuf The header bytes from a tar archive entry.
 * @throws IllegalArgumentException if any of the numeric fields have an invalid format
 */"
"public TarArchiveEntry(String name, final boolean preserveLeadingSlashes) {
    this();
    this.preserveLeadingSlashes = preserveLeadingSlashes;
    name = normalizeFileName(name, preserveLeadingSlashes);
    final boolean isDir = name.endsWith(""/"");
    this.name = name;
    this.mode = isDir ? DEFAULT_DIR_MODE : DEFAULT_FILE_MODE;
    this.linkFlag = isDir ? LF_DIR : LF_NORMAL;
    this.modTime = new Date().getTime() / MILLIS_PER_SECOND;
    this.userName = """";
}","public void test049150() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = null;
    try {
        tarArchiveEntry0 = new TarArchiveEntry((String) null, false);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarArchiveEntry"", e);
    }
}","/**
 * Construct an entry with only a name. This allows the programmer
 * to construct the entry's header ""by hand"". File is set to null.
 *
 * @param name the entry name
 * @param preserveLeadingSlashes whether to allow leading slashes
 * in the name.
 *
 * @since 1.1
 */"
"public TarArchiveEntry(final String name, final byte linkFlag, final boolean preserveLeadingSlashes) {
    this(name, preserveLeadingSlashes);
    this.linkFlag = linkFlag;
    if (linkFlag == LF_GNUTYPE_LONGNAME) {
        magic = MAGIC_GNU;
        version = VERSION_GNU_SPACE;
    }
}","public void test050151() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = null;
    try {
        tarArchiveEntry0 = new TarArchiveEntry((String) null, (byte) 37, true);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarArchiveEntry"", e);
    }
}","/**
 * Construct an entry with a name and a link flag.
 *
 * @param name the entry name
 * @param linkFlag the entry link flag.
 * @param preserveLeadingSlashes whether to allow leading slashes
 * in the name.
 *
 * @since 1.5
 */"
"public TarArchiveEntry(final String name, final byte linkFlag) {
    this(name, linkFlag, false);
}","public void test051152() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = null;
    try {
        tarArchiveEntry0 = new TarArchiveEntry((String) null, (byte) (-53));
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarArchiveEntry"", e);
    }
}","/**
 * Construct an entry with a name and a link flag.
 *
 * @param name the entry name
 * @param linkFlag the entry link flag.
 */"
"public TarArchiveEntry(final String name) {
    this(name, false);
}","public void test052153() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = null;
    try {
        tarArchiveEntry0 = new TarArchiveEntry((String) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarArchiveEntry"", e);
    }
}","/**
 * Construct an entry with only a name. This allows the programmer
 * to construct the entry's header ""by hand"". File is set to null.
 *
 * @param name the entry name
 */"
"public TarArchiveEntry(final File file, final String fileName) {
    final String normalizedName = normalizeFileName(fileName, false);
    this.file = file;
    if (file.isDirectory()) {
        this.mode = DEFAULT_DIR_MODE;
        this.linkFlag = LF_DIR;
        final int nameLength = normalizedName.length();
        if (nameLength == 0 || normalizedName.charAt(nameLength - 1) != '/') {
            this.name = normalizedName + ""/"";
        } else {
            this.name = normalizedName;
        }
    } else {
        this.mode = DEFAULT_FILE_MODE;
        this.linkFlag = LF_NORMAL;
        this.size = file.length();
        this.name = normalizedName;
    }
    this.modTime = file.lastModified() / MILLIS_PER_SECOND;
    this.userName = """";
}","public void test053154() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = null;
    try {
        tarArchiveEntry0 = new TarArchiveEntry((File) null, """");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarArchiveEntry"", e);
    }
}","/**
 * Construct an entry for a file. File is set to file, and the
 * header is constructed from information from the file.
 *
 * @param file The file that the entry represents.
 * @param fileName the name to be used for the entry.
 */"
"public TarArchiveEntry(final File file) {
    this(file, file.getPath());
}","public void test054155() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = null;
    try {
        tarArchiveEntry0 = new TarArchiveEntry((File) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarArchiveEntry"", e);
    }
}","/**
 * Construct an entry for a file. File is set to file, and the
 * header is constructed from information from the file.
 * The name is set from the normalized file path.
 *
 * @param file The file that the entry represents.
 */"
"@Override
public long getSize() {
    return size;
}","public void test055156() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""Z$$4i|&L\""`qI8p"");
    boolean boolean0 = tarArchiveEntry0.isOldGNUSparse();
    assertEquals(0L, tarArchiveEntry0.getSize());
}","/**
 * Get this entry's file size.
 *
 * @return This entry's file size.
 */"
"public boolean isOldGNUSparse() {
    return linkFlag == LF_GNUTYPE_SPARSE;
}","public void test055157() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""Z$$4i|&L\""`qI8p"");
    boolean boolean0 = tarArchiveEntry0.isOldGNUSparse();
    assertFalse(boolean0);
}","/**
 * Indicate if this entry is a GNU or star sparse block using the
 * oldgnu format.
 *
 * @return true if this is a sparse extension provided by GNU tar or star
 * @since 1.11
 */"
"@Override
public boolean isDirectory() {
    if (file != null) {
        return file.isDirectory();
    }
    if (linkFlag == LF_DIR) {
        return true;
    }
    if (getName().endsWith(""/"")) {
        return true;
    }
    return false;
}","public void test055158() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""Z$$4i|&L\""`qI8p"");
    boolean boolean0 = tarArchiveEntry0.isOldGNUSparse();
    assertFalse(tarArchiveEntry0.isDirectory());
}","/**
 * Return whether or not this entry represents a directory.
 *
 * @return True if this entry is a directory.
 */"
"@Override
public String getName() {
    return name;
}","public void test055159() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""Z$$4i|&L\""`qI8p"");
    boolean boolean0 = tarArchiveEntry0.isOldGNUSparse();
    assertEquals(""Z$$4i|&L\""`qI8p"", tarArchiveEntry0.getName());
}","/**
 * Get this entry's name.
 *
 * @return This entry's name.
 */"
"public int getMode() {
    return mode;
}","public void test055160() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""Z$$4i|&L\""`qI8p"");
    boolean boolean0 = tarArchiveEntry0.isOldGNUSparse();
    assertEquals(33188, tarArchiveEntry0.getMode());
}","/**
 * Get this entry's mode.
 *
 * @return This entry's mode.
 */"
"public long getLongGroupId() {
    return groupId;
}","public void test055161() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""Z$$4i|&L\""`qI8p"");
    boolean boolean0 = tarArchiveEntry0.isOldGNUSparse();
    assertEquals(0L, tarArchiveEntry0.getLongGroupId());
}","/**
 * Get this entry's group id.
 *
 * @since 1.10
 * @return This entry's group id.
 */"
"@Override
public long getSize() {
    return size;
}","public void test056162() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000//"", (byte) 83);
    boolean boolean0 = tarArchiveEntry0.isOldGNUSparse();
    assertEquals(0L, tarArchiveEntry0.getSize());
}","/**
 * Get this entry's file size.
 *
 * @return This entry's file size.
 */"
"public boolean isOldGNUSparse() {
    return linkFlag == LF_GNUTYPE_SPARSE;
}","public void test056163() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000//"", (byte) 83);
    boolean boolean0 = tarArchiveEntry0.isOldGNUSparse();
    assertTrue(boolean0);
}","/**
 * Indicate if this entry is a GNU or star sparse block using the
 * oldgnu format.
 *
 * @return true if this is a sparse extension provided by GNU tar or star
 * @since 1.11
 */"
"@Deprecated
public int getGroupId() {
    return (int) (groupId & 0xffffffff);
}","public void test056164() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000//"", (byte) 83);
    boolean boolean0 = tarArchiveEntry0.isOldGNUSparse();
    assertEquals(0, tarArchiveEntry0.getGroupId());
}","/**
 * Get this entry's group id.
 *
 * @return This entry's group id.
 * @deprecated use #getLongGroupId instead as group ids can be
 * bigger than {@link Integer#MAX_VALUE}
 */"
"public int getMode() {
    return mode;
}","public void test056165() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000//"", (byte) 83);
    boolean boolean0 = tarArchiveEntry0.isOldGNUSparse();
    assertEquals(16877, tarArchiveEntry0.getMode());
}","/**
 * Get this entry's mode.
 *
 * @return This entry's mode.
 */"
"@Override
public String getName() {
    return name;
}","public void test056166() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000//"", (byte) 83);
    boolean boolean0 = tarArchiveEntry0.isOldGNUSparse();
    assertEquals(""\u0000\u0000//"", tarArchiveEntry0.getName());
}","/**
 * Get this entry's name.
 *
 * @return This entry's name.
 */"
"public int getDevMajor() {
    return devMajor;
}","public void test056167() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000//"", (byte) 83);
    boolean boolean0 = tarArchiveEntry0.isOldGNUSparse();
    assertEquals(0, tarArchiveEntry0.getDevMajor());
}","/**
 * Get this entry's major device number.
 *
 * @return This entry's major device number.
 * @since 1.4
 */"
"public int getDevMinor() {
    return devMinor;
}","public void test056168() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000//"", (byte) 83);
    boolean boolean0 = tarArchiveEntry0.isOldGNUSparse();
    assertEquals(0, tarArchiveEntry0.getDevMinor());
}","/**
 * Get this entry's minor device number.
 *
 * @return This entry's minor device number.
 * @since 1.4
 */"
"@Deprecated
public int getUserId() {
    return (int) (userId & 0xffffffff);
}","public void test057169() throws Throwable {
    MockFile mockFile0 = new MockFile(""~;YwP'q|e8v# {(3"", ""v0?>bzMh%/"");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, ""]"");
    boolean boolean0 = tarArchiveEntry0.isGNUSparse();
    assertEquals(0, tarArchiveEntry0.getUserId());
}","/**
 * Get this entry's user id.
 *
 * @return This entry's user id.
 * @deprecated use #getLongUserId instead as user ids can be
 * bigger than {@link Integer#MAX_VALUE}
 */"
"public int getDevMinor() {
    return devMinor;
}","public void test057170() throws Throwable {
    MockFile mockFile0 = new MockFile(""~;YwP'q|e8v# {(3"", ""v0?>bzMh%/"");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, ""]"");
    boolean boolean0 = tarArchiveEntry0.isGNUSparse();
    assertEquals(0, tarArchiveEntry0.getDevMinor());
}","/**
 * Get this entry's minor device number.
 *
 * @return This entry's minor device number.
 * @since 1.4
 */"
"public long getLongGroupId() {
    return groupId;
}","public void test057171() throws Throwable {
    MockFile mockFile0 = new MockFile(""~;YwP'q|e8v# {(3"", ""v0?>bzMh%/"");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, ""]"");
    boolean boolean0 = tarArchiveEntry0.isGNUSparse();
    assertEquals(0L, tarArchiveEntry0.getLongGroupId());
}","/**
 * Get this entry's group id.
 *
 * @since 1.10
 * @return This entry's group id.
 */"
"public boolean isGNUSparse() {
    return isOldGNUSparse() || isPaxGNUSparse();
}","public void test057172() throws Throwable {
    MockFile mockFile0 = new MockFile(""~;YwP'q|e8v# {(3"", ""v0?>bzMh%/"");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, ""]"");
    boolean boolean0 = tarArchiveEntry0.isGNUSparse();
    assertFalse(boolean0);
}","/**
 * Indicate if this entry is a GNU sparse block.
 *
 * @return true if this is a sparse extension provided by GNU tar
 */"
"public int getDevMajor() {
    return devMajor;
}","public void test057173() throws Throwable {
    MockFile mockFile0 = new MockFile(""~;YwP'q|e8v# {(3"", ""v0?>bzMh%/"");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, ""]"");
    boolean boolean0 = tarArchiveEntry0.isGNUSparse();
    assertEquals(0, tarArchiveEntry0.getDevMajor());
}","/**
 * Get this entry's major device number.
 *
 * @return This entry's major device number.
 * @since 1.4
 */"
"@Override
public String getName() {
    return name;
}","public void test057174() throws Throwable {
    MockFile mockFile0 = new MockFile(""~;YwP'q|e8v# {(3"", ""v0?>bzMh%/"");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, ""]"");
    boolean boolean0 = tarArchiveEntry0.isGNUSparse();
    assertEquals(""]"", tarArchiveEntry0.getName());
}","/**
 * Get this entry's name.
 *
 * @return This entry's name.
 */"
"public boolean isLink() {
    return linkFlag == LF_LINK;
}","public void test058175() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""EgTf$"", true);
    tarArchiveEntry0.isPaxGNUSparse();
    assertFalse(tarArchiveEntry0.isLink());
}","/**
 * Check if this is a link entry.
 *
 * @since 1.2
 * @return whether this is a link entry
 */"
"public int getMode() {
    return mode;
}","public void test058176() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""EgTf$"", true);
    tarArchiveEntry0.isPaxGNUSparse();
    assertEquals(33188, tarArchiveEntry0.getMode());
}","/**
 * Get this entry's mode.
 *
 * @return This entry's mode.
 */"
"public int getDevMinor() {
    return devMinor;
}","public void test058177() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""EgTf$"", true);
    tarArchiveEntry0.isPaxGNUSparse();
    assertEquals(0, tarArchiveEntry0.getDevMinor());
}","/**
 * Get this entry's minor device number.
 *
 * @return This entry's minor device number.
 * @since 1.4
 */"
"@Override
public String getName() {
    return name;
}","public void test058178() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""EgTf$"", true);
    tarArchiveEntry0.isPaxGNUSparse();
    assertEquals(""EgTf$"", tarArchiveEntry0.getName());
}","/**
 * Get this entry's name.
 *
 * @return This entry's name.
 */"
"@Deprecated
public int getGroupId() {
    return (int) (groupId & 0xffffffff);
}","public void test058179() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""EgTf$"", true);
    tarArchiveEntry0.isPaxGNUSparse();
    assertEquals(0, tarArchiveEntry0.getGroupId());
}","/**
 * Get this entry's group id.
 *
 * @return This entry's group id.
 * @deprecated use #getLongGroupId instead as group ids can be
 * bigger than {@link Integer#MAX_VALUE}
 */"
"@Override
public boolean isDirectory() {
    if (file != null) {
        return file.isDirectory();
    }
    if (linkFlag == LF_DIR) {
        return true;
    }
    if (getName().endsWith(""/"")) {
        return true;
    }
    return false;
}","public void test058180() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""EgTf$"", true);
    tarArchiveEntry0.isPaxGNUSparse();
    assertFalse(tarArchiveEntry0.isDirectory());
}","/**
 * Return whether or not this entry represents a directory.
 *
 * @return True if this entry is a directory.
 */"
"public int getDevMajor() {
    return devMajor;
}","public void test058181() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""EgTf$"", true);
    tarArchiveEntry0.isPaxGNUSparse();
    assertEquals(0, tarArchiveEntry0.getDevMajor());
}","/**
 * Get this entry's major device number.
 *
 * @return This entry's major device number.
 * @since 1.4
 */"
"@Override
public long getSize() {
    return size;
}","public void test058182() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""EgTf$"", true);
    tarArchiveEntry0.isPaxGNUSparse();
    assertEquals(0L, tarArchiveEntry0.getSize());
}","/**
 * Get this entry's file size.
 *
 * @return This entry's file size.
 */"
"public long getLongUserId() {
    return userId;
}","public void test058183() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""EgTf$"", true);
    tarArchiveEntry0.isPaxGNUSparse();
    assertEquals(0L, tarArchiveEntry0.getLongUserId());
}","/**
 * Get this entry's user id.
 *
 * @return This entry's user id.
 * @since 1.10
 */"
"public int getMode() {
    return mode;
}","public void test059185() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""ustar "", (byte) 76, false);
    Date date0 = tarArchiveEntry0.getModTime();
    assertEquals(33188, tarArchiveEntry0.getMode());
}","/**
 * Get this entry's mode.
 *
 * @return This entry's mode.
 */"
"public boolean isGNULongNameEntry() {
    return linkFlag == LF_GNUTYPE_LONGNAME;
}","public void test059186() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""ustar "", (byte) 76, false);
    Date date0 = tarArchiveEntry0.getModTime();
    assertTrue(tarArchiveEntry0.isGNULongNameEntry());
}","/**
 * Indicate if this entry is a GNU long name block
 *
 * @return true if this is a long name extension provided by GNU tar
 */"
"public int getDevMinor() {
    return devMinor;
}","public void test059187() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""ustar "", (byte) 76, false);
    Date date0 = tarArchiveEntry0.getModTime();
    assertEquals(0, tarArchiveEntry0.getDevMinor());
}","/**
 * Get this entry's minor device number.
 *
 * @return This entry's minor device number.
 * @since 1.4
 */"
"@Override
public String getName() {
    return name;
}","public void test059188() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""ustar "", (byte) 76, false);
    Date date0 = tarArchiveEntry0.getModTime();
    assertEquals(""ustar "", tarArchiveEntry0.getName());
}","/**
 * Get this entry's name.
 *
 * @return This entry's name.
 */"
"@Deprecated
public int getGroupId() {
    return (int) (groupId & 0xffffffff);
}","public void test059189() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""ustar "", (byte) 76, false);
    Date date0 = tarArchiveEntry0.getModTime();
    assertEquals(0, tarArchiveEntry0.getGroupId());
}","/**
 * Get this entry's group id.
 *
 * @return This entry's group id.
 * @deprecated use #getLongGroupId instead as group ids can be
 * bigger than {@link Integer#MAX_VALUE}
 */"
"public long getLongUserId() {
    return userId;
}","public void test059190() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""ustar "", (byte) 76, false);
    Date date0 = tarArchiveEntry0.getModTime();
    assertEquals(0L, tarArchiveEntry0.getLongUserId());
}","/**
 * Get this entry's user id.
 *
 * @return This entry's user id.
 * @since 1.10
 */"
"@Deprecated
public int getUserId() {
    return (int) (userId & 0xffffffff);
}","public void test060191() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    tarArchiveEntry0.setUserId(1L);
    assertEquals(1, tarArchiveEntry0.getUserId());
}","/**
 * Get this entry's user id.
 *
 * @return This entry's user id.
 * @deprecated use #getLongUserId instead as user ids can be
 * bigger than {@link Integer#MAX_VALUE}
 */"
"public void parseTarHeader(final byte[] header) {
    try {
        parseTarHeader(header, TarUtils.DEFAULT_ENCODING);
    } catch (final IOException ex) {
        try {
            parseTarHeader(header, TarUtils.DEFAULT_ENCODING, true);
        } catch (final IOException ex2) {
            // not really possible
            throw new RuntimeException(ex2);
        }
    }
}","public void test061192() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""cu(%MZ>C"");
    byte[] byteArray0 = new byte[5];
    // Undeclared exception!
    try {
        tarArchiveEntry0.parseTarHeader(byteArray0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 99
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarUtils"", e);
    }
}","/**
 * Parse an entry's header information from a header buffer.
 *
 * @param header The tar entry header buffer to get information from.
 * @throws IllegalArgumentException if any of the numeric fields have an invalid format
 */"
"public int getDevMinor() {
    return devMinor;
}","public void test062193() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""TmT"");
    tarArchiveEntry0.isStarSparse();
    assertEquals(0, tarArchiveEntry0.getDevMinor());
}","/**
 * Get this entry's minor device number.
 *
 * @return This entry's minor device number.
 * @since 1.4
 */"
"public int getMode() {
    return mode;
}","public void test062194() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""TmT"");
    tarArchiveEntry0.isStarSparse();
    assertEquals(33188, tarArchiveEntry0.getMode());
}","/**
 * Get this entry's mode.
 *
 * @return This entry's mode.
 */"
"@Override
public String getName() {
    return name;
}","public void test062195() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""TmT"");
    tarArchiveEntry0.isStarSparse();
    assertEquals(""TmT"", tarArchiveEntry0.getName());
}","/**
 * Get this entry's name.
 *
 * @return This entry's name.
 */"
"@Override
public boolean isDirectory() {
    if (file != null) {
        return file.isDirectory();
    }
    if (linkFlag == LF_DIR) {
        return true;
    }
    if (getName().endsWith(""/"")) {
        return true;
    }
    return false;
}","public void test062196() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""TmT"");
    tarArchiveEntry0.isStarSparse();
    assertFalse(tarArchiveEntry0.isDirectory());
}","/**
 * Return whether or not this entry represents a directory.
 *
 * @return True if this entry is a directory.
 */"
"public long getLongGroupId() {
    return groupId;
}","public void test062197() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""TmT"");
    tarArchiveEntry0.isStarSparse();
    assertEquals(0L, tarArchiveEntry0.getLongGroupId());
}","/**
 * Get this entry's group id.
 *
 * @since 1.10
 * @return This entry's group id.
 */"
"public long getLongUserId() {
    return userId;
}","public void test062198() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""TmT"");
    tarArchiveEntry0.isStarSparse();
    assertEquals(0L, tarArchiveEntry0.getLongUserId());
}","/**
 * Get this entry's user id.
 *
 * @return This entry's user id.
 * @since 1.10
 */"
"public String getGroupName() {
    return groupName;
}","public void test063199() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""");
    tarArchiveEntry0.setGroupName(""0\u0000"");
    assertEquals(""0\u0000"", tarArchiveEntry0.getGroupName());
}","/**
 * Get this entry's group name.
 *
 * @return This entry's group name.
 */"
"public void parseTarHeader(final byte[] header, final ZipEncoding encoding) throws IOException {
    parseTarHeader(header, encoding, false);
}","public void test064200() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""r&5L"", (byte) 2, true);
    ZipEncoding zipEncoding0 = mock(ZipEncoding.class, new ViolatedAssumptionAnswer());
    // Undeclared exception!
    try {
        tarArchiveEntry0.parseTarHeader((byte[]) null, zipEncoding0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarUtils"", e);
    }
}","/**
 * Parse an entry's header information from a header buffer.
 *
 * @param header The tar entry header buffer to get information from.
 * @param encoding encoding to use for file names
 * @since 1.4
 * @throws IllegalArgumentException if any of the numeric fields
 * have an invalid format
 * @throws IOException on error
 */"
"public int getDevMajor() {
    return devMajor;
}","public void test065201() throws Throwable {
    File file0 = MockFile.createTempFile(""f.22n?U7cyST-"", ""f.22n?U7cyST-"");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
    tarArchiveEntry0.getDirectoryEntries();
    assertEquals(0, tarArchiveEntry0.getDevMajor());
}","/**
 * Get this entry's major device number.
 *
 * @return This entry's major device number.
 * @since 1.4
 */"
"public long getLongUserId() {
    return userId;
}","public void test065202() throws Throwable {
    File file0 = MockFile.createTempFile(""f.22n?U7cyST-"", ""f.22n?U7cyST-"");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
    tarArchiveEntry0.getDirectoryEntries();
    assertEquals(0L, tarArchiveEntry0.getLongUserId());
}","/**
 * Get this entry's user id.
 *
 * @return This entry's user id.
 * @since 1.10
 */"
"@Override
public String getName() {
    return name;
}","public void test065203() throws Throwable {
    File file0 = MockFile.createTempFile(""f.22n?U7cyST-"", ""f.22n?U7cyST-"");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
    tarArchiveEntry0.getDirectoryEntries();
    assertEquals(""var/folders/vv/c7q6vm8920vc7d5p_87011w40000gn/T/f.22n?U7cyST-0f.22n?U7cyST-"", tarArchiveEntry0.getName());
}","/**
 * Get this entry's name.
 *
 * @return This entry's name.
 */"
"public int getDevMinor() {
    return devMinor;
}","public void test065204() throws Throwable {
    File file0 = MockFile.createTempFile(""f.22n?U7cyST-"", ""f.22n?U7cyST-"");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
    tarArchiveEntry0.getDirectoryEntries();
    assertEquals(0, tarArchiveEntry0.getDevMinor());
}","/**
 * Get this entry's minor device number.
 *
 * @return This entry's minor device number.
 * @since 1.4
 */"
"public long getLongGroupId() {
    return groupId;
}","public void test065205() throws Throwable {
    File file0 = MockFile.createTempFile(""f.22n?U7cyST-"", ""f.22n?U7cyST-"");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
    tarArchiveEntry0.getDirectoryEntries();
    assertEquals(0L, tarArchiveEntry0.getLongGroupId());
}","/**
 * Get this entry's group id.
 *
 * @since 1.10
 * @return This entry's group id.
 */"
"public boolean isGNULongLinkEntry() {
    return linkFlag == LF_GNUTYPE_LONGLINK;
}","public void test066206() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    tarArchiveEntry0.getDirectoryEntries();
    assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
}","/**
 * Indicate if this entry is a GNU long linkname block
 *
 * @return true if this is a long name extension provided by GNU tar
 */"
"@Deprecated
public int getGroupId() {
    return (int) (groupId & 0xffffffff);
}","public void test066207() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    tarArchiveEntry0.getDirectoryEntries();
    assertEquals(0, tarArchiveEntry0.getGroupId());
}","/**
 * Get this entry's group id.
 *
 * @return This entry's group id.
 * @deprecated use #getLongGroupId instead as group ids can be
 * bigger than {@link Integer#MAX_VALUE}
 */"
"public boolean isGlobalPaxHeader() {
    return linkFlag == LF_PAX_GLOBAL_EXTENDED_HEADER;
}","public void test066208() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    tarArchiveEntry0.getDirectoryEntries();
    assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
}","/**
 * Check if this is a Pax header.
 *
 * @return {@code true} if this is a Pax header.
 *
 * @since 1.1
 */"
"public boolean isPaxHeader() {
    return linkFlag == LF_PAX_EXTENDED_HEADER_LC || linkFlag == LF_PAX_EXTENDED_HEADER_UC;
}","public void test066209() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    tarArchiveEntry0.getDirectoryEntries();
    assertFalse(tarArchiveEntry0.isPaxHeader());
}","/**
 * Check if this is a Pax header.
 *
 * @return {@code true} if this is a Pax header.
 *
 * @since 1.1
 */"
"public boolean isFIFO() {
    return linkFlag == LF_FIFO;
}","public void test066210() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    tarArchiveEntry0.getDirectoryEntries();
    assertFalse(tarArchiveEntry0.isFIFO());
}","/**
 * Check if this is a FIFO (pipe) entry.
 *
 * @since 1.2
 * @return whether this is a FIFO entry
 */"
"public int getMode() {
    return mode;
}","public void test066211() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    tarArchiveEntry0.getDirectoryEntries();
    assertEquals(33188, tarArchiveEntry0.getMode());
}","/**
 * Get this entry's mode.
 *
 * @return This entry's mode.
 */"
"public boolean isSparse() {
    return isGNUSparse() || isStarSparse();
}","public void test066212() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    tarArchiveEntry0.getDirectoryEntries();
    assertFalse(tarArchiveEntry0.isSparse());
}","/**
 * Check whether this is a sparse entry.
 *
 * @return whether this is a sparse entry
 * @since 1.11
 */"
"@Override
public String getName() {
    return name;
}","public void test066213() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    tarArchiveEntry0.getDirectoryEntries();
    assertEquals(""AJeNewn|eBElUQ!="", tarArchiveEntry0.getName());
}","/**
 * Get this entry's name.
 *
 * @return This entry's name.
 */"
"public boolean isSparse() {
    return isGNUSparse() || isStarSparse();
}","public void test067214() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""US-ASCII"", (byte) 124);
    assertFalse(tarArchiveEntry0.isSparse());
}","/**
 * Check whether this is a sparse entry.
 *
 * @return whether this is a sparse entry
 * @since 1.11
 */"
"public boolean isLink() {
    return linkFlag == LF_LINK;
}","public void test067215() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""US-ASCII"", (byte) 124);
    HashMap<String, String> hashMap0 = new HashMap<String, String>();
    tarArchiveEntry0.fillStarSparseData(hashMap0);
    tarArchiveEntry0.isSparse();
    assertFalse(tarArchiveEntry0.isLink());
}","/**
 * Check if this is a link entry.
 *
 * @since 1.2
 * @return whether this is a link entry
 */"
"public boolean isGNULongNameEntry() {
    return linkFlag == LF_GNUTYPE_LONGNAME;
}","public void test068216() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    boolean boolean0 = tarArchiveEntry0.isFIFO();
    assertFalse(tarArchiveEntry0.isGNULongNameEntry());
}","/**
 * Indicate if this entry is a GNU long name block
 *
 * @return true if this is a long name extension provided by GNU tar
 */"
"public int getDevMinor() {
    return devMinor;
}","public void test068217() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    boolean boolean0 = tarArchiveEntry0.isFIFO();
    assertEquals(0, tarArchiveEntry0.getDevMinor());
}","/**
 * Get this entry's minor device number.
 *
 * @return This entry's minor device number.
 * @since 1.4
 */"
"public boolean isCharacterDevice() {
    return linkFlag == LF_CHR;
}","public void test068218() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    boolean boolean0 = tarArchiveEntry0.isFIFO();
    assertFalse(tarArchiveEntry0.isCharacterDevice());
}","/**
 * Check if this is a character device entry.
 *
 * @since 1.2
 * @return whether this is a character device
 */"
"@Override
public String getName() {
    return name;
}","public void test068219() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    boolean boolean0 = tarArchiveEntry0.isFIFO();
    assertEquals(""!S"", tarArchiveEntry0.getName());
}","/**
 * Get this entry's name.
 *
 * @return This entry's name.
 */"
"public boolean isPaxHeader() {
    return linkFlag == LF_PAX_EXTENDED_HEADER_LC || linkFlag == LF_PAX_EXTENDED_HEADER_UC;
}","public void test068220() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    boolean boolean0 = tarArchiveEntry0.isFIFO();
    assertFalse(tarArchiveEntry0.isPaxHeader());
}","/**
 * Check if this is a Pax header.
 *
 * @return {@code true} if this is a Pax header.
 *
 * @since 1.1
 */"
"@Override
public long getSize() {
    return size;
}","public void test068221() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    boolean boolean0 = tarArchiveEntry0.isFIFO();
    assertEquals(0L, tarArchiveEntry0.getSize());
}","/**
 * Get this entry's file size.
 *
 * @return This entry's file size.
 */"
"public boolean isSparse() {
    return isGNUSparse() || isStarSparse();
}","public void test068222() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    boolean boolean0 = tarArchiveEntry0.isFIFO();
    assertFalse(tarArchiveEntry0.isSparse());
}","/**
 * Check whether this is a sparse entry.
 *
 * @return whether this is a sparse entry
 * @since 1.11
 */"
"public boolean isGNULongLinkEntry() {
    return linkFlag == LF_GNUTYPE_LONGLINK;
}","public void test068223() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    boolean boolean0 = tarArchiveEntry0.isFIFO();
    assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
}","/**
 * Indicate if this entry is a GNU long linkname block
 *
 * @return true if this is a long name extension provided by GNU tar
 */"
"public boolean isFIFO() {
    return linkFlag == LF_FIFO;
}","public void test068224() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    boolean boolean0 = tarArchiveEntry0.isFIFO();
    assertFalse(boolean0);
}","/**
 * Check if this is a FIFO (pipe) entry.
 *
 * @since 1.2
 * @return whether this is a FIFO entry
 */"
"@Override
public boolean isDirectory() {
    if (file != null) {
        return file.isDirectory();
    }
    if (linkFlag == LF_DIR) {
        return true;
    }
    if (getName().endsWith(""/"")) {
        return true;
    }
    return false;
}","public void test068225() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    boolean boolean0 = tarArchiveEntry0.isFIFO();
    assertFalse(tarArchiveEntry0.isDirectory());
}","/**
 * Return whether or not this entry represents a directory.
 *
 * @return True if this entry is a directory.
 */"
"public long getLongGroupId() {
    return groupId;
}","public void test068226() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    boolean boolean0 = tarArchiveEntry0.isFIFO();
    assertEquals(0L, tarArchiveEntry0.getLongGroupId());
}","/**
 * Get this entry's group id.
 *
 * @since 1.10
 * @return This entry's group id.
 */"
"public int getMode() {
    return mode;
}","public void test068227() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    boolean boolean0 = tarArchiveEntry0.isFIFO();
    assertEquals(33188, tarArchiveEntry0.getMode());
}","/**
 * Get this entry's mode.
 *
 * @return This entry's mode.
 */"
"public int getDevMajor() {
    return devMajor;
}","public void test068228() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    boolean boolean0 = tarArchiveEntry0.isFIFO();
    assertEquals(0, tarArchiveEntry0.getDevMajor());
}","/**
 * Get this entry's major device number.
 *
 * @return This entry's major device number.
 * @since 1.4
 */"
"public boolean isSymbolicLink() {
    return linkFlag == LF_SYMLINK;
}","public void test069229() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    boolean boolean0 = tarArchiveEntry0.isBlockDevice();
    assertFalse(tarArchiveEntry0.isSymbolicLink());
}","/**
 * Check if this is a symbolic link entry.
 *
 * @since 1.2
 * @return whether this is a symbolic link
 */"
"public int getMode() {
    return mode;
}","public void test069230() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    boolean boolean0 = tarArchiveEntry0.isBlockDevice();
    assertEquals(33188, tarArchiveEntry0.getMode());
}","/**
 * Get this entry's mode.
 *
 * @return This entry's mode.
 */"
"public boolean isGlobalPaxHeader() {
    return linkFlag == LF_PAX_GLOBAL_EXTENDED_HEADER;
}","public void test069231() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    boolean boolean0 = tarArchiveEntry0.isBlockDevice();
    assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
}","/**
 * Check if this is a Pax header.
 *
 * @return {@code true} if this is a Pax header.
 *
 * @since 1.1
 */"
"public boolean isLink() {
    return linkFlag == LF_LINK;
}","public void test069232() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    boolean boolean0 = tarArchiveEntry0.isBlockDevice();
    assertFalse(tarArchiveEntry0.isLink());
}","/**
 * Check if this is a link entry.
 *
 * @since 1.2
 * @return whether this is a link entry
 */"
"public boolean isBlockDevice() {
    return linkFlag == LF_BLK;
}","public void test069233() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    boolean boolean0 = tarArchiveEntry0.isBlockDevice();
    assertFalse(boolean0);
}","/**
 * Check if this is a block device entry.
 *
 * @since 1.2
 * @return whether this is a block device
 */"
"@Deprecated
public int getGroupId() {
    return (int) (groupId & 0xffffffff);
}","public void test069234() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    boolean boolean0 = tarArchiveEntry0.isBlockDevice();
    assertEquals(0, tarArchiveEntry0.getGroupId());
}","/**
 * Get this entry's group id.
 *
 * @return This entry's group id.
 * @deprecated use #getLongGroupId instead as group ids can be
 * bigger than {@link Integer#MAX_VALUE}
 */"
"@Deprecated
public int getUserId() {
    return (int) (userId & 0xffffffff);
}","public void test069235() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    boolean boolean0 = tarArchiveEntry0.isBlockDevice();
    assertEquals(0, tarArchiveEntry0.getUserId());
}","/**
 * Get this entry's user id.
 *
 * @return This entry's user id.
 * @deprecated use #getLongUserId instead as user ids can be
 * bigger than {@link Integer#MAX_VALUE}
 */"
"@Override
public boolean isDirectory() {
    if (file != null) {
        return file.isDirectory();
    }
    if (linkFlag == LF_DIR) {
        return true;
    }
    if (getName().endsWith(""/"")) {
        return true;
    }
    return false;
}","public void test069236() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    boolean boolean0 = tarArchiveEntry0.isBlockDevice();
    assertFalse(tarArchiveEntry0.isDirectory());
}","/**
 * Return whether or not this entry represents a directory.
 *
 * @return True if this entry is a directory.
 */"
"@Override
public String getName() {
    return name;
}","public void test069237() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    boolean boolean0 = tarArchiveEntry0.isBlockDevice();
    assertEquals(""!S"", tarArchiveEntry0.getName());
}","/**
 * Get this entry's name.
 *
 * @return This entry's name.
 */"
"@Override
public String getName() {
    return name;
}","public void test070238() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""US-ASCII"", (byte) 124);
    boolean boolean0 = tarArchiveEntry0.isCharacterDevice();
    assertEquals(""US-ASCII"", tarArchiveEntry0.getName());
}","/**
 * Get this entry's name.
 *
 * @return This entry's name.
 */"
"public boolean isGlobalPaxHeader() {
    return linkFlag == LF_PAX_GLOBAL_EXTENDED_HEADER;
}","public void test070239() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""US-ASCII"", (byte) 124);
    boolean boolean0 = tarArchiveEntry0.isCharacterDevice();
    assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
}","/**
 * Check if this is a Pax header.
 *
 * @return {@code true} if this is a Pax header.
 *
 * @since 1.1
 */"
"public int getMode() {
    return mode;
}","public void test070240() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""US-ASCII"", (byte) 124);
    boolean boolean0 = tarArchiveEntry0.isCharacterDevice();
    assertEquals(33188, tarArchiveEntry0.getMode());
}","/**
 * Get this entry's mode.
 *
 * @return This entry's mode.
 */"
"public boolean isBlockDevice() {
    return linkFlag == LF_BLK;
}","public void test070241() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""US-ASCII"", (byte) 124);
    boolean boolean0 = tarArchiveEntry0.isCharacterDevice();
    assertFalse(tarArchiveEntry0.isBlockDevice());
}","/**
 * Check if this is a block device entry.
 *
 * @since 1.2
 * @return whether this is a block device
 */"
"public int getDevMinor() {
    return devMinor;
}","public void test070242() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""US-ASCII"", (byte) 124);
    boolean boolean0 = tarArchiveEntry0.isCharacterDevice();
    assertEquals(0, tarArchiveEntry0.getDevMinor());
}","/**
 * Get this entry's minor device number.
 *
 * @return This entry's minor device number.
 * @since 1.4
 */"
"public boolean isCharacterDevice() {
    return linkFlag == LF_CHR;
}","public void test070243() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""US-ASCII"", (byte) 124);
    boolean boolean0 = tarArchiveEntry0.isCharacterDevice();
    assertFalse(boolean0);
}","/**
 * Check if this is a character device entry.
 *
 * @since 1.2
 * @return whether this is a character device
 */"
"@Deprecated
public int getGroupId() {
    return (int) (groupId & 0xffffffff);
}","public void test070244() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""US-ASCII"", (byte) 124);
    boolean boolean0 = tarArchiveEntry0.isCharacterDevice();
    assertEquals(0, tarArchiveEntry0.getGroupId());
}","/**
 * Get this entry's group id.
 *
 * @return This entry's group id.
 * @deprecated use #getLongGroupId instead as group ids can be
 * bigger than {@link Integer#MAX_VALUE}
 */"
"@Override
public long getSize() {
    return size;
}","public void test070245() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""US-ASCII"", (byte) 124);
    boolean boolean0 = tarArchiveEntry0.isCharacterDevice();
    assertEquals(0L, tarArchiveEntry0.getSize());
}","/**
 * Get this entry's file size.
 *
 * @return This entry's file size.
 */"
"@Override
public long getSize() {
    return size;
}","public void test071246() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""+ c\""3u"", (byte) 49, false);
    boolean boolean0 = tarArchiveEntry0.isLink();
    assertEquals(0L, tarArchiveEntry0.getSize());
}","/**
 * Get this entry's file size.
 *
 * @return This entry's file size.
 */"
"@Override
public String getName() {
    return name;
}","public void test071247() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""+ c\""3u"", (byte) 49, false);
    boolean boolean0 = tarArchiveEntry0.isLink();
    assertEquals(""+ c\""3u"", tarArchiveEntry0.getName());
}","/**
 * Get this entry's name.
 *
 * @return This entry's name.
 */"
"@Deprecated
public int getGroupId() {
    return (int) (groupId & 0xffffffff);
}","public void test071248() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""+ c\""3u"", (byte) 49, false);
    boolean boolean0 = tarArchiveEntry0.isLink();
    assertEquals(0, tarArchiveEntry0.getGroupId());
}","/**
 * Get this entry's group id.
 *
 * @return This entry's group id.
 * @deprecated use #getLongGroupId instead as group ids can be
 * bigger than {@link Integer#MAX_VALUE}
 */"
"public int getMode() {
    return mode;
}","public void test071249() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""+ c\""3u"", (byte) 49, false);
    boolean boolean0 = tarArchiveEntry0.isLink();
    assertEquals(33188, tarArchiveEntry0.getMode());
}","/**
 * Get this entry's mode.
 *
 * @return This entry's mode.
 */"
"public boolean isLink() {
    return linkFlag == LF_LINK;
}","public void test071250() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""+ c\""3u"", (byte) 49, false);
    boolean boolean0 = tarArchiveEntry0.isLink();
    assertTrue(boolean0);
}","/**
 * Check if this is a link entry.
 *
 * @since 1.2
 * @return whether this is a link entry
 */"
"public int getDevMajor() {
    return devMajor;
}","public void test072251() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""SCHILY.realsize"");
    boolean boolean0 = tarArchiveEntry0.isLink();
    assertEquals(0, tarArchiveEntry0.getDevMajor());
}","/**
 * Get this entry's major device number.
 *
 * @return This entry's major device number.
 * @since 1.4
 */"
"@Override
public long getSize() {
    return size;
}","public void test072252() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""SCHILY.realsize"");
    boolean boolean0 = tarArchiveEntry0.isLink();
    assertEquals(0L, tarArchiveEntry0.getSize());
}","/**
 * Get this entry's file size.
 *
 * @return This entry's file size.
 */"
"@Override
public String getName() {
    return name;
}","public void test072253() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""SCHILY.realsize"");
    boolean boolean0 = tarArchiveEntry0.isLink();
    assertEquals(""SCHILY.realsize"", tarArchiveEntry0.getName());
}","/**
 * Get this entry's name.
 *
 * @return This entry's name.
 */"
"public int getMode() {
    return mode;
}","public void test072254() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""SCHILY.realsize"");
    boolean boolean0 = tarArchiveEntry0.isLink();
    assertEquals(33188, tarArchiveEntry0.getMode());
}","/**
 * Get this entry's mode.
 *
 * @return This entry's mode.
 */"
"public boolean isLink() {
    return linkFlag == LF_LINK;
}","public void test072255() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""SCHILY.realsize"");
    boolean boolean0 = tarArchiveEntry0.isLink();
    assertFalse(boolean0);
}","/**
 * Check if this is a link entry.
 *
 * @since 1.2
 * @return whether this is a link entry
 */"
"public int getDevMinor() {
    return devMinor;
}","public void test072256() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""SCHILY.realsize"");
    boolean boolean0 = tarArchiveEntry0.isLink();
    assertEquals(0, tarArchiveEntry0.getDevMinor());
}","/**
 * Get this entry's minor device number.
 *
 * @return This entry's minor device number.
 * @since 1.4
 */"
"public boolean isCharacterDevice() {
    return linkFlag == LF_CHR;
}","public void test073257() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    boolean boolean0 = tarArchiveEntry0.isSymbolicLink();
    assertFalse(tarArchiveEntry0.isCharacterDevice());
}","/**
 * Check if this is a character device entry.
 *
 * @since 1.2
 * @return whether this is a character device
 */"
"@Override
public String getName() {
    return name;
}","public void test073258() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    boolean boolean0 = tarArchiveEntry0.isSymbolicLink();
    assertEquals(""AJeNewn|eBElUQ!="", tarArchiveEntry0.getName());
}","/**
 * Get this entry's name.
 *
 * @return This entry's name.
 */"
"@Override
public long getSize() {
    return size;
}","public void test073259() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    boolean boolean0 = tarArchiveEntry0.isSymbolicLink();
    assertEquals(0L, tarArchiveEntry0.getSize());
}","/**
 * Get this entry's file size.
 *
 * @return This entry's file size.
 */"
"@Deprecated
public int getGroupId() {
    return (int) (groupId & 0xffffffff);
}","public void test073260() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    boolean boolean0 = tarArchiveEntry0.isSymbolicLink();
    assertEquals(0, tarArchiveEntry0.getGroupId());
}","/**
 * Get this entry's group id.
 *
 * @return This entry's group id.
 * @deprecated use #getLongGroupId instead as group ids can be
 * bigger than {@link Integer#MAX_VALUE}
 */"
"public boolean isSymbolicLink() {
    return linkFlag == LF_SYMLINK;
}","public void test073261() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    boolean boolean0 = tarArchiveEntry0.isSymbolicLink();
    assertFalse(boolean0);
}","/**
 * Check if this is a symbolic link entry.
 *
 * @since 1.2
 * @return whether this is a symbolic link
 */"
"public long getLongUserId() {
    return userId;
}","public void test073262() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    boolean boolean0 = tarArchiveEntry0.isSymbolicLink();
    assertEquals(0L, tarArchiveEntry0.getLongUserId());
}","/**
 * Get this entry's user id.
 *
 * @return This entry's user id.
 * @since 1.10
 */"
"public boolean isGNULongNameEntry() {
    return linkFlag == LF_GNUTYPE_LONGNAME;
}","public void test073263() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    boolean boolean0 = tarArchiveEntry0.isSymbolicLink();
    assertFalse(tarArchiveEntry0.isGNULongNameEntry());
}","/**
 * Indicate if this entry is a GNU long name block
 *
 * @return true if this is a long name extension provided by GNU tar
 */"
"public int getMode() {
    return mode;
}","public void test073264() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    boolean boolean0 = tarArchiveEntry0.isSymbolicLink();
    assertEquals(33188, tarArchiveEntry0.getMode());
}","/**
 * Get this entry's mode.
 *
 * @return This entry's mode.
 */"
"public boolean isBlockDevice() {
    return linkFlag == LF_BLK;
}","public void test074265() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000/"");
    boolean boolean0 = tarArchiveEntry0.isFile();
    assertFalse(tarArchiveEntry0.isBlockDevice());
}","/**
 * Check if this is a block device entry.
 *
 * @since 1.2
 * @return whether this is a block device
 */"
"public long getLongUserId() {
    return userId;
}","public void test074266() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000/"");
    boolean boolean0 = tarArchiveEntry0.isFile();
    assertEquals(0L, tarArchiveEntry0.getLongUserId());
}","/**
 * Get this entry's user id.
 *
 * @return This entry's user id.
 * @since 1.10
 */"
"@Override
public long getSize() {
    return size;
}","public void test074267() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000/"");
    boolean boolean0 = tarArchiveEntry0.isFile();
    assertEquals(0L, tarArchiveEntry0.getSize());
}","/**
 * Get this entry's file size.
 *
 * @return This entry's file size.
 */"
"public boolean isFile() {
    if (file != null) {
        return file.isFile();
    }
    if (linkFlag == LF_OLDNORM || linkFlag == LF_NORMAL) {
        return true;
    }
    return !getName().endsWith(""/"");
}","public void test074268() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000/"");
    boolean boolean0 = tarArchiveEntry0.isFile();
    assertFalse(boolean0);
}","/**
 * Check if this is a ""normal file""
 *
 * @since 1.2
 * @return whether this is a ""normal file""
 */"
"public int getMode() {
    return mode;
}","public void test074269() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000/"");
    boolean boolean0 = tarArchiveEntry0.isFile();
    assertEquals(16877, tarArchiveEntry0.getMode());
}","/**
 * Get this entry's mode.
 *
 * @return This entry's mode.
 */"
"public int getDevMajor() {
    return devMajor;
}","public void test074270() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000/"");
    boolean boolean0 = tarArchiveEntry0.isFile();
    assertEquals(0, tarArchiveEntry0.getDevMajor());
}","/**
 * Get this entry's major device number.
 *
 * @return This entry's major device number.
 * @since 1.4
 */"
"public boolean isFIFO() {
    return linkFlag == LF_FIFO;
}","public void test074271() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000/"");
    boolean boolean0 = tarArchiveEntry0.isFile();
    assertFalse(tarArchiveEntry0.isFIFO());
}","/**
 * Check if this is a FIFO (pipe) entry.
 *
 * @since 1.2
 * @return whether this is a FIFO entry
 */"
"public long getLongGroupId() {
    return groupId;
}","public void test074272() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000/"");
    boolean boolean0 = tarArchiveEntry0.isFile();
    assertEquals(0L, tarArchiveEntry0.getLongGroupId());
}","/**
 * Get this entry's group id.
 *
 * @since 1.10
 * @return This entry's group id.
 */"
"public int getMode() {
    return mode;
}","public void test075273() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", true);
    tarArchiveEntry0.isFile();
    assertEquals(33188, tarArchiveEntry0.getMode());
}","/**
 * Get this entry's mode.
 *
 * @return This entry's mode.
 */"
"public int getDevMajor() {
    return devMajor;
}","public void test075274() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", true);
    tarArchiveEntry0.isFile();
    assertEquals(0, tarArchiveEntry0.getDevMajor());
}","/**
 * Get this entry's major device number.
 *
 * @return This entry's major device number.
 * @since 1.4
 */"
"@Override
public String getName() {
    return name;
}","public void test075275() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", true);
    tarArchiveEntry0.isFile();
    assertEquals("""", tarArchiveEntry0.getName());
}","/**
 * Get this entry's name.
 *
 * @return This entry's name.
 */"
"@Deprecated
public int getGroupId() {
    return (int) (groupId & 0xffffffff);
}","public void test075276() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", true);
    tarArchiveEntry0.isFile();
    assertEquals(0, tarArchiveEntry0.getGroupId());
}","/**
 * Get this entry's group id.
 *
 * @return This entry's group id.
 * @deprecated use #getLongGroupId instead as group ids can be
 * bigger than {@link Integer#MAX_VALUE}
 */"
"@Override
public long getSize() {
    return size;
}","public void test075277() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", true);
    tarArchiveEntry0.isFile();
    assertEquals(0L, tarArchiveEntry0.getSize());
}","/**
 * Get this entry's file size.
 *
 * @return This entry's file size.
 */"
"@Deprecated
public int getUserId() {
    return (int) (userId & 0xffffffff);
}","public void test075278() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", true);
    tarArchiveEntry0.isFile();
    assertEquals(0, tarArchiveEntry0.getUserId());
}","/**
 * Get this entry's user id.
 *
 * @return This entry's user id.
 * @deprecated use #getLongUserId instead as user ids can be
 * bigger than {@link Integer#MAX_VALUE}
 */"
"@Override
public boolean isDirectory() {
    if (file != null) {
        return file.isDirectory();
    }
    if (linkFlag == LF_DIR) {
        return true;
    }
    if (getName().endsWith(""/"")) {
        return true;
    }
    return false;
}","public void test075279() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", true);
    tarArchiveEntry0.isFile();
    assertFalse(tarArchiveEntry0.isDirectory());
}","/**
 * Return whether or not this entry represents a directory.
 *
 * @return True if this entry is a directory.
 */"
"public boolean isLink() {
    return linkFlag == LF_LINK;
}","public void test076280() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) 0, false);
    tarArchiveEntry0.isFile();
    assertFalse(tarArchiveEntry0.isLink());
}","/**
 * Check if this is a link entry.
 *
 * @since 1.2
 * @return whether this is a link entry
 */"
"public boolean isGNULongNameEntry() {
    return linkFlag == LF_GNUTYPE_LONGNAME;
}","public void test076281() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) 0, false);
    tarArchiveEntry0.isFile();
    assertFalse(tarArchiveEntry0.isGNULongNameEntry());
}","/**
 * Indicate if this entry is a GNU long name block
 *
 * @return true if this is a long name extension provided by GNU tar
 */"
"public int getDevMajor() {
    return devMajor;
}","public void test076282() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) 0, false);
    tarArchiveEntry0.isFile();
    assertEquals(0, tarArchiveEntry0.getDevMajor());
}","/**
 * Get this entry's major device number.
 *
 * @return This entry's major device number.
 * @since 1.4
 */"
"@Override
public String getName() {
    return name;
}","public void test076283() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) 0, false);
    tarArchiveEntry0.isFile();
    assertEquals(""!S"", tarArchiveEntry0.getName());
}","/**
 * Get this entry's name.
 *
 * @return This entry's name.
 */"
"public boolean isPaxHeader() {
    return linkFlag == LF_PAX_EXTENDED_HEADER_LC || linkFlag == LF_PAX_EXTENDED_HEADER_UC;
}","public void test076284() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) 0, false);
    tarArchiveEntry0.isFile();
    assertFalse(tarArchiveEntry0.isPaxHeader());
}","/**
 * Check if this is a Pax header.
 *
 * @return {@code true} if this is a Pax header.
 *
 * @since 1.1
 */"
"public long getLongGroupId() {
    return groupId;
}","public void test076285() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) 0, false);
    tarArchiveEntry0.isFile();
    assertEquals(0L, tarArchiveEntry0.getLongGroupId());
}","/**
 * Get this entry's group id.
 *
 * @since 1.10
 * @return This entry's group id.
 */"
"public boolean isOldGNUSparse() {
    return linkFlag == LF_GNUTYPE_SPARSE;
}","public void test076286() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) 0, false);
    tarArchiveEntry0.isFile();
    assertFalse(tarArchiveEntry0.isOldGNUSparse());
}","/**
 * Indicate if this entry is a GNU or star sparse block using the
 * oldgnu format.
 *
 * @return true if this is a sparse extension provided by GNU tar or star
 * @since 1.11
 */"
"public boolean isBlockDevice() {
    return linkFlag == LF_BLK;
}","public void test076287() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) 0, false);
    tarArchiveEntry0.isFile();
    assertFalse(tarArchiveEntry0.isBlockDevice());
}","/**
 * Check if this is a block device entry.
 *
 * @since 1.2
 * @return whether this is a block device
 */"
"public int getMode() {
    return mode;
}","public void test076288() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) 0, false);
    tarArchiveEntry0.isFile();
    assertEquals(33188, tarArchiveEntry0.getMode());
}","/**
 * Get this entry's mode.
 *
 * @return This entry's mode.
 */"
"public boolean isSymbolicLink() {
    return linkFlag == LF_SYMLINK;
}","public void test076289() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) 0, false);
    tarArchiveEntry0.isFile();
    assertFalse(tarArchiveEntry0.isSymbolicLink());
}","/**
 * Check if this is a symbolic link entry.
 *
 * @since 1.2
 * @return whether this is a symbolic link
 */"
"public boolean isGlobalPaxHeader() {
    return linkFlag == LF_PAX_GLOBAL_EXTENDED_HEADER;
}","public void test076290() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) 0, false);
    tarArchiveEntry0.isFile();
    assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
}","/**
 * Check if this is a Pax header.
 *
 * @return {@code true} if this is a Pax header.
 *
 * @since 1.1
 */"
"@Override
public boolean isDirectory() {
    if (file != null) {
        return file.isDirectory();
    }
    if (linkFlag == LF_DIR) {
        return true;
    }
    if (getName().endsWith(""/"")) {
        return true;
    }
    return false;
}","public void test076291() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) 0, false);
    tarArchiveEntry0.isFile();
    assertFalse(tarArchiveEntry0.isDirectory());
}","/**
 * Return whether or not this entry represents a directory.
 *
 * @return True if this entry is a directory.
 */"
"@Deprecated
public int getUserId() {
    return (int) (userId & 0xffffffff);
}","public void test076292() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) 0, false);
    tarArchiveEntry0.isFile();
    assertEquals(0, tarArchiveEntry0.getUserId());
}","/**
 * Get this entry's user id.
 *
 * @return This entry's user id.
 * @deprecated use #getLongUserId instead as user ids can be
 * bigger than {@link Integer#MAX_VALUE}
 */"
"@Override
public String getName() {
    return name;
}","public void test077293() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, ""Minor device number is out of range: "");
    tarArchiveEntry0.isFile();
    assertEquals(""Minor device number is out of range: /"", tarArchiveEntry0.getName());
}","/**
 * Get this entry's name.
 *
 * @return This entry's name.
 */"
"public int getMode() {
    return mode;
}","public void test077294() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, ""Minor device number is out of range: "");
    tarArchiveEntry0.isFile();
    assertEquals(16877, tarArchiveEntry0.getMode());
}","/**
 * Get this entry's mode.
 *
 * @return This entry's mode.
 */"
"public int getDevMinor() {
    return devMinor;
}","public void test077295() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, ""Minor device number is out of range: "");
    tarArchiveEntry0.isFile();
    assertEquals(0, tarArchiveEntry0.getDevMinor());
}","/**
 * Get this entry's minor device number.
 *
 * @return This entry's minor device number.
 * @since 1.4
 */"
"@Override
public long getSize() {
    return size;
}","public void test077296() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, ""Minor device number is out of range: "");
    tarArchiveEntry0.isFile();
    assertEquals(0L, tarArchiveEntry0.getSize());
}","/**
 * Get this entry's file size.
 *
 * @return This entry's file size.
 */"
"@Deprecated
public int getGroupId() {
    return (int) (groupId & 0xffffffff);
}","public void test077297() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, ""Minor device number is out of range: "");
    tarArchiveEntry0.isFile();
    assertEquals(0, tarArchiveEntry0.getGroupId());
}","/**
 * Get this entry's group id.
 *
 * @return This entry's group id.
 * @deprecated use #getLongGroupId instead as group ids can be
 * bigger than {@link Integer#MAX_VALUE}
 */"
"@Deprecated
public int getGroupId() {
    return (int) (groupId & 0xffffffff);
}","public void test078298() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    boolean boolean0 = tarArchiveEntry0.isFile();
    assertEquals(0, tarArchiveEntry0.getGroupId());
}","/**
 * Get this entry's group id.
 *
 * @return This entry's group id.
 * @deprecated use #getLongGroupId instead as group ids can be
 * bigger than {@link Integer#MAX_VALUE}
 */"
"public boolean isGNULongLinkEntry() {
    return linkFlag == LF_GNUTYPE_LONGLINK;
}","public void test078299() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    boolean boolean0 = tarArchiveEntry0.isFile();
    assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
}","/**
 * Indicate if this entry is a GNU long linkname block
 *
 * @return true if this is a long name extension provided by GNU tar
 */"
"public boolean isFile() {
    if (file != null) {
        return file.isFile();
    }
    if (linkFlag == LF_OLDNORM || linkFlag == LF_NORMAL) {
        return true;
    }
    return !getName().endsWith(""/"");
}","public void test078300() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    boolean boolean0 = tarArchiveEntry0.isFile();
    assertTrue(boolean0);
}","/**
 * Check if this is a ""normal file""
 *
 * @since 1.2
 * @return whether this is a ""normal file""
 */"
"public int getDevMajor() {
    return devMajor;
}","public void test078301() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    boolean boolean0 = tarArchiveEntry0.isFile();
    assertEquals(0, tarArchiveEntry0.getDevMajor());
}","/**
 * Get this entry's major device number.
 *
 * @return This entry's major device number.
 * @since 1.4
 */"
"public int getDevMinor() {
    return devMinor;
}","public void test078302() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    boolean boolean0 = tarArchiveEntry0.isFile();
    assertEquals(0, tarArchiveEntry0.getDevMinor());
}","/**
 * Get this entry's minor device number.
 *
 * @return This entry's minor device number.
 * @since 1.4
 */"
"public int getMode() {
    return mode;
}","public void test078303() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    boolean boolean0 = tarArchiveEntry0.isFile();
    assertEquals(33188, tarArchiveEntry0.getMode());
}","/**
 * Get this entry's mode.
 *
 * @return This entry's mode.
 */"
"public boolean isGNUSparse() {
    return isOldGNUSparse() || isPaxGNUSparse();
}","public void test078304() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    boolean boolean0 = tarArchiveEntry0.isFile();
    assertFalse(tarArchiveEntry0.isGNUSparse());
}","/**
 * Indicate if this entry is a GNU sparse block.
 *
 * @return true if this is a sparse extension provided by GNU tar
 */"
"@Override
public String getName() {
    return name;
}","public void test078305() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    boolean boolean0 = tarArchiveEntry0.isFile();
    assertEquals(""!S"", tarArchiveEntry0.getName());
}","/**
 * Get this entry's name.
 *
 * @return This entry's name.
 */"
"@Override
public long getSize() {
    return size;
}","public void test078306() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    boolean boolean0 = tarArchiveEntry0.isFile();
    assertEquals(0L, tarArchiveEntry0.getSize());
}","/**
 * Get this entry's file size.
 *
 * @return This entry's file size.
 */"
"public long getLongUserId() {
    return userId;
}","public void test078307() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    boolean boolean0 = tarArchiveEntry0.isFile();
    assertEquals(0L, tarArchiveEntry0.getLongUserId());
}","/**
 * Get this entry's user id.
 *
 * @return This entry's user id.
 * @since 1.10
 */"
"@Override
public boolean isDirectory() {
    if (file != null) {
        return file.isDirectory();
    }
    if (linkFlag == LF_DIR) {
        return true;
    }
    if (getName().endsWith(""/"")) {
        return true;
    }
    return false;
}","public void test079308() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000//"", (byte) 83);
    boolean boolean0 = tarArchiveEntry0.isDirectory();
    assertTrue(boolean0);
}","/**
 * Return whether or not this entry represents a directory.
 *
 * @return True if this entry is a directory.
 */"
"@Deprecated
public int getGroupId() {
    return (int) (groupId & 0xffffffff);
}","public void test079309() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000//"", (byte) 83);
    boolean boolean0 = tarArchiveEntry0.isDirectory();
    assertEquals(0, tarArchiveEntry0.getGroupId());
}","/**
 * Get this entry's group id.
 *
 * @return This entry's group id.
 * @deprecated use #getLongGroupId instead as group ids can be
 * bigger than {@link Integer#MAX_VALUE}
 */"
"public int getDevMinor() {
    return devMinor;
}","public void test079310() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000//"", (byte) 83);
    boolean boolean0 = tarArchiveEntry0.isDirectory();
    assertEquals(0, tarArchiveEntry0.getDevMinor());
}","/**
 * Get this entry's minor device number.
 *
 * @return This entry's minor device number.
 * @since 1.4
 */"
"public boolean isOldGNUSparse() {
    return linkFlag == LF_GNUTYPE_SPARSE;
}","public void test079311() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000//"", (byte) 83);
    boolean boolean0 = tarArchiveEntry0.isDirectory();
    assertTrue(tarArchiveEntry0.isOldGNUSparse());
}","/**
 * Indicate if this entry is a GNU or star sparse block using the
 * oldgnu format.
 *
 * @return true if this is a sparse extension provided by GNU tar or star
 * @since 1.11
 */"
"public long getLongUserId() {
    return userId;
}","public void test079312() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000//"", (byte) 83);
    boolean boolean0 = tarArchiveEntry0.isDirectory();
    assertEquals(0L, tarArchiveEntry0.getLongUserId());
}","/**
 * Get this entry's user id.
 *
 * @return This entry's user id.
 * @since 1.10
 */"
"@Override
public long getSize() {
    return size;
}","public void test079313() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000//"", (byte) 83);
    boolean boolean0 = tarArchiveEntry0.isDirectory();
    assertEquals(0L, tarArchiveEntry0.getSize());
}","/**
 * Get this entry's file size.
 *
 * @return This entry's file size.
 */"
"public int getMode() {
    return mode;
}","public void test079314() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000//"", (byte) 83);
    boolean boolean0 = tarArchiveEntry0.isDirectory();
    assertEquals(16877, tarArchiveEntry0.getMode());
}","/**
 * Get this entry's mode.
 *
 * @return This entry's mode.
 */"
"public int getDevMajor() {
    return devMajor;
}","public void test079315() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000//"", (byte) 83);
    boolean boolean0 = tarArchiveEntry0.isDirectory();
    assertEquals(0, tarArchiveEntry0.getDevMajor());
}","/**
 * Get this entry's major device number.
 *
 * @return This entry's major device number.
 * @since 1.4
 */"
"public boolean isFIFO() {
    return linkFlag == LF_FIFO;
}","public void test080316() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000//"");
    boolean boolean0 = tarArchiveEntry0.isDirectory();
    assertFalse(tarArchiveEntry0.isFIFO());
}","/**
 * Check if this is a FIFO (pipe) entry.
 *
 * @since 1.2
 * @return whether this is a FIFO entry
 */"
"@Override
public boolean isDirectory() {
    if (file != null) {
        return file.isDirectory();
    }
    if (linkFlag == LF_DIR) {
        return true;
    }
    if (getName().endsWith(""/"")) {
        return true;
    }
    return false;
}","public void test080317() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000//"");
    boolean boolean0 = tarArchiveEntry0.isDirectory();
    assertTrue(boolean0);
}","/**
 * Return whether or not this entry represents a directory.
 *
 * @return True if this entry is a directory.
 */"
"public int getDevMajor() {
    return devMajor;
}","public void test080318() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000//"");
    boolean boolean0 = tarArchiveEntry0.isDirectory();
    assertEquals(0, tarArchiveEntry0.getDevMajor());
}","/**
 * Get this entry's major device number.
 *
 * @return This entry's major device number.
 * @since 1.4
 */"
"public boolean isFile() {
    if (file != null) {
        return file.isFile();
    }
    if (linkFlag == LF_OLDNORM || linkFlag == LF_NORMAL) {
        return true;
    }
    return !getName().endsWith(""/"");
}","public void test080319() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000//"");
    boolean boolean0 = tarArchiveEntry0.isDirectory();
    assertFalse(tarArchiveEntry0.isFile());
}","/**
 * Check if this is a ""normal file""
 *
 * @since 1.2
 * @return whether this is a ""normal file""
 */"
"public int getMode() {
    return mode;
}","public void test080320() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000//"");
    boolean boolean0 = tarArchiveEntry0.isDirectory();
    assertEquals(16877, tarArchiveEntry0.getMode());
}","/**
 * Get this entry's mode.
 *
 * @return This entry's mode.
 */"
"public long getLongGroupId() {
    return groupId;
}","public void test080321() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000//"");
    boolean boolean0 = tarArchiveEntry0.isDirectory();
    assertEquals(0L, tarArchiveEntry0.getLongGroupId());
}","/**
 * Get this entry's group id.
 *
 * @since 1.10
 * @return This entry's group id.
 */"
"@Override
public long getSize() {
    return size;
}","public void test080322() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000//"");
    boolean boolean0 = tarArchiveEntry0.isDirectory();
    assertEquals(0L, tarArchiveEntry0.getSize());
}","/**
 * Get this entry's file size.
 *
 * @return This entry's file size.
 */"
"@Deprecated
public int getUserId() {
    return (int) (userId & 0xffffffff);
}","public void test080323() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000//"");
    boolean boolean0 = tarArchiveEntry0.isDirectory();
    assertEquals(0, tarArchiveEntry0.getUserId());
}","/**
 * Get this entry's user id.
 *
 * @return This entry's user id.
 * @deprecated use #getLongUserId instead as user ids can be
 * bigger than {@link Integer#MAX_VALUE}
 */"
"public int getDevMinor() {
    return devMinor;
}","public void test080324() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000//"");
    boolean boolean0 = tarArchiveEntry0.isDirectory();
    assertEquals(0, tarArchiveEntry0.getDevMinor());
}","/**
 * Get this entry's minor device number.
 *
 * @return This entry's minor device number.
 * @since 1.4
 */"
"public boolean isBlockDevice() {
    return linkFlag == LF_BLK;
}","public void test080325() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000//"");
    boolean boolean0 = tarArchiveEntry0.isDirectory();
    assertFalse(tarArchiveEntry0.isBlockDevice());
}","/**
 * Check if this is a block device entry.
 *
 * @since 1.2
 * @return whether this is a block device
 */"
"public boolean isBlockDevice() {
    return linkFlag == LF_BLK;
}","public void test081326() throws Throwable {
    MockFile mockFile0 = new MockFile("""", """");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
    tarArchiveEntry0.isDirectory();
    assertFalse(tarArchiveEntry0.isBlockDevice());
}","/**
 * Check if this is a block device entry.
 *
 * @since 1.2
 * @return whether this is a block device
 */"
"public long getLongGroupId() {
    return groupId;
}","public void test081327() throws Throwable {
    MockFile mockFile0 = new MockFile("""", """");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
    tarArchiveEntry0.isDirectory();
    assertEquals(0L, tarArchiveEntry0.getLongGroupId());
}","/**
 * Get this entry's group id.
 *
 * @since 1.10
 * @return This entry's group id.
 */"
"public int getMode() {
    return mode;
}","public void test081328() throws Throwable {
    MockFile mockFile0 = new MockFile("""", """");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
    tarArchiveEntry0.isDirectory();
    assertEquals(16877, tarArchiveEntry0.getMode());
}","/**
 * Get this entry's mode.
 *
 * @return This entry's mode.
 */"
"public boolean isFIFO() {
    return linkFlag == LF_FIFO;
}","public void test081329() throws Throwable {
    MockFile mockFile0 = new MockFile("""", """");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
    tarArchiveEntry0.isDirectory();
    assertFalse(tarArchiveEntry0.isFIFO());
}","/**
 * Check if this is a FIFO (pipe) entry.
 *
 * @since 1.2
 * @return whether this is a FIFO entry
 */"
"@Override
public String getName() {
    return name;
}","public void test081330() throws Throwable {
    MockFile mockFile0 = new MockFile("""", """");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
    tarArchiveEntry0.isDirectory();
    assertEquals(""/"", tarArchiveEntry0.getName());
}","/**
 * Get this entry's name.
 *
 * @return This entry's name.
 */"
"public long getLongUserId() {
    return userId;
}","public void test081331() throws Throwable {
    MockFile mockFile0 = new MockFile("""", """");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
    tarArchiveEntry0.isDirectory();
    assertEquals(0L, tarArchiveEntry0.getLongUserId());
}","/**
 * Get this entry's user id.
 *
 * @return This entry's user id.
 * @since 1.10
 */"
"@Override
public long getSize() {
    return size;
}","public void test081332() throws Throwable {
    MockFile mockFile0 = new MockFile("""", """");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
    tarArchiveEntry0.isDirectory();
    assertEquals(0L, tarArchiveEntry0.getSize());
}","/**
 * Get this entry's file size.
 *
 * @return This entry's file size.
 */"
"@Override
public boolean isDirectory() {
    if (file != null) {
        return file.isDirectory();
    }
    if (linkFlag == LF_DIR) {
        return true;
    }
    if (getName().endsWith(""/"")) {
        return true;
    }
    return false;
}","public void test082333() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    boolean boolean0 = tarArchiveEntry0.isDirectory();
    assertFalse(boolean0);
}","/**
 * Return whether or not this entry represents a directory.
 *
 * @return True if this entry is a directory.
 */"
"public boolean isGlobalPaxHeader() {
    return linkFlag == LF_PAX_GLOBAL_EXTENDED_HEADER;
}","public void test082334() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    boolean boolean0 = tarArchiveEntry0.isDirectory();
    assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
}","/**
 * Check if this is a Pax header.
 *
 * @return {@code true} if this is a Pax header.
 *
 * @since 1.1
 */"
"public int getMode() {
    return mode;
}","public void test082335() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    boolean boolean0 = tarArchiveEntry0.isDirectory();
    assertEquals(33188, tarArchiveEntry0.getMode());
}","/**
 * Get this entry's mode.
 *
 * @return This entry's mode.
 */"
"public boolean isPaxHeader() {
    return linkFlag == LF_PAX_EXTENDED_HEADER_LC || linkFlag == LF_PAX_EXTENDED_HEADER_UC;
}","public void test082336() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    boolean boolean0 = tarArchiveEntry0.isDirectory();
    assertFalse(tarArchiveEntry0.isPaxHeader());
}","/**
 * Check if this is a Pax header.
 *
 * @return {@code true} if this is a Pax header.
 *
 * @since 1.1
 */"
"@Override
public String getName() {
    return name;
}","public void test082337() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    boolean boolean0 = tarArchiveEntry0.isDirectory();
    assertEquals(""!S"", tarArchiveEntry0.getName());
}","/**
 * Get this entry's name.
 *
 * @return This entry's name.
 */"
"public boolean isGNULongNameEntry() {
    return linkFlag == LF_GNUTYPE_LONGNAME;
}","public void test082338() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    boolean boolean0 = tarArchiveEntry0.isDirectory();
    assertFalse(tarArchiveEntry0.isGNULongNameEntry());
}","/**
 * Indicate if this entry is a GNU long name block
 *
 * @return true if this is a long name extension provided by GNU tar
 */"
"public boolean isSymbolicLink() {
    return linkFlag == LF_SYMLINK;
}","public void test082339() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    boolean boolean0 = tarArchiveEntry0.isDirectory();
    assertFalse(tarArchiveEntry0.isSymbolicLink());
}","/**
 * Check if this is a symbolic link entry.
 *
 * @since 1.2
 * @return whether this is a symbolic link
 */"
"public boolean isCharacterDevice() {
    return linkFlag == LF_CHR;
}","public void test082340() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    boolean boolean0 = tarArchiveEntry0.isDirectory();
    assertFalse(tarArchiveEntry0.isCharacterDevice());
}","/**
 * Check if this is a character device entry.
 *
 * @since 1.2
 * @return whether this is a character device
 */"
"public boolean isBlockDevice() {
    return linkFlag == LF_BLK;
}","public void test082341() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    boolean boolean0 = tarArchiveEntry0.isDirectory();
    assertFalse(tarArchiveEntry0.isBlockDevice());
}","/**
 * Check if this is a block device entry.
 *
 * @since 1.2
 * @return whether this is a block device
 */"
"public long getLongGroupId() {
    return groupId;
}","public void test082342() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    boolean boolean0 = tarArchiveEntry0.isDirectory();
    assertEquals(0L, tarArchiveEntry0.getLongGroupId());
}","/**
 * Get this entry's group id.
 *
 * @since 1.10
 * @return This entry's group id.
 */"
"public boolean isLink() {
    return linkFlag == LF_LINK;
}","public void test082343() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    boolean boolean0 = tarArchiveEntry0.isDirectory();
    assertFalse(tarArchiveEntry0.isLink());
}","/**
 * Check if this is a link entry.
 *
 * @since 1.2
 * @return whether this is a link entry
 */"
"@Override
public String getName() {
    return name;
}","public void test083344() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""US-ASCII"", (byte) 124);
    boolean boolean0 = tarArchiveEntry0.isGlobalPaxHeader();
    assertEquals(""US-ASCII"", tarArchiveEntry0.getName());
}","/**
 * Get this entry's name.
 *
 * @return This entry's name.
 */"
"@Override
public long getSize() {
    return size;
}","public void test083345() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""US-ASCII"", (byte) 124);
    boolean boolean0 = tarArchiveEntry0.isGlobalPaxHeader();
    assertEquals(0L, tarArchiveEntry0.getSize());
}","/**
 * Get this entry's file size.
 *
 * @return This entry's file size.
 */"
"public boolean isBlockDevice() {
    return linkFlag == LF_BLK;
}","public void test083346() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""US-ASCII"", (byte) 124);
    boolean boolean0 = tarArchiveEntry0.isGlobalPaxHeader();
    assertFalse(tarArchiveEntry0.isBlockDevice());
}","/**
 * Check if this is a block device entry.
 *
 * @since 1.2
 * @return whether this is a block device
 */"
"public boolean isLink() {
    return linkFlag == LF_LINK;
}","public void test083347() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""US-ASCII"", (byte) 124);
    boolean boolean0 = tarArchiveEntry0.isGlobalPaxHeader();
    assertFalse(tarArchiveEntry0.isLink());
}","/**
 * Check if this is a link entry.
 *
 * @since 1.2
 * @return whether this is a link entry
 */"
"public boolean isGlobalPaxHeader() {
    return linkFlag == LF_PAX_GLOBAL_EXTENDED_HEADER;
}","public void test083348() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""US-ASCII"", (byte) 124);
    boolean boolean0 = tarArchiveEntry0.isGlobalPaxHeader();
    assertFalse(boolean0);
}","/**
 * Check if this is a Pax header.
 *
 * @return {@code true} if this is a Pax header.
 *
 * @since 1.1
 */"
"public boolean isGNULongNameEntry() {
    return linkFlag == LF_GNUTYPE_LONGNAME;
}","public void test083349() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""US-ASCII"", (byte) 124);
    boolean boolean0 = tarArchiveEntry0.isGlobalPaxHeader();
    assertFalse(tarArchiveEntry0.isGNULongNameEntry());
}","/**
 * Indicate if this entry is a GNU long name block
 *
 * @return true if this is a long name extension provided by GNU tar
 */"
"public boolean isSparse() {
    return isGNUSparse() || isStarSparse();
}","public void test083350() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""US-ASCII"", (byte) 124);
    boolean boolean0 = tarArchiveEntry0.isGlobalPaxHeader();
    assertFalse(tarArchiveEntry0.isSparse());
}","/**
 * Check whether this is a sparse entry.
 *
 * @return whether this is a sparse entry
 * @since 1.11
 */"
"public int getMode() {
    return mode;
}","public void test083351() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""US-ASCII"", (byte) 124);
    boolean boolean0 = tarArchiveEntry0.isGlobalPaxHeader();
    assertEquals(33188, tarArchiveEntry0.getMode());
}","/**
 * Get this entry's mode.
 *
 * @return This entry's mode.
 */"
"public int getDevMajor() {
    return devMajor;
}","public void test083352() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""US-ASCII"", (byte) 124);
    boolean boolean0 = tarArchiveEntry0.isGlobalPaxHeader();
    assertEquals(0, tarArchiveEntry0.getDevMajor());
}","/**
 * Get this entry's major device number.
 *
 * @return This entry's major device number.
 * @since 1.4
 */"
"public boolean isFIFO() {
    return linkFlag == LF_FIFO;
}","public void test083353() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""US-ASCII"", (byte) 124);
    boolean boolean0 = tarArchiveEntry0.isGlobalPaxHeader();
    assertFalse(tarArchiveEntry0.isFIFO());
}","/**
 * Check if this is a FIFO (pipe) entry.
 *
 * @since 1.2
 * @return whether this is a FIFO entry
 */"
"public boolean isLink() {
    return linkFlag == LF_LINK;
}","public void test084354() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""US-ASCII"", (byte) 124);
    boolean boolean0 = tarArchiveEntry0.isPaxHeader();
    assertFalse(tarArchiveEntry0.isLink());
}","/**
 * Check if this is a link entry.
 *
 * @since 1.2
 * @return whether this is a link entry
 */"
"public int getMode() {
    return mode;
}","public void test084355() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""US-ASCII"", (byte) 124);
    boolean boolean0 = tarArchiveEntry0.isPaxHeader();
    assertEquals(33188, tarArchiveEntry0.getMode());
}","/**
 * Get this entry's mode.
 *
 * @return This entry's mode.
 */"
"public boolean isGNUSparse() {
    return isOldGNUSparse() || isPaxGNUSparse();
}","public void test084356() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""US-ASCII"", (byte) 124);
    boolean boolean0 = tarArchiveEntry0.isPaxHeader();
    assertFalse(tarArchiveEntry0.isGNUSparse());
}","/**
 * Indicate if this entry is a GNU sparse block.
 *
 * @return true if this is a sparse extension provided by GNU tar
 */"
"@Override
public String getName() {
    return name;
}","public void test084357() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""US-ASCII"", (byte) 124);
    boolean boolean0 = tarArchiveEntry0.isPaxHeader();
    assertEquals(""US-ASCII"", tarArchiveEntry0.getName());
}","/**
 * Get this entry's name.
 *
 * @return This entry's name.
 */"
"public boolean isPaxHeader() {
    return linkFlag == LF_PAX_EXTENDED_HEADER_LC || linkFlag == LF_PAX_EXTENDED_HEADER_UC;
}","public void test084358() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""US-ASCII"", (byte) 124);
    boolean boolean0 = tarArchiveEntry0.isPaxHeader();
    assertFalse(boolean0);
}","/**
 * Check if this is a Pax header.
 *
 * @return {@code true} if this is a Pax header.
 *
 * @since 1.1
 */"
"public long getLongUserId() {
    return userId;
}","public void test084359() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""US-ASCII"", (byte) 124);
    boolean boolean0 = tarArchiveEntry0.isPaxHeader();
    assertEquals(0L, tarArchiveEntry0.getLongUserId());
}","/**
 * Get this entry's user id.
 *
 * @return This entry's user id.
 * @since 1.10
 */"
"public int getDevMajor() {
    return devMajor;
}","public void test085360() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    boolean boolean0 = tarArchiveEntry0.isGNULongNameEntry();
    assertEquals(0, tarArchiveEntry0.getDevMajor());
}","/**
 * Get this entry's major device number.
 *
 * @return This entry's major device number.
 * @since 1.4
 */"
"public int getMode() {
    return mode;
}","public void test085361() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    boolean boolean0 = tarArchiveEntry0.isGNULongNameEntry();
    assertEquals(33188, tarArchiveEntry0.getMode());
}","/**
 * Get this entry's mode.
 *
 * @return This entry's mode.
 */"
"public boolean isPaxHeader() {
    return linkFlag == LF_PAX_EXTENDED_HEADER_LC || linkFlag == LF_PAX_EXTENDED_HEADER_UC;
}","public void test085362() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    boolean boolean0 = tarArchiveEntry0.isGNULongNameEntry();
    assertFalse(tarArchiveEntry0.isPaxHeader());
}","/**
 * Check if this is a Pax header.
 *
 * @return {@code true} if this is a Pax header.
 *
 * @since 1.1
 */"
"@Override
public String getName() {
    return name;
}","public void test085363() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    boolean boolean0 = tarArchiveEntry0.isGNULongNameEntry();
    assertEquals(""AJeNewn|eBElUQ!="", tarArchiveEntry0.getName());
}","/**
 * Get this entry's name.
 *
 * @return This entry's name.
 */"
"@Deprecated
public int getGroupId() {
    return (int) (groupId & 0xffffffff);
}","public void test085364() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    boolean boolean0 = tarArchiveEntry0.isGNULongNameEntry();
    assertEquals(0, tarArchiveEntry0.getGroupId());
}","/**
 * Get this entry's group id.
 *
 * @return This entry's group id.
 * @deprecated use #getLongGroupId instead as group ids can be
 * bigger than {@link Integer#MAX_VALUE}
 */"
"@Deprecated
public int getUserId() {
    return (int) (userId & 0xffffffff);
}","public void test085365() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    boolean boolean0 = tarArchiveEntry0.isGNULongNameEntry();
    assertEquals(0, tarArchiveEntry0.getUserId());
}","/**
 * Get this entry's user id.
 *
 * @return This entry's user id.
 * @deprecated use #getLongUserId instead as user ids can be
 * bigger than {@link Integer#MAX_VALUE}
 */"
"public boolean isGNULongNameEntry() {
    return linkFlag == LF_GNUTYPE_LONGNAME;
}","public void test085366() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    boolean boolean0 = tarArchiveEntry0.isGNULongNameEntry();
    assertFalse(boolean0);
}","/**
 * Indicate if this entry is a GNU long name block
 *
 * @return true if this is a long name extension provided by GNU tar
 */"
"public boolean isLink() {
    return linkFlag == LF_LINK;
}","public void test085367() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    boolean boolean0 = tarArchiveEntry0.isGNULongNameEntry();
    assertFalse(tarArchiveEntry0.isLink());
}","/**
 * Check if this is a link entry.
 *
 * @since 1.2
 * @return whether this is a link entry
 */"
"@Override
public String getName() {
    return name;
}","public void test086368() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) 75, true);
    boolean boolean0 = tarArchiveEntry0.isGNULongLinkEntry();
    assertEquals("""", tarArchiveEntry0.getName());
}","/**
 * Get this entry's name.
 *
 * @return This entry's name.
 */"
"@Override
public long getSize() {
    return size;
}","public void test086369() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) 75, true);
    boolean boolean0 = tarArchiveEntry0.isGNULongLinkEntry();
    assertEquals(0L, tarArchiveEntry0.getSize());
}","/**
 * Get this entry's file size.
 *
 * @return This entry's file size.
 */"
"public int getMode() {
    return mode;
}","public void test086370() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) 75, true);
    boolean boolean0 = tarArchiveEntry0.isGNULongLinkEntry();
    assertEquals(33188, tarArchiveEntry0.getMode());
}","/**
 * Get this entry's mode.
 *
 * @return This entry's mode.
 */"
"public int getDevMajor() {
    return devMajor;
}","public void test086371() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) 75, true);
    boolean boolean0 = tarArchiveEntry0.isGNULongLinkEntry();
    assertEquals(0, tarArchiveEntry0.getDevMajor());
}","/**
 * Get this entry's major device number.
 *
 * @return This entry's major device number.
 * @since 1.4
 */"
"public boolean isGNULongLinkEntry() {
    return linkFlag == LF_GNUTYPE_LONGLINK;
}","public void test086372() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) 75, true);
    boolean boolean0 = tarArchiveEntry0.isGNULongLinkEntry();
    assertTrue(boolean0);
}","/**
 * Indicate if this entry is a GNU long linkname block
 *
 * @return true if this is a long name extension provided by GNU tar
 */"
"public int getDevMinor() {
    return devMinor;
}","public void test086373() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) 75, true);
    boolean boolean0 = tarArchiveEntry0.isGNULongLinkEntry();
    assertEquals(0, tarArchiveEntry0.getDevMinor());
}","/**
 * Get this entry's minor device number.
 *
 * @return This entry's minor device number.
 * @since 1.4
 */"
"@Deprecated
public int getUserId() {
    return (int) (userId & 0xffffffff);
}","public void test086374() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) 75, true);
    boolean boolean0 = tarArchiveEntry0.isGNULongLinkEntry();
    assertEquals(0, tarArchiveEntry0.getUserId());
}","/**
 * Get this entry's user id.
 *
 * @return This entry's user id.
 * @deprecated use #getLongUserId instead as user ids can be
 * bigger than {@link Integer#MAX_VALUE}
 */"
"@Deprecated
public int getGroupId() {
    return (int) (groupId & 0xffffffff);
}","public void test086375() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) 75, true);
    boolean boolean0 = tarArchiveEntry0.isGNULongLinkEntry();
    assertEquals(0, tarArchiveEntry0.getGroupId());
}","/**
 * Get this entry's group id.
 *
 * @return This entry's group id.
 * @deprecated use #getLongGroupId instead as group ids can be
 * bigger than {@link Integer#MAX_VALUE}
 */"
"public boolean isGNULongLinkEntry() {
    return linkFlag == LF_GNUTYPE_LONGLINK;
}","public void test087376() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""org.apache.commons.compress.archivers.tar.TarArchiveEntry"", (byte) 108);
    boolean boolean0 = tarArchiveEntry0.isGNULongLinkEntry();
    assertFalse(boolean0);
}","/**
 * Indicate if this entry is a GNU long linkname block
 *
 * @return true if this is a long name extension provided by GNU tar
 */"
"public boolean isCharacterDevice() {
    return linkFlag == LF_CHR;
}","public void test087377() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""org.apache.commons.compress.archivers.tar.TarArchiveEntry"", (byte) 108);
    boolean boolean0 = tarArchiveEntry0.isGNULongLinkEntry();
    assertFalse(tarArchiveEntry0.isCharacterDevice());
}","/**
 * Check if this is a character device entry.
 *
 * @since 1.2
 * @return whether this is a character device
 */"
"@Override
public String getName() {
    return name;
}","public void test087378() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""org.apache.commons.compress.archivers.tar.TarArchiveEntry"", (byte) 108);
    boolean boolean0 = tarArchiveEntry0.isGNULongLinkEntry();
    assertEquals(""org.apache.commons.compress.archivers.tar.TarArchiveEntry"", tarArchiveEntry0.getName());
}","/**
 * Get this entry's name.
 *
 * @return This entry's name.
 */"
"@Override
public boolean isDirectory() {
    if (file != null) {
        return file.isDirectory();
    }
    if (linkFlag == LF_DIR) {
        return true;
    }
    if (getName().endsWith(""/"")) {
        return true;
    }
    return false;
}","public void test087379() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""org.apache.commons.compress.archivers.tar.TarArchiveEntry"", (byte) 108);
    boolean boolean0 = tarArchiveEntry0.isGNULongLinkEntry();
    assertFalse(tarArchiveEntry0.isDirectory());
}","/**
 * Return whether or not this entry represents a directory.
 *
 * @return True if this entry is a directory.
 */"
"public long getLongGroupId() {
    return groupId;
}","public void test087380() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""org.apache.commons.compress.archivers.tar.TarArchiveEntry"", (byte) 108);
    boolean boolean0 = tarArchiveEntry0.isGNULongLinkEntry();
    assertEquals(0L, tarArchiveEntry0.getLongGroupId());
}","/**
 * Get this entry's group id.
 *
 * @since 1.10
 * @return This entry's group id.
 */"
"@Override
public long getSize() {
    return size;
}","public void test087381() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""org.apache.commons.compress.archivers.tar.TarArchiveEntry"", (byte) 108);
    boolean boolean0 = tarArchiveEntry0.isGNULongLinkEntry();
    assertEquals(0L, tarArchiveEntry0.getSize());
}","/**
 * Get this entry's file size.
 *
 * @return This entry's file size.
 */"
"public boolean isPaxHeader() {
    return linkFlag == LF_PAX_EXTENDED_HEADER_LC || linkFlag == LF_PAX_EXTENDED_HEADER_UC;
}","public void test087382() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""org.apache.commons.compress.archivers.tar.TarArchiveEntry"", (byte) 108);
    boolean boolean0 = tarArchiveEntry0.isGNULongLinkEntry();
    assertFalse(tarArchiveEntry0.isPaxHeader());
}","/**
 * Check if this is a Pax header.
 *
 * @return {@code true} if this is a Pax header.
 *
 * @since 1.1
 */"
"public int getMode() {
    return mode;
}","public void test087383() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""org.apache.commons.compress.archivers.tar.TarArchiveEntry"", (byte) 108);
    boolean boolean0 = tarArchiveEntry0.isGNULongLinkEntry();
    assertEquals(33188, tarArchiveEntry0.getMode());
}","/**
 * Get this entry's mode.
 *
 * @return This entry's mode.
 */"
"public boolean isSymbolicLink() {
    return linkFlag == LF_SYMLINK;
}","public void test087384() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""org.apache.commons.compress.archivers.tar.TarArchiveEntry"", (byte) 108);
    boolean boolean0 = tarArchiveEntry0.isGNULongLinkEntry();
    assertFalse(tarArchiveEntry0.isSymbolicLink());
}","/**
 * Check if this is a symbolic link entry.
 *
 * @since 1.2
 * @return whether this is a symbolic link
 */"
"public boolean isGNULongNameEntry() {
    return linkFlag == LF_GNUTYPE_LONGNAME;
}","public void test087385() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""org.apache.commons.compress.archivers.tar.TarArchiveEntry"", (byte) 108);
    boolean boolean0 = tarArchiveEntry0.isGNULongLinkEntry();
    assertFalse(tarArchiveEntry0.isGNULongNameEntry());
}","/**
 * Indicate if this entry is a GNU long name block
 *
 * @return true if this is a long name extension provided by GNU tar
 */"
"@Deprecated
public int getUserId() {
    return (int) (userId & 0xffffffff);
}","public void test087386() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""org.apache.commons.compress.archivers.tar.TarArchiveEntry"", (byte) 108);
    boolean boolean0 = tarArchiveEntry0.isGNULongLinkEntry();
    assertEquals(0, tarArchiveEntry0.getUserId());
}","/**
 * Get this entry's user id.
 *
 * @return This entry's user id.
 * @deprecated use #getLongUserId instead as user ids can be
 * bigger than {@link Integer#MAX_VALUE}
 */"
"public void setDevMinor(final int devNo) {
    if (devNo < 0) {
        throw new IllegalArgumentException(""Minor device number is out of "" + ""range: "" + devNo);
    }
    this.devMinor = devNo;
}","public void test088387() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""bXJ`I2+'9,vz!Fg?*"", true);
    // Undeclared exception!
    try {
        tarArchiveEntry0.setDevMinor((-2151));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Minor device number is out of range: -2151
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarArchiveEntry"", e);
    }
}","/**
 * Set this entry's minor device number.
 *
 * @param devNo This entry's minor device number.
 * @throws IllegalArgumentException if the devNo is &lt; 0.
 * @since 1.4
 */"
"public void setDevMajor(final int devNo) {
    if (devNo < 0) {
        throw new IllegalArgumentException(""Major device number is out of "" + ""range: "" + devNo);
    }
    this.devMajor = devNo;
}","public void test089388() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""}/"", false);
    // Undeclared exception!
    try {
        tarArchiveEntry0.setDevMajor((-28));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Major device number is out of range: -28
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarArchiveEntry"", e);
    }
}","/**
 * Set this entry's major device number.
 *
 * @param devNo This entry's major device number.
 * @throws IllegalArgumentException if the devNo is &lt; 0.
 * @since 1.4
 */"
"public int getMode() {
    return mode;
}","public void test090389() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    tarArchiveEntry0.setDevMajor(0);
    assertEquals(33188, tarArchiveEntry0.getMode());
}","/**
 * Get this entry's mode.
 *
 * @return This entry's mode.
 */"
"public boolean isCharacterDevice() {
    return linkFlag == LF_CHR;
}","public void test090390() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    tarArchiveEntry0.setDevMajor(0);
    assertFalse(tarArchiveEntry0.isCharacterDevice());
}","/**
 * Check if this is a character device entry.
 *
 * @since 1.2
 * @return whether this is a character device
 */"
"public boolean isFIFO() {
    return linkFlag == LF_FIFO;
}","public void test090391() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    tarArchiveEntry0.setDevMajor(0);
    assertFalse(tarArchiveEntry0.isFIFO());
}","/**
 * Check if this is a FIFO (pipe) entry.
 *
 * @since 1.2
 * @return whether this is a FIFO entry
 */"
"@Override
public String getName() {
    return name;
}","public void test090392() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    tarArchiveEntry0.setDevMajor(0);
    assertEquals("""", tarArchiveEntry0.getName());
}","/**
 * Get this entry's name.
 *
 * @return This entry's name.
 */"
"public int getDevMajor() {
    return devMajor;
}","public void test090393() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    tarArchiveEntry0.setDevMajor(0);
    assertEquals(0, tarArchiveEntry0.getDevMajor());
}","/**
 * Get this entry's major device number.
 *
 * @return This entry's major device number.
 * @since 1.4
 */"
"@Override
public long getSize() {
    return size;
}","public void test090394() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    tarArchiveEntry0.setDevMajor(0);
    assertEquals(0L, tarArchiveEntry0.getSize());
}","/**
 * Get this entry's file size.
 *
 * @return This entry's file size.
 */"
"@Override
public boolean isDirectory() {
    if (file != null) {
        return file.isDirectory();
    }
    if (linkFlag == LF_DIR) {
        return true;
    }
    if (getName().endsWith(""/"")) {
        return true;
    }
    return false;
}","public void test090395() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    tarArchiveEntry0.setDevMajor(0);
    assertFalse(tarArchiveEntry0.isDirectory());
}","/**
 * Return whether or not this entry represents a directory.
 *
 * @return True if this entry is a directory.
 */"
"public boolean isGNULongLinkEntry() {
    return linkFlag == LF_GNUTYPE_LONGLINK;
}","public void test090396() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    tarArchiveEntry0.setDevMajor(0);
    assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
}","/**
 * Indicate if this entry is a GNU long linkname block
 *
 * @return true if this is a long name extension provided by GNU tar
 */"
"public int getDevMinor() {
    return devMinor;
}","public void test090397() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    tarArchiveEntry0.setDevMajor(0);
    assertEquals(0, tarArchiveEntry0.getDevMinor());
}","/**
 * Get this entry's minor device number.
 *
 * @return This entry's minor device number.
 * @since 1.4
 */"
"public void setSize(final long size) {
    if (size < 0) {
        throw new IllegalArgumentException(""Size is out of range: "" + size);
    }
    this.size = size;
}","public void test091398() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""H*>9Vyg1xA)'kdQ+"", (byte) 23);
    // Undeclared exception!
    try {
        tarArchiveEntry0.setSize((-2657L));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Size is out of range: -2657
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarArchiveEntry"", e);
    }
}","/**
 * Set this entry's file size.
 *
 * @param size This entry's new file size.
 * @throws IllegalArgumentException if the size is &lt; 0.
 */"
"@Override
public String getName() {
    return name;
}","public void test092399() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""TmT"");
    tarArchiveEntry0.equals((Object) """");
    assertEquals(""TmT"", tarArchiveEntry0.getName());
}","/**
 * Get this entry's name.
 *
 * @return This entry's name.
 */"
"@Deprecated
public int getGroupId() {
    return (int) (groupId & 0xffffffff);
}","public void test092400() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""TmT"");
    tarArchiveEntry0.equals((Object) """");
    assertEquals(0, tarArchiveEntry0.getGroupId());
}","/**
 * Get this entry's group id.
 *
 * @return This entry's group id.
 * @deprecated use #getLongGroupId instead as group ids can be
 * bigger than {@link Integer#MAX_VALUE}
 */"
"public boolean isLink() {
    return linkFlag == LF_LINK;
}","public void test092401() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""TmT"");
    tarArchiveEntry0.equals((Object) """");
    assertFalse(tarArchiveEntry0.isLink());
}","/**
 * Check if this is a link entry.
 *
 * @since 1.2
 * @return whether this is a link entry
 */"
"public int getDevMinor() {
    return devMinor;
}","public void test092402() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""TmT"");
    tarArchiveEntry0.equals((Object) """");
    assertEquals(0, tarArchiveEntry0.getDevMinor());
}","/**
 * Get this entry's minor device number.
 *
 * @return This entry's minor device number.
 * @since 1.4
 */"
"public int getDevMajor() {
    return devMajor;
}","public void test092403() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""TmT"");
    tarArchiveEntry0.equals((Object) """");
    assertEquals(0, tarArchiveEntry0.getDevMajor());
}","/**
 * Get this entry's major device number.
 *
 * @return This entry's major device number.
 * @since 1.4
 */"
"public int getMode() {
    return mode;
}","public void test092404() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""TmT"");
    tarArchiveEntry0.equals((Object) """");
    assertEquals(33188, tarArchiveEntry0.getMode());
}","/**
 * Get this entry's mode.
 *
 * @return This entry's mode.
 */"
"@Override
public long getSize() {
    return size;
}","public void test092405() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""TmT"");
    tarArchiveEntry0.equals((Object) """");
    assertEquals(0L, tarArchiveEntry0.getSize());
}","/**
 * Get this entry's file size.
 *
 * @return This entry's file size.
 */"
"public long getLongUserId() {
    return userId;
}","public void test092406() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""TmT"");
    tarArchiveEntry0.equals((Object) """");
    assertEquals(0L, tarArchiveEntry0.getLongUserId());
}","/**
 * Get this entry's user id.
 *
 * @return This entry's user id.
 * @since 1.10
 */"
"@Deprecated
public int getUserId() {
    return (int) (userId & 0xffffffff);
}","public void test093407() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""SCHILY.realsize"");
    tarArchiveEntry0.equals((Object) null);
    assertEquals(0, tarArchiveEntry0.getUserId());
}","/**
 * Get this entry's user id.
 *
 * @return This entry's user id.
 * @deprecated use #getLongUserId instead as user ids can be
 * bigger than {@link Integer#MAX_VALUE}
 */"
"public boolean isLink() {
    return linkFlag == LF_LINK;
}","public void test093408() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""SCHILY.realsize"");
    tarArchiveEntry0.equals((Object) null);
    assertFalse(tarArchiveEntry0.isLink());
}","/**
 * Check if this is a link entry.
 *
 * @since 1.2
 * @return whether this is a link entry
 */"
"@Override
public boolean isDirectory() {
    if (file != null) {
        return file.isDirectory();
    }
    if (linkFlag == LF_DIR) {
        return true;
    }
    if (getName().endsWith(""/"")) {
        return true;
    }
    return false;
}","public void test093409() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""SCHILY.realsize"");
    tarArchiveEntry0.equals((Object) null);
    assertFalse(tarArchiveEntry0.isDirectory());
}","/**
 * Return whether or not this entry represents a directory.
 *
 * @return True if this entry is a directory.
 */"
"@Override
public String getName() {
    return name;
}","public void test093410() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""SCHILY.realsize"");
    tarArchiveEntry0.equals((Object) null);
    assertEquals(""SCHILY.realsize"", tarArchiveEntry0.getName());
}","/**
 * Get this entry's name.
 *
 * @return This entry's name.
 */"
"@Deprecated
public int getGroupId() {
    return (int) (groupId & 0xffffffff);
}","public void test093411() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""SCHILY.realsize"");
    tarArchiveEntry0.equals((Object) null);
    assertEquals(0, tarArchiveEntry0.getGroupId());
}","/**
 * Get this entry's group id.
 *
 * @return This entry's group id.
 * @deprecated use #getLongGroupId instead as group ids can be
 * bigger than {@link Integer#MAX_VALUE}
 */"
"@Override
public long getSize() {
    return size;
}","public void test093412() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""SCHILY.realsize"");
    tarArchiveEntry0.equals((Object) null);
    assertEquals(0L, tarArchiveEntry0.getSize());
}","/**
 * Get this entry's file size.
 *
 * @return This entry's file size.
 */"
"public int getMode() {
    return mode;
}","public void test093413() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""SCHILY.realsize"");
    tarArchiveEntry0.equals((Object) null);
    assertEquals(33188, tarArchiveEntry0.getMode());
}","/**
 * Get this entry's mode.
 *
 * @return This entry's mode.
 */"
"public int getDevMajor() {
    return devMajor;
}","public void test093414() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""SCHILY.realsize"");
    tarArchiveEntry0.equals((Object) null);
    assertEquals(0, tarArchiveEntry0.getDevMajor());
}","/**
 * Get this entry's major device number.
 *
 * @return This entry's major device number.
 * @since 1.4
 */"
"public int getMode() {
    return mode;
}","public void test094415() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000//"", (byte) 83);
    boolean boolean0 = tarArchiveEntry0.isGNUSparse();
    assertEquals(16877, tarArchiveEntry0.getMode());
}","/**
 * Get this entry's mode.
 *
 * @return This entry's mode.
 */"
"public boolean isGNUSparse() {
    return isOldGNUSparse() || isPaxGNUSparse();
}","public void test094416() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000//"", (byte) 83);
    boolean boolean0 = tarArchiveEntry0.isGNUSparse();
    assertTrue(boolean0);
}","/**
 * Indicate if this entry is a GNU sparse block.
 *
 * @return true if this is a sparse extension provided by GNU tar
 */"
"@Override
public String getName() {
    return name;
}","public void test094417() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000//"", (byte) 83);
    boolean boolean0 = tarArchiveEntry0.isGNUSparse();
    assertEquals(""\u0000\u0000//"", tarArchiveEntry0.getName());
}","/**
 * Get this entry's name.
 *
 * @return This entry's name.
 */"
"@Deprecated
public int getUserId() {
    return (int) (userId & 0xffffffff);
}","public void test094418() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000//"", (byte) 83);
    boolean boolean0 = tarArchiveEntry0.isGNUSparse();
    assertEquals(0, tarArchiveEntry0.getUserId());
}","/**
 * Get this entry's user id.
 *
 * @return This entry's user id.
 * @deprecated use #getLongUserId instead as user ids can be
 * bigger than {@link Integer#MAX_VALUE}
 */"
"@Override
public long getSize() {
    return size;
}","public void test094419() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000//"", (byte) 83);
    boolean boolean0 = tarArchiveEntry0.isGNUSparse();
    assertEquals(0L, tarArchiveEntry0.getSize());
}","/**
 * Get this entry's file size.
 *
 * @return This entry's file size.
 */"
"@Deprecated
public int getGroupId() {
    return (int) (groupId & 0xffffffff);
}","public void test094420() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\u0000\u0000//"", (byte) 83);
    boolean boolean0 = tarArchiveEntry0.isGNUSparse();
    assertEquals(0, tarArchiveEntry0.getGroupId());
}","/**
 * Get this entry's group id.
 *
 * @return This entry's group id.
 * @deprecated use #getLongGroupId instead as group ids can be
 * bigger than {@link Integer#MAX_VALUE}
 */"
"public long getLongGroupId() {
    return groupId;
}","public void test095421() throws Throwable {
    File file0 = MockFile.createTempFile("" byte binary number"", "" byte binary number"");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
    tarArchiveEntry0.getFile();
    assertEquals(0L, tarArchiveEntry0.getLongGroupId());
}","/**
 * Get this entry's group id.
 *
 * @since 1.10
 * @return This entry's group id.
 */"
"@Override
public String getName() {
    return name;
}","public void test095422() throws Throwable {
    File file0 = MockFile.createTempFile("" byte binary number"", "" byte binary number"");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
    tarArchiveEntry0.getFile();
    assertEquals(""var/folders/vv/c7q6vm8920vc7d5p_87011w40000gn/T/ byte binary number0 byte binary number"", tarArchiveEntry0.getName());
}","/**
 * Get this entry's name.
 *
 * @return This entry's name.
 */"
"public int getDevMajor() {
    return devMajor;
}","public void test095423() throws Throwable {
    File file0 = MockFile.createTempFile("" byte binary number"", "" byte binary number"");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
    tarArchiveEntry0.getFile();
    assertEquals(0, tarArchiveEntry0.getDevMajor());
}","/**
 * Get this entry's major device number.
 *
 * @return This entry's major device number.
 * @since 1.4
 */"
"public long getLongUserId() {
    return userId;
}","public void test095424() throws Throwable {
    File file0 = MockFile.createTempFile("" byte binary number"", "" byte binary number"");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
    tarArchiveEntry0.getFile();
    assertEquals(0L, tarArchiveEntry0.getLongUserId());
}","/**
 * Get this entry's user id.
 *
 * @return This entry's user id.
 * @since 1.10
 */"
"@Override
public String getName() {
    return name;
}","public void test096425() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""SCHILY.realsize"");
    tarArchiveEntry0.setModTime((-2697L));
    assertEquals(""SCHILY.realsize"", tarArchiveEntry0.getName());
}","/**
 * Get this entry's name.
 *
 * @return This entry's name.
 */"
"@Override
public boolean isDirectory() {
    if (file != null) {
        return file.isDirectory();
    }
    if (linkFlag == LF_DIR) {
        return true;
    }
    if (getName().endsWith(""/"")) {
        return true;
    }
    return false;
}","public void test096426() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""SCHILY.realsize"");
    tarArchiveEntry0.setModTime((-2697L));
    assertFalse(tarArchiveEntry0.isDirectory());
}","/**
 * Return whether or not this entry represents a directory.
 *
 * @return True if this entry is a directory.
 */"
"public int getDevMajor() {
    return devMajor;
}","public void test096427() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""SCHILY.realsize"");
    tarArchiveEntry0.setModTime((-2697L));
    assertEquals(0, tarArchiveEntry0.getDevMajor());
}","/**
 * Get this entry's major device number.
 *
 * @return This entry's major device number.
 * @since 1.4
 */"
"public long getLongUserId() {
    return userId;
}","public void test096428() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""SCHILY.realsize"");
    tarArchiveEntry0.setModTime((-2697L));
    assertEquals(0L, tarArchiveEntry0.getLongUserId());
}","/**
 * Get this entry's user id.
 *
 * @return This entry's user id.
 * @since 1.10
 */"
"public int getMode() {
    return mode;
}","public void test096429() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""SCHILY.realsize"");
    tarArchiveEntry0.setModTime((-2697L));
    assertEquals(33188, tarArchiveEntry0.getMode());
}","/**
 * Get this entry's mode.
 *
 * @return This entry's mode.
 */"
"public long getLongGroupId() {
    return groupId;
}","public void test096430() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""SCHILY.realsize"");
    tarArchiveEntry0.setModTime((-2697L));
    assertEquals(0L, tarArchiveEntry0.getLongGroupId());
}","/**
 * Get this entry's group id.
 *
 * @since 1.10
 * @return This entry's group id.
 */"
"public int getDevMinor() {
    return devMinor;
}","public void test096431() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""SCHILY.realsize"");
    tarArchiveEntry0.setModTime((-2697L));
    assertEquals(0, tarArchiveEntry0.getDevMinor());
}","/**
 * Get this entry's minor device number.
 *
 * @return This entry's minor device number.
 * @since 1.4
 */"
"public int getMode() {
    return mode;
}","public void test097432() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""bXJ`I2+'9,vz!Fg?*"", true);
    long long0 = tarArchiveEntry0.getLongUserId();
    assertEquals(33188, tarArchiveEntry0.getMode());
}","/**
 * Get this entry's mode.
 *
 * @return This entry's mode.
 */"
"public long getLongUserId() {
    return userId;
}","public void test097433() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""bXJ`I2+'9,vz!Fg?*"", true);
    long long0 = tarArchiveEntry0.getLongUserId();
    assertEquals(0L, long0);
}","/**
 * Get this entry's user id.
 *
 * @return This entry's user id.
 * @since 1.10
 */"
"public int getDevMajor() {
    return devMajor;
}","public void test097434() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""bXJ`I2+'9,vz!Fg?*"", true);
    long long0 = tarArchiveEntry0.getLongUserId();
    assertEquals(0, tarArchiveEntry0.getDevMajor());
}","/**
 * Get this entry's major device number.
 *
 * @return This entry's major device number.
 * @since 1.4
 */"
"public int getDevMinor() {
    return devMinor;
}","public void test097435() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""bXJ`I2+'9,vz!Fg?*"", true);
    long long0 = tarArchiveEntry0.getLongUserId();
    assertEquals(0, tarArchiveEntry0.getDevMinor());
}","/**
 * Get this entry's minor device number.
 *
 * @return This entry's minor device number.
 * @since 1.4
 */"
"public boolean isLink() {
    return linkFlag == LF_LINK;
}","public void test097436() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""bXJ`I2+'9,vz!Fg?*"", true);
    long long0 = tarArchiveEntry0.getLongUserId();
    assertFalse(tarArchiveEntry0.isLink());
}","/**
 * Check if this is a link entry.
 *
 * @since 1.2
 * @return whether this is a link entry
 */"
"@Override
public String getName() {
    return name;
}","public void test097437() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""bXJ`I2+'9,vz!Fg?*"", true);
    long long0 = tarArchiveEntry0.getLongUserId();
    assertEquals(""bXJ`I2+'9,vz!Fg?*"", tarArchiveEntry0.getName());
}","/**
 * Get this entry's name.
 *
 * @return This entry's name.
 */"
"@Override
public long getSize() {
    return size;
}","public void test097438() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""bXJ`I2+'9,vz!Fg?*"", true);
    long long0 = tarArchiveEntry0.getLongUserId();
    assertEquals(0L, tarArchiveEntry0.getSize());
}","/**
 * Get this entry's file size.
 *
 * @return This entry's file size.
 */"
"public long getLongGroupId() {
    return groupId;
}","public void test097439() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""bXJ`I2+'9,vz!Fg?*"", true);
    long long0 = tarArchiveEntry0.getLongUserId();
    assertEquals(0L, tarArchiveEntry0.getLongGroupId());
}","/**
 * Get this entry's group id.
 *
 * @since 1.10
 * @return This entry's group id.
 */"
"void fillGNUSparse1xData(final Map<String, String> headers) {
    paxGNUSparse = true;
    realSize = Integer.parseInt(headers.get(""GNU.sparse.realsize""));
    name = headers.get(""GNU.sparse.name"");
}","public void test098440() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""SCHILY.realsize"");
    Map<String, String> map0 = ZoneId.SHORT_IDS;
    // Undeclared exception!
    try {
        tarArchiveEntry0.fillGNUSparse1xData(map0);
        fail(""Expecting exception: NumberFormatException"");
    } catch (NumberFormatException e) {
        //
        // null
        //
        verifyException(""java.lang.Integer"", e);
    }
}",""
"public boolean isGNULongNameEntry() {
    return linkFlag == LF_GNUTYPE_LONGNAME;
}","public void test099441() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""ustar "", (byte) 76, false);
    String string0 = tarArchiveEntry0.getGroupName();
    assertTrue(tarArchiveEntry0.isGNULongNameEntry());
}","/**
 * Indicate if this entry is a GNU long name block
 *
 * @return true if this is a long name extension provided by GNU tar
 */"
"public String getGroupName() {
    return groupName;
}","public void test099442() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""ustar "", (byte) 76, false);
    String string0 = tarArchiveEntry0.getGroupName();
    assertEquals("""", string0);
}","/**
 * Get this entry's group name.
 *
 * @return This entry's group name.
 */"
"public int getMode() {
    return mode;
}","public void test099443() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""ustar "", (byte) 76, false);
    String string0 = tarArchiveEntry0.getGroupName();
    assertEquals(33188, tarArchiveEntry0.getMode());
}","/**
 * Get this entry's mode.
 *
 * @return This entry's mode.
 */"
"public int getDevMajor() {
    return devMajor;
}","public void test099444() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""ustar "", (byte) 76, false);
    String string0 = tarArchiveEntry0.getGroupName();
    assertEquals(0, tarArchiveEntry0.getDevMajor());
}","/**
 * Get this entry's major device number.
 *
 * @return This entry's major device number.
 * @since 1.4
 */"
"@Override
public String getName() {
    return name;
}","public void test099445() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""ustar "", (byte) 76, false);
    String string0 = tarArchiveEntry0.getGroupName();
    assertEquals(""ustar "", tarArchiveEntry0.getName());
}","/**
 * Get this entry's name.
 *
 * @return This entry's name.
 */"
"@Deprecated
public int getGroupId() {
    return (int) (groupId & 0xffffffff);
}","public void test099446() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""ustar "", (byte) 76, false);
    String string0 = tarArchiveEntry0.getGroupName();
    assertEquals(0, tarArchiveEntry0.getGroupId());
}","/**
 * Get this entry's group id.
 *
 * @return This entry's group id.
 * @deprecated use #getLongGroupId instead as group ids can be
 * bigger than {@link Integer#MAX_VALUE}
 */"
"@Override
public boolean isDirectory() {
    if (file != null) {
        return file.isDirectory();
    }
    if (linkFlag == LF_DIR) {
        return true;
    }
    if (getName().endsWith(""/"")) {
        return true;
    }
    return false;
}","public void test100447() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""TmT"");
    int int0 = tarArchiveEntry0.getUserId();
    assertFalse(tarArchiveEntry0.isDirectory());
}","/**
 * Return whether or not this entry represents a directory.
 *
 * @return True if this entry is a directory.
 */"
"@Override
public String getName() {
    return name;
}","public void test100448() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""TmT"");
    int int0 = tarArchiveEntry0.getUserId();
    assertEquals(""TmT"", tarArchiveEntry0.getName());
}","/**
 * Get this entry's name.
 *
 * @return This entry's name.
 */"
"@Deprecated
public int getUserId() {
    return (int) (userId & 0xffffffff);
}","public void test100449() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""TmT"");
    int int0 = tarArchiveEntry0.getUserId();
    assertEquals(0, int0);
}","/**
 * Get this entry's user id.
 *
 * @return This entry's user id.
 * @deprecated use #getLongUserId instead as user ids can be
 * bigger than {@link Integer#MAX_VALUE}
 */"
"@Override
public long getSize() {
    return size;
}","public void test100450() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""TmT"");
    int int0 = tarArchiveEntry0.getUserId();
    assertEquals(0L, tarArchiveEntry0.getSize());
}","/**
 * Get this entry's file size.
 *
 * @return This entry's file size.
 */"
"public int getMode() {
    return mode;
}","public void test100451() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""TmT"");
    int int0 = tarArchiveEntry0.getUserId();
    assertEquals(33188, tarArchiveEntry0.getMode());
}","/**
 * Get this entry's mode.
 *
 * @return This entry's mode.
 */"
"public boolean isLink() {
    return linkFlag == LF_LINK;
}","public void test101452() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""");
    tarArchiveEntry0.equals((Object) tarArchiveEntry0);
    assertFalse(tarArchiveEntry0.isLink());
}","/**
 * Check if this is a link entry.
 *
 * @since 1.2
 * @return whether this is a link entry
 */"
"public int getMode() {
    return mode;
}","public void test101453() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""");
    tarArchiveEntry0.equals((Object) tarArchiveEntry0);
    assertEquals(33188, tarArchiveEntry0.getMode());
}","/**
 * Get this entry's mode.
 *
 * @return This entry's mode.
 */"
"@Override
public long getSize() {
    return size;
}","public void test101454() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""");
    tarArchiveEntry0.equals((Object) tarArchiveEntry0);
    assertEquals(0L, tarArchiveEntry0.getSize());
}","/**
 * Get this entry's file size.
 *
 * @return This entry's file size.
 */"
"@Deprecated
public int getGroupId() {
    return (int) (groupId & 0xffffffff);
}","public void test101455() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""");
    tarArchiveEntry0.equals((Object) tarArchiveEntry0);
    assertEquals(0, tarArchiveEntry0.getGroupId());
}","/**
 * Get this entry's group id.
 *
 * @return This entry's group id.
 * @deprecated use #getLongGroupId instead as group ids can be
 * bigger than {@link Integer#MAX_VALUE}
 */"
"@Override
public boolean isDirectory() {
    if (file != null) {
        return file.isDirectory();
    }
    if (linkFlag == LF_DIR) {
        return true;
    }
    if (getName().endsWith(""/"")) {
        return true;
    }
    return false;
}","public void test101456() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""");
    tarArchiveEntry0.equals((Object) tarArchiveEntry0);
    assertFalse(tarArchiveEntry0.isDirectory());
}","/**
 * Return whether or not this entry represents a directory.
 *
 * @return True if this entry is a directory.
 */"
"@Override
public String getName() {
    return name;
}","public void test101457() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""");
    tarArchiveEntry0.equals((Object) tarArchiveEntry0);
    assertEquals("""", tarArchiveEntry0.getName());
}","/**
 * Get this entry's name.
 *
 * @return This entry's name.
 */"
"public long getLongUserId() {
    return userId;
}","public void test101458() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""");
    tarArchiveEntry0.equals((Object) tarArchiveEntry0);
    assertEquals(0L, tarArchiveEntry0.getLongUserId());
}","/**
 * Get this entry's user id.
 *
 * @return This entry's user id.
 * @since 1.10
 */"
"public boolean isCharacterDevice() {
    return linkFlag == LF_CHR;
}","public void test102459() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    int int0 = tarArchiveEntry0.getDevMinor();
    assertFalse(tarArchiveEntry0.isCharacterDevice());
}","/**
 * Check if this is a character device entry.
 *
 * @since 1.2
 * @return whether this is a character device
 */"
"public boolean isBlockDevice() {
    return linkFlag == LF_BLK;
}","public void test102460() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    int int0 = tarArchiveEntry0.getDevMinor();
    assertFalse(tarArchiveEntry0.isBlockDevice());
}","/**
 * Check if this is a block device entry.
 *
 * @since 1.2
 * @return whether this is a block device
 */"
"public int getDevMinor() {
    return devMinor;
}","public void test102461() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    int int0 = tarArchiveEntry0.getDevMinor();
    assertEquals(0, int0);
}","/**
 * Get this entry's minor device number.
 *
 * @return This entry's minor device number.
 * @since 1.4
 */"
"@Override
public String getName() {
    return name;
}","public void test102462() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    int int0 = tarArchiveEntry0.getDevMinor();
    assertEquals(""AJeNewn|eBElUQ!="", tarArchiveEntry0.getName());
}","/**
 * Get this entry's name.
 *
 * @return This entry's name.
 */"
"public int getMode() {
    return mode;
}","public void test102463() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    int int0 = tarArchiveEntry0.getDevMinor();
    assertEquals(33188, tarArchiveEntry0.getMode());
}","/**
 * Get this entry's mode.
 *
 * @return This entry's mode.
 */"
"public int getDevMajor() {
    return devMajor;
}","public void test102464() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    int int0 = tarArchiveEntry0.getDevMinor();
    assertEquals(0, tarArchiveEntry0.getDevMajor());
}","/**
 * Get this entry's major device number.
 *
 * @return This entry's major device number.
 * @since 1.4
 */"
"@Deprecated
public int getGroupId() {
    return (int) (groupId & 0xffffffff);
}","public void test102465() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    int int0 = tarArchiveEntry0.getDevMinor();
    assertEquals(0, tarArchiveEntry0.getGroupId());
}","/**
 * Get this entry's group id.
 *
 * @return This entry's group id.
 * @deprecated use #getLongGroupId instead as group ids can be
 * bigger than {@link Integer#MAX_VALUE}
 */"
"public boolean isPaxHeader() {
    return linkFlag == LF_PAX_EXTENDED_HEADER_LC || linkFlag == LF_PAX_EXTENDED_HEADER_UC;
}","public void test102466() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    int int0 = tarArchiveEntry0.getDevMinor();
    assertFalse(tarArchiveEntry0.isPaxHeader());
}","/**
 * Check if this is a Pax header.
 *
 * @return {@code true} if this is a Pax header.
 *
 * @since 1.1
 */"
"@Override
public long getSize() {
    return size;
}","public void test102467() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    int int0 = tarArchiveEntry0.getDevMinor();
    assertEquals(0L, tarArchiveEntry0.getSize());
}","/**
 * Get this entry's file size.
 *
 * @return This entry's file size.
 */"
"public boolean isGNUSparse() {
    return isOldGNUSparse() || isPaxGNUSparse();
}","public void test102468() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    int int0 = tarArchiveEntry0.getDevMinor();
    assertFalse(tarArchiveEntry0.isGNUSparse());
}","/**
 * Indicate if this entry is a GNU sparse block.
 *
 * @return true if this is a sparse extension provided by GNU tar
 */"
"public int getDevMajor() {
    return devMajor;
}","public void test103469() throws Throwable {
    File file0 = MockFile.createTempFile("" byte binary number"", "" byte binary number"");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
    tarArchiveEntry0.equals(tarArchiveEntry0);
    assertEquals(0, tarArchiveEntry0.getDevMajor());
}","/**
 * Get this entry's major device number.
 *
 * @return This entry's major device number.
 * @since 1.4
 */"
"@Deprecated
public int getUserId() {
    return (int) (userId & 0xffffffff);
}","public void test103470() throws Throwable {
    File file0 = MockFile.createTempFile("" byte binary number"", "" byte binary number"");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
    tarArchiveEntry0.equals(tarArchiveEntry0);
    assertEquals(0, tarArchiveEntry0.getUserId());
}","/**
 * Get this entry's user id.
 *
 * @return This entry's user id.
 * @deprecated use #getLongUserId instead as user ids can be
 * bigger than {@link Integer#MAX_VALUE}
 */"
"@Override
public String getName() {
    return name;
}","public void test103471() throws Throwable {
    File file0 = MockFile.createTempFile("" byte binary number"", "" byte binary number"");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
    tarArchiveEntry0.equals(tarArchiveEntry0);
    assertEquals(""var/folders/vv/c7q6vm8920vc7d5p_87011w40000gn/T/ byte binary number0 byte binary number"", tarArchiveEntry0.getName());
}","/**
 * Get this entry's name.
 *
 * @return This entry's name.
 */"
"@Deprecated
public int getGroupId() {
    return (int) (groupId & 0xffffffff);
}","public void test103472() throws Throwable {
    File file0 = MockFile.createTempFile("" byte binary number"", "" byte binary number"");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
    tarArchiveEntry0.equals(tarArchiveEntry0);
    assertEquals(0, tarArchiveEntry0.getGroupId());
}","/**
 * Get this entry's group id.
 *
 * @return This entry's group id.
 * @deprecated use #getLongGroupId instead as group ids can be
 * bigger than {@link Integer#MAX_VALUE}
 */"
"public int getDevMinor() {
    return devMinor;
}","public void test103473() throws Throwable {
    File file0 = MockFile.createTempFile("" byte binary number"", "" byte binary number"");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
    tarArchiveEntry0.equals(tarArchiveEntry0);
    assertEquals(0, tarArchiveEntry0.getDevMinor());
}","/**
 * Get this entry's minor device number.
 *
 * @return This entry's minor device number.
 * @since 1.4
 */"
"public TarArchiveEntry(final byte[] headerBuf, final ZipEncoding encoding) throws IOException {
    this();
    parseTarHeader(headerBuf, encoding);
}","public void test104474() throws Throwable {
    ZipEncoding zipEncoding0 = mock(ZipEncoding.class, new ViolatedAssumptionAnswer());
    TarArchiveEntry tarArchiveEntry0 = null;
    try {
        tarArchiveEntry0 = new TarArchiveEntry((byte[]) null, zipEncoding0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarUtils"", e);
    }
}","/**
 * Construct an entry from an archive's header bytes. File is set
 * to null.
 *
 * @param headerBuf The header bytes from a tar archive entry.
 * @param encoding encoding to use for file names
 * @since 1.4
 * @throws IllegalArgumentException if any of the numeric fields have an invalid format
 * @throws IOException on error
 */"
"@Override
public boolean isDirectory() {
    if (file != null) {
        return file.isDirectory();
    }
    if (linkFlag == LF_DIR) {
        return true;
    }
    if (getName().endsWith(""/"")) {
        return true;
    }
    return false;
}","public void test105475() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""US-ASCII"", (byte) 124);
    Date date0 = tarArchiveEntry0.getLastModifiedDate();
    tarArchiveEntry0.setModTime(date0);
    assertFalse(tarArchiveEntry0.isDirectory());
}","/**
 * Return whether or not this entry represents a directory.
 *
 * @return True if this entry is a directory.
 */"
"public boolean isGNULongLinkEntry() {
    return linkFlag == LF_GNUTYPE_LONGLINK;
}","public void test105476() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""US-ASCII"", (byte) 124);
    Date date0 = tarArchiveEntry0.getLastModifiedDate();
    tarArchiveEntry0.setModTime(date0);
    assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
}","/**
 * Indicate if this entry is a GNU long linkname block
 *
 * @return true if this is a long name extension provided by GNU tar
 */"
"@Deprecated
public int getGroupId() {
    return (int) (groupId & 0xffffffff);
}","public void test105477() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""US-ASCII"", (byte) 124);
    Date date0 = tarArchiveEntry0.getLastModifiedDate();
    tarArchiveEntry0.setModTime(date0);
    assertEquals(0, tarArchiveEntry0.getGroupId());
}","/**
 * Get this entry's group id.
 *
 * @return This entry's group id.
 * @deprecated use #getLongGroupId instead as group ids can be
 * bigger than {@link Integer#MAX_VALUE}
 */"
"@Override
public String getName() {
    return name;
}","public void test105478() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""US-ASCII"", (byte) 124);
    Date date0 = tarArchiveEntry0.getLastModifiedDate();
    tarArchiveEntry0.setModTime(date0);
    assertEquals(""US-ASCII"", tarArchiveEntry0.getName());
}","/**
 * Get this entry's name.
 *
 * @return This entry's name.
 */"
"public int getDevMinor() {
    return devMinor;
}","public void test105479() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""US-ASCII"", (byte) 124);
    Date date0 = tarArchiveEntry0.getLastModifiedDate();
    tarArchiveEntry0.setModTime(date0);
    assertEquals(0, tarArchiveEntry0.getDevMinor());
}","/**
 * Get this entry's minor device number.
 *
 * @return This entry's minor device number.
 * @since 1.4
 */"
"public int getMode() {
    return mode;
}","public void test105480() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""US-ASCII"", (byte) 124);
    Date date0 = tarArchiveEntry0.getLastModifiedDate();
    tarArchiveEntry0.setModTime(date0);
    assertEquals(33188, tarArchiveEntry0.getMode());
}","/**
 * Get this entry's mode.
 *
 * @return This entry's mode.
 */"
"public long getLongUserId() {
    return userId;
}","public void test105481() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""US-ASCII"", (byte) 124);
    Date date0 = tarArchiveEntry0.getLastModifiedDate();
    tarArchiveEntry0.setModTime(date0);
    assertEquals(0L, tarArchiveEntry0.getLongUserId());
}","/**
 * Get this entry's user id.
 *
 * @return This entry's user id.
 * @since 1.10
 */"
"public boolean isGlobalPaxHeader() {
    return linkFlag == LF_PAX_GLOBAL_EXTENDED_HEADER;
}","public void test105483() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""US-ASCII"", (byte) 124);
    Date date0 = tarArchiveEntry0.getLastModifiedDate();
    tarArchiveEntry0.setModTime(date0);
    assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
}","/**
 * Check if this is a Pax header.
 *
 * @return {@code true} if this is a Pax header.
 *
 * @since 1.1
 */"
"public boolean isFIFO() {
    return linkFlag == LF_FIFO;
}","public void test105484() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""US-ASCII"", (byte) 124);
    Date date0 = tarArchiveEntry0.getLastModifiedDate();
    tarArchiveEntry0.setModTime(date0);
    assertFalse(tarArchiveEntry0.isFIFO());
}","/**
 * Check if this is a FIFO (pipe) entry.
 *
 * @since 1.2
 * @return whether this is a FIFO entry
 */"
"@Override
public String getName() {
    return name;
}","public void test106485() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    String string0 = tarArchiveEntry0.getLinkName();
    assertEquals(""!S"", tarArchiveEntry0.getName());
}","/**
 * Get this entry's name.
 *
 * @return This entry's name.
 */"
"@Override
public long getSize() {
    return size;
}","public void test106486() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    String string0 = tarArchiveEntry0.getLinkName();
    assertEquals(0L, tarArchiveEntry0.getSize());
}","/**
 * Get this entry's file size.
 *
 * @return This entry's file size.
 */"
"public int getMode() {
    return mode;
}","public void test106487() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    String string0 = tarArchiveEntry0.getLinkName();
    assertEquals(33188, tarArchiveEntry0.getMode());
}","/**
 * Get this entry's mode.
 *
 * @return This entry's mode.
 */"
"public int getDevMajor() {
    return devMajor;
}","public void test106488() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    String string0 = tarArchiveEntry0.getLinkName();
    assertEquals(0, tarArchiveEntry0.getDevMajor());
}","/**
 * Get this entry's major device number.
 *
 * @return This entry's major device number.
 * @since 1.4
 */"
"public boolean isGNULongNameEntry() {
    return linkFlag == LF_GNUTYPE_LONGNAME;
}","public void test106489() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    String string0 = tarArchiveEntry0.getLinkName();
    assertFalse(tarArchiveEntry0.isGNULongNameEntry());
}","/**
 * Indicate if this entry is a GNU long name block
 *
 * @return true if this is a long name extension provided by GNU tar
 */"
"public boolean isPaxHeader() {
    return linkFlag == LF_PAX_EXTENDED_HEADER_LC || linkFlag == LF_PAX_EXTENDED_HEADER_UC;
}","public void test106490() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    String string0 = tarArchiveEntry0.getLinkName();
    assertFalse(tarArchiveEntry0.isPaxHeader());
}","/**
 * Check if this is a Pax header.
 *
 * @return {@code true} if this is a Pax header.
 *
 * @since 1.1
 */"
"public boolean isFIFO() {
    return linkFlag == LF_FIFO;
}","public void test106491() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    String string0 = tarArchiveEntry0.getLinkName();
    assertFalse(tarArchiveEntry0.isFIFO());
}","/**
 * Check if this is a FIFO (pipe) entry.
 *
 * @since 1.2
 * @return whether this is a FIFO entry
 */"
"public boolean isSymbolicLink() {
    return linkFlag == LF_SYMLINK;
}","public void test106492() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    String string0 = tarArchiveEntry0.getLinkName();
    assertFalse(tarArchiveEntry0.isSymbolicLink());
}","/**
 * Check if this is a symbolic link entry.
 *
 * @since 1.2
 * @return whether this is a symbolic link
 */"
"public String getLinkName() {
    return linkName;
}","public void test106493() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    String string0 = tarArchiveEntry0.getLinkName();
    assertEquals("""", string0);
}","/**
 * Get this entry's link name.
 *
 * @return This entry's link name.
 */"
"public long getLongGroupId() {
    return groupId;
}","public void test106494() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    String string0 = tarArchiveEntry0.getLinkName();
    assertEquals(0L, tarArchiveEntry0.getLongGroupId());
}","/**
 * Get this entry's group id.
 *
 * @since 1.10
 * @return This entry's group id.
 */"
"public boolean isLink() {
    return linkFlag == LF_LINK;
}","public void test106495() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    String string0 = tarArchiveEntry0.getLinkName();
    assertFalse(tarArchiveEntry0.isLink());
}","/**
 * Check if this is a link entry.
 *
 * @since 1.2
 * @return whether this is a link entry
 */"
"public int getDevMinor() {
    return devMinor;
}","public void test106496() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    String string0 = tarArchiveEntry0.getLinkName();
    assertEquals(0, tarArchiveEntry0.getDevMinor());
}","/**
 * Get this entry's minor device number.
 *
 * @return This entry's minor device number.
 * @since 1.4
 */"
"@Override
public String getName() {
    return name;
}","public void test107497() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"", true);
    long long0 = tarArchiveEntry0.getRealSize();
    assertEquals(""6+\""|M&Us47]k"", tarArchiveEntry0.getName());
}","/**
 * Get this entry's name.
 *
 * @return This entry's name.
 */"
"@Override
public long getSize() {
    return size;
}","public void test107498() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"", true);
    long long0 = tarArchiveEntry0.getRealSize();
    assertEquals(0L, tarArchiveEntry0.getSize());
}","/**
 * Get this entry's file size.
 *
 * @return This entry's file size.
 */"
"public int getMode() {
    return mode;
}","public void test107499() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"", true);
    long long0 = tarArchiveEntry0.getRealSize();
    assertEquals(33188, tarArchiveEntry0.getMode());
}","/**
 * Get this entry's mode.
 *
 * @return This entry's mode.
 */"
"public int getDevMajor() {
    return devMajor;
}","public void test107500() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"", true);
    long long0 = tarArchiveEntry0.getRealSize();
    assertEquals(0, tarArchiveEntry0.getDevMajor());
}","/**
 * Get this entry's major device number.
 *
 * @return This entry's major device number.
 * @since 1.4
 */"
"@Deprecated
public int getGroupId() {
    return (int) (groupId & 0xffffffff);
}","public void test107501() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"", true);
    long long0 = tarArchiveEntry0.getRealSize();
    assertEquals(0, tarArchiveEntry0.getGroupId());
}","/**
 * Get this entry's group id.
 *
 * @return This entry's group id.
 * @deprecated use #getLongGroupId instead as group ids can be
 * bigger than {@link Integer#MAX_VALUE}
 */"
"@Override
public boolean isDirectory() {
    if (file != null) {
        return file.isDirectory();
    }
    if (linkFlag == LF_DIR) {
        return true;
    }
    if (getName().endsWith(""/"")) {
        return true;
    }
    return false;
}","public void test107502() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"", true);
    long long0 = tarArchiveEntry0.getRealSize();
    assertFalse(tarArchiveEntry0.isDirectory());
}","/**
 * Return whether or not this entry represents a directory.
 *
 * @return True if this entry is a directory.
 */"
"public long getRealSize() {
    return realSize;
}","public void test107503() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"", true);
    long long0 = tarArchiveEntry0.getRealSize();
    assertEquals(0L, long0);
}","/**
 * Get this entry's real file size in case of a sparse file.
 *
 * @return This entry's real file size.
 */"
"@Deprecated
public int getUserId() {
    return (int) (userId & 0xffffffff);
}","public void test107504() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"", true);
    long long0 = tarArchiveEntry0.getRealSize();
    assertEquals(0, tarArchiveEntry0.getUserId());
}","/**
 * Get this entry's user id.
 *
 * @return This entry's user id.
 * @deprecated use #getLongUserId instead as user ids can be
 * bigger than {@link Integer#MAX_VALUE}
 */"
"public boolean isLink() {
    return linkFlag == LF_LINK;
}","public void test107505() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"", true);
    long long0 = tarArchiveEntry0.getRealSize();
    assertFalse(tarArchiveEntry0.isLink());
}","/**
 * Check if this is a link entry.
 *
 * @since 1.2
 * @return whether this is a link entry
 */"
"public boolean isGNULongLinkEntry() {
    return linkFlag == LF_GNUTYPE_LONGLINK;
}","public void test108506() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    tarArchiveEntry0.isExtended();
    assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
}","/**
 * Indicate if this entry is a GNU long linkname block
 *
 * @return true if this is a long name extension provided by GNU tar
 */"
"public int getDevMajor() {
    return devMajor;
}","public void test108507() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    tarArchiveEntry0.isExtended();
    assertEquals(0, tarArchiveEntry0.getDevMajor());
}","/**
 * Get this entry's major device number.
 *
 * @return This entry's major device number.
 * @since 1.4
 */"
"public boolean isFIFO() {
    return linkFlag == LF_FIFO;
}","public void test108508() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    tarArchiveEntry0.isExtended();
    assertFalse(tarArchiveEntry0.isFIFO());
}","/**
 * Check if this is a FIFO (pipe) entry.
 *
 * @since 1.2
 * @return whether this is a FIFO entry
 */"
"public long getLongGroupId() {
    return groupId;
}","public void test108509() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    tarArchiveEntry0.isExtended();
    assertEquals(0L, tarArchiveEntry0.getLongGroupId());
}","/**
 * Get this entry's group id.
 *
 * @since 1.10
 * @return This entry's group id.
 */"
"public int getMode() {
    return mode;
}","public void test108510() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    tarArchiveEntry0.isExtended();
    assertEquals(33188, tarArchiveEntry0.getMode());
}","/**
 * Get this entry's mode.
 *
 * @return This entry's mode.
 */"
"public int getDevMinor() {
    return devMinor;
}","public void test108511() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    tarArchiveEntry0.isExtended();
    assertEquals(0, tarArchiveEntry0.getDevMinor());
}","/**
 * Get this entry's minor device number.
 *
 * @return This entry's minor device number.
 * @since 1.4
 */"
"public boolean isGNULongNameEntry() {
    return linkFlag == LF_GNUTYPE_LONGNAME;
}","public void test108512() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    tarArchiveEntry0.isExtended();
    assertFalse(tarArchiveEntry0.isGNULongNameEntry());
}","/**
 * Indicate if this entry is a GNU long name block
 *
 * @return true if this is a long name extension provided by GNU tar
 */"
"@Override
public boolean isDirectory() {
    if (file != null) {
        return file.isDirectory();
    }
    if (linkFlag == LF_DIR) {
        return true;
    }
    if (getName().endsWith(""/"")) {
        return true;
    }
    return false;
}","public void test108513() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    tarArchiveEntry0.isExtended();
    assertFalse(tarArchiveEntry0.isDirectory());
}","/**
 * Return whether or not this entry represents a directory.
 *
 * @return True if this entry is a directory.
 */"
"@Override
public String getName() {
    return name;
}","public void test108514() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    tarArchiveEntry0.isExtended();
    assertEquals(""!S"", tarArchiveEntry0.getName());
}","/**
 * Get this entry's name.
 *
 * @return This entry's name.
 */"
"@Override
public long getSize() {
    return size;
}","public void test108515() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    tarArchiveEntry0.isExtended();
    assertEquals(0L, tarArchiveEntry0.getSize());
}","/**
 * Get this entry's file size.
 *
 * @return This entry's file size.
 */"
"public boolean isGNUSparse() {
    return isOldGNUSparse() || isPaxGNUSparse();
}","public void test108516() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    tarArchiveEntry0.isExtended();
    assertFalse(tarArchiveEntry0.isGNUSparse());
}","/**
 * Indicate if this entry is a GNU sparse block.
 *
 * @return true if this is a sparse extension provided by GNU tar
 */"
"public boolean isPaxHeader() {
    return linkFlag == LF_PAX_EXTENDED_HEADER_LC || linkFlag == LF_PAX_EXTENDED_HEADER_UC;
}","public void test108517() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    tarArchiveEntry0.isExtended();
    assertFalse(tarArchiveEntry0.isPaxHeader());
}","/**
 * Check if this is a Pax header.
 *
 * @return {@code true} if this is a Pax header.
 *
 * @since 1.1
 */"
"public boolean isCharacterDevice() {
    return linkFlag == LF_CHR;
}","public void test108518() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    tarArchiveEntry0.isExtended();
    assertFalse(tarArchiveEntry0.isCharacterDevice());
}","/**
 * Check if this is a character device entry.
 *
 * @since 1.2
 * @return whether this is a character device
 */"
"@Override
public String getName() {
    return name;
}","public void test109519() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    long long0 = tarArchiveEntry0.getLongGroupId();
    assertEquals("""", tarArchiveEntry0.getName());
}","/**
 * Get this entry's name.
 *
 * @return This entry's name.
 */"
"public long getLongGroupId() {
    return groupId;
}","public void test109520() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    long long0 = tarArchiveEntry0.getLongGroupId();
    assertEquals(0L, long0);
}","/**
 * Get this entry's group id.
 *
 * @since 1.10
 * @return This entry's group id.
 */"
"public boolean isSymbolicLink() {
    return linkFlag == LF_SYMLINK;
}","public void test109521() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    long long0 = tarArchiveEntry0.getLongGroupId();
    assertFalse(tarArchiveEntry0.isSymbolicLink());
}","/**
 * Check if this is a symbolic link entry.
 *
 * @since 1.2
 * @return whether this is a symbolic link
 */"
"@Override
public long getSize() {
    return size;
}","public void test109522() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    long long0 = tarArchiveEntry0.getLongGroupId();
    assertEquals(0L, tarArchiveEntry0.getSize());
}","/**
 * Get this entry's file size.
 *
 * @return This entry's file size.
 */"
"@Deprecated
public int getUserId() {
    return (int) (userId & 0xffffffff);
}","public void test109523() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    long long0 = tarArchiveEntry0.getLongGroupId();
    assertEquals(0, tarArchiveEntry0.getUserId());
}","/**
 * Get this entry's user id.
 *
 * @return This entry's user id.
 * @deprecated use #getLongUserId instead as user ids can be
 * bigger than {@link Integer#MAX_VALUE}
 */"
"public boolean isPaxHeader() {
    return linkFlag == LF_PAX_EXTENDED_HEADER_LC || linkFlag == LF_PAX_EXTENDED_HEADER_UC;
}","public void test109524() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    long long0 = tarArchiveEntry0.getLongGroupId();
    assertFalse(tarArchiveEntry0.isPaxHeader());
}","/**
 * Check if this is a Pax header.
 *
 * @return {@code true} if this is a Pax header.
 *
 * @since 1.1
 */"
"public int getMode() {
    return mode;
}","public void test109525() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    long long0 = tarArchiveEntry0.getLongGroupId();
    assertEquals(33188, tarArchiveEntry0.getMode());
}","/**
 * Get this entry's mode.
 *
 * @return This entry's mode.
 */"
"public boolean isSparse() {
    return isGNUSparse() || isStarSparse();
}","public void test109526() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    long long0 = tarArchiveEntry0.getLongGroupId();
    assertFalse(tarArchiveEntry0.isSparse());
}","/**
 * Check whether this is a sparse entry.
 *
 * @return whether this is a sparse entry
 * @since 1.11
 */"
"public boolean isFIFO() {
    return linkFlag == LF_FIFO;
}","public void test110527() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    int int0 = tarArchiveEntry0.getGroupId();
    assertFalse(tarArchiveEntry0.isFIFO());
}","/**
 * Check if this is a FIFO (pipe) entry.
 *
 * @since 1.2
 * @return whether this is a FIFO entry
 */"
"public boolean isGlobalPaxHeader() {
    return linkFlag == LF_PAX_GLOBAL_EXTENDED_HEADER;
}","public void test110528() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    int int0 = tarArchiveEntry0.getGroupId();
    assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
}","/**
 * Check if this is a Pax header.
 *
 * @return {@code true} if this is a Pax header.
 *
 * @since 1.1
 */"
"public int getMode() {
    return mode;
}","public void test110529() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    int int0 = tarArchiveEntry0.getGroupId();
    assertEquals(33188, tarArchiveEntry0.getMode());
}","/**
 * Get this entry's mode.
 *
 * @return This entry's mode.
 */"
"@Deprecated
public int getGroupId() {
    return (int) (groupId & 0xffffffff);
}","public void test110530() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    int int0 = tarArchiveEntry0.getGroupId();
    assertEquals(0, int0);
}","/**
 * Get this entry's group id.
 *
 * @return This entry's group id.
 * @deprecated use #getLongGroupId instead as group ids can be
 * bigger than {@link Integer#MAX_VALUE}
 */"
"public boolean isBlockDevice() {
    return linkFlag == LF_BLK;
}","public void test110531() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    int int0 = tarArchiveEntry0.getGroupId();
    assertFalse(tarArchiveEntry0.isBlockDevice());
}","/**
 * Check if this is a block device entry.
 *
 * @since 1.2
 * @return whether this is a block device
 */"
"@Override
public String getName() {
    return name;
}","public void test110532() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    int int0 = tarArchiveEntry0.getGroupId();
    assertEquals(""!S"", tarArchiveEntry0.getName());
}","/**
 * Get this entry's name.
 *
 * @return This entry's name.
 */"
"public boolean isLink() {
    return linkFlag == LF_LINK;
}","public void test110533() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""!S"", (byte) (-19), false);
    int int0 = tarArchiveEntry0.getGroupId();
    assertFalse(tarArchiveEntry0.isLink());
}","/**
 * Check if this is a link entry.
 *
 * @since 1.2
 * @return whether this is a link entry
 */"
"public boolean isCharacterDevice() {
    return linkFlag == LF_CHR;
}","public void test111534() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    tarArchiveEntry0.isDescendent(tarArchiveEntry0);
    assertFalse(tarArchiveEntry0.isCharacterDevice());
}","/**
 * Check if this is a character device entry.
 *
 * @since 1.2
 * @return whether this is a character device
 */"
"public int getDevMinor() {
    return devMinor;
}","public void test111535() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    tarArchiveEntry0.isDescendent(tarArchiveEntry0);
    assertEquals(0, tarArchiveEntry0.getDevMinor());
}","/**
 * Get this entry's minor device number.
 *
 * @return This entry's minor device number.
 * @since 1.4
 */"
"public boolean isBlockDevice() {
    return linkFlag == LF_BLK;
}","public void test111536() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    tarArchiveEntry0.isDescendent(tarArchiveEntry0);
    assertFalse(tarArchiveEntry0.isBlockDevice());
}","/**
 * Check if this is a block device entry.
 *
 * @since 1.2
 * @return whether this is a block device
 */"
"public boolean isSymbolicLink() {
    return linkFlag == LF_SYMLINK;
}","public void test111537() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    tarArchiveEntry0.isDescendent(tarArchiveEntry0);
    assertFalse(tarArchiveEntry0.isSymbolicLink());
}","/**
 * Check if this is a symbolic link entry.
 *
 * @since 1.2
 * @return whether this is a symbolic link
 */"
"public boolean isGlobalPaxHeader() {
    return linkFlag == LF_PAX_GLOBAL_EXTENDED_HEADER;
}","public void test111538() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    tarArchiveEntry0.isDescendent(tarArchiveEntry0);
    assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
}","/**
 * Check if this is a Pax header.
 *
 * @return {@code true} if this is a Pax header.
 *
 * @since 1.1
 */"
"public int getMode() {
    return mode;
}","public void test111539() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    tarArchiveEntry0.isDescendent(tarArchiveEntry0);
    assertEquals(33188, tarArchiveEntry0.getMode());
}","/**
 * Get this entry's mode.
 *
 * @return This entry's mode.
 */"
"public boolean isPaxHeader() {
    return linkFlag == LF_PAX_EXTENDED_HEADER_LC || linkFlag == LF_PAX_EXTENDED_HEADER_UC;
}","public void test111540() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    tarArchiveEntry0.isDescendent(tarArchiveEntry0);
    assertFalse(tarArchiveEntry0.isPaxHeader());
}","/**
 * Check if this is a Pax header.
 *
 * @return {@code true} if this is a Pax header.
 *
 * @since 1.1
 */"
"@Override
public String getName() {
    return name;
}","public void test111541() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    tarArchiveEntry0.isDescendent(tarArchiveEntry0);
    assertEquals("""", tarArchiveEntry0.getName());
}","/**
 * Get this entry's name.
 *
 * @return This entry's name.
 */"
"public boolean isGNULongLinkEntry() {
    return linkFlag == LF_GNUTYPE_LONGLINK;
}","public void test112542() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    tarArchiveEntry0.hashCode();
    assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
}","/**
 * Indicate if this entry is a GNU long linkname block
 *
 * @return true if this is a long name extension provided by GNU tar
 */"
"public long getLongGroupId() {
    return groupId;
}","public void test112543() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    tarArchiveEntry0.hashCode();
    assertEquals(0L, tarArchiveEntry0.getLongGroupId());
}","/**
 * Get this entry's group id.
 *
 * @since 1.10
 * @return This entry's group id.
 */"
"@Override
public long getSize() {
    return size;
}","public void test112544() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    tarArchiveEntry0.hashCode();
    assertEquals(0L, tarArchiveEntry0.getSize());
}","/**
 * Get this entry's file size.
 *
 * @return This entry's file size.
 */"
"public int getDevMinor() {
    return devMinor;
}","public void test112545() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    tarArchiveEntry0.hashCode();
    assertEquals(0, tarArchiveEntry0.getDevMinor());
}","/**
 * Get this entry's minor device number.
 *
 * @return This entry's minor device number.
 * @since 1.4
 */"
"public boolean isBlockDevice() {
    return linkFlag == LF_BLK;
}","public void test112546() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    tarArchiveEntry0.hashCode();
    assertFalse(tarArchiveEntry0.isBlockDevice());
}","/**
 * Check if this is a block device entry.
 *
 * @since 1.2
 * @return whether this is a block device
 */"
"public long getLongUserId() {
    return userId;
}","public void test112547() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    tarArchiveEntry0.hashCode();
    assertEquals(0L, tarArchiveEntry0.getLongUserId());
}","/**
 * Get this entry's user id.
 *
 * @return This entry's user id.
 * @since 1.10
 */"
"@Override
public String getName() {
    return name;
}","public void test112548() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    tarArchiveEntry0.hashCode();
    assertEquals("""", tarArchiveEntry0.getName());
}","/**
 * Get this entry's name.
 *
 * @return This entry's name.
 */"
"public boolean isGNULongNameEntry() {
    return linkFlag == LF_GNUTYPE_LONGNAME;
}","public void test112549() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    tarArchiveEntry0.hashCode();
    assertFalse(tarArchiveEntry0.isGNULongNameEntry());
}","/**
 * Indicate if this entry is a GNU long name block
 *
 * @return true if this is a long name extension provided by GNU tar
 */"
"public int getMode() {
    return mode;
}","public void test112550() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    tarArchiveEntry0.hashCode();
    assertEquals(33188, tarArchiveEntry0.getMode());
}","/**
 * Get this entry's mode.
 *
 * @return This entry's mode.
 */"
"public int getDevMajor() {
    return devMajor;
}","public void test112551() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""", (byte) (-126));
    tarArchiveEntry0.hashCode();
    assertEquals(0, tarArchiveEntry0.getDevMajor());
}","/**
 * Get this entry's major device number.
 *
 * @return This entry's major device number.
 * @since 1.4
 */"
"public int getDevMajor() {
    return devMajor;
}","public void test113552() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"", true);
    tarArchiveEntry0.isCheckSumOK();
    assertEquals(0, tarArchiveEntry0.getDevMajor());
}","/**
 * Get this entry's major device number.
 *
 * @return This entry's major device number.
 * @since 1.4
 */"
"public int getDevMinor() {
    return devMinor;
}","public void test113553() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"", true);
    tarArchiveEntry0.isCheckSumOK();
    assertEquals(0, tarArchiveEntry0.getDevMinor());
}","/**
 * Get this entry's minor device number.
 *
 * @return This entry's minor device number.
 * @since 1.4
 */"
"public int getMode() {
    return mode;
}","public void test113554() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"", true);
    tarArchiveEntry0.isCheckSumOK();
    assertEquals(33188, tarArchiveEntry0.getMode());
}","/**
 * Get this entry's mode.
 *
 * @return This entry's mode.
 */"
"@Deprecated
public int getUserId() {
    return (int) (userId & 0xffffffff);
}","public void test113555() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"", true);
    tarArchiveEntry0.isCheckSumOK();
    assertEquals(0, tarArchiveEntry0.getUserId());
}","/**
 * Get this entry's user id.
 *
 * @return This entry's user id.
 * @deprecated use #getLongUserId instead as user ids can be
 * bigger than {@link Integer#MAX_VALUE}
 */"
"@Override
public long getSize() {
    return size;
}","public void test113556() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"", true);
    tarArchiveEntry0.isCheckSumOK();
    assertEquals(0L, tarArchiveEntry0.getSize());
}","/**
 * Get this entry's file size.
 *
 * @return This entry's file size.
 */"
"@Override
public boolean isDirectory() {
    if (file != null) {
        return file.isDirectory();
    }
    if (linkFlag == LF_DIR) {
        return true;
    }
    if (getName().endsWith(""/"")) {
        return true;
    }
    return false;
}","public void test113557() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"", true);
    tarArchiveEntry0.isCheckSumOK();
    assertFalse(tarArchiveEntry0.isDirectory());
}","/**
 * Return whether or not this entry represents a directory.
 *
 * @return True if this entry is a directory.
 */"
"@Override
public String getName() {
    return name;
}","public void test113558() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"", true);
    tarArchiveEntry0.isCheckSumOK();
    assertEquals(""6+\""|M&Us47]k"", tarArchiveEntry0.getName());
}","/**
 * Get this entry's name.
 *
 * @return This entry's name.
 */"
"public long getLongGroupId() {
    return groupId;
}","public void test113559() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"", true);
    tarArchiveEntry0.isCheckSumOK();
    assertEquals(0L, tarArchiveEntry0.getLongGroupId());
}","/**
 * Get this entry's group id.
 *
 * @since 1.10
 * @return This entry's group id.
 */"
"public void writeEntryHeader(final byte[] outbuf) {
    try {
        writeEntryHeader(outbuf, TarUtils.DEFAULT_ENCODING, false);
    } catch (final IOException ex) {
        try {
            writeEntryHeader(outbuf, TarUtils.FALLBACK_ENCODING, false);
        } catch (final IOException ex2) {
            // impossible
            throw new RuntimeException(ex2);
        }
    }
}","public void test114560() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""EgTf$"", true);
    byte[] byteArray0 = new byte[8];
    // Undeclared exception!
    try {
        tarArchiveEntry0.writeEntryHeader(byteArray0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 8
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarUtils"", e);
    }
}","/**
 * Write an entry's header information to a header buffer.
 *
 * <p>This method does not use the star/GNU tar/BSD tar extensions.</p>
 *
 * @param outbuf The tar entry header buffer to fill in.
 */"
"public boolean isBlockDevice() {
    return linkFlag == LF_BLK;
}","public void test115561() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, """");
    int int0 = tarArchiveEntry0.getDevMajor();
    assertFalse(tarArchiveEntry0.isBlockDevice());
}","/**
 * Check if this is a block device entry.
 *
 * @since 1.2
 * @return whether this is a block device
 */"
"public int getMode() {
    return mode;
}","public void test115562() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, """");
    int int0 = tarArchiveEntry0.getDevMajor();
    assertEquals(16877, tarArchiveEntry0.getMode());
}","/**
 * Get this entry's mode.
 *
 * @return This entry's mode.
 */"
"@Override
public String getName() {
    return name;
}","public void test115563() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, """");
    int int0 = tarArchiveEntry0.getDevMajor();
    assertEquals(""/"", tarArchiveEntry0.getName());
}","/**
 * Get this entry's name.
 *
 * @return This entry's name.
 */"
"public int getDevMinor() {
    return devMinor;
}","public void test115564() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, """");
    int int0 = tarArchiveEntry0.getDevMajor();
    assertEquals(0, tarArchiveEntry0.getDevMinor());
}","/**
 * Get this entry's minor device number.
 *
 * @return This entry's minor device number.
 * @since 1.4
 */"
"@Override
public long getSize() {
    return size;
}","public void test115565() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, """");
    int int0 = tarArchiveEntry0.getDevMajor();
    assertEquals(0L, tarArchiveEntry0.getSize());
}","/**
 * Get this entry's file size.
 *
 * @return This entry's file size.
 */"
"@Deprecated
public int getUserId() {
    return (int) (userId & 0xffffffff);
}","public void test115566() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, """");
    int int0 = tarArchiveEntry0.getDevMajor();
    assertEquals(0, tarArchiveEntry0.getUserId());
}","/**
 * Get this entry's user id.
 *
 * @return This entry's user id.
 * @deprecated use #getLongUserId instead as user ids can be
 * bigger than {@link Integer#MAX_VALUE}
 */"
"public int getDevMajor() {
    return devMajor;
}","public void test115567() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, """");
    int int0 = tarArchiveEntry0.getDevMajor();
    assertEquals(0, int0);
}","/**
 * Get this entry's major device number.
 *
 * @return This entry's major device number.
 * @since 1.4
 */"
"@Override
public String getName() {
    return name;
}","public void test116568() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, ""Minor device number is out of range: "");
    MockFile.createTempFile("" exceeds maximum signed long"", "", /"", (File) mockFile0);
    tarArchiveEntry0.getDirectoryEntries();
    assertEquals(""Minor device number is out of range: /"", tarArchiveEntry0.getName());
}","/**
 * Get this entry's name.
 *
 * @return This entry's name.
 */"
"public long getLongGroupId() {
    return groupId;
}","public void test116569() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, ""Minor device number is out of range: "");
    MockFile.createTempFile("" exceeds maximum signed long"", "", /"", (File) mockFile0);
    tarArchiveEntry0.getDirectoryEntries();
    assertEquals(0L, tarArchiveEntry0.getLongGroupId());
}","/**
 * Get this entry's group id.
 *
 * @since 1.10
 * @return This entry's group id.
 */"
"public int getDevMajor() {
    return devMajor;
}","public void test116570() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, ""Minor device number is out of range: "");
    MockFile.createTempFile("" exceeds maximum signed long"", "", /"", (File) mockFile0);
    tarArchiveEntry0.getDirectoryEntries();
    assertEquals(0, tarArchiveEntry0.getDevMajor());
}","/**
 * Get this entry's major device number.
 *
 * @return This entry's major device number.
 * @since 1.4
 */"
"public int getMode() {
    return mode;
}","public void test116571() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, ""Minor device number is out of range: "");
    MockFile.createTempFile("" exceeds maximum signed long"", "", /"", (File) mockFile0);
    tarArchiveEntry0.getDirectoryEntries();
    assertEquals(16877, tarArchiveEntry0.getMode());
}","/**
 * Get this entry's mode.
 *
 * @return This entry's mode.
 */"
"@Override
public String getName() {
    return name;
}","public void test117572() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, """");
    assertEquals(""/"", tarArchiveEntry0.getName());
}","/**
 * Get this entry's name.
 *
 * @return This entry's name.
 */"
"@Override
public String getName() {
    return name;
}","public void test117573() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, """");
    tarArchiveEntry0.setName("""");
    assertEquals("""", tarArchiveEntry0.getName());
}","/**
 * Get this entry's name.
 *
 * @return This entry's name.
 */"
"public boolean isPaxHeader() {
    return linkFlag == LF_PAX_EXTENDED_HEADER_LC || linkFlag == LF_PAX_EXTENDED_HEADER_UC;
}","public void test118574() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    String string0 = tarArchiveEntry0.getName();
    assertFalse(tarArchiveEntry0.isPaxHeader());
}","/**
 * Check if this is a Pax header.
 *
 * @return {@code true} if this is a Pax header.
 *
 * @since 1.1
 */"
"@Override
public long getSize() {
    return size;
}","public void test118575() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    String string0 = tarArchiveEntry0.getName();
    assertEquals(0L, tarArchiveEntry0.getSize());
}","/**
 * Get this entry's file size.
 *
 * @return This entry's file size.
 */"
"public int getDevMajor() {
    return devMajor;
}","public void test118576() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    String string0 = tarArchiveEntry0.getName();
    assertEquals(0, tarArchiveEntry0.getDevMajor());
}","/**
 * Get this entry's major device number.
 *
 * @return This entry's major device number.
 * @since 1.4
 */"
"public int getMode() {
    return mode;
}","public void test118577() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    String string0 = tarArchiveEntry0.getName();
    assertEquals(33188, tarArchiveEntry0.getMode());
}","/**
 * Get this entry's mode.
 *
 * @return This entry's mode.
 */"
"public boolean isLink() {
    return linkFlag == LF_LINK;
}","public void test118578() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    String string0 = tarArchiveEntry0.getName();
    assertFalse(tarArchiveEntry0.isLink());
}","/**
 * Check if this is a link entry.
 *
 * @since 1.2
 * @return whether this is a link entry
 */"
"public boolean isOldGNUSparse() {
    return linkFlag == LF_GNUTYPE_SPARSE;
}","public void test118579() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    String string0 = tarArchiveEntry0.getName();
    assertFalse(tarArchiveEntry0.isOldGNUSparse());
}","/**
 * Indicate if this entry is a GNU or star sparse block using the
 * oldgnu format.
 *
 * @return true if this is a sparse extension provided by GNU tar or star
 * @since 1.11
 */"
"public boolean isGNULongLinkEntry() {
    return linkFlag == LF_GNUTYPE_LONGLINK;
}","public void test118580() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    String string0 = tarArchiveEntry0.getName();
    assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
}","/**
 * Indicate if this entry is a GNU long linkname block
 *
 * @return true if this is a long name extension provided by GNU tar
 */"
"@Deprecated
public int getGroupId() {
    return (int) (groupId & 0xffffffff);
}","public void test118581() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    String string0 = tarArchiveEntry0.getName();
    assertEquals(0, tarArchiveEntry0.getGroupId());
}","/**
 * Get this entry's group id.
 *
 * @return This entry's group id.
 * @deprecated use #getLongGroupId instead as group ids can be
 * bigger than {@link Integer#MAX_VALUE}
 */"
"@Override
public String getName() {
    return name;
}","public void test118582() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    String string0 = tarArchiveEntry0.getName();
    assertEquals(""AJeNewn|eBElUQ!="", string0);
}","/**
 * Get this entry's name.
 *
 * @return This entry's name.
 */"
"public int getMode() {
    return mode;
}","public void test119583() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    boolean boolean0 = tarArchiveEntry0.isSparse();
    assertEquals(33188, tarArchiveEntry0.getMode());
}","/**
 * Get this entry's mode.
 *
 * @return This entry's mode.
 */"
"public boolean isCharacterDevice() {
    return linkFlag == LF_CHR;
}","public void test119584() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    boolean boolean0 = tarArchiveEntry0.isSparse();
    assertFalse(tarArchiveEntry0.isCharacterDevice());
}","/**
 * Check if this is a character device entry.
 *
 * @since 1.2
 * @return whether this is a character device
 */"
"public boolean isGNULongNameEntry() {
    return linkFlag == LF_GNUTYPE_LONGNAME;
}","public void test119585() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    boolean boolean0 = tarArchiveEntry0.isSparse();
    assertFalse(tarArchiveEntry0.isGNULongNameEntry());
}","/**
 * Indicate if this entry is a GNU long name block
 *
 * @return true if this is a long name extension provided by GNU tar
 */"
"public boolean isPaxHeader() {
    return linkFlag == LF_PAX_EXTENDED_HEADER_LC || linkFlag == LF_PAX_EXTENDED_HEADER_UC;
}","public void test119586() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    boolean boolean0 = tarArchiveEntry0.isSparse();
    assertFalse(tarArchiveEntry0.isPaxHeader());
}","/**
 * Check if this is a Pax header.
 *
 * @return {@code true} if this is a Pax header.
 *
 * @since 1.1
 */"
"@Override
public long getSize() {
    return size;
}","public void test119587() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    boolean boolean0 = tarArchiveEntry0.isSparse();
    assertEquals(0L, tarArchiveEntry0.getSize());
}","/**
 * Get this entry's file size.
 *
 * @return This entry's file size.
 */"
"public long getLongGroupId() {
    return groupId;
}","public void test119588() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    boolean boolean0 = tarArchiveEntry0.isSparse();
    assertEquals(0L, tarArchiveEntry0.getLongGroupId());
}","/**
 * Get this entry's group id.
 *
 * @since 1.10
 * @return This entry's group id.
 */"
"public boolean isBlockDevice() {
    return linkFlag == LF_BLK;
}","public void test119589() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    boolean boolean0 = tarArchiveEntry0.isSparse();
    assertFalse(tarArchiveEntry0.isBlockDevice());
}","/**
 * Check if this is a block device entry.
 *
 * @since 1.2
 * @return whether this is a block device
 */"
"public int getDevMinor() {
    return devMinor;
}","public void test119590() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    boolean boolean0 = tarArchiveEntry0.isSparse();
    assertEquals(0, tarArchiveEntry0.getDevMinor());
}","/**
 * Get this entry's minor device number.
 *
 * @return This entry's minor device number.
 * @since 1.4
 */"
"@Override
public String getName() {
    return name;
}","public void test119591() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    boolean boolean0 = tarArchiveEntry0.isSparse();
    assertEquals(""AJeNewn|eBElUQ!="", tarArchiveEntry0.getName());
}","/**
 * Get this entry's name.
 *
 * @return This entry's name.
 */"
"public boolean isSparse() {
    return isGNUSparse() || isStarSparse();
}","public void test119592() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""/AJeNewn|eBElUQ!="", (byte) (-120));
    boolean boolean0 = tarArchiveEntry0.isSparse();
    assertFalse(boolean0);
}","/**
 * Check whether this is a sparse entry.
 *
 * @return whether this is a sparse entry
 * @since 1.11
 */"
"@Override
public boolean isDirectory() {
    if (file != null) {
        return file.isDirectory();
    }
    if (linkFlag == LF_DIR) {
        return true;
    }
    if (getName().endsWith(""/"")) {
        return true;
    }
    return false;
}","public void test120593() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"", true);
    int int0 = tarArchiveEntry0.getMode();
    assertFalse(tarArchiveEntry0.isDirectory());
}","/**
 * Return whether or not this entry represents a directory.
 *
 * @return True if this entry is a directory.
 */"
"@Deprecated
public int getGroupId() {
    return (int) (groupId & 0xffffffff);
}","public void test120594() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"", true);
    int int0 = tarArchiveEntry0.getMode();
    assertEquals(0, tarArchiveEntry0.getGroupId());
}","/**
 * Get this entry's group id.
 *
 * @return This entry's group id.
 * @deprecated use #getLongGroupId instead as group ids can be
 * bigger than {@link Integer#MAX_VALUE}
 */"
"public int getMode() {
    return mode;
}","public void test120595() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"", true);
    int int0 = tarArchiveEntry0.getMode();
    assertEquals(33188, int0);
}","/**
 * Get this entry's mode.
 *
 * @return This entry's mode.
 */"
"public int getDevMinor() {
    return devMinor;
}","public void test120596() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"", true);
    int int0 = tarArchiveEntry0.getMode();
    assertEquals(0, tarArchiveEntry0.getDevMinor());
}","/**
 * Get this entry's minor device number.
 *
 * @return This entry's minor device number.
 * @since 1.4
 */"
"public boolean isLink() {
    return linkFlag == LF_LINK;
}","public void test120597() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"", true);
    int int0 = tarArchiveEntry0.getMode();
    assertFalse(tarArchiveEntry0.isLink());
}","/**
 * Check if this is a link entry.
 *
 * @since 1.2
 * @return whether this is a link entry
 */"
"@Override
public String getName() {
    return name;
}","public void test120598() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"", true);
    int int0 = tarArchiveEntry0.getMode();
    assertEquals(""6+\""|M&Us47]k"", tarArchiveEntry0.getName());
}","/**
 * Get this entry's name.
 *
 * @return This entry's name.
 */"
"public long getLongUserId() {
    return userId;
}","public void test120599() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"", true);
    int int0 = tarArchiveEntry0.getMode();
    assertEquals(0L, tarArchiveEntry0.getLongUserId());
}","/**
 * Get this entry's user id.
 *
 * @return This entry's user id.
 * @since 1.10
 */"
"@Override
public long getSize() {
    return size;
}","public void test120600() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"", true);
    int int0 = tarArchiveEntry0.getMode();
    assertEquals(0L, tarArchiveEntry0.getSize());
}","/**
 * Get this entry's file size.
 *
 * @return This entry's file size.
 */"
"public int getDevMajor() {
    return devMajor;
}","public void test120601() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"", true);
    int int0 = tarArchiveEntry0.getMode();
    assertEquals(0, tarArchiveEntry0.getDevMajor());
}","/**
 * Get this entry's major device number.
 *
 * @return This entry's major device number.
 * @since 1.4
 */"
"public boolean isCharacterDevice() {
    return linkFlag == LF_CHR;
}","public void test121602() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", "", (byte) (-28), true);
    long long0 = tarArchiveEntry0.getSize();
    assertFalse(tarArchiveEntry0.isCharacterDevice());
}","/**
 * Check if this is a character device entry.
 *
 * @since 1.2
 * @return whether this is a character device
 */"
"@Override
public String getName() {
    return name;
}","public void test121603() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", "", (byte) (-28), true);
    long long0 = tarArchiveEntry0.getSize();
    assertEquals("", "", tarArchiveEntry0.getName());
}","/**
 * Get this entry's name.
 *
 * @return This entry's name.
 */"
"@Override
public boolean isDirectory() {
    if (file != null) {
        return file.isDirectory();
    }
    if (linkFlag == LF_DIR) {
        return true;
    }
    if (getName().endsWith(""/"")) {
        return true;
    }
    return false;
}","public void test121604() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", "", (byte) (-28), true);
    long long0 = tarArchiveEntry0.getSize();
    assertFalse(tarArchiveEntry0.isDirectory());
}","/**
 * Return whether or not this entry represents a directory.
 *
 * @return True if this entry is a directory.
 */"
"@Deprecated
public int getGroupId() {
    return (int) (groupId & 0xffffffff);
}","public void test121605() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", "", (byte) (-28), true);
    long long0 = tarArchiveEntry0.getSize();
    assertEquals(0, tarArchiveEntry0.getGroupId());
}","/**
 * Get this entry's group id.
 *
 * @return This entry's group id.
 * @deprecated use #getLongGroupId instead as group ids can be
 * bigger than {@link Integer#MAX_VALUE}
 */"
"@Override
public long getSize() {
    return size;
}","public void test121606() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", "", (byte) (-28), true);
    long long0 = tarArchiveEntry0.getSize();
    assertEquals(0L, long0);
}","/**
 * Get this entry's file size.
 *
 * @return This entry's file size.
 */"
"public long getLongUserId() {
    return userId;
}","public void test121607() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", "", (byte) (-28), true);
    long long0 = tarArchiveEntry0.getSize();
    assertEquals(0L, tarArchiveEntry0.getLongUserId());
}","/**
 * Get this entry's user id.
 *
 * @return This entry's user id.
 * @since 1.10
 */"
"public boolean isPaxHeader() {
    return linkFlag == LF_PAX_EXTENDED_HEADER_LC || linkFlag == LF_PAX_EXTENDED_HEADER_UC;
}","public void test121608() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", "", (byte) (-28), true);
    long long0 = tarArchiveEntry0.getSize();
    assertFalse(tarArchiveEntry0.isPaxHeader());
}","/**
 * Check if this is a Pax header.
 *
 * @return {@code true} if this is a Pax header.
 *
 * @since 1.1
 */"
"public int getMode() {
    return mode;
}","public void test121609() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", "", (byte) (-28), true);
    long long0 = tarArchiveEntry0.getSize();
    assertEquals(33188, tarArchiveEntry0.getMode());
}","/**
 * Get this entry's mode.
 *
 * @return This entry's mode.
 */"
"public boolean isSymbolicLink() {
    return linkFlag == LF_SYMLINK;
}","public void test121610() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", "", (byte) (-28), true);
    long long0 = tarArchiveEntry0.getSize();
    assertFalse(tarArchiveEntry0.isSymbolicLink());
}","/**
 * Check if this is a symbolic link entry.
 *
 * @since 1.2
 * @return whether this is a symbolic link
 */"
"public boolean isGNUSparse() {
    return isOldGNUSparse() || isPaxGNUSparse();
}","public void test121611() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", "", (byte) (-28), true);
    long long0 = tarArchiveEntry0.getSize();
    assertFalse(tarArchiveEntry0.isGNUSparse());
}","/**
 * Indicate if this entry is a GNU sparse block.
 *
 * @return true if this is a sparse extension provided by GNU tar
 */"
"public int getDevMajor() {
    return devMajor;
}","public void test121612() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", "", (byte) (-28), true);
    long long0 = tarArchiveEntry0.getSize();
    assertEquals(0, tarArchiveEntry0.getDevMajor());
}","/**
 * Get this entry's major device number.
 *
 * @return This entry's major device number.
 * @since 1.4
 */"
"public TarArchiveEntry(final byte[] headerBuf) {
    this();
    parseTarHeader(headerBuf);
}","public void test122613() throws Throwable {
    byte[] byteArray0 = new byte[3];
    TarArchiveEntry tarArchiveEntry0 = null;
    try {
        tarArchiveEntry0 = new TarArchiveEntry(byteArray0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 99
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarUtils"", e);
    }
}","/**
 * Construct an entry from an archive's header bytes. File is set
 * to null.
 *
 * @param headerBuf The header bytes from a tar archive entry.
 * @throws IllegalArgumentException if any of the numeric fields have an invalid format
 */"
"@Override
public String getName() {
    return name;
}","public void test123614() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"", true);
    String string0 = tarArchiveEntry0.getUserName();
    assertEquals(""6+\""|M&Us47]k"", tarArchiveEntry0.getName());
}","/**
 * Get this entry's name.
 *
 * @return This entry's name.
 */"
"public int getDevMajor() {
    return devMajor;
}","public void test123615() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"", true);
    String string0 = tarArchiveEntry0.getUserName();
    assertEquals(0, tarArchiveEntry0.getDevMajor());
}","/**
 * Get this entry's major device number.
 *
 * @return This entry's major device number.
 * @since 1.4
 */"
"public int getMode() {
    return mode;
}","public void test123616() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"", true);
    String string0 = tarArchiveEntry0.getUserName();
    assertEquals(33188, tarArchiveEntry0.getMode());
}","/**
 * Get this entry's mode.
 *
 * @return This entry's mode.
 */"
"@Deprecated
public int getUserId() {
    return (int) (userId & 0xffffffff);
}","public void test123617() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"", true);
    String string0 = tarArchiveEntry0.getUserName();
    assertEquals(0, tarArchiveEntry0.getUserId());
}","/**
 * Get this entry's user id.
 *
 * @return This entry's user id.
 * @deprecated use #getLongUserId instead as user ids can be
 * bigger than {@link Integer#MAX_VALUE}
 */"
"@Override
public long getSize() {
    return size;
}","public void test123618() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"", true);
    String string0 = tarArchiveEntry0.getUserName();
    assertEquals(0L, tarArchiveEntry0.getSize());
}","/**
 * Get this entry's file size.
 *
 * @return This entry's file size.
 */"
"public String getUserName() {
    return userName;
}","public void test123619() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"", true);
    String string0 = tarArchiveEntry0.getUserName();
    assertEquals("""", string0);
}","/**
 * Get this entry's user name.
 *
 * @return This entry's user name.
 */"
"@Override
public boolean isDirectory() {
    if (file != null) {
        return file.isDirectory();
    }
    if (linkFlag == LF_DIR) {
        return true;
    }
    if (getName().endsWith(""/"")) {
        return true;
    }
    return false;
}","public void test123620() throws Throwable {
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""6+\""|M&Us47]k"", true);
    String string0 = tarArchiveEntry0.getUserName();
    assertFalse(tarArchiveEntry0.isDirectory());
}","/**
 * Return whether or not this entry represents a directory.
 *
 * @return True if this entry is a directory.
 */"
