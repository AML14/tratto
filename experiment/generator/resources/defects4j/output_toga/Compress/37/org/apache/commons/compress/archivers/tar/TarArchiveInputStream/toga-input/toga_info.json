{
  "test2225" : {
    "methodSignature" : "public TarArchiveInputStream(final InputStream is, final String encoding)",
    "methodName" : "TarArchiveInputStream",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2225() throws Throwable {\n    byte[] byteArray0 = new byte[2];\n    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);\n    TarArchiveInputStream tarArchiveInputStream0 = null;\n    tarArchiveInputStream0 = new TarArchiveInputStream(byteArrayInputStream0, \"\");\n}",
    "testName" : "test2225"
  },
  "test3952" : {
    "methodSignature" : "public int getRecordSize()",
    "methodName" : "getRecordSize",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3952() throws Throwable {\n    Stack<InputStream> stack0 = new Stack<InputStream>();\n    Enumeration<InputStream> enumeration0 = stack0.elements();\n    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);\n    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(sequenceInputStream0, (-391));\n    long long0 = tarArchiveInputStream0.skip(0L);\n    tarArchiveInputStream0.getRecordSize();\n}",
    "testName" : "test3952"
  },
  "test4966" : {
    "methodSignature" : "public int getRecordSize()",
    "methodName" : "getRecordSize",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4966() throws Throwable {\n    Stack<InputStream> stack0 = new Stack<InputStream>();\n    Enumeration<InputStream> enumeration0 = stack0.elements();\n    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);\n    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(sequenceInputStream0, (-391));\n    boolean boolean0 = tarArchiveInputStream0.isAtEOF();\n    tarArchiveInputStream0.getRecordSize();\n}",
    "testName" : "test4966"
  },
  "test1215" : {
    "methodSignature" : "public static boolean matches(final byte[] signature, final int length)",
    "methodName" : "matches",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1215() throws Throwable {\n    TarArchiveInputStream.matches((byte[]) null, 4183);\n}",
    "testName" : "test1215"
  },
  "test3238" : {
    "methodSignature" : "public static boolean matches(final byte[] signature, final int length)",
    "methodName" : "matches",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3238() throws Throwable {\n    byte[] byteArray0 = new byte[20];\n    TarArchiveInputStream.matches(byteArray0, 1000);\n}",
    "testName" : "test3238"
  },
  "test3953" : {
    "methodSignature" : "public long skip(final long n) throws IOException",
    "methodName" : "skip",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3953() throws Throwable {\n    Stack<InputStream> stack0 = new Stack<InputStream>();\n    Enumeration<InputStream> enumeration0 = stack0.elements();\n    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);\n    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(sequenceInputStream0, (-391));\n    long long0 = tarArchiveInputStream0.skip(0L);\n}",
    "testName" : "test3953"
  },
  "test2023" : {
    "methodSignature" : "protected byte[] getLongNameData() throws IOException",
    "methodName" : "getLongNameData",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2023() throws Throwable {\n    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream((InputStream) null);\n    tarArchiveInputStream0.getLongNameData();\n}",
    "testName" : "test2023"
  },
  "test4764" : {
    "methodSignature" : "public int getRecordSize()",
    "methodName" : "getRecordSize",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4764() throws Throwable {\n    Stack<InputStream> stack0 = new Stack<InputStream>();\n    Enumeration<InputStream> enumeration0 = stack0.elements();\n    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);\n    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(sequenceInputStream0);\n    int int0 = tarArchiveInputStream0.getRecordSize();\n}",
    "testName" : "test4764"
  },
  "test1013" : {
    "methodSignature" : "protected byte[] readRecord() throws IOException",
    "methodName" : "readRecord",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1013() throws Throwable {\n    PipedInputStream pipedInputStream0 = new PipedInputStream();\n    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(pipedInputStream0);\n    tarArchiveInputStream0.readRecord();\n}",
    "testName" : "test1013"
  },
  "test3036" : {
    "methodSignature" : "public int getRecordSize()",
    "methodName" : "getRecordSize",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3036() throws Throwable {\n    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream((InputStream) null, (-86));\n    TarArchiveInputStream tarArchiveInputStream1 = new TarArchiveInputStream(tarArchiveInputStream0, (-86), (-86), (String) null);\n    byte[] byteArray0 = new byte[6];\n    tarArchiveInputStream1.isEOFRecord(byteArray0);\n    tarArchiveInputStream1.getRecordSize();\n}",
    "testName" : "test3036"
  },
  "test034" : {
    "methodSignature" : "public long skip(final long n) throws IOException",
    "methodName" : "skip",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test034() throws Throwable {\n    byte[] byteArray0 = new byte[9];\n    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 52, (byte) 1);\n    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(byteArrayInputStream0, 0);\n    long long0 = tarArchiveInputStream0.skip(33L);\n}",
    "testName" : "test034"
  },
  "test1619" : {
    "methodSignature" : "public TarArchiveEntry getNextTarEntry() throws IOException",
    "methodName" : "getNextTarEntry",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1619() throws Throwable {\n    BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);\n    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(bufferedInputStream0);\n    tarArchiveInputStream0.getNextTarEntry();\n}",
    "testName" : "test1619"
  },
  "test2427" : {
    "methodSignature" : "public TarArchiveInputStream(final InputStream is, final int blockSize, final int recordSize, final String encoding)",
    "methodName" : "TarArchiveInputStream",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2427() throws Throwable {\n    PipedInputStream pipedInputStream0 = new PipedInputStream();\n    TarArchiveInputStream tarArchiveInputStream0 = null;\n    tarArchiveInputStream0 = new TarArchiveInputStream(pipedInputStream0, 0, (-733), \"\");\n}",
    "testName" : "test2427"
  },
  "test4967" : {
    "methodSignature" : "protected final boolean isAtEOF()",
    "methodName" : "isAtEOF",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4967() throws Throwable {\n    Stack<InputStream> stack0 = new Stack<InputStream>();\n    Enumeration<InputStream> enumeration0 = stack0.elements();\n    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);\n    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(sequenceInputStream0, (-391));\n    boolean boolean0 = tarArchiveInputStream0.isAtEOF();\n}",
    "testName" : "test4967"
  },
  "test1417" : {
    "methodSignature" : "public TarArchiveEntry getNextTarEntry() throws IOException",
    "methodName" : "getNextTarEntry",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1417() throws Throwable {\n    byte[] byteArray0 = new byte[6];\n    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);\n    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(byteArrayInputStream0, (byte) 0);\n    TarArchiveInputStream tarArchiveInputStream1 = new TarArchiveInputStream(tarArchiveInputStream0, (byte) 59, (-2146757655));\n    tarArchiveInputStream1.getNextTarEntry();\n}",
    "testName" : "test1417"
  },
  "test069" : {
    "methodSignature" : "public int getRecordSize()",
    "methodName" : "getRecordSize",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test069() throws Throwable {\n    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream((InputStream) null, (-2779), 0, (String) null);\n    int int0 = tarArchiveInputStream0.getRecordSize();\n}",
    "testName" : "test069"
  },
  "test4561" : {
    "methodSignature" : "Map<String, String> parsePaxHeaders(final InputStream i) throws IOException",
    "methodName" : "parsePaxHeaders",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4561() throws Throwable {\n    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream((InputStream) null, \"F-2H\");\n    tarArchiveInputStream0.parsePaxHeaders((InputStream) null);\n}",
    "testName" : "test4561"
  },
  "test2631" : {
    "methodSignature" : "public int getRecordSize()",
    "methodName" : "getRecordSize",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2631() throws Throwable {\n    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream((InputStream) null, 0, (String) null);\n    byte[] byteArray0 = new byte[1];\n    tarArchiveInputStream0.read(byteArray0, 0, 2546);\n    tarArchiveInputStream0.getRecordSize();\n}",
    "testName" : "test2631"
  },
  "test3646" : {
    "methodSignature" : "public long getBytesRead()",
    "methodName" : "getBytesRead",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3646() throws Throwable {\n    MockFile mockFile0 = new MockFile(\"3X%\", \"3X%\");\n    File file0 = MockFile.createTempFile(\"3X%\", \"3X%\", (File) mockFile0);\n    MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);\n    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(mockFileInputStream0, 9574, 0);\n    tarArchiveInputStream0.getNextTarEntry();\n    tarArchiveInputStream0.getBytesRead();\n}",
    "testName" : "test3646"
  },
  "test3645" : {
    "methodSignature" : "public int getRecordSize()",
    "methodName" : "getRecordSize",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3645() throws Throwable {\n    MockFile mockFile0 = new MockFile(\"3X%\", \"3X%\");\n    File file0 = MockFile.createTempFile(\"3X%\", \"3X%\", (File) mockFile0);\n    MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);\n    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(mockFileInputStream0, 9574, 0);\n    tarArchiveInputStream0.getNextTarEntry();\n    tarArchiveInputStream0.getRecordSize();\n}",
    "testName" : "test3645"
  },
  "test3442" : {
    "methodSignature" : "public int getRecordSize()",
    "methodName" : "getRecordSize",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3442() throws Throwable {\n    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream((InputStream) null, \"linkpath\");\n    MockFile mockFile0 = new MockFile(\"linkpath\", \"linkpath\");\n    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, \"2F=ofs6aP)Q|sK\");\n    boolean boolean0 = tarArchiveInputStream0.canReadEntryData(zipArchiveEntry0);\n    tarArchiveInputStream0.getRecordSize();\n}",
    "testName" : "test3442"
  },
  "test4257" : {
    "methodSignature" : "public int getRecordSize()",
    "methodName" : "getRecordSize",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4257() throws Throwable {\n    Stack<InputStream> stack0 = new Stack<InputStream>();\n    Enumeration<InputStream> enumeration0 = stack0.elements();\n    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);\n    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(sequenceInputStream0, (-391));\n    boolean boolean0 = tarArchiveInputStream0.markSupported();\n    tarArchiveInputStream0.getRecordSize();\n}",
    "testName" : "test4257"
  },
  "test3441" : {
    "methodSignature" : "public boolean canReadEntryData(final ArchiveEntry ae)",
    "methodName" : "canReadEntryData",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3441() throws Throwable {\n    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream((InputStream) null, \"linkpath\");\n    MockFile mockFile0 = new MockFile(\"linkpath\", \"linkpath\");\n    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, \"2F=ofs6aP)Q|sK\");\n    boolean boolean0 = tarArchiveInputStream0.canReadEntryData(zipArchiveEntry0);\n}",
    "testName" : "test3441"
  },
  "test4258" : {
    "methodSignature" : "public boolean markSupported()",
    "methodName" : "markSupported",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4258() throws Throwable {\n    Stack<InputStream> stack0 = new Stack<InputStream>();\n    Enumeration<InputStream> enumeration0 = stack0.elements();\n    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);\n    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(sequenceInputStream0, (-391));\n    boolean boolean0 = tarArchiveInputStream0.markSupported();\n}",
    "testName" : "test4258"
  },
  "test022" : {
    "methodSignature" : "public long getBytesRead()",
    "methodName" : "getBytesRead",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022() throws Throwable {\n    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();\n    PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);\n    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(pipedInputStream0);\n    tarArchiveInputStream0.close();\n    tarArchiveInputStream0.getBytesRead();\n}",
    "testName" : "test022"
  },
  "test3849" : {
    "methodSignature" : "public int getRecordSize()",
    "methodName" : "getRecordSize",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3849() throws Throwable {\n    Stack<InputStream> stack0 = new Stack<InputStream>();\n    Enumeration<InputStream> enumeration0 = stack0.elements();\n    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);\n    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(sequenceInputStream0, (-391));\n    tarArchiveInputStream0.getNextTarEntry();\n    byte[] byteArray0 = tarArchiveInputStream0.getLongNameData();\n    tarArchiveInputStream0.getRecordSize();\n}",
    "testName" : "test3849"
  },
  "test1821" : {
    "methodSignature" : "public ArchiveEntry getNextEntry() throws IOException",
    "methodName" : "getNextEntry",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1821() throws Throwable {\n    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream((InputStream) null, 0, (-95));\n    tarArchiveInputStream0.getNextEntry();\n}",
    "testName" : "test1821"
  },
  "test2834" : {
    "methodSignature" : "public long getBytesRead()",
    "methodName" : "getBytesRead",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2834() throws Throwable {\n    Stack<InputStream> stack0 = new Stack<InputStream>();\n    Enumeration<InputStream> enumeration0 = stack0.elements();\n    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);\n    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(sequenceInputStream0, (-391));\n    tarArchiveInputStream0.getNextTarEntry();\n    tarArchiveInputStream0.getNextTarEntry();\n    tarArchiveInputStream0.getBytesRead();\n}",
    "testName" : "test2834"
  },
  "test2833" : {
    "methodSignature" : "public int getRecordSize()",
    "methodName" : "getRecordSize",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2833() throws Throwable {\n    Stack<InputStream> stack0 = new Stack<InputStream>();\n    Enumeration<InputStream> enumeration0 = stack0.elements();\n    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);\n    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(sequenceInputStream0, (-391));\n    tarArchiveInputStream0.getNextTarEntry();\n    tarArchiveInputStream0.getNextTarEntry();\n    tarArchiveInputStream0.getRecordSize();\n}",
    "testName" : "test2833"
  },
  "test3647" : {
    "methodSignature" : "public int available() throws IOException",
    "methodName" : "available",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3647() throws Throwable {\n    MockFile mockFile0 = new MockFile(\"3X%\", \"3X%\");\n    File file0 = MockFile.createTempFile(\"3X%\", \"3X%\", (File) mockFile0);\n    MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);\n    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(mockFileInputStream0, 9574, 0);\n    tarArchiveInputStream0.getNextTarEntry();\n    mockFileInputStream0.available();\n}",
    "testName" : "test3647"
  },
  "test0811" : {
    "methodSignature" : "protected byte[] readRecord() throws IOException",
    "methodName" : "readRecord",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0811() throws Throwable {\n    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream((InputStream) null);\n    tarArchiveInputStream0.readRecord();\n}",
    "testName" : "test0811"
  },
  "test057" : {
    "methodSignature" : "public long getBytesRead()",
    "methodName" : "getBytesRead",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test057() throws Throwable {\n    Stack<InputStream> stack0 = new Stack<InputStream>();\n    Enumeration<InputStream> enumeration0 = stack0.elements();\n    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);\n    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(sequenceInputStream0, (-391));\n    tarArchiveInputStream0.getNextTarEntry();\n    boolean boolean0 = tarArchiveInputStream0.isAtEOF();\n    tarArchiveInputStream0.getBytesRead();\n}",
    "testName" : "test057"
  },
  "test058" : {
    "methodSignature" : "protected final boolean isAtEOF()",
    "methodName" : "isAtEOF",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test058() throws Throwable {\n    Stack<InputStream> stack0 = new Stack<InputStream>();\n    Enumeration<InputStream> enumeration0 = stack0.elements();\n    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);\n    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(sequenceInputStream0, (-391));\n    tarArchiveInputStream0.getNextTarEntry();\n    boolean boolean0 = tarArchiveInputStream0.isAtEOF();\n}",
    "testName" : "test058"
  },
  "test4055" : {
    "methodSignature" : "public int available() throws IOException",
    "methodName" : "available",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4055() throws Throwable {\n    Stack<InputStream> stack0 = new Stack<InputStream>();\n    Enumeration<InputStream> enumeration0 = stack0.elements();\n    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);\n    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(sequenceInputStream0, (-391));\n    int int0 = tarArchiveInputStream0.available();\n}",
    "testName" : "test4055"
  },
  "test5068" : {
    "methodSignature" : "public void close() throws IOException",
    "methodName" : "close",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5068() throws Throwable {\n    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream((InputStream) null, (-86));\n    tarArchiveInputStream0.close();\n}",
    "testName" : "test5068"
  },
  "test4054" : {
    "methodSignature" : "public int getRecordSize()",
    "methodName" : "getRecordSize",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4054() throws Throwable {\n    Stack<InputStream> stack0 = new Stack<InputStream>();\n    Enumeration<InputStream> enumeration0 = stack0.elements();\n    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);\n    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(sequenceInputStream0, (-391));\n    int int0 = tarArchiveInputStream0.available();\n    tarArchiveInputStream0.getRecordSize();\n}",
    "testName" : "test4054"
  },
  "test1114" : {
    "methodSignature" : "Map<String, String> parsePaxHeaders(final InputStream i) throws IOException",
    "methodName" : "parsePaxHeaders",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1114() throws Throwable {\n    PipedInputStream pipedInputStream0 = new PipedInputStream(4578);\n    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(pipedInputStream0, \"CLRI\");\n    tarArchiveInputStream0.parsePaxHeaders(pipedInputStream0);\n}",
    "testName" : "test1114"
  },
  "test3137" : {
    "methodSignature" : "public static boolean matches(final byte[] signature, final int length)",
    "methodName" : "matches",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3137() throws Throwable {\n    boolean boolean0 = TarArchiveInputStream.matches((byte[]) null, 31);\n}",
    "testName" : "test3137"
  },
  "test2326" : {
    "methodSignature" : "public TarArchiveInputStream(final InputStream is, final int blockSize, final String encoding)",
    "methodName" : "TarArchiveInputStream",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2326() throws Throwable {\n    Stack<InputStream> stack0 = new Stack<InputStream>();\n    Enumeration<InputStream> enumeration0 = stack0.elements();\n    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);\n    TarArchiveInputStream tarArchiveInputStream0 = null;\n    tarArchiveInputStream0 = new TarArchiveInputStream(sequenceInputStream0, 257, \"\");\n}",
    "testName" : "test2326"
  },
  "test4865" : {
    "methodSignature" : "public int getRecordSize()",
    "methodName" : "getRecordSize",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4865() throws Throwable {\n    Stack<InputStream> stack0 = new Stack<InputStream>();\n    Enumeration<InputStream> enumeration0 = stack0.elements();\n    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);\n    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(sequenceInputStream0, (-391));\n    tarArchiveInputStream0.reset();\n    tarArchiveInputStream0.getRecordSize();\n}",
    "testName" : "test4865"
  },
  "test2124" : {
    "methodSignature" : "protected byte[] getLongNameData() throws IOException",
    "methodName" : "getLongNameData",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2124() throws Throwable {\n    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream((InputStream) null, (-1066), (-354));\n    tarArchiveInputStream0.getLongNameData();\n}",
    "testName" : "test2124"
  },
  "test3851" : {
    "methodSignature" : "public int getCount()",
    "methodName" : "getCount",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3851() throws Throwable {\n    Stack<InputStream> stack0 = new Stack<InputStream>();\n    Enumeration<InputStream> enumeration0 = stack0.elements();\n    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);\n    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(sequenceInputStream0, (-391));\n    tarArchiveInputStream0.getNextTarEntry();\n    byte[] byteArray0 = tarArchiveInputStream0.getLongNameData();\n    tarArchiveInputStream0.getCount();\n}",
    "testName" : "test3851"
  },
  "test3850" : {
    "methodSignature" : "protected byte[] getLongNameData() throws IOException",
    "methodName" : "getLongNameData",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3850() throws Throwable {\n    Stack<InputStream> stack0 = new Stack<InputStream>();\n    Enumeration<InputStream> enumeration0 = stack0.elements();\n    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);\n    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(sequenceInputStream0, (-391));\n    tarArchiveInputStream0.getNextTarEntry();\n    byte[] byteArray0 = tarArchiveInputStream0.getLongNameData();\n}",
    "testName" : "test3850"
  },
  "test4663" : {
    "methodSignature" : "public int getCount()",
    "methodName" : "getCount",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4663() throws Throwable {\n    byte[] byteArray0 = new byte[4];\n    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);\n    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);\n    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(sequenceInputStream0);\n    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(\"\", true);\n    tarArchiveInputStream0.setCurrentEntry(tarArchiveEntry0);\n    tarArchiveInputStream0.getLongNameData();\n    tarArchiveInputStream0.getCount();\n}",
    "testName" : "test4663"
  },
  "test011" : {
    "methodSignature" : "public long skip(final long n) throws IOException",
    "methodName" : "skip",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011() throws Throwable {\n    byte[] byteArray0 = new byte[4];\n    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);\n    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);\n    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(sequenceInputStream0);\n    long long0 = tarArchiveInputStream0.skip((-116444736000000000L));\n}",
    "testName" : "test011"
  },
  "test1518" : {
    "methodSignature" : "public TarArchiveEntry getNextTarEntry() throws IOException",
    "methodName" : "getNextTarEntry",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1518() throws Throwable {\n    MockFile mockFile0 = new MockFile(\"3X%\", \"ustar\\u0000\");\n    File file0 = MockFile.createTempFile(\"3X%\", \"3X%\", (File) mockFile0);\n    MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);\n    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(mockFileInputStream0, 0, 0);\n    tarArchiveInputStream0.getNextTarEntry();\n}",
    "testName" : "test1518"
  },
  "test2529" : {
    "methodSignature" : "protected byte[] readRecord() throws IOException",
    "methodName" : "readRecord",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2529() throws Throwable {\n    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream((InputStream) null, (-178), 0);\n    byte[] byteArray0 = tarArchiveInputStream0.readRecord();\n}",
    "testName" : "test2529"
  },
  "test1316" : {
    "methodSignature" : "protected boolean isEOFRecord(final byte[] record)",
    "methodName" : "isEOFRecord",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1316() throws Throwable {\n    byte[] byteArray0 = new byte[0];\n    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1431, 1431);\n    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);\n    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(sequenceInputStream0, (String) null);\n    tarArchiveInputStream0.isEOFRecord(byteArray0);\n}",
    "testName" : "test1316"
  },
  "test3339" : {
    "methodSignature" : "public boolean canReadEntryData(final ArchiveEntry ae)",
    "methodName" : "canReadEntryData",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3339() throws Throwable {\n    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream((InputStream) null, 0, (String) null);\n    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(\"s [i5Ua3L\", (byte) (-110));\n    boolean boolean0 = tarArchiveInputStream0.canReadEntryData(tarArchiveEntry0);\n}",
    "testName" : "test3339"
  },
  "test2528" : {
    "methodSignature" : "public int getRecordSize()",
    "methodName" : "getRecordSize",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2528() throws Throwable {\n    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream((InputStream) null, (-178), 0);\n    tarArchiveInputStream0.getRecordSize();\n}",
    "testName" : "test2528"
  },
  "test046" : {
    "methodSignature" : "protected byte[] readRecord() throws IOException",
    "methodName" : "readRecord",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test046() throws Throwable {\n    Stack<InputStream> stack0 = new Stack<InputStream>();\n    Enumeration<InputStream> enumeration0 = stack0.elements();\n    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);\n    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(sequenceInputStream0, (-391));\n    byte[] byteArray0 = tarArchiveInputStream0.readRecord();\n}",
    "testName" : "test046"
  },
  "test4460" : {
    "methodSignature" : "public int getRecordSize()",
    "methodName" : "getRecordSize",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4460() throws Throwable {\n    Stack<InputStream> stack0 = new Stack<InputStream>();\n    Enumeration<InputStream> enumeration0 = stack0.elements();\n    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);\n    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(sequenceInputStream0, (-391));\n    tarArchiveInputStream0.getCurrentEntry();\n    tarArchiveInputStream0.getRecordSize();\n}",
    "testName" : "test4460"
  },
  "test3544" : {
    "methodSignature" : "public int getRecordSize()",
    "methodName" : "getRecordSize",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3544() throws Throwable {\n    byte[] byteArray0 = new byte[5];\n    byteArray0[1] = (byte) 22;\n    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);\n    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(byteArrayInputStream0);\n    boolean boolean0 = tarArchiveInputStream0.isEOFRecord(byteArray0);\n    tarArchiveInputStream0.getRecordSize();\n}",
    "testName" : "test3544"
  },
  "test1720" : {
    "methodSignature" : "public ArchiveEntry getNextEntry() throws IOException",
    "methodName" : "getNextEntry",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1720() throws Throwable {\n    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream((InputStream) null);\n    tarArchiveInputStream0.getNextEntry();\n}",
    "testName" : "test1720"
  },
  "test2732" : {
    "methodSignature" : "public TarArchiveEntry getNextTarEntry() throws IOException",
    "methodName" : "getNextTarEntry",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2732() throws Throwable {\n    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream((InputStream) null, (-178), 0);\n    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(\"wH;KCZva1\", (byte) (-60));\n    tarArchiveInputStream0.setCurrentEntry(tarArchiveEntry0);\n    tarArchiveInputStream0.getNextTarEntry();\n}",
    "testName" : "test2732"
  },
  "test4359" : {
    "methodSignature" : "protected byte[] getLongNameData() throws IOException",
    "methodName" : "getLongNameData",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4359() throws Throwable {\n    FileDescriptor fileDescriptor0 = new FileDescriptor();\n    MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);\n    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(mockFileInputStream0, 4183, \"SHA1\");\n    tarArchiveInputStream0.getLongNameData();\n}",
    "testName" : "test4359"
  },
  "test3543" : {
    "methodSignature" : "protected boolean isEOFRecord(final byte[] record)",
    "methodName" : "isEOFRecord",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3543() throws Throwable {\n    byte[] byteArray0 = new byte[5];\n    byteArray0[1] = (byte) 22;\n    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);\n    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(byteArrayInputStream0);\n    boolean boolean0 = tarArchiveInputStream0.isEOFRecord(byteArray0);\n}",
    "testName" : "test3543"
  },
  "test4156" : {
    "methodSignature" : "public int getRecordSize()",
    "methodName" : "getRecordSize",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4156() throws Throwable {\n    Stack<InputStream> stack0 = new Stack<InputStream>();\n    Enumeration<InputStream> enumeration0 = stack0.elements();\n    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);\n    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(sequenceInputStream0, (-391));\n    tarArchiveInputStream0.mark(3624);\n    tarArchiveInputStream0.getRecordSize();\n}",
    "testName" : "test4156"
  },
  "test2530" : {
    "methodSignature" : "public int getCount()",
    "methodName" : "getCount",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2530() throws Throwable {\n    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream((InputStream) null, (-178), 0);\n    byte[] byteArray0 = tarArchiveInputStream0.readRecord();\n    tarArchiveInputStream0.setAtEOF(true);\n    tarArchiveInputStream0.read(byteArray0, (-178), 1065);\n    tarArchiveInputStream0.getCount();\n}",
    "testName" : "test2530"
  },
  "test0912" : {
    "methodSignature" : "protected byte[] readRecord() throws IOException",
    "methodName" : "readRecord",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0912() throws Throwable {\n    byte[] byteArray0 = new byte[4];\n    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);\n    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(byteArrayInputStream0, (byte) (-109), (-794), \"CP850\");\n    tarArchiveInputStream0.readRecord();\n}",
    "testName" : "test0912"
  },
  "test045" : {
    "methodSignature" : "public int getCount()",
    "methodName" : "getCount",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test045() throws Throwable {\n    Stack<InputStream> stack0 = new Stack<InputStream>();\n    Enumeration<InputStream> enumeration0 = stack0.elements();\n    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);\n    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(sequenceInputStream0, (-391));\n    byte[] byteArray0 = tarArchiveInputStream0.readRecord();\n    tarArchiveInputStream0.getCount();\n}",
    "testName" : "test045"
  },
  "test0710" : {
    "methodSignature" : "public int getRecordSize()",
    "methodName" : "getRecordSize",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0710() throws Throwable {\n    byte[] byteArray0 = new byte[4];\n    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-90), (-1671));\n    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(byteArrayInputStream0, (byte) 100, (byte) (-79));\n    int int0 = tarArchiveInputStream0.getRecordSize();\n}",
    "testName" : "test0710"
  },
  "test1922" : {
    "methodSignature" : "public ArchiveEntry getNextEntry() throws IOException",
    "methodName" : "getNextEntry",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1922() throws Throwable {\n    PipedInputStream pipedInputStream0 = new PipedInputStream();\n    PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);\n    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pushbackInputStream0, pushbackInputStream0);\n    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(sequenceInputStream0, 2923);\n    tarArchiveInputStream0.getNextEntry();\n}",
    "testName" : "test1922"
  },
  "test2935" : {
    "methodSignature" : "public long skip(final long n) throws IOException",
    "methodName" : "skip",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2935() throws Throwable {\n    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream((InputStream) null);\n    tarArchiveInputStream0.skip(1366L);\n}",
    "testName" : "test2935"
  },
  "test3748" : {
    "methodSignature" : "public long getBytesRead()",
    "methodName" : "getBytesRead",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3748() throws Throwable {\n    byte[] byteArray0 = new byte[6];\n    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);\n    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream(byteArrayInputStream0);\n    tarArchiveInputStream0.getNextEntry();\n    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(\"uC_^N/{u$i8{P!u\", (byte) 108);\n    tarArchiveInputStream0.setCurrentEntry(tarArchiveEntry0);\n    tarArchiveInputStream0.getLongNameData();\n    tarArchiveInputStream0.getBytesRead();\n}",
    "testName" : "test3748"
  },
  "test3340" : {
    "methodSignature" : "public int getRecordSize()",
    "methodName" : "getRecordSize",
    "className" : "org.apache.commons.compress.archivers.tar.TarArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3340() throws Throwable {\n    TarArchiveInputStream tarArchiveInputStream0 = new TarArchiveInputStream((InputStream) null, 0, (String) null);\n    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(\"s [i5Ua3L\", (byte) (-110));\n    boolean boolean0 = tarArchiveInputStream0.canReadEntryData(tarArchiveEntry0);\n    tarArchiveInputStream0.getRecordSize();\n}",
    "testName" : "test3340"
  }
}