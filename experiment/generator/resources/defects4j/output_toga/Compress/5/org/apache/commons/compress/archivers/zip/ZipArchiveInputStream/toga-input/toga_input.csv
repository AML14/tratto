focal_method,test_prefix,docstring
"/*
     *  This test assumes that the zip file does not have any additional leading content,
     *  which is something that is allowed by the specification (e.g. self-extracting zips)
     */
public static boolean matches(byte[] signature, int length) {
    if (length < ZipArchiveOutputStream.LFH_SIG.length) {
        return false;
    }
    return // normal file
    checksig(signature, ZipArchiveOutputStream.LFH_SIG) || // empty zip
    checksig(signature, ZipArchiveOutputStream.EOCD_SIG);
}","public void test000() throws Throwable {
    byte[] byteArray0 = new byte[6];
    byteArray0[0] = (byte) 126;
    boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, (byte) 76);
    assertFalse(boolean0);
}",""
"/*
     *  This test assumes that the zip file does not have any additional leading content,
     *  which is something that is allowed by the specification (e.g. self-extracting zips)
     */
public static boolean matches(byte[] signature, int length) {
    if (length < ZipArchiveOutputStream.LFH_SIG.length) {
        return false;
    }
    return // normal file
    checksig(signature, ZipArchiveOutputStream.LFH_SIG) || // empty zip
    checksig(signature, ZipArchiveOutputStream.EOCD_SIG);
}","public void test011() throws Throwable {
    byte[] byteArray0 = new byte[6];
    boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, (byte) 4);
    assertFalse(boolean0);
}",""
"public long skip(long value) throws IOException {
    if (value >= 0) {
        long skipped = 0;
        byte[] b = new byte[1024];
        while (skipped != value) {
            long rem = value - skipped;
            int x = read(b, 0, (int) (b.length > rem ? rem : b.length));
            if (x == -1) {
                return skipped;
            }
            skipped += x;
        }
        return skipped;
    }
    throw new IllegalArgumentException();
}","public void test022() throws Throwable {
    Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
    doReturn(false, false).when(enumeration0).hasMoreElements();
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0);
    zipArchiveInputStream0.close();
    try {
        zipArchiveInputStream0.skip(4278190080L);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // The stream is closed
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveInputStream"", e);
    }
}",""
"/*
     *  This test assumes that the zip file does not have any additional leading content,
     *  which is something that is allowed by the specification (e.g. self-extracting zips)
     */
public static boolean matches(byte[] signature, int length) {
    if (length < ZipArchiveOutputStream.LFH_SIG.length) {
        return false;
    }
    return // normal file
    checksig(signature, ZipArchiveOutputStream.LFH_SIG) || // empty zip
    checksig(signature, ZipArchiveOutputStream.EOCD_SIG);
}","public void test033() throws Throwable {
    // Undeclared exception!
    try {
        ZipArchiveInputStream.matches((byte[]) null, 1067);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveInputStream"", e);
    }
}",""
"/*
     *  This test assumes that the zip file does not have any additional leading content,
     *  which is something that is allowed by the specification (e.g. self-extracting zips)
     */
public static boolean matches(byte[] signature, int length) {
    if (length < ZipArchiveOutputStream.LFH_SIG.length) {
        return false;
    }
    return // normal file
    checksig(signature, ZipArchiveOutputStream.LFH_SIG) || // empty zip
    checksig(signature, ZipArchiveOutputStream.EOCD_SIG);
}","public void test044() throws Throwable {
    byte[] byteArray0 = new byte[0];
    // Undeclared exception!
    try {
        ZipArchiveInputStream.matches(byteArray0, 1558);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 0
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveInputStream"", e);
    }
}",""
"public ZipArchiveEntry getNextZipEntry() throws IOException {
    if (closed || hitCentralDirectory) {
        return null;
    }
    if (current != null) {
        closeEntry();
    }
    byte[] lfh = new byte[LFH_LEN];
    try {
        readFully(lfh);
    } catch (EOFException e) {
        return null;
    }
    ZipLong sig = new ZipLong(lfh);
    if (sig.equals(ZipLong.CFH_SIG)) {
        hitCentralDirectory = true;
        return null;
    }
    if (!sig.equals(ZipLong.LFH_SIG)) {
        return null;
    }
    int off = WORD;
    current = new ZipArchiveEntry();
    int versionMadeBy = ZipShort.getValue(lfh, off);
    off += SHORT;
    current.setPlatform((versionMadeBy >> ZipFile.BYTE_SHIFT) & ZipFile.NIBLET_MASK);
    final int generalPurposeFlag = ZipShort.getValue(lfh, off);
    final boolean hasEFS = (generalPurposeFlag & ZipArchiveOutputStream.EFS_FLAG) != 0;
    final ZipEncoding entryEncoding = hasEFS ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding;
    hasDataDescriptor = (generalPurposeFlag & 8) != 0;
    off += SHORT;
    current.setMethod(ZipShort.getValue(lfh, off));
    off += SHORT;
    long time = ZipUtil.dosToJavaTime(ZipLong.getValue(lfh, off));
    current.setTime(time);
    off += WORD;
    if (!hasDataDescriptor) {
        current.setCrc(ZipLong.getValue(lfh, off));
        off += WORD;
        current.setCompressedSize(ZipLong.getValue(lfh, off));
        off += WORD;
        current.setSize(ZipLong.getValue(lfh, off));
        off += WORD;
    } else {
        off += 3 * WORD;
    }
    int fileNameLen = ZipShort.getValue(lfh, off);
    off += SHORT;
    int extraLen = ZipShort.getValue(lfh, off);
    off += SHORT;
    byte[] fileName = new byte[fileNameLen];
    readFully(fileName);
    current.setName(entryEncoding.decode(fileName));
    byte[] extraData = new byte[extraLen];
    readFully(extraData);
    current.setExtra(extraData);
    if (!hasEFS && useUnicodeExtraFields) {
        ZipUtil.setNameAndCommentFromExtraFields(current, fileName, null);
    }
    return current;
}","public void test055() throws Throwable {
    byte[] byteArray0 = new byte[0];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-625), 183);
    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
    // Undeclared exception!
    try {
        zipArchiveInputStream0.getNextZipEntry();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.io.ByteArrayInputStream"", e);
    }
}",""
"public ArchiveEntry getNextEntry() throws IOException {
    return getNextZipEntry();
}","public void test066() throws Throwable {
    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
    try {
        zipArchiveInputStream0.getNextEntry();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Stream closed
        //
        verifyException(""java.io.PushbackInputStream"", e);
    }
}",""
"public void close() throws IOException {
    if (!closed) {
        closed = true;
        in.close();
    }
}","public void test077() throws Throwable {
    Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
    doReturn(false, true).when(enumeration0).hasMoreElements();
    doReturn((Object) null).when(enumeration0).nextElement();
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0);
    // Undeclared exception!
    try {
        zipArchiveInputStream0.close();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.io.SequenceInputStream"", e);
    }
}",""
"public void close() throws IOException {
    if (!closed) {
        closed = true;
        in.close();
    }
}","public void test088() throws Throwable {
    FileSystemHandling.shouldAllThrowIOExceptions();
    FileDescriptor fileDescriptor0 = new FileDescriptor();
    MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(mockFileInputStream0);
    try {
        zipArchiveInputStream0.close();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Simulated IOException
        //
        verifyException(""org.evosuite.runtime.vfs.VirtualFileSystem"", e);
    }
}",""
"public ZipArchiveInputStream(InputStream inputStream, String encoding, boolean useUnicodeExtraFields) {
    zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);
    this.useUnicodeExtraFields = useUnicodeExtraFields;
    in = new PushbackInputStream(inputStream, buf.length);
}","public void test099() throws Throwable {
    ZipArchiveInputStream zipArchiveInputStream0 = null;
    try {
        zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, ""TU?8MgY?uybyyW]R"", false);
        fail(""Expecting exception: IllegalCharsetNameException"");
    } catch (IllegalCharsetNameException e) {
        //
        // TU?8MgY?uybyyW]R
        //
        verifyException(""java.nio.charset.Charset"", e);
    }
}","/**
 * @param encoding the encoding to use for file names, use null
 * for the platform's default encoding
 * @param useUnicodeExtraFields whether to use InfoZIP Unicode
 * Extra Fields (if present) to set the file names.
 */"
"public int read(byte[] buffer, int start, int length) throws IOException {
    if (closed) {
        throw new IOException(""The stream is closed"");
    }
    if (inf.finished() || current == null) {
        return -1;
    }
    // avoid int overflow, check null buffer
    if (start <= buffer.length && length >= 0 && start >= 0 && buffer.length - start >= length) {
        if (current.getMethod() == ZipArchiveOutputStream.STORED) {
            int csize = (int) current.getSize();
            if (readBytesOfEntry >= csize) {
                return -1;
            }
            if (offsetInBuffer >= lengthOfLastRead) {
                offsetInBuffer = 0;
                if ((lengthOfLastRead = in.read(buf)) == -1) {
                    return -1;
                }
                count(lengthOfLastRead);
                bytesReadFromStream += lengthOfLastRead;
            }
            int toRead = length > lengthOfLastRead ? lengthOfLastRead - offsetInBuffer : length;
            if ((csize - readBytesOfEntry) < toRead) {
                toRead = csize - readBytesOfEntry;
            }
            System.arraycopy(buf, offsetInBuffer, buffer, start, toRead);
            offsetInBuffer += toRead;
            readBytesOfEntry += toRead;
            crc.update(buffer, start, toRead);
            return toRead;
        }
        if (inf.needsInput()) {
            fill();
            if (lengthOfLastRead > 0) {
                bytesReadFromStream += lengthOfLastRead;
            }
        }
        int read = 0;
        try {
            read = inf.inflate(buffer, start, length);
        } catch (DataFormatException e) {
            throw new ZipException(e.getMessage());
        }
        if (read == 0 && inf.finished()) {
            return -1;
        }
        crc.update(buffer, start, read);
        return read;
    }
    throw new ArrayIndexOutOfBoundsException();
}","public void test1010() throws Throwable {
    PipedInputStream pipedInputStream0 = new PipedInputStream();
    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0);
    byte[] byteArray0 = new byte[2];
    int int0 = zipArchiveInputStream0.read(byteArray0, 303, (-1852));
    assertEquals((-1), int0);
}",""
"public ZipArchiveEntry getNextZipEntry() throws IOException {
    if (closed || hitCentralDirectory) {
        return null;
    }
    if (current != null) {
        closeEntry();
    }
    byte[] lfh = new byte[LFH_LEN];
    try {
        readFully(lfh);
    } catch (EOFException e) {
        return null;
    }
    ZipLong sig = new ZipLong(lfh);
    if (sig.equals(ZipLong.CFH_SIG)) {
        hitCentralDirectory = true;
        return null;
    }
    if (!sig.equals(ZipLong.LFH_SIG)) {
        return null;
    }
    int off = WORD;
    current = new ZipArchiveEntry();
    int versionMadeBy = ZipShort.getValue(lfh, off);
    off += SHORT;
    current.setPlatform((versionMadeBy >> ZipFile.BYTE_SHIFT) & ZipFile.NIBLET_MASK);
    final int generalPurposeFlag = ZipShort.getValue(lfh, off);
    final boolean hasEFS = (generalPurposeFlag & ZipArchiveOutputStream.EFS_FLAG) != 0;
    final ZipEncoding entryEncoding = hasEFS ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding;
    hasDataDescriptor = (generalPurposeFlag & 8) != 0;
    off += SHORT;
    current.setMethod(ZipShort.getValue(lfh, off));
    off += SHORT;
    long time = ZipUtil.dosToJavaTime(ZipLong.getValue(lfh, off));
    current.setTime(time);
    off += WORD;
    if (!hasDataDescriptor) {
        current.setCrc(ZipLong.getValue(lfh, off));
        off += WORD;
        current.setCompressedSize(ZipLong.getValue(lfh, off));
        off += WORD;
        current.setSize(ZipLong.getValue(lfh, off));
        off += WORD;
    } else {
        off += 3 * WORD;
    }
    int fileNameLen = ZipShort.getValue(lfh, off);
    off += SHORT;
    int extraLen = ZipShort.getValue(lfh, off);
    off += SHORT;
    byte[] fileName = new byte[fileNameLen];
    readFully(fileName);
    current.setName(entryEncoding.decode(fileName));
    byte[] extraData = new byte[extraLen];
    readFully(extraData);
    current.setExtra(extraData);
    if (!hasEFS && useUnicodeExtraFields) {
        ZipUtil.setNameAndCommentFromExtraFields(current, fileName, null);
    }
    return current;
}","public void test1111() throws Throwable {
    PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pushbackInputStream0);
    try {
        zipArchiveInputStream0.getNextZipEntry();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Stream closed
        //
        verifyException(""java.io.PushbackInputStream"", e);
    }
}",""
"/*
     *  This test assumes that the zip file does not have any additional leading content,
     *  which is something that is allowed by the specification (e.g. self-extracting zips)
     */
public static boolean matches(byte[] signature, int length) {
    if (length < ZipArchiveOutputStream.LFH_SIG.length) {
        return false;
    }
    return // normal file
    checksig(signature, ZipArchiveOutputStream.LFH_SIG) || // empty zip
    checksig(signature, ZipArchiveOutputStream.EOCD_SIG);
}","public void test1313() throws Throwable {
    boolean boolean0 = ZipArchiveInputStream.matches((byte[]) null, (-4782));
    assertFalse(boolean0);
}",""
"public long skip(long value) throws IOException {
    if (value >= 0) {
        long skipped = 0;
        byte[] b = new byte[1024];
        while (skipped != value) {
            long rem = value - skipped;
            int x = read(b, 0, (int) (b.length > rem ? rem : b.length));
            if (x == -1) {
                return skipped;
            }
            skipped += x;
        }
        return skipped;
    }
    throw new IllegalArgumentException();
}","public void test1414() throws Throwable {
    byte[] byteArray0 = new byte[6];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, 2);
    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0, (String) null, false);
    long long0 = zipArchiveInputStream0.skip(2);
    assertEquals(0L, long0);
}",""
"public long skip(long value) throws IOException {
    if (value >= 0) {
        long skipped = 0;
        byte[] b = new byte[1024];
        while (skipped != value) {
            long rem = value - skipped;
            int x = read(b, 0, (int) (b.length > rem ? rem : b.length));
            if (x == -1) {
                return skipped;
            }
            skipped += x;
        }
        return skipped;
    }
    throw new IllegalArgumentException();
}","public void test1515() throws Throwable {
    Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
    doReturn(false).when(enumeration0).hasMoreElements();
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0);
    long long0 = zipArchiveInputStream0.skip(0L);
    assertEquals(0L, long0);
}",""
"public long skip(long value) throws IOException {
    if (value >= 0) {
        long skipped = 0;
        byte[] b = new byte[1024];
        while (skipped != value) {
            long rem = value - skipped;
            int x = read(b, 0, (int) (b.length > rem ? rem : b.length));
            if (x == -1) {
                return skipped;
            }
            skipped += x;
        }
        return skipped;
    }
    throw new IllegalArgumentException();
}","public void test1616() throws Throwable {
    byte[] byteArray0 = new byte[0];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-165), (-165));
    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0, ""never"", true);
    // Undeclared exception!
    try {
        zipArchiveInputStream0.skip((-165));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveInputStream"", e);
    }
}",""
"public int getCount() {
    return bytesRead;
}","public void test1717() throws Throwable {
    Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
    doReturn(false, false).when(enumeration0).hasMoreElements();
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0);
    zipArchiveInputStream0.close();
    zipArchiveInputStream0.close();
    assertEquals(0, zipArchiveInputStream0.getCount());
}","/**
 * Returns the current number of bytes read from this stream.
 * @return the number of read bytes
 */"
"public int read(byte[] buffer, int start, int length) throws IOException {
    if (closed) {
        throw new IOException(""The stream is closed"");
    }
    if (inf.finished() || current == null) {
        return -1;
    }
    // avoid int overflow, check null buffer
    if (start <= buffer.length && length >= 0 && start >= 0 && buffer.length - start >= length) {
        if (current.getMethod() == ZipArchiveOutputStream.STORED) {
            int csize = (int) current.getSize();
            if (readBytesOfEntry >= csize) {
                return -1;
            }
            if (offsetInBuffer >= lengthOfLastRead) {
                offsetInBuffer = 0;
                if ((lengthOfLastRead = in.read(buf)) == -1) {
                    return -1;
                }
                count(lengthOfLastRead);
                bytesReadFromStream += lengthOfLastRead;
            }
            int toRead = length > lengthOfLastRead ? lengthOfLastRead - offsetInBuffer : length;
            if ((csize - readBytesOfEntry) < toRead) {
                toRead = csize - readBytesOfEntry;
            }
            System.arraycopy(buf, offsetInBuffer, buffer, start, toRead);
            offsetInBuffer += toRead;
            readBytesOfEntry += toRead;
            crc.update(buffer, start, toRead);
            return toRead;
        }
        if (inf.needsInput()) {
            fill();
            if (lengthOfLastRead > 0) {
                bytesReadFromStream += lengthOfLastRead;
            }
        }
        int read = 0;
        try {
            read = inf.inflate(buffer, start, length);
        } catch (DataFormatException e) {
            throw new ZipException(e.getMessage());
        }
        if (read == 0 && inf.finished()) {
            return -1;
        }
        crc.update(buffer, start, read);
        return read;
    }
    throw new ArrayIndexOutOfBoundsException();
}","public void test1818() throws Throwable {
    Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
    doReturn(false, false).when(enumeration0).hasMoreElements();
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0);
    zipArchiveInputStream0.close();
    byte[] byteArray0 = new byte[7];
    try {
        zipArchiveInputStream0.read(byteArray0, 851, (int) (byte) 101);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // The stream is closed
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveInputStream"", e);
    }
}",""
"public ZipArchiveEntry getNextZipEntry() throws IOException {
    if (closed || hitCentralDirectory) {
        return null;
    }
    if (current != null) {
        closeEntry();
    }
    byte[] lfh = new byte[LFH_LEN];
    try {
        readFully(lfh);
    } catch (EOFException e) {
        return null;
    }
    ZipLong sig = new ZipLong(lfh);
    if (sig.equals(ZipLong.CFH_SIG)) {
        hitCentralDirectory = true;
        return null;
    }
    if (!sig.equals(ZipLong.LFH_SIG)) {
        return null;
    }
    int off = WORD;
    current = new ZipArchiveEntry();
    int versionMadeBy = ZipShort.getValue(lfh, off);
    off += SHORT;
    current.setPlatform((versionMadeBy >> ZipFile.BYTE_SHIFT) & ZipFile.NIBLET_MASK);
    final int generalPurposeFlag = ZipShort.getValue(lfh, off);
    final boolean hasEFS = (generalPurposeFlag & ZipArchiveOutputStream.EFS_FLAG) != 0;
    final ZipEncoding entryEncoding = hasEFS ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding;
    hasDataDescriptor = (generalPurposeFlag & 8) != 0;
    off += SHORT;
    current.setMethod(ZipShort.getValue(lfh, off));
    off += SHORT;
    long time = ZipUtil.dosToJavaTime(ZipLong.getValue(lfh, off));
    current.setTime(time);
    off += WORD;
    if (!hasDataDescriptor) {
        current.setCrc(ZipLong.getValue(lfh, off));
        off += WORD;
        current.setCompressedSize(ZipLong.getValue(lfh, off));
        off += WORD;
        current.setSize(ZipLong.getValue(lfh, off));
        off += WORD;
    } else {
        off += 3 * WORD;
    }
    int fileNameLen = ZipShort.getValue(lfh, off);
    off += SHORT;
    int extraLen = ZipShort.getValue(lfh, off);
    off += SHORT;
    byte[] fileName = new byte[fileNameLen];
    readFully(fileName);
    current.setName(entryEncoding.decode(fileName));
    byte[] extraData = new byte[extraLen];
    readFully(extraData);
    current.setExtra(extraData);
    if (!hasEFS && useUnicodeExtraFields) {
        ZipUtil.setNameAndCommentFromExtraFields(current, fileName, null);
    }
    return current;
}","public void test1919() throws Throwable {
    Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
    doReturn(false, false).when(enumeration0).hasMoreElements();
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0);
    zipArchiveInputStream0.close();
    ZipArchiveEntry zipArchiveEntry0 = zipArchiveInputStream0.getNextZipEntry();
    assertNull(zipArchiveEntry0);
}",""
"public ArchiveEntry getNextEntry() throws IOException {
    return getNextZipEntry();
}","public void test2020() throws Throwable {
    DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(dataInputStream0);
    // Undeclared exception!
    try {
        zipArchiveInputStream0.getNextEntry();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.io.DataInputStream"", e);
    }
}",""
