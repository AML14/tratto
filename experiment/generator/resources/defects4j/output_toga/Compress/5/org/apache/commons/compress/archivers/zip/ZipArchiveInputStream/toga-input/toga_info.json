{
  "test1313" : {
    "methodSignature" : "public static boolean matches(byte[] signature, int length)",
    "methodName" : "matches",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1313() throws Throwable {\n    boolean boolean0 = ZipArchiveInputStream.matches((byte[]) null, (-4782));\n}",
    "testName" : "test1313"
  },
  "test1010" : {
    "methodSignature" : "public int read(byte[] buffer, int start, int length) throws IOException",
    "methodName" : "read",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1010() throws Throwable {\n    PipedInputStream pipedInputStream0 = new PipedInputStream();\n    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0);\n    byte[] byteArray0 = new byte[2];\n    int int0 = zipArchiveInputStream0.read(byteArray0, 303, (-1852));\n}",
    "testName" : "test1010"
  },
  "test1111" : {
    "methodSignature" : "public ZipArchiveEntry getNextZipEntry() throws IOException",
    "methodName" : "getNextZipEntry",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1111() throws Throwable {\n    PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);\n    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pushbackInputStream0);\n    zipArchiveInputStream0.getNextZipEntry();\n}",
    "testName" : "test1111"
  },
  "test011" : {
    "methodSignature" : "public static boolean matches(byte[] signature, int length)",
    "methodName" : "matches",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011() throws Throwable {\n    byte[] byteArray0 = new byte[6];\n    boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, (byte) 4);\n}",
    "testName" : "test011"
  },
  "test033" : {
    "methodSignature" : "public static boolean matches(byte[] signature, int length)",
    "methodName" : "matches",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033() throws Throwable {\n    ZipArchiveInputStream.matches((byte[]) null, 1067);\n}",
    "testName" : "test033"
  },
  "test055" : {
    "methodSignature" : "public ZipArchiveEntry getNextZipEntry() throws IOException",
    "methodName" : "getNextZipEntry",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055() throws Throwable {\n    byte[] byteArray0 = new byte[0];\n    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-625), 183);\n    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);\n    zipArchiveInputStream0.getNextZipEntry();\n}",
    "testName" : "test055"
  },
  "test077" : {
    "methodSignature" : "public void close() throws IOException",
    "methodName" : "close",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077() throws Throwable {\n    Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());\n    doReturn(false, true).when(enumeration0).hasMoreElements();\n    doReturn((Object) null).when(enumeration0).nextElement();\n    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);\n    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0);\n    zipArchiveInputStream0.close();\n}",
    "testName" : "test077"
  },
  "test099" : {
    "methodSignature" : "public ZipArchiveInputStream(InputStream inputStream, String encoding, boolean useUnicodeExtraFields)",
    "methodName" : "ZipArchiveInputStream",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099() throws Throwable {\n    ZipArchiveInputStream zipArchiveInputStream0 = null;\n    zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, \"TU?8MgY?uybyyW]R\", false);\n}",
    "testName" : "test099"
  },
  "test1616" : {
    "methodSignature" : "public long skip(long value) throws IOException",
    "methodName" : "skip",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1616() throws Throwable {\n    byte[] byteArray0 = new byte[0];\n    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-165), (-165));\n    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0, \"never\", true);\n    zipArchiveInputStream0.skip((-165));\n}",
    "testName" : "test1616"
  },
  "test1717" : {
    "methodSignature" : "public int getCount()",
    "methodName" : "getCount",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1717() throws Throwable {\n    Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());\n    doReturn(false, false).when(enumeration0).hasMoreElements();\n    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);\n    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0);\n    zipArchiveInputStream0.close();\n    zipArchiveInputStream0.close();\n    zipArchiveInputStream0.getCount();\n}",
    "testName" : "test1717"
  },
  "test1414" : {
    "methodSignature" : "public long skip(long value) throws IOException",
    "methodName" : "skip",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1414() throws Throwable {\n    byte[] byteArray0 = new byte[6];\n    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, 2);\n    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0, (String) null, false);\n    long long0 = zipArchiveInputStream0.skip(2);\n}",
    "testName" : "test1414"
  },
  "test1515" : {
    "methodSignature" : "public long skip(long value) throws IOException",
    "methodName" : "skip",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1515() throws Throwable {\n    Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());\n    doReturn(false).when(enumeration0).hasMoreElements();\n    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);\n    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0);\n    long long0 = zipArchiveInputStream0.skip(0L);\n}",
    "testName" : "test1515"
  },
  "test2020" : {
    "methodSignature" : "public ArchiveEntry getNextEntry() throws IOException",
    "methodName" : "getNextEntry",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2020() throws Throwable {\n    DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);\n    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(dataInputStream0);\n    zipArchiveInputStream0.getNextEntry();\n}",
    "testName" : "test2020"
  },
  "test000" : {
    "methodSignature" : "public static boolean matches(byte[] signature, int length)",
    "methodName" : "matches",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    byte[] byteArray0 = new byte[6];\n    byteArray0[0] = (byte) 126;\n    boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, (byte) 76);\n}",
    "testName" : "test000"
  },
  "test022" : {
    "methodSignature" : "public long skip(long value) throws IOException",
    "methodName" : "skip",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022() throws Throwable {\n    Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());\n    doReturn(false, false).when(enumeration0).hasMoreElements();\n    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);\n    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0);\n    zipArchiveInputStream0.close();\n    zipArchiveInputStream0.skip(4278190080L);\n}",
    "testName" : "test022"
  },
  "test044" : {
    "methodSignature" : "public static boolean matches(byte[] signature, int length)",
    "methodName" : "matches",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044() throws Throwable {\n    byte[] byteArray0 = new byte[0];\n    ZipArchiveInputStream.matches(byteArray0, 1558);\n}",
    "testName" : "test044"
  },
  "test066" : {
    "methodSignature" : "public ArchiveEntry getNextEntry() throws IOException",
    "methodName" : "getNextEntry",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066() throws Throwable {\n    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);\n    zipArchiveInputStream0.getNextEntry();\n}",
    "testName" : "test066"
  },
  "test088" : {
    "methodSignature" : "public void close() throws IOException",
    "methodName" : "close",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088() throws Throwable {\n    FileSystemHandling.shouldAllThrowIOExceptions();\n    FileDescriptor fileDescriptor0 = new FileDescriptor();\n    MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);\n    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(mockFileInputStream0);\n    zipArchiveInputStream0.close();\n}",
    "testName" : "test088"
  },
  "test1818" : {
    "methodSignature" : "public int read(byte[] buffer, int start, int length) throws IOException",
    "methodName" : "read",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1818() throws Throwable {\n    Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());\n    doReturn(false, false).when(enumeration0).hasMoreElements();\n    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);\n    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0);\n    zipArchiveInputStream0.close();\n    byte[] byteArray0 = new byte[7];\n    zipArchiveInputStream0.read(byteArray0, 851, (int) (byte) 101);\n}",
    "testName" : "test1818"
  },
  "test1919" : {
    "methodSignature" : "public ZipArchiveEntry getNextZipEntry() throws IOException",
    "methodName" : "getNextZipEntry",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1919() throws Throwable {\n    Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());\n    doReturn(false, false).when(enumeration0).hasMoreElements();\n    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);\n    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(sequenceInputStream0);\n    zipArchiveInputStream0.close();\n    ZipArchiveEntry zipArchiveEntry0 = zipArchiveInputStream0.getNextZipEntry();\n}",
    "testName" : "test1919"
  }
}