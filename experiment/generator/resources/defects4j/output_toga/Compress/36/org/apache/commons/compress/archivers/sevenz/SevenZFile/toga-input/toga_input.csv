focal_method,test_prefix,docstring
"public static boolean matches(final byte[] signature, final int length) {
    if (length < sevenZSignature.length) {
        return false;
    }
    for (int i = 0; i < sevenZSignature.length; i++) {
        if (signature[i] != sevenZSignature[i]) {
            return false;
        }
    }
    return true;
}","public void test000() throws Throwable {
    byte[] byteArray0 = new byte[3];
    byteArray0[0] = (byte) 73;
    boolean boolean0 = SevenZFile.matches(byteArray0, (byte) 73);
    assertFalse(boolean0);
}","/**
 * Checks if the signature matches what is expected for a 7z file.
 *
 * @param signature
 *            the bytes to check
 * @param length
 *            the number of bytes to check
 * @return true, if this is the signature of a 7z archive.
 * @since 1.8
 */"
"public static boolean matches(final byte[] signature, final int length) {
    if (length < sevenZSignature.length) {
        return false;
    }
    for (int i = 0; i < sevenZSignature.length; i++) {
        if (signature[i] != sevenZSignature[i]) {
            return false;
        }
    }
    return true;
}","public void test011() throws Throwable {
    byte[] byteArray0 = new byte[2];
    boolean boolean0 = SevenZFile.matches(byteArray0, (byte) 6);
    assertFalse(boolean0);
}","/**
 * Checks if the signature matches what is expected for a 7z file.
 *
 * @param signature
 *            the bytes to check
 * @param length
 *            the number of bytes to check
 * @return true, if this is the signature of a 7z archive.
 * @since 1.8
 */"
"public static boolean matches(final byte[] signature, final int length) {
    if (length < sevenZSignature.length) {
        return false;
    }
    for (int i = 0; i < sevenZSignature.length; i++) {
        if (signature[i] != sevenZSignature[i]) {
            return false;
        }
    }
    return true;
}","public void test022() throws Throwable {
    // Undeclared exception!
    try {
        SevenZFile.matches((byte[]) null, 459);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.sevenz.SevenZFile"", e);
    }
}","/**
 * Checks if the signature matches what is expected for a 7z file.
 *
 * @param signature
 *            the bytes to check
 * @param length
 *            the number of bytes to check
 * @return true, if this is the signature of a 7z archive.
 * @since 1.8
 */"
"public SevenZFile(final File filename, final byte[] password) throws IOException {
    boolean succeeded = false;
    this.file = new RandomAccessFile(filename, ""r"");
    this.fileName = filename.getAbsolutePath();
    try {
        archive = readHeaders(password);
        if (password != null) {
            this.password = new byte[password.length];
            System.arraycopy(password, 0, this.password, 0, password.length);
        } else {
            this.password = null;
        }
        succeeded = true;
    } finally {
        if (!succeeded) {
            this.file.close();
        }
    }
}","public void test033() throws Throwable {
    byte[] byteArray0 = new byte[5];
    SevenZFile sevenZFile0 = null;
    try {
        sevenZFile0 = new SevenZFile((File) null, byteArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.evosuite.runtime.mock.java.io.MockRandomAccessFile"", e);
    }
}","/**
 * Reads a file as 7z archive
 *
 * @param filename the file to read
 * @param password optional password if the archive is encrypted -
 * the byte array is supposed to be the UTF16-LE encoded
 * representation of the password.
 * @throws IOException if reading the archive fails
 */"
"public SevenZFile(final File filename, final byte[] password) throws IOException {
    boolean succeeded = false;
    this.file = new RandomAccessFile(filename, ""r"");
    this.fileName = filename.getAbsolutePath();
    try {
        archive = readHeaders(password);
        if (password != null) {
            this.password = new byte[password.length];
            System.arraycopy(password, 0, this.password, 0, password.length);
        } else {
            this.password = null;
        }
        succeeded = true;
    } finally {
        if (!succeeded) {
            this.file.close();
        }
    }
}","public void test044() throws Throwable {
    MockFile mockFile0 = new MockFile("""", """");
    byte[] byteArray0 = new byte[1];
    SevenZFile sevenZFile0 = null;
    try {
        sevenZFile0 = new SevenZFile(mockFile0, byteArray0);
        fail(""Expecting exception: IOException"");
    } catch (Throwable e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.evosuite.runtime.mock.java.io.NativeMockedIO"", e);
    }
}","/**
 * Reads a file as 7z archive
 *
 * @param filename the file to read
 * @param password optional password if the archive is encrypted -
 * the byte array is supposed to be the UTF16-LE encoded
 * representation of the password.
 * @throws IOException if reading the archive fails
 */"
"public SevenZFile(final File filename, final byte[] password) throws IOException {
    boolean succeeded = false;
    this.file = new RandomAccessFile(filename, ""r"");
    this.fileName = filename.getAbsolutePath();
    try {
        archive = readHeaders(password);
        if (password != null) {
            this.password = new byte[password.length];
            System.arraycopy(password, 0, this.password, 0, password.length);
        } else {
            this.password = null;
        }
        succeeded = true;
    } finally {
        if (!succeeded) {
            this.file.close();
        }
    }
}","public void test055() throws Throwable {
    MockFile mockFile0 = new MockFile(""\""&[;r:W"", """");
    byte[] byteArray0 = new byte[2];
    SevenZFile sevenZFile0 = null;
    try {
        sevenZFile0 = new SevenZFile(mockFile0, byteArray0);
        fail(""Expecting exception: FileNotFoundException"");
    } catch (Throwable e) {
        //
        // File does not exist, and RandomAccessFile is not open in write mode
        //
        verifyException(""org.evosuite.runtime.mock.java.io.MockRandomAccessFile"", e);
    }
}","/**
 * Reads a file as 7z archive
 *
 * @param filename the file to read
 * @param password optional password if the archive is encrypted -
 * the byte array is supposed to be the UTF16-LE encoded
 * representation of the password.
 * @throws IOException if reading the archive fails
 */"
"public SevenZFile(final File filename) throws IOException {
    this(filename, null);
}","public void test066() throws Throwable {
    SevenZFile sevenZFile0 = null;
    try {
        sevenZFile0 = new SevenZFile((File) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.evosuite.runtime.mock.java.io.MockRandomAccessFile"", e);
    }
}","/**
 * Reads a file as unencrypted 7z archive
 *
 * @param filename the file to read
 * @throws IOException if reading the archive fails
 */"
"public SevenZFile(final File filename) throws IOException {
    this(filename, null);
}","public void test077() throws Throwable {
    MockFile mockFile0 = new MockFile(""BCJ_ARM_THUMB_FILTER"");
    SevenZFile sevenZFile0 = null;
    try {
        sevenZFile0 = new SevenZFile(mockFile0);
        fail(""Expecting exception: FileNotFoundException"");
    } catch (Throwable e) {
        //
        // File does not exist, and RandomAccessFile is not open in write mode
        //
        verifyException(""org.evosuite.runtime.mock.java.io.MockRandomAccessFile"", e);
    }
}","/**
 * Reads a file as unencrypted 7z archive
 *
 * @param filename the file to read
 * @throws IOException if reading the archive fails
 */"
"public SevenZFile(final File filename, final byte[] password) throws IOException {
    boolean succeeded = false;
    this.file = new RandomAccessFile(filename, ""r"");
    this.fileName = filename.getAbsolutePath();
    try {
        archive = readHeaders(password);
        if (password != null) {
            this.password = new byte[password.length];
            System.arraycopy(password, 0, this.password, 0, password.length);
        } else {
            this.password = null;
        }
        succeeded = true;
    } finally {
        if (!succeeded) {
            this.file.close();
        }
    }
}","public void test088() throws Throwable {
    File file0 = MockFile.createTempFile(""Z03W"", ""Z03W"");
    SevenZFile sevenZFile0 = null;
    try {
        sevenZFile0 = new SevenZFile(file0, (byte[]) null);
        fail(""Expecting exception: EOFException"");
    } catch (Throwable e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.io.RandomAccessFile"", e);
    }
}","/**
 * Reads a file as 7z archive
 *
 * @param filename the file to read
 * @param password optional password if the archive is encrypted -
 * the byte array is supposed to be the UTF16-LE encoded
 * representation of the password.
 * @throws IOException if reading the archive fails
 */"
"public static boolean matches(final byte[] signature, final int length) {
    if (length < sevenZSignature.length) {
        return false;
    }
    for (int i = 0; i < sevenZSignature.length; i++) {
        if (signature[i] != sevenZSignature[i]) {
            return false;
        }
    }
    return true;
}","public void test099() throws Throwable {
    byte[] byteArray0 = new byte[2];
    byteArray0[0] = (byte) 55;
    boolean boolean0 = SevenZFile.matches(byteArray0, (byte) 55);
    assertFalse(boolean0);
}","/**
 * Checks if the signature matches what is expected for a 7z file.
 *
 * @param signature
 *            the bytes to check
 * @param length
 *            the number of bytes to check
 * @return true, if this is the signature of a 7z archive.
 * @since 1.8
 */"
"public static boolean matches(final byte[] signature, final int length) {
    if (length < sevenZSignature.length) {
        return false;
    }
    for (int i = 0; i < sevenZSignature.length; i++) {
        if (signature[i] != sevenZSignature[i]) {
            return false;
        }
    }
    return true;
}","public void test1010() throws Throwable {
    byte[] byteArray0 = new byte[3];
    boolean boolean0 = SevenZFile.matches(byteArray0, (byte) 0);
    assertFalse(boolean0);
}","/**
 * Checks if the signature matches what is expected for a 7z file.
 *
 * @param signature
 *            the bytes to check
 * @param length
 *            the number of bytes to check
 * @return true, if this is the signature of a 7z archive.
 * @since 1.8
 */"
"public static boolean matches(final byte[] signature, final int length) {
    if (length < sevenZSignature.length) {
        return false;
    }
    for (int i = 0; i < sevenZSignature.length; i++) {
        if (signature[i] != sevenZSignature[i]) {
            return false;
        }
    }
    return true;
}","public void test1111() throws Throwable {
    byte[] byteArray0 = new byte[0];
    // Undeclared exception!
    try {
        SevenZFile.matches(byteArray0, 1601);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 0
        //
        verifyException(""org.apache.commons.compress.archivers.sevenz.SevenZFile"", e);
    }
}","/**
 * Checks if the signature matches what is expected for a 7z file.
 *
 * @param signature
 *            the bytes to check
 * @param length
 *            the number of bytes to check
 * @return true, if this is the signature of a 7z archive.
 * @since 1.8
 */"
"public SevenZFile(final File filename) throws IOException {
    this(filename, null);
}","public void test1212() throws Throwable {
    EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/var/folders/vv/c7q6vm8920vc7d5p_87011w40000gn/T/WS['V40 CRCs, "");
    FileSystemHandling.appendStringToFile(evoSuiteFile0, ""WS['V4"");
    File file0 = MockFile.createTempFile(""WS['V4"", "" CRCs, "");
    SevenZFile sevenZFile0 = null;
    try {
        sevenZFile0 = new SevenZFile(file0);
        //  fail(""Expecting exception: EOFException"");
        // Unstable assertion
    } catch (Throwable e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.io.RandomAccessFile"", e);
    }
}","/**
 * Reads a file as unencrypted 7z archive
 *
 * @param filename the file to read
 * @throws IOException if reading the archive fails
 */"
"public SevenZFile(final File filename) throws IOException {
    this(filename, null);
}","public void test1313() throws Throwable {
    File file0 = MockFile.createTempFile(""WS['V4"", "" CRCs, "");
    SevenZFile sevenZFile0 = null;
    try {
        sevenZFile0 = new SevenZFile(file0);
        fail(""Expecting exception: EOFException"");
    } catch (Throwable e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.io.RandomAccessFile"", e);
    }
}","/**
 * Reads a file as unencrypted 7z archive
 *
 * @param filename the file to read
 * @throws IOException if reading the archive fails
 */"
