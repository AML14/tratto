project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    MockFile mockFile0 = new MockFile(""|Z<S)|q:+V;KN8Ck`#"");
    ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
    String string0 = zipArchiveOutputStream0.getEncoding();
    assertEquals(""UTF8"", string0);
}",0,assertNotNull(string0)
project,0,test011,"public void test011() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
    zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
    try {
        zipArchiveOutputStream0.close();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // This archives contains unclosed entries.
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream"", e);
    }
}",0,
project,0,test033,"public void test033() throws Throwable {
    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
    ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(pipedOutputStream0);
    zipArchiveOutputStream0.setFallbackToUTF8(true);
    assertEquals(""UTF8"", zipArchiveOutputStream0.getEncoding());
}",0,assertNotNull(zipArchiveOutputStream0.getEncoding())
project,0,test044,"public void test044() throws Throwable {
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
    zipArchiveOutputStream0.setEncoding(""93Z"");
    zipArchiveOutputStream0.setUseLanguageEncodingFlag(true);
    assertEquals(""93Z"", zipArchiveOutputStream0.getEncoding());
}",0,assertNotNull(zipArchiveOutputStream0.getEncoding())
project,0,test055,"public void test055() throws Throwable {
    ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
    // Undeclared exception!
    try {
        zipArchiveOutputStream0.createArchiveEntry((File) null, ""Invalid compression level: "");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveEntry"", e);
    }
}",0,
project,0,test099,"public void test099() throws Throwable {
    MockFile mockFile0 = new MockFile(""g&>96:qIxO^90966vs"");
    ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
    ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
    boolean boolean0 = zipArchiveOutputStream1.isSeekable();
    assertEquals(""UTF8"", zipArchiveOutputStream1.getEncoding());
}",0,assertNotNull(zipArchiveOutputStream1.getEncoding())
project,0,test0910,"public void test0910() throws Throwable {
    MockFile mockFile0 = new MockFile(""g&>96:qIxO^90966vs"");
    ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
    ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
    boolean boolean0 = zipArchiveOutputStream1.isSeekable();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test0911,"public void test0911() throws Throwable {
    MockFile mockFile0 = new MockFile(""g&>96:qIxO^90966vs"");
    ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
    ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
    boolean boolean0 = zipArchiveOutputStream1.isSeekable();
    assertEquals(""UTF8"", zipArchiveOutputStream0.getEncoding());
}",0,assertNotNull(zipArchiveOutputStream0.getEncoding())
project,0,test1012,"public void test1012() throws Throwable {
    String string0 = ""!O\\uHYC<"";
    MockFile mockFile0 = new MockFile("""", string0);
    ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
    boolean boolean0 = zipArchiveOutputStream0.isSeekable();
    assertEquals(""UTF8"", zipArchiveOutputStream0.getEncoding());
}",0,assertNotNull(zipArchiveOutputStream0.getEncoding())
project,0,test1013,"public void test1013() throws Throwable {
    String string0 = ""!O\\uHYC<"";
    MockFile mockFile0 = new MockFile("""", string0);
    ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
    boolean boolean0 = zipArchiveOutputStream0.isSeekable();
    assertTrue(boolean0);
}",0,
project,0,test1114,"public void test1114() throws Throwable {
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
    zipArchiveOutputStream0.setUseLanguageEncodingFlag(true);
    assertEquals(""UTF8"", zipArchiveOutputStream0.getEncoding());
}",0,assertNotNull(zipArchiveOutputStream0.getEncoding())
project,0,test1419,"public void test1419() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
    zipArchiveEntry0.setCrc(3);
    zipArchiveEntry0.setSize(0);
    zipArchiveOutputStream0.setMethod(0);
    zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
    try {
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        fail(""Expecting exception: ZipException"");
    } catch (ZipException e) {
        //
        // bad CRC checksum for entry : 3 instead of 0
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream"", e);
    }
}",1,
project,0,test1520,"public void test1520() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
    zipArchiveEntry0.setCrc(0);
    zipArchiveEntry0.setSize(8);
    zipArchiveOutputStream0.setMethod(0);
    zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
    try {
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        fail(""Expecting exception: ZipException"");
    } catch (ZipException e) {
        //
        // bad size for entry : 8 instead of 0
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream"", e);
    }
}",0,
project,0,test1621,"public void test1621() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    MockFile mockFile0 = new MockFile(""not encodeable"", ""not encodeable"");
    ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
    zipArchiveOutputStream0.setMethod(0);
    try {
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Error in writing to file
        //
        verifyException(""org.evosuite.runtime.mock.java.io.NativeMockedIO"", e);
    }
}",0,
project,0,test1722,"public void test1722() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
    zipArchiveOutputStream0.setMethod(0);
    try {
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        fail(""Expecting exception: ZipException"");
    } catch (ZipException e) {
        //
        // uncompressed size is required for STORED method when not writing to a file
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream"", e);
    }
}",1,
project,0,test1823,"public void test1823() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
    ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
    zipArchiveEntry0.setSize(8);
    zipArchiveOutputStream0.setMethod(0);
    try {
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        fail(""Expecting exception: ZipException"");
    } catch (ZipException e) {
        //
        // crc checksum is required for STORED method when not writing to a file
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream"", e);
    }
}",1,
project,0,test2026,"public void test2026() throws Throwable {
    ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
    // Undeclared exception!
    try {
        zipArchiveOutputStream0.setLevel((-437));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid compression level: -437
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream"", e);
    }
}",1,
project,0,test2127,"public void test2127() throws Throwable {
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
    // Undeclared exception!
    try {
        zipArchiveOutputStream0.setLevel(2048);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid compression level: 2048
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream"", e);
    }
}",1,
project,0,test2228,"public void test2228() throws Throwable {
    MockPrintStream mockPrintStream0 = new MockPrintStream(""] for UniCode path extra data."");
    ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockPrintStream0);
    zipArchiveOutputStream0.setLevel((-1));
    assertEquals(""UTF8"", zipArchiveOutputStream0.getEncoding());
}",0,assertNotNull(zipArchiveOutputStream0.getEncoding())
project,0,test2329,"public void test2329() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
    zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
    zipArchiveEntry0.setMethod(0);
    // Undeclared exception!
    try {
        zipArchiveOutputStream0.write((byte[]) null, 3, 8249);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test2430,"public void test2430() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
    zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
    ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
    // Undeclared exception!
    try {
        zipArchiveOutputStream1.writeCentralFileHeader(zipArchiveEntry0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test2633,"public void test2633() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
    byte[] byteArray0 = new byte[1];
    zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
    // Undeclared exception!
    try {
        zipArchiveOutputStream0.write(byteArray0, 0, 8263);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.zip.Deflater"", e);
    }
}",0,
project,0,test2836,"public void test2836() throws Throwable {
    ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
    ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
    zipArchiveOutputStream1.flush();
    assertEquals(""UTF8"", zipArchiveOutputStream1.getEncoding());
}",0,assertNotNull(zipArchiveOutputStream1.getEncoding())
project,0,test3243,"public void test3243() throws Throwable {
    ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
    ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NOT_ENCODEABLE;
    zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    zipArchiveEntry0.setComment(""org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField"");
    // Undeclared exception!
    try {
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream"", e);
    }
}",0,
project,0,test3445,"public void test3445() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    zipArchiveEntry0.setComment(""S3k?iq%%csEW>(QI"");
    ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
    // Undeclared exception!
    try {
        zipArchiveOutputStream0.writeCentralFileHeader(zipArchiveEntry0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test3648,"public void test3648() throws Throwable {
    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
    MockFile mockFile0 = new MockFile(""Q6x$|*^L+fM("");
    ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
    try {
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Error in writing to file
        //
        verifyException(""org.evosuite.runtime.mock.java.io.NativeMockedIO"", e);
    }
}",0,
