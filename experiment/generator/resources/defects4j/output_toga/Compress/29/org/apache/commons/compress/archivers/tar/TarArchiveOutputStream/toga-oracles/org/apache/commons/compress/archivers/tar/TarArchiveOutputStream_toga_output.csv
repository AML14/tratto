project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
    tarArchiveOutputStream0.write((byte[]) null, (-3923), (-3923));
}",1,
project,0,test011,"public void test011() throws Throwable {
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
    TarArchiveOutputStream tarArchiveOutputStream1 = new TarArchiveOutputStream(tarArchiveOutputStream0, 0, ""org.apache.commons.compress.archivers.dump.DumpArchiveConstants$SEGMENT_TYPE"");
    tarArchiveOutputStream1.close();
}",0,
project,0,test022,"public void test022() throws Throwable {
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null);
    TarArchiveOutputStream tarArchiveOutputStream1 = new TarArchiveOutputStream(tarArchiveOutputStream0, 0);
    tarArchiveOutputStream1.close();
}",0,
project,0,test033,"public void test033() throws Throwable {
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
    try {
        tarArchiveOutputStream0.closeArchiveEntry();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // No current entry to close
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarArchiveOutputStream"", e);
    }
}",1,
project,0,test044,"public void test044() throws Throwable {
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
    tarArchiveOutputStream0.setLongFileMode(1694);
    tarArchiveOutputStream0.closeArchiveEntry();
}",1,
project,0,test055,"public void test055() throws Throwable {
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
    HashMap<String, String> hashMap0 = new HashMap<String, String>();
    tarArchiveOutputStream0.setBigNumberMode((-1573));
    tarArchiveOutputStream0.getCount();
    String string0 = ""=(3"";
    MockURI.URI(""=(3"", ""Error parsing extra fields for entry: "", ""Error parsing extra fields for entry: "", ""=(3"", ""Error parsing extra fields for entry: "");
    int int0 = 383;
    TarArchiveOutputStream tarArchiveOutputStream1 = new TarArchiveOutputStream(tarArchiveOutputStream0, int0, string0);
    tarArchiveOutputStream0.close();
}",0,
project,0,test066,"public void test066() throws Throwable {
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0, ""UNKNOWN"");
    tarArchiveOutputStream0.closeArchiveEntry();
}",1,
project,0,test077,"public void test077() throws Throwable {
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(bufferedOutputStream0);
    tarArchiveOutputStream0.flush();
    tarArchiveOutputStream0.setBigNumberMode(0);
}",0,
project,0,test088,"public void test088() throws Throwable {
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
    tarArchiveOutputStream0.setBigNumberMode(2);
    tarArchiveOutputStream0.close();
}",0,
project,0,test099,"public void test099() throws Throwable {
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
    tarArchiveOutputStream0.setAddPaxHeadersForNonAsciiNames(true);
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""");
    Map<String, String> map0 = ZoneId.SHORT_IDS;
    tarArchiveOutputStream0.writePaxHeaders(tarArchiveEntry0, """", map0);
}",0,
project,0,test1010,"public void test1010() throws Throwable {
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
    tarArchiveOutputStream0.putArchiveEntry((ArchiveEntry) null);
}",0,
project,0,test1111,"public void test1111() throws Throwable {
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
    tarArchiveOutputStream0.close();
}",0,
project,0,test1212,"public void test1212() throws Throwable {
    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""U,/rHn#&l+?3L1w"");
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0);
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""U,/rHn#&l+?3L1w"");
    Map<String, String> map0 = ZoneId.SHORT_IDS;
    tarArchiveOutputStream0.writePaxHeaders(tarArchiveEntry0, ""U,/rHn#&l+?3L1w"", map0);
}",0,
project,0,test1313,"public void test1313() throws Throwable {
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""=d,\""Cu"");
    HashMap<String, String> hashMap0 = new HashMap<String, String>();
    tarArchiveOutputStream0.writePaxHeaders(tarArchiveEntry0, ""=d,\""Cu"", hashMap0);
}",0,
project,0,test1414,"public void test1414() throws Throwable {
    MockPrintStream mockPrintStream0 = new MockPrintStream(""1?dV6#bN?N"");
    MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, true);
    PrintStream printStream0 = mockPrintStream1.append((CharSequence) ""1?dV6#bN?N"");
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(printStream0);
    File file0 = MockFile.createTempFile(""1?dV6#bN?N"", ""1?dV6#bN?N"");
    file0.setWritable(true);
    file0.getCanonicalFile();
    mockPrintStream1.flush();
    file0.setReadable(true);
    tarArchiveOutputStream0.createArchiveEntry(file0, ""R:'"");
    tarArchiveOutputStream0.finish();
    tarArchiveOutputStream0.getRecordSize();
    tarArchiveOutputStream0.setBigNumberMode(33188);
    tarArchiveOutputStream0.close();
}",0,
project,0,test1515,"public void test1515() throws Throwable {
    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("" \u0000"");
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0);
    MockFile mockFile0 = new MockFile("", fileSpecPosition="", ""px&K"");
    tarArchiveOutputStream0.createArchiveEntry(mockFile0, "" \u0000"");
}",0,
project,0,test1616,"public void test1616() throws Throwable {
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
    HashMap<String, String> hashMap0 = new HashMap<String, String>();
    TarArchiveOutputStream tarArchiveOutputStream1 = new TarArchiveOutputStream(tarArchiveOutputStream0);
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader"");
    tarArchiveOutputStream1.writePaxHeaders(tarArchiveEntry0, ""ustar\u0000"", hashMap0);
}",0,
project,0,test1818,"public void test1818() throws Throwable {
    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""U,/rHn#&l+?3L1w"");
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0);
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""U,/rHn#&l+?3L1w"");
    HashMap<String, String> hashMap0 = new HashMap<String, String>();
    tarArchiveOutputStream0.writePaxHeaders(tarArchiveEntry0, ""U,/rHn#&l+?3L1w"", hashMap0);
}",0,
project,0,test1919,"public void test1919() throws Throwable {
    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""U,/rHn#&l+?3QL1w"");
    MockFile mockFile0 = new MockFile(""HzXff{LO[+G`'"", "" exceeds maximum signed long"");
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0);
    tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
    tarArchiveOutputStream0.close();
}",0,
project,0,test2020,"public void test2020() throws Throwable {
    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("" \u0000"");
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0);
    tarArchiveOutputStream0.close();
    CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("" \u0000"");
    tarArchiveOutputStream0.putArchiveEntry(cpioArchiveEntry0);
}",0,
project,0,test2121,"public void test2121() throws Throwable {
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(bufferedOutputStream0);
    tarArchiveOutputStream0.flush();
    BufferedOutputStream bufferedOutputStream1 = new BufferedOutputStream(tarArchiveOutputStream0);
    byte[] byteArray0 = new byte[0];
    tarArchiveOutputStream0.close();
    tarArchiveOutputStream0.close();
}",0,
project,0,test2222,"public void test2222() throws Throwable {
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
    tarArchiveOutputStream0.finish();
    tarArchiveOutputStream0.close();
}",0,
project,0,test2323,"public void test2323() throws Throwable {
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""=d,\""Cu"");
    HashMap<String, String> hashMap0 = new HashMap<String, String>();
    hashMap0.put("""", """");
    tarArchiveOutputStream0.writePaxHeaders(tarArchiveEntry0, ""=d,\""Cu"", hashMap0);
}",0,
project,0,test2424,"public void test2424() throws Throwable {
    String string0 = ""U,/rHn#&l+?3L1w"";
    String string1 = """";
    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("""");
    MockFile mockFile0 = new MockFile(""U,/rHn#&l+?3L1w"", """");
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0);
    tarArchiveOutputStream0.close();
    tarArchiveOutputStream0.createArchiveEntry(mockFile0, ""fuvDK`!h1Y"");
    TarArchiveEntry tarArchiveEntry0 = null;
    try {
        tarArchiveEntry0 = new TarArchiveEntry(string1);
        fail(""Expecting exception: IOException"");
    } catch (Throwable e) {
        //
        // Stream has already been finished
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarArchiveOutputStream"", e);
    }
}",0,
project,0,test2525,"public void test2525() throws Throwable {
    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("" \u0000"");
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0);
    tarArchiveOutputStream0.close();
    tarArchiveOutputStream0.closeArchiveEntry();
}",1,
project,0,test2626,"public void test2626() throws Throwable {
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
    Map<String, String> map0 = ZoneId.SHORT_IDS;
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""");
    tarArchiveOutputStream0.writePaxHeaders(tarArchiveEntry0, """", map0);
}",0,
project,0,test2727,"public void test2727() throws Throwable {
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("""");
    HashMap<String, String> hashMap0 = new HashMap<String, String>();
    tarArchiveOutputStream0.writePaxHeaders(tarArchiveEntry0, """", hashMap0);
}",0,
project,0,test2828,"public void test2828() throws Throwable {
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
    tarArchiveOutputStream0.finish();
    try {
        tarArchiveOutputStream0.finish();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // This archive has already been finished
        //
        verifyException(""org.apache.commons.compress.archivers.tar.TarArchiveOutputStream"", e);
    }
}",1,
project,0,test2929,"public void test2929() throws Throwable {
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null, 2268, 2268);
    BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(tarArchiveOutputStream0);
    TarArchiveOutputStream tarArchiveOutputStream1 = new TarArchiveOutputStream(bufferedOutputStream0, (-744), (String) null);
    tarArchiveOutputStream1.close();
    tarArchiveOutputStream1.closeArchiveEntry();
}",1,
project,0,test3030,"public void test3030() throws Throwable {
    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""0+f"");
    MockFile mockFile0 = new MockFile(""U,/rHn#<l+?3L1P"", ""0+f"");
    File file0 = MockFile.createTempFile(""U,/rHn#<l+?3L1P"", ""U,/rHn#<l+?3L1P"", (File) mockFile0);
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0);
    tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
}",0,
project,0,test3131,"public void test3131() throws Throwable {
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
    HashMap<String, String> hashMap0 = new HashMap<String, String>();
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader"");
    tarArchiveEntry0.setModTime((-4708L));
    tarArchiveOutputStream0.writePaxHeaders(tarArchiveEntry0, ""ustar\u0000"", hashMap0);
    tarArchiveOutputStream0.closeArchiveEntry();
}",1,
project,0,test3333,"public void test3333() throws Throwable {
    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""U,/rHn#&l+?3L1Tw"");
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0);
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""U,/rHn#&l+?3L1Tw"");
    MockDate mockDate0 = new MockDate(31, 31, 3251, 33188, 1);
    tarArchiveEntry0.setModTime((Date) mockDate0);
    HashMap<String, String> hashMap0 = new HashMap<String, String>();
    tarArchiveOutputStream0.writePaxHeaders(tarArchiveEntry0, ""U,/rHn#&l+?3L1Tw"", hashMap0);
    tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
}",0,
project,0,test3535,"public void test3535() throws Throwable {
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
    TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(""\""<~C<|U r?]j"");
    tarArchiveEntry0.setLinkName(""\""<~C<|U r?]j"");
    HashMap<String, String> hashMap0 = new HashMap<String, String>();
    tarArchiveOutputStream0.writePaxHeaders(tarArchiveEntry0, ""\""<~C<|U r?]j"", hashMap0);
    tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
    tarArchiveOutputStream0.writePaxHeaders(tarArchiveEntry0, ""\""<~C<|U r?]j"", hashMap0);
}",0,
