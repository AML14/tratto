/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 20 02:08:51 GMT 2023
 */
package org.apache.commons.compress.archivers.tar;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.time.ZoneId;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class TarArchiveOutputStream_ESTest extends TarArchiveOutputStream_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        tarArchiveOutputStream0.write((byte[]) null, (-3923), (-3923));
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        TarArchiveOutputStream tarArchiveOutputStream1 = new TarArchiveOutputStream(tarArchiveOutputStream0, 0, "org.apache.commons.compress.archivers.dump.DumpArchiveConstants$SEGMENT_TYPE");
        tarArchiveOutputStream1.close();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null);
        TarArchiveOutputStream tarArchiveOutputStream1 = new TarArchiveOutputStream(tarArchiveOutputStream0, 0);
        tarArchiveOutputStream1.close();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        tarArchiveOutputStream0.closeArchiveEntry();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        tarArchiveOutputStream0.setLongFileMode(1694);
        tarArchiveOutputStream0.closeArchiveEntry();
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        HashMap<String, String> hashMap0 = new HashMap<String, String>();
        tarArchiveOutputStream0.setBigNumberMode((-1573));
        tarArchiveOutputStream0.getCount();
        String string0 = "=(3";
        MockURI.URI("=(3", "Error parsing extra fields for entry: ", "Error parsing extra fields for entry: ", "=(3", "Error parsing extra fields for entry: ");
        int int0 = 383;
        TarArchiveOutputStream tarArchiveOutputStream1 = new TarArchiveOutputStream(tarArchiveOutputStream0, int0, string0);
        tarArchiveOutputStream0.close();
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0, "UNKNOWN");
        tarArchiveOutputStream0.closeArchiveEntry();
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(bufferedOutputStream0);
        tarArchiveOutputStream0.flush();
        tarArchiveOutputStream0.setBigNumberMode(0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        tarArchiveOutputStream0.setBigNumberMode(2);
        tarArchiveOutputStream0.close();
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        tarArchiveOutputStream0.setAddPaxHeadersForNonAsciiNames(true);
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("");
        Map<String, String> map0 = ZoneId.SHORT_IDS;
        tarArchiveOutputStream0.writePaxHeaders(tarArchiveEntry0, "", map0);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        tarArchiveOutputStream0.putArchiveEntry((ArchiveEntry) null);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        tarArchiveOutputStream0.close();
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("U,/rHn#&l+?3L1w");
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0);
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("U,/rHn#&l+?3L1w");
        Map<String, String> map0 = ZoneId.SHORT_IDS;
        tarArchiveOutputStream0.writePaxHeaders(tarArchiveEntry0, "U,/rHn#&l+?3L1w", map0);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("=d,\"Cu");
        HashMap<String, String> hashMap0 = new HashMap<String, String>();
        tarArchiveOutputStream0.writePaxHeaders(tarArchiveEntry0, "=d,\"Cu", hashMap0);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        MockPrintStream mockPrintStream0 = new MockPrintStream("1?dV6#bN?N");
        MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, true);
        PrintStream printStream0 = mockPrintStream1.append((CharSequence) "1?dV6#bN?N");
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(printStream0);
        File file0 = MockFile.createTempFile("1?dV6#bN?N", "1?dV6#bN?N");
        file0.setWritable(true);
        file0.getCanonicalFile();
        mockPrintStream1.flush();
        file0.setReadable(true);
        tarArchiveOutputStream0.createArchiveEntry(file0, "R:'");
        tarArchiveOutputStream0.finish();
        tarArchiveOutputStream0.getRecordSize();
        tarArchiveOutputStream0.setBigNumberMode(33188);
        tarArchiveOutputStream0.close();
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" \u0000");
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0);
        MockFile mockFile0 = new MockFile(", fileSpecPosition=", "px&K");
        tarArchiveOutputStream0.createArchiveEntry(mockFile0, " \u0000");
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        HashMap<String, String> hashMap0 = new HashMap<String, String>();
        TarArchiveOutputStream tarArchiveOutputStream1 = new TarArchiveOutputStream(tarArchiveOutputStream0);
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader");
        tarArchiveOutputStream1.writePaxHeaders(tarArchiveEntry0, "ustar\u0000", hashMap0);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("");
        tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
        System.setCurrentTimeMillis(1);
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("U,/rHn#&l+?3L1w");
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0);
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("U,/rHn#&l+?3L1w");
        HashMap<String, String> hashMap0 = new HashMap<String, String>();
        tarArchiveOutputStream0.writePaxHeaders(tarArchiveEntry0, "U,/rHn#&l+?3L1w", hashMap0);
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("U,/rHn#&l+?3QL1w");
        MockFile mockFile0 = new MockFile("HzXff{LO[+G`'", " exceeds maximum signed long");
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0);
        tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
        tarArchiveOutputStream0.close();
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" \u0000");
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0);
        tarArchiveOutputStream0.close();
        CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(" \u0000");
        tarArchiveOutputStream0.putArchiveEntry(cpioArchiveEntry0);
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(bufferedOutputStream0);
        tarArchiveOutputStream0.flush();
        BufferedOutputStream bufferedOutputStream1 = new BufferedOutputStream(tarArchiveOutputStream0);
        byte[] byteArray0 = new byte[0];
        tarArchiveOutputStream0.close();
        tarArchiveOutputStream0.close();
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        tarArchiveOutputStream0.finish();
        tarArchiveOutputStream0.close();
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("=d,\"Cu");
        HashMap<String, String> hashMap0 = new HashMap<String, String>();
        hashMap0.put("", "");
        tarArchiveOutputStream0.writePaxHeaders(tarArchiveEntry0, "=d,\"Cu", hashMap0);
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        String string0 = "U,/rHn#&l+?3L1w";
        String string1 = "";
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("");
        MockFile mockFile0 = new MockFile("U,/rHn#&l+?3L1w", "");
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0);
        tarArchiveOutputStream0.close();
        tarArchiveOutputStream0.createArchiveEntry(mockFile0, "fuvDK`!h1Y");
        TarArchiveEntry tarArchiveEntry0 = null;
        tarArchiveEntry0 = new TarArchiveEntry(string1);
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" \u0000");
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0);
        tarArchiveOutputStream0.close();
        tarArchiveOutputStream0.closeArchiveEntry();
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        Map<String, String> map0 = ZoneId.SHORT_IDS;
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("");
        tarArchiveOutputStream0.writePaxHeaders(tarArchiveEntry0, "", map0);
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("");
        HashMap<String, String> hashMap0 = new HashMap<String, String>();
        tarArchiveOutputStream0.writePaxHeaders(tarArchiveEntry0, "", hashMap0);
    }

    @Test(timeout = 4000)
    public void test2828() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        tarArchiveOutputStream0.finish();
        tarArchiveOutputStream0.finish();
    }

    @Test(timeout = 4000)
    public void test2929() throws Throwable {
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null, 2268, 2268);
        BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(tarArchiveOutputStream0);
        TarArchiveOutputStream tarArchiveOutputStream1 = new TarArchiveOutputStream(bufferedOutputStream0, (-744), (String) null);
        tarArchiveOutputStream1.close();
        tarArchiveOutputStream1.closeArchiveEntry();
    }

    @Test(timeout = 4000)
    public void test3030() throws Throwable {
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("0+f");
        MockFile mockFile0 = new MockFile("U,/rHn#<l+?3L1P", "0+f");
        File file0 = MockFile.createTempFile("U,/rHn#<l+?3L1P", "U,/rHn#<l+?3L1P", (File) mockFile0);
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0);
        tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
    }

    @Test(timeout = 4000)
    public void test3131() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        HashMap<String, String> hashMap0 = new HashMap<String, String>();
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader");
        tarArchiveEntry0.setModTime((-4708L));
        tarArchiveOutputStream0.writePaxHeaders(tarArchiveEntry0, "ustar\u0000", hashMap0);
        tarArchiveOutputStream0.closeArchiveEntry();
    }

    @Test(timeout = 4000)
    public void test3232() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("mode");
        HashMap<String, String> hashMap0 = new HashMap<String, String>();
        MockDate mockDate0 = new MockDate(33188, (-3192), (-832), 1000, 1000, 21589);
        tarArchiveEntry0.setModTime((Date) mockDate0);
        hashMap0.put("org.apache.commons.compress.archivers.arj.ArjArchiveEntry", "org.apache.commons.compress.archivers.arj.ArjArchiveEntry");
        tarArchiveOutputStream0.writePaxHeaders(tarArchiveEntry0, "", hashMap0);
        System.setCurrentTimeMillis(tarArchiveOutputStream0.BIGNUMBER_POSIX);
    }

    @Test(timeout = 4000)
    public void test3333() throws Throwable {
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("U,/rHn#&l+?3L1Tw");
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0);
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("U,/rHn#&l+?3L1Tw");
        MockDate mockDate0 = new MockDate(31, 31, 3251, 33188, 1);
        tarArchiveEntry0.setModTime((Date) mockDate0);
        HashMap<String, String> hashMap0 = new HashMap<String, String>();
        tarArchiveOutputStream0.writePaxHeaders(tarArchiveEntry0, "U,/rHn#&l+?3L1Tw", hashMap0);
        tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
    }

    @Test(timeout = 4000)
    public void test3434() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("mode");
        HashMap<String, String> hashMap0 = new HashMap<String, String>();
        MockDate mockDate0 = new MockDate(33188, (-3192), (-832), 1000, 1000, 21589);
        tarArchiveEntry0.setModTime((Date) mockDate0);
        hashMap0.put("org.apache.commons.compress.archivers.arj.ArjArchiveEntry", "org.apache.commons.compress.archivers.arj.ArjArchiveEntry");
        String string0 = "";
        tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
        tarArchiveOutputStream0.writePaxHeaders(tarArchiveEntry0, string0, hashMap0);
        System.setCurrentTimeMillis(tarArchiveOutputStream0.BIGNUMBER_POSIX);
    }

    @Test(timeout = 4000)
    public void test3535() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("\"<~C<|U r?]j");
        tarArchiveEntry0.setLinkName("\"<~C<|U r?]j");
        HashMap<String, String> hashMap0 = new HashMap<String, String>();
        tarArchiveOutputStream0.writePaxHeaders(tarArchiveEntry0, "\"<~C<|U r?]j", hashMap0);
        tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
        tarArchiveOutputStream0.writePaxHeaders(tarArchiveEntry0, "\"<~C<|U r?]j", hashMap0);
    }
}
