{
  "test00" : {
    "methodSignature" : "public DumpArchiveInputStream(InputStream is) throws ArchiveException",
    "methodName" : "DumpArchiveInputStream",
    "className" : "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());\n    doReturn(false).when(enumeration0).hasMoreElements();\n    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);\n    DumpArchiveInputStream dumpArchiveInputStream0 = null;\n    dumpArchiveInputStream0 = new DumpArchiveInputStream(sequenceInputStream0);\n}",
    "testName" : "test00"
  },
  "test11" : {
    "methodSignature" : "public static boolean matches(byte[] buffer, int length)",
    "methodName" : "matches",
    "className" : "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    byte[] byteArray0 = new byte[9];\n    DumpArchiveInputStream.matches(byteArray0, 41);\n}",
    "testName" : "test11"
  },
  "test22" : {
    "methodSignature" : "public static boolean matches(byte[] buffer, int length)",
    "methodName" : "matches",
    "className" : "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    byte[] byteArray0 = new byte[6];\n    boolean boolean0 = DumpArchiveInputStream.matches(byteArray0, (-242));\n}",
    "testName" : "test22"
  },
  "test33" : {
    "methodSignature" : "public static boolean matches(byte[] buffer, int length)",
    "methodName" : "matches",
    "className" : "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    DumpArchiveInputStream.matches((byte[]) null, 9576);\n}",
    "testName" : "test33"
  }
}