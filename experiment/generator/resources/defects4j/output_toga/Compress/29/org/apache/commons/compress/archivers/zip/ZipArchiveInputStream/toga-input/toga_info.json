{
  "test1212" : {
    "methodSignature" : "public static boolean matches(byte[] signature, int length)",
    "methodName" : "matches",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1212() throws Throwable {\n    byte[] byteArray0 = new byte[2];\n    byteArray0[0] = (byte) 80;\n    boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, (byte) 80);\n}",
    "testName" : "test1212"
  },
  "test1010" : {
    "methodSignature" : "public long skip(long value) throws IOException",
    "methodName" : "skip",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1010() throws Throwable {\n    PipedInputStream pipedInputStream0 = new PipedInputStream();\n    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0);\n    long long0 = zipArchiveInputStream0.skip(117853008L);\n}",
    "testName" : "test1010"
  },
  "test1111" : {
    "methodSignature" : "public static boolean matches(byte[] signature, int length)",
    "methodName" : "matches",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1111() throws Throwable {\n    byte[] byteArray0 = new byte[2];\n    boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, (byte) 0);\n}",
    "testName" : "test1111"
  },
  "test011" : {
    "methodSignature" : "public int getCount()",
    "methodName" : "getCount",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011() throws Throwable {\n    byte[] byteArray0 = new byte[9];\n    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, 704);\n    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);\n    zipArchiveInputStream0.close();\n    zipArchiveInputStream0.getNextZipEntry();\n    zipArchiveInputStream0.getCount();\n}",
    "testName" : "test011"
  },
  "test033" : {
    "methodSignature" : "public boolean canReadEntryData(ArchiveEntry ae)",
    "methodName" : "canReadEntryData",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033() throws Throwable {\n    PipedInputStream pipedInputStream0 = new PipedInputStream();\n    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0);\n    boolean boolean0 = zipArchiveInputStream0.canReadEntryData((ArchiveEntry) null);\n}",
    "testName" : "test033"
  },
  "test055" : {
    "methodSignature" : "public int getCount()",
    "methodName" : "getCount",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055() throws Throwable {\n    PipedInputStream pipedInputStream0 = new PipedInputStream();\n    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0);\n    ZipArchiveInputStream zipArchiveInputStream1 = new ZipArchiveInputStream(zipArchiveInputStream0);\n    zipArchiveInputStream1.getNextZipEntry();\n    zipArchiveInputStream1.getCount();\n}",
    "testName" : "test055"
  },
  "test077" : {
    "methodSignature" : "public long getBytesRead()",
    "methodName" : "getBytesRead",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077() throws Throwable {\n    byte[] byteArray0 = new byte[9];\n    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, 704);\n    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);\n    zipArchiveInputStream0.close();\n    zipArchiveInputStream0.close();\n    zipArchiveInputStream0.getBytesRead();\n}",
    "testName" : "test077"
  },
  "test099" : {
    "methodSignature" : "public long skip(long value) throws IOException",
    "methodName" : "skip",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099() throws Throwable {\n    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);\n    long long0 = zipArchiveInputStream0.skip(0L);\n}",
    "testName" : "test099"
  },
  "test000" : {
    "methodSignature" : "public ArchiveEntry getNextEntry() throws IOException",
    "methodName" : "getNextEntry",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    PipedInputStream pipedInputStream0 = new PipedInputStream();\n    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0);\n    zipArchiveInputStream0.getNextEntry();\n}",
    "testName" : "test000"
  },
  "test022" : {
    "methodSignature" : "public int getCount()",
    "methodName" : "getCount",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022() throws Throwable {\n    byte[] byteArray0 = new byte[35];\n    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);\n    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);\n    zipArchiveInputStream0.getNextZipEntry();\n    zipArchiveInputStream0.getCount();\n}",
    "testName" : "test022"
  },
  "test044" : {
    "methodSignature" : "public boolean canReadEntryData(ArchiveEntry ae)",
    "methodName" : "canReadEntryData",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044() throws Throwable {\n    PipedInputStream pipedInputStream0 = new PipedInputStream();\n    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0);\n    ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();\n    boolean boolean0 = zipArchiveInputStream0.canReadEntryData(zipArchiveEntry0);\n}",
    "testName" : "test044"
  },
  "test066" : {
    "methodSignature" : "public long skip(long value) throws IOException",
    "methodName" : "skip",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066() throws Throwable {\n    PipedInputStream pipedInputStream0 = new PipedInputStream();\n    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0);\n    zipArchiveInputStream0.close();\n    zipArchiveInputStream0.skip(16L);\n}",
    "testName" : "test066"
  },
  "test088" : {
    "methodSignature" : "public long skip(long value) throws IOException",
    "methodName" : "skip",
    "className" : "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088() throws Throwable {\n    ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);\n    zipArchiveInputStream0.skip((-1167L));\n}",
    "testName" : "test088"
  }
}